/**
 *	UI module: ScoresHeader server side
 */
#Const Version		"2021-03-16"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/FinalTMGL/UIModules/ScoresHeader_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Common.Script.txt" as UIModules_Common
#Include "ManiaApps/Nadeo/TMNext/TrackMania/FinalTMGL/UIModules/ScoresHeader_Common.Script.txt" as UIModules_ScoresHeader_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_ScoresHeader_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::ComponentModeLibsUIModules_K_ModuleConfig GetConfig() {
	return UIModules_ScoresHeader_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set the clans' color
 *	CTeam::ColorPrimary does not support the full spectrum
 *	of color. It is limited to be compatible with the
 *	color display on 3D elements (player, poles, gates) of Shootmania.
 *	To display the true team color in the UI we must
 *	send it separately.
 */
Void SetClansColors(Vec3[Integer] _ClansColors) {
	declare netwrite Vec3[Integer] Net_FinalTMGL_ScoresHeaders_ClansColors for Teams[0];
	if (_ClansColors.count > 0 || Net_FinalTMGL_ScoresHeaders_ClansColors.count > 0) {
		declare netwrite Integer Net_FinalTMGL_ScoresHeaders_ClansColorsUpdate for Teams[0];
		Net_FinalTMGL_ScoresHeaders_ClansColors = _ClansColors;
		Net_FinalTMGL_ScoresHeaders_ClansColorsUpdate += 1;
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set the clans' name
 *	There are only two teams in the `Teams` array
 *	If we need more teams we have to create our own array
 */
Void SetClansNames(Text[Integer] _ClansNames) {
	declare netwrite Text[Integer] Net_FinalTMGL_ScoresHeaders_ClansNames for Teams[0];
	if (_ClansNames.count > 0 || Net_FinalTMGL_ScoresHeaders_ClansNames.count > 0) {
		declare netwrite Integer Net_FinalTMGL_ScoresHeaders_ClansNamesUpdate for Teams[0];
		Net_FinalTMGL_ScoresHeaders_ClansNames = _ClansNames;
		Net_FinalTMGL_ScoresHeaders_ClansNamesUpdate += 1;
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set the clans' score
 *	There are only two clans in the `ClansScores` array
 *	If we need more clans we have to create our own array
 */
Void SetClansScores(Integer[Integer] _ClansScores) {
	declare netwrite Integer[Integer] Net_FinalTMGL_ScoresHeaders_ClansScores for Teams[0];
	if (_ClansScores.count > 0 || Net_FinalTMGL_ScoresHeaders_ClansScores.count > 0) {
		declare netwrite Integer Net_FinalTMGL_ScoresHeaders_ClansScoresUpdate for Teams[0];
		Net_FinalTMGL_ScoresHeaders_ClansScores = _ClansScores;
		Net_FinalTMGL_ScoresHeaders_ClansScoresUpdate += 1;
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Set the number of points necessary
 *	to be qualified to the next stage
 *	Use 0 or less to disable
 */
Void SetQualificationPoints(Integer _QualificationPoints) {
	declare netwrite Integer Net_FinalTMGL_ScoresHeaders_QualificationPoints for Teams[0];
	Net_FinalTMGL_ScoresHeaders_QualificationPoints = _QualificationPoints;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Enable or disable final mode
Void SetFinal(Boolean _IsFinal) {
	declare netwrite Boolean Net_FinalTMGL_ScoresHeaders_IsFinal for Teams[0];
	Net_FinalTMGL_ScoresHeaders_IsFinal = _IsFinal;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Enable or disable the head to head mode
Void SetHeadToHead(Boolean _IsHeadToHead) {
	declare netwrite Boolean Net_FinalTMGL_ScoresHeaders_IsHeadToHead for Teams[0];
	Net_FinalTMGL_ScoresHeaders_IsHeadToHead = _IsHeadToHead;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	
	declare netwrite Boolean Net_FinalTMGL_ScoresHeader_IsVisible for _Player;
	Net_FinalTMGL_ScoresHeader_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetClansColors([]);
	SetClansNames([]);
	SetClansScores([]);
	SetQualificationPoints(0);
	SetFinal(False);
	SetHeadToHead(False);
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}