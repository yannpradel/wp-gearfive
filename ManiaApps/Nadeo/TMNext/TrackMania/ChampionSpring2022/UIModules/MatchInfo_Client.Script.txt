/**
 *	UI module: MatchInfo client side
 */
#Const Version		"2022-03-09"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/ChampionSpring2022/UIModules/MatchInfo_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as MenuConst
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/ChampionCommon/PlayerProfiles.Script.txt" as PlayerProfiles
#Include "ManiaApps/Nadeo/TMNext/TrackMania/ChampionSpring2022/UIModules/MatchInfo_Common.Script.txt" as UIModules_MatchInfo_Common
#Include "ManiaApps/Nadeo/TMNext/TrackMania/ChampionCommon/Shared_Client.Script.txt" as Shared
#Include "ManiaApps/Nadeo/TMNext/TrackMania/ChampionCommon/ZIndex.Script.txt" as ZIndex
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constant
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const UIModules_MatchInfo_Common::C_MatchLevel_Seeding as C_MatchLevel_Seeding
#Const UIModules_MatchInfo_Common::C_MatchLevel_Bronze as C_MatchLevel_Bronze
#Const UIModules_MatchInfo_Common::C_MatchLevel_Silver as C_MatchLevel_Silver
#Const UIModules_MatchInfo_Common::C_MatchLevel_Gold as C_MatchLevel_Gold
#Const UIModules_MatchInfo_Common::C_MatchLevel_Champion as C_MatchLevel_Champion
#Const UIModules_MatchInfo_Common::C_MatchName_Seeding as C_MatchName_Seeding
#Const UIModules_MatchInfo_Common::C_MatchName_Bronze as C_MatchName_Bronze
#Const UIModules_MatchInfo_Common::C_MatchName_Silver as C_MatchName_Silver
#Const UIModules_MatchInfo_Common::C_MatchName_Gold as C_MatchName_Gold
#Const UIModules_MatchInfo_Common::C_MatchName_Champion as C_MatchName_Champion

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_MatchInfo_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_MatchInfo_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Champion MatchInfo] Displayed beside the best time of the race
	declare Text Text_BestTime = _("Best time");
	//L16N [Champion MatchInfo] Text displayed when a player improves the best time
	declare Text Text_NewBestTime = _("New best time");
	//L16N [Champion MatchInfo] Displayed beside the world record time
	declare Text Text_WorldRecord = _("World record");
	//L16N [Champion MatchInfo] Text displayed when a player improves the world record time
	declare Text Text_NewWorldRecord = _("New world record");
	//L16N [Champion MatchInfo] Display the track progression. %1 will be replaced by the number of the track, e.g. "Track 2" or "Track 2/5" 
	declare Text_TrackProgression = _("|TrackProgression|Track %1");

	declare Text Color_Text = "ffffff";
	declare Text Color_Background = ColorPalette::C_Color_DarkBlue;
	declare Text Color_HihglighText = ColorPalette::C_Color_GreenOne;

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-bold" textfont="{{{FontManager::C_GameFontExtraBold}}}" textcolor="{{{Color_Text}}}" textsize="3" textprefix="$t$i" />
</stylesheet>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_MatchInfo}}}" size="320 180" halign="center" valign="center" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_MatchInfo_Common::C_UIModuleConfig)}}}>
		<frame id="frame-visibility-anim">
			<frame pos="0 13.5" id="frame-track-info">
				<quad z-index="0" size="60 9" valign="center" opacity="0.7" bgcolor="{{{Color_Background}}}" />
				<label id="label-track-name" pos="1 -0.5" z-index="1" size="35 8" valign="center2" class="text-bold" />
				<label id="label-track-progress" pos="59 -0.5" z-index="2" size="22 8" halign="right" valign="center2" textcolor="{{{Color_HihglighText}}}" class="text-bold" />
			</frame>
			<frame id="frame-match-level" size="15 15" valign="center">
				<quad z-index="0" size="15 15" valign="center" opacity="0.7" bgcolor="{{{Color_Background}}}" />
				<quad id="quad-match-level" pos="7.5 1.5" z-index="1" size="9 9" halign="center" valign="center" autoscale="0" />
				<label id="label-match-name" pos="7.5 -5.5" z-index="2" size="13 6" halign="center" valign="center2" textsize="1" class="text-bold" />
			</frame>
			<frame pos="16.9 0" size="43 15" valign="center">
				<frame id="frame-best-time-info" hidden="1">
					<frame id="frame-best-time-current" z-index="1">
						<quad z-index="0" size="43 15" valign="center" opacity="0.7" bgcolor="{{{Color_Background}}}" />
						<frame z-index="1">
							<label id="label-time-legend" pos="1 2" size="33 10" valign="center2" textsize="1.25" class="text-bold" text="{{{Text_BestTime}}}" />
							<quad pos="42 2.2" z-index="1" size="8 8" halign="right" valign="center" image="{{{MenuConst::C_ImageUrl_Champion_Icon_BestLap}}}" colorize="{{{Color_HihglighText}}}" />
							<label id="label-best-time-current-player" pos="1 -3.25" size="25 6" valign="center2" textsize="1.25" class="text-bold" />
							<label id="label-best-time-current-time" pos="42 -3.25" size="15 6" halign="right" valign="center2" textsize="1.5" class="text-bold" />
						</frame>
					</frame>
					<frame id="frame-best-time-new" pos="44 0" z-index="2" hidden="1">
						<quad id="quad-best-time-new-bg" z-index="0" size="43 15" valign="center" opacity="0.6" bgcolor="{{{ColorPalette::C_Color_GreenTwo}}}" />
						<label id="label-new-time-legend" pos="21.5 2" z-index="1" size="42 10" halign="center" valign="center2" textsize="2" class="text-bold" text="{{{Text_NewBestTime}}}" />
						<label id="label-best-time-new-player" pos="21.5 -3.25" z-index="1" size="42 6" halign="center" valign="center2" textsize="1.25" textcolor="{{{ColorPalette::C_Color_GreenFive}}}" class="text-bold" />
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CommonLibs/Common/AudioManager_ML.Script.txt" as AudioManager
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools

#Struct K_Controls {
	CMlFrame Frame_VisibilityAnim;
	CMlQuad Quad_MatchLevel;
	CMlLabel Label_MatchName;
	CMlFrame Frame_BestTimeInfo;
	CMlFrame Frame_BestTimeCurrent;
	CMlLabel Label_TimeLegend;
	CMlLabel Label_BestTimeCurrentPlayer;
	CMlLabel Label_BestTimeCurrentTime;
	CMlFrame Frame_BestTimeNew;
	CMlQuad Quad_BestTimeNewBg;
	CMlLabel Label_NewTimeLegend;
	CMlLabel Label_BestTimeNewPlayer;
	CMlFrame Frame_TrackInfo;
	CMlLabel Label_TrackName;
	CMlLabel Label_TrackProgress;
}
#Struct K_BestTimeAnim {
	Boolean Active;
	Integer UpdateNameTime;
	Integer AnimEndTime;
	Text Name;
	Integer Time;
}
#Struct K_State {
	K_Controls Controls;
	Boolean MatchInfoIsVisible;
	K_BestTimeAnim BestTimeAnim;
}

#Const C_BestTimeDisplayDuration 2500
#Const C_BestTimeSound "BestLap"
#Const C_MedalsPath "file://Media/Manialinks/Nadeo/TMNext/Modes/Champion/Medals"
#Const C_HideMatchLevel True

#Const C_MatchLevel_Seeding {{{dump(C_MatchLevel_Seeding)}}}
#Const C_MatchLevel_Bronze {{{dump(C_MatchLevel_Bronze)}}}
#Const C_MatchLevel_Silver {{{dump(C_MatchLevel_Silver)}}}
#Const C_MatchLevel_Gold {{{dump(C_MatchLevel_Gold)}}}
#Const C_MatchLevel_Champion {{{dump(C_MatchLevel_Champion)}}}
#Const C_MatchName_Seeding {{{dump(C_MatchName_Seeding)}}}
#Const C_MatchName_Bronze {{{dump(C_MatchName_Bronze)}}}
#Const C_MatchName_Silver {{{dump(C_MatchName_Silver)}}}
#Const C_MatchName_Gold {{{dump(C_MatchName_Gold)}}}
#Const C_MatchName_Champion {{{dump(C_MatchName_Champion)}}}
""",
"""
K_State SetVisibility(K_State _State, Boolean _LiveRankingIsVisible, Boolean _PlayAnim) {
	declare K_State State = _State;

	State.MatchInfoIsVisible = _LiveRankingIsVisible;

	if (C_HideMatchLevel) AnimMgr.Flush(_State.Controls.Frame_VisibilityAnim);
	AnimMgr.Flush(_State.Controls.Frame_BestTimeInfo);

	if (State.MatchInfoIsVisible) {
		if (_PlayAnim) {
			if (C_HideMatchLevel) AnimMgr.Add(_State.Controls.Frame_VisibilityAnim, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_State.Controls.Frame_BestTimeInfo, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			if (C_HideMatchLevel) {
				_State.Controls.Frame_VisibilityAnim.Visible = True;
				_State.Controls.Frame_VisibilityAnim.RelativePosition_V3.X = 0.;
			}
			_State.Controls.Frame_BestTimeInfo.Visible = True;
			_State.Controls.Frame_BestTimeInfo.RelativePosition_V3.X = 0.;
		}
	} else {
		if (_PlayAnim) {
			if (C_HideMatchLevel) AnimMgr.Add(_State.Controls.Frame_VisibilityAnim, "<frame pos=\"-60 0\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_State.Controls.Frame_BestTimeInfo, "<frame pos=\"-45.25 0\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			if (C_HideMatchLevel) {
				_State.Controls.Frame_VisibilityAnim.Visible = False;
				_State.Controls.Frame_VisibilityAnim.RelativePosition_V3.X = -60.;
			}
			_State.Controls.Frame_BestTimeInfo.Visible = False;
			_State.Controls.Frame_BestTimeInfo.RelativePosition_V3.X = -45.25;
		}
	}

	return State;
}

K_State SetBestTime(
	K_State _State,
	Text _WebServicesUserId,
	Integer _Time,
	Boolean _IsWorldRecord,
	Boolean _IsInit,
	Text _OverrideName,
	Boolean _PlaySound
) {
	declare K_State State = _State;

	State.BestTimeAnim = K_BestTimeAnim {
		Active = False,
		UpdateNameTime = -1,
		AnimEndTime = -1,
		Name = "",
		Time = -1
	};

	if (_IsWorldRecord) {
		State.Controls.Label_TimeLegend.Value = "{{{Text_WorldRecord}}}";
		State.Controls.Label_NewTimeLegend.Value = "{{{Text_NewWorldRecord}}}";
	} else {
		State.Controls.Label_TimeLegend.Value = "{{{Text_BestTime}}}";
		State.Controls.Label_NewTimeLegend.Value = "{{{Text_NewBestTime}}}";
	}

	AnimMgr.Flush(State.Controls.Frame_BestTimeCurrent);
	AnimMgr.Flush(State.Controls.Frame_BestTimeNew);
	State.Controls.Frame_BestTimeCurrent.RelativePosition_V3.X = 0.;
	State.Controls.Frame_BestTimeNew.RelativePosition_V3.X = 44.;
	State.Controls.Frame_BestTimeCurrent.Visible = True;
	State.Controls.Frame_BestTimeNew.Visible = False;
	
	if ((_WebServicesUserId == "" && _OverrideName == "") || _Time <= 0) {
		State.Controls.Label_BestTimeCurrentPlayer.Value = "-";
		State.Controls.Label_BestTimeCurrentTime.Value = "--:--.---";
	} else {
		declare Text Nickname = _WebServicesUserId;
		if (_OverrideName != "") {
			Nickname = _OverrideName;
		} else if ({{{PlayerProfiles::P}}}GetPlayerProfiles().existskey(_WebServicesUserId)) {
			Nickname = {{{PlayerProfiles::P}}}GetPlayerProfiles()[_WebServicesUserId].Nickname;
		} else {
			foreach (Score in Scores) {
				if (Score.User.WebServicesUserId == _WebServicesUserId) {
					Nickname = Score.User.Name;
					break;
				}
			}
		}
		if (_IsInit) {
			State.Controls.Label_BestTimeCurrentPlayer.Value = Nickname;
			State.Controls.Label_BestTimeCurrentTime.Value = TL::TimeToText(_Time, True, True);
		} else {
			State.Controls.Label_BestTimeNewPlayer.Value = Nickname;
			State.BestTimeAnim = K_BestTimeAnim {
				Active = True,
				UpdateNameTime = Now + 250,
				AnimEndTime = Now + C_BestTimeDisplayDuration,
				Name = Nickname,
				Time = _Time
			};
			AnimMgr.Add(State.Controls.Frame_BestTimeCurrent, "<frame pos=\"-44 0\" hidden=\"1\" />", Now, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Frame_BestTimeNew, "<frame pos=\"0 0\" hidden=\"0\" />", Now, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Frame_BestTimeCurrent, "<frame pos=\"44 0\" hidden=\"1\" />", Now + 251, 1, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Frame_BestTimeCurrent, "<frame pos=\"0 0\" hidden=\"0\" />", Now + C_BestTimeDisplayDuration - 250, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Frame_BestTimeNew, "<frame pos=\"-44 0\" hidden=\"1\" />", Now + C_BestTimeDisplayDuration - 250, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			if (_PlaySound) {
				AudioManager::StopSound(This, C_BestTimeSound);
				AudioManager::PlaySound(This, C_BestTimeSound);
			}
		}
	}

	return State;
}

Void SetMatchLevel(K_State _State, Integer _MatchLevel) {
	switch (_MatchLevel) {
		case C_MatchLevel_Champion: {
			_State.Controls.Quad_MatchLevel.ImageUrl = C_MedalsPath^"/Champion.dds";
			_State.Controls.Label_MatchName.Value = C_MatchName_Champion;
		}
		case C_MatchLevel_Gold: {
			_State.Controls.Quad_MatchLevel.ImageUrl = C_MedalsPath^"/Gold.dds";
			_State.Controls.Label_MatchName.Value = C_MatchName_Gold;
		}
		case C_MatchLevel_Silver: {
			_State.Controls.Quad_MatchLevel.ImageUrl = C_MedalsPath^"/Silver.dds";
			_State.Controls.Label_MatchName.Value = C_MatchName_Silver;
		}
		case C_MatchLevel_Bronze: {
			_State.Controls.Quad_MatchLevel.ImageUrl = C_MedalsPath^"/Bronze.dds";
			_State.Controls.Label_MatchName.Value = C_MatchName_Bronze;
		}
		default: {
			_State.Controls.Quad_MatchLevel.ImageUrl = C_MedalsPath^"/Seeding.dds";
			_State.Controls.Label_MatchName.Value = C_MatchName_Seeding;
		}
	}
	Tools::FitLabelValue(_State.Controls.Label_MatchName, 1., 0.5, 0.1);
}

Void SetTrackInfo(K_State _State, CMap _Map, Int2 _TrackProgress) {
	if (_Map != Null) {
		_State.Controls.Label_TrackName.Value = _Map.MapName;
		_State.Controls.Label_TrackName.Visible = True;
		Tools::FitLabelValue(_State.Controls.Label_TrackName, 3., 1., 0.5);
	} else {
		_State.Controls.Label_TrackName.Visible = False;	
	}
	
	if (_TrackProgress.X > 0) {
		declare Text Progress = ""^_TrackProgress.X;
		if (_TrackProgress.Y > 0) {
			Progress ^= "/"^_TrackProgress.Y;
		}
		_State.Controls.Label_TrackProgress.Value = TL::Compose("{{{Text_TrackProgression}}}", Progress);
		_State.Controls.Label_TrackProgress.Visible = True;
		Tools::FitLabelValue(_State.Controls.Label_TrackProgress, 3., 1., 0.5);
	} else {
		_State.Controls.Label_TrackProgress.Visible = False;
	}

	_State.Controls.Frame_TrackInfo.Visible = (
		_State.Controls.Label_TrackName.Visible ||
		_State.Controls.Label_TrackProgress.Visible
	);
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare netread Boolean Net_ChampionSpring2022_MatchInfo_IsVisible for UI;
declare netread Integer Net_ChampionSpring2022_MatchInfo_BestTimeUpdate for Teams[0];
declare netread Text Net_ChampionSpring2022_MatchInfo_BestTimePlayer for Teams[0];
declare netread Integer Net_ChampionSpring2022_MatchInfo_BestTime for Teams[0];
declare netread Boolean Net_ChampionSpring2022_MatchInfo_IsWorldRecord for Teams[0];
declare netread Boolean Net_ChampionSpring2022_MatchInfo_IsInit for Teams[0];
declare netread Text Net_ChampionSpring2022_MatchInfo_OverrideName for Teams[0];
declare netread Integer Net_ChampionSpring2022_MatchInfo_MatchLevel for Teams[0];
declare netread Int2 Net_ChampionSpring2022_MatchInfo_TrackProgress for Teams[0];

declare K_State State;
declare Boolean DisplayModule;
declare Integer BestTimeUpdate;
declare Text BestTimePlayer;
declare Integer BestTime;
declare Boolean LiveRankingIsVisible;
declare Integer MatchLevel;
declare Int2 TrackProgress;
declare Text MapUid;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_VisibilityAnim <=> (Frame_Global.GetFirstChild("frame-visibility-anim") as CMlFrame);
State.Controls.Quad_MatchLevel <=> (Frame_Global.GetFirstChild("quad-match-level") as CMlQuad);
State.Controls.Label_MatchName <=> (Frame_Global.GetFirstChild("label-match-name") as CMlLabel);
State.Controls.Frame_BestTimeInfo <=> (Frame_Global.GetFirstChild("frame-best-time-info") as CMlFrame);
State.Controls.Frame_BestTimeCurrent <=> (State.Controls.Frame_BestTimeInfo.GetFirstChild("frame-best-time-current") as CMlFrame);
State.Controls.Label_TimeLegend <=> (State.Controls.Frame_BestTimeCurrent.GetFirstChild("label-time-legend") as CMlLabel);
State.Controls.Label_BestTimeCurrentPlayer <=> (State.Controls.Frame_BestTimeCurrent.GetFirstChild("label-best-time-current-player") as CMlLabel);
State.Controls.Label_BestTimeCurrentTime <=> (State.Controls.Frame_BestTimeCurrent.GetFirstChild("label-best-time-current-time") as CMlLabel);
State.Controls.Frame_BestTimeNew <=> (State.Controls.Frame_BestTimeInfo.GetFirstChild("frame-best-time-new") as CMlFrame);
State.Controls.Quad_BestTimeNewBg <=> (State.Controls.Frame_BestTimeNew.GetFirstChild("quad-best-time-new-bg") as CMlQuad);
State.Controls.Label_NewTimeLegend <=> (State.Controls.Frame_BestTimeNew.GetFirstChild("label-new-time-legend") as CMlLabel);
State.Controls.Label_BestTimeNewPlayer <=> (State.Controls.Frame_BestTimeNew.GetFirstChild("label-best-time-new-player") as CMlLabel);
State.Controls.Frame_TrackInfo <=> (Frame_Global.GetFirstChild("frame-track-info") as CMlFrame);
State.Controls.Label_TrackName <=> (State.Controls.Frame_TrackInfo.GetFirstChild("label-track-name") as CMlLabel);
State.Controls.Label_TrackProgress <=> (State.Controls.Frame_TrackInfo.GetFirstChild("label-track-progress") as CMlLabel);

DisplayModule = Frame_Global.Visible;
BestTimeUpdate = -1;
BestTimePlayer = "";
BestTime = -1;
LiveRankingIsVisible = {{{Shared::P}}}LiveRankingIsVisible();
MatchLevel = Net_ChampionSpring2022_MatchInfo_MatchLevel;
TrackProgress = Net_ChampionSpring2022_MatchInfo_TrackProgress;
if (Map == Null || Map.MapInfo == Null) {
	MapUid = "";
} else {
	MapUid = Map.MapInfo.MapUid;
}

State = SetVisibility(State, LiveRankingIsVisible, False);
State = SetBestTime(State, "", 0, False, False, "", False);
SetMatchLevel(State, MatchLevel);
SetTrackInfo(State, Map, TrackProgress);
***

***MainLoop***
***
if (PageIsVisible) {
	if (DisplayModule != Net_ChampionSpring2022_MatchInfo_IsVisible) {
		DisplayModule = Net_ChampionSpring2022_MatchInfo_IsVisible;
		Frame_Global.Visible = DisplayModule;
	}

	if (LiveRankingIsVisible != {{{Shared::P}}}LiveRankingIsVisible()) {
		LiveRankingIsVisible = {{{Shared::P}}}LiveRankingIsVisible();
		State = SetVisibility(State, LiveRankingIsVisible, True);
	}

	if (BestTimeUpdate != Net_ChampionSpring2022_MatchInfo_BestTimeUpdate) {
		BestTimeUpdate = Net_ChampionSpring2022_MatchInfo_BestTimeUpdate;
		// Play sound only if the panel is visible and the user is spectating someone
		declare Boolean PlaySound = (
			State.MatchInfoIsVisible &&
			InputPlayer != Null &&
			InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && (
				BestTimePlayer != Net_ChampionSpring2022_MatchInfo_BestTimePlayer ||
				BestTime != Net_ChampionSpring2022_MatchInfo_BestTime
			)
		);
		BestTimePlayer = Net_ChampionSpring2022_MatchInfo_BestTimePlayer;
		BestTime = Net_ChampionSpring2022_MatchInfo_BestTime;
		State = SetBestTime(
			State,
			Net_ChampionSpring2022_MatchInfo_BestTimePlayer,
			Net_ChampionSpring2022_MatchInfo_BestTime,
			Net_ChampionSpring2022_MatchInfo_IsWorldRecord,
			Net_ChampionSpring2022_MatchInfo_IsInit,
			Net_ChampionSpring2022_MatchInfo_OverrideName,
			PlaySound
		);
	}

	if (State.BestTimeAnim.Active) {
		State.Controls.Quad_BestTimeNewBg.Opacity = 0.8 + (ML::Sin(Now / 100.) * 0.2);

		if (State.BestTimeAnim.UpdateNameTime >= 0 && Now >= State.BestTimeAnim.UpdateNameTime) {
			State.Controls.Label_BestTimeCurrentPlayer.Value = State.BestTimeAnim.Name;
			State.Controls.Label_BestTimeCurrentTime.Value = TL::TimeToText(State.BestTimeAnim.Time, True, True);
			State.BestTimeAnim.UpdateNameTime = -1;
		}

		if (Now >= State.BestTimeAnim.AnimEndTime) {
			State.BestTimeAnim.Active = False;
		}
	}

	if (MatchLevel != Net_ChampionSpring2022_MatchInfo_MatchLevel) {
		MatchLevel = Net_ChampionSpring2022_MatchInfo_MatchLevel;
		SetMatchLevel(State, MatchLevel);
	}

	if (
		TrackProgress != Net_ChampionSpring2022_MatchInfo_TrackProgress ||
		(Map != Null && Map.MapInfo != Null && MapUid != Map.MapInfo.MapUid) ||
		((Map == Null || Map.MapInfo == Null) && MapUid != "")
	) {
		TrackProgress = Net_ChampionSpring2022_MatchInfo_TrackProgress;
		if (Map == Null || Map.MapInfo == Null) {
			MapUid = "";
		} else {
			MapUid = Map.MapInfo.MapUid;
		}
		SetTrackInfo(State, Map, TrackProgress);
	}
}
***
""",
[
	UIModules::Component(),
	PlayerProfiles::Component(),
	Shared::Component()
],
[]
	);
}