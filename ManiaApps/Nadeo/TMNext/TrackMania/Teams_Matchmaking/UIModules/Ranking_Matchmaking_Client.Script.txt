/**
 *	UI module: Ranking_Matchmaking client side
 */
#Const Version		"2023-03-22"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/UIModules/Ranking_Matchmaking_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/UIModules/Ranking_Matchmaking_Common.Script.txt" as UIModules_Ranking_Matchmaking_Common
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ProgressBar.Script.txt" as ProgressBar
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Img_ProgressionBg "file://Media/Manialinks/Nadeo/TMNext/Modes/Matchmaking/Ranked_PodiumScene_Gradient.dds"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_Ranking_Matchmaking_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_Ranking_Matchmaking_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Ranking Matchmaking] Message displayed when the blue team wins the match
	declare Text Text_WinningTeamBlue = _("Blue team won!");
	//L16N [Ranking Matchmaking] Message displayed when the red team wins the match
	declare Text Text_WinningTeamRed = _("Red team won!");
	//L16N [Ranking Matchmaking] MVP means "Most valuable player", if "Most Valuable Player" is not common in your language please translate by "Best Player" 
	declare Text Text_MVP = _("MVP");
	//L16N [Ranking Matchmaking] Message displayed when we didn't receive the news player's scores in time
	declare Text Text_NoResults = _("Rank results will be available later in the menu, sorry for the delay.");

	declare Vec2 Size_ProgressBarBg = MLHelpers::KeepRatioFromX(<1920., 292.>, 320.);
	declare Vec2 Size_TeamMember = <67., 9.>;
	declare Vec2 Size_TeamMemberName = <Size_TeamMember.X * 0.8, Size_TeamMember.Y>;
	declare Vec2 Pos_TeamMemberName = <Size_TeamMember.X * 0.15, Size_TeamMember.Y * -0.5>;	
	declare Vec2 Pos_TeamMemberFlag = <Size_TeamMember.X * 0.14, Size_TeamMember.Y * -0.48>;

	declare Text ML_TeamMembersList = "";
	declare Integer PosX = 0;
	for (I, 1, 3) {
		ML_TeamMembersList ^= """
			<frameinstance modelid="framemodel-team-member" pos="{{{PosX}}} 0" hidden="1"/>
		""";
		PosX += 100;
	}

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-default" halign="center" valign="center2" textsize="5" textcolor="FFF" textprefix="$t$i" textfont="{{{FontManager::C_GameFontSemiBold}}}" />
	<style class="quad-default" halign="center" valign="center" />
</stylesheet>

<framemodel id="framemodel-team-member">
	<quad id="quad-bg" z-index="-1" size="{{{Size_TeamMember.X}}} {{{Size_TeamMember.Y}}}" image="{{{Const::C_ImageUrl_Matchmaking_Intro_Team_Left}}}" opacity="0.8"/>
	<quad id="quad-flag" halign="right" valign="center" size="8.5 6" pos="{{{Pos_TeamMemberFlag.X}}} {{{Pos_TeamMemberFlag.Y}}}" alphamask="{{{Const::C_ImageUrl_Matchmaking_Flag_Mask}}}" z-index="2" />
	<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" pos="{{{Pos_TeamMemberName.X}}} {{{Pos_TeamMemberName.Y}}}" z-index="2" data-size="{{{Size_TeamMemberName.X}}} {{{Size_TeamMemberName.Y}}}" data-valign="center" data-textprefix="$t$i" data-textfont="{{{FontManager::C_GameFontSemiBold}}}" data-textsize="5" />
	<frame id="frame-mvp" pos="28 -12.5" hidden="1">
		<quad id="quad-mvp-bg" z-index="-1" size="{{{Size_TeamMember.X - 15.}}} {{{Size_TeamMember.Y - 2.}}}" class="quad-default" image="{{{Const::C_ImageUrl_Matchmaking_MVP_Bg}}}" opacity="0.8"/>
		<quad id="quad-mvp-icon" size="6 6" class="quad-default" pos="-22 0.5" image="{{{Const::C_ImageUrl_Matchmaking_MVP_Icon}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}"/>
		<label id="label-mvp" size="{{{Size_TeamMember.X - 30.}}} {{{Size_TeamMember.Y - 2.}}}" pos="2 0" class="text-default" textsize="3" text="{{{Text_MVP}}}" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" textfont="{{{FontManager::C_GameFontExtraBold}}}"/>
	</frame>
</framemodel>

<frame z-index="2" hidden="1" id="frame-global">
	<frame {{{UIModules::CustomizableUIModule(UIModules_Ranking_Matchmaking_Common::C_UIModuleConfig)}}}>
		<frame id="frame-content">
			<frame id="frame-winning-team" pos="0 60">
				<label id="label-winning-team" size="150 40" class="text-default" textsize="10" textfont="{{{FontManager::C_GameFontExtraBold}}}"/>
				<quad id="quad-winning-team" z-index="-1" size="150 22" pos="5 1" class="quad-default" image="{{{Const::C_ImageUrl_Matchmaking_Winner_Flare}}}" />
			</frame>
			<frame id="frame-team-members" pos="-134 12">
				{{{ML_TeamMembersList}}}
			</frame>
			<frameinstance id="frame-progress-bar" pos="0 -70" modelid="{{{ProgressBar::C_Name}}}" />			
			<label id="label-no-results" hidden="1" pos="0 -70" size="200 20" text="{{{Text_NoResults}}}" textsize="4"  class="text-default" textprefix="$i" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
		</frame>
	</frame>
</frame>
<quad id="quad-progress-bar-bg" pos="0 -90" z-index="-2" {{{MLHelpers::Size(Size_ProgressBarBg)}}} halign="center" valign="bottom" fullscreen="1" image="{{{C_Img_ProgressionBg}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.9" hidden="1" />
<quad id="quad-background" z-index="-3" size="320 180" class="quad-default" fullscreen="1" opacity="0.4" hidden="1" />
""",
"""
#Include "TextLib" as TL
#Include "ColorLib" as CL
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/PrestigeEarned_Common.Script.txt" as UIModules_PrestigeEarned_Common

#Struct K_Player_Rank {
	Text CurrentDivision;
	Integer CurrentProgression;
	Integer NewProgression;
}

#Const C_AnimDuration 2000
#Const C_AnimStartDelay 2000
#Const C_ProgressBarAnimStartDelay 5000

#Const C_ShowWinnersSound "ShowWinners"
""",
"""
declare K_Player_Rank G_CurrentPlayerRank;

Void UpdateTeamMembersDisplay(CMlFrame _Frame_TeamMembers, {{{MatchmakingStruct::P}}}K_TeamMember[Integer] _TeamMembers, Vec3 _TeamMembersColor, Text _MVPAccountId) {
	foreach (Index => Control in _Frame_TeamMembers.Controls) {
		declare CMlFrame Frame_TeamMember = Control as CMlFrame;
		declare CMlFrame PlayerName_Name <=> Frame_TeamMember.GetFirstChild("playername-name") as CMlFrame;
		declare CMlQuad Quad_Bg <=> Frame_TeamMember.GetFirstChild("quad-bg") as CMlQuad;
		declare CMlFrame Frame_MVP <=> Frame_TeamMember.GetFirstChild("frame-mvp") as CMlFrame;
		declare CMlQuad Quad_MVPBg <=> Frame_MVP.GetFirstChild("quad-mvp-bg") as CMlQuad;

		Quad_Bg.Colorize = _TeamMembersColor;
		Quad_MVPBg.Colorize = _TeamMembersColor;
		if (_TeamMembers.existskey(Index)) {
			Frame_TeamMember.Visible = True;
			Frame_MVP.Visible = (_TeamMembers[Index].AccountId == _MVPAccountId);
			{{{PlayerName::P}}}SetAccountId(This, PlayerName_Name, _TeamMembers[Index].AccountId, True);
			declare CMlQuad Quad_Flag <=> Frame_TeamMember.GetFirstChild("quad-flag") as CMlQuad;
			if (_TeamMembers[Index].FlagUrl != "") {
				Quad_Flag.ChangeImageUrl(_TeamMembers[Index].FlagUrl);
			} else {
				Quad_Flag.ChangeImageUrl("");
			}
			Quad_Flag.Visible = (Quad_Flag.ImageUrl != "");
		} else {
			Frame_TeamMember.Visible = False;
		}
	}
}

Void UpdateTeamsMembers(CMlFrame _Frame_TeamMembers, Integer _TeamId, {{{MatchmakingStruct::P}}}K_TeamMember[Integer] _TeamMembers, Text _MVPAccountId) {
	declare Vec3 TeamMembersColor;
	if (_TeamId == 0) {
		TeamMembersColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Blue_Nickname}}}");
	} else if (_TeamId == 1) {
		TeamMembersColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Red_Nickname}}}");
	}

	UpdateTeamMembersDisplay(_Frame_TeamMembers, _TeamMembers, TeamMembersColor, _MVPAccountId);
}

Void AnimOpacityOnFrameControls(CMlFrame _Frame, Integer _AnimDuration, CAnimManager::EAnimManagerEasing _EasingFct) {
	AnimMgr.Flush(_Frame);
	foreach (Control in _Frame.Controls) {
		switchtype (Control) {
			case CMlLabel: {
				declare CMlLabel Label = (Control as CMlLabel);
				Label.Opacity = 0.;
				AnimMgr.Flush(Label);
				AnimMgr.Add(Label, "<a opacity=\"1.\"/>", _AnimDuration, _EasingFct);
			}
			case CMlQuad: {
				declare CMlQuad Quad = (Control as CMlQuad);
				Quad.Opacity = 0.;
				AnimMgr.Flush(Quad);
				declare Real TargetOpacity = 1.;
				if (Control.ControlId == "quad-bg" || Control.ControlId == "quad-mvp-bg") TargetOpacity = 0.8;
				AnimMgr.Add(Quad, "<a opacity=\""^TargetOpacity^"\"/>", _AnimDuration, _EasingFct);
			}
			case CMlFrame: {
				if ({{{PlayerName::P}}}IsPlayerName(Control)) {
					declare CMlFrame PlayerName_Name <=> (Control as CMlFrame);
					{{{PlayerName::P}}}SetOpacity(This, PlayerName_Name, 0., 0);
					{{{PlayerName::P}}}SetOpacity(This, PlayerName_Name, 1., _AnimDuration);
				}
			}
		}
	}
}

Void AnimTeamMembers(CMlFrame _Frame_TeamMembers) {
	_Frame_TeamMembers.Visible = True;
	_Frame_TeamMembers.RelativePosition_V3.Y = -30.;
	AnimMgr.Flush(_Frame_TeamMembers);
	AnimMgr.Add(_Frame_TeamMembers, "<anim pos=\"" ^_Frame_TeamMembers.RelativePosition_V3.X^" "^12.^ "\" />", C_AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);

	{{{MenuSounds::P}}}PlaySound(This, C_ShowWinnersSound);

	foreach (Frame_Member in _Frame_TeamMembers.Controls) { 
		if (Frame_Member is CMlFrame) {
			AnimOpacityOnFrameControls(Frame_Member as CMlFrame, C_AnimDuration, CAnimManager::EAnimManagerEasing::QuadIn);
			foreach (Child_Frame in (Frame_Member as CMlFrame).Controls) {
				if (Child_Frame is CMlFrame) {
					AnimOpacityOnFrameControls(Child_Frame as CMlFrame, C_AnimDuration, CAnimManager::EAnimManagerEasing::QuadIn);
					foreach (GrandChild_Frame in (Child_Frame as CMlFrame).Controls) {
						if (GrandChild_Frame is CMlFrame) AnimOpacityOnFrameControls(GrandChild_Frame as CMlFrame, C_AnimDuration, CAnimManager::EAnimManagerEasing::QuadIn);
					}
				}
			}
		}
	}
}

Void AnimWinningTeam(CMlFrame _Frame_WinningTeam) {
	_Frame_WinningTeam.Visible = True;
	AnimOpacityOnFrameControls(_Frame_WinningTeam, C_AnimDuration + C_AnimStartDelay, CAnimManager::EAnimManagerEasing::QuartIn);
}

Integer CheckPlayerTopPosition(Integer _PlayerScore, {{{MatchmakingStruct::P}}}K_PlayerLeaderboard[] _Top10) {
	declare PlayerTopPosition = -1;
	if (_PlayerScore >= {{{ProgressBar::P}}}GetTop10MinPoints()) {
		foreach(Top in _Top10) {
			if (Top.AccountId == LocalUser.WebServicesUserId) {
				PlayerTopPosition = Top.Rank;
				break;
			}
		}
	}
	return PlayerTopPosition;
}

Boolean UpdateMapHasPodium(
	CPlaygroundClient _Playground,
	Boolean _DisplayModule,
	CMlFrame _Frame_WinningTeam,
	CMlFrame _Frame_TeamMembers,
	CMlQuad _Quad_Bg,
	CMlQuad _Quad_ProgressBarBg
) {
	declare Boolean MapHasPodium = (_Playground != Null && _Playground.HasPodium);

	if (MapHasPodium) {
		_Frame_WinningTeam.Visible = False;
		_Frame_TeamMembers.Visible = False;
	}
	_Quad_Bg.Visible = _DisplayModule && !MapHasPodium;
	_Quad_ProgressBarBg.Visible = _DisplayModule && MapHasPodium;

	return MapHasPodium;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Content;
declare CMlQuad Quad_Bg;
declare CMlQuad Quad_ProgressBarBg;
declare CMlFrame Frame_WinningTeam;
declare CMlLabel Label_WinningTeam;
declare CMlQuad Quad_WinningTeam;
declare CMlFrame Frame_TeamMembers;
declare CMlFrame Frame_ProgressBar;
declare CMlLabel Label_NoResults;

declare netread Integer Net_Teams_Matchmaking_WinningTeamId for Teams[0];
declare netread Text Net_Teams_Matchmaking_MVPAccountId for Teams[0];
declare netread {{{MatchmakingStruct::P}}}K_MatchParticipants Net_Teams_Matchmaking_MatchParticipants for Teams[0];
declare netread Integer Net_Teams_Matchmaking_MatchParticipants_Update for Teams[0];
declare netread {{{MatchmakingStruct::P}}}K_Division[Text] Net_Teams_Matchmaking_Divisions for Teams[0];
declare netread Integer Net_Teams_Matchmaking_Divisions_Update for Teams[0];
declare netread {{{MatchmakingStruct::P}}}K_TeamMember[Integer] Net_Teams_Matchmaking_BlueTeamMembers_V2 for Teams[0];
declare netread {{{MatchmakingStruct::P}}}K_TeamMember[Integer] Net_Teams_Matchmaking_RedTeamMembers_V2 for Teams[0];
declare netread {{{MatchmakingStruct::P}}}K_PlayerLeaderboard[] Net_Teams_Matchmaking_Top10 for Teams[0];
declare netread Integer Net_Teams_Matchmaking_Top10_Update for Teams[0];

declare Boolean DisplayModule;
declare Integer WinningTeamId = -123;
declare Text MVPAccountId;
declare Integer DivisionsUpdate;
declare Integer Top10Update;
declare Integer MatchParticipantsUpdate;
declare Integer AnimStartTime = -1;
declare Boolean AnimTeamMembersDone = False;
declare Boolean AnimProgressBarDone = False;
declare {{{MatchmakingStruct::P}}}K_TeamMember[Integer] WinningTeamMembers = [];
declare {{{MatchmakingStruct::P}}}K_TeamMember[Integer] LosingTeamMembers = [];
declare Text[] AccountIds;
declare Boolean MapHasPodium;
declare Integer UnblockPrestigeTimestamp;
***

***MainStart***
***
Quad_Bg <=> (Page.GetFirstChild("quad-background") as CMlQuad);
Quad_ProgressBarBg <=> (Page.GetFirstChild("quad-progress-bar-bg") as CMlQuad);
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Content <=> (Frame_Global.GetFirstChild("frame-content") as CMlFrame);
Frame_WinningTeam <=> (Frame_Global.GetFirstChild("frame-winning-team") as CMlFrame);
Label_WinningTeam <=> (Frame_WinningTeam.GetFirstChild("label-winning-team") as CMlLabel);
Quad_WinningTeam <=> (Frame_WinningTeam.GetFirstChild("quad-winning-team") as CMlQuad);
Frame_TeamMembers <=> (Frame_Content.GetFirstChild("frame-team-members") as CMlFrame);
Frame_ProgressBar <=> (Frame_Content.GetFirstChild("frame-progress-bar") as CMlFrame);
Label_NoResults <=> (Frame_Global.GetFirstChild("label-no-results") as CMlLabel);

MapHasPodium = UpdateMapHasPodium(Playground, DisplayModule, Frame_WinningTeam, Frame_TeamMembers, Quad_Bg, Quad_ProgressBarBg);

DisplayModule = Frame_Global.Visible;
foreach (Control in Frame_TeamMembers.Controls) {
	declare Label_MVP <=> (Control as CMlFrame).GetFirstChild("label-mvp") as CMlLabel;
	Tools::FitLabelValue(Label_MVP, 3., 0.8, 0.25);
}
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Teams_Matchmaking_Ranking_Matchmaking_IsVisible for Owner;
		if (DisplayModule != Net_Teams_Matchmaking_Ranking_Matchmaking_IsVisible) {
			DisplayModule = Net_Teams_Matchmaking_Ranking_Matchmaking_IsVisible;
			Frame_Global.Visible = DisplayModule;
			MapHasPodium = UpdateMapHasPodium(Playground, DisplayModule, Frame_WinningTeam, Frame_TeamMembers, Quad_Bg, Quad_ProgressBarBg);
			if (Frame_Global.Visible) {
				AnimStartTime = Now;
				AnimTeamMembersDone = False;
				AnimProgressBarDone = False;
				WinningTeamId = -123;
				Frame_TeamMembers.Visible = False;
				Frame_ProgressBar.Visible = False;
				Label_NoResults.Visible = False;
				G_CurrentPlayerRank.CurrentDivision = "";
				G_CurrentPlayerRank.CurrentProgression = -1;
				G_CurrentPlayerRank.NewProgression = -1;
				WinningTeamMembers = [];
				LosingTeamMembers = [];
			}
		}
	}

	if (DivisionsUpdate != Net_Teams_Matchmaking_Divisions_Update) {
		{{{ProgressBar::P}}}SetDivisions(Net_Teams_Matchmaking_Divisions);
		DivisionsUpdate = Net_Teams_Matchmaking_Divisions_Update;
	}

	if (Top10Update != Net_Teams_Matchmaking_Top10_Update && G_CurrentPlayerRank.NewProgression != -1) {
		if (Net_Teams_Matchmaking_Top10.count > 0) {
			{{{ProgressBar::P}}}SetDivisions(Net_Teams_Matchmaking_Divisions, Net_Teams_Matchmaking_Top10[9].Score, 
			Net_Teams_Matchmaking_Top10[0].Score);
		}
		Top10Update = Net_Teams_Matchmaking_Top10_Update;
	}

	if (Frame_Global.Visible) {
		if (
			(Playground != Null && MapHasPodium != Playground.HasPodium) ||
			(Playground == Null && MapHasPodium)
		) {
			MapHasPodium = UpdateMapHasPodium(Playground, DisplayModule, Frame_WinningTeam, Frame_TeamMembers, Quad_Bg, Quad_ProgressBarBg);
		}

		if (!AnimTeamMembersDone && AnimStartTime > 0 && AnimStartTime + C_AnimStartDelay <= Now ) {
			AnimTeamMembers(Frame_TeamMembers);
			AnimTeamMembersDone = True;
		}
	
		if (!AnimProgressBarDone && AnimStartTime > 0 && AnimStartTime + C_ProgressBarAnimStartDelay <= Now) {
			if (G_CurrentPlayerRank.CurrentProgression != -1 && G_CurrentPlayerRank.NewProgression != -1 && G_CurrentPlayerRank.CurrentDivision != "") {
				{{{ProgressBar::P}}}SetProgressBarValueWithDelta(
					Frame_ProgressBar, 
					G_CurrentPlayerRank.CurrentProgression, 
					(G_CurrentPlayerRank.NewProgression - G_CurrentPlayerRank.CurrentProgression), 
					-1, 
					G_CurrentPlayerRank.CurrentDivision,
					CheckPlayerTopPosition(G_CurrentPlayerRank.NewProgression, Net_Teams_Matchmaking_Top10)
				);
				AnimProgressBarDone = True;
			} else { //That means we didn't receive the CLUB API results in time
				Label_NoResults.Show();
			}
		}

		if (MVPAccountId != Net_Teams_Matchmaking_MVPAccountId) {
			MVPAccountId = Net_Teams_Matchmaking_MVPAccountId;
		}

		if (!MapHasPodium && WinningTeamId != Net_Teams_Matchmaking_WinningTeamId) {
			WinningTeamId = Net_Teams_Matchmaking_WinningTeamId;
			if (WinningTeamId >= 0) {
				if (WinningTeamId == 0) {
					Label_WinningTeam.Value = "{{{Text_WinningTeamBlue}}}";
					Quad_WinningTeam.Colorize = CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Blue_Flare}}}");
					Quad_Bg.BgColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Blue_Bg}}}");
					WinningTeamMembers = Net_Teams_Matchmaking_BlueTeamMembers_V2;
					LosingTeamMembers = Net_Teams_Matchmaking_RedTeamMembers_V2;
				} else if (WinningTeamId == 1) {
					Label_WinningTeam.Value = "{{{Text_WinningTeamRed}}}";
					Quad_WinningTeam.Colorize = CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Red_Flare}}}");
					Quad_Bg.BgColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Red_Bg}}}");
					WinningTeamMembers = Net_Teams_Matchmaking_RedTeamMembers_V2;
					LosingTeamMembers = Net_Teams_Matchmaking_BlueTeamMembers_V2;
				}
				Tools::FitLabelValue(Label_WinningTeam, 10., 7., 0.5);
				AnimWinningTeam(Frame_WinningTeam);
				UnblockPrestigeTimestamp = Now + 7000;
				UIModules_PrestigeEarned_Common::BlockPrestigeCelebration(UI, "{{{UIModules_Ranking_Matchmaking_Common::C_Id}}}");
				foreach (Member in Net_Teams_Matchmaking_RedTeamMembers_V2) AccountIds.add(Member.AccountId);
				foreach (Member in Net_Teams_Matchmaking_BlueTeamMembers_V2) AccountIds.add(Member.AccountId);
				UpdateTeamsMembers(Frame_TeamMembers, WinningTeamId, WinningTeamMembers, MVPAccountId);
			}
		}

		if (UIModules_PrestigeEarned_Common::IsBlockingPrestigeCelebration(UI, "{{{UIModules_Ranking_Matchmaking_Common::C_Id}}}") && Now >= UnblockPrestigeTimestamp) {
			UIModules_PrestigeEarned_Common::UnblockPrestigeCelebration(UI, "{{{UIModules_Ranking_Matchmaking_Common::C_Id}}}");
		}

		if (MatchParticipantsUpdate != Net_Teams_Matchmaking_MatchParticipants_Update) {
			if (Net_Teams_Matchmaking_MatchParticipants.Participants.existskey(LocalUser.WebServicesUserId)) {
				declare {{{MatchmakingStruct::P}}}K_PlayerProgression Participant = Net_Teams_Matchmaking_MatchParticipants.Participants[LocalUser.WebServicesUserId];
				if (!Net_Teams_Matchmaking_MatchParticipants.IsCompleted) {
					Label_NoResults.Hide();
					Frame_ProgressBar.Visible = True;
					G_CurrentPlayerRank.CurrentDivision = Participant.CurrentDivision;
					G_CurrentPlayerRank.CurrentProgression = Participant.CurrentProgression;
					{{{ProgressBar::P}}}SetProgressBarValue(
						Frame_ProgressBar,
						G_CurrentPlayerRank.CurrentProgression,
						G_CurrentPlayerRank.CurrentDivision,
						CheckPlayerTopPosition(G_CurrentPlayerRank.CurrentProgression, Net_Teams_Matchmaking_Top10)
					);
				}	else {
					G_CurrentPlayerRank.NewProgression = Participant.CurrentProgression;
				}
			}
			MatchParticipantsUpdate = Net_Teams_Matchmaking_MatchParticipants_Update;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
		MapHasPodium = UpdateMapHasPodium(Playground, DisplayModule, Frame_WinningTeam, Frame_TeamMembers, Quad_Bg, Quad_ProgressBarBg);
	}
}
***
""",
[
	ProgressBar::Component(),
	MatchmakingStruct::Component(),
	MenuSounds::ComponentV2(),
	UIModules::Component(),
	PlayerName::ComponentV2()
],
[]
	);
}