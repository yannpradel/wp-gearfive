/**
 *	UI module: EndMatch_Teams client side
 */
#Const Version		"2023-03-22"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/UIModules/EndMatch_Teams_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/UIModules/EndMatch_Teams_Common.Script.txt" as UIModules_EndMatch_Teams_Common
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/Teams_Matchmaking/Constants.Script.txt" as MM_Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PlayerRank.Script.txt" as PlayerRank
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ProfilePlayerInfo.Script.txt" as ProfilePlayerInfo
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuButtonList.Script.txt" as MenuButtonList
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_NavGroup_Page "navgroup-endmatch-matchmaking"
#Const C_NavGroup_Profile "navgroup-endmatch-matchmaking-profile"
#Const C_PopUpName "EndMatchPopUp"

#Const C_Class_TeamMember	"endmatch-teams-class-team-member"

#Const C_Img_PopUpHeader "file://Media/Manialinks/Nadeo/TMNext/Modes/Race/HUD_scorestable_header.dds"
#Const C_Img_PopUpBg "file://Media/Manialinks/Nadeo/TMNext/Modes/Race/HUD_scorestable_body.dds"
#Const C_Img_PlayerLineBg "file://Media/Manialinks/Nadeo/TMNext/Modes/Matchmaking/Matchmaking_scoretable_name_bg.dds"
#Const C_Img_ScoreLineBg "file://Media/Manialinks/Nadeo/TMNext/Modes/Race/HUD_scorestable_line_score.dds"
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_EndMatch_Teams_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_EndMatch_Teams_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [EndMatch Matchmaking] End of the match
	declare Text Text_EndMatch = _("Match is over");
	//L16N [EndMatch Matchmaking] Winners of the match
	declare Text Text_Winners = _("Winners");
	//L16N [EndMatch Matchmaking] Blue team name
	declare Text Text_BlueTeam = _("Blue team");
	//L16N [EndMatch Matchmaking] Red team name
	declare Text Text_RedTeam = _("Red team");
	//L16N [EndMatch Matchmaking] Quit game button
	declare Text Text_Quit = _("Quit");
	//L16N [EndMatch Matchmaking] %1 will be replaced by the name of the author of the track, e.g. "by Darrek"
	declare Text Text_By = _("by %1");
	//L16N [EndMatch Matchmaking] %1 will be replaced by the matchmaking match id (useful to debug), e.g. "Match Id:LID-MTCH-mrsmf2buapizcux"
	declare Text Text_MatchId = _("Match Id: %1");
	//L16N [EndMatch Matchmaking] Indicate the match will end soon (s is the abreviation of second), %1 will be replaced by a number e.g "Leaving match in 3s"
	declare Text Text_GoBackMenu = _("Leaving match in %1s");

	declare Vec2 Size_Background = <260., 260.>;
	declare Vec2 Winners_Pos = <-5., 35.>;
	declare Vec2 Losers_Pos = <Const::C_MenuSkew*-70, -15.>;

	declare Vec2 Size_TeamMemberNavZone = <(784. / 52.) * 13.1, 8.>; //784 x 52
	declare Vec2 Size_TeamMember = <(784. / 52.) * 9. * 0.85, 7.5>; //784 x 52
	declare Vec2 Size_TeamMemberName = <Size_TeamMember.X * 0.7, Size_TeamMember.Y>;
	declare Real Size_TeamMemberRankY = Size_TeamMember.Y * 1.;
	declare Vec2 Pos_TeamMemberFlag = <Size_TeamMember.X * -0.12, Size_TeamMember.Y * -0.48>;
	declare Vec2 Pos_TeamMemberRank = <Size_TeamMember.X * 0.01, - Size_TeamMemberRankY/2.>;
	declare Vec2 Pos_TeamMemberName = <Size_TeamMember.X * 0.08, Size_TeamMember.Y * -0.52>;
	declare Vec2 Pos_TeamMemberMVP = <Size_TeamMember.X * 0.98, Size_TeamMember.Y * -0.5>;
	declare Vec2 Size_TeamMemberBestTime = <(448. / 128.) * 10., 10.>; // 448 x 128
	declare Vec2 Pos_TeamMemberBestTime = <Size_TeamMember.X + (Size_TeamMemberBestTime.X * 0.44), Size_TeamMemberBestTime.Y * -0.4>;
	declare Vec2 Size_TeamMemberScore = <(448. / 128.) * 10., 10.>; // 448 x 128
	declare Vec2 Pos_TeamMemberScore = <Size_TeamMember.X + (Size_TeamMemberScore.X * 1.3), Size_TeamMemberScore.Y * -0.4>;
		
	declare Text ML_RedTeamMembersList = "";
	declare Text ML_BlueTeamMembersList = "";
	declare Real PosX = 20.;
	declare Real PosY = 0.;
	// Red team members
	for (I, 1, 3) {
		declare Text DownTarget = "frame-red-member-"^I+1;
		declare Text UpTarget = "frame-red-member-"^I-1;
		if (I == 1) UpTarget = "button-quit";
		if (I == 3) DownTarget = "button-quit";
		ML_RedTeamMembersList ^= """
			<frameinstance 
				modelid="framemodel-team-member" 
				pos="{{{PosX}}} {{{PosY}}}"
				data-nav-inputs="up;down;select;cancel"
				data-nav-targets="{{{UpTarget}}};{{{DownTarget}}};_;_"
				data-nav-group="{{{C_NavGroup_Page}}}"
				data-nav-zone="quad-nav-zone"
				class="{{{Navigation::C_Class}}} {{{C_Class_TeamMember}}}"
				size="{{{Size_TeamMember.X}}} {{{Size_TeamMember.Y}}}"
				id="frame-red-member-{{{I}}}"
				hidden="0"
			/>
		""";
		PosX -= Const::C_MenuSkew * 12.;
		PosY -= 12.;
	}

	// Blue team members
	PosX = 20.;
	PosY = 0.;
	for (I, 1, 3) {
		declare Text DownTarget = "frame-blue-member-"^I+1;
		declare Text UpTarget = "frame-blue-member-"^I-1;
		if (I == 1) UpTarget = "button-quit";
		if (I == 3) DownTarget = "button-quit";
		ML_BlueTeamMembersList ^= """
			<frameinstance 
				modelid="framemodel-team-member" 
				pos="{{{PosX}}} {{{PosY}}}"
				data-nav-inputs="up;down;select;cancel"
				data-nav-targets="{{{UpTarget}}};{{{DownTarget}}};_;_"
				data-nav-group="{{{C_NavGroup_Page}}}"
				data-nav-zone="quad-nav-zone"
				class="{{{Navigation::C_Class}}} {{{C_Class_TeamMember}}}"
				size="{{{Size_TeamMember.X}}} {{{Size_TeamMember.Y}}}"
				id="frame-blue-member-{{{I}}}"
				hidden="0"
			/>
		""";
		PosX -= Const::C_MenuSkew * 12.;
		PosY -= 12.;
	}

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-default" halign="center" valign="center2" textsize="5" textcolor="FFF" textprefix="$t$i" textfont="{{{FontManager::C_GameFontExtraBold}}}" />
	<style class="quad-default" halign="center" valign="center" />
</stylesheet>

<framemodel id="framemodel-team-member">
	<quad id="quad-nav-zone" scriptevents="1" class="{{{Navigation::C_Class_ActivationZone}}}" pos="{{{-0.1 * Size_TeamMemberNavZone.X}}} 0.25" size="{{{Size_TeamMemberNavZone.X}}} {{{Size_TeamMemberNavZone.Y}}}" image="{{{C_Img_PlayerLineBg}}}" opacity="0."/>
	<quad id="quad-bg" z-index="-1" size="{{{Size_TeamMember.X}}} {{{Size_TeamMember.Y}}}" image="{{{C_Img_PlayerLineBg}}}" colorize="{{{ColorPalette::C_Color_Team_Blue_Bg}}}" opacity="0.5"/>
	<quad id="quad-flag" pincorners="<-0.78,1.>:<1.,1.>:<0.78,-1.>:<-1.,-1.>" size="12 7.3" halign="right" valign="center" pos="{{{Pos_TeamMemberFlag.X}}} {{{Pos_TeamMemberFlag.Y}}}" z-index="2" />
	<frameinstance modelid="{{{PlayerRank::C_Name}}}" id="frame-player-rank" z-index="2" pos="{{{Pos_TeamMemberRank.X}}} {{{Pos_TeamMemberRank.Y}}}" scale="{{{Size_TeamMemberRankY / 10.}}}"/>
	<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" pos="{{{Pos_TeamMemberName.X}}} {{{Pos_TeamMemberName.Y}}}" z-index="2" data-size="{{{Size_TeamMemberName.X}}} {{{Size_TeamMemberName.Y}}}" data-valign="center" data-textprefix="$t$i" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" data-textsize="3.5" />
	<quad id="quad-mvp-icon" hidden="1" halign="right" size="7 7" class="quad-default" pos="{{{Pos_TeamMemberMVP.X}}} {{{Pos_TeamMemberMVP.Y}}}" image="{{{Const::C_ImageUrl_Matchmaking_MVP_Icon}}}" colorize="FFF"/>
	<quad id="quad-best-time-bg" z-index="-1" size="{{{Size_TeamMemberBestTime.X}}} {{{Size_TeamMemberBestTime.Y}}}" pos="{{{Size_TeamMember.X - 2.25}}} 1.2" image="{{{C_Img_ScoreLineBg}}}" opacity="0.5" colorize="{{{ColorPalette::C_Color_GreenFive}}}"/>
	<label id="label-best-time" size="{{{Size_TeamMemberBestTime.X * 0.8}}} {{{Size_TeamMemberBestTime.Y}}}" class="text-default" opacity="0.8" textsize="3.5" pos="{{{Pos_TeamMemberBestTime.X}}} {{{Pos_TeamMemberBestTime.Y}}}" textfont="{{{FontManager::C_GameFontRegular}}}" z-index="2"/>
	<quad id="quad-score-bg" z-index="-1" size="{{{Size_TeamMemberScore.X}}} {{{Size_TeamMemberScore.Y}}}" pos="{{{Size_TeamMember.X + 29.}}} 1.2" image="{{{C_Img_ScoreLineBg}}}" opacity="0.5" colorize="{{{ColorPalette::C_Color_GreenFive}}}"/>
	<label id="label-score" size="{{{Size_TeamMemberScore.X * 0.5}}} {{{Size_TeamMemberScore.Y}}}" class="text-default" textsize="3.5" pos="{{{Pos_TeamMemberScore.X}}} {{{Pos_TeamMemberScore.Y}}}" textfont="{{{FontManager::C_GameFontSemiBold}}}" z-index="2"/>
</framemodel>

<frame hidden="1" id="frame-global">
	<frame {{{UIModules::CustomizableUIModule(UIModules_EndMatch_Teams_Common::C_UIModuleConfig)}}}>
		<frame id="frame-content">
			<frameinstance modelid="{{{MenuButtonList::C_Name}}}" id="frame-button-list-endmatch-ranked"/>
			<frameinstance
				modelid="{{{PopUpBackground::C_Name}}}"
				z-index="-1"
				data-pop-up-name="{{{C_PopUpName}}}"
				data-background-url="{{{C_Img_PopUpBg}}}"
				data-background-size="{{{Size_Background.X}}} {{{Size_Background.Y}}}"
				data-background-position="0 3"
				data-background-opacity="0.8"
				data-header-background-url="{{{C_Img_PopUpHeader}}}"
				data-header-background-size="{{{Size_Background.X}}} {{{Size_Background.Y}}}"
				data-header-background-position="0 3"
				data-button-close-opacity="0"
			/>

			<frameinstance
				modelid="{{{ProfilePlayerInfo::C_Name}}}"
				id="frame-profile"
				z-index="3"
				data-enable-players-pager="1"
				data-enable-zone-selection="0"
				data-enable-my-access-info="0"
				data-nav-group="{{{C_NavGroup_Profile}}}"
				hidden="1"
			/>

			<frame pos="0 72">
				<label pos="{{{Size_Background.X*0.45}}} 0" size="{{{Size_Background.X*0.4}}} 10" text="{{{Text_EndMatch}}}" halign="right" class="text-default" textsize="8"/>
				<label id="label-map-name" pos="{{{-Size_Background.X*0.33}}} 0" size="{{{Size_Background.X*0.4}}} 10" halign="left" class="text-default" textsize="8" filter-profanities="Always"/>
				<label id="label-map-author" pos="{{{-Size_Background.X*0.335}}} -7" size="{{{Size_Background.X*0.4}}} 10" halign="left" class="text-default" textsize="4" textfont="{{{FontManager::C_GameFontRegular}}}"/>
				<label id="label-players-nb" pos="{{{-Size_Background.X*0.35}}} -17" size="{{{Size_Background.X*0.4}}} 10" halign="left" class="text-default" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
				<label id="label-timer" pos="{{{Size_Background.X*0.43}}} -17" halign="right" size="{{{Size_Background.X*0.4}}} 10" class="text-default" textsize="3" textprefix="$i" textfont="{{{FontManager::C_GameFontRegular}}}"/>	
			</frame>

			<label pos="6 44" size="100 10" text="{{{Text_Winners}}}" textsize="4" class="text-default" textfont="{{{FontManager::C_GameFontSemiBold}}}" />
			
			<frame id="frame-blue-team">
				<label size="100 10" pos="10 0" text="{{{Text_BlueTeam}}}" textsize="6" class="text-default" textcolor="{{{ColorPalette::C_Color_Team_Blue_Nickname}}}" />
				<label id="label-blue-team-score" size="10 10" pos="92 0" textsize="6" class="text-default" textcolor="{{{ColorPalette::C_Color_Team_Blue_Nickname}}}" />
				<frame id="frame-team-blue-members" pos="-90 -5">
					{{{ML_BlueTeamMembersList}}}
				</frame>
			</frame>

			<frame id="frame-red-team">
				<label size="110 10" pos="10 0" text="{{{Text_RedTeam}}}" textsize="6" class="text-default" textcolor="{{{ColorPalette::C_Color_Team_Red_Nickname}}}" />
				<label id="label-red-team-score" size="10 10" pos="92 0" textsize="6" class="text-default" textcolor="{{{ColorPalette::C_Color_Team_Red_Nickname}}}" />
				<frame id="frame-team-red-members" pos="-90 -5">
					{{{ML_RedTeamMembersList}}}
				</frame>
			</frame>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-quit"
				pos="-10 -75" z-index="2"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{Text_Quit}}}"
				data-size="62 14"
				data-labelsize="44 14.5"
				data-textxpos="0.5"
				data-opacityunfocus=".5"
				data-image="{{{Const::C_ImageUrl_ButtonBG_LocalMulti_Play}}}"
				data-imagefocus="{{{Const::C_ImageUrl_ButtonBG_LocalMulti_Play}}}"
				data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-focuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-textcolor="FFF"
				data-textfocuscolor="FFF"
				data-textsize="5"
				data-textopacityunfocus=".5"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textitalicslope=".2"
				data-halign="center"
				data-valign="bottom"
				data-nav-inputs="up;select;cancel"
				data-nav-targets="frame-blue-member-3;_;_"
				data-nav-group="{{{C_NavGroup_Page}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<label id="label-match-id" size="65 5" pos="127 82" class="text-default" textfont="{{{FontManager::C_GameFontSemiBold}}}" halign="right" textsize="2" focusareacolor1="00000000" focusareacolor2="00000030" scriptevents="1"/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CommonLibs/Common/Task.Script.txt" as Task
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils

#Struct K_Controls {
	CMlFrame Frame_TeamBlueMembers;
	CMlFrame Frame_TeamRedMembers;
}
""",
"""
Void UpdateTeamMembersDisplay(CMlFrame _Frame_TeamMembers, {{{MatchmakingStruct::P}}}K_TeamMember[Integer] _TeamMembers, Vec3 _TeamMembersBgColor, Text _MVPAccountId) {
	foreach (Index => Control in _Frame_TeamMembers.Controls) {
		declare CMlFrame Frame_TeamMember = Control as CMlFrame;
		declare CMlFrame PlayerName_Name <=> Frame_TeamMember.GetFirstChild("playername-name") as CMlFrame;
		declare CMlLabel Label_Score <=> Frame_TeamMember.GetFirstChild("label-score") as CMlLabel;
		declare CMlLabel Label_BestTime <=> Frame_TeamMember.GetFirstChild("label-best-time") as CMlLabel;
		declare CMlQuad Quad_Bg <=> Frame_TeamMember.GetFirstChild("quad-bg") as CMlQuad;
		declare CMlQuad Quad_ScoreBg <=> Frame_TeamMember.GetFirstChild("quad-score-bg") as CMlQuad;
		declare CMlQuad IconMVP <=> Frame_TeamMember.GetFirstChild("quad-mvp-icon") as CMlQuad;

		Quad_Bg.Colorize = _TeamMembersBgColor;
		if (_TeamMembers.existskey(Index)) {
			// Stock accountId value here to retrieve CUser in OpenProfile() later
			declare Text AccountId for Frame_TeamMember;
			AccountId = _TeamMembers[Index].AccountId;

			Frame_TeamMember.Visible = True;
			if (LocalUser != Null && LocalUser.WebServicesUserId == AccountId) {
				{{{PlayerName::P}}}SetTextColor(This, PlayerName_Name, {{{ColorPalette::C_Color_Vec3_GreenOne}}}, False);
				IconMVP.Colorize = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenOne}}}");
			}	else {
				{{{PlayerName::P}}}SetTextColor(This, PlayerName_Name, {{{ColorPalette::C_Color_Vec3_White}}}, False);
				IconMVP.Colorize = <1., 1., 1.>;
			} 
			IconMVP.Visible = (_TeamMembers[Index].AccountId == _MVPAccountId);
			{{{PlayerName::P}}}SetAccountId(This, PlayerName_Name, _TeamMembers[Index].AccountId, True, False);
			{{{PlayerName::P}}}Redraw(This, PlayerName_Name);
			Label_Score.Value = TL::ToText(_TeamMembers[Index].Score);
			if (_TeamMembers[Index].BestTime == -1) Label_BestTime.Value = "--:--.---";
			else Label_BestTime.Value = TL::TimeToText(_TeamMembers[Index].BestTime, True, True);
			declare CMlQuad Quad_Flag <=> Frame_TeamMember.GetFirstChild("quad-flag") as CMlQuad;
			if (_TeamMembers[Index].FlagUrl != "") {
				Quad_Flag.ChangeImageUrl(_TeamMembers[Index].FlagUrl);
			} else {
				Quad_Flag.ChangeImageUrl("");
			}
			Quad_Flag.Visible = (Quad_Flag.ImageUrl != "");
		} else {
			Frame_TeamMember.Visible = False;
		}
		{{{Navigation::P}}}Lock(Frame_TeamMember, !Frame_TeamMember.Visible);
	}
}

Void UpdateTeamsMembers(K_Controls _Controls, {{{MatchmakingStruct::P}}}K_TeamMember[Integer] _TeamBlueMembers, {{{MatchmakingStruct::P}}}K_TeamMember[Integer] _TeamRedMembers, Text _MVPAccountId) {
	UpdateTeamMembersDisplay(_Controls.Frame_TeamBlueMembers, _TeamBlueMembers, CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Blue_Nickname}}}"), _MVPAccountId);
	UpdateTeamMembersDisplay(_Controls.Frame_TeamRedMembers, _TeamRedMembers, CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Red_Nickname}}}"), _MVPAccountId);
}

Void UpdateTeamsMembersRankDisplay(K_Controls _Controls, {{{MatchmakingStruct::P}}}K_TeamMember[Integer] _TeamBlueMembers, {{{MatchmakingStruct::P}}}K_TeamMember[Integer] _TeamRedMembers, {{{MatchmakingStruct::P}}}K_MatchParticipants _MatchParticipants) {
	declare Text[] TeamBlueMembersDivisions;
	declare Text[] TeamRedMembersDivisions;
	
	foreach (Member in _TeamBlueMembers) {
		if (_MatchParticipants.Participants.existskey(Member.AccountId)) {
			TeamBlueMembersDivisions.add(_MatchParticipants.Participants[Member.AccountId].CurrentDivision);
		}
	}
	foreach (Member in _TeamRedMembers) {
		if (_MatchParticipants.Participants.existskey(Member.AccountId)) {
			TeamRedMembersDivisions.add(_MatchParticipants.Participants[Member.AccountId].CurrentDivision);
		}
	}

	foreach (Index => Control in _Controls.Frame_TeamBlueMembers.Controls) {
		declare Frame_PlayerRank <=> (Control as CMlFrame).GetFirstChild("frame-player-rank") as CMlFrame;
		if (TeamBlueMembersDivisions.existskey(Index)) {
			Frame_PlayerRank.Show();
			{{{PlayerRank::P}}}UpdatePlayerRank(Frame_PlayerRank, TeamBlueMembersDivisions[Index]);
		} else {
			Frame_PlayerRank.Hide();
		}
	}
	foreach (Index => Control in _Controls.Frame_TeamRedMembers.Controls) {
		declare Frame_PlayerRank <=> (Control as CMlFrame).GetFirstChild("frame-player-rank") as CMlFrame;
		if (TeamRedMembersDivisions.existskey(Index)) {
			Frame_PlayerRank.Show();
			{{{PlayerRank::P}}}UpdatePlayerRank(Frame_PlayerRank, TeamRedMembersDivisions[Index]);
		} else {
			Frame_PlayerRank.Hide();
		}
	}
}

Void FocusMember(CMlFrame _Frame_TeamMember, Boolean _Focus) {
	if (_Frame_TeamMember == Null) return;
	declare CMlQuad Quad_Bg <=> _Frame_TeamMember.GetFirstChild("quad-bg") as CMlQuad;
	declare CMlQuad Quad_BestTimeBg <=> _Frame_TeamMember.GetFirstChild("quad-best-time-bg") as CMlQuad;
	declare CMlQuad Quad_ScoreBg <=> _Frame_TeamMember.GetFirstChild("quad-score-bg") as CMlQuad;
	declare Real OpacityBg = 0.5;
	if (_Focus) OpacityBg = 0.9;
	Quad_Bg.Opacity = OpacityBg;
	Quad_BestTimeBg.Opacity = OpacityBg;
	Quad_ScoreBg.Opacity = OpacityBg;
}

Void Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton((_From as CMlFrame))) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if (_From.HasClass("{{{C_Class_TeamMember}}}")) {
			FocusMember((_From as CMlFrame), False);
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton((_To as CMlFrame))) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if (_To.HasClass("{{{C_Class_TeamMember}}}")) {
			FocusMember((_To as CMlFrame), True);
		}
	}
}

Void DisplayProfile(Boolean _Display, CUser _User, CMlFrame _Frame_Profile, CMlFrame _Frame_ButtonList) {	
	if (_Display) {
		{{{ProfilePlayerInfo::P}}}SetUser(_User);
	} else {
		{{{MenuButtonList::P}}}SetButtons(_Frame_ButtonList, ["A" => _("Select"), "B" => "{{{Text_Quit}}}"]);
	}
	{{{ProfilePlayerInfo::P}}}Enable(_Display);
	_Frame_Profile.Visible = _Display;
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Profile}}}", _Display);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Page}}}", !_Display);
}

Void OpenProfile(Text _AccountId, CMlFrame _Frame_Profile) {
	foreach (Score in Scores) {
		if (Score.User != Null && Score.User.WebServicesUserId == _AccountId) {
			DisplayProfile(True, Score.User, _Frame_Profile, Null);
			break;
		}
	}
}

Void Select(CMlControl _Control, CMlFrame _Frame_Profile) {
	if (_Control == Null) return;

	switch (_Control.ControlId) {
		case "button-quit": Playground.QuitServer(False);
	}

	if (_Control.HasClass("{{{C_Class_TeamMember}}}")) {
		declare Text AccountId for _Control;
		OpenProfile(AccountId, _Frame_Profile);
	}
}

Void SetMapAuthorName(CMlLabel _Label_MapAuthor, Text _AuthorName) {
	_Label_MapAuthor.Value = TL::Compose("{{{Text_By}}}", _AuthorName);
	Tools::FitLabelValue(_Label_MapAuthor, 4., 1., 0.5);
	Tools::FirstPartyLogoMatchLuminance(_Label_MapAuthor);
}

Void UpdateNavTargets(Integer _WinningTeamId, CMlFrame _Frame_BlueTeam, CMlFrame _Frame_RedTeam, CMlFrame _ButtonQuit) {
	declare CMlFrame Frame_FirstBlueMember <=> (_Frame_BlueTeam.GetFirstChild("frame-blue-member-1") as CMlFrame);
	declare CMlFrame Frame_LastBlueMember <=> (_Frame_BlueTeam.GetFirstChild("frame-blue-member-3") as CMlFrame);
	declare CMlFrame Frame_FirstRedMember <=> (_Frame_RedTeam.GetFirstChild("frame-red-member-1") as CMlFrame);
	declare CMlFrame Frame_LastRedMember <=> (_Frame_RedTeam.GetFirstChild("frame-red-member-3") as CMlFrame);

	if (_WinningTeamId == 0) {
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_FirstBlueMember, "up", _ButtonQuit.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_LastBlueMember, "down", Frame_FirstRedMember.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_FirstRedMember, "up", Frame_LastBlueMember.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_LastRedMember, "down", _ButtonQuit.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, _ButtonQuit, "up", Frame_LastRedMember.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, _ButtonQuit, "down", Frame_FirstBlueMember.ControlId);
	} else {
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_FirstRedMember, "up", _ButtonQuit.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_LastRedMember, "down", Frame_FirstBlueMember.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_FirstBlueMember, "up", Frame_LastRedMember.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_LastBlueMember, "down", _ButtonQuit.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, _ButtonQuit, "up", Frame_LastBlueMember.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, _ButtonQuit, "down", Frame_FirstRedMember.ControlId);
	}
}

// Stock user's ids in the scores table order
Ident[] StoreUserIds({{{MatchmakingStruct::P}}}K_TeamMember[Integer] _WinningTeam, {{{MatchmakingStruct::P}}}K_TeamMember[Integer] _LosingTeam) {
	declare Ident[] UserIds;
	foreach (Member in _WinningTeam) {
		foreach (Score in Scores) {
			if (Score.User != Null && Member.AccountId == Score.User.WebServicesUserId) {
				UserIds.add(Score.User.Id);
				break;
			}
		}
	}
	foreach (Member in _LosingTeam) {
		foreach (Score in Scores) {
			if (Score.User != Null && Member.AccountId == Score.User.WebServicesUserId) {
				UserIds.add(Score.User.Id);
				break;
			}
		}
	}
	return UserIds;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Content;
declare CMlLabel Label_MapName;
declare CMlLabel Label_MapAuthor;
declare CMlLabel Label_PlayersNb;
declare CMlLabel Label_BlueTeamScore;
declare CMlLabel Label_RedTeamScore;
declare CMlFrame Frame_BlueTeam;
declare CMlFrame Frame_RedTeam;
declare CMlLabel Label_MatchId;
declare CMlLabel Label_Timer;
declare CMlFrame Button_Quit;
declare CMlFrame Frame_Profile;
declare CMlFrame Frame_ButtonList;

declare netread Integer Net_Teams_Matchmaking_EndMatch_DisplayEndTime for Teams[0];
declare netread Text Net_Teams_Matchmaking_MVPAccountId for Teams[0];
declare netread Integer Net_Teams_Matchmaking_WinningTeamId for Teams[0];
declare netread {{{MatchmakingStruct::P}}}K_MatchParticipants Net_Teams_Matchmaking_MatchParticipants for Teams[0];
declare netread Integer Net_Teams_Matchmaking_MatchParticipants_Update for Teams[0];
declare netread {{{MatchmakingStruct::P}}}K_Division[Text] Net_Teams_Matchmaking_Divisions for Teams[0];
declare netread Integer Net_Teams_Matchmaking_Divisions_Update for Teams[0];
declare netread Text Net_Teams_Matchmaking_MatchId for Teams[0];
declare netread {{{MatchmakingStruct::P}}}K_TeamMember[Integer] Net_Teams_Matchmaking_BlueTeamMembers_V2 for Teams[0];
declare netread {{{MatchmakingStruct::P}}}K_TeamMember[Integer] Net_Teams_Matchmaking_RedTeamMembers_V2 for Teams[0];

declare Boolean DisplayModule;
declare Integer PlayersNb;
declare Text AuthorName;
declare Text MapUid;
declare Boolean NeedAuthorDisplayNameUpdate;
declare Text AuthorId;
declare Text MVPAccountId;
declare Text MatchId;
declare Integer WinningTeamId = -123;
declare Integer MatchParticipantsUpdate;
declare Integer DivisionsUpdate;
declare Integer CountdownLeft = -1;
declare Integer DisplayEndTime = -1;
declare Ident[] UserIds;
declare Text[] AccountIds;
declare Task::K_Task Task_RetrieveAuthorDisplayName;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Content <=> (Frame_Global.GetFirstChild("frame-content") as CMlFrame);
Label_MapName <=> (Frame_Content.GetFirstChild("label-map-name") as CMlLabel);
Label_MapAuthor <=> (Frame_Content.GetFirstChild("label-map-author") as CMlLabel);
Label_PlayersNb <=> (Frame_Content.GetFirstChild("label-players-nb") as CMlLabel);
Label_BlueTeamScore <=> (Frame_Content.GetFirstChild("label-blue-team-score") as CMlLabel);
Label_RedTeamScore <=> (Frame_Content.GetFirstChild("label-red-team-score") as CMlLabel);
Frame_BlueTeam <=> (Frame_Content.GetFirstChild("frame-blue-team") as CMlFrame);
Frame_RedTeam <=> (Frame_Content.GetFirstChild("frame-red-team") as CMlFrame);
Label_MatchId <=> (Frame_Content.GetFirstChild("label-match-id") as CMlLabel);
Label_Timer <=> (Frame_Content.GetFirstChild("label-timer") as CMlLabel);
Button_Quit <=> (Frame_Content.GetFirstChild("button-quit") as CMlFrame);
Frame_Profile <=> (Frame_Content.GetFirstChild("frame-profile") as CMlFrame);
Frame_ButtonList <=> (Frame_Content.GetFirstChild("frame-button-list-endmatch-ranked") as CMlFrame);

declare K_Controls Controls = K_Controls { 
	Frame_TeamBlueMembers = (Frame_Content.GetFirstChild("frame-team-blue-members") as CMlFrame),
	Frame_TeamRedMembers = (Frame_Content.GetFirstChild("frame-team-red-members") as CMlFrame)
};

DisplayModule = Frame_Global.Visible;
UserIds = [];
{{{Navigation::P}}}UseLocalEvents(This, True);
{{{ProfilePlayerInfo::P}}}UseLocalEvents(True);
{{{ProfilePlayerInfo::P}}}EnableGarageButton(False);
DisplayProfile(False, Null, Frame_Profile, Frame_ButtonList);
***

***MainLoop***
***
if (DisplayModule && !EnableMenuNavigationInputs) {
	EnableMenuNavigation(True, False, False, Null, {{{MM_Const::C_InputPriority_EndRaceMenu}}});
} else if (!DisplayModule && EnableMenuNavigationInputs) {
	EnableMenuNavigation(False, False, False, Null, {{{MM_Const::C_InputPriority_EndRaceMenu}}});
}

if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Teams_Matchmaking_EndMatch_Teams_IsVisible for Owner;
		if (DisplayModule != Net_Teams_Matchmaking_EndMatch_Teams_IsVisible) {
			DisplayModule = Net_Teams_Matchmaking_EndMatch_Teams_IsVisible;
			Frame_Global.Visible = Net_Teams_Matchmaking_EndMatch_Teams_IsVisible;
			if (Frame_Global.Visible) {
				Label_MatchId.Value = "";
				Label_Timer.Value = "";
				CountdownLeft = -123;
				DisplayEndTime = -1;
				WinningTeamId = -123;
				Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Page}}}"), Button_Quit);
			}
		}
	}

	if (DivisionsUpdate != Net_Teams_Matchmaking_Divisions_Update) {
		{{{PlayerRank::P}}}SetDivisions(Net_Teams_Matchmaking_Divisions);
		DivisionsUpdate = Net_Teams_Matchmaking_Divisions_Update;
	}

	if (Frame_Global.Visible) {
		if (DisplayEndTime != Net_Teams_Matchmaking_EndMatch_DisplayEndTime) {
			DisplayEndTime = Net_Teams_Matchmaking_EndMatch_DisplayEndTime;
		}

		if (DisplayEndTime - GameTime <= 0 && DisplayEndTime != -1) {
			Playground.QuitServer(False);
		}

		if (DisplayEndTime - GameTime > 0) {
			CountdownLeft = (DisplayEndTime - GameTime) / 1000;
			Label_Timer.Value = TL::Compose("{{{Text_GoBackMenu}}}", ""^CountdownLeft);
		}

		if (MVPAccountId != Net_Teams_Matchmaking_MVPAccountId) {
			MVPAccountId = Net_Teams_Matchmaking_MVPAccountId;
		}

		if (MatchId != Net_Teams_Matchmaking_MatchId) {
			MatchId = Net_Teams_Matchmaking_MatchId;
			if (MatchId != "") Label_MatchId.Value = TL::Compose("{{{Text_MatchId}}}", MatchId);
			else Label_MatchId.Value = "";
		}
		
		if (WinningTeamId != Net_Teams_Matchmaking_WinningTeamId) {
			WinningTeamId = Net_Teams_Matchmaking_WinningTeamId;
			if (WinningTeamId >= 0) {
				Label_BlueTeamScore.Value = TL::ToText(ClanScores[1]);
				Label_RedTeamScore.Value = TL::ToText(ClanScores[2]);
				Frame_BlueTeam.RelativePosition_V3 = <0., 0.>;
				Frame_RedTeam.RelativePosition_V3 = <0., 0.>;
				if (WinningTeamId == 0) {
					Frame_BlueTeam.RelativePosition_V3 = {{{Winners_Pos}}};
					Frame_RedTeam.RelativePosition_V3 = {{{Losers_Pos}}};
					UserIds = StoreUserIds(Net_Teams_Matchmaking_BlueTeamMembers_V2, Net_Teams_Matchmaking_RedTeamMembers_V2);
				} else {
					Frame_BlueTeam.RelativePosition_V3 = {{{Losers_Pos}}};
					Frame_RedTeam.RelativePosition_V3 = {{{Winners_Pos}}};
					UserIds = StoreUserIds(Net_Teams_Matchmaking_RedTeamMembers_V2, Net_Teams_Matchmaking_BlueTeamMembers_V2);
				}
				foreach (Member in Net_Teams_Matchmaking_RedTeamMembers_V2) AccountIds.add(Member.AccountId);
				foreach (Member in Net_Teams_Matchmaking_BlueTeamMembers_V2) AccountIds.add(Member.AccountId);
				UpdateTeamsMembers(Controls, Net_Teams_Matchmaking_BlueTeamMembers_V2, Net_Teams_Matchmaking_RedTeamMembers_V2, MVPAccountId);
				UpdateNavTargets(WinningTeamId, Frame_BlueTeam, Frame_RedTeam, Button_Quit);
			}
		}

		if (MatchParticipantsUpdate != Net_Teams_Matchmaking_MatchParticipants_Update) {
			UpdateTeamsMembersRankDisplay(Controls, Net_Teams_Matchmaking_BlueTeamMembers_V2, Net_Teams_Matchmaking_RedTeamMembers_V2, Net_Teams_Matchmaking_MatchParticipants);
			MatchParticipantsUpdate = Net_Teams_Matchmaking_MatchParticipants_Update;
		}

		if (Map != Null) {
			if (MapUid != Map.MapInfo.MapUid)  {
				MapUid = Map.MapInfo.MapUid;
				Label_MapName.Value = {{{CampaignStruct::P}}}TranslateOfficialMapName(Map.MapName, Map.AuthorLogin);
				AuthorId = Map.AuthorLogin;
				if (Map.AuthorNickName != "") SetMapAuthorName(Label_MapAuthor, Map.AuthorNickName);
				else Label_MapAuthor.Value = "";
				NeedAuthorDisplayNameUpdate = True;
			}
		}

		if (NeedAuthorDisplayNameUpdate) {
			NeedAuthorDisplayNameUpdate = False;
			declare Text DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(AuthorId);
			if (DisplayName == "" && UserMgr.MainUser != Null) {
				Task_RetrieveAuthorDisplayName = Task::DestroyAndCreate(Task_RetrieveAuthorDisplayName, UserMgr, UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), [AuthorId]));
			} else {
				SetMapAuthorName(Label_MapAuthor, DisplayName);
			}
		}
		
		if (PlayersNb != (Net_Teams_Matchmaking_BlueTeamMembers_V2.count + Net_Teams_Matchmaking_RedTeamMembers_V2.count)) {
			PlayersNb = Net_Teams_Matchmaking_BlueTeamMembers_V2.count + Net_Teams_Matchmaking_RedTeamMembers_V2.count;
			switch (PlayersNb) {
				case 0: {
					//L16N [EndMatch Matchmaking] Displayed in the end match UI. This is the number of players;
					Label_PlayersNb.Value = _("No player");
				}
				case 1: {
					//L16N [EndMatch Matchmaking] Displayed in the end match UI. This is the number of players;
					Label_PlayersNb.Value = _("1 player");
				} 
				default: {
					//L16N [EndMatch Matchmaking] Displayed in the end match UI. %1 is the number of players;
					Label_PlayersNb.Value = TL::Compose(_("%1 players"), ""^PlayersNb);
				}
			}
		}

		foreach (Event in PendingEvents) {
			if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "label-match-id") {
				System.ClipboardSet(MatchId);
			}
		}
		
		foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{Navigation::P}}}C_EventType_NavigateInput: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Page}}}")) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							Select(Event.To, Frame_Profile);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							Select(Button_Quit, Frame_Profile);
						} else {
							Focus(Event.From, Event.To);
						}
					}
				}
				case {{{Navigation::P}}}C_EventType_NavigateMouse: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Page}}}")) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							Select(Event.To, Frame_Profile);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							Focus(Event.From, Event.To);
						}
					}
				}
			}
		}

		foreach (Event in {{{ProfilePlayerInfo::P}}}PendingEvents) {
			switch (Event.Type) {
				case {{{ProfilePlayerInfo::P}}}C_EventType_Close: {
					DisplayProfile(False, Null, Frame_Profile, Frame_ButtonList);
				}
				case {{{ProfilePlayerInfo::P}}}C_EventType_NextPlayer: {
					declare Integer Key = UserIds.keyof(Event.CurrentUserId);
					if (Key >= 0) {
						declare Ident UserId = NullId;
						if (UserIds.existskey(Key + 1)) {
							UserId = UserIds[Key + 1];
						} else if (UserIds.count > 0) {
							UserId = UserIds[0];
						}
						if (UserId != NullId && Scores.existskey(UserId)) {
							{{{ProfilePlayerInfo::P}}}SetUser(Scores[UserId].User);
						}
					}
				}
				case {{{ProfilePlayerInfo::P}}}C_EventType_PrevPlayer: {
					declare Integer Key = UserIds.keyof(Event.CurrentUserId);
					if (Key >= 0) {
						declare Ident UserId = NullId;
						if (UserIds.existskey(Key - 1)) {
							UserId = UserIds[Key - 1];
						} else if (UserIds.count > 0) {
							UserId = UserIds[UserIds.count - 1];
						}
						if (UserId != NullId && Scores.existskey(UserId)) {
							{{{ProfilePlayerInfo::P}}}SetUser(Scores[UserId].User);
						}
					}
				}
			}
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	// Get author display name task
	if (Task::IsInitialized(Task_RetrieveAuthorDisplayName)) {
		Task_RetrieveAuthorDisplayName = Task::Update(Task_RetrieveAuthorDisplayName);
		if (!Task::IsRunning(Task_RetrieveAuthorDisplayName)) {
			if (Task::IsSuccess(Task_RetrieveAuthorDisplayName)) {
				declare Text DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(AuthorId);
				if (DisplayName != "") {
					SetMapAuthorName(Label_MapAuthor, DisplayName);
				}
			}
			Task_RetrieveAuthorDisplayName = Task::Destroy(Task_RetrieveAuthorDisplayName);
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	PopUpBackground::ComponentV2(),
	PlayerRank::Component(),
	MatchmakingStruct::Component(),
	UserStore::ComponentV2(),	
	Navigation::ComponentV2(),
	ProfilePlayerInfo::Component(),
	MenuButtonList::Component(),
	CampaignStruct::Component(),
	UIModules::Component(),
	PlayerName::ComponentV2()
],
[]
	);
}