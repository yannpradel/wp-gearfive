/**
 *	UI module: ScoreAndMapInfos_Teams client side
 */
#Const Version		"2023-03-20"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/UIModules/ScoreAndMapInfos_Teams_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/UIModules/ScoreAndMapInfos_Teams_Common.Script.txt" as UIModules_ScoreAndMapInfos_Teams_Common
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/Components/RoundWinningTeam.Script.txt" as RoundWinningTeam
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_ScoreAndMapInfos_Teams_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_ScoreAndMapInfos_Teams_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Matchmaking ScoreAndMapInfos] %1 will be replaced by the name of the author of the track, e.g. "by Darrek"
	declare Text_By = _("by %1");
	//L16N [Matchmaking ScoreAndMapInfos] %1 will be replaced by the round number, e.g "Round 5"
	declare Text_Round = _("Round %1");
	//L16N [Matchmaking ScoreAndMapInfos] When a team needs only one point to win the match
	declare Text_Matchpoint = _("Match point");
	//L16N [Matchmaking ScoreAndMapInfos] Message displayed when the blue team wins the round
	declare Text_WinningTeamBlue = _("Blue team won the round!");
	//L16N [Matchmaking ScoreAndMapInfos] Message displayed when the red team wins the round
	declare Text_WinningTeamRed = _("Red team won the round!");
	//L16N [Matchmaking ScoreAndMapInfos] Display this message if the round is a draw 
	declare Text_Draw = _("This round is a draw");
	//L16N [Matchmaking ScoreAndMapInfos] %1 will be replaced by the points won by the team in the round, e.g "+1"
	declare Text_Plus = _("+%1");

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-default" halign="center" valign="center2" textsize="3" textprefix="$t$i" textcolor="FFF" textfont="{{{FontManager::C_GameFontExtraBold}}}" />
	<style class="quad-default" halign="center" valign="center" />
</stylesheet>
<frame z-index="-2" hidden="1" id="frame-global">
	<frame {{{UIModules::CustomizableUIModule(UIModules_ScoreAndMapInfos_Teams_Common::C_UIModuleConfig)}}}>
		<frame id="frame-blue-score" pos="-47 0">
			<quad size="14 13.75" z-index="-1" class="quad-default" colorize="{{{ColorPalette::C_Color_Team_Blue_Bg}}}" image="{{{Const::C_ImageUrl_Matchmaking_Score}}}" opacity="0.7"/>						
			<quad id="quad-blue-winning" hidden="1" size="14 13.75" z-index="0" class="quad-default" colorize="{{{ColorPalette::C_Color_GreenOne}}}" image="{{{Const::C_ImageUrl_Matchmaking_Score_Winning}}}"/>						
			<label id="label-blue-score" text="0" pos="0 -1" size="10 10" halign="center" textsize="7.5" class="text-default" />
			<frame size="11 7" pos="1.5 -10.4" halign="center" valign="center">
				<frame id="frame-new-point-blue" hidden="1">
					<quad size="11 7" z-index="-1" class="quad-default" colorize="{{{ColorPalette::C_Color_Team_Blue_Bg}}}" image="{{{Const::C_ImageUrl_Matchmaking_Score_Plus_One}}}" opacity="0.7"/>						
					<label id="label-new-point-blue" size="10 5" halign="center" textsize="3" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" class="text-default" />
				</frame>
			</frame>
		</frame>
		<frame id="frame-red-score" pos="47 0">
			<quad size="14 13.75" z-index="-1" class="quad-default" colorize="{{{ColorPalette::C_Color_Team_Red_Bg}}}" image="{{{Const::C_ImageUrl_Matchmaking_Score}}}" rot="180" opacity="0.7"/>						
			<quad id="quad-red-winning" hidden="1" size="14 13.75" z-index="0" class="quad-default" colorize="{{{ColorPalette::C_Color_GreenOne}}}" rot="180" image="{{{Const::C_ImageUrl_Matchmaking_Score_Winning}}}"/>						
			<label id="label-red-score" text="0" pos="0 -1" size="10 10" halign="center" textsize="7.5" class="text-default" />
			<frame size="11 7" pos="-1.5 -10.4" halign="center" valign="center">
				<frame id="frame-new-point-red" hidden="1">
					<quad size="11 7" z-index="-1" class="quad-default" colorize="{{{ColorPalette::C_Color_Team_Red_Bg}}}" image="{{{Const::C_ImageUrl_Matchmaking_Score_Plus_One}}}" opacity="0.7"/>						
					<label id="label-new-point-red" size="10 5" halign="center" textsize="3" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" class="text-default" />
				</frame>
			</frame>
		</frame>
		<frame id="frame-map-infos">
			<quad size="80 15" z-index="-1" class="quad-default" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" image="{{{Const::C_ImageUrl_Champion_Spec_WarmUp_Center}}}" opacity="0.7"/>						
			<label id="label-map-name" pos="-38 2" size="50 5" halign="left" class="text-default" filter-profanities="Always" />
			<label id="label-map-author" pos="-38 -3" size="50 5" halign="left" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="3" class="text-default" />
			<label id="label-round-number" pos="38 0" size="25 5" halign="right" textsize="2" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" class="text-default" />
		</frame>
		<frame id="frame-matchpoint" pos="0 -10.5" hidden="1">
			<quad id="quad-matchpoint" size="78.75 6" z-index="-1" class="quad-default" image="{{{Const::C_ImageUrl_Matchmaking_Score_Matchpoint}}}" opacity="0.7"/>						
			<quad id="quad-draw-matchpoint" size="78.75 6" hidden="1" z-index="-1" class="quad-default" image="{{{Const::C_ImageUrl_Matchmaking_Score_Matchpoint_Both}}}" opacity="0.7"/>						
			<label id="label-matchpoint" size="50 5" text="{{{Text_Matchpoint}}}" pos="0 -0.25" halign="center" class="text-default" />
		</frame>
		<frame id="frame-winning-team" pos="0 -40" hidden="1">
			<label id="label-winning-team" size="150 40" class="text-default" textsize="12" textfont="{{{FontManager::C_GameFontExtraBold}}}"/>
			<quad id="quad-winning-team" z-index="-1" size="250 40" pos="5 1" class="quad-default" image="{{{Const::C_ImageUrl_Matchmaking_Winner_Flare}}}" />
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils

#Const C_RoundWinSound "RoundWin"
""",
"""
declare Integer G_ScoreDiffAnimDuration;

Void SetMapAuthorName(CMlLabel _Label_MapAuthor, Text _AuthorName) {
	_Label_MapAuthor.Value = TL::Compose("{{{Text_By}}}", _AuthorName);
	Tools::FitLabelValue(_Label_MapAuthor, 3., 2., .1);
	Tools::FirstPartyLogoMatchLuminance(_Label_MapAuthor);
}

Void AnimOpacityOnFrameControls(CMlFrame _Frame) {
	AnimMgr.Flush(_Frame);
	_Frame.Visible = True;
	foreach (Control in _Frame.Controls) {
		switchtype (Control) {
			case CMlLabel: {
				(Control as CMlLabel).Opacity = 1.;
				AnimMgr.Flush(Control as CMlLabel);
				AnimMgr.Add((Control as CMlLabel), "<a opacity=\"0.\" />", G_ScoreDiffAnimDuration, CAnimManager::EAnimManagerEasing::ExpIn);
			}
			case CMlQuad: {
				(Control as CMlQuad).Opacity = 0.7;
				AnimMgr.Flush(Control as CMlQuad);
				AnimMgr.Add((Control as CMlQuad), "<a opacity=\"0.\" />", G_ScoreDiffAnimDuration, CAnimManager::EAnimManagerEasing::ExpIn);
			}
		}
	}
}

Void AnimNewPoint(CMlFrame _FrameNewPoint, Integer _AnimDuration) {
	AnimMgr.Flush(_FrameNewPoint);
	AnimMgr.Add(_FrameNewPoint, "<anim pos=\"" ^_FrameNewPoint.RelativePosition_V3.X^" 7.\" />", _AnimDuration, CAnimManager::EAnimManagerEasing::QuartIn);
}

Void AnimChangeScore(CMlLabel _LabelScore, CMlFrame _FrameNewPoint, CMlFrame _FrameWinningTeam, CMlLabel _Label_WinningTeam, CMlQuad _Quad_WinningTeamBg, Integer _WinningTeamId) {
	_FrameNewPoint.RelativePosition_V3.Y = 0.;
	if (!_FrameNewPoint.Visible) _FrameNewPoint.Visible = True;
	AnimMgr.Flush(_LabelScore);
	_LabelScore.TextColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenOne}}}");
	AnimMgr.Add(_LabelScore, "<a textcolor=\"FFF\" />", G_ScoreDiffAnimDuration, CAnimManager::EAnimManagerEasing::ExpIn);

	{{{MenuSounds::P}}}PlaySound(This, C_RoundWinSound);

	if (_WinningTeamId == 0) {
		_Label_WinningTeam.Value = "{{{Text_WinningTeamBlue}}}";
		_Quad_WinningTeamBg.Colorize = CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Blue_Flare}}}");
	} else if (_WinningTeamId == 1) {
		_Label_WinningTeam.Value ="{{{Text_WinningTeamRed}}}";
		_Quad_WinningTeamBg.Colorize = CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Red_Flare}}}");
	}
	Tools::FitLabelValue(_Label_WinningTeam, 12., 8., 0.5);

	AnimOpacityOnFrameControls(_FrameWinningTeam);
}

Void AnimDraw(CMlFrame _FrameWinningTeam, CMlLabel _Label_WinningTeam, CMlQuad _Quad_WinningTeamBg) {
	_Label_WinningTeam.Value = "{{{Text_Draw}}}";
	_Quad_WinningTeamBg.Colorize = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenFour}}}");

	AnimOpacityOnFrameControls(_FrameWinningTeam);
}

Void UpdateWinningTeam(CMlQuad _Quad_BlueTeamWinning, CMlQuad _Quad_RedTeamWinning, Integer _RoundCurrentWinningTeamId) {
	_Quad_BlueTeamWinning.Visible = (_RoundCurrentWinningTeamId == 0);
	_Quad_RedTeamWinning.Visible = (_RoundCurrentWinningTeamId == 1);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlLabel Label_MapName;
declare CMlLabel Label_MapAuthor;
declare CMlLabel Label_RoundNb;
declare CMlLabel Label_BlueTeamScore;
declare CMlLabel Label_RedTeamScore;
declare CMlQuad Quad_BlueTeamWinning;
declare CMlQuad Quad_RedTeamWinning;
declare CMlFrame Frame_Matchpoint;
declare CMlQuad Quad_Matchpoint;
declare CMlQuad Quad_DrawMatchpoint;
declare CMlLabel Label_MatchPoint;
declare CMlFrame Frame_NewPointBlueTeam;
declare CMlLabel Label_NewPointBlue;
declare CMlFrame Frame_NewPointRedTeam;
declare CMlLabel Label_NewPointRed;
declare CMlFrame Frame_WinningTeam;
declare CMlLabel Label_RoundWinningTeam;
declare CMlQuad Quad_RoundWinningTeam;

declare netread Integer Net_Teams_Matchmaking_ScoreAndMapInfos_RoundNumber for Teams[0];
declare netread Integer Net_Teams_Matchmaking_ScoreAndMapInfos_PointsLimit for Teams[0];
declare netread Boolean Net_Teams_Matchmaking_ScoreAndMapInfos_SpecialVisibilty for Teams[0];
declare netread Integer Net_Teams_Matchmaking_ScoreAndMapInfos_EndRound_AnimDuration for Teams[0];
declare netread Integer Net_Teams_Matchmaking_ScoreAndMapInfos_RoundWinningClan for Teams[0];
declare netread Integer Net_Teams_Matchmaking_ScoreAndMapInfos_UpdateUI for UI;

declare Boolean DisplayModule;
declare Text AuthorName;
declare Text MapUid;
declare Boolean NeedAuthorDisplayNameUpdate;
declare Text AuthorId;
declare Ident Task_GetDisplayNameId;
declare Integer RoundNumber = -1;
declare Integer BlueTeamScore = 0;
declare Integer RedTeamScore = 0;
declare Integer MatchPointScore;
declare Integer AnimDuration;
declare Integer RoundWinningClan = -1;
declare Integer AnimStartTime = -1;
declare Boolean AnimScoreToDo = False;
declare Boolean AnimNewPointToDo = False;
declare Integer RoundCurrentWinningTeamId = -1;
declare Integer NewPointAnimDelay = -1;
declare Integer UpdateUI = -1;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Label_MapName <=> (Frame_Global.GetFirstChild("label-map-name") as CMlLabel);
Label_MapAuthor <=> (Frame_Global.GetFirstChild("label-map-author") as CMlLabel);
Label_RoundNb <=> (Frame_Global.GetFirstChild("label-round-number") as CMlLabel);
Label_BlueTeamScore <=> (Frame_Global.GetFirstChild("label-blue-score") as CMlLabel);
Label_RedTeamScore <=> (Frame_Global.GetFirstChild("label-red-score") as CMlLabel);
Quad_BlueTeamWinning <=> (Frame_Global.GetFirstChild("quad-blue-winning") as CMlQuad);
Quad_RedTeamWinning <=> (Frame_Global.GetFirstChild("quad-red-winning") as CMlQuad);
Frame_Matchpoint <=> (Frame_Global.GetFirstChild("frame-matchpoint") as CMlFrame);
Quad_Matchpoint <=> (Frame_Matchpoint.GetFirstChild("quad-matchpoint") as CMlQuad);
Quad_DrawMatchpoint <=> (Frame_Matchpoint.GetFirstChild("quad-draw-matchpoint") as CMlQuad);
Label_MatchPoint <=> (Frame_Matchpoint.GetFirstChild("label-matchpoint") as CMlLabel);
Frame_NewPointBlueTeam <=> (Frame_Global.GetFirstChild("frame-new-point-blue") as CMlFrame);
Label_NewPointBlue <=> (Frame_Global.GetFirstChild("label-new-point-blue") as CMlLabel);
Frame_NewPointRedTeam <=> (Frame_Global.GetFirstChild("frame-new-point-red") as CMlFrame);
Label_NewPointRed <=> (Frame_Global.GetFirstChild("label-new-point-red") as CMlLabel);
Frame_WinningTeam <=> (Frame_Global.GetFirstChild("frame-winning-team") as CMlFrame);
Label_RoundWinningTeam <=> (Frame_WinningTeam.GetFirstChild("label-winning-team") as CMlLabel);
Quad_RoundWinningTeam <=> (Frame_WinningTeam.GetFirstChild("quad-winning-team") as CMlQuad);

Tools::FitLabelValue(Label_MatchPoint, 3., 2., .1);
DisplayModule = Frame_Global.Visible;
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Teams_Matchmaking_ScoreAndMapInfos_Teams_IsVisible for Owner;
		if (DisplayModule != Net_Teams_Matchmaking_ScoreAndMapInfos_Teams_IsVisible) {
			DisplayModule = Net_Teams_Matchmaking_ScoreAndMapInfos_Teams_IsVisible;
			Frame_Global.Visible = Net_Teams_Matchmaking_ScoreAndMapInfos_Teams_IsVisible;
			if (Frame_Global.Visible)	Frame_Matchpoint.Visible = False;
		}
	}

	if (G_ScoreDiffAnimDuration != Net_Teams_Matchmaking_ScoreAndMapInfos_EndRound_AnimDuration) {
		G_ScoreDiffAnimDuration = Net_Teams_Matchmaking_ScoreAndMapInfos_EndRound_AnimDuration - 1000;
		NewPointAnimDelay = Net_Teams_Matchmaking_ScoreAndMapInfos_EndRound_AnimDuration - 2000;
	}

	if (Frame_Global.Visible) {
		if (RoundNumber != Net_Teams_Matchmaking_ScoreAndMapInfos_RoundNumber) {
			RoundNumber = Net_Teams_Matchmaking_ScoreAndMapInfos_RoundNumber;
			Label_RoundNb.Value = TL::Compose("{{{Text_Round}}}", TL::ToText(RoundNumber));
			Tools::FitLabelValue(Label_RoundNb, 2., 1., .1);
		}

		if (MatchPointScore != (Net_Teams_Matchmaking_ScoreAndMapInfos_PointsLimit - 1)) {
			MatchPointScore = Net_Teams_Matchmaking_ScoreAndMapInfos_PointsLimit - 1;
		}

		if (UpdateUI != Net_Teams_Matchmaking_ScoreAndMapInfos_UpdateUI) {
			UpdateUI = Net_Teams_Matchmaking_ScoreAndMapInfos_UpdateUI;
			
			if (BlueTeamScore != ClanScores[1]) BlueTeamScore = ClanScores[1];
			Label_BlueTeamScore.Value = TL::ToText(BlueTeamScore);
			if (RedTeamScore != ClanScores[2]) RedTeamScore = ClanScores[2];
			Label_RedTeamScore.Value = TL::ToText(RedTeamScore);

			if (BlueTeamScore == MatchPointScore || RedTeamScore == MatchPointScore) {
				Frame_Matchpoint.Visible = True;
				Quad_DrawMatchpoint.Visible = (BlueTeamScore == MatchPointScore && RedTeamScore == MatchPointScore);
				Quad_Matchpoint.Visible = !Quad_DrawMatchpoint.Visible;
				if (Quad_Matchpoint.Visible) Quad_Matchpoint.Colorize = CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Blue_Bg}}}");
			}

			Frame_NewPointBlueTeam.RelativePosition_V3.Y = 7.;
			Frame_NewPointRedTeam.RelativePosition_V3.Y = 7.;

			Label_RoundNb.Value = TL::Compose("{{{Text_Round}}}", TL::ToText(RoundNumber));
			Tools::FitLabelValue(Label_RoundNb, 2., 1., .1);
		}

		if (RoundCurrentWinningTeamId != {{{RoundWinningTeam::P}}}GetRoundWinningTeamId()) {
			RoundCurrentWinningTeamId = {{{RoundWinningTeam::P}}}GetRoundWinningTeamId();
			UpdateWinningTeam(Quad_BlueTeamWinning, Quad_RedTeamWinning, RoundCurrentWinningTeamId);
		}

		if (AnimNewPointToDo && AnimStartTime > 0 && AnimStartTime + NewPointAnimDelay <= Now) {
			declare CMlFrame Frame_NewPoint = Null;
			if (RoundWinningClan == 1) Frame_NewPoint <=> Frame_NewPointBlueTeam;
			else if (RoundWinningClan == 2) Frame_NewPoint <=> Frame_NewPointRedTeam;
			if (Frame_NewPoint != Null) AnimNewPoint(Frame_NewPoint, 1000);
			AnimNewPointToDo = False;
		}

		if (AnimScoreToDo && AnimStartTime > 0 && AnimStartTime + G_ScoreDiffAnimDuration <= Now) {
			declare CMlLabel Label_Score = Null;
			declare Integer NewScore = -1;
			if (RoundWinningClan == 1) {
				Label_Score <=> Label_BlueTeamScore;
				NewScore = BlueTeamScore;
			}	else if (RoundWinningClan == 2) {
				Label_Score <=> Label_RedTeamScore;
				NewScore = RedTeamScore;
			} 

			if (NewScore != -1)	Label_Score.Value = TL::ToText(NewScore);
			AnimScoreToDo = False;
		}

		if (RoundWinningClan != Net_Teams_Matchmaking_ScoreAndMapInfos_RoundWinningClan) {
			RoundWinningClan = Net_Teams_Matchmaking_ScoreAndMapInfos_RoundWinningClan;
			if (RoundWinningClan == 0) AnimDraw(Frame_WinningTeam, Label_RoundWinningTeam, Quad_RoundWinningTeam);

			if (BlueTeamScore != ClanScores[1]) {
				declare Integer PointDiff = ClanScores[1] - BlueTeamScore;
				Label_NewPointBlue.Value = TL::Compose("{{{Text_Plus}}}", TL::ToText(PointDiff));
				BlueTeamScore = ClanScores[1];
				AnimChangeScore(Label_BlueTeamScore, Frame_NewPointBlueTeam, Frame_WinningTeam, Label_RoundWinningTeam, Quad_RoundWinningTeam, (RoundWinningClan - 1));
				AnimStartTime = Now;
				AnimNewPointToDo = True;
				AnimScoreToDo = True;
			
				if (BlueTeamScore == MatchPointScore) {
					Frame_Matchpoint.Visible = True;
					Quad_DrawMatchpoint.Visible = (BlueTeamScore == MatchPointScore && RedTeamScore == MatchPointScore);
					Quad_Matchpoint.Visible = !Quad_DrawMatchpoint.Visible;
					if (Quad_Matchpoint.Visible) Quad_Matchpoint.Colorize = CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Blue_Bg}}}");
				}
			}

			if (RedTeamScore != ClanScores[2]) {
				declare Integer PointDiff = ClanScores[2] - RedTeamScore;
				Label_NewPointRed.Value = TL::Compose("{{{Text_Plus}}}", TL::ToText(PointDiff));
				RedTeamScore = ClanScores[2];
				AnimChangeScore(Label_RedTeamScore, Frame_NewPointRedTeam, Frame_WinningTeam, Label_RoundWinningTeam, Quad_RoundWinningTeam, (RoundWinningClan - 1));
				AnimStartTime = Now;
				AnimNewPointToDo = True;
				AnimScoreToDo = True;

				if (RedTeamScore == MatchPointScore) {
					Frame_Matchpoint.Visible = True;
					Quad_DrawMatchpoint.Visible = (BlueTeamScore == MatchPointScore && RedTeamScore == MatchPointScore);
					Quad_Matchpoint.Visible = !Quad_DrawMatchpoint.Visible;
					if (Quad_Matchpoint.Visible) Quad_Matchpoint.Colorize = CL::Hex6ToRgb("{{{ColorPalette::C_Color_Team_Red_Bg}}}");
				}
			}
		}

		if (Frame_Matchpoint.Visible && (BlueTeamScore == (MatchPointScore+1) || RedTeamScore == (MatchPointScore+1))) Frame_Matchpoint.Visible = False;

		if (Frame_Matchpoint.Visible) Label_MatchPoint.Opacity = 0.5 + (0.5 * ML::Abs(ML::Cos(Now * 0.15 * (ML::PI() / 180.))));
		
		if (Map != Null) {
			if (MapUid != Map.MapInfo.MapUid)  {
				MapUid = Map.MapInfo.MapUid;
				Label_MapName.Value = {{{CampaignStruct::P}}}TranslateOfficialMapName(Map.MapName, Map.AuthorLogin);
				Tools::FitLabelValue(Label_MapName, 3., 2., .1);
				AuthorId = Map.AuthorLogin;
				if (Map.AuthorNickName != "") SetMapAuthorName(Label_MapAuthor, Map.AuthorNickName);
				else Label_MapAuthor.Value = "";
				NeedAuthorDisplayNameUpdate = True;
			}
		}

		if (NeedAuthorDisplayNameUpdate) {
			NeedAuthorDisplayNameUpdate = False;
			declare Text DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(AuthorId);
			if (DisplayName == "" && UserMgr.MainUser != Null) {
				if (Task_GetDisplayNameId != NullId) {
					DataFileMgr.TaskResult_Release(Task_GetDisplayNameId);
					Task_GetDisplayNameId = NullId;
				}
				declare CTaskResult_GetDisplayNameResult Task <=> UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), [AuthorId]);			
				if (Task != Null) Task_GetDisplayNameId = Task.Id;
			} else {
				SetMapAuthorName(Label_MapAuthor, DisplayName);
			}
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Task_GetDisplayNameId != NullId) {
		if (UserMgr.TaskResults.existskey(Task_GetDisplayNameId) && (UserMgr.TaskResults[Task_GetDisplayNameId] is CTaskResult_GetDisplayNameResult)) {
			declare CTaskResult_GetDisplayNameResult Task_GetDisplayName = (UserMgr.TaskResults[Task_GetDisplayNameId] as CTaskResult_GetDisplayNameResult);
			if (
				Task_GetDisplayName != Null &&
				!Task_GetDisplayName.IsProcessing
			) {
				if (Task_GetDisplayName.HasSucceeded) {
					declare Text DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(AuthorId);
					if (DisplayName != "") {
						SetMapAuthorName(Label_MapAuthor, DisplayName);
					}
				}
				UserMgr.TaskResult_Release(Task_GetDisplayNameId);
				Task_GetDisplayNameId = NullId;
			}
		}
	}
}
***
""",
[
	RoundWinningTeam::Component(),
	MenuSounds::ComponentV2(),
	UserStore::ComponentV2(),
	CampaignStruct::Component(),
	UIModules::Component()
],
[]
	);
}