/**
 *	UI module: WarmUp_Matchmaking client side
 */
#Const Version		"2023-01-16"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/UIModules/WarmUp_Matchmaking_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/UIModules/WarmUp_Matchmaking_Common.Script.txt" as UIModules_WarmUp_Matchmaking_Common
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_WarmUp_Matchmaking_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_WarmUp_Matchmaking_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Text_WarmUp = _("Warm up");
	//L16N [Matchmaking WarmUp] %1 will be replaced by the name of the author of the track, e.g. "by Darrek"
	declare Text_By = _("by %1");

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-default" halign="center" valign="center2" textsize="3" textprefix="$t$i" textcolor="FFF" textfont="{{{FontManager::C_GameFontExtraBold}}}" />
</stylesheet>
<frame z-index="-2" hidden="1" id="frame-global">
	<frame {{{UIModules::CustomizableUIModule(UIModules_WarmUp_Matchmaking_Common::C_UIModuleConfig)}}}>
		<quad size="62.6 15" pos="-54.5 0" z-index="-1" halign="center" valign="center2" colorize="{{{ColorPalette::C_Color_Orange}}}" image="{{{Const::C_ImageUrl_Champion_Spec_WarmUp_Left}}}" opacity="0.9"/>						
		<quad size="80 15" pos="16 0" z-index="-1" halign="center" valign="center2" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" image="{{{Const::C_ImageUrl_Champion_Spec_WarmUp_Center}}}" opacity="0.7"/>						
		<quad size="24.6 15" pos="67.4 0" z-index="-1" halign="center" valign="center2" colorize="{{{ColorPalette::C_Color_Orange}}}" image="{{{Const::C_ImageUrl_Champion_Spec_WarmUp_Right}}}" opacity="0.9"/>						
		<frame z-index="1">
			<label id="label-warm-up" pos="-54 -0.5" size="60 10" textsize="5" text="{{{Text_WarmUp}}}" class="text-default" />
			<label id="label-map-name" pos="-20 2" size="52 5" halign="left" class="text-default" />
			<label id="label-map-author" pos="-20 -3" size="52 5" halign="left" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="3" class="text-default" />
			<label id="label-timer" pos="68 -0.5" size="23 5" textsize="4.5" class="text-default" />
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/Helpers_Client.Script.txt" as RaceHelpers
""",
"""

Void SetMapAuthorName(CMlLabel _Label_MapAuthor, Text _AuthorName) {
	_Label_MapAuthor.Value = TL::Compose("{{{Text_By}}}", _AuthorName);
	Tools::FitLabelValue(_Label_MapAuthor, 3., 2., 0.25);
	Tools::FirstPartyLogoMatchLuminance(_Label_MapAuthor);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlLabel Label_MapName;
declare CMlLabel Label_MapAuthor;
declare CMlLabel Label_Timer;
declare CMlLabel Label_WarmUp;

declare Boolean DisplayModule;
declare Text AuthorName;
declare Text MapUid;
declare Boolean NeedAuthorDisplayNameUpdate;
declare Text AuthorId;
declare Ident Task_GetDisplayNameId;
declare Integer CutOffTimeLimit;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Label_MapName <=> (Frame_Global.GetFirstChild("label-map-name") as CMlLabel);
Label_MapAuthor <=> (Frame_Global.GetFirstChild("label-map-author") as CMlLabel);
Label_Timer <=> (Frame_Global.GetFirstChild("label-timer") as CMlLabel);
Label_WarmUp <=> (Frame_Global.GetFirstChild("label-warm-up") as CMlLabel);

DisplayModule = Frame_Global.Visible;
CutOffTimeLimit = -1;
Tools::FitLabelValue(Label_WarmUp, 5., 3., 0.25);
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Teams_Matchmaking_WarmUp_Matchmaking_IsVisible for Owner;
		if (DisplayModule != Net_Teams_Matchmaking_WarmUp_Matchmaking_IsVisible) {
			DisplayModule = Net_Teams_Matchmaking_WarmUp_Matchmaking_IsVisible;
			Frame_Global.Visible = Net_Teams_Matchmaking_WarmUp_Matchmaking_IsVisible;
		}
	}

	if (Frame_Global.Visible) {

		Label_WarmUp.Opacity = 0.5 + (0.5 * ML::Abs(ML::Cos(Now * 0.15 * (ML::PI() / 180.))));
		
		if (CutOffTimeLimit != RaceHelpers::GetTimeLimit(Teams[0])) {
			CutOffTimeLimit = RaceHelpers::GetTimeLimit(Teams[0]);
			if (CutOffTimeLimit < 0) {
				Label_Timer.Value = "-";
			}
		}

		if (CutOffTimeLimit >= 0) {
			Label_Timer.Value = TL::TimeToText(ML::Max(0, CutOffTimeLimit - GameTime + 1000));
		}
		
		if (Map != Null) {
			if (MapUid != Map.MapInfo.MapUid) {
				MapUid = Map.MapInfo.MapUid;
				Label_MapName.Value = Map.MapName;
				Tools::FitLabelValue(Label_MapName, 3., 2., 0.25);
				AuthorId = Map.AuthorLogin;
				if (Map.AuthorNickName != "") SetMapAuthorName(Label_MapAuthor, Map.AuthorNickName);
				else Label_MapAuthor.Value = "";
				NeedAuthorDisplayNameUpdate = True;
			}
		}

		if (NeedAuthorDisplayNameUpdate) {
			NeedAuthorDisplayNameUpdate = False;
			declare Text DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(AuthorId);
			if (DisplayName == "" && UserMgr.MainUser != Null) {
				if (Task_GetDisplayNameId != NullId) {
					DataFileMgr.TaskResult_Release(Task_GetDisplayNameId);
					Task_GetDisplayNameId = NullId;
				}
				declare CTaskResult_GetDisplayNameResult Task <=> UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), [AuthorId]);			
				if (Task != Null) Task_GetDisplayNameId = Task.Id;
			} else {
				SetMapAuthorName(Label_MapAuthor, DisplayName);
			}
		}		
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Task_GetDisplayNameId != NullId) {
		if (UserMgr.TaskResults.existskey(Task_GetDisplayNameId) && (UserMgr.TaskResults[Task_GetDisplayNameId] is CTaskResult_GetDisplayNameResult)) {
			declare CTaskResult_GetDisplayNameResult Task_GetDisplayName = (UserMgr.TaskResults[Task_GetDisplayNameId] as CTaskResult_GetDisplayNameResult);
			if (
				Task_GetDisplayName != Null &&
				!Task_GetDisplayName.IsProcessing
			) {
				if (Task_GetDisplayName.HasSucceeded) {
					declare Text DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(AuthorId);
					if (DisplayName != "") {
						SetMapAuthorName(Label_MapAuthor, DisplayName);
					}
				}
				UserMgr.TaskResult_Release(Task_GetDisplayNameId);
				Task_GetDisplayNameId = NullId;
			}
		}
	}
}
***
""",
[
	UserStore::ComponentV2(),
	UIModules::Component()
],
[]
	);
}