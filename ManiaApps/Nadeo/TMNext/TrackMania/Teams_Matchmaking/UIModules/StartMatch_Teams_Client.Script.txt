/**
 *	UI module: StartMatch_Teams client side
 */
#Const Version		"2023-03-27"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/UIModules/StartMatch_Teams_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/UIModules/StartMatch_Teams_Common.Script.txt" as UIModules_StartMatch_Teams_Common
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_StartMatch_Teams_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_StartMatch_Teams_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [StartMatch Matchmaking] Indicate the match will start soon, will be followed by a countdown e.g "Match starts in... 3... 2... 1..."
	declare Text Text_StartMatch = _("Match starts in...");

	declare Integer Pos_TeamBlueMemberListX = -143;
	declare Integer Pos_TeamRedMemberListX = 70;

	declare Vec2 Size_TeamMember = <73., 11.>;
	declare Vec2 Size_TeamMemberBg = <Size_TeamMember.X * 1.15, Size_TeamMember.Y * 2.>;
	declare Vec2 Size_TeamMemberName = <Size_TeamMember.X * 0.8, Size_TeamMember.Y>;
	declare Vec2 Pos_TeamBlueMemberFlag = <Size_TeamMember.X * 0.13, Size_TeamMember.Y * -0.48>;
	declare Vec2 Pos_TeamBlueMemberName = <Size_TeamMember.X * 0.15, Size_TeamMember.Y * -0.5>;	
	declare Vec2 Pos_TeamRedMemberFlag = <Size_TeamMember.X * 0.87, Size_TeamMember.Y * -0.48>;
	declare Vec2 Pos_TeamRedMemberName = <Size_TeamMember.X * 0.85, Size_TeamMember.Y * -0.5>;

	declare Text ML_TeamBlueMembersList = "";
	declare Integer PosY = 0;
	for (I, 1, 3) {
		ML_TeamBlueMembersList ^= """
		<frameinstance modelid="framemodel-team-blue-member" pos="0 {{{PosY}}}"/>
		""";
		PosY -= 20; 
	}

	declare Text ML_TeamRedMembersList = "";
	PosY = 0;
	for (I, 1, 3) {
		ML_TeamRedMembersList ^= """
		<frameinstance modelid="framemodel-team-red-member" pos="0 {{{PosY}}}"/>
		""";
		PosY -= 20; 
	}

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-default" halign="center" valign="center2" textsize="5" textcolor="FFF" textfont="{{{FontManager::C_GameFontSemiBold}}}" />
	<style class="quad-default" halign="center" valign="center" />
</stylesheet>

<framemodel id="framemodel-team-blue-member">
	<quad id="quad-base" z-index="0" size="{{{Size_TeamMember.X}}} {{{Size_TeamMember.Y}}}" image="{{{Const::C_ImageUrl_Matchmaking_Intro_Team_Left}}}" colorize="{{{ColorPalette::C_Color_Team_Blue_Nickname}}}" opacity="0.8"/>
	<quad id="quad-bg-select" hidden="1" z-index="-1" pos="-5.5 5.5" size="{{{Size_TeamMemberBg.X}}} {{{Size_TeamMemberBg.Y}}}" image="{{{Const::C_ImageUrl_Matchmaking_Intro_Team_Left_Bg_Select}}}" colorize="FFF" />
	<quad id="quad-fg-select" hidden="1" z-index="1" pos="-0.35 0" size="{{{Size_TeamMember.X + 0.6}}} {{{Size_TeamMember.Y}}}" image="{{{Const::C_ImageUrl_Matchmaking_Intro_Team_Left_Fg_Select}}}" colorize="FFF" />
	<quad id="quad-flag" halign="right" valign="center" size="8.5 6" pos="{{{Pos_TeamBlueMemberFlag.X}}} {{{Pos_TeamBlueMemberFlag.Y}}}" alphamask="{{{Const::C_ImageUrl_Matchmaking_Flag_Mask}}}" z-index="2" />
	<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" pos="{{{Pos_TeamBlueMemberName.X}}} {{{Pos_TeamBlueMemberName.Y}}}" z-index="2" data-size="{{{Size_TeamMemberName.X}}} {{{Size_TeamMemberName.Y}}}" data-valign="center" data-textprefix="$t" data-textfont="{{{FontManager::C_GameFontSemiBold}}}" data-textsize="5" />
</framemodel>

<framemodel id="framemodel-team-red-member">
	<quad id="quad-base" z-index="0" size="{{{Size_TeamMember.X}}} {{{Size_TeamMember.Y}}}" image="{{{Const::C_ImageUrl_Matchmaking_Intro_Team_Right}}}" colorize="{{{ColorPalette::C_Color_Team_Red_Nickname}}}" opacity="0.8"/>
	<quad id="quad-bg-select" hidden="1" z-index="-1" pos="-5.5 5.5" size="{{{Size_TeamMemberBg.X}}} {{{Size_TeamMemberBg.Y}}}" image="{{{Const::C_ImageUrl_Matchmaking_Intro_Team_Right_Bg_Select}}}" colorize="FFF" />
	<quad id="quad-fg-select" hidden="1" z-index="1" pos="-0.5 0" size="{{{Size_TeamMember.X + 0.6}}} {{{Size_TeamMember.Y}}}" image="{{{Const::C_ImageUrl_Matchmaking_Intro_Team_Right_Fg_Select}}}" colorize="FFF" />
	<quad id="quad-flag" halign="left" valign="center" size="8.5 6" pos="{{{Pos_TeamRedMemberFlag.X}}} {{{Pos_TeamRedMemberFlag.Y}}}" alphamask="{{{Const::C_ImageUrl_Matchmaking_Flag_Mask}}}" z-index="2" />
	<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" pos="{{{Pos_TeamRedMemberName.X}}} {{{Pos_TeamRedMemberName.Y}}}" z-index="2" data-size="{{{Size_TeamMemberName.X}}} {{{Size_TeamMemberName.Y}}}" data-halign="right" data-valign="center" data-textprefix="$t" data-textfont="{{{FontManager::C_GameFontSemiBold}}}" data-textsize="5" />
</framemodel>

<frame z-index="-2" hidden="1" id="frame-global">
	<frame {{{UIModules::CustomizableUIModule(UIModules_StartMatch_Teams_Common::C_UIModuleConfig)}}}>
		<frame id="frame-content">
			<quad z-index="-1" size="320 180" halign="center" valign="center" fullscreen="1" image="{{{Const::C_ImageUrl_Matchmaking_Intro_Bg}}}" />

			<frame id="frame-team-blue-members" pos="-250 25">
				{{{ML_TeamBlueMembersList}}}
			</frame>
			<frame id="frame-team-red-members" pos="200 25">
				{{{ML_TeamRedMembersList}}}
			</frame>

			<frame id="frame-countdown" pos="153 -70" hidden="1" >
				<frame size="90 13" pos="-38 0" halign="center" valign="center">
					<quad class="quad-default" pos="3 0" size="90 13" image="{{{Const::C_ImageUrl_Matchmaking_Intro_Team_Right}}}" colorize="{{{ColorPalette::C_Color_GreenFive}}}" opacity="0.5" />
					<quad id="quad-countdown-progression" pos="3 0" class="quad-default" size="90 13" image="{{{Const::C_ImageUrl_Matchmaking_Intro_Team_Right}}}" colorize="{{{ColorPalette::C_Color_GreenFive}}}" opacity="0.5" z-index="-1"/>
				</frame>
				<label id="label-countdown-title" halign="right" pos="-15 0" text="{{{Text_StartMatch}}}" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i" size="60 10" class="text-default" z-index="2"/>	
				<label id="label-timer" halign="left" pos="-10 0" size="30 10" class="text-default" textsize="7" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$t$i" z-index="2"/>	
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore

#Struct K_TeamMember {
	Text AccountId;
	Text FlagUrl;
}

#Struct K_Controls {
	CMlFrame Frame_TeamBlueMembers;
	CMlFrame Frame_TeamRedMembers;
	CMlFrame Frame_Countdown;
	CMlLabel Label_CountdownTitle;
	CMlLabel Label_Timer;
	CMlQuad Quad_CountdownBg;
}

#Const C_AnimDuration 250
#Const C_AnimStartDelay 1500
#Const C_CountdownAnimDuration 5000
#Const C_CountdownDurationInSec 5
#Const C_CheckPlayersDisplayedFrequency 1000

#Const C_VSIntroSound "VS_Intro"
#Const C_CountdownSound "Countdown"
""",
"""
Void UpdateTeamMembersDisplay(CMlFrame _Frame_TeamMembers, K_TeamMember[] _TeamMembers) {
	foreach (Index => Control in _Frame_TeamMembers.Controls) {
		declare CMlFrame Frame_TeamMember = Control as CMlFrame;
		declare CMlFrame PlayerName_Name <=> Frame_TeamMember.GetFirstChild("playername-name") as CMlFrame;
		declare CMlQuad Quad_Select_Bg <=> Frame_TeamMember.GetFirstChild("quad-bg-select") as CMlQuad;
		declare CMlQuad Quad_Select_Fg <=> Frame_TeamMember.GetFirstChild("quad-fg-select") as CMlQuad;
		if (_TeamMembers.existskey(Index)) {
			Frame_TeamMember.Visible = True;
			declare Boolean HighLightPlayer = (LocalUser != Null && LocalUser.WebServicesUserId == _TeamMembers[Index].AccountId);
			Quad_Select_Bg.Visible = HighLightPlayer;
			Quad_Select_Fg.Visible = HighLightPlayer;
			{{{PlayerName::P}}}SetAccountId(This, PlayerName_Name, _TeamMembers[Index].AccountId, True);
			PlayerName_Name.Visible = True;
			declare Quad_Flag <=> Frame_TeamMember.GetFirstChild("quad-flag") as CMlQuad;
			if (_TeamMembers[Index].FlagUrl != "") {
				Quad_Flag.ChangeImageUrl(_TeamMembers[Index].FlagUrl);
			} else {
				Quad_Flag.ChangeImageUrl("");
			}
			Quad_Flag.Visible = (Quad_Flag.ImageUrl != "");
		} else {
			Frame_TeamMember.Visible = False;
			PlayerName_Name.Visible = False;
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the clan of a player (from CLUB data)
 *	Return -1 if the player is not found
 */
Integer GetClan(Text _AccountId) {
	declare netread Integer[Text] Net_Teams_Matchmaking_AccountIdsToClan for Teams[0];
	return Net_Teams_Matchmaking_AccountIdsToClan.get(_AccountId, -1);
}

Void UpdateTeamsMembers(K_Controls _Controls) {
	declare K_TeamMember[] TeamBlueMembers;
	declare K_TeamMember[] TeamRedMembers;

	foreach (Player in Players) {
		if (Player != Null) {
			if (Player.CurrentClan == 1 || (Player.User != Null && GetClan(Player.User.WebServicesUserId) == 1)) {
				TeamBlueMembers.add(K_TeamMember {
					AccountId = Player.User.WebServicesUserId,
					FlagUrl = Player.User.CountryFlagUrl
				});
			} else if (Player.CurrentClan == 2 || (Player.User != Null && GetClan(Player.User.WebServicesUserId) == 2)) {
				TeamRedMembers.add(K_TeamMember {
					AccountId = Player.User.WebServicesUserId,
					FlagUrl = Player.User.CountryFlagUrl
				});
			}
		}
	}

	UpdateTeamMembersDisplay(_Controls.Frame_TeamBlueMembers, TeamBlueMembers);
	UpdateTeamMembersDisplay(_Controls.Frame_TeamRedMembers, TeamRedMembers);
}

Void AnimTeamMembers(K_Controls _Controls) {
	AnimMgr.Flush(_Controls.Frame_TeamBlueMembers);
	AnimMgr.Flush(_Controls.Frame_TeamRedMembers);
	_Controls.Frame_TeamBlueMembers.RelativePosition_V3.X = -250.;
	_Controls.Frame_TeamRedMembers.RelativePosition_V3.X = 200.;
	AnimMgr.Add(_Controls.Frame_TeamBlueMembers, "<a pos=\"{{{Pos_TeamBlueMemberListX}}} "^_Controls.Frame_TeamBlueMembers.RelativePosition_V3.Y^"\" hidden=\"0\" />", C_AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.Add(_Controls.Frame_TeamRedMembers, "<a pos=\"{{{Pos_TeamRedMemberListX}}} "^_Controls.Frame_TeamRedMembers.RelativePosition_V3.Y^"\" hidden=\"0\" />", C_AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
}

Void AnimCountdown(K_Controls _Controls) {
	AnimMgr.Flush(_Controls.Frame_Countdown);
	AnimMgr.Flush(_Controls.Label_CountdownTitle);	
	AnimMgr.Flush(_Controls.Quad_CountdownBg);
	_Controls.Frame_Countdown.Visible = True;
	_Controls.Quad_CountdownBg.RelativePosition_V3.X = 3.;
	_Controls.Label_CountdownTitle.Opacity = 0.;
	AnimMgr.Add(_Controls.Label_CountdownTitle, "<a opacity=\""^1.^"\"/>", C_CountdownAnimDuration + C_AnimStartDelay, CAnimManager::EAnimManagerEasing::QuartOut);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Content;

declare netread Integer Net_Teams_Matchmaking_StartMatch_DisplayDuration for Teams[0];
declare netwrite Boolean Net_Teams_Matchmaking_StartMatch_PlayerCanChat for UI;
declare netread Integer[Text] Net_Teams_Matchmaking_AccountIdsToClan for Teams[0];
declare netread Text[] Net_Teams_Matchmaking_StartMatch_Teams_StarterAccessPlayersAccountIds for Teams[0];

declare Boolean DisplayModule;
declare Boolean AnimTeamMembersDone;
declare Boolean AnimCountdownDone;
declare Integer AnimStartTime = -1;
declare Integer DisplayDuration = -1;
declare Integer CountdownLeft = -1;
declare Integer CountdownStartTime = -1;
declare Integer CheckPlayersDisplayedTime;
declare Text[] StarterAccessPlayersAccountIds;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Content <=> (Frame_Global.GetFirstChild("frame-content") as CMlFrame);

declare K_Controls Controls = K_Controls { 
	Frame_TeamBlueMembers = (Frame_Content.GetFirstChild("frame-team-blue-members") as CMlFrame),
	Frame_TeamRedMembers = (Frame_Content.GetFirstChild("frame-team-red-members") as CMlFrame),
	Frame_Countdown = (Frame_Content.GetFirstChild("frame-countdown") as CMlFrame),
	Label_Timer = (Frame_Content.GetFirstChild("label-timer") as CMlLabel),
	Label_CountdownTitle = (Frame_Content.GetFirstChild("label-countdown-title") as CMlLabel),
	Quad_CountdownBg = (Frame_Content.GetFirstChild("quad-countdown-progression") as CMlQuad)
};

Tools::FitLabelValue(Controls.Label_CountdownTitle, 5., 3., .2);
Net_Teams_Matchmaking_StartMatch_PlayerCanChat = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_InGameChat);

DisplayModule = Frame_Global.Visible;
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Teams_Matchmaking_StartMatch_Teams_IsVisible for Owner;
		if (DisplayModule != Net_Teams_Matchmaking_StartMatch_Teams_IsVisible) {
			DisplayModule = Net_Teams_Matchmaking_StartMatch_Teams_IsVisible;
			Frame_Global.Visible = Net_Teams_Matchmaking_StartMatch_Teams_IsVisible;
			if (Frame_Global.Visible) {
				UpdateTeamsMembers(Controls);
				CountdownStartTime = -1;
				AnimTeamMembersDone = False;
				AnimCountdownDone = False;
				AnimStartTime = Now;
				CheckPlayersDisplayedTime = Now;
				CountdownLeft = C_CountdownDurationInSec;
				{{{MenuSounds::P}}}PlaySound(This, C_VSIntroSound);
			}
		}
	}

	if (Frame_Global.Visible) {

		// Update players displayed when a new player enters the server (check only every 1sec to reduce performance impact with players loop)
		if (CheckPlayersDisplayedTime <= Now) {
			CheckPlayersDisplayedTime = Now + C_CheckPlayersDisplayedFrequency;

			declare Boolean NewPlayerConnected = False;
			foreach (Player in Players) {
				declare Boolean TeamsMatchmaking_StartMatch_IsInitialized for Player = False;
				if (!TeamsMatchmaking_StartMatch_IsInitialized) {
					TeamsMatchmaking_StartMatch_IsInitialized = True;
					NewPlayerConnected = True;
				}
			}

			if (NewPlayerConnected) UpdateTeamsMembers(Controls);
		}

		if (DisplayDuration != Net_Teams_Matchmaking_StartMatch_DisplayDuration) {
			DisplayDuration = Net_Teams_Matchmaking_StartMatch_DisplayDuration;
		}
		
		if (!AnimTeamMembersDone && AnimStartTime > 0 && AnimStartTime + C_AnimStartDelay <= Now ) {
			AnimTeamMembers(Controls);
			AnimTeamMembersDone = True;
		}

		if (!AnimCountdownDone && AnimStartTime > 0 && AnimStartTime + (DisplayDuration - C_CountdownAnimDuration - C_AnimStartDelay) <= Now ) {
			AnimCountdown(Controls);
			CountdownStartTime = Now;
			Controls.Label_Timer.Value = "";
			AnimCountdownDone = True;
		}

		while (CountdownLeft > 0 && CountdownStartTime > 0 && CountdownStartTime + 1000 <= Now) {
			if (CountdownLeft == C_CountdownDurationInSec) {
				AnimMgr.Add(Controls.Quad_CountdownBg, "<a pos=\"90 "^Controls.Quad_CountdownBg.RelativePosition_V3.Y^"\" hidden=\"0\" />", C_CountdownAnimDuration, CAnimManager::EAnimManagerEasing::Linear);
			}
			{{{MenuSounds::P}}}PlaySound(This, C_CountdownSound);
			CountdownStartTime += 1000;
			Controls.Label_Timer.Value = ""^CountdownLeft;
			CountdownLeft -= 1;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}


	if (StarterAccessPlayersAccountIds != Net_Teams_Matchmaking_StartMatch_Teams_StarterAccessPlayersAccountIds) {
		StarterAccessPlayersAccountIds = Net_Teams_Matchmaking_StartMatch_Teams_StarterAccessPlayersAccountIds;

		declare Text[] PlayersNotAllowedToChatNameList;
		foreach (Player in Players) {
			if (Player.User != Null && StarterAccessPlayersAccountIds.exists(Player.User.WebServicesUserId)) {
				PlayersNotAllowedToChatNameList.add(UserStore::GetPlayerName(Player.User, False));
			}
		}

		declare Text PlayersNotAllowedToChat;
		foreach (Index => Name in PlayersNotAllowedToChatNameList) {
			if (Index == 0) PlayersNotAllowedToChat = "$<"^Name^"$>";
			else if (Index == StarterAccessPlayersAccountIds.count - 1) PlayersNotAllowedToChat ^= " & " ^ "$<"^Name^"$>";
			else PlayersNotAllowedToChat ^= ", " ^ "$<"^Name^"$>";
		}
	
		if (ClientUI != Null && PlayersNotAllowedToChat != "") {
			if (StarterAccessPlayersAccountIds.count == 1) {
				//L16N [MatchmakingTeams] Message to explain that a player is not allowed to write in the ingame chat because they don't have the Standard or Club Access. %1 will be replaced by the name of one player. e.g. "Alex has the Starter Access and cannot write in the chat."
				ClientUI.SendChat(TL::Compose(_("%1 has the Starter Access and cannot write in the chat."), PlayersNotAllowedToChat));
			}	else {
				//L16N [MatchmakingTeams] Message to explain that some players are not allowed to write in the ingame chat because they don't have the Standard or Club Access. %1 will be replaced by the name of several players. e.g. "Alex, Morgan & Noel have the Starter Access and cannot write in the chat."
				ClientUI.SendChat(TL::Compose(_("%1 have the Starter Access and cannot write in the chat."), PlayersNotAllowedToChat));
			}
		}
	}
}
***
""",
[
	MenuSounds::ComponentV2(),
	UIModules::Component(),
	PlayerName::ComponentV2()
],
[]
	);
}