/**
 *  UI module: Shared info between multiple UI modules for Teams matchmaking, server side
 */
#Const Version		"2023-02-10"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/UIModules/NetShare_Teams_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct
 
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the winning team of the match
Void SetWinningTeamId(Integer _WinningTeamId) {
	declare netwrite Integer Net_Teams_Matchmaking_WinningTeamId for Teams[0];
	Net_Teams_Matchmaking_WinningTeamId = _WinningTeamId;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the accountId of the best player of the match
Void SetMVPAccountId(Text _MVPAccountId) {
	declare netwrite Text Net_Teams_Matchmaking_MVPAccountId for Teams[0];
	Net_Teams_Matchmaking_MVPAccountId = _MVPAccountId;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the players account ids and clans
Void SetAccountIdsToClans(Integer[Text] _AccountIdsToClan) {
	declare netwrite Integer[Text] Net_Teams_Matchmaking_AccountIdsToClan for Teams[0];
	Net_Teams_Matchmaking_AccountIdsToClan = _AccountIdsToClan;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the team members 
Void SetTeamMembers(MatchmakingStruct::LibStructuresMatchmaking_K_TeamMember[Integer] _BlueTeamMembers, MatchmakingStruct::LibStructuresMatchmaking_K_TeamMember[Integer] _RedTeamMembers) {
	declare netwrite MatchmakingStruct::LibStructuresMatchmaking_K_TeamMember[Integer] Net_Teams_Matchmaking_BlueTeamMembers_V2 for Teams[0];
	declare netwrite MatchmakingStruct::LibStructuresMatchmaking_K_TeamMember[Integer] Net_Teams_Matchmaking_RedTeamMembers_V2 for Teams[0];
	Net_Teams_Matchmaking_BlueTeamMembers_V2 = _BlueTeamMembers;
	Net_Teams_Matchmaking_RedTeamMembers_V2 = _RedTeamMembers;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the players divisions and progressions
Void SetMatchParticipants(MatchmakingStruct::LibStructuresMatchmaking_K_MatchParticipants _Participants ) {
	declare netwrite MatchmakingStruct::LibStructuresMatchmaking_K_MatchParticipants Net_Teams_Matchmaking_MatchParticipants for Teams[0];
	declare netwrite Integer Net_Teams_Matchmaking_MatchParticipants_Update for Teams[0] = -1;
	Net_Teams_Matchmaking_MatchParticipants = _Participants;
	Net_Teams_Matchmaking_MatchParticipants_Update = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the matchmaking divisions
Void SetDivisions(MatchmakingStruct::LibStructuresMatchmaking_K_Division[Text] _Divisions) {
	declare netwrite MatchmakingStruct::LibStructuresMatchmaking_K_Division[Text] Net_Teams_Matchmaking_Divisions for Teams[0];
	declare netwrite Integer Net_Teams_Matchmaking_Divisions_Update for Teams[0] = -1;
	Net_Teams_Matchmaking_Divisions = _Divisions;
	Net_Teams_Matchmaking_Divisions_Update = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the Top 10 players 
Void SetTop10(MatchmakingStruct::LibStructuresMatchmaking_K_PlayerLeaderboard[] _Top10) {
	declare netwrite MatchmakingStruct::LibStructuresMatchmaking_K_PlayerLeaderboard[] Net_Teams_Matchmaking_Top10 for Teams[0];
	declare netwrite Integer Net_Teams_Matchmaking_Top10_Update for Teams[0] = -1;
	Net_Teams_Matchmaking_Top10 = _Top10;
	Net_Teams_Matchmaking_Top10_Update = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the match id
Void SetMatchId(Text _MatchId) {
	declare netwrite Text Net_Teams_Matchmaking_MatchId for Teams[0];
	Net_Teams_Matchmaking_MatchId = _MatchId;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetWinningTeamId(-1);
	SetMVPAccountId("");
	SetMatchParticipants(MatchmakingStruct::LibStructuresMatchmaking_K_MatchParticipants {});
	SetDivisions([]);
	SetMatchId("");
	SetTeamMembers([], []);
	SetTop10([]);
	SetAccountIdsToClans([]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}