/**
 *  UI module: KnockoutReward server side
 */
#Const Version    "2020-11-15"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/Knockout/UIModules/KnockoutReward_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Knockout_KnockoutReward"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void SetPlayerEliminated(CPlayer _Player, Boolean _PlayerEliminated) {
	if (_Player != Null) {
		declare PlayerUI = UIManager.GetUI(_Player);
		if (PlayerUI != Null) {
			declare netwrite Boolean Net_KnockoutPlugin_KORewardAndReturn_PlayerEliminated for PlayerUI = False;
			declare netwrite Integer Net_KnockoutPlugin_KORewardAndReturn_PlayerEliminatedUpdate for PlayerUI = -1;
			Net_KnockoutPlugin_KORewardAndReturn_PlayerEliminated = _PlayerEliminated;
			Net_KnockoutPlugin_KORewardAndReturn_PlayerEliminatedUpdate = Now;
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Send the match result
 */
Void SendResult(CSmPlayer _Player) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;
	declare netwrite Integer Net_Knockout_KnockoutReward_Rank for UI;
	declare netwrite Integer Net_Knockout_KnockoutReward_CupRank for UI;
	declare netwrite Integer[Integer] Net_Knockout_KnockoutReward_Trophies for UI;
	if (_Player.Score != Null) {
		declare Integer Knockout_KnockoutReward_Rank for _Player.Score = -1;
		declare Integer Knockout_KnockoutReward_CupRank for _Player.Score = -1;
		declare Integer[Integer] Knockout_KnockoutReward_Trophies for _Player.Score = [];
		Net_Knockout_KnockoutReward_Rank = Knockout_KnockoutReward_Rank;
		Net_Knockout_KnockoutReward_CupRank = Knockout_KnockoutReward_CupRank;
		Net_Knockout_KnockoutReward_Trophies = Knockout_KnockoutReward_Trophies;
	} else {
		Net_Knockout_KnockoutReward_Rank = -1;
		Net_Knockout_KnockoutReward_CupRank = -1;
		Net_Knockout_KnockoutReward_Trophies = [];
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Save the result in the player's score
 *	to be able to restore it if the player
 *	leaves and reconnects later
 */
Void SaveTrophies(CScore _Score, Integer[Integer] _Trophies) {
	if (_Score != Null) {
		declare Integer[Integer] Knockout_KnockoutReward_Trophies for _Score = [];
		Knockout_KnockoutReward_Trophies = _Trophies;
	}
}
Void SaveRank(CScore _Score, Integer _Rank) {
	if (_Score != Null) {
		declare Integer Knockout_KnockoutReward_Rank for _Score = 0;
		Knockout_KnockoutReward_Rank = _Rank;
	}
}
Void SaveCupRank(CScore _Score, Integer _MatchPosition, Integer _CupRank) {
	if (_Score != Null) {
		declare Integer Knockout_KnockoutReward_CupRank for _Score = -1;
		if (_MatchPosition < 0) {
			Knockout_KnockoutReward_CupRank = -1;
		} else {
			Knockout_KnockoutReward_CupRank = _MatchPosition*64 + _CupRank;
		}
	}
}
Void ResetResult(CScore _Score) {
	SaveTrophies(_Score, []);
	SaveRank(_Score, 0);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	
	declare netwrite Boolean Net_Knockout_KnockoutReward_IsVisible for _Player;
	Net_Knockout_KnockoutReward_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, False);
	if (_Player is CSmPlayer) SendResult(_Player as CSmPlayer);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	foreach (Score in Scores) {
		ResetResult(Score);
	}
	foreach (Player in AllPlayers) {
		SetPlayerEliminated(Player, False);
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}