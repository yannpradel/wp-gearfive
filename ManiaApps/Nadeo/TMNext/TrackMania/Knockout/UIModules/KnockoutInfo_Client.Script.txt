/**
 *  UI module: KnockoutInfo client side
 */
#Const Version		"2023-03-31"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/Knockout/UIModules/KnockoutInfo_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Colors.Script.txt" as Colors
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Constants
#Include "ManiaApps/Nadeo/TMNext/TrackMania/Knockout/UIModules/KnockoutInfo_Common.Script.txt" as UIModules_KnockoutInfo_Common
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/PlayerName.Script.txt" as PlayerName
#Include "ColorLib" as CL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_SizeRank 5
#Const C_SizeName 30
#Const C_SizeTime 14.5

#Const C_PlayerSlots_Nb 10
#Const C_PlayerSlots_Margin 5.5

// Priority order: Leader, Eliminated players, Last players, Top players
#Const C_PlayerSlots_LastPlayersNb 6

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_KnockoutInfo_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_KnockoutInfo_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Knockout] %1 is the number of the match, e.g. "Match 16"
	declare Text_ServerNumber = _("Match %1");
	//L16N [Knockout] Number of rounds on this track. Will be in front of the round progression eg "3/5"
	declare Text_MapRound = _("Track rounds");
	//L16N [Knockout] Round number. Will be in front of the round progression eg "3/10"
	declare Text_Round = _("|Race|Round");
	//L16N [Knockout] Minimum number of players eliminated each round. Will be in front of a number eg "1" or "2 until 8 players"
	declare Text_KOs = _("KOs per round");
	//L16N [Knockout] Number of players playing current round. Will be in front of a number eg "42"
	declare Text_Players = _("Players");
	//L16N [Knockout] Text displayed beside players that retired from the race
	declare Text_DNF = _("|DidNotFinish|DNF");
	declare TotalWidth = C_SizeRank + C_SizeName + C_SizeTime;
	declare Img_ButtonToggleClosed = Constants::C_ImageUrl_Icon_Arrow_Right_Oblique;
	declare Img_ButtonToggleOpened = Constants::C_ImageUrl_Icon_Arrow_Left_Oblique;
	declare MLScores = "";
	for(Index, 0, C_PlayerSlots_Nb-1) {
		MLScores ^= """
<frameinstance modelid="player-score" id="frame-score-{{{Index}}}" pos="0 {{{Index*-C_PlayerSlots_Margin}}}"/>
		""";
	}
	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-ingame-text" textfont="{{{FontManager::C_GameFontExtraBold}}}" textcolor="{{{CL::RgbToHex6(Colors::C_Ingame_GhostWhite)}}}" textsize="1.5" valign="center2" textprefix="$i$t"/>
	<style class="text-ingame-time" textfont="{{{FontManager::C_GameFontSemiBold}}}" textcolor="{{{CL::RgbToHex6(Colors::C_Ingame_GhostWhite)}}}" textsize="1.25" valign="center2" textprefix="$i$t"/>
	<style class="text-ingame-number" textfont="{{{FontManager::C_GameFontExtraBold}}}" textcolor="{{{CL::RgbToHex6(Colors::C_Ingame_GhostWhite)}}}" textsize="1.5" valign="center2" textprefix="$i$t"/>
	<style class="quad-base" halign="center" valign="center"/>
</stylesheet>
<framemodel id="player-score">
	<label id="label-rank" pos="0 0" size="{{{C_SizeRank}}} 10" class="text-ingame-number" halign="left" />
	<frameinstance id="playername-name" z-index="2" modelid="{{{PlayerName::C_Name}}}" pos="{{{C_SizeRank + 1}}} 0" data-size="{{{C_SizeName}}} 10" data-halign="left" data-valign="center" data-textprefix="$t$i" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" data-textsize="1.5" />
	<label id="label-time-diff" pos="{{{TotalWidth + 2}}} 0" size="{{{C_SizeTime}}} 10" class="text-ingame-time" halign="right" />
	<quad id="quad-focus-bg" z-index="-2" pos="-1 0" size="{{{TotalWidth + 4}}} 5" class="quad-base" halign="left" opacity="0.7" bgcolor="000"/>
	<quad id="quad-player-score-hitbox" z-index="-1" pos="-1 0" size="{{{TotalWidth + 4}}} 5" class="quad-base" halign="left" scriptevents="1" bgcolor="0000" bgcolorfocus="0007"/>
</framemodel>

<frame z-index="-2" hidden="1" id="frame-global">
	<frame {{{UIModules::CustomizableUIModule(UIModules_KnockoutInfo_Common::C_UIModuleConfig)}}} size="{{{TotalWidth + 20}}} 180" valign="center">
		<frame id="frame-content" pos="1 0">
			<frame pos="{{{TotalWidth + 6.5}}} 20.25" id="frame-toggle">
				<quad id="quad-toggle" size="6 6" class="quad-base" z-index="3" opacity="0.9" scriptevents="1" image="{{{Img_ButtonToggleOpened}}}" colorize="fff"/>
			</frame>
			<frame id="frame-live-ranking">
				<frame pos="0 10">
					<quad id="quad-info-bg" pos="-1 5.25" size="{{{TotalWidth + 4}}} 16" valign="center" z-index="-3" bgcolor="000" opacity="0.5"/>
					<label id="label-info-map-rounds" pos="0 15" size="{{{TotalWidth/2.}}} 10" class="text-ingame-text" text="{{{Text_MapRound}}}" halign="left" />
					<label id="label-server-number" pos="{{{TotalWidth/2.}}} 15" size="{{{TotalWidth-5.}}} 10" class="text-ingame-text" halign="center" />
					<label pos="0 10" size="{{{TotalWidth/2.}}} 10" class="text-ingame-text" text="{{{Text_Round}}}" halign="left" />
					<label pos="0 5" size="{{{TotalWidth/2.}}} 10" class="text-ingame-text" text="{{{Text_Players}}}" halign="left" />
					<label size="{{{TotalWidth/2.}}} 10" class="text-ingame-text" text="{{{Text_KOs}}}" halign="left" />
					<label id="label-map-rounds" pos="{{{TotalWidth + 2}}} 15" size="{{{TotalWidth/2.}}} 10" class="text-ingame-number" halign="right" />
					<label id="label-round" pos="{{{TotalWidth + 2}}} 10" size="{{{TotalWidth/2.}}} 10" class="text-ingame-number" halign="right" />
					<label id="label-players" pos="{{{TotalWidth + 2}}} 5" size="{{{TotalWidth/2.}}} 10" class="text-ingame-number" halign="right" />
					<label id="label-KOs" pos="{{{TotalWidth + 2}}} 0" size="{{{TotalWidth/2.}}} 10" class="text-ingame-number" halign="right" />
				</frame>
				<frame pos="-1 0" id="frame-separator">
					<quad pos="{{{TotalWidth/2 + 2}}} 1.75" size="{{{TotalWidth}}} 0.25" bgcolor="fff" class="quad-base"/>
				</frame>
				<quad pos="-1 2.75" size="{{{TotalWidth + 4}}} {{{C_PlayerSlots_Margin*C_PlayerSlots_Nb + 2}}}" z-index="-3" bgcolor="000" opacity="0.5"/>
				<frame id="frame-scores">
					{{{MLScores}}}
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils
#Include "ManiaApps/Nadeo/TMNext/TrackMania/Knockout/Components/EliminationStatus.Script.txt" as EliminationStatus
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform

#Const C_PlayerSlots_Leader 0
#Const C_PlayerSlots_LastPlayers 1
#Const C_PlayerSlots_TopPlayers 2

#Const C_PlayerStatus_Ok 0
#Const C_PlayerStatus_NearEliminated 1
#Const C_PlayerStatus_VeryNearEliminated 2
#Const C_PlayerStatus_Eliminated 3

#Const C_PlayerStatus_NearEliminatedThreshold 1
#Const C_PlayerStatus_VeryNearEliminatedThreshold 1

#Const C_Color_Ok {{{ColorPalette::C_Color_Vec3_GreenOne}}}
#Const C_Color_NearEliminated <1.,1.,0.>
#Const C_Color_VeryNearEliminated <1.,.8,0.>
#Const C_Color_Eliminated <1.,0.,0.>

#Const C_Frequency_AutoRankingUpdate 250

#Struct K_PlayerInfo {
	Text AccountId;
	Text Login;
	Text Name;
	Integer TimeDiff;
	Boolean DNF;
	Integer PrevRank;
	Integer CurRank;
	Integer Status;
}
""",
"""
Void InitScoreFrames(CMlFrame _Frame_Scores) {
	if (_Frame_Scores == Null) return;
	foreach (Index => Control in _Frame_Scores.Controls) {
		declare Real InitialPositionY for Control = -123.;
		InitialPositionY = Control.RelativePosition_V3.Y;
	}
}

Void UpdateRound(CMlLabel _Label_Round, Integer _RoundNb, Integer _RoundTotal) {
	if (_Label_Round == Null) return;
	declare Result = ""^_RoundNb;
	if (_RoundNb <= 0) Result = "-";
	if (_RoundTotal > 0) Result ^= "/"^_RoundTotal;
	_Label_Round.Value = Result;
}

Void UpdateAdditionalInfo(CMlFrame _Frame_Global, CMlLabel _Label_MapRounds, Integer _MapRoundNb, Integer _MapRoundTotal, Integer _ServerNumber) {
	if (_Frame_Global == Null) return;
	declare CMlFrame Frame_Toggle <=> (_Frame_Global.GetFirstChild("frame-toggle") as CMlFrame);
	declare CMlQuad Quad_InfoBg <=> (_Frame_Global.GetFirstChild("quad-info-bg") as CMlQuad);
	declare CMlLabel Label_InfoMapRound <=> (_Frame_Global.GetFirstChild("label-info-map-rounds") as CMlLabel);
	declare CMlLabel Label_ServerNumber <=> (_Frame_Global.GetFirstChild("label-server-number") as CMlLabel);
	declare AdditionalInfoCount = 0;
	if (_MapRoundNb <= 0 && _MapRoundTotal <= 0) {
		Quad_InfoBg.RelativePosition_V3.Y = 5.25;
		Quad_InfoBg.Size.Y = 16.;
		if (_Label_MapRounds != Null) _Label_MapRounds.Hide();
		Label_InfoMapRound.Hide();
	} else {
		UpdateRound(_Label_MapRounds, _MapRoundNb, _MapRoundTotal);
		if (_Label_MapRounds != Null) _Label_MapRounds.Show();
		Label_InfoMapRound.Show();
		AdditionalInfoCount += 1;
	}
	if (_ServerNumber >= 0) {
		Label_ServerNumber.Value = TL::Compose("{{{Text_ServerNumber}}}", ""^_ServerNumber+1);
		Label_ServerNumber.RelativePosition_V3.Y = 15. + (5. * AdditionalInfoCount);
		Label_ServerNumber.Show();
		AdditionalInfoCount += 1;
	} else {
		Label_ServerNumber.Hide();
	}
	Frame_Toggle.RelativePosition_V3.Y = 20.25 + (5.*AdditionalInfoCount);
	Quad_InfoBg.RelativePosition_V3.Y = 5.25 + (2.5*AdditionalInfoCount);
	Quad_InfoBg.Size.Y = 16. + (5.*AdditionalInfoCount);
}

Void UpdatePlayersNb(CMlLabel _Label_Players, Integer _PlayersNb) {
	if (_Label_Players == Null) return;
	_Label_Players.Value = ""^_PlayersNb;
}

Void UpdateKOsNumber(CMlLabel _Label_KOs, Integer _KOsNumber, Integer _KOsMilestone) {
	if (_Label_KOs == Null) return;
	declare Result = ""^_KOsNumber;
	if (_KOsNumber <= 0) {
		Result = _("No K.O.");
	} else if (_KOsMilestone > 1) {
		Result = TL::Compose(_("%1 until %2 Players"), ""^_KOsNumber, ""^_KOsMilestone);
	}
	_Label_KOs.Value = Result;
}

Void UpdateScoreFrame(CMlFrame _Frame_Score, K_PlayerInfo _PlayerInfo, Real _PosYOffset) {
	if (_Frame_Score == Null) return;
	_Frame_Score.Visible = _PlayerInfo.AccountId != "";
	if (!_Frame_Score.Visible) return;
	declare Real InitialPositionY for _Frame_Score = -123.;
	if (InitialPositionY != -123) _Frame_Score.RelativePosition_V3.Y = InitialPositionY + _PosYOffset;
	declare CMlLabel Label_Rank <=> (_Frame_Score.GetFirstChild("label-rank") as CMlLabel);
	declare CMlFrame PlayerName_Name <=> (_Frame_Score.GetFirstChild("playername-name") as CMlFrame);
	declare CMlLabel Label_TimeDiff <=> (_Frame_Score.GetFirstChild("label-time-diff") as CMlLabel);
	declare CMlQuad Quad_FocusBg <=> (_Frame_Score.GetFirstChild("quad-focus-bg") as CMlQuad);
	declare CMlQuad Quad_Hitbox <=> (_Frame_Score.GetFirstChild("quad-player-score-hitbox") as CMlQuad);
	declare Text KnockoutInfo_PlayerLogin for Quad_Hitbox = "";
	KnockoutInfo_PlayerLogin = _PlayerInfo.Login;
	declare StatusColor = C_Color_Ok;
	switch (_PlayerInfo.Status) {
		case C_PlayerStatus_Ok: StatusColor = C_Color_Ok;
		case C_PlayerStatus_NearEliminated: StatusColor = C_Color_NearEliminated;
		case C_PlayerStatus_VeryNearEliminated: StatusColor = C_Color_VeryNearEliminated;
		case C_PlayerStatus_Eliminated: StatusColor = C_Color_Eliminated;
	}
	Label_Rank.Value = ""^ _PlayerInfo.CurRank;
	{{{PlayerName::P}}}SetAccountId(This, PlayerName_Name, _PlayerInfo.AccountId, False);
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null && _PlayerInfo.AccountId != "" && _PlayerInfo.AccountId == Owner.User.WebServicesUserId) {
		Quad_FocusBg.Show();
	} else {
		Quad_FocusBg.Hide();
	}
	Label_TimeDiff.TextColor = StatusColor;
	if (_PlayerInfo.DNF) {
		Label_TimeDiff.Value = "{{{Text_DNF}}}";
		Label_TimeDiff.TextColor = C_Color_Eliminated;
	} else if (_PlayerInfo.CurRank == 1) {
		Label_TimeDiff.Value = TL::TimeToText(_PlayerInfo.TimeDiff, True, True);
	} else if (_PlayerInfo.TimeDiff < 60000){
		declare Text Text_Miliseconds = "000";
		declare Text Text_Seconds = ""^(_PlayerInfo.TimeDiff/1000);
		declare Integer Miliseconds = _PlayerInfo.TimeDiff%1000;
		if (Miliseconds < 10){
			Text_Miliseconds = "00"^Miliseconds;
		} else if (Miliseconds < 100){
			Text_Miliseconds = "0"^Miliseconds;
		} else if (Miliseconds < 1000){
			Text_Miliseconds = ""^Miliseconds;
		}
		Label_TimeDiff.Value = "+"^Text_Seconds^"."^Text_Miliseconds;
	} else {
		Label_TimeDiff.Value = "+"^TL::TimeToText(_PlayerInfo.TimeDiff, False);
	}
}

Void UpdateLiveRanking(CMlFrame _Frame_Scores, Integer _KOsNumber) {
	// Save current progress in the score
	// And create ScoreId to PlayerId table
	declare Ident[Ident] ScoreIdToPlayerId;
	foreach (Player in Players) {
		if (Player.Score != Null) {
			declare Integer KnockoutInfo_LastUpdate for Player.Score = -1;
			if ((Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) && Player.StartTime > 0) {
				KnockoutInfo_LastUpdate = Now;
			}
			ScoreIdToPlayerId[Player.Score.Id] = Player.Id;
		}
	}

	// Create ranking
	declare Owner <=> MV_Utils::GetOwner(This);
	declare Integer[Ident][Integer] TmpRanking;
	
	declare Integer LatestCPTime = 0;
	foreach (Score in Scores) {
		if (Score != Null) {
			declare netread Boolean Net_Knockout_PlayerIsAlive for Score = False;
			if (Net_Knockout_PlayerIsAlive) {
				if (
					ScoreIdToPlayerId.existskey(Score.Id) &&
					Players.existskey(ScoreIdToPlayerId[Score.Id])
				) {
					declare Player <=> Players[ScoreIdToPlayerId[Score.Id]];

					if (Player.RaceWaypointTimes.count > 0) {
						if (!TmpRanking.existskey(Player.RaceWaypointTimes.count)) {
							TmpRanking[Player.RaceWaypointTimes.count] = [];
						}

						declare CheckpointTime = -1;
						CheckpointTime = Player.RaceWaypointTimes[Player.RaceWaypointTimes.count - 1];
						TmpRanking[Player.RaceWaypointTimes.count][Player.Score.Id] = CheckpointTime;

						if (CheckpointTime > LatestCPTime) LatestCPTime = CheckpointTime;
					} else {
						if (!TmpRanking.existskey(0)) {
							TmpRanking[0] = [];
						}
						TmpRanking[0][Player.Score.Id] = -1;
					}
				} else { // add disconnected alive players
					if (!TmpRanking.existskey(0)) {
						TmpRanking[0] = [];
					}
					TmpRanking[0][Score.Id] = -1;
				}
			}
		}
	}
	TmpRanking = TmpRanking.sortkeyreverse();

	declare K_PlayerInfo[] Ranking;
	declare K_PlayerInfo OwnerInfo;
	declare Integer OwnerIndex;
	declare Boolean IsLeader = True;
	declare Ident LeaderId = NullId;
	declare Integer MinTimeDiff = 0;
	declare K_PlayerInfo[Ident] DNFPlayers;
	foreach (CheckpointKey => CheckpointTimes in TmpRanking) {
		declare SortedCheckpointTimes = CheckpointTimes.sort();

		foreach (ScoreId => CheckpointTime in SortedCheckpointTimes) {
			declare Score <=> Scores[ScoreId];
			declare netread Boolean Net_Knockout_DNF for Score = False;
			declare Integer KnockoutInfo_LastUpdate for Score = -1;
			declare Integer KnockoutInfo_PrevRank for Score = 0;
			declare Integer NewRank = Ranking.count + 1;
			declare Integer TimeDiff = 0;

			// Save the checkpoint times of the leader
			if (IsLeader) {
				LeaderId = ScoreId;
				MinTimeDiff = 0;
				if (CheckpointTime >= 0) {
					TimeDiff = CheckpointTime;
				}
			}
			// Compute the time diff
			else {
				if (
					LeaderId != NullId &&
					ScoreIdToPlayerId.existskey(LeaderId) &&
					Players.existskey(ScoreIdToPlayerId[LeaderId]) &&
					Players[ScoreIdToPlayerId[LeaderId]].RaceWaypointTimes.existskey(CheckpointKey - 1)
				) {
					declare CSmPlayer LeaderPlayer <=> Players[ScoreIdToPlayerId[LeaderId]];
					declare Integer LeaderTimeAtCheckpoint = LeaderPlayer.RaceWaypointTimes[CheckpointKey-1];
					if (LeaderPlayer.RaceWaypointTimes.existskey(CheckpointKey)) {
						TimeDiff = ML::Max(CheckpointTime - LeaderTimeAtCheckpoint, LatestCPTime - LeaderPlayer.RaceWaypointTimes[CheckpointKey]);
					} else {
						TimeDiff = CheckpointTime - LeaderTimeAtCheckpoint;
					}
				} else {
					TimeDiff = 0;
				}

				if (TimeDiff > MinTimeDiff) {
					MinTimeDiff = TimeDiff;
				} else {
					TimeDiff = MinTimeDiff;
				}
			}

			// Add the player to the ranking
			declare RankingEntry = K_PlayerInfo {
				AccountId = Score.User.WebServicesUserId,
				Login = "",
				Name = {{{UserStore::P}}}GetPlayerName(Score.User, True),
				TimeDiff = TimeDiff,
				DNF = Net_Knockout_DNF,
				PrevRank = KnockoutInfo_PrevRank,
				CurRank = NewRank
			};
			if (!Net_Knockout_DNF) {
				if (KnockoutInfo_LastUpdate == Now) RankingEntry.Login = Score.User.Login; // used to spectate, set only for spawned players
				Ranking.add(RankingEntry);
				KnockoutInfo_PrevRank = NewRank;
				if (Owner != Null && RankingEntry.AccountId == Owner.User.WebServicesUserId) {
					OwnerInfo = RankingEntry;
					OwnerIndex = Ranking.count-1;
				}
			} else {
				DNFPlayers[Score.Id] = RankingEntry;
			}

			IsLeader = False;
		}
	}

	declare OwnerDNF = False;
	foreach (ScoreId => RankingEntry in DNFPlayers) {
		declare DNFEntry = RankingEntry;
		declare NewRank = Ranking.count + 1;
		DNFEntry.CurRank = NewRank;
		DNFEntry.Status = C_PlayerStatus_Eliminated;
		Ranking.add(DNFEntry);
		declare Integer KnockoutInfo_PrevRank for Scores[ScoreId] = 0;
		KnockoutInfo_PrevRank = NewRank;
		if (Owner != Null && DNFEntry.AccountId == Owner.User.WebServicesUserId) {
			OwnerInfo = DNFEntry;
			OwnerIndex = Ranking.count-1;
			OwnerDNF = True;
		}
	}
	EliminationStatus::SetOwnerEliminated(UI, OwnerDNF || (OwnerInfo.CurRank > Ranking.count - _KOsNumber));

	declare LastPlayersNb_ToDisplay = ML::Max({{{C_PlayerSlots_LastPlayersNb}}}, _KOsNumber); // @TODO @QG mettre plus de DNF affichable ?
	declare LastKOPlayerSlotIndex = -1;
	declare Integer[Integer] AvailableSlots = []; // slot index => player index in Ranking
	declare AvailableSlotsNb = _Frame_Scores.Controls.count;
	declare LastPlayerFrameIndex = -1;
	declare PlayerFound = False;
	for (Index, 0, AvailableSlotsNb - 1) {
		declare ReverseIndex = AvailableSlotsNb - 1 - Index;
		if (ReverseIndex == 0 && Ranking.count > 0) { // leader
			if (LastPlayerFrameIndex == -1) LastPlayerFrameIndex = 0;
			AvailableSlots[0] = 0;
		} else if (Ranking.count-1 >= ReverseIndex) {
			if (LastPlayerFrameIndex == -1) LastPlayerFrameIndex = ReverseIndex;
			declare Status = C_PlayerStatus_Ok;
			if (LastPlayerFrameIndex - ReverseIndex < _KOsNumber) Status = C_PlayerStatus_Eliminated;
			else if (LastPlayerFrameIndex - ReverseIndex < _KOsNumber + C_PlayerStatus_VeryNearEliminatedThreshold) Status = C_PlayerStatus_VeryNearEliminated;
			else if (LastPlayerFrameIndex - ReverseIndex < _KOsNumber + C_PlayerStatus_VeryNearEliminatedThreshold + C_PlayerStatus_NearEliminatedThreshold) Status = C_PlayerStatus_NearEliminated;
			declare Integer RankingIndex = 0;
			if (LastPlayersNb_ToDisplay > 0) {
				RankingIndex = Ranking.count - 1 - LastPlayerFrameIndex + ReverseIndex;
				LastPlayersNb_ToDisplay -= 1;
			} else {
				RankingIndex = ReverseIndex;
			}
			AvailableSlots[ReverseIndex] = RankingIndex;
			Ranking[RankingIndex].Status = Status;
			if (Status == C_PlayerStatus_Eliminated) LastKOPlayerSlotIndex = ReverseIndex;
		} else {
			AvailableSlots[ReverseIndex] = -1;
		}
		if (
			Owner != Null &&
			Ranking.existskey(AvailableSlots[ReverseIndex]) &&
			Ranking[AvailableSlots[ReverseIndex]].AccountId == Owner.User.WebServicesUserId
		) {
			PlayerFound = True;
		}
	}

	if (!PlayerFound && OwnerInfo.AccountId != "") {
		for (Index, 0, AvailableSlots.count - 1) {
			if (
				!PlayerFound &&
				AvailableSlots.existskey(Index) &&
				Ranking.existskey(AvailableSlots[Index]) &&
				(Ranking[AvailableSlots[Index]].CurRank >= OwnerInfo.CurRank ||
				(Ranking[AvailableSlots[Index]].DNF && OwnerInfo.DNF))
			) {
				PlayerFound = True;
				AvailableSlots[Index] = OwnerIndex;
			}
		}
	}
	
	foreach (Index => Control in _Frame_Scores.Controls) {
		declare RankingIndex = AvailableSlots[Index];
		declare PosYOffset = 0.;
		if (
			Index >= LastKOPlayerSlotIndex &&
			LastKOPlayerSlotIndex > 0
		) {
			PosYOffset = -2.;
		}
		if (Ranking.existskey(RankingIndex)) {
			UpdateScoreFrame((Control as CMlFrame), Ranking[RankingIndex], PosYOffset);
		} else {
			UpdateScoreFrame((Control as CMlFrame), K_PlayerInfo {}, PosYOffset);
		}
	}

	declare CMlFrame Frame_Separator <=> (Page.GetFirstChild("frame-separator") as CMlFrame);
	Frame_Separator.RelativePosition_V3.Y = (LastKOPlayerSlotIndex) * {{{-C_PlayerSlots_Margin}}}*1.;
	Frame_Separator.Visible = (LastKOPlayerSlotIndex > 0);
}

Void DisplayLiveRanking(CMlFrame _Frame_Content, Boolean _LiveRankingVisibleTarget) {
	declare CMlFrame Frame_LiveRanking <=> (_Frame_Content.GetFirstChild("frame-live-ranking") as CMlFrame);
	declare CMlQuad Quad_Toggle <=> (_Frame_Content.GetFirstChild("quad-toggle") as CMlQuad);
	if (_LiveRankingVisibleTarget) {
		Quad_Toggle.ChangeImageUrl("{{{Img_ButtonToggleOpened}}}");
	} else {
		Quad_Toggle.ChangeImageUrl("{{{Img_ButtonToggleClosed}}}");
	}
	declare HiddenPosX = {{{-TotalWidth - 3}}};
	declare VisiblePosX = 1.;
	declare StartPos = _Frame_Content.RelativePosition_V3;
	declare EndPosX = VisiblePosX;
	if (!_LiveRankingVisibleTarget) EndPosX = HiddenPosX;
	AnimMgr.Flush(_Frame_Content);
	AnimMgr.Flush(Frame_LiveRanking);
	Frame_LiveRanking.Show();
	if (!_LiveRankingVisibleTarget) {
		AnimMgr.Add(Frame_LiveRanking, "<frame hidden=\""^1^"\" />", Now, 250, CAnimManager::EAnimManagerEasing::Linear);
	}
	AnimMgr.Add(_Frame_Content, "<frame pos=\"" ^EndPosX^" "^StartPos.Y^ "\" />", Now, 250, CAnimManager::EAnimManagerEasing::Linear);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Content;
declare CMlFrame Frame_Scores;
declare CMlLabel Label_MapRounds;
declare CMlLabel Label_Round;
declare CMlLabel Label_Players;
declare CMlLabel Label_KOs;

declare netread Integer Net_Knockout_KnockoutInfo_MapRoundNb for Teams[0] = 0;
declare netread Integer Net_Knockout_KnockoutInfo_MapRoundTotal for Teams[0] = 0;
declare netread Integer Net_Knockout_KnockoutInfo_RoundNb for Teams[0] = 0;
declare netread Integer Net_Knockout_KnockoutInfo_RoundTotal for Teams[0] = 0;
declare netread Integer Net_Knockout_KnockoutInfo_PlayersNb for Teams[0] = 0;
declare netread Integer Net_Knockout_KnockoutInfo_KOsNumber for Teams[0] = 0;
declare netread Integer Net_Knockout_KnockoutInfo_KOsMilestone for Teams[0] = 0;
declare netread Integer Net_Knockout_KnockoutInfo_RankingUpdate for Teams[0] = 0;
declare netread Integer Net_Knockout_KnockoutInfo_ServerNumber for Teams[0] = -1;

declare Boolean DisplayModule;
declare Boolean ContentVisible;
declare Integer RankingUpdate;
declare Integer AutoRankingUpdate;
declare Integer MapRoundNb;
declare Integer MapRoundTotal;
declare Integer RoundNb;
declare Integer RoundTotal;
declare Integer PlayersNb;
declare Integer KOsNumber;
declare Integer KOsMilestone;
declare Integer CPCount;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Content <=> (Page.GetFirstChild("frame-content") as CMlFrame);
Frame_Scores <=> (Page.GetFirstChild("frame-scores") as CMlFrame);
Label_MapRounds <=> (Page.GetFirstChild("label-map-rounds") as CMlLabel);
Label_Round <=> (Page.GetFirstChild("label-round") as CMlLabel);
Label_Players <=> (Page.GetFirstChild("label-players") as CMlLabel);
Label_KOs <=> (Page.GetFirstChild("label-KOs") as CMlLabel);

DisplayModule = Frame_Global.Visible;
ContentVisible = Frame_Content.Visible;
MapRoundNb = Net_Knockout_KnockoutInfo_RoundNb;
MapRoundTotal = Net_Knockout_KnockoutInfo_RoundTotal;
RoundNb = Net_Knockout_KnockoutInfo_RoundNb;
RoundTotal = Net_Knockout_KnockoutInfo_RoundTotal;
PlayersNb = Net_Knockout_KnockoutInfo_PlayersNb;
KOsNumber = Net_Knockout_KnockoutInfo_KOsNumber;
KOsMilestone = Net_Knockout_KnockoutInfo_KOsMilestone;
CPCount = -1;
RankingUpdate = -123;
if (C_Frequency_AutoRankingUpdate > 0) {
	AutoRankingUpdate = Now + C_Frequency_AutoRankingUpdate;
} else {
	AutoRankingUpdate = -123;
}
InitScoreFrames(Frame_Scores);
UpdateAdditionalInfo(Frame_Global, Label_MapRounds, MapRoundNb, MapRoundTotal, Net_Knockout_KnockoutInfo_ServerNumber);
UpdateRound(Label_Round, RoundNb, RoundTotal);
UpdateKOsNumber(Label_KOs, KOsNumber, KOsMilestone);
UpdatePlayersNb(Label_Players, PlayersNb);

// Must move this UI to respect safe area on Playstation (see /trackmania-next/tmnext/-/issues/5400)
if (Platform::IsSony(System)) {
	Frame_Global.RelativePosition_V3.X = Frame_Global.RelativePosition_V3.X + 9.;
}
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Knockout_KnockoutInfo_IsVisible for Owner;
		if (DisplayModule != Net_Knockout_KnockoutInfo_IsVisible) {
			DisplayModule = Net_Knockout_KnockoutInfo_IsVisible;
			Frame_Global.Visible = Net_Knockout_KnockoutInfo_IsVisible;
		}
	}

	foreach(Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::MouseClick: {
				if (Event.Control.ControlId == "quad-toggle") {
					ContentVisible = !ContentVisible;
					DisplayLiveRanking(Frame_Content, ContentVisible);
				} else if (Event.Control.ControlId == "quad-player-score-hitbox") {
					declare Text KnockoutInfo_PlayerLogin for Event.Control = "";
					if (KnockoutInfo_PlayerLogin != "") {
						ClientUI.Spectator_SetForcedTarget_Clear();
						SetSpectateTarget(KnockoutInfo_PlayerLogin);
					}
				}
			}
		}
	}

	if (
		MapRoundNb != Net_Knockout_KnockoutInfo_MapRoundNb ||
		MapRoundTotal != Net_Knockout_KnockoutInfo_MapRoundTotal
	) {
		MapRoundNb = Net_Knockout_KnockoutInfo_MapRoundNb;
		MapRoundTotal = Net_Knockout_KnockoutInfo_MapRoundTotal;
		UpdateAdditionalInfo(Frame_Global, Label_MapRounds, MapRoundNb, MapRoundTotal, Net_Knockout_KnockoutInfo_ServerNumber);
	}

	if (
		RoundNb != Net_Knockout_KnockoutInfo_RoundNb ||
		RoundTotal != Net_Knockout_KnockoutInfo_RoundTotal
	) {
		RoundNb = Net_Knockout_KnockoutInfo_RoundNb;
		RoundTotal = Net_Knockout_KnockoutInfo_RoundTotal;
		UpdateRound(Label_Round, RoundNb, RoundTotal);
	}
	
	if (
		KOsNumber != Net_Knockout_KnockoutInfo_KOsNumber ||
		KOsMilestone != Net_Knockout_KnockoutInfo_KOsMilestone
	) {
		KOsNumber = Net_Knockout_KnockoutInfo_KOsNumber;
		KOsMilestone = Net_Knockout_KnockoutInfo_KOsMilestone;
		UpdateKOsNumber(Label_KOs, KOsNumber, KOsMilestone);
	}

	if (PlayersNb != Net_Knockout_KnockoutInfo_PlayersNb) {
		PlayersNb = Net_Knockout_KnockoutInfo_PlayersNb;
		UpdatePlayersNb(Label_Players, PlayersNb);
	}

	if (
		RankingUpdate != Net_Knockout_KnockoutInfo_RankingUpdate ||
		(AutoRankingUpdate > 0 && AutoRankingUpdate <= Now) ||
		(InputPlayer != Null && CPCount != InputPlayer.RaceWaypointTimes.count)
	) {
		if (InputPlayer != Null) CPCount = InputPlayer.RaceWaypointTimes.count;
		RankingUpdate = Net_Knockout_KnockoutInfo_RankingUpdate;
		if (AutoRankingUpdate > 0) AutoRankingUpdate = Now + C_Frequency_AutoRankingUpdate;
		UpdateLiveRanking(Frame_Scores, KOsNumber);
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}
}
***
""",
[
	UserStore::ComponentV2(),
	UIModules::Component(),
	PlayerName::ComponentV2()
],
[]
	);
}