/**
 *  UI module: NetShare server side for TA Daily
 */
#Const Version    "2020-12-04"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/TimeAttackDaily/UIModules/NetShare_Server.Script.txt"

#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TimeAttackDaily/Constants.Script.txt" as Constants
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TimeAttackDaily/DailyStructs.Script.txt" as DailyStructs

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_TimeAttackDaily_NetShare"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void SetCupState(Integer _CupState) {
	declare netwrite Integer Net_TimeAttackDaily_NetShare_CupState for Teams[0];
	Net_TimeAttackDaily_NetShare_CupState = _CupState;
}

Void SetPlayerResults(DailyStructs::K_Result[Text] _Results) {
	foreach (Player in AllPlayers) {
		if (
			Player != Null &&
			_Results.existskey(Player.User.WebServicesUserId)
		) {
			declare PlayerUI = UIManager.GetUI(Player);
			if (PlayerUI != Null) {
				declare PlayerResult = _Results[Player.User.WebServicesUserId];
				declare netwrite Integer Net_TimeAttackDaily_NetShare_Rank for PlayerUI;
				declare netwrite Integer Net_TimeAttackDaily_NetShare_BestTime for PlayerUI;
				declare netwrite Boolean Net_TimeAttackDaily_NetShare_HasResult for PlayerUI;
				declare netwrite Boolean Net_TimeAttackDaily_NetShare_WaitingForNewRank for PlayerUI;
				Net_TimeAttackDaily_NetShare_Rank = PlayerResult.Rank;
				Net_TimeAttackDaily_NetShare_BestTime = PlayerResult.BestTime;
				Net_TimeAttackDaily_NetShare_HasResult = PlayerResult.BestTime > 0;
				Net_TimeAttackDaily_NetShare_WaitingForNewRank = PlayerResult.WaitingForNewRank;
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	declare PlayerUI = UIManager.GetUI(_Player);
	if (PlayerUI != Null) {
		declare netwrite Integer Net_TimeAttackDaily_NetShare_Rank for PlayerUI;
		declare netwrite Integer Net_TimeAttackDaily_NetShare_BestTime for PlayerUI;
		declare netwrite Boolean Net_TimeAttackDaily_NetShare_HasResult for PlayerUI;
		Net_TimeAttackDaily_NetShare_Rank = 0;
		Net_TimeAttackDaily_NetShare_BestTime = 0;
		Net_TimeAttackDaily_NetShare_HasResult = False;
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetCupState(Constants::C_TimeAttackDaily_CupState_None);
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}