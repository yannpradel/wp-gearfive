/**
 *  UI module: NextMatchTracker server side
 */
#Const Version    "2021-12-13"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/TimeAttackDaily/UIModules/NextMatchTracker_Server.Script.txt"

#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TimeAttackDaily/DailyStructs.Script.txt" as DailyStructs

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_TimeAttackDaily_NextMatchTracker"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Text[Text] G_RegisteredPlayers; // List of registered players on this server for the hole program (not deleted when player leaves)

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the list of registered players's AccountIds
 *
 */
Void AddRegisteredPlayersZones(Ident _PlayerId) {
	if (Players.existskey(_PlayerId)) {
		declare Player <=> Players[_PlayerId];
		if (Player != Null && Player.User != Null) G_RegisteredPlayers[Player.User.WebServicesUserId] = Player.User.ZonePath;
		declare PlayerUI = UIManager.GetUI(Player);
		if (PlayerUI != Null) {
			declare netwrite Boolean Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered for PlayerUI;
			Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered = True;
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** List of players's AccountId that clicked the "continue the Cup of the Day" button
 *
 *
 *	@return									List of zones indexed by account ids
 */
Text[Text] GetRegisteredPlayersZones() {
	return G_RegisteredPlayers;
}

Boolean IsRegistered(CSmPlayer _Player) {
	return (
		_Player != Null &&
		G_RegisteredPlayers.existskey(_Player.User.WebServicesUserId)
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set join links for each player
 *
 *	@param	_Joinlinks										The join links
 */
Void SetJoinlinks(Text[Text] _Joinlinks) {
	foreach (Player in AllPlayers) {
		if (Player == Null) continue;
		declare PlayerUI = UIManager.GetUI(Player);
		if (PlayerUI == Null) continue;
		declare Text JoinLink = "";
		if (_Joinlinks.existskey(Player.User.WebServicesUserId)) JoinLink = _Joinlinks[Player.User.WebServicesUserId];
		declare netwrite Text Net_TimeAttackDaily_NextMatchTracker_JoinLink for PlayerUI = "";
		declare netwrite Integer Net_TimeAttackDaily_NextMatchTracker_JoinLinkUpdate for PlayerUI = -1;
		Net_TimeAttackDaily_NextMatchTracker_JoinLink = JoinLink;
		Net_TimeAttackDaily_NextMatchTracker_JoinLinkUpdate = Now;
	}
}

Void SetMatchStartTime(Integer _StartTime) {
	declare netwrite Integer Net_TimeAttackDaily_NextMatchTracker_MatchStartTime for Teams[0] = -1;
	Net_TimeAttackDaily_NextMatchTracker_MatchStartTime = _StartTime;
}

Void SetRegistrationsEndTime(Integer _EndTime) {
	declare netwrite Integer Net_TimeAttackDaily_NextMatchTracker_RegistrationsEndTime for Teams[0] = -1;
	Net_TimeAttackDaily_NextMatchTracker_RegistrationsEndTime = _EndTime;
}

Void SetAutoJoinTime(Integer _StartTime) {
	declare netwrite Integer Net_TimeAttackDaily_NextMatchTracker_AutoJoinTime for Teams[0] = -1;
	Net_TimeAttackDaily_NextMatchTracker_AutoJoinTime = _StartTime;
}

Void ConfirmRegistrations(Boolean[Text] _RegistrationConfirmed) {
	foreach (Player in Players) {
		if (Player == Null) continue;
		declare PlayerUI = UIManager.GetUI(Player);
		if (PlayerUI == Null) continue;
		declare netwrite Boolean Net_TimeAttackDaily_NextMatchTracker_RegistrationConfirmed for PlayerUI = False;
		Net_TimeAttackDaily_NextMatchTracker_RegistrationConfirmed = (_RegistrationConfirmed.existskey(Player.User.WebServicesUserId) && _RegistrationConfirmed[Player.User.WebServicesUserId]);
		declare netwrite Boolean Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered for PlayerUI = False;
		Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered = Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered || Net_TimeAttackDaily_NextMatchTracker_RegistrationConfirmed;
	}
}

/* Informs the UI that the Rank currently available in NetShare is the final rank
 *
 */
Void FinalRanksReceived(Boolean _Received) {
	declare netwrite Boolean Net_TimeAttackDaily_NextMatchTracker_FinalRanksReceived for Teams[0] = False;
	Net_TimeAttackDaily_NextMatchTracker_FinalRanksReceived = _Received;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the competition type of the server (official or rerun)
Void SetCompetitionType(Text _CompetitionType) {
	declare netwrite Text Net_TimeAttackDaily_NextMatchTracker_CompetitionType for Teams[0];
	Net_TimeAttackDaily_NextMatchTracker_CompetitionType = _CompetitionType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Display the UI as a side UI or a pop-up
Void CanDisplayPopUp(Boolean _CanDisplayPopUp) {
	declare netwrite Boolean Net_TimeAttackDaily_NextMatchTracker_CanDisplayPopUp for Teams[0];
	Net_TimeAttackDaily_NextMatchTracker_CanDisplayPopUp = _CanDisplayPopUp;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Reset the click on the buttons
Void ResetButtonClicked() {
	declare netwrite Integer Net_TimeAttackDaily_NextMatchTracker_ResetButtonClicked for Teams[0];
	Net_TimeAttackDaily_NextMatchTracker_ResetButtonClicked += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	
	declare netwrite Boolean Net_TimeAttackDaily_NextMatchTracker_IsVisible for _Player;
	Net_TimeAttackDaily_NextMatchTracker_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, False);

	declare PlayerUI = UIManager.GetUI(_Player);
	if (PlayerUI != Null) {
		declare netwrite Boolean Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered for PlayerUI;
		Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered = False;
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	G_RegisteredPlayers = [];
	SetJoinlinks([]);
	SetMatchStartTime(0);
	FinalRanksReceived(False);
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
	ConfirmRegistrations([]);
	SetRegistrationsEndTime(-1);
	SetAutoJoinTime(-1);
	SetCompetitionType("");
	CanDisplayPopUp(False);
	ResetButtonClicked();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}