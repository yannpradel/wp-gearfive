/**
 *	UI module: LiveRanking server side
 */
#Const Version		"2022-01-13"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/ChampionCommon/UIModules/LiveRanking_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "MathLib" as ML
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Common.Script.txt" as UIModules_Common
#Include "ManiaApps/Nadeo/TMNext/TrackMania/ChampionCommon/UIModules/LiveRanking_Common.Script.txt" as UIModules_LiveRanking_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const UIModules_LiveRanking_Common::C_RankingMode_BestRace as C_RankingMode_BestRace
#Const UIModules_LiveRanking_Common::C_RankingMode_CurrentRace as C_RankingMode_CurrentRace

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_LiveRanking_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::ComponentModeLibsUIModules_K_ModuleConfig GetConfig() {
	return UIModules_LiveRanking_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the criterion to use to sort the players
Void SetRankingMode(Integer _RankingMode) {
	declare netwrite Integer Net_ChampionCup_LiveRanking_UpdateRanking for Teams[0];
	declare netwrite Integer Net_ChampionCup_LiveRanking_RankingMode for Teams[0];
	Net_ChampionCup_LiveRanking_UpdateRanking += 1;
	Net_ChampionCup_LiveRanking_RankingMode = _RankingMode;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Start a new race
Void ResetRace() {
	declare netwrite Integer Net_ChampionCup_LiveRanking_UpdateRanking for Teams[0];
	declare netwrite Integer Net_ChampionCup_LiveRanking_RaceIndex for Teams[0];
	declare netwrite Text[] Net_ChampionCup_LiveRanking_FinishedRacePlayers for Teams[0];
	Net_ChampionCup_LiveRanking_UpdateRanking += 1;
	Net_ChampionCup_LiveRanking_RaceIndex += 1;
	Net_ChampionCup_LiveRanking_FinishedRacePlayers = [];
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// A player crossed the finish line
Void PlayerFinishRace(CSmPlayer _Player) {
	if (_Player.User == Null) return;
	
	declare netwrite Integer Net_ChampionCup_LiveRanking_UpdateRanking for Teams[0];
	declare netwrite Text[] Net_ChampionCup_LiveRanking_FinishedRacePlayers for Teams[0];
	Net_ChampionCup_LiveRanking_UpdateRanking += 1;
	Net_ChampionCup_LiveRanking_FinishedRacePlayers.add(_Player.User.WebServicesUserId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Add a winner to the match
Void AddWinner(Text _RoundWinnerAccountId, Integer _RoundKey, Integer[] _FinalistLevels) {
	declare netwrite Integer Net_ChampionCup_LiveRanking_UpdateRanking for Teams[0];
	declare netwrite Text[] Net_ChampionCup_LiveRanking_WinnerAccountIds for Teams[0];
	declare netwrite Integer[] Net_ChampionCup_LiveRanking_WinnerLevels for Teams[0];
	declare netwrite Integer Net_ChampionCup_LiveRanking_WinnerUpdate for Teams[0];
	declare Integer Level = 1;
	if (_FinalistLevels.existskey(_RoundKey)) {
		Level = ML::Max(1, _FinalistLevels[_RoundKey]);
	}
	Net_ChampionCup_LiveRanking_WinnerAccountIds.add(_RoundWinnerAccountId);
	Net_ChampionCup_LiveRanking_WinnerLevels.add(Level);
	Net_ChampionCup_LiveRanking_WinnerUpdate += 1;
	Net_ChampionCup_LiveRanking_UpdateRanking += 1;
}
Void AddWinner(Text _RoundWinnerAccountId) {
	AddWinner(_RoundWinnerAccountId, -1, []);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Reset all winners
Void ResetWinners() {
	declare netwrite Integer Net_ChampionCup_LiveRanking_UpdateRanking for Teams[0];
	declare netwrite Text[] Net_ChampionCup_LiveRanking_WinnerAccountIds for Teams[0];
	declare netwrite Integer[] Net_ChampionCup_LiveRanking_WinnerLevels for Teams[0];
	declare netwrite Integer Net_ChampionCup_LiveRanking_WinnerUpdate for Teams[0];
	Net_ChampionCup_LiveRanking_WinnerAccountIds = [];
	Net_ChampionCup_LiveRanking_WinnerLevels = [];
	Net_ChampionCup_LiveRanking_WinnerUpdate += 1;
	Net_ChampionCup_LiveRanking_UpdateRanking += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Force an update of the live ranking on the client
Void ForceUpdate() {
	declare netwrite Integer Net_ChampionCup_LiveRanking_UpdateRanking for Teams[0];
	Net_ChampionCup_LiveRanking_UpdateRanking += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Display a message above the race ranking
Void SetRaceMessage(Text _Message) {
	declare netwrite Text Net_ChampionCup_LiveRanking_RaceMessage for Teams[0];
	Net_ChampionCup_LiveRanking_RaceMessage = _Message;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;

	declare netwrite Boolean Net_ChampionCup_LiveRanking_IsVisible for UI;
	Net_ChampionCup_LiveRanking_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetRankingMode(C_RankingMode_CurrentRace);
	ResetRace();
	ResetWinners();
	SetRaceMessage("");
	
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}