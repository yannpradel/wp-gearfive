/**
 *	UI module: LoadSave client side
 */
#Const Version		"2021-10-22"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/ChampionCommon/UIModules/LoadSave_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "ColorLib" as CL
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as MenuConst
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "ManiaApps/Nadeo/TMNext/TrackMania/ChampionCommon/UIModules/LoadSave_Common.Script.txt" as UIModules_LoadSave_Common
#Include "ManiaApps/Nadeo/TMNext/TrackMania/ChampionCommon/UIModules/Chat_Client.Script.txt" as UIModules_Chat_Client
#Include "ManiaApps/Nadeo/TMNext/TrackMania/ChampionCommon/ZIndex.Script.txt" as ZIndex

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_NavGroupName "navgroup-championcup-loadsave"
#Const C_ButtonsPosY [-40., -55.]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_LoadSave_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_LoadSave_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [TMGL] Loading the match save
	declare Text Text_Initializing = _("Initializing match");
	//L16N [TMGL] Message displayed while waiting for the other players
	declare Text Text_WaitingForPlayers = _("Waiting for players");
	//L16N [TMGL] Button that the players can click on when they are ready
	declare Text Text_Ready = _("|Button|Ready");
	//L16N [TMGL] Button that the players can click on to cancel their choice
	declare Text Text_NotReady = _("|Button|Cancel");
	//L16N [TMGL] Button that the players can click on to leave the server
	declare Text Text_Leave = _("|Button|Leave");
	//L16N [TMGL] Countdown before the beginning of the match. %1 will be replaced by a number. eg: "Match starting in 3", then "Match starting in 2", ...
	declare Text Text_Countdown = _("Match starting in %1");

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-bold" halign="center" valign="center2" textsize="10" textprefix="$t$i" textcolor="ffffff" textfont="{{{FontManager::C_GameFontExtraBold}}}" />
</stylesheet>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_LoadSave}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_LoadSave_Common::C_UIModuleConfig)}}}>
		<quad z-index="0" pos="0 -22.5" size="320 180" fullscreen="1" halign="center" valign="center" bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.7" />
		<frame z-index="1">
			<label size="310 10" text="{{{Text_Initializing}}}" class="text-bold" />
			<label id="label-wait-players" pos="0 -10" size="310 10" textsize="6" text="{{{Text_WaitingForPlayers}}}" class="text-bold" />
			<label id="label-countdown" pos="0 -10" size="310 10" textsize="6" class="text-bold" />
			<frameinstance id="spinner-wait-players" pos="0 -23" scale="0.8" modelid="{{{LoadingSpinner::C_Name}}}" />
			<frameinstance
				id="button-ready"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				pos="0 {{{C_ButtonsPosY[0]}}}"
				data-text="{{{Text_Ready}}}"
				data-size="60 12"
				data-labelsize="50 12"
				data-opacityunfocus="0.5"
				data-image="{{{MenuConst::C_ImageUrl_ButtonBG_LocalMulti_Play}}}"
				data-imagefocus="{{{MenuConst::C_ImageUrl_ButtonBG_LocalMulti_Play}}}"
				data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-focuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-textcolor="ffffff"
				data-textfocuscolor="ffffff"
				data-textsize="5"
				data-textopacityunfocus="0.5"
				data-iconopacityunfocus="0.5"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textitalicslope="0.2"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;up;down" 
				data-nav-targets="_;_;button-leave;button-leave"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				id="button-leave"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				pos="0 {{{C_ButtonsPosY[1]}}}"
				data-text="{{{Text_Leave}}}"
				data-size="60 12"
				data-labelsize="50 12"
				data-opacityunfocus="0.5"
				data-image="{{{MenuConst::C_ImageUrl_ButtonBG_LocalMulti_Play}}}"
				data-imagefocus="{{{MenuConst::C_ImageUrl_ButtonBG_LocalMulti_Play}}}"
				data-bgcolor="{{{ColorPalette::C_Color_DarkRed}}}"
				data-focuscolor="{{{ColorPalette::C_Color_DarkRed}}}"
				data-textcolor="ffffff"
				data-textfocuscolor="ffffff"
				data-textsize="5"
				data-textopacityunfocus="0.5"
				data-iconopacityunfocus="0.5"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textitalicslope="0.2"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;up;down" 
				data-nav-targets="_;_;button-ready;button-ready"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlLabel Label_WaitPlayers;
	CMlLabel Label_Countdown;
	CMlFrame Button_Ready;
	CMlFrame Button_Leave;
}

#Struct K_State {
	K_Controls Controls;
	Boolean IsReady;
	Int2 ReadyPlayersNb;
	Boolean IsSpectator;
	Integer WaitEndTime;
	Boolean PageIsVisible;
	Boolean ModuleIsVisible;
	Boolean IsVisible;
}

#Const C_Color_Ready {{{dump(ColorPalette::C_Color_Vec3_GreenFour)}}}
#Const C_Color_NotReady {{{dump(CL::Hex6ToRgb(ColorPalette::C_Color_DarkOrange))}}}
#Const C_ButtonsPosY {{{dump(C_ButtonsPosY)}}}
#Const C_NavGroupName {{{dump(C_NavGroupName)}}}
""",
"""
Void Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

K_State SetIsReady(K_State _State, Boolean _IsReady) {
	declare K_State State = _State;

	State.IsReady = _IsReady;
	
	declare netwrite Net_ChampionCup_LoadSave_IsReady for UI = False;
	Net_ChampionCup_LoadSave_IsReady = State.IsReady;

	if (State.IsReady) {
		{{{Button::P}}}SetValue(This, State.Controls.Button_Ready, "{{{Text_NotReady}}}");
		{{{Button::P}}}SetBgColor(This, State.Controls.Button_Ready, C_Color_NotReady);
		{{{Button::P}}}SetFocusColor(This, State.Controls.Button_Ready, C_Color_NotReady);
	} else {
		{{{Button::P}}}SetValue(This, State.Controls.Button_Ready, "{{{Text_Ready}}}");
		{{{Button::P}}}SetBgColor(This, State.Controls.Button_Ready, C_Color_Ready);
		{{{Button::P}}}SetFocusColor(This, State.Controls.Button_Ready, C_Color_Ready);
	}

	return State;
}

K_State SetReadyPlayersNb(K_State _State, Int2 _ReadyPlayersNb) {
	declare K_State State = _State;

	State.ReadyPlayersNb = _ReadyPlayersNb;

	if (State.ReadyPlayersNb.Y <= 0) {
		State.Controls.Label_WaitPlayers.Value = "{{{Text_WaitingForPlayers}}}";
	} else {
		State.Controls.Label_WaitPlayers.Value = TL::Compose("%1 %2", "{{{Text_WaitingForPlayers}}}", "("^State.ReadyPlayersNb.X^"/"^State.ReadyPlayersNb.Y^")");
	}

	return State;
}

K_State SetIsSpectator(K_State _State, Boolean _IsSpectator) {
	declare K_State State = _State;

	State.IsSpectator = _IsSpectator;

	if (State.IsSpectator) {
		State.Controls.Button_Ready.Visible = False;
		State.Controls.Button_Leave.RelativePosition_V3.Y = C_ButtonsPosY[0];
		{{{Navigation::P}}}Lock(State.Controls.Button_Ready, True);
		if ({{{Navigation::P}}}GetFocusedControl(This, C_NavGroupName) == State.Controls.Button_Ready) {
			Focus({{{Navigation::P}}}GetFocusedControl(This, C_NavGroupName), State.Controls.Button_Leave);
		}
	} else {
		State.Controls.Button_Ready.Visible = True;
		State.Controls.Button_Ready.RelativePosition_V3.Y = C_ButtonsPosY[0];
		State.Controls.Button_Leave.RelativePosition_V3.Y = C_ButtonsPosY[1];
		{{{Navigation::P}}}Lock(State.Controls.Button_Ready, False);
	}

	return State;
}

Void UpdateCountdown(CMlLabel _Label_Countdown, Integer _EndTime, Integer _GameTime) {
	declare Integer Count = ML::Max(0, ((_EndTime - _GameTime) / 1000) + 1);
	_Label_Countdown.Value = TL::Compose("{{{Text_Countdown}}}", ""^Count);
}

K_State SetWaitEndTime(K_State _State, Integer _WaitEndTime) {
	declare K_State State = _State;

	State.WaitEndTime = _WaitEndTime;

	State.Controls.Label_WaitPlayers.Visible = State.WaitEndTime < 0;
	State.Controls.Label_Countdown.Visible = State.WaitEndTime >= 0;
	if (State.WaitEndTime >= 0) {
		UpdateCountdown(State.Controls.Label_Countdown, State.WaitEndTime, GameTime);
	}

	return State;
}

K_State CancelOrLeave(K_State _State) {
	declare K_State State = _State;
	
	if (State.IsReady) {
		State = SetIsReady(State, False);
	} else {
		if (Playground != Null) Playground.QuitServer(False);
	}

	return State;
}

K_State Select(K_State _State, CMlControl _Control) {
	if (_Control == Null) return _State;

	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-ready": {
			State = SetIsReady(State, !State.IsReady);
		}
		case "button-leave": {
			if (Playground != Null) Playground.QuitServer(False);
		}
	}

	return State;
}

K_State SetVisibility(K_State _State, Boolean _PageIsVisible, Boolean _ModuleIsVisible) {
	declare K_State State = _State;

	State.PageIsVisible = _PageIsVisible;
	State.ModuleIsVisible = _ModuleIsVisible;
	State.IsVisible = State.PageIsVisible && State.ModuleIsVisible;

	State.Controls.Frame_Global.Visible = State.IsVisible;
	{{{UIModules_Chat_Client::P}}}CanRequestActivation("ChampionCup_LoadSave", State.IsVisible);

	return State;
}

Boolean NavigationIsEnabled(Boolean _MenuIsVisible, Boolean _ChatIsRequestingActivation) {
	return _MenuIsVisible && !_ChatIsRequestingActivation;
}

***MainInit***
***
declare CMlFrame Spinner_WaitPlayers;

declare netread Boolean Net_ChampionCup_LoadSave_IsVisible for UI;
declare netread Int2 Net_ChampionCup_LoadSave_ReadyPlayersNb for Teams[0];
declare netread Integer Net_ChampionCup_LoadSave_WaitEndTime for Teams[0];
declare netread Integer Net_ChampionCup_LoadSave_ResetReadyState for Teams[0];

declare K_State State;
declare Integer ResetReadyState;
***

***MainStart***
***
State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Label_WaitPlayers <=> (State.Controls.Frame_Global.GetFirstChild("label-wait-players") as CMlLabel);
State.Controls.Label_Countdown <=> (State.Controls.Frame_Global.GetFirstChild("label-countdown") as CMlLabel);
Spinner_WaitPlayers <=> (State.Controls.Frame_Global.GetFirstChild("spinner-wait-players") as CMlFrame);
State.Controls.Button_Ready <=> (State.Controls.Frame_Global.GetFirstChild("button-ready") as CMlFrame);
State.Controls.Button_Leave <=> (State.Controls.Frame_Global.GetFirstChild("button-leave") as CMlFrame);

ResetReadyState = Net_ChampionCup_LoadSave_ResetReadyState;

{{{Navigation::P}}}UseLocalEvents(This, True);
{{{LoadingSpinner::P}}}StartAnimation(This, Spinner_WaitPlayers);
EnableMenuNavigation(NavigationIsEnabled(State.IsVisible, {{{UIModules_Chat_Client::P}}}IsRequestingActivation()), False, False, Null, 1);
Focus({{{Navigation::P}}}GetFocusedControl(This, C_NavGroupName), State.Controls.Button_Ready);

State = SetVisibility(State, PageIsVisible, Net_ChampionCup_LoadSave_IsVisible);
State = SetIsReady(State, False);
State = SetReadyPlayersNb(State, Net_ChampionCup_LoadSave_ReadyPlayersNb);
State = SetIsSpectator(State, IsSpectatorClient);
State = SetWaitEndTime(State, Net_ChampionCup_LoadSave_WaitEndTime);
***

***MainLoop***
***
if (
	State.PageIsVisible != PageIsVisible ||
	State.ModuleIsVisible != Net_ChampionCup_LoadSave_IsVisible
) {
	State = SetVisibility(State, PageIsVisible, Net_ChampionCup_LoadSave_IsVisible);
}

if (EnableMenuNavigationInputs != NavigationIsEnabled(State.IsVisible, {{{UIModules_Chat_Client::P}}}IsRequestingActivation())) {
	EnableMenuNavigation(NavigationIsEnabled(State.IsVisible, {{{UIModules_Chat_Client::P}}}IsRequestingActivation()), False, False, Null, 1);
}

if (State.IsVisible) {
	if (State.ReadyPlayersNb != Net_ChampionCup_LoadSave_ReadyPlayersNb) {
		State = SetReadyPlayersNb(State, Net_ChampionCup_LoadSave_ReadyPlayersNb);
	}
	if (State.IsSpectator != IsSpectatorClient) {
		State = SetIsSpectator(State, IsSpectatorClient);
	}
	if (State.WaitEndTime != Net_ChampionCup_LoadSave_WaitEndTime) {
		State = SetWaitEndTime(State, Net_ChampionCup_LoadSave_WaitEndTime);
	}

	if (ResetReadyState != Net_ChampionCup_LoadSave_ResetReadyState) {
		ResetReadyState = Net_ChampionCup_LoadSave_ResetReadyState;
		State = SetIsReady(State, False);
	}

	if (State.WaitEndTime >= 0) {
		UpdateCountdown(State.Controls.Label_Countdown, State.WaitEndTime, GameTime);
	}

	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, C_NavGroupName)) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						State = Select(State, Event.To);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						State = CancelOrLeave(State);
					} else {
						Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, C_NavGroupName)) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}
}
***
""",
[
	UIModules::Component(),
	LoadingSpinner::ComponentV2(),
	Button::ComponentV2(),
	Navigation::ComponentV2(),
	UIModules_Chat_Client::Component()
],
[]
	);
}