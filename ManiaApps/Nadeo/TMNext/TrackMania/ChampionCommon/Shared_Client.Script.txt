/**
 *	Component: Shared client side
 */
#Const Version		"2022-01-17"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/ChampionCommon/Shared_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "ManiaApps/Nadeo/TMNext/TrackMania/ChampionCommon/Shared_Common.Script.txt" as Shared_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-champion-cup-shared" //< Component name
#Const P "ComponentChampionCupShared_" //< Prefix used to differentiate functions/variables in the script

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {
	//L16N [Cup] The player is in finalist mode. Must be abbreviated to one letter.
	declare Text Text_FinalistShort = _("|Finalist|F");
	//L16N [Cup] Player has reached the finalist status
	declare Text Text_FinalistLong = _("|Status|Finalist");
	//L16N [Cup] The player won the match. Must be abbreviated to one letter.
	declare Text Text_WinnerShort = _("|Winner|W");
	//L16N [Cup] Player won the match
	declare Text Text_WinnerLong = _("|Status|Winner");

	return MV::Component(
		C_Name,
		"""
		""",
		"""
#Include "TextLib" as {{{P}}}TL
#Include "MathLib" as {{{P}}}ML

#Struct {{{P}}}K_LiveRank {
	Integer Rank;
	Integer TimeDiff;
}

#Const {{{P}}}C_DisplayMode_ChampionCup {{{dump(Shared_Common::C_DisplayMode_ChampionCup)}}}
#Const {{{P}}}C_DisplayMode_CupShowPoints {{{dump(Shared_Common::C_DisplayMode_CupShowPoints)}}}
#Const {{{P}}}C_DisplayMode_CupHidePoints {{{dump(Shared_Common::C_DisplayMode_CupHidePoints)}}}
		""",
		"""
Boolean {{{P}}}IsClashTime() {
	declare netread Boolean Net_ChampionCup_Shared_IsClashTime for Teams[0];
	return Net_ChampionCup_Shared_IsClashTime;
}

Boolean {{{P}}}IsFinal() {
	declare netread Boolean Net_ChampionCup_Shared_IsFinal for Teams[0];
	return Net_ChampionCup_Shared_IsFinal;
}

Boolean {{{P}}}IsPause() {
	declare netread Boolean Net_ChampionCup_Shared_IsPause for Teams[0];
	return Net_ChampionCup_Shared_IsPause;
}

Boolean {{{P}}}IsPreMatch() {
	declare netread Boolean Net_ChampionCup_Shared_IsPreMatch for Teams[0];
	return Net_ChampionCup_Shared_IsPreMatch;
}

Void {{{P}}}SetLiveRankingIsVisible(Boolean _IsVisible) {
	declare Boolean ChampionCup_Shared_LiveRankingIsVisible for UI;
	ChampionCup_Shared_LiveRankingIsVisible = _IsVisible;
}

Boolean {{{P}}}LiveRankingIsVisible() {
	declare Boolean ChampionCup_Shared_LiveRankingIsVisible for UI;
	return ChampionCup_Shared_LiveRankingIsVisible;
}

Int2 {{{P}}}GetMapsProgression() {
	declare netread Int2 Net_ChampionCup_Shared_MapsProgression for Teams[0];
	return Net_ChampionCup_Shared_MapsProgression;
}

Void {{{P}}}SpectateLogin(Text _Login) {
	ClientUI.Spectator_SetForcedTarget_Clear();
	SetSpectateTarget(_Login);
	Playground.SetWantedSpectatorCameraType(CPlaygroundClient::ESpectatorCameraType::Replay);
}

Void {{{P}}}SetLiveRank(CSmScore _Score, Integer _Rank, Integer _TimeDiff) {
	declare {{{P}}}K_LiveRank ChampionCup_Shared_LiveRank for _Score;
	declare Integer ChampionCup_Shared_LiveRankingUpdate for UI;
	ChampionCup_Shared_LiveRank = {{{P}}}K_LiveRank {
		Rank = _Rank,
		TimeDiff = _TimeDiff
	};
	ChampionCup_Shared_LiveRankingUpdate = Now;
}

{{{P}}}K_LiveRank {{{P}}}GetLiveRank(CSmScore _Score) {
	declare {{{P}}}K_LiveRank ChampionCup_Shared_LiveRank for _Score;
	return ChampionCup_Shared_LiveRank; 
}

Integer {{{P}}}GetLiveRankingUpdate() {
	declare Integer ChampionCup_Shared_LiveRankingUpdate for UI;
	return ChampionCup_Shared_LiveRankingUpdate;
}

Text {{{P}}}GetShortTime(Integer _Time, Boolean _Full) {
	if (_Full) {
		return {{{P}}}TL::TimeToText(_Time, True, True);
	}

	if (_Time < 1000) {
		return {{{P}}}TL::FormatReal(_Time / 1000., 3, False, False);
	}

	declare TimeWithoutMs = _Time / 10;
	declare TimeInSeconds = TimeWithoutMs / 100.;
	if (TimeInSeconds <= 10.) {
		return {{{P}}}TL::FormatReal(TimeInSeconds, 2, False, False);
	} else if (TimeInSeconds <= 100.) {
		return {{{P}}}TL::FormatReal(TimeInSeconds, 1, False, False);
	}
	return ""^{{{P}}}ML::FloorInteger(TimeInSeconds);
}

Text {{{P}}}FormatPoints(
	Integer _Points,
	Integer _PointsLimit,
	Text[] _Winners,
	Text _AccountId,
	Boolean _ShortText,
	Boolean _MatchComplete
) {
	if (_Winners.exists(_AccountId)) {
		return {{{P}}}TL::FormatRank(_Winners.keyof(_AccountId) + 1, False);
	} else if (_MatchComplete) {
		return {{{P}}}TL::FormatRank(_Winners.count + 1, False);
	} else if (_PointsLimit > 0 && _Points > _PointsLimit) {
		if (_ShortText) {
			return {{{P}}}TL::Compose("$4d3%1", "{{{Text_WinnerShort}}}");
		} else {
			return {{{P}}}TL::Compose("$4d3%1", "{{{Text_WinnerLong}}}");
		}
	} else if (_PointsLimit > 0 && _Points == _PointsLimit) {
		if (_ShortText) {
			return {{{P}}}TL::Compose("$f00%1", "{{{Text_FinalistShort}}}");
		} else {
			return {{{P}}}TL::Compose("$f00%1", "{{{Text_FinalistLong}}}");
		}
	} else {
		return ""^_Points;
	}

	return "0";
}
Text {{{P}}}FormatPoints(
	Integer _Points,
	Integer _PointsLimit,
	Text[] _Winners,
	Text _AccountId,
	Boolean _ShortText
) {
	return {{{P}}}FormatPoints(_Points, _PointsLimit, _Winners, _AccountId, _ShortText, False);
}

Integer {{{P}}}GetMatchPointsLimit() {
	declare netread Integer Net_ChampionCommon_Shared_MatchPointsLimit for Teams[0];
	return Net_ChampionCommon_Shared_MatchPointsLimit;
}

Integer {{{P}}}GetCupPointsLimit() {
	declare netread Integer Net_ChampionCommon_Shared_CupPointsLimit for Teams[0];
	return Net_ChampionCommon_Shared_CupPointsLimit;
}

Integer {{{P}}}GetMatchWinnersUpdate() {
	declare netread Integer Net_ChampionCommon_Shared_MatchWinnersUpdate for Teams[0];
	return Net_ChampionCommon_Shared_MatchWinnersUpdate;
}
Text[] {{{P}}}GetMatchWinners() {
	declare netread Text[] Net_ChampionCommon_Shared_MatchWinners for Teams[0];
	return Net_ChampionCommon_Shared_MatchWinners;
}

Integer {{{P}}}GetMatchStyle() {
	declare netread Integer Net_ChampionCommon_Shared_MatchStyle for Teams[0];
	return Net_ChampionCommon_Shared_MatchStyle;
}

Integer {{{P}}}GetDisplayMode() {
	declare netread Integer Net_ChampionCommon_Shared_DisplayMode for Teams[0];
	return Net_ChampionCommon_Shared_DisplayMode;
}
		""",
		[],
		[]
	);
}