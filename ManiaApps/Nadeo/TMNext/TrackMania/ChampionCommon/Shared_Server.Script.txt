/**
 *	Component: Shared server side
 */
#Const Version		"2022-01-17"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/ChampionCommon/Shared_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/ChampionCommon/Constants.Script.txt" as ChampionConst
#Include "ManiaApps/Nadeo/TMNext/TrackMania/ChampionCommon/Shared_Common.Script.txt" as Shared_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const Shared_Common::C_DisplayMode_ChampionCup as C_DisplayMode_ChampionCup
#Const Shared_Common::C_DisplayMode_CupShowPoints as C_DisplayMode_CupShowPoints
#Const Shared_Common::C_DisplayMode_CupHidePoints as C_DisplayMode_CupHidePoints

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the Clash Time status
Void SetIsClashTime(Boolean _IsClashTime) {
	declare netwrite Boolean Net_ChampionCup_Shared_IsClashTime for Teams[0];
	Net_ChampionCup_Shared_IsClashTime = _IsClashTime;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the final status
Void SetIsFinal(Boolean _IsFinal) {
	declare netwrite Boolean Net_ChampionCup_Shared_IsFinal for Teams[0];
	Net_ChampionCup_Shared_IsFinal = _IsFinal;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the pause status
Void SetIsPause(Boolean _IsPause) {
	declare netwrite Boolean Net_ChampionCup_Shared_IsPause for Teams[0];
	Net_ChampionCup_Shared_IsPause = _IsPause;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the pre-match status
Void SetIsPreMatch(Boolean _IsPreMatch) {
	declare netwrite Boolean Net_ChampionCup_Shared_IsPreMatch for Teams[0];
	Net_ChampionCup_Shared_IsPreMatch = _IsPreMatch;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the maps progression
Void SetMapsProgression(Integer _MapCurrent, Integer _MapTotal) {
	declare netwrite Int2 Net_ChampionCup_Shared_MapsProgression for Teams[0];
	Net_ChampionCup_Shared_MapsProgression = <_MapCurrent, _MapTotal>;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Set the number of points necessary to win the cup
 *	Use 0 or less to disable
 */
Void SetCupPointsLimit(Integer _CupPointsLimit) {
	declare netwrite Integer Net_ChampionCommon_Shared_CupPointsLimit for Teams[0];
	Net_ChampionCommon_Shared_CupPointsLimit = _CupPointsLimit;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Set the number of points necessary to win a match
 *	Use 0 or less to disable
 */
Void SetMatchPointsLimit(Integer _MatchPointsLimit) {
	declare netwrite Integer Net_ChampionCommon_Shared_MatchPointsLimit for Teams[0];
	Net_ChampionCommon_Shared_MatchPointsLimit = _MatchPointsLimit;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the match winners (sorted by winning order)
Void SetMatchWinners(Text[] _MatchWinners) {
	declare netwrite Text[] Net_ChampionCommon_Shared_MatchWinners for Teams[0];
	declare netwrite Integer Net_ChampionCommon_Shared_MatchWinnersUpdate for Teams[0];
	Net_ChampionCommon_Shared_MatchWinners = _MatchWinners;
	Net_ChampionCommon_Shared_MatchWinnersUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the match style
Void SetMatchStyle(Integer _MatchStyle) {
	declare netwrite Integer Net_ChampionCommon_Shared_MatchStyle for Teams[0];
	Net_ChampionCommon_Shared_MatchStyle = _MatchStyle;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Set the display mode to use
Void SetDisplayMode(Integer _DisplayMode) {
	declare netwrite Integer Net_ChampionCommon_Shared_DisplayMode for Teams[0];
	Net_ChampionCommon_Shared_DisplayMode = _DisplayMode;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetIsClashTime(False);
	SetIsFinal(False);
	SetIsPause(False);
	SetIsPreMatch(False);
	SetMapsProgression(-1, -1);
	SetCupPointsLimit(0);
	SetMatchPointsLimit(0);
	SetMatchWinners([]);
	SetMatchStyle(ChampionConst::C_MatchStyle_None);
	SetDisplayMode(C_DisplayMode_ChampionCup);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}