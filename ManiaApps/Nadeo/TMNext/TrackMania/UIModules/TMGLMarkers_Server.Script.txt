/**
 *  UI module: TMGLMarkers server side
 */
#Const Version    "2020-09-28"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/UIModules/TMGLMarkers_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_ChampionTMGL_TMGLMarkers"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the frame id of the visible markers
Void SetMarkerFrameId(CUIConfig _UI, Integer _MarkerFrameId, Text _AccountId) {
	if (_UI == UIManager.UIAll) {
		declare netwrite Text[Integer] Net_ChampionTMGL_TMGLMarkers_MarkerFrameIds for Teams[0] = [];
		declare netwrite Integer Net_ChampionTMGL_TMGLMarkers_MarkerFrameIdsUpdate for Teams[0] = 0;
		Net_ChampionTMGL_TMGLMarkers_MarkerFrameIds[_MarkerFrameId] = _AccountId;
		Net_ChampionTMGL_TMGLMarkers_MarkerFrameIdsUpdate += 1;
	} else {
		declare netwrite Text[Integer] Net_ChampionTMGL_TMGLMarkers_MarkerFrameIds for _UI = [];
		declare netwrite Integer Net_ChampionTMGL_TMGLMarkers_MarkerFrameIdsUpdate for _UI = 0;
		Net_ChampionTMGL_TMGLMarkers_MarkerFrameIds[_MarkerFrameId] = _AccountId;
		Net_ChampionTMGL_TMGLMarkers_MarkerFrameIdsUpdate += 1;
	}
}
Void RemoveMarkerFrameId(CUIConfig _UI, Integer _MarkerFrameId) {
	if (_UI == UIManager.UIAll) {
		declare netwrite Text[Integer] Net_ChampionTMGL_TMGLMarkers_MarkerFrameIds for Teams[0] = [];
		declare netwrite Integer Net_ChampionTMGL_TMGLMarkers_MarkerFrameIdsUpdate for Teams[0] = 0;
		Net_ChampionTMGL_TMGLMarkers_MarkerFrameIds.removekey(_MarkerFrameId);
		Net_ChampionTMGL_TMGLMarkers_MarkerFrameIdsUpdate += 1;
	} else {
		declare netwrite Text[Integer] Net_ChampionTMGL_TMGLMarkers_MarkerFrameIds for _UI = [];
		declare netwrite Integer Net_ChampionTMGL_TMGLMarkers_MarkerFrameIdsUpdate for _UI = 0;
		Net_ChampionTMGL_TMGLMarkers_MarkerFrameIds.removekey(_MarkerFrameId);
		Net_ChampionTMGL_TMGLMarkers_MarkerFrameIdsUpdate += 1;
	}
}
Void ResetMarkerFrameIds(CUIConfig _UI) {
	if (_UI == UIManager.UIAll) {
		declare netwrite Text[Integer] Net_ChampionTMGL_TMGLMarkers_MarkerFrameIds for Teams[0] = [];
		declare netwrite Integer Net_ChampionTMGL_TMGLMarkers_MarkerFrameIdsUpdate for Teams[0] = 0;
		Net_ChampionTMGL_TMGLMarkers_MarkerFrameIds = [];
		Net_ChampionTMGL_TMGLMarkers_MarkerFrameIdsUpdate += 1;
	} else {
		declare netwrite Text[Integer] Net_ChampionTMGL_TMGLMarkers_MarkerFrameIds for _UI = [];
		declare netwrite Integer Net_ChampionTMGL_TMGLMarkers_MarkerFrameIdsUpdate for _UI = 0;
		Net_ChampionTMGL_TMGLMarkers_MarkerFrameIds = [];
		Net_ChampionTMGL_TMGLMarkers_MarkerFrameIdsUpdate += 1;
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the account ids of the finalists in Cup mode
Void SetFinalists(Text[] _AccountIds) {
	declare netwrite Text[] Net_ChampionTMGL_TMGLMarkers_Finalists for Teams[0] = [];
	declare netwrite Integer Net_ChampionTMGL_TMGLMarkers_FinalistsUpdate for Teams[0] = 0;
	Net_ChampionTMGL_TMGLMarkers_Finalists = _AccountIds;
	Net_ChampionTMGL_TMGLMarkers_FinalistsUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	
	declare netwrite Boolean Net_ChampionTMGL_TMGLMarkers_IsVisible for _Player = False;
	Net_ChampionTMGL_TMGLMarkers_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
		declare CUIConfig UI <=> UIManager.GetUI(Player);
		if (UI != Null) {
			ResetMarkerFrameIds(UI);
		}
	}
	
	ResetMarkerFrameIds(UIManager.UIAll);
	SetFinalists([]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}