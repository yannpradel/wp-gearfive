/**
 *  UI module: EndMatchTrophy client side
 */
#Const Version    "2020-07-06"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/TimeAttack/UIModules/EndMatchTrophy_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Constants
#Include "Libs/Nadeo/TMNext/TrackMania/Trophy.Script.txt" as Trophy

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_TimeAttack_EndMatchTrophy"
#Const C_Type CUILayer::EUILayerType::Normal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare BannerShortSymetryRatio = 612./340.;
	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="quad-default" halign="center" valign="center" />
</stylesheet>
<frame z-index="-2" hidden="1" id="frame-global">
	<frame id="clip-trophy-banner" size="320 200" halign="center" valign="center">
		<frame id="frame-trophy" z-index="1" hidden="1">
			<frame id="frame-trophy-banner" rot="-80" z-index="1">
				<quad id="quad-trophy-banner" z-index="0" image="{{{Constants::C_ImageUrl_Race_Mode_Banner_MedalsShortSymetry}}}" size="{{{55.}}} {{{55.*BannerShortSymetryRatio}}}" class="quad-default" keepratio="Fit"/>
				<quad id="quad-trophy-banner-glow" z-index="1" image="{{{Constants::C_ImageUrl_Race_Mode_Banner_MedalsShortGlowSymetry}}}" size="{{{55.}}} {{{55.*BannerShortSymetryRatio}}}" class="quad-default" keepratio="Fit"/>
			</frame>
			<quad id="quad-trophy" size="50 50" class="quad-default" autoscale="0" z-index="2"/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "MathLib" as ML
#Include "Libs/Nadeo/CommonLibs/Common/AudioManager_ML.Script.txt" as AudioManager
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils
""",
"""
Void StopTrophyAnimation(CMlFrame _Frame_Trophy) {
	AnimMgr.Flush(_Frame_Trophy.GetFirstChild("frame-trophy-banner"));
	AnimMgr.Flush(_Frame_Trophy.GetFirstChild("quad-trophy-banner-glow"));
	AnimMgr.Flush(_Frame_Trophy.GetFirstChild("quad-trophy"));
	_Frame_Trophy.Hide();
}

Void PlayTrophyAnimation(CMlFrame _Frame_Trophy, Integer[Integer][Text] _Trophies) {
	StopTrophyAnimation(_Frame_Trophy);

	if (InputPlayer == Null || InputPlayer.User == Null || !_Trophies.existskey(InputPlayer.User.WebServicesUserId)) return;

	declare Frame_TrophyBanner <=> (_Frame_Trophy.GetFirstChild("frame-trophy-banner") as CMlFrame);
	declare Quad_BannerGlow <=> (_Frame_Trophy.GetFirstChild("quad-trophy-banner-glow") as CMlQuad);
	declare Quad_Trophy <=> (_Frame_Trophy.GetFirstChild("quad-trophy") as CMlQuad);

	declare Text TrophyImage;
	declare Text TrophyGainSound = "";
	declare Integer BestTrophy = -123;
	declare Integer BestTrophyCount;
	foreach (Trophy => TrophyCount in _Trophies[InputPlayer.User.WebServicesUserId]) {
		if (BestTrophy < Trophy) {
			BestTrophy = Trophy;
			BestTrophyCount = TrophyCount;
		}
	}
	switch (BestTrophy) {
		case {{{Trophy::C_Trophy_T1}}}: {
			TrophyImage = {{{dump(Constants::C_ImageUrl_Trophy_512_Bronze1)}}};
			TrophyGainSound = "SoloTrophyGainBronzeNoOutro";
		}
		case {{{Trophy::C_Trophy_T2}}}: {
			TrophyImage = {{{dump(Constants::C_ImageUrl_Trophy_512_Bronze2)}}};
			TrophyGainSound = "SoloTrophyGainBronzeNoOutro";
		}
		case {{{Trophy::C_Trophy_T3}}}: {
			TrophyImage = {{{dump(Constants::C_ImageUrl_Trophy_512_Bronze3)}}};
			TrophyGainSound = "SoloTrophyGainBronzeNoOutro";
		}
		case {{{Trophy::C_Trophy_T4}}}: {
			TrophyImage = {{{dump(Constants::C_ImageUrl_Trophy_512_Silver1)}}};
			TrophyGainSound = "SoloTrophyGainSilverNoOutro";
		}
		case {{{Trophy::C_Trophy_T5}}}: {
			TrophyImage = {{{dump(Constants::C_ImageUrl_Trophy_512_Silver2)}}};
			TrophyGainSound = "SoloTrophyGainSilverNoOutro";
		}
		case {{{Trophy::C_Trophy_T6}}}: {
			TrophyImage = {{{dump(Constants::C_ImageUrl_Trophy_512_Silver3)}}};
			TrophyGainSound = "SoloTrophyGainSilverNoOutro";
		}
		case {{{Trophy::C_Trophy_T7}}}: {
			TrophyImage = {{{dump(Constants::C_ImageUrl_Trophy_512_Gold1)}}};
			TrophyGainSound = "SoloTrophyGainGoldNoOutro";
		}
		case {{{Trophy::C_Trophy_T8}}}: {
			TrophyImage = {{{dump(Constants::C_ImageUrl_Trophy_512_Gold2)}}};
			TrophyGainSound = "SoloTrophyGainGoldNoOutro";
		}
		case {{{Trophy::C_Trophy_T9}}}: {
			TrophyImage = {{{dump(Constants::C_ImageUrl_Trophy_512_Gold3)}}};
			TrophyGainSound = "SoloTrophyGainGoldNoOutro";
		}
		default: {
			TrophyImage = {{{dump(Constants::C_ImageUrl_Trophy_512_None)}}};
			TrophyGainSound = "";
		}
	}

	Quad_Trophy.ChangeImageUrl(TrophyImage);

	declare StartTime = Now;
	declare GlowStartTime = Now;
	declare WaitTime0 = 0;
	declare BgTravelTime = 150;
	declare WaitTime1 = 225;
	declare PunchTime = 125;
	declare TotalDuration = 3000;
	declare GlowPulsation = TotalDuration/4;

	declare BgTravelEasing = CAnimManager::EAnimManagerEasing::QuadIn ;
	declare PunchEasing = CAnimManager::EAnimManagerEasing::QuadIn ;
	declare GlowEasing = CAnimManager::EAnimManagerEasing::Linear ;

	_Frame_Trophy.Show();
	Quad_Trophy.RelativeRotation = ML::Rand(2.,4.);
	Quad_Trophy.RelativeScale = 1.5;
	Quad_Trophy.RelativePosition_V3 = <12., 15.>;
	Quad_Trophy.Hide();
	Frame_TrophyBanner.RelativePosition_V3 = <250., 0.>;
	Frame_TrophyBanner.RelativeScale = 1.;
	AudioManager::StopSound(This, TrophyGainSound);
	AudioManager::PlaySound(This, TrophyGainSound);
	StartTime += WaitTime0;
	AnimMgr.Add(Frame_TrophyBanner, "<a pos=\"0 0\" hidden=\"0\" />", StartTime, BgTravelTime, BgTravelEasing);
	StartTime += BgTravelTime + WaitTime1;
	AnimMgr.Add(Quad_Trophy, "<a scale=\"1\" rot=\"0\" pos=\"0 -1\" hidden=\"0\" />", StartTime, PunchTime, PunchEasing);
	StartTime += PunchTime;
	AnimMgr.Add(Frame_TrophyBanner, "<a rot=\"-78.5\" />", StartTime, 40, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(Frame_TrophyBanner, "<a rot=\"-80\" />", StartTime + 40, 40, CAnimManager::EAnimManagerEasing::Linear);

	// Glow
	Quad_BannerGlow.Opacity = 1.;
	AnimMgr.Add(Quad_BannerGlow, "<a opacity=\"0.6\" />", GlowStartTime, GlowPulsation, GlowEasing);
	GlowStartTime += GlowPulsation;
	AnimMgr.Add(Quad_BannerGlow, "<a opacity=\"1.\" />", GlowStartTime, GlowPulsation, GlowEasing);
	GlowStartTime += GlowPulsation;
	AnimMgr.Add(Quad_BannerGlow, "<a opacity=\"0.6\" />", GlowStartTime, GlowPulsation, GlowEasing);
	GlowStartTime += GlowPulsation;
	AnimMgr.Add(Quad_BannerGlow, "<a opacity=\"1.\" />", GlowStartTime, GlowPulsation, GlowEasing);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Trophy;

declare netread Integer Net_TimeAttack_EndMatchTrophy_PlayTrophyAnimation for Teams[0];
declare netread Integer[Integer][Text] Net_TimeAttack_EndMatchTrophy_AnimationTrophies for Teams[0];

declare Boolean DisplayModule;
declare Integer PlayTrophyAnimationUpdate;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Trophy <=> (Frame_Global.GetFirstChild("frame-trophy") as CMlFrame);

DisplayModule = Frame_Global.Visible;
PlayTrophyAnimationUpdate = Net_TimeAttack_EndMatchTrophy_PlayTrophyAnimation;
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_TimeAttack_EndMatchTrophy_IsVisible for Owner;
		if (DisplayModule != Net_TimeAttack_EndMatchTrophy_IsVisible) {
			DisplayModule = Net_TimeAttack_EndMatchTrophy_IsVisible;
			Frame_Global.Visible = Net_TimeAttack_EndMatchTrophy_IsVisible;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_Global.Visible) {
		if (PlayTrophyAnimationUpdate != Net_TimeAttack_EndMatchTrophy_PlayTrophyAnimation) {
			PlayTrophyAnimationUpdate = Net_TimeAttack_EndMatchTrophy_PlayTrophyAnimation;
			PlayTrophyAnimation(Frame_Trophy, Net_TimeAttack_EndMatchTrophy_AnimationTrophies);
		}
	}

	if (Frame_Trophy.Visible && (UI.ScoreTableVisibility == CUIConfig::EVisibility::ForcedVisible || !Frame_Global.Visible)) {
		StopTrophyAnimation(Frame_Trophy);
	}
}
***
""",
[],
[]
	);
}