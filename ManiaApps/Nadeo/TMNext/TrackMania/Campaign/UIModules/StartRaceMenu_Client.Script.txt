/**
 * UI module: StartRaceMenu client side
 */
#Const Version		"2023-03-29"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/Campaign/UIModules/StartRaceMenu_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Components/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/Campaign/Constants.Script.txt" as Consts
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as MenuConsts
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "ManiaApps/Nadeo/TMNext/TrackMania/UIModules/RaceMapInfos.Script.txt" as RaceMapInfos
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuButtonList.Script.txt" as MenuButtonList
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Campaign_StartRaceMenu"
#Const C_Type CUILayer::EUILayerType::Normal
#Const C_NavGroupName "navgroup-startracemenu"
#Const C_Class_MedalButton "class-start-race-menu-medal-button"
#Const C_DelayBeforeAutoHide 9000

#Const C_Row_MedalGold 0
#Const C_Row_MedalSilver 1
#Const C_Row_MedalBronze 2
#Const C_Row_Ranked 3
#Const C_Row_None 4
#Const C_Row_GlobalVIP 5
#Const C_Row_MoreOpponents 6
#Const C_Row_Margin 7
#Const C_Row_Footer 8

// Variables for Sound design.
#Const C_SoundFadeTime_AutoHide 1000
#Const C_SoundFadeTime_EnterMenu 1000
#Const C_SoundFadeTime_CloseMenu 100

#Const C_TimeAttackDaily_PopUp "file://Media/Manialinks/Nadeo/TMNext/Modes/TimeAttackDaily/TM_UI_HUD_02_timeattackdaily_Popup.dds"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 * @return							The module manialink
 */
Text GetML() {
	//L16N [StartRace] Text displayed when the UI is hidden and the player must do an input to show the UI again
	declare Text Text_PressKey = _("Press a button");
	//L16N [StartRace] Drive without any opponent during your race
	declare Text Text_DriveAlone = _("Drive alone");
	//L16N [StartRace] Start the race
	declare Text Text_Drive = _("Drive");
	//L16N [StartRace] Button to select various ghost opponents in solo mode.
	declare Text Text_RankedRandom = _("Drive against opponents");
	//L16N [StartRace] Button to select opponents from a region. %1 will be replaced by a zone, e.g. "Opponents from France"
	declare Text Text_RankedRegion = _("Opponents from %1");
	//L16N [StartRace] Exit the game to go to the menu
	declare Text Text_Exit = _("Exit");
	//L16N [StartRace] Press a button to hide the UI and display the race replay in fullscreen
	declare Text Text_ViewReplay = _("View replay");
	//L16N [StartRace] Title of the more opponents list to select an opponent which is not displayed at first
	declare Text Text_MoreOpponents = _("More opponents");
	//L16N [StartRace] Button to select a VIP to play against %1 will be replaced by the name of a VIP, e.g. "Play against Darrek"
	declare Text Text_PlayAgainst = _("Play against %1");
	//L16N [StartRace] Button when you are a VIP and you can play against your followers
	declare Text Text_PlayAgainstFollowers = _("Play against your followers");
	//L16N [StartRace] Title of the club VIPs section in the "More opponents" list. %1 will be replaced by the name of the club pinned by the player, e.g. "VIPs from club 'Nadeo Club'"
	declare Text Text_VIPFromClub = _("VIPs from club '%1'");
	//L16N [StartRace] Title of the global VIP section in the "More opponents" list.
	declare Text Text_VIPFromWorld = _("Global VIPs");
	//L16N [StartRace] Title of the medal ghosts section in the "More opponents" list.
	declare Text Text_MedalGhosts = _("Medal ghosts");
	//L16N [StartRace] Title of the other ghosts section in the "More opponents" list.
	declare Text Text_OtherGhosts = _("Other ghosts");

	declare Real Margin = 1.;
	declare Vec2 RaceMenuSize = Consts::C_RaceMenu_Size;
	declare Vec2 Size_ListButton = <RaceMenuSize.X-3., (RaceMenuSize.X-3.)*64/748>;
	declare Vec2 Size_FooterButton = <Size_ListButton.X/2 + 1.5, (Size_ListButton.X/2 + 1.5)*88/388>;
	declare Real SizeY_AdjustedListButton = Size_ListButton.Y - (4*Size_ListButton.Y/64); //< Remove the outer pixel of the asset
	declare Real PosX_MenuHidden = -115. - RaceMenuSize.X - 10.;
	declare Real PosX_MenuVisible = 0.;
	declare Real PosX_PressKeyHidden = 253.;
	declare Real PosX_PressKeyVisible = 153.;

	// Automatic rearranging list of button depending on buttons visibility
	// To add a new button, simply add a new row in the grid and its frameinstance in the ML
	// After buttons visibility update, the grid needs to be updated !
	declare GridConfig = Grid::Create(0., 0., 0., Grid::C_Direction_Bottom);
	GridConfig = Grid::AddRow(GridConfig, C_Row_MedalGold, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_MedalSilver, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_MedalBronze, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Ranked, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_None, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_GlobalVIP, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_MoreOpponents, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Margin, Margin, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Footer, Size_FooterButton.Y, Grid::C_Align_Center);
	GridConfig = Grid::SetSize(GridConfig, SizeY_AdjustedListButton * (GridConfig.Columns.count-2) + Margin + Size_FooterButton.Y);
	declare Grid = Grid::Compile(GridConfig);
	declare Text GridConfigJson = GridConfig.tojson();

	/* VIP Scroll View */
	declare Vec2 Size_Header = <0., 0.>;
	declare Vec2 Size_Footer = <0., 0.>;

	declare Integer VIPsColumnsNb = 1;
	declare Integer VIPsRowsNb = 8;
	declare Integer VIPsPerPage = VIPsColumnsNb * VIPsRowsNb;
	declare Vec2 Size_VIPScrollWindow = <150., RaceMenuSize.Y*VIPsRowsNb>;
	declare Vec2 Size_VIPMargin = <3., 1.>; //Image is 4/1
	declare Vec2 Size_VIP = Scroll::GetElementSize(Size_VIPScrollWindow, Size_VIPMargin, VIPsColumnsNb, VIPsRowsNb);
	declare Integer VIPsElementsNb = Scroll::GetRequiredElementsNb(Size_VIPScrollWindow, Size_VIP, Size_VIPMargin, VIPsColumnsNb);

	declare Vec2 Size_VIPBg = <Size_VIP.X, Size_VIP.X * 96 / 1824>;
	declare Vec2 Size_VIPName = <Size_VIP.X - 2., Size_VIP.Y * 0.15>;
	declare Vec2 Pos_VIPName = <Size_VIP.X * 0.5, Size_VIP.Y * -0.5>;

	declare Text ML_VIPs = "";
	for (I, 1, VIPsElementsNb) {
		ML_VIPs ^= """
			<frameinstance modelid="framemodel-scroll-vip" class="{{{Scroll::C_Class_Element}}}" hidden="1"/>
		""";
	}

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="quad-default" halign="center" valign="center"/>
	<style class="text-default" halign="center" valign="center2" textsize="4" textprefix="$t" textcolor="FFF" textfont="{{{FontManager::C_GameFontRegular}}}" />
</stylesheet>

<framemodel id="framemodel-scroll-vip">
	<quad id="quad-bg" size="{{{Size_VIPBg.X}}} {{{Size_VIPBg.Y}}}" image="{{{MenuConsts::C_ImageUrl_Background_Path}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}"/>
	<label id="label-name" size="{{{Size_VIPName.X}}} {{{Size_VIPName.Y}}}" pos="{{{Pos_VIPName.X}}} {{{Pos_VIPName.Y}}}" opacity="0.75"
		class="text-default" textprefix="$t$i" italicslope="0.2" textcolor="{{{ColorPalette::C_Color_GreenFour}}}" textsize="4" textfont="{{{FontManager::C_GameFontSemiBold}}}" z-index="1"
	/>
</framemodel>

<frame z-index="{{{Consts::C_ZIndex_StartRaceMenu}}}" hidden="1" id="frame-global">
	<quad id="quad-background" bgcolor="000" size="320 180" fullscreen="1" halign="center" valign="center" z-index="-3" opacity=".3"/>
	<label pos="{{{PosX_PressKeyHidden}}} -81" hidden="1" size="100 10" halign="right" textsize="6" textprefix="$t$i" textfont="{{{FontManager::C_GameFontExtraBold}}}" text="{{{Text_PressKey}}}" class="text-default" id="label-press-key" />
	<frame pos="{{{PosX_MenuHidden}}} 0" hidden="1" id="frame-auto-hide">
		<frameinstance modelid="{{{RaceMapInfos::C_Name}}}" pos="{{{MLHelpers::Skew(0., 32.3, 10.)}}}" z-index="-2"/>
		<frameinstance modelid="{{{MenuButtonList::C_Name}}}" id="frame-button-list-start-race-campaign" z-index="2" />

		<frame id="frame-buttons-container" class="{{{Grid::C_Class_Container}}}" pos="{{{MLHelpers::Skew(0.5, 0., 10.)}}}">
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-medal-gold"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}} {{{MenuSounds::C_Class}}} {{{C_Class_MedalButton}}}"
				data-grid-row="{{{C_Row_MedalGold}}}"
				data-opacityunfocus=".9"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-image="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Obtuse_Corner_Focus}}}"
				data-icon="{{{MenuConsts::C_ImageUrl_Medal_Gold_VerySmall}}}"
				data-iconfocus="{{{MenuConsts::C_ImageUrl_Medal_Gold_VerySmall}}}"
				data-iconsize="{{{Size_ListButton.Y - 3.}}} {{{Size_ListButton.Y - 3.}}}"
				data-iconcolortype="{{{Button::C_ColorType_None}}}"
				data-iconxpos=".9" data-iconypos="-.49"
				data-text="{{{_("Gold")}}}"
				data-textopacityunfocus=".4"
				data-textsize="4"
				data-textitalicslope=".2"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textcolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;action2;up;down" 
				data-nav-targets="_;_;button-exit;button-medal-silver"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="IngameSelectStartRace"
				hidden="1"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-medal-silver"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}} {{{MenuSounds::C_Class}}} {{{C_Class_MedalButton}}}"
				data-grid-row="{{{C_Row_MedalSilver}}}"
				data-opacityunfocus=".9"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-image="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Obtuse_Corner_Focus}}}"
				data-icon="{{{MenuConsts::C_ImageUrl_Medal_Silver_VerySmall}}}"
				data-iconfocus="{{{MenuConsts::C_ImageUrl_Medal_Silver_VerySmall}}}"
				data-iconsize="{{{Size_ListButton.Y - 3.}}} {{{Size_ListButton.Y - 3.}}}"
				data-iconcolortype="{{{Button::C_ColorType_None}}}"
				data-iconxpos=".9" data-iconypos="-.49"
				data-text="{{{_("Silver")}}}"
				data-textopacityunfocus=".4"
				data-textsize="4"
				data-textitalicslope=".2"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textcolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;action2;up;down" 
				data-nav-targets="_;_;button-medal-gold;button-medal-bronze"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="IngameSelectStartRace"
				hidden="1"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-medal-bronze"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}} {{{MenuSounds::C_Class}}} {{{C_Class_MedalButton}}}"
				data-grid-row="{{{C_Row_MedalBronze}}}"
				data-opacityunfocus=".9"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-image="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Obtuse_Corner_Focus}}}"
				data-icon="{{{MenuConsts::C_ImageUrl_Medal_Bronze_VerySmall}}}"
				data-iconfocus="{{{MenuConsts::C_ImageUrl_Medal_Bronze_VerySmall}}}"
				data-iconsize="{{{Size_ListButton.Y - 3.}}} {{{Size_ListButton.Y - 3.}}}"
				data-iconcolortype="{{{Button::C_ColorType_None}}}"
				data-iconxpos=".9" data-iconypos="-.49"
				data-text="{{{_("Bronze")}}}"
				data-textopacityunfocus=".4"
				data-textsize="4"
				data-textitalicslope=".2"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textcolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;action2;up;down" 
				data-nav-targets="_;_;button-medal-silver;button-ranked"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="IngameSelectStartRace"
				hidden="1"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-ranked" z-index="1"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}} {{{MenuSounds::C_Class}}}"
				data-grid-row="{{{C_Row_Ranked}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-image="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Round_Corner}}}"
				data-imagefocus="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Round_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textitalicslope=".2"
				data-textsize="4"
				data-textopacityunfocus=".4"
				data-opacityunfocus=".9"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;action2;up;down"
				data-nav-targets="_;_;button-medal-bronze;button-none"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="IngameSelectStartRace"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-none"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}} {{{MenuSounds::C_Class}}}"
				data-grid-row="{{{C_Row_None}}}"
				data-text="{{{Text_DriveAlone}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-image="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textitalicslope=".2"
				data-textsize="4"
				data-textopacityunfocus=".4"
				data-opacityunfocus=".9"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;action2;up;down" 
				data-nav-targets="_;_;button-ranked;button-global-vip"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="IngameSelectStartRace"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-global-vip"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}} {{{MenuSounds::C_Class}}}"
				data-grid-row="{{{C_Row_GlobalVIP}}}"
				data-text="{{{Text_PlayAgainstFollowers}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-image="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Round_Corner}}}"
				data-imagefocus="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Round_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textitalicslope=".2"
				data-textsize="4"
				data-textopacityunfocus=".4"
				data-opacityunfocus=".9"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;action2;up;down"
				data-nav-targets="_;_;button-none;button-more-opponents"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="IngameSelectStartRace"
				data-nav-locked="1"
				hidden="1"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-more-opponents"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_MoreOpponents}}}"
				data-text="{{{Text_MoreOpponents}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-image="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Round_Corner}}}"
				data-imagefocus="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Round_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textitalicslope=".2"
				data-textsize="4"
				data-textopacityunfocus=".4"
				data-opacityunfocus=".9"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;action2;up;down"
				data-nav-targets="_;_;button-global-vip;button-exit"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frame id="frame-footer" class="{{{Grid::C_Class_Element}}}" data-grid-row="{{{C_Row_Footer}}}">
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-exit"
					pos="{{{-Size_FooterButton.X/2 + 1.3}}} 0."
					class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}}"
					data-text="{{{Text_Exit}}}"
					data-size="{{{Size_FooterButton.X}}} {{{Size_FooterButton.Y}}}"
					data-labelsize="{{{Size_FooterButton.X}}} {{{Size_FooterButton.Y}}}"
					data-textxpos="0.55"
					data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
					data-textitalicslope=".2"
					data-opacityunfocus=".9"
					data-textcolor="{{{ColorPalette::C_Color_GreenOne}}}"
					data-textfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
					data-image="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Exit_Round}}}"
					data-imagefocus="{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Exit_Round}}}"
					data-bgcolor="{{{ColorPalette::C_Color_GreenFive}}}"
					data-focuscolor="{{{ColorPalette::C_Color_GreenFive}}}"
					data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
					data-iconcolor="{{{ColorPalette::C_Color_GreenOne}}}"
					data-iconfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
					data-icon="{{{MenuConsts::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
					data-iconfocus="{{{MenuConsts::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
					data-iconxpos=".2"
					data-iconypos="-.49"
					data-textsize="4"
					data-textopacityunfocus=".25"
					data-iconopacityunfocus=".25"
					data-halign="center" data-valign="center"
					data-nav-inputs="select;action2;up;down"
					data-nav-targets="_;_;button-more-opponents;button-medal-gold" 
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
					data-menusounds-selectsound="IngameSelectQuit"
				/>
			</frame>
		</frame>

		<frame id="frame-more-opponents-list" hidden="1" z-index="1">
			<label text="{{{Text_MoreOpponents}}}" size="140 10" pos="5 50" textsize="6" textprefix="$i$t" textfont="{{{FontManager::C_GameFontExtraBold}}}" class="text-default" />
			<quad size="{{{130.*1088/624}}} 130" class="quad-default" image="{{{C_TimeAttackDaily_PopUp}}}" z-index="-1"/>
			<quad id="button-leave" z-index="5" pos="100 55" image="{{{MenuConsts::C_ImageUrl_Icon_Cross_Oblique_256}}}" class="quad-default" size="7 7" colorize="FFF" scriptevents="1" />

			<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-more-opponents" z-index="1" />
			<frame
				id="frame-scroll-more-opponents" pos="{{{Size_VIPScrollWindow.X * -0.5}}} 40"
				class="{{{Scroll::C_Class_Window}}}"
				data-elements-per-line="{{{VIPsColumnsNb}}}"
				data-pager-page-size="{{{VIPsPerPage}}}"
				data-element-size="{{{Size_VIP.X}}} {{{Size_VIP.Y}}}"
				data-margin-size="{{{Size_VIPMargin.X}}} {{{Size_VIPMargin.Y}}}"
				data-window-size="{{{Size_VIPScrollWindow.X}}} {{{Size_VIPScrollWindow.Y}}}"
				data-header-height="{{{Size_Header.Y}}}"
				data-footer-height="{{{Size_Footer.Y}}}"
				data-scroll-indicator-x-offset="-5."
				data-scroll-indicator-y-offset="-13."
				data-scroll-indicator-image="{{{MenuConsts::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
				data-scroll-indicator-colorize="FFFFFF"
				data-scroll-indicator-size="10"
				data-scrollbar-xoffset="10."
				data-scrollpadding="9.5"
				data-skew="-10"
				data-skew-valign="{{{Scroll::C_SkewVAlign_Center}}}"
			>
				<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
				{{{ML_VIPs}}}
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/MenuLibs/Common/Components/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Modes/Medals.Script.txt" as Medals
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/API/LeaderboardAPI.Script.txt" as LeaderboardAPI
#Include "ManiaApps/Nadeo/TMNext/TrackMania/UIModules/NetShare_Client.Script.txt" as NetShare

#Const C_DelayBeforeAutoHide {{{dump(C_DelayBeforeAutoHide)}}}

#Const C_Zone_Translations {{{dump(MenuConsts::C_Zone_Translations)}}}

#Const C_TTSContextLevel_Section {{{dump(MenuConsts::C_TTSContextLevel_Component + MenuConsts::C_TTSContextLevel_Section)}}}

#Const C_Buttons_CannotViewReplay ["A" => _("Select")]
#Const C_Buttons_CanViewReplay ["A" => _("Select"), "Y" => {{{dump(Text_ViewReplay)}}}]
#Const C_Buttons_MoreOpponentsList ["A" => _("Select"), "B" => _("Back")]

#Const C_MaxVisibleButtons 5
#Const C_MinVisibleButtons 2 //< Button_None and Button_MoreOpponents are enabled by default

#Struct K_Controls {
	CMlFrame Frame_ButtonsContainer;
	CMlFrame Frame_MoreOpponentsList;
	CMlFrame Frame_ScrollMoreOpponents;
	CMlFrame Frame_AutoHide;
	CMlFrame Button_None;
	CMlFrame Button_Exit;
	CMlFrame Button_Ranked;
	CMlFrame Button_GlobalVIP;
	CMlFrame Button_MoreOpponents;
	CMlLabel Label_PressKey;
	CMlQuad Quad_Background;
	CMlFrame Frame_ButtonList;
}

#Struct K_State {
	Vec2 MousePos;
	Boolean CanViewReplay;
	Boolean MenuIsVisible;
	Boolean MoreOpponentsListIsVisible;
	Integer NbVisibleControls;
	Text CurrentSectionDisplayName;
	Text[] TmpFollowerListToSend;
	CMlFrame[Text] HiddenMedalButtons;
	CMlFrame[Text] HiddenOpponentButtons;
	Grid::K_GridConfig GridConfig;
	{{{ClubStruct::P}}}K_Member[] MoreOpponentsList;
	{{{ClubStruct::P}}}K_Member[] GlobalVIPList;
	{{{ClubStruct::P}}}K_Member[] ClubVIPList;
	{{{ClubStruct::P}}}K_Member[] FollowersList;
	{{{CampaignStruct::P}}}K_Map CurrentMap;
	{{{CampaignStruct::P}}}K_Campaign CurrentCampaign;
	{{{CampaignStruct::P}}}K_PlayerCloseToMedal[Integer] PlayersCloseToMedals;
	Http::K_Request GetPlayersCloseToMedalsRequest;
}
""",
"""
declare Ident G_TTSContextIdent_Section;

K_State ShowButton(CMlControl _Button, K_State _State, Boolean _Visible) {
	declare K_State State = _State;
	declare Boolean IsReallyVisible = _Visible && State.NbVisibleControls < C_MaxVisibleButtons;

	{{{Button::P}}}SetVisibilityAndNavigation(_Button as CMlFrame, IsReallyVisible);

	if (_Button.Visible) {
		State.NbVisibleControls += 1;
	} else if (_Button.HasClass("{{{C_Class_MedalButton}}}")){
		State.HiddenMedalButtons[_Button.ControlId] = (_Button as CMlFrame);
	} else if (_Visible) {
		State.HiddenOpponentButtons[_Button.ControlId] = (_Button as CMlFrame);
	}

	return State;
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void FocusAvailableControl(K_Controls _Controls) {
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");

	foreach (Index => Control in _Controls.Frame_ButtonsContainer.Controls) {
		if ({{{Button::P}}}IsButton(Control) && Control.Visible) {
			Focus(FocusedControl, Control);
			break;
		}
	}
}

Void SetButtonsList(K_State _State, K_Controls _Controls) {
	if (_State.MoreOpponentsListIsVisible) {
		{{{MenuButtonList::P}}}SetButtons(_Controls.Frame_ButtonList, C_Buttons_MoreOpponentsList);
	} else if (_State.CanViewReplay) {
		{{{MenuButtonList::P}}}SetButtons(_Controls.Frame_ButtonList, C_Buttons_CanViewReplay);
	} else {
		{{{MenuButtonList::P}}}SetButtons(_Controls.Frame_ButtonList, C_Buttons_CannotViewReplay);
	}
}

Void ShowVIP(CMlFrame _Frame_Element, {{{ClubStruct::P}}}K_Member _Member) {
	declare CMlLabel Label_Name = (_Frame_Element.GetFirstChild("label-name") as CMlLabel);
	declare CMlQuad Quad_Bg = (_Frame_Element.GetFirstChild("quad-bg") as CMlQuad);
	declare Boolean IsTitle for _Frame_Element = False;
	IsTitle = _Member.AccountId == "";

	Label_Name.SetText(_Member.DisplayName);
	Quad_Bg.Visible = !IsTitle;

	if (IsTitle) {
		Label_Name.TextColor = <1., 1., 1.>;
		Label_Name.Opacity = 1.;
	} else {
		Quad_Bg.Colorize = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenOne}}}");
		Label_Name.TextColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenFour}}}");
		Label_Name.Opacity = 0.75;
	}

	_Frame_Element.Show();
}

Void HideVIP(CMlFrame _Frame_Element) {
	_Frame_Element.Hide();
}

Void FocusVIP(CMlFrame _Frame_VIP, Boolean _IsFocused) {
	if (_Frame_VIP == Null) return;

	declare Boolean IsTitle for _Frame_VIP = False;
	
	if (!IsTitle) {
		declare CMlLabel Label_Name = (_Frame_VIP.GetFirstChild("label-name") as CMlLabel);
		declare CMlQuad Quad_Bg = (_Frame_VIP.GetFirstChild("quad-bg") as CMlQuad);
		
		if (_IsFocused) {
			Quad_Bg.Colorize = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenFour}}}");
			Label_Name.TextColor = <1., 1., 1.>;
			Label_Name.Opacity = 1.;
			Label_Name.TTS_Focus();
		} else {
			Quad_Bg.Colorize = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenOne}}}");
			Label_Name.TextColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenFour}}}");
			Label_Name.Opacity = 0.75;
			Label_Name.TTS_Unfocus();
		}
	}
}

K_State DisplayMenu(K_State _State, K_Controls _Controls, Boolean _Visible, Vec2 _MousePos, Boolean _ApplySoundBalance) {
	declare K_State State = _State;

	State.MenuIsVisible = _Visible;
	State.MousePos = _MousePos;

	// Adjust the height of the menu if we are in training or not
	if (State.CurrentCampaign.SeasonId != "" || State.CurrentCampaign.LeaderboardGroupUid != "") {
		_Controls.Frame_AutoHide.RelativePosition_V3 = MLHelpers::SkewX(<_Controls.Frame_AutoHide.RelativePosition_V3.X, 0.>, 10.);
	} else {
		_Controls.Frame_AutoHide.RelativePosition_V3 = MLHelpers::SkewX(<_Controls.Frame_AutoHide.RelativePosition_V3.X, -15.>, 10.);
	}

	if (State.MenuIsVisible) {
		AnimMgr.Add(_Controls.Frame_AutoHide, "<a pos=\"{{{PosX_MenuVisible}}} "^_Controls.Frame_AutoHide.RelativePosition_V3.Y^"\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(_Controls.Label_PressKey, "<a pos=\"{{{PosX_PressKeyHidden}}} "^_Controls.Label_PressKey.RelativePosition_V3.Y^"\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(_Controls.Quad_Background, "<a opacity=\"0.3\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		if (_ApplySoundBalance) {{{MenuSounds::P}}}SetSoundBalanceState(This, {{{MenuSounds::P}}}C_InMenu_State, {{{C_SoundFadeTime_AutoHide}}});
	} else {
		AnimMgr.Add(_Controls.Frame_AutoHide, "<a pos=\"{{{PosX_MenuHidden}}} "^_Controls.Frame_AutoHide.RelativePosition_V3.Y^"\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(_Controls.Label_PressKey, "<a pos=\"{{{PosX_PressKeyVisible}}} "^_Controls.Label_PressKey.RelativePosition_V3.Y^"\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(_Controls.Quad_Background, "<a opacity=\"0.\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		if (_ApplySoundBalance) {{{MenuSounds::P}}}SetSoundBalanceState(This, {{{MenuSounds::P}}}C_Playing_State, {{{C_SoundFadeTime_AutoHide}}});
	}

	return State;
}

K_State DisplayMoreOpponentsList(K_State _State, K_Controls _Controls, Boolean _IsDisplayed) {
	declare K_State State = _State;

	State.MoreOpponentsListIsVisible = _IsDisplayed;

	_Controls.Frame_MoreOpponentsList.Visible = State.MoreOpponentsListIsVisible;
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !State.MoreOpponentsListIsVisible);
	if (State.MoreOpponentsListIsVisible) {
		{{{Scroll::P}}}Focus(This, _Controls.Frame_ScrollMoreOpponents);
	} else {
		{{{Scroll::P}}}Unfocus(This, _Controls.Frame_ScrollMoreOpponents);
	}
	SetButtonsList(State, _Controls);

	// Text to speech context
	if (_IsDisplayed) {
		G_TTSContextIdent_Section = ParentApp.TTS_Context_Enter(C_TTSContextLevel_Section);
	} else {
		G_TTSContextIdent_Section = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Section);
	}

	return State;
}

K_State UpdateMoreOpponentsList(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;

	State.MoreOpponentsList = [];

	/* Add medal buttons that were hidden in the Frame_ButtonsContainer to the "More opponents" list */
	if (State.HiddenMedalButtons.count > 0) {
		State.MoreOpponentsList.add({{{ClubStruct::P}}}K_Member { //< Section title
			DisplayName = "{{{Text_MedalGhosts}}}"
		});
		foreach (Button in State.HiddenMedalButtons) { //< Section content
			State.MoreOpponentsList.add({{{ClubStruct::P}}}K_Member {
				AccountId = Button.ControlId,
				DisplayName = {{{Button::P}}}GetValue(Button)
			});
		}
	}

	/* Then add the other opponent buttons in the list */
	if (State.HiddenOpponentButtons.count > 0) {
		State.MoreOpponentsList.add({{{ClubStruct::P}}}K_Member { //< Section title
			DisplayName = "{{{Text_OtherGhosts}}}"
		});
		foreach (Button in State.HiddenOpponentButtons) { //< Section content
			State.MoreOpponentsList.add({{{ClubStruct::P}}}K_Member {
				AccountId = Button.ControlId,
				DisplayName = {{{Button::P}}}GetValue(Button)
			});
		}
	}

	/* Then add the global VIPs in the list */
	if (State.GlobalVIPList.count > 0) {
		State.MoreOpponentsList.add({{{ClubStruct::P}}}K_Member { //< Section title
			DisplayName = "{{{Text_VIPFromWorld}}}"
		});
		foreach (VIPMember in State.GlobalVIPList) { //< Section content
			State.MoreOpponentsList.add(VIPMember);
		}
	}

	/* Finally, add the club VIPs */
	if (State.ClubVIPList.count > 0) {
		State.MoreOpponentsList.add({{{ClubStruct::P}}}K_Member { //< Section title
			DisplayName = TL::Compose("{{{Text_VIPFromClub}}}", "$<"^{{{ClubStore::P}}}GetUserPinnedClub().Name^"$>")
		});
		foreach (VIPMember in State.ClubVIPList) { //< Section content
			if (VIPMember.AccountId != LocalUser.WebServicesUserId) {
				State.MoreOpponentsList.add(VIPMember);
			}
		}
	}

	{{{Scroll::P}}}SetElementsTotal(This, _Controls.Frame_ScrollMoreOpponents, State.MoreOpponentsList.count);

	return State;
}

K_State Select(K_State _State, CMlControl _Control, K_Controls _Controls) {
	if (_Control == Null) return _State;

	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-exit": SendCustomEvent("{{{Consts::C_RaceMenuEvent_Exit}}}", []);
		case "button-none": SendCustomEvent("{{{Consts::C_StartRaceMenuEvent_StartRace}}}", [""^{{{Consts::C_GhostChoice_None}}}]);
		case "button-ranked": {
			State.CurrentMap = NetShare::GetMap(Teams[0]);
			{{{CampaignStore::P}}}Action_GetMapLevels(This, State.CurrentCampaign.LeaderboardGroupUid, State.CurrentMap.Uid, State.CurrentMap.Score);
			SendCustomEvent("{{{Consts::C_StartRaceMenuEvent_StartRace}}}", [""^{{{Consts::C_GhostChoice_Ranked}}}]);
		}
		case "button-medal-gold": {
			if (State.PlayersCloseToMedals.existskey(Medals::C_ScoreMgrMedal_Gold)) {
				declare {{{CampaignStruct::P}}}K_PlayerCloseToMedal PlayerCloseToMedal = State.PlayersCloseToMedals[Medals::C_ScoreMgrMedal_Gold];
				SendCustomEvent("{{{Consts::C_StartRaceMenuEvent_StartRace}}}", [""^{{{Consts::C_GhostChoice_Medals}}}, PlayerCloseToMedal.AccountId, PlayerCloseToMedal.Medal]);
			}
		}
		case "button-medal-silver": {
			if (State.PlayersCloseToMedals.existskey(Medals::C_ScoreMgrMedal_Silver)) {
				declare {{{CampaignStruct::P}}}K_PlayerCloseToMedal PlayerCloseToMedal = State.PlayersCloseToMedals[Medals::C_ScoreMgrMedal_Silver];
				SendCustomEvent("{{{Consts::C_StartRaceMenuEvent_StartRace}}}", [""^{{{Consts::C_GhostChoice_Medals}}}, PlayerCloseToMedal.AccountId, PlayerCloseToMedal.Medal]);
			}
		}
		case "button-medal-bronze": {
			if (State.PlayersCloseToMedals.existskey(Medals::C_ScoreMgrMedal_Bronze)) {
				declare {{{CampaignStruct::P}}}K_PlayerCloseToMedal PlayerCloseToMedal = State.PlayersCloseToMedals[Medals::C_ScoreMgrMedal_Bronze];
				SendCustomEvent("{{{Consts::C_StartRaceMenuEvent_StartRace}}}", [""^{{{Consts::C_GhostChoice_Medals}}}, PlayerCloseToMedal.AccountId, PlayerCloseToMedal.Medal]);
			}
		}
		case "button-global-vip": {
			if (State.FollowersList.count > 0) {
				State.TmpFollowerListToSend = [];
				foreach (Follower in State.FollowersList) {
					State.TmpFollowerListToSend.add(Follower.AccountId);
				}
			} else {
				declare {{{ClubStruct::P}}}K_Member VIPMember for _Control;
				if (VIPMember.AccountId != "") {
					SendCustomEvent("{{{Consts::C_StartRaceMenuEvent_StartRace}}}", [""^{{{Consts::C_GhostChoice_VIP}}}, VIPMember.AccountId]);
				}
			}
		}
		case "button-more-opponents": {
			State = DisplayMoreOpponentsList(State, _Controls, True);
		}
	}

	return State;
}

K_State UpdatePlayerCloseToMedalButtons(K_State _State, CMlFrame _Frame_ButtonsContainer) {
	declare K_State State = _State;

	foreach (MedalScore => Medal in Medals::C_ScoreMgrMedals) {
		declare CMlFrame Button_Medal = (_Frame_ButtonsContainer.GetFirstChild("button-medal-"^TL::ToLowerCase(Medals::MedalToText(Medal))) as CMlFrame);
		if (Button_Medal != Null) {
			State = ShowButton(Button_Medal, State, State.CurrentMap.Medal < MedalScore && State.PlayersCloseToMedals.existskey(MedalScore));
		}
	}

	return State;
}

K_State UpdateButtons(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;
	declare Boolean IsCampaign = State.CurrentCampaign.SeasonId != "";
	declare Text ZoneName = {{{CampaignStore::P}}}GetTopRank(State.CurrentMap.Rankings).ZoneName;
	declare Text UrlObtuseCorner = "{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Obtuse_Corner}}}";
	declare Text UrlObtuseCornerFocus = "{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Obtuse_Corner_Focus}}}";
	declare Text UrlRoundCorner = "{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Round_Corner}}}";
	declare Text UrlRoundCornerFocus = "{{{MenuConsts::C_ImageUrl_Campaign_Mode_Button_Round_Corner_Focus}}}";

	/* Update button visibility (by order of importance) */
	State.HiddenMedalButtons.clear();
	State.HiddenOpponentButtons.clear();
	State.NbVisibleControls = C_MinVisibleButtons;
	State = UpdatePlayerCloseToMedalButtons(State, _Controls.Frame_ButtonsContainer);
	State = ShowButton(_Controls.Button_Ranked, State, IsCampaign);
	State = ShowButton(_Controls.Button_GlobalVIP, State, IsCampaign && (State.FollowersList.count > 0 || (State.GlobalVIPList.count > 0 && State.GlobalVIPList[0].DisplayName != "")));
	if (State.FollowersList.count > 0) {{{Button::P}}}SetValue(This, _Controls.Button_GlobalVIP, "{{{Text_PlayAgainstFollowers}}}");
	if (_Controls.Button_Ranked.Visible || State.PlayersCloseToMedals.count > 0) {
		{{{Button::P}}}SetValue(This, _Controls.Button_None, "{{{Text_DriveAlone}}}");
	} else {
		{{{Button::P}}}SetValue(This, _Controls.Button_None, "{{{Text_Drive}}}");
	}
	if (ZoneName != "") {
		{{{Button::P}}}SetValue(This, _Controls.Button_Ranked, TL::Compose("{{{Text_RankedRegion}}}", TL::GetTranslatedText(C_Zone_Translations.get(ZoneName, ZoneName))));
	} else {
		{{{Button::P}}}SetValue(This, _Controls.Button_Ranked, "{{{Text_RankedRandom}}}");
	}
	State = UpdateMoreOpponentsList(State, _Controls);
	{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_MoreOpponents, State.MoreOpponentsList.count > 0 && IsCampaign); //< Hide this button if the list is empty

	/* Update the buttons' asset */
	declare Boolean[Integer] IndexControlVisible;
	foreach (Index => Control in _Controls.Frame_ButtonsContainer.Controls) {
		if ({{{Button::P}}}IsButton(Control)) {
			IndexControlVisible[Index] = Control.Visible;
		}
	}

	foreach (Index => Control in _Controls.Frame_ButtonsContainer.Controls) {
		if ({{{Button::P}}}IsButton(Control)) {
			{{{Navigation::P}}}Lock(Control, !Control.Visible);
			declare CMlControl NextControl;
			if (_Controls.Frame_ButtonsContainer.Controls.existskey(Index+1) && {{{Button::P}}}IsButton(_Controls.Frame_ButtonsContainer.Controls[Index+1])) {
				NextControl = _Controls.Frame_ButtonsContainer.Controls[Index+1];
			}

			if (Control.Visible) {
				declare Boolean HasANextButton = False;
				for (I, Index+1, IndexControlVisible.count-1) {
					if (IndexControlVisible.existskey(I)) {
						HasANextButton = HasANextButton || IndexControlVisible[I];
						if (HasANextButton) break;
					}
				}
				declare CMlFrame Frame_Button = (Control as CMlFrame);
				if (!HasANextButton) {
					{{{Button::P}}}SetImage(This, Frame_Button, UrlRoundCorner);
					{{{Button::P}}}SetImageFocus(This, Frame_Button, UrlRoundCornerFocus);
				} else {
					{{{Button::P}}}SetImage(This, Frame_Button, UrlObtuseCorner);
					{{{Button::P}}}SetImageFocus(This, Frame_Button, UrlObtuseCornerFocus);
				}
			}
		}
	}

	/* Update buttons pos in the grid */
	Grid::Update(State.GridConfig, AnimMgr, _Controls.Frame_ButtonsContainer, 10., False, True);

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare netread Boolean Net_Campaign_StartRaceMenu_CanViewReplay for Teams[0];
declare netread Integer Net_Campaign_StartRaceMenu_VolumeBalanceState_Playing for Teams[0];
declare netwrite {{{CampaignStruct::P}}}K_PlayerCloseToMedal[Integer] Net_Campaign_RaceMenu_PlayersCloseToMedals for Teams[0]; //< The Key correspond to the C_ScoreMgrMedal

declare Boolean DisplayModule;
declare Boolean IsRetrivingGhosts;
declare Integer ForceUpdate;
declare Integer UserPinnedClubId;
declare Integer ActivityTimeShift;
declare Integer UpdateVolumeBalanceState_Playing;

declare K_State State;
declare K_Controls Controls;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	MenuIsVisible = False,
	CanViewReplay = False,
	MousePos = Input.MousePos,
	PlayersCloseToMedals = [],
	GetPlayersCloseToMedalsRequest = Http::GetEmptyRequest()
};

Controls = K_Controls {
	Frame_ButtonsContainer = (Frame_Global.GetFirstChild("frame-buttons-container") as CMlFrame),
	Frame_MoreOpponentsList = (Frame_Global.GetFirstChild("frame-more-opponents-list") as CMlFrame),
	Frame_ScrollMoreOpponents = (Frame_Global.GetFirstChild("frame-scroll-more-opponents") as CMlFrame),
	Frame_AutoHide = (Frame_Global.GetFirstChild("frame-auto-hide") as CMlFrame),
	Button_None = (Frame_Global.GetFirstChild("button-none") as CMlFrame),
	Button_Ranked = (Frame_Global.GetFirstChild("button-ranked") as CMlFrame),
	Button_Exit = (Frame_Global.GetFirstChild("button-exit") as CMlFrame),
	Button_GlobalVIP = (Frame_Global.GetFirstChild("button-global-vip") as CMlFrame),
	Button_MoreOpponents = (Frame_Global.GetFirstChild("button-more-opponents") as CMlFrame),
	Label_PressKey = (Frame_Global.GetFirstChild("label-press-key") as CMlLabel),
	Quad_Background = (Frame_Global.GetFirstChild("quad-background") as CMlQuad),
	Frame_ButtonList = (Frame_Global.GetFirstChild("frame-button-list-start-race-campaign") as CMlFrame)
};

DisplayModule = Frame_Global.Visible;
ActivityTimeShift = Input.TimeSinceLatestActivity;
UpdateVolumeBalanceState_Playing = Net_Campaign_StartRaceMenu_VolumeBalanceState_Playing;
State = DisplayMenu(State, Controls, False, Input.MousePos, DisplayModule);
State.GridConfig.fromjson({{{"\"\"\""^GridConfigJson^"\"\"\""}}});

SetButtonsList(State, Controls);

{{{Navigation::P}}}UseLocalEvents(This, True);
{{{Scroll::P}}}UseLocalEvents(This, True);
{{{RaceMapInfos::P}}}SetDisplayed(Frame_Global.Visible);
Grid::Update(State.GridConfig, AnimMgr, Controls.Frame_ButtonsContainer, 10., False, True);
***

***MainLoop***
***
if (DisplayModule && !EnableMenuNavigationInputs) {
	EnableMenuNavigation(True, False, False, Null, {{{Consts::C_InputPriority_StartRaceMenu}}});
} else if (!DisplayModule && EnableMenuNavigationInputs) {
	EnableMenuNavigation(False, False, False, Null, {{{Consts::C_InputPriority_StartRaceMenu}}});
}

if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	declare Boolean IgnoreInput = False;
	
	/* Display behaviors */
	if (Owner != Null) {
		declare netread Boolean Net_Campaign_StartRaceMenu_IsVisible for Owner;
		if (DisplayModule != Net_Campaign_StartRaceMenu_IsVisible) {
			DisplayModule = Net_Campaign_StartRaceMenu_IsVisible;
			Frame_Global.Visible = Net_Campaign_StartRaceMenu_IsVisible;
			{{{RaceMapInfos::P}}}SetDisplayed(Frame_Global.Visible);
			if (DisplayModule) {
				State = DisplayMenu(State, Controls, State.CurrentMap.Medal >= Medals::C_ScoreMgrMedal_Gold, Input.MousePos, False);
				{{{MenuSounds::P}}}SetSoundBalanceState(This, {{{MenuSounds::P}}}C_InMenu_State, {{{C_SoundFadeTime_EnterMenu}}});
				ActivityTimeShift = Input.TimeSinceLatestActivity;
				FocusAvailableControl(Controls);
			} else if (Http::IsInitialized(State.GetPlayersCloseToMedalsRequest)) {
				State.GetPlayersCloseToMedalsRequest = Http::Destroy(State.GetPlayersCloseToMedalsRequest);
			}
		}
	} else if (DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
		{{{RaceMapInfos::P}}}SetDisplayed(Frame_Global.Visible);
	}

	/* Forced updates */
	if (ForceUpdate != NetShare::GetForceUpdate(Teams[0])) {
		ForceUpdate = NetShare::GetForceUpdate(Teams[0]);
		State.FollowersList = [];
		State.GlobalVIPList = [];
		State.ClubVIPList = [];
		State.MoreOpponentsList = [];

		// Fetch informations
		declare {{{CampaignStruct::P}}}K_Map NewMap = NetShare::GetMap(Teams[0]);
		if (NewMap.Uid != State.CurrentMap.Uid) { //< Clear ghosts' array when switching map
			State.PlayersCloseToMedals = [];
		}
		State.CurrentMap = NewMap;
		State.CurrentCampaign = NetShare::GetCampaign(Teams[0]);
		UserPinnedClubId = {{{ClubStruct::P}}}C_ClubNullId;

		if (State.CurrentCampaign.Id == {{{CampaignStruct::C_TrainingCampaign_Id}}}) { //< Do not send requests if we are in Training
			SendCustomEvent("{{{Consts::C_RaceMenuEvent_LoadingComplete}}}", []);
		} else if (State.CurrentCampaign.Id != {{{CampaignStruct::C_Campaign_NullId}}}) {
			if (State.PlayersCloseToMedals.count <= 0 && !Http::IsInitialized(State.GetPlayersCloseToMedalsRequest)) {
				State.GetPlayersCloseToMedalsRequest = Http::DestroyAndCreate(
					State.GetPlayersCloseToMedalsRequest,
					// Always use personal best for medal ghosts
					LeaderboardAPI::GetPlayersCloseToMedals(LeaderboardAPI::C_GroupUid_PersonalBest, State.CurrentMap.Uid)
				);
				IsRetrivingGhosts = True;
			}

			if (!{{{ClubStore::P}}}IsGettingVIPListOnMap()) {
				if ({{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayRecords)) {
					UserPinnedClubId = {{{ClubStore::P}}}GetUserPinnedClub().Id;
				}
				{{{ClubStore::P}}}Action_GetVIPListOnMap(This, UserPinnedClubId, State.CurrentMap.Uid, State.CurrentCampaign.SeasonId);
				IsRetrivingGhosts = True;
			}
		} 

		State = UpdateButtons(State, Controls);
		State = DisplayMenu(State, Controls, State.CurrentMap.Medal >= Medals::C_ScoreMgrMedal_Gold, Input.MousePos, DisplayModule);
	}

	/* Retrieve ghosts from the map medals */
	if (Http::IsInitialized(State.GetPlayersCloseToMedalsRequest)) {
		State.GetPlayersCloseToMedalsRequest = Http::Update(State.GetPlayersCloseToMedalsRequest);
		if (!Http::IsRunning(State.GetPlayersCloseToMedalsRequest)) {
			if (Http::IsSuccess(State.GetPlayersCloseToMedalsRequest)) {
				declare Response = LeaderboardAPI::GetResponseFromGetPlayersCloseToMedals(State.GetPlayersCloseToMedalsRequest);
				foreach (Ghost in Response.Medals) {
					State.PlayersCloseToMedals[Medals::TextToInteger(Ghost.Medal)] = Ghost;
				}
				Net_Campaign_RaceMenu_PlayersCloseToMedals = State.PlayersCloseToMedals.sortkey();
			}
			State.GetPlayersCloseToMedalsRequest = Http::Destroy(State.GetPlayersCloseToMedalsRequest);
			State = UpdateButtons(State, Controls);
			FocusAvailableControl(Controls);
		}
	}

	/* Navigation updates */
	if (Frame_Global.Visible) {
		if (State.CanViewReplay != Net_Campaign_StartRaceMenu_CanViewReplay) {
			State.CanViewReplay = Net_Campaign_StartRaceMenu_CanViewReplay;
			SetButtonsList(State, Controls);
		}

		if (State.MenuIsVisible && Input.TimeSinceLatestActivity - ActivityTimeShift > C_DelayBeforeAutoHide) {
			State = DisplayMenu(State, Controls, False, Input.MousePos, DisplayModule);
			ActivityTimeShift = 0;
		}

		if (!State.MenuIsVisible) {
			Controls.Label_PressKey.Opacity = (ML::Cos(Now / 300.) * 0.4) + 0.6;

			if (Tools::ControllerWasUsed(This, Input, State.MousePos)) {
				State = DisplayMenu(State, Controls, True, Input.MousePos, DisplayModule);
				ActivityTimeShift = Input.TimeSinceLatestActivity;
				IgnoreInput = True;
			}
		}

		if (State.MenuIsVisible && !IgnoreInput) {
			foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
				switch (Event.Type) {
					case {{{Navigation::P}}}C_EventType_NavigateInput: {
						if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
							if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
								State = Select(State, Event.To, Controls);
							} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Action2) {
								if (State.CanViewReplay) {
									State = DisplayMenu(State, Controls, False, Input.MousePos, DisplayModule);
									ActivityTimeShift = 0;
								}
							} else {
								Focus(Event.From, Event.To);
							}
						}
					}
					case {{{Navigation::P}}}C_EventType_NavigateMouse: {
						if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
							if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
								State = Select(State, Event.To, Controls);
							} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
								Focus(Event.From, Event.To);
							}
						}
					}
				}
			}
		}
	}

	/* Handle followers ghosts selection */
	if (State.TmpFollowerListToSend.count > 0) {
		declare Text[] EventData;
		declare Text[] FollowerList = State.TmpFollowerListToSend;

		foreach (FollowerAccountId in FollowerList) {
			EventData.add(FollowerAccountId);
			State.TmpFollowerListToSend.remove(FollowerAccountId);
			if (EventData.count > 7) break; //< So SendCustomEvent don't crash
		}

		SendCustomEvent("{{{Consts::C_StartRaceMenuEvent_AddAccountIds}}}", EventData);
		if (State.TmpFollowerListToSend.count == 0) {
			SendCustomEvent("{{{Consts::C_StartRaceMenuEvent_StartRace}}}", [""^{{{Consts::C_GhostChoice_Followers}}}]);
		}
	}

	/* ClubStore events */
	foreach (Event in PendingEvents) {
		if (Event.Type == CMlScriptEvent::Type::PluginCustomEvent) {
			switch (Event.CustomEventType) {
				case {{{ClubStore::P}}}C_Event_FollowersListOnMapUpdated: {
					if (Event.CustomEventData.count >= 1 && State.CurrentMap.Uid == Event.CustomEventData[0]) {
						State.FollowersList = {{{ClubStore::P}}}GetFollowersListOnMap(State.CurrentMap.Uid, State.CurrentCampaign.SeasonId);
						State = UpdateButtons(State, Controls);
					}
				}
				case {{{ClubStore::P}}}C_Event_GlobalVIPListOnMapUpdated: {
					if (Event.CustomEventData.count >= 1 && State.CurrentMap.Uid == Event.CustomEventData[0]) {
						State.GlobalVIPList = {{{ClubStore::P}}}GetGlobalVIPListOnMap(State.CurrentMap.Uid, State.CurrentCampaign.SeasonId);
						State = UpdateButtons(State, Controls);
						if (State.FollowersList.count <= 0) {
							declare {{{ClubStruct::P}}}K_Member VIPMember for Controls.Button_GlobalVIP;
							if (Controls.Button_GlobalVIP.Visible) {
								VIPMember = State.GlobalVIPList[0];
								{{{Button::P}}}SetValue(This, Controls.Button_GlobalVIP, TL::Compose("{{{Text_PlayAgainst}}}", State.GlobalVIPList[0].DisplayName));
							} else {
								VIPMember = {{{ClubStruct::P}}}K_Member {};
							}
						}
					}
				}
				case {{{ClubStore::P}}}C_Event_ClubVIPListOnMapUpdated: {
					if (
						Event.CustomEventData.count >= 3 &&
						UserPinnedClubId == TL::ToInteger(Event.CustomEventData[0]) &&
						State.CurrentMap.Uid == Event.CustomEventData[1] &&
						State.CurrentCampaign.SeasonId == Event.CustomEventData[2]
					) {
						State.ClubVIPList = {{{ClubStore::P}}}GetVIPListOnMap(UserPinnedClubId, State.CurrentCampaign.SeasonId, State.CurrentMap.Uid);
						if (State.ClubVIPList.count > 0) {
							State = UpdateButtons(State, Controls);
						}
					}
				}
			}
		}
	}

	/* Script events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::MouseOver: {
				if (Event.ControlId == "button-leave") {
					AnimMgr.Add(Event.Control, "<anim scale=\"1.2\"/>", 100, CAnimManager::EAnimManagerEasing::Linear);
				}
			}
			case CMlScriptEvent::Type::MouseOut: {
				if (Event.ControlId == "button-leave") {
					AnimMgr.Add(Event.Control, "<anim scale=\"1.\"/>", 100, CAnimManager::EAnimManagerEasing::Linear);
				}
			}
			case CMlScriptEvent::Type::MouseClick: {
				if (Event.ControlId == "button-leave") {
					State = DisplayMoreOpponentsList(State, Controls, False);
				}
			}
		}
	}

	/* Scroll events */
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Scroll::P}}}C_EventType_Update: {
				foreach (Key => Frame_Element in Event.ElementsVisible) {
					if (State.MoreOpponentsList.existskey(Key)) {
						ShowVIP(Frame_Element, State.MoreOpponentsList[Key]);
					} else {
						HideVIP(Frame_Element);
					}
				}
				foreach (Key => Frame_Element in Event.ElementsHidden) {
					HideVIP(Frame_Element);
				}
			}
			case {{{Scroll::P}}}C_EventType_Focus: {
				if (Event.From != Null) FocusVIP(Event.From, False);
				if (Event.To != Null) {
					declare Boolean IsTitle for Event.To = False;
					declare CMlFrame TrueFocus = Event.To;

					if (!Event.IsMouse && IsTitle) {
						declare CMlFrame[Integer] ElementsVisible = {{{Scroll::P}}}GetElementsVisible(Event.Scroll);

						if (Event.FromKey < Event.ToKey && ElementsVisible.existskey(Event.ToKey + 1)) {
							TrueFocus = ElementsVisible[Event.ToKey + 1];
							{{{Scroll::P}}}SetFocusedElementKey(This, Event.Scroll, Event.ToKey + 1, False, False);
						} else if (Event.FromKey > Event.ToKey && ElementsVisible.existskey(Event.ToKey - 1)) {
							TrueFocus = ElementsVisible[Event.ToKey - 1];
							{{{Scroll::P}}}SetFocusedElementKey(This, Event.Scroll, Event.ToKey - 1, False, False);
						} else if (ElementsVisible.existskey(Event.FromKey)){
							TrueFocus = ElementsVisible[Event.FromKey];
							{{{Scroll::P}}}SetFocusedElementKey(This, Event.Scroll, Event.FromKey, False, False);
						}
					}

					// Text to speech context
					declare Integer TrueFocusKey = {{{Scroll::P}}}GetFocusedElementKey(Event.Scroll);
					if (State.MoreOpponentsList.existskey(TrueFocusKey) && State.MoreOpponentsList[TrueFocusKey].AccountId != "") {
						for (Key, 0, TrueFocusKey, -1) {
							if (State.MoreOpponentsList.existskey(Key) && State.MoreOpponentsList[Key].AccountId == "") {
								if (State.CurrentSectionDisplayName != State.MoreOpponentsList[Key].DisplayName) {
									State.CurrentSectionDisplayName = State.MoreOpponentsList[Key].DisplayName;
									ParentApp.TTS_Context_Change(G_TTSContextIdent_Section, TL::StripFormatting(TL::GetTranslatedText(State.CurrentSectionDisplayName)), True);
									ParentApp.TTS_Context_Read(C_TTSContextLevel_Section);
								}
								break;
							}
						}
					}

					FocusVIP(TrueFocus, True);
				}
			}
			case {{{Scroll::P}}}C_EventType_Select: {
				if (State.MoreOpponentsList.existskey(Event.ToKey) && State.MoreOpponentsList[Event.ToKey].AccountId != "") {
					if (State.HiddenMedalButtons.existskey(State.MoreOpponentsList[Event.ToKey].AccountId)) {
						State = Select(State, State.HiddenMedalButtons[State.MoreOpponentsList[Event.ToKey].AccountId], Controls);
					} else if (State.HiddenOpponentButtons.existskey(State.MoreOpponentsList[Event.ToKey].AccountId)) {
						State = Select(State, State.HiddenOpponentButtons[State.MoreOpponentsList[Event.ToKey].AccountId], Controls);
					} else {
						SendCustomEvent("{{{Consts::C_StartRaceMenuEvent_StartRace}}}", [""^{{{Consts::C_GhostChoice_VIP}}}, State.MoreOpponentsList[Event.ToKey].AccountId]);
					}
					State = DisplayMoreOpponentsList(State, Controls, False);
				}
			}
			case {{{Scroll::P}}}C_EventType_Cancel: {
				State = DisplayMoreOpponentsList(State, Controls, False);
			}
		}
	}

	/* Send event when all ghosts data have been retrieved */
	if (IsRetrivingGhosts && !{{{ClubStore::P}}}IsGettingVIPListOnMap() && !Http::IsInitialized(State.GetPlayersCloseToMedalsRequest)) {
		SendCustomEvent("{{{Consts::C_RaceMenuEvent_LoadingComplete}}}", []);
		IsRetrivingGhosts = False;
	}
}

/* Campaign store events */
foreach (Event in PendingEvents) {
	if (Event.Type == CMlScriptEvent::Type::PluginCustomEvent) {
		switch (Event.CustomEventType) {
			case {{{CampaignStore::P}}}C_Event_MapRecordsUpdated: {
				SendCustomEvent("{{{Consts::C_RaceMenuEvent_MapRecordsUpdated}}}", []);
			}
			case {{{CampaignStore::P}}}C_Event_MapRankingLevelsUpdated: {
				SendCustomEvent("{{{Consts::C_StartRaceMenuEvent_RankingLevelsUpdated}}}", []);
			}
			case {{{CampaignStore::P}}}C_Event_MapRankingLevelsUpdateFailed: {
				SendCustomEvent("{{{Consts::C_StartRaceMenuEvent_RankingLevelsUpdated}}}", []);
			}
		}
	}
}

/* Updates volume balance */
if (UpdateVolumeBalanceState_Playing != Net_Campaign_StartRaceMenu_VolumeBalanceState_Playing) {
	UpdateVolumeBalanceState_Playing = Net_Campaign_StartRaceMenu_VolumeBalanceState_Playing;
	{{{MenuSounds::P}}}SetSoundBalanceState(This, {{{MenuSounds::P}}}C_Playing_State, {{{C_SoundFadeTime_CloseMenu}}});
}
***
""",
[
	Transition::ComponentV2(),
	Navigation::ComponentV2(),
	CampaignStore::ComponentV2(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	CampaignStruct::Component(),
	RaceMapInfos::Component(),
	Button::ComponentV2(),
	Scroll::ComponentV2(),
	MenuButtonList::Component(),
	UserStore::ComponentV2(),
	MenuSounds::ComponentV2()
],
[]
	);
}