/**
 *	UI module: ClashTime server side
 */
#Const Version		"2021-10-11"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/ClashTime/UIModules/ClashTime_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Common.Script.txt" as UIModules_Common
#Include "ManiaApps/Nadeo/TMNext/TrackMania/ClashTime/UIModules/ClashTime_Common.Script.txt" as UIModules_ClashTime_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_ClashTime_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::ComponentModeLibsUIModules_K_ModuleConfig GetConfig() {
	return UIModules_ClashTime_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the vehicle top speed
Void SetTopSpeed(Real _TopSpeed) {
	declare netwrite Real Net_ClashTime_ClashTime_TopSpeed for Teams[0];
	Net_ClashTime_ClashTime_TopSpeed = _TopSpeed;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the vehicle's active commands
Void SetCommands(CPlayer _Player, Boolean _Accelerate, Boolean _Brake, Real _Steer, Boolean _Respawn) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;
	
	declare netwrite Boolean Net_ClashTime_ClashTime_Accelerate for UI;
	declare netwrite Boolean Net_ClashTime_ClashTime_Brake for UI;
	declare netwrite Real Net_ClashTime_ClashTime_Steer for UI;
	declare netwrite Boolean Net_ClashTime_ClashTime_Respawn for UI;
	Net_ClashTime_ClashTime_Accelerate = _Accelerate;
	Net_ClashTime_ClashTime_Brake = _Brake;
	Net_ClashTime_ClashTime_Steer = _Steer;
	Net_ClashTime_ClashTime_Respawn = _Respawn;
}
Void ResetCommands(CPlayer _Player) {
	SetCommands(_Player, False, False, 0., False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the player followed in spec mode by the given player
CSmPlayer GetSpecTarget(CPlayer _Player) {
	if (_Player == Null) return Null;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return Null;
	
	declare netread Text Net_ClashTime_ClashTime_SpecTarget for UI;
	if (Net_ClashTime_ClashTime_SpecTarget == "") return Null;
	
	return GetPlayer(Net_ClashTime_ClashTime_SpecTarget);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// The rank of the player at the end of the race
Void SetFinishRank(CPlayer _Player, Integer _FinishRank) {
	declare netwrite Integer Net_ClashTime_ClashTime_FinishRank for _Player;
	Net_ClashTime_ClashTime_FinishRank = _FinishRank;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the end time of the intro
Void SetIntroEndTime(Integer _EndTime) {
	declare netwrite Integer Net_ClashTime_ClashTime_IntroEndTime for Teams[0];
	Net_ClashTime_ClashTime_IntroEndTime = _EndTime;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Enable or disable the intro UI
Void SetIsIntro(Boolean _IsIntro) {
	declare netwrite Boolean Net_ClashTime_ClashTime_IsIntro for Teams[0];
	Net_ClashTime_ClashTime_IsIntro = _IsIntro;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Setup the intro
Void SetIntro(Boolean _IsIntro, Integer _EndTime) {
	SetIntroEndTime(_EndTime);
	SetIsIntro(_IsIntro);
}
Void SetIntro(Boolean _IsIntro) {
	SetIntro(_IsIntro, -1);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Enable or disable the race UI
Void SetIsRace(Boolean _IsRace) {
	declare netwrite Boolean Net_ClashTime_ClashTime_IsRace for Teams[0];
	Net_ClashTime_ClashTime_IsRace = _IsRace;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Set the controlled player
Void SetTarget(CPlayer _Player, Text _TargetAccountId, Text _TargetName) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;
	
	declare netwrite Text Net_ClashTime_ClashTime_TargetAccountId for UI = "";
	declare netwrite Text Net_ClashTime_ClashTime_TargetName for UI = "";
	Net_ClashTime_ClashTime_TargetAccountId = _TargetAccountId;
	Net_ClashTime_ClashTime_TargetName = _TargetName;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Make the streamers spectate the right player
Void AllStreamersSpectateTarget() {
	declare netwrite Integer Net_ClashTime_ClashTime_AllStreamersSpectateTarget for Teams[0] = 0;
	Net_ClashTime_ClashTime_AllStreamersSpectateTarget += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	
	declare netwrite Boolean Net_ClashTime_ClashTime_IsVisible for _Player;
	Net_ClashTime_ClashTime_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, False);
	ResetCommands(_Player);
	SetFinishRank(_Player, 0);
	SetTarget(_Player, "", "");
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
	SetTopSpeed(0.);
	SetIntro(False);
	SetIsRace(False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}