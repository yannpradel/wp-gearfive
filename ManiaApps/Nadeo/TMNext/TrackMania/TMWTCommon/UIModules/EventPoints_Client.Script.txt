/**
 *	UI module: EventPoints client side
 */
#Const Version		"2023-03-17"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/EventPoints_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/EventPoints_Common.Script.txt" as UIModules_EventPoints_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
//L16N [TrackMania World Tour - Teams] A team receives 1 point. %1 will be replaced by the name of a team. eg: "+1 point for TeamXYZ".
#Const C_Text_PointsForOne _("+1 point for %1")
//L16N [TrackMania World Tour - Teams] A team receives several points. %1 will be replaced by the number of points, always more than 1. %2 will be replaced by the name of a team. eg: "+3 points for TeamXYZ".
#Const C_Text_PointsForMulti _("+%1 points for %2")

#Const C_ImgPath "file://Media/Manialinks/Nadeo/TMNext/Modes/TMWT/UI"
#Const C_Size_EventPoints <66.5, 7.>
#Const C_Size_EventPointsBg <66., 7.>
#Const C_TextSize_LabelPoints 1.8
#Const C_AnimDuration_MapPointsInOut 250
#Const C_AnimDuration_MapPointsStay 5000

#Const C_ModelId_EventPoints "framemodel-event-points"
#Const C_Id_FrameGlobal "frame-global"
#Const C_Id_FrameClansPoints "frame-clans-points"
#Const C_Id_QuadTeamColor "quad-team-color"
#Const C_Id_LabelPoints "label-event-points"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_EventPoints_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_EventPoints_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML(Integer _Theme) {
	return MV::Create(
GetId(), 3,
"""
{{{Stylesheet::Get(_Theme)}}}
<framemodel id="{{{C_ModelId_EventPoints}}}">
	<quad class="{{{Stylesheet::C_Class_Border_Default}}}" z-index="1" size="{{{Stylesheet::C_BorderWidth}}} {{{C_Size_EventPointsBg.Y}}}" />
	<frame pos="{{{Stylesheet::C_BorderWidth}}}" z-index="0">
		<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" {{{MLHelpers::Size(C_Size_EventPointsBg)}}} />
		<quad id="{{{C_Id_QuadTeamColor}}}" class="{{{Stylesheet::C_Class_Gradient_BlueTeam}}}" z-index="1" {{{MLHelpers::Size(C_Size_EventPointsBg)}}} image="{{{C_ImgPath}}}/TMWT_PlayerLiveRanking.dds" />
		<label id="{{{C_Id_LabelPoints}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" pos="1 {{{C_Size_EventPointsBg.Y * -0.5}}}" z-index="2" {{{MLHelpers::Size(C_Size_EventPointsBg - <2., 1.>)}}} valign="center2" textsize="{{{C_TextSize_LabelPoints}}}" />
	</frame>
</framemodel>
<frame id="{{{C_Id_FrameGlobal}}}" z-index="-2" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_EventPoints_Common::C_UIModuleConfig)}}}>
		<frame id="{{{C_Id_FrameClansPoints}}}" {{{MLHelpers::Size(<C_Size_EventPoints.X, (C_Size_EventPoints.Y * 2) + 1.>)}}}>
			<frameinstance modelid="{{{C_ModelId_EventPoints}}}" pos="{{{-C_Size_EventPoints.X}}} 0" hidden="1" />
			<frameinstance modelid="{{{C_ModelId_EventPoints}}}" pos="{{{-C_Size_EventPoints.X}}} -8" hidden="1" />
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Teams.Script.txt" as Teams

#Struct K_ControlsClanPoints {
	CMlFrame Frame_Points;
	CMlQuad Quad_TeamColor;
	CMlLabel Label_Points;
}
#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_ClansPoints;
	K_ControlsClanPoints[] ClansPoints;
}
#Struct K_State {
	K_Controls Controls;
	Boolean DisplayModule;
	Int2 ClansMapPoints;
}

#Const C_State_Null K_State {
	Controls = K_Controls {},
	DisplayModule = False
}

#Const C_Theme {{{dump(_Theme)}}}

#Const C_Text_PointsForOne {{{dump(C_Text_PointsForOne)}}}
#Const C_Text_PointsForMulti {{{dump(C_Text_PointsForMulti)}}}

#Const C_Size_EventPoints {{{dump(C_Size_EventPoints)}}}
#Const C_TextSize_LabelPoints {{{dump(C_TextSize_LabelPoints)}}}
#Const C_AnimDuration_MapPointsInOut {{{dump(C_AnimDuration_MapPointsInOut)}}}
#Const C_AnimDuration_MapPointsStay {{{dump(C_AnimDuration_MapPointsStay)}}}

#Const C_Id_FrameGlobal {{{dump(C_Id_FrameGlobal)}}}
#Const C_Id_FrameClansPoints {{{dump(C_Id_FrameClansPoints)}}}
#Const C_Id_QuadTeamColor {{{dump(C_Id_QuadTeamColor)}}}
#Const C_Id_LabelPoints {{{dump(C_Id_LabelPoints)}}}
""",
"""
K_State SetVisibility(K_State _State, Boolean _DisplayModule) {
	declare K_State State = _State;

	State.DisplayModule = _DisplayModule;

	State.Controls.Frame_Global.Visible = State.DisplayModule;

	return State;
}

K_State SetClansMapPoints(K_State _State, Int2 _ClansMapPoints, Teams::K_Team[Integer] _TeamsInfo) {
	declare K_State State = _State;

	declare Integer[Integer] ClansPointsDiff = [
		1 => _ClansMapPoints.X - State.ClansMapPoints.X,
		2 => _ClansMapPoints.Y - State.ClansMapPoints.Y
	];
	ClansPointsDiff = ClansPointsDiff.sortreverse();
	State.ClansMapPoints = _ClansMapPoints;

	// Play the animation only if the UI is visible
	if (State.DisplayModule) {
		declare Integer TimeOffset;
		declare Integer Key;
		foreach (Clan => PointsDiff in ClansPointsDiff) {
			if (PointsDiff > 0) {
				declare K_ControlsClanPoints ControlsClanPoints = State.Controls.ClansPoints[Key];

				if (PointsDiff == 1) {
					ControlsClanPoints.Label_Points.Value = TL::Compose(C_Text_PointsForOne, Teams::GetClanName(This, _TeamsInfo, Clan));
				} else {
					ControlsClanPoints.Label_Points.Value = TL::Compose(C_Text_PointsForMulti, ""^PointsDiff, Teams::GetClanName(This, _TeamsInfo, Clan));
				}
				Tools::FitLabelValue(ControlsClanPoints.Label_Points, C_TextSize_LabelPoints, 1., 0.1);

				if (Clan == 1) {
					ControlsClanPoints.Quad_TeamColor.Colorize = Stylesheet::GetVec3Color(Stylesheet::C_Class_Gradient_BlueTeam, C_Theme);
				} else if (Clan == 2) {
					ControlsClanPoints.Quad_TeamColor.Colorize = Stylesheet::GetVec3Color(Stylesheet::C_Class_Gradient_RedTeam, C_Theme);
				}

				AnimMgr.Flush(ControlsClanPoints.Frame_Points);
				ControlsClanPoints.Frame_Points.RelativePosition_V3.X = -C_Size_EventPoints.X;
				AnimMgr.Add(ControlsClanPoints.Frame_Points, "<a pos=\"0 "^ControlsClanPoints.Frame_Points.RelativePosition_V3.Y^"\" hidden=\"0\" />", Now + TimeOffset, C_AnimDuration_MapPointsInOut, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(ControlsClanPoints.Frame_Points, "<a pos=\""^-C_Size_EventPoints.X^" "^ControlsClanPoints.Frame_Points.RelativePosition_V3.Y^"\" hidden=\"1\" />", Now + TimeOffset + C_AnimDuration_MapPointsInOut + C_AnimDuration_MapPointsStay, C_AnimDuration_MapPointsInOut, CAnimManager::EAnimManagerEasing::QuadOut);

				TimeOffset += 50;
				Key += 1;
			}
		}
	}

	return State;
}

***MainInit***
***
declare netread Boolean Net_TMWTCommon_EventPoints_IsVisible for UI;
declare netread Int2 Net_TMWTCommon_EventPoints_ClansMapPoints for Teams[0] = <0, 0>;

declare K_State State = C_State_Null;
***

***MainStart***
***
State.Controls.Frame_Global <=> (Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);
State.Controls.Frame_ClansPoints <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_FrameClansPoints) as CMlFrame);
foreach (Control in State.Controls.Frame_ClansPoints.Controls) {
	declare CMlFrame Frame_Points <=> (Control as CMlFrame);
	State.Controls.ClansPoints.add(K_ControlsClanPoints {
		Frame_Points = Frame_Points,
		Quad_TeamColor = (Frame_Points.GetFirstChild(C_Id_QuadTeamColor) as CMlQuad),
		Label_Points = (Frame_Points.GetFirstChild(C_Id_LabelPoints) as CMlLabel)
	});
}

State = SetVisibility(State, State.Controls.Frame_Global.Visible);
State = SetClansMapPoints(State, Net_TMWTCommon_EventPoints_ClansMapPoints, Teams::GetTeamsInfo(This));
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.DisplayModule != Net_TMWTCommon_EventPoints_IsVisible) {
		State = SetVisibility(State, Net_TMWTCommon_EventPoints_IsVisible);
	}
	if (State.ClansMapPoints != Net_TMWTCommon_EventPoints_ClansMapPoints) {
		State = SetClansMapPoints(State, Net_TMWTCommon_EventPoints_ClansMapPoints, Teams::GetTeamsInfo(This));
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}