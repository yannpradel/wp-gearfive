/**
 *	UI module: Header client side
 */
#Const Version		"2023-03-18"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/Header_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/Header_Common.Script.txt" as UIModules_Header_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
//L16N [TrackMania World Tour - Teams] The first team to reach this number of points wins the match. %1 will be replaced by a number of points. eg: "First to 10".
#Const C_Text_FirstTo _("First to %1")

#Const C_ImgPath "file://Media/Manialinks/Nadeo/TMNext/Modes/TMWT/UI"
#Const C_MaxPointsPerRound 3
#Const C_PointsAnimationEnabled False

#Const C_AnimDuration_HeaderVisibility 250
#Const C_AnimDuration_ClanName 250
#Const C_AnimDuration_MapPointsGainBefore 250
#Const C_AnimDuration_MapPointsGain 1000
#Const C_AnimDuration_MapPointsGainAfter 250
#Const C_AnimDuration_MapPointsTransition 500

#Const C_Size_VisibilityClip <160., 30.>

#Const C_TextSize_LabelMapPointsLimit 1.
#Const C_TextSize_LabelClanMapPoints 10.
#Const C_TextSize_LabelClanMapPointsGain 6.
#Const C_TextSize_LabelClanName 4.
#Const C_TextSize_LabelMatchInfo 1.
#Const C_TextSize_LabelTrackPoint 1.
#Const C_TextSize_LabelMatchPoint 1.

#Const C_ModelId_MatchPoint "framemodel-match-point"
#Const C_Id_FrameGlobal "frame-global"
#Const C_Id_FrameAnimVisibility "frame-anim-visibility"
#Const C_Id_FrameMatchInfo "frame-match-info"
#Const C_Id_LabelMatchInfo "label-match-info"
#Const C_Id_LabelClan1MapPointsOld "label-clan-1-map-points-old"
#Const C_Id_LabelClan1MapPointsNew "label-clan-1-map-points-new"
#Const C_Id_LabelClan1MapPointsGain "label-clan-1-map-points-gain"
#Const C_Id_LabelClan2MapPointsOld "label-clan-2-map-points-old"
#Const C_Id_LabelClan2MapPointsNew "label-clan-2-map-points-new"
#Const C_Id_LabelClan2MapPointsGain "label-clan-2-map-points-gain"
#Const C_Id_FrameClan1Name "frame-clan-1-name"
#Const C_Id_FrameClan2Name "frame-clan-2-name"
#Const C_Id_QuadClanNameBg "quad-clan-name-bg"
#Const C_Id_QuadClanNameGradient "quad-clan-name-gradient"
#Const C_Id_QuadClanNameBorder "quad-clan-name-border"
#Const C_Id_LabelClanName "label-clan-name"
#Const C_Id_FrameClan1Logo "frame-clan-1-logo"
#Const C_Id_QuadClan1Logo "quad-clan-1-logo"
#Const C_Id_FrameClan2Logo "frame-clan-2-logo"
#Const C_Id_QuadClan2Logo "quad-clan-2-logo"
#Const C_Id_FrameClan1MatchPoints "frame-clan-1-match-points"
#Const C_Id_FrameClan2MatchPoints "frame-clan-2-match-points"
#Const C_Id_QuadMapPointsLimit "quad-map-points-limit"
#Const C_Id_LabelMapPointsLimit "label-map-points-limit"
#Const C_Id_FrameClan1TrackWinPoint "frame-clan-1-track-win-point"
#Const C_Id_LabelClan1TrackWinPoint "label-clan-1-track-win-point"
#Const C_Id_FrameClan2TrackWinPoint "frame-clan-2-track-win-point"
#Const C_Id_LabelClan2TrackWinPoint "label-clan-2-track-win-point"
#Const C_Id_FrameClan1MatchWinPoint "frame-clan-1-match-win-point"
#Const C_Id_LabelClan1MatchWinPoint "label-clan-1-match-win-point"
#Const C_Id_FrameClan2MatchWinPoint "frame-clan-2-match-win-point"
#Const C_Id_LabelClan2MatchWinPoint "label-clan-2-match-win-point"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_Header_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_Header_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML(Integer _Theme) {
	return MV::Create(
GetId(), 3,
"""
{{{Stylesheet::Get(_Theme)}}}
<framemodel id="{{{C_ModelId_MatchPoint}}}">
	<quad size="14 4" />
</framemodel>
<frame id="{{{C_Id_FrameGlobal}}}" z-index="{{{Shared::C_ZIndex_Header}}}">
	<frame {{{UIModules::CustomizableUIModule(UIModules_Header_Common::C_UIModuleConfig)}}} size="{{{C_Size_VisibilityClip.X}}} {{{C_Size_VisibilityClip.Y}}}" halign="center">
		<frame id="{{{C_Id_FrameAnimVisibility}}}" pos="0 {{{C_Size_VisibilityClip.Y}}}" hidden="1">
			<!-- Match info message -->
			<frame id="{{{C_Id_FrameMatchInfo}}}">
				<quad class="{{{Stylesheet::C_Class_BackgroundColorize_Default}}}" z-index="0" size="66 4" halign="center" image="{{{C_ImgPath}}}/TMWT_Header.dds" />
				<label id="{{{C_Id_LabelMatchInfo}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" pos="0 -2" z-index="1" size="50 4" halign="center" valign="center2" textsize="{{{C_TextSize_LabelMatchInfo}}}" />
			</frame>
			<frame pos="0 -3">
				<!-- Clan 1 track point -->
				<frame id="{{{C_Id_FrameClan1TrackWinPoint}}}" pos="-64 0">
					<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="22 4" halign="center" valign="center" />
					<quad class="{{{Stylesheet::C_Class_Gradient_BlueTeam}}}" z-index="1" size="22 4" halign="center" valign="center" image="{{{C_ImgPath}}}/TMTW_TeamScore_Trackpoint.dds" />
					<label id="{{{C_Id_LabelClan1TrackWinPoint}}}" class="{{{Stylesheet::C_Class_Text_SemiBold}}}" z-index="2" size="21 4" halign="center" valign="center2" textsize="{{{C_TextSize_LabelTrackPoint}}}" text="{{{Shared::C_Text_TrackPoint}}}" />
				</frame>
				<!-- Clan 2 track point -->
				<frame id="{{{C_Id_FrameClan2TrackWinPoint}}}" pos="64 0">
					<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="22 4" halign="center" valign="center" />
					<quad class="{{{Stylesheet::C_Class_Gradient_RedTeam}}}" z-index="1" size="22 4" halign="center" valign="center" image="{{{C_ImgPath}}}/TMTW_TeamScore_Trackpoint.dds" />
					<label id="{{{C_Id_LabelClan2TrackWinPoint}}}" class="{{{Stylesheet::C_Class_Text_SemiBold}}}" z-index="2" size="21 4" halign="center" valign="center2" textsize="{{{C_TextSize_LabelTrackPoint}}}" text="{{{Shared::C_Text_TrackPoint}}}" />
				</frame>
			</frame>
			<frame pos="0 -13">
				<!-- Clan 1 map points -->
				<frame pos="-8 0">
					<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="14 14" halign="center" valign="center" />
					<quad class="{{{Stylesheet::C_Class_Gradient_BlueTeam}}}" z-index="1" size="14 14" halign="center" valign="center" image="{{{C_ImgPath}}}/TMWT_TeamLogoScoreName.dds" />
					<quad class="{{{Stylesheet::C_Class_Border_Default}}}" z-index="2" pos="0 7" size="14 {{{Stylesheet::C_BorderWidth}}}" halign="center" valign="bottom" />
					<frame z-index="3" size="14 14" halign="center" valign="center">
						<!-- Compensate vertical alignment for numbers to really center them on the background -->
						<frame pos="0 -0.75">
							<label id="{{{C_Id_LabelClan1MapPointsOld}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" z-index="1" size="12 12" halign="center" valign="center2" textsize="{{{C_TextSize_LabelClanMapPoints}}}" text="0" hidden="1" />
							<label id="{{{C_Id_LabelClan1MapPointsNew}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" z-index="2" size="12 12" halign="center" valign="center2" textsize="{{{C_TextSize_LabelClanMapPoints}}}" text="0" />
						</frame>
						<frame pos="0 -0.6">
							<label id="{{{C_Id_LabelClan1MapPointsGain}}}" class="{{{Stylesheet::C_Class_Text_SemiBold}}}" z-index="3" size="12 12" halign="center" valign="center2" textsize="{{{C_TextSize_LabelClanMapPointsGain}}}" hidden="1" />
						</frame>
					</frame>
				</frame>
				<!-- Clan 2 map points -->
				<frame pos="8 0">
					<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="14 14" halign="center" valign="center" />
					<quad class="{{{Stylesheet::C_Class_Gradient_RedTeam}}}" z-index="1" size="14 14" halign="center" valign="center" image="{{{C_ImgPath}}}/TMWT_TeamLogoScoreName.dds" />
					<quad class="{{{Stylesheet::C_Class_Border_Default}}}" z-index="2" pos="0 7" size="14 {{{Stylesheet::C_BorderWidth}}}" halign="center" valign="bottom" />
					<frame z-index="3" size="14 14" halign="center" valign="center">
						<!-- Compensate vertical alignment for numbers to really center them on the background -->
						<frame pos="0 -0.75">
							<label id="{{{C_Id_LabelClan2MapPointsOld}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" z-index="1" size="12 12" halign="center" valign="center2" textsize="{{{C_TextSize_LabelClanMapPoints}}}" text="0" hidden="1" />
							<label id="{{{C_Id_LabelClan2MapPointsNew}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" z-index="2" size="12 12" halign="center" valign="center2" textsize="{{{C_TextSize_LabelClanMapPoints}}}" text="0" />
						</frame>
						<frame pos="0 -0.6">
							<label id="{{{C_Id_LabelClan2MapPointsGain}}}" class="{{{Stylesheet::C_Class_Text_SemiBold}}}" z-index="3" size="12 12" halign="center" valign="center2" textsize="{{{C_TextSize_LabelClanMapPointsGain}}}" hidden="1" />
						</frame>
					</frame>
				</frame>
				<!-- Clan 1 name -->
				<frame id="{{{C_Id_FrameClan1Name}}}" pos="-38 0">
					<quad id="{{{C_Id_QuadClanNameBg}}}" class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="44 14" halign="center" valign="center" />
					<quad id="{{{C_Id_QuadClanNameGradient}}}" class="{{{Stylesheet::C_Class_Gradient_BlueTeam}}}" z-index="1" size="44 14" halign="center" valign="center" image="{{{C_ImgPath}}}/TMWT_TeamLogoScoreName.dds" />
					<quad id="{{{C_Id_QuadClanNameBorder}}}" class="{{{Stylesheet::C_Class_Border_Default}}}" z-index="2" pos="0 7" size="44 {{{Stylesheet::C_BorderWidth}}}" halign="center" valign="bottom" />
					<label id="{{{C_Id_LabelClanName}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" z-index="3" size="42 12" halign="center" valign="center2" textsize="{{{C_TextSize_LabelClanName}}}" maxline="2" />
				</frame>
				<!-- Clan 2 name -->
				<frame id="{{{C_Id_FrameClan2Name}}}" pos="38 0">
					<quad id="{{{C_Id_QuadClanNameBg}}}" class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="44 14" halign="center" valign="center" />
					<quad id="{{{C_Id_QuadClanNameGradient}}}" class="{{{Stylesheet::C_Class_Gradient_RedTeam}}}" z-index="1" size="44 14" halign="center" valign="center" image="{{{C_ImgPath}}}/TMWT_TeamLogoScoreName.dds" />
					<quad id="{{{C_Id_QuadClanNameBorder}}}" class="{{{Stylesheet::C_Class_Border_Default}}}" z-index="2" pos="0 7" size="44 {{{Stylesheet::C_BorderWidth}}}" halign="center" valign="bottom" />
					<label id="{{{C_Id_LabelClanName}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" z-index="3" size="42 12" halign="center" valign="center2" textsize="{{{C_TextSize_LabelClanName}}}" maxline="2" />
				</frame>
				<!-- Clan 1 logo -->
				<frame id="{{{C_Id_FrameClan1Logo}}}" pos="-68 0" hidden="1">
					<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="14 14" halign="center" valign="center" />
					<quad class="{{{Stylesheet::C_Class_Gradient_BlueTeam}}}" z-index="1" size="14 14" halign="center" valign="center" image="{{{C_ImgPath}}}/TMWT_TeamLogoScoreName.dds" />
					<quad class="{{{Stylesheet::C_Class_Border_Default}}}" z-index="2" pos="0 7" size="14 {{{Stylesheet::C_BorderWidth}}}" halign="center" valign="bottom" />
					<quad id="{{{C_Id_QuadClan1Logo}}}" z-index="3" size="12 12" halign="center" valign="center" keepratio="fit" />
				</frame>
				<!-- Clan 2 logo -->
				<frame id="{{{C_Id_FrameClan2Logo}}}" pos="68 0" hidden="1">
					<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="14 14" halign="center" valign="center" />
					<quad class="{{{Stylesheet::C_Class_Gradient_RedTeam}}}" z-index="1" size="14 14" halign="center" valign="center" image="{{{C_ImgPath}}}/TMWT_TeamLogoScoreName.dds" />
					<quad class="{{{Stylesheet::C_Class_Border_Default}}}" z-index="2" pos="0 7" size="14 {{{Stylesheet::C_BorderWidth}}}" halign="center" valign="bottom" />
					<quad id="{{{C_Id_QuadClan2Logo}}}" z-index="3" size="12 12" halign="center" valign="center" keepratio="fit" />
				</frame>
			</frame>
			<frame pos="0 -21">
				<!-- Clan 1 match points -->
				<frame id="{{{C_Id_FrameClan1MatchPoints}}}" pos="-16 0" z-index="1">
					<frameinstance modelid="{{{C_ModelId_MatchPoint}}}" />
					<frameinstance modelid="{{{C_ModelId_MatchPoint}}}" />
					<frameinstance modelid="{{{C_ModelId_MatchPoint}}}" />
					<frameinstance modelid="{{{C_ModelId_MatchPoint}}}" />
				</frame>
				<!-- Clan 2 match points -->
				<frame id="{{{C_Id_FrameClan2MatchPoints}}}" pos="16 0" z-index="1">
					<frameinstance modelid="{{{C_ModelId_MatchPoint}}}" />
					<frameinstance modelid="{{{C_ModelId_MatchPoint}}}" />
					<frameinstance modelid="{{{C_ModelId_MatchPoint}}}" />
					<frameinstance modelid="{{{C_ModelId_MatchPoint}}}" />
				</frame>
				<!-- Clan 1 match point -->
				<frame id="{{{C_Id_FrameClan1MatchWinPoint}}}" pos="-16 0" z-index="2" hidden="1">
					<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="59 4" halign="right" />
					<quad class="{{{Stylesheet::C_Class_Gradient_BlueTeam}}}" z-index="1" size="59 4" halign="right" image="{{{C_ImgPath}}}/TMTW_TeamScore_Matchpoint.dds" />
					<label id="{{{C_Id_LabelClan1MatchWinPoint}}}" class="{{{Stylesheet::C_Class_Text_SemiBold}}}" pos="-29.5 -2" z-index="2" size="42 6" halign="center" valign="center2" textsize="{{{C_TextSize_LabelMatchPoint}}}" text="{{{Shared::C_Text_MatchPoint}}}" />
				</frame>
				<!-- Clan 2 match point -->
				<frame id="{{{C_Id_FrameClan2MatchWinPoint}}}" pos="16 0" z-index="2" hidden="1">
					<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="59 4" />
					<quad class="{{{Stylesheet::C_Class_Gradient_RedTeam}}}" z-index="1" size="59 4" image="{{{C_ImgPath}}}/TMTW_TeamScore_Matchpoint.dds" />
					<label id="{{{C_Id_LabelClan2MatchWinPoint}}}" class="{{{Stylesheet::C_Class_Text_SemiBold}}}" pos="29.5 -2" z-index="2" size="42 4" halign="center" valign="center2" textsize="{{{C_TextSize_LabelMatchPoint}}}" text="{{{Shared::C_Text_MatchPoint}}}" />
				</frame>
				<!-- Number of points to reach to win a track -->
				<frame z-index="3">
					<quad id="{{{C_Id_QuadMapPointsLimit}}}" z-index="0" size="30 5.93" halign="center" colorize="{{{Stylesheet::GetHexColor(Stylesheet::C_Class_BackgroundColorize_Default, Stylesheet::C_Theme_TMGL)}}}" image="{{{C_ImgPath}}}/TMWT_FirstToTen.dds" />
					<label id="{{{C_Id_LabelMapPointsLimit}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" pos="0 -1" z-index="1" size="28 6" halign="center" textsize="{{{C_TextSize_LabelMapPointsLimit}}}" />
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Teams.Script.txt" as Teams

#Struct K_ControlsMatchPoint {
	CMlFrame Frame_MatchPoint;
	CMlQuad Quad_MatchPoint;
}
#Struct K_ControlsMapPoint {
	CMlLabel Label_Old;
	CMlLabel Label_New;
	CMlLabel Label_Gain;
}
#Struct K_ControlsClanName {
	CMlFrame Frame_Name;
	CMlQuad Quad_Bg;
	CMlQuad Quad_Gradient;
	CMlQuad Quad_Border;
	CMlLabel Label_Name;
}
#Struct K_Controls {
	CMlFrame Frame_AnimVisibility;
	CMlQuad Quad_MapPointsLimit;
	CMlLabel Label_MapPointsLimit;
	K_ControlsMatchPoint[][Integer] ClansMatchPoints;
	K_ControlsMapPoint[Integer] ClansMapPoints;
	K_ControlsClanName[Integer] ClansNames;
	CMlFrame[Integer] Frames_ClanLogo;
	CMlQuad[Integer] Quads_ClanLogo;
	CMlFrame Frame_MatchInfo;
	CMlLabel Label_MatchInfo;
	CMlFrame[Integer] Frames_ClanTrackWinPoint;
	CMlLabel[Integer] Labels_ClanTrackWinPoint;
	CMlFrame[Integer] Frames_ClanMatchWinPoint;
	CMlLabel[Integer] Labels_ClanMatchWinPoint;
	CMlFrame[Integer] Frames_ClanMatchPoints;
}
#Struct K_State {
	K_Controls Controls;
	Integer MatchPointsLimit;
	Integer MapPointsLimit;
	Int2 ClansMatchPoints;
	Int2 ClansMapPoints;
	Int2 PreviousClansMapPoints;
	Text MatchInfo;
	Integer ClansInfoUpdate;
	Integer TeamsUpdate;
	Boolean HeaderIsVisible;
}

#Const C_State_Null K_State {
	Controls = K_Controls {
		ClansMatchPoints = [1 => [], 2 => []]
	},
	MatchPointsLimit = 0,
	MapPointsLimit = 0,
	ClansMatchPoints = <0, 0>,
	ClansMapPoints = <0, 0>,
	PreviousClansMapPoints = <0, 0>,
	MatchInfo = "",
	ClansInfoUpdate = 0,
	TeamsUpdate = 0
}

#Const C_ImgPath {{{dump(C_ImgPath)}}}
#Const C_MaxPointsPerRound {{{dump(C_MaxPointsPerRound)}}}
#Const C_PointsAnimationEnabled {{{dump(C_PointsAnimationEnabled)}}}

#Const C_AnimDuration_HeaderVisibility {{{dump(C_AnimDuration_HeaderVisibility)}}}
#Const C_AnimDuration_ClanName {{{dump(C_AnimDuration_ClanName)}}}
#Const C_AnimDuration_MapPointsGainBefore {{{dump(C_AnimDuration_MapPointsGainBefore)}}}
#Const C_AnimDuration_MapPointsGain {{{dump(C_AnimDuration_MapPointsGain)}}}
#Const C_AnimDuration_MapPointsGainAfter {{{dump(C_AnimDuration_MapPointsGainAfter)}}}
#Const C_AnimDuration_MapPointsTransition {{{dump(C_AnimDuration_MapPointsTransition)}}}

#Const C_Size_VisibilityClip {{{dump(C_Size_VisibilityClip)}}}

#Const C_Text_FirstTo {{{dump(C_Text_FirstTo)}}}

#Const C_TextSize_LabelMapPointsLimit {{{dump(C_TextSize_LabelMapPointsLimit)}}}
#Const C_TextSize_LabelClanMapPoints {{{dump(C_TextSize_LabelClanMapPoints)}}}
#Const C_TextSize_LabelClanMapPointsGain {{{dump(C_TextSize_LabelClanMapPointsGain)}}}
#Const C_TextSize_LabelClanName {{{dump(C_TextSize_LabelClanName)}}}
#Const C_TextSize_LabelMatchInfo {{{dump(C_TextSize_LabelMatchInfo)}}}
#Const C_TextSize_LabelTrackPoint {{{dump(C_TextSize_LabelTrackPoint)}}}
#Const C_TextSize_LabelMatchPoint {{{dump(C_TextSize_LabelMatchPoint)}}}

#Const C_Id_FrameGlobal {{{dump(C_Id_FrameGlobal)}}}
#Const C_Id_FrameAnimVisibility {{{dump(C_Id_FrameAnimVisibility)}}}
#Const C_Id_FrameMatchInfo {{{dump(C_Id_FrameMatchInfo)}}}
#Const C_Id_LabelMatchInfo {{{dump(C_Id_LabelMatchInfo)}}}
#Const C_Id_LabelClan1MapPointsOld {{{dump(C_Id_LabelClan1MapPointsOld)}}}
#Const C_Id_LabelClan1MapPointsNew {{{dump(C_Id_LabelClan1MapPointsNew)}}}
#Const C_Id_LabelClan1MapPointsGain {{{dump(C_Id_LabelClan1MapPointsGain)}}}
#Const C_Id_LabelClan2MapPointsOld {{{dump(C_Id_LabelClan2MapPointsOld)}}}
#Const C_Id_LabelClan2MapPointsNew {{{dump(C_Id_LabelClan2MapPointsNew)}}}
#Const C_Id_LabelClan2MapPointsGain {{{dump(C_Id_LabelClan2MapPointsGain)}}}
#Const C_Id_FrameClan1Name {{{dump(C_Id_FrameClan1Name)}}}
#Const C_Id_FrameClan2Name {{{dump(C_Id_FrameClan2Name)}}}
#Const C_Id_QuadClanNameBg {{{dump(C_Id_QuadClanNameBg)}}}
#Const C_Id_QuadClanNameGradient {{{dump(C_Id_QuadClanNameGradient)}}}
#Const C_Id_QuadClanNameBorder {{{dump(C_Id_QuadClanNameBorder)}}}
#Const C_Id_LabelClanName {{{dump(C_Id_LabelClanName)}}}
#Const C_Id_FrameClan1Logo {{{dump(C_Id_FrameClan1Logo)}}}
#Const C_Id_QuadClan1Logo {{{dump(C_Id_QuadClan1Logo)}}}
#Const C_Id_FrameClan2Logo {{{dump(C_Id_FrameClan2Logo)}}}
#Const C_Id_QuadClan2Logo {{{dump(C_Id_QuadClan2Logo)}}}
#Const C_Id_FrameClan1MatchPoints {{{dump(C_Id_FrameClan1MatchPoints)}}}
#Const C_Id_FrameClan2MatchPoints {{{dump(C_Id_FrameClan2MatchPoints)}}}
#Const C_Id_QuadMapPointsLimit {{{dump(C_Id_QuadMapPointsLimit)}}}
#Const C_Id_LabelMapPointsLimit {{{dump(C_Id_LabelMapPointsLimit)}}}
#Const C_Id_FrameClan1TrackWinPoint {{{dump(C_Id_FrameClan1TrackWinPoint)}}}
#Const C_Id_LabelClan1TrackWinPoint {{{dump(C_Id_LabelClan1TrackWinPoint)}}}
#Const C_Id_FrameClan2TrackWinPoint {{{dump(C_Id_FrameClan2TrackWinPoint)}}}
#Const C_Id_LabelClan2TrackWinPoint {{{dump(C_Id_LabelClan2TrackWinPoint)}}}
#Const C_Id_FrameClan1MatchWinPoint {{{dump(C_Id_FrameClan1MatchWinPoint)}}}
#Const C_Id_LabelClan1MatchWinPoint {{{dump(C_Id_LabelClan1MatchWinPoint)}}}
#Const C_Id_FrameClan2MatchWinPoint {{{dump(C_Id_FrameClan2MatchWinPoint)}}}
#Const C_Id_LabelClan2MatchWinPoint {{{dump(C_Id_LabelClan2MatchWinPoint)}}}
""",
"""
Void UpdateMapPoints(K_State _State) {
	_State.Controls.Label_MapPointsLimit.Visible = (_State.MapPointsLimit > 0);
	if (_State.Controls.Label_MapPointsLimit.Visible) {
		// We do not want to display overtime if both teams have just passed the map points limit.
		// eg: the map points limit is 10, score was 9 - 9, first team get a victory, final score is 11 - 10, overtime should not be displayed in this case
		if (
			(
				_State.ClansMapPoints.X == _State.ClansMapPoints.Y &&
				_State.ClansMapPoints.X >= _State.MapPointsLimit
			) || (
				_State.ClansMapPoints.X >= _State.MapPointsLimit &&
				_State.ClansMapPoints.Y >= _State.MapPointsLimit &&
				_State.PreviousClansMapPoints.X >= _State.MapPointsLimit &&
				_State.PreviousClansMapPoints.Y >= _State.MapPointsLimit
			)
		) {
			_State.Controls.Label_MapPointsLimit.Value = Shared::C_Text_Overtime;
			_State.Controls.Quad_MapPointsLimit.Colorize = Stylesheet::GetVec3Color(Stylesheet::C_Class_BackgroundColorize_Accent, Stylesheet::C_Theme_TMGL);
		} else {
			_State.Controls.Label_MapPointsLimit.Value = TL::Compose(C_Text_FirstTo, ""^_State.MapPointsLimit);
			_State.Controls.Quad_MapPointsLimit.Colorize = Stylesheet::GetVec3Color(Stylesheet::C_Class_BackgroundColorize_Default, Stylesheet::C_Theme_TMGL);
		}
		Tools::FitLabelValue(_State.Controls.Label_MapPointsLimit, C_TextSize_LabelMapPointsLimit, 0.5, 0.25);
	} else {
		_State.Controls.Quad_MapPointsLimit.Colorize = Stylesheet::GetVec3Color(Stylesheet::C_Class_BackgroundColorize_Default, Stylesheet::C_Theme_TMGL);
	}

	declare Boolean Clan1TrackWinPoint = (_State.ClansMapPoints.X >= _State.MapPointsLimit - C_MaxPointsPerRound);
	declare Boolean Clan2TrackWinPoint = (_State.ClansMapPoints.Y >= _State.MapPointsLimit - C_MaxPointsPerRound);
	// Do not display the track point if there's only 1 track in the match. Only display the match point.
	_State.Controls.Frames_ClanTrackWinPoint[1].Visible = _State.MatchPointsLimit > 1 && Clan1TrackWinPoint;
	_State.Controls.Frames_ClanTrackWinPoint[2].Visible = _State.MatchPointsLimit > 1 && Clan2TrackWinPoint;
	_State.Controls.Frames_ClanMatchWinPoint[1].Visible = (Clan1TrackWinPoint && _State.ClansMatchPoints.X >= _State.MatchPointsLimit - 1);
	_State.Controls.Frames_ClanMatchWinPoint[2].Visible = (Clan2TrackWinPoint && _State.ClansMatchPoints.Y >= _State.MatchPointsLimit - 1);
	_State.Controls.Frames_ClanMatchPoints[1].Visible = _State.MatchPointsLimit > 1 && !_State.Controls.Frames_ClanMatchWinPoint[1].Visible;
	_State.Controls.Frames_ClanMatchPoints[2].Visible = _State.MatchPointsLimit > 1 && !_State.Controls.Frames_ClanMatchWinPoint[2].Visible;
}

K_State SetMatchPointsLimit(K_State _State, Integer _MatchPointsLimit) {
	declare K_State State = _State;

	State.MatchPointsLimit = _MatchPointsLimit;
	UpdateMapPoints(State);

	declare Text BO5 = "";
	declare Real SizeX = 14.;
	if (State.MatchPointsLimit == 3) {
		BO5 = "BO5_";
		SizeX = 19.;
	}
	foreach (Clan => ClanMatchPoints in State.Controls.ClansMatchPoints) {
		declare Integer Direction = 1;
		declare Text Side = "L";
		declare CMlControl::AlignHorizontal HorizontalAlign = CMlControl::AlignHorizontal::Left;
		declare Vec3 Color = ColorPalette::C_Color_Vec3_TMWT_BlueTeam;
		if (Clan == 2) {
			Direction = -1;
			Side = "R";
			HorizontalAlign = CMlControl::AlignHorizontal::Right;
			Color = ColorPalette::C_Color_Vec3_TMWT_RedTeam;
		}
		foreach (Key => ClanMatchPoint in ClanMatchPoints) {
			ClanMatchPoint.Quad_MatchPoint.Size.X = SizeX;
			ClanMatchPoint.Quad_MatchPoint.HorizontalAlign = HorizontalAlign;
			ClanMatchPoint.Frame_MatchPoint.RelativePosition_V3.X = (59 * Direction * -1) + ((ClanMatchPoint.Quad_MatchPoint.Size.X + 1.) * Key * Direction);
			if (State.MatchPointsLimit != 3 || Key < 3) {
				ClanMatchPoint.Quad_MatchPoint.ImageUrl = C_ImgPath^"/TMTW_TeamScore_"^BO5^Side^(Key + 1)^".dds";
			}
			ClanMatchPoint.Frame_MatchPoint.Visible = (Key < State.MatchPointsLimit);
		}
	}

	return State;
}

K_State SetMapPointsLimit(K_State _State, Integer _MapPointsLimit) {
	declare K_State State = _State;

	State.MapPointsLimit = _MapPointsLimit;
	UpdateMapPoints(State);

	return State;
}

K_State SetClansMatchPoints(K_State _State, Int2 _ClansMatchPoints) {
	declare K_State State = _State;

	State.ClansMatchPoints = _ClansMatchPoints;
	UpdateMapPoints(State);

	foreach (Clan => ClanMatchPoints in State.Controls.ClansMatchPoints) {
		if (Clan == 1 || Clan == 2) {
			foreach (Key => ClanMatchPoint in ClanMatchPoints) {
				if (Key < State.ClansMatchPoints[Clan - 1]) {
					// Light on
					if (Clan == 1) ClanMatchPoint.Quad_MatchPoint.Colorize = ColorPalette::C_Color_Vec3_TMWT_BluePoint;
					else if (Clan == 2) ClanMatchPoint.Quad_MatchPoint.Colorize = ColorPalette::C_Color_Vec3_TMWT_RedPoint;
				} else {
					// Light off
					if (Clan == 1) ClanMatchPoint.Quad_MatchPoint.Colorize = ColorPalette::C_Color_Vec3_TMWT_BlueMain;
					else if (Clan == 2) ClanMatchPoint.Quad_MatchPoint.Colorize = ColorPalette::C_Color_Vec3_TMWT_RedMain;
				}
			}
		}
	}

	return State;
}

K_State SetClansMapPoints(K_State _State, Int2 _ClansMapPoints) {
	declare K_State State = _State;

	State.PreviousClansMapPoints = State.ClansMapPoints;
	State.ClansMapPoints = _ClansMapPoints;
	for (Clan, 1, 2) {
		declare K_ControlsMapPoint ControlsMapPoint = State.Controls.ClansMapPoints[Clan];
		ControlsMapPoint.Label_Old.Value = ControlsMapPoint.Label_New.Value;
		ControlsMapPoint.Label_New.Value = ""^State.ClansMapPoints[Clan - 1];
		Tools::FitLabelValue(ControlsMapPoint.Label_Old, C_TextSize_LabelClanMapPoints, 4., 0.5);
		Tools::FitLabelValue(ControlsMapPoint.Label_New, C_TextSize_LabelClanMapPoints, 4., 0.5);
		
		if (C_PointsAnimationEnabled) {
			AnimMgr.Flush(ControlsMapPoint.Label_Old);
			AnimMgr.Flush(ControlsMapPoint.Label_New);
			AnimMgr.Flush(ControlsMapPoint.Label_Gain);
			declare Integer PointsDiff = State.ClansMapPoints[Clan - 1] - State.PreviousClansMapPoints[Clan - 1];
			if (PointsDiff == 0) {
				ControlsMapPoint.Label_Old.Visible = False;
				ControlsMapPoint.Label_New.RelativePosition_V3.Y = 0.;
				ControlsMapPoint.Label_Gain.Visible = False;
			} else {
				ControlsMapPoint.Label_Old.Visible = True;
				ControlsMapPoint.Label_Old.RelativePosition_V3.Y = 0.;
				if (PointsDiff > 0) {
					ControlsMapPoint.Label_Gain.Visible = True;
					ControlsMapPoint.Label_Gain.Value = "+"^PointsDiff;
					Tools::FitLabelValue(ControlsMapPoint.Label_Gain, C_TextSize_LabelClanMapPointsGain, 4., 0.5);
					ControlsMapPoint.Label_Gain.RelativePosition_V3.Y = 14.;
					ControlsMapPoint.Label_New.RelativePosition_V3.Y = 14.;
					AnimMgr.Add(ControlsMapPoint.Label_Old, "<a pos=\"0 -14\" hidden=\"1\" />", C_AnimDuration_MapPointsGainBefore, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(ControlsMapPoint.Label_Gain, "<a pos=\"0 0\" />", C_AnimDuration_MapPointsGainBefore, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(ControlsMapPoint.Label_Gain, "<a pos=\"0  -14\" hidden=\"1\" />", Now + C_AnimDuration_MapPointsGainBefore + C_AnimDuration_MapPointsGain, C_AnimDuration_MapPointsGainAfter, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(ControlsMapPoint.Label_New, "<a pos=\"0 0\" />", Now + C_AnimDuration_MapPointsGainBefore + C_AnimDuration_MapPointsGain, C_AnimDuration_MapPointsGainAfter, CAnimManager::EAnimManagerEasing::QuadOut);
				} else {
					ControlsMapPoint.Label_Gain.Visible = False;
					ControlsMapPoint.Label_New.RelativePosition_V3.Y = -14.;
					AnimMgr.Add(ControlsMapPoint.Label_Old, "<a pos=\"0 14\" hidden=\"1\" />", C_AnimDuration_MapPointsTransition, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(ControlsMapPoint.Label_New, "<a pos=\"0 0\" />", C_AnimDuration_MapPointsTransition, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			}
		} else {
			ControlsMapPoint.Label_Old.Visible = False;
		}
	}
	UpdateMapPoints(State);

	return State;
}

K_State SetMatchInfo(K_State _State, Text _MatchInfo) {
	declare K_State State = _State;

	State.MatchInfo = _MatchInfo;
	State.Controls.Frame_MatchInfo.Visible = (State.MatchInfo != "");
	if (State.Controls.Frame_MatchInfo.Visible) {
		State.Controls.Label_MatchInfo.Value = State.MatchInfo;
		Tools::FitLabelValue(State.Controls.Label_MatchInfo, C_TextSize_LabelMatchInfo, 0.1, 0.1);
	}

	return State;
}

K_State SetTeamsInfo(K_State _State, Integer _TeamsUpdate, Teams::K_Team[Integer] _TeamsInfo) {
	declare K_State State = _State;

	State.TeamsUpdate = _TeamsUpdate;

	for (Clan, 1, 2) {
		declare K_ControlsClanName ControlsClanName = State.Controls.ClansNames[Clan];
		ControlsClanName.Label_Name.Value = Teams::GetClanName(This, _TeamsInfo, Clan);
		Tools::FitLabelValue(ControlsClanName.Label_Name, C_TextSize_LabelClanName, 1., 0.25);

		State.Controls.Quads_ClanLogo[Clan].ImageUrl = Teams::GetClanLogoUrl(This, _TeamsInfo, Clan);
		State.Controls.Frames_ClanLogo[Clan].Visible = (State.Controls.Quads_ClanLogo[Clan].ImageUrl != "");

		AnimMgr.Flush(ControlsClanName.Frame_Name);
		AnimMgr.Flush(ControlsClanName.Quad_Bg);
		AnimMgr.Flush(ControlsClanName.Quad_Gradient);
		AnimMgr.Flush(ControlsClanName.Quad_Border);
		if (State.Controls.Frames_ClanLogo[Clan].Visible) {
			if (Clan == 1) {
				AnimMgr.Add(ControlsClanName.Frame_Name, "<a pos=\"-38 "^ControlsClanName.Frame_Name.RelativePosition_V3.Y^"\" />", C_AnimDuration_ClanName, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				AnimMgr.Add(ControlsClanName.Frame_Name, "<a pos=\"38 "^ControlsClanName.Frame_Name.RelativePosition_V3.Y^"\" />", C_AnimDuration_ClanName, CAnimManager::EAnimManagerEasing::QuadOut);
			}
			AnimMgr.Add(ControlsClanName.Quad_Bg, "<a size=\"44 "^ControlsClanName.Quad_Bg.Size.Y^"\" />", C_AnimDuration_ClanName, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(ControlsClanName.Quad_Gradient, "<a size=\"44 "^ControlsClanName.Quad_Gradient.Size.Y^"\" />", C_AnimDuration_ClanName, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(ControlsClanName.Quad_Border, "<a size=\"44 "^ControlsClanName.Quad_Border.Size.Y^"\" />", C_AnimDuration_ClanName, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			if (Clan == 1) {
				AnimMgr.Add(ControlsClanName.Frame_Name, "<a pos=\"-45.5 "^ControlsClanName.Frame_Name.RelativePosition_V3.Y^"\" />", C_AnimDuration_ClanName, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				AnimMgr.Add(ControlsClanName.Frame_Name, "<a pos=\"45.5 "^ControlsClanName.Frame_Name.RelativePosition_V3.Y^"\" />", C_AnimDuration_ClanName, CAnimManager::EAnimManagerEasing::QuadOut);
			}
			AnimMgr.Add(ControlsClanName.Quad_Bg, "<a size=\"59 "^ControlsClanName.Quad_Bg.Size.Y^"\" />", C_AnimDuration_ClanName, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(ControlsClanName.Quad_Gradient, "<a size=\"59 "^ControlsClanName.Quad_Gradient.Size.Y^"\" />", C_AnimDuration_ClanName, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(ControlsClanName.Quad_Border, "<a size=\"59 "^ControlsClanName.Quad_Border.Size.Y^"\" />", C_AnimDuration_ClanName, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	return State;
}

K_State SetVisibility(K_State _State, Boolean _HeaderIsVisible) {
	declare K_State State = _State;

	if (State.HeaderIsVisible != _HeaderIsVisible) {
		State.HeaderIsVisible = _HeaderIsVisible;
		AnimMgr.Flush(State.Controls.Frame_AnimVisibility);
		if (State.HeaderIsVisible) {
			AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\"0 0\" hidden=\"0\" />", C_AnimDuration_HeaderVisibility, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\"0 "^(C_Size_VisibilityClip.Y)^"\" hidden=\"1\" />", C_AnimDuration_HeaderVisibility, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Clan1Name;
declare CMlFrame Frame_Clan2Name;

declare netread Boolean Net_TMWTCommon_Header_IsVisible for UI;
declare netread Integer Net_TMWTCommon_Header_MatchPointsLimit for Teams[0] = 0;
declare netread Integer Net_TMWTCommon_Header_MapPointsLimit for Teams[0] = 0;
declare netread Int2 Net_TMWTCommon_Header_ClansMatchPoints for Teams[0] = <0, 0>;
declare netread Int2 Net_TMWTCommon_Header_ClansMapPoints for Teams[0] = <0, 0>;

declare K_State State;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);

State = C_State_Null;
State.Controls.Frame_AnimVisibility = (Frame_Global.GetFirstChild(C_Id_FrameAnimVisibility) as CMlFrame);
State.Controls.Quad_MapPointsLimit = (Frame_Global.GetFirstChild(C_Id_QuadMapPointsLimit) as CMlQuad);
State.Controls.Label_MapPointsLimit = (Frame_Global.GetFirstChild(C_Id_LabelMapPointsLimit) as CMlLabel);
State.Controls.ClansMapPoints[1] = K_ControlsMapPoint {
	Label_Old = (Frame_Global.GetFirstChild(C_Id_LabelClan1MapPointsOld) as CMlLabel),
	Label_New = (Frame_Global.GetFirstChild(C_Id_LabelClan1MapPointsNew) as CMlLabel),
	Label_Gain = (Frame_Global.GetFirstChild(C_Id_LabelClan1MapPointsGain) as CMlLabel)
};
State.Controls.ClansMapPoints[2] = K_ControlsMapPoint {
	Label_Old = (Frame_Global.GetFirstChild(C_Id_LabelClan2MapPointsOld) as CMlLabel),
	Label_New = (Frame_Global.GetFirstChild(C_Id_LabelClan2MapPointsNew) as CMlLabel),
	Label_Gain = (Frame_Global.GetFirstChild(C_Id_LabelClan2MapPointsGain) as CMlLabel)
};
Frame_Clan1Name = (Frame_Global.GetFirstChild(C_Id_FrameClan1Name) as CMlFrame);
Frame_Clan2Name = (Frame_Global.GetFirstChild(C_Id_FrameClan2Name) as CMlFrame);
State.Controls.ClansNames[1] = K_ControlsClanName {
	Frame_Name = Frame_Clan1Name,
	Quad_Bg = (Frame_Clan1Name.GetFirstChild(C_Id_QuadClanNameBg) as CMlQuad),
	Quad_Gradient = (Frame_Clan1Name.GetFirstChild(C_Id_QuadClanNameGradient) as CMlQuad),
	Quad_Border = (Frame_Clan1Name.GetFirstChild(C_Id_QuadClanNameBorder) as CMlQuad),
	Label_Name = (Frame_Clan1Name.GetFirstChild(C_Id_LabelClanName) as CMlLabel)
};
State.Controls.ClansNames[2] = K_ControlsClanName {
	Frame_Name = Frame_Clan2Name,
	Quad_Bg = (Frame_Clan2Name.GetFirstChild(C_Id_QuadClanNameBg) as CMlQuad),
	Quad_Gradient = (Frame_Clan2Name.GetFirstChild(C_Id_QuadClanNameGradient) as CMlQuad),
	Quad_Border = (Frame_Clan2Name.GetFirstChild(C_Id_QuadClanNameBorder) as CMlQuad),
	Label_Name = (Frame_Clan2Name.GetFirstChild(C_Id_LabelClanName) as CMlLabel)
};
State.Controls.Frames_ClanLogo[1] = (Frame_Global.GetFirstChild(C_Id_FrameClan1Logo) as CMlFrame);
State.Controls.Frames_ClanLogo[2] = (Frame_Global.GetFirstChild(C_Id_FrameClan2Logo) as CMlFrame);
State.Controls.Quads_ClanLogo[1] = (Frame_Global.GetFirstChild(C_Id_QuadClan1Logo) as CMlQuad);
State.Controls.Quads_ClanLogo[2] = (Frame_Global.GetFirstChild(C_Id_QuadClan2Logo) as CMlQuad);
State.Controls.Frame_MatchInfo = (Frame_Global.GetFirstChild(C_Id_FrameMatchInfo) as CMlFrame);
State.Controls.Label_MatchInfo = (Frame_Global.GetFirstChild(C_Id_LabelMatchInfo) as CMlLabel);
State.Controls.Frames_ClanTrackWinPoint[1] = (Frame_Global.GetFirstChild(C_Id_FrameClan1TrackWinPoint) as CMlFrame);
State.Controls.Frames_ClanTrackWinPoint[2] = (Frame_Global.GetFirstChild(C_Id_FrameClan2TrackWinPoint) as CMlFrame);
State.Controls.Labels_ClanTrackWinPoint[1] = (Frame_Global.GetFirstChild(C_Id_LabelClan1TrackWinPoint) as CMlLabel);
State.Controls.Labels_ClanTrackWinPoint[2] = (Frame_Global.GetFirstChild(C_Id_LabelClan2TrackWinPoint) as CMlLabel);
State.Controls.Frames_ClanMatchWinPoint[1] = (Frame_Global.GetFirstChild(C_Id_FrameClan1MatchWinPoint) as CMlFrame);
State.Controls.Frames_ClanMatchWinPoint[2] = (Frame_Global.GetFirstChild(C_Id_FrameClan2MatchWinPoint) as CMlFrame);
State.Controls.Labels_ClanMatchWinPoint[1] = (Frame_Global.GetFirstChild(C_Id_LabelClan1MatchWinPoint) as CMlLabel);
State.Controls.Labels_ClanMatchWinPoint[2] = (Frame_Global.GetFirstChild(C_Id_LabelClan2MatchWinPoint) as CMlLabel);
State.Controls.Frames_ClanMatchPoints[1] <=> (Frame_Global.GetFirstChild(C_Id_FrameClan1MatchPoints) as CMlFrame);
State.Controls.Frames_ClanMatchPoints[2] <=> (Frame_Global.GetFirstChild(C_Id_FrameClan2MatchPoints) as CMlFrame);
for (Clan, 1, 2) {
	State.Controls.ClansMatchPoints[Clan] = [];
	foreach (Control in State.Controls.Frames_ClanMatchPoints[Clan].Controls) {
		declare CMlFrame Frame_MatchPoint <=> (Control as CMlFrame);
		State.Controls.ClansMatchPoints[Clan].add(K_ControlsMatchPoint {
			Frame_MatchPoint = Frame_MatchPoint,
			Quad_MatchPoint = (Frame_MatchPoint.Controls[0] as CMlQuad)
		});
	}
}

Tools::FitLabelValue(State.Controls.Labels_ClanTrackWinPoint[1], C_TextSize_LabelTrackPoint, 0.5, 0.1);
Tools::FitLabelValue(State.Controls.Labels_ClanTrackWinPoint[2], C_TextSize_LabelTrackPoint, 0.5, 0.1);
Tools::FitLabelValue(State.Controls.Labels_ClanMatchWinPoint[1], C_TextSize_LabelMatchPoint, 0.5, 0.1);
Tools::FitLabelValue(State.Controls.Labels_ClanMatchWinPoint[2], C_TextSize_LabelMatchPoint, 0.5, 0.1);

State = SetVisibility(State, State.Controls.Frame_AnimVisibility.Visible);
State = SetMapPointsLimit(State, Net_TMWTCommon_Header_MapPointsLimit);
State = SetMatchPointsLimit(State, Net_TMWTCommon_Header_MatchPointsLimit);
State = SetClansMatchPoints(State, Net_TMWTCommon_Header_ClansMatchPoints);
State = SetClansMapPoints(State, Net_TMWTCommon_Header_ClansMapPoints);
State = SetMatchInfo(State, Shared::GetMatchInfo(This));
State = SetTeamsInfo(State, Teams::GetTeamsUpdate(This), Teams::GetTeamsInfo(This));
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.HeaderIsVisible != Net_TMWTCommon_Header_IsVisible) {
		State = SetVisibility(State, Net_TMWTCommon_Header_IsVisible);
	}

	if (Frame_Global.Visible) {
		if (State.MapPointsLimit != Net_TMWTCommon_Header_MapPointsLimit) {
			State = SetMapPointsLimit(State, Net_TMWTCommon_Header_MapPointsLimit);
		}
		if (State.MatchPointsLimit != Net_TMWTCommon_Header_MatchPointsLimit) {
			State = SetMatchPointsLimit(State, Net_TMWTCommon_Header_MatchPointsLimit);
		}
		if (State.ClansMatchPoints != Net_TMWTCommon_Header_ClansMatchPoints) {
			State = SetClansMatchPoints(State, Net_TMWTCommon_Header_ClansMatchPoints);
		}
		if (State.ClansMapPoints != Net_TMWTCommon_Header_ClansMapPoints) {
			State = SetClansMapPoints(State, Net_TMWTCommon_Header_ClansMapPoints);
		}
		if (State.MatchInfo != Shared::GetMatchInfo(This)) {
			State = SetMatchInfo(State, Shared::GetMatchInfo(This));
		}
		if (State.TeamsUpdate != Teams::GetTeamsUpdate(This)) {
			State = SetTeamsInfo(State, Teams::GetTeamsUpdate(This), Teams::GetTeamsInfo(This));
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}