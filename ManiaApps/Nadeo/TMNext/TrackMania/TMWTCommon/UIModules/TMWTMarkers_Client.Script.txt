/**
 *	UI module: TMWTMarkers client side
 */
#Const Version		"2023-01-13"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/TMWTMarkers_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/TMWTMarkers_Common.Script.txt" as UIModules_TMWTMarkers_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_MarkersMaxNb 32
#Const C_PlayerNameMaxWidth 50.
#Const C_ImgMarkerSide "file://Media/Manialinks/Nadeo/TMNext/Modes/TMWT/UI/TMWT_MarkerSide.dds"

#Const C_ModelId_FramemodelMarkerPlayer "framemodel-marker-player"
#Const C_Id_FrameMarkerContent "frame-marker-content"
#Const C_Id_QuadSideLeft "quad-side-left"
#Const C_Id_QuadBackground "quad-background"
#Const C_Id_QuadSideRight "quad-side-right"
#Const C_Id_QuadTeamLogo "quad-team-logo"
#Const C_Id_LabelName "label-name"
#Const C_Id_FrameGlobal "frame-global"
#Const C_Id_FrameMarkers "frame-markers"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_TMWTMarkers_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_TMWTMarkers_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML(Integer _Style) {
	declare Text MarkersML = "";
	for (I, 0, C_MarkersMaxNb - 1) {
		MarkersML ^= """<frame z-index="{{{I}}}"><frameinstance modelid="{{{C_ModelId_FramemodelMarkerPlayer}}}" id="marker-player-{{{I}}}" /></frame>""";
	}

	return MV::Create(
GetId(), 3,
"""
{{{Stylesheet::Get(_Style)}}}
<framemodel id="{{{C_ModelId_FramemodelMarkerPlayer}}}">
	<frame id="{{{C_Id_FrameMarkerContent}}}" hidden="1">
		<quad id="{{{C_Id_QuadSideLeft}}}" class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="1 4" halign="right" valign="bottom" opacity="0.6" image="{{{C_ImgMarkerSide}}}" />
		<quad id="{{{C_Id_QuadBackground}}}" class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="1" size="30 4" halign="center" valign="bottom" opacity="0.6" />
		<quad id="{{{C_Id_QuadSideRight}}}" class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" pos="0 4" rot="180" size="1 4" halign="right" valign="bottom" opacity="0.6" image="{{{C_ImgMarkerSide}}}" />
		<quad id="{{{C_Id_QuadTeamLogo}}}" pos="-14.5 2" z-index="2" size="3 3" valign="center" bgcolor="000000" keepratio="fit" />
		<label id="{{{C_Id_LabelName}}}" class="{{{Stylesheet::C_Class_Text_SemiBold}}}" pos="-9 2" z-index="3" size="23 3" valign="center2" textsize="1" textprefix="$t$i" />
	</frame>
</framemodel>
<frame id="{{{C_Id_FrameGlobal}}}" z-index="-2" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_TMWTMarkers_Common::C_UIModuleConfig)}}}>
		<frame id="{{{C_Id_FrameMarkers}}}">
			{{{MarkersML}}}
		</frame>
	</frame>
</frame>
""",
"""
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Teams.Script.txt" as Teams

#Struct K_UserData {
	Text DefaultName;
	Boolean IsFirstPartyDisplayName;
	Text CountryFlagUrl;
	Integer Clan;
}
#Struct K_Marker {
	Text AccountId;
}
#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_Markers;
	CMlFrame[] Frames_Marker;
}
#Struct K_State {
	K_Controls Controls;
	Boolean DisplayModule;
	K_Marker[Integer] LoadedMarkers;
	Integer TeamsUpdate;
	Teams::K_Team[Integer] TeamsInfo;
	Teams::K_Player[Text] PlayersInfo;
	Boolean ForceMarkersUpdate;
}

#Const C_State_Null K_State {
	Controls = K_Controls {},
	DisplayModule = False,
	LoadedMarkers = [],
	TeamsUpdate = -1,
	TeamsInfo = [],
	PlayersInfo = [],
	ForceMarkersUpdate = False
}

#Const C_PlayerNameMaxWidth {{{dump(C_PlayerNameMaxWidth)}}}

#Const C_Id_FrameMarkerContent {{{dump(C_Id_FrameMarkerContent)}}}
#Const C_Id_QuadSideLeft {{{dump(C_Id_QuadSideLeft)}}}
#Const C_Id_QuadBackground {{{dump(C_Id_QuadBackground)}}}
#Const C_Id_QuadSideRight {{{dump(C_Id_QuadSideRight)}}}
#Const C_Id_QuadTeamLogo {{{dump(C_Id_QuadTeamLogo)}}}
#Const C_Id_LabelName {{{dump(C_Id_LabelName)}}}
#Const C_Id_FrameGlobal {{{dump(C_Id_FrameGlobal)}}}
#Const C_Id_FrameMarkers {{{dump(C_Id_FrameMarkers)}}}
""",
"""
K_State SetVisibility(K_State _State, Boolean _DisplayModule) {
	declare K_State State = _State;

	State.DisplayModule = _DisplayModule;
	State.Controls.Frame_Global.Visible = State.DisplayModule;

	return State;
}

K_State UpdateMarkers(K_State _State, Text[Integer] _MarkerFrameIds) {
	declare K_State State = _State;

	// Allow only valid markers to be displayed
	declare Text[] ValidMarkers;
	foreach (Marker in UI.Markers) {
		if (
			Marker.Type != CUIConfigMarker::EAnchorType::Invalid &&
			Marker.ManialinkFrameId != "" &&
			!ValidMarkers.exists(Marker.ManialinkFrameId)
		) {
			ValidMarkers.add(Marker.ManialinkFrameId);
		}
	}

	// Link an account id to a present user
	declare K_UserData[Text] AccountIdToUserData;
	foreach (Score in Scores) {
		if (Score.User != Null) {
			AccountIdToUserData[Score.User.WebServicesUserId] = K_UserData {
				DefaultName = Score.User.Name,
				IsFirstPartyDisplayName = Score.User.IsFirstPartyDisplayName,
				CountryFlagUrl = Score.User.CountryFlagUrl,
				Clan = Score.TeamNum
			};
		}
	}

	foreach (Key => Frame_Marker in State.Controls.Frames_Marker) {
		if (
			_MarkerFrameIds.existskey(Key) &&
			ValidMarkers.exists(Frame_Marker.Parent.ControlId)
		) {
			declare Text AccountId = _MarkerFrameIds[Key];
			if (
				State.ForceMarkersUpdate ||
				!State.LoadedMarkers.existskey(Key) ||
				State.LoadedMarkers[Key].AccountId != AccountId
			) {
				declare K_UserData UserData = AccountIdToUserData.get(AccountId, K_UserData {});

				declare CMlQuad Quad_Background <=> (Frame_Marker.GetFirstChild(C_Id_QuadBackground) as CMlQuad);
				declare CMlQuad Quad_SideLeft <=> (Frame_Marker.GetFirstChild(C_Id_QuadSideLeft) as CMlQuad);
				declare CMlQuad Quad_SideRight <=> (Frame_Marker.GetFirstChild(C_Id_QuadSideRight) as CMlQuad);
				declare CMlQuad Quad_TeamLogo <=> (Frame_Marker.GetFirstChild(C_Id_QuadTeamLogo) as CMlQuad);
				declare CMlLabel Label_Name <=> (Frame_Marker.GetFirstChild(C_Id_LabelName) as CMlLabel);

				declare Text ClanLogo = Teams::GetClanLogoUrl(This, State.TeamsInfo, UserData.Clan);
				if (ClanLogo != "" && Http.IsValidUrl(ClanLogo)) {
					Quad_TeamLogo.ImageUrl = ClanLogo;
				} else {
					Quad_TeamLogo.ImageUrl = UserData.CountryFlagUrl;
				}
				Quad_TeamLogo.Visible = (Quad_TeamLogo.ImageUrl != "");
				Label_Name.Value = Teams::GetPlayerName(State.PlayersInfo, AccountId, UserData.DefaultName, UserData.IsFirstPartyDisplayName);
				Tools::FirstPartyLogoMatchLuminance(Label_Name);

				Label_Name.Size.X = ML::Min(Label_Name.ComputeWidth(Label_Name.Value), C_PlayerNameMaxWidth);
				if (Quad_TeamLogo.Visible) {
					Quad_Background.Size.X = 0.5 + Quad_TeamLogo.Size.X + 0.5 + Label_Name.Size.X + 0.5;
					Quad_TeamLogo.RelativePosition_V3.X = (Quad_Background.Size.X * -0.5) + 0.5;
					Label_Name.RelativePosition_V3.X = Quad_TeamLogo.RelativePosition_V3.X + Quad_TeamLogo.Size.X + 0.5;
				} else {
					Quad_Background.Size.X = 0.5 + Label_Name.Size.X + 0.5;
					Label_Name.RelativePosition_V3.X = (Quad_Background.Size.X * -0.5) + 0.5;
				}
				Quad_SideLeft.RelativePosition_V3.X = Quad_Background.Size.X * -0.5;
				Quad_SideRight.RelativePosition_V3.X = Quad_Background.Size.X * 0.5;

				declare Vec3 Color = ColorPalette::C_Color_Vec3_TMWT_PinkMain;
				if (Teams.existskey(UserData.Clan - 1)) {
					Color = Teams[UserData.Clan - 1].ColorUI;
				} else if (UserData.Clan == 1) {
					Color = ColorPalette::C_Color_Vec3_TMWT_BlueTeam;
				} else if (UserData.Clan == 2) {
					Color = ColorPalette::C_Color_Vec3_TMWT_RedTeam;
				}
				Quad_Background.BgColor = Color;
				Quad_SideLeft.Colorize = Color;
				Quad_SideRight.Colorize = Color;

				State.LoadedMarkers[Key] = K_Marker {
					AccountId = AccountId
				};
			}
			Frame_Marker.Visible = True;
		} else {
			Frame_Marker.Visible = False;
		}
	}

	State.ForceMarkersUpdate = False;

	return State;
}

K_State SetTeamsInfo(K_State _State, Integer _TeamsUpdate, Teams::K_Team[Integer] _TeamsInfo, Teams::K_Player[Text] _PlayersInfo) {
	declare K_State State = _State;

	State.TeamsUpdate = _TeamsUpdate;
	State.TeamsInfo = _TeamsInfo;
	State.PlayersInfo = _PlayersInfo;
	State.ForceMarkersUpdate = True;

	return State;
}

***MainInit***
***
declare netread Boolean Net_TMWTCommon_TMWTMarkers_IsVisible for UI;
declare netread Text[Integer] Net_TMWTCommon_TMWTMarkers_MarkerFrameIds for Teams[0] = [];
declare netread Integer Net_TMWTCommon_TMWTMarkers_MarkerFrameIdsUpdate for Teams[0] = 0;

declare K_State State = C_State_Null;
declare Integer MarkerFrameIdsUpdate;
declare Ident GUIPlayerId;
declare Boolean NeedMarkersUpdate;
declare Integer ScoresCount;
***

***MainStart***
***
State.Controls.Frame_Global <=> (Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);
State.Controls.Frame_Markers <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_FrameMarkers) as CMlFrame);
State.Controls.Frames_Marker = [];
foreach (Control in State.Controls.Frame_Markers.Controls) {
	State.Controls.Frames_Marker.add(
		((Control as CMlFrame).GetFirstChild(C_Id_FrameMarkerContent) as CMlFrame)
	);
}

MarkerFrameIdsUpdate = -1;
GUIPlayerId = NullId;
NeedMarkersUpdate = True;
ScoresCount = Scores.count;

State = SetVisibility(State, State.Controls.Frame_Global.Visible);
State = SetTeamsInfo(State, Teams::GetTeamsUpdate(This), Teams::GetTeamsInfo(This), Teams::GetPlayersInfo(This));
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.DisplayModule != Net_TMWTCommon_TMWTMarkers_IsVisible) {
		State = SetVisibility(State, Net_TMWTCommon_TMWTMarkers_IsVisible);
	}

	if (State.DisplayModule) {
		if (MarkerFrameIdsUpdate != Net_TMWTCommon_TMWTMarkers_MarkerFrameIdsUpdate) {
			MarkerFrameIdsUpdate = Net_TMWTCommon_TMWTMarkers_MarkerFrameIdsUpdate;
			NeedMarkersUpdate = True;
		}
		if (State.TeamsUpdate != Teams::GetTeamsUpdate(This)) {
			State = SetTeamsInfo(State, Teams::GetTeamsUpdate(This), Teams::GetTeamsInfo(This), Teams::GetPlayersInfo(This));
			NeedMarkersUpdate = True;
		}

		if (GUIPlayer == Null && GUIPlayerId != NullId) {
			GUIPlayerId = NullId;
			NeedMarkersUpdate = True;
		} else if (GUIPlayer != Null && GUIPlayerId != GUIPlayer.Id) {
			GUIPlayerId = GUIPlayer.Id;
			NeedMarkersUpdate = True;
		}

		if (ScoresCount != Scores.count) {
			ScoresCount = Scores.count;
			State.ForceMarkersUpdate = True;
		}

		if (NeedMarkersUpdate || State.ForceMarkersUpdate) {
			NeedMarkersUpdate = False;
			State = UpdateMarkers(State, Net_TMWTCommon_TMWTMarkers_MarkerFrameIds);
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}