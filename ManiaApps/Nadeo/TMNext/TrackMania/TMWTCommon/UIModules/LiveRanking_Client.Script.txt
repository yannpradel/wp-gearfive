/**
 *	UI module: LiveRanking client side
 */
#Const Version		"2023-03-18"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/LiveRanking_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/LiveRanking_Common.Script.txt" as UIModules_LiveRanking_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ImgPath "file://Media/Manialinks/Nadeo/TMNext/Modes/TMWT/UI"
#Const C_PlayersNb 4
#Const C_Width_LiveRanking 66.
#Const C_Height_Title 8.
#Const C_Height_Player 5.5
#Const C_Size_VisibilityClip <74., 110.>
#Const C_VisibilityAnimDuration 250

#Const C_UpdateMaxFrequency 250
#Const C_CheckpointUpdateFrequency 250
#Const C_RankProgressDisplayDuration 10000
#Const C_RankProgressAnimDuration 200
#Const C_SpectatorFocusAnimDuration 200

#Const C_TextSize_LabelLiveRanking 3.
#Const C_TextSize_LabelPlayerCard 1.5
#Const C_TextSize_LabelRankProgress_UpDown 5.
#Const C_TextSize_LabelRankProgress_Flag 2.

#Const C_Opacity_QuadBgPlayer_IsTarget 0.8
#Const C_Opacity_QuadBgPlayer_IsNotTarget 0.6
#Const C_Opacity_QuadBgTime_IsTarget 0.84
#Const C_Opacity_QuadBgTime_IsNotTarget 0.4
#Const C_Opacity_ButtonSpectate_IsFocused 0.05
#Const C_Opacity_ButtonSpectate_IsNotFocused 0.

//L16N [TrackMania World Tour - Teams] Title of the UI displaying the ranking of the ongoing race
#Const C_Text_LiveRanking _("Live Ranking")
//L16N [TrackMania World Tour - Teams] Text displayed beside players that retired from the race
#Const C_Text_DNF _("|DidNotFinish|DNF")

#Const C_ModelId_FramemodelPlayer "framemodel-player"
#Const C_Id_FrameGlobal "frame-global"
#Const C_Id_FrameAnimVisibility "frame-anim-visibility"
#Const C_Id_QuadBgLiveRanking "quad-bg-live-ranking"
#Const C_Id_QuadBorderLiveRanking "quad-border-live-ranking"
#Const C_Id_LabelLiveRanking "label-live-ranking"
#Const C_Id_QuadBgPlayer "quad-bg-player"
#Const C_Id_QuadBgTime "quad-bg-time"
#Const C_Id_LabelRank "label-rank"
#Const C_Id_QuadLogo "quad-logo"
#Const C_Id_LabelName "label-name"
#Const C_Id_QuadMVP "quad-mvp"
#Const C_Id_LabelTime "label-time"
#Const C_Id_LabelRankProgress "label-rank-progress"
#Const C_Id_FramePlayers "frame-players"
#Const C_Id_ButtonSpectate "button-spectate"
#Const C_Id_FrameFinish "frame-finish"
#Const C_Id_QuadGradientFinish "quad-gradient-finish"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_LiveRanking_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_LiveRanking_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML(Integer _Theme) {
	declare Vec2 Size_Player = <C_Width_LiveRanking * 0.74, C_Height_Player>;
	declare Vec2 Size_Rank = <Size_Player.X * 0.1, C_Height_Player>;
	declare Vec2 Size_Logo = <Size_Player.X * 0.1, C_Height_Player>;
	declare Vec2 Size_MVP = <C_Height_Player, C_Height_Player>;
	declare Vec2 Size_Name = <(Size_Player.X * 0.8) - Size_MVP.X, C_Height_Player>;
	declare Vec2 Size_Time = <C_Width_LiveRanking * 0.26, C_Height_Player>;
	declare Vec2 Size_RankProgress = <6., C_Height_Player>;
	declare Vec2 Size_Finish = Size_RankProgress;

	declare Vec2 Pos_Rank = <Size_Rank.X * 0.5, 0.>;
	declare Vec2 Pos_Logo = <Size_Rank.X + (Size_Logo.X * 0.5), 0.>;
	declare Vec2 Pos_Name = <Size_Rank.X + Size_Logo.X + 0.5, 0.>;
	declare Vec2 Pos_MVP = <Size_Rank.X + Size_Logo.X + Size_Name.X + (Size_MVP.X * 0.5), 0.>;
	declare Vec2 Pos_Time = <C_Width_LiveRanking - 0.5, 0.>;
	declare Vec2 Pos_RankProgress = <C_Width_LiveRanking + Size_RankProgress.X * 0.5, 0.>;
	declare Vec2 Pos_Flag = <Size_Finish.X * 0.5, Size_Finish.Y * -0.5>;

	declare Text ML_Players = "";
	for (I, 1, C_PlayersNb) {
		ML_Players ^= """<frameinstance modelid="{{{C_ModelId_FramemodelPlayer}}}" />""";
	}

	declare Boolean TitleIsVisible = (_Theme == Stylesheet::C_Theme_TMGL);
	declare Boolean HighlightPlayer = (_Theme == Stylesheet::C_Theme_Classic);
	declare Boolean ColorizeTimesDuringWarmUp = (_Theme == Stylesheet::C_Theme_Classic);

	return MV::Create(
GetId(), 3,
"""
{{{Stylesheet::Get(_Theme)}}}
<framemodel id="{{{C_ModelId_FramemodelPlayer}}}">
	<frame z-index="0">
		<quad id="{{{C_Id_ButtonSpectate}}}" z-index="0" {{{MLHelpers::Size(<C_Width_LiveRanking, C_Height_Player>)}}} bgcolor="{{{ColorPalette::C_Color_White}}}" opacity="{{{C_Opacity_ButtonSpectate_IsNotFocused}}}"  scriptevents="1" />
		<quad id="{{{C_Id_QuadBgPlayer}}}" z-index="1" {{{MLHelpers::Size(Size_Player)}}} opacity="{{{C_Opacity_QuadBgPlayer_IsNotTarget}}}" image="{{{C_ImgPath}}}/TMWT_PlayerLiveRanking.dds" />
		<quad id="{{{C_Id_QuadBgTime}}}" class="{{{Stylesheet::C_Class_BackgroundBgColor_Accent}}}" pos="{{{Size_Player.X}}} 0" z-index="2" {{{MLHelpers::Size(Size_Time)}}} opacity="{{{C_Opacity_QuadBgTime_IsNotTarget}}}" />
	</frame>
	<frame pos="0 {{{C_Height_Player * -0.5}}}" z-index="1">
		<label id="{{{C_Id_LabelRank}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" {{{MLHelpers::Pos(Pos_Rank)}}} {{{MLHelpers::Size(Size_Rank - <1., 0.>)}}} halign="center" valign="center2" textsize="{{{C_TextSize_LabelPlayerCard}}}" />
		<quad id="{{{C_Id_QuadLogo}}}" {{{MLHelpers::Pos(Pos_Logo)}}} {{{MLHelpers::Size(Size_Logo - <1., 1.>)}}} halign="center" valign="center" keepratio="fit" />
		<label id="{{{C_Id_LabelName}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" {{{MLHelpers::Pos(Pos_Name)}}} {{{MLHelpers::Size(Size_Name - <1., 0.>)}}} valign="center2" textsize="{{{C_TextSize_LabelPlayerCard}}}" />
		<quad id="{{{C_Id_QuadMVP}}}" {{{MLHelpers::Pos(Pos_MVP)}}} {{{MLHelpers::Size(Size_MVP)}}} scale="0.8" halign="center" valign="center" image="{{{Const::C_ImageUrl_Matchmaking_MVP_Icon}}}" colorize="{{{ColorPalette::C_Color_White}}}" />
		<label id="{{{C_Id_LabelTime}}}" class="{{{Stylesheet::C_Class_Text_SemiBold}}}" {{{MLHelpers::Pos(Pos_Time)}}} {{{MLHelpers::Size(Size_Time - <1., 0.>)}}} halign="right" valign="center2" textsize="{{{C_TextSize_LabelPlayerCard}}}" />
		<label id="{{{C_Id_LabelRankProgress}}}" {{{MLHelpers::Pos(Pos_RankProgress)}}} {{{MLHelpers::Size(Size_RankProgress - <1., 1.>)}}} halign="center" valign="center2" textsize="{{{C_TextSize_LabelRankProgress_UpDown}}}" textcolor="{{{ColorPalette::C_Color_TMWT_RankUp}}}" opacity="0" />
	</frame>
	<frame pos="{{{C_Width_LiveRanking}}} 0" z-index="2" {{{MLHelpers::Size(Size_Finish)}}}>
		<frame id="{{{C_Id_FrameFinish}}}" pos="{{{-Size_Finish.X}}} 0">
			<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="1" {{{MLHelpers::Size(Size_Finish)}}} />
			<quad class="{{{Stylesheet::C_Class_Gradient_BlueTeam}}}" id="{{{C_Id_QuadGradientFinish}}}" z-index="2" {{{MLHelpers::Size(Size_Finish)}}} opacity="0.6" image="{{{C_ImgPath}}}/TMWT_PlayerLiveRanking.dds" />
			<quad {{{MLHelpers::Pos(Pos_Flag)}}} z-index="3" {{{MLHelpers::Size(Size_Finish - <1., 1.>)}}} halign="center" valign="center" image="{{{Const::C_ImageUrl_Icon_Flag}}}" keepratio="fit" colorize="{{{ColorPalette::C_Color_White}}}" />
		</frame>
	</frame>
</framemodel>
<frame id="{{{C_Id_FrameGlobal}}}" z-index="{{{Shared::C_ZIndex_LiveRanking}}}">
	<frame {{{UIModules::CustomizableUIModule(UIModules_LiveRanking_Common::C_UIModuleConfig)}}} {{{MLHelpers::Size(C_Size_VisibilityClip)}}}>
		<frame id="{{{C_Id_FrameAnimVisibility}}}" pos="{{{-C_Size_VisibilityClip.X}}} 0" hidden="1">
			<quad id="{{{C_Id_QuadBorderLiveRanking}}}" class="{{{Stylesheet::C_Class_Border_Accent}}}" z-index="0" size="{{{Stylesheet::C_BorderWidth}}} 10" />
			<frame pos="{{{Stylesheet::C_BorderWidth}}} 0" z-index="1">
				<quad id="{{{C_Id_QuadBgLiveRanking}}}" class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="{{{C_Width_LiveRanking}}} 10" />
				<frame z-index="1">
					<label id="{{{C_Id_LabelLiveRanking}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" pos="{{{C_Width_LiveRanking * 0.5}}} -1" size="{{{C_Width_LiveRanking - 1}}} 6" halign="center" textsize="{{{C_TextSize_LabelLiveRanking}}}" text="{{{C_Text_LiveRanking}}}" hidden="{{{!TitleIsVisible}}}" />
				</frame>
				<frame id="{{{C_Id_FramePlayers}}}" pos="0 {{{-C_Height_Title}}}" z-index="2">
					{{{ML_Players}}}
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CommonLibs/Common/Utils.Script.txt" as CommonUtils
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMxSM/Race/ScoresSort.Script.txt" as ScoresSort
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Teams.Script.txt" as Teams
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/WarmupHelpers_Client.Script.txt" as WarmupHelpers

#Struct K_Controls {
	CMlFrame Frame_AnimVisibility;
	CMlFrame Frame_Players;
	CMlFrame[] Frames_Player;
	CMlQuad Quad_BgLiveRanking;
	CMlQuad Quad_BorderLiveRanking;
}
#Struct K_State {
	K_Controls Controls;
	Boolean LiveRankingIsVisible;
	Ident GUIPlayerId;
	Ident InputPlayerId;
	Text SpectatorTargetLogin;
	Text HighlightTargetLogin;
}
#Struct K_PlayerInfo {
	Text Login;
	Text WebServicesUserId;
	Text Name;
	Boolean IsFirstPartyDisplayName;
	Integer Interval;
	Boolean Eliminated;
	Integer PrevRank;
	Integer CurRank;
	Integer Clan;
	Boolean RaceFinished;
}

#Const C_PlayerInfo_Null K_PlayerInfo {
	Login = "",
	WebServicesUserId = "",
	Name = "",
	IsFirstPartyDisplayName = False,
	Interval = 0,
	Eliminated = True,
	PrevRank = 0,
	CurRank = 0,
	Clan = 0,
	RaceFinished = False
}

#Const C_Theme {{{dump(_Theme)}}}
#Const C_TitleIsVisible {{{dump(TitleIsVisible)}}}
#Const C_HighlightPlayer {{{dump(HighlightPlayer)}}}
#Const C_ColorizeTimesDuringWarmUp {{{dump(ColorizeTimesDuringWarmUp)}}}

#Const C_PreviousRank -1
#Const C_NextRank 1

#Const C_Text_DNF {{{dump(C_Text_DNF)}}}

#Const C_Height_Title {{{dump(C_Height_Title)}}}
#Const C_Height_Player {{{dump(C_Height_Player)}}}
#Const C_Size_VisibilityClip {{{dump(C_Size_VisibilityClip)}}}
#Const C_Size_Finish {{{dump(Size_Finish)}}}
#Const C_Size_Name {{{dump(Size_Name)}}}
#Const C_Size_MVP {{{dump(Size_MVP)}}}
#Const C_VisibilityAnimDuration {{{dump(C_VisibilityAnimDuration)}}}

#Const C_TextSize_LabelLiveRanking {{{dump(C_TextSize_LabelLiveRanking)}}}
#Const C_TextSize_LabelPlayerCard {{{dump(C_TextSize_LabelPlayerCard)}}}
#Const C_TextSize_LabelRankProgress_UpDown {{{dump(C_TextSize_LabelRankProgress_UpDown)}}}
#Const C_TextSize_LabelRankProgress_Flag {{{dump(C_TextSize_LabelRankProgress_Flag)}}}

#Const C_Opacity_QuadBgPlayer_IsTarget {{{dump(C_Opacity_QuadBgPlayer_IsTarget)}}}
#Const C_Opacity_QuadBgPlayer_IsNotTarget {{{dump(C_Opacity_QuadBgPlayer_IsNotTarget)}}}
#Const C_Opacity_QuadBgTime_IsTarget {{{dump(C_Opacity_QuadBgTime_IsTarget)}}}
#Const C_Opacity_QuadBgTime_IsNotTarget {{{dump(C_Opacity_QuadBgTime_IsNotTarget)}}}
#Const C_Opacity_ButtonSpectate_IsFocused {{{dump(C_Opacity_ButtonSpectate_IsFocused)}}}
#Const C_Opacity_ButtonSpectate_IsNotFocused {{{dump(C_Opacity_ButtonSpectate_IsNotFocused)}}}

#Const C_UpdateMaxFrequency {{{dump(C_UpdateMaxFrequency)}}}
#Const C_CheckpointUpdateFrequency {{{dump(C_CheckpointUpdateFrequency)}}}
#Const C_RankProgressDisplayDuration {{{dump(C_RankProgressDisplayDuration)}}}
#Const C_RankProgressAnimDuration {{{dump(C_RankProgressAnimDuration)}}}
#Const C_SpectatorFocusAnimDuration {{{dump(C_SpectatorFocusAnimDuration)}}}

#Const C_Id_FrameGlobal {{{dump(C_Id_FrameGlobal)}}}
#Const C_Id_FrameAnimVisibility {{{dump(C_Id_FrameAnimVisibility)}}}
#Const C_Id_QuadBgLiveRanking {{{dump(C_Id_QuadBgLiveRanking)}}}
#Const C_Id_QuadBorderLiveRanking {{{dump(C_Id_QuadBorderLiveRanking)}}}
#Const C_Id_LabelLiveRanking {{{dump(C_Id_LabelLiveRanking)}}}
#Const C_Id_QuadBgPlayer {{{dump(C_Id_QuadBgPlayer)}}}
#Const C_Id_QuadBgTime {{{dump(C_Id_QuadBgTime)}}}
#Const C_Id_FrameFinish {{{dump(C_Id_FrameFinish)}}}
#Const C_Id_QuadGradientFinish {{{dump(C_Id_QuadGradientFinish)}}}
#Const C_Id_LabelRank {{{dump(C_Id_LabelRank)}}}
#Const C_Id_QuadLogo {{{dump(C_Id_QuadLogo)}}}
#Const C_Id_LabelName {{{dump(C_Id_LabelName)}}}
#Const C_Id_QuadMVP {{{dump(C_Id_QuadMVP)}}}
#Const C_Id_LabelTime {{{dump(C_Id_LabelTime)}}}
#Const C_Id_LabelRankProgress {{{dump(C_Id_LabelRankProgress)}}}
#Const C_Id_FramePlayers {{{dump(C_Id_FramePlayers)}}}
#Const C_Id_ButtonSpectate {{{dump(C_Id_ButtonSpectate)}}}
""",
"""
Real GetRankPosY(Integer _Rank, Integer _MaxRank) {
	return -(ML::Clamp(_Rank, 1, _MaxRank) - 1) * C_Height_Player;
}

Void ResetDelayedAnim(K_State _State) {
	foreach (Frame_Player in _State.Controls.Frames_Player) {
		declare CMlLabel Label_RankProgress <=> (Frame_Player.GetFirstChild(C_Id_LabelRankProgress) as CMlLabel);
		declare CMlFrame Frame_Finish <=> (Frame_Player.GetFirstChild(C_Id_FrameFinish) as CMlFrame);
		AnimMgr.Flush(Label_RankProgress);
		AnimMgr.Flush(Frame_Finish);
		Label_RankProgress.Opacity = 0.;
		Frame_Finish.RelativePosition_V3.X = -C_Size_Finish.X;
		Frame_Finish.Visible = False;
	}
}

Void UpdatePlayerBg(K_State _State, CMlFrame _Frame_Player, K_PlayerInfo _PlayerInfo, Boolean _IsWarmUp) {
	declare CMlQuad Quad_BgPlayer <=> (_Frame_Player.GetFirstChild(C_Id_QuadBgPlayer) as CMlQuad);
	declare CMlQuad Quad_BgTime <=> (_Frame_Player.GetFirstChild(C_Id_QuadBgTime) as CMlQuad);

	AnimMgr.Flush(Quad_BgPlayer);
	AnimMgr.Flush(Quad_BgTime);

	if (_PlayerInfo.Clan == 1) {
		Quad_BgPlayer.Visible = True;
		Quad_BgPlayer.Colorize = Stylesheet::GetVec3Color(Stylesheet::C_Class_Gradient_BlueTeam, C_Theme);
	} else if (_PlayerInfo.Clan == 2) {
		Quad_BgPlayer.Visible = True;
		Quad_BgPlayer.Colorize = Stylesheet::GetVec3Color(Stylesheet::C_Class_Gradient_RedTeam, C_Theme);
	} else {
		Quad_BgPlayer.Visible = False;
	}

	if (C_ColorizeTimesDuringWarmUp) {
		if (_IsWarmUp) {
			Quad_BgTime.BgColor = Stylesheet::GetVec3Color(Stylesheet::C_Class_BackgroundBgColor_WarmUp, C_Theme);
		} else {
			Quad_BgTime.BgColor = Stylesheet::GetVec3Color(Stylesheet::C_Class_BackgroundBgColor_Accent, C_Theme);
		}
	}

	if (_State.SpectatorTargetLogin == _PlayerInfo.Login) {
		AnimMgr.Add(Quad_BgPlayer, "<quad opacity=\""^C_Opacity_QuadBgPlayer_IsTarget^"\" />", C_SpectatorFocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_BgTime, "<quad opacity=\""^C_Opacity_QuadBgTime_IsTarget^"\" />", C_SpectatorFocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(Quad_BgPlayer, "<quad opacity=\""^C_Opacity_QuadBgPlayer_IsNotTarget^"\" />", C_SpectatorFocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_BgTime, "<quad opacity=\""^C_Opacity_QuadBgTime_IsNotTarget^"\" />", C_SpectatorFocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void UpdatePlayerHighlight(K_State _State, CMlFrame _Frame_Player, K_PlayerInfo _PlayerInfo) {
	if (C_HighlightPlayer) {
		declare CMlLabel Label_Rank <=> (_Frame_Player.GetFirstChild(C_Id_LabelRank) as CMlLabel);
		declare CMlLabel Label_Name <=> (_Frame_Player.GetFirstChild(C_Id_LabelName) as CMlLabel);
		declare CMlQuad Quad_MVP <=> (_Frame_Player.GetFirstChild(C_Id_QuadMVP) as CMlQuad);

		if (_State.HighlightTargetLogin == _PlayerInfo.Login) {
			Label_Rank.TextColor = ColorPalette::C_Color_Vec3_GreenOne;
			Label_Name.TextColor = ColorPalette::C_Color_Vec3_GreenOne;
			Quad_MVP.Colorize = ColorPalette::C_Color_Vec3_GreenOne;
		} else {
			Label_Rank.TextColor = ColorPalette::C_Color_Vec3_White;
			Label_Name.TextColor = ColorPalette::C_Color_Vec3_White;
			Quad_MVP.Colorize = ColorPalette::C_Color_Vec3_White;
		}
	}
}

Void UpdateButtonSpectateFocus(CMlQuad _Button_Spectate) {
	AnimMgr.Flush(_Button_Spectate);
	if (_Button_Spectate.IsFocused) {
		AnimMgr.Add(_Button_Spectate, "<quad opacity=\""^C_Opacity_ButtonSpectate_IsFocused^"\" />", C_SpectatorFocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Button_Spectate, "<quad opacity=\""^C_Opacity_ButtonSpectate_IsNotFocused^"\" />", C_SpectatorFocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void UpdatePlayer(
	K_State _State,
	CMlFrame _Frame_Player,
	K_PlayerInfo _PlayerInfo,
	Teams::K_Team[Integer] _TeamsInfo,
	Teams::K_Player[Text] _PlayersInfo,
	Boolean _IsNewRace,
	Boolean _IsWarmUp,
	Boolean _IsPause
) {
	declare CMlLabel Label_Rank <=> (_Frame_Player.GetFirstChild(C_Id_LabelRank) as CMlLabel);
	declare CMlQuad Quad_Logo <=> (_Frame_Player.GetFirstChild(C_Id_QuadLogo) as CMlQuad);
	declare CMlLabel Label_Name <=> (_Frame_Player.GetFirstChild(C_Id_LabelName) as CMlLabel);
	declare CMlQuad Quad_MVP <=> (_Frame_Player.GetFirstChild(C_Id_QuadMVP) as CMlQuad);
	declare CMlLabel Label_Time <=> (_Frame_Player.GetFirstChild(C_Id_LabelTime) as CMlLabel);
	declare CMlLabel Label_RankProgress <=> (_Frame_Player.GetFirstChild(C_Id_LabelRankProgress) as CMlLabel);
	declare CMlFrame Frame_Finish <=> (_Frame_Player.GetFirstChild(C_Id_FrameFinish) as CMlFrame);
	declare CMlQuad Quad_GradientFinish <=> (Frame_Finish.GetFirstChild(C_Id_QuadGradientFinish) as CMlQuad);
	declare CMlQuad Button_Spectate <=> (_Frame_Player.GetFirstChild(C_Id_ButtonSpectate) as CMlQuad);

	declare K_PlayerInfo TMWTCommon_LiveRanking_PlayerInfo for _Frame_Player = C_PlayerInfo_Null;
	declare Text TMWTCommon_LiveRanking_PlayerLogin for Button_Spectate = "";
	TMWTCommon_LiveRanking_PlayerInfo = _PlayerInfo;
	TMWTCommon_LiveRanking_PlayerLogin = _PlayerInfo.Login;

	UpdatePlayerBg(_State, _Frame_Player, _PlayerInfo, _IsWarmUp);
	UpdatePlayerHighlight(_State, _Frame_Player, _PlayerInfo);
	UpdateButtonSpectateFocus(Button_Spectate);

	Label_Rank.Value = ""^_PlayerInfo.CurRank;
	Label_Name.Value = Teams::GetPlayerName(_PlayersInfo, _PlayerInfo.WebServicesUserId, _PlayerInfo.Name, _PlayerInfo.IsFirstPartyDisplayName);
	Tools::FitLabelValue(Label_Name, C_TextSize_LabelPlayerCard, 1., 0.1);
	Tools::FirstPartyLogoMatchLuminance(Label_Name);

	declare Text MVPAccountId = Shared::GetMVP(This);
	if (_PlayerInfo.WebServicesUserId == MVPAccountId) {
		Quad_MVP.Visible = True;
		Label_Name.Size.X = C_Size_Name.X - 1.;
	} else {
		Quad_MVP.Visible = False;
		Label_Name.Size.X = C_Size_Name.X - 1. + C_Size_MVP.X;
	}

	if (_IsWarmUp || _IsPause) {
		Label_Time.Visible = False;
	} else {
		if (_PlayerInfo.Eliminated) {
			Label_Time.Value = C_Text_DNF;
		} else if (_PlayerInfo.CurRank == 1) {
			Label_Time.Value = Shared::GetShortTime(_PlayerInfo.Interval, True);
		} else if (_PlayerInfo.CurRank > 1) {
			Label_Time.Value = "+"^Shared::GetShortTime(_PlayerInfo.Interval, False);
		} else {
			Label_Time.Value = "";
		}
		Tools::FitLabelValue(Label_Time, C_TextSize_LabelPlayerCard, 1., 0.1);
		Label_Time.Visible = True;
	}

	declare Text ClanLogo = Teams::GetClanLogoUrl(This, _TeamsInfo, _PlayerInfo.Clan);
	if (ClanLogo != "" && Http.IsValidUrl(ClanLogo)) {
		Quad_Logo.ImageUrl = ClanLogo;
	} else {
		Quad_Logo.ImageUrl = "file://ZoneFlags/Login/"^_PlayerInfo.Login^"/country";
	}
	
	// Update and animate rank changes
	if (_IsNewRace) {
		AnimMgr.Flush(_Frame_Player);
		AnimMgr.Flush(Label_RankProgress);
		AnimMgr.Flush(Frame_Finish);
		_Frame_Player.RelativePosition_V3.Y = GetRankPosY(_PlayerInfo.CurRank, _State.Controls.Frames_Player.count);
		Label_RankProgress.Opacity = 0.;
		Frame_Finish.RelativePosition_V3.X = -C_Size_Finish.X;
		Frame_Finish.Visible = False;
	} else {
		declare Boolean RankChanged = (_PlayerInfo.PrevRank > 0 && _PlayerInfo.PrevRank != _PlayerInfo.CurRank);

		// Update player position in the ranking
		if (RankChanged) {
			_Frame_Player.RelativePosition_V3.Y = GetRankPosY(_PlayerInfo.PrevRank, _State.Controls.Frames_Player.count);
			declare Real NewRankPosY = GetRankPosY(_PlayerInfo.CurRank, _State.Controls.Frames_Player.count);
			AnimMgr.Flush(_Frame_Player);
			AnimMgr.Add(_Frame_Player, "<frame pos=\"0 "^NewRankPosY^"\" />", C_RankProgressAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Flush(_Frame_Player);
			_Frame_Player.RelativePosition_V3.Y = GetRankPosY(_PlayerInfo.CurRank, _State.Controls.Frames_Player.count);
		}

		if (_PlayerInfo.RaceFinished) {
			if (_PlayerInfo.Clan == 1) {
				Quad_GradientFinish.Colorize = Stylesheet::GetVec3Color(Stylesheet::C_Class_Gradient_BlueTeam, C_Theme);
			} else if (_PlayerInfo.Clan == 2) {
				Quad_GradientFinish.Colorize = Stylesheet::GetVec3Color(Stylesheet::C_Class_Gradient_RedTeam, C_Theme);
			} else {
				Quad_GradientFinish.Colorize = Stylesheet::GetVec3Color(Stylesheet::C_Class_Gradient_Accent, C_Theme);
			}
			AnimMgr.Flush(Label_RankProgress);
			AnimMgr.Flush(Frame_Finish);
			AnimMgr.Add(Label_RankProgress, "<label opacity=\"0\" />", C_RankProgressAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(Frame_Finish, "<quad pos=\"0 "^Frame_Finish.RelativePosition_V3.Y^"\" hidden=\"0\" />", C_RankProgressAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else if (RankChanged) {
			declare Text Color;
			if (_PlayerInfo.PrevRank > _PlayerInfo.CurRank) {
				Label_RankProgress.Value = "⏶"; //< Arrow up icon
				Label_RankProgress.TextSizeReal = C_TextSize_LabelRankProgress_UpDown;
				Color = ColorPalette::C_Color_TMWT_RankUp;
			} else {
				Label_RankProgress.Value = "⏷"; //< Arrow down icon
				Label_RankProgress.TextSizeReal = C_TextSize_LabelRankProgress_UpDown;
				Color = ColorPalette::C_Color_TMWT_RankDown;
			}
			AnimMgr.Flush(Frame_Finish);
			AnimMgr.Flush(Label_RankProgress);
			AnimMgr.Add(Frame_Finish, "<quad pos=\""^-C_Size_Finish.X^" "^Frame_Finish.RelativePosition_V3.Y^"\" hidden=\"1\" />", C_RankProgressAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(Label_RankProgress, "<label opacity=\"1\" textcolor=\""^Color^"\" />", Now, C_RankProgressAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(Label_RankProgress, "<label opacity=\"0\" textcolor=\""^Color^"\" />", Now + C_RankProgressDisplayDuration, C_RankProgressAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			// Keep playing the `Label_RankProgress` animation
			AnimMgr.Flush(Frame_Finish);
			AnimMgr.Add(Frame_Finish, "<quad pos=\""^-C_Size_Finish.X^" "^Frame_Finish.RelativePosition_V3.Y^"\" hidden=\"1\" />", C_RankProgressAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}
}

Void UpdateRanking(
	K_State _State,
	Boolean _IsNewRace,
	Boolean _IsWarmUp,
	Boolean _IsPause,
	Text[] _RaceFinished
) {
	declare Ident[Ident] ScoreIdToPlayerId;
	foreach (Player in Players) {
		if (Player.Score != Null) {
			ScoreIdToPlayerId[Player.Score.Id] = Player.Id;

			// Check if the player is still spawned
			declare Integer TMWTCommon_LiveRanking_LastUpdate for Player.Score = -1;
			if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned && Player.StartTime > 0) {
				TMWTCommon_LiveRanking_LastUpdate = Now;
			}

			// On the client, the `Players` array contains the players and the spectators
			declare Boolean TMWTCommon_LiveRanking_IsSpectator for Player.Score = False;
			TMWTCommon_LiveRanking_IsSpectator = Player.RequestsSpectate;

			// Reset the player's rank
			declare Integer TMWTCommon_LiveRanking_Rank for Player = -1;
			TMWTCommon_LiveRanking_Rank = -1;
		}
	}
	foreach (Score in Scores) {
		Shared::SetLiveRank(Score, Scores.count);
	}

	// Sort the players by race progression
	declare Integer[][Ident] ScoreIdsToSortByWaypointTimes;
	declare Integer LatestCheckpointTime = 0;
	foreach (Player in Players) {
		if (Player.Score != Null && Player.User != Null) {
			declare Boolean TMWTCommon_LiveRanking_IsSpectator for Player.Score = False;
			if (!TMWTCommon_LiveRanking_IsSpectator) {
				if (_IsWarmUp || _IsPause) {
					ScoreIdsToSortByWaypointTimes[Player.Score.Id] = [];
				} else {
					ScoreIdsToSortByWaypointTimes[Player.Score.Id] = CommonUtils::ToScriptArray(Player.RaceWaypointTimes);
				}
				declare Integer TMWTCommon_LiveRanking_CheckpointKey for Player.Score;
				declare Integer TMWTCommon_LiveRanking_CheckpointTime for Player.Score;
				TMWTCommon_LiveRanking_CheckpointKey = Player.RaceWaypointTimes.count;
				if (Player.RaceWaypointTimes.count > 0) {
					TMWTCommon_LiveRanking_CheckpointTime = Player.RaceWaypointTimes[Player.RaceWaypointTimes.count - 1];
					if (TMWTCommon_LiveRanking_CheckpointTime > LatestCheckpointTime) {
						LatestCheckpointTime = TMWTCommon_LiveRanking_CheckpointTime;
					}
				} else {
					TMWTCommon_LiveRanking_CheckpointTime = -1;
				}
			}
		}
	}

	// Create the race ranking
	declare K_PlayerInfo[] Ranking;
	declare Integer Rank = 1;
	declare Boolean IsLeader = True;
	declare Ident LeaderId = NullId;
	declare Integer MinTimeDiff = 0;
	declare Integer RankingPlayersNbMax = _State.Controls.Frames_Player.count;
	declare Ident[][Integer] ScoreIdsSortedByWaypointTimes = ScoresSort::SortIdsByWaypointTimes(ScoreIdsToSortByWaypointTimes);
	declare Boolean HasGap = False;
	foreach (WaypointTimesScoreIds in ScoreIdsSortedByWaypointTimes) {
		foreach (ScoreId in WaypointTimesScoreIds) {
			declare CSmScore Score <=> Scores[ScoreId];
			declare Integer TMWTCommon_LiveRanking_CheckpointKey for Score = 0;
			declare Integer TMWTCommon_LiveRanking_CheckpointTime for Score = -1;
			declare Integer TMWTCommon_LiveRanking_LastUpdate for Score = -1;
			declare Integer TMWTCommon_LiveRanking_PrevRank for Score = 0;
			declare Integer TimeDiff = 0;

			if (!_IsWarmUp && !_IsPause) {
				// Save the checkpoint times of the leader
				if (IsLeader) {
					LeaderId = ScoreId;
					MinTimeDiff = 0;
					if (TMWTCommon_LiveRanking_CheckpointTime >= 0) {
						TimeDiff = TMWTCommon_LiveRanking_CheckpointTime;
					}
				}
				// Compute the time diff with the leader
				else {
					if (
						LeaderId != NullId &&
						ScoreIdToPlayerId.existskey(LeaderId) &&
						Players.existskey(ScoreIdToPlayerId[LeaderId]) &&
						Players[ScoreIdToPlayerId[LeaderId]].RaceWaypointTimes.existskey(TMWTCommon_LiveRanking_CheckpointKey - 1)
					) {
						declare CSmPlayer LeaderPlayer <=> Players[ScoreIdToPlayerId[LeaderId]];
						declare Integer LeaderTimeAtCheckpoint = LeaderPlayer.RaceWaypointTimes[TMWTCommon_LiveRanking_CheckpointKey-1];
						if (LeaderPlayer.RaceWaypointTimes.existskey(TMWTCommon_LiveRanking_CheckpointKey)) {
							TimeDiff = ML::Max(TMWTCommon_LiveRanking_CheckpointTime - LeaderTimeAtCheckpoint, LatestCheckpointTime - LeaderPlayer.RaceWaypointTimes[TMWTCommon_LiveRanking_CheckpointKey]);
						} else {
							TimeDiff = TMWTCommon_LiveRanking_CheckpointTime - LeaderTimeAtCheckpoint;
						}
					} else {
						TimeDiff = 0;
					}

					if (TimeDiff > MinTimeDiff) {
						MinTimeDiff = TimeDiff;
					} else {
						TimeDiff = MinTimeDiff;
					}
				}
			}

			// Add the player to the ranking
			declare Boolean RaceFinished = _RaceFinished.exists(Score.User.WebServicesUserId);
			Ranking.add(K_PlayerInfo {
				Login = Score.User.Login,
				WebServicesUserId = Score.User.WebServicesUserId,
				Name = Score.User.Name,
				IsFirstPartyDisplayName = Score.User.IsFirstPartyDisplayName,
				Interval = TimeDiff,
				Eliminated = (UI.UISequence == CUIConfig::EUISequence::Playing && Now != TMWTCommon_LiveRanking_LastUpdate && !RaceFinished),
				PrevRank = TMWTCommon_LiveRanking_PrevRank,
				CurRank = Rank,
				Clan = Score.TeamNum,
				RaceFinished = RaceFinished
			});
			TMWTCommon_LiveRanking_PrevRank = Rank;
			Shared::SetLiveRank(Score, Rank);

			Rank += 1;
			IsLeader = False;

			// Stop adding players to the ranking once we cannot display them
			if (Ranking.count >= RankingPlayersNbMax) break;
		}
		if (Ranking.count >= RankingPlayersNbMax) break;
	}
	Shared::SignalLiveRankingUpdate(This);

	// The ranking must be updated even if the live ranking UI is not visible
	// because other UI rely on this ranking. However we do not need to update
	// the visual of the live ranking UI if it is not visible.
	if (_State.LiveRankingIsVisible) {
		// Update background size
		declare Real BgSizeY = ML::Abs(_State.Controls.Frame_Players.RelativePosition_V3.Y) + (Ranking.count * C_Height_Player);
		AnimMgr.Flush(_State.Controls.Quad_BgLiveRanking);
		AnimMgr.Flush(_State.Controls.Quad_BorderLiveRanking);
		AnimMgr.Add(_State.Controls.Quad_BgLiveRanking, "<quad size=\""^_State.Controls.Quad_BgLiveRanking.Size.X^" "^BgSizeY^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(_State.Controls.Quad_BorderLiveRanking, "<quad size=\""^_State.Controls.Quad_BorderLiveRanking.Size.X^" "^BgSizeY^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);

		// Update players list
		declare Teams::K_Team[Integer] TeamsInfo = Teams::GetTeamsInfo(This);
		declare Teams::K_Player[Text] PlayersInfo = Teams::GetPlayersInfo(This);
		foreach (Key => Frame_Player in _State.Controls.Frames_Player) {
			if (Ranking.existskey(Key)) {
				UpdatePlayer(_State, Frame_Player, Ranking[Key], TeamsInfo, PlayersInfo, _IsNewRace, _IsWarmUp, _IsPause);
				Frame_Player.Visible = True;
			} else {
				Frame_Player.Visible = False;
			}
		}
	}
}

K_State SetSpectatorTarget(K_State _State, CSmPlayer _Target, Boolean _IsWarmUp) {
	declare K_State State = _State;

	if (_Target == Null) {
		State.GUIPlayerId = NullId;
		State.SpectatorTargetLogin = "";
	} else {
		State.GUIPlayerId = _Target.Id;
		if (_Target.User == Null) {
			State.SpectatorTargetLogin = "";
		} else {
			State.SpectatorTargetLogin = _Target.User.Login;
		}
	}

	foreach (Frame_Player in _State.Controls.Frames_Player) {
		declare K_PlayerInfo TMWTCommon_LiveRanking_PlayerInfo for Frame_Player = C_PlayerInfo_Null;
		UpdatePlayerBg(State, Frame_Player, TMWTCommon_LiveRanking_PlayerInfo, _IsWarmUp);
	}

	return State;
}

K_State SetHighlightTarget(K_State _State, CSmPlayer _Target) {
	if (!C_HighlightPlayer) return _State;

	declare K_State State = _State;

	if (_Target == Null) {
		State.InputPlayerId = NullId;
		State.HighlightTargetLogin = "";
	} else {
		State.InputPlayerId = _Target.Id;
		if (_Target.User == Null) {
			State.HighlightTargetLogin = "";
		} else {
			State.HighlightTargetLogin = _Target.User.Login;
		}
	}

	foreach (Frame_Player in _State.Controls.Frames_Player) {
		declare K_PlayerInfo TMWTCommon_LiveRanking_PlayerInfo for Frame_Player = C_PlayerInfo_Null;
		UpdatePlayerHighlight(State, Frame_Player, TMWTCommon_LiveRanking_PlayerInfo);
	}

	return State;
}

Void SpectatePreviousOrNextRank(CSmPlayer _CurrentTarget, Integer _Direction) {
	if (_CurrentTarget == Null) return;
	declare Integer CurrentRank = 0;
	if (_CurrentTarget.Score != Null) {
		declare Integer TMWTCommon_LiveRanking_PrevRank for _CurrentTarget.Score = 0;
		CurrentRank = TMWTCommon_LiveRanking_PrevRank;
	}
	declare Integer NewRank = -1;
	declare Text NewTargetLogin = "";
	foreach (Player in Players) {
		if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) {
			declare Integer Rank = 0;
			if (Player.Score != Null) {
				declare Integer TMWTCommon_LiveRanking_PrevRank for Player.Score = 0;
				Rank = TMWTCommon_LiveRanking_PrevRank;
			}
			if (Rank > 0) {
				if (
					(
						_Direction == C_PreviousRank &&
						Rank < CurrentRank && 
						(NewRank == -1 || Rank > NewRank)
					) || (
						_Direction == C_NextRank &&
						Rank > CurrentRank &&
						(NewRank == -1 || Rank < NewRank)
					)
				) {
					NewRank = Rank;
					NewTargetLogin = Player.User.Login;
				}
			}
		}
	}

	if (NewTargetLogin != "") {
		Shared::SpectateLogin(This, NewTargetLogin);
	}
}
Void SpectatePreviousRank(CSmPlayer _CurrentTarget) {
	SpectatePreviousOrNextRank(_CurrentTarget, C_PreviousRank);
}
Void SpectateNextRank(CSmPlayer _CurrentTarget) {
	SpectatePreviousOrNextRank(_CurrentTarget, C_NextRank);
}

K_State SetVisibility(K_State _State, Boolean _LiveRankingIsVisible) {
	declare K_State State = _State;

	if (State.LiveRankingIsVisible != _LiveRankingIsVisible) {
		State.LiveRankingIsVisible = _LiveRankingIsVisible;
		AnimMgr.Flush(State.Controls.Frame_AnimVisibility);
		if (State.LiveRankingIsVisible) {
			AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\"0 0\" hidden=\"0\" />", C_VisibilityAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\""^(-C_Size_VisibilityClip.X)^" 0\" hidden=\"1\" />", C_VisibilityAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlLabel Label_LiveRanking;

declare netread Boolean Net_TMWTCommon_LiveRanking_IsVisible for UI;
declare netread Integer Net_TMWTCommon_LiveRanking_RankingUpdate for Teams[0] = 0;
declare netread Integer Net_TMWTCommon_LiveRanking_RaceIndex for Teams[0] = 0;
declare netread Text[] Net_TMWTCommon_LiveRanking_FinishedRacePlayers for Teams[0] = [];

declare K_State State;
declare Boolean PrevPageIsVisible;
declare Integer NextRankingUpdate;
declare Integer NextCheckpointUpdate;
declare Integer RankingUpdate;
declare Integer RaceIndex;
declare Boolean IsNewRace;
declare Boolean IsWarmUp;
declare Boolean IsPause;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);
Label_LiveRanking <=> (Frame_Global.GetFirstChild(C_Id_LabelLiveRanking) as CMlLabel);

State.Controls.Frame_AnimVisibility <=> (Frame_Global.GetFirstChild(C_Id_FrameAnimVisibility) as CMlFrame);
State.Controls.Frame_Players <=> (Frame_Global.GetFirstChild(C_Id_FramePlayers) as CMlFrame);
State.Controls.Frames_Player = [];
foreach (Control in State.Controls.Frame_Players.Controls) {
	State.Controls.Frames_Player.add(Control as CMlFrame);
}
State.Controls.Quad_BgLiveRanking <=> (Frame_Global.GetFirstChild(C_Id_QuadBgLiveRanking) as CMlQuad);
State.Controls.Quad_BorderLiveRanking <=> (Frame_Global.GetFirstChild(C_Id_QuadBorderLiveRanking) as CMlQuad);

if (C_TitleIsVisible) {
	Label_LiveRanking.Visible = True;
	Tools::FitLabelValue(Label_LiveRanking, C_TextSize_LabelLiveRanking, 1., 0.5);
	State.Controls.Frame_Players.RelativePosition_V3.Y = -C_Height_Title;
} else {
	Label_LiveRanking.Visible = False;
	State.Controls.Frame_Players.RelativePosition_V3.Y = 0.;
}

PrevPageIsVisible = PageIsVisible;
NextRankingUpdate = Now;
NextCheckpointUpdate = Now;
RankingUpdate = -1;
RaceIndex = -1;
IsNewRace = False;
IsWarmUp = WarmupHelpers::IsWarmupActive(Teams[0]);
IsPause = Shared::GetIsPause(This);

State = SetVisibility(State, State.Controls.Frame_AnimVisibility.Visible);
State = SetSpectatorTarget(State, GUIPlayer, IsWarmUp);
State = SetHighlightTarget(State, GUIPlayer);
***

***MainLoop***
***
if (PrevPageIsVisible != PageIsVisible) {
	PrevPageIsVisible = PageIsVisible;
	// Force an update to apply animations that were skipped while the UI was hidden
	if (PrevPageIsVisible) ResetDelayedAnim(State);
}

if (PageIsVisible) {
	if (State.LiveRankingIsVisible != Net_TMWTCommon_LiveRanking_IsVisible) {
		State = SetVisibility(State, Net_TMWTCommon_LiveRanking_IsVisible);
	}

	if (State.LiveRankingIsVisible) {
		if (
			RankingUpdate != Net_TMWTCommon_LiveRanking_RankingUpdate ||
			IsWarmUp != WarmupHelpers::IsWarmupActive(Teams[0]) ||
			IsPause != Shared::GetIsPause(This)
		) {
			RankingUpdate = Net_TMWTCommon_LiveRanking_RankingUpdate;
			IsWarmUp = WarmupHelpers::IsWarmupActive(Teams[0]);
			IsPause = Shared::GetIsPause(This);

			NextRankingUpdate = Now;
		}

		if (
			(GUIPlayer == Null && State.GUIPlayerId != NullId) ||
			(GUIPlayer != Null && State.GUIPlayerId != GUIPlayer.Id)
		) {
			State = SetSpectatorTarget(State, GUIPlayer, IsWarmUp);
		}

		if (
			C_HighlightPlayer && (
				(InputPlayer == Null && State.InputPlayerId != NullId) ||
				(InputPlayer != Null && State.InputPlayerId != InputPlayer.Id)
			)
		) {
			State = SetHighlightTarget(State, InputPlayer);
		}
	}

	if (Frame_Global.Visible) {
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::MouseClick : {
					if (Event.ControlId == C_Id_ButtonSpectate) {
						declare Text TMWTCommon_LiveRanking_PlayerLogin for Event.Control = "";
						if (TMWTCommon_LiveRanking_PlayerLogin != "") {
							Shared::SpectateLogin(This, TMWTCommon_LiveRanking_PlayerLogin);
						}
					}
				}
				case CMlScriptEvent::Type::MouseOver: {
					if (Event.ControlId == C_Id_ButtonSpectate) {
						UpdateButtonSpectateFocus(Event.Control as CMlQuad);
					}
				}
				case CMlScriptEvent::Type::MouseOut: {
					if (Event.ControlId == C_Id_ButtonSpectate) {
						UpdateButtonSpectateFocus(Event.Control as CMlQuad);
					}
				}
				case CMlScriptEvent::Type::KeyPress: {
					// Only check keypress if player is spectator
					if (IsSpectatorClient) {
						if (Event.KeyName == "Down") {
							SpectateNextRank(GUIPlayer);
						} else if (Event.KeyName == "Up") {
							SpectatePreviousRank(GUIPlayer);
						}
					}
				}
			}
		}
	}
}

// Other UIs rely on the ranking computed by this UI
// So even if the live ranking is not visible, we have to
// continue to update the ranking

// A new race started
if (RaceIndex != Net_TMWTCommon_LiveRanking_RaceIndex) {
	RaceIndex = Net_TMWTCommon_LiveRanking_RaceIndex;
	IsNewRace = True;
	if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;

	// Reset the last checkpoint times tracking
	foreach (Score in Scores) {
		declare Integer TMWTCommon_LiveRanking_PrevRank for Score;
		TMWTCommon_LiveRanking_PrevRank = 0;
	}
	foreach (Player in Players) {
		declare Integer TMWTCommon_LiveRanking_CurrentRaceLastTime for Player;
		declare Integer TMWTCommon_LiveRanking_RaceStartTime for Player;
		declare CSmPlayer::ESpawnStatus TMWTCommon_LiveRanking_SpawnStatus for Player;
		TMWTCommon_LiveRanking_CurrentRaceLastTime = -1;
		TMWTCommon_LiveRanking_RaceStartTime = -1;
		TMWTCommon_LiveRanking_SpawnStatus = CSmPlayer::ESpawnStatus::NotSpawned;
	}
}

// Check if a player crossed a checkpoint or spawned/unspawned
if (NextCheckpointUpdate <= Now) {
	NextCheckpointUpdate = Now + C_CheckpointUpdateFrequency;

	foreach (Player in Players) {
		declare Integer TMWTCommon_LiveRanking_CurrentRaceLastTime for Player;
		declare Integer CurrentRaceLastTime = -1;
		if (Player.RaceWaypointTimes.count > 0) CurrentRaceLastTime = Player.RaceWaypointTimes[Player.RaceWaypointTimes.count - 1];
		if (TMWTCommon_LiveRanking_CurrentRaceLastTime != CurrentRaceLastTime) {
			TMWTCommon_LiveRanking_CurrentRaceLastTime = CurrentRaceLastTime;
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		}

		declare Integer TMWTCommon_LiveRanking_RaceStartTime for Player;
		if (TMWTCommon_LiveRanking_RaceStartTime != Player.StartTime) {
			TMWTCommon_LiveRanking_RaceStartTime = Player.StartTime;
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		}
		
		declare CSmPlayer::ESpawnStatus TMWTCommon_LiveRanking_SpawnStatus for Player;
		if (TMWTCommon_LiveRanking_SpawnStatus != Player.SpawnStatus) {
			TMWTCommon_LiveRanking_SpawnStatus = Player.SpawnStatus;
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		}
	}
}


// Update the ranking
if (NextRankingUpdate > 0 && Now >= NextRankingUpdate) {
	NextRankingUpdate = -1;
	UpdateRanking(
		State,
		IsNewRace,
		IsWarmUp,
		IsPause,
		Net_TMWTCommon_LiveRanking_FinishedRacePlayers
	);
	IsNewRace = False;
}
***
""",
[
	UIModules::Component()
],
[]
	);
}