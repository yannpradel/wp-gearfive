/**
 *	UI module: MapInfo client side
 */
#Const Version		"2023-03-17"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/MapInfo_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/MapInfo_Common.Script.txt" as UIModules_MapInfo_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_VisibilityAnimDuration 250

//L16N [TrackMania World Tour - Teams] %1 will be replaced by the number of the track. eg: "Track 3"
#Const C_Text_TrackNb _("Track %1")
//L16N [TrackMania World Tour - Teams] %1 will be replaced by the number of the round. eg: "Round 4"
#Const C_Text_RoundNb _("Round %1")

#Const C_Size_MapInfoBg <66., 10.>

#Const C_TextSize_LabelTrackName 3.
#Const C_TextSize_LabelMatchProgression 1.

#Const C_Id_FrameGlobal "frame-global"
#Const C_Id_FrameAnimVisibility "frame-anim-visibility"
#Const C_Id_LabelTrackName "label-track-name"
#Const C_Id_LabelMatchProgression "label-match-progression"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_MapInfo_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_MapInfo_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML(Integer _Style) {
	return MV::Create(
GetId(), 3,
"""
{{{Stylesheet::Get(_Style)}}}
<frame id="{{{C_Id_FrameGlobal}}}" z-index="{{{Shared::C_ZIndex_MapInfo}}}">
	<frame {{{MLHelpers::Size(C_Size_MapInfoBg + <Stylesheet::C_BorderWidth, 0.>)}}} {{{UIModules::CustomizableUIModule(UIModules_MapInfo_Common::C_UIModuleConfig)}}}>
		<frame id="{{{C_Id_FrameAnimVisibility}}}" pos="{{{-C_Size_MapInfoBg.X - Stylesheet::C_BorderWidth}}} 0" hidden="1">
			<quad class="{{{Stylesheet::C_Class_Border_Accent}}}" z-index="1" size="{{{Stylesheet::C_BorderWidth}}} {{{C_Size_MapInfoBg.Y}}}" />
			<frame pos="{{{Stylesheet::C_BorderWidth}}}" z-index="0">
				<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" {{{MLHelpers::Size(C_Size_MapInfoBg)}}} />
				<frame z-index="1">
					<label id="{{{C_Id_LabelTrackName}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" pos="2 -3.5" {{{MLHelpers::Size(C_Size_MapInfoBg - <4., 1.>)}}} valign="center2" textsize="{{{C_TextSize_LabelTrackName}}}" />
					<label id="{{{C_Id_LabelMatchProgression}}}" class="{{{Stylesheet::C_Class_Text_SemiBold}}}" pos="2 -7.5" {{{MLHelpers::Size(C_Size_MapInfoBg - <4., 1.>)}}} valign="center2" textsize="{{{C_TextSize_LabelMatchProgression}}}" />
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_AnimVisibility;
	CMlLabel Label_TrackName;
	CMlLabel Label_MatchProgression;
}
#Struct K_State {
	K_Controls Controls;
	Boolean IsVisible;
	Boolean IsSpectating;
	Boolean DisplayModule;
	Text MapUid;
	Int2 MatchProgression;
}

#Const C_State_Null K_State {
	Controls = K_Controls {},
	IsVisible = False,
	IsSpectating = False,
	DisplayModule = False,
	MapUid = "",
	MatchProgression = <0, 0>
}

#Const C_VisibilityAnimDuration {{{dump(C_VisibilityAnimDuration)}}}

#Const C_Text_TrackNb {{{dump(C_Text_TrackNb)}}}
#Const C_Text_RoundNb {{{dump(C_Text_RoundNb)}}}

#Const C_Size_MapInfoBg {{{dump(C_Size_MapInfoBg)}}}

#Const C_TextSize_LabelTrackName {{{dump(C_TextSize_LabelTrackName)}}}
#Const C_TextSize_LabelMatchProgression {{{dump(C_TextSize_LabelMatchProgression)}}}

#Const C_Id_FrameGlobal {{{dump(C_Id_FrameGlobal)}}}
#Const C_Id_FrameAnimVisibility {{{dump(C_Id_FrameAnimVisibility)}}}
#Const C_Id_LabelTrackName {{{dump(C_Id_LabelTrackName)}}}
#Const C_Id_LabelMatchProgression {{{dump(C_Id_LabelMatchProgression)}}}
""",
"""
K_State SetVisibility(K_State _State, Boolean _DisplayModule, Boolean _IsSpectating) {
	declare K_State State = _State;

	State.DisplayModule = _DisplayModule;
	State.IsSpectating = _IsSpectating;
	State.IsVisible = (State.DisplayModule && State.IsSpectating);

	AnimMgr.Flush(State.Controls.Frame_AnimVisibility);
	if (State.IsVisible) {
		AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\"0 0\" hidden=\"0\" />", C_VisibilityAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\""^(-C_Size_MapInfoBg.X - Stylesheet::C_BorderWidth)^" 0\" hidden=\"1\" />", C_VisibilityAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

K_State SetMap(K_State _State, CMap _Map) {
	declare K_State State = _State;

	if (_Map == Null || _Map.MapInfo == Null) {
		State.MapUid = "";
		State.Controls.Label_TrackName.Value = "";
	} else {
		State.MapUid = _Map.MapInfo.MapUid;
		State.Controls.Label_TrackName.Value = _Map.MapInfo.Name;
		Tools::FitLabelValue(State.Controls.Label_TrackName, C_TextSize_LabelTrackName, 1., 0.25);
	}

	return State;
}

K_State SetMatchProgression(K_State _State, Int2 _MatchProgression) {
	declare K_State State = _State;

	State.MatchProgression = _MatchProgression;

	if (State.MatchProgression.X > 0 && State.MatchProgression.Y > 0) {
		declare Text TrackNb = TL::GetTranslatedText(TL::Compose(C_Text_TrackNb, ""^State.MatchProgression.X));
		declare Text RoundNb = TL::GetTranslatedText(TL::Compose(C_Text_RoundNb, ""^State.MatchProgression.Y));
		State.Controls.Label_MatchProgression.Value = TL::Compose("%1 â€¢ %2", TrackNb, RoundNb);
	} else if (State.MatchProgression.X > 0) {
		State.Controls.Label_MatchProgression.Value = TL::Compose(C_Text_TrackNb, ""^State.MatchProgression.X);
	} else if (State.MatchProgression.Y > 0) {
		State.Controls.Label_MatchProgression.Value = TL::Compose(C_Text_RoundNb, ""^State.MatchProgression.Y);
	} else {
		State.Controls.Label_MatchProgression.Value = "";
	}

	return State;
}

***MainInit***
***
declare netread Boolean Net_TMWTCommon_MapInfo_IsVisible for UI;
declare netread Int2 Net_TMWTCommon_MapInfo_MatchProgression for Teams[0] = <0, 0>;

declare K_State State = C_State_Null;
***

***MainStart***
***
State.Controls.Frame_Global <=> (Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);
State.Controls.Frame_AnimVisibility <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_FrameAnimVisibility) as CMlFrame);
State.Controls.Label_TrackName <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_LabelTrackName) as CMlLabel);
State.Controls.Label_MatchProgression <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_LabelMatchProgression) as CMlLabel);

State = SetVisibility(State, State.Controls.Frame_AnimVisibility.Visible, Shared::IsSpectating(This));
State = SetMap(State, Map);
State = SetMatchProgression(State, Net_TMWTCommon_MapInfo_MatchProgression);
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.DisplayModule != Net_TMWTCommon_MapInfo_IsVisible) {
		State = SetVisibility(State, Net_TMWTCommon_MapInfo_IsVisible, State.IsSpectating);
	}

	if (State.DisplayModule) {
		if (State.IsSpectating != Shared::IsSpectating(This)) {
			State = SetVisibility(State, State.DisplayModule, Shared::IsSpectating(This));
		}

		if (State.IsVisible) {
			if (
				((Map == Null || Map.MapInfo == Null) && State.MapUid != "") ||
				(Map != Null && Map.MapInfo != Null && State.MapUid != Map.MapInfo.MapUid)
			) {
				State = SetMap(State, Map);
			}

			if (State.MatchProgression != Net_TMWTCommon_MapInfo_MatchProgression) {
				State = SetMatchProgression(State, Net_TMWTCommon_MapInfo_MatchProgression);
			}
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}