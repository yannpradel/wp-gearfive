/**
 *	UI module: PlayerInfo client side
 */
#Const Version		"2023-03-17"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/PlayerInfo_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/PlayerInfo_Common.Script.txt" as UIModules_PlayerInfo_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ImgPath "file://Media/Manialinks/Nadeo/TMNext/Modes/TMWT/UI"
#Const C_VisibilityAnimDuration 250

#Const C_Text_WarmUp _("Warm up")

#Const C_TextSize_LabelPlayerName 5.
#Const C_TextSize_LabelClanName 3.
#Const C_TextSize_LabelRank 10.
#Const C_TextSize_LabelSuffix 4.
#Const C_TextSize_LabelWarmUp 2.

#Const C_Width_Margin 1.
#Const C_Width_Photo 30.
#Const C_Width_PlayerInfo 106.
#Const C_Width_Logo 14.
#Const C_Width_WarmUp 30.

#Const C_Height_Photo 30.
#Const C_Height_PlayerInfo 16.

#Const C_Size_VisibilityClip <140., 32.>

#Const C_Id_FrameGlobal "frame-global"
#Const C_Id_FrameAnimVisibility "frame-anim-visibility"
#Const C_Id_FrameAlign "frame-align"
#Const C_Id_FrameClipPlayerInfo "frame-clip-player-info"
#Const C_Id_QuadBgPhoto "quad-bg-photo"
#Const C_Id_QuadBgPlayerInfo "quad-bg-player-info"
#Const C_Id_FramePhoto "frame-photo"
#Const C_Id_QuadPhoto "quad-photo"
#Const C_Id_QuadLogo "quad-logo"
#Const C_Id_LabelPlayerName "label-player-name"
#Const C_Id_LabelClanName "label-clan-name"
#Const C_Id_LabelRank "label-rank"
#Const C_Id_LabelSuffix "label-suffix"
#Const C_Id_FrameClipWarmUp "frame-clip-warm-up"
#Const C_Id_LabelWarmUp "label-warm-up"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_PlayerInfo_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_PlayerInfo_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML(Integer _Theme) {
	declare Real Width_PlayerClanNames = C_Width_PlayerInfo - ((C_Width_Margin * 4) + C_Width_Logo) - C_Width_WarmUp;

	return MV::Create(
GetId(), 3,
"""
{{{Stylesheet::Get(_Theme)}}}
<frame id="{{{C_Id_FrameGlobal}}}" z-index="{{{Shared::C_ZIndex_PlayerInfo}}}">
	<frame {{{UIModules::CustomizableUIModule(UIModules_PlayerInfo_Common::C_UIModuleConfig)}}} size="{{{C_Size_VisibilityClip.X}}} {{{C_Size_VisibilityClip.Y}}}" halign="center" valign="bottom">
		<frame id="{{{C_Id_FrameAnimVisibility}}}" pos="0 {{{-C_Size_VisibilityClip.Y}}}" hidden="1">
			<frame id="{{{C_Id_FrameAlign}}}" pos="{{{(C_Width_Photo + C_Width_Margin + C_Width_PlayerInfo) * -0.5}}}">
				<!-- Player's photo -->
				<frame id="{{{C_Id_FramePhoto}}}" pos="{{{C_Width_Photo * 0.5}}} 0" z-index="1">
					<quad class="{{{Stylesheet::C_Class_Border_Default}}}" z-index="1" size="{{{C_Width_Photo}}} {{{Stylesheet::C_BorderWidth}}}" halign="center" valign="bottom" />
					<frame pos="0 {{{Stylesheet::C_BorderWidth}}}" z-index="0">
						<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="{{{C_Width_Photo}}} {{{C_Height_Photo}}}" halign="center" valign="bottom" />
						<quad id="{{{C_Id_QuadBgPhoto}}}" class="{{{Stylesheet::C_Class_Gradient_BlueTeam}}}" z-index="1" size="{{{C_Width_Photo}}} {{{C_Height_Photo}}}" halign="center" valign="bottom" image="{{{C_ImgPath}}}/TMWT_PlayerCam.dds" />
						<quad id="{{{C_Id_QuadPhoto}}}" z-index="2" size="{{{C_Width_Photo - 2}}} {{{C_Height_Photo - 1}}}" halign="center" valign="bottom" keepratio="fit" />
					</frame>
				</frame>
				<frame id="{{{C_Id_FrameClipPlayerInfo}}}" pos="{{{C_Width_Photo + C_Width_Margin}}} 0" z-index="2" size="{{{C_Width_PlayerInfo}}} {{{C_Height_PlayerInfo + Stylesheet::C_BorderWidth}}}" halign="left" valign="bottom">
					<quad class="{{{Stylesheet::C_Class_Border_Default}}}" z-index="1" size="{{{C_Width_PlayerInfo}}} {{{Stylesheet::C_BorderWidth}}}" valign="bottom" />
					<frame pos="0 {{{Stylesheet::C_BorderWidth}}}" z-index="0">
						<!-- Player's info -->
						<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="{{{C_Width_PlayerInfo}}} {{{C_Height_PlayerInfo}}}" valign="bottom" />
						<quad id="{{{C_Id_QuadBgPlayerInfo}}}" class="{{{Stylesheet::C_Class_Gradient_BlueTeam}}}" z-index="1" size="{{{C_Width_PlayerInfo}}} {{{C_Height_PlayerInfo}}}" valign="bottom" image="{{{C_ImgPath}}}/TMWT_PlayerInfo.dds" />
						<frame z-index="2">
							<quad id="{{{C_Id_QuadLogo}}}" pos="{{{C_Width_Margin + (C_Width_Logo * 0.5)}}} {{{C_Height_PlayerInfo * 0.5}}}" size="{{{C_Width_Logo}}} {{{C_Width_Logo}}}" halign="center" valign="center" keepratio="fit" />
							<frame pos="{{{(C_Width_Margin * 2) + C_Width_Logo + 2.}}} {{{C_Height_PlayerInfo * 0.46}}}">
								<label id="{{{C_Id_LabelPlayerName}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" size="{{{Width_PlayerClanNames - 2.}}} {{{C_Height_PlayerInfo}}}" valign="bottom" textsize="{{{C_TextSize_LabelPlayerName}}}" />
								<label id="{{{C_Id_LabelClanName}}}" class="{{{Stylesheet::C_Class_Text_SemiBold}}}" pos="0 -0.5" size="{{{Width_PlayerClanNames - 2.}}} {{{C_Height_PlayerInfo}}}" textsize="{{{C_TextSize_LabelClanName}}}" />
							</frame>
							<frame pos="{{{C_Width_PlayerInfo - 10}}} {{{C_Height_PlayerInfo * 0.46}}}">
								<label id="{{{C_Id_LabelRank}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" size="{{{C_Width_WarmUp - 10 - C_Width_Margin}}} {{{C_Height_PlayerInfo}}}" halign="right" valign="center2" textsize="{{{C_TextSize_LabelRank}}}" />
								<label id="{{{C_Id_LabelSuffix}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" pos="0.25 1.5" size="9 {{{C_Height_PlayerInfo}}}" valign="center2" textsize="{{{C_TextSize_LabelSuffix}}}" />
							</frame>
						</frame>
					</frame>
				</frame>
				<!-- Warm up -->
				<frame id="{{{C_Id_FrameClipWarmUp}}}" pos="{{{C_Width_Photo + C_Width_Margin + C_Width_PlayerInfo}}} 0" z-index="0" size="{{{C_Width_WarmUp}}} {{{C_Height_PlayerInfo + Stylesheet::C_BorderWidth}}}" halign="right" valign="bottom" hidden="1">
					<quad class="{{{Stylesheet::C_Class_Border_Default}}}" z-index="1" size="{{{C_Width_WarmUp}}} {{{Stylesheet::C_BorderWidth}}}" halign="right" valign="bottom" />
					<frame pos="0 {{{Stylesheet::C_BorderWidth}}}" z-index="0">
						<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="{{{C_Width_WarmUp}}} {{{C_Height_PlayerInfo}}}" halign="right" valign="bottom" />
						<quad class="{{{Stylesheet::C_Class_Gradient_WarmUp}}}" z-index="1" size="{{{C_Width_WarmUp}}} {{{C_Height_PlayerInfo}}}" halign="right" valign="bottom" image="{{{C_ImgPath}}}/TMWT_PlayerInfo.dds" />
						<label id="{{{C_Id_LabelWarmUp}}}" class="{{{Stylesheet::C_Class_Text_SemiBold}}}" pos="{{{C_Width_WarmUp * -0.5}}} {{{C_Height_PlayerInfo * 0.5}}}" z-index="2" size="{{{C_Width_WarmUp - 2}}} {{{C_Height_PlayerInfo - 2}}}" halign="center" valign="center2" textsize="{{{C_TextSize_LabelWarmUp}}}" text="{{{C_Text_WarmUp}}}" />
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Teams.Script.txt" as Teams
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/WarmupHelpers_Client.Script.txt" as WarmupHelpers

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_AnimVisibility;
	CMlFrame Frame_Align;
	CMlFrame Frame_ClipPlayerInfo;
	CMlFrame Frame_Photo;
	CMlQuad Quad_BgPhoto;
	CMlQuad Quad_Photo;
	CMlQuad Quad_BgPlayerInfo;
	CMlQuad Quad_Logo;
	CMlLabel Label_PlayerName;
	CMlLabel Label_ClanName;
	CMlLabel Label_Rank;
	CMlLabel Label_Suffix;
	CMlFrame Frame_ClipWarmUp;
	CMlLabel Label_WarmUp;
}
#Struct K_State {
	K_Controls Controls;
	Ident GUIPlayerId;
	Boolean IsVisible;
	Boolean IsSpectating;
	Boolean DisplayModule;
	Integer TeamsUpdate;
	Integer LiveRankingUpdate;
	Boolean IsWarmUp;
	Integer PlayerRank;
	Integer PlayerClan;
}

#Const C_State_Null K_State {
	Controls = K_Controls {},
	GUIPlayerId = NullId,
	IsVisible = False,
	IsSpectating = False,
	DisplayModule = False,
	TeamsUpdate = -1,
	LiveRankingUpdate = -1,
	IsWarmUp = False,
	PlayerRank = 0,
	PlayerClan = 0
}

#Const C_Theme {{{dump(_Theme)}}}
#Const C_VisibilityAnimDuration {{{dump(C_VisibilityAnimDuration)}}}

#Const C_TextSize_LabelPlayerName {{{dump(C_TextSize_LabelPlayerName)}}}
#Const C_TextSize_LabelClanName {{{dump(C_TextSize_LabelClanName)}}}
#Const C_TextSize_LabelRank {{{dump(C_TextSize_LabelRank)}}}
#Const C_TextSize_LabelSuffix {{{dump(C_TextSize_LabelSuffix)}}}
#Const C_TextSize_LabelWarmUp {{{dump(C_TextSize_LabelWarmUp)}}}

#Const C_Width_Margin {{{dump(C_Width_Margin)}}}
#Const C_Width_Photo {{{dump(C_Width_Photo)}}}
#Const C_Width_PlayerInfo {{{dump(C_Width_PlayerInfo)}}}
#Const C_Width_WarmUp {{{dump(C_Width_WarmUp)}}}

#Const C_Size_VisibilityClip {{{dump(C_Size_VisibilityClip)}}}

#Const C_Id_FrameGlobal {{{dump(C_Id_FrameGlobal)}}}
#Const C_Id_FrameAnimVisibility {{{dump(C_Id_FrameAnimVisibility)}}}
#Const C_Id_FrameAlign {{{dump(C_Id_FrameAlign)}}}
#Const C_Id_FrameClipPlayerInfo {{{dump(C_Id_FrameClipPlayerInfo)}}}
#Const C_Id_QuadBgPhoto {{{dump(C_Id_QuadBgPhoto)}}}
#Const C_Id_QuadBgPlayerInfo {{{dump(C_Id_QuadBgPlayerInfo)}}}
#Const C_Id_FramePhoto {{{dump(C_Id_FramePhoto)}}}
#Const C_Id_QuadPhoto {{{dump(C_Id_QuadPhoto)}}}
#Const C_Id_QuadLogo {{{dump(C_Id_QuadLogo)}}}
#Const C_Id_LabelPlayerName {{{dump(C_Id_LabelPlayerName)}}}
#Const C_Id_LabelClanName {{{dump(C_Id_LabelClanName)}}}
#Const C_Id_LabelRank {{{dump(C_Id_LabelRank)}}}
#Const C_Id_LabelSuffix {{{dump(C_Id_LabelSuffix)}}}
#Const C_Id_FrameClipWarmUp {{{dump(C_Id_FrameClipWarmUp)}}}
#Const C_Id_LabelWarmUp {{{dump(C_Id_LabelWarmUp)}}}
""",
"""
K_State SetVisibility(K_State _State, Boolean _DisplayModule, Boolean _IsSpectating) {
	declare K_State State = _State;

	State.DisplayModule = _DisplayModule;
	State.IsSpectating = _IsSpectating;
	declare Boolean IsVisible = (State.DisplayModule && State.IsSpectating && State.GUIPlayerId != NullId);

	if (State.IsVisible != IsVisible) {
		State.IsVisible = IsVisible;
		AnimMgr.Flush(State.Controls.Frame_AnimVisibility);
		if (State.IsVisible) {
			AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\"0 0\" hidden=\"0\" />", C_VisibilityAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\"0 "^(-C_Size_VisibilityClip.Y)^"\" hidden=\"1\" />", C_VisibilityAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	return State;
}

K_State SetSpectatorTarget(K_State _State, CSmPlayer _GUIPlayer, Integer _TeamsUpdate, Integer _LiveRankingUpdate, Boolean _IsWarmUp) {
	declare K_State State = _State;

	declare Boolean TeamsInfoUpdated = (State.TeamsUpdate != _TeamsUpdate);
	State.TeamsUpdate = _TeamsUpdate;
	State.LiveRankingUpdate = _LiveRankingUpdate;

	declare Teams::K_Team[Integer] TeamsInfo = Teams::GetTeamsInfo(This);
	declare Teams::K_Player[Text] PlayersInfo = Teams::GetPlayersInfo(This);

	if (State.IsWarmUp != _IsWarmUp) {
		State.IsWarmUp = _IsWarmUp;

		AnimMgr.Flush(State.Controls.Frame_ClipPlayerInfo);
		AnimMgr.Flush(State.Controls.Frame_ClipWarmUp);
		if (State.IsWarmUp) {
			AnimMgr.Add(State.Controls.Frame_ClipPlayerInfo, "<frame size=\""^(C_Width_PlayerInfo - C_Width_Margin - C_Width_WarmUp)^" "^State.Controls.Frame_ClipPlayerInfo.Size.Y^"\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Frame_ClipWarmUp, "<frame size=\""^C_Width_WarmUp^" "^State.Controls.Frame_ClipWarmUp.Size.Y^"\" hidden=\"0\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_ClipPlayerInfo, "<frame size=\""^(C_Width_PlayerInfo)^" "^State.Controls.Frame_ClipPlayerInfo.Size.Y^"\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Frame_ClipWarmUp, "<frame size=\"0 "^State.Controls.Frame_ClipWarmUp.Size.Y^"\" hidden=\"1\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	if (_GUIPlayer == Null && State.GUIPlayerId != NullId) {
		State.GUIPlayerId = NullId;
		State = SetVisibility(State, State.DisplayModule, State.IsSpectating);
	} else if (_GUIPlayer != Null) {
		if (_GUIPlayer.Score == Null) {
			State.Controls.Label_Rank.Visible = False;
			State.Controls.Label_Suffix.Visible = False;
		} else {
			declare Integer Rank = Shared::GetLiveRank(_GUIPlayer.Score);
			if (State.PlayerRank != Rank) {
				State.PlayerRank = Rank;
				State.Controls.Label_Rank.Value = ""^Rank;
				State.Controls.Label_Suffix.Value = Tools::GetRankSuffix(Rank);
				Tools::FitLabelValue(State.Controls.Label_Rank, C_TextSize_LabelRank, 4., 1.);
				Tools::FitLabelValue(State.Controls.Label_Suffix, C_TextSize_LabelSuffix, 1., 0.5);
			}
			State.Controls.Label_Rank.Visible = True;
			State.Controls.Label_Suffix.Visible = True;
		}

		if (State.GUIPlayerId != _GUIPlayer.Id || TeamsInfoUpdated) {
			State.GUIPlayerId = _GUIPlayer.Id;

			declare Boolean PhotoWasVisible = State.Controls.Frame_Photo.Visible;
			State.Controls.Quad_Photo.ImageUrl = Teams::GetPlayerPhotoUrl(PlayersInfo, _GUIPlayer.User);
			State.Controls.Frame_Photo.Visible = (State.Controls.Quad_Photo.ImageUrl != "");
			if (PhotoWasVisible != State.Controls.Frame_Photo.Visible) {
				declare Real Width = C_Width_Photo + C_Width_Margin + C_Width_PlayerInfo;
				if (!State.Controls.Frame_Photo.Visible) {
					Width += (C_Width_Photo + C_Width_Margin);
				}
				AnimMgr.Flush(State.Controls.Frame_Align);
				AnimMgr.Add(State.Controls.Frame_Align, "<frame pos=\""^(Width * -0.5)^" 0\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
			}

			declare Text ClanLogo = Teams::GetClanLogoUrl(This, TeamsInfo, _GUIPlayer.CurrentClan);
			if (ClanLogo != "" && Http.IsValidUrl(ClanLogo)) {
				State.Controls.Quad_Logo.ImageUrl = ClanLogo;
				State.Controls.Quad_Logo.Visible = True;
			} else if (_GUIPlayer.User != Null) {
				State.Controls.Quad_Logo.ImageUrl = "file://ZoneFlags/Login/"^_GUIPlayer.User.Login^"/country";
				State.Controls.Quad_Logo.Visible = True;
			} else {
				State.Controls.Quad_Logo.Visible = False;
			}

			State.Controls.Label_PlayerName.Value = Teams::GetPlayerName(PlayersInfo, _GUIPlayer.User);
			State.Controls.Label_ClanName.Value = Teams::GetClanName(This, TeamsInfo, _GUIPlayer.CurrentClan);
			Tools::FitLabelValue(State.Controls.Label_PlayerName, C_TextSize_LabelPlayerName, 1., 0.5);
			Tools::FirstPartyLogoMatchLuminance(State.Controls.Label_PlayerName);
			Tools::FitLabelValue(State.Controls.Label_ClanName, C_TextSize_LabelClanName, 1., 0.25);

			if (State.PlayerClan != _GUIPlayer.CurrentClan) {
				State.PlayerClan = _GUIPlayer.CurrentClan;
				AnimMgr.Flush(State.Controls.Quad_BgPhoto);
				AnimMgr.Flush(State.Controls.Quad_BgPlayerInfo);
				declare Text TeamColor = Stylesheet::GetHexColor(Stylesheet::C_Class_Gradient_Accent, C_Theme);
				if (_GUIPlayer.CurrentClan == 1) {
					TeamColor = Stylesheet::GetHexColor(Stylesheet::C_Class_Gradient_BlueTeam, C_Theme);
				} else if (_GUIPlayer.CurrentClan == 2) {
					TeamColor = Stylesheet::GetHexColor(Stylesheet::C_Class_Gradient_RedTeam, C_Theme);
				}
				AnimMgr.Add(State.Controls.Quad_BgPhoto, "<quad colorize=\""^TeamColor^"\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(State.Controls.Quad_BgPlayerInfo, "<quad colorize=\""^TeamColor^"\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
			}

			State = SetVisibility(State, State.DisplayModule, State.IsSpectating);
		}
	}

	return State;
}

***MainInit***
***
declare netread Boolean Net_TMWTCommon_PlayerInfo_IsVisible for UI;

declare K_State State = C_State_Null;
***

***MainStart***
***
State.Controls.Frame_Global <=> (Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);
State.Controls.Frame_AnimVisibility <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_FrameAnimVisibility) as CMlFrame);
State.Controls.Frame_Align <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_FrameAlign) as CMlFrame);
State.Controls.Frame_ClipPlayerInfo <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_FrameClipPlayerInfo) as CMlFrame);
State.Controls.Frame_Photo <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_FramePhoto) as CMlFrame);
State.Controls.Quad_BgPhoto <=> (State.Controls.Frame_Photo.GetFirstChild(C_Id_QuadBgPhoto) as CMlQuad);
State.Controls.Quad_Photo <=> (State.Controls.Frame_Photo.GetFirstChild(C_Id_QuadPhoto) as CMlQuad);
State.Controls.Quad_BgPlayerInfo <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_QuadBgPlayerInfo) as CMlQuad);
State.Controls.Quad_Logo <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_QuadLogo) as CMlQuad);
State.Controls.Label_PlayerName <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_LabelPlayerName) as CMlLabel);
State.Controls.Label_ClanName <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_LabelClanName) as CMlLabel);
State.Controls.Label_Rank <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_LabelRank) as CMlLabel);
State.Controls.Label_Suffix <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_LabelSuffix) as CMlLabel);
State.Controls.Frame_ClipWarmUp <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_FrameClipWarmUp) as CMlFrame);
State.Controls.Label_WarmUp <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_LabelWarmUp) as CMlLabel);

Tools::FitLabelValue(State.Controls.Label_WarmUp, C_TextSize_LabelWarmUp, 1., 0.25);

State.DisplayModule = State.Controls.Frame_AnimVisibility.Visible;

State = SetSpectatorTarget(State, GUIPlayer, Teams::GetTeamsUpdate(This), Shared::GetLiveRankingUpdate(This), WarmupHelpers::IsWarmupActive(Teams[0]));
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.DisplayModule != Net_TMWTCommon_PlayerInfo_IsVisible) {
		State.DisplayModule = Net_TMWTCommon_PlayerInfo_IsVisible;
		State = SetVisibility(State, Net_TMWTCommon_PlayerInfo_IsVisible, Shared::IsSpectating(This));
	}

	if (State.DisplayModule) {
		if (
			(GUIPlayer == Null && State.GUIPlayerId != NullId) ||
			(GUIPlayer != Null && State.GUIPlayerId != GUIPlayer.Id) ||
			State.TeamsUpdate != Teams::GetTeamsUpdate(This) ||
			State.LiveRankingUpdate != Shared::GetLiveRankingUpdate(This) ||
			State.IsWarmUp != WarmupHelpers::IsWarmupActive(Teams[0])
		) {
			State = SetSpectatorTarget(State, GUIPlayer, Teams::GetTeamsUpdate(This), Shared::GetLiveRankingUpdate(This), WarmupHelpers::IsWarmupActive(Teams[0]));
		}
		if (State.IsSpectating != Shared::IsSpectating(This)) {
			State = SetVisibility(State, State.DisplayModule, Shared::IsSpectating(This));
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}