/**
 *  UI module: EndMatchPopUp server side
 */
#Const Version    "2021-03-03"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/LapsOGL/UIModules/EndMatchPopUp_Server.Script.txt"

#Include "Libs/Nadeo/TMNext/TrackMania/Modes/LapsOGL/Structs.Script.txt" as Structs

// Copy pasted in Client side
#Const C_ChallengeStatus_None 0
#Const C_ChallengeStatus_Completed 1

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_LapsOGL_EndMatchPopUp"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text[] SetChallengeResults(Structs::K_ChallengeResult[Text] _ChallengeResults) {
	declare Text[] MissingResults_AccountIds;

	foreach (Player in AllPlayers) {
		if (Player != Null) {
			declare CUIConfig PlayerUI <=> UIManager.GetUI(Player);
			if (PlayerUI != Null) {
				declare netwrite Structs::K_ChallengeResult Net_LapsOGL_EndMatchPopUp_ChallengeResult for PlayerUI;
				declare netwrite Integer Net_LapsOGL_EndMatchPopUp_ChallengeResult_Update for PlayerUI = -1;
				if (_ChallengeResults.existskey(Player.User.WebServicesUserId)) {
					Net_LapsOGL_EndMatchPopUp_ChallengeResult = _ChallengeResults[Player.User.WebServicesUserId];
					Net_LapsOGL_EndMatchPopUp_ChallengeResult_Update = Now;
				} else if (Net_LapsOGL_EndMatchPopUp_ChallengeResult_Update == -1) {
					MissingResults_AccountIds.add(Player.User.WebServicesUserId);
				}
			}
		}
		
	}
	return MissingResults_AccountIds;
}

Text[] SetPlayerJoinLinks(Text[Text] _JoinLinks) {
	declare Text[] MissingLink_AccountIds;
	foreach (Player in AllPlayers) {
		if (Player != Null) {
			declare CUIConfig PlayerUI <=> UIManager.GetUI(Player);
			if (PlayerUI != Null) {
				declare netwrite Text Net_LapsOGL_EndMatchPopUp_JoinLink for PlayerUI;
				declare netwrite Integer Net_LapsOGL_EndMatchPopUp_JoinLink_Update for PlayerUI = -1;
				if (
					_JoinLinks.existskey(Player.User.WebServicesUserId) &&
					_JoinLinks[Player.User.WebServicesUserId] != ""
				) {
					Net_LapsOGL_EndMatchPopUp_JoinLink = _JoinLinks[Player.User.WebServicesUserId];
					Net_LapsOGL_EndMatchPopUp_JoinLink_Update = Now;
				} else if (Net_LapsOGL_EndMatchPopUp_JoinLink_Update == -1) {
					MissingLink_AccountIds.add(Player.User.WebServicesUserId);
				}
			}
		}
	}

	return MissingLink_AccountIds;
}

Text[] UpdateMapResults(Structs::K_ChallengeResult[Text][Text] _Results) { // _Results indexed by WebServicesUserId, _Results[WebServicesUserId] indexed by map uid
	declare Text[] MissingMapsResults_AccountIds;
	foreach (Player in AllPlayers) {
		if (Player != Null) {
			declare CUIConfig PlayerUI <=> UIManager.GetUI(Player);
			if (PlayerUI != Null) {
				declare netwrite Structs::K_ChallengeResult[Text] Net_LapsOGL_EndMatchPopUp_MapResults for PlayerUI;
				declare netwrite Integer Net_LapsOGL_EndMatchPopUp_MapResults_Update for PlayerUI = -1;
				if (_Results.existskey(Player.User.WebServicesUserId)) {
					Net_LapsOGL_EndMatchPopUp_MapResults = _Results[Player.User.WebServicesUserId];
					Net_LapsOGL_EndMatchPopUp_MapResults_Update = Now;
				} else if (Net_LapsOGL_EndMatchPopUp_MapResults_Update == -1) {
					MissingMapsResults_AccountIds.add(Player.User.WebServicesUserId);
				}
			}
			
		}
	}
	return MissingMapsResults_AccountIds;
}

Void SetMapsInfoFromMapList() {
	declare netwrite Text[Text] Net_LapsOGL_EndMatchPopUp_MapsInfo for Teams[0];
	declare netwrite Integer Net_LapsOGL_EndMatchPopUp_MapsInfo_Update for Teams[0];
	foreach (MapInfo in MapList) {
		Net_LapsOGL_EndMatchPopUp_MapsInfo[MapInfo.MapUid] = MapInfo.Name;
	}
	Net_LapsOGL_EndMatchPopUp_MapsInfo_Update = Now;
}

Void SetChallengeStatus(Text _Status) {
	declare netwrite Integer Net_LapsOGL_EndMatchPopUp_ChallengeStatus for Teams[0];
	switch (_Status) {
		case "COMPLETED": {
			Net_LapsOGL_EndMatchPopUp_ChallengeStatus = C_ChallengeStatus_Completed;
		}
		default: {
			Net_LapsOGL_EndMatchPopUp_ChallengeStatus = C_ChallengeStatus_None;
		}
	}
}

/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	
	declare netwrite Boolean Net_LapsOGL_EndMatchPopUp_IsVisible for _Player;
	Net_LapsOGL_EndMatchPopUp_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetChallengeStatus("");
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
		declare CUIConfig PlayerUI <=> UIManager.GetUI(Player);
		if (PlayerUI != Null) {
			declare netwrite Structs::K_ChallengeResult Net_LapsOGL_EndMatchPopUp_ChallengeResult for PlayerUI;
			declare netwrite Integer Net_LapsOGL_EndMatchPopUp_ChallengeResult_Update for PlayerUI;
			Net_LapsOGL_EndMatchPopUp_ChallengeResult = Structs::K_ChallengeResult {};
			Net_LapsOGL_EndMatchPopUp_ChallengeResult_Update = -1;

			declare netwrite Text Net_LapsOGL_EndMatchPopUp_JoinLink for PlayerUI;
			declare netwrite Integer Net_LapsOGL_EndMatchPopUp_JoinLink_Update for PlayerUI;
			Net_LapsOGL_EndMatchPopUp_JoinLink = "";
			Net_LapsOGL_EndMatchPopUp_JoinLink_Update = -1;

			declare netwrite Structs::K_ChallengeResult[Text] Net_LapsOGL_EndMatchPopUp_MapResults for PlayerUI;
			declare netwrite Integer Net_LapsOGL_EndMatchPopUp_MapResults_Update for PlayerUI;
			Net_LapsOGL_EndMatchPopUp_MapResults = [];
			Net_LapsOGL_EndMatchPopUp_MapResults_Update = -1;
		}
		

		declare netwrite Text[Text] Net_LapsOGL_EndMatchPopUp_MapsInfo for Teams[0];
		declare netwrite Integer Net_LapsOGL_EndMatchPopUp_MapsInfo_Update for Teams[0];
		Net_LapsOGL_EndMatchPopUp_MapsInfo = [];
		Net_LapsOGL_EndMatchPopUp_MapsInfo_Update = -1;
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}