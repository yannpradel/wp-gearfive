/**
 *  UI module: RulesPopUp client side
 */
#Const Version		"2022-08-05"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/LapsOGL/UIModules/RulesPopUp_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "ManiaApps/Nadeo/TMNext/TrackMania/LapsCommon/Libs/Constants.Script.txt" as LapsConst

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_LapsOGL_RulesPopUp"
#Const C_Type CUILayer::EUILayerType::Normal
#Const C_PopUpName "RulesPopUp"
#Const C_NavGroupName "navgroup-rulespopup"

#Const C_Img_PopUpHeader "file://Media/Manialinks/Nadeo/TMNext/Modes/Race/HUD_scorestable_header.dds"
#Const C_Img_PopUpBg "file://Media/Manialinks/Nadeo/TMNext/Modes/Race/HUD_scorestable_body.dds"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Vec2 Size_Background = <260., 260.>;

	//L16N [Laps OGL] Title of a window explaining how the Open Grand League placement match works
	declare Text Text_Title = _("Placement match");
	//L16N [Laps OGL] Subtitle of a window explaining how the Open Grand League placement match works
	declare Text Text_Subtitle = _("Welcome to the Open Grand League");
	//L16N [Laps OGL] Explanation of how the Open Grand League placement match works
	declare Text Text_Rules = _("You are about to participate in the $<$7FAOpen Grand League$>.\n\nThe placement match that will begin shortly will allow you to race on all of the 6 TMGL tracks from last week.\n\nYou will have %1 minutes per track to go through as many checkpoints as you can.\n\nAfter the placement match, you will be placed in a division ($<$DA6bronze$>, $<$CCCsilver$>, $<$CB4gold$> or $<$FE0challenger$>) to compete in a league match to earn points for the $<$7FAOpen Grand League$>.");

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-title" textfont="{{{FontManager::C_GameFontExtraBold}}}" textsize="8" textprefix="$t$i" />
	<style class="text-subtitle" textfont="{{{FontManager::C_GameFontSemiBold}}}" textsize="6" textprefix="$t$i" />
	<style class="text-body" textfont="{{{FontManager::C_GameFontSemiBold}}}" textsize="4" textprefix="$t$i" />
</stylesheet>
<frame z-index="{{{LapsConst::C_ZIndex_RulesPopUp}}}" hidden="1" id="frame-global">
	<frame id="frame-pop-up">
		<frameinstance
			modelid="{{{PopUpBackground::C_Name}}}"
			z-index="-1"
			data-pop-up-name="{{{C_PopUpName}}}"
			data-background-url="{{{C_Img_PopUpBg}}}"
			data-background-position="0 8.5"
			data-background-size="{{{Size_Background.X}}} {{{Size_Background.Y}}}"
			data-header-background-url="{{{C_Img_PopUpHeader}}}"
			data-header-background-position="0 8.5"
			data-header-background-size="{{{Size_Background.X}}} {{{Size_Background.Y}}}"
			data-button-close-position="{{{(Size_Background.X * 0.5) - 12.5}}} 81"
			data-button-close-size="11 11"
			data-button-close-opacity="0.7"
		/>
		<frame pos="0 80" z-index="1">
			<frame pos="11.5 1">
				<label id="label-title" class="text-title" size="{{{Size_Background.X - 60}}} 10" halign="center" text="{{{Text_Title}}}" />
				<label id="label-subtitle" class="text-subtitle" pos="-1.1 -10" size="{{{Size_Background.X - 50}}} 10" halign="center" text="{{{Text_Subtitle}}}" />
			</frame>
			<label id="label-rules" class="text-body" pos="-1 -34" size="{{{Size_Background.X - 70}}} 80" halign="center" autonewline="1" maxline="16" text="{{{Text_Rules}}}" />
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-ok"
				pos="-14 -150"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{_("OK")}}}"
				data-size="60 12"
				data-labelsize="40 12"
				data-opacityunfocus=".5"
				data-image="{{{Const::C_ImageUrl_ButtonBG_LocalMulti_Play}}}"
				data-imagefocus="{{{Const::C_ImageUrl_ButtonBG_LocalMulti_Play}}}"
				data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-focuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-textcolor="{{{ColorPalette::C_Color_White}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_White}}}"
				data-textsize="5"
				data-textopacityunfocus=".5"
				data-iconopacityunfocus=".5"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textitalicslope=".2"
				data-halign="center"
				data-valign="bottom"
				data-nav-inputs="select;cancel"
				data-nav-targets="_;_"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils
""",
"""
Void UpdateRules(CMlLabel _Label_Rules, Integer _TimeLimit) {
	// Time limit is in seconds, convert it to minutes
	_Label_Rules.Value = TL::Compose({{{"\"\"\""^Text_Rules^"\"\"\""}}}, ""^ML::Max(0, _TimeLimit / 60));
}

Void Toggle(CMlFrame _Frame_PopUp, Boolean _Enabled) {
	_Frame_PopUp.Visible = _Enabled;
}

Void Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);

		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);

		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void Select(CMlFrame _Frame_PopUp, CMlControl _Control) {
	if (_Control == Null) return;

	switch (_Control.ControlId) {
		case "button-ok": {
			Toggle(_Frame_PopUp, False);
		}
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_PopUp;
declare CMlLabel Label_Rules;
declare CMlFrame Button_Ok;

declare netread Integer Net_LapsOGL_RulesPopUp_TimeLimit for Teams[0];

declare Boolean DisplayModule;
declare Integer TimeLimit;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_PopUp <=> (Frame_Global.GetFirstChild("frame-pop-up") as CMlFrame);
Label_Rules <=> (Frame_PopUp.GetFirstChild("label-rules") as CMlLabel);
Button_Ok <=> (Frame_PopUp.GetFirstChild("button-ok") as CMlFrame);

DisplayModule = Frame_Global.Visible;
TimeLimit = Net_LapsOGL_RulesPopUp_TimeLimit;

{{{Navigation::P}}}UseLocalEvents(This, True);
UpdateRules(Label_Rules, TimeLimit);
Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Button_Ok);
***

***MainLoop***
***
if (!EnableMenuNavigationInputs && PageIsVisible && Frame_Global.Visible && Frame_PopUp.Visible) {
	EnableMenuNavigation(True, False, False, Null, {{{LapsConst::C_InputPriority_RulesPopUp}}});
} else if (EnableMenuNavigationInputs && (!PageIsVisible || !Frame_Global.Visible || !Frame_PopUp.Visible)) {
	EnableMenuNavigation(False, False, False, Null, {{{LapsConst::C_InputPriority_RulesPopUp}}});
}

if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_LapsOGL_RulesPopUp_IsVisible for Owner;
		if (DisplayModule != Net_LapsOGL_RulesPopUp_IsVisible) {
			DisplayModule = Net_LapsOGL_RulesPopUp_IsVisible;
			Frame_Global.Visible = Net_LapsOGL_RulesPopUp_IsVisible;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_PopUp.Visible) {
		if (TimeLimit != Net_LapsOGL_RulesPopUp_TimeLimit) {
			TimeLimit = Net_LapsOGL_RulesPopUp_TimeLimit;
			UpdateRules(Label_Rules, TimeLimit);
		}

		foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
			if (
				Event.Type == {{{PopUpBackground::P}}}C_Event_LeavePopUp &&
				Event.PopUpName == "{{{C_PopUpName}}}" &&
				Event.FromCloseButton
			) {
				Toggle(Frame_PopUp, False);
			}
		}

		foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{Navigation::P}}}C_EventType_NavigateInput: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							Select(Frame_PopUp, Event.To);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							Toggle(Frame_PopUp, False);
						} else {
							Focus(Event.From, Event.To);
						}
					}
				}
				case {{{Navigation::P}}}C_EventType_NavigateMouse: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							Select(Frame_PopUp, Event.To);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							Focus(Event.From, Event.To);
						}
					}
				}
			}
		}
	}
}
***
""",
	[
		PopUpBackground::ComponentV2(),
		Button::ComponentV2(),
		Navigation::ComponentV2(),
		MenuSounds::ComponentV2()
	],
	[]
	);
}