/**
 *  UI module: WelcomePopUp client side
 */
#Const Version    "2020-09-17"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/ChampionOGL/UIModules/WelcomePopUp_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as MenuConst
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/ChampionOGL/Constants.Script.txt" as ChampionOGLConst

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_ChampionOGL_WelcomePopUp"
#Const C_Type CUILayer::EUILayerType::Normal
#Const C_PopUpName "WelcomePopUp"
#Const C_NavGroupName "navgroup-welcomepopup"

#Const C_ImgPath "file://Media/Manialinks/Nadeo/TMNext/Modes/OGL"
#Const C_Img_PointsRankBg "/UI_OGL_Line_Points_Rank.dds"
#Const C_Img_PointsNumberBg "/UI_OGL_Line_Points_Number.dds"
#Const C_Img_PopUpHeader "file://Media/Manialinks/Nadeo/TMNext/Modes/Race/HUD_scorestable_header.dds"
#Const C_Img_PopUpBg "file://Media/Manialinks/Nadeo/TMNext/Modes/Race/HUD_scorestable_body.dds"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Champion OGL] Title of a window detailing the points system of a league match
	declare Text Text_LeagueMatch = _("League match");
	//L16N [Champion OGL] Message displaying in which division the player is playing. eg: "You are in the gold division"
	declare Text Text_Division = _("You are in the $<%1%2$> division");
	//L16N [Champion OGL] Message displayed above table detailing the points awarded for each rank at the end of the match
	declare Text Text_PlayersReward = _("Players will be rewarded as follows");
	//L16N [Champion OGL] Display the number of points. Always more than 1. eg: "1000 points"
	declare Text Text_Points = _("%1 points");
	//L16N [Champion OGL] Display the number of points.
	declare Text Text_1Point = _("1 point");
	//L16N [Champion OGL] Display the number of points.
	declare Text Text_0Points = _("0 points");

	declare Vec2 Size_Background = <260., 260.>;

	declare Real PointsRankingRatio = 0.0835;
	declare Real PointsRankingLabelMargin = 3.;
	declare Real SizeX_PointsBgsMargin = -2.;
	declare Vec2 Size_PointsNameBg = <192., 112.> * PointsRankingRatio;
	declare Vec2 Size_PointsRankBg = <592., 112.> * PointsRankingRatio;
	declare Real PosX_PointsRankBg = Size_PointsNameBg.X + SizeX_PointsBgsMargin;
	declare Vec2 Size_PointsNameLabel = Size_PointsNameBg - <6., 1.>;
	declare Vec2 Size_PointsRankLabel = Size_PointsRankBg - <6., 1.>;
	declare Real PosX_PointsNameLabel = PointsRankingLabelMargin + (Size_PointsNameLabel.X * 0.5);
	declare Real PosX_PointsRankLabel = PosX_PointsRankBg + PointsRankingLabelMargin;

	declare Text ML_Points = "";
	declare Integer PointsRankingRowNb = 8;
	for (I, 0, 15) {
		declare Vec2 Pos = <
			((I / PointsRankingRowNb) * (Size_PointsNameBg.X + Size_PointsRankBg.X + SizeX_PointsBgsMargin + 5.)) + ((I % PointsRankingRowNb) * -1.6),
			-(I % PointsRankingRowNb) * (Size_PointsNameBg.Y - 0.51)
		>;
		ML_Points ^= """<frameinstance modelid="framemodel-points" pos="{{{Pos.X}}} {{{Pos.Y}}}" />""";
	}
	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-title" textfont="{{{FontManager::C_GameFontExtraBold}}}" textsize="8" textprefix="$t$i" />
	<style class="text-subtitle" textfont="{{{FontManager::C_GameFontSemiBold}}}" textsize="6" textprefix="$t$i" />
	<style class="text-body" textfont="{{{FontManager::C_GameFontSemiBold}}}" textsize="4" textprefix="$t$i" />
</stylesheet>
<framemodel id="framemodel-points">
	<label id="label-points-rank" class="text-body" pos="{{{PosX_PointsNameLabel}}} 0" size="{{{Size_PointsNameLabel.X}}} {{{Size_PointsNameLabel.Y}}}" halign="center" valign="center2" textsize="1.8" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" textfont="{{{FontManager::C_GameFontExtraBold}}}" />
	<label id="label-points-nb" class="text-body" pos="{{{PosX_PointsRankLabel}}} 0" size="{{{Size_PointsRankLabel.X}}} {{{Size_PointsRankLabel.Y}}}" valign="center2" textsize="1.8" />
	<quad id="quad-points-rank-bg" size="{{{Size_PointsNameBg.X}}} {{{Size_PointsNameBg.Y}}}" valign="center" keepratio="fit" opacity="0.8" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" image="{{{C_ImgPath^C_Img_PointsRankBg}}}" />
	<quad id="quad-points-nb-bg" pos="{{{PosX_PointsRankBg}}} 0" size="{{{Size_PointsRankBg.X}}} {{{Size_PointsRankBg.Y}}}" valign="center" keepratio="fit" opacity="0.6" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" image="{{{C_ImgPath^C_Img_PointsNumberBg}}}" />
</framemodel>
<frame z-index="{{{ChampionOGLConst::C_ZIndex_WelcomePopUp}}}" hidden="1" id="frame-global">
	<frame id="frame-pop-up">
		<frameinstance
			modelid="{{{PopUpBackground::C_Name}}}"
			z-index="-1"
			data-pop-up-name="{{{C_PopUpName}}}"
			data-background-url="{{{C_Img_PopUpBg}}}"
			data-background-position="0 8.5"
			data-background-size="{{{Size_Background.X}}} {{{Size_Background.Y}}}"
			data-header-background-url="{{{C_Img_PopUpHeader}}}"
			data-header-background-position="0 8.5"
			data-header-background-size="{{{Size_Background.X}}} {{{Size_Background.Y}}}"
			data-button-close-position="{{{(Size_Background.X * 0.5) - 12.5}}} 81"
			data-button-close-size="11 11"
			data-button-close-opacity="0.7"
		/>
		<frame pos="0 80" z-index="1">
			<frame pos="6 1">
				<label id="label-title" class="text-title" size="{{{Size_Background.X - 110}}} 10" halign="center" text="{{{Text_LeagueMatch}}}" />
				<label id="label-division" class="text-subtitle" pos="-1.1 -10" size="{{{Size_Background.X - 120}}} 10" halign="center" text="{{{Text_Division}}}" />
				<quad id="quad-division" pos="71 -4" size="28 28" autoscale="0" image="{{{MenuConst::C_ImageUrl_Medal_Gold}}}" />
			</frame>
			<label id="label-players-reward" class="text-body" pos="6 -33" size="{{{Size_Background.X - 50}}} 80" halign="center" text="{{{Text_PlayersReward}}}" />
			<frame pos="-66.5 -54" id="frame-points">
				{{{ML_Points}}}
			</frame>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-ok"
				pos="-14 -150"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{_("OK")}}}"
				data-size="60 12"
				data-labelsize="40 12"
				data-opacityunfocus=".5"
				data-image="{{{MenuConst::C_ImageUrl_ButtonBG_LocalMulti_Play}}}"
				data-imagefocus="{{{MenuConst::C_ImageUrl_ButtonBG_LocalMulti_Play}}}"
				data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-focuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-textcolor="{{{ColorPalette::C_Color_White}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_White}}}"
				data-textsize="5"
				data-textopacityunfocus=".5"
				data-iconopacityunfocus=".5"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textitalicslope=".2"
				data-halign="center"
				data-valign="bottom"
				data-nav-inputs="select;cancel"
				data-nav-targets="_;_"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL

#Const C_DivisionsNames {{{dump(ChampionOGLConst::C_DivisionsNames)}}}
#Const C_DivisionsTextColor {{{dump(ChampionOGLConst::C_DivisionsTextColor)}}}
#Const C_DivisionsMedals {{{dump(ChampionOGLConst::C_DivisionsMedals)}}}
""",
"""
Void UpdateDivision(CMlLabel _Label_Division, CMlQuad _Quad_Division, Text _Division) {
	if (_Division == "") {
		_Label_Division.Visible = False;
		_Quad_Division.Visible = False;
	} else {
		if (C_DivisionsNames.existskey(_Division)) {
			if (C_DivisionsTextColor.existskey(_Division)) {
				_Label_Division.Value = TL::Compose("{{{Text_Division}}}", C_DivisionsTextColor[_Division], C_DivisionsNames[_Division]);
			} else {
				_Label_Division.Value = TL::Compose("{{{Text_Division}}}", "", C_DivisionsNames[_Division]);
			}
			_Label_Division.Visible = True;
		} else {
			_Label_Division.Visible = False;
		}
		if (C_DivisionsMedals.existskey(_Division)) {
			_Quad_Division.ImageUrl = C_DivisionsMedals[_Division];
			_Quad_Division.Visible = True;
		} else {
			_Quad_Division.Visible = False;
		}
	}
}

Void UpdatePointsDistribution(CMlFrame _Frame_Points, Integer[] _PointsDistribution) {
	foreach (Key => Control in _Frame_Points.Controls) {
		declare CMlFrame Frame_RankPoints <=> (Control as CMlFrame);
		declare CMlLabel Label_PointsRank <=> (Frame_RankPoints.GetFirstChild("label-points-rank") as CMlLabel);
		declare CMlLabel Label_PointsNb <=> (Frame_RankPoints.GetFirstChild("label-points-nb") as CMlLabel);
		Label_PointsRank.Value = TL::FormatRank(Key + 1, False);
		declare Integer PointsNb = 0;
		if (_PointsDistribution.existskey(Key)) {
			PointsNb = _PointsDistribution[Key];
		} else if (_PointsDistribution.count > 0) {
			PointsNb = _PointsDistribution[_PointsDistribution.count - 1];
		}
		if (PointsNb >= 2) {
			Label_PointsNb.Value = TL::Compose("{{{Text_Points}}}", ""^PointsNb);
		} else if (PointsNb == 1) {
			Label_PointsNb.Value = "{{{Text_1Point}}}";
		} else {
			Label_PointsNb.Value = "{{{Text_0Points}}}";
		}
	}
}

Void Toggle(CMlFrame _Frame_PopUp, Boolean _Enabled) {
	_Frame_PopUp.Visible = _Enabled;
}

Void Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);

		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);

		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void Select(CMlFrame _Frame_PopUp, CMlControl _Control) {
	if (_Control == Null) return;

	switch (_Control.ControlId) {
		case "button-ok": {
			Toggle(_Frame_PopUp, False);
		}
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_PopUp;
declare CMlLabel Label_Division;
declare CMlQuad Quad_Division;
declare CMlFrame Frame_Points;
declare CMlFrame Button_Ok;

declare netread Text Net_ChampionOGL_WelcomePopUp_Division for Teams[0];
declare netread Integer[] Net_ChampionOGL_WelcomePopUp_PointsDistribution for Teams[0];
declare netread Integer Net_ChampionOGL_WelcomePopUp_PointsDistributionUpdate for Teams[0];

declare Boolean DisplayModule;
declare Text Division;
declare Integer PointsDistributionUpdate;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_PopUp <=> (Frame_Global.GetFirstChild("frame-pop-up") as CMlFrame);
Label_Division <=> (Frame_PopUp.GetFirstChild("label-division") as CMlLabel);
Quad_Division <=> (Frame_PopUp.GetFirstChild("quad-division") as CMlQuad);
Frame_Points <=> (Frame_PopUp.GetFirstChild("frame-points") as CMlFrame);
Button_Ok <=> (Frame_PopUp.GetFirstChild("button-ok") as CMlFrame);

DisplayModule = Frame_Global.Visible;
Division = Net_ChampionOGL_WelcomePopUp_Division;
PointsDistributionUpdate = Net_ChampionOGL_WelcomePopUp_PointsDistributionUpdate;

{{{Navigation::P}}}UseLocalEvents(This, True);
Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Button_Ok);
UpdateDivision(Label_Division, Quad_Division, Division);
UpdatePointsDistribution(Frame_Points, Net_ChampionOGL_WelcomePopUp_PointsDistribution);
***

***MainLoop***
***
if (!EnableMenuNavigationInputs && PageIsVisible && Frame_Global.Visible && Frame_PopUp.Visible) {
	EnableMenuNavigation(True, False, False, Null, {{{ChampionOGLConst::C_InputPriority_WelcomePopUp}}});
} else if (EnableMenuNavigationInputs && (!PageIsVisible || !Frame_Global.Visible || !Frame_PopUp.Visible)) {
	EnableMenuNavigation(False, False, False, Null, {{{ChampionOGLConst::C_InputPriority_WelcomePopUp}}});
}

if (PageIsVisible) {
	if (InputPlayer != Null) {
		declare netread Boolean Net_ChampionOGL_WelcomePopUp_IsVisible for InputPlayer;
		if (DisplayModule != Net_ChampionOGL_WelcomePopUp_IsVisible) {
			DisplayModule = Net_ChampionOGL_WelcomePopUp_IsVisible;
			Frame_Global.Visible = Net_ChampionOGL_WelcomePopUp_IsVisible;
		}
	}

	if (InputPlayer == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_PopUp.Visible) {
		if (Division != Net_ChampionOGL_WelcomePopUp_Division) {
			Division = Net_ChampionOGL_WelcomePopUp_Division;
			UpdateDivision(Label_Division, Quad_Division, Division);
		}

		if (PointsDistributionUpdate != Net_ChampionOGL_WelcomePopUp_PointsDistributionUpdate) {
			PointsDistributionUpdate = Net_ChampionOGL_WelcomePopUp_PointsDistributionUpdate;
			UpdatePointsDistribution(Frame_Points, Net_ChampionOGL_WelcomePopUp_PointsDistribution);
		}

		foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
			if (
				Event.Type == {{{PopUpBackground::P}}}C_Event_LeavePopUp &&
				Event.PopUpName == "{{{C_PopUpName}}}" &&
				Event.FromCloseButton
			) {
				Toggle(Frame_PopUp, False);
			}
		}

		foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{Navigation::P}}}C_EventType_NavigateInput: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							Select(Frame_PopUp, Event.To);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							Toggle(Frame_PopUp, False);
						} else {
							Focus(Event.From, Event.To);
						}
					}
				}
				case {{{Navigation::P}}}C_EventType_NavigateMouse: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							Select(Frame_PopUp, Event.To);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							Focus(Event.From, Event.To);
						}
					}
				}
			}
		}
	}
}
***
""",
		[
			Navigation::ComponentV2(),
			MenuSounds::ComponentV2(),
			PopUpBackground::ComponentV2(),
			Button::ComponentV2()
		],
		[]
	);
}