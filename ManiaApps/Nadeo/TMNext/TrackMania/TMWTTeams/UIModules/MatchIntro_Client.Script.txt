/**
 *	UI module: MatchIntro client side
 */
#Const Version		"2023-01-13"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/TMWTTeams/UIModules/MatchIntro_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "ManiaApps/Nadeo/TMNext/TrackMania/TMWTTeams/UIModules/MatchIntro_Common.Script.txt" as UIModules_MatchIntro_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ImgPath "file://Media/Manialinks/Nadeo/TMNext/Modes/TMWT/UI"

#Const C_TextSize_LabelMatchInfo 3.
#Const C_TextSize_LabelClanName 7.
#Const C_TextSize_LabelPlayerName 7.

#Const C_Size_PlayerCard <106., 16.83>

#Const C_ModelId_FramemodelClan "framemodel-clan"
#Const C_ModelId_FramemodelPlayer "framemodel-player"
#Const C_Id_FrameGlobal "frame-global"
#Const C_Id_LabelMatchInfo "label-match-info"
#Const C_Id_FrameClans "frame-clans"
#Const C_Id_QuadClanLogo "quad-clan-logo"
#Const C_Id_LabelClanName "label-clan-name"
#Const C_Id_FramePlayers "frame-players"
#Const C_Id_QuadPlayerBg "quad-player-bg"
#Const C_Id_QuadPlayerFlag "quad-player-flag"
#Const C_Id_LabelPlayerName "label-player-name"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_MatchIntro_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_MatchIntro_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	return MV::Create(
GetId(), 3,
"""
{{{Stylesheet::Get()}}}
<framemodel id="{{{C_ModelId_FramemodelPlayer}}}">
	<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" {{{MLHelpers::Size(C_Size_PlayerCard)}}} halign="center" />
	<quad id="{{{C_Id_QuadPlayerBg}}}" class="{{{Stylesheet::C_Class_Gradient_BlueTeam}}}" z-index="1" {{{MLHelpers::Size(C_Size_PlayerCard)}}} halign="center" image="{{{C_ImgPath}}}/TMWT_PlayerName.dds" />
	<quad class="{{{Stylesheet::C_Class_Border_Default}}}" pos="0 {{{-C_Size_PlayerCard.Y}}}" z-index="2" size="{{{C_Size_PlayerCard.X}}} {{{Stylesheet::C_BorderWidth}}}" halign="center" />
	<frame pos="{{{C_Size_PlayerCard.X * -0.5}}} {{{C_Size_PlayerCard.Y * -0.5}}}" z-index="3">
		<quad id="{{{C_Id_QuadPlayerFlag}}}" pos="11 0" size="{{{C_Size_PlayerCard.Y - 3}}} {{{C_Size_PlayerCard.Y - 3}}}" halign="center" valign="center" keepratio="fit" />
		<label id="{{{C_Id_LabelPlayerName}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" pos="23 0" size="{{{C_Size_PlayerCard.X - 28}}} 20" valign="center2" textsize="{{{C_TextSize_LabelPlayerName}}}" />
	</frame>
</framemodel>
<framemodel id="{{{C_ModelId_FramemodelClan}}}">
	<quad id="{{{C_Id_QuadClanLogo}}}" size="30 30" halign="center" keepratio="fit" />
	<label id="{{{C_Id_LabelClanName}}}" class="{{{Stylesheet::C_Class_Text_ExtraBold}}}" pos="0 -37" size="130 20" halign="center" valign="center2" textsize="{{{C_TextSize_LabelClanName}}}" />
	<frame id="{{{C_Id_FramePlayers}}}" pos="0 -46">
		<frameinstance modelid="{{{C_ModelId_FramemodelPlayer}}}" hidden="1" />
		<frameinstance modelid="{{{C_ModelId_FramemodelPlayer}}}" pos="0 -23" hidden="1" />
	</frame>
</framemodel>
<frame id="{{{C_Id_FrameGlobal}}}" z-index="{{{Shared::C_ZIndex_MatchIntro}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_MatchIntro_Common::C_UIModuleConfig)}}}>
		<quad size="320 180" halign="center" valign="center" image="{{{C_ImgPath}}}/TMWT_MatchIntroBackground.dds" fullscreen="1" />
		<frame z-index="1">
			<quad pos="0 74" size="48 24" halign="center" valign="center" image="{{{C_ImgPath}}}/TMWT_Logo.dds" colorize="{{{ColorPalette::C_Color_White}}}" keepratio="fit" />
			<frame pos="0 50" id="{{{C_Id_FrameClans}}}">
				<frameinstance modelid="{{{C_ModelId_FramemodelClan}}}" pos="-74 0" />
				<frameinstance modelid="{{{C_ModelId_FramemodelClan}}}" pos="74 0" />
			</frame>
			<label id="{{{C_Id_LabelMatchInfo}}}" class="{{{Stylesheet::C_Class_Text_SemiBold}}}" pos="0 -84" size="300 20" halign="center" valign="center2" textsize="{{{C_TextSize_LabelMatchInfo}}}" />
		</frame>
	</frame>
</frame>
""",
"""
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Teams.Script.txt" as Teams

#Struct K_ControlsPlayer {
	CMlFrame Frame_Player;
	CMlQuad Quad_PlayerBg;
	CMlQuad Quad_PlayerFlag;
	CMlLabel Label_PlayerName;
}
#Struct K_ControlsClan {
	CMlQuad Quad_ClanLogo;
	CMlLabel Label_ClanName;
	K_ControlsPlayer[] Players;
}
#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlLabel Label_MatchInfo;
	K_ControlsClan[Integer] Clans;
}
#Struct K_State {
	K_Controls Controls;
	Boolean DisplayModule;
	Integer TeamsUpdate;
	Text MatchInfo;
	Teams::K_Player[Text] PlayersInfo;
	Boolean RequestPlayersUpdate;
}

#Const C_State_Null K_State {
	Controls = K_Controls {},
	DisplayModule = False,
	TeamsUpdate = -1,
	MatchInfo = "",
	PlayersInfo = [],
	RequestPlayersUpdate = False
}

#Const C_PlayerClanCheckInterval 500

#Const C_TextSize_LabelMatchInfo {{{dump(C_TextSize_LabelMatchInfo)}}}
#Const C_TextSize_LabelClanName {{{dump(C_TextSize_LabelClanName)}}}
#Const C_TextSize_LabelPlayerName {{{dump(C_TextSize_LabelPlayerName)}}}

#Const C_Id_FrameGlobal {{{dump(C_Id_FrameGlobal)}}}
#Const C_Id_LabelMatchInfo {{{dump(C_Id_LabelMatchInfo)}}}
#Const C_Id_FrameClans {{{dump(C_Id_FrameClans)}}}
#Const C_Id_QuadClanLogo {{{dump(C_Id_QuadClanLogo)}}}
#Const C_Id_LabelClanName {{{dump(C_Id_LabelClanName)}}}
#Const C_Id_FramePlayers {{{dump(C_Id_FramePlayers)}}}
#Const C_Id_QuadPlayerBg {{{dump(C_Id_QuadPlayerBg)}}}
#Const C_Id_QuadPlayerFlag {{{dump(C_Id_QuadPlayerFlag)}}}
#Const C_Id_LabelPlayerName {{{dump(C_Id_LabelPlayerName)}}}
""",
"""
K_State SetVisibility(K_State _State, Boolean _DisplayModule) {
	declare K_State State = _State;

	State.DisplayModule = _DisplayModule;

	State.Controls.Frame_Global.Visible = State.DisplayModule;

	return State;
}

Void UpdateClansColors(K_State _State) {
	foreach (Clan => ControlsClan in _State.Controls.Clans) {
		foreach (Player in ControlsClan.Players) {
			if (Clan == 2) {
				Player.Quad_PlayerBg.Colorize = Stylesheet::GetVec3Color(Stylesheet::C_Class_Gradient_RedTeam, Stylesheet::C_Theme_TMGL);
			} else {
				Player.Quad_PlayerBg.Colorize = Stylesheet::GetVec3Color(Stylesheet::C_Class_Gradient_BlueTeam, Stylesheet::C_Theme_TMGL);
			}
		}
	}
}

K_State SetTeamsInfo(K_State _State, Integer _TeamsUpdate, Teams::K_Team[Integer] _TeamsInfo, Teams::K_Player[Text] _PlayersInfo) {
	declare K_State State = _State;

	State.TeamsUpdate = _TeamsUpdate;
	State.PlayersInfo = _PlayersInfo;
	State.RequestPlayersUpdate = True;

	foreach (Clan => ControlsClan in State.Controls.Clans) {
		declare Text ClanLogo = Teams::GetClanLogoUrl(This, _TeamsInfo, Clan);
		if (ClanLogo != "" && Http.IsValidUrl(ClanLogo)) {
			ControlsClan.Quad_ClanLogo.ImageUrl = ClanLogo;
			ControlsClan.Quad_ClanLogo.Visible = True;
		} else {
			ControlsClan.Quad_ClanLogo.Visible = False;
		}
		ControlsClan.Label_ClanName.Value = Teams::GetClanName(This, _TeamsInfo, Clan);
		Tools::FitLabelValue(ControlsClan.Label_ClanName, C_TextSize_LabelClanName, 1., 1.);
	}

	return State;
}

K_State SetMatchInfo(K_State _State, Text _MatchInfo) {
	declare K_State State = _State;

	State.MatchInfo = _MatchInfo;

	State.Controls.Label_MatchInfo.Value = _MatchInfo;
	Tools::FitLabelValue(State.Controls.Label_MatchInfo, C_TextSize_LabelMatchInfo, 1., 0.25);

	return State;
}

Void UpdatePlayers(K_State _State, CSmPlayer[][Integer] _ClansPlayers) {
	foreach (Clan => ControlsClan in _State.Controls.Clans) {
		foreach (Key => ControlsPlayer in ControlsClan.Players) {
			if (_ClansPlayers[Clan].existskey(Key)) {
				declare CSmPlayer Player <=> _ClansPlayers[Clan][Key];
				if (Player.User != Null) {
					ControlsPlayer.Quad_PlayerFlag.ImageUrl = "file://ZoneFlags/Login/"^Player.User.Login^"/country";
					ControlsPlayer.Label_PlayerName.Value = Teams::GetPlayerName(_State.PlayersInfo, Player.User);
					Tools::FitLabelValue(ControlsPlayer.Label_PlayerName, {{{C_TextSize_LabelPlayerName}}}, 1., 1.);
					Tools::FirstPartyLogoMatchLuminance(ControlsPlayer.Label_PlayerName);
					ControlsPlayer.Quad_PlayerFlag.Visible = True;
					ControlsPlayer.Label_PlayerName.Visible = True;
				} else {
					ControlsPlayer.Quad_PlayerFlag.Visible = False;
					ControlsPlayer.Label_PlayerName.Visible = False;
				}
				ControlsPlayer.Frame_Player.Visible = True;
			} else {
				ControlsPlayer.Frame_Player.Visible = False;
			}
		}
	}
}

***MainInit***
***
declare CMlFrame Frame_Clans;
declare CMlFrame Frame_Players;

declare netread Boolean Net_TMWTTeams_MatchIntro_IsVisible for UI;

declare K_State State = C_State_Null;
declare Integer PlayerClanCheckTime;
***

***MainStart***
***
State.Controls.Frame_Global <=> (Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);
State.Controls.Label_MatchInfo <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_LabelMatchInfo) as CMlLabel);
Frame_Clans <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_FrameClans) as CMlFrame);
State.Controls.Clans = [1 => K_ControlsClan {}, 2 => K_ControlsClan {}];
foreach (Key => ClanControl in Frame_Clans.Controls) {
	declare CMlFrame Frame_Clan <=> (ClanControl as CMlFrame);
	declare CMlFrame Frame_Players <=> (Frame_Clan.GetFirstChild(C_Id_FramePlayers) as CMlFrame);
	declare K_ControlsPlayer[] PlayersControls;
	foreach (PlayerControl in Frame_Players.Controls) {
		declare CMlFrame Frame_Player <=> (PlayerControl as CMlFrame);
		PlayersControls.add(K_ControlsPlayer {
			Frame_Player = Frame_Player,
			Quad_PlayerBg = (Frame_Player.GetFirstChild(C_Id_QuadPlayerBg) as CMlQuad),
			Quad_PlayerFlag = (Frame_Player.GetFirstChild(C_Id_QuadPlayerFlag) as CMlQuad),
			Label_PlayerName = (Frame_Player.GetFirstChild(C_Id_LabelPlayerName) as CMlLabel)
		});
	}
	State.Controls.Clans[Key + 1] = K_ControlsClan {
		Quad_ClanLogo = (Frame_Clan.GetFirstChild(C_Id_QuadClanLogo) as CMlQuad),
		Label_ClanName = (Frame_Clan.GetFirstChild(C_Id_LabelClanName) as CMlLabel),
		Players = PlayersControls
	};
}

PlayerClanCheckTime = Now;
foreach (Player in Players) {
	declare Integer TMWTTeams_MatchIntro_CurrentClan for Player = 0;
	declare Boolean TMWTTeams_MatchIntro_RequestsSpectate for Player = False;
	TMWTTeams_MatchIntro_CurrentClan = 0;
	TMWTTeams_MatchIntro_RequestsSpectate = False;
}

UpdateClansColors(State);
State = SetVisibility(State, State.Controls.Frame_Global.Visible);
State = SetTeamsInfo(State, Teams::GetTeamsUpdate(This), Teams::GetTeamsInfo(This), Teams::GetPlayersInfo(This));
State = SetMatchInfo(State, Shared::GetMatchInfo(This));
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.DisplayModule != Net_TMWTTeams_MatchIntro_IsVisible) {
		State = SetVisibility(State, Net_TMWTTeams_MatchIntro_IsVisible);
	}
	if (State.DisplayModule) {
		if (State.TeamsUpdate != Teams::GetTeamsUpdate(This)) {
			State = SetTeamsInfo(State, Teams::GetTeamsUpdate(This), Teams::GetTeamsInfo(This), Teams::GetPlayersInfo(This));
		}
		if (State.MatchInfo != Shared::GetMatchInfo(This)) {
			State = SetMatchInfo(State, Shared::GetMatchInfo(This));
		}

		if (Now >= PlayerClanCheckTime) {
			PlayerClanCheckTime = Now + C_PlayerClanCheckInterval;

			foreach (Player in Players) {
				declare Integer TMWTTeams_MatchIntro_CurrentClan for Player = 0;
				declare Boolean TMWTTeams_MatchIntro_RequestsSpectate for Player = False;
				if (
					TMWTTeams_MatchIntro_CurrentClan != Player.CurrentClan ||
					TMWTTeams_MatchIntro_RequestsSpectate != Player.RequestsSpectate
					) {
					TMWTTeams_MatchIntro_CurrentClan = Player.CurrentClan;
					TMWTTeams_MatchIntro_RequestsSpectate = Player.RequestsSpectate;
					State.RequestPlayersUpdate = True;
				}
			}
		}

		if (State.RequestPlayersUpdate) {
			State.RequestPlayersUpdate = False;
			declare CSmPlayer[][Integer] ClansPlayers = [1 => [], 2 => []];
			foreach (Player in Players) {
				if (!Player.RequestsSpectate && (Player.CurrentClan == 1 || Player.CurrentClan == 2)) {
					ClansPlayers[Player.CurrentClan].add(Player);
				}
				if (
					ClansPlayers[1].count >= State.Controls.Clans[1].Players.count &&
					ClansPlayers[2].count >= State.Controls.Clans[2].Players.count
				) {
					break;
				}
			}
			UpdatePlayers(State, ClansPlayers);
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}