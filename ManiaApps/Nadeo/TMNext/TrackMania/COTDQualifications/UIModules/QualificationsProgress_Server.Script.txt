/**
 *	UI module: QualificationsProgress server side
 */
#Const Version		"2023-02-23"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/COTDQualifications/UIModules/QualificationsProgress_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Common.Script.txt" as UIModules_Common
#Include "ManiaApps/Nadeo/TMNext/TrackMania/COTDQualifications/UIModules/QualificationsProgress_Common.Script.txt" as UIModules_QualificationsProgress_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_DefaultVisibility False

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_QualificationsProgress_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::ComponentModeLibsUIModules_K_ModuleConfig GetConfig() {
	return UIModules_QualificationsProgress_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Send the players' joinlinks to their respective clients
Void SetJoinLink(CSmPlayer _Player, Text _JoinLink) {
	declare CUIConfig UI = UIManager.GetUI(_Player);
	if (UI != Null) {
		declare netwrite Text Net_COTDQualificationsProgress_JoinLink for UI = "";
		if (Net_COTDQualificationsProgress_JoinLink != _JoinLink) {
			declare netwrite Integer Net_COTDQualificationsProgress_JoinLinkUpdate for UI = 0;
			Net_COTDQualificationsProgress_JoinLink = _JoinLink;
			Net_COTDQualificationsProgress_JoinLinkUpdate += 1;
		}
	}
}
Void SetJoinLinks(Text[Text] _JoinLinks) {
	foreach (Player in AllPlayers) {
		if (Player.User != Null) {
			SetJoinLink(Player, _JoinLinks.get(Player.User.WebServicesUserId, ""));
		}
	}
}
Void ResetJoinLinks() {
	SetJoinLinks([]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Send the time at which the qualifications will begin
Void SetQualificationsStartTime(Integer _StartTime) {
	declare netwrite Integer Net_COTDQualificationsProgress_QualificationsStartTime for Teams[0] = 0;
	Net_COTDQualificationsProgress_QualificationsStartTime = _StartTime;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Send the maximum time at which the players must have join to be able to qualify
Void SetQualificationsMaxJoinTime(Integer _MaxJoinTime) {
	declare netwrite Integer Net_COTDQualificationsProgress_QualificationsMaxJoinTime for Teams[0] = 0;
	Net_COTDQualificationsProgress_QualificationsMaxJoinTime = _MaxJoinTime;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Send the time at which the players will be automatically transfered to the knockout servers
Void SetKnockoutAutoJoinTime(Integer _AutoJoinTime) {
	declare netwrite Integer Net_COTDQualificationsProgress_AutoJoinTime for Teams[0] = 0;
	Net_COTDQualificationsProgress_AutoJoinTime = _AutoJoinTime;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the competition type of the server (main or rerun)
Void SetCompetitionType(Text _CompetitionType) {
	declare netwrite Text Net_COTDQualificationsProgress_CompetitionType for Teams[0] = "";
	Net_COTDQualificationsProgress_CompetitionType = _CompetitionType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Display the UI as a side UI or a pop-up
Void SetCanDisplayPopUp(Boolean _CanDisplayPopUp) {
	declare netwrite Boolean Net_COTDQualificationsProgress_CanDisplayPopUp for Teams[0] = False;
	Net_COTDQualificationsProgress_CanDisplayPopUp = _CanDisplayPopUp;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Reset the click on the buttons
Void ResetButtonClicked() {
	declare netwrite Integer Net_COTDQualificationsProgress_ResetButtonClicked for Teams[0] = 0;
	Net_COTDQualificationsProgress_ResetButtonClicked += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;

	declare netwrite Boolean Net_COTDQualificationsProgress_IsVisible for UI = C_DefaultVisibility;
	Net_COTDQualificationsProgress_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, C_DefaultVisibility);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	ResetJoinLinks();
	SetQualificationsStartTime(0);
	SetQualificationsMaxJoinTime(0);
	SetKnockoutAutoJoinTime(0);
	SetCompetitionType("");
	SetCanDisplayPopUp(False);
	ResetButtonClicked();

	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}