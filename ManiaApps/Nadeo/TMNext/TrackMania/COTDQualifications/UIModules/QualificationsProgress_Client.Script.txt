/**
 *	UI module: QualificationsProgress client side
 */
#Const Version		"2023-03-13"
#Const ScriptName	"ManiaApps/Nadeo/TMNext/TrackMania/COTDQualifications/UIModules/QualificationsProgress_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as MenuConst
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/COTDQualifications/Constants.Script.txt" as COTDConst
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/ScoresTable_Client.Script.txt" as ScoresTable
#Include "ManiaApps/Nadeo/TMNext/TrackMania/COTDQualifications/UIModules/QualificationsProgress_Common.Script.txt" as UIModules_QualificationsProgress_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_NavGroup_Side "navgroup-cotd-qualifications-side"
#Const C_NavGroup_Center "navgroup-cotd-qualifications-center"
#Const C_NavGroup_ShowInGameMenu "navgroup-cotd-qualifications-showingamemenu"

#Const C_InputPriority 1
#Const C_EnableHideButton False

//L16N [COTD qualifications] Join your match button
#Const C_Text_Join _("Join")
//L16N [COTD qualifications] Click on this button to stay on the server
#Const C_Text_Stay _("|Verb|Stay")
//L16N [COTD qualifications] This is the rank obtained by the player during the competition qualifier. %1 is the rank (example: "27th" or "1st").
#Const C_Text_Result _("Qualifier rank: %1")
//L16N [COTD qualifications] %1 is the number of trophies, %2 is part of the the trophy name (ex. You earned 3 Trophy 7)
#Const C_Text_ResultTrophy _("You earned %1 Trophy %2")
//L16N [COTD qualifications] The qualification match is starting soon
#Const C_Text_BeforeMatch _("The Cup of the Day will start soon.")
//L16N [COTD qualifications] The player needs to finish the track to validate their registration for the cup
#Const C_Text_MatchStarted_NoResult _("Finish the track once before the end of the qualifications to register for the cup.")
//L16N [COTD qualifications] Message displayed while player registration is being processed
#Const C_Text_MatchStarted_Registering _("Registering for the Cup of the Day...")
//L16N [COTD qualifications] Waiting for your Cup of the Day match to be ready
#Const C_Text_MatchOver_WaitJoinLink _("Waiting for your match.")
//L16N [COTD qualifications] Waiting for the Cup of the Day server to be ready
#Const C_Text_MatchOver_WaitServerReady _("Starting server.")
//L16N [COTD qualifications] Player's Cup of the Day match is ready
#Const C_Text_MatchOver_JoinLinkReady _("Your next match is ready.")
//L16N [COTD qualifications] Player's Cup of the Day match is ready and they can join it by using a button in the pause menu.
#Const C_Text_MatchOver_JoinLinkReadySideFirstParty _("Your next match is ready. Join from the pause menu.")
//L16N [COTD qualifications] The player did not register for the cup
#Const C_Text_MatchOver_RegistrationsOver _("Registration for today's cup has finished, come back tomorrow!")
//L16N [COTD qualifications] Matches are not joinable anymore
#Const C_Text_MatchOver_MatchNotJoinableAnymore _("Today's matches have already started, come back tomorrow!")
//L16N [COTD qualifications] Message displayed while synchronizing the player's record when they join the server
#Const C_Text_Synchronizing _("|COTD player record|Synchronization")

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_QualificationsProgress_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_QualificationsProgress_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Text Img_Background = "file://Media/Manialinks/Nadeo/TMNext/Modes/Knockout/TM_UI_HUD_02_KnockOut_Popup.dds";
	declare Text Img_BackgroundButtons = "file://Media/Manialinks/Nadeo/TMNext/Modes/Knockout/TM_UI_HUD_02_KnockOut_PopupWithButtons.dds";
	declare Text Img_ButtonLeft = "file://Media/Manialinks/Nadeo/TMNext/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup_ButtonLeft.dds";
	declare Text Img_ButtonRight = "file://Media/Manialinks/Nadeo/TMNext/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup_ButtonRight.dds";
	declare Text Img_TrophiesBg = "file://Media/Manialinks/Nadeo/TMNext/Modes/Royal/hud_royal_scoretable_team_icon_bg.dds";

	declare Vec2 ImgSize_Background = <1088., 624.>;
	declare Vec2 ImgSize_ButtonLeft = <520., 104.>;
	declare Vec2 ImgSize_ButtonRight = <496., 104.>;
	declare Vec2 ImgSize_TrophiesBg = <188., 108.>;

	declare Vec2 Size_RulesButton = <8., 8.>;
	declare Vec2 Size_Background = <54., 63.>;
	declare Vec2 Size_SideTitle = <Size_Background.X - Size_RulesButton.X - 4., Size_RulesButton.Y>;
	declare Vec2 Pos_SideTitle = <-Size_RulesButton.X*0.5, Size_Background.Y*0.47>;
	declare Real SizeX_Bg = 180.;
	declare Vec2 Size_Bg = <SizeX_Bg, SizeX_Bg * (ImgSize_Background.Y / ImgSize_Background.X)>;
	declare Vec2 Size_BgButtons = <SizeX_Bg + 2., (SizeX_Bg + 2.) * (ImgSize_Background.Y / ImgSize_Background.X)>;
	declare Vec2 Pos_Buttons = MLHelpers::SkewX(<0.85, Size_BgButtons.Y * -0.485>, 10.);
	declare Real SizeY_Button = Size_BgButtons.Y * (ImgSize_ButtonLeft.Y / ImgSize_Background.Y) * 1.01;
	declare Vec2 Size_ButtonLeft = <SizeY_Button * (ImgSize_ButtonLeft.X / ImgSize_ButtonLeft.Y), SizeY_Button>;
	declare Vec2 Size_ButtonRight = <SizeY_Button * (ImgSize_ButtonRight.X / ImgSize_ButtonRight.Y), SizeY_Button>;
	declare Vec2 Pos_Content = MLHelpers::SkewX(<0., Size_Bg.Y * 0.485>, 10.);
	declare Real SizeX_Content = SizeX_Bg * 0.85;
	declare Vec2 Pos_Title = MLHelpers::SkewX(<0., -12.>, 10.);
	declare Real TextSize_Title = 8.;
	declare Vec2 Pos_Rank = MLHelpers::SkewX(<0., -28.>, 10.);
	declare Vec2 Pos_LabelTrophies = MLHelpers::SkewX(<0., -36.>, 10.);
	declare Real SizeX_TrophiesBg = 35.;
	declare Vec2 Size_TrophiesBg = <SizeX_TrophiesBg, SizeX_TrophiesBg * (ImgSize_TrophiesBg.Y / ImgSize_TrophiesBg.X)>;
	declare Vec2 Pos_TrophiesBg = MLHelpers::SkewX(<0., -54.>, 10.);
	declare Vec2 Size_Trophies = <Size_TrophiesBg.X * 0.77, Size_TrophiesBg.Y * 0.86>;
	declare Vec2 Pos_Message = MLHelpers::SkewX(<0., -76.>, 10.);
	declare Vec2 Pos_Spinner = MLHelpers::SkewX(<0., -92.>, 10.);
	declare Vec2 Pos_AutoJoin = MLHelpers::SkewX(<0., -92.>, 10.);

	// Content of the COTD qualification rules pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_Rules = [
		PopUpMultiChoice::CreateDescriptionPart(COTDConst::C_Text_Rules_Content, <130., 30.>, 2.5, FontManager::C_GameFontSemiBold, "$t$i", <1., 1., 1.>, True)
	];
	
	declare Boolean PlatformIsFromFirstParty = Platform::IsFromFirstParty(System);
	if (PlatformIsFromFirstParty) {
		Size_SideTitle.X += Size_RulesButton.X;
		Pos_SideTitle.X = 0.;
	}

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Pop-ups -->
<frameinstance
	id="popupmultichoice-rules" z-index="10"
	modelid="{{{PopUpMultiChoice::C_Name}}}"
	data-title="{{{COTDConst::C_Text_Rules_Title}}}"
	data-description="{{{TL::MLEncode(Description_Rules.tojson())}}}"
	hidden="1"
/>

<!-- Frame global -->
<frame id="frame-global" size="320 180" halign="center" valign="center" z-index="-2" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_QualificationsProgress_Common::C_UIModuleConfig)}}} z-index="1">
		<frame id="frame-content">
			<frameinstance
				id="button-hide" pos="{{{-Size_Background.X*0.5}}} {{{Size_Background.Y*0.5 + 1.}}}" z-index="3"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-size="8 8"
				data-iconsize="8 8"
				data-bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-focuscolor="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
				data-iconcolor="{{{ColorPalette::C_Color_White}}}"
				data-iconfocuscolor="{{{ColorPalette::C_Color_White}}}"
				data-icon="{{{MenuConst::C_ImageUrl_Icon_Arrow_Left}}}"
				data-iconfocus="{{{MenuConst::C_ImageUrl_Icon_Arrow_Left}}}"
				data-opacityunfocus=".6"
				data-iconopacityunfocus=".3"
				data-halign="left" data-valign="bottom"
				data-nav-inputs="select;cancel"
				data-nav-targets="_;_"
				data-nav-group="{{{C_NavGroup_Side}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				hidden="{{{!C_EnableHideButton}}}"
			/>

			<!-- Hide the content of this frame with the 'button-hide' -->
			<frame id="frame-hideable-content">
				<frame id="frame-content-side">
					<quad id="quad_bg" size="{{{Size_Background.X}}} {{{Size_Background.Y}}}" bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}" halign="center" valign="center" opacity="0.6" z-index="0"/>
					<label id="label-title" pos="{{{Pos_SideTitle.X}}} {{{Pos_SideTitle.Y}}}" size="{{{Size_SideTitle.X}}} {{{Size_SideTitle.Y}}}" class="text-extrabold" text="{{{COTDConst::C_Text_Title}}}" textsize="3.5" valign="top" z-index="3"/>
					<frameinstance
						id="button-rules" pos="{{{Size_Background.X*0.5}}} {{{Size_Background.Y*0.5}}}" z-index="4"
						modelid="{{{Button::C_Name}}}"
						class="{{{Navigation::C_Class}}}"
						data-opacityunfocus="0.6"
						data-size="{{{Size_RulesButton.X}}} {{{Size_RulesButton.Y}}}"
						data-labelsize="{{{Size_RulesButton.X}}} {{{Size_RulesButton.Y}}}"
						data-bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}"
						data-focuscolor="{{{ColorPalette::C_Color_GreenTwo}}}"
						data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
						data-textcolor="{{{ColorPalette::C_Color_White}}}"
						data-textopacityunfocus="0.6"
						data-textitalicslope="0.1"
						data-textypos="-0.57"
						data-textsize="5"
						data-text="?"
						data-halign="right" data-valign="top"
						data-nav-inputs="select;cancel"
						data-nav-targets="_;_"
						data-nav-group="{{{C_NavGroup_Side}}}"
						data-nav-zone="{{{Button::C_NavZone}}}"
						hidden="{{{PlatformIsFromFirstParty}}}"
					/>
					<label id="label-result" class="text-semibold" pos="0 16" size="{{{Size_Background.X*0.8}}} 5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" textsize="2" textprefix="$i" z-index="3"/>
					<label id="label-trophies" class="text-semibold" pos="0 12" size="{{{Size_Background.X*0.8}}} 5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" textsize="2" textprefix="$i" z-index="3"/>
					<quad id="quad-result" halign="center" valign="center" pos="0 2" size="15 15" z-index="3" autoscale="0"/>
					<label id="label-message" class="text-semibold" pos="0 -4" size="{{{Size_Background.X*0.8}}} 40" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" textsize="2" textprefix="$i" autonewline="1" maxline="4" z-index="3"/>
					<label id="label-timer" class="text-semibold" pos="0 -17" size="{{{Size_Background.X*0.5}}} 12" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" textsize="2" textprefix="$i" z-index="3"/>
					<label id="label-auto-join" class="text-semibold" pos="0 -23" size="{{{Size_Background.X*0.5}}} 12" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" textsize="2" textprefix="$i" z-index="3"/>
					<frameinstance pos="0 -23" id="frame-spinner" modelid="{{{LoadingSpinner::C_Name}}}" z-index="3" scale="0.65"/>
					<frameinstance
						id="button-join" pos="{{{-Size_Background.X}}} {{{-Size_Background.Y*0.5-1.}}}" z-index="5"
						modelid="{{{ExpendableButton::C_Name}}}"
						class="{{{Navigation::C_Class}}}"
						data-text="{{{C_Text_Join}}}"
						data-text-offset="2.5 -0.55"
						data-width="{{{Size_Background.X}}}" data-height="10"
						data-styles="{{{ExpendableButton::C_Style_PageNextAnimated}}} {{{ExpendableButton::C_Style_HUD}}}"
						data-background-image-right="{{{MenuConst::C_ImageUrl_ButtonExtraRounded_End_Vertical}}}"
						data-background-colormode-right="{{{ExpendableButton::C_ColorMode_Colorize}}}"
						data-background-size-right="128 256"
						data-icon-offset="2.5 0"
						data-halign="center" data-valign="top"
						data-nav-inputs="select;cancel"
						data-nav-targets="_;_"
						data-nav-group="{{{C_NavGroup_Side}}}"
						data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
					/>
				</frame>
			</frame>
		</frame>
	</frame>

	<!-- Join match pop-up (on consoles only) -->
	<frame
		id="frame-content-center"
		class="{{{Navigation::C_Class}}}"
		z-index="2"
		data-nav-inputs="cancel;appmenu"
		data-nav-targets="_;_"
		data-nav-group="{{{C_NavGroup_ShowInGameMenu}}}"
		data-nav-selected="1"
	>
		<quad z-index="0" {{{MLHelpers::Size(Size_Bg)}}} halign="center" valign="center" image="{{{Img_Background}}}" />
		<quad id="quad-popup-background" z-index="0" {{{MLHelpers::Size(Size_Bg)}}} halign="center" valign="center" image="{{{Img_Background}}}" />
		<quad id="quad-popup-background-buttons" z-index="0" {{{MLHelpers::Size(Size_BgButtons)}}} halign="center" valign="center" image="{{{Img_BackgroundButtons}}}" opacity="0" hidden="1" />
		<frame {{{MLHelpers::Pos(Pos_Content)}}} z-index="1">
			<label id="label-title" {{{MLHelpers::Pos(Pos_Title)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" textsize="{{{TextSize_Title}}}" text="{{{COTDConst::C_Text_Title}}}" class="text-extrabold" />
			<label id="label-rank" {{{MLHelpers::Pos(Pos_Rank)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" textsize="4" class="text-extrabold" />
			<label id="label-trophies" {{{MLHelpers::Pos(Pos_LabelTrophies)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" textsize="4" class="text-extrabold" />
			<frame {{{MLHelpers::Pos(Pos_TrophiesBg)}}}>
				<quad z-index="0" {{{MLHelpers::Size(Size_TrophiesBg)}}} halign="center" valign="center" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.5" image="{{{Img_TrophiesBg}}}" />
				<quad id="quad-trophies" z-index="1" {{{MLHelpers::Size(Size_Trophies)}}} halign="center" valign="center" keepratio="fit" />
			</frame>
			<label id="label-message" {{{MLHelpers::Pos(Pos_Message)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" maxline="3" class="text-extrabold" />
			<frameinstance id="frame-spinner" modelid="{{{LoadingSpinner::C_Name}}}" {{{MLHelpers::Pos(Pos_Spinner)}}} scale="0.65" />
			<label id="label-auto-join" {{{MLHelpers::Pos(Pos_AutoJoin)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" class="text-extrabold" />
		</frame>
		<frame {{{MLHelpers::Pos(Pos_Buttons)}}} z-index="2">
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-left"
				pos="2.3 0" z-index="3"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{C_Text_Stay}}}"
				data-size="{{{Size_ButtonLeft.X}}} {{{Size_ButtonLeft.Y}}}"
				data-labelsize="{{{Size_ButtonLeft.X}}} {{{Size_ButtonLeft.Y}}}"
				data-textxpos="0.5"
				data-opacityunfocus=".5"
				data-image="{{{Img_ButtonLeft}}}"
				data-imagefocus="{{{Img_ButtonLeft}}}"
				data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-focuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-textcolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
				data-iconcolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-iconfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-icon="{{{MenuConst::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
				data-iconfocus="{{{MenuConst::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
				data-iconxpos=".15"
				data-iconypos="-.5"
				data-textsize="5"
				data-textopacityunfocus=".5"
				data-iconopacityunfocus=".5"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textitalicslope=".2"
				data-halign="right"
				data-nav-inputs="select;right"
				data-nav-targets="_;button-right"
				data-nav-group="{{{C_NavGroup_Center}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-right"
				pos="-1.2 0" z-index="3"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{C_Text_Join}}}"
				data-size="{{{Size_ButtonRight.X}}} {{{Size_ButtonRight.Y}}}"
				data-labelsize="{{{Size_ButtonRight.X}}} {{{Size_ButtonRight.Y}}}"
				data-textxpos="0.5"
				data-opacityunfocus=".5"
				data-image="{{{Img_ButtonRight}}}"
				data-imagefocus="{{{Img_ButtonRight}}}"
				data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-focuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
				data-textcolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
				data-iconcolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-iconfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-icon="{{{MenuConst::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
				data-iconfocus="{{{MenuConst::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
				data-iconxpos=".85"
				data-iconypos="-.5"
				data-textsize="5"
				data-textopacityunfocus=".5"
				data-iconopacityunfocus=".5"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textitalicslope=".2"
				data-halign="left"
				data-nav-inputs="select;left"
				data-nav-targets="_;button-left"
				data-nav-group="{{{C_NavGroup_Center}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as MenuConst
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/COTDQualifications/Constants.Script.txt" as COTDConst
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/COTDQualifications/NetShare.Script.txt" as NetShare

#Struct K_ContentControls {
	CMlLabel Label_Result;
	CMlLabel Label_Trophies;
	CMlQuad Quad_Result;
	CMlLabel Label_Message;
	CMlFrame Frame_Spinner;
	CMlLabel Label_AutoJoin;
}

#Struct K_Controls {
	K_ContentControls ContentSide;
	K_ContentControls ContentCenter;
	CMlFrame Frame_Global;
	CMlFrame Frame_Content;
	CMlFrame Frame_ContentSide;
	CMlFrame Frame_ContentCenter;
	CMlFrame Frame_HideableContent;
	CMlFrame Frame_Rules;
	CMlLabel Label_Timer;
	CMlFrame Button_Hide;
	CMlFrame Button_Help;
	CMlFrame Button_Join;
	CMlFrame Button_Left;
	CMlFrame Button_Right;
	CMlFrame PopUpMultiChoice_Rules;
	CMlQuad Quad_PopUpBackground;
	CMlQuad Quad_PopUpBackgroundButtons;
}

#Struct K_State {
	K_Controls Controls;
	Boolean DisplayModule;
	Integer CurrentState;
	Boolean NeedStateUpdate;
	Boolean NeedOffset;
	Text JoinLink;
	Integer ServerReadyTime;
	Boolean ServerIsReady;
	Integer CurrentRank;
	Boolean CanDisplayPopUp;
	Boolean ScoresTableIsDisplayed;
	Boolean PopUpIsVisible;
	Boolean ButtonClicked;
	Boolean CanAutoJoin;
}

#Const C_State_Null K_State {
	Controls = K_Controls {},
	DisplayModule = False,
	CurrentState = 0, //< C_State_Hidden
	NeedOffset = False,
	NeedStateUpdate = True,
	JoinLink = "",
	CurrentRank = -1,
	CanDisplayPopUp = False,
	ScoresTableIsDisplayed = False,
	PopUpIsVisible = False,
	ButtonClicked = False,
	CanAutoJoin = True
}

#Const C_State_Hidden 0
#Const C_State_BeforeMatch 1
#Const C_State_MatchStarted_NoResult 2
#Const C_State_MatchStarted_Registering 3
#Const C_State_MatchOver_WaitJoinLink 4
#Const C_State_MatchOver_WaitServerReady 5
#Const C_State_MatchOver_JoinLinkReady 6
#Const C_State_MatchOver_RegistrationsOver 7
#Const C_State_MatchOver_MatchNotJoinableAnymore 8
#Const C_State_Synchronizing 9

#Const C_NavGroup_Side {{{dump(C_NavGroup_Side)}}}
#Const C_NavGroup_Center {{{dump(C_NavGroup_Center)}}}
#Const C_NavGroup_ShowInGameMenu {{{dump(C_NavGroup_ShowInGameMenu)}}}

#Const C_Text_Result {{{dump(C_Text_Result)}}}
#Const C_Text_ResultTrophy {{{dump(C_Text_ResultTrophy)}}}
#Const C_Text_BeforeMatch {{{dump(C_Text_BeforeMatch)}}}
#Const C_Text_MatchStarted_NoResult {{{dump(C_Text_MatchStarted_NoResult)}}}
#Const C_Text_MatchStarted_Registering {{{dump(C_Text_MatchStarted_Registering)}}}
#Const C_Text_MatchOver_WaitJoinLink {{{dump(C_Text_MatchOver_WaitJoinLink)}}}
#Const C_Text_MatchOver_WaitServerReady {{{dump(C_Text_MatchOver_WaitServerReady)}}}
#Const C_Text_MatchOver_JoinLinkReady {{{dump(C_Text_MatchOver_JoinLinkReady)}}}
#Const C_Text_MatchOver_JoinLinkReadySideFirstParty {{{dump(C_Text_MatchOver_JoinLinkReadySideFirstParty)}}}
#Const C_Text_MatchOver_RegistrationsOver {{{dump(C_Text_MatchOver_RegistrationsOver)}}}
#Const C_Text_MatchOver_MatchNotJoinableAnymore {{{dump(C_Text_MatchOver_MatchNotJoinableAnymore)}}}
#Const C_Text_Synchronizing {{{dump(C_Text_Synchronizing)}}}

// Now we receive the joinlink to the knockout server only once we are sure it is ready and joinable.
// We don't need to wait before using the joinlink anymore. Before we had to add a 30 seconds delay.
// See: /trackmania-next/tmnext/-/issues/5073#note_263334
#Const C_JoinLinkValidDelay 0
#Const C_InputPriority {{{dump(C_InputPriority)}}}
#Const C_PlatformIsFromFirstParty {{{dump(PlatformIsFromFirstParty)}}}
""",
"""
Boolean JoinLinkIsValid(K_State _State) {
	return (
		_State.JoinLink != "" &&
		_State.ServerIsReady
	);
}

Void JoinNextMatch(K_State _State, Boolean _SkipConfirm) {
	declare K_State TmpState = _State;
	if (_SkipConfirm) {
		TmpState.JoinLink = TL::Replace(TmpState.JoinLink, "#join", "#qjoin");
	}
	if (JoinLinkIsValid(TmpState)) {
		OpenLink(TmpState.JoinLink, CMlScript::LinkType::Goto);
	}
}

Void StartHideAnimation(K_Controls _Controls) {
	if (_Controls.Frame_HideableContent != Null) {
		declare Real HiddenPosX = -60.;
		declare Real VisiblePosX = 0.;
		declare Vec2 StartPos = _Controls.Frame_HideableContent.RelativePosition_V3;
		declare Real EndPosX = VisiblePosX;

		if (StartPos.X == HiddenPosX) {
			EndPosX = VisiblePosX;
			{{{Button::P}}}SetIcon(This, _Controls.Button_Hide, MenuConst::C_ImageUrl_Icon_Arrow_Left);
			{{{Button::P}}}SetIconFocus(This, _Controls.Button_Hide, MenuConst::C_ImageUrl_Icon_Arrow_Left);
		} else {
			EndPosX = HiddenPosX;
			{{{Button::P}}}SetIcon(This, _Controls.Button_Hide, MenuConst::C_ImageUrl_Icon_Arrow_Right);
			{{{Button::P}}}SetIconFocus(This, _Controls.Button_Hide, MenuConst::C_ImageUrl_Icon_Arrow_Right);
		}

		AnimMgr.Flush(_Controls.Frame_HideableContent);
		AnimMgr.Add(_Controls.Frame_HideableContent, "<anim pos=\"" ^EndPosX^" "^StartPos.Y^ "\" />", 250, CAnimManager::EAnimManagerEasing::Linear);
	}
}

Void Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton((_From as CMlFrame))) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton((_From as CMlFrame))) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton((_To as CMlFrame))) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton((_To as CMlFrame))) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

K_ContentControls GetContentControls(K_State _State) {
	if (_State.PopUpIsVisible) {
		return _State.Controls.ContentCenter;
	}
	return _State.Controls.ContentSide;
}

K_State SetVisibility(K_State _State, Boolean _DisplayModule) {
	declare K_State State = _State;
	State.DisplayModule = _DisplayModule;
	State.NeedStateUpdate = True;
	State.Controls.Frame_Global.Visible = State.DisplayModule;
	return State;
}

Void UpdatePopUpButtonsVisibility(K_State _State) {
	declare Boolean ButtonsAreVisible = _State.PopUpIsVisible && _State.CurrentState == C_State_MatchOver_JoinLinkReady;

	AnimMgr.Flush(_State.Controls.Quad_PopUpBackground);
	AnimMgr.Flush(_State.Controls.Quad_PopUpBackgroundButtons);
	if (ButtonsAreVisible) {
		AnimMgr.Add(_State.Controls.Quad_PopUpBackgroundButtons, "<anim opacity=\"1\" hidden=\"0\" />", 100, CAnimManager::EAnimManagerEasing::QuadIn);
		AnimMgr.Add(_State.Controls.Quad_PopUpBackground, "<anim opacity=\"0\" hidden=\"1\" />", Now + 100, 100, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_State.Controls.Quad_PopUpBackground, "<anim opacity=\"1\" hidden=\"0\" />", Now + 250, 100, CAnimManager::EAnimManagerEasing::QuadIn);
		AnimMgr.Add(_State.Controls.Quad_PopUpBackgroundButtons, "<anim opacity=\"0\" hidden=\"1\" />", Now + 250 + 100, 100, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	_State.Controls.Button_Left.Visible = ButtonsAreVisible;
	_State.Controls.Button_Right.Visible = ButtonsAreVisible;
	{{{Navigation::P}}}Lock(_State.Controls.Button_Left, !_State.Controls.Button_Left.Visible);
	{{{Navigation::P}}}Lock(_State.Controls.Button_Right, !_State.Controls.Button_Right.Visible);

	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, C_NavGroup_Center);
	if (FocusedControl == Null) {
		Focus(FocusedControl, _State.Controls.Button_Right);
	}
}

K_State SetPopUpVisibility(
	K_State _State,
	Boolean _PlatformIsFromFirstParty,
	Boolean _CanDisplayPopUp,
	Boolean _ScoresTableIsDisplayed,
	Integer _CurrentState
) {
	declare K_State State = _State;
	
	State.CanDisplayPopUp = _CanDisplayPopUp;
	State.ScoresTableIsDisplayed = _ScoresTableIsDisplayed;
	State.PopUpIsVisible = (
		_PlatformIsFromFirstParty &&
		State.CanDisplayPopUp &&
		!State.ButtonClicked &&
		!State.ScoresTableIsDisplayed && (
			_CurrentState == C_State_MatchOver_WaitJoinLink ||
			_CurrentState == C_State_MatchOver_WaitServerReady ||
			_CurrentState == C_State_MatchOver_JoinLinkReady
		)
	);
	State.Controls.Frame_ContentSide.Visible = !State.PopUpIsVisible;
	State.Controls.Frame_ContentCenter.Visible = State.PopUpIsVisible;
	EnableMenuNavigation(State.PopUpIsVisible, False, False, Null, C_InputPriority);

	UpdatePopUpButtonsVisibility(State);

	return State;
}
K_State SetPopUpVisibility(
	K_State _State,
	Boolean _CanDisplayPopUp,
	Boolean _ScoresTableIsDisplayed,
	Integer _CurrentState
) {
	return SetPopUpVisibility(
		_State,
		C_PlatformIsFromFirstParty,
		_CanDisplayPopUp,
		_ScoresTableIsDisplayed,
		_CurrentState
	);
}

Void DisplayResult(K_State _State, Integer _CurrentRank, Text _CompetitionType) {
	declare K_ContentControls ContentControls = GetContentControls(_State);
	ContentControls.Label_Result.Visible = _CurrentRank > 0;
	ContentControls.Label_Trophies.Visible = _CurrentRank > 0;
	ContentControls.Quad_Result.Visible = _CurrentRank > 0;
	if (_CurrentRank > 0) {
		declare Integer[Integer] EarnedTrophies;
		declare Integer[Integer][Integer] RankToTrophies = COTDConst::GetTrophiesForCompetitionType(_CompetitionType);
		foreach (Rank => Rewards in RankToTrophies) {
			if (_CurrentRank <= Rank) {
				EarnedTrophies = Rewards;
			} else {
				break;
			}
		}
		declare Integer BestTrophy = 0;
		declare Integer BestTrophyCount = 0;
		foreach (Trophy => TrophyCount in EarnedTrophies) {
			if (Trophy > BestTrophy) {
				BestTrophy = Trophy;
				BestTrophyCount = TrophyCount;
			}
		}
		switch (BestTrophy) {
			case 7: {
				ContentControls.Quad_Result.ChangeImageUrl(MenuConst::C_ImageUrl_Trophy_128_Gold1);
				ContentControls.Label_Result.Value = TL::Compose(C_Text_Result, ""^_CurrentRank);
				ContentControls.Label_Trophies.Value = TL::Compose(C_Text_ResultTrophy, ""^BestTrophyCount, ""^BestTrophy);
			}
			case 6: {
				ContentControls.Quad_Result.ChangeImageUrl(MenuConst::C_ImageUrl_Trophy_128_Silver3);
				ContentControls.Label_Result.Value = TL::Compose(C_Text_Result, ""^_CurrentRank);
				ContentControls.Label_Trophies.Value = TL::Compose(C_Text_ResultTrophy, ""^BestTrophyCount, ""^BestTrophy);
			}
			case 5: {
				ContentControls.Quad_Result.ChangeImageUrl(MenuConst::C_ImageUrl_Trophy_128_Silver2);
				ContentControls.Label_Result.Value = TL::Compose(C_Text_Result, ""^_CurrentRank);
				ContentControls.Label_Trophies.Value = TL::Compose(C_Text_ResultTrophy, ""^BestTrophyCount, ""^BestTrophy);
			}
			case 4: {
				ContentControls.Quad_Result.ChangeImageUrl(MenuConst::C_ImageUrl_Trophy_128_Silver1);
				ContentControls.Label_Result.Value = TL::Compose(C_Text_Result, ""^_CurrentRank);
				ContentControls.Label_Trophies.Value = TL::Compose(C_Text_ResultTrophy, ""^BestTrophyCount, ""^BestTrophy);
			}
			case 3: {
				ContentControls.Quad_Result.ChangeImageUrl(MenuConst::C_ImageUrl_Trophy_128_Bronze3);
				ContentControls.Label_Result.Value = TL::Compose(C_Text_Result, ""^_CurrentRank);
				ContentControls.Label_Trophies.Value = TL::Compose(C_Text_ResultTrophy, ""^BestTrophyCount, ""^BestTrophy);
			}
			default: {
				ContentControls.Quad_Result.ChangeImageUrl("");
				ContentControls.Label_Result.Value = TL::Compose(C_Text_Result, ""^_CurrentRank);
				ContentControls.Label_Trophies.Value = "";
			}
		}
	}
}

K_State DisplayState(K_State _State, Integer _CurrentState, Integer _CurrentRank, Text _CompetitionType) {
	declare K_State State = _State;
	State.CurrentState = _CurrentState;

	State = SetPopUpVisibility(State, State.CanDisplayPopUp, State.ScoresTableIsDisplayed, State.CurrentState);
	declare K_ContentControls ContentControls = GetContentControls(State);

	// Reset display
	State.Controls.Frame_Content.Visible = True;
	ContentControls.Frame_Spinner.Visible = False;
	State.Controls.Label_Timer.Value = "";
	ContentControls.Label_Message.Value = "";
	State.Controls.ContentSide.Label_Message.RelativePosition_V3.Y = -4.;
	State.Controls.ContentSide.Label_Message.MaxLine = 4;
	DisplayResult(State, _CurrentRank, _CompetitionType);
	State.Controls.Button_Join.RelativePosition_V3 = <{{{-Size_Background.X}}}, {{{-Size_Background.Y*0.5-1.}}}>;
	{{{Button::P}}}HideAndLock(State.Controls.Button_Join);

	if (
		State.CurrentState != C_State_MatchOver_WaitJoinLink &&
		State.CurrentState != C_State_MatchOver_WaitServerReady &&
		State.CurrentState != C_State_MatchStarted_Registering &&
		State.CurrentState != C_State_Synchronizing
	) {
		{{{LoadingSpinner::P}}}StopAnimation(This, ContentControls.Frame_Spinner);
	}

	switch (State.CurrentState) {
		case C_State_Hidden: {
			State.Controls.Frame_Content.Visible = False;
		}
		case C_State_BeforeMatch: {
			ContentControls.Label_Message.Value = C_Text_BeforeMatch;
		}
		case C_State_MatchStarted_NoResult: {
			ContentControls.Label_Message.Value = C_Text_MatchStarted_NoResult;
		}
		case C_State_MatchStarted_Registering: {
			State.Controls.ContentSide.Label_Message.RelativePosition_V3.Y = 0.;
			ContentControls.Label_Message.Value = C_Text_MatchStarted_Registering;
			ContentControls.Frame_Spinner.Visible = True;
			{{{LoadingSpinner::P}}}StartAnimation(This, ContentControls.Frame_Spinner);
		}
		case C_State_MatchOver_WaitJoinLink: {
			State.Controls.ContentSide.Label_Message.MaxLine = 2;
			State.Controls.ContentSide.Label_Message.RelativePosition_V3.Y = -9.;
			ContentControls.Label_Message.Value = C_Text_MatchOver_WaitJoinLink;
			ContentControls.Frame_Spinner.Visible = True;
			{{{LoadingSpinner::P}}}StartAnimation(This, ContentControls.Frame_Spinner);
			DisplayResult(State, _CurrentRank, _CompetitionType);
		}
		case C_State_MatchOver_WaitServerReady: {
			State.Controls.ContentSide.Label_Message.MaxLine = 2;
			State.Controls.ContentSide.Label_Message.RelativePosition_V3.Y = -9.;
			ContentControls.Label_Message.Value = C_Text_MatchOver_WaitServerReady;
			ContentControls.Frame_Spinner.Visible = True;
			{{{LoadingSpinner::P}}}StartAnimation(This, ContentControls.Frame_Spinner);
			DisplayResult(State, _CurrentRank, _CompetitionType);
		}
		case C_State_MatchOver_JoinLinkReady: {
			State.Controls.ContentCenter.Label_Message.Value = C_Text_MatchOver_JoinLinkReady;
			State.Controls.ContentSide.Label_Message.RelativePosition_V3.Y = -11.;
			if (C_PlatformIsFromFirstParty) {
				State.Controls.ContentSide.Label_Message.Value = C_Text_MatchOver_JoinLinkReadySideFirstParty;
			} else {
				State.Controls.ContentSide.Label_Message.Value = C_Text_MatchOver_JoinLinkReady;
				{{{Button::P}}}ShowAndUnlock(State.Controls.Button_Join);
				AnimMgr.Flush(State.Controls.Button_Join);
				AnimMgr.Add(State.Controls.Button_Join, "<anim pos=\"0 "^State.Controls.Button_Join.RelativePosition_V3.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
			DisplayResult(State, _CurrentRank, _CompetitionType);
		}
		case C_State_MatchOver_RegistrationsOver: {
			ContentControls.Label_Message.Value = C_Text_MatchOver_RegistrationsOver;
		}
		case C_State_MatchOver_MatchNotJoinableAnymore: {
			ContentControls.Label_Message.Value = C_Text_MatchOver_MatchNotJoinableAnymore;
		}
		case C_State_Synchronizing: {
			State.Controls.ContentSide.Label_Message.RelativePosition_V3.Y = 0.;
			ContentControls.Label_Message.Value = C_Text_Synchronizing;
			ContentControls.Frame_Spinner.Visible = True;
			{{{LoadingSpinner::P}}}StartAnimation(This, ContentControls.Frame_Spinner);
		}
	}
	Tools::FitLabelValue(State.Controls.ContentSide.Label_Message, 2., 1., 0.25);

	return State;
}
K_State DisplayState(K_State _State, Integer _CurrentState, Text _CompetitionType) {
	return DisplayState(_State, _CurrentState, -1, _CompetitionType);
}

K_State StayOnServer(K_State _State) {
	declare K_State State = _State;

	State.ButtonClicked = True;
	State.NeedStateUpdate = True;
	State = SetPopUpVisibility(State, State.CanDisplayPopUp, State.ScoresTableIsDisplayed, State.CurrentState);

	return State;
}

K_State Select(K_State _State, CMlControl _SelectedControl) {
	if (_SelectedControl == Null) return _State;

	declare K_State State = _State;

	switch (_SelectedControl.ControlId) {
		case "button-hide": StartHideAnimation(State.Controls);
		case "button-join": JoinNextMatch(State, True);
		case "button-left": State = StayOnServer(State);
		case "button-right": JoinNextMatch(State, True);
		case "button-rules": {{{PopUpMultiChoice::P}}}Open(This, State.Controls.PopUpMultiChoice_Rules);
	}

	return State;
}

***MainInit***
***
declare netread Boolean Net_COTDQualificationsProgress_IsVisible for UI = False;
declare netread Text Net_COTDQualificationsProgress_JoinLink for UI = "";
declare netread Integer Net_COTDQualificationsProgress_JoinLinkUpdate for UI = 0;
declare netread Integer Net_COTDQualificationsProgress_QualificationsStartTime for Teams[0] = -1;
declare netread Integer Net_COTDQualificationsProgress_QualificationsMaxJoinTime for Teams[0] = 0;
declare netread Integer Net_COTDQualificationsProgress_AutoJoinTime for Teams[0] = 0;
declare netread Text Net_COTDQualificationsProgress_CompetitionType for Teams[0] = "";
declare netread Boolean Net_COTDQualificationsProgress_CanDisplayPopUp for Teams[0] = False;
declare netread Integer Net_COTDQualificationsProgress_ResetButtonClicked for Teams[0] = 0;

declare K_State State = C_State_Null;
declare Integer JoinLinkUpdate;
declare Integer QualificationsProgress;
declare Text CurrentCompetitionType;
declare Integer AutoJoinTime;
declare Integer ResetButtonClicked;
declare Integer LocalRaceTime;
declare Integer APIRaceTime;
declare Integer QualificationsJoinTime;
declare Boolean IsSynchronizingRecord;
***

***MainStart***
***
State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_Content <=> (State.Controls.Frame_Global.GetFirstChild("frame-content") as CMlFrame);
State.Controls.Frame_HideableContent <=> (State.Controls.Frame_Global.GetFirstChild("frame-hideable-content") as CMlFrame);
State.Controls.Frame_Rules <=> (State.Controls.Frame_Global.GetFirstChild("frame-rules-content") as CMlFrame);
State.Controls.Label_Timer <=> (State.Controls.Frame_Global.GetFirstChild("label-timer") as CMlLabel);
State.Controls.Button_Hide <=> (State.Controls.Frame_Global.GetFirstChild("button-hide") as CMlFrame);
State.Controls.Button_Help <=> (State.Controls.Frame_Global.GetFirstChild("button-help") as CMlFrame);
State.Controls.Button_Join <=> (State.Controls.Frame_Global.GetFirstChild("button-join") as CMlFrame);
State.Controls.Button_Left <=> (State.Controls.Frame_Global.GetFirstChild("button-left") as CMlFrame);
State.Controls.Button_Right <=> (State.Controls.Frame_Global.GetFirstChild("button-right") as CMlFrame);
State.Controls.Quad_PopUpBackground <=> (State.Controls.Frame_Global.GetFirstChild("quad-popup-background") as CMlQuad);
State.Controls.Quad_PopUpBackgroundButtons <=> (State.Controls.Frame_Global.GetFirstChild("quad-popup-background-buttons") as CMlQuad);
State.Controls.PopUpMultiChoice_Rules <=> (Page.GetFirstChild("popupmultichoice-rules") as CMlFrame);

State.Controls.Frame_ContentSide <=> (State.Controls.Frame_Global.GetFirstChild("frame-content-side") as CMlFrame);
State.Controls.ContentSide = K_ContentControls {
	Label_Result = (State.Controls.Frame_ContentSide.GetFirstChild("label-result") as CMlLabel),
	Label_Trophies = (State.Controls.Frame_ContentSide.GetFirstChild("label-trophies") as CMlLabel),
	Quad_Result = (State.Controls.Frame_ContentSide.GetFirstChild("quad-result") as CMlQuad),
	Label_Message = (State.Controls.Frame_ContentSide.GetFirstChild("label-message") as CMlLabel),
	Frame_Spinner = (State.Controls.Frame_ContentSide.GetFirstChild("frame-spinner") as CMlFrame),
	Label_AutoJoin = (State.Controls.Frame_ContentSide.GetFirstChild("label-auto-join") as CMlLabel)
};

State.Controls.Frame_ContentCenter <=> (State.Controls.Frame_Global.GetFirstChild("frame-content-center") as CMlFrame);
State.Controls.ContentCenter = K_ContentControls {
	Label_Result = (State.Controls.Frame_ContentCenter.GetFirstChild("label-rank") as CMlLabel),
	Label_Trophies = (State.Controls.Frame_ContentCenter.GetFirstChild("label-trophies") as CMlLabel),
	Quad_Result = (State.Controls.Frame_ContentCenter.GetFirstChild("quad-trophies") as CMlQuad),
	Label_Message = (State.Controls.Frame_ContentCenter.GetFirstChild("label-message") as CMlLabel),
	Frame_Spinner = (State.Controls.Frame_ContentCenter.GetFirstChild("frame-spinner") as CMlFrame),
	Label_AutoJoin = (State.Controls.Frame_ContentCenter.GetFirstChild("label-auto-join") as CMlLabel)
};

JoinLinkUpdate = 0;
QualificationsProgress = COTDConst::C_Progress_Null;
LocalRaceTime = NetShare::GetMyLocalRaceTime(UI);
APIRaceTime = NetShare::GetMyAPIRaceTime(UI);
QualificationsJoinTime = NetShare::GetMyQualificationsJoinTime(UI);
IsSynchronizingRecord = NetShare::IsSynchronizingRecord(UI);

{{{Navigation::P}}}UseLocalEvents(This, True);
Focus({{{Navigation::P}}}GetFocusedControl(This, C_NavGroup_Center), State.Controls.Button_Right);
State = SetPopUpVisibility(State, State.CanDisplayPopUp, State.ScoresTableIsDisplayed, State.CurrentState);
State = SetVisibility(State, State.Controls.Frame_Global.Visible);
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.DisplayModule != Net_COTDQualificationsProgress_IsVisible) {
		State = SetVisibility(State, Net_COTDQualificationsProgress_IsVisible);
	}

	if (JoinLinkUpdate != Net_COTDQualificationsProgress_JoinLinkUpdate) {
		JoinLinkUpdate = Net_COTDQualificationsProgress_JoinLinkUpdate;
		if (State.JoinLink != Net_COTDQualificationsProgress_JoinLink) {
			State.JoinLink = Net_COTDQualificationsProgress_JoinLink;
			State.ServerReadyTime = Now + C_JoinLinkValidDelay;
			State.ServerIsReady = False;
		}
		State.NeedStateUpdate = True;
	}

	if (CurrentCompetitionType != Net_COTDQualificationsProgress_CompetitionType) {
		CurrentCompetitionType = Net_COTDQualificationsProgress_CompetitionType;
		State.NeedStateUpdate = True;
	}

	if (ResetButtonClicked != Net_COTDQualificationsProgress_ResetButtonClicked) {
		ResetButtonClicked = Net_COTDQualificationsProgress_ResetButtonClicked;
		State.ButtonClicked = False;
		State.NeedStateUpdate = True;
		State = SetPopUpVisibility(State, State.CanDisplayPopUp, State.ScoresTableIsDisplayed, State.CurrentState);
	}

	if (State.CanDisplayPopUp != Net_COTDQualificationsProgress_CanDisplayPopUp) {
		State = SetPopUpVisibility(State, Net_COTDQualificationsProgress_CanDisplayPopUp, State.ScoresTableIsDisplayed, State.CurrentState);
		State.NeedStateUpdate = True;
	}

	if (State.ScoresTableIsDisplayed != {{{ScoresTable::P}}}IsDisplayed()) {
		State = SetPopUpVisibility(State, State.CanDisplayPopUp, {{{ScoresTable::P}}}IsDisplayed(), State.CurrentState);
		State.NeedStateUpdate = True;
	}

	if (
		State.CurrentState == C_State_BeforeMatch &&
		Net_COTDQualificationsProgress_QualificationsStartTime >= GameTime
	) {
		State.Controls.Label_Timer.Value = TL::TimeToText(Net_COTDQualificationsProgress_QualificationsStartTime - GameTime, False);
		if (State.Controls.ContentSide.Label_Message.RelativePosition_V3.Y < -2.) State.Controls.ContentSide.Label_Message.RelativePosition_V3.Y = -2.;
	} else if (State.Controls.Label_Timer.Value != "") {
		State.Controls.Label_Timer.Value = "";
	}

	if (AutoJoinTime != Net_COTDQualificationsProgress_AutoJoinTime) {
		AutoJoinTime = Net_COTDQualificationsProgress_AutoJoinTime;
		State.CanAutoJoin = AutoJoinTime > 0;
	}

	if (
		State.CanAutoJoin &&
		AutoJoinTime > 0 &&
		AutoJoinTime <= GameTime &&
		State.CurrentState == C_State_MatchOver_JoinLinkReady
	) {
		State.CanAutoJoin = False;
		JoinNextMatch(State, True);
	}

	if (
		State.CurrentState == C_State_MatchOver_JoinLinkReady &&
		AutoJoinTime > 0 &&
		AutoJoinTime - GameTime > 0
	) {
		declare CMlLabel Label_AutoJoin = State.Controls.ContentSide.Label_AutoJoin;
		if (State.PopUpIsVisible) Label_AutoJoin = State.Controls.ContentCenter.Label_AutoJoin;
		Label_AutoJoin.Value = TL::TimeToText(AutoJoinTime - GameTime + 1000, False);
	} else {
		declare CMlLabel Label_AutoJoin = State.Controls.ContentSide.Label_AutoJoin;
		if (State.PopUpIsVisible) Label_AutoJoin = State.Controls.ContentCenter.Label_AutoJoin;
		if (Label_AutoJoin.Value != "") {
			Label_AutoJoin.Value = "";
		}
	}

	if (
		LocalRaceTime != NetShare::GetMyLocalRaceTime(UI) ||
		APIRaceTime != NetShare::GetMyAPIRaceTime(UI) ||
		QualificationsJoinTime != NetShare::GetMyQualificationsJoinTime(UI) ||
		IsSynchronizingRecord != NetShare::IsSynchronizingRecord(UI) ||
		QualificationsProgress != NetShare::GetQualificationsProgress(Teams[0])
	) {
		LocalRaceTime = NetShare::GetMyLocalRaceTime(UI);
		APIRaceTime = NetShare::GetMyAPIRaceTime(UI);
		QualificationsJoinTime = NetShare::GetMyQualificationsJoinTime(UI);
		IsSynchronizingRecord = NetShare::IsSynchronizingRecord(UI);
		QualificationsProgress = NetShare::GetQualificationsProgress(Teams[0]);
		State.NeedStateUpdate = True;
	}

	if (
		!State.ServerIsReady &&
		State.ServerReadyTime > 0 &&
		State.ServerReadyTime <= Now
	) {
		State.ServerIsReady = True;
		State.ServerReadyTime = -1;
		State.NeedStateUpdate = True;
	}

	if (State.CurrentRank != NetShare::GetMyRank(UI)) {
		State.CurrentRank = NetShare::GetMyRank(UI);
		State.NeedStateUpdate = True;
	}

	if (State.NeedStateUpdate) {
		State.NeedStateUpdate = False;
		switch (QualificationsProgress) {
			case COTDConst::C_Progress_Null: {
				State = DisplayState(State, C_State_Hidden, CurrentCompetitionType);
			}
			case COTDConst::C_Progress_RequestNextCOTD, COTDConst::C_Progress_WaitNextCOTD: {
				State = DisplayState(State, C_State_BeforeMatch, CurrentCompetitionType);
			}
			case COTDConst::C_Progress_PlayQualifications: {
				// Player just joined the server and we did not check their record on the API yet
				if (IsSynchronizingRecord && APIRaceTime <= 0) {
					State = DisplayState(State, C_State_Synchronizing, CurrentCompetitionType);
				}
				// Player joined too late to qualify
				else if (
					Net_COTDQualificationsProgress_QualificationsMaxJoinTime > 0 &&
					QualificationsJoinTime > 0 &&
					QualificationsJoinTime > Net_COTDQualificationsProgress_QualificationsMaxJoinTime &&
					APIRaceTime <= 0
				) {
					State = DisplayState(State, C_State_MatchOver_RegistrationsOver, CurrentCompetitionType);
				}
				// Player did not finished the race yet
				else if (LocalRaceTime <= 0 && APIRaceTime <= 0) {
					State = DisplayState(State, C_State_MatchStarted_NoResult, CurrentCompetitionType);
				}
				// Player finished the race at least once but the API did not validated a time yet
				else if (APIRaceTime <= 0) {
					State = DisplayState(State, C_State_MatchStarted_Registering, CurrentCompetitionType);
				}
				// Player finished the race at least once and this has been validated by the API
				else {
					State = DisplayState(State, C_State_Hidden, CurrentCompetitionType);
				}
			}
			case COTDConst::C_Progress_WaitMatchesGeneration, COTDConst::C_Progress_TransferPlayersToKnockout: {
				if (JoinLinkIsValid(State)) {
					State = DisplayState(State, C_State_MatchOver_JoinLinkReady, State.CurrentRank, CurrentCompetitionType);
				} else if (APIRaceTime > 0) {
					if (State.JoinLink == "") {
						State = DisplayState(State, C_State_MatchOver_WaitJoinLink, State.CurrentRank, CurrentCompetitionType);
					} else {
						State = DisplayState(State, C_State_MatchOver_WaitServerReady, State.CurrentRank, CurrentCompetitionType);
					}
				} else if (IsSynchronizingRecord && APIRaceTime <= 0) {
					State = DisplayState(State, C_State_Synchronizing, CurrentCompetitionType);
				} else {
					State = DisplayState(State, C_State_MatchOver_RegistrationsOver, CurrentCompetitionType);
				}
			}
			case COTDConst::C_Progress_TooLateToJoinKnockout: {
				if (APIRaceTime > 0) {
					State = DisplayState(State, C_State_MatchOver_MatchNotJoinableAnymore, CurrentCompetitionType);
				} else {
					State = DisplayState(State, C_State_MatchOver_RegistrationsOver, CurrentCompetitionType);
				}
			}
			case COTDConst::C_Progress_ServerDutyIsOver: {
				State = DisplayState(State, C_State_Hidden, CurrentCompetitionType);
			}
		}
	}

	// Check for Navigation events
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if (
					(!State.PopUpIsVisible && {{{Navigation::P}}}IsEventFromGroup(This, Event, C_NavGroup_Side)) ||
					(State.PopUpIsVisible && {{{Navigation::P}}}IsEventFromGroup(This, Event, C_NavGroup_Center))
				) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						State = Select(State, Event.To);
					} else {
						Focus(Event.From, Event.To);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, C_NavGroup_ShowInGameMenu)) {
					if (
						Event.Input == CMlScriptEvent::EMenuNavAction::Cancel ||
						Event.Input == CMlScriptEvent::EMenuNavAction::AppMenu
					) {
						ShowInGameMenu();
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if (
					(!State.PopUpIsVisible && {{{Navigation::P}}}IsEventFromGroup(This, Event, C_NavGroup_Side)) ||
					(State.PopUpIsVisible && {{{Navigation::P}}}IsEventFromGroup(This, Event, C_NavGroup_Center))
				) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOut) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	// PopUpMultiChoice events
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_Rules.Id) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					{{{Navigation::P}}}EnableGroup(This, C_NavGroup_Side, !Event.PopUpMultiChoice.Visible);
					{{{Navigation::P}}}EnableGroup(This, C_NavGroup_Center, !Event.PopUpMultiChoice.Visible);
					{{{Navigation::P}}}EnableGroup(This, C_NavGroup_ShowInGameMenu, !Event.PopUpMultiChoice.Visible);
				}
			}
		}
	}
}
***
""",
[
	UIModules::Component(),
	Button::ComponentV2(),
	ExpendableButton::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	ScoresTable::Component()
],
[]
	);
}