/**
 *  UI module: ScoresTable client side
 */
#Const Version		"2022-10-24"
#Const ScriptName "ManiaApps/Nadeo/TrackMania/Champion/UIModules/ScoresTable_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/ChampionTMGL/LeagueRanking.Script.txt" as LeagueRanking
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/ChampionCommon/PlayerProfiles.Script.txt" as PlayerProfiles
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/Champion/ColorPalette.Script.txt" as ChampionColorPalette
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Constants
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/ChampionCommon/Constants.Script.txt" as LibChampion_Constants
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/ScoresTable_Visibility_Component.Script.txt" as ScoresTableVisibility
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/PauseMenuOnline_Client.Script.txt" as PauseMenu_Online
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuButtonList.Script.txt" as MenuButtonList
#Include "ColorLib" as CL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Champion_ScoresTable"
#Const C_Type CUILayer::EUILayerType::Normal
#Const C_PlayersPerColumn 8
#Const C_ColumnsNb 2
#Const C_MaxHearts 8

#Const C_Sequence_Null -1
#Const C_Sequence_Race 0
#Const C_Sequence_PlayerFinishedRace 1
#Const C_Sequence_BeforeResult 2
#Const C_Sequence_AfterResult 3

#Const C_Tab_StepRanking 0
#Const C_Tab_LeagueRanking 1

#Const C_DisplayNamesUpdateInterval 1000

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Color_SelectTab = ChampionColorPalette::C_LightBackground;
	declare Color_Text = ChampionColorPalette::C_White;
	declare Color_Separator = ChampionColorPalette::C_White;
	declare Color_Background = ChampionColorPalette::C_DarkBackground1;
	declare Color_BackgroundFocus = ChampionColorPalette::C_DarkBackground2;
	declare Color_PointsLoss = ChampionColorPalette::C_Loss;
	declare Color_PointsGain = ColorPalette::C_Color_GreenTwo;

	declare Img_BackgroundBody = "file://Media/Manialinks/Nadeo/TMNext/Modes/Champion/hud_champion_scoretable_body.dds";
	declare Img_BackgroundHeader = "file://Media/Manialinks/Nadeo/TMNext/Modes/Champion/hud_champion_scoretable_header.dds";
	declare BgSizeX = 272.;
	declare BgRatio = 2112./3264.;
	declare Img_NameBg = "file://Media/Manialinks/Nadeo/TMNext/Modes/Champion/hud_champion_scoretable_namelist.dds";
	declare Img_ScoreBg = "file://Media/Manialinks/Nadeo/TMNext/Modes/Champion/hud_champion_scoretable_score.dds";
	declare Img_BestLapTimeBg = "file://Media/Manialinks/Nadeo/TMNext/Modes/Champion/hud_champion_scoretable_bestlap_score.dds";
	declare Img_TabsSelect = Constants::C_ImageUrl_Menu_Focus_Tabs;
	declare Img_BestLap = Constants::C_ImageUrl_Champion_Icon_BestLap;
	declare Img_Hearts = "file://Media/Manialinks/Nadeo/TMNext/Modes/Champion/Hearts/TMGL2020_Hearts";
	declare Img_TeamsLogo = "file://Media/Manialinks/Nadeo/TMNext/Modes/Champion/TeamsLogo/";

	declare PlayerMarginX = 118.66;
	declare PlayerMarginY = 8.66;
	declare FlagRatio = 320./224.;
	declare QuadPoints_Color = <0.,0.,0.>;
	declare QuadPoints_Opacity = 0.5;
	declare QuadPointsLoss_Color = CL::Hex6ToRgb(ChampionColorPalette::C_Loss);
	declare QuadPointsLoss_Opacity = 0.6;
	
	//L16N [TMGL] Ranking of the current step in the league
	declare Text_StepRanking = _("Step ranking");
	//L16N [TMGL] Ranking of the league
	declare Text_LeagueRanking = _("League ranking");
	//L16N [TMGL] Followed by info about the player who scored the best lap time.
	declare Text_BestLap = _("Best lap");
	//L16N [TMGL] Will be displayed between "Best lap" and the player name. eg BEST LAP 01:08.123 by Player1
	declare Text_By = _("|TimeByPlayer|by");

	declare ML_Players = "";
	declare PlayersNb = C_PlayersPerColumn * C_ColumnsNb;
	for (I, 0, PlayersNb - 1) {
		declare PosX = (I / C_PlayersPerColumn) * PlayerMarginX - (0.1763 * I%C_PlayersPerColumn * PlayerMarginY);
		declare PosY = (I % C_PlayersPerColumn) * (-1.*PlayerMarginY);
		ML_Players ^= """<frameinstance pos="{{{PosX}}} {{{PosY}}}" modelid="framemodel-player" />""";
	}

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-tab" halign="center" valign="center2" textsize="7" textcolor="{{{Color_Text}}}" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$t$i" italicslope="0.2" focusareacolor1="00000000" focusareacolor2="00000000"/>
	<style class="text-default" valign="center2" textsize="3" textcolor="{{{Color_Text}}}" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$t$i" italicslope="0.2"/>
</stylesheet>
<framemodel id="framemodel-player">
	<quad id="button-player" pos="27.25 -0.33" z-index="0" size="{{{9.333 * 864./112.}}} 9.333" opacity="0.3" image="{{{Img_NameBg}}}" scriptevents="1" colorize="{{{ColorPalette::C_Color_GreenOne}}}"/>
	<quad id="quad-points" pos="97.95 -0.33" z-index="0" size="{{{9.333 * 168./112.}}} 9.333" opacity="0.4" image="{{{Img_ScoreBg}}}" colorize="000000"/>
	<frame z-index="2" pos="0 -5.25">
		<label id="label-rank-diff" pos="3 0" size="6 6" halign="center" textsize="5" class="text-default" />
		<label id="label-rank" pos="8.12 0" size="8 5" halign="center" class="text-default" textsize="4"/>
		<quad id="quad-flag" pos="20 0" size="{{{6.75*FlagRatio}}} 6.75" valign="center" pincorners="<-0.75,1.>:<1.,1.>:<0.75,-1.>:<-1.,-1.>"/>
		<quad id="quad-logo" pos="17.5 0" size="7.5 7.5" valign="center"/>
		<label id="label-name" pos="32. 0.25" size="50 5" class="text-default" />
		<quad id="quad-hearts" pos="95 0" size="{{{4.5 *408./192.}}} 4.5" halign="right" valign="center" hidden="1" colorize="fff"/>
		<label id="label-round-points" opacity="0.9" pos="97.25 0.25" size="9 5" halign="right" class="text-default" textsize="3"/>
		<label id="label-points" pos="104.75 0.25" size="9 5" halign="center" class="text-default" />
	</frame>
</framemodel>
<frame z-index="10" id="frame-scorestable-layer" hidden="1">
	<frame hidden="1" id="frame-global">
		<quad id="quad-black-bg" bgcolor="000" size="320 180" fullscreen="1" halign="center" valign="center" z-index="-3" opacity=".6"/>
		<frameinstance modelid="{{{MenuButtonList::C_Name}}}" id="frame-button-list-scorestable-champion" z-index="1" />
		<frame pos="-100.5 73" id="frame-scores-table">
			<quad pos="-34 14.33" size="{{{BgSizeX}}} {{{BgSizeX*BgRatio}}}" image="{{{Img_BackgroundBody}}}" opacity="0.9"/>
			<quad pos="-34 14.33" size="{{{BgSizeX}}} {{{BgSizeX*BgRatio}}}" image="{{{Img_BackgroundHeader}}}" opacity="0.9"/>
			<frame z-index="1">
				<frame pos="100.5 -6.25" id="frame-tabs">
					<label id="button-step-ranking" pos="-32 0" size="80 13" text="{{{Text_StepRanking}}}" scriptevents="1" class="text-tab"/>
					<label id="button-league-ranking" pos="63 0" size="80 13" textsize="6" text="{{{Text_LeagueRanking}}}" scriptevents="1" class="text-tab" />
					<quad id="quad-selected-tab" pos="-27.5 -7.5" z-index="1" size="50 2" halign="center" valign="bottom" image="{{{Img_TabsSelect}}}" />
				</frame>
				<frame z-index="2" pos="-15 -60" id="frame-players">
					{{{ML_Players}}}
				</frame>
				<frame z-index="2" pos="107.88 -38" id="frame-best-lap">
					<label pos="-67 -5.25" size="29 13" text="{{{Text_BestLap}}}" class="text-default" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					<label pos="-5 -5.25" size="10 13" text="{{{Text_By}}}" class="text-default" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					<label id="label-best-lap-time" pos="-21.75 -5.25" size="25 13" halign="center" class="text-default" z-index="1"/>
					<quad pos="-37 -5.25" size="30 9" valign="center" image="{{{Img_BestLapTimeBg}}}" opacity="0.5" z-index="-1" colorize="000000"/>
					<quad pos="-80 0.25" image="{{{Img_BestLap}}}" size="10.5 10.5" colorize="{{{ColorPalette::C_Color_GreenOne}}}"/>
					<frameinstance pos="0 0" modelid="framemodel-player" id="frame-player"/>
				</frame>
				<frame pos="100.5 0" id="frame-footer">
					<label pos="10 -21" z-index="1" size="190 5" halign="center" class="text-default" id="label-server-name" textsize="3.5"/>
					<label pos="-10 -139" z-index="1" size="210 5" halign="center" class="text-default" id="label-info" textfont="{{{FontManager::C_GameFontRegular}}}"/>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils

#Struct K_RankingEntry {
	Text Name;
	Text Login;
	Text WebServicesUserId;
	Integer Rank;
	Integer Points;
	Integer RacePoints;
	Integer LostPoints;
	Integer RankDiff;
	Boolean IsBestLapPlayer;
	Boolean IsBestLapDisplay;
	Integer Hearts;
}

#Const C_Tab_StepRanking {{{C_Tab_StepRanking}}}
#Const C_Tab_LeagueRanking {{{C_Tab_LeagueRanking}}}
#Const C_Id {{{dump(C_Id)}}}

#Const C_Phase_PointsLossCoefficients {{{dump(LibChampion_Constants::C_Phase_PointsLossCoefficients)}}}

{{{dumptype(LeagueRanking::K_LeagueRankingPlayer)}}}
{{{dumptype(LeagueRanking::K_LeagueRanking)}}}
""",
"""
declare CMlFrame G_Frame_Players;
declare CMlLabel Button_StepRanking;
declare CMlLabel Button_LeagueRanking;
declare CMlQuad Quad_SelectedTab;
declare Text[] G_NewDisplayNames;

Void SetRankDiff(CMlLabel _Label_RankDiff, Integer _RankDiff) {
	if (_RankDiff != 0) {
		if (_RankDiff > 0) {
			_Label_RankDiff.Value = "⏶";
			_Label_RankDiff.TextColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenOne}}}");
		} else {
			_Label_RankDiff.Value = "⏷";
			_Label_RankDiff.TextColor = CL::Hex6ToRgb("{{{Color_PointsLoss}}}");
		}
	} else {
		_Label_RankDiff.Value = "";
	}
}

Void SetHearts(CMlQuad _Quad_Hearts, Integer _Hearts) {
	if (_Hearts <= 0) {
		_Quad_Hearts.ImageUrl = "";
	} else if (_Hearts <= {{{C_MaxHearts}}}) {
		_Quad_Hearts.ImageUrl = "{{{Img_Hearts}}}"^_Hearts^"_inc.dds";
	} else {
		_Quad_Hearts.ImageUrl = "{{{Img_Hearts}}}{{{C_MaxHearts}}}_inc.dds";
	}
	_Quad_Hearts.Visible = (_Quad_Hearts.ImageUrl != "");
}

Void SetRacePoints(CMlLabel _Label_RoundPoints, Integer _RacePoints, Integer _BonusPoints) {
	declare RacePoints = _RacePoints + _BonusPoints;

	if (RacePoints > 0) {
		_Label_RoundPoints.Value = "+"^RacePoints;
		_Label_RoundPoints.TextColor = CL::Hex6ToRgb("{{{Color_Text}}}");
	} else if (RacePoints < 0) {
		_Label_RoundPoints.Value = TL::ToText(RacePoints);
		_Label_RoundPoints.TextColor = CL::Hex6ToRgb("{{{Color_PointsLoss}}}");
	} else {
		_Label_RoundPoints.Value = "";
	}
}

Void UpdateRankingLine(K_RankingEntry _RankingEntry, CMlControl Control, Integer _Sequence, Integer _WinningNb, Integer _BestLapBonus) {
	declare Frame_Player <=> (Control as CMlFrame);
	declare Button_Player <=> (Frame_Player.GetFirstChild("button-player") as CMlQuad);
	declare Label_RankDiff <=> (Frame_Player.GetFirstChild("label-rank-diff") as CMlLabel);
	declare Label_Rank <=> (Frame_Player.GetFirstChild("label-rank") as CMlLabel);
	declare Quad_Flag <=> (Frame_Player.GetFirstChild("quad-flag") as CMlQuad);
	declare Quad_Logo <=> (Frame_Player.GetFirstChild("quad-logo") as CMlQuad);
	declare Quad_Hearts <=> (Frame_Player.GetFirstChild("quad-hearts") as CMlQuad);
	declare Label_Name <=> (Frame_Player.GetFirstChild("label-name") as CMlLabel);
	declare Label_RoundPoints <=> (Frame_Player.GetFirstChild("label-round-points") as CMlLabel);
	declare Label_Points <=> (Frame_Player.GetFirstChild("label-points") as CMlLabel);
	declare Quad_Points <=> (Frame_Player.GetFirstChild("quad-points") as CMlQuad);

	declare Text ChampionScoresTable_Login for Button_Player = "";
	
	if (_RankingEntry.Rank > 0) Label_Rank.Value = TL::ToText(_RankingEntry.Rank);
	else Label_Rank.Value = "";

	if (_RankingEntry.WebServicesUserId != "") {
		ChampionScoresTable_Login = _RankingEntry.Login;

		declare RankDiff = 0;
		if (_Sequence == {{{C_Sequence_AfterResult}}}) RankDiff = _RankingEntry.RankDiff;
		SetRankDiff(Label_RankDiff, RankDiff);

		if (
			{{{PlayerProfiles::P}}}GetPlayerProfiles().existskey(_RankingEntry.WebServicesUserId) &&
			{{{PlayerProfiles::P}}}GetPlayerProfiles()[_RankingEntry.WebServicesUserId].TeamLogo != ""
		) {
			Quad_Logo.ChangeImageUrl("{{{Img_TeamsLogo}}}"^{{{PlayerProfiles::P}}}GetPlayerProfiles()[_RankingEntry.WebServicesUserId].TeamLogo);
			Quad_Logo.Show();
			Quad_Flag.Hide();
		} else {
			Quad_Flag.ChangeImageUrl("file://ZoneFlags/Login/" ^ _RankingEntry.Login ^ "/country");
			Quad_Logo.Hide();
			Quad_Flag.Show();
		}

		if ({{{PlayerProfiles::P}}}GetPlayerProfiles().existskey(_RankingEntry.WebServicesUserId)) {
			Label_Name.Value = {{{PlayerProfiles::P}}}GetPlayerProfiles()[_RankingEntry.WebServicesUserId].Nickname;
		} else {
			Label_Name.Value = _RankingEntry.Name;
		}

		SetHearts(Quad_Hearts, 0);
		if (_RankingEntry.IsBestLapDisplay) {
			if (_Sequence == {{{C_Sequence_BeforeResult}}} && _BestLapBonus > 0) {
				Label_RoundPoints.Value = "+"^_BestLapBonus;
				Label_RoundPoints.TextColor = {{{ColorPalette::C_Color_Vec3_GreenOne}}};
			} else {
				Label_RoundPoints.Value = "";
			}
		} else {
			if (_RankingEntry.IsBestLapPlayer && _Sequence == {{{C_Sequence_BeforeResult}}}) {
				SetRacePoints(Label_RoundPoints, _RankingEntry.RacePoints, _BestLapBonus);
				Label_RoundPoints.TextColor = {{{ColorPalette::C_Color_Vec3_GreenOne}}};
			} else {
				SetRacePoints(Label_RoundPoints, _RankingEntry.RacePoints, 0);
				Label_RoundPoints.TextColor = <1.,1.,1.>;
				if (
					_Sequence == {{{C_Sequence_Race}}} ||
					_Sequence == {{{C_Sequence_AfterResult}}} ||
					_Sequence == {{{C_Sequence_Null}}}
				) {
					SetHearts(Quad_Hearts, _RankingEntry.Hearts);
				}
			}
		}

		if (_Sequence == {{{C_Sequence_BeforeResult}}}) {
			if (_RankingEntry.LostPoints <= 0) {
				Label_Points.Value = TL::ToText(_RankingEntry.Points);
				Quad_Points.Colorize = {{{QuadPoints_Color}}};
				Quad_Points.Opacity = {{{QuadPoints_Opacity}}};
			} else {
				Label_Points.Value = "-"^_RankingEntry.LostPoints;
				Quad_Points.Colorize = {{{QuadPointsLoss_Color}}};
				Quad_Points.Opacity = {{{QuadPointsLoss_Opacity}}};
			}
		} else {
			Label_Points.Value = TL::ToText(_RankingEntry.Points);
			Quad_Points.Colorize = {{{QuadPoints_Color}}};
			Quad_Points.Opacity = {{{QuadPoints_Opacity}}};
		}
	} else {
		ChampionScoresTable_Login = "";
		Label_RankDiff.Value = "";
		Quad_Flag.Visible = False;
		Quad_Logo.Hide();
		Quad_Hearts.Visible = False;
		Label_Name.Value = "";
		Label_RoundPoints.Value = "";
		Label_Points.Value = "";
		Quad_Points.Colorize = {{{QuadPoints_Color}}};
		Quad_Points.Opacity = {{{QuadPoints_Opacity}}};
		SetHearts(Quad_Hearts, 0);
	}

	if (_RankingEntry.IsBestLapDisplay) {
		Label_Points.Value = "";
		Quad_Points.Opacity = 0.;
		Label_RankDiff.Value = "";
		Label_Rank.Value = "";
	}
}

Void UpdateBestLap(CMlFrame _Frame_BestLap, Integer _Sequence, Text _BestLapPlayer, Integer _BestLapBonus) {
	declare CMlFrame Frame_Player <=> (_Frame_BestLap.GetFirstChild("frame-player") as CMlFrame);
	declare CMlLabel Label_BestLapTime <=> (_Frame_BestLap.GetFirstChild("label-best-lap-time") as CMlLabel);
	declare BestLapTimeKey = -123;
	declare CSmScore BestLapScore;
	foreach (Key => Score in Scores) {
		if (Score != Null && Score.User != Null && Score.User.WebServicesUserId == _BestLapPlayer) {
			BestLapTimeKey = Key;
			BestLapScore <=> Score;
			break;
		}
	}
	declare BestLapEntry = K_RankingEntry {
		IsBestLapDisplay = True
	};
	if (BestLapScore != Null && BestLapScore.BestLapTimes.count > 0) {
		BestLapEntry.Name = BestLapScore.User.Name;
		BestLapEntry.Login = BestLapScore.User.Login;
		BestLapEntry.WebServicesUserId = BestLapScore.User.WebServicesUserId;
		BestLapEntry.Rank = BestLapTimeKey + 1;
		BestLapEntry.IsBestLapPlayer = True;
		Label_BestLapTime.Value = TL::TimeToText(BestLapScore.BestLapTimes[BestLapScore.BestLapTimes.count - 1], True, True);
		UpdateRankingLine(BestLapEntry, Frame_Player, _Sequence, 0, _BestLapBonus);
	} else {
		Label_BestLapTime.Value = "--:--.---";
		UpdateRankingLine(BestLapEntry, Frame_Player, _Sequence, 0, _BestLapBonus);
	}
}

Void UpdateStepRanking(CMlFrame _Frame_BestLap, Integer _Sequence, Integer _WinningNb, Integer[Text] _RacePoints, Integer[Text] _LostPoints, Integer[Text] _RankDiff, Integer[Text] _Hearts, Text _BestLapPlayer, Integer _BestLapBonus) {
	UpdateBestLap(_Frame_BestLap, _Sequence, _BestLapPlayer, _BestLapBonus);

	// Filter scores
	declare CSmScore[] FilteredScores;
	foreach (Player in Players) {
		declare Integer ChampionScoresTable_IsSpecNow for Player.Score = -1;
		declare Integer ChampionScoresTable_IsPlayerNow for Player.Score = -1;
		if (Player.RequestsSpectate) ChampionScoresTable_IsSpecNow = Now;
		else ChampionScoresTable_IsPlayerNow = Now;
	}
	foreach (Score in Scores) {
		declare Integer ChampionScoresTable_IsSpecNow for Score = -1;
		declare Integer ChampionScoresTable_IsPlayerNow for Score = -1;
		if (
			ChampionScoresTable_IsSpecNow != Now && //< Is not a spectator
			(ChampionScoresTable_IsPlayerNow == Now || Score.Points > 0) //< Is a connected player or have some points
		) {
			FilteredScores.add(Score);
		}
	}
	
	foreach (Key => Control in G_Frame_Players.Controls) {
		declare RankingEntry = K_RankingEntry {};
		RankingEntry.Rank = Key + 1;
		if (
			FilteredScores.existskey(Key) &&
			FilteredScores[Key] != Null
		) {
			declare Score <=> FilteredScores[Key];
			RankingEntry.Name = Score.User.Name;
			RankingEntry.Login = Score.User.Login;
			RankingEntry.WebServicesUserId = Score.User.WebServicesUserId;
			RankingEntry.Points = Score.Points;
			if (_RacePoints.existskey(Score.User.WebServicesUserId)) RankingEntry.RacePoints = _RacePoints[Score.User.WebServicesUserId];
			if (_LostPoints.existskey(Score.User.WebServicesUserId)) RankingEntry.LostPoints = _LostPoints[Score.User.WebServicesUserId];
			if (_RankDiff.existskey(Score.User.WebServicesUserId)) RankingEntry.RankDiff = _RankDiff[Score.User.WebServicesUserId];
			if (_Hearts.existskey(Score.User.WebServicesUserId)) RankingEntry.Hearts = _Hearts[Score.User.WebServicesUserId];
			RankingEntry.IsBestLapPlayer = _BestLapPlayer == Score.User.WebServicesUserId;
		}

		UpdateRankingLine(RankingEntry, Control, _Sequence, _WinningNb, _BestLapBonus);
	}
}

Void UpdateLeagueRanking(CMlFrame _Frame_BestLap, Integer _Sequence, K_LeagueRanking _LeagueRanking, Integer[Text] _Hearts, Integer[Text] _RacePoints, Text _BestLapPlayer, Integer _BestLapBonus) {
	UpdateBestLap(_Frame_BestLap, _Sequence, _BestLapPlayer, _BestLapBonus);

	declare Text[Integer] KeyToAccountId;
	declare I = 0;
	foreach (AccountId => Player in _LeagueRanking.ranking) {
		KeyToAccountId[I] = AccountId;
		I += 1;
	}

	foreach (Key => Control in G_Frame_Players.Controls) {
		declare Frame_Player <=> (Control as CMlFrame);
		declare Label_Points <=> (Frame_Player.GetFirstChild("label-points") as CMlLabel);
		declare Quad_Points <=> (Frame_Player.GetFirstChild("quad-points") as CMlQuad);

		declare K_LeagueRankingPlayer Player;
		if (KeyToAccountId.existskey(Key) && _LeagueRanking.ranking.existskey(KeyToAccountId[Key])) {
			Player = _LeagueRanking.ranking[KeyToAccountId[Key]];
		}

		declare RankingEntry = K_RankingEntry {};
		RankingEntry.Rank = Key + 1;
		if (Player.participant != "") {
			RankingEntry.WebServicesUserId = Player.participant;
			RankingEntry.Points = Player.score;
			RankingEntry.RankDiff = Player.old_rank - Player.rank;
			foreach (Score in Scores) {
				if (Score != Null && Score.User.WebServicesUserId == Player.participant) {
					RankingEntry.Login = Score.User.Login;
					break;
				}
			}
			declare Text DisplayName = UserMgr.FindDisplayName(Player.participant);
			if (DisplayName != "") {
				RankingEntry.Name = DisplayName;
			} else {
				G_NewDisplayNames.add(Player.participant);
			}

			if (_RacePoints.existskey(Player.participant)) RankingEntry.RacePoints = _RacePoints[Player.participant];
			if (_Hearts.existskey(Player.participant)) RankingEntry.Hearts = _Hearts[Player.participant];
			RankingEntry.IsBestLapPlayer = _BestLapPlayer == Player.participant;
		}

		UpdateRankingLine(RankingEntry, Frame_Player, _Sequence, 0, _BestLapBonus);
	}
}

Integer SelectTab(Integer _Tab) {
	declare Tab = _Tab;
	Button_StepRanking.Opacity = 0.5;
	Button_LeagueRanking.Opacity = 0.5;

	switch (Tab) {
		case C_Tab_LeagueRanking: {
			AnimMgr.Flush(Quad_SelectedTab);
			declare Target = "<quad pos=\""^Button_LeagueRanking.RelativePosition_V3.X^" "^Quad_SelectedTab.RelativePosition_V3.Y^"\" />";
			AnimMgr.Add(Quad_SelectedTab, Target, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			Button_LeagueRanking.Opacity = 1.;
		}
		// Default is C_Tab_StepRanking
		default: {
			AnimMgr.Flush(Quad_SelectedTab);
			declare Target = "<quad pos=\""^Button_StepRanking.RelativePosition_V3.X^" "^Quad_SelectedTab.RelativePosition_V3.Y^"\" />";
			AnimMgr.Add(Quad_SelectedTab, Target, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			Tab = C_Tab_StepRanking;
			Button_StepRanking.Opacity = 1.;
		} 
	}

	return Tab;
}

Void DisplayLeagueRanking(CMlControl _Button_StepRanking, CMlControl _Button_LeagueRanking, Boolean _IsVisible) {
	_Button_LeagueRanking.Visible = _IsVisible;
	if (_IsVisible) {
		_Button_StepRanking.RelativePosition_V3.X = -32.;
	} else {
		_Button_StepRanking.RelativePosition_V3.X = {{{(BgSizeX*BgRatio-10.)*0.1764/2.}}};
		SelectTab(C_Tab_StepRanking);
	}
}

Text GetScoresTableFooter(Integer _RoundsNb, Integer _RoundsLimit, Integer _RoundsPerMap, Integer _WinningNb, Integer _Phase, Boolean _IsPaused, Integer _BestLapBonus) {
	declare Integer MapsNb = _RoundsNb;
	declare Integer MapsLimit = _RoundsLimit;
	if (_RoundsPerMap > 1) {
		MapsNb = ((_RoundsNb - 1) / _RoundsPerMap) + 1;
		MapsLimit = ((_RoundsLimit - 1) / _RoundsPerMap) + 1;
	}
	
	if (_IsPaused) {
		return _("Match paused");
	} else if (MapsNb > 0 && MapsLimit > 0 && _WinningNb > 0) {
		declare PointsLossCoefficient = 1.;
		if (C_Phase_PointsLossCoefficients.existskey(_Phase)) PointsLossCoefficient = C_Phase_PointsLossCoefficients[_Phase];
		if (PointsLossCoefficient <= 0.) {
			//L16N [Champion] Description of the basic rules. %1 is the current track number, %2 total tracks.
			declare FooterInfo = _("Track %1/%2 - Win points by finishing the race.");
			if (_BestLapBonus > 0) {
				//L16N [Champion] Description of the basic rules. %1 is the current track number, %2 total tracks.
				FooterInfo = _("Track %1/%2 - Win points by finishing the race or by scoring the best lap time.");
			}
			return TL::Compose(FooterInfo, TL::ToText(MapsNb), TL::ToText(MapsLimit));
		} else {
			//L16N [Champion] Description of the rules for the rounds with points loss. %1 is the current track number, %2 total tracks, %3 a position e.g. "8th".
			declare FooterInfo = _("Track %1/%2 - Keep your previous points by remaining between 1st and %3");
			return TL::Compose(FooterInfo, TL::ToText(MapsNb), TL::ToText(MapsLimit), TL::FormatRank(_WinningNb, False));
		}
	} else if (MapsNb > 0 && MapsLimit > 0) {
		//L16N [Champion] Description of the rules for warmup. %1 is the current track number, %2 total tracks.
		return TL::Compose(_("Track %1/%2 - Warm up"), TL::ToText(MapsNb), TL::ToText(MapsLimit));
	}
	return "";
}

***MainInit***
***
declare CMlFrame Frame_ScoresTable_Visibility;
declare CMlFrame Frame_Global;
declare CMlQuad Quad_BlackBg;
declare CMlFrame Frame_ScoresTable;
declare CMlFrame Frame_Tabs;
declare CMlFrame Frame_Footer;
declare CMlLabel Label_ServerName;
declare CMlLabel Label_Info;
declare CMlFrame Frame_BestLap;
declare CMlFrame Frame_ButtonList;

declare netread Integer Net_Champion_ScoresTable_Sequence for Teams[0];
declare netread Integer Net_ShareChampion_RoundsNb for Teams[0];
declare netread Integer Net_ShareChampion_RoundsTotal for Teams[0];
declare netread Integer Net_ShareChampion_RoundsPerMap for Teams[0];
declare netread Integer Net_ShareChampion_WinningPlayersNb for Teams[0];
declare netread Integer Net_ShareChampion_Phase for Teams[0];
declare netread Boolean Net_Champion_ScoresTable_MatchIsPaused for Teams[0];
declare netread Integer Net_Champion_ScoresTable_FooterUpdate for Teams[0];
declare netread Integer Net_Champion_ScoresTable_RacePointsUpdate for Teams[0];
declare netread Integer Net_Champion_ScoresTable_LostPointsUpdate for Teams[0];
declare netread Integer Net_Champion_ScoresTable_BestLapUpdate for Teams[0];
declare netread Integer[Text] Net_Champion_ScoresTable_RacePoints for Teams[0];
declare netread Integer[Text] Net_Champion_ScoresTable_LostPoints for Teams[0];
declare netread Integer[Text] Net_Champion_ScoresTable_RankDiff for Teams[0];
declare netread Integer Net_Champion_ScoresTable_RankDiffUpdate for Teams[0];
declare netread Integer[Text] Net_Champion_ScoresTable_Hearts for Teams[0];
declare netread Text Net_Champion_ScoresTable_BestLapPlayer for Teams[0];
declare netread Integer Net_Champion_ScoresTable_BestLapBonus for Teams[0];
declare netread Integer Net_Champion_ScoresTable_CheersUpdate for Teams[0];
declare netread K_LeagueRanking Net_Champion_LeagueRanking_LeagueRanking for Teams[0];
declare netread Integer Net_Champion_LeagueRanking_LeagueRankingUpdate for Teams[0];
declare netread Integer Net_Champion_ScoresTable_Tab for Teams[0];
declare netread Integer Net_Champion_ScoresTable_TabUpdate for Teams[0];
declare netread Boolean Net_Champion_ScoresTable_LeagueRankingAvailable for Teams[0];

declare Boolean DisplayModule;
declare Boolean InterfaceVisible;
declare Text ServerName;
declare Integer FooterInfoUpdate;
declare Integer Sequence;
declare Integer WinningNb;
declare Integer RacePointsUpdate;
declare Integer LostPointsUpdate;
declare Integer BestLapUpdate;
declare Integer RankDiffUpdate;
declare Integer CheersUpdate;
declare Integer LeagueRankingUpdate;
declare Integer CurrentTab;
declare Integer TabUpdate;
declare Boolean LeagueRankingAvailable;
declare Integer DisplayNamesUpdate;
declare Ident Task_GetDisplayNamesId;
declare Boolean NeedButtonOpacityReset;
declare {{{ScoresTableVisibility::P}}}K_ScoresTableIsVisible ScoresTableIsVisible;
***

***MainStart***
***
Frame_ScoresTable_Visibility <=> (Page.GetFirstChild("frame-scorestable-layer") as CMlFrame);
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Quad_BlackBg <=> (Frame_Global.GetFirstChild("quad-black-bg") as CMlQuad);
Frame_ScoresTable <=> (Frame_Global.GetFirstChild("frame-scores-table") as CMlFrame);
Frame_Tabs <=> (Frame_ScoresTable.GetFirstChild("frame-tabs") as CMlFrame);
Button_StepRanking <=> (Frame_Tabs.GetFirstChild("button-step-ranking") as CMlLabel);
Button_LeagueRanking <=> (Frame_Tabs.GetFirstChild("button-league-ranking") as CMlLabel);
Quad_SelectedTab <=> (Frame_Tabs.GetFirstChild("quad-selected-tab") as CMlQuad);
G_Frame_Players <=> (Frame_ScoresTable.GetFirstChild("frame-players") as CMlFrame);
Frame_BestLap <=> (Frame_ScoresTable.GetFirstChild("frame-best-lap") as CMlFrame);
Frame_Footer <=> (Frame_ScoresTable.GetFirstChild("frame-footer") as CMlFrame);
Label_ServerName <=> (Frame_Footer.GetFirstChild("label-server-name") as CMlLabel);
Label_Info <=> (Frame_Footer.GetFirstChild("label-info") as CMlLabel);
Frame_ButtonList <=> (Frame_Global.GetFirstChild("frame-button-list-scorestable-champion") as CMlFrame);

DisplayModule = Frame_Global.Visible;
InterfaceVisible = PageIsVisible;
ServerName = "";
FooterInfoUpdate = -123;
Sequence = {{{C_Sequence_Null}}};
WinningNb = -123;
RacePointsUpdate = -123;
LostPointsUpdate = -123;
BestLapUpdate = -123;
RankDiffUpdate = -123;
CheersUpdate = -123;
LeagueRankingUpdate = -123;
CurrentTab = SelectTab(C_Tab_StepRanking);
TabUpdate = -123;
DisplayNamesUpdate = Now;
NeedButtonOpacityReset = False;

LeagueRankingAvailable = Net_Champion_ScoresTable_LeagueRankingAvailable;
DisplayLeagueRanking(Button_StepRanking, Button_LeagueRanking, LeagueRankingAvailable);

UpdateStepRanking(Frame_BestLap, Sequence, WinningNb, Net_Champion_ScoresTable_RacePoints, Net_Champion_ScoresTable_LostPoints, Net_Champion_ScoresTable_RankDiff, Net_Champion_ScoresTable_Hearts, "", 0);
ScoresTableIsVisible = {{{ScoresTableVisibility::P}}}SetScoresTableVisibility(
	Frame_ScoresTable_Visibility,
	Quad_BlackBg,
	{{{ScoresTableVisibility::P}}}LayerIsVisible(),
	{{{ScoresTableVisibility::P}}}EnabledFromMenu()
);
***

***MainLoop***
***
if (InterfaceVisible != PageIsVisible) {
	InterfaceVisible = PageIsVisible;
	{{{PauseMenu_Online::P}}}SetScoresTableButtonLocked(!InterfaceVisible, C_Id);
}
if (
	ScoresTableIsVisible.FromLayer != {{{ScoresTableVisibility::P}}}LayerIsVisible() ||
	ScoresTableIsVisible.FromMenu != {{{ScoresTableVisibility::P}}}EnabledFromMenu()
) {
	ScoresTableIsVisible = {{{ScoresTableVisibility::P}}}SetScoresTableVisibility(
		Frame_ScoresTable_Visibility,
		Quad_BlackBg,
		{{{ScoresTableVisibility::P}}}LayerIsVisible(),
		{{{ScoresTableVisibility::P}}}EnabledFromMenu()
	);
	if (ScoresTableIsVisible.FromMenu) {
		{{{MenuButtonList::P}}}SetButtons(Frame_ButtonList, ["B" => _("Back")]);
	} else {
		{{{MenuButtonList::P}}}SetButtons(Frame_ButtonList, []);
	}
}
if (PageIsVisible && Frame_ScoresTable_Visibility.Visible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Champion_ScoresTable_IsVisible for Owner;
		if (DisplayModule != Net_Champion_ScoresTable_IsVisible) {
			DisplayModule = Net_Champion_ScoresTable_IsVisible;
			Frame_Global.Visible = Net_Champion_ScoresTable_IsVisible;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (ServerName != CurrentServerName) {
		ServerName = CurrentServerName;
		Label_ServerName.Value = CurrentServerName;
	}

	if (FooterInfoUpdate != Net_Champion_ScoresTable_FooterUpdate) {
		FooterInfoUpdate = Net_Champion_ScoresTable_FooterUpdate;
		Label_Info.Value = GetScoresTableFooter(
			Net_ShareChampion_RoundsNb,
			Net_ShareChampion_RoundsTotal,
			Net_ShareChampion_RoundsPerMap,
			Net_ShareChampion_WinningPlayersNb,
			Net_ShareChampion_Phase,
			Net_Champion_ScoresTable_MatchIsPaused,
			Net_Champion_ScoresTable_BestLapBonus
		);
	}

	declare NeedStepRankingUpdate = False;
	declare NeedLeagueRankingUpdate = False;
	foreach (Key => Score in Scores) {
		declare Integer ChampionScoresTable_Rank for Score = -123;
		if (ChampionScoresTable_Rank != Key) {
			ChampionScoresTable_Rank = Key;
			NeedStepRankingUpdate = True;
		}
		declare Integer ChampionScoresTable_Points for Score = -123;
		if (ChampionScoresTable_Points != Score.Points) {
			ChampionScoresTable_Points = Score.Points;
			NeedStepRankingUpdate = True;
		}
	}

	if (Sequence != Net_Champion_ScoresTable_Sequence) {
		Sequence = Net_Champion_ScoresTable_Sequence;
		NeedStepRankingUpdate = True;
		NeedLeagueRankingUpdate = True;
	}

	if (WinningNb != Net_ShareChampion_WinningPlayersNb) {
		WinningNb = Net_ShareChampion_WinningPlayersNb;
		NeedStepRankingUpdate = True;
	}

	if (RacePointsUpdate != Net_Champion_ScoresTable_RacePointsUpdate) {
		RacePointsUpdate = Net_Champion_ScoresTable_RacePointsUpdate;
		NeedStepRankingUpdate = True;
		NeedLeagueRankingUpdate = True;
	}

	if (LostPointsUpdate != Net_Champion_ScoresTable_LostPointsUpdate) {
		LostPointsUpdate = Net_Champion_ScoresTable_LostPointsUpdate;
		NeedStepRankingUpdate = True;
		NeedLeagueRankingUpdate = True;
	}

	if (BestLapUpdate != Net_Champion_ScoresTable_BestLapUpdate) {
		BestLapUpdate = Net_Champion_ScoresTable_BestLapUpdate;
		NeedStepRankingUpdate = True;
		NeedLeagueRankingUpdate = True;
	}

	if (RankDiffUpdate != Net_Champion_ScoresTable_RankDiffUpdate) {
		RankDiffUpdate = Net_Champion_ScoresTable_RankDiffUpdate;
		NeedStepRankingUpdate = True;
		NeedLeagueRankingUpdate = True;
	}

	if (CheersUpdate != Net_Champion_ScoresTable_CheersUpdate) {
		CheersUpdate = Net_Champion_ScoresTable_CheersUpdate;
		NeedStepRankingUpdate = True;
		NeedLeagueRankingUpdate = True;
	}

	if (LeagueRankingAvailable != Net_Champion_ScoresTable_LeagueRankingAvailable) {
		LeagueRankingAvailable = Net_Champion_ScoresTable_LeagueRankingAvailable;
		DisplayLeagueRanking(Button_StepRanking, Button_LeagueRanking, LeagueRankingAvailable);
	}

	if (LeagueRankingUpdate != Net_Champion_LeagueRanking_LeagueRankingUpdate) {
		LeagueRankingUpdate = Net_Champion_LeagueRanking_LeagueRankingUpdate;
		NeedLeagueRankingUpdate = True;
	}

	if (TabUpdate != Net_Champion_ScoresTable_TabUpdate) {
		TabUpdate = Net_Champion_ScoresTable_TabUpdate;
		if (
			CurrentTab != Net_Champion_ScoresTable_Tab &&
				(Net_Champion_ScoresTable_Tab != C_Tab_LeagueRanking ||
				Net_Champion_ScoresTable_LeagueRankingAvailable)
		) {
			CurrentTab = SelectTab(Net_Champion_ScoresTable_Tab);
			NeedStepRankingUpdate = True;
			NeedLeagueRankingUpdate = True;
		}
	}

	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::MouseClick: {
				if (Event.ControlId == "button-player") {
					declare Text ChampionScoresTable_Login for Event.Control = "";
					if (ChampionScoresTable_Login != "") {
						SetSpectateTarget(ChampionScoresTable_Login);
					}
				} else if (Event.ControlId == "button-step-ranking") {
					if (CurrentTab != C_Tab_StepRanking) {
						CurrentTab = SelectTab(C_Tab_StepRanking);
						NeedStepRankingUpdate = True;
					}
				} else if (Event.ControlId == "button-league-ranking") {
					if (CurrentTab != C_Tab_LeagueRanking) {
						CurrentTab = SelectTab(C_Tab_LeagueRanking);
						NeedLeagueRankingUpdate = True;
					}
					
				}
			}
			case CMlScriptEvent::Type::MouseOver: {
				if (Event.ControlId == "button-step-ranking") {
					(Event.Control as CMlLabel).Opacity = 1.;
					NeedButtonOpacityReset = True;
				} else if (Event.ControlId == "button-league-ranking") {
					(Event.Control as CMlLabel).Opacity = 1.;
					NeedButtonOpacityReset = True;
				}
			}
			case CMlScriptEvent::Type::MouseOut: {
				if (Event.ControlId == "button-step-ranking") {
					if (CurrentTab != C_Tab_StepRanking) (Event.Control as CMlLabel).Opacity = 0.5;
					NeedButtonOpacityReset = False;
				} else if (Event.ControlId == "button-league-ranking") {
					if (CurrentTab != C_Tab_LeagueRanking) (Event.Control as CMlLabel).Opacity = 0.5;
					NeedButtonOpacityReset = False;
				}
			}
			case CMlScriptEvent::Type::MenuNavigation: {
				if (Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::Cancel) {
					{{{ScoresTableVisibility::P}}}SetEnabledFromMenu(False);
				}
			}
		}
	}

	if (
		DisplayNamesUpdate > 0 &&
		DisplayNamesUpdate <= Now &&
		G_NewDisplayNames.count > 0
	) {
		if (Task_GetDisplayNamesId != NullId) {
			DataFileMgr.TaskResult_Release(Task_GetDisplayNamesId);
			Task_GetDisplayNamesId = NullId;
		}
		declare CTaskResult_GetDisplayNameResult Task <=> UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), G_NewDisplayNames);
		if (Task != Null) {
			DisplayNamesUpdate = -1;
			Task_GetDisplayNamesId = Task.Id;
		} else {
			DisplayNamesUpdate = Now + {{{C_DisplayNamesUpdateInterval}}};
		}
	}
	if (Task_GetDisplayNamesId != NullId) {
		if (UserMgr.TaskResults.existskey(Task_GetDisplayNamesId)) {
			declare CTaskResult_GetDisplayNameResult TaskDisplayNames = (UserMgr.TaskResults[Task_GetDisplayNamesId] as CTaskResult_GetDisplayNameResult);
			if (
				TaskDisplayNames != Null &&
				!TaskDisplayNames.IsProcessing
			) {
				if (TaskDisplayNames.HasSucceeded) {
					declare Text[] AccountIdsToRemove;
					foreach (Key => AccountId in G_NewDisplayNames) {
						if (UserMgr.FindDisplayName(AccountId) != "") {
							AccountIdsToRemove.add(AccountId);
							NeedLeagueRankingUpdate = True;
						}
					}
					foreach (AccountId in AccountIdsToRemove) {
						G_NewDisplayNames.remove(AccountId);
					}
				}
				UserMgr.TaskResult_Release(Task_GetDisplayNamesId);
				Task_GetDisplayNamesId = NullId;
				DisplayNamesUpdate = Now + {{{C_DisplayNamesUpdateInterval}}};
			}
		} else {
			Task_GetDisplayNamesId = NullId;
			DisplayNamesUpdate = Now + {{{C_DisplayNamesUpdateInterval}}};
		}
	}

	if (CurrentTab == C_Tab_StepRanking && NeedStepRankingUpdate) {
		UpdateStepRanking(Frame_BestLap, Sequence, WinningNb, Net_Champion_ScoresTable_RacePoints, Net_Champion_ScoresTable_LostPoints, Net_Champion_ScoresTable_RankDiff, Net_Champion_ScoresTable_Hearts, Net_Champion_ScoresTable_BestLapPlayer, Net_Champion_ScoresTable_BestLapBonus);
	}

	if (CurrentTab == C_Tab_LeagueRanking && NeedLeagueRankingUpdate) {
		UpdateLeagueRanking(Frame_BestLap, Sequence, Net_Champion_LeagueRanking_LeagueRanking, Net_Champion_ScoresTable_Hearts, Net_Champion_ScoresTable_RacePoints, Net_Champion_ScoresTable_BestLapPlayer, Net_Champion_ScoresTable_BestLapBonus);
	}
} else if (NeedButtonOpacityReset) {
	NeedButtonOpacityReset = False;
	if (CurrentTab != C_Tab_StepRanking) Button_StepRanking.Opacity = 0.5;
	if (CurrentTab != C_Tab_LeagueRanking) Button_LeagueRanking.Opacity = 0.5;
}
***
""",
[
	PlayerProfiles::Component(),
	ScoresTableVisibility::Component(),
	MenuButtonList::Component(),
	PauseMenu_Online::Component()
],
[]
	);
}