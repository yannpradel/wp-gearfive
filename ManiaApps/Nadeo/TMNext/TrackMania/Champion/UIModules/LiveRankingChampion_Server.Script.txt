/**
 *  UI module: LiveRankingChampion server side
 */
#Const Version    "2021-03-16"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/Champion/UIModules/LiveRankingChampion_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/ChampionTMGL/LeagueRanking.Script.txt" as LeagueRanking

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Champion_LiveRankingChampion"

#Const C_RankingMode_BestRace 0
#Const C_RankingMode_CurrentRace 1

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** DEPRECATED it is not used anymore
 *
 *	Set the best time at each checkpoint
 *  This data will survive a plugin restart
 *
 *  @param  _BestTimeAtCheckpoint   The best time at each checkpoint
 */
Void SetBestTimeAtCheckpoint(Integer[Integer] _BestTimeAtCheckpoint) {
	declare netwrite Integer[Integer] Net_CPLive2_BestTimeAtCheckpoint for Teams[0] = [];
	declare netwrite Integer Net_CPLive2_BestTimeAtCheckpointUpdate for Teams[0] = 0;
	Net_CPLive2_BestTimeAtCheckpoint = _BestTimeAtCheckpoint;
	Net_CPLive2_BestTimeAtCheckpointUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Trigger an update of the UI
Void TriggerUIUpdate() {
	declare netwrite Integer Net_CPLive2_TriggerUIUpdate for Teams[0] = 0;
	Net_CPLive2_TriggerUIUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Tell the UI that a new race started
Void StartNewRace() {
	declare netwrite Integer Net_CPLive2_StartNewRace for Teams[0] = 0;
	Net_CPLive2_StartNewRace += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the list of players that finished race
 *
 *  @param  _PlayerFinishedRace               List of players that finished race
 */
Void SetPlayerFinishedRace(Text[] _PlayerFinishedRace) {
	declare netwrite Text[] Net_CPLive2_PlayerFinishedRace for Teams[0];
	Net_CPLive2_PlayerFinishedRace = _PlayerFinishedRace;
	declare netwrite Integer Net_CPLive2_PlayerFinishedRaceUpdate for Teams[0];
	Net_CPLive2_PlayerFinishedRaceUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the cheers
 *
 *  @param  _Cheers             The cheers from API
 */
Void SetCheers(LeagueRanking::K_Cheers _Cheers) {
	declare netwrite LeagueRanking::K_Cheers Net_CPLive2_Cheers for Teams[0];
	declare netwrite Integer Net_CPLive2_CheersUpdate for Teams[0];
	Net_CPLive2_Cheers = _Cheers;
	Net_CPLive2_CheersUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the points limit used to
 *	displayed finalist and winner status
 *	Cup mode
 */
Void SetPointsLimit(Integer _PointsLimit) {
	declare netwrite Integer Net_Champion_LiveRankingChampion_PointsLimit for Teams[0];
	Net_Champion_LiveRankingChampion_PointsLimit = _PointsLimit;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the list of players qualified for the next final step
Void SetQualifiedPlayers(Text[] _QualifiedPlayersAccountIds) {
	declare netwrite Text[] Net_Champion_LiveRankingChampion_QualifiedPlayers for Teams[0];
	Net_Champion_LiveRankingChampion_QualifiedPlayers = _QualifiedPlayersAccountIds;
	declare netwrite Integer Net_Champion_LiveRankingChampion_QualifiedPlayersUpdate for Teams[0];
	Net_Champion_LiveRankingChampion_QualifiedPlayersUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the ranking mode
Void SetRankingMode(Integer _RankingMode) {
	declare netwrite Integer Net_Champion_LiveRankingChampion_RankingMode for Teams[0];
	Net_Champion_LiveRankingChampion_RankingMode = _RankingMode;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Display the player's team color behind its name
Void DisplayTeamColor(Boolean _DisplayTeamColor) {
	declare netwrite Boolean Net_Champion_LiveRankingChampion_DisplayTeamColor for Teams[0];
	Net_Champion_LiveRankingChampion_DisplayTeamColor = _DisplayTeamColor;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Display the player's team name
Void DisplayTeamName(Boolean _DisplayTeamName) {
	declare netwrite Boolean Net_Champion_LiveRankingChampion_DisplayTeamName for Teams[0];
	Net_Champion_LiveRankingChampion_DisplayTeamName = _DisplayTeamName;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Display the player's score progression
Void DisplayScoreProgression(Boolean _DisplayScoreProgression) {
	declare netwrite Boolean Net_Champion_LiveRankingChampion_DisplayScoreProgression for Teams[0];
	Net_Champion_LiveRankingChampion_DisplayScoreProgression = _DisplayScoreProgression;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the info message at the bottom of the live ranking
Void SetInfoMessage(Text _InfoMessage) {
	declare netwrite Text Net_Champion_LiveRankingChampion_InfoMessage for Teams[0];
	Net_Champion_LiveRankingChampion_InfoMessage = _InfoMessage;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	
	declare netwrite Boolean Net_Champion_LiveRankingChampion_IsVisible for _Player;
	Net_Champion_LiveRankingChampion_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetQualifiedPlayers([]);
	
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	SetBestTimeAtCheckpoint([]);
	SetPlayerFinishedRace([]);
	SetCheers(LeagueRanking::K_Cheers {});
	SetPointsLimit(-1);
	SetRankingMode(C_RankingMode_BestRace);
	DisplayTeamColor(False);
	DisplayTeamName(False);
	DisplayScoreProgression(False);
	SetInfoMessage("");
	Unload();
}