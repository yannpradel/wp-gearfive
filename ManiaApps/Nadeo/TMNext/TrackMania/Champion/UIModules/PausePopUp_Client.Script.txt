/**
 *  UI module: PausePopUp client side
 */
#Const Version    "2022-10-11"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/Champion/UIModules/PausePopUp_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Champion_PausePopUp"
#Const C_Type CUILayer::EUILayerType::Normal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Img_Button = "file://Media/Manialinks/Nadeo/TMNext/Modes/Champion/BoutonPopUpGreen.dds";

	//L16N [Champion] Displayed to spectator during the pause between two phases
	declare Text_MatchPaused = _("Match paused");
	//L16N [Champion] Label of a Button displayed to spectator during the pause between two phases
	declare Text_WatchWarmup = _("Watch warmup");
	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-default" halign="center" valign="center2" textprefix="$t$i" textcolor="FFF" textfont="{{{FontManager::C_GameFontExtraBold}}}"/>
</stylesheet>
<frame z-index="9" hidden="1" id="frame-global">
	<frame id="frame-content" pos="-135 68.2">
		<quad id="quad-background" pos="0 -11" size="50 60" z-index="0" bgcolor="000" opacity="0.5" halign="center" valign="center"/>
		
		<label id="label-text" z-index="2" size="48 5" pos="0 10" text="{{{Text_MatchPaused}}}" textcolor="fff" textsize="4" textemboss="0" class="text-default"/>
		<label id="label-time" z-index="2" size="48 5" pos="0 -6" textcolor="fff" textsize="14" textemboss="0" class="text-default"/>
		<frame pos="0 -25" z-index="3">
			<quad id="quad-watch-warm-up-button" size="30 13" z-index="3" colorize="FF6E00" opacity="1" halign="center" valign="center" scriptevents="1" image="{{{Img_Button}}}"/>
			<label id ="label-button-name" size="25 12" z-index="4" textcolor="fff" text="{{{Text_WatchWarmup}}}" textsize="3" autonewline="1" maxline="3" class="text-default"/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
""",
"""
***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Content;
declare CMlLabel Label_Time;
declare Boolean DisplayModule;
declare Boolean DisplayContent;

declare netread Integer Net_Champion_PausePopUp_PauseEndTime for Teams[0];
declare Boolean Champion_PausePopUp_IsVisible for UI = False;

declare Boolean WatchWarmUpClicked;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Content <=> (Page.GetFirstChild("frame-content") as CMlFrame);
Label_Time <=> (Page.GetFirstChild("label-time") as CMlLabel);
DisplayModule = Frame_Global.Visible;
DisplayContent = Frame_Content.Visible;
WatchWarmUpClicked = False;
Champion_PausePopUp_IsVisible = False;

Tools::FitLabelValue((Page.GetFirstChild("label-button-name") as CMlLabel), 3., 0.25, 0.25);
***

***MainLoop***
***
if (PageIsVisible) {
	foreach (Event in PendingEvents) {
		if (Event.Type == CMlEvent::Type::MouseClick) {
			if (Event.Control.ControlId == "quad-watch-warm-up-button") {
				WatchWarmUpClicked = True;
			}
		}
	}
	if (WatchWarmUpClicked) {
		Frame_Global.Hide();
	} else {
		declare Owner <=> MV_Utils::GetOwner(This);
		if (Owner != Null) {
			declare netread Boolean Net_Champion_PausePopUp_IsVisible for Owner;
			if (DisplayModule != (Net_Champion_PausePopUp_IsVisible && IsSpectatorClient)) {
				DisplayModule = (Net_Champion_PausePopUp_IsVisible && IsSpectatorClient);
				Frame_Global.Visible = DisplayModule;
			}
		}
		if (Net_Champion_PausePopUp_PauseEndTime > 0 && Net_Champion_PausePopUp_PauseEndTime - GameTime > 0) {
			Label_Time.Value = TL::TimeToText(Net_Champion_PausePopUp_PauseEndTime - GameTime);
			DisplayContent = True;
		} else {
			DisplayContent = False;
		}
		if (DisplayContent != Frame_Content.Visible) {
			Frame_Content.Visible = DisplayContent;
		}
	}
}
if (
	Champion_PausePopUp_IsVisible != (
		PageIsVisible && 
		Frame_Global.Visible &&
		Frame_Content.Visible
	)
) {
	Champion_PausePopUp_IsVisible = (
		PageIsVisible &&
		Frame_Global.Visible &&
		Frame_Content.Visible
	);
	ClientUI.OverlayHide321Go = Champion_PausePopUp_IsVisible;
	if (Champion_PausePopUp_IsVisible) {
		Playground.SetWantedSpectatorCameraType(CPlaygroundClient::ESpectatorCameraType::Free);
		ClientUI.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
	} else {
		if (Playground.GetSpectatorCameraType() == CPlaygroundClient::ESpectatorCameraType::Free) Playground.SetWantedSpectatorCameraType(CPlaygroundClient::ESpectatorCameraType::Replay);
		ClientUI.ScoreTableVisibility = CUIConfig::EVisibility::None;
	}
}
***
""",
[],
[]
	);
}