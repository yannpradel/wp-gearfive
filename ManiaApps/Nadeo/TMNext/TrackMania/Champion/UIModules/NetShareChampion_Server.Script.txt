/**
 *  UI module: Shared info between multiple UI modules for Champion, server side
 */
#Const Version    "2021-03-09"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/Champion/UIModules/NetShareChampion_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/ChampionCommon/Constants.Script.txt" as Constants


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Champion_NetShareChampion"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void SetPhase(Integer _Phase) {
	declare netwrite Integer Net_ShareChampion_Phase for Teams[0];
	Net_ShareChampion_Phase = _Phase;
}

/** Set the number of rounds remaining
 *
 *	@param	_RoundsNb					The number of rounds remaining
 */
Void SetRoundsNb(Integer _RoundsNb) {
	declare netwrite Integer Net_ShareChampion_RoundsNb for Teams[0];
	Net_ShareChampion_RoundsNb = _RoundsNb;
}

/** Set the total number of rounds
 *
 *	@param	_RoundsNb					The total number of rounds
 */
Void SetRoundsTotal(Integer _RoundsTotal) {
	declare netwrite Integer Net_ShareChampion_RoundsTotal for Teams[0];
	Net_ShareChampion_RoundsTotal = _RoundsTotal;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the number of rounds to play on one map
Void SetRoundsPerMap(Integer _RoundsPerMap) {
	declare netwrite Integer Net_ShareChampion_RoundsPerMap for Teams[0];
	Net_ShareChampion_RoundsPerMap = _RoundsPerMap;
}

/** Set the number of players that can
 *	win points at the end of the round
 *
 *	@param	_WinningPlayersNb					The number of players that can win points
 */
Void SetWinningPlayersNb(Integer _WinningPlayersNb) {
	declare netwrite Integer Net_ShareChampion_WinningPlayersNb for Teams[0];
	Net_ShareChampion_WinningPlayersNb = _WinningPlayersNb;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the Clash Time status
 *
 *	@param	_ClashTimeIsActive				True if Clash Time is active
 *																		False otherwise
 */
Void SetClashTimeIsActive(Boolean _ClashTimeIsActive) {
	declare netwrite Boolean Net_ShareChampion_ClashTimeIsActive for Teams[0];
	Net_ShareChampion_ClashTimeIsActive = _ClashTimeIsActive;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the warm up status
 *
 *	@param	_WarmUpIsActive						True if the warm up is active
 *																		False otherwise
 */
Void SetWarmUpIsActive(Boolean _WarmUpIsActive) {
	declare netwrite Boolean Net_ShareChampion_WarmUpIsActive for Teams[0];
	Net_ShareChampion_WarmUpIsActive = _WarmUpIsActive;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetRoundsNb(0);
	SetRoundsTotal(0);
	SetRoundsPerMap(0);
	SetWinningPlayersNb(0);
	SetWarmUpIsActive(False);
	SetClashTimeIsActive(False);
	SetPhase(Constants::C_Phase_Null);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}