/**
 *  UI module: BestLap client side
 */
#Const Version    "2020-10-02"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/Champion/UIModules/BestLap_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as MenuConsts
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/ChampionCommon/PlayerProfiles.Script.txt" as PlayerProfiles

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Champion_BestLap"
#Const C_Type CUILayer::EUILayerType::Normal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [TMGL] The lap number. eg : "Lap 3"
	declare Text_Lap = _("Lap %1");

	declare ML_Players = "";
	for (I, 0, 2) {
		declare PosY = I * -4.4;
		ML_Players ^= """<frameinstance pos="0 {{{PosY}}}" modelid="framemodel-player" />""";
	}

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-default" halign="center" valign="center2" textsize="0.5" textprefix="$t$i" textcolor="FFF" textfont="{{{FontManager::C_GameFontExtraBold}}}"/>
</stylesheet>
<framemodel id="framemodel-player">
	<label pos="4 0" size="2 5" halign="right" valign="center2" class="text-default"  textprefix="$t"  id="label-rank" />
	<quad pos="10 0" size="4 2.5"  halign="right" valign="center2" id="quad-flag"/>
	<label pos="11 0" size="25 5" halign="left" textcolor="FFF" class="text-default" id="label-name" />
	<label pos="43 0" size="5 5" halign="right" valign="center2" class="text-default" id="label-point" />
	<label pos="59 0" size="15 5" halign="right" valign="center2" class="text-default" id="label-time" />
</framemodel>
<frame pos="65 -72.5" z-index="-2" hidden="1" id="frame-global">
	<frame id="frame-is-spectator">
		<frame id="frame-best-lap">
			<quad size="62 5.25" z-index="-1" halign="left" valign="center2" image="{{{MenuConsts::C_ImageUrl_Champion_Spec_Background_BestLapTitle}}}" opacity="0.7" colorize="{{{ColorPalette::C_Color_GreenTwo}}}"/>
			<quad size="62 5.25" pos="0 -4.5" z-index="-1" halign="left" valign="center2" image="{{{MenuConsts::C_ImageUrl_Champion_Spec_Background_BestLapGold}}}" opacity="0.9"/>
			<quad size="62 5.25" pos="0 -8.75" z-index="-1" halign="left" valign="center2" image="{{{MenuConsts::C_ImageUrl_Champion_Spec_Background_BestLapSilver}}}" opacity="0.9"/>
			<quad size="62 5.25" pos="0 -13." z-index="-1" halign="left" valign="center2" image="{{{MenuConsts::C_ImageUrl_Champion_Spec_Background_BestLapBronze}}}" opacity="0.9"/>		
			<frame pos="31 0" z-index="1">
				<label size="50 6" halign="center" valign="center2" textcolor="FFF" class="text-default" id="label-lap-nb" />
			</frame>
			<frame pos="0 -4.5" z-index="2" id="frame-players">
				{{{ML_Players}}}
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils

#Struct K_BestLapTimes {
	Integer Lap;
	Text[] Names;
	Text[] Logins;
	Text[] WebServicesIds;
	Integer[] Times;
	Integer[] Points;
}
""",
"""
declare CMlFrame Frame_BestLap;
declare CMlLabel Label_LapNb;
declare CMlFrame Frame_Players;

Void UpdateTop3(K_BestLapTimes _BestLapTimes) {
	if (_BestLapTimes.Lap >= 1 && _BestLapTimes.WebServicesIds.count >= 1 && _BestLapTimes.WebServicesIds.count == _BestLapTimes.Times.count) {
		Label_LapNb.Value = TL::Compose("{{{Text_Lap}}}", TL::ToText(_BestLapTimes.Lap));
		declare BestTime = -1;

		foreach (Key => Control in Frame_Players.Controls) {
			declare Frame_Player <=> (Control as CMlFrame);

			if (_BestLapTimes.WebServicesIds.existskey(Key) && _BestLapTimes.Times.existskey(Key)) {
				declare Label_Rank <=> (Frame_Player.GetFirstChild("label-rank") as CMlLabel);
				declare Label_Name <=> (Frame_Player.GetFirstChild("label-name") as CMlLabel);
				declare Label_Time <=> (Frame_Player.GetFirstChild("label-time") as CMlLabel);
				declare Label_Point <=> (Frame_Player.GetFirstChild("label-point") as CMlLabel);
				declare Quad_Flag <=> (Frame_Player.GetFirstChild("quad-flag") as CMlQuad);
				
				Label_Rank.Value = TL::ToText(Key + 1);
				if ({{{PlayerProfiles::P}}}GetPlayerProfiles().existskey(_BestLapTimes.WebServicesIds[Key])) {
					Label_Name.Value = {{{PlayerProfiles::P}}}GetPlayerProfiles()[_BestLapTimes.WebServicesIds[Key]].Nickname;
				} else if (_BestLapTimes.Names.existskey(Key)) {
					Label_Name.Value = _BestLapTimes.Names[Key];
				} else {
					Label_Name.Value = "";
				}
				Tools::FitLabelValue(Label_Name, 0.25, .1);
				
				if (_BestLapTimes.Points.existskey(Key)) Label_Point.Value = TL::ToText(_BestLapTimes.Points[Key]);
				if (_BestLapTimes.Logins.existskey(Key)) Quad_Flag.ImageUrl = "file://ZoneFlags/Login/" ^ _BestLapTimes.Logins[Key] ^ "/country";
				
				declare LapTime = _BestLapTimes.Times[Key];
				if (BestTime < 0) {
					BestTime = LapTime;
					Label_Time.Value = TL::TimeToText(LapTime, True, True);
				} else {
					if (BestTime < LapTime) {
						Label_Time.Value = "+"^TL::TimeToText(LapTime - BestTime, True, True);
					} else {
						Label_Time.Value = TL::TimeToText(LapTime - BestTime, True, True);
					}
				}

				Frame_Player.Visible = True;
			} else {
				Frame_Player.Visible = False;
			}
		}
		AnimMgr.Flush(Frame_BestLap);
		AnimMgr.Add(Frame_BestLap, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Frame_BestLap, "<frame pos=\"0 -30\" hidden=\"1\" />", Now + 10000, 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Flush(Frame_BestLap);
		AnimMgr.Add(Frame_BestLap, "<frame pos=\"0 -30\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_IsSpectator;

declare netread K_BestLapTimes Net_Champion_BestLap_BestLapTimes for Teams[0];
declare netread Integer Net_Champion_BestLap_BestLapTimesUpdate for Teams[0];

declare Boolean DisplayModule;
declare Boolean CurIsSpectator;
declare Integer BestLapTimesUpdate;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_IsSpectator <=> (Frame_Global.GetFirstChild("frame-is-spectator") as CMlFrame);
Frame_BestLap <=> (Frame_Global.GetFirstChild("frame-best-lap") as CMlFrame);
Label_LapNb <=> (Frame_BestLap.GetFirstChild("label-lap-nb") as CMlLabel);
Frame_Players <=> (Frame_BestLap.GetFirstChild("frame-players") as CMlFrame);

DisplayModule = Frame_Global.Visible;
CurIsSpectator = True;
Frame_IsSpectator.Visible = CurIsSpectator;
BestLapTimesUpdate = -123;

UpdateTop3(K_BestLapTimes {});
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Champion_BestLap_IsVisible for Owner;
		if (DisplayModule != Net_Champion_BestLap_IsVisible) {
			DisplayModule = Net_Champion_BestLap_IsVisible;
			Frame_Global.Visible = Net_Champion_BestLap_IsVisible;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (CurIsSpectator != (InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)) {
		CurIsSpectator = (InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned);
		Frame_IsSpectator.Visible = CurIsSpectator;
	}

	if (BestLapTimesUpdate != Net_Champion_BestLap_BestLapTimesUpdate) {
		BestLapTimesUpdate = Net_Champion_BestLap_BestLapTimesUpdate;
		UpdateTop3(Net_Champion_BestLap_BestLapTimes);
	}
}
***
""",
[PlayerProfiles::Component()],
[]
	);
}