/**
 *  UI module: Player statistics server side
 */
#Const Version    "2020-01-22"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/Champion/UIModules/PlayerStats_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Champion_PlayerStats"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Integer[Text] G_FirstLapTimes;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set the number of players runing in the league
 *
 *	@param	_PlayersNb								The number of players
 */
Void SetPlayersNb(Integer _PlayersNb) {
	declare netwrite Integer Net_Champion_PlayerStats_PlayersNb for Teams[0];
	Net_Champion_PlayerStats_PlayersNb = _PlayersNb;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Set the number of rounds played during the match
 *
 *	@param	_RoundsNb									The current round number
 *	@param	_RoundsTotal							The total number of rounds to play
 */
Void SetRoundNb(Integer _RoundNb, Integer _RoundsTotal) {
	declare netwrite Integer Net_Champion_PlayerStats_RoundNb for Teams[0];
	declare netwrite Integer Net_Champion_PlayerStats_RoundsTotal for Teams[0];
	Net_Champion_PlayerStats_RoundNb = _RoundNb;
	Net_Champion_PlayerStats_RoundsTotal = _RoundsTotal;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Reset the match progression
Void ResetMatchProgression() {
	declare netwrite Integer[Text][Integer] Net_Champion_PlayerStats_MatchProgression for Teams[0];
	declare netwrite Integer Net_Champion_PlayerStats_MatchProgressionUpdate for Teams[0];
	Net_Champion_PlayerStats_MatchProgression = [];
	Net_Champion_PlayerStats_MatchProgressionUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Add the ranking of a player on a
 *	round to the match progression
 *
 *	@param	_User											The User of the player
 *	@param	_RoundNb									The number of the round
 *	@param	_Rank											The rank of the player
 */
Void AddRoundRanking(CUser _User, Integer _RoundNb, Integer _Rank) {
	declare netwrite Integer[Text][Integer] Net_Champion_PlayerStats_MatchProgression for Teams[0];
	declare netwrite Integer Net_Champion_PlayerStats_MatchProgressionUpdate for Teams[0];
	if (!Net_Champion_PlayerStats_MatchProgression.existskey(_RoundNb)) {
		Net_Champion_PlayerStats_MatchProgression[_RoundNb] = [];
	}
	Net_Champion_PlayerStats_MatchProgression[_RoundNb][_User.Login] = _Rank;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Reset the round progression
Void ResetRoundProgression() {
	declare netwrite Integer Net_Champion_PlayerStats_BestLapTime for Teams[0];
	declare netwrite Integer[Text] Net_Champion_PlayerStats_AverageLapTimes for Teams[0];
	declare netwrite Integer Net_Champion_PlayerStats_LapUpdate for Teams[0];
	Net_Champion_PlayerStats_BestLapTime = -1;
	Net_Champion_PlayerStats_AverageLapTimes = [];
	Net_Champion_PlayerStats_LapUpdate = Now;
	
	G_FirstLapTimes = [];
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Register a new lap for a player
 *
 *	@param	_User											The User of the player
 *	@param	_LapTime									The time of the lap
 *	@param	_RaceTime									The time of the race
 *	@param	_LapsNb										The number of laps done by the player
 */
Void AddLapTime(CUser _User, Integer _LapTime, Integer _RaceTime, Integer _LapsNb) {
	declare netwrite Integer Net_Champion_PlayerStats_BestLapTime for Teams[0];
	if (Net_Champion_PlayerStats_BestLapTime <= 0 || _LapTime < Net_Champion_PlayerStats_BestLapTime) {
		Net_Champion_PlayerStats_BestLapTime = _LapTime;
	}
	
	if (!G_FirstLapTimes.existskey(_User.Login)) {
		G_FirstLapTimes[_User.Login] = -1;
	}
	if (_RaceTime > 0 && _LapsNb == 1) {
		G_FirstLapTimes[_User.Login] = _RaceTime;
	} else if (_RaceTime > 0 && _LapsNb >= 2) {
		declare netwrite Integer[Text] Net_Champion_PlayerStats_AverageLapTimes for Teams[0];
		if (!Net_Champion_PlayerStats_AverageLapTimes.existskey(_User.Login)) {
			Net_Champion_PlayerStats_AverageLapTimes[_User.Login] = -1;
		}
		// Ignore first lap time if we can
		if (G_FirstLapTimes.existskey(_User.Login) && G_FirstLapTimes[_User.Login] <= _RaceTime) {
			Net_Champion_PlayerStats_AverageLapTimes[_User.Login] = (_RaceTime - G_FirstLapTimes[_User.Login]) / (_LapsNb - 1);
		} else {
			Net_Champion_PlayerStats_AverageLapTimes[_User.Login] = _RaceTime / _LapsNb;
		}
	}
	
	declare netwrite Integer Net_Champion_PlayerStats_LapUpdate for Teams[0];
	Net_Champion_PlayerStats_LapUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the number of hearts
 *
 *	@param	_Hearts										The number of hearts of each player
 */
Void SetHearts(Integer[Text] _Hearts) {
	declare netwrite Integer[Text] Net_Champion_PlayerStats_Hearts for Teams[0];
	declare netwrite Integer Net_Champion_PlayerStats_HeartsUpdate for Teams[0];
	Net_Champion_PlayerStats_Hearts = _Hearts;
	Net_Champion_PlayerStats_HeartsUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the players' best times on the map
 *
 *	@param	_BestTimes								The players' times
 */
Void SetBestTimes(Integer[Text] _BestTimes) {
	declare netwrite Integer[Text] Net_Champion_PlayerStats_BestTimes for Teams[0];
	declare netwrite Integer Net_Champion_PlayerStats_BestTimesUpdate for Teams[0];
	Net_Champion_PlayerStats_BestTimes = _BestTimes;
	Net_Champion_PlayerStats_BestTimesUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	
	declare netwrite Boolean Net_Champion_PlayerStats_IsVisible for _Player;
	Net_Champion_PlayerStats_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetPlayersNb(-1);
	SetRoundNb(-1, -1);
	ResetMatchProgression();
	ResetRoundProgression();
	SetHearts([]);
	SetBestTimes([]);
	
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}