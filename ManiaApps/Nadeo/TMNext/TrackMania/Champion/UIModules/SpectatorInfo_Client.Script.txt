/**
 *  UI module: SpectatorInfo client side
 */
#Const Version		"2022-02-08"
#Const ScriptName "ManiaApps/Nadeo/TMNext/TrackMania/Champion/UIModules/SpectatorInfo_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/ChampionCommon/PlayerProfiles.Script.txt" as PlayerProfiles
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/Champion/ColorPalette.Script.txt" as ColorPaletteChampion
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as MenuConsts

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Champion_SpectatorInfo"
#Const C_Type CUILayer::EUILayerType::Normal

#Const C_RankingMode_BestRace 0
#Const C_RankingMode_CurrentRace 1

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Pos_SpectatorInfo = <0., -68.5, 10.>;

	declare Color_Red = ColorPaletteChampion::C_Loss;
	declare Color_Green = ColorPalette::C_Color_GreenTwo;
	declare Color_WarmUp = ColorPalette::C_Color_Orange;

	declare Img_TeamsLogo = "file://Media/Manialinks/Nadeo/TMNext/Modes/Champion/TeamsLogo/";

	declare Text_WarmUp = _("Warm up");
	//L16N [TMCL] This player is the leader of the race.
	declare Text_Leader = _("Leader");
	declare Text_Point = _("|Point|pt");
	declare Text_Points = _("|Points|pts");
	//L16N [TMCL] Display time difference from n th place. eg: "+1.45 from 8th place"
	declare Text_From = _("|Rank|from %1");
	//L16N [CupTMGL] Player has reached the finalist status
	declare Text_Finalist = _("|Status|Finalist");
	//L16N [CupTMGL] Player won the match
	declare Text_Winner = _("|Status|Winner");

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-default" halign="center" valign="center2" textsize="3.5" textprefix="$t$i" textcolor="FFF" textfont="{{{FontManager::C_GameFontSemiBold}}}" />
	<style class="text-number" valign="center2" textprefix="$t$i" textfont="{{{FontManager::C_GameFontExtraBold}}}" textcolor="ffffff" textsize="5.5" />
</stylesheet>
<frame z-index="8" hidden="1" id="frame-global">
	<frame pos="{{{Pos_SpectatorInfo.X}}} {{{Pos_SpectatorInfo.Y}}}" z-index="{{{Pos_SpectatorInfo.Z}}}" id="frame-position">
		<frame id="frame-intro">
			<frame pos="0 -12.1" id="frame-spectator-info">
				<frame id="frame-target">
					<frame id="frame-left" pos="-47 0" z-index="2">
						<quad size="20 14" pos="0 7" z-index="-1" halign="center" image="{{{MenuConsts::C_ImageUrl_Champion_Spec_Background_Left}}}" id="quad-status-1" opacity="0.7"/>
						<label pos="2.25 -1" size="11 6" halign="right" class="text-number" id="label-rank" />
						<label pos="2.5 0.8" size="6 6" halign="left" textsize="2" class="text-default" textprefix="$i" opacity="0.7" id="label-rank-suffix" />
					</frame>					
					<frame id="frame-middle" z-index="2">
						<quad size="74 14" pos="0 7" z-index="-1" halign="center" colorize="{{{ColorPalette::C_Color_GreenFive}}}" image="{{{MenuConsts::C_ImageUrl_Champion_Spec_Background_Center}}}" opacity="0.7"/>						
						<quad pos="-35 0" size="12 12" valign="center" keepratio="Fit" id="quad-team-logo"/>
						<label pos="-21.5 1.75" size="35 6" halign="left" class="text-default" textfont="{{{FontManager::C_GameFontExtraBold}}}" id="label-name" />
						<label pos="-21.5 -3" size="35 6" halign="left" textsize="2.5" class="text-default" textfont="{{{FontManager::C_GameFontRegular}}}" id="label-team-name" />
						<label pos="28 -0.5" size="8.3 6" halign="right" class="text-number" id="label-points" />
						<label pos="28 -0.75" size="4 6" halign="left" textsize="2" class="text-default" opacity="0.7" id="label-points-suffix" />
						<label pos="35 -0.5" size="20 6" halign="right" hidden="1" class="text-default" id="label-finalist" />
					</frame>
					<frame id="frame-right" pos="47 0" z-index="2">
						<quad size="20 14" pos="0 7" z-index="-1" halign="center" image="{{{MenuConsts::C_ImageUrl_Champion_Spec_Background_Right}}}" id="quad-status-2" opacity="0.7"/>
						<label pos="8 -0.5" size="16 6" halign="right" class="text-number" id="label-time-diff" />
						<label pos="5 -4.5" size="15 6" halign="right" textsize="0.5" class="text-default" opacity="0.7" id="label-time-from"/>
						<label pos="5.75 -4.3" size="15 6" scale="0.8" textsize="0.5" class="text-default" textprefix="$i" opacity="0.7" id="label-time-from-suffix"/>
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils

#Const C_UpdateMaxFrequency 250

#Const C_RankingMode_BestRace {{{dump(C_RankingMode_BestRace)}}}
#Const C_RankingMode_CurrentRace {{{dump(C_RankingMode_CurrentRace)}}}
""",
"""
declare CMlFrame Frame_Target;
declare CMlQuad Quad_Status1;
declare CMlQuad Quad_Status2;
declare CMlLabel Label_Rank;
declare CMlLabel Label_RankSuffix;
declare CMlQuad Quad_TeamLogo;
declare CMlLabel Label_Name;
declare CMlLabel Label_TeamName;
declare CMlLabel Label_Points;
declare CMlLabel Label_PointsSuffix;
declare CMlLabel Label_Finalist;
declare CMlLabel Label_TimeDiff;
declare CMlLabel Label_TimeFrom;
declare CMlLabel Label_TimeFromSuffix;

Text FormatTeamLogo(Text _WebServicesUserId) {
	if ({{{PlayerProfiles::P}}}GetPlayerProfiles().existskey(_WebServicesUserId) && {{{PlayerProfiles::P}}}GetPlayerProfiles()[_WebServicesUserId].TeamLogo != "") {
		return "{{{Img_TeamsLogo}}}"^{{{PlayerProfiles::P}}}GetPlayerProfiles()[_WebServicesUserId].TeamLogo;
	}

	return "";
}

Void UpdateRanking(Integer _RankingMode, Integer _WinningPlayersNb, Boolean _WarmUpIsActive) {
	declare Integer[Ident][Integer] TmpRanking;
	declare Integer LatestCPTime = 0;
	declare Ident[Ident] ScoreIdToPlayerId;
	
	switch (_RankingMode) {
		case C_RankingMode_BestRace: {
			foreach (Score in Scores) {
				if (!TmpRanking.existskey(Score.BestRaceTimes.count)) {
					TmpRanking[Score.BestRaceTimes.count] = [];
				}

				declare CheckpointTime = -1;
				if (Score.BestRaceTimes.count > 0) {
					CheckpointTime = Score.BestRaceTimes[Score.BestRaceTimes.count - 1];
				}
				TmpRanking[Score.BestRaceTimes.count][Score.Id] = CheckpointTime;

				if (CheckpointTime > LatestCPTime) LatestCPTime = CheckpointTime;
			}
		}
		case C_RankingMode_CurrentRace: {
			foreach (Player in Players) {
				if (Player.Score != Null && Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) {
					if (!TmpRanking.existskey(Player.RaceWaypointTimes.count)) {
						TmpRanking[Player.RaceWaypointTimes.count] = [];
					}

					declare CheckpointTime = -1;
					if (Player.RaceWaypointTimes.count > 0) {
						CheckpointTime = Player.RaceWaypointTimes[Player.RaceWaypointTimes.count - 1];
					}
					TmpRanking[Player.RaceWaypointTimes.count][Player.Score.Id] = CheckpointTime;
					ScoreIdToPlayerId[Player.Score.Id] = Player.Id;

					if (CheckpointTime > LatestCPTime) LatestCPTime = CheckpointTime;
				}
			}
		}
	}
	
	TmpRanking = TmpRanking.sortkeyreverse();

	declare Boolean IsLeader = True;
	declare Ident LeaderId = NullId;
	declare Integer MinTimeDiff = 0;
	declare Integer Rank = 1;
	foreach (CheckpointKey => CheckpointTimes in TmpRanking) {
		declare SortedCheckpointTimes = CheckpointTimes.sort();

		foreach (ScoreId => CheckpointTime in SortedCheckpointTimes) {
			declare Score <=> Scores[ScoreId];
			declare Integer TimeDiff = 0;

			if (!_WarmUpIsActive) {
				// Save the checkpoint times of the leader
				if (IsLeader) {
					LeaderId = ScoreId;
					MinTimeDiff = 0;
					if (CheckpointTime >= 0) {
						TimeDiff = CheckpointTime;
					}
				}
				// Compute the time diff
				else {
					switch (_RankingMode) {
						case C_RankingMode_BestRace: {
							if (LeaderId != NullId && Scores[LeaderId].BestRaceTimes.existskey(CheckpointKey-1)) {
								declare CSmScore LeaderScore <=> Scores[LeaderId];
								declare Integer LeaderTimeAtCheckpoint = LeaderScore.BestRaceTimes[CheckpointKey-1];
								if (LeaderScore.BestRaceTimes.existskey(CheckpointKey)) {
									TimeDiff = ML::Max(CheckpointTime - LeaderTimeAtCheckpoint, LatestCPTime - LeaderScore.BestRaceTimes[CheckpointKey]);
								} else {
									TimeDiff = CheckpointTime - LeaderTimeAtCheckpoint;
								}
							} else {
								TimeDiff = 0;
							}
						}
						case C_RankingMode_CurrentRace: {
							if (
								LeaderId != NullId &&
								ScoreIdToPlayerId.existskey(LeaderId) &&
								Players.existskey(ScoreIdToPlayerId[LeaderId]) &&
								Players[ScoreIdToPlayerId[LeaderId]].RaceWaypointTimes.existskey(CheckpointKey - 1)
							) {
								declare CSmPlayer LeaderPlayer <=> Players[ScoreIdToPlayerId[LeaderId]];
								declare Integer LeaderTimeAtCheckpoint = LeaderPlayer.RaceWaypointTimes[CheckpointKey-1];
								if (LeaderPlayer.RaceWaypointTimes.existskey(CheckpointKey)) {
									TimeDiff = ML::Max(CheckpointTime - LeaderTimeAtCheckpoint, LatestCPTime - LeaderPlayer.RaceWaypointTimes[CheckpointKey]);
								} else {
									TimeDiff = CheckpointTime - LeaderTimeAtCheckpoint;
								}
							} else {
								TimeDiff = 0;
							}
						}
					}

					if (TimeDiff > MinTimeDiff) {
						MinTimeDiff = TimeDiff;
					} else {
						TimeDiff = MinTimeDiff;
					}
				}
			}

			declare Integer Champion_SpectatorInfo_Rank for Score = Scores.count;
			declare Integer Champion_SpectatorInfo_TimeDiff for Score = 0;
			Champion_SpectatorInfo_Rank = Rank;
			Champion_SpectatorInfo_TimeDiff = TimeDiff;

			// Save the checkpoint time of the last player to win points
			if (_WinningPlayersNb > 0 && Rank == _WinningPlayersNb) {
				LeaderId = ScoreId;
				MinTimeDiff = 0;
			}

			IsLeader = False;
			Rank += 1;
		}
	}
}

Void SetTarget(CSmPlayer _Target, Integer _WinningPlayersNb, Boolean _WarmUpIsActive, Boolean _ClashTimeIsActive, Integer _PointsLimit) {
	if (_Target != Null && _Target.Score != Null) {
		declare Integer Champion_SpectatorInfo_Rank for _Target.Score = Scores.count;
		declare Integer Champion_SpectatorInfo_TimeDiff for _Target.Score = 0;

		if (_WarmUpIsActive) {
			Quad_Status1.Colorize = CL::Hex6ToRgb("{{{Color_WarmUp}}}");
			Quad_Status2.Colorize = CL::Hex6ToRgb("{{{Color_WarmUp}}}");
		} else if (_WinningPlayersNb <= 0 || Champion_SpectatorInfo_Rank <= _WinningPlayersNb) {
			Quad_Status1.Colorize = CL::Hex6ToRgb("{{{Color_Green}}}");
			Quad_Status2.Colorize = CL::Hex6ToRgb("{{{Color_Green}}}");
		} else {
			Quad_Status1.Colorize = CL::Hex6ToRgb("{{{Color_Red}}}");
			Quad_Status2.Colorize = CL::Hex6ToRgb("{{{Color_Red}}}");
		}

		Label_Rank.Value = TL::ToText(Champion_SpectatorInfo_Rank);
		Label_RankSuffix.Value = MV_Utils::GetRankSuffix(Champion_SpectatorInfo_Rank);
		declare Text TeamLogoUrl = FormatTeamLogo(_Target.User.WebServicesUserId);
		if (Http.IsValidUrl(TeamLogoUrl)) {
			Quad_TeamLogo.ImageUrl = FormatTeamLogo(_Target.User.WebServicesUserId);
		} else {
			Quad_TeamLogo.ImageUrl = "";
		}
		
		if ({{{PlayerProfiles::P}}}GetPlayerProfiles().existskey(_Target.User.WebServicesUserId)) {
			Label_Name.RelativePosition_V3.Y = 1.75;
			Label_Name.Value = TL::ToUpperCase({{{PlayerProfiles::P}}}GetPlayerProfiles()[_Target.User.WebServicesUserId].Nickname);
			Label_TeamName.Value = TL::ToUpperCase({{{PlayerProfiles::P}}}GetPlayerProfiles()[_Target.User.WebServicesUserId].Team);
		} else {
			Label_Name.RelativePosition_V3.Y = -0.5;
			Label_Name.Value = _Target.User.Name;
			Label_TeamName.Value = "";
		}

		Tools::FitLabelValue(Label_Name, 3.5, 1.5, 0.5);
		Tools::FitLabelValue(Label_TeamName, 2.5, 1.5, 0.5);
		
		if (_ClashTimeIsActive) {
			Label_Points.Visible = False;
			Label_PointsSuffix.Visible = False;
			Label_Finalist.Visible = False;
		} else if (_PointsLimit < 0 || _Target.Score.Points < _PointsLimit) {
			Label_Points.Value = TL::ToText(_Target.Score.Points);
			if (_Target.Score.Points >= -1 && _Target.Score.Points <= 1) {
				Label_PointsSuffix.Value = "{{{Text_Point}}}";
			} else {
				Label_PointsSuffix.Value = "{{{Text_Points}}}";
			}
			Label_Points.Visible = True;
			Label_PointsSuffix.Visible = True;
			Label_Finalist.Visible = False;
		} else {
			if (_Target.Score.Points == _PointsLimit) {
				Label_Finalist.Value = "{{{Text_Finalist}}}";
				Label_Finalist.TextColor = CL::Hex6ToRgb("{{{ColorPaletteChampion::C_Finalist}}}");
			} else {
				Label_Finalist.Value = "{{{Text_Winner}}}";
				Label_Finalist.TextColor = CL::Hex6ToRgb("{{{ColorPaletteChampion::C_Winner}}}");
			}
			
			Tools::FitLabelValue(Label_Finalist, 3.5, 1.5, 0.5);

			Label_Points.Visible = False;
			Label_PointsSuffix.Visible = False;
			Label_Finalist.Visible = True;
		}

		if (_WarmUpIsActive) {
			Label_TimeDiff.Value = "{{{Text_WarmUp}}}";
			Tools::FitLabelValue(Label_TimeDiff, 5.5, 2., 0.5);
			Label_TimeFrom.Value = "";
			Label_TimeFromSuffix.Value = "";
		} else if (Champion_SpectatorInfo_Rank == 1) {
			Label_TimeDiff.Value = "{{{Text_Leader}}}";
			Tools::FitLabelValue(Label_TimeDiff, 5.5, 2., 0.5);
			Label_TimeFrom.Value = "";
			Label_TimeFromSuffix.Value = "";
		} else if (Champion_SpectatorInfo_TimeDiff >= 0) {

			// Shorter format than TL::TimeToText
			declare TimeWithoutMs = Champion_SpectatorInfo_TimeDiff / 10;
			declare TimeInSeconds = TimeWithoutMs / 100.;
			declare Text TimeDiff;
			if (TimeInSeconds <= 10.) {
				TimeDiff = TL::FormatReal(TimeInSeconds, 2, False, False);
			} else if (TimeInSeconds <= 100.) {
				TimeDiff = TL::FormatReal(TimeInSeconds, 1, False, False);
			} else {
				TimeDiff = TL::ToText(ML::FloorInteger(TimeInSeconds));
			}
			Label_TimeDiff.Value = "+"^TimeDiff;
			Tools::FitLabelValue(Label_TimeDiff, 5.5, 2., 0.5);

			if (_WinningPlayersNb <= 0 || Champion_SpectatorInfo_Rank <= _WinningPlayersNb) {
				Label_TimeFrom.Value = TL::Compose("{{{Text_From}}}", "1");
				Label_TimeFromSuffix.Value = MV_Utils::GetRankSuffix(1);
			} else {
				Label_TimeFrom.Value = TL::Compose("{{{Text_From}}}", TL::ToText(_WinningPlayersNb));
				Label_TimeFromSuffix.Value = MV_Utils::GetRankSuffix(_WinningPlayersNb);
			}
		} else {
			Label_TimeDiff.Value = "";
			Label_TimeFrom.Value = "";
			Label_TimeFromSuffix.Value = "";
		}
		Frame_Target.Visible = True;
	} else {
		Frame_Target.Visible = False;
	}
}

Void HideDuringIntro(CMlFrame _Frame) {
	if (_Frame == Null) return;

	declare IsIntro = (
		UI.UISequence == CUIConfig::EUISequence::Intro ||
		UI.UISequence == CUIConfig::EUISequence::RollingBackgroundIntro ||
		UI.UISequence == CUIConfig::EUISequence::Outro
	);

	if (_Frame.Visible && IsIntro) {
		_Frame.Visible = False;
	} else if (!_Frame.Visible && !IsIntro) {
		_Frame.Visible = True;
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Position;
declare CMlFrame Frame_Intro;
declare CMlFrame Frame_SpectatorInfo;

declare netread Integer Net_ShareChampion_WinningPlayersNb for Teams[0];
declare netread Boolean Net_ShareChampion_WarmUpIsActive for Teams[0];
declare netread Boolean Net_ShareChampion_ClashTimeIsActive for Teams[0];
declare netread Integer Net_Champion_SpectatorInfo_ForceUpdate for Teams[0];
declare netread Integer Net_Champion_SpectatorInfo_PointsLimit for Teams[0];
declare netread Integer Net_Champion_SpectatorInfo_RankingMode for Teams[0];
declare netread Text Net_Champion_SpecTargetLogin for UI;
declare netread Integer Net_Champion_SpecTargetLoginUpdate for UI;

declare Boolean DisplayModule;
declare Ident PrevTargetId;
declare Boolean PrevIsSpectator;
declare Integer NextRankingUpdate;
declare Integer WinningPlayersNb;
declare Boolean WarmUpIsActive;
declare Boolean ClashTimeIsActive;
declare Text MapUid;
declare Integer ForceUpdate;
declare Integer SpecTargetLoginUpdate;
declare Integer PrevRaceWaypointCount;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Position <=> (Page.GetFirstChild("frame-position") as CMlFrame);
Frame_Intro <=> (Page.GetFirstChild("frame-intro") as CMlFrame);
Frame_SpectatorInfo <=> (Frame_Global.GetFirstChild("frame-spectator-info") as CMlFrame);
Frame_Target <=> (Frame_SpectatorInfo.GetFirstChild("frame-target") as CMlFrame);
Quad_Status1 <=> (Frame_Target.GetFirstChild("quad-status-1") as CMlQuad);
Quad_Status2 <=> (Frame_Target.GetFirstChild("quad-status-2") as CMlQuad);
Label_Rank <=> (Frame_Target.GetFirstChild("label-rank") as CMlLabel);
Label_RankSuffix <=> (Frame_Target.GetFirstChild("label-rank-suffix") as CMlLabel);
Quad_TeamLogo <=> (Frame_Target.GetFirstChild("quad-team-logo") as CMlQuad);
Label_Name <=> (Frame_Target.GetFirstChild("label-name") as CMlLabel);
Label_TeamName <=> (Frame_Target.GetFirstChild("label-team-name") as CMlLabel);
Label_Points <=> (Frame_Target.GetFirstChild("label-points") as CMlLabel);
Label_PointsSuffix <=> (Frame_Target.GetFirstChild("label-points-suffix") as CMlLabel);
Label_Finalist <=> (Frame_Target.GetFirstChild("label-finalist") as CMlLabel);
Label_TimeDiff <=> (Frame_Target.GetFirstChild("label-time-diff") as CMlLabel);
Label_TimeFrom <=> (Frame_Target.GetFirstChild("label-time-from") as CMlLabel);
Label_TimeFromSuffix <=> (Frame_Target.GetFirstChild("label-time-from-suffix") as CMlLabel);

DisplayModule = Frame_Global.Visible;
PrevTargetId = NullId;
PrevIsSpectator = Frame_SpectatorInfo.Visible;
NextRankingUpdate = -1;
WinningPlayersNb = -123;
WarmUpIsActive = False;
ClashTimeIsActive = False;
MapUid = "";
ForceUpdate = -123;
PrevRaceWaypointCount = 0;

UpdateRanking(Net_Champion_SpectatorInfo_RankingMode, Net_ShareChampion_WinningPlayersNb, Net_ShareChampion_WarmUpIsActive);
HideResumePlayingButton = True;
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Champion_SpectatorInfo_IsVisible for Owner;
		if (DisplayModule != Net_Champion_SpectatorInfo_IsVisible) {
			DisplayModule = Net_Champion_SpectatorInfo_IsVisible;
			Frame_Global.Visible = Net_Champion_SpectatorInfo_IsVisible;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	HideDuringIntro(Frame_Intro);

	if (InputPlayer != Null && PrevIsSpectator != (InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)) {
		PrevIsSpectator = (InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned);
		Frame_SpectatorInfo.Visible = PrevIsSpectator;
		if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
	}

	if (Net_Champion_SpecTargetLoginUpdate != SpecTargetLoginUpdate) {
		SpecTargetLoginUpdate = Net_Champion_SpecTargetLoginUpdate;
		SetSpectateTarget(Net_Champion_SpecTargetLogin);
	}

	if (
		Frame_Global.Visible &&
		Frame_SpectatorInfo.Visible
	) {
		if (Owner != Null) {
			if (
				(GUIPlayer != Null && PrevTargetId != GUIPlayer.Id) ||
				(GUIPlayer == Null && PrevTargetId != NullId)
			) {
				if (GUIPlayer != Null) {
					PrevTargetId = Owner.Id;
				} else {
					PrevTargetId = NullId;
				}
				UpdateRanking(Net_Champion_SpectatorInfo_RankingMode, Net_ShareChampion_WinningPlayersNb, Net_ShareChampion_WarmUpIsActive);
				SetTarget(GUIPlayer, Net_ShareChampion_WinningPlayersNb, Net_ShareChampion_WarmUpIsActive, Net_ShareChampion_ClashTimeIsActive, Net_Champion_SpectatorInfo_PointsLimit);
			}
		}

		if (WinningPlayersNb != Net_ShareChampion_WinningPlayersNb) {
			WinningPlayersNb = Net_ShareChampion_WinningPlayersNb;
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		}

		if (WarmUpIsActive != Net_ShareChampion_WarmUpIsActive) {
			WarmUpIsActive = Net_ShareChampion_WarmUpIsActive;
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		}
		if (ClashTimeIsActive != Net_ShareChampion_ClashTimeIsActive) {
			ClashTimeIsActive = Net_ShareChampion_ClashTimeIsActive;
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		}

		if (Map != Null && MapUid != Map.MapInfo.MapUid) {
			MapUid = Map.MapInfo.MapUid;
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		} else if (Map == Null && MapUid != "") {
			MapUid = "";
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		}

		if (ForceUpdate != Net_Champion_SpectatorInfo_ForceUpdate) {
			ForceUpdate = Net_Champion_SpectatorInfo_ForceUpdate;
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		}

		if (PrevRaceWaypointCount != Owner.RaceWaypointTimes.count) {
			PrevRaceWaypointCount = Owner.RaceWaypointTimes.count;
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		}

		if (NextRankingUpdate > 0 && Now >= NextRankingUpdate) {
			UpdateRanking(Net_Champion_SpectatorInfo_RankingMode, Net_ShareChampion_WinningPlayersNb, Net_ShareChampion_WarmUpIsActive);
			SetTarget(GUIPlayer, Net_ShareChampion_WinningPlayersNb, Net_ShareChampion_WarmUpIsActive, Net_ShareChampion_ClashTimeIsActive, Net_Champion_SpectatorInfo_PointsLimit);
			NextRankingUpdate = -1;
		}
	}
}
***
""",
[
	PlayerProfiles::Component()
],
[]
	);
}