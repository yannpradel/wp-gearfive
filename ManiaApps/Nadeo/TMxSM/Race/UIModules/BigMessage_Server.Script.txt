/**
 *  UI module: BigMessage server side
 */
#Const Version		"2022-04-04"
#Const ScriptName "ManiaApps/Nadeo/TMxSM/Race/UIModules/BigMessage_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Common.Script.txt" as UIModules_Common
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/BigMessage_Common.Script.txt" as UIModules_BigMessage_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_BigMessage_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::ComponentModeLibsUIModules_K_ModuleConfig GetConfig() {
	return UIModules_BigMessage_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the message info
 * The message WILL NOT BE DISPLAYED to players joining after the function call
 *
 *	@param	_Player										The player where the message will be displayed
 *	@param	_Message									The message to display
 *	@param	_AccountId								The accountId used to retrieve the display name of a player. Will replace %1 in the message.
 *	@param	_TextList									The list of text for the composed message. Will replace %2, %3, etc. in the message.
 *	@param	_Duration									The duration of the message to display
 */
Void SetMessage(CSmPlayer _Player, Text _Message, Text _AccountId, Text[] _TextList, Integer _Duration) {
	if (_Player != Null) {
		declare PlayerUI <=> UIManager.GetUI(_Player);
		if (PlayerUI != Null) {
			declare netwrite Text Net_BigMessage_Message for PlayerUI;
			Net_BigMessage_Message = _Message;
			declare netwrite Text Net_BigMessage_AccountId for PlayerUI;
			Net_BigMessage_AccountId = _AccountId;
			declare netwrite Text[] Net_BigMessage_TextList for PlayerUI;
			Net_BigMessage_TextList = _TextList;
			declare netwrite Integer Net_BigMessage_EndTime for PlayerUI;
			Net_BigMessage_EndTime = Now + _Duration;
			declare netwrite Integer Net_BigMessage_MessageUpdate for PlayerUI;
			Net_BigMessage_MessageUpdate = Now;
			if (_Duration <= 0) Net_BigMessage_EndTime = 0;
		}
	}
}
Void SetMessage(CSmPlayer _Player, Text _Message, Integer _Duration) {
	SetMessage(_Player, _Message, "", [], _Duration);
}
Void SetMessage(Text _Message, Text _AcountId, Text[] _TextList, Integer _Duration) {
	foreach (Player in AllPlayers) {
		SetMessage(Player, _Message, _AcountId, _TextList, _Duration);
	}
}
Void SetMessage(Text _Message, Text _AcountId, Text[] _TextList) {
	SetMessage(_Message, _AcountId, _TextList, 0);
}
Void SetMessage(Text _Message, Text _AcountId, Integer _Duration) {
	SetMessage(_Message, _AcountId, [], _Duration);
}
Void SetMessage(Text _Message, Integer _Duration) {
	SetMessage(_Message, "", _Duration);
}
Void SetMessage(Text _Message, Text[] _TextList) {
	SetMessage(_Message, "", _TextList, 0);
}
Void SetMessage(Text _Message, Text _AcountId) {
	SetMessage(_Message, _AcountId, 0);
}
Void SetMessage(Text _Message) {
	SetMessage(_Message, 0);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the message offset to the default position
 *
 *	@param	_Offset										New offset
 */
Void SetOffset(Vec2 _Offset) {
	declare netwrite Vec2 Net_BigMessage_Position for Teams[0];
	Net_BigMessage_Position = _Offset;
}

/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	
	declare netwrite Boolean Net_Cup_BigMessage_IsVisible for _Player;
	Net_Cup_BigMessage_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetMessage("");
	SetOffset(<0., 0.>);
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}