/**
 *  UI module: Chrono client side
 */
#Const Version    "2023-03-23"
#Const ScriptName "ManiaApps/Nadeo/TMxSM/Race/UIModules/Chrono_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/Chrono_Common.Script.txt" as UIModules_Chrono_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_Chrono_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_Chrono_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-number" textfont="{{{FontManager::C_Oswald_Mono}}}" textemboss="1" textcolor="ffffff" textsize="3" />
</stylesheet>
<frame z-index="-2" hidden="1" id="frame-global">
	<frame {{{UIModules::CustomizableUIModule(UIModules_Chrono_Common::C_UIModuleConfig)}}}>
		<frame hidden="1" id="frame-chrono">
			<label z-index="1" size="40 10" halign="center" valign="center" textsize="10" text="--:--.--" class="text-number" id="label-chrono" />
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/Helpers_Client.Script.txt" as RaceHelpers

#Const C_VisibleFor_Everyone {{{dump(UIModules_Chrono_Common::C_VisibleFor_Everyone)}}}
#Const C_VisibleFor_PlayersOnly {{{dump(UIModules_Chrono_Common::C_VisibleFor_PlayersOnly)}}}
#Const C_VisibleFor_SpectatorsOnly {{{dump(UIModules_Chrono_Common::C_VisibleFor_SpectatorsOnly)}}}
""",
"""
Boolean CanSeeChrono(
	CSmPlayer _TargetPlayer,
	CSmPlayer _InputPlayer,
	Integer _VisibleFor
) {
	if (_TargetPlayer == Null) return False;
	if (_TargetPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) return False;
	if (_VisibleFor == C_VisibleFor_PlayersOnly && (_InputPlayer == Null || _InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)) return False;
	if (_VisibleFor == C_VisibleFor_SpectatorsOnly && (_InputPlayer == Null || _InputPlayer.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned)) return False;

	return True;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Chrono;
declare CMlLabel Label_Chrono;

declare netread Integer Net_Race_Chrono_VisibleFor for Teams[0];

declare Boolean DisplayModule;
declare CSmPlayer::ESpawnStatus SpawnStatus;
declare CUIConfig::EUIStatus UIStatus;
declare Integer VisibleFor;
declare Ident OwnerId;
declare Ident InputPlayerId;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Chrono <=> (Frame_Global.GetFirstChild("frame-chrono") as CMlFrame);
Label_Chrono <=> (Frame_Chrono.GetFirstChild("label-chrono") as CMlLabel);

DisplayModule = Frame_Global.Visible;
SpawnStatus = CSmPlayer::ESpawnStatus::NotSpawned;
UIStatus = CUIConfig::EUIStatus::None;
VisibleFor = C_VisibleFor_Everyone;
OwnerId = NullId;
InputPlayerId = NullId;
if (SplitScreenCount > 1) MV_Utils::AutoScaleSplitScreen(Frame_Global, 1., 0.5);
Frame_Chrono.Visible = CanSeeChrono(MV_Utils::GetOwner(This), InputPlayer, VisibleFor);
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Race_Chrono_IsVisible for Owner;
		if (DisplayModule != Net_Race_Chrono_IsVisible) {
			DisplayModule = Net_Race_Chrono_IsVisible;
			Frame_Global.Visible = Net_Race_Chrono_IsVisible;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_Global.Visible) {
		if (Owner != Null) {
			if (
				(InputPlayer != Null && SpawnStatus != InputPlayer.SpawnStatus) ||
				VisibleFor != Net_Race_Chrono_VisibleFor ||
				(InputPlayer != Null && InputPlayerId != InputPlayer.Id) ||
				(InputPlayer == Null && InputPlayerId != NullId) ||
				(Owner != Null && OwnerId != Owner.Id) ||
				(Owner == Null && OwnerId != NullId)
			) {
				VisibleFor = Net_Race_Chrono_VisibleFor;
				if (Owner == Null) OwnerId = NullId;
				else OwnerId = Owner.Id;
				if (InputPlayer == Null) {
					InputPlayerId = NullId;
					SpawnStatus = CSmPlayer::ESpawnStatus::NotSpawned;
				} else {
					InputPlayerId = InputPlayer.Id;
					SpawnStatus = InputPlayer.SpawnStatus;
				}
				Frame_Chrono.Visible = CanSeeChrono(Owner, InputPlayer, VisibleFor);
			}

			if (Frame_Chrono.Visible) {
				declare netread Integer Net_Race_Chrono_TimeOffset for Owner;
				RaceHelpers::UpdatePlayerChronoLabel(Teams[0], Label_Chrono, Owner, Net_Race_Chrono_TimeOffset);

				if (UI != Null && UIStatus != UI.UIStatus) {
					UIStatus = UI.UIStatus;
					switch (UI.UIStatus) {
						case CUIConfig::EUIStatus::Warning: Label_Chrono.TextColor = <1., 0.6, 0.>;
						case CUIConfig::EUIStatus::Error: Label_Chrono.TextColor = <1., 0., 0.>;
						case CUIConfig::EUIStatus::Official: Label_Chrono.TextColor = <0., 0.6, 0.>;
						default: Label_Chrono.TextColor = <1., 1., 1.>;
					}
				}
			}
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}