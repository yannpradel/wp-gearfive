/**
 *	UI module: Vote common
 */
#Const Version		"2023-01-20"
#Const ScriptName	"ManiaApps/Nadeo/TMxSM/Race/UIModules/Vote_Common.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Common.Script.txt" as UIModules_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_ButtonInputs {
	Boolean IsInitialized;
	Integer Update;
	CMlScriptEvent::EMenuNavAction YesInput;
	CMlScriptEvent::EMenuNavAction NoInput;
	CInputManager::EButton YesIcon;
	CInputManager::EButton NoIcon;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Race_Vote"
#Const C_LayerType CUILayer::EUILayerType::Normal
#Const C_UIModuleConfig UIModules_Common::ComponentModeLibsUIModules_K_ModuleConfig {
	Id = "Race_Vote", //< Do not modify this Id once in production. It is used by the xmlrpc protocole and would break compatibility.
	IsCustomizable = True,
	Properties = UIModules_Common::ComponentModeLibsUIModules_K_ModuleProperties {
		Position = <160., 55.>,
		Scale = 1.,
		Visible = True
	}
}

#Const C_ButtonInputs_Null K_ButtonInputs {
	IsInitialized = False,
	Update = 0,
	YesInput = CMlScriptEvent::EMenuNavAction::Action1,
	NoInput = CMlScriptEvent::EMenuNavAction::Action2,
	YesIcon = CInputManager::EButton::X,
	NoIcon = CInputManager::EButton::Y
}

#Const C_VoteChoice_None 0
#Const C_VoteChoice_Yes 1
#Const C_VoteChoice_No 2

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the custom vote UI is available
Boolean CustomUIIsAvailable(CSystemPlatform _System) {
	return !Platform::IsPC(_System);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Allow the user to press a button to vote
Void EnableVoteAction(CUser _User, Boolean _Enabled) {
	declare Boolean Race_Vote_VoteActionEnabled for _User = False;
	Race_Vote_VoteActionEnabled = _Enabled;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the user can press a button to vote
Boolean VoteActionEnabled(CUser _User) {
	declare Boolean Race_Vote_VoteActionEnabled for _User = False;
	return Race_Vote_VoteActionEnabled;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the button inputs used to vote
Void SetButtonInputs(CUser _User, CMlScriptEvent::EMenuNavAction _YesInput, CMlScriptEvent::EMenuNavAction _NoInput, CInputManager::EButton _YesIcon, CInputManager::EButton _NoIcon) {
	declare K_ButtonInputs Race_Vote_ButtonInputs for _User = C_ButtonInputs_Null;
	Race_Vote_ButtonInputs = K_ButtonInputs {
		IsInitialized = True,
		Update = Race_Vote_ButtonInputs.Update + 1,
		YesInput = _YesInput,
		NoInput = _NoInput,
		YesIcon = _YesIcon,
		NoIcon = _NoIcon
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the button inputs used to vote
K_ButtonInputs GetButtonInputs(CUser _User) {
	declare K_ButtonInputs Race_Vote_ButtonInputs for _User = C_ButtonInputs_Null;
	return Race_Vote_ButtonInputs;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the choice of the user in the current vote
Void SetCurrentVoteChoice(CUser _User, Integer _VoteChoice) {
	declare Integer Race_Vote_VoteChoice for _User = C_VoteChoice_None;
	Race_Vote_VoteChoice = _VoteChoice;
}
Void ResetCurrentVoteChoice(CUser _User) {
	SetCurrentVoteChoice(_User, C_VoteChoice_None);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the choice of the user in the current vote
Integer GetCurrentVoteChoice(CUser _User) {
	declare Integer Race_Vote_VoteChoice for _User = C_VoteChoice_None;
	return Race_Vote_VoteChoice;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Process a button input for the vote
Void ProcessButtonInput(CMlScriptIngame _This, CUser _User, CMlScriptEvent::EMenuNavAction _Input) {
	declare K_ButtonInputs Race_Vote_ButtonInputs for _User = C_ButtonInputs_Null;
	assert(Race_Vote_ButtonInputs.IsInitialized, "You must define the button used to vote with `SetButtonInputs()`");
	if (_This.Playground.Vote_CanVote && CustomUIIsAvailable(_This.System)) {
		if (_Input == Race_Vote_ButtonInputs.YesInput) {
			_This.Playground.Vote_Cast(True);
			SetCurrentVoteChoice(_User, C_VoteChoice_Yes);
		} else if (_Input == Race_Vote_ButtonInputs.NoInput) {
			_This.Playground.Vote_Cast(False);
			SetCurrentVoteChoice(_User, C_VoteChoice_No);
		}
	}
}