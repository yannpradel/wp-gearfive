/**
 *  UI module: BlockHelper client side
 */
#Const Version		"2023-02-03"
#Const ScriptName	"ManiaApps/Nadeo/TMxSM/Race/UIModules/BlockHelper_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/BlockHelper_Common.Script.txt" as UIModules_BlockHelper_Common
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_HelperPosX 200.

#Const C_Event_GameplaySpecial "BlockHelper_Event_GameplaySpecial"

#Const C_GameplaySpecialMessageList [
	//L16N Message displayed when passing on a Turbo special block
	CManiaAppPlaygroundEvent::GameplaySpecialType::Turbo => _("|SpecialBlock|Turbo"),
	//L16N Message displayed when passing on a Super Turbo special block
	CManiaAppPlaygroundEvent::GameplaySpecialType::Turbo2 => _("|SpecialBlock|Super turbo"),
	//L16N Message displayed when passing turbo roulette special block with full power
	CManiaAppPlaygroundEvent::GameplaySpecialType::TurboRoulette => _("|SpecialBlock|Ultra turbo"),
	//L16N Message displayed when passing on a FreeWheeling special block
	CManiaAppPlaygroundEvent::GameplaySpecialType::FreeWheeling => _("|SpecialBlock|Engine off"),
	//L16N Message displayed when passing on a NoGrip special block
	CManiaAppPlaygroundEvent::GameplaySpecialType::NoGrip => _("|SpecialBlock|No grip"),
	//L16N Message displayed when passing on a NoSteering special block
	CManiaAppPlaygroundEvent::GameplaySpecialType::NoSteering => _("|SpecialBlock|No steering"),
	//L16N Message displayed when passing on a ForceAcceleration special block
	CManiaAppPlaygroundEvent::GameplaySpecialType::ForceAcceleration => _("|SpecialBlock|Force acceleration"),
	//L16N Message displayed when passing on a Reset special block
	CManiaAppPlaygroundEvent::GameplaySpecialType::Reset => _("|SpecialBlock|Reset"),
	//L16N Message displayed when passing on a SlowMotion special block
	CManiaAppPlaygroundEvent::GameplaySpecialType::SlowMotion => _("|SpecialBlock|Slow motion"),
	//L16N Message displayed when passing on a Bumper special block
	CManiaAppPlaygroundEvent::GameplaySpecialType::Bumper => _("|SpecialBlock|Bumper"),
	//L16N Message displayed when passing on a Super Bumper special block
	CManiaAppPlaygroundEvent::GameplaySpecialType::Bumper2 => _("|SpecialBlock|Super bumper"),
	//L16N Message displayed when passing on a ReactorBoost special block. %1 will be replaced by the type of reactor, "up" or "down"
	CManiaAppPlaygroundEvent::GameplaySpecialType::ReactorBoost_Legacy => _("|SpecialBlock|Reactor boost %1"),
	//L16N Message displayed when passing on a ReactorBoost special block. %1 will be replaced by the type of reactor, "up" or "down"
	CManiaAppPlaygroundEvent::GameplaySpecialType::ReactorBoost_Oriented => _("|SpecialBlock|Reactor boost %1"),
	//L16N Message displayed when passing on a ReactorBoost2 special block. %1 will be replaced by the type of reactor, "up" or "down"
	CManiaAppPlaygroundEvent::GameplaySpecialType::ReactorBoost2_Legacy => _("|SpecialBlock|Super reactor boost %1"),
	//L16N Message displayed when passing on a ReactorBoost2 special block. %1 will be replaced by the type of reactor, "up" or "down"
	CManiaAppPlaygroundEvent::GameplaySpecialType::ReactorBoost2_Oriented => _("|SpecialBlock|Super reactor boost %1"),
	//L16N Message displayed when passing on a Fragile special block
	CManiaAppPlaygroundEvent::GameplaySpecialType::Fragile => _("|SpecialBlock|Fragile"),
	//L16N Message displayed when passing on a Cruise special block.
	CManiaAppPlaygroundEvent::GameplaySpecialType::Cruise => _("|SpecialBlock|Cruise control"),
	//L16N Message displayed when passing on a No Brake special block
	CManiaAppPlaygroundEvent::GameplaySpecialType::NoBrakes => _("|SpecialBlock|No brakes")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_BlockHelper_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_BlockHelper_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-default" textfont="{{{FontManager::C_GameFontSemiBold}}}" textcolor="FFFFFF" textprefix="$t$i" textsize="5" />
</stylesheet>

<frame z-index="-2" hidden="1" id="frame-global">
	<frame {{{UIModules::CustomizableUIModule(UIModules_BlockHelper_Common::C_UIModuleConfig)}}}>
		<label id="label-helper" z-index="1" pos="{{{-C_HelperPosX}}} -0.5" size="100 10" halign="center" valign="center2" class="text-default" hidden="1"/>
		<frameinstance id="frame-background" modelid="{{{ExpendableAsset::C_Name}}}" pos="{{{-C_HelperPosX}}} 0" data-color="{{{ColorPalette::C_Color_DarkBlue}}}" data-opacity="0." data-halign="center" data-valign="center" z-index="0" hidden="1"/>
	</frame>
</frame>
""",
"""
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils

#Const C_HelperPosX {{{dump(C_HelperPosX)}}}

#Const C_Duration_Moving 250
#Const C_Duration_Stay 1500
""",
"""
Void DisplayHelper(CMlLabel _Label_Helper, CMlFrame _Frame_Background, Text _Helper) {
	_Label_Helper.Value = _Helper;
	_Label_Helper.RelativePosition_V3.X = -C_HelperPosX;
	_Frame_Background.RelativePosition_V3.X = -C_HelperPosX;
	{{{ExpendableAsset::P}}}SetWidth(This, _Frame_Background, _Label_Helper.ComputeWidth(_Label_Helper.Value) + 4., False);
	{{{ExpendableAsset::P}}}SetHeight(This, _Frame_Background, _Label_Helper.ComputeHeight(_Label_Helper.Value) + 2., False);
	{{{ExpendableAsset::P}}}RedrawAsset(This, _Frame_Background, False);

	AnimMgr.Flush(_Label_Helper);
	AnimMgr.Flush(_Frame_Background);
	{{{ExpendableAsset::P}}}FlushAnimations(This, _Frame_Background);
	if (_Helper != "") {
		AnimMgr.Add(_Label_Helper, "<a pos=\"0 "^_Label_Helper.RelativePosition_V3.Y^"\" opacity=\"1.\" hidden=\"0\"/>", C_Duration_Moving, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.AddChain(_Label_Helper, "<a pos=\"0 "^_Label_Helper.RelativePosition_V3.Y^"\"/>", C_Duration_Stay, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.AddChain(_Label_Helper, "<a pos=\""^C_HelperPosX^" "^_Label_Helper.RelativePosition_V3.Y^"\" opacity=\"0.\" hidden=\"1\"/>", C_Duration_Moving, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(_Frame_Background, "<a pos=\"0 "^_Frame_Background.RelativePosition_V3.Y^"\" opacity=\"0.6\" hidden=\"0\"/>", C_Duration_Moving, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.AddChain(_Frame_Background, "<a pos=\"0 "^_Frame_Background.RelativePosition_V3.Y^"\"/>", C_Duration_Stay, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.AddChain(_Frame_Background, "<a pos=\""^C_HelperPosX^" "^_Frame_Background.RelativePosition_V3.Y^"\" opacity=\"0.\" hidden=\"1\"/>", C_Duration_Moving, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ExpendableAsset::P}}}AddOpacityAnimation(This, _Frame_Background, 0.6, C_Duration_Moving, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ExpendableAsset::P}}}AddOpacityAnimation(This, _Frame_Background, 0., Now + C_Duration_Moving + C_Duration_Stay, C_Duration_Moving, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Background;
declare CMlLabel Label_Helper;

declare Boolean DisplayModule;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Background <=> (Frame_Global.GetFirstChild("frame-background") as CMlFrame);
Label_Helper <=> (Frame_Global.GetFirstChild("label-helper") as CMlLabel);

DisplayModule = Frame_Global.Visible;
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Campaign_BlockHelper_IsVisible for Owner;
		if (DisplayModule != Net_Campaign_BlockHelper_IsVisible) {
			DisplayModule = Net_Campaign_BlockHelper_IsVisible;
			Frame_Global.Visible = Net_Campaign_BlockHelper_IsVisible;
		}
	}

	foreach (Event in PendingEvents) {
		if (Event.Type == CMlScriptEvent::Type::PluginCustomEvent && Event.CustomEventType == "{{{C_Event_GameplaySpecial}}}" && Event.CustomEventData.count > 0) {
			if (UI.UISequence == CUIConfig::EUISequence::Playing && (!Label_Helper.Visible || Label_Helper.Value != Event.CustomEventData[0])) {
				DisplayHelper(Label_Helper, Frame_Background, Event.CustomEventData[0]);
			}
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}
}
***
""",
[
	UIModules::Component(),
	ExpendableAsset::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the library
Void Yield() {
	if (UserMgr != Null && UserMgr.MainUserProfile != Null && UserMgr.MainUserProfile.Interface_ShowSpecialsFeedback) {
		foreach (Event in PendingEvents) {
			// ParentApp.PendingEvents is empty in CMlScriptInGame so we have to manually pass the events
			if (
				Event.PlaygroundType == CManiaAppPlaygroundEvent::Type::OnPlayerTriggerSpecial &&
				C_GameplaySpecialMessageList.existskey(Event.GameplaySpecialType)
			) {
				declare CUILayer Layer = UIModules::GetModuleLayer(GetId());
				if (Layer != Null) {
					declare Text Helper;
					if (Event.GameplaySpecialType == CManiaAppPlaygroundEvent::GameplaySpecialType::TurboRoulette) {
						switch (Event.GameplayTurboRoulette) {
							case CManiaAppPlaygroundEvent::GameplayTurboRoulette::TurboRoulette_1: Helper = C_GameplaySpecialMessageList[CManiaAppPlaygroundEvent::GameplaySpecialType::Turbo];
							case CManiaAppPlaygroundEvent::GameplayTurboRoulette::TurboRoulette_2: Helper = C_GameplaySpecialMessageList[CManiaAppPlaygroundEvent::GameplaySpecialType::Turbo2];
							case CManiaAppPlaygroundEvent::GameplayTurboRoulette::TurboRoulette_3: Helper = C_GameplaySpecialMessageList[CManiaAppPlaygroundEvent::GameplaySpecialType::TurboRoulette];
							default: Helper = C_GameplaySpecialMessageList[CManiaAppPlaygroundEvent::GameplaySpecialType::Turbo];
						}
					} else if (
						Event.GameplaySpecialType == CManiaAppPlaygroundEvent::GameplaySpecialType::ReactorBoost_Legacy ||
						Event.GameplaySpecialType == CManiaAppPlaygroundEvent::GameplaySpecialType::ReactorBoost_Oriented ||
						Event.GameplaySpecialType == CManiaAppPlaygroundEvent::GameplaySpecialType::ReactorBoost2_Legacy ||
						Event.GameplaySpecialType == CManiaAppPlaygroundEvent::GameplaySpecialType::ReactorBoost2_Oriented
					) {
						if (Event.IsBoostUpElseDown) {
							//L16N Direction of the reactor boost
							Helper = TL::Compose(C_GameplaySpecialMessageList[Event.GameplaySpecialType], _("|SpecialBlock|up"));
						} else {
							//L16N Direction of the reactor boost
							Helper = TL::Compose(C_GameplaySpecialMessageList[Event.GameplaySpecialType], _("|SpecialBlock|down"));
						}
					} else {
						Helper = C_GameplaySpecialMessageList[Event.GameplaySpecialType];
					}
					LayerCustomEvent(Layer, C_Event_GameplaySpecial, [Helper]);
				}
			}
		}
	}
}