/**
 *	UI module: Sign16x9Small server side
 *	Podium screen and small signs in the stadium corners
 */
#Const Version		"2022-12-21"
#Const ScriptName	"ManiaApps/Nadeo/TMxSM/Race/UIModules/Sign16x9Small_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Common.Script.txt" as UIModules_Common
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/Sign16x9Small_Common.Script.txt" as UIModules_Sign16x9Small_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const UIModules_Sign16x9Small_Common::C_ScoreMode_BestRaceTime as C_ScoreMode_BestRaceTime
#Const UIModules_Sign16x9Small_Common::C_ScoreMode_Points as C_ScoreMode_Points
#Const UIModules_Sign16x9Small_Common::C_ScoreMode_RaceProgression as C_ScoreMode_RaceProgression
#Const UIModules_Sign16x9Small_Common::C_ScoreMode_Hidden as C_ScoreMode_Hidden

#Const UIModules_Sign16x9Small_Common::C_DisplayMode_Default as C_DisplayMode_Default
#Const UIModules_Sign16x9Small_Common::C_DisplayMode_Ranked as C_DisplayMode_Ranked
#Const UIModules_Sign16x9Small_Common::C_DisplayMode_Royal as C_DisplayMode_Royal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_Sign16x9Small_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::ComponentModeLibsUIModules_K_ModuleConfig GetConfig() {
	return UIModules_Sign16x9Small_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Request an update of the players displayed in the podium screen
Void RequestPlayersUpdate() {
	declare netwrite Integer Net_Race_Sign16x9Small_PlayersUpdate for Teams[0] = 0;
	Net_Race_Sign16x9Small_PlayersUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Select the type of score to display in the podium screen
Void SetScoreMode(Integer _ScoreMode) {
	declare netwrite Integer Net_Race_Sign16x9Small_ScoreMode for Teams[0] = C_ScoreMode_Hidden;
	Net_Race_Sign16x9Small_ScoreMode = _ScoreMode;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Select what to display in the podium screen
Void SetDisplayMode(Integer _DisplayMode) {
	declare netwrite Integer Net_Race_Sign16x9Small_DisplayMode for Teams[0] = C_DisplayMode_Default;
	Net_Race_Sign16x9Small_DisplayMode = _DisplayMode;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the clan that won the match
Void SetWinningClan(Integer _WinningClan) {
	declare netwrite Integer Net_Race_Sign16x9Small_WinningClan for Teams[0] = UIModules_Sign16x9Small_Common::C_WinningClanNull;
	Net_Race_Sign16x9Small_WinningClan = _WinningClan;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the match MVP
Void SetMVPAccountId(Text _MVPAccountId) {
	declare netwrite Text Net_Race_Sign16x9Small_MVPAccountId for Teams[0] = "";
	Net_Race_Sign16x9Small_MVPAccountId = _MVPAccountId;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set custom names for players to use instead of their default ones
Void SetPlayersNames(Text[Text] _PlayersNames) {
	declare netwrite Text[Text] Net_Race_Sign16x9Small_PlayersNames for Teams[0] = [];
	Net_Race_Sign16x9Small_PlayersNames = _PlayersNames;
	RequestPlayersUpdate();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;

	declare netwrite Boolean Net_Race_Sign16x9Small_IsVisible for UI = False;
	Net_Race_Sign16x9Small_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
	RequestPlayersUpdate();
	SetScoreMode(C_ScoreMode_Hidden);
	SetDisplayMode(C_DisplayMode_Default);
	SetWinningClan(UIModules_Sign16x9Small_Common::C_WinningClanNull);
	SetMVPAccountId("");
	SetPlayersNames([]);
}