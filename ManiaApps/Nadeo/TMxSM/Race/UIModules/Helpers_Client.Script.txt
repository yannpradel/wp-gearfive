/** 
 *	Component: RaceHelpers
 */
#Const Version		"2022-10-05"
#Const ScriptName	"ManiaApps/Nadeo/TMxSM/Race/UIModules/Helpers_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/Helpers_Common.Script.txt" as Helpers

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const Helpers::C_RaceState_Waiting as C_RaceState_Waiting
#Const Helpers::C_RaceState_Racing as C_RaceState_Racing
#Const Helpers::C_RaceState_RaceOutro as C_RaceState_RaceOutro
#Const Helpers::C_RaceState_RaceWait as C_RaceState_RaceWait
#Const Helpers::C_RaceState_MapIntro as C_RaceState_MapIntro

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Integer GetLapsNb(CTeam _Team) {
	declare netread Integer Net_Race_Helpers_LapsNb for _Team = 0;
	return Net_Race_Helpers_LapsNb;
}

Integer GetPlayerLap(CSmPlayer _Player) {
	declare netread Integer Net_Race_Helpers_PlayerLap for _Player = 0;
	if (Net_Race_Helpers_PlayerLap > 0) {
		return Net_Race_Helpers_PlayerLap;
	}
	return _Player.CurrentLapNumber + 1;
}

Integer GetPlayerLapStartTime(CSmPlayer _Player) {
	declare netread Integer Net_Race_Helpers_PlayerLapStartTime for _Player = 0;
	return Net_Race_Helpers_PlayerLapStartTime;
}

Integer GetPlayerRaceState(CSmPlayer _Player) {
	declare netread Integer Net_Race_Helpers_PlayerRaceState for _Player = 0;
	return Net_Race_Helpers_PlayerRaceState;
}

Boolean IsIndependentLaps(CTeam _Team) {
	declare netread Boolean Net_Race_Helpers_IndependentLaps for _Team = False;
	return Net_Race_Helpers_IndependentLaps;
}

Void UpdatePlayerChronoLabel(CTeam _Team, CMlLabel _Label_Chrono, CSmPlayer _Player, Integer _TimeOffset) {
	declare Integer RaceTime = _Player.CurrentRaceTime;
	if (IsIndependentLaps(_Team)) {
		RaceTime = _Player.CurrentLapTime;
	}
	if (RaceTime < 0) {
		_Label_Chrono.Value = TL::TimeToText(_TimeOffset, True);
	} else if (
		_Player.RaceWaypointTimes.count > 0 && (
			UI.UISequence == CUIConfig::EUISequence::Finish ||
			GetPlayerRaceState(_Player) == C_RaceState_RaceOutro
		)
	) {
		_Label_Chrono.Value = TL::TimeToText(_Player.RaceWaypointTimes[_Player.RaceWaypointTimes.count - 1] + _TimeOffset, True, True);
	} else {
		_Label_Chrono.Value = TL::TimeToText(RaceTime + _TimeOffset, True);
	}
}
Void UpdatePlayerChronoLabel(CTeam _Team, CMlLabel _Label_Chrono, CSmPlayer _Player) {
	UpdatePlayerChronoLabel(_Team, _Label_Chrono, _Player, 0);
}

Integer GetTimeLimit(CTeam _Team) {
	declare netread Integer Net_Race_Helpers_CutOffTimeLimit for _Team = 0;
	return Net_Race_Helpers_CutOffTimeLimit;
}

Boolean IsLocalMode(CTeam _Team) {
	declare netread Boolean Net_Race_Helpers_IsLocalMode for _Team = False;
	return Net_Race_Helpers_IsLocalMode;
}