/**
 *  UI module: PrestigeEarned client side
 */
#Const Version		"2023-04-04"
#Const ScriptName	"ManiaApps/Nadeo/TMxSM/Race/UIModules/PrestigeEarned_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/PrestigeEarned_Common.Script.txt" as UIModules_PrestigeEarned_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Class_Gemstone_On "class-prestige-gemstone-on"
#Const C_Class_Gemstone_Off "class-prestige-gemstone-off"

#Const C_InputPriority 10

#Const C_MaxAvailableTextDisplay 3
#Const C_Delay_BeforePrestige 1000	//< The delay between receipt of the prestige notification and the beginning of the prestige celebration
#Const C_Delay_BeforeTitle 250	//< The delay between the beginning of the prestige celebration and the beginning of the title animation
#Const C_Delay_BeforePrestigeName 400	//< The delay between the beginning of the prestige celebration and the beginning of the prestige name animation
#Const C_Delay_BeforePrestigeRank 400	//< The delay between the beginning of the prestige celebration and the beginning of the prestige rank animation
#Const C_Delay_BeforeCamera 100	//< The delay between the beginning of the prestige celebration and the beginning of the camera animation
#Const C_Delay_BeforeLights 1000	//< The delay between the beginning of the prestige celebration and the beginning of the lights animation
#Const C_Delay_BeforeGemstones 1000	//< The delay between the beginning of the prestige celebration and the beginning of the gemstones animation

#Const C_MaxGemstones 13
#Const C_ImageUrl_Prestige_Season_On "file://Media/Manialinks/Nadeo/TMNext/Modes/Prestige/Prestige_Season_On.dds"
#Const C_ImageUrl_Prestige_Season_Off "file://Media/Manialinks/Nadeo/TMNext/Modes/Prestige/Prestige_Season_Off.dds"
#Const C_ImageUrl_Prestige_Royal_On "file://Media/Manialinks/Nadeo/TMNext/Modes/Prestige/Prestige_Royal_On.dds"
#Const C_ImageUrl_Prestige_Royal_Off "file://Media/Manialinks/Nadeo/TMNext/Modes/Prestige/Prestige_Royal_Off.dds"
#Const C_ImageUrl_Prestige_Ranked_On "file://Media/Manialinks/Nadeo/TMNext/Modes/Prestige/Prestige_Ranked_On.dds"
#Const C_ImageUrl_Prestige_Ranked_Off "file://Media/Manialinks/Nadeo/TMNext/Modes/Prestige/Prestige_Ranked_Off.dds"

#Const C_Text_LevelUp_SeasonMedals [
	//L16N [Prestige Earned] Message displayed to inform the player when the next prestige skin will be available in campaign. %1 will be replaced with the number of medal until the next unlock. e.g "Level up in 7 bronze medals"
	1 => _("Level up in %1 bronze medals"),
	//L16N [Prestige Earned] Message displayed to inform the player when the next prestige skin will be available in campaign. %1 will be replaced with the number of medal until the next unlock. e.g "Level up in 7 silver medals"
	2 => _("Level up in %1 silver medals"),
	//L16N [Prestige Earned] Message displayed to inform the player when the next prestige skin will be available in campaign. %1 will be replaced with the number of medal until the next unlock. e.g "Level up in 7 gold medals"
	3 => _("Level up in %1 gold medals"),
	//L16N [Prestige Earned] Message displayed to inform the player when the next prestige skin will be available in campaign. %1 will be replaced with the number of medal until the next unlock. e.g "Level up in 7 author medals"
	4 => _("Level up in %1 author medals")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_PrestigeEarned_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_PrestigeEarned_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Prestige Earned] Skip the new prestige skin celebration.
	declare Text Text_Skip = _("|Prestige celebration|Skip");
	//L16N [Prestige Earned] Title of the prestige skins earnings display.
	declare Text Text_Title = _("New prestige skin");
	//L16N [Prestige Earned] Message displayed to inform the player that their new prestige skin is available in the garage.
	declare Text Text_Available = _("Now available in your garage");
	//L16N [Prestige Earned] Text for the level of the prestige skin. %1 will be replaced with the level of the prestige skin. e.g. "Level 8"
	declare Text Text_Level = _("Level %1");
	//L16N [Prestige Earned] Message displayed to inform the player when the next prestige skin will be available in ranked.
	declare Text Text_LevelUp_Ranked = _("Level up next month");
	//L16N [Prestige Earned] Message displayed to inform the player when the next prestige skin will be available in royal. %1 and %2 will be replaced with the team's rank and the team's name. e.g "Level up next 3rd place in crocodile team"
	declare Text Text_LevelUp_Royal = _("Level up next %1 place in %2 team");
	//L16N [Prestige Earned] Message displayed to inform the player when the next prestige skin will be available in campaign. %1 the type of medal until the next unlock. e.g "Level up in 1 silver medal"
	declare Text Text_LevelUp_SeasonOneMedal = _("Level up in 1 %1 medal");
	//L16N [Prestige Earned] Message displayed to inform the player that they have reached the maximum level for a prestige skin.
	declare Text Text_LevelMax = _("Maximum level reached! Congratulations!");

	/* Variables */
	declare Vec2 Pos_Title = <0., 70.5>;
	declare Vec2 Pos_PrestigeName = <0., 60.2>;
	declare Vec2 Pos_PrestigeRank = <0., 55.>;
	declare Vec2 Pos_PrestigeLevel = <0., -49.>;
	declare Vec2 Pos_PrestigeNext = <0., -79.>;
	declare Vec2 Pos_Gemstones = <0., -63.>;

	/* Gemstones level display */
	declare Text ML_Gemstones;
	for (Level, 0, C_MaxGemstones-1) {
		ML_Gemstones ^= """
			<quad id="quad-gemstone-off-{{{Level}}}" class="{{{C_Class_Gemstone_Off}}}" halign="center" valign="center" rot="{{{Level%2 * 180}}}" z-index="0"/>
			<quad id="quad-gemstone-on-{{{Level}}}" class="{{{C_Class_Gemstone_On}}}" halign="center" valign="center" rot="{{{Level%2 * 180}}}" z-index="1"/>
		""";
	}

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame global -->
<frame id="frame-global" hidden="1" z-index="120">
	<frame {{{UIModules::CustomizableUIModule(UIModules_PrestigeEarned_Common::C_UIModuleConfig)}}}>
		<frame id="frame-prestige" hidden="1">
			<quad id="quad-skip" size="320 180" halign="center" valign="center" fullscreen="1" z-index="10" scriptevents="1"/>
			<quad id="quad-background" size="320 180" image="{{{Const::C_ImageUrl_Profile_Background}}}" halign="center" valign="center" fullscreen="1" z-index="-1"/>
			<label id="label-available" pos="0 84" size="250 10" class="text-semibold" text="{{{Text_Available}}}" textsize="1.8" hidden="1" opacity="0."/>
			<label id="label-title" size="250 10" class="text-extrabold" textsize="11.8" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>

			<!-- Prestige info -->
			<label id="label-prestige-name" size="250 10" class="text-extrabold" textsize="5.5" z-index="2"/>
			<label id="label-prestige-rank" size="250 10" class="text-semibold" textsize="3" z-index="2"/>
			<frame id="frame-camera" z-index="1">
				<camera id="camera-skin" halign="center" valign="center" size="320 180" fullscreen="1" z-index="0"/>
				<quad id="quad-lights" pos="0 50" size="{{{MLHelpers::MLKeepRatioFromY(1200., 1080., 200.)}}}" image="{{{Const::C_ImageUrl_Common_Spotlight}}}" colorize="FFF" halign="center" valign="center" z-index="1"/>
			</frame>
			<label id="label-prestige-level" size="250 10" class="text-extrabold" textsize="3.7" hidden="1"/>
			<frame id="frame-gemstones" hidden="1">
				{{{ML_Gemstones}}}
			</frame>
			<label id="label-prestige-next" size="250 10" class="text-semibold" textsize="1.8" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>

			<!-- Controller info -->
			<frame id="frame-controller-info" pos="152 -83">
				<frameinstance id="button-icon-skip" modelid="{{{ButtonIcon::C_Name}}}" data-halign="right" data-size="8 8" data-bind="A"/>
				<label id="label-skip" size="50 10" class="text-extrabold" text="{{{Text_Skip}}}" textprefix="$t" halign="right"/>
			</frame>		
		</frame>
	</frame>
</frame>
""",
"""
#Include "Libs/Nadeo/CommonLibs/Common/AudioManager_ML.Script.txt" as AudioManager
#Include "Libs/Nadeo/CommonLibs/Common/PrestigeNotificationObserver.Script.txt" as NotificationObserver
#Include "Libs/Nadeo/MenuLibs/Common/Modes/Medals.Script.txt" as Medals
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/PrestigeStruct.Script.txt" as PrestigeStruct
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/PrestigeEarned_Common.Script.txt" as UIModules_PrestigeEarned_Common
#Include "AnimLib" as AL
#Include "ColorLib" as CL
#Include "MathLib" as ML
#Include "TextLib" as TL

#Const PrestigeStruct::C_PrestigeModes as C_PrestigeModes
#Const PrestigeStruct::C_RankedCategoyTypes as C_RankedCategoyTypes
#Const PrestigeStruct::C_RoyalCategoyTypes as C_RoyalCategoyTypes
#Const PrestigeStruct::C_PrestigeColors as C_PrestigeColors

#Const C_Text_LevelUp_SeasonMedals {{{dump(C_Text_LevelUp_SeasonMedals)}}}
#Const C_MaxAvailableTextDisplay {{{dump(C_MaxAvailableTextDisplay)}}}
#Const C_Rank_Names {{{dump(Const::C_Rank_Names)}}}

#Const C_Sound_NewPrestige "ShowWinners"
#Const C_Sound_Gemstone "RankUp"

// Scene parameters
#Const C_SceneLayout "Empty" //< Check ManiaScript documentation to see all layouts
#Const C_CarModel {{{dump(Const::C_CameraSkinModel)}}}
#Const C_PodiumBaseModel "/Stadium/Items/PodiumBase.Item.Gbx" //< The leading slash is required
#Const C_CameraStartPosition <50., 1.7, 5.>
#Const C_CameraFinalPosition <0., 1.7, -9.>
#Const C_CameraRotation 7.
#Const C_CameraFOV 35.
#Const C_CarPosition <0., 0.25, 0.>
#Const C_CarPivot <0., 0., 0.2734>
#Const C_CarRotation 142.
#Const C_PodiumRotation 40.
#Const C_PodiumBasePosition <0., 0., 0.>
#Const C_PodiumBaseColor 0.1
#Const C_PodiumCubeReflect 0.1
#Const C_PodiumPlaneReflect 0.3
#Const C_OffsetDuration <-300, 0, 0> //< Use in the EaseOutQuad() function to change the animation path (x=y=z will create a linear path)

#Struct K_Scene {
	Ident SceneId;
	Ident CarItemId;
	Ident PodiumBaseItemId;
}

#Struct K_Controls {
	CMlCamera Camera_Skin;
	CMlFrame Frame_Camera;
	CMlFrame Frame_Gemstones;
	CMlFrame Frame_Prestige;
	CMlLabel Label_Available;
	CMlLabel Label_PrestigeLevel;
	CMlLabel Label_PrestigeName;
	CMlLabel Label_PrestigeNext;
	CMlLabel Label_PrestigeRank;
	CMlLabel Label_Title;
	CMlQuad Quad_Background;
	CMlQuad Quad_Lights;
}

#Struct K_State {
	CMlControl[] ControlsToReset;
	Integer TriggerCameraAnimationDelay;
	Integer TriggerPrestigeCelebrationDelay;
	K_Controls Controls;
	K_Scene Scene;
	PrestigeStruct::K_Prestige Prestige;
}
""",
"""
Boolean IsValidUISequence(Integer _PrestigeMode) {
	switch (_PrestigeMode) {
		case UIModules_PrestigeEarned_Common::C_PrestigeMode_Season: {
			return (UI.UISequence == CUIConfig::EUISequence::Finish || UI.UISequence == CUIConfig::EUISequence::EndRound);
		}
		case UIModules_PrestigeEarned_Common::C_PrestigeMode_Ranked: {
			return UI.UISequence == CUIConfig::EUISequence::Podium;
		}
		case UIModules_PrestigeEarned_Common::C_PrestigeMode_Royal: {
			return (UI.UISequence == CUIConfig::EUISequence::UIInteraction || UI.UISequence == CUIConfig::EUISequence::Podium);
		}
	}

	return True;
}

Void Anim(CMlControl _Control, Vec2 _Position, Vec2 _Size, Real _Opacity, Boolean _IsHidden, Integer _StartTime, Integer _Duration) {
	declare Text Anim = "<anim pos=\""^_Position.X^" "^_Position.Y^"\" size=\""^_Size.X^" "^_Size.Y^"\" opacity=\""^_Opacity^"\" hidden=\""^_IsHidden^"\" />";
	AnimMgr.Flush(_Control);
	AnimMgr.Add(_Control, Anim, _StartTime, _Duration, CAnimManager::EAnimManagerEasing::QuadOut);
}

Vec3 EaseOutQuad(Vec3 _StartPos, Vec3 _EndPos, Integer _StartTime, Integer _Duration, Int3 _OffsetDuration) {
	return <
		AL::EaseOutQuad(Now - _StartTime, _StartPos.X, _EndPos.X - _StartPos.X, _Duration + _OffsetDuration.X),
		AL::EaseOutQuad(Now - _StartTime, _StartPos.Y, _EndPos.Y - _StartPos.Y, _Duration + _OffsetDuration.Y),
		AL::EaseOutQuad(Now - _StartTime, _StartPos.Z, _EndPos.Z - _StartPos.Z, _Duration + _OffsetDuration.Z)
	>;
}

// Update and display the next prestige unlock message
Void DisplayNextPrestigeMessage(K_State _State) {
	if (_State.Prestige.StatValueForNextLevel < 0) {
		_State.Controls.Label_PrestigeNext.SetText("{{{Text_LevelMax}}}");
	} else {
		switch (_State.Prestige.Mode) {
			case CUserV2Manager::EPrestigeMode::Season: {
				if (_State.Prestige.StatValueForNextLevel - _State.Prestige.StatCurrentValue <= 1) {
					_State.Controls.Label_PrestigeNext.SetText(TL::Compose("{{{Text_LevelUp_SeasonOneMedal}}}", Medals::GetScoreMgrMedalName(_State.Prestige.CategoryLevel)));
				} else {
					_State.Controls.Label_PrestigeNext.SetText(TL::Compose(C_Text_LevelUp_SeasonMedals.get(_State.Prestige.CategoryLevel, ""), ""^_State.Prestige.StatValueForNextLevel - _State.Prestige.StatCurrentValue));
				}
			}
			case CUserV2Manager::EPrestigeMode::Royal: {
				_State.Controls.Label_PrestigeNext.SetText(TL::Compose("{{{Text_LevelUp_Royal}}}", 
					TL::FormatRank(_State.Prestige.StatValueForNextLevel, False),
					C_RoyalCategoyTypes.get(_State.Prestige.CategoryType, _State.Prestige.CategoryType)
				));
			}
			case CUserV2Manager::EPrestigeMode::Ranked: {
				_State.Controls.Label_PrestigeNext.SetText("{{{Text_LevelUp_Ranked}}}");
			}
		}
	}

	_State.Controls.Label_PrestigeNext.RelativePosition_V3 = {{{Pos_PrestigeNext - <0., 1.>}}};
	Anim(_State.Controls.Label_PrestigeNext, {{{Pos_PrestigeNext}}}, _State.Controls.Label_PrestigeNext.Size, 1., False, Now + {{{C_Delay_BeforeGemstones}}} + (_State.Prestige.PrestigeLevel+2)*100, 250);
}

// Update and display prestige gemstones
Void DisplayGemstones(K_State _State) {
	declare Vec2 Size_AdjustedGemstone = <8.1, 7.5>;

	foreach (Index => Control in _State.Controls.Frame_Gemstones.Controls) {
		declare CMlQuad Quad_Gemstone = (Control as CMlQuad);
		declare Integer Level = ML::FloorInteger(Index*0.5);

		Quad_Gemstone.RelativePosition_V3 = <Level * Size_AdjustedGemstone.X, Level%2 * -Size_AdjustedGemstone.Y>;
		if (Quad_Gemstone.HasClass("{{{C_Class_Gemstone_Off}}}")) {
			Quad_Gemstone.Size = <15., 15.>;
			switch (_State.Prestige.Mode) {
				case CUserV2Manager::EPrestigeMode::Season: Quad_Gemstone.ImageUrl = "{{{C_ImageUrl_Prestige_Season_Off}}}";
				case CUserV2Manager::EPrestigeMode::Royal: Quad_Gemstone.ImageUrl = "{{{C_ImageUrl_Prestige_Royal_Off}}}";
				case CUserV2Manager::EPrestigeMode::Ranked: {
					Quad_Gemstone.ImageUrl = "{{{C_ImageUrl_Prestige_Ranked_Off}}}";
					Quad_Gemstone.Size = <18.8, 18.8>;
				}
			}
		} else if (Quad_Gemstone.HasClass("{{{C_Class_Gemstone_On}}}")) {
			Quad_Gemstone.Visible = Level < _State.Prestige.PrestigeLevel;
			if (Quad_Gemstone.Visible) {
				declare Vec2 Size_Led = <15., 15.>;
				switch (_State.Prestige.Mode) {
					case CUserV2Manager::EPrestigeMode::Season: Quad_Gemstone.ImageUrl = "{{{C_ImageUrl_Prestige_Season_On}}}";
					case CUserV2Manager::EPrestigeMode::Royal: Quad_Gemstone.ImageUrl = "{{{C_ImageUrl_Prestige_Royal_On}}}";
					case CUserV2Manager::EPrestigeMode::Ranked: {
						Quad_Gemstone.ImageUrl = "{{{C_ImageUrl_Prestige_Ranked_On}}}";
						Size_Led = <18.8, 18.8>;
					}
				}
				Quad_Gemstone.Size = <0., 0.>;
				AnimMgr.Flush(Quad_Gemstone);
				AnimMgr.Add(Quad_Gemstone, "<anim size=\""^Size_Led.X^" "^Size_Led.Y^"\"/>", Now + {{{C_Delay_BeforeGemstones}}} + Level*100, 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AudioManager::PlaySoundWithDelay(This, UIModules_PrestigeEarned_Common::C_Id, C_Sound_Gemstone, Now + {{{C_Delay_BeforeGemstones}}} + Level*110);
			}
		}
	}

	// Update Gemstones frame
	declare Vec2 Pos_Gemstones = <{{{Pos_Gemstones.X}}} - 0.5*{{{C_MaxGemstones-1}}}*Size_AdjustedGemstone.X, {{{Pos_Gemstones.Y}}} + Size_AdjustedGemstone.Y*0.5>;
	_State.Controls.Frame_Gemstones.RelativePosition_V3 = Pos_Gemstones - <0., -40.>;
	_State.Controls.Label_PrestigeLevel.RelativePosition_V3 = {{{Pos_PrestigeLevel}}} - <0., -40.>;
	Anim(_State.Controls.Frame_Gemstones, Pos_Gemstones, _State.Controls.Frame_Gemstones.Size, 1., _State.Prestige.PrestigeLevel <= 0, Now + {{{C_Delay_BeforeGemstones}}}, 250);
	Anim(_State.Controls.Label_PrestigeLevel, {{{Pos_PrestigeLevel}}}, _State.Controls.Label_PrestigeLevel.Size, 1., _State.Prestige.PrestigeLevel <= 0, Now + {{{C_Delay_BeforeGemstones}}}, 250);
}

// Display the scene with the car, the podium base and the podium disk
K_State DisplayScene(K_State _State, Boolean _IsVisible) {
	declare K_State State = _State;

	State.Controls.Camera_Skin.Visible = _IsVisible;
	State.Controls.Frame_Camera.Visible = _IsVisible;
	if (_IsVisible) {
		/* Create the scene if not exists */
		if (State.Scene.SceneId == NullId) State.Scene.SceneId = MenuSceneMgr.SceneCreate(C_SceneLayout);
		if (State.Scene.SceneId != NullId) {
			MenuSceneMgr.CameraSetLocation(State.Scene.SceneId, C_CameraStartPosition, C_CameraRotation, C_CameraFOV);
			MenuSceneMgr.PostFxSet(State.Scene.SceneId, 0.15);

			/* Add the car to the scene */
			if (State.Scene.CarItemId != NullId) MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CarItemId);
			State.Scene.CarItemId = MenuSceneMgr.ItemCreate(State.Scene.SceneId, C_CarModel, State.Prestige.RewardDisplayName, State.Prestige.RewardFileUrl, State.Prestige.SkinOptions);
			MenuSceneMgr.ItemSetPlayerState(State.Scene.SceneId, State.Scene.CarItemId, LocalUser);
			MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, State.Scene.CarItemId, C_CarPosition, C_CarRotation, True);
			MenuSceneMgr.ItemSetPivot(State.Scene.SceneId, State.Scene.CarItemId, C_CarPivot);

			/* Add the podium base to the scene */
			if (State.Scene.PodiumBaseItemId != NullId) MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.PodiumBaseItemId);
			State.Scene.PodiumBaseItemId = MenuSceneMgr.ItemCreate(State.Scene.SceneId, C_PodiumBaseModel, "", "");
			MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, State.Scene.PodiumBaseItemId, C_PodiumBasePosition, C_PodiumRotation, True);
			MenuSceneMgr.PodiumTweakShadingSet(State.Scene.SceneId, C_PodiumBaseColor, C_PodiumCubeReflect, C_PodiumPlaneReflect);
		}

		/* Trigger car entering animation */
		State.TriggerCameraAnimationDelay = Now + {{{C_Delay_BeforeCamera}}};
	}
	
	return State;
}

// Destroy the scene with the car, the podium base and the podium disk
K_State DestroyScene(K_State _State) {
	declare K_State State = _State;

	if (State.Scene.SceneId != NullId) {
		if (State.Scene.CarItemId != NullId) MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CarItemId);
		if (State.Scene.PodiumBaseItemId != NullId) MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.PodiumBaseItemId);
		MenuSceneMgr.SceneDestroy(State.Scene.SceneId);
	}
	State.Scene = K_Scene {};

	return DisplayScene(State, False);
}

// Trigger the earning celebration of a prestige skin
K_State TriggerPrestigeEarningCelebration(K_State _State) {
	declare persistent Integer Persistent_PrestigeEarned_AvailableDisplayCount for UserMgr.MainUser = 0;
	declare K_State State = _State;

	// Notify other layers that the celebration has begun
	UIModules_PrestigeEarned_Common::SetPrestigeCelebrationActiveState(UI, True);

	// Show available in garage message 
	State.Controls.Label_Available.Visible = Persistent_PrestigeEarned_AvailableDisplayCount < C_MaxAvailableTextDisplay;
	if (State.Controls.Label_Available.Visible) {
		Persistent_PrestigeEarned_AvailableDisplayCount += 1;
		UserMgr.MainUser.PersistentSave();
	}

	// Update labels
	State.Controls.Label_Title.SetText("{{{Text_Title}}}");
	State.Controls.Label_PrestigeLevel.SetText(TL::Compose("{{{Text_Level}}}", ""^State.Prestige.PrestigeLevel));
	if (State.Prestige.Mode == CUserV2Manager::EPrestigeMode::Ranked) {
		State.Controls.Label_PrestigeName.SetText(TL::Compose("%1 - %2 %3", C_Rank_Names.get(PrestigeStruct::ConvertToRankedRank(State.Prestige), ""), C_PrestigeModes.get(State.Prestige.Mode, ""), ""^State.Prestige.Year));
		State.Controls.Label_PrestigeRank.SetText("");
	} else {
		State.Controls.Label_PrestigeName.SetText(TL::Compose("%1 - %2 %3", C_RoyalCategoyTypes.get(State.Prestige.CategoryType, State.Prestige.CategoryType), C_PrestigeModes.get(State.Prestige.Mode, ""), ""^State.Prestige.Year));
		State.Controls.Label_PrestigeRank.SetText(Medals::GetScoreMgrMedalName(State.Prestige.CategoryLevel));
	}
	State.Controls.Label_Title.RelativePosition_V3 = {{{Pos_Title - <10., 0.>}}};
	State.Controls.Label_PrestigeName.RelativePosition_V3 = {{{Pos_PrestigeName + <10., 0.>}}};
	State.Controls.Label_PrestigeRank.RelativePosition_V3 = {{{Pos_PrestigeRank + <10., 0.>}}};
	Anim(State.Controls.Label_Title, {{{Pos_Title}}}, State.Controls.Label_Title.Size, 1., False, Now + {{{C_Delay_BeforeTitle}}}, 250);
	Anim(State.Controls.Label_PrestigeName, {{{Pos_PrestigeName}}}, State.Controls.Label_PrestigeName.Size, 1., False, Now + {{{C_Delay_BeforePrestigeName}}}, 250);
	Anim(State.Controls.Label_PrestigeRank, {{{Pos_PrestigeRank}}}, State.Controls.Label_PrestigeRank.Size, 1., False, Now + {{{C_Delay_BeforePrestigeRank}}}, 250);

	// Show car and gemstones
	State = DisplayScene(State, True);
	DisplayNextPrestigeMessage(State);
	DisplayGemstones(State);

	// Display the prestige
	State.Controls.Frame_Prestige.Show();
	State.Controls.Quad_Background.Opacity = 0.;
	State.Controls.Quad_Lights.Colorize = CL::Hex6ToRgb(C_PrestigeColors.get(State.Prestige.CategoryLevel, "FFFFFF"));
	Anim(State.Controls.Quad_Background, State.Controls.Quad_Background.RelativePosition_V3, State.Controls.Quad_Background.Size, 1., False, Now, 500);
	Anim(State.Controls.Quad_Lights, State.Controls.Quad_Lights.RelativePosition_V3, State.Controls.Quad_Lights.Size, 1., False, Now + {{{C_Delay_BeforeLights}}}, 250);
	AudioManager::PlaySound(This, C_Sound_NewPrestige);

	return State;
}

// Reset the prestige display
K_State ResetPrestigeDisplay(K_State _State) {
	declare K_State State = _State;

	// Notify other layers that the celebration has ended
	UIModules_PrestigeEarned_Common::SetPrestigeCelebrationActiveState(UI, False);

	// Reset controls
	AudioManager::RemoveDelayedSounds(This, UIModules_PrestigeEarned_Common::C_Id);
	AudioManager::DestroyDuplicatedSources(This);
	State.Prestige = PrestigeStruct::K_Prestige {};
	State.Controls.Frame_Prestige.Hide();
	State.Controls.Label_Available.Hide();
	foreach (Control in State.ControlsToReset) {
		Control.Hide();
		AnimMgr.Flush(Control);
		switchtype (Control as TypedControl) {
			case CMlQuad: TypedControl.Opacity = 0.;
			case CMlLabel: {
				TypedControl.SetText("");
				TypedControl.Opacity = 0.;
			}
		}
	}

	// Reset animation triggers
	State.TriggerPrestigeCelebrationDelay = -1;
	State.TriggerCameraAnimationDelay = -1;

	return DestroyScene(State);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame ButtonIcon_Skip;
declare CMlLabel Label_Skip;

declare K_State State;

declare Boolean DisplayModule;
declare Boolean IsValidUISequence;

declare netread Boolean Net_Race_PrestigeEarned_IsVisible for UI;
declare netread Integer Net_Race_PrestigeEarned_PrestigeMode for Teams[0];
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
ButtonIcon_Skip <=> (Frame_Global.GetFirstChild("button-icon-skip") as CMlFrame);
Label_Skip <=> (Frame_Global.GetFirstChild("label-skip") as CMlLabel);

State = K_State {
	TriggerCameraAnimationDelay = -1,
	TriggerPrestigeCelebrationDelay = -1,
	Controls = K_Controls {
		Camera_Skin = (Frame_Global.GetFirstChild("camera-skin") as CMlCamera),
		Frame_Camera = (Frame_Global.GetFirstChild("frame-camera") as CMlFrame),
		Frame_Gemstones = (Frame_Global.GetFirstChild("frame-gemstones") as CMlFrame),
		Frame_Prestige = (Frame_Global.GetFirstChild("frame-prestige") as CMlFrame),
		Label_Available = (Frame_Global.GetFirstChild("label-available") as CMlLabel),
		Label_PrestigeLevel = (Frame_Global.GetFirstChild("label-prestige-level") as CMlLabel),
		Label_PrestigeName = (Frame_Global.GetFirstChild("label-prestige-name") as CMlLabel),
		Label_PrestigeNext = (Frame_Global.GetFirstChild("label-prestige-next") as CMlLabel),
		Label_PrestigeRank = (Frame_Global.GetFirstChild("label-prestige-rank") as CMlLabel),
		Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
		Quad_Background = (Frame_Global.GetFirstChild("quad-background") as CMlQuad),
		Quad_Lights = (Frame_Global.GetFirstChild("quad-lights") as CMlQuad)
	}
};

DisplayModule = Frame_Global.Visible;
ButtonIcon_Skip.RelativePosition_V3.X = -ML::Min(Label_Skip.Size.X, Label_Skip.ComputeWidth(Label_Skip.Value, True)) - 2.;

// Prepare prestige celebration
State.ControlsToReset.add(State.Controls.Frame_Gemstones);
State.ControlsToReset.add(State.Controls.Label_PrestigeLevel);
State.ControlsToReset.add(State.Controls.Label_PrestigeName);
State.ControlsToReset.add(State.Controls.Label_PrestigeNext);
State.ControlsToReset.add(State.Controls.Label_PrestigeRank);
State.ControlsToReset.add(State.Controls.Label_Title);
State.ControlsToReset.add(State.Controls.Quad_Background);
State.ControlsToReset.add(State.Controls.Quad_Lights);
State = ResetPrestigeDisplay(State);
***

***MainLoop***
***
if (!EnableMenuNavigationInputs && PageIsVisible && Frame_Global.Visible && State.Controls.Frame_Prestige.Visible) {
	EnableMenuNavigation(True, False, False, Null, {{{C_InputPriority}}});
} else if (EnableMenuNavigationInputs && (!PageIsVisible || !Frame_Global.Visible || !State.Controls.Frame_Prestige.Visible)) {
	EnableMenuNavigation(False, False, False, Null, {{{C_InputPriority}}});
}

if (PageIsVisible) {
	if (DisplayModule != Net_Race_PrestigeEarned_IsVisible) {
		DisplayModule = Net_Race_PrestigeEarned_IsVisible;
		Frame_Global.Visible = DisplayModule;
	}

	/* Display or hide the prestige celebration */
	if (IsValidUISequence != IsValidUISequence(Net_Race_PrestigeEarned_PrestigeMode)) {
		IsValidUISequence = IsValidUISequence(Net_Race_PrestigeEarned_PrestigeMode);
		if (IsValidUISequence && DisplayModule) {
			State.TriggerPrestigeCelebrationDelay = Now + {{{C_Delay_BeforePrestige}}};
		} else {
			State = ResetPrestigeDisplay(State);
		}
	}

	/* Handle prestige celebration */
	if (IsValidUISequence && DisplayModule) {
		if (NotificationObserver::IsNotificationAvailable()) {
			declare NotificationObserver::K_Notification Notification = NotificationObserver::GetLastNotification();
			if (Notification.PrestigeId != "") State.Prestige = PrestigeStruct::ConvertPrestige(Notification);
		}

		/* Celebrate prestige if possible */
		if (!UIModules_PrestigeEarned_Common::IsPrestigeCelebrationBlocked(UI) && State.Prestige.PrestigeId != "") {
			if (State.TriggerPrestigeCelebrationDelay > 0 && State.TriggerPrestigeCelebrationDelay < Now) {
				State.TriggerPrestigeCelebrationDelay = -1;
				State = TriggerPrestigeEarningCelebration(State);
			}
	
			/* Prestige celebration is active */
			if (State.Controls.Frame_Prestige.Visible) {
				foreach (Event in PendingEvents) {
					switch (Event.Type) {
						case CMlScriptEvent::Type::MouseClick: {
							if (Event.ControlId == "quad-skip") {
								State = ResetPrestigeDisplay(State);
							}
						}
					}
				}
				foreach (Event in Input.PendingEvents) {
					switch (Event.Type) {
						case CInputEvent::EType::PadButtonPress: {
							if (Event.Button == CInputEvent::EButton::A && !Event.IsAutoRepeat) { //< Request explicit button press
								State = ResetPrestigeDisplay(State);
							}
						}
					}
				}
		
				/* Blink available in garage text */
				if (State.Controls.Label_Available.Visible) {
					State.Controls.Label_Available.Opacity = ML::Min(0.3 + ML::Abs(ML::Sin(Now / 500.)), 1.); // min. opacity = 0.3, max. opacity = 1., delay = 500 
				}
		
				/* Camera animation */
				if (State.Controls.Camera_Skin.Visible && State.TriggerCameraAnimationDelay > 0 && State.TriggerCameraAnimationDelay < Now) {
					if (State.Scene.SceneId != NullId && Now < State.TriggerCameraAnimationDelay + {{{C_Delay_BeforeLights}}}) {
						MenuSceneMgr.CameraSetLocation(State.Scene.SceneId, EaseOutQuad(C_CameraStartPosition, C_CameraFinalPosition, State.TriggerCameraAnimationDelay, {{{C_Delay_BeforeLights}}}, C_OffsetDuration), C_CameraRotation, C_CameraFOV);
						if (State.Scene.CarItemId != NullId) MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, State.Scene.CarItemId, C_CarPosition, AL::EaseOutQuad(Now - State.TriggerCameraAnimationDelay, -1000., C_CarRotation + 1000., {{{C_Delay_BeforeLights}}}), True);
						if (State.Scene.PodiumBaseItemId != NullId) MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, State.Scene.PodiumBaseItemId, C_PodiumBasePosition, AL::EaseOutQuad(Now - State.TriggerCameraAnimationDelay, -1000., C_PodiumRotation + 1000., {{{C_Delay_BeforeLights}}}), True);
					} else {
						MenuSceneMgr.CameraSetLocation(State.Scene.SceneId, C_CameraFinalPosition, C_CameraRotation, C_CameraFOV);
						if (State.Scene.CarItemId != NullId) MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, State.Scene.CarItemId, C_CarPosition, C_CarRotation, True);
						if (State.Scene.PodiumBaseItemId != NullId) MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, State.Scene.PodiumBaseItemId, C_PodiumBasePosition, C_PodiumRotation, True);
						State.TriggerCameraAnimationDelay = -1;
					}
				}
			}
		}
	}
}
***
""",
[
	ButtonIcon::ComponentV2(),
	UIModules::Component()
],
[]
	);
}