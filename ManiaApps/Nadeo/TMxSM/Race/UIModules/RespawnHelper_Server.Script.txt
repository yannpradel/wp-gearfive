/**
 *  UI module: RespawnHelper server side
 */
#Const Version    "2018-11-27"
#Const ScriptName "ManiaApps/Nadeo/TMxSM/Race/UIModules/RespawnHelper_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Common.Script.txt" as UIModules_Common
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/RespawnHelper_Common.Script.txt" as UIModules_RespawnHelper_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_RespawnHelper_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::ComponentModeLibsUIModules_K_ModuleConfig GetConfig() {
	return UIModules_RespawnHelper_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set the checkpoint times that will be 
 *	used to determine if the player is too late
 *	and must see the respawn helper
 *
 *	@param	_Times										The checkpoint times
 */
Void SetCheckpointTimes(Integer[] _Times) {
	declare netwrite Integer[] Net_Race_RespawnHelper_CheckpointTimes for Teams[0];
	declare netwrite Integer Net_Race_RespawnHelper_CheckpointTimesUpdate for Teams[0];
	Net_Race_RespawnHelper_CheckpointTimes = _Times;
	Net_Race_RespawnHelper_CheckpointTimesUpdate = Now;
}
Void ResetCheckpointTimes() {
	SetCheckpointTimes([]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	
	declare netwrite Boolean Net_Race_RespawnHelper_IsVisible for _Player;
	Net_Race_RespawnHelper_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
	
	ResetCheckpointTimes();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}