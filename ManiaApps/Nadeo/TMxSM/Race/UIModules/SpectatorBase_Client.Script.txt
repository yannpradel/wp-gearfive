/**
 *  ui module: SpectatorBase client side
 */
#Const Version		"2023-04-13"
#Const ScriptName "ManiaApps/Nadeo/TMxSM/Race/UIModules/SpectatorBase_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as MenuConst
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/SpectatorBase_Common.Script.txt" as UIModules_SpectatorBase_Common
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/PlayerName.Script.txt" as PlayerName

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_CamModesNb 4
// This is copy pasted in Server!
#Const C_CamModes_Replay 0
#Const C_CamModes_Follow 1
#Const C_CamModes_FollowAll 2
#Const C_CamModes_Free 3

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_SpectatorBase_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_SpectatorBase_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Vec2 Size_Name = <65., 8.>;
	declare Vec2 Size_Flag = MLHelpers::KeepRatioFromY(232., 140., Size_Name.Y + 2.);

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-ingame-text" textfont="{{{FontManager::C_GameFontExtraBold}}}" valign="center2" textprefix="$t$i" textcolor="FFF" textsize="3.5" textemboss="1"/>
</stylesheet>
<frame z-index="-2" hidden="1" id="frame-global">
	<frame hidden="1" id="frame-content">
		<frame {{{UIModules::CustomizableUIModule(UIModules_SpectatorBase_Common::C_UIModuleConfig_Commands)}}}>
			<label z-index="1" size="20 10" halign="right" textsize="3" id="label-cam-mode" class="text-ingame-text"/>
			<quad pos="8 0.5" z-index="2" size="30 6" halign="right" valign="center" id="quad-cam-mode" scriptevents="1"/>
			<quad pos="8 0.5" z-index="2" size="6 6" halign="right" valign="center" id="quad-cam-mode-image" colorize="FFF" image="{{{MenuConst::C_ImageUrl_Icon_Cam_Free}}}"/>
		</frame>
		<frame {{{UIModules::CustomizableUIModule(UIModules_SpectatorBase_Common::C_UIModuleConfig_Name)}}}>
			<frame id="frame-name-visibility">
				<frame id="frame-user-visibility">
					<frameinstance id="frame-name-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_Name.X}}}" data-height="{{{Size_Name.Y + 2.}}}" data-color="000" data-opacity="0.6" data-halign="center" data-valign="center" z-index="1"/>
					<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" pos="0 -0.5" z-index="2" data-size="{{{Size_Name.X}}} {{{Size_Name.Y}}}" data-halign="center" data-valign="center" data-textprefix="$t$i" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" data-textsize="5." />
					<quad id="quad-flag" pos="-40 0" z-index="3" size="{{{Size_Flag.X}}} {{{Size_Flag.Y}}}" halign="center" valign="center" pincorners="<-0.75,1.>:<1.,1.>:<0.75,-1.>:<-1.,-1.>" />
					<frameinstance id="button-icon-next-player" modelid="{{{ButtonIcon::C_Name}}}" z-index="1" data-size="8 8" data-halign="left" data-valign="center" data-hideformouse="1" />
					<frameinstance id="button-icon-prev-player" modelid="{{{ButtonIcon::C_Name}}}" z-index="1" data-size="8 8" data-halign="right" data-valign="center" data-hideformouse="1" />
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "MathLib" as ML
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/Helpers_Client.Script.txt" as Helpers

#Const C_RespawnCheckInterval 250
#Const C_TargetPlayerResetDelay 5000
#Const C_FlagWidth {{{dump(Size_Flag.X)}}}
""",
"""
declare Boolean G_SelectedFollowAll;

Void FocusPlayer(CSmPlayer _Player) {
	if (_Player != Null && _Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned && _Player.User != Null) {
		SetSpectateTarget(_Player.User.Login);
	}
}

CSmPlayer GetRandomSpawnedPlayer() {
	if (Players.count <= 0) return Null;

	declare CSmPlayer[] SpawnedPlayers;
	foreach (Player in Players) {
		if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned && Player != InputPlayer && Player.User != Null) {
			SpawnedPlayers.add(Player);
		}
	}

	if (SpawnedPlayers.count > 0) {
		return SpawnedPlayers[ML::Rand(0, SpawnedPlayers.count - 1)];
	}

	return Null;
}

Void SetCamModeDisplay(Integer _CamMode, CMlLabel _Label_CamMode, CMlQuad _Quad_CamModeImage) {
	declare Text Text_CamMode = "";
	declare Text Icon_CamMode = "";
	switch (_CamMode) {
		case {{{C_CamModes_Follow}}}: {
			//L16N Used when spectating a single target, seeing its point of view. In opposition with spectating all players from above "All".
			Text_CamMode = _("|Camera|Follow");
			Icon_CamMode = "{{{MenuConst::C_ImageUrl_Icon_Cam_Follow}}}";
		}
		case {{{C_CamModes_FollowAll}}}: {
			//L16N Used when spectating all players, seeing them from above. In opposition with seeing a single player point of view "Single".
			Text_CamMode = _("|Camera|Follow all");
			Icon_CamMode = "{{{MenuConst::C_ImageUrl_Icon_Cam_All}}}";
		}
		case {{{C_CamModes_Free}}}: {
			Text_CamMode = _("|Camera|Free");
			Icon_CamMode = "{{{MenuConst::C_ImageUrl_Icon_Cam_Free}}}";
		}
		case {{{C_CamModes_Replay}}}: {
			Text_CamMode = _("|Camera|Replay");
			Icon_CamMode = "{{{MenuConst::C_ImageUrl_Icon_Cam_Replay}}}";
		}
	}
	if (_Label_CamMode != Null) _Label_CamMode.Value = Text_CamMode;
	if (_Quad_CamModeImage != Null) _Quad_CamModeImage.ImageUrl = Icon_CamMode;
}

Integer SetCamMode(Integer _CamMode, CMlLabel _Label_CamMode, CMlQuad _Quad_CamModeImage) {
	/* NB ClientUI.SpectatorForceCameraType:
	 * 1: Script has 2 states
	 *			Forced -> will act as ForcedTarget specifies
	 *			Default -> input can focus a player or allplayers
	 * 2: Free camera, player cannot use inputs
	 * 15: same as 1 but player can escape in free camera (script totaly loses control)

	 * After checking C++ with FlorentT it appears that
	 * 0 is Replay
	 * 1 is Follow
	 * 2 is Free
	 * 14 is FollowForced
	 * 15 is DontChange

	 * EDIT New API available, see Playground.SetWantedSpectatorCameraType(...)
	 */
	declare Integer CamMode = _CamMode;
	ClientUI.Spectator_SetForcedTarget_Clear();
	G_SelectedFollowAll = False;
	if (CamMode == {{{C_CamModes_FollowAll}}}) {
		Playground.SetWantedSpectatorCameraType(CPlaygroundClient::ESpectatorCameraType::Follow); // SetWantedSpectatorCameraType changes "desired" camera, which means player can still change it with inputs (instead of "forced")
		ClientUI.Spectator_SetForcedTarget_AllPlayers();
		G_SelectedFollowAll = True;
	} else if (CamMode == {{{C_CamModes_Follow}}} || CamMode == {{{C_CamModes_Replay}}}) {
		// Check if there are players to follow
		declare Boolean CanFollowPlayer = False;
		foreach (Player in Players) {
			if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) {
				CanFollowPlayer = True;
				break;
			}
		}
		// If there are no players to follow switch to follow all
		if (!CanFollowPlayer) {
			CamMode = SetCamMode({{{C_CamModes_FollowAll}}}, _Label_CamMode, _Quad_CamModeImage);
		} else {
			if (CamMode == {{{C_CamModes_Follow}}}) {
				Playground.SetWantedSpectatorCameraType(CPlaygroundClient::ESpectatorCameraType::Follow);
			} else if (CamMode == {{{C_CamModes_Replay}}}) {
				Playground.SetWantedSpectatorCameraType(CPlaygroundClient::ESpectatorCameraType::Replay);
			}
		}
	} else if (CamMode == {{{C_CamModes_Free}}}) {
		Playground.SetWantedSpectatorCameraType(CPlaygroundClient::ESpectatorCameraType::Free);
	}
	SetCamModeDisplay(CamMode, _Label_CamMode, _Quad_CamModeImage);

	return CamMode;
}

Void SetPlayerName(
	CUser _User,
	CMlFrame _Frame_UserVisibility,
	CMlFrame _PlayerName_Name,
	CMlQuad _Quad_Flag,
	CMlFrame _Frame_Name_Bg,
	CMlFrame _ButtonIcon_NextPlayer,
	CMlFrame _ButtonIcon_PrevPlayer
) {
	if (_User == Null) {
		_Frame_UserVisibility.Visible = False;
	} else {
		_Frame_UserVisibility.Visible = True;
		_Quad_Flag.Visible = !Tools::IsFakeUser(_User);

		{{{PlayerName::P}}}SetUser(This, _PlayerName_Name, _User);
		declare Real NameWidth = {{{PlayerName::P}}}GetWidth(_PlayerName_Name);

		if (_Quad_Flag.Visible) {
			_Quad_Flag.ChangeImageUrl(_User.CountryFlagUrl);
			_Quad_Flag.RelativePosition_V3.X = -(NameWidth / 2.) - 0.5;
			_PlayerName_Name.RelativePosition_V3.X = (C_FlagWidth / 2.) + 0.5;
			_ButtonIcon_NextPlayer.RelativePosition_V3.X = _PlayerName_Name.RelativePosition_V3.X + (NameWidth / 2.) + 1.;
			_ButtonIcon_PrevPlayer.RelativePosition_V3.X = _Quad_Flag.RelativePosition_V3.X - (C_FlagWidth / 2.);
		} else {
			_PlayerName_Name.RelativePosition_V3.X = 0.;
			_ButtonIcon_NextPlayer.RelativePosition_V3.X = _PlayerName_Name.RelativePosition_V3.X + (NameWidth / 2.) + 1.;
			_ButtonIcon_PrevPlayer.RelativePosition_V3.X = _PlayerName_Name.RelativePosition_V3.X - (NameWidth / 2.);
		}

		_Frame_Name_Bg.RelativePosition_V3.X = _PlayerName_Name.RelativePosition_V3.X;
		{{{ExpendableAsset::P}}}SetWidth(This, _Frame_Name_Bg, NameWidth + 3., False);
		{{{ExpendableAsset::P}}}RedrawAsset(This, _Frame_Name_Bg, False);
	}
}

// When using a keyboard, only presses on the menu navigation key will trigger an update
// All the other keys will not update the `IdleDuration` of the `Pad`
Void UpdateButtonIcons(Ident _PadId, CMlFrame _ButtonIcon_NextPlayer, CMlFrame _ButtonIcon_PrevPlayer) {
	if (Input.Pads.existskey(_PadId)) {
		declare CInputPad Pad = Input.Pads[_PadId];
		if (Pad.Type == CInputPad::EPadType::Mouse) {
			_ButtonIcon_NextPlayer.Visible = False;
			_ButtonIcon_PrevPlayer.Visible = False;
		} else {
			declare Text BindingRaw_SpectateNextPlayer = Input.GetActionBindingRaw(Pad, "Vehicle", "SpectatorTargetNext");
			declare Text Binding_SpectateNextPlayer = Input.GetActionBinding(Pad, "Vehicle", "SpectatorTargetNext");
			declare Text BindingRaw_SpectatePreviousPlayer = Input.GetActionBindingRaw(Pad, "Vehicle", "SpectatorTargetPrev");
			declare Text Binding_SpectatePreviousPlayer = Input.GetActionBinding(Pad, "Vehicle", "SpectatorTargetPrev");
			if (BindingRaw_SpectateNextPlayer != "") {
				_ButtonIcon_NextPlayer.Visible = True;
				if (Pad.Type == CInputPad::EPadType::Keyboard) {
					{{{ButtonIcon::P}}}SetBind(This, _ButtonIcon_NextPlayer, "", False);
					{{{ButtonIcon::P}}}SetKeyboardKeyName(This, _ButtonIcon_NextPlayer, BindingRaw_SpectateNextPlayer, Binding_SpectateNextPlayer);
				} else {
					{{{ButtonIcon::P}}}SetKeyboardKeyName(This, _ButtonIcon_NextPlayer, "", "", False);
					{{{ButtonIcon::P}}}SetBind(This, _ButtonIcon_NextPlayer, BindingRaw_SpectateNextPlayer);
				}
			} else {
				_ButtonIcon_NextPlayer.Visible = False;
			}
			if (BindingRaw_SpectatePreviousPlayer != "") {
				_ButtonIcon_PrevPlayer.Visible = True;
				if (Pad.Type == CInputPad::EPadType::Keyboard) {
					{{{ButtonIcon::P}}}SetBind(This, _ButtonIcon_PrevPlayer, "", False);
					{{{ButtonIcon::P}}}SetKeyboardKeyName(This, _ButtonIcon_PrevPlayer, BindingRaw_SpectatePreviousPlayer, Binding_SpectatePreviousPlayer);
				} else {
					{{{ButtonIcon::P}}}SetKeyboardKeyName(This, _ButtonIcon_PrevPlayer, "", "", False);
					{{{ButtonIcon::P}}}SetBind(This, _ButtonIcon_PrevPlayer, BindingRaw_SpectatePreviousPlayer);
				}
			} else {
				_ButtonIcon_PrevPlayer.Visible = False;
			}
		}
	} else {
		_ButtonIcon_NextPlayer.Visible = False;
		_ButtonIcon_PrevPlayer.Visible = False;
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Content;
declare CMlLabel Label_CamMode;
declare CMlQuad Quad_CamModeImage;
declare CMlFrame Frame_NameVisibility;
declare CMlFrame Frame_UserVisibility;
declare CMlFrame PlayerName_Name;
declare CMlQuad Quad_Flag;
declare CMlFrame Frame_Name_Bg;
declare CMlFrame ButtonIcon_NextPlayer;
declare CMlFrame ButtonIcon_PrevPlayer;

declare netread Boolean Net_Race_SpectatorBase_HidePlayerName for Teams[0];
declare netread Integer Net_Race_SpectatorBase_CamMode for UI;
declare netread Integer Net_Race_SpectatorBase_CamUpdate for UI;

declare Boolean DisplayModule;
declare Boolean DisplayContent;
declare CSmPlayer::ESpawnStatus TargetSpawnStatus;
declare Integer CamMode;
declare Integer RequestSpawnStatusUpdate;
declare Ident FocusedPlayerId;
declare Integer CamUpdate;
declare Integer SwitchToSpecTimer;
declare Integer TargetLostNextRetry;
declare Integer NextRespawnCheckTime;
declare Text RandomlyTargetedPlayerLogin; //< Use login and not id to find player if they disconnect and reconnect later
declare Text ManuallyTargetedPlayerLogin;
declare Integer TargetPlayerResetTime;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Content <=> (Page.GetFirstChild("frame-content") as CMlFrame);
Label_CamMode <=> (Page.GetFirstChild("label-cam-mode") as CMlLabel);
Quad_CamModeImage <=> (Page.GetFirstChild("quad-cam-mode-image") as CMlQuad);
PlayerName_Name <=> (Page.GetFirstChild("playername-name") as CMlFrame);
Quad_Flag <=> (Page.GetFirstChild("quad-flag") as CMlQuad);
Frame_Name_Bg <=> (Page.GetFirstChild("frame-name-background") as CMlFrame);
Frame_NameVisibility <=> (Page.GetFirstChild("frame-name-visibility") as CMlFrame);
Frame_UserVisibility <=> (Page.GetFirstChild("frame-user-visibility") as CMlFrame);
ButtonIcon_NextPlayer <=> (Page.GetFirstChild("button-icon-next-player") as CMlFrame);
ButtonIcon_PrevPlayer <=> (Page.GetFirstChild("button-icon-prev-player") as CMlFrame);

DisplayModule = Frame_Global.Visible;
DisplayContent = True;
Frame_Content.Visible = DisplayContent;

HideResumePlayingButton = True;
ClientUI.OverlayHideSpectatorInfos = True;

RandomlyTargetedPlayerLogin = "";
ManuallyTargetedPlayerLogin = "";
TargetPlayerResetTime = -1;
G_SelectedFollowAll = False;
CamUpdate = Net_Race_SpectatorBase_CamUpdate;
CamMode = SetCamMode(Net_Race_SpectatorBase_CamMode, Label_CamMode, Quad_CamModeImage);
RequestSpawnStatusUpdate = 0;
FocusedPlayerId = NullId;
Quad_CamModeImage.RelativeScale = 1.;
NextRespawnCheckTime = Now;

SetPlayerName(Null, Frame_UserVisibility, PlayerName_Name, Quad_Flag, Frame_Name_Bg, ButtonIcon_NextPlayer, ButtonIcon_PrevPlayer);
UpdateButtonIcons(Tools::GetActivePadId(Input, False), ButtonIcon_NextPlayer, ButtonIcon_PrevPlayer);
***

***MainLoop***
***
if (PageIsVisible) {
	if (DisplayContent && !HideResumePlayingButton) HideResumePlayingButton = True;

	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Race_SpectatorBase_IsVisible for Owner;
		if (DisplayModule != (Net_Race_SpectatorBase_IsVisible && !Helpers::IsLocalMode(Teams[0]))) {
			DisplayModule = (Net_Race_SpectatorBase_IsVisible && !Helpers::IsLocalMode(Teams[0]));
			Frame_Global.Visible = DisplayModule;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_Global.Visible) {
		if (DisplayContent != (InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)) {
			if (SwitchToSpecTimer <= 0) { // Avoid flash when switching to spectator then player again (mainly while respawning)
				if (DisplayContent) SwitchToSpecTimer = Now; // instanlty switch back to player
				else SwitchToSpecTimer = Now + 250;
			}
			if (SwitchToSpecTimer <= Now) {
				DisplayContent = (InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned);
				Frame_Content.Visible = DisplayContent;
				Quad_CamModeImage.RelativeScale = 1.;
				if (!DisplayContent) {
					// Reset ClientUI variables
					ClientUI.Spectator_SetForcedTarget_Clear();
				}
			}
		} else {
			SwitchToSpecTimer = 0;
		}

		if (InputPlayer == Null && DisplayContent) {
			DisplayContent = False;
			Frame_Content.Visible = DisplayContent;
		}

		if (Frame_Content.Visible) {
			if (Frame_NameVisibility.Visible == Net_Race_SpectatorBase_HidePlayerName) {
				Frame_NameVisibility.Visible = !Net_Race_SpectatorBase_HidePlayerName;
			}

			if (GUIPlayer != Null && GUIPlayer.User != Null && (FocusedPlayerId != GUIPlayer.Id || ManuallyTargetedPlayerLogin == "")) {
				FocusedPlayerId = GUIPlayer.Id;

				// If were are targeting a specific player we cannot be in "Follow All" mode, we must switch to the proper camera type.
				if (G_SelectedFollowAll) {
					declare Boolean CanFollowPlayer = False;
					foreach (Player in Players) {
						if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) {
							CanFollowPlayer = True;
							break;
						}
					}
					if (CanFollowPlayer) {
						if (Playground.GetSpectatorCameraType() == CPlaygroundClient::ESpectatorCameraType::Follow) {
							CamMode = SetCamMode({{{C_CamModes_Follow}}}, Label_CamMode, Quad_CamModeImage);
						} else {
							CamMode = SetCamMode({{{C_CamModes_Replay}}}, Label_CamMode, Quad_CamModeImage);
						}
					}
				}

				// The user manually selected a new player to follow
				if (GUIPlayer.User.Login != RandomlyTargetedPlayerLogin) {
					RandomlyTargetedPlayerLogin = "";
					ManuallyTargetedPlayerLogin = GUIPlayer.User.Login;
				}

				SetPlayerName(GUIPlayer.User, Frame_UserVisibility, PlayerName_Name, Quad_Flag, Frame_Name_Bg, ButtonIcon_NextPlayer, ButtonIcon_PrevPlayer);
			} else if ((GUIPlayer == Null || GUIPlayer.User == Null) && FocusedPlayerId != NullId) {
				FocusedPlayerId = NullId;
				SetPlayerName(Null, Frame_UserVisibility, PlayerName_Name, Quad_Flag, Frame_Name_Bg, ButtonIcon_NextPlayer, ButtonIcon_PrevPlayer);
			}

			// Try to follow the manually selected player when they are spawned again
			if (RandomlyTargetedPlayerLogin != "" && ManuallyTargetedPlayerLogin != "") {
				if (Now >= NextRespawnCheckTime) {
					NextRespawnCheckTime = Now + C_RespawnCheckInterval;
					
					declare Boolean PlayerFound = False;
					foreach (Player in Players) {
						if (Player.User != Null && Player.User.Login == ManuallyTargetedPlayerLogin) {
							PlayerFound = True;

							if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) {
								FocusPlayer(Player);
								RandomlyTargetedPlayerLogin = "";
							}
							break;
						}
					}
					
					// If the manually targeted player is not on the server anymore mark them for reset
					if (!PlayerFound && TargetPlayerResetTime < 0) {
						TargetPlayerResetTime = Now + C_TargetPlayerResetDelay;
					} else if (PlayerFound && TargetPlayerResetTime >= 0) {
						TargetPlayerResetTime = -1;
					}

					// The manually targeted player left the server since more than `C_TargetPlayerResetDelay` milliseconds
					// Reset it and select another target
					if (TargetPlayerResetTime >= 0 && Now >= TargetPlayerResetTime) {
						TargetPlayerResetTime = -1;
						ManuallyTargetedPlayerLogin = "";
						RandomlyTargetedPlayerLogin = "";
					}
				}
			}

			// Take actions if needed
			if (TargetLostNextRetry <= Now) {
				TargetLostNextRetry = Now + 250;

				// Targeted player is not spawned anymore, follow another player until the original targeted player is spawned again
				if (
					(
						Playground.GetSpectatorCameraType() == CPlaygroundClient::ESpectatorCameraType::Replay &&
						Playground.GetSpectatorTargetType() != CPlaygroundClient::ESpectatorTargetType::Single
					) || (
						(
							Playground.GetSpectatorCameraType() == CPlaygroundClient::ESpectatorCameraType::Follow ||
							Playground.GetSpectatorCameraType() == CPlaygroundClient::ESpectatorCameraType::FollowForced
						) &&
						!G_SelectedFollowAll &&
						Playground.GetSpectatorTargetType() != CPlaygroundClient::ESpectatorTargetType::Single
					)
				) {
					declare CSmPlayer Player <=> GetRandomSpawnedPlayer();
					if (Player != Null && Player.User != Null) {
						RandomlyTargetedPlayerLogin = Player.User.Login;
						FocusPlayer(Player);
					}
				}
			}

			// Updates buttons value
			declare Integer AssumedCamMode = CamMode;
			if (Playground.GetSpectatorCameraType() == CPlaygroundClient::ESpectatorCameraType::Free) {
				AssumedCamMode = {{{C_CamModes_Free}}};
			} else if (
				Playground.GetSpectatorCameraType() == CPlaygroundClient::ESpectatorCameraType::Follow ||
				Playground.GetSpectatorCameraType() == CPlaygroundClient::ESpectatorCameraType::FollowForced
			) {
				switch (Playground.GetSpectatorTargetType()) {
					case CPlaygroundClient::ESpectatorTargetType::None: {
						AssumedCamMode = {{{C_CamModes_FollowAll}}};
					}
					case CPlaygroundClient::ESpectatorTargetType::Single: {
						AssumedCamMode = {{{C_CamModes_Follow}}};
					}
					case CPlaygroundClient::ESpectatorTargetType::AllPlayers: {
						AssumedCamMode = {{{C_CamModes_Follow}}};
					}
				}
			} else if (Playground.GetSpectatorCameraType() == CPlaygroundClient::ESpectatorCameraType::Replay) {
				AssumedCamMode = {{{C_CamModes_Replay}}};
				switch (Playground.GetSpectatorTargetType()) {
					case CPlaygroundClient::ESpectatorTargetType::AllPlayers: {
						AssumedCamMode = {{{C_CamModes_FollowAll}}};
					}
				}
			}
			if (CamMode != AssumedCamMode) {
				CamMode = AssumedCamMode;
				SetCamModeDisplay(AssumedCamMode, Label_CamMode, Quad_CamModeImage);
			}

			// Requests from mode
			if (CamUpdate != Net_Race_SpectatorBase_CamUpdate) {
				CamUpdate = Net_Race_SpectatorBase_CamUpdate;
				CamMode = SetCamMode(Net_Race_SpectatorBase_CamMode, Label_CamMode, Quad_CamModeImage);
			}

			// Inputs on UI (controller not supported)
			foreach (Event in PendingEvents) {
				switch (Event.Type) {
					case CMlScriptEvent::Type::MouseClick: {
						switch (Event.Control.ControlId) {
							case "quad-cam-mode": {
								CamMode = SetCamMode((CamMode + 1) % {{{C_CamModesNb}}}, Label_CamMode, Quad_CamModeImage);
							}
						}
					}
					case CMlScriptEvent::Type::MouseOver: {
						switch (Event.Control.ControlId) {
							case "quad-cam-mode": {
								Quad_CamModeImage.RelativeScale = 1.08;
							}
						}
					}
					case CMlScriptEvent::Type::MouseOut: {
						switch (Event.Control.ControlId) {
							case "quad-cam-mode": {
								Quad_CamModeImage.RelativeScale = 1.;
							}
						}
					}
				}
			}

			foreach (Event in {{{ButtonIcon::P}}}GetPendingEvents(This)) {
				if (Event.Type == {{{ButtonIcon::P}}}C_EventType_ActivePadUpdate) {
					UpdateButtonIcons(Event.PadId, ButtonIcon_NextPlayer, ButtonIcon_PrevPlayer);
				}
			}
		}
	}
}

***
""",
[
	UIModules::Component(),
	UserStore::ComponentV2(),
	ButtonIcon::ComponentV2(),
	ExpendableAsset::ComponentV2(),
	PlayerName::ComponentV2()
],
[]
	);
}