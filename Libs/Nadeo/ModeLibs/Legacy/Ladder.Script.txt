/**
 *	Ladder library
 */
#Const Version		"2016-05-30"
#Const ScriptName	"Libs/Nadeo/ModeLibs/Legacy/Ladder.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if a ladder request is already
 *	in progress 
 *	Always use this before and after any
 *	request to the ladder
 *	Functions making a request are prefixed
 *	with "Request_"
 */
Boolean RequestInProgress() {
	return Ladder_RequestInProgress;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Create a new match and register
 *	the given scores
 *	Remember to close any open match
 *	before
 *
 *	@param	_Scores										The scores to register in the match
 */
Void Request_OpenMatch(CScore[] _Scores) {
	Ladder_OpenMatch_Request();
	foreach (Score in _Scores) {
		Ladder_AddPlayer(Score);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Create a new match and register
 *	all available scores
 *	Remember to close any open match
 *	before
 */
Void Request_OpenMatch() {
	Ladder_OpenMatch_Request();
	foreach (Score in Scores) {
		Ladder_AddPlayer(Score);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Create a new match and register
 *	all available scores
 *	Remember to close any open match
 *	before
 */
Void Request_OpenEmptyMatch() {
	Ladder_OpenMatch_Request();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Close the currently opened match
 *	Closing a match will award
 *	ladder points to the players
 *	registered in the match
 */
Void Request_CloseMatch() {
	Ladder_CloseMatchRequest();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Cancel the currently opened match
 *	Canceling a match close a match
 *	without awarding ladder points
 *	to the players
 */
Void Request_CancelMatch() {
	Ladder_CancelMatchRequest();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Add a player to the currently
 *	opened match
 *
 *	@param	_Score										The score of the player to add
 */
Void AddPlayer(CScore _Score) {
	Ladder_AddPlayer(_Score);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Select the version used to
 *	calculate the ladder points reward
 *	of the currently opened match
 *
 *	@param	_Version									The version to use
 */
Void SetResultsVersion(Integer _Version) {
	Ladder_SetResultsVersion(_Version);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Associate a matchmaking match id
 *	to the currently opened match
 *
 *	@param	_MatchId									The match id
 */
Void SetMatchmakingMatchId(Integer _MatchId) {
	Ladder_SetMatchMakingMatchId(_MatchId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Enable of disable the challenge
 *	mode for the currently opened
 *	match
 *
 *	@param	_Enable										True to enable the challenge mode, False to disable it
 */
Void EnableChallengeMode(Boolean _Enable) {
	Ladder_EnableChallengeMode(_Enable);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}