/** 
 *	Component: LoadingSpinner
 *
 *	Available attributes are :
 *	- data-label: label of the loading, if empty, it displays nothing
 *	- data-label-side: side of the label of the loading: 0 is under, -1 is left, 1 is right
 *	- data-label-textfont: the font of the label
 *	- data-label-textprefix: the prefix of the label
 *	- data-label-autonewline: enable text with multiple lines and better handle text containing '\n' characters
 *	- data-color: the color of the spinner image
 *	- data-opacity: the opacity of the spinner image
 *	- data-size: the size of the spinner image
 *	- data-dimmer: True to enable a background dimmer, False otherwise
 */
#Const Version		"2023-05-22"
#Const ScriptName	"Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_State {
	CMlQuad[] LoadingQuads;
	CMlControl[][Integer] DelayedStop;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_State_Null K_State {
	LoadingQuads = [],
	DelayedStop = []
}

#Const C_Name "component-loadingspinner" //< Component name
#Const P "MenuLibsLoadingSpinner_LoadingSpinner::" //< Prefix used to differentiate functions/variables in the script
#Const Q "MenuLibsLoadingSpinner_LoadingSpinner"

#Const C_LabelSide_Left -1
#Const C_LabelSide_Center 0
#Const C_LabelSide_Right 1

#Const C_FadeInDuration 200
#Const C_FadeOutDuration 200

#Const C_ImageURL_Loading "file://Media/Manialinks/Nadeo/MenuLibs/LoadingSpinner.dds"

#Const C_Id_QuadDimmer "menu-libs-loading-spinner_quad-dimmer"
#Const C_Id_QuadLoading "menu-libs-loading-spinner_quad-loading"
#Const C_Id_LabelLoading "menu-libs-loading-spinner_label-loading"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text GetManialink() {
	return """
<quad id="{{{C_Id_QuadDimmer}}}" size="320 180" halign="center" valign="center" bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.8" fullscreen="1" z-index="0" hidden="1"/>
<quad id="{{{C_Id_QuadLoading}}}" halign="center" valign="center" image="{{{C_ImageURL_Loading}}}" size="15 15" z-index="1" hidden="1"/>
<label id="{{{C_Id_LabelLoading}}}" pos="0 -15" halign="center" valign="center2" size="150 15" textfont="{{{FontManager::C_GameFontRegular}}}" textcolor="fff" textprefix="$i" textsize="5" z-index="1"/>
	""";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the loading spinner is spinning
Boolean IsLoading(CMlControl _FrameInstance) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");

	declare Boolean MenuLibs_LoadingSpinner_IsLoading for _FrameInstance = False;
	return MenuLibs_LoadingSpinner_IsLoading;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the color of the loading spinner quad
Void SetColor(CMlControl _FrameInstance, Vec3 _Color) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	declare CMlQuad Quad_Loading = ((_FrameInstance as CMlFrame).GetFirstChild(C_Id_QuadLoading) as CMlQuad);
	_FrameInstance.DataAttributeSet("color", CL::RgbToHex6(_Color));
	Quad_Loading.ModulateColor = _Color;
}

/// Set the opacity of the loading spinner
Void SetOpacity(CMlControl _FrameInstance, Real _Opacity) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	declare Real Opacity = ML::Clamp(_Opacity, 0., 1.);
	_FrameInstance.DataAttributeSet("opacity", ""^Opacity);
	((_FrameInstance as CMlFrame).GetFirstChild(C_Id_QuadLoading) as CMlQuad).Opacity = Opacity;
	((_FrameInstance as CMlFrame).GetFirstChild(C_Id_LabelLoading) as CMlLabel).Opacity = Opacity;
}

/// Set the value of the loading spinner label
Void SetLabel(CMlControl _FrameInstance, Text _Value) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	declare CMlLabel Label_Loading <=> ((_FrameInstance as CMlFrame).GetFirstChild(C_Id_LabelLoading) as CMlLabel);
	_FrameInstance.DataAttributeSet("label", _Value);
	Label_Loading.SetText(_Value);
	Tools::FitLabelValue(Label_Loading, 5., 2.5, 0.5);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the loading spinner background from data attributes
Void Private_UpdateDimmerQuad(CMlFrame _FrameInstance, CMlQuad _Quad_Dimmer) {
	if (_FrameInstance.DataAttributeExists("dimmer")) {
		_Quad_Dimmer.Visible = Tools::TextToBoolean(_FrameInstance.DataAttributeGet("dimmer"));
	}
	if (_FrameInstance.DataAttributeExists("opacity")) {
		_Quad_Dimmer.Opacity = ML::Clamp(TL::ToReal(_FrameInstance.DataAttributeGet("opacity")), 0., 0.8);
	}
}

/// Update the loading spinner quad from data attributes
Void Private_UpdateLoadingQuad(CMlFrame _FrameInstance, CMlQuad _Quad_Loading) {
	if (!_Quad_Loading.Visible) _Quad_Loading.RelativeRotation = 0.;
	if (_FrameInstance.DataAttributeExists("color")) {
		_Quad_Loading.ModulateColor = CL::HexToRgb(_FrameInstance.DataAttributeGet("color"));
	}
	if (_FrameInstance.DataAttributeExists("opacity")) {
		_Quad_Loading.Opacity = TL::ToReal(_FrameInstance.DataAttributeGet("opacity"));
	}
	if (_FrameInstance.DataAttributeExists("size")) {
		_Quad_Loading.Size = Tools::TextToVec2(_FrameInstance.DataAttributeGet("size"));
	}
}

/// Update the loading spinner label from data attributes
Void Private_UpdateLoadingLabel(CMlFrame _FrameInstance, CMlLabel _Label_Loading) {
	declare Integer LabelSide = C_LabelSide_Center;
	declare Vec2 SpinnerSize = <15., 15.>;

	/* Update label attributes */
	if (_FrameInstance.DataAttributeExists("label")) {
		SetLabel(_FrameInstance, _FrameInstance.DataAttributeGet("label"));
	}
	if (_FrameInstance.DataAttributeExists("label-textfont")) {
		_Label_Loading.TextFont = _FrameInstance.DataAttributeGet("label-textfont");
	}
	if (_FrameInstance.DataAttributeExists("label-textprefix")) {
		_Label_Loading.TextPrefix = _FrameInstance.DataAttributeGet("label-textprefix");
	}
	if (_FrameInstance.DataAttributeExists("label-autonewline")) {
		_Label_Loading.AutoNewLine = Tools::TextToBoolean(_FrameInstance.DataAttributeGet("label-autonewline"));
	}
	if (_FrameInstance.DataAttributeExists("label-side")) {
		LabelSide = TL::ToInteger(_FrameInstance.DataAttributeGet("label-side"));
	}
	if (_FrameInstance.DataAttributeExists("size")) {
		SpinnerSize = Tools::TextToVec2(_FrameInstance.DataAttributeGet("size"));
	}
	switch (LabelSide) {
		case C_LabelSide_Left: {
			_Label_Loading.RelativePosition_V3 = <-SpinnerSize.X * 0.8, 0.>;
			_Label_Loading.HorizontalAlign = CMlControl::AlignHorizontal::Right;
			_Label_Loading.VerticalAlign = CMlControl::AlignVertical::VCenter2;
		}
		case C_LabelSide_Right: {
			_Label_Loading.RelativePosition_V3 = <SpinnerSize.X * 0.8, 0.>;
			_Label_Loading.HorizontalAlign = CMlControl::AlignHorizontal::Left;
			_Label_Loading.VerticalAlign = CMlControl::AlignVertical::VCenter2;
		}
		default: { //< Same as C_LabelSide_Center
			_Label_Loading.RelativePosition_V3 = <0., -SpinnerSize.Y * 0.8>;
			_Label_Loading.HorizontalAlign = CMlControl::AlignHorizontal::HCenter;
			_Label_Loading.VerticalAlign = CMlControl::AlignVertical::Top;
		}
	}
	if (_FrameInstance.DataAttributeExists("opacity")) {
		_Label_Loading.Opacity = TL::ToReal(_FrameInstance.DataAttributeGet("opacity"));
	}
}

/// Set the size of the loading spinner
Void SetSize(CMlControl _FrameInstance, Vec2 _Size) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	declare CMlFrame Frame_Loading <=> (_FrameInstance as CMlFrame);
	declare Vec2 SpinnerSize = <ML::Max(0., _Size.X), ML::Max(0., _Size.Y)>;
	Frame_Loading.DataAttributeSet("size", Tools::Vec2ToText(SpinnerSize));
	Private_UpdateLoadingQuad(Frame_Loading, (Frame_Loading.GetFirstChild(C_Id_QuadLoading) as CMlQuad));
	Private_UpdateLoadingLabel(Frame_Loading, (Frame_Loading.GetFirstChild(C_Id_LabelLoading) as CMlLabel));
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Animated update of the loading spinner opacity
Void Fade(CMlScript _This, CMlControl _FrameInstance, Real _Opacity, Integer _FadeDuration) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	declare CMlFrame Frame_Loading <=> (_FrameInstance as CMlFrame);
	declare CMlLabel Label_Loading <=> (Frame_Loading.GetFirstChild(C_Id_LabelLoading) as CMlLabel);
	declare CMlQuad Quad_Loading <=> (Frame_Loading.GetFirstChild(C_Id_QuadLoading) as CMlQuad);
	declare CMlQuad Quad_Dimmer <=> (Frame_Loading.GetFirstChild(C_Id_QuadDimmer) as CMlQuad);

	_This.AnimMgr.Flush(Label_Loading);
	_This.AnimMgr.Flush(Quad_Loading);
	_This.AnimMgr.Flush(Quad_Dimmer);
	if (_FadeDuration > 0) {
		_This.AnimMgr.Add(Label_Loading, "<anim opacity=\""^_Opacity^"\" />", _FadeDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Quad_Loading, "<anim opacity=\""^_Opacity^"\" />", _FadeDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Quad_Dimmer, "<anim opacity=\""^ML::Clamp(_Opacity, 0., 0.8)^"\" />", _FadeDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		Label_Loading.Opacity = _Opacity;
		Quad_Loading.Opacity = _Opacity;
		Quad_Dimmer.Opacity = ML::Clamp(_Opacity, 0., 0.8);
	}
}
Void FadeIn(CMlScript _This, CMlControl _FrameInstance, Text _Value) {
	Fade(_This, _FrameInstance, 1., C_FadeInDuration);
	SetLabel(_FrameInstance, _Value);
}
Void FadeIn(CMlScript _This, CMlControl _FrameInstance) {
	Fade(_This, _FrameInstance, 1., C_FadeInDuration);
}
Void FadeOut(CMlScript _This, CMlControl _FrameInstance) {
	Fade(_This, _FrameInstance, 0., C_FadeOutDuration);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Start the spinning animation of the loading spinner
Void StartAnimation(CMlScript _This, CMlControl _FrameInstance) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	declare K_State MenuLibs_LoadingSpinner_State for _This.Page = C_State_Null;
	declare CMlFrame FrameInstance = (_FrameInstance as CMlFrame);
	declare CMlQuad Quad_Dimmer = (FrameInstance.GetFirstChild(C_Id_QuadDimmer) as CMlQuad);
	declare CMlQuad Quad_Loading = (FrameInstance.GetFirstChild(C_Id_QuadLoading) as CMlQuad);
	declare CMlLabel Label_Loading = (FrameInstance.GetFirstChild(C_Id_LabelLoading) as CMlLabel);
	declare Boolean MenuLibs_LoadingSpinner_IsLoading for _FrameInstance = False;
	MenuLibs_LoadingSpinner_IsLoading = True;

	Quad_Loading.Show();
	Private_UpdateLoadingLabel(FrameInstance, Label_Loading);
	Private_UpdateLoadingQuad(FrameInstance, Quad_Loading);
	Private_UpdateDimmerQuad(FrameInstance, Quad_Dimmer);

	/* Cancel delayed stop for this loading spinner */
	declare CMlControl[][Integer] TempDelayedStop = MenuLibs_LoadingSpinner_State.DelayedStop;
	foreach (StopTimestamp => DelayedInstances in TempDelayedStop) {
		if (MenuLibs_LoadingSpinner_State.DelayedStop[StopTimestamp].exists(_FrameInstance)) {
			MenuLibs_LoadingSpinner_State.DelayedStop[StopTimestamp].remove(_FrameInstance);
			if (MenuLibs_LoadingSpinner_State.DelayedStop[StopTimestamp].count <= 0) {
				MenuLibs_LoadingSpinner_State.DelayedStop.removekey(StopTimestamp);
			}
		}
	}

	/* Trigger spinning animation */
	if (!MenuLibs_LoadingSpinner_State.LoadingQuads.exists(Quad_Loading)) {
		MenuLibs_LoadingSpinner_State.LoadingQuads.add(Quad_Loading);
	}
}
Void StartAnimation(CMlScript _This, CMlControl _FrameInstance, Text _Value) {
	StartAnimation(_This, _FrameInstance);
	SetLabel(_FrameInstance, _Value);
}

/// Start the spinning animation of the loading spinner with a fade in animation
Void StartAnimWithFade(CMlScript _This, CMlControl _FrameInstance, Text _Value) {
	if (IsLoading(_FrameInstance)) {
		SetLabel(_FrameInstance, _Value);
	} else {
		StartAnimation(_This, _FrameInstance, _Value);
		FadeIn(_This, _FrameInstance);
	}
}
Void StartAnimWithFade(CMlScript _This, CMlControl _FrameInstance) {
	if (!IsLoading(_FrameInstance)) {
		StartAnimation(_This, _FrameInstance);
		FadeIn(_This, _FrameInstance);
	}
}

/// Stop the spinning animation of the loading spinner
Void StopAnimation(CMlScript _This, CMlControl _FrameInstance) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	declare K_State MenuLibs_LoadingSpinner_State for _This.Page = C_State_Null;
	declare CMlFrame FrameInstance = (_FrameInstance as CMlFrame);
	declare CMlQuad Quad_Dimmer = (FrameInstance.GetFirstChild(C_Id_QuadDimmer) as CMlQuad);
	declare CMlQuad Quad_Loading = (FrameInstance.GetFirstChild(C_Id_QuadLoading) as CMlQuad);
	declare CMlLabel Label_Loading = (FrameInstance.GetFirstChild(C_Id_LabelLoading) as CMlLabel);
	declare Boolean MenuLibs_LoadingSpinner_IsLoading for _FrameInstance = False;
	
	MenuLibs_LoadingSpinner_IsLoading = False;
	MenuLibs_LoadingSpinner_State.LoadingQuads.remove(Quad_Loading);
	Label_Loading.SetText("");
	Quad_Loading.Hide();
	Quad_Dimmer.Hide();
}

/// Stop the spinning animation of the loading spinner with a fade out animation
Void StopAnimWithFade(CMlScript _This, CMlControl _FrameInstance) {
	declare K_State MenuLibs_LoadingSpinner_State for _This.Page = C_State_Null;

	FadeOut(_This, _FrameInstance);
	if (MenuLibs_LoadingSpinner_State.DelayedStop.existskey(Now + C_FadeOutDuration)) {
		if (!MenuLibs_LoadingSpinner_State.DelayedStop[Now + C_FadeOutDuration].exists(_FrameInstance)) {
			MenuLibs_LoadingSpinner_State.DelayedStop[Now + C_FadeOutDuration].add(_FrameInstance);
		}
	} else {
		MenuLibs_LoadingSpinner_State.DelayedStop[Now + C_FadeOutDuration] = [_FrameInstance];
	}
}

/// Set the loading state of the loading spinner
Void SetIsLoading(CMlScript _This, CMlControl _FrameInstance, Boolean _IsLoading) {
	if (_IsLoading) {
		StartAnimation(_This, _FrameInstance);
	} else {
		StopAnimation(_This, _FrameInstance);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Initialize the component script
Void MainInit(CMlScript _This) {
	declare K_State MenuLibs_LoadingSpinner_State for _This.Page = C_State_Null;
	MenuLibs_LoadingSpinner_State = C_State_Null;
}

/// Loop of the component
Void MainLoop(CMlScript _This) {
	declare K_State MenuLibs_LoadingSpinner_State for _This.Page = C_State_Null;

	/* Handle rotation animation of quads */
	foreach (LoadingQuad in MenuLibs_LoadingSpinner_State.LoadingQuads) {
		if (LoadingQuad.Visible) {
			LoadingQuad.RelativeRotation = -ML::Mod(Now*0.2, 0., 360.);
		}	
	}

	/* Stop animation after a delay */
	declare CMlControl[][Integer] TempDelayedStop = MenuLibs_LoadingSpinner_State.DelayedStop;
	foreach (StopTimestamp => FrameInstanceList in TempDelayedStop) {
		if (StopTimestamp < Now) {
			foreach (FrameInstance in FrameInstanceList) {
				StopAnimation(_This, FrameInstance);
			}
			MenuLibs_LoadingSpinner_State.DelayedStop.removekey(StopTimestamp);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text ComponentV2() {
	return MV::ComponentV2(
		C_Name,
		GetManialink(),
		"""
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as {{{Q}}}
		""",
		"""
***MainInit***
***
{{{P}}}MainInit(This);
***

***MainLoop***
***
{{{P}}}MainLoop(This);
***
""",
[],
[]
	);
}