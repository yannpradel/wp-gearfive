/** 
 *	Component: MenuSounds
 *
 *	Available attributes are :
 *	- data-menusounds-focussound
 *	- data-menusounds-selectsound
 *	- data-menusounds-cancelsound
 *	- data-menusounds-playsoundonlyformouse
 */
#Const Version		"2023-06-02"
#Const ScriptName	"Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CommonLibs/Common/AudioManager_ML.Script.txt" as AudioManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_State {
	CMlScriptEvent::EMenuNavAction[] DisabledForInputs;
	CMlScriptEvent::Type[] DisabledForMouses;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_State_Null K_State {
	DisabledForInputs = [],
	DisabledForMouses = []
}

#Const C_Name "component-menulibs-menusounds" //< Component name
#Const P "MenuLibs_MenuSounds::" //< Prefix used to differentiate functions/variables in the script
#Const Q "MenuLibs_MenuSounds"

#Const C_Class "component-menusounds-item"

#Const C_Sound_Focus "MenuFocus"
#Const C_Sound_Select "MenuSelect"
#Const C_Sound_Cancel "BackButtonSelect"
#Const C_Sound_ArrowSelect "ArrowSelect"
#Const C_Sound_Silent "MenuSounds_UseSoundName_None"
#Const C_Sound_SelectError "SelectErrorButton"

#Const C_FocusInputs [
	CMlScriptEvent::EMenuNavAction::Up,
	CMlScriptEvent::EMenuNavAction::Down,
	CMlScriptEvent::EMenuNavAction::Left,
	CMlScriptEvent::EMenuNavAction::Right
]

#Const AudioManager::C_Playing_State as C_Playing_State
#Const AudioManager::C_InMenu_State as C_InMenu_State
#Const AudioManager::C_PauseMenu_State as C_PauseMenu_State

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void SetCustomFocusSound(CMlControl _Control, Text _SoundName) {
	if (_Control != Null) {
		declare Text MenuLibs_MenuSounds_FocusSound for _Control = C_Sound_Focus;
		MenuLibs_MenuSounds_FocusSound = _SoundName;
	}
}

Void SetCustomSelectSound(CMlControl _Control, Text _SoundName) {
	if (_Control != Null) {
		declare Text MenuLibs_MenuSounds_SelectSound for _Control = C_Sound_Select;
		MenuLibs_MenuSounds_SelectSound = _SoundName;
	}
}

Void SetCustomCancelSound(CMlControl _Control, Text _SoundName) {
	if (_Control != Null) {
		declare Text MenuLibs_MenuSounds_CancelSound for _Control = C_Sound_Cancel;
		MenuLibs_MenuSounds_CancelSound = _SoundName;
	}
}

Void SetPlaySoundOnlyForMouse(CMlControl _Control, Boolean _PlaySoundOnlyForMouse) {
	if (_Control != Null) {
		declare Boolean MenuLibs_MenuSounds_PlaySoundOnlyForMouse for _Control = False;
		MenuLibs_MenuSounds_PlaySoundOnlyForMouse = _PlaySoundOnlyForMouse;
	}
}

Text GetCustomFocusSound(CMlControl _Control) {
	declare Text Result = "";
	if (_Control != Null) {
		declare Text MenuLibs_MenuSounds_FocusSound for _Control = C_Sound_Focus;
		Result = MenuLibs_MenuSounds_FocusSound;
	}
	return Result;
}

Text GetCustomSelectSound(CMlControl _Control) {
	declare Text Result = "";
	if (_Control != Null) {
		declare Text MenuLibs_MenuSounds_SelectSound for _Control = C_Sound_Select;
		Result = MenuLibs_MenuSounds_SelectSound;
	}
	return Result;
}

Text GetCustomCancelSound(CMlControl _Control) {
	declare Text Result = "";
	if (_Control != Null) {
		declare Text MenuLibs_MenuSounds_CancelSound for _Control = C_Sound_Cancel;
		Result = MenuLibs_MenuSounds_CancelSound;
	}
	return Result;
}

Boolean GetPlaySoundOnlyForMouse(CMlControl _Control) {
	if (_Control == Null) return False;
	declare Boolean MenuLibs_MenuSounds_PlaySoundOnlyForMouse for _Control = False;
	return MenuLibs_MenuSounds_PlaySoundOnlyForMouse;
}

Void PlaySound(CMlScript _This, Text _Sound, Real _Pitch) {
	if (_Sound != "") {
		AudioManager::StopSound(_This, _Sound);
		AudioManager::PlaySound(_This, _Sound, 0., _Pitch);
	}
}
Void PlaySound(CMlScript _This, Text _Sound) {
	PlaySound(_This, _Sound, -1.);
}

Void PlayFocusSound(CMlScript _This, CMlControl _To) {
	declare Text SoundToPlay = GetCustomFocusSound(_To);
	if (SoundToPlay != C_Sound_Silent) {
		PlaySound(_This, SoundToPlay);
	}
}

Void PlaySelectSound(CMlScript _This, CMlControl _To) {
	declare Text SoundToPlay = GetCustomSelectSound(_To);
	if (SoundToPlay != C_Sound_Silent) {
		PlaySound(_This, SoundToPlay);
	}
}

Void PlayCancelSound(CMlScript _This, CMlControl _To) {
	declare Text SoundToPlay = GetCustomCancelSound(_To);
	if (SoundToPlay != C_Sound_Silent) {
		PlaySound(_This, SoundToPlay);
	}
}

Void InitControlSound(CMlControl _Control) {
	if (_Control.DataAttributeExists("menusounds-focussound")) {
		SetCustomFocusSound(_Control, _Control.DataAttributeGet("menusounds-focussound"));
	}
	if (_Control.DataAttributeExists("menusounds-selectsound")) {
		SetCustomSelectSound(_Control, _Control.DataAttributeGet("menusounds-selectsound"));
	}
	if (_Control.DataAttributeExists("menusounds-cancelsound")) {
		SetCustomCancelSound(_Control, _Control.DataAttributeGet("menusounds-cancelsound"));
	}
	if (_Control.DataAttributeExists("menusounds-playsoundonlyformouse")) {
		SetPlaySoundOnlyForMouse(_Control, Tools::TextToBoolean(_Control.DataAttributeGet("menusounds-playsoundonlyformouse")));
	}
}

Void Initialize(CMlScript _This) {
	_This.Page.GetClassChildren(C_Class, _This.Page.MainFrame, True);
	foreach (Control in _This.Page.GetClassChildren_Result) {
		InitControlSound(Control);
	}
}

Void SetSoundBalanceState(CMlScript _This, Integer _SoundBalanceState, Integer _FadeTime) {
	AudioManager::SetNewSoundBalance(_This, _SoundBalanceState, _FadeTime);
}

Void DisableForInput(CMlScript _This, CMlScriptEvent::EMenuNavAction _Input, Boolean _Disable) {
	declare K_State MenuLibs_MenuSounds_State for _This.Page = C_State_Null;
	if (_Disable) {
		if (!MenuLibs_MenuSounds_State.DisabledForInputs.exists(_Input)) {
			MenuLibs_MenuSounds_State.DisabledForInputs.add(_Input);
		}
	} else {
		MenuLibs_MenuSounds_State.DisabledForInputs.remove(_Input);
	}
}

Void DisableForMouse(CMlScript _This, CMlScriptEvent::Type _Mouse, Boolean _Disable) {
	declare K_State MenuLibs_MenuSounds_State for _This.Page = C_State_Null;
	if (_Disable) {
		if (!MenuLibs_MenuSounds_State.DisabledForMouses.exists(_Mouse)) {
			MenuLibs_MenuSounds_State.DisabledForMouses.add(_Mouse);
		}
	} else {
		MenuLibs_MenuSounds_State.DisabledForMouses.remove(_Mouse);
	}
}

Void MainInit(CMlScript _This) {
	declare K_State MenuLibs_MenuSounds_State for _This.Page = C_State_Null;
	MenuLibs_MenuSounds_State = C_State_Null;
}

Void MainStart(CMlScript _This) {
	Initialize(_This);
}

Void MainLoop(CMlScript _This) {
	if (_This is CManiaAppTitleLayer || EnableMenuNavigationInputs) {
		foreach (Event in Scroll::GetPendingEvents(_This)) {
			switch (Event.Type) {
				case Scroll::C_EventType_Focus: {
					if (Event.IsMouse || Event.To != Null) {
						PlayFocusSound(_This, Event.To);
					}
				}
				case Scroll::C_EventType_Select: {
					if (Event.To != Null) {
						PlaySelectSound(_This, Event.To);
					}
				}
				case Scroll::C_EventType_Cancel: {
					if (Event.To != Null) {
						PlayCancelSound(_This, Event.To);
					}
				}
			}
		}
	
		foreach (Event in Navigation::GetPendingEvents(_This)) {
			switch (Event.Type) {
				case Navigation::C_EventType_NavigateInput: {
					declare K_State MenuLibs_MenuSounds_State for _This.Page = C_State_Null;
					if (
						!MenuLibs_MenuSounds_State.DisabledForInputs.exists(Event.Input) &&
						!GetPlaySoundOnlyForMouse(Event.To)
					) {
						if (C_FocusInputs.exists(Event.Input) && Event.From != Event.To && !Scroll::IsScroll(Event.To)) {
							PlayFocusSound(_This, Event.To);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							PlaySelectSound(_This, Event.To);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							PlayCancelSound(_This, Event.To);
						}
					}
				}
				case Navigation::C_EventType_NavigateMouse: {
					declare K_State MenuLibs_MenuSounds_State for _This.Page = C_State_Null;
					if (!MenuLibs_MenuSounds_State.DisabledForMouses.exists(Event.Mouse)) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							PlaySelectSound(_This, Event.To);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver && Event.From != Event.To) {
							PlayFocusSound(_This, Event.To);
						}
					}
				}
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text ComponentV2() {
	return MV::ComponentV2(
C_Name,
"""
""",
"""
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as {{{Q}}}
""",
"""
***MainInit***
***
{{{P}}}MainInit(This);
***

***MainStart***
***
{{{P}}}MainStart(This);
***

***MainLoop***
***
{{{P}}}MainLoop(This);
***
""",
[
	Navigation::ComponentV2(),
	Scroll::ComponentV2()
],
[]
	);
}