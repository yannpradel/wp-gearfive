/** 
 *	Component: Quad9
 *
 *	Available parameters:
 *	- data-size
 *	- data-image
 *	- data-halign
 *	- data-valign
 *	- data-colorize
 */
#Const Version		"2022-11-07"
#Const ScriptName	"Libs/Nadeo/MenuLibs/Common/Menu/Components/Quad9.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "ColorLib" as CL
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Struct
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_Images {
	Integer Update;
	Text[] Path;
	Vec2[] MinSize;
}
#Struct K_Quad9 {
	Vec2 Size;
	Vec2 DisplaySize;
	Real Opacity;
	K_Images Images;
	Text HAlign;
	Text VAlign;
	Text Colorize;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constant
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Quad9_Null K_Quad9 {
	Size = <0., 0.>,
	DisplaySize = <0., 0.>,
	Opacity = 1.,
	Images = K_Images {
		Update = 0,
		Path = [],
		MinSize = []
	},
	HAlign = "left",
	VAlign = "top",
	Colorize = ""
}

#Const C_Name "quad9" //< Component name
#Const P "MenuLibs_Quad9::" //< Prefix use to differentiate functions/variables in the script
#Const Q "MenuLibs_Quad9"

#Const C_TopLeft 0
#Const C_Top 1
#Const C_TopRight 2
#Const C_Right 3
#Const C_BottomRight 4
#Const C_Bottom 5
#Const C_BottomLeft 6
#Const C_Left 7
#Const C_Center 8

#Const C_HAlign_Left "left"
#Const C_HAlign_Center "center"
#Const C_HAlign_Right "right"

#Const C_VAlign_Top "top"
#Const C_VAlign_Center "center"
#Const C_VAlign_Bottom "bottom"

#Const C_Class_Container "menu-libs-quad9_container"
#Const C_Id_FrameContainer "menu-libs-quad9_frame-container"
#Const C_Id_FrameAlign "menu-libs-quad9_frame-align"
#Const C_Id_FrameQuads "menu-libs-quad9_frame-quads"
#Const C_Id_QuadTopLeft "menu-libs-quad9_quad-top-left"
#Const C_Id_QuadTop "menu-libs-quad9_quad-top"
#Const C_Id_QuadTopRight "menu-libs-quad9_quad-top-right"
#Const C_Id_QuadRight "menu-libs-quad9_quad-right"
#Const C_Id_QuadBottomRight "menu-libs-quad9_quad-bottom-right"
#Const C_Id_QuadBottom "menu-libs-quad9_quad-bottom"
#Const C_Id_QuadBottomLeft "menu-libs-quad9_quad-bottom-left"
#Const C_Id_QuadLeft "menu-libs-quad9_quad-left"
#Const C_Id_QuadCenter "menu-libs-quad9_quad-center"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Generate a data-image property value
 *
 *	@param	_Images										An array of 9 images pathes
 *																		["TopLeft", "Top", "TopRight", "Right", "BottomRight", "Bottom", "BottomLeft", "Left", "Center"]
 *	@param	_MinSizes									The minimum size of each image
 */
Text GetDataImage(Text[] _Images, Vec2[] _MinSizes) {
	assert(_Images.count == _MinSizes.count, "Both array must have the same length");
	
	declare K_Images Images = K_Images {
		Path = _Images,
		MinSize = _MinSizes
	};
	
	return TL::MLEncode(Images.tojson());
}
Text GetDataImage(Text _Images, Vec2 _MinSizes) {
	declare Text Path = _Images;
	if (!TL::EndsWith("/", Path)) Path ^= "/";
	return GetDataImage(
		[Path^"TopLeft.dds", Path^"Top.dds", Path^"TopRight.dds", Path^"Right.dds", Path^"BottomRight.dds", Path^"Bottom.dds", Path^"BottomLeft.dds", Path^"Left.dds", Path^"Center.dds"],
		[<_MinSizes.X, _MinSizes.Y>, <0., _MinSizes.Y>, <_MinSizes.X, _MinSizes.Y>, <_MinSizes.X, 0.>, <_MinSizes.X, _MinSizes.Y>, <0., _MinSizes.Y>, <_MinSizes.X, _MinSizes.Y>, <_MinSizes.X, 0.>, <0., 0.>]
	);
}

Text GetManialink() {
	return """
<frame class="{{{C_Class_Container}}}" id="{{{C_Id_FrameContainer}}}">
	<frame id="{{{C_Id_FrameAlign}}}">
		<frame id="{{{C_Id_FrameQuads}}}">
			<quad size="10 10" halign="right" valign="bottom" id="{{{C_Id_QuadTopLeft}}}" />
			<quad size="0 10" valign="bottom" hidden="1" id="{{{C_Id_QuadTop}}}" />
			<quad size="10 10" valign="bottom" id="{{{C_Id_QuadTopRight}}}" />
			<quad size="10 0" hidden="1" id="{{{C_Id_QuadRight}}}" />
			<quad size="10 10" id="{{{C_Id_QuadBottomRight}}}" />
			<quad size="0 10" hidden="1" id="{{{C_Id_QuadBottom}}}" />
			<quad size="10 10" halign="right" id="{{{C_Id_QuadBottomLeft}}}" />
			<quad size="10 0" halign="right" hidden="1" id="{{{C_Id_QuadLeft}}}" />
			<quad size="0 0" hidden="1" id="{{{C_Id_QuadCenter}}}" />
		</frame>
	</frame>
</frame>
	""";
}

Void Private_ApplyProperties(CMlFrame _Component_Quad9, K_Quad9 _NewProperties) {
	declare K_Quad9 MenuLibs_Quad9_Quad9 for _Component_Quad9 = C_Quad9_Null;
	
	declare CMlFrame Frame_Container <=> (_Component_Quad9.GetFirstChild(C_Id_FrameContainer) as CMlFrame);
	declare CMlFrame Frame_Align <=> (Frame_Container.GetFirstChild(C_Id_FrameAlign) as CMlFrame);
	declare CMlFrame Frame_Quads <=> (Frame_Align.GetFirstChild(C_Id_FrameQuads) as CMlFrame);
	declare CMlQuad Quad_TopLeft <=> (Frame_Quads.GetFirstChild(C_Id_QuadTopLeft) as CMlQuad);
	declare CMlQuad Quad_TopRight <=> (Frame_Quads.GetFirstChild(C_Id_QuadTopRight) as CMlQuad);
	declare CMlQuad Quad_BottomRight <=> (Frame_Quads.GetFirstChild(C_Id_QuadBottomRight) as CMlQuad);
	declare CMlQuad Quad_BottomLeft <=> (Frame_Quads.GetFirstChild(C_Id_QuadBottomLeft) as CMlQuad);
	declare CMlQuad Quad_Top <=> (Frame_Quads.GetFirstChild(C_Id_QuadTop) as CMlQuad);
	declare CMlQuad Quad_Left <=> (Frame_Quads.GetFirstChild(C_Id_QuadLeft) as CMlQuad);
	declare CMlQuad Quad_Right <=> (Frame_Quads.GetFirstChild(C_Id_QuadRight) as CMlQuad);
	declare CMlQuad Quad_Bottom <=> (Frame_Quads.GetFirstChild(C_Id_QuadBottom) as CMlQuad);
	declare CMlQuad Quad_Center <=> (Frame_Quads.GetFirstChild(C_Id_QuadCenter) as CMlQuad);
	
	/*
	 * /!\ The order in which the properties are applied is important /!\
	 */
	
	declare Boolean ForceSizeUpdate = False;
	declare Boolean ForceAlignUpdate = False;
	
	if (MenuLibs_Quad9_Quad9.Images.Update != _NewProperties.Images.Update) {
		MenuLibs_Quad9_Quad9.Images = _NewProperties.Images;
		ForceSizeUpdate = True;
		
		foreach (Key => Control in Frame_Quads.Controls) {
			if (MenuLibs_Quad9_Quad9.Images.Path.existskey(Key) && MenuLibs_Quad9_Quad9.Images.MinSize.existskey(Key)) {
				declare CMlQuad Quad <=> (Control as CMlQuad);
				Quad.ImageUrl = MenuLibs_Quad9_Quad9.Images.Path[Key];
				Quad.Size = MenuLibs_Quad9_Quad9.Images.MinSize[Key];
			}
		}
		
		Frame_Quads.RelativePosition_V3.X = Quad_Left.Size.X;
		Frame_Quads.RelativePosition_V3.Y = -Quad_Top.Size.Y;
	}
	
	if (ForceSizeUpdate || MenuLibs_Quad9_Quad9.Size != _NewProperties.Size) {
		MenuLibs_Quad9_Quad9.Size = _NewProperties.Size;
		ForceAlignUpdate = True;
		
		declare Vec2 ApplySize = <
			MenuLibs_Quad9_Quad9.Size.X - Quad_TopRight.Size.X - Quad_TopLeft.Size.X,
			MenuLibs_Quad9_Quad9.Size.Y - Quad_TopRight.Size.Y - Quad_BottomRight.Size.Y
		>;
		if (ApplySize.X > 0.) {
			Quad_Top.Size.X = ApplySize.X;
			Quad_Bottom.Size.X = ApplySize.X;
			Quad_Center.Size.X = ApplySize.X;
			Quad_Top.Visible = True;
			Quad_Bottom.Visible = True;
		} else {
			Quad_Top.Visible = False;
			Quad_Bottom.Visible = False;
		}
		if (ApplySize.Y > 0.) {
			Quad_Left.Size.Y = ApplySize.Y;
			Quad_Right.Size.Y = ApplySize.Y;
			Quad_Center.Size.Y = ApplySize.Y;
			Quad_Left.Visible = True;
			Quad_Right.Visible = True;
		} else {
			Quad_Left.Visible = False;
			Quad_Right.Visible = False;
		}
		Quad_Center.Visible = Quad_Center.Size.X > 0. && Quad_Center.Size.Y > 0.;
		
		Quad_TopRight.RelativePosition_V3.X = Quad_Top.Size.X;
		Quad_Right.RelativePosition_V3.X = Quad_TopRight.RelativePosition_V3.X;
		Quad_BottomRight.RelativePosition_V3.X = Quad_Right.RelativePosition_V3.X;
		Quad_BottomRight.RelativePosition_V3.Y = -Quad_Right.Size.Y;
		Quad_Bottom.RelativePosition_V3.X = Quad_Top.RelativePosition_V3.X;
		Quad_Bottom.RelativePosition_V3.Y = Quad_BottomRight.RelativePosition_V3.Y;
		Quad_BottomLeft.RelativePosition_V3.Y = Quad_Bottom.RelativePosition_V3.Y;
		Quad_Left.RelativePosition_V3.Y = Quad_Right.RelativePosition_V3.Y;

		MenuLibs_Quad9_Quad9.DisplaySize = <
			Quad_Left.Size.X + Quad_Center.Size.X + Quad_Right.Size.X,
			Quad_Top.Size.Y + Quad_Center.Size.Y + Quad_Bottom.Size.Y
		>;
	}

	if (MenuLibs_Quad9_Quad9.Opacity != _NewProperties.Opacity) {
		MenuLibs_Quad9_Quad9.Opacity = _NewProperties.Opacity;
		foreach (Quad in Frame_Quads.Controls) {
			if (!(Quad is CMlQuad)) continue;
			(Quad as CMlQuad).Opacity = MenuLibs_Quad9_Quad9.Opacity;
		}
	}
		
	if (ForceAlignUpdate || MenuLibs_Quad9_Quad9.HAlign != _NewProperties.HAlign) {
		MenuLibs_Quad9_Quad9.HAlign = _NewProperties.HAlign;
		
		switch (MenuLibs_Quad9_Quad9.HAlign) {
			case C_HAlign_Left: {
				Frame_Align.RelativePosition_V3.X = 0.;
			}
			case C_HAlign_Center: {
				Frame_Align.RelativePosition_V3.X = MenuLibs_Quad9_Quad9.DisplaySize.X * -0.5;
			}
			case C_HAlign_Right: {
				Frame_Align.RelativePosition_V3.X = MenuLibs_Quad9_Quad9.DisplaySize.X * -1.;
			}
		}
	}
	
	if (ForceAlignUpdate || MenuLibs_Quad9_Quad9.VAlign != _NewProperties.VAlign) {
		MenuLibs_Quad9_Quad9.VAlign = _NewProperties.VAlign;
		
		switch (MenuLibs_Quad9_Quad9.VAlign) {
			case C_VAlign_Top: {
				Frame_Align.RelativePosition_V3.Y = 0.;
			}
			case C_VAlign_Center: {
				Frame_Align.RelativePosition_V3.Y = MenuLibs_Quad9_Quad9.DisplaySize.Y * 0.5;
			}
			case C_VAlign_Bottom: {
				Frame_Align.RelativePosition_V3.Y = MenuLibs_Quad9_Quad9.DisplaySize.Y * 1.;
			}
		}
	}
	
	if (MenuLibs_Quad9_Quad9.Colorize != _NewProperties.Colorize) {
		MenuLibs_Quad9_Quad9.Colorize = _NewProperties.Colorize;
		
		foreach (Key => Control in Frame_Quads.Controls) {
			if (MenuLibs_Quad9_Quad9.Images.Path.existskey(Key) && MenuLibs_Quad9_Quad9.Images.MinSize.existskey(Key)) {
				declare CMlQuad Quad <=> (Control as CMlQuad);
				Quad.Colorize = CL::HexToRgb(MenuLibs_Quad9_Quad9.Colorize);
			}
		}
	}
}

Void SetSize(CMlFrame _Component_Quad9, Vec2 _Size) {
	declare K_Quad9 MenuLibs_Quad9_Quad9 for _Component_Quad9 = C_Quad9_Null;
	declare K_Quad9 NewProperties = MenuLibs_Quad9_Quad9;
	NewProperties.Size = _Size;
	Private_ApplyProperties(_Component_Quad9, NewProperties);
}

Void SetHAlign(CMlFrame _Component_Quad9, Text _HAlign) {
	declare K_Quad9 MenuLibs_Quad9_Quad9 for _Component_Quad9 = C_Quad9_Null;
	declare K_Quad9 NewProperties = MenuLibs_Quad9_Quad9;
	NewProperties.HAlign = TL::ToLowerCase(TL::Trim(_HAlign));
	Private_ApplyProperties(_Component_Quad9, NewProperties);
}

Void SetVAlign(CMlFrame _Component_Quad9, Text _VAlign) {
	declare K_Quad9 MenuLibs_Quad9_Quad9 for _Component_Quad9 = C_Quad9_Null;
	declare K_Quad9 NewProperties = MenuLibs_Quad9_Quad9;
	NewProperties.VAlign = TL::ToLowerCase(TL::Trim(_VAlign));
	Private_ApplyProperties(_Component_Quad9, NewProperties);
}

Void SetColorize(CMlFrame _Component_Quad9, Text _Color) {
	declare K_Quad9 MenuLibs_Quad9_Quad9 for _Component_Quad9 = C_Quad9_Null;
	declare K_Quad9 NewProperties = MenuLibs_Quad9_Quad9;
	NewProperties.Colorize = _Color;
	Private_ApplyProperties(_Component_Quad9, NewProperties);
}
Void SetColorize(CMlFrame _Component_Quad9, Vec3 _Color) {
	SetColorize(_Component_Quad9, CL::RgbToHex6(_Color));
}

Void SetOpacity(CMlFrame _Component_Quad9, Real _Opacity) {
	declare K_Quad9 MenuLibs_Quad9_Quad9 for _Component_Quad9 = C_Quad9_Null;
	declare K_Quad9 NewProperties = MenuLibs_Quad9_Quad9;
	NewProperties.Opacity = _Opacity;
	Private_ApplyProperties(_Component_Quad9, NewProperties);
}

Void Private_Init(CMlFrame _Frame_Container) {
	declare K_Quad9 MenuLibs_Quad9_Quad9 for _Frame_Container.Parent = C_Quad9_Null;
	
	MenuLibs_Quad9_Quad9 = K_Quad9 {
		Size = <0., 0.>,
		DisplaySize = <0., 0.>,
		Opacity = 1.,
		Images = K_Images{},
		HAlign = C_HAlign_Left,
		VAlign = C_VAlign_Top,
		Colorize = ""
	};
	declare K_Quad9 NewProperties = MenuLibs_Quad9_Quad9;
	
	if (_Frame_Container.Parent.DataAttributeExists("size")) {
		NewProperties.Size = Tools::TextToVec2(_Frame_Container.Parent.DataAttributeGet("size"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("image")) {
		NewProperties.Images.fromjson(_Frame_Container.Parent.DataAttributeGet("image"));
		NewProperties.Images.Update += 1;
	}
	if (_Frame_Container.Parent.DataAttributeExists("halign")) {
		NewProperties.HAlign = _Frame_Container.Parent.DataAttributeGet("halign");
	}
	if (_Frame_Container.Parent.DataAttributeExists("valign")) {
		NewProperties.VAlign = _Frame_Container.Parent.DataAttributeGet("valign");
	}
	if (_Frame_Container.Parent.DataAttributeExists("colorize")) {
		NewProperties.Colorize = _Frame_Container.Parent.DataAttributeGet("colorize");
	}
	if (_Frame_Container.Parent.DataAttributeExists("opacity")) {
		NewProperties.Opacity = TL::ToReal(_Frame_Container.Parent.DataAttributeGet("opacity"));
	}
	
	Private_ApplyProperties(_Frame_Container.Parent, NewProperties);
}

Void MainInit(CMlScript _This) {
	_This.Page.GetClassChildren(C_Class_Container, _This.Page.MainFrame, True);
	foreach (Control in _This.Page.GetClassChildren_Result) {
		Private_Init((Control as CMlFrame));
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text ComponentV2() {
	return MV::ComponentV2(
		C_Name,
		GetManialink(),
		"""
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Quad9.Script.txt" as {{{Q}}}
		""",
		"""
***MainInit***
***
{{{P}}}MainInit(This);
***
		""",
		[],
		[]
	);
}