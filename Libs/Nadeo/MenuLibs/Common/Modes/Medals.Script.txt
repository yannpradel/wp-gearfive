/**
 *  Manage medals
 */
#Const Version		"2023-06-12"
#Const ScriptName "Libs/Nadeo/MenuLibs/Common/Modes/Medals.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Medals sorted from best to worst (do not change this order!)
#Const C_Medals [
	CMode::EMedal::Author,
	CMode::EMedal::Gold,
	CMode::EMedal::Silver,
	CMode::EMedal::Bronze,
	CMode::EMedal::Finished,
	CMode::EMedal::None
]
#Const C_MedalNames [
	//L16N Name of the trackmaster medal
	CMode::EMedal::Author => _("Author"),
	//L16N Name of the gold medal
	CMode::EMedal::Gold => _("Gold"),
	//L16N Name of the silver medal
	CMode::EMedal::Silver => _("Silver"),
	//L16N Name of the bronze medal
	CMode::EMedal::Bronze => _("Bronze"),
	//L16N Text displayed when the player finish a race but not fast enough to unlock a medal
	CMode::EMedal::Finished => _("|Medal|Finished"),
	//L16N Text displayed if the player did not unlock a medal yet
	CMode::EMedal::None => _("|Medal|None")
]
#Const C_MedalFullNames [
	//L16N Name of the trackmaster medal
	CMode::EMedal::Author => _("Author medal"),
	//L16N Name of the gold medal
	CMode::EMedal::Gold => _("Gold medal"),
	//L16N Name of the silver medal
	CMode::EMedal::Silver => _("Silver medal"),
	//L16N Name of the bronze medal
	CMode::EMedal::Bronze => _("Bronze medal"),
	//L16N Text displayed when the player finish a race but not fast enough to unlock a medal
	CMode::EMedal::Finished => _("|Medal|Finished"),
	//L16N Text displayed if the player did not unlock a medal yet
	CMode::EMedal::None => _("|Medal|None")
]
#Const C_ScoreMgrMedals [
	0 => CMode::EMedal::None,
	1 => CMode::EMedal::Bronze,
	2 => CMode::EMedal::Silver,
	3 => CMode::EMedal::Gold,
	4 => CMode::EMedal::Author
]
#Const C_MedalSubStyles [
	0 => "",
	1 => "MedalBronze",
	2 => "MedalSilver",
	3 => "MedalGold",
	4 => "MedalNadeo"
]
#Const C_MedalColors [
	0 => "",
	1 => "FFA027",
	2 => "EFEFEF",
	3 => "FCC34F",
	4 => "92EF08"
]

#Const C_ScoreMgrMedal_None 0
#Const C_ScoreMgrMedal_Bronze 1
#Const C_ScoreMgrMedal_Silver 2
#Const C_ScoreMgrMedal_Gold 3
#Const C_ScoreMgrMedal_Author 4

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the medal unlocked by the player
 *
 *	@param	_MedalsTime								The time to unlock the medals
 *	@param	_PlayerTime								The time of the player
 *
 *	@return														The unlocked medal
 */
CMode::EMedal GetMedal_Time(Integer[CMode::EMedal] _MedalsTime, Integer _PlayerTime) {
	if (_PlayerTime < 0) return CMode::EMedal::None;

	foreach (Medal in C_Medals) {
		if (_MedalsTime.existskey(Medal) &&	_MedalsTime[Medal] >= 0 &&
				_PlayerTime <= _MedalsTime[Medal]) {
			return Medal;
		}
	}

	return CMode::EMedal::Finished;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the medal unlocked by the player
 *
 *	@param	_Map											The map
 *	@param	_PlayerTime								The time of the player
 *
 *	@return														The unlocked medal
 */
CMode::EMedal GetMedal_Time(CMap _Map, Integer _PlayerTime) {
	if (_Map == Null) return CMode::EMedal::None;
	
	declare Integer[CMode::EMedal] MedalsTime = [
		CMode::EMedal::Author => _Map.TMObjective_AuthorTime,
		CMode::EMedal::Gold => _Map.TMObjective_GoldTime,
		CMode::EMedal::Silver => _Map.TMObjective_SilverTime,
		CMode::EMedal::Bronze => _Map.TMObjective_BronzeTime
	];
	
	return GetMedal_Time(MedalsTime, _PlayerTime);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the medal unlocked by the player
 *
 *	@param	_Map											The map
 *	@param	_PlayerTime								The time of the player
 *
 *	@return														The unlocked medal
 */
CMode::EMedal GetMedal_Time(CMapInfo _MapInfo, Integer _PlayerTime) {
	if (_MapInfo == Null) return CMode::EMedal::None;
	
	declare Integer[CMode::EMedal] MedalsTime = [
		CMode::EMedal::Author => _MapInfo.TMObjective_AuthorTime,
		CMode::EMedal::Gold => _MapInfo.TMObjective_GoldTime,
		CMode::EMedal::Silver => _MapInfo.TMObjective_SilverTime,
		CMode::EMedal::Bronze => _MapInfo.TMObjective_BronzeTime
	];
	
	return GetMedal_Time(MedalsTime, _PlayerTime);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Convert the medal returned by the 
 *	ScoreMgr api to a valid medal
 *
 *	@param	_Medal										The ScoreMgr medal
 *
 *	@return														The converted medal
 */
CMode::EMedal ConvertScoreMgrMedal(Integer _Medal) {
	return C_ScoreMgrMedals.get(_Medal, CMode::EMedal::None);
}
CMode::EMedal ConvertFromScoreMgrMedal(Integer _Medal) {
	return ConvertScoreMgrMedal(_Medal);
}
Integer ConvertToScoreMgrMedal(CMode::EMedal _Medal) {
	if (C_ScoreMgrMedals.exists(_Medal)) return C_ScoreMgrMedals.keyof(_Medal);
	return C_ScoreMgrMedal_None;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Conversion between medal and integer
Integer MedalToInteger(CMode::EMedal _Medal) {
	return C_Medals.keyof(_Medal);
}
CMode::EMedal IntegerToMedal(Integer _Integer) {
	if (C_Medals.existskey(_Integer)) {
		return C_Medals[_Integer];
	}
	return CMode::EMedal::None;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if medal A is better than
 *	medal B
 *
 *	@param	_MedalA										Medal A
 *	@param	_MedalB										Medal B
 *
 *	@return														True if medal A is better than B
 *																		False if equal or worse
 */
Boolean ABetterThanB(CMode::EMedal _MedalA, CMode::EMedal _MedalB) {
	return (C_Medals.keyof(_MedalA) < C_Medals.keyof(_MedalB));
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get a medal name
Text GetMedalName(CMode::EMedal _Medal) {
	return C_MedalNames.get(_Medal, "");
}

Text GetMedalName(Integer _MedalInteger) {
	declare CMode::EMedal Medal = IntegerToMedal(_MedalInteger);
	return C_MedalNames.get(Medal, "");
}

Text GetScoreMgrMedalName(Integer _ScoreMgrMedal) {
	declare CMode::EMedal Medal = C_ScoreMgrMedals.get(_ScoreMgrMedal, CMode::EMedal::None);
	return C_MedalNames.get(Medal, "");
}

Text GetScoreMgrMedalFullName(Integer _ScoreMgrMedal) {
	declare CMode::EMedal Medal = C_ScoreMgrMedals.get(_ScoreMgrMedal, CMode::EMedal::None);
	return C_MedalFullNames.get(Medal, "");
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get a medal full name
Text GetMedalFullName(CMode::EMedal _Medal) {
	return C_MedalFullNames.get(_Medal, "");
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Conversion between medal, text and integer
Text MedalToText(CMode::EMedal _Medal) {
	switch (_Medal) {
		case CMode::EMedal::None: return "None";
		case CMode::EMedal::Finished: return "Finished";
		case CMode::EMedal::Bronze: return "Bronze";
		case CMode::EMedal::Silver: return "Silver";
		case CMode::EMedal::Gold: return "Gold";
		case CMode::EMedal::Author: return "Author";
	}
	return "None";
}
CMode::EMedal TextToMedal(Text _Text) {
	switch (TL::ToLowerCase(_Text)) {
		case "none": return CMode::EMedal::None;
		case "finished": return CMode::EMedal::Finished;
		case "bronze": return CMode::EMedal::Bronze;
		case "silver": return CMode::EMedal::Silver;
		case "gold": return CMode::EMedal::Gold;
		case "author": return CMode::EMedal::Author;
	}
	return CMode::EMedal::None;
}
Integer TextToInteger(Text _Text) {
	return ConvertToScoreMgrMedal(TextToMedal(_Text));
}

Integer ScoreMgrMedalToInteger(CMode::EMedal _Medal) {
	if (C_ScoreMgrMedals.exists(_Medal)) return C_ScoreMgrMedals.keyof(_Medal);
	return 0;
}

CMode::EMedal IntegerToScoreMgrMedal(Integer _Integer) {
	return C_ScoreMgrMedals.get(_Integer, CMode::EMedal::None);
}