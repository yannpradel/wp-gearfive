#Const ScriptName	"SystemText.Script.txt"

#Include "TextLib" as TL

// Plaforms
#Const C_Platforms [
	"PlayStation"	=> 0,	///< Take care before changing this number, it is linked to the index of the C_Buttons_Menu, etc arrays !
	"XBox"	=> 1,	///< Take care before changing this number, it is linked to the index of the C_Buttons_Menu, etc arrays !
	"PC"	=> 2,	///< Take care before changing this number, it is linked to the index of the C_Buttons_Menu, etc arrays !
	"Stadia"=> 3	///< Take care before changing this number, it is linked to the index of the C_Buttons_Menu, etc arrays !
]
#Const C_DefaultPlatform	2 // PC

declare Integer	G_Private_Platform; ///< Current platform, always use Private_SetPlatform() and GetPlatform() to set and get its value

Void Private_SetPlatform(Integer _Platform) {
	G_Private_Platform = _Platform;
}

Integer Private_GetPlatform(Text _Platform) {
	if (!C_Platforms.existskey(_Platform)) return C_DefaultPlatform;
	return C_Platforms[_Platform];
}

Integer GetPlatform() {
	return G_Private_Platform;
}

// Get the platform index associated to the given system
Integer GetPlatformIndexFromSystem(CSystemPlatform::ESystemPlatform _System) {
	switch (_System) {
		case CSystemPlatform::ESystemPlatform::PS4		: return C_Platforms["PlayStation"];
		case CSystemPlatform::ESystemPlatform::PS5		: return C_Platforms["PlayStation"];
		case CSystemPlatform::ESystemPlatform::XBoxOne	: return C_Platforms["XBox"];
		case CSystemPlatform::ESystemPlatform::XBoxSeries	: return C_Platforms["XBox"];
		case CSystemPlatform::ESystemPlatform::Stadia	: return C_Platforms["Stadia"];
		case CSystemPlatform::ESystemPlatform::Luna		: return C_Platforms["PC"]; // What do we need for Luna ?
		case CSystemPlatform::ESystemPlatform::Steam	: return C_Platforms["PC"];
		case CSystemPlatform::ESystemPlatform::UPlay	: return C_Platforms["PC"];
		case CSystemPlatform::ESystemPlatform::None		: return C_Platforms["PC"];
	}

	return C_DefaultPlatform;
}

/// Load the library
Void Load() {
	declare PlatformIndex = GetPlatformIndexFromSystem(System.Platform);
	Private_SetPlatform(PlatformIndex);
}

Text GetProfileName() {
	declare Integer Platform = GetPlatform();
	switch(Platform) {
		// ne pas modifier, c'est TRC.
		case C_Platforms["PlayStation"] : return "|Player's profile for the Playstation|Profile";
		case C_Platforms["XBox"] : return "|Player's profile for the XBox|Gamercard";
	}

	return _("Profile");
}

Text GetShowProfileTextForInputCard() {
	declare Integer Platform = GetPlatform();
	switch(Platform) {
		// ne pas modifier, c'est TRC.
		case C_Platforms["PlayStation"] : return TL::GetTranslatedText("|Player's profile for the Playstation|Profile");
		case C_Platforms["XBox"] : return TL::GetTranslatedText("|Player's profile for the XBox|Gamercard");
	}
	return TL::GetTranslatedText(_("Profile"));
}

Text GetSavingMessage() {
	declare Integer Platform = GetPlatform();
	switch(Platform) {
		//L16N Message displayed when saving a track in the track editor on Playstation
		case C_Platforms["PlayStation"] : return _("|Playstation|Saving content. Please do not turn off your console.");
		//L16N Message displayed when saving a track in the track editor on Xbox
		case C_Platforms["XBox"] : return _("|XBox|Saving content. Please do not turn off your console.");
	}

	return _("Please wait...");
}