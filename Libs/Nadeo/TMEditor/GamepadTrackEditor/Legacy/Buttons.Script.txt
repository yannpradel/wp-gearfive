/**
 * Get image for buttons
 */

#Const Version		"1.0.0"
#Const ScriptName	"Buttons.Script.txt"

#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/Legacy/FontManager.Script.txt" as Font

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_ButtonsImgDir		"file://Media/Manialinks/Common/PadButtons/" ///< Path to the buttons images
#Const C_DataActionName		"action-name"	///< Data parameters used to assign an action to the button
#Const C_ButtonClass 		"lib-button"	///< Class used to detect the buttons
#Const C_LibPrefix			"LibButtons_"	///< Prefix for the library functions
#Const C_DefaultButtonSize	8.				///< Default size of the button image
/// System platforms
#Const C_System_PS4	0
#Const C_System_PS5	1
#Const C_System_XBox	2
#Const C_System_PC	3
#Const C_System_Stadia	4
#Const C_System_Luna	5
/// Controller devices
#Const C_Device_Keyboard	0
#Const C_Device_Mouse		1
#Const C_Device_Pad			2
/// Inputs
#Const C_Menu_Select			"Menu_Select"
#Const C_Menu_Cancel			"Menu_Cancel"
#Const C_Editor_Menu			"Editor_Menu"
#Const C_Editor_Valid			"Editor_Valid"
#Const C_Editor_Cancel			"Editor_Cancel"
#Const C_Editor_AddTerrain		"Editor_AddTerrain"
#Const C_Editor_RemoveTerrain	"Editor_RemoveTerrain"
#Const C_Editor_PlaceBlock		"Editor_PlaceBlock"
#Const C_Editor_RemoveBlock		"Editor_RemoveBlock"
#Const C_Editor_CutBlock		"Editor_CutBlock"
#Const C_Editor_PasteBlock		"Editor_PasteBlock"
#Const C_Editor_DiscardBlock	"Editor_DiscardBlock"
#Const C_Editor_TurnBlock		"Editor_TurnBlock"
#Const C_Editor_CopyBlock		"Editor_CopyBlock"
#Const C_Editor_RaiseBlock		"Editor_RaiseBlock"
#Const C_Editor_LowerBlock		"Editor_LowerBlock"
#Const C_Editor_RaiseStart		"Editor_RaiseStart"
#Const C_Editor_LowerStart		"Editor_LowerStart"
#Const C_Editor_OpenTest		"Editor_OpenTest"
#Const C_Editor_StartTest		"Editor_StartTest"
#Const C_Editor_CancelTest		"Editor_CancelTest"
#Const C_Editor_SelectConnector	"Editor_SelectConnector"
#Const C_Editor_RandomLandscape	"Editor_RandomLandscape"
#Const C_Editor_Redo			"Editor_Redo"
#Const C_Editor_Undo			"Editor_Undo"
#Const C_Editor_Disconnect		"Editor_Disconnect"
#Const C_Editor_BuildMode		"Editor_BuildMode"
#Const C_Editor_BrowseBlocks	"Editor_BrowseBlocks"
#Const C_Editor_OpenRosaces		"Editor_OpenRosaces"
#Const C_Editor_MoveBlock		"Editor_MoveBlock"
#Const C_Editor_MoveBlock_Mouse		"Editor_MoveBlock_Mouse"
#Const C_Editor_PlaceBlock_Mouse		"Editor_PlaceBlock_Mouse"
#Const C_Editor_CameraMove		"Editor_CameraMove"
#Const C_Editor_CameraZoom		"Editor_CameraZoom"
#Const C_Editor_AutoConnect		"Editor_AutoConnect"
#Const C_Editor_NextFamily		"Editor_NextFamily"
#Const C_Editor_PrevFamily		"Editor_PrevFamily"
#Const C_Editor_NextCategory	"Editor_NextCategory"
#Const C_Editor_PrevCategory	"Editor_PrevCategory"
#Const C_Editor_NextMacroblock	"Editor_NextMacroblock"
#Const C_Editor_PrevMacroblock	"Editor_PrevMacroblock"
#Const C_Editor_RandomPlay		"Editor_RandomPlay"
#Const C_Editor_RandomGenerate	"Editor_RandomGenerate"
#Const C_Editor_RandomValidate	"Editor_RandomValidate"
#Const C_Editor_RandomSave		"Editor_RandomSave"
#Const C_Editor_RandomQuit		"Editor_RandomQuit"
#Const C_Editor_DecoGenerate	"Editor_DecoGenerate"
#Const C_Editor_DecoValid		"Editor_DecoValid"
#Const C_Editor_DecoCancel		"Editor_DecoCancel"
#Const C_Editor_DecoDefault		"Editor_DecoDefault"
#Const C_Editor_RosaceLeft		"Editor_RosaceLeft"
#Const C_Editor_RosaceRight		"Editor_RosaceRight"
#Const C_Editor_RosaceNextFamily		"Editor_RosaceNextFamily"
#Const C_Editor_RosacePrevFamily		"Editor_RosacePrevFamily"
#Const C_Editor_RosaceNextMacroblock	"Editor_RosaceNextMacroblock"
#Const C_Editor_RosacePrevMacroblock	"Editor_RosacePrevMacroblock"
#Const C_Editor_RosaceNextFilter	"Editor_RosaceNextFilter"
#Const C_Editor_RosacePrevFilter	"Editor_RosacePrevFilter"
#Const C_Editor_NextSpawn		"Editor_NextSpawn"
#Const C_Editor_PrevSpawn		"Editor_PrevSpawn"
#Const C_Editor_NextSkin		"Editor_NextSkin"
#Const C_Editor_PrevSkin		"Editor_PrevSkin"
#Const C_Editor_BrowseSkins		"Editor_BrowseSkins"
#Const C_Editor_NextDeco		"Editor_NextDeco"
#Const C_Editor_PrevDeco		"Editor_PrevDeco"
#Const C_Editor_MoreDeco		"Editor_MoreDeco"
#Const C_Editor_LessDeco		"Editor_LessDeco"
#Const C_Editor_LeaveValidation	"Editor_LeaveValidation"
#Const C_Editor_TakeThumbnail	"Editor_TakeThumbnail"
#Const C_Editor_LeftMouseClick		"Editor_LeftMouseClick"
#Const C_Editor_RightMouseClick		"Editor_RightMouseClick"

// Globales
declare Text[Integer][Text] G_Bindings; ///< Controls binding
declare Text[Text][Integer] G_Buttons;	///< Paths to the button image

// Functions
/// Get the inputs constants
Text Menu_Select() { return C_Menu_Select; }
Text Menu_Cancel() { return C_Menu_Cancel; }
Text Editor_Menu() { return C_Editor_Menu; }
Text Editor_Valid() { return C_Editor_Valid; }
Text Editor_Cancel() { return C_Editor_Cancel; }
Text Editor_AddTerrain() { return C_Editor_AddTerrain; }
Text Editor_RemoveTerrain() { return C_Editor_RemoveTerrain; }
Text Editor_PlaceBlock() { return C_Editor_PlaceBlock; }
Text Editor_RemoveBlock() { return C_Editor_RemoveBlock; }
Text Editor_CutBlock() { return C_Editor_CutBlock; }
Text Editor_PasteBlock() { return C_Editor_PasteBlock; }
Text Editor_DiscardBlock() { return C_Editor_DiscardBlock; }
Text Editor_TurnBlock() { return C_Editor_TurnBlock; }
Text Editor_CopyBlock() { return C_Editor_CopyBlock; }
Text Editor_RaiseBlock() { return C_Editor_RaiseBlock; }
Text Editor_LowerBlock() { return C_Editor_LowerBlock; }
Text Editor_RaiseStart() { return C_Editor_RaiseStart; }
Text Editor_LowerStart() { return C_Editor_LowerStart; }
Text Editor_OpenTest() { return C_Editor_OpenTest; }
Text Editor_StartTest() { return C_Editor_StartTest; }
Text Editor_CancelTest() { return C_Editor_CancelTest; }
Text Editor_SelectConnector() { return C_Editor_SelectConnector; }
Text Editor_RandomLandscape() { return C_Editor_RandomLandscape; }
Text Editor_Redo() { return C_Editor_Redo; }
Text Editor_Undo() { return C_Editor_Undo; }
Text Editor_Disconnect() { return C_Editor_Disconnect; }
Text Editor_BuildMode() { return C_Editor_BuildMode; }
Text Editor_BrowseBlocks() { return C_Editor_BrowseBlocks; }
Text Editor_OpenRosaces() { return C_Editor_OpenRosaces; }
Text Editor_MoveBlock() { return C_Editor_MoveBlock; }
Text Editor_MoveBlock_Mouse() { return C_Editor_MoveBlock_Mouse; }
Text Editor_PlaceBlock_Mouse() { return C_Editor_PlaceBlock_Mouse; }
Text Editor_CameraMove() { return C_Editor_CameraMove; }
Text Editor_CameraZoom() { return C_Editor_CameraZoom; }
Text Editor_AutoConnect() { return C_Editor_AutoConnect; }
Text Editor_NextFamily() { return C_Editor_NextFamily; }
Text Editor_PrevFamily() { return C_Editor_PrevFamily; }
Text Editor_NextCategory() { return C_Editor_NextCategory; }
Text Editor_PrevCategory() { return C_Editor_PrevCategory; }
Text Editor_NextMacroblock() { return C_Editor_NextMacroblock; }
Text Editor_PrevMacroblock() { return C_Editor_PrevMacroblock; }
Text Editor_RandomPlay() { return C_Editor_RandomPlay; }
Text Editor_RandomGenerate() { return C_Editor_RandomGenerate; }
Text Editor_RandomValidate() { return C_Editor_RandomValidate; }
Text Editor_RandomSave() { return C_Editor_RandomSave; }
Text Editor_RandomQuit() { return C_Editor_RandomQuit; }
Text Editor_DecoGenerate() { return C_Editor_DecoGenerate; }
Text Editor_DecoValid() { return C_Editor_DecoValid; }
Text Editor_DecoCancel() { return C_Editor_DecoCancel; }
Text Editor_DecoDefault() { return C_Editor_DecoDefault; }
Text Editor_RosaceLeft() { return C_Editor_RosaceLeft; }
Text Editor_RosaceRight() { return C_Editor_RosaceRight; }
Text Editor_RosaceNextFamily() { return C_Editor_RosaceNextFamily; }
Text Editor_RosacePrevFamily() { return C_Editor_RosacePrevFamily; }
Text Editor_RosaceNextMacroblock() { return C_Editor_RosaceNextMacroblock; }
Text Editor_RosacePrevMacroblock() { return C_Editor_RosacePrevMacroblock; }
Text Editor_RosaceNextFilter() { return C_Editor_RosaceNextFilter; }
Text Editor_RosacePrevFilter() { return C_Editor_RosacePrevFilter; }
Text Editor_NextSpawn() { return C_Editor_NextSpawn; }
Text Editor_PrevSpawn() { return C_Editor_PrevSpawn; }
Text Editor_NextSkin() { return C_Editor_NextSkin; }
Text Editor_PrevSkin() { return C_Editor_PrevSkin; }
Text Editor_BrowseSkins() { return C_Editor_BrowseSkins; }
Text Editor_NextDeco() { return C_Editor_NextDeco; }
Text Editor_PrevDeco() { return C_Editor_PrevDeco; }
Text Editor_MoreDeco() { return C_Editor_MoreDeco; }
Text Editor_LessDeco() { return C_Editor_LessDeco; }
Text Editor_LeaveValidation() { return C_Editor_LeaveValidation; }
Text Editor_TakeThumbnail() { return C_Editor_TakeThumbnail; }
Text Editor_LeftMouseClick() { return C_Editor_LeftMouseClick; }
Text Editor_RightMouseClick() { return C_Editor_RightMouseClick; }

// Inject the manialink tags of a button
Text ML_Button(Text _Button, Text[Text] _Params) {
	declare FrameParams = "";
	declare ButtonParams = "";
	declare LabelParams = "";
	declare QuadEvent = "";
	declare Params = _Params;

	declare FontSemiBold = Font::GetFontName("SemiBold");

	// Default params
	if (!Params.existskey("size")) Params["size"] = C_DefaultButtonSize^" "^C_DefaultButtonSize;
	if (!Params.existskey("textsize")) Params["textsize"] = "1";
	if (!Params.existskey("textfont")) Params["textfont"] = FontSemiBold;
	//if (!Params.existskey("textemboss")) Params["textemboss"] = "1";

	// Align params
	declare Pos = <0., 0.>;
	declare Size = <0., 0.>;
	declare ArraySize = TL::Split(" ", Params["size"]);
	if (ArraySize.existskey(0)) Size.X = TL::ToReal(ArraySize[0]);
	if (ArraySize.existskey(1)) Size.Y = TL::ToReal(ArraySize[1]);
	if (Params.existskey("halign")) {
		switch (Params["halign"]) {
			case "left"		: Pos.X = 0.5 * Size.X;
			case "center"	: Pos.X = 0.;
			case "right"	: Pos.X = -0.5 * Size.X;
		}
	}
	if (Params.existskey("valign")) {
		switch (Params["valign"]) {
			case "top"		: Pos.Y = -0.5 * Size.Y;
			case "center"	: Pos.Y = 0.;
			case "center2"	: Pos.Y = 0.;
			case "bottom"	: Pos.Y = 0.5 * Size.Y;
		}
	}
	declare PosAlign = Pos.X^" "^Pos.Y;
	declare Removed = False;
	Removed = Params.removekey("halign");
	Removed = Params.removekey("valign");

	declare TextScale = (ML::Min(Size.X, Size.Y) / C_DefaultButtonSize) * 1.5;

	foreach (ParamName => ParamValue in Params) {
		if (ParamName == "scriptevents") {
			declare QuadId = "";
			if (Params.existskey("id")) QuadId = Params["id"];
			QuadEvent = """<quad size="{{{Params["size"]}}}" halign="center" valign="center" scriptevents="1" id="{{{QuadId}}}" />""";
		} else if (ParamName == "size" || ParamName == "colorize" || ParamName == "class") {
			ButtonParams ^= TL::MLEncode(ParamName)^"=\""^TL::MLEncode(ParamValue)^"\" ";
		} else if (ParamName == "textsize" || ParamName == "textfont" || ParamName == "textemboss" || ParamName == "autonewline" || ParamName == "maxline") {
			LabelParams ^= TL::MLEncode(ParamName)^"=\""^TL::MLEncode(ParamValue)^"\" ";
		} else {
			FrameParams ^= TL::MLEncode(ParamName)^"=\""^TL::MLEncode(ParamValue)^"\" ";
		}
	}

	return """
<frame {{{FrameParams}}} data-{{{C_DataActionName}}}="{{{TL::MLEncode(_Button)}}}" class="{{{C_ButtonClass}}}">
	<frame pos="{{{PosAlign}}}" z-index="10">
		{{{QuadEvent}}}
	</frame>
	<frame pos="{{{PosAlign}}}" z-index="0" id="Button_PC">
		<quad z-index="0" {{{ButtonParams}}} halign="center" valign="center" image="{{{C_ButtonsImgDir}}}PC/BackgroundSmall.dds" keepratio="fit" id="Quad_ButtonBackground" />
		<quad z-index="1" halign="center" valign="center" keepratio="fit" id="Quad_ButtonImage" />
		<label z-index="2" scale="{{{TextScale}}}" {{{LabelParams}}} halign="center" valign="center2" id="Label_ButtonName" />
	</frame>
	<frame pos="{{{PosAlign}}}" z-index="1" id="Button_Console">
		<quad {{{ButtonParams}}} halign="center" valign="center" keepratio="fit" id="Quad_ButtonImage" />
	</frame>
</frame>
""";
}

// Inject the code of the library in the manialink
Text ML_Functions(Text _LibPrefix) {
	return """
declare Text[Integer][Text] {{{_LibPrefix}}}G_Bindings;
declare Text[Text][Integer] {{{_LibPrefix}}}G_Buttons;
declare CMlControl[] {{{_LibPrefix}}}G_Controls_Button;
declare Boolean {{{_LibPrefix}}}G_NeedUpdate;
declare Integer {{{_LibPrefix}}}G_ButtonPlatform;
declare Real {{{_LibPrefix}}}G_PrevMouseX;
declare Real {{{_LibPrefix}}}G_PrevMouseY;

Text {{{_LibPrefix}}}Private_GetButtonImgPath(Integer _PlatformIndex, Text _Button) {
	if ({{{_LibPrefix}}}G_Buttons.existskey(_PlatformIndex) && {{{_LibPrefix}}}G_Buttons[_PlatformIndex].existskey(_Button)) {
		return {{{_LibPrefix}}}G_Buttons[_PlatformIndex][_Button];
	}

	return "";
}

Text {{{_LibPrefix}}}Private_GetBoundButton(Integer _PlatformIndex, Text _ActionName, Boolean _IsJapanStyle) {
	if ({{{_LibPrefix}}}G_Bindings.existskey(_ActionName) && {{{_LibPrefix}}}G_Bindings[_ActionName].existskey(_PlatformIndex)) {
		declare Text Button = {{{_LibPrefix}}}G_Bindings[_ActionName][_PlatformIndex];
		// Invert confirm and cancel buttons in the Japanese PS4 build
		// see: /trackmania-next/tmnext/-/issues/5115
		if (_IsJapanStyle) {
			switch (Button) {
				case "A": Button = "B";
				case "Cross": Button = "Circle";
				case "B": Button = "A";
				case "Circle": Button = "Cross";
			}
		}
		return Button;
	}

	return "";
}

Integer {{{_LibPrefix}}}Private_GetPlatformIndex() {
	switch (System.Platform) {
		case CSystemPlatform::ESystemPlatform::PS4		: return {{{C_System_PS4}}};
		case CSystemPlatform::ESystemPlatform::PS5		: return {{{C_System_PS5}}};
		case CSystemPlatform::ESystemPlatform::XBoxOne	: return {{{C_System_XBox}}};
		case CSystemPlatform::ESystemPlatform::XBoxSeries	: return {{{C_System_XBox}}};
		case CSystemPlatform::ESystemPlatform::Stadia	: return {{{C_System_Stadia}}};
		case CSystemPlatform::ESystemPlatform::Luna		: return {{{C_System_Luna}}};
		case CSystemPlatform::ESystemPlatform::Steam	: return {{{C_System_PC}}};
		case CSystemPlatform::ESystemPlatform::UPlay	: return {{{C_System_PC}}};
		case CSystemPlatform::ESystemPlatform::None		: return {{{C_System_PC}}};
	}

	return {{{C_System_PC}}};
}

Void {{{_LibPrefix}}}Private_UpdateButton(CMlControl _Control, Text _ActionName) {
	if (_Control == Null) return;
	declare Frame_Button <=> (_Control as CMlFrame);

	declare PlatformIndex = {{{_LibPrefix}}}G_ButtonPlatform;
	declare ButtonName = {{{_LibPrefix}}}Private_GetBoundButton(PlatformIndex, _ActionName, Input.JapanStylePadButtons);
	declare ButtonImgPath = {{{_LibPrefix}}}Private_GetButtonImgPath(PlatformIndex, ButtonName);

	declare Button_PC <=> (Frame_Button.GetFirstChild("Button_PC") as CMlFrame);
	declare Button_Console <=> (Frame_Button.GetFirstChild("Button_Console") as CMlFrame);

	if (ButtonName == "") {
		Button_PC.Visible = False;
		Button_Console.Visible = False;
	} else if (PlatformIndex == {{{C_System_PC}}}) {
		Button_PC.Visible = True;
		Button_Console.Visible = False;

		declare Quad_ButtonImage <=> (Button_PC.GetFirstChild("Quad_ButtonImage") as CMlQuad);
		declare Quad_ButtonBackground <=> (Button_PC.GetFirstChild("Quad_ButtonBackground") as CMlQuad);
		declare Label_ButtonName <=> (Button_PC.GetFirstChild("Label_ButtonName") as CMlLabel);

		if (ButtonImgPath == "") {
			Label_ButtonName.Value = _("")^ButtonName;
			Label_ButtonName.Visible = True;
			Label_ButtonName.Size = Quad_ButtonBackground.Size - <1., 1.>;
			Quad_ButtonImage.Visible = False;
		} else {
			Label_ButtonName.Visible = False;
			Quad_ButtonImage.ImageUrl = ButtonImgPath;
			Quad_ButtonImage.Visible = True;
			Quad_ButtonImage.Size = Quad_ButtonBackground.Size;
			Quad_ButtonBackground.Visible = False;
		}
	} else {
		Button_PC.Visible = False;
		Button_Console.Visible = True;

		declare Quad_ButtonImage <=> (Button_Console.GetFirstChild("Quad_ButtonImage") as CMlQuad);
		if (ButtonImgPath == "") {
			Quad_ButtonImage.ImageUrl = "{{{C_ButtonsImgDir}}}Default/Default.dds";
		} else {
			Quad_ButtonImage.ImageUrl = ButtonImgPath;
		}
	}
}

Void {{{_LibPrefix}}}Private_UpdateButton(CMlControl _Control) {
	if (_Control == Null) return;
	{{{_LibPrefix}}}Private_UpdateButton(_Control, _Control.DataAttributeGet("{{{C_DataActionName}}}"));
}

Void {{{_LibPrefix}}}SetAction(CMlControl _Control, Text _ActionName) {
	if (_Control == Null) return;

	_Control.DataAttributeSet("{{{C_DataActionName}}}", _ActionName);
	{{{_LibPrefix}}}Private_UpdateButton(_Control, _ActionName);
}

Void {{{_LibPrefix}}}Init() {
	Page.GetClassChildren("{{{C_ButtonClass}}}", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		Page.ScrollToControl(Control);
		declare Control2 = Control; // needed for proprer GetCannonicalstack
		{{{_LibPrefix}}}G_Controls_Button.add(Control2);
	}

	{{{_LibPrefix}}}G_Bindings = {{{dump(G_Bindings)}}};
	{{{_LibPrefix}}}G_Buttons = {{{dump(G_Buttons)}}};
	{{{_LibPrefix}}}G_ButtonPlatform = {{{_LibPrefix}}}Private_GetPlatformIndex();

	{{{_LibPrefix}}}G_NeedUpdate = True;
}

Void {{{_LibPrefix}}}Loop() {
	declare Platform = {{{_LibPrefix}}}Private_GetPlatformIndex();

	if (Platform != {{{C_System_XBox}}} && Platform != {{{C_System_PS4}}} && Platform != {{{C_System_PS5}}}) {
		// Pad button or keyboard key
		foreach (Event in Input.PendingEvents) {
			if (Event.Type == CInputEvent::EType::PadButtonPress) {
				if (Event.Pad != Null && Event.Pad.Type != CInputPad::EPadType::Keyboard) {
					{{{_LibPrefix}}}G_PrevMouseX = MouseX;
					{{{_LibPrefix}}}G_PrevMouseY = MouseY;
					if (Platform == {{{C_System_Stadia}}} && Event.Pad.Type == CInputPad::EPadType::Generic) {
						{{{_LibPrefix}}}G_ButtonPlatform = {{{C_System_Stadia}}};
					} else if (Platform == {{{C_System_Luna}}} && Event.Pad.Type == CInputPad::EPadType::Generic) {
						{{{_LibPrefix}}}G_ButtonPlatform = {{{C_System_Luna}}};
					} else if (Event.Pad.Type == CInputPad::EPadType::PlayStation) {
						if (System.Platform == CSystemPlatform::ESystemPlatform::PS5) {
							{{{_LibPrefix}}}G_ButtonPlatform = {{{C_System_PS5}}};
						} else {
							{{{_LibPrefix}}}G_ButtonPlatform = {{{C_System_PS4}}};
						}
					} else {
						{{{_LibPrefix}}}G_ButtonPlatform = {{{C_System_XBox}}};
					}
					{{{_LibPrefix}}}G_NeedUpdate = True;
				} else {
					{{{_LibPrefix}}}G_PrevMouseX = MouseX;
					{{{_LibPrefix}}}G_PrevMouseY = MouseY;
					{{{_LibPrefix}}}G_ButtonPlatform = {{{C_System_PC}}};
					{{{_LibPrefix}}}G_NeedUpdate = True;
				}
			}
		}

		// Mouse
		if ({{{_LibPrefix}}}G_ButtonPlatform != {{{C_System_PC}}}) {
			if ({{{_LibPrefix}}}G_PrevMouseX != MouseX || {{{_LibPrefix}}}G_PrevMouseY != MouseY) {
				{{{_LibPrefix}}}G_PrevMouseX = MouseX;
				{{{_LibPrefix}}}G_PrevMouseY = MouseY;
				{{{_LibPrefix}}}G_ButtonPlatform = {{{C_System_PC}}};
				{{{_LibPrefix}}}G_NeedUpdate = True;
			}
		}
	}

	if ({{{_LibPrefix}}}G_NeedUpdate) {
		{{{_LibPrefix}}}G_NeedUpdate = False;

		foreach (Control_Button in {{{_LibPrefix}}}G_Controls_Button) {
			{{{_LibPrefix}}}Private_UpdateButton(Control_Button);
		}
	}
}

Boolean {{{_LibPrefix}}}IsKeyboard(Integer _InputDevice) {
	return ({{{_LibPrefix}}}G_ButtonPlatform == {{{C_System_PC}}});
}

Boolean {{{_LibPrefix}}}IsKeyboard() {
	return ({{{_LibPrefix}}}G_ButtonPlatform == {{{C_System_PC}}});
}

Integer {{{_LibPrefix}}}GetInputDevice() {
	return {{{_LibPrefix}}}G_ButtonPlatform;
}
""";
}

//  Inject the code of the library in the manialink
Text ML_Functions() {
	return ML_Functions(C_LibPrefix);
}

/// Get the system constants
Integer System_PC() { return C_System_PC; }
Integer System_XBox() { return C_System_XBox; }
Integer System_PlayStation4() { return C_System_PS4; }
Integer System_PlayStation5() { return C_System_PS5; }
Integer System_Stadia() { return C_System_Stadia; }
Integer System_Luna() { return C_System_Luna; }

/// Get the controller devices constants
Integer Device_Keyboard() { return C_Device_Keyboard; }
Integer Device_Mouse() { return C_Device_Mouse; }
Integer Device_Pad() { return C_Device_Pad; }

// Check if we are using the keyboard/mouse on pc
// Thoughts RVZ 2022/07/06: There are no longer any C++ differences for inputs on keyboard between PC and non PC
// Also Luna/Stadia are a thing now. I don't think that we should use this anymore.
// If it's a keyboard, it's a keyboard, no matter which device we're on, I think.

/*Boolean IsKeyboardOnPC(Integer _Device) {

	declare Platform = {{{_LibPrefix}}}Private_GetPlatformIndex();

	return (
		Platform != {{{C_System_XBox}}} &&
		Platform != {{{C_System_PS4}}}) &&
		Platform != {{{C_System_PS5}}}) &&
		_Device == C_Device_Keyboard
	);
}*/

// Device used to generate the latest input (approximation)
Integer GetInputDevice(Boolean _IsPad, Boolean _IsKeyboard, Boolean _IsMouse) {
	if (_IsPad) return C_Device_Pad;
	if (_IsKeyboard) return C_Device_Keyboard;
	if (_IsMouse) return C_Device_Mouse;

	foreach (Event in Input.PendingEvents) {
		if (Event.Type == CInputEvent::EType::PadButtonPress) {
			if (Event.Pad != Null) {
				if (Event.Pad.Type == CInputPad::EPadType::Keyboard) return C_Device_Keyboard;
				else return C_Device_Pad;
			}
		}
	}
	for (I, 0, 200) {
		if (Input.IsKeyPressed(I)) return C_Device_Keyboard;
	}
	return C_Device_Pad;
}

// Add custom bindings
Void SetBindings(Text[Integer][Text] _Bindings) {
	foreach (ButtonName => ButtonProperties in _Bindings) {
		G_Bindings[ButtonName] = ButtonProperties;
	}
}

// Get the path to the left stick image
Text GetLeftStickImage() {
	if (UserMgr != Null && UserMgr.MainUserPad != Null && System.Platform == CSystemPlatform::ESystemPlatform::Stadia && UserMgr.MainUserPad.Type == CInputPad::EPadType::Generic)	{
		return C_ButtonsImgDir^"Stadia/LStick.dds";
	}
	else if (UserMgr != Null && UserMgr.MainUserPad != Null && System.Platform == CSystemPlatform::ESystemPlatform::Luna && UserMgr.MainUserPad.Type == CInputPad::EPadType::Generic)	{
		return C_ButtonsImgDir^"Luna/LStick.dds";
	}
	else if (UserMgr != Null && UserMgr.MainUserPad != Null && UserMgr.MainUserPad.Type == CInputPad::EPadType::PlayStation)  {
		return C_ButtonsImgDir^"PS4/LStick.dds";
	}
	return C_ButtonsImgDir^"XB1/LStick.dds";
}

// Get the path to the right stick image
Text GetRightStickImage() {
	if (UserMgr != Null && UserMgr.MainUserPad != Null && System.Platform == CSystemPlatform::ESystemPlatform::Stadia && UserMgr.MainUserPad.Type == CInputPad::EPadType::Generic)	{
		return C_ButtonsImgDir^"Stadia/RStick.dds";
	}
	else if (UserMgr != Null && UserMgr.MainUserPad != Null && System.Platform == CSystemPlatform::ESystemPlatform::Luna && UserMgr.MainUserPad.Type == CInputPad::EPadType::Generic)	{
		return C_ButtonsImgDir^"Luna/RStick.dds";
	}
	else if (UserMgr != Null && UserMgr.MainUserPad != Null && UserMgr.MainUserPad.Type == CInputPad::EPadType::PlayStation)  {
		return C_ButtonsImgDir^"PS4/RStick.dds";
	}
	return C_ButtonsImgDir^"XB1/RStick.dds";
}

// Get the path to the mouse wheel image
Text GetMouseWheelImage() {
	return C_ButtonsImgDir^"PC/Wheel.dds";
}

Integer GetThumbnailKeyCode() { return 33; }
Text GetThumbnailKeyName() {	return "End"; }

Integer GetSelectKeyCode() {	return 108; }
Text GetSelectKeyName() { return "Return"; }

Integer GetCancelKeyCode() { return 19; }
Text GetCancelKeyName() { return "Back"; }

Void Unload() {
	G_Bindings.clear();
}

Void Load() {
	Unload();

	G_Buttons = [
		C_System_PC => [
			"ArrowDown" => C_ButtonsImgDir^"PC/ArrowDown.dds",
			"ArrowLeft" => C_ButtonsImgDir^"PC/ArrowLeft.dds",
			"ArrowRight" => C_ButtonsImgDir^"PC/ArrowRight.dds",
			"ArrowUp" => C_ButtonsImgDir^"PC/ArrowUp.dds",
			"Down" => C_ButtonsImgDir^"PC/Down.dds",
			"Left" => C_ButtonsImgDir^"PC/Left.dds",
			"Right" => C_ButtonsImgDir^"PC/Right.dds",
			"Up" => C_ButtonsImgDir^"PC/Up.dds",
			"Shift" => C_ButtonsImgDir^"PC/Maj.dds",
			"Enter" => C_ButtonsImgDir^"PC/Enter.dds",
			"Backspace" => C_ButtonsImgDir^"PC/Backspace.dds",
			"Space" => C_ButtonsImgDir^"PC/Space.dds",
			"PgUp" => C_ButtonsImgDir^"PC/PageUp.dds",
			"PgDn" => C_ButtonsImgDir^"PC/PageDown.dds",
			"Camera" => C_ButtonsImgDir^"PC/CameraMouse.dds",
			"DirectionnalButtons" => C_ButtonsImgDir^"PC/DirectionnalButtons.dds",
			"Mouse" => C_ButtonsImgDir^"PC/Mouse.dds",
			"LeftClick" => C_ButtonsImgDir^"PC/LeftClick.dds",
			"RightClick" => C_ButtonsImgDir^"PC/RightClick.dds",
			"Wheel" => C_ButtonsImgDir^"PC/Wheel.dds",
			"Ctrl" => C_ButtonsImgDir^"PC/Ctrl.dds",
			"Esc" => C_ButtonsImgDir^"PC/Echap.dds",
			"F5" => C_ButtonsImgDir^"PC/F5.dds",
			"Home" => C_ButtonsImgDir^"PC/Home.dds",
			"End" => C_ButtonsImgDir^"PC/Fin.dds"
		],
		C_System_XBox => [
			"A" => C_ButtonsImgDir^"XB1/A.dds",
			"B" => C_ButtonsImgDir^"XB1/B.dds",
			"X" => C_ButtonsImgDir^"XB1/X.dds",
			"Y" => C_ButtonsImgDir^"XB1/Y.dds",
			"RB" => C_ButtonsImgDir^"XB1/RB.dds",
			"LB" => C_ButtonsImgDir^"XB1/LB.dds",
			"RT" => C_ButtonsImgDir^"XB1/RT.dds",
			"LT" => C_ButtonsImgDir^"XB1/LT.dds",
			"DPad" => C_ButtonsImgDir^"XB1/DPad.dds",
			"DPadDown" => C_ButtonsImgDir^"XB1/DPadDown.dds",
			"DPadUp" => C_ButtonsImgDir^"XB1/DPadUp.dds",
			"DPadUpDown" => C_ButtonsImgDir^"XB1/DPadUpDown.dds",
			"DPadLeft" => C_ButtonsImgDir^"XB1/DPadLeft.dds",
			"DPadRight" => C_ButtonsImgDir^"XB1/DPadRight.dds",
			"DPadLeftRight" => C_ButtonsImgDir^"XB1/DPadLeftRight.dds",
			"LStick" => C_ButtonsImgDir^"XB1/LStick.dds",
			"LStickClick" => C_ButtonsImgDir^"XB1/LStickClick.dds",
			"LStickDown" => C_ButtonsImgDir^"XB1/LStickDown.dds",
			"LStickLeft" => C_ButtonsImgDir^"XB1/LStickLeft.dds",
			"LStickRight" => C_ButtonsImgDir^"XB1/LStickRight.dds",
			"LStickUp" => C_ButtonsImgDir^"XB1/LStickUp.dds",
			"RStick" => C_ButtonsImgDir^"XB1/RStick.dds",
			"RStickClick" => C_ButtonsImgDir^"XB1/RStickClick.dds",
			"RStickDown" => C_ButtonsImgDir^"XB1/RStickDown.dds",
			"RStickLeft" => C_ButtonsImgDir^"XB1/RStickLeft.dds",
			"RStickRight" => C_ButtonsImgDir^"XB1/RStickRight.dds",
			"RStickUp" => C_ButtonsImgDir^"XB1/RStickUp.dds",
			"Menu" => C_ButtonsImgDir^"XB1/Menu.dds",
			"View" => C_ButtonsImgDir^"XB1/View.dds"
		],
		C_System_PS4 => [
			"Cross" => C_ButtonsImgDir^"PS4/Cross.dds",
			"Circle" => C_ButtonsImgDir^"PS4/Circle.dds",
			"Square" => C_ButtonsImgDir^"PS4/Square.dds",
			"Triangle" => C_ButtonsImgDir^"PS4/Triangle.dds",
			"R1" => C_ButtonsImgDir^"PS4/R1.dds",
			"L1" => C_ButtonsImgDir^"PS4/L1.dds",
			"R2" => C_ButtonsImgDir^"PS4/R2.dds",
			"L2" => C_ButtonsImgDir^"PS4/L2.dds",
			"DPad" => C_ButtonsImgDir^"PS4/DPad.dds",
			"DPadDown" => C_ButtonsImgDir^"PS4/DPadDown.dds",
			"DPadUp" => C_ButtonsImgDir^"PS4/DPadUp.dds",
			"DPadUpDown" => C_ButtonsImgDir^"PS4/DPadUpDown.dds",
			"DPadLeft" => C_ButtonsImgDir^"PS4/DPadLeft.dds",
			"DPadRight" => C_ButtonsImgDir^"PS4/DPadRight.dds",
			"DPadLeftRight" => C_ButtonsImgDir^"PS4/DPadLeftRight.dds",
			"LStick" => C_ButtonsImgDir^"PS4/LStick.dds",
			"LStickClick" => C_ButtonsImgDir^"PS4/LStickClick.dds",
			"LStickDown" => C_ButtonsImgDir^"PS4/LStickDown.dds",
			"LStickLeft" => C_ButtonsImgDir^"PS4/LStickLeft.dds",
			"LStickRight" => C_ButtonsImgDir^"PS4/LStickRight.dds",
			"LStickUp" => C_ButtonsImgDir^"PS4/LStickUp.dds",
			"RStick" => C_ButtonsImgDir^"PS4/RStick.dds",
			"RStickClick" => C_ButtonsImgDir^"PS4/RStickClick.dds",
			"RStickDown" => C_ButtonsImgDir^"PS4/RStickDown.dds",
			"RStickLeft" => C_ButtonsImgDir^"PS4/RStickLeft.dds",
			"RStickRight" => C_ButtonsImgDir^"PS4/RStickRight.dds",
			"RStickUp" => C_ButtonsImgDir^"PS4/RStickUp.dds",
			"Options" => C_ButtonsImgDir^"PS4/Options.dds",
			"Share" => C_ButtonsImgDir^"PS4/Share.dds",
			"TouchPad" => C_ButtonsImgDir^"PS4/TouchPad.dds"
		],
		C_System_PS5 => [
			"Cross" => C_ButtonsImgDir^"PS5/Cross.dds",
			"Circle" => C_ButtonsImgDir^"PS5/Circle.dds",
			"Square" => C_ButtonsImgDir^"PS5/Square.dds",
			"Triangle" => C_ButtonsImgDir^"PS5/Triangle.dds",
			"R1" => C_ButtonsImgDir^"PS5/R1.dds",
			"L1" => C_ButtonsImgDir^"PS5/L1.dds",
			"R2" => C_ButtonsImgDir^"PS5/R2.dds",
			"L2" => C_ButtonsImgDir^"PS5/L2.dds",
			"DPad" => C_ButtonsImgDir^"PS5/DPad.dds",
			"DPadDown" => C_ButtonsImgDir^"PS5/DPadDown.dds",
			"DPadUp" => C_ButtonsImgDir^"PS5/DPadUp.dds",
			"DPadUpDown" => C_ButtonsImgDir^"PS5/DPadUpDown.dds",
			"DPadLeft" => C_ButtonsImgDir^"PS5/DPadLeft.dds",
			"DPadRight" => C_ButtonsImgDir^"PS5/DPadRight.dds",
			"DPadLeftRight" => C_ButtonsImgDir^"PS5/DPadLeftRight.dds",
			"LStick" => C_ButtonsImgDir^"PS5/LStick.dds",
			"LStickClick" => C_ButtonsImgDir^"PS5/LStickClick.dds",
			"LStickDown" => C_ButtonsImgDir^"PS5/LStickDown.dds",
			"LStickLeft" => C_ButtonsImgDir^"PS5/LStickLeft.dds",
			"LStickRight" => C_ButtonsImgDir^"PS5/LStickRight.dds",
			"LStickUp" => C_ButtonsImgDir^"PS5/LStickUp.dds",
			"RStick" => C_ButtonsImgDir^"PS5/RStick.dds",
			"RStickClick" => C_ButtonsImgDir^"PS5/RStickClick.dds",
			"RStickDown" => C_ButtonsImgDir^"PS5/RStickDown.dds",
			"RStickLeft" => C_ButtonsImgDir^"PS5/RStickLeft.dds",
			"RStickRight" => C_ButtonsImgDir^"PS5/RStickRight.dds",
			"RStickUp" => C_ButtonsImgDir^"PS5/RStickUp.dds",
			"Options" => C_ButtonsImgDir^"PS5/Options.dds",
			"Share" => C_ButtonsImgDir^"PS5/Share.dds",
			"TouchPad" => C_ButtonsImgDir^"PS4/TouchPad.dds" //< No equivalent for PS5 for now
		],
		C_System_Stadia => [
			"A" => C_ButtonsImgDir^"Stadia/A.dds",
			"B" => C_ButtonsImgDir^"Stadia/B.dds",
			"X" => C_ButtonsImgDir^"Stadia/X.dds",
			"Y" => C_ButtonsImgDir^"Stadia/Y.dds",
			"R1" => C_ButtonsImgDir^"Stadia/R1.dds",
			"L1" => C_ButtonsImgDir^"Stadia/L1.dds",
			"R2" => C_ButtonsImgDir^"Stadia/R2.dds",
			"L2" => C_ButtonsImgDir^"Stadia/L2.dds",
			"DPad" => C_ButtonsImgDir^"Stadia/DPad.dds",
			"DPadDown" => C_ButtonsImgDir^"Stadia/DPadDown.dds",
			"DPadUp" => C_ButtonsImgDir^"Stadia/DPadUp.dds",
			"DPadUpDown" => C_ButtonsImgDir^"Stadia/DPadUpDown.dds",
			"DPadLeft" => C_ButtonsImgDir^"Stadia/DPadLeft.dds",
			"DPadRight" => C_ButtonsImgDir^"Stadia/DPadRight.dds",
			"DPadLeftRight" => C_ButtonsImgDir^"Stadia/DPadLeftRight.dds",
			"LStick" => C_ButtonsImgDir^"Stadia/LStick.dds",
			"LStickClick" => C_ButtonsImgDir^"Stadia/LStickClick.dds",
			"LStickDown" => C_ButtonsImgDir^"Stadia/LStickDown.dds",
			"LStickLeft" => C_ButtonsImgDir^"Stadia/LStickLeft.dds",
			"LStickRight" => C_ButtonsImgDir^"Stadia/LStickRight.dds",
			"LStickUp" => C_ButtonsImgDir^"Stadia/LStickUp.dds",
			"RStick" => C_ButtonsImgDir^"Stadia/RStick.dds",
			"RStickClick" => C_ButtonsImgDir^"Stadia/RStickClick.dds",
			"RStickDown" => C_ButtonsImgDir^"Stadia/RStickDown.dds",
			"RStickLeft" => C_ButtonsImgDir^"Stadia/RStickLeft.dds",
			"RStickRight" => C_ButtonsImgDir^"Stadia/RStickRight.dds",
			"RStickUp" => C_ButtonsImgDir^"Stadia/RStickUp.dds",
			"Menu" => C_ButtonsImgDir^"Stadia/Menu.dds",
			"Options" => C_ButtonsImgDir^"Stadia/Options.dds",
			"Assistant" => C_ButtonsImgDir^"Stadia/Assistant.dds"
		],
		C_System_Luna => [
			"A" => C_ButtonsImgDir^"Luna/A.dds",
			"B" => C_ButtonsImgDir^"Luna/B.dds",
			"X" => C_ButtonsImgDir^"Luna/X.dds",
			"Y" => C_ButtonsImgDir^"Luna/Y.dds",
			"RB" => C_ButtonsImgDir^"Luna/RB.dds",
			"LB" => C_ButtonsImgDir^"Luna/LB.dds",
			"RT" => C_ButtonsImgDir^"Luna/RT.dds",
			"LT" => C_ButtonsImgDir^"Luna/LT.dds",
			"DPad" => C_ButtonsImgDir^"Luna/DPad.dds",
			"DPadDown" => C_ButtonsImgDir^"Luna/DPadDown.dds",
			"DPadUp" => C_ButtonsImgDir^"Luna/DPadUp.dds",
			"DPadUpDown" => C_ButtonsImgDir^"Luna/DPadUpDown.dds",
			"DPadLeft" => C_ButtonsImgDir^"Luna/DPadLeft.dds",
			"DPadRight" => C_ButtonsImgDir^"Luna/DPadRight.dds",
			"DPadLeftRight" => C_ButtonsImgDir^"Luna/DPadLeftRight.dds",
			"LStick" => C_ButtonsImgDir^"Luna/LStick.dds",
			"LStickClick" => C_ButtonsImgDir^"Luna/LStickClick.dds",
			"LStickDown" => C_ButtonsImgDir^"Luna/LStickDown.dds",
			"LStickLeft" => C_ButtonsImgDir^"Luna/LStickLeft.dds",
			"LStickRight" => C_ButtonsImgDir^"Luna/LStickRight.dds",
			"LStickUp" => C_ButtonsImgDir^"Luna/LStickUp.dds",
			"RStick" => C_ButtonsImgDir^"Luna/RStick.dds",
			"RStickClick" => C_ButtonsImgDir^"Luna/RStickClick.dds",
			"RStickDown" => C_ButtonsImgDir^"Luna/RStickDown.dds",
			"RStickLeft" => C_ButtonsImgDir^"Luna/RStickLeft.dds",
			"RStickRight" => C_ButtonsImgDir^"Luna/RStickRight.dds",
			"RStickUp" => C_ButtonsImgDir^"Luna/RStickUp.dds",
			"Menu" => C_ButtonsImgDir^"Luna/Menu.dds",
			"Home" => C_ButtonsImgDir^"Luna/Home.dds",
			"Action" => C_ButtonsImgDir^"Luna/Action.dds"
		]
	];

	G_Bindings = [
// Menu
		C_Menu_Select => [
			C_System_PC => "Enter",
			C_System_XBox => "A",
			C_System_PS4 => "Cross",
			C_System_PS5 => "Cross",
			C_System_Stadia => "A",
			C_System_Luna => "A"
		],
		C_Menu_Cancel => [
			C_System_PC => "Backspace",
			C_System_XBox => "B",
			C_System_PS4 => "Circle",
			C_System_PS5 => "Circle",
			C_System_Stadia => "B",
			C_System_Luna => "B"
		],
// ---------------------------------- //
// Trackbuilder
		C_Editor_Menu => [
			C_System_PC => "Esc",
			C_System_XBox => "Menu",
			C_System_PS4 => "Options",
			C_System_PS5 => "Options",
			C_System_Stadia => "Menu",
			C_System_Luna => "Menu"
		],
		C_Editor_Valid => [
			C_System_PC => "Enter",
			C_System_XBox => "A",
			C_System_PS4 => "Cross",
			C_System_PS5 => "Cross",
			C_System_Stadia => "A",
			C_System_Luna => "A"
		],
		C_Editor_Cancel => [
			C_System_PC => "Del",
			C_System_XBox => "B",
			C_System_PS4 => "Circle",
			C_System_PS5 => "Circle",
			C_System_Stadia => "B",
			C_System_Luna => "B"
		],
		C_Editor_AddTerrain => [
			C_System_PC => "Enter",
			C_System_XBox => "A",
			C_System_PS4 => "Cross",
			C_System_PS5 => "Cross",
			C_System_Stadia => "A",
			C_System_Luna => "A"
		],
		C_Editor_RemoveTerrain => [
			C_System_PC => "Del",
			C_System_XBox => "B",
			C_System_PS4 => "Circle",
			C_System_PS5 => "Circle",
			C_System_Stadia => "B",
			C_System_Luna => "B"
		],
		C_Editor_PlaceBlock => [
			C_System_PC => "Space",
			C_System_XBox => "A",
			C_System_PS4 => "Cross",
			C_System_PS5 => "Cross",
			C_System_Stadia => "A",
			C_System_Luna => "A"
		],
		C_Editor_RemoveBlock => [
			C_System_PC => "Del",
			C_System_XBox => "B",
			C_System_PS4 => "Circle",
			C_System_PS5 => "Circle",
			C_System_Stadia => "B",
			C_System_Luna => "B"
		],
		C_Editor_CutBlock => [
			C_System_PC => "Del",
			C_System_XBox => "B",
			C_System_PS4 => "Circle",
			C_System_PS5 => "Circle",
			C_System_Stadia => "B",
			C_System_Luna => "B"
		],
		C_Editor_PasteBlock => [
			C_System_PC => "Up",
			C_System_XBox => "LStickUp",
			C_System_PS4 => "LStickUp",
			C_System_PS5 => "LStickUp",
			C_System_Stadia => "LStickUp",
			C_System_Luna => "LStickUp"
		],
		C_Editor_DiscardBlock => [
			C_System_PC => "Down",
			C_System_XBox => "LStickDown",
			C_System_PS4 => "LStickDown",
			C_System_PS5 => "LStickDown",
			C_System_Stadia => "LStickDown",
			C_System_Luna => "LStickDown"
		],
		C_Editor_TurnBlock => [
			C_System_PC => "Ctrl",
			C_System_XBox => "Y",
			C_System_PS4 => "Triangle",
			C_System_PS5 => "Triangle",
			C_System_Stadia => "Y",
			C_System_Luna => "Y"
		],
		C_Editor_CopyBlock => [
			C_System_PC => "Ctrl",
			C_System_XBox => "Y",
			C_System_PS4 => "Triangle",
			C_System_PS5 => "Triangle",
			C_System_Stadia => "Y",
			C_System_Luna => "Y"
		],
		C_Editor_RaiseBlock => [
			C_System_PC => "PgUp",
			C_System_XBox => "RB",
			C_System_PS4 => "R1",
			C_System_PS5 => "R1",
			C_System_Stadia => "R1",
			C_System_Luna => "RB"
		],
		C_Editor_LowerBlock => [
			C_System_PC => "PgDn",
			C_System_XBox => "LB",
			C_System_PS4 => "L1",
			C_System_PS5 => "L1",
			C_System_Stadia => "L1",
			C_System_Luna => "LB"
		],
		C_Editor_RaiseStart => [
			C_System_PC => "PgUp",
			C_System_XBox => "LStickUp",
			C_System_PS4 => "LStickUp",
			C_System_PS5 => "LStickUp",
			C_System_Stadia => "LStickUp",
			C_System_Luna => "LStickUp"
		],
		C_Editor_LowerStart => [
			C_System_PC => "PgDn",
			C_System_XBox => "LStickDown",
			C_System_PS4 => "LStickDown",
			C_System_PS5 => "LStickDown",
			C_System_Stadia => "LStickDown",
			C_System_Luna => "LStickDown"
		],
		C_Editor_OpenTest => [
			C_System_PC => "Enter",
			C_System_XBox => "X",
			C_System_PS4 => "Square",
			C_System_PS5 => "Square",
			C_System_Stadia => "X",
			C_System_Luna => "X"
		],
		C_Editor_StartTest => [
			C_System_PC => "Enter",
			C_System_XBox => "A",
			C_System_PS4 => "Cross",
			C_System_PS5 => "Cross",
			C_System_Stadia => "A",
			C_System_Luna => "A"
		],
		C_Editor_CancelTest => [
			C_System_PC => "Backspace",
			C_System_XBox => "B",
			C_System_PS4 => "Circle",
			C_System_PS5 => "Circle",
			C_System_Stadia => "B",
			C_System_Luna => "B"
		],
		C_Editor_SelectConnector => [
			C_System_PC => "Ctrl",
			C_System_XBox => "Y",
			C_System_PS4 => "Triangle",
			C_System_PS5 => "Triangle",
			C_System_Stadia => "Y",
			C_System_Luna => "Y"
		],
		C_Editor_RandomLandscape => [
			C_System_PC => "Ctrl",
			C_System_XBox => "Y",
			C_System_PS4 => "Triangle",
			C_System_PS5 => "Triangle",
			C_System_Stadia => "Y",
			C_System_Luna => "Y"
		],
		C_Editor_Redo => [
			C_System_PC => "End",
			C_System_XBox => "RT",
			C_System_PS4 => "R2",
			C_System_PS5 => "R2",
			C_System_Stadia => "R2",
			C_System_Luna => "RT"
		],
		C_Editor_Undo => [
			C_System_PC => "Home",
			C_System_XBox => "LT",
			C_System_PS4 => "L2",
			C_System_PS5 => "L2",
			C_System_Stadia => "L2",
			C_System_Luna => "LT"
		],
		C_Editor_Disconnect => [
			C_System_PC => "Shift",
			C_System_XBox => "LStickClick",
			C_System_PS4 => "LStickClick",
			C_System_PS5 => "LStickClick",
			C_System_Stadia => "LStickClick",
			C_System_Luna => "LStickClick"
		],
		C_Editor_BuildMode => [
			C_System_PC => "Shift",
			C_System_XBox => "LStickClick",
			C_System_PS4 => "LStickClick",
			C_System_PS5 => "LStickClick",
			C_System_Stadia => "LStickClick",
			C_System_Luna => "LStickClick"
		],
		C_Editor_BrowseBlocks => [
			C_System_PC => "RightClick",
			C_System_XBox => "LStick",
			C_System_PS4 => "LStick",
			C_System_PS5 => "LStick",
			C_System_Stadia => "LStick",
			C_System_Luna => "LStick"
		],
		C_Editor_OpenRosaces => [
			C_System_PC => "RightClick",
			C_System_XBox => "LStick",
			C_System_PS4 => "LStick",
			C_System_PS5 => "LStick",
			C_System_Stadia => "LStick",
			C_System_Luna => "LStick"
		],
		C_Editor_MoveBlock => [
			C_System_PC => "DirectionnalButtons",
			C_System_XBox => "DPad",
			C_System_PS4 => "DPad",
			C_System_PS5 => "DPad",
			C_System_Stadia => "DPad",
			C_System_Luna => "DPad"
		],
		C_Editor_CameraMove => [
			C_System_PC => "Camera",
			C_System_XBox => "RStick",
			C_System_PS4 => "RStick",
			C_System_PS5 => "RStick",
			C_System_Stadia => "RStick",
			C_System_Luna => "RStick"
		],
		C_Editor_CameraZoom => [
			C_System_PC => "Wheel",
			C_System_XBox => "RStickClick",
			C_System_PS4 => "RStickClick",
			C_System_PS5 => "RStickClick",
			C_System_Stadia => "RStickClick",
			C_System_Luna => "RStickClick"
		],
		C_Editor_AutoConnect => [
			C_System_PC => "Enter",
			C_System_XBox => "A",
			C_System_PS4 => "Cross",
			C_System_PS5 => "Cross",
			C_System_Stadia => "A",
			C_System_Luna => "A"
		],
		C_Editor_PrevFamily => [
			C_System_PC => "ArrowLeft",
			C_System_XBox => "LB",
			C_System_PS4 => "L1",
			C_System_PS5 => "L1",
			C_System_Stadia => "L1",
			C_System_Luna => "LB"
		],
		C_Editor_NextFamily => [
			C_System_PC => "ArrowRight",
			C_System_XBox => "RB",
			C_System_PS4 => "R1",
			C_System_PS5 => "R1",
			C_System_Stadia => "R1",
			C_System_Luna => "RB"
		],
		C_Editor_PrevCategory => [
			C_System_PC => "ArrowLeft",
			C_System_XBox => "LT",
			C_System_PS4 => "L2",
			C_System_PS5 => "L2",
			C_System_Stadia => "L2",
			C_System_Luna => "LT"
		],
		C_Editor_NextCategory => [
			C_System_PC => "ArrowRight",
			C_System_XBox => "RT",
			C_System_PS4 => "R2",
			C_System_PS5 => "R2",
			C_System_Stadia => "R2",
			C_System_Luna => "RT"
		],
		C_Editor_PrevMacroblock => [
			C_System_PC => "ArrowLeft",
			C_System_XBox => "LStickLeft",
			C_System_PS4 => "LStickLeft",
			C_System_PS5 => "LStickLeft",
			C_System_Stadia => "LStickLeft",
			C_System_Luna => "LStickLeft"
		],
		C_Editor_NextMacroblock => [
			C_System_PC => "ArrowRight",
			C_System_XBox => "LStickRight",
			C_System_PS4 => "LStickRight",
			C_System_PS5 => "LStickRight",
			C_System_Stadia => "LStickRight",
			C_System_Luna => "LStickRight"
		],
		C_Editor_RandomPlay => [
			C_System_PC => "Space",
			C_System_XBox => "A",
			C_System_PS4 => "Cross",
			C_System_PS5 => "Cross",
			C_System_Stadia => "A",
			C_System_Luna => "A"
		],
		C_Editor_RandomGenerate => [
			C_System_PC => "Enter",
			C_System_XBox => "X",
			C_System_PS4 => "Square",
			C_System_PS5 => "Square",
			C_System_Stadia => "X",
			C_System_Luna => "X"
		],
		C_Editor_RandomValidate => [
			C_System_PC => "Enter",
			C_System_XBox => "A",
			C_System_PS4 => "Cross",
			C_System_PS5 => "Cross",
			C_System_Stadia => "A",
			C_System_Luna => "A"
		],
		C_Editor_RandomSave => [
			C_System_PC => "Ctrl",
			C_System_XBox => "Y",
			C_System_PS4 => "Triangle",
			C_System_PS5 => "Triangle",
			C_System_Stadia => "Y",
			C_System_Luna => "Y"
		],
		C_Editor_RandomQuit => [
			C_System_PC => "Del",
			C_System_XBox => "B",
			C_System_PS4 => "Circle",
			C_System_PS5 => "Circle",
			C_System_Stadia => "B",
			C_System_Luna => "B"
		],
		C_Editor_DecoGenerate => [
			C_System_PC => "Enter",
			C_System_XBox => "A",
			C_System_PS4 => "Cross",
			C_System_PS5 => "Cross",
			C_System_Stadia => "A",
			C_System_Luna => "A"
		],
		C_Editor_DecoValid => [
			C_System_PC => "Space",
			C_System_XBox => "X",
			C_System_PS4 => "Square",
			C_System_PS5 => "Square",
			C_System_Stadia => "X",
			C_System_Luna => "X"
		],
		C_Editor_DecoCancel => [
			C_System_PC => "Del",
			C_System_XBox => "B",
			C_System_PS4 => "Circle",
			C_System_PS5 => "Circle",
			C_System_Stadia => "B",
			C_System_Luna => "B"
		],
		C_Editor_DecoDefault => [
			C_System_PC => "Ctrl",
			C_System_XBox => "Y",
			C_System_PS4 => "Triangle",
			C_System_PS5 => "Triangle",
			C_System_Stadia => "Y",
			C_System_Luna => "Y"
		],
		C_Editor_RosaceLeft => [
			C_System_PC => "",
			C_System_XBox => "LStick",
			C_System_PS4 => "LStick",
			C_System_PS5 => "LStick",
			C_System_Stadia => "LStick",
			C_System_Luna => "LStick"
		],
		C_Editor_RosaceRight => [
			C_System_PC => "",
			C_System_XBox => "RStick",
			C_System_PS4 => "RStick",
			C_System_PS5 => "RStick",
			C_System_Stadia => "RStick",
			C_System_Luna => "RStick"
		],
		C_Editor_RosaceNextFamily => [
			C_System_PC => "End",
			C_System_XBox => "RB",
			C_System_PS4 => "R1",
			C_System_PS5 => "R1",
			C_System_Stadia => "R1",
			C_System_Luna => "RB"
		],
		C_Editor_RosacePrevFamily => [
			C_System_PC => "Home",
			C_System_XBox => "LB",
			C_System_PS4 => "L1",
			C_System_PS5 => "L1",
			C_System_Stadia => "L1",
			C_System_Luna => "LB"
		],
		C_Editor_RosaceNextFilter => [
			C_System_PC => "PgDn",
			C_System_XBox => "RT",
			C_System_PS4 => "R2",
			C_System_PS5 => "R2",
			C_System_Stadia => "R2",
			C_System_Luna => "RT"
		],
		C_Editor_RosacePrevFilter => [
			C_System_PC => "PgUp",
			C_System_XBox => "LT",
			C_System_PS4 => "L2",
			C_System_PS5 => "L2",
			C_System_Stadia => "L2",
			C_System_Luna => "LT"
		],
		C_Editor_RosaceNextMacroblock => [
			C_System_PC => "Right",
			C_System_XBox => "Y",
			C_System_PS4 => "Triangle",
			C_System_PS5 => "Triangle",
			C_System_Stadia => "Y",
			C_System_Luna => "Y"
		],
		C_Editor_RosacePrevMacroblock => [
			C_System_PC => "Left",
			C_System_XBox => "X",
			C_System_PS4 => "Square",
			C_System_PS5 => "Square",
			C_System_Stadia => "X",
			C_System_Luna => "X"
		],
		C_Editor_NextSpawn => [
			C_System_PC => "ArrowRight",
			C_System_XBox => "LStickRight",
			C_System_PS4 => "LStickRight",
			C_System_PS5 => "LStickRight",
			C_System_Stadia => "LStickRight",
			C_System_Luna => "LStickRight"
		],
		C_Editor_PrevSpawn => [
			C_System_PC => "ArrowLeft",
			C_System_XBox => "LStickLeft",
			C_System_PS4 => "LStickLeft",
			C_System_PS5 => "LStickLeft",
			C_System_Stadia => "LStickLeft",
			C_System_Luna => "LStickLeft"
		],
		C_Editor_NextSkin => [
			C_System_PC => "ArrowRight",
			C_System_XBox => "LStickRight",
			C_System_PS4 => "LStickRight",
			C_System_PS5 => "LStickRight",
			C_System_Stadia => "LStickRight",
			C_System_Luna => "LStickRight"
		],
		C_Editor_PrevSkin => [
			C_System_PC => "ArrowLeft",
			C_System_XBox => "LStickLeft",
			C_System_PS4 => "LStickLeft",
			C_System_PS5 => "LStickLeft",
			C_System_Stadia => "LStickLeft",
			C_System_Luna => "LStickLeft"
		],
		C_Editor_BrowseSkins => [
			C_System_PC => "Mouse",
			C_System_XBox => "LStick",
			C_System_PS4 => "LStick",
			C_System_PS5 => "LStick",
			C_System_Stadia => "LStick",
			C_System_Luna => "LStick"
		],
		C_Editor_NextDeco => [
			C_System_PC => "ArrowRight",
			C_System_XBox => "RT",
			C_System_PS4 => "R2",
			C_System_PS5 => "R2",
			C_System_Stadia => "R2",
			C_System_Luna => "RT"
		],
		C_Editor_PrevDeco => [
			C_System_PC => "ArrowLeft",
			C_System_XBox => "LT",
			C_System_PS4 => "L2",
			C_System_PS5 => "L2",
			C_System_Stadia => "L2",
			C_System_Luna => "LT"
		],
		C_Editor_MoreDeco => [
			C_System_PC => "PgUp",
			C_System_XBox => "RB",
			C_System_PS4 => "R1",
			C_System_PS5 => "R1",
			C_System_Stadia => "R1",
			C_System_Luna => "RB"
		],
		C_Editor_LessDeco => [
			C_System_PC => "PgDn",
			C_System_XBox => "LB",
			C_System_PS4 => "L1",
			C_System_PS5 => "L1",
			C_System_Stadia => "L1",
			C_System_Luna => "LB"
		],
		C_Editor_LeaveValidation => [
			C_System_PC => "Esc",
			C_System_XBox => "Menu",
			C_System_PS4 => "Options",
			C_System_PS5 => "Options",
			C_System_Stadia => "Menu",
			C_System_Luna => "Menu"
		],
		C_Editor_TakeThumbnail => [
			C_System_PC => "End",
			C_System_XBox => "DPadUp",
			C_System_PS4 => "DPadUp",
			C_System_PS5 => "DPadUp",
			C_System_Stadia => "DPadUp",
			C_System_Luna => "DPadUp"
		],
		C_Editor_LeftMouseClick => [
			C_System_PC => "LeftClick",
			C_System_XBox => "",
			C_System_PS4 => "",
			C_System_PS5 => "",
			C_System_Stadia => "",
			C_System_Luna => ""
		],
		C_Editor_RightMouseClick => [
			C_System_PC => "RightClick",
			C_System_XBox => "",
			C_System_PS4 => "",
			C_System_PS5 => "",
			C_System_Stadia => "",
			C_System_Luna => ""
		]
	];
}