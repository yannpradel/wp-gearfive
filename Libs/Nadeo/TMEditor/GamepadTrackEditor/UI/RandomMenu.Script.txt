/**
 * Random generator menu UI
 */

#Const Version		"1.0.0"
#Const ScriptName	"RandomMenu.Script.txt"

#Include "Libs/Nadeo/CMGame/Modes/Legacy/Manialink3.Script.txt" as Manialink
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/Sound.Script.txt" as Sound
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Stylesheet.Script.txt" as Styles

// Constants
#Const C_DefaultVisibility	False	///< Default visibility
// Selection
#Const C_Selection_Null		0
#Const C_Selection_Back		1
#Const C_Selection_Restart	2
#Const C_Selection_Quit		3

#Const C_Selection [1, 2, 3]
/// Events
#Const C_Event_Hover	"LibRandomMenu_Hover"
#Const C_Event_Click	"LibRandomMenu_Click"

Text Private_GetMenuML() {
	declare MenuSizeX = 25.;
	declare MenuPosY = 4.;
	declare OptionSizeY = Styles::GetPosition2(<0., 1., 0.>, Styles::CircleSize_Bottom()).Y;

	// TODO Note RBVDZ 2022-10-03: this UI can't show up until we add RandomGenerator. When doing so, make sure header uses BuildSmartQuad
	return """
<manialink version="3" name="MapEditor:RandomMenu">
<stylesheet>
	{{{Styles::Get()}}}
</stylesheet>
<frame z-index="5" id="Frame_Global">
	<quad z-index="0" opacity="0" hidden="1" pos="-160 90" size="320 180" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" id="Quad_ScreenOverlay" />
	<frame pos="0 -92" z-index="1" hidden="1" id="Frame_Menu">
		<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<-MenuSizeX*0.5, 0., 0.>, Styles::CircleSize_Bottom()))}}}>
			{{{Styles::BuildLabel(<-0.4, -1.3, 2.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
				//L16N [MapEditor] Title of the Random Track Generator menu where the player can manage their track
				"text" => _("Random Generator Paused"), "class" => "tm2020-text-menu-big"
			])}}}
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -2., 3.>, Styles::CircleSize_Bottom()))}}} id="Frame_Buttons">

				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., 0., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Back}}}">
					{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "opacity" => "0.6", "scriptevents" => "1", "id" => "Quad_Button"])}}}
					{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
						//L16N [MapEditor] Close the menu, proceed with generating the track
						"text" => _("Resume generation"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.6"
					])}}}
				</frame>
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -1., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Restart}}}">
					{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "opacity" => "0.6", "scriptevents" => "1", "id" => "Quad_Button"])}}}
					{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
						//L16N [MapEditor] Restart track random generation
						"text" => _("Restart generation"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.6"
					])}}}
				</frame>
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -2., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Quit}}}">
					{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "opacity" => "0.6", "scriptevents" => "1", "id" => "Quad_Button"])}}}
					{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
						"text" => _("|Infinitive - Quit game mode|Leave editor"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.6"
					])}}}
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "AnimLib" as AL
#Include "ColorLib" as CL
{{{Manialink::DefaultIncludes()}}}


declare Integer[] G_Selectables;
declare CMlQuad G_QuadSelected;

{{{Manialink::Animations(["EaseOutQuad"])}}}

Void InitSelectables() {
	G_Selectables.clear();
	declare Frame_Buttons <=> (Page.GetFirstChild("Frame_Buttons") as CMlFrame);
	foreach (Control in Frame_Buttons.Controls) {
		declare Value for Control = -1;
		Value = TL::ToInteger(Control.DataAttributeGet("value"));
		G_Selectables.add(Value);

		declare Frame_Button <=> (Control as CMlFrame);
		declare Quad_Button <=> (Frame_Button.GetFirstChild("Quad_Button") as CMlQuad);
		declare ItemKey for Quad_Button = -1;
		ItemKey = Value;
	}
}

Void SelectButton(Integer _Selected) {
	declare Frame_Buttons <=> (Page.GetFirstChild("Frame_Buttons") as CMlFrame);
	foreach (Control in Frame_Buttons.Controls) {
		declare Frame_Button <=> (Control as CMlFrame);
		declare Quad_Button <=> (Frame_Button.GetFirstChild("Quad_Button") as CMlQuad);
		declare Label_Button <=> (Frame_Button.GetFirstChild("Label_Button") as CMlLabel);
		declare Value for Frame_Button = -1;
		declare WasSelected for Frame_Button = False;
		if (Value == _Selected && !WasSelected) {
			G_QuadSelected <=> Quad_Button;
			WasSelected = True;

			LibManialink_Anim(Quad_Button, {{{Manialink::Inject("""<quad opacity="1"/>""")}}}, 25, "EaseOutQuad");
			LibManialink_Anim(Label_Button, {{{Manialink::Inject("""<label opacity="1" />""")}}}, 25, "EaseOutQuad");
		} else if (Value != _Selected && WasSelected) {
			WasSelected = False;
			LibManialink_Anim(Quad_Button, {{{Manialink::Inject("""<quad opacity=".6"/>""")}}}, 25, "EaseOutQuad");
			LibManialink_Anim(Label_Button, {{{Manialink::Inject("""<label opacity=".6" />""")}}}, 25, "EaseOutQuad");
		}
	}
}

Void UpdateSelection(Integer[] _Selection) {
	declare Frame_Buttons <=> (Page.GetFirstChild("Frame_Buttons") as CMlFrame);
	declare Shift = 0;
	foreach (Control in Frame_Buttons.Controls) {
		declare Value for Control = -1;
		if (_Selection.exists(Value)) {
			Control.Visible = True;
			Control.RelativePosition_V3.Y = Shift * {{{OptionSizeY}}};
			Shift -= 1;
		} else {
			Control.Visible = False;
		}
	}
}

Void SetVisibility(Boolean _Visible) {
	if (_Visible) {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 {{{Styles::GetSize2(<0., MenuPosY>, Styles::CircleSize_Bottom()).Y}}}" hidden="0" id="Frame_Menu" />""")}}}, 250, "EaseOutQuad");
		LibManialink_Anim({{{Manialink::Inject("""<frame opacity="0.6" hidden="0" id="Quad_ScreenOverlay" />""")}}}, 500, "EaseOutQuad");
	} else {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 -92" hidden="1" id="Frame_Menu" />""")}}}, 250, "EaseOutQuad");
		LibManialink_Anim({{{Manialink::Inject("""<frame opacity="0" hidden="1" id="Quad_ScreenOverlay" />""")}}}, 500, "EaseOutQuad");
	}
}

main() {
	declare L_Visibility for Page = {{{C_DefaultVisibility}}};
	declare L_SelectedUpdate for Page = -1;
	declare L_Selected for Page = -1;
	declare L_Selection for Page = {{{C_Selection}}};
	declare L_SelectionUpdate for Page = -1;

	declare PrevVisibility = {{{C_DefaultVisibility}}};
	declare PrevSelectedUpdate = -1;
	declare PrevSelectionUpdate = -1;

	G_Selectables.clear();

	InitSelectables();

	declare AnimDir = 1;
	declare AnimStartTime = Now;
	declare AnimDuration = 350;
	declare VisibleStartTime = Now;

	while (True) {
		yield;

		LibManialink_AnimLoop();

		if (PrevVisibility != L_Visibility) {
			PrevVisibility = L_Visibility;
			SetVisibility(L_Visibility);
			VisibleStartTime = Now;
		}

		if (PrevSelectionUpdate != L_SelectionUpdate) {
			PrevSelectionUpdate = L_SelectionUpdate;
			UpdateSelection(L_Selection);
		}

		if (PrevSelectedUpdate != L_SelectedUpdate) {
			PrevSelectedUpdate = L_SelectedUpdate;
			SelectButton(L_Selected);

			AnimDir = 1;
			AnimStartTime = Now;
		}

		if (Now > (VisibleStartTime + AnimDuration)) { // don't check for hovers while menu is popping up
			foreach (Event in PendingEvents) {
				if (Event.Type == CMlScriptEvent::Type::MouseOver) {
					if (Event.Control != Null && Event.ControlId == "Quad_Button") {
						declare ItemKey for Event.Control = -1;
						SendCustomEvent("{{{C_Event_Hover}}}", [TL::ToText(ItemKey)]);
					}
				} else if (Event.Type == CMlScriptEvent::Type::MouseClick) {
					if (Event.Control != Null && Event.ControlId == "Quad_Button") {
						declare ItemKey for Event.Control = -1;
						SendCustomEvent("{{{C_Event_Click}}}", [TL::ToText(ItemKey)]);
					}
				}
			}
		}

		if (L_Visibility && G_QuadSelected != Null) {
			G_QuadSelected.Opacity = 1.;
		}
	}
}
--></script>
</manialink>
""";
}

Text GetScriptVersion() { return Version; }
Text GetScriptName() { return ScriptName; }

// ---------------------------------- //
/// Get the events constants
Text Event_Hover() { return C_Event_Hover; }
Text Event_Click() { return C_Event_Click; }

// ---------------------------------- //
/// Get the selection constants
Integer Selection_Null() { return C_Selection_Null; }
Integer Selection_Restart() { return C_Selection_Restart; }
Integer Selection_Quit() { return C_Selection_Quit; }
Integer Selection_Back() { return C_Selection_Back; }

// Select a button in the menu
Void Select(Integer _Selection, Boolean _PlaySound) {
	declare Page <=> Layers::GetPage("RandomMenu");
	declare L_Selection for Page = C_Selection;
	if (!L_Selection.exists(_Selection)) return;

	declare L_SelectedUpdate for Page = -1;
	declare L_Selected for Page = C_Selection_Null;
	L_Selected = _Selection;
	L_SelectedUpdate = Now;

	if (_PlaySound) Sound::Play("EditorMenuMove");
}

// ---------------------------------- //
/// Overload Select()
Void Select(Integer _Selection) {
	Select(_Selection, False);
}

// Select the next or the previous button in the menu
Void Shift(Integer _Shift) {
	declare Page <=> Layers::GetPage("RandomMenu");
	declare L_Selection for Page = C_Selection;
	declare L_SelectedUpdate for Page = -1;
	declare L_Selected for Page = C_Selection_Null;
	declare Key = L_Selection.keyof(L_Selected);
	if (Key < 0) Key = 0;

	Key += _Shift;
	if (Key < 0) Key = L_Selection.count - 1;
	else if (Key > L_Selection.count - 1) Key = 0;

	L_Selected = L_Selection[Key];
	L_SelectedUpdate = Now;
}

Void Next() {
	Sound::Play("EditorMenuMove");
	Shift(1);
}

Void Prev() {
	Sound::Play("EditorMenuMove");
	Shift(-1);
}

Void SetOptions(Integer[] _Options) {
	if (_Options.count <= 0) return;

	declare Page <=> Layers::GetPage("RandomMenu");
	declare L_SelectionUpdate for Page = -1;
	declare L_Selection for Page = C_Selection;

	L_Selection.clear();
	foreach (Option in C_Selection) {
		if (_Options.exists(Option)) L_Selection.add(Option);
	}
	if (L_Selection.count <= 0) L_Selection = C_Selection;

	L_SelectionUpdate = Now;

	// Check that the selection option still exists
	Shift(0);
}

// Check if the menu is visible
Boolean LayerIsVisible() {
	declare Page <=> Layers::GetPage("RandomMenu");
	declare L_Visibility for Page = C_DefaultVisibility;
	return L_Visibility;
}

// Set the menu visibility
Void SetVisibility(Boolean _Visible) {
	declare Page <=> Layers::GetPage("RandomMenu");
	declare L_Visibility for Page = C_DefaultVisibility;

	if (_Visible && !L_Visibility) {
		Select(C_Selection_Back);
	}

	L_Visibility = _Visible;
}

Void Show() {
	SetVisibility(True);
}

Void Hide() {
	SetVisibility(False);
}

Void Toggle() {
	declare Page <=> Layers::GetPage("RandomMenu");
	declare L_Visibility for Page = C_DefaultVisibility;

	SetVisibility(!L_Visibility);
}

// Validate the current selection
Integer Valid() {
	declare Page <=> Layers::GetPage("RandomMenu");
	declare L_Selected for Page = C_Selection_Null;

	Sound::Play("EditorMenuValid");
	if (C_Selection.exists(L_Selected)) return L_Selected;
	return C_Selection_Null;
}

Void Unload() {
	Layers::Destroy("RandomMenu");
}

Void Load() {
	Unload();

	declare LayerRandomMenu <=> Layers::Create("RandomMenu");
	LayerRandomMenu.ManialinkPage = Private_GetMenuML();

	declare Page <=> LayerRandomMenu.LocalPage;
	declare L_Visibility for Page = C_DefaultVisibility;
	declare L_Selected for Page = C_Selection_Null;
	declare L_SelectedUpdate for Page = -1;
	declare L_Selection for Page = C_Selection;
	declare L_SelectionUpdate for Page = -1;
	L_Visibility = C_DefaultVisibility;
	L_Selected = C_Selection_Null;
	L_SelectedUpdate = -1;
	L_Selection = C_Selection;
	L_SelectionUpdate = -1;

	Hide();
}