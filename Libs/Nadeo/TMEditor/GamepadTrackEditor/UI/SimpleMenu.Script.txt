/**
 * Simple menu UI
 */

#Const Version		"1.0.0"
#Const ScriptName	"SimpleMenu.Script.txt"

#Include "Libs/Nadeo/CMGame/Modes/Legacy/Manialink3.Script.txt" as Manialink
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/Sound.Script.txt" as Sound
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Stylesheet.Script.txt" as Styles

// Constants
#Const C_DefaultVisibility	False	///< Default visibility
// Selection
#Const C_Selection_Null			0
#Const C_Selection_AutoFinish	1
#Const C_Selection_Test			2
#Const C_Selection_Shadows	3
#Const C_Selection_Save			4
#Const C_Selection_SaveAs		5
#Const C_Selection_New			6
#Const C_Selection_Tuto			7
#Const C_Selection_Back			8
#Const C_Selection_Quit			9
/// Events
#Const C_Event_Hover	"LibSimpleMenu_Hover"
#Const C_Event_Click	"LibSimpleMenu_Click"

// Globales
declare Boolean G_DisplayAutoFinish;
declare Integer[] G_Selection;

Text Private_GetSimpleMenuML() {
	declare OptionsCount = 7;
	declare Options = "";
	declare Disabled = "";
	declare MenuSizeX = 36.;
	declare MenuSizeY = OptionsCount + 2.;
	declare MenuPosY = 9.;

	declare Shift = 0.;

	if (G_DisplayAutoFinish) {
		Options = """
<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., Shift, 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_AutoFinish}}}">
	{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "opacity" => "0.6", "scriptevents" => "1", "id" => "Quad_Button"])}}}
	{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
		//L16N [MapEditor] Start the auto-finish function. It's a function that tries to place a finish line in the player track automatically.
		"text" => _("Auto-finish"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.6"
	])}}}
</frame>
""";
	} else {
		Disabled = """
<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., Shift, 0.>, Styles::CircleSize_Bottom()))}}}>
	{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "id" => "Quad_Button", "opacity" =>"0.6"])}}}
	{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
		//L16N [MapEditor] Start the auto-finish function. It's a function that tries to place a finish line in the player track automatically.
		"text" => _("Auto-finish"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.4", "textcolor" => "808080"
	])}}}
</frame>
""";
	}


	Options ^="""
	<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., Shift-1., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Test}}}">
		{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "opacity" => "0.6", "scriptevents" => "1", "id" => "Quad_Button"])}}}
		{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
			"text" => _("|Infinitive - Try track|Test"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.6"
		])}}}
	</frame>
	<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., Shift-2., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Shadows}}}">
		{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "opacity" => "0.6", "scriptevents" => "1", "id" => "Quad_Button"])}}}
		{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
			//L16N [MapEditor] Start a lightmap calculation
			"text" => _("Calculate Shadows"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.6"
		])}}}
	</frame>
	<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., Shift-3., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Save}}}">
		{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "opacity" => "0.6", "scriptevents" => "1", "id" => "Quad_Button"])}}}
		{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
			//L16N [MapEditor] Save the track.
			"text" => _("Save"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.6"
		])}}}
	</frame>
	<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., Shift-4., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_SaveAs}}}">
		{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "opacity" => "0.6", "scriptevents" => "1", "id" => "Quad_Button"])}}}
		{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
			//L16N [MapEditor] Save the track in a new file
			"text" => _("Save as new"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.6"
		])}}}
	</frame>
	<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., Shift-5., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_New}}}">
		{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "opacity" => "0.6", "scriptevents" => "1", "id" => "Quad_Button"])}}}
		{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
			//L16N [MapEditor] Create a new track
			"text" => _("New track"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.6"
		])}}}
	</frame>
	""";
	Shift -= 5.;

	Options ^= """
<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., Shift-1., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Tuto}}}">
	{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "opacity" => "0.6", "scriptevents" => "1", "id" => "Quad_Button"])}}}
	{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
		//L16N [MapEditor] Reset the tutorial progression and restart from the beginning
		"text" => _("See tutorial again"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.6"
	])}}}
</frame>
<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., Shift-2., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Back}}}">
	{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "opacity" => "0.6", "scriptevents" => "1", "id" => "Quad_Button"])}}}
	{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
		//L16N [MapEditor] Close the menu
		"text" => _("Back"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.6"
	])}}}
</frame>
<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., Shift-3., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Quit}}}">
	{{{Styles::BuildQuad(<0., 0., 0.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "opacity" => "0.6", "scriptevents" => "1", "id" => "Quad_Button"])}}}
	{{{Styles::BuildLabel(<0.7, -0.55, 1.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
		//L16N [MapEditor] Leave the track editor
		"text" => _("Quit"), "class" => "tm2020-text-menubutton", "id" => "Label_Button", "opacity" => "0.6"
	])}}}
</frame>
""";

	return """
<manialink version="3" name="MapEditor:SimpleMenu">
<stylesheet>
	{{{Styles::Get()}}}
</stylesheet>
<frame z-index="10" id="Frame_Global">
	<quad z-index="0" opacity="0" hidden="1" pos="-160 90" size="320 180" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" id="Quad_ScreenOverlay" />
	<frame pos="0 -92" z-index="2" hidden="1" id="Frame_SimpleMenu">
		<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<-MenuSizeX*0.5, 0., 0.>, Styles::CircleSize_Bottom()))}}}>
			{{{Styles::BuildLabel(<-0.4, -1.3, 2.>, <MenuSizeX, 1.1>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
				//L16N [MapEditor] Title of the menu where the player can manage their track
				"text" => _("Manage track"), "class" => "tm2020-text-menu-big"
			])}}}
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -2., 3.>, Styles::CircleSize_Bottom()))}}}>
				{{{Disabled}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -2., 4.>, Styles::CircleSize_Bottom()))}}} id="Frame_Buttons">
				{{{Options}}}
			</frame>
		</frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "AnimLib" as AL
#Include "ColorLib" as CL
{{{Manialink::DefaultIncludes()}}}

declare Integer[] G_Selectables;
declare CMlQuad G_QuadSelected;

{{{Manialink::Animations(["EaseOutQuad"])}}}

Void InitSelectables() {
	G_Selectables.clear();
	declare Frame_Buttons <=> (Page.GetFirstChild("Frame_Buttons") as CMlFrame);
	foreach (Control in Frame_Buttons.Controls) {
		declare Value for Control = -1;
		Value = TL::ToInteger(Control.DataAttributeGet("value"));
		G_Selectables.add(Value);

		declare Frame_Button <=> (Control as CMlFrame);
		declare Quad_Button <=> (Frame_Button.GetFirstChild("Quad_Button") as CMlQuad);
		declare ItemKey for Quad_Button = -1;
		ItemKey = Value;
	}
}

Void SelectButton(Integer _Selected) {
	declare Frame_Buttons <=> (Page.GetFirstChild("Frame_Buttons") as CMlFrame);
	foreach (Control in Frame_Buttons.Controls) {
		declare Frame_Button <=> (Control as CMlFrame);
		declare Quad_Button <=> (Frame_Button.GetFirstChild("Quad_Button") as CMlQuad);
		declare Label_Button <=> (Frame_Button.GetFirstChild("Label_Button") as CMlLabel);
		declare Value for Frame_Button = -1;
		declare WasSelected for Frame_Button = False;
		if (Value == _Selected && !WasSelected) {
			G_QuadSelected <=> Quad_Button;
			WasSelected = True;

			LibManialink_Anim(Quad_Button, {{{Manialink::Inject("""<quad opacity="1"/>""")}}}, 25, "EaseOutQuad");
			LibManialink_Anim(Label_Button, {{{Manialink::Inject("""<label opacity="1" />""")}}}, 25, "EaseOutQuad");
		} else if (Value != _Selected && WasSelected) {
			WasSelected = False;
			LibManialink_Anim(Quad_Button, {{{Manialink::Inject("""<quad opacity=".6"/>""")}}}, 25, "EaseOutQuad");
			LibManialink_Anim(Label_Button, {{{Manialink::Inject("""<label opacity=".6" />""")}}}, 25, "EaseOutQuad");
		}
	}
}

Void SetVisibility(Boolean _Visible) {
	if (_Visible) {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 {{{Styles::GetSize2(<0., MenuPosY>, Styles::CircleSize_Bottom()).Y}}}" hidden="0" id="Frame_SimpleMenu" />""")}}}, 250, "EaseOutQuad");
		LibManialink_Anim({{{Manialink::Inject("""<frame opacity="0.6" hidden="0" id="Quad_ScreenOverlay" />""")}}}, 500, "EaseOutQuad");
	} else {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 -92" hidden="1" id="Frame_SimpleMenu" />""")}}}, 250, "EaseOutQuad");
		LibManialink_Anim({{{Manialink::Inject("""<frame opacity="0" hidden="1" id="Quad_ScreenOverlay" />""")}}}, 500, "EaseOutQuad");
	}
}

main() {
	declare L_Visibility for Page = {{{C_DefaultVisibility}}};
	declare L_SelectedUpdate for Page = -1;
	declare L_Selected for Page = -1;

	declare PrevVisibility = {{{C_DefaultVisibility}}};
	declare PrevSelectedUpdate = -1;

	G_Selectables.clear();

	// Fix
	declare CMlControl[] LibManialink_Anims for Page;
	LibManialink_Anims.clear();

	InitSelectables();

	declare AnimDir = 1;
	declare AnimStartTime = Now;
	declare AnimDuration = 350;

	while (True) {
		yield;

		LibManialink_AnimLoop();

		if (PrevVisibility != L_Visibility) {
			PrevVisibility = L_Visibility;
			SetVisibility(L_Visibility);
		}

		if (PrevSelectedUpdate != L_SelectedUpdate) {
			PrevSelectedUpdate = L_SelectedUpdate;
			SelectButton(L_Selected);

			AnimDir = 1;
			AnimStartTime = Now;
		}


		foreach (Event in PendingEvents) {
			if (Event.Type == CMlScriptEvent::Type::MouseOver) {
				if (Event.Control != Null && Event.ControlId == "Quad_Button") {
					declare ItemKey for Event.Control = -1;
					SendCustomEvent("{{{C_Event_Hover}}}", [TL::ToText(ItemKey)]);
				}
			} else if (Event.Type == CMlScriptEvent::Type::MouseClick) {
				if (Event.Control != Null && Event.ControlId == "Quad_Button") {
					declare ItemKey for Event.Control = -1;
					SendCustomEvent("{{{C_Event_Click}}}", [TL::ToText(ItemKey)]);
				}
			}
		}

		if (L_Visibility && G_QuadSelected != Null) {
			G_QuadSelected.Opacity = 1.;
		}
	}
}
--></script>
</manialink>
""";
}

Text GetScriptVersion() { return Version; }
Text GetScriptName() { return ScriptName; }

/// Get the events constants
Text Event_Hover() { return C_Event_Hover; }
Text Event_Click() { return C_Event_Click; }

/// Get the selection constants
Integer Selection_AutoFinish() { return C_Selection_AutoFinish; }
Integer Selection_Test() { return C_Selection_Test; }
Integer Selection_Shadows() { return C_Selection_Shadows; }
Integer Selection_Save() { return C_Selection_Save; }
Integer Selection_SaveAs() { return C_Selection_SaveAs; }
Integer Selection_New() { return C_Selection_New; }
Integer Selection_Tuto() { return C_Selection_Tuto; }
Integer Selection_Quit() { return C_Selection_Quit; }
Integer Selection_Back() { return C_Selection_Back; }

// Select a button in the simple menu
Void Select(Integer _Selection, Boolean _PlaySound) {
	if (!G_Selection.exists(_Selection)) return;

	declare Page <=> Layers::GetPage("SimpleMenu");
	declare L_SelectedUpdate for Page = -1;
	declare L_Selected for Page = C_Selection_Null;
	L_Selected = _Selection;
	L_SelectedUpdate = Now;

	if (_PlaySound) Sound::Play("EditorMenuMove");
}

/// Overload Select()
Void Select(Integer _Selection) {
	Select(_Selection, False);
}

// Select the next or the previous button in the simple menu
Void Shift(Integer _Shift) {
	declare Page <=> Layers::GetPage("SimpleMenu");
	declare L_SelectedUpdate for Page = -1;
	declare L_Selected for Page = C_Selection_Null;
	declare Key = G_Selection.keyof(L_Selected);
	if (Key < 0) Key = 0;

	Key += _Shift;
	if (Key < 0) Key = G_Selection.count - 1;
	else if (Key > G_Selection.count - 1) Key = 0;

	L_Selected = G_Selection[Key];
	L_SelectedUpdate = Now;
}

/// Go to the next entry in the simple menu
Void Next() {
	Sound::Play("EditorMenuMove");
	Shift(1);
}

/// Go to the previous entry in the simple menu
Void Prev() {
	Sound::Play("EditorMenuMove");
	Shift(-1);
}

// Check if the simple menu is visible
Boolean LayerIsVisible() {
	declare Page <=> Layers::GetPage("SimpleMenu");
	declare L_Visibility for Page = C_DefaultVisibility;
	return L_Visibility;
}

// Set the simple menu visibility
Void SetVisibility(Boolean _Visible) {
	declare Page <=> Layers::GetPage("SimpleMenu");
	declare L_Visibility for Page = C_DefaultVisibility;

	if (_Visible && !L_Visibility) {
		Select(C_Selection_Test);
	}

	L_Visibility = _Visible;
}

Void Show() {
	SetVisibility(True);
}

Void Hide() {
	SetVisibility(False);
}

// Validate the current selection
Integer Valid() {
	declare Page <=> Layers::GetPage("SimpleMenu");
	declare L_Selected for Page = C_Selection_Null;

	Sound::Play("EditorMenuValid");
	if (G_Selection.exists(L_Selected)) return L_Selected;
	return C_Selection_Null;
}

// Display or not the auto-finish option
Void DisplayAutoFinish(Boolean _DisplayAutoFinish) {
	if (_DisplayAutoFinish == G_DisplayAutoFinish) return;

	G_DisplayAutoFinish = _DisplayAutoFinish;

	if (G_DisplayAutoFinish) G_Selection = [C_Selection_AutoFinish, C_Selection_Test, C_Selection_Shadows, C_Selection_Save, C_Selection_SaveAs, C_Selection_New, C_Selection_Tuto, C_Selection_Back, C_Selection_Quit];
	else G_Selection = [C_Selection_Test, C_Selection_Shadows, C_Selection_Save, C_Selection_SaveAs, C_Selection_New, C_Selection_Tuto, C_Selection_Back, C_Selection_Quit];

	declare LayerSimpleMenu <=> Layers::Get("SimpleMenu");
	LayerSimpleMenu.ManialinkPage = Private_GetSimpleMenuML();
}

Void Unload() {
	Layers::Destroy("SimpleMenu");

	G_DisplayAutoFinish = False;
	G_Selection = [C_Selection_Test, C_Selection_Shadows, C_Selection_Save, C_Selection_SaveAs, C_Selection_New, C_Selection_Tuto, C_Selection_Back, C_Selection_Quit];
}

Void Load() {
	Unload();

	declare LayerSimpleMenu <=> Layers::Create("SimpleMenu");
	LayerSimpleMenu.ManialinkPage = Private_GetSimpleMenuML();

	declare Page <=> LayerSimpleMenu.LocalPage;
	declare L_Visibility for Page = C_DefaultVisibility;
	declare L_Selected for Page = C_Selection_Null;
	declare L_SelectedUpdate for Page = -1;
	L_Visibility = C_DefaultVisibility;
	L_Selected = C_Selection_Null;
	L_SelectedUpdate = -1;

	Hide();
}