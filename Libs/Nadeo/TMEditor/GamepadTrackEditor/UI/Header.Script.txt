/**
 * Header UI
 */

#Const Version		"1.0.0"
#Const ScriptName	"Header.Script.txt"

#Include "Libs/Nadeo/CMGame/Modes/Legacy/Manialink3.Script.txt" as Manialink
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/Legacy/Buttons.Script.txt" as Buttons2
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/Legacy/MLEffects.Script.txt" as MLE
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Stylesheet.Script.txt" as Styles

#Const C_MaxModes	3
/// Title bar statuses
#Const C_Status_Message	0
#Const C_Status_Alert	1
#Const C_Status_Error	2
#Const C_Status_AuthorTime 3
/// Editor levels
#Const C_Editor_Random		0
#Const C_Editor_Beginner	1
#Const C_Editor_Advanced	2
#Const C_Editor_Expert		3
/// Events
#Const C_Event_SwitchMode	"LibUIHeader_SwitchMode"
#Const C_Event_SelectMode	"LibUIHeader_SelectMode"
#Const C_Event_ToggleAirMode	"LibUIHeader_ToggleAirMode"
//#Const C_Event_ToggleGhostMode	"LibUIHeader_ToggleGhostMode"
#Const C_Event_ToggleColor	"LibUIHeader_ToggleColor"

#Const C_Default_HeaderSize <154., 6.38>

Text Private_GetHeaderML() {
	declare TitleSizeX = 14.;
	declare TitleMargin = 2.;


	declare ModeButton = Buttons2::Editor_BuildMode();
	declare ToggleAirMode = Buttons2::Editor_PlaceBlock();
	//declare ToggleGhostMode = Buttons2::Editor_RemoveBlock();
	declare ToggleColor = Buttons2::Editor_OpenTest();
	declare ButtonSize = 0.95;
	declare AuthorSizeX = Styles::GetSize2(<36., 0.>, Styles::CircleSize_Bottom()).X; // Same size X as progression UI

	declare ImgHeaderRight = "file://Media/Manialinks/Nadeo/TMEditor/GamepadTrackEditor/Images/Menu/TrackEditor_Header_Right.dds";

	declare InteractionPos = Styles::BuildPosition2(Styles::GetPosition2(<-TitleMargin, -0.1, -1.>, Styles::CircleSize_Bottom()));
	declare InteractionSize = Styles::BuildSize2(Styles::GetSize2(<15., 0.9>, Styles::CircleSize_Bottom())); // X will be set automatically

	declare ImgSlantedUrl = "file://Media/Manialinks/Nadeo/TMEditor/GamepadTrackEditor/Images/Menu/TrackEditor_Helper_Right.dds";
	declare ImgSlantedPos = Styles::BuildPosition2(Styles::GetPosition2(<15., -0.1, -1.>, Styles::CircleSize_Bottom()));
	declare ImgSlantedSize = Styles::BuildSize2(Styles::GetSize2(<1., 0.9>, Styles::CircleSize_Bottom()));

	// To add ghost mode, paste this below Frame_AirMode. Currently a little bit buggy so dev only
						/*<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -2., 2.>, Styles::CircleSize_Bottom()))}}} id="Frame_GhostMode">
							{{{Styles::BuildLabel(<0., 0.05, 2.>, <10., 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter(), ["class" => "tm2020-text-experttoggle", "id" => "Label_GhostMode", "text" => _("|Track editor, mapping without collisions|Ghost Mode")])}}}
							{{{Styles::BuildQuad(<6., -0.03, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter(), ["id" => "Quad_Checkbox_GhostMode", "image" => Icons::C_Icon_128x128_Checkbox_Inactive_Square, "colorize" => Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)])}}}
							{{{Styles::BuildButton(ToggleGhostMode, <7., -0.03, 1.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter(), ["id" => "Quad_GhostMode_ButtonHelper"])}}}

						<quad {{{InteractionPos}}} {{{InteractionSize}}} id="Quad_GhostMode_Interaction" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" halign="left" valign="center" keepratio="fit" scriptevents="1" />
						<quad {{{ImgSlantedPos}}} {{{ImgSlantedSize}}} image="{{{ImgSlantedUrl}}}" id="Quad_GhostMode_ImgSlanted" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" halign="left" valign="center" keepratio="fit" scriptevents="1" />
						</frame>*/

	return """
<manialink version="3" name="MapEditor:Header">
<stylesheet>
	{{{Styles::Get()}}}
</stylesheet>
<frame z-index="12" id="Frame_Global">
	<frame pos="{{{-Styles::GetSize2(<TitleSizeX+TitleMargin, 0.>, Styles::CircleSize_Top()).X}}} {{{Styles::Margin_Top()}}}" hidden="1" id="Frame_Info">
		<quad pos="0 -1" size="66 14" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" id="Quad_HeaderBg"/>
		<quad pos="66 -1" size="8.52 14" image="{{{ImgHeaderRight}}}" id="Quad_ImageHeaderRight" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" halign="left" keepratio="fit"/>
		<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<1., 0., 2.>, Styles::CircleSize_Top()))}}}>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -1., 3.>, Styles::CircleSize_Top()))}}} id="Frame_Editor">
				{{{Styles::BuildLabel(<0., 0., 0.>, <100., 2.>, Styles::CircleSize_Top(), Styles::Align_LeftCenter2(), ["class" => "tm2020-text-title-big", "id" => "Label_Editor"])}}}

				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -2.2, 2.>, Styles::CircleSize_Bottom()))}}} id="Frame_Expert">
					<frame id="Frame_2_Modes">
						{{{Styles::BuildLabel(<0., 0.05, 2.>, <10., 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter(), ["class" => "tm2020-text-experttoggle", "id" => "Label_2Modes1"])}}}
						{{{Styles::BuildQuad(<4., -0.03, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter(), ["id" => "Quad_2Modes_Toggle", "image" => Icons::C_Icon_128x128_SwitchOn, "colorize" => Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)])}}}
						{{{Styles::BuildLabel(<5., 0.05, 2.>, <10., 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter(), ["class" => "tm2020-text-experttoggle", "id" => "Label_2Modes2"])}}}
						{{{Styles::BuildButton(ModeButton, <10., -0.03, 1.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter(), ["id" => "Quad_2Modes_ButtonHelper"])}}}

						<quad {{{InteractionPos}}} {{{InteractionSize}}} id="Quad_2Modes_Interaction" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" halign="left" valign="center" keepratio="fit" scriptevents="1" />

						<quad {{{ImgSlantedPos}}} {{{ImgSlantedSize}}} image="{{{ImgSlantedUrl}}}" id="Quad_2Modes_ImgSlanted" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" halign="left" valign="center" keepratio="fit" scriptevents="1" />
					</frame>

					<frame id="Frame_AirAndGhostMode">
						<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -1., 2.>, Styles::CircleSize_Bottom()))}}} id="Frame_AirMode">
							{{{Styles::BuildLabel(<0., 0.05, 2.>, <10., 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter(), ["class" => "tm2020-text-experttoggle", "id" => "Label_AirMode", "text" => _("|Track editor, mapping without pillars|Air Mode")])}}}
							{{{Styles::BuildQuad(<5., -0.03, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter(), ["id" => "Quad_Checkbox_AirMode", "image" => Icons::C_Icon_128x128_Checkbox_Inactive_Square, "colorize" => Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)])}}}
							{{{Styles::BuildButton(ToggleAirMode, <6., -0.03, 1.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter(), ["id" => "Quad_AirMode_ButtonHelper"])}}}

						<quad {{{InteractionPos}}} {{{InteractionSize}}} id="Quad_AirMode_Interaction" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" halign="left" valign="center" keepratio="fit" scriptevents="1" />
						<quad {{{ImgSlantedPos}}} {{{ImgSlantedSize}}} image="{{{ImgSlantedUrl}}}" id="Quad_AirMode_ImgSlanted" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" halign="left" valign="center" keepratio="fit"  scriptevents="1" />
						</frame>
					</frame>
				</frame>
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -1.3, 3.>, Styles::CircleSize_Top()))}}} hidden="1" id="Frame_Limit">
				{{{Styles::BuildLabel(<0., 0., 0.>, <TitleSizeX, 1.>, Styles::CircleSize_Top(), Styles::Align_LeftTop(), ["class" => "tm2020-text-copperlimit", "id" => "Label_Limit"])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -3.2, 2.>, Styles::CircleSize_Bottom()))}}} hidden="1" id="Frame_Color">
				{{{Styles::BuildLabel(<0., 0.05, 2.>, <10., 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter(), ["class" => "tm2020-text-experttoggle", "id" => "Label_Color", "text" => _("|Track editor, button to change block colors|Color")])}}}

				{{{Styles::BuildButton(ToggleColor, <7., -0.03, 1.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter(), ["id" => "Quad_Color_ButtonHelper"])}}}

				<quad {{{InteractionPos}}} {{{InteractionSize}}} id="Quad_Color_Interaction" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" halign="left" valign="center" keepratio="fit" scriptevents="1" />
				<quad {{{ImgSlantedPos}}} {{{ImgSlantedSize}}} image="{{{ImgSlantedUrl}}}" id="Quad_Color_ImgSlanted" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" halign="left" valign="center" keepratio="fit" scriptevents="1" />
			</frame>
		</frame>
	</frame>
	<frame pos="0 -92" hidden="1" id="Frame_Header">
		<frame z-index="1" id="Frame_Message">
			{{{Styles::BuildSmartQuad(<0., -(C_Default_HeaderSize.Y * 0.5), 0.>, C_Default_HeaderSize.Y, -0.6, _("|Infinitive|Build your track"), Styles::C_Img_TitleLeft, Styles::C_Img_TitleRight, "", False, "tm2020-text-header", Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "SmartQuad_Header")}}}
		</frame>
	</frame>
	<frame pos="38.23 -92" hidden="1" id="Frame_AuthorTime">
		<label pos="0 -4." size="150 6" z-index="1" halign="center" id="Label_AuthorTime" class="tm2020-text-authortime"/>
		<quad pos="0 0" size="{{{AuthorSizeX}}} {{{C_Default_HeaderSize.Y}}}" z-index="-1" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" halign="center" opacity="0.6" id="Quad_AuthorTime_Bg"/>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "AnimLib" as AL
#Include "ColorLib" as CL
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Stylesheet.Script.txt" as Styles
{{{Manialink::DefaultIncludes()}}}

{{{MLE::ML_Includes()}}}

#Const C_ColorText _("|Track Editor Building Color|Color: %1")
#Const C_ColorText_White _("|Track Editor Building Color|White")
#Const C_ColorText_Green _("|Track Editor Building Color|Green")
#Const C_ColorText_Blue _("|Track Editor Building Color|Blue")
#Const C_ColorText_Red _("|Track Editor Building Color|Red")
#Const C_ColorText_Black _("|Track Editor Building Color|Black")
#Const C_ColorText_Default _("|Track Editor Building Color|Default")

#Const C_ColorButtonHeight_NonExpert -17.92 // == "-3.2" in the Map Editor UI coord system
#Const C_ColorButtonHeight_Expert -29.12 // == "-5.2" in the Map Editor UI coord system

{{{Manialink::Animations(["EaseOutQuad"])}}}
{{{Manialink::Functions(["AnimRepeat"])}}}
{{{Buttons2::ML_Functions()}}}
{{{MLE::ML_Functions()}}}

Void SetTitle(Text _Title, Boolean _Full, Integer _Status) {
	declare SmartQuad_Header <=> (Page.GetFirstChild("SmartQuad_Header") as CMlFrame);
	declare Label_Title <=> (SmartQuad_Header.GetFirstChild("Label_SmartQuad") as CMlLabel);

	declare Frame_AuthorTime <=> (Page.GetFirstChild("Frame_AuthorTime") as CMlFrame);
	declare Label_AuthorTime <=> (Frame_AuthorTime.GetFirstChild("Label_AuthorTime") as CMlLabel);
	Label_Title.Value = _Title;

	switch (_Status) {
		case {{{C_Status_Message}}}: {
			LibManialink_AnimStop(Label_Title);
			LibManialink_Anim(Label_Title, "<label opacity=\"1\" />", 250, "EaseOutQuad");

			LibManialink_AnimStop(Label_AuthorTime);
			LibManialink_Anim(Label_AuthorTime, "<label opacity=\"0\" />", 250, "EaseOutQuad");
		}
		case {{{C_Status_AuthorTime}}}: {
			Label_AuthorTime.Value = _Title;
			LibManialink_AnimStop(Label_Title);
			LibManialink_Anim(Label_Title, "<label opacity=\"0\" />", 250, "EaseOutQuad");

			Label_AuthorTime.Value = _Title;
			LibManialink_AnimStop(Label_AuthorTime);
			LibManialink_Anim(Label_AuthorTime, "<label opacity=\"1\" />", 250, "EaseOutQuad");
		}
		default: {
			LibManialink_AnimStop(Label_Title);
			LibManialink_AnimRepeatStart(2000);
			LibManialink_Anim(Label_Title, "<label opacity=\"0.1\" />", 400, "EaseOutQuad");
			LibManialink_AnimChain(Label_Title, "<label opacity=\"1\" />", 400, "EaseOutQuad");
			LibManialink_AnimRepeatEnd();

			LibManialink_AnimStop(Label_AuthorTime);
			LibManialink_Anim(Label_AuthorTime, "<label opacity=\"0\" />", 250, "EaseOutQuad");
		}
	}

	Styles::SetupSmartQuad(SmartQuad_Header, CMlControl::AlignHorizontal::HCenter, 0., 220.);
}

Void SetupColorUI() {
	declare Frame_Color <=> (Page.GetFirstChild("Frame_Color") as CMlFrame);
	declare Label_Color <=> (Frame_Color.GetFirstChild("Label_Color") as CMlLabel);
	declare Quad_Color_ButtonHelper <=> (Frame_Color.GetFirstChild("Quad_Color_ButtonHelper") as CMlFrame);
	declare Quad_Color_Interaction <=> (Frame_Color.GetFirstChild("Quad_Color_Interaction") as CMlQuad);
	declare Quad_Color_ImgSlanted <=> (Frame_Color.GetFirstChild("Quad_Color_ImgSlanted") as CMlQuad);

	declare L_Color for Page = CMapEditorPlugin::MapElemColor::Default;
	switch (L_Color) {
		case CMapEditorPlugin::MapElemColor::Default : Label_Color.Value = TL::Compose(C_ColorText, C_ColorText_Default);
		case CMapEditorPlugin::MapElemColor::White : Label_Color.Value = TL::Compose(C_ColorText, C_ColorText_White);
		case CMapEditorPlugin::MapElemColor::Green : Label_Color.Value = TL::Compose(C_ColorText, C_ColorText_Green);
		case CMapEditorPlugin::MapElemColor::Blue : Label_Color.Value = TL::Compose(C_ColorText, C_ColorText_Blue);
		case CMapEditorPlugin::MapElemColor::Red : Label_Color.Value = TL::Compose(C_ColorText, C_ColorText_Red);
		case CMapEditorPlugin::MapElemColor::Black : Label_Color.Value = TL::Compose(C_ColorText, C_ColorText_Black);
	}

	// Rosace visibility
	declare L_RosaceIsVisible for Page = False;
	if (L_RosaceIsVisible) {
		Quad_Color_ButtonHelper.Visible = False;
	} else {
		Quad_Color_ButtonHelper.Visible = True;
	}

	declare M = 1.; // Margin. Shortened to M for readability.
	declare TitleMarginVec = {{{Styles::GetSize2(<TitleMargin, 0.>, Styles::CircleSize_Bottom())}}};
	declare TitleMargin = TitleMarginVec.X;
	declare LabelWidth = Label_Color.ComputeWidth(Label_Color.Value);
	declare SlantedWidth = Quad_Color_ImgSlanted.Size.X;
	declare ButtonWidth = 5.;
	if (!Quad_Color_ButtonHelper.Visible) ButtonWidth = 0.;

	Quad_Color_ButtonHelper.RelativePosition_V3.X = LabelWidth + 2.*M;
	Quad_Color_ImgSlanted.RelativePosition_V3.X		= LabelWidth + 2.*M + ButtonWidth - SlantedWidth + 2.*M;
	Quad_Color_Interaction.Size.X 								= LabelWidth + 2.*M + ButtonWidth - SlantedWidth + 2.*M + TitleMargin;
}

Void SetupAirAndGhostModesUI() {
	// Air Mode Controls
	declare Frame_AirMode <=> (Page.GetFirstChild("Frame_AirMode") as CMlFrame);
	declare Label_AirMode <=> (Frame_AirMode.GetFirstChild("Label_AirMode") as CMlLabel);
	declare Quad_Checkbox_AirMode <=> (Frame_AirMode.GetFirstChild("Quad_Checkbox_AirMode") as CMlQuad);
	declare Quad_AirMode_ButtonHelper <=> (Frame_AirMode.GetFirstChild("Quad_AirMode_ButtonHelper") as CMlFrame);
	declare Quad_AirMode_Interaction <=> (Frame_AirMode.GetFirstChild("Quad_AirMode_Interaction") as CMlQuad);
	declare Quad_AirMode_ImgSlanted <=> (Frame_AirMode.GetFirstChild("Quad_AirMode_ImgSlanted") as CMlQuad);

	/*// Ghost Mode controls
	declare Frame_GhostMode <=> (Page.GetFirstChild("Frame_GhostMode") as CMlFrame);
	declare Label_GhostMode <=> (Frame_GhostMode.GetFirstChild("Label_GhostMode") as CMlLabel);
	declare Quad_Checkbox_GhostMode <=> (Frame_GhostMode.GetFirstChild("Quad_Checkbox_GhostMode") as CMlQuad);
	declare Quad_GhostMode_ButtonHelper <=> (Frame_GhostMode.GetFirstChild("Quad_GhostMode_ButtonHelper") as CMlFrame);
	declare Quad_GhostMode_Interaction <=> (Frame_GhostMode.GetFirstChild("Quad_GhostMode_Interaction") as CMlQuad);
	declare Quad_GhostMode_ImgSlanted <=> (Frame_GhostMode.GetFirstChild("Quad_GhostMode_ImgSlanted") as CMlQuad);*/

	// Rosace visibility
	declare L_RosaceIsVisible for Page = False;
	if (L_RosaceIsVisible) {
		Quad_AirMode_ButtonHelper.Visible = True;
		//Quad_GhostMode_ButtonHelper.Visible = True;
	} else {
		Quad_AirMode_ButtonHelper.Visible = False;
		//Quad_GhostMode_ButtonHelper.Visible = False;
	}

	// Air Mode UI
	declare M = 1.; // Margin. Shortened to M for readability.
	declare TitleMarginVec = {{{Styles::GetSize2(<TitleMargin, 0.>, Styles::CircleSize_Bottom())}}};
	declare TitleMargin = TitleMarginVec.X;
	declare Label1Width = Label_AirMode.ComputeWidth(Label_AirMode.Value);
	declare Quad1Width = Quad_Checkbox_AirMode.Size.X;
	declare Button1Width = 5.;
	declare SlantedWidth = Quad_AirMode_ImgSlanted.Size.X;
	if (!Quad_AirMode_ButtonHelper.Visible) Button1Width = 0.;

	Quad_Checkbox_AirMode.RelativePosition_V3.X 		= Label1Width + M + 0.5; // dunno why but I need to add more left than right.
	Quad_AirMode_ButtonHelper.RelativePosition_V3.X = Label1Width + M + Quad1Width + M - 0.5;
	Quad_AirMode_ImgSlanted.RelativePosition_V3.X		= Label1Width + M + Quad1Width + M + Button1Width - SlantedWidth + M;
	Quad_AirMode_Interaction.Size.X 								= Label1Width + M + Quad1Width + M + Button1Width - SlantedWidth + M + TitleMargin;

	/*// Ghost Mode UI
	declare Label2Width = Label_GhostMode.ComputeWidth(Label_GhostMode.Value);
	declare Quad2Width = Quad_Checkbox_GhostMode.Size.X;
	declare Button2Width = 5.;
	if (!Quad_GhostMode_ButtonHelper.Visible) Button2Width = 0.;

	Quad_Checkbox_GhostMode.RelativePosition_V3.X 		= Label2Width + M + 0.5; // I'm not quite sure why but I need to add more left than right.
	Quad_GhostMode_ButtonHelper.RelativePosition_V3.X = Label2Width + M + Quad2Width + M - 0.5;
	Quad_GhostMode_ImgSlanted.RelativePosition_V3.X		= Label2Width + M + Quad2Width + M + Button2Width - SlantedWidth + M;
	Quad_GhostMode_Interaction.Size.X 								= Label2Width + M + Quad2Width + M + Button2Width - SlantedWidth + M + TitleMargin;*/
}

Void SetupFrame2ModesUI() {
	declare Frame_2_Modes <=> (Page.GetFirstChild("Frame_2_Modes") as CMlFrame);
	declare Label_2Modes1 <=> (Frame_2_Modes.GetFirstChild("Label_2Modes1") as CMlLabel);
	declare Label_2Modes2 <=> (Frame_2_Modes.GetFirstChild("Label_2Modes2") as CMlLabel);

	declare Quad_2Modes_Toggle <=> (Frame_2_Modes.GetFirstChild("Quad_2Modes_Toggle") as CMlQuad);
	declare Quad_2Modes_ButtonHelper <=> (Frame_2_Modes.GetFirstChild("Quad_2Modes_ButtonHelper") as CMlFrame);
	declare Quad_2Modes_Interaction <=> (Frame_2_Modes.GetFirstChild("Quad_2Modes_Interaction") as CMlQuad);
	declare Quad_2Modes_ImgSlanted <=> (Frame_2_Modes.GetFirstChild("Quad_2Modes_ImgSlanted") as CMlQuad);

	declare M = 1.5; // Margin. Shortened to M for readability.
	declare Label1Width = Label_2Modes1.ComputeWidth(Label_2Modes1.Value);
	declare Label2Width = Label_2Modes2.ComputeWidth(Label_2Modes2.Value);
	declare ToggleWidth = Quad_2Modes_Toggle.Size.X;
	declare ButtonWidth = 5.;
	declare TitleMarginVec = {{{Styles::GetSize2(<TitleMargin, 0.>, Styles::CircleSize_Bottom())}}};
	declare TitleMargin = TitleMarginVec.X;
	declare SlantedWidth = Quad_2Modes_ImgSlanted.Size.X;
	if (!Quad_2Modes_ButtonHelper.Visible) ButtonWidth = 0.;

	Quad_2Modes_Toggle.RelativePosition_V3.X 				= Label1Width + M + 0.5; // I'm not quite sure why but I need to add more left than right.
	Label_2Modes2.RelativePosition_V3.X 						= Label1Width + M + ToggleWidth + M;
	Quad_2Modes_ButtonHelper.RelativePosition_V3.X 	= Label1Width + M + ToggleWidth + M + Label2Width + M - 0.5;
	Quad_2Modes_ImgSlanted.RelativePosition_V3.X		= Label1Width + M + ToggleWidth + M + Label2Width + M + ButtonWidth - SlantedWidth + M;
	Quad_2Modes_Interaction.Size.X 									= Label1Width + M + ToggleWidth + M + Label2Width + M + ButtonWidth - SlantedWidth + M +TitleMargin;
}

Void Set2Modes(Text _ModeLeft, Text _ModeRight) {
	declare Frame_2_Modes <=> (Page.GetFirstChild("Frame_2_Modes") as CMlFrame);
	declare Label_2Modes1 <=> (Frame_2_Modes.GetFirstChild("Label_2Modes1") as CMlLabel);
	declare Label_2Modes2 <=> (Frame_2_Modes.GetFirstChild("Label_2Modes2") as CMlLabel);

	Label_2Modes1.Value = _ModeLeft;
	Label_2Modes2.Value = _ModeRight;
	SetupFrame2ModesUI();
}

Void SetModes(Text[] _Modes) {
	declare Frame_Message <=> (Page.GetFirstChild("Frame_Message") as CMlFrame);
	declare Frame_Expert <=> (Page.GetFirstChild("Frame_Expert") as CMlFrame);
	declare Frame_Color <=> (Page.GetFirstChild("Frame_Color") as CMlFrame);
	declare Frame_Modes <=> (Page.GetFirstChild("Frame_Modes") as CMlFrame);
	declare ModesCount = _Modes.count;

	if (ModesCount > 0 && ModesCount <= {{{C_MaxModes}}}) {
		if (ModesCount == 2) {
			Set2Modes(_Modes[0], _Modes[1]);
		}
		/*foreach (Key => Control in Frame_Modes.Controls) {
			declare Frame_Mode <=> (Control as CMlFrame);
			declare Quad_Mode <=> (Frame_Mode.GetFirstChild("Quad_Mode") as CMlQuad);
			declare Label_Mode <=> (Frame_Mode.GetFirstChild("Label_Mode") as CMlLabel);
			if (_Modes.existskey(Key)) {
				Label_Mode.Value = _Modes[Key];
				Frame_Mode.Visible = True;

				declare SelectMode for Quad_Mode = "";
				SelectMode = _Modes[Key];
			} else {
				Frame_Mode.Visible = False;
			}
		}*/

		Frame_Message.Visible = False;
		Frame_Expert.Visible = True;
		Frame_Color.RelativePosition_V3.Y = C_ColorButtonHeight_Expert;
	} else {
		Frame_Message.Visible = True;
		Frame_Expert.Visible = False;
		Frame_Color.RelativePosition_V3.Y = C_ColorButtonHeight_NonExpert;
	}
}

Void SelectFrame2Modes(Text _Mode) {
	declare Frame_2_Modes <=> (Page.GetFirstChild("Frame_2_Modes") as CMlFrame);
	declare Label_2Modes1 <=> (Frame_2_Modes.GetFirstChild("Label_2Modes1") as CMlLabel);
	declare Label_2Modes2 <=> (Frame_2_Modes.GetFirstChild("Label_2Modes2") as CMlLabel);
	declare Quad_2Modes_Toggle <=> (Frame_2_Modes.GetFirstChild("Quad_2Modes_Toggle") as CMlQuad);

	if (_Mode == Label_2Modes1.Value) {
		Label_2Modes1.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
		Label_2Modes2.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight))}}};
		Quad_2Modes_Toggle.ImageUrl = "{{{Icons::C_Icon_128x128_SwitchOff}}}";
	} else if (_Mode == Label_2Modes2.Value) {
		Label_2Modes1.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight))}}};
		Label_2Modes2.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
		Quad_2Modes_Toggle.ImageUrl = "{{{Icons::C_Icon_128x128_SwitchOn}}}";
	} else {
		log("Error: Mode not found: "^_Mode);
	}
}

Void SelectMode(Text _Mode) {

	declare Frame_2_Modes <=> (Page.GetFirstChild("Frame_2_Modes") as CMlFrame);
	if (Frame_2_Modes.Visible) {
		SelectFrame2Modes(_Mode);
	}
	/*declare Frame_Modes <=> (Page.GetFirstChild("Frame_Modes") as CMlFrame);
	foreach (Key => Control in Frame_Modes.Controls) {
		declare Frame_Mode <=> (Control as CMlFrame);
		declare Quad_Mode <=> (Frame_Mode.GetFirstChild("Quad_Mode") as CMlQuad);
		declare Label_Mode <=> (Frame_Mode.GetFirstChild("Label_Mode") as CMlLabel);

		if (Label_Mode.Value == _Mode) {
			LibManialink_Anim(
				Quad_Mode, {{{Manialink::Inject("""<quad bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDarkLight)}}}" />""")}}}, 250, "EaseOutQuad"
			);
		} else {
			LibManialink_Anim(
				Quad_Mode, {{{Manialink::Inject("""<quad bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" />""")}}}, 250, "EaseOutQuad"
			);
		}
	}*/
}

Void SetVisibility(Boolean _HeaderVisible, Boolean _InfoVisible, Boolean _AuthorVisible) {
	if (_HeaderVisible) {
		declare L_Position for Page = <0., 0.>;
		LibManialink_Anim("<frame pos=\""^L_Position.X^" "^L_Position.Y^"\" hidden=\"0\" id=\"Frame_Header\" />", 250, "EaseOutQuad");
	} else {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 -92" hidden="1" id="Frame_Header" />""")}}}, 250, "EaseOutQuad");
	}

	if (_InfoVisible) {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="-160 {{{Styles::Margin_Top()}}}" hidden="0" id="Frame_Info" />""")}}}, 250, "EaseOutQuad");
	} else {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="-260 {{{Styles::Margin_Top()}}}" hidden="1" id="Frame_Info" />""")}}}, 250, "EaseOutQuad");
	}

	if (_AuthorVisible) {
		declare L_AuthorPosition for Page = <0., 0.>;
		LibManialink_Anim("<frame pos=\""^L_AuthorPosition.X^" "^L_AuthorPosition.Y^"\" hidden=\"0\" id=\"Frame_AuthorTime\" />", 250, "EaseOutQuad");
	} else {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="38.23 -92" hidden="1" id="Frame_AuthorTime" />""")}}}, 250, "EaseOutQuad");
	}
}

Void SetEditor(Integer _Editor) {
	declare Frame_Editor <=> (Page.GetFirstChild("Frame_Editor") as CMlFrame);
	declare Label_Editor <=> (Frame_Editor.GetFirstChild("Label_Editor") as CMlLabel);
	declare Quad_HeaderBg <=> (Page.GetFirstChild("Quad_HeaderBg") as CMlQuad);
	declare Quad_ImageHeaderRight <=> (Page.GetFirstChild("Quad_ImageHeaderRight") as CMlQuad);

	declare Message = _("Track Editor");
	// Note: Message used to change depending on editor level.
	Label_Editor.Value = Message;

	declare LabelPosX = 6.;

	declare LabelWidth = Label_Editor.ComputeWidth(Label_Editor.Value);
	Quad_HeaderBg.Size.X = LabelPosX + LabelWidth;
	Quad_ImageHeaderRight.RelativePosition_V3.X = Quad_HeaderBg.Size.X;
}

Void SetLimit(Integer _Limit) {
	declare Frame_Limit <=> (Page.GetFirstChild("Frame_Limit") as CMlFrame);
	declare Label_Limit <=> (Frame_Limit.GetFirstChild("Label_Limit") as CMlLabel);

	declare CopperPrice = Editor.Map.CopperPrice;
	if (CopperPrice > _Limit) CopperPrice = _Limit;
	Label_Limit.Value = CopperPrice^"/"^_Limit;
}

main() {
	declare Frame_Limit <=> (Page.GetFirstChild("Frame_Limit") as CMlFrame);
	declare Frame_Color <=> (Page.GetFirstChild("Frame_Color") as CMlFrame);

	declare Frame_2_Modes <=> (Page.GetFirstChild("Frame_2_Modes") as CMlFrame);
	declare Quad_2Modes_ButtonHelper <=> (Frame_2_Modes.GetFirstChild("Quad_2Modes_ButtonHelper") as CMlFrame);

	declare Frame_AirAndGhostMode <=> (Page.GetFirstChild("Frame_AirAndGhostMode") as CMlFrame);
	declare Quad_Checkbox_AirMode <=> (Frame_AirAndGhostMode.GetFirstChild("Quad_Checkbox_AirMode") as CMlQuad);
	declare Quad_AirMode_ButtonHelper <=> (Frame_AirAndGhostMode.GetFirstChild("Quad_AirMode_ButtonHelper") as CMlFrame);
	//declare Quad_GhostMode_ButtonHelper <=> (Frame_AirAndGhostMode.GetFirstChild("Quad_GhostMode_ButtonHelper") as CMlFrame);
	//declare Quad_Checkbox_GhostMode <=> (Frame_AirAndGhostMode.GetFirstChild("Quad_Checkbox_GhostMode") as CMlQuad);
	declare Label_AirMode <=> (Frame_AirAndGhostMode.GetFirstChild("Label_AirMode") as CMlLabel);
	//declare Label_GhostMode <=> (Frame_AirAndGhostMode.GetFirstChild("Label_GhostMode") as CMlLabel);

	declare L_Title for Page = "";
	declare L_FullTitle for Page = False;
	declare L_TitleStatus for Page = {{{C_Status_Message}}};
	declare L_ModesUpdate for Page = -1;
	declare L_Modes for Page = Text[];
	declare L_ModesSelectedUpdate for Page = -1;
	declare L_ModesSelected for Page = "";
	declare L_Editor for Page = {{{C_Editor_Beginner}}};
	declare L_HeaderVisibility for Page = False;
	declare L_AuthorVisibility for Page = False;
	declare L_InfoVisibility for Page = False;
	declare L_Position for Page = <0., 0.>;
	declare L_AuthorPosition for Page = <0., 0.>;
	declare L_Limit for Page = 0;
	declare L_LimitVisibility for Page = False;
	declare L_AirMode for Page = False;
	//declare L_GhostMode for Page = False;
	declare L_RosaceIsVisible for Page = False;
	declare L_Color for Page = CMapEditorPlugin::MapElemColor::Default;
	declare L_ColorVisibility for Page = False;

	declare PrevTitle = "";
	declare PrevModesUpdate = -1;
	declare PrevModesSelectedUpdate = -1;
	declare PrevEditor = -1;
	declare PrevHeaderVisibility = False;
	declare PrevInfoVisibility = False;
	declare PrevAuthorVisibility = False;
	declare PrevPosition = <0., 0.>;
	declare PrevAuthorPosition = <0., 0.>;
	declare PrevLimit = 0;
	declare PrevCopperPrice = 0;
	declare PrevLimitVisibility = False;
	declare PrevAirMode = False;
	//declare PrevGhostMode = False;
	declare PrevRosaceIsVisible = False;
	declare PrevColor = L_Color;
	declare PrevColorVisibility = L_ColorVisibility;

	declare AnimStartTime = Now;

	SetEditor(L_Editor);
	LibButtons_Init();
	LibMLEffects_Init();

	SetupFrame2ModesUI();
	SetupAirAndGhostModesUI();
	SetupColorUI();

	while (True) {
		yield;

		LibManialink_AnimLoop();
		LibButtons_Loop();
		LibMLEffects_Loop();

		if (PrevTitle != L_Title) {
			PrevTitle = L_Title;
			SetTitle(L_Title, L_FullTitle, L_TitleStatus);
		}

		if (PrevModesUpdate != L_ModesUpdate) {
			PrevModesUpdate = L_ModesUpdate;
			SetModes(L_Modes);
		}

		if (PrevModesSelectedUpdate != L_ModesSelectedUpdate) {
			PrevModesSelectedUpdate = L_ModesSelectedUpdate;
			SelectMode(L_ModesSelected);
		}

		if (PrevEditor != L_Editor) {
			PrevEditor = L_Editor;
			SetEditor(L_Editor);
		}

		if (PrevHeaderVisibility != L_HeaderVisibility || PrevInfoVisibility != L_InfoVisibility || PrevAuthorVisibility != L_AuthorVisibility
				|| PrevPosition != L_Position || PrevAuthorPosition != L_AuthorPosition)
		{
			PrevHeaderVisibility = L_HeaderVisibility;
			PrevInfoVisibility = L_InfoVisibility;
			PrevAuthorVisibility = L_AuthorVisibility;
			PrevPosition = L_Position;
			PrevAuthorPosition = L_AuthorPosition;
			SetVisibility(L_HeaderVisibility, L_InfoVisibility, L_AuthorVisibility);
			if (L_HeaderVisibility) SelectMode(L_ModesSelected);
			SetEditor(L_Editor);
		}

		if (PrevLimit != L_Limit || PrevCopperPrice != Editor.Map.CopperPrice) {
			PrevLimit = L_Limit;
			PrevCopperPrice = Editor.Map.CopperPrice;
			SetLimit(L_Limit);
		}

		if (PrevLimitVisibility != L_LimitVisibility) {
			PrevLimitVisibility = L_LimitVisibility;
			Frame_Limit.Visible = L_LimitVisibility;
		}

		if (PrevColorVisibility != L_ColorVisibility) {
			PrevColorVisibility = L_ColorVisibility;
			Frame_Color.Visible = L_ColorVisibility;
		}

		if (PrevAirMode != L_AirMode) {
			PrevAirMode = L_AirMode;

			if (L_AirMode) {
				Quad_Checkbox_AirMode.ImageUrl = "{{{Icons::C_Icon_128x128_Checkbox_Active_Square}}}";
				Label_AirMode.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
				Quad_Checkbox_AirMode.Colorize = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
			} else {
				Quad_Checkbox_AirMode.ImageUrl = "{{{Icons::C_Icon_128x128_Checkbox_Inactive_Square}}}";
				Label_AirMode.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight))}}};
				Quad_Checkbox_AirMode.Colorize = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_IconLight))}}};
			}
		}

		/*if (PrevGhostMode != L_GhostMode) {
			PrevGhostMode = L_GhostMode;

			if (L_GhostMode) {
				Quad_Checkbox_GhostMode.ImageUrl = "{{{Icons::C_Icon_128x128_Checkbox_Active_Square}}}";
				Label_GhostMode.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
				Quad_Checkbox_GhostMode.Colorize = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
			} else {
				Quad_Checkbox_GhostMode.ImageUrl = "{{{Icons::C_Icon_128x128_Checkbox_Inactive_Square}}}";
				Label_GhostMode.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight))}}};
				Quad_Checkbox_GhostMode.Colorize = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_IconLight))}}};
			}
		}*/

		if (PrevRosaceIsVisible != L_RosaceIsVisible) {
			PrevRosaceIsVisible = L_RosaceIsVisible;

			SetupFrame2ModesUI();
			SetupAirAndGhostModesUI();
			SetupColorUI();
		}

		if (PrevColor != L_Color) {
			PrevColor = L_Color;

			SetupColorUI();
		}

		foreach (Event in PendingEvents) {
			if (Event.Control == Null) continue;
			if (Event.Type == CMlScriptEvent::Type::MouseOver) {
				if (Event.ControlId == "Quad_2Modes_Interaction" || Event.ControlId == "Quad_2Modes_ImgSlanted") {
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_2Modes_Interaction" opacity="1." />""")}}}, 250, "EaseOutQuad");
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_2Modes_ImgSlanted" opacity="1." />""")}}}, 250, "EaseOutQuad");
				}
				else if (Event.ControlId == "Quad_AirMode_Interaction" || Event.ControlId == "Quad_AirMode_ImgSlanted") {
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_AirMode_Interaction" opacity="1." />""")}}}, 250, "EaseOutQuad");
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_AirMode_ImgSlanted" opacity="1." />""")}}}, 250, "EaseOutQuad");
				}
				/*else if (Event.ControlId == "Quad_GhostMode_Interaction" || Event.ControlId == "Quad_GhostMode_ImgSlanted") {
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_GhostMode_Interaction" opacity="1." />""")}}}, 250, "EaseOutQuad");
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_GhostMode_ImgSlanted" opacity="1." />""")}}}, 250, "EaseOutQuad");
				}*/
				else if (Event.ControlId == "Quad_Color_Interaction" || Event.ControlId == "Quad_Color_ImgSlanted") {
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_Color_Interaction" opacity="1." />""")}}}, 250, "EaseOutQuad");
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_Color_ImgSlanted" opacity="1." />""")}}}, 250, "EaseOutQuad");
				}
			}
			else if (Event.Type == CMlScriptEvent::Type::MouseOut) {
				if (Event.ControlId == "Quad_2Modes_Interaction" || Event.ControlId == "Quad_2Modes_ImgSlanted") {
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_2Modes_Interaction" opacity="0.6" />""")}}}, 250, "EaseOutQuad");
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_2Modes_ImgSlanted" opacity="0.6" />""")}}}, 250, "EaseOutQuad");
				}
				else if (Event.ControlId == "Quad_AirMode_Interaction" || Event.ControlId == "Quad_AirMode_ImgSlanted") {
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_AirMode_Interaction" opacity="0.6" />""")}}}, 250, "EaseOutQuad");
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_AirMode_ImgSlanted" opacity="0.6" />""")}}}, 250, "EaseOutQuad");
				}
				/*else if (Event.ControlId == "Quad_GhostMode_Interaction" || Event.ControlId == "Quad_GhostMode_ImgSlanted") {
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_GhostMode_Interaction" opacity="0.6" />""")}}}, 250, "EaseOutQuad");
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_GhostMode_ImgSlanted" opacity="0.6" />""")}}}, 250, "EaseOutQuad");
				}*/
				else if (Event.ControlId == "Quad_Color_Interaction" || Event.ControlId == "Quad_Color_ImgSlanted") {
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_Color_Interaction" opacity="0.6" />""")}}}, 250, "EaseOutQuad");
					LibManialink_Anim({{{Manialink::Inject("""<Quad id="Quad_Color_ImgSlanted" opacity="0.6" />""")}}}, 250, "EaseOutQuad");
				}
			}
			else if (Event.Type == CMlScriptEvent::Type::MouseClick) {
				if (Event.ControlId == "Quad_2Modes_Interaction" || Event.ControlId == "Quad_2Modes_ImgSlanted") {
					SendCustomEvent("{{{C_Event_SwitchMode}}}", Text[]);
				}
				else if (Event.ControlId == "Quad_AirMode_Interaction" || Event.ControlId == "Quad_AirMode_ImgSlanted") {
					SendCustomEvent("{{{C_Event_ToggleAirMode}}}", Text[]);
				}
				/*else if (Event.ControlId == "Quad_GhostMode_Interaction" || Event.ControlId == "Quad_GhostMode_ImgSlanted") {
					SendCustomEvent("C_Event_ToggleGhostMode", Text[]); // add accolades around C_Event_ToggleGhostMode. Even commented, it wouldn't compile
				}*/
				else if (Event.ControlId == "Quad_Color_Interaction" || Event.ControlId == "Quad_Color_ImgSlanted") {
					SendCustomEvent("{{{C_Event_ToggleColor}}}", Text[]);
				}
			}
		}
	}
}
--></script>
</manialink>
""";
}

Text GetScriptVersion() { return Version; }
Text GetScriptName() { return ScriptName; }

// ---------------------------------- //
/// Get the status constants
Integer Status_Message() { return C_Status_Message; }
Integer Status_Alert() { return C_Status_Alert; }
Integer Status_Error() { return C_Status_Error; }
Integer Status_AuthorTime() { return C_Status_AuthorTime; }

/// Get the events constants
Text Event_SelectMode() { return C_Event_SelectMode; }
Text Event_SwitchMode() { return C_Event_SwitchMode; }
Text Event_ToggleAirMode() { return C_Event_ToggleAirMode; }
//Text Event_ToggleGhostMode() { return C_Event_ToggleGhostMode; }
Text Event_ToggleColor() { return C_Event_ToggleColor; }

// Set the title in the header
Void SetTitle(Text _Title, Boolean _FullTitle, Integer _Status) {
	declare Page <=> Layers::GetPage("Header");
	declare L_Title for Page = "";
	declare L_FullTitle for Page = False;
	declare L_TitleStatus for Page = C_Status_Message;
	L_Title = _Title;
	L_FullTitle = _FullTitle;
	L_TitleStatus = _Status;
}

// Set the title in the header
Void SetTitle(Text _Title, Boolean _FullTitle) {
	SetTitle(_Title, _FullTitle, C_Status_Message);
}

// SetTitle overload
Void SetTitle(Text _Title) {
	SetTitle(_Title, False);
}

// Set the modes in the header
Void SetModes(Text[] _Modes) {
	declare Page <=> Layers::GetPage("Header");
	declare L_ModesUpdate for Page = -1;
	declare Text[] L_Modes for Page;
	L_Modes = _Modes;
	L_ModesUpdate = Now;
}

// Select a mode in the header
Void SelectMode(Text _Mode) {
	declare Page <=> Layers::GetPage("Header");
	declare L_ModesSelectedUpdate for Page = -1;
	declare L_ModesSelected for Page = "";
	L_ModesSelected = _Mode;
	L_ModesSelectedUpdate = Now;
}

/// Get editor levels
Integer Editor_Random() { return C_Editor_Random; }
Integer Editor_Beginner() { return C_Editor_Beginner; }
Integer Editor_Advanced() { return C_Editor_Advanced; }
Integer Editor_Expert() { return C_Editor_Expert; }

// Set the editor level
Void SetEditor(Integer _Editor) {
	declare Page <=> Layers::GetPage("Header");
	declare L_Editor for Page = C_Editor_Beginner;
	L_Editor = _Editor;
}
// Set the position of the Header UI
Void SetPosition(Vec2 _Position) {
	declare Page <=> Layers::GetPage("Header");
	declare L_Position for Page = <0., 0.>;
	L_Position = _Position;
}

// Set the position of the Header UI
Void SetAuthorPosition(Vec2 _Position) {
	declare Page <=> Layers::GetPage("Header");
	declare L_AuthorPosition for Page = <0., 0.>;
	L_AuthorPosition = _Position;
}

// Set the position of the UI
Void SetPositionY(Real _PositionY) {
	SetPosition(<0., _PositionY>);
}

// Set the copper price limit for the track
Void SetLimit(Integer _Limit) {
	declare Page <=> Layers::GetPage("Header");
	declare L_Limit for Page = 0;
	L_Limit = _Limit;
}

// Show/hide the copper price limit
Void SetLimitVisibility(Boolean _Visible) {
	declare Page <=> Layers::GetPage("Header");
	declare L_LimitVisibility for Page = False;
	L_LimitVisibility = _Visible;
}

// Show/hide the copper price limit
Void SetColorVisibility(Boolean _Visible) {
	declare Page <=> Layers::GetPage("Header");
	declare L_ColorVisibility for Page = False;
	L_ColorVisibility = _Visible;
}

Void SetAirMode(Boolean _Activate) {
	declare Page <=> Layers::GetPage("Header");
	declare L_AirMode for Page = False;
	L_AirMode = _Activate;
}

/*Void SetGhostMode(Boolean _Activate) {
	declare Page <=> Layers::GetPage("Header");
	declare L_GhostMode for Page = False;
	L_GhostMode = _Activate;
}*/

Void SetNextColor() {
	declare Page <=> Layers::GetPage("Header");
	declare L_Color for Page = CMapEditorPlugin::MapElemColor::Default;

	switch (L_Color) {
		case CMapEditorPlugin::MapElemColor::Default : L_Color = CMapEditorPlugin::MapElemColor::White;
		case CMapEditorPlugin::MapElemColor::White : L_Color = CMapEditorPlugin::MapElemColor::Green;
		case CMapEditorPlugin::MapElemColor::Green : L_Color = CMapEditorPlugin::MapElemColor::Blue;
		case CMapEditorPlugin::MapElemColor::Blue : L_Color = CMapEditorPlugin::MapElemColor::Red;
		case CMapEditorPlugin::MapElemColor::Red : L_Color = CMapEditorPlugin::MapElemColor::Black;
		case CMapEditorPlugin::MapElemColor::Black : L_Color = CMapEditorPlugin::MapElemColor::Default;
	}

	ForceMacroblockColor = (L_Color != CMapEditorPlugin::MapElemColor::Default);
	NextMapElemColor = L_Color;
}

Void ResetColor() {
	declare Page <=> Layers::GetPage("Header");
	declare L_Color for Page = CMapEditorPlugin::MapElemColor::Default;
	L_Color = CMapEditorPlugin::MapElemColor::Default;
	ForceMacroblockColor = (L_Color != CMapEditorPlugin::MapElemColor::Default);
	NextMapElemColor = L_Color;
}


Void SetColor(CMapEditorPlugin::MapElemColor _Color) {
	declare Page <=> Layers::GetPage("Header");
	declare L_Color for Page = CMapEditorPlugin::MapElemColor::Default;
	L_Color = _Color;
	ForceMacroblockColor = (L_Color != CMapEditorPlugin::MapElemColor::Default);
	NextMapElemColor = L_Color;
}

Void SetRosaceIsVisible(Boolean _Visible) {
	declare Page <=> Layers::GetPage("Header");
	declare L_RosaceIsVisible for Page = False;
	L_RosaceIsVisible = _Visible;
}

// Check if the simple menu is visible
Boolean LayerIsVisible() {
	declare Page <=> Layers::GetPage("Header");
	declare L_HeaderVisibility for Page = False;
	declare L_InfoVisibility for Page = False;
	declare L_AuthorVisibility for Page = False;
	return L_HeaderVisibility || L_InfoVisibility || L_AuthorVisibility;
}

// Set the header visibility
Void SetVisibility(Boolean _HeaderVisible, Boolean _InfoVisible, Boolean _AuthorVisible) {
	declare Page <=> Layers::GetPage("Header");
	declare L_HeaderVisibility for Page = False;
	declare L_InfoVisibility for Page = False;
	declare L_AuthorVisibility for Page = False;
	L_HeaderVisibility = _HeaderVisible;
	L_InfoVisibility = _InfoVisible;
	L_AuthorVisibility = _AuthorVisible;
}

Void Show() {
	SetVisibility(True, True, False);
}

Void Hide() {
	SetVisibility(False, False, False);
}

Void Unload() {
	Layers::Destroy("Header");
}

Void Load() {
	Unload();

	declare LayerHeader <=> Layers::Create("Header");
	LayerHeader.ManialinkPage = Private_GetHeaderML();

	declare Page <=> LayerHeader.LocalPage;
	declare L_Title for Page = "";
	declare L_FullTitle for Page = False;
	declare L_TitleStatus for Page = C_Status_Message;
	declare L_ModesUpdate for Page = -1;
	declare Text[] L_Modes for Page;
	declare L_ModesSelectedUpdate for Page = -1;
	declare L_ModesSelected for Page = "";
	declare L_Editor for Page = C_Editor_Beginner;
	declare L_HeaderVisibility for Page = False;
	declare L_InfoVisibility for Page = False;
	declare L_AuthorVisibility for Page = False;
	declare L_Position for Page = <0., 0.>;
	declare L_AuthorPosition for Page = <0., 0.>;
	declare L_Limit for Page = 0;
	declare L_LimitVisibility for Page = False;
	declare L_AirMode for Page = False;
	//declare L_GhostMode for Page = False;
	declare L_Color for Page = CMapEditorPlugin::MapElemColor::Default;
	declare L_ColorVisibility for Page = False;
	declare L_RosaceIsVisible for Page = False;
	L_Title = "";
	L_FullTitle = False;
	L_TitleStatus = C_Status_Message;
	L_Modes.clear();
	L_ModesSelected = "";
	L_ModesSelectedUpdate = -1;
	L_ModesUpdate = -1;
	L_Editor = C_Editor_Beginner;
	L_HeaderVisibility = False;
	L_InfoVisibility = False;
	L_AuthorVisibility = False;
	L_Position.Y = -90. + Styles::GetSize2(<0., 8.>, Styles::CircleSize_Bottom()).Y;
	L_Limit = 0;
	L_LimitVisibility = False;
	L_AirMode = False;
	//L_GhostMode = False;
	L_RosaceIsVisible = False;
	ResetColor();
	L_ColorVisibility = False;
}