/**
 * Block help UI
 */

#Const Version		"1.0.0"
#Const ScriptName	"BlockHelp.Script.txt"

#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Modes/Legacy/Manialink3.Script.txt" as Manialink
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/Legacy/Buttons.Script.txt" as Buttons2
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Stylesheet.Script.txt" as Styles

// Globales
declare Boolean G_CanBeVisible;	///< Enable or disable the possibility to display the block help UI
declare Boolean G_IsVisible;	///< Current UI visibility

Text Private_GetBlockHelpML() {
	return """
<manialink version="3" name="MapEditor:BlockHelp">
<stylesheet>
	{{{Styles::Get()}}}
</stylesheet>
<framemodel id="Framemodel_OptionRight">
	{{{Styles::BuildSmartQuad(<2., 0., 0.>, 6., 0., "", "", Styles::C_Img_SlantedRight, "", False, "tm2020-text-helper", Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "SmartQuad_BlockHelp")}}}
</framemodel>
<framemodel id="Framemodel_OptionLeft">
	{{{Styles::BuildSmartQuad(<-2., 0., 0.>, 6., 0., "", Styles::C_Img_SlantedLeft, "", "", False, "tm2020-text-helper", Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark), "SmartQuad_BlockHelp")}}}
</framemodel>
<frame pos="0 10" z-index="1" id="Frame_Global">
	<frame pos="0 20" z-index="-5">
		<label halign="center" class="turbo2-text-helper" id="Label_Notification" />
	</frame>
	<frame hidden="1" id="Frame_BlockHelp">
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>
		<frameinstance modelid="Framemodel_OptionRight" class="right"/>

		<frameinstance modelid="Framemodel_OptionLeft" class="left"/>
		<frameinstance modelid="Framemodel_OptionLeft" class="left"/>
		<frameinstance modelid="Framemodel_OptionLeft" class="left"/>
		<frameinstance modelid="Framemodel_OptionLeft" class="left"/>
		<frameinstance modelid="Framemodel_OptionLeft" class="left"/>
		<frameinstance modelid="Framemodel_OptionLeft" class="left"/>
		<frameinstance modelid="Framemodel_OptionLeft" class="left"/>
		<frameinstance modelid="Framemodel_OptionLeft" class="left"/>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Stylesheet.Script.txt" as Styles
{{{Manialink::DefaultIncludes()}}}

#Const C_SideKey 18
#Const C_ButtonsOrder [
	"{{{Buttons2::Editor_TurnBlock()}}}",
	"{{{Buttons2::Editor_CopyBlock()}}}",
	"{{{Buttons2::Editor_SelectConnector()}}}",
	"{{{Buttons2::Editor_RandomLandscape()}}}",
	"{{{Buttons2::Editor_OpenTest()}}}",
	"{{{Buttons2::Editor_Cancel()}}}",
	"{{{Buttons2::Editor_CancelTest()}}}",
	"{{{Buttons2::Editor_RemoveTerrain()}}}",
	"{{{Buttons2::Editor_RemoveBlock()}}}",
	"{{{Buttons2::Editor_CutBlock()}}}",
	"{{{Buttons2::Editor_Valid()}}}",
	"{{{Buttons2::Editor_StartTest()}}}",
	"{{{Buttons2::Editor_AddTerrain()}}}",
	"{{{Buttons2::Editor_PlaceBlock()}}}",
	"{{{Buttons2::Editor_AutoConnect()}}}",
	"{{{Buttons2::Editor_RaiseBlock()}}}",
	"{{{Buttons2::Editor_LowerBlock()}}}",
	"{{{Buttons2::Editor_RaiseStart()}}}",
	"{{{Buttons2::Editor_LowerStart()}}}",

	"{{{Buttons2::Editor_Redo()}}}",
	"{{{Buttons2::Editor_Undo()}}}",
	"{{{Buttons2::Editor_MoveBlock()}}}",
	"{{{Buttons2::Editor_BrowseBlocks()}}}",
	"{{{Buttons2::Editor_OpenRosaces()}}}",
	"{{{Buttons2::Editor_Disconnect()}}}",
	"{{{Buttons2::Editor_CameraMove()}}}",
	"{{{Buttons2::Editor_CameraZoom()}}}"
]
#Const C_Radius 32.
#Const C_Interval {{{ML::PI() * 0.65 / 6.}}}

{{{Manialink::Animations(["EaseOutQuad"])}}}
{{{Manialink::Function("AnimRepeat")}}}

{{{Buttons2::ML_Functions()}}}

Void PlaceOption(CMlFrame _Frame, Integer _Side, Integer _Index, Integer _Max) {
	declare L_Radius for Page = 1.;
	declare Radius = C_Radius * L_Radius;
	declare Interval = C_Interval * (2. - L_Radius);
	declare Rot = 0.;
	if (_Side == 0) Rot = ((_Max - 1) * Interval * 0.5) - ((_Index - 1) * Interval);
	else Rot = ML::PI() - ((_Max - 1) * Interval * 0.5) + ((_Index - 1) * Interval);
	declare X = ML::Cos(Rot) * Radius;
	declare Y = ML::Sin(Rot) * Radius;

	_Frame.RelativePosition_V3 = <X, Y>;
}

Void SetOptions(Text[Text] _Options) {
	declare Frame_BlockHelp <=> (Page.GetFirstChild("Frame_BlockHelp") as CMlFrame);

	declare Max = [0, 0];
	foreach (Key => Control in Frame_BlockHelp.Controls) {
		declare Frame_Option <=> (Control as CMlFrame);
		declare SmartQuad_BlockHelp <=> (Frame_Option.GetFirstChild("SmartQuad_BlockHelp") as CMlFrame);
		declare Action = C_ButtonsOrder[Key];
		if (_Options.existskey(Action)) {
			declare Button_SmartQuad <=> (SmartQuad_BlockHelp.GetFirstChild("Button_SmartQuad") as CMlFrame);
			declare Label_SmartQuad <=> (SmartQuad_BlockHelp.GetFirstChild("Label_SmartQuad") as CMlLabel);
			LibButtons_SetAction(Button_SmartQuad, Action);
			Label_SmartQuad.Value = _Options[Action];
			Frame_Option.Visible = True;

			if (Key <= (C_SideKey)) Max[0] += 1;
			else Max[1] += 1;

			if (Frame_Option.HasClass("right"))
				Styles::SetupSmartQuad(SmartQuad_BlockHelp, CMlControl::AlignHorizontal::Left, 0.);
			else
				Styles::SetupSmartQuad(SmartQuad_BlockHelp, CMlControl::AlignHorizontal::Right, 0.);
		} else {
			Frame_Option.Visible = False;
		}
	}

	declare Count = [0, 0];
	foreach (Key => Control in Frame_BlockHelp.Controls) {
		declare Frame_Option <=> (Control as CMlFrame);
		if (!Frame_Option.Visible) continue;

		if (Key <= (C_SideKey)) {
			Count[0] += 1;
			PlaceOption(Frame_Option, 0, Count[0], Max[0]);
		} else {
			Count[1] += 1;
			PlaceOption(Frame_Option, 1, Count[1], Max[1]);
		}
	}
}

Void DisplayNotification(Text _Notification) {
	declare Label_Notification <=> (Page.GetFirstChild("Label_Notification") as CMlLabel);
	Label_Notification.Value = _Notification;
	Label_Notification.RelativePosition_V3.Y = 0.;
	Label_Notification.RelativeScale = 0.8;
	Label_Notification.Opacity = 0.;

	LibManialink_Anim(Label_Notification, {{{Manialink::Inject("""<label pos="0 5" scale="1" opacity="1" hidden="0" />""")}}}, 500, "EaseOutQuad");
	LibManialink_AnimInsert(Label_Notification, {{{Manialink::Inject("""<label opacity="0" hidden="1" />""")}}}, 750, 250, "EaseOutQuad");
}

Void SetVisibility(Boolean _CanBeVisible, Boolean _Visible) {
	if (_CanBeVisible && _Visible) {
		if (Editor.ManiaPlanet != Null && Editor.ManiaPlanet.HMD_IsActive) {
			LibManialink_Anim({{{Manialink::Inject("""<frame scale="2" hidden="0" id="Frame_BlockHelp" />""")}}}, 250, "EaseOutQuad");
		} else {
			LibManialink_Anim({{{Manialink::Inject("""<frame scale="1" hidden="0" id="Frame_BlockHelp" />""")}}}, 250, "EaseOutQuad");
		}
	} else {
		LibManialink_Anim({{{Manialink::Inject("""<frame scale="0" hidden="1" id="Frame_BlockHelp" />""")}}}, 250, "EaseOutQuad");
	}
}

main() {
	declare L_OptionsUpdate for Page = -1;
	declare L_Options for Page = Text[Text];
	declare L_Visibility for Page = False;
	declare L_CanBeVisible for Page = False;
	declare L_Radius for Page = 1.;
	declare L_NotificationUpdate for Page = -1;
	declare L_Notification for Page = "";

	declare PrevOptionsUpdate = -1;
	declare PrevVisibility = False;
	declare PrevCanBeVisible = False;
	declare PrevRadius = -1.;
	declare PrevNotificationUpdate = -1;
	declare PrevHMD_IsActive = False;

	LibButtons_Init();

	while (True) {
		yield;

		LibManialink_AnimLoop();
		LibButtons_Loop();

		if (
			PrevOptionsUpdate != L_OptionsUpdate ||
			PrevRadius != L_Radius ||
			(Editor.ManiaPlanet != Null && Editor.ManiaPlanet.HMD_IsActive != PrevHMD_IsActive)
		) {
			PrevOptionsUpdate = L_OptionsUpdate;
			PrevRadius = L_Radius;
			if (Editor.ManiaPlanet != Null) PrevHMD_IsActive = Editor.ManiaPlanet.HMD_IsActive;
			SetOptions(L_Options);
		}

		if (PrevNotificationUpdate != L_NotificationUpdate) {
			PrevNotificationUpdate = L_NotificationUpdate;
			DisplayNotification(L_Notification);
		}

		if (PrevVisibility != L_Visibility || PrevCanBeVisible != L_CanBeVisible) {
			PrevVisibility = L_Visibility;
			PrevCanBeVisible = L_CanBeVisible;
			SetVisibility(L_CanBeVisible, L_Visibility);
		}
	}
}
--></script>
</manialink>
""";
}

Text GetScriptVersion() { return Version; }
Text GetScriptName() { return ScriptName; }


Void SetOptions(Text[Text] _Options) {
	declare Page <=> Layers::Get("BlockHelp").LocalPage;
	declare L_OptionsUpdate for Page = -1;
	declare Text[Text] L_Options for Page;
	L_Options.clear();

	foreach (Path => Name in _Options) {
		L_Options[Path] = Name;
	}

	L_OptionsUpdate = Now;
}

//  Set the ratio to apply to the help radius
Void SetRadius(Real _Ratio) {
	declare Page <=> Layers::Get("BlockHelp").LocalPage;
	declare L_Radius for Page = 1.;
	L_Radius = _Ratio;
	if (L_Radius < 0.) L_Radius = 0.;
	else if (L_Radius > 1.) L_Radius = 1.;
}

// Display a notification above the block
Void Notify(Text _Notification) {
	declare Page <=> Layers::Get("BlockHelp").LocalPage;
	declare L_NotificationUpdate for Page = -1;
	declare L_Notification for Page = "";
	L_Notification = _Notification;
	L_NotificationUpdate = Now;
}

// Set if the block help UI can be visible or not
Void CanBeVisible(Boolean _CanBeVisible) {
	declare Page <=> Layers::Get("BlockHelp").LocalPage;
	declare L_CanBeVisible for Page = False;
	L_CanBeVisible = _CanBeVisible;
	G_CanBeVisible = _CanBeVisible;
}

// Check if the block help UI can be visible
Boolean CanBeVisible() {
	return G_CanBeVisible;
}

// Set the block help visibility
Void SetVisibility(Boolean _Visible) {
	declare Page <=> Layers::Get("BlockHelp").LocalPage;
	declare L_Visibility for Page = False;
	L_Visibility = _Visible;
	G_IsVisible = _Visible;
}

// Check if the block help UI is visible
Boolean LayerIsVisible() {
	return G_IsVisible;
}

Void Show() {
	SetVisibility(True);
}

Void Hide() {
	SetVisibility(False);
}

Void Unload() {
	Layers::Destroy("BlockHelp");
}

Void Load() {
	Unload();

	declare LayerBlockHelp <=> Layers::Create("BlockHelp");
	LayerBlockHelp.ManialinkPage = Private_GetBlockHelpML();

	declare Page <=> LayerBlockHelp.LocalPage;
	declare L_OptionsUpdate for Page = -1;
	declare Text[Text] L_Options for Page;
	declare L_Visibility for Page = False;
	declare L_CanBeVisible for Page = False;
	declare L_Radius for Page = 1.;
	declare L_NotificationUpdate for Page = -1;
	declare L_Notification for Page = "";

	L_OptionsUpdate = -1;
	L_Options.clear();
	L_Visibility = False;
	L_CanBeVisible = False;
	L_Radius = 1.;
	L_NotificationUpdate = -1;
	L_Notification = "";

	G_CanBeVisible = False;
	G_IsVisible = False;
}