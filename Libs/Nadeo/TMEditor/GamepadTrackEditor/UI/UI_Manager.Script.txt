/**
 * UI Manager Script Library
 */

#Const Version		"1.0.2"
#Const ScriptName	"UI_Manager.Script.txt"

//#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Stylesheet.Script.txt" 			as Styles
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/BlockHelp.Script.txt"		 			as BlockHelp
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/DecoSelection.Script.txt" 		as DecoSelection
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Header.Script.txt" 						as Header
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/MacroblockSelection.Script.txt" as MacroblockSelection
//#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/MapStyleSelection.Script.txt" as MapStyleSelection // TAG: MapStyleSelection
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Menu.Script.txt" 							as Menu
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/MenuOutro.Script.txt"		 			as MenuOutro
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Multilaps.Script.txt" 				as Multilaps
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/PopUp.Script.txt" 						as PopUp
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Progression.Script.txt" 			as Progression
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/RandomMenu.Script.txt" 				as RandomMenu
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/ShadowMenu.Script.txt" 				as ShadowMenu
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/SimpleChoice.Script.txt" 			as SimpleChoice
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/SimpleMenu.Script.txt" 				as SimpleMenu
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/SkinSelection.Script.txt" 		as SkinSelection
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/SpawnSelection.Script.txt" 		as SpawnSelection
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/StyleSelection.Script.txt" 		as StyleSelection
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/TerrainPreview.Script.txt" 		as TerrainPreview
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Tuto.Script.txt" 							as Tuto
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/MouseControl.Script.txt" 			as MouseControl
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/CutPaste.Script.txt" 						as CutPaste
#Include "Libs/Nadeo/TMEditor/GamepadTrackEditor/UI/Save.Script.txt" 				as Save

// ---------------------------------- //
// Constants
// ---------------------------------- //

//#Const C_File_Styles 0
#Const C_File_BlockHelp 1
#Const C_File_DecoSelection 2
#Const C_File_Header 3
#Const C_File_MacroblockSelection 4
// #Const C_File_MapStyleSelection 5 // TAG: MapStyleSelection
#Const C_File_Menu 6
#Const C_File_MenuOutro 7
#Const C_File_Multilaps 8
#Const C_File_PopUp 9
#Const C_File_Progression 10
#Const C_File_RandomMenu 11
#Const C_File_ShadowMenu 12
#Const C_File_SimpleChoice 13
#Const C_File_SimpleMenu 14
#Const C_File_SkinSelection 15
#Const C_File_SpawnSelection 16
#Const C_File_StyleSelection 17
#Const C_File_TerrainPreview 18
#Const C_File_Tuto 19
#Const C_File_CutPaste 20
#Const C_File_Save 21

#Const C_HandleMultilaps False
#Const C_HandleRandomMenu False
#Const C_HandleShadowMenu False

declare Boolean G_BlockHelpCanBeVisibleMode; // If we want to use CanBeVisible vs Show/Hide for BlockHelp
declare Boolean G_ShowHeaderInfo;

Void SetBlockHelpCanBeVisibleMode(Boolean _CanBeVisibleMode) {
	G_BlockHelpCanBeVisibleMode = _CanBeVisibleMode;
}

Void Hide(Integer _File) {
	switch (_File) {
		case C_File_BlockHelp 			:  {if (G_BlockHelpCanBeVisibleMode) BlockHelp::CanBeVisible(False); else BlockHelp::Hide();}
		case C_File_DecoSelection 		:  DecoSelection::Hide();
		case C_File_Header 				:  Header::Hide();
		case C_File_MacroblockSelection :  MacroblockSelection::Hide();
		//case C_File_MapStyleSelection 	:  MapStyleSelection::Hide(); // TAG: MapStyleSelection
		case C_File_Menu 				:  Menu::Hide();
		case C_File_MenuOutro 			:  MenuOutro::Hide();
		case C_File_Multilaps 			:  Multilaps::Hide();
		//case C_File_PopUp 				:  PopUp::Hide(); // Is handled in private
		case C_File_Progression 		:  Progression::Hide();
		case C_File_RandomMenu 			:  RandomMenu::Hide();
		case C_File_ShadowMenu 			:  ShadowMenu::Hide();
		case C_File_SimpleChoice		:  SimpleChoice::Hide();
		case C_File_SimpleMenu 			:  SimpleMenu::Hide();
		case C_File_SkinSelection 		:  SkinSelection::Hide();
		case C_File_SpawnSelection 		:  SpawnSelection::Hide();
		case C_File_StyleSelection 		:  StyleSelection::Hide();
		case C_File_TerrainPreview 		:  TerrainPreview::Hide();
		case C_File_Tuto 				:  Tuto::Hide();
		case C_File_CutPaste 			:  CutPaste::Hide();
		case C_File_Save 				:  Save::Hide();
	}
}

Void Show(Integer _File) {
	switch (_File) {
		case C_File_BlockHelp 			:	 if (G_BlockHelpCanBeVisibleMode) BlockHelp::CanBeVisible(True); else BlockHelp::Show();
		case C_File_DecoSelection 		:  DecoSelection::Show();
		case C_File_Header 				:  Header::SetVisibility(True, G_ShowHeaderInfo, False);
		case C_File_MacroblockSelection :  MacroblockSelection::Show();
		// case C_File_MapStyleSelection 	:  MapStyleSelection::Show(); // TAG: MapStyleSelection
		case C_File_Menu 				:  Menu::Show();
		case C_File_MenuOutro 			:  MenuOutro::Show();
		case C_File_Multilaps 			:  Multilaps::Show();
		//case C_File_PopUp 				:  PopUp::Show(); // Is handled in private
		case C_File_Progression 		:  Progression::Show();
		case C_File_RandomMenu 			:  RandomMenu::Show();
		case C_File_ShadowMenu 			:  ShadowMenu::Show();
		case C_File_SimpleChoice		:  SimpleChoice::Show();
		case C_File_SimpleMenu 			:  SimpleMenu::Show();
		case C_File_SkinSelection 		:  SkinSelection::Show();
		case C_File_SpawnSelection 		:  SpawnSelection::Show();
		case C_File_StyleSelection 		:  StyleSelection::Show();
		case C_File_TerrainPreview 		:  TerrainPreview::Show();
		case C_File_Tuto 				:  Tuto::Show();
		case C_File_CutPaste 			:  CutPaste::Show();
		case C_File_Save 				:  Save::Show();
	}
}

Void HideAll() {
	if (G_BlockHelpCanBeVisibleMode) BlockHelp::CanBeVisible(False);
	else BlockHelp::Hide();

	DecoSelection::Hide();
	Header::Hide();
	MacroblockSelection::Hide();
	// MapStyleSelection::Hide(); // TAG: MapStyleSelection
	Menu::Hide();
	MenuOutro::Hide();
	Progression::Hide();
	SimpleChoice::Hide();
	SimpleMenu::Hide();
	SkinSelection::Hide();
	SpawnSelection::Hide();
	StyleSelection::Hide();
	TerrainPreview::Hide();
	Tuto::Hide();
	CutPaste::Hide();
	Save::Hide();

	if (C_HandleMultilaps) {
		Multilaps::Hide();
	}
	if (C_HandleRandomMenu) {
		RandomMenu::Hide();
	}
	if (C_HandleShadowMenu) {
		ShadowMenu::Hide();
	}

	//PopUp::Hide(); // Is handled in private
}

// We probably won't want to show everything but showing everything followed by hiding a few things is a nice alternative to hiding everything followed by showing a lot
Void ShowAll() {
	if (G_BlockHelpCanBeVisibleMode) BlockHelp::Show();
	else BlockHelp::CanBeVisible(True);

	DecoSelection::Show();
	Header::SetVisibility(True, G_ShowHeaderInfo, False);
	MacroblockSelection::Show();
	// MapStyleSelection::Show(); // TAG: MapStyleSelection
	Menu::Show();
	MenuOutro::Show();
	Progression::Show();
	SimpleChoice::Show();
	SimpleMenu::Show();
	SkinSelection::Show();
	SpawnSelection::Show();
	StyleSelection::Show();
	TerrainPreview::Show();
	Tuto::Show();
	CutPaste::Show();
	Save::Show();

	if (C_HandleRandomMenu) {
		RandomMenu::Show();
	}
	if (C_HandleShadowMenu) {
		ShadowMenu::Show();
	}
	if (C_HandleMultilaps) {
		Multilaps::Show();
	}

	//PopUp::Show(); // Is handled in private
}

Void ShowOnly(Integer[] _Files) {
	HideAll();
	foreach (File in _Files) {
		Show(File);
	}
}

Void ShowOnly(Integer _File) {
	HideAll();
	Show(_File);
}

Void HideOnly(Integer[] _Files) {
	ShowAll();
	foreach (File in _Files) {
		Hide(File);
	}
}

Void HideOnly(Integer _File) {
	ShowAll();
	Hide(_File);
}

Void Unload() {
	//HideAll();
	Header::Unload();
	StyleSelection::Unload();
	BlockHelp::Unload();
	TerrainPreview::Unload();
	MacroblockSelection::Unload();
	SkinSelection::Unload();
	SpawnSelection::Unload();
	DecoSelection::Unload();
	PopUp::Unload();
	SimpleChoice::Unload();
	Menu::Unload();
	MenuOutro::Unload();
	Progression::Unload();
	SimpleMenu::Unload();
	RandomMenu::Unload();
	ShadowMenu::Unload();
	Tuto::Unload();
	Multilaps::Unload();
	// MapStyleSelection::Unload(); // TAG: MapStyleSelection
	MouseControl::Unload();
	Save::Unload();
}

Void Load(Boolean _IsSimpleEditor, Boolean _IsAdvancedEditor) {
	//Unload();
	tuningmark("Load UI_Manager");
	SetBlockHelpCanBeVisibleMode(True);

	Header::Load();
	StyleSelection::Load();
	BlockHelp::Load();
	TerrainPreview::Load();
	MacroblockSelection::Load(_IsSimpleEditor);
	SkinSelection::Load();
	SpawnSelection::Load();
	DecoSelection::Load();
	SimpleChoice::Load();
	Menu::Load();
	Progression::Load(_IsAdvancedEditor);
	MenuOutro::Load(_IsAdvancedEditor);
	SimpleMenu::Load();
	RandomMenu::Load();
	ShadowMenu::Load();
	Tuto::Load();
	Multilaps::Load();
	// MapStyleSelection::Load(); // TAG: MapStyleSelection
	MouseControl::Load();
	Save::Load();

	G_ShowHeaderInfo = True;
}