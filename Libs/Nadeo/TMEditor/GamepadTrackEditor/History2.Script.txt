/**
 * History library for terraforming, track and decoration modes.
 */

#Const Version		"1.0.0"
#Const ScriptName	"History2.Script.txt"

#Const C_LibHistory2_MaxSteps		-1 //75	///< Maximum number of steps saved in the history
// Actions
#Const C_LibHistory2_Action_Null	-1
#Const C_LibHistory2_Action_Add		0
#Const C_LibHistory2_Action_Remove	1
#Const C_LibHistory2_Action_EditSkin		2

///Structure for history
#Struct K_History2 {
	Integer Action; ///< Action used
	Integer Mode; ///< Mode used
	Ident[] MacroblockModelsIds; ///< Ids of the macroblocks
	Int3[] MacroblocksCoords; ///< Coordinates of the macroblocks
	CMapEditorPlugin::CardinalDirections[] MacroblocksDirs; ///< Directions of the macroblocks
	CMapEditorPlugin::MapElemColor[] MacroblocksColors;
}

declare Integer G_LibHistory2_Cursor;				///< Cursor position in the history

declare K_History2[] G_History2;

/// Remove the content of the history after the cursor position
Void Private_HistorySplice() {
	if (G_LibHistory2_Cursor >= G_History2.count - 1) return;

	declare Target = G_LibHistory2_Cursor + 1;

	while (G_History2.count > Target) {
		declare KeyToRemove = G_History2.count - 1;
		declare Boolean Removed;

		Removed = G_History2.removekey(KeyToRemove);
	}

	G_LibHistory2_Cursor = G_History2.count - 1;
}

/// Remove steps that are over the maximum steps limit
Void Private_RemoveExcess() {
	if (C_LibHistory2_MaxSteps < 0) return; //< No limit

	// Remove first step if we hit the maximum save step
	while (G_History2.count > C_LibHistory2_MaxSteps) {
		declare Boolean Removed;

		Removed = G_History2.removekey(0);
	}
}

Text GetScriptVersion() { return Version; }
Text GetScriptName() { return ScriptName; }

// Return the actions constants
Integer Action_Null() { return C_LibHistory2_Action_Null; }
Integer Action_Add() { return C_LibHistory2_Action_Add; }
Integer Action_Remove() { return C_LibHistory2_Action_Remove; }
Integer Action_EditSkin() { return C_LibHistory2_Action_EditSkin; }

// Save a new state in the history
Void Insert(Integer _Action, Integer _Mode, Ident[] _MacroblockModelsIds, Int3[] _MacroblocksCoords, CMapEditorPlugin::CardinalDirections[] _MacroblocksDirs, CMapEditorPlugin::MapElemColor[] _MacroblocksColors) {
	if (_Action != C_LibHistory2_Action_Add && _Action != C_LibHistory2_Action_Remove && _Action != C_LibHistory2_Action_EditSkin) return;

	// Overwrite the history after the cursor
	Private_HistorySplice();

	declare K_History2 Tmp_History2;

	Tmp_History2.Action = _Action;
	Tmp_History2.Mode = _Mode;
	Tmp_History2.MacroblockModelsIds = _MacroblockModelsIds;
	Tmp_History2.MacroblocksCoords = _MacroblocksCoords;
	Tmp_History2.MacroblocksDirs = _MacroblocksDirs;
	Tmp_History2.MacroblocksColors = _MacroblocksColors;

	G_History2.add(Tmp_History2);

	Private_RemoveExcess();

	G_LibHistory2_Cursor = G_History2.count - 1;
}

// Insert overload
Void Insert(Integer _Action, Integer _Mode, Ident _MacroblockModelId, Int3 _MacroblockCoord, CMapEditorPlugin::CardinalDirections _MacroblockDir, CMapEditorPlugin::MapElemColor _MacroblockColors) {
	Insert(_Action, _Mode, [_MacroblockModelId], [_MacroblockCoord], [_MacroblockDir], [_MacroblockColors]);
}

/// Clear all states from the history
Void Clear() {
	G_LibHistory2_Cursor = -1;

	G_History2.clear();
}

// Get the number of steps saved in the history
Integer Count() {
	return G_History2.count;
}

// Get the position of the cursor in the history
Integer GetCursor() {
	return G_LibHistory2_Cursor;
}

// Get the action at the given cursor
Integer GetAction(Integer _Cursor) {
	if (!G_History2.existskey(_Cursor)) return C_LibHistory2_Action_Null;

	return G_History2[_Cursor].Action;
}

// Get the action at the current cursor
Integer GetAction() {
	if (G_LibHistory2_Cursor < 0) return C_LibHistory2_Action_Null;

	return G_History2[G_LibHistory2_Cursor].Action;
}

// Get the mode at the given cursor
Integer GetMode(Integer _Cursor) {
	if (!G_History2.existskey(_Cursor)) return -1;

	return G_History2[_Cursor].Mode;
}

// Get the mode at the current cursor
Integer GetMode() {
	if (G_LibHistory2_Cursor < 0) return -1;

	return G_History2[G_LibHistory2_Cursor].Mode;
}

// Get the macroblocks models ids at the given cursor
Ident[] GetMacroblockModelsIds(Integer _Cursor) {
	if (!G_History2.existskey(_Cursor)) return [];

	return G_History2[_Cursor].MacroblockModelsIds;
}

// Get the macroblocks models ids at the current cursor
Ident[] GetMacroblockModelsIds() {
	if (G_LibHistory2_Cursor < 0) return [];

	return G_History2[G_LibHistory2_Cursor].MacroblockModelsIds;
}

// Get the macroblocks coordinates at the given cursor
Int3[] GetMacroblocksCoords(Integer _Cursor) {
	if (!G_History2.existskey(_Cursor)) return [];

	return G_History2[_Cursor].MacroblocksCoords;
}

// Get the macroblocks coordinates at the current cursor
Int3[] GetMacroblocksCoords() {
	if (G_LibHistory2_Cursor < 0) return [];

	return G_History2[G_LibHistory2_Cursor].MacroblocksCoords;
}

// Get the macroblocks directions at the given cursor
CMapEditorPlugin::CardinalDirections[] GetMacroblocksDirs(Integer _Cursor) {
	if (!G_History2.existskey(_Cursor)) return [];

	return G_History2[_Cursor].MacroblocksDirs;
}

// Get the macroblocks directions at the current cursor
CMapEditorPlugin::CardinalDirections[] GetMacroblocksDirs() {
	if (G_LibHistory2_Cursor < 0) return [];

	return G_History2[G_LibHistory2_Cursor].MacroblocksDirs;
}

// Get the macroblocks colors at the given cursor
CMapEditorPlugin::MapElemColor[] GetMacroblocksColors(Integer _Cursor) {
	if (!G_History2.existskey(_Cursor)) return [];

	return G_History2[_Cursor].MacroblocksColors;
}

// Get the macroblocks colors at the current cursor
CMapEditorPlugin::MapElemColor[] GetMacroblocksColors() {
	if (G_LibHistory2_Cursor < 0) return [];

	return G_History2[G_LibHistory2_Cursor].MacroblocksColors;
}

// Move the cursor backward in the history
Boolean UndoAction() {
	if (G_LibHistory2_Cursor < 0) return False;

	G_LibHistory2_Cursor -= 1;

	return True;
}

// Move the cursor forward in the history
Boolean RedoAction() {
	if (G_LibHistory2_Cursor >= G_History2.count - 1) return False;

	G_LibHistory2_Cursor += 1;

	return True;
}

Void Unload() {
	Clear();
}

Void Load() {
	Unload();
}