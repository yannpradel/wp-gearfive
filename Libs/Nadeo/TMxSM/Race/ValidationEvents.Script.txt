/** 
 *	Events for the Race validation mode
 */
#Const Version		"2022-10-07"
#Const ScriptName	"Libs/Nadeo/TMxSM/Race/ValidationEvents.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_EventType_Retry "Event_RaceValidation_Retry"
#Const C_EventType_SaveReplay "Event_RaceValidation_SaveReplay"
#Const C_EventType_Quit "Event_RaceValidation_Quit"
#Const C_EventType_ViewPodium "Event_RaceValidation_ViewPodium"
#Const C_EventType_ExitPodium "Event_RaceValidation_ExitPodium"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_ValidationEvent {
	Text Type;
	Text[] Data;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Clear the array of pending events
Void ClearEvents(CSmMode _Mode) {
	declare K_ValidationEvent[] ValidationEvents_PendingEvents for _Mode = [];
	ValidationEvents_PendingEvents = [];
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Convert a CUIConfig event to a K_ValidationEvent
 *	and add it to the pending events array
 *	if it's compatible
 */
Void AddEvent(CSmMode _Mode, CUIConfigEvent _Event) {
	switch (_Event.Type) {
		case CUIConfigEvent::EType::OnLayerCustomEvent: {
			declare K_ValidationEvent ValidationEvent;
			ValidationEvent.Type = _Event.CustomEventType;
			foreach (Value in _Event.CustomEventData) {
				ValidationEvent.Data.add(Value);
			}
			declare K_ValidationEvent[] ValidationEvents_PendingEvents for _Mode = [];
			ValidationEvents_PendingEvents.add(ValidationEvent);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the pending events
K_ValidationEvent[] GetPendingEvents(CSmMode _Mode) {
	declare K_ValidationEvent[] ValidationEvents_PendingEvents for _Mode = [];
	return ValidationEvents_PendingEvents;
}