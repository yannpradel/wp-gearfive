/**
 *	UI module: AFK client side
 */
#Const Version		"1.0.0"
#Const ScriptName "Libs/Nadeo/TMGame/Modes/AFK_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/TMGame/Modes/AFK_Common.Script.txt" as UIModules_AFK_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_AFK_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_AFK_Common::C_LayerType;
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *	@return														The module manialink
 */
Text GetML() {
	//L16N [AFK] Message sent to all players when another player has been AFK (Away From Keyboard) for a long time
	declare Text Text_AFK = _("$<%1$> is AFK");

	return MV::Create(
GetId(), 3,
"""
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore

""",
"""

***MainInit***
***
declare netread Text[] Net_TMGame_AFK_AFKPlayerAccountIds for Teams[0];
declare netread Integer Net_TMGame_AFK_AFKPlayerAccountIdsUpdate for Teams[0];

declare Text[] AFKPlayerAccountIds;
declare Integer AFKPlayerAccountIdsUpdate;
***

***MainLoop***
***
if (AFKPlayerAccountIdsUpdate != Net_TMGame_AFK_AFKPlayerAccountIdsUpdate) {
	AFKPlayerAccountIdsUpdate = Net_TMGame_AFK_AFKPlayerAccountIdsUpdate;

	if (AFKPlayerAccountIds != Net_TMGame_AFK_AFKPlayerAccountIds) {
		if (ClientUI != Null) {
			foreach (Score in Scores) {
				if (Score.User != Null && Net_TMGame_AFK_AFKPlayerAccountIds.exists(Score.User.WebServicesUserId) && !AFKPlayerAccountIds.exists(Score.User.WebServicesUserId)) {
					ClientUI.SendChat(TL::Compose("{{{Text_AFK}}}", UserStore::GetPlayerName(Score.User, False)));
				}
			}
		}
		AFKPlayerAccountIds = Net_TMGame_AFK_AFKPlayerAccountIds;
	}
}

***
""",
[
	UIModules::Component()
],
[]
	);
}