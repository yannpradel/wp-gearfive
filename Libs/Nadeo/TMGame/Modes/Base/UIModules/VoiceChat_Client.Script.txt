/**
 *  UI module: VoiceChat client side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/TMGame/Modes/Base/UIModules/VoiceChat_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ButtonStyles.Script.txt" as ButtonStyles
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/VoiceChat_Common.Script.txt" as UIModules_VoiceChat_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_MaxWidth 50.
#Const C_PlayerHeight 5.
#Const C_MaxHeight 35.
#Const C_MaxPlayers 3

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_VoiceChat_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_VoiceChat_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	/* Players speaking list */
	declare Vec2 Size_Bg = <C_MaxWidth, C_PlayerHeight>;

	declare Vec2 Pos_PlayerName = <-Size_Bg.X * 0.15, -Size_Bg.Y * 0.05>;
	declare Vec2 Pos_PlayerSpeaker = <-Size_Bg.X * 0.12, 0.>;

	declare Text ML_List_Players = "";
	declare Real PosY = C_MaxHeight * 0.3;
	for (I, 1, C_MaxPlayers) {
		ML_List_Players ^= """
		<frameinstance
			id="frame-player-{{{I}}}"
			z-index="1"
			modelid="framemodel-player"
			pos="0 {{{PosY}}}"
			halign="right"
			valign="top"
			hidden="1"
		/>
		""";
		PosY -= Size_Bg.Y;
	}

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-semibold" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textcolor="ffffff" textsize="1.5" halign="right" valign="center" textprefix="$t$i" />
	<style class="quad-base" halign="left" valign="center"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-player">
	<quad id="quad-left" size="{{{Size_Bg.X * 0.05}}} {{{Size_Bg.Y}}}" pos="{{{-Size_Bg.X * 0.95}}} 0" image="{{{ButtonStyles::C_ImageUrl_ButtonExtraRounded_Start_Vertical}}}" halign="right" valign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" z-index="0"/>
	<quad id="quad-center" size="{{{Size_Bg.X * 0.9}}} {{{Size_Bg.Y}}}" pos="{{{-Size_Bg.X * 0.05}}} 0" halign="right" valign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" z-index="0"/>
	<quad id="quad-right" size="{{{Size_Bg.X * 0.05}}} {{{Size_Bg.Y}}}" image="{{{ButtonStyles::C_ImageUrl_ButtonExtraRounded_End_Vertical}}}" halign="right" valign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" z-index="0"/>

	<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" pos="{{{Pos_PlayerName.X}}} {{{Pos_PlayerName.Y}}}" z-index="2" data-size="{{{Size_Bg.X * 0.83}}} {{{Size_Bg.Y - 1}}}" data-halign="right" data-valign="center" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-textsize="2." />
	<quad id="quad-speaker" size="4 4" image="{{{Icons::C_Icon_128x128_Speaker_On}}}" pos="{{{Pos_PlayerSpeaker.X}}} {{{Pos_PlayerSpeaker.Y}}}" colorize="FFF" class="quad-base" z-index="2"/>
	<quad id="quad-muted" hidden="1" size="4 4" image="{{{Icons::C_Icon_128x128_Micro_Off}}}" pos="{{{Pos_PlayerSpeaker.X}}} {{{Pos_PlayerSpeaker.Y}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" class="quad-base" z-index="2"/>
</framemodel>

<!-- Frame global -->
<frame z-index="-2" hidden="1" id="frame-global">
	<frame {{{UIModules::CustomizableUIModule(UIModules_VoiceChat_Common::C_UIModuleConfig)}}}>
		<frame id="frame-voicechat" size="{{{C_MaxWidth}}} {{{C_MaxHeight}}}" halign="right" valign="center">
			<!-- Players list -->
			{{{ML_List_Players}}}
		</frame>
	</frame>
</frame>
""",
"""
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform

#Struct K_Speaker {
	Text WebServicesUserId;
	{{{PlayerName::P}}}K_UserInfo UserInfo;
}
""",
"""
Void ShowPlayerSpeaking(CMlFrame _Frame_Player, K_Speaker _Speaker, Boolean _IsFirstPlayerDisplayed, Boolean _IsLastPlayerDisplayed) {
	if (_Frame_Player == Null) return;
	declare CMlFrame PlayerName_Name = (_Frame_Player.GetFirstChild("playername-name") as CMlFrame);
	declare CMlQuad Quad_Speaker = (_Frame_Player.GetFirstChild("quad-speaker") as CMlQuad);
	declare CMlQuad Quad_Muted = (_Frame_Player.GetFirstChild("quad-muted") as CMlQuad);
	declare CMlQuad Quad_Left = (_Frame_Player.GetFirstChild("quad-left") as CMlQuad);
	declare CMlQuad Quad_Right = (_Frame_Player.GetFirstChild("quad-right") as CMlQuad);

	// Adapt background corners
	if (_IsFirstPlayerDisplayed) {
		Quad_Left.ImageUrl = "{{{ButtonStyles::C_ImageUrl_ButtonExtraRounded_Start_Vertical}}}";
	} else {
		Quad_Left.ImageUrl = "";
	}
	if (_IsLastPlayerDisplayed) {
		Quad_Right.ImageUrl = "{{{ButtonStyles::C_ImageUrl_ButtonExtraRounded_End_Vertical}}}";
	} else {
		Quad_Right.ImageUrl = "";
	}

	// Update player informations
	Quad_Speaker.Visible = True;
	Quad_Muted.Visible = False;
	{{{PlayerName::P}}}SetUserInfo(This, PlayerName_Name, _Speaker.UserInfo, False);
	if (_Speaker.WebServicesUserId == LocalUser.WebServicesUserId) {
		{{{PlayerName::P}}}SetTextColor(This, PlayerName_Name, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}}, False);
		Quad_Speaker.Colorize = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}};
	} else {
		{{{PlayerName::P}}}SetTextColor(This, PlayerName_Name, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight)}}}, False);
		Quad_Speaker.Colorize = <1., 1., 1.>;
	}
	{{{PlayerName::P}}}Redraw(This, PlayerName_Name);
	_Frame_Player.Visible = True;
}

Void ShowLocalPlayerMuted(CMlFrame _Frame_Player, Boolean _IsFirstPlayerDisplayed, Boolean _IsLastPlayerDisplayed) {
	if (_Frame_Player == Null) return;
	declare CMlFrame PlayerName_Name = (_Frame_Player.GetFirstChild("playername-name") as CMlFrame);
	declare CMlQuad Quad_Speaker = (_Frame_Player.GetFirstChild("quad-speaker") as CMlQuad);
	declare CMlQuad Quad_Muted = (_Frame_Player.GetFirstChild("quad-muted") as CMlQuad);
	declare CMlQuad Quad_Left = (_Frame_Player.GetFirstChild("quad-left") as CMlQuad);
	declare CMlQuad Quad_Right = (_Frame_Player.GetFirstChild("quad-right") as CMlQuad);

	// Adapt background corners
	if (_IsFirstPlayerDisplayed) {
		Quad_Left.ImageUrl = "{{{ButtonStyles::C_ImageUrl_ButtonExtraRounded_Start_Vertical}}}";
	} else {
		Quad_Left.ImageUrl = "";
	}
	if (_IsLastPlayerDisplayed) {
		Quad_Right.ImageUrl = "{{{ButtonStyles::C_ImageUrl_ButtonExtraRounded_End_Vertical}}}";
	} else {
		Quad_Right.ImageUrl = "";
	}

	// Update player informations
	Quad_Speaker.Visible = False;
	Quad_Muted.Visible = True;
	{{{PlayerName::P}}}SetUser(This, PlayerName_Name, LocalUser, False, False);
	{{{PlayerName::P}}}SetTextColor(This, PlayerName_Name, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}}, False);
	{{{PlayerName::P}}}Redraw(This, PlayerName_Name);

	_Frame_Player.Visible = True;
}

Void HidePlayer(CMlFrame _Frame_Player) {
	if (_Frame_Player == Null) return;
	_Frame_Player.Visible = False;
}

Void ProcessEventPlayerSpeaking(Boolean _LocalPlayerIsMuted, K_Speaker[] _Speakers, CMlFrame[] _Frames_Players) {
	declare Integer I = 0;
	declare Boolean IsLastPlayerDisplayed = False;
	declare Boolean IsFirstPlayerDisplayed = False;

	// Show this UI only if local player not alone in channel
	if (UserMgr.VoiceChat_Users_Remote.count > 0) {

		// Show if local player is muted
		if (_LocalPlayerIsMuted) {
			ShowLocalPlayerMuted(_Frames_Players[I], True, _Speakers.count == 0);
			I += 1;
		}

		// Show players speaking
		foreach (User in _Speakers) {
			IsFirstPlayerDisplayed = (I == 0);
			IsLastPlayerDisplayed = (_LocalPlayerIsMuted && I == _Speakers.count) || (!_LocalPlayerIsMuted && (I+1) == _Speakers.count);
			ShowPlayerSpeaking(_Frames_Players[I], User, IsFirstPlayerDisplayed, IsLastPlayerDisplayed);
			I += 1;
			if (I == {{{C_MaxPlayers}}}) break;
		}
	}

	// Hide other frames
	for (J, I, ({{{C_MaxPlayers}}} - 1)) {
		HidePlayer(_Frames_Players[J]);
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_VoiceChat;
declare CMlFrame[] Frames_Players;

declare Boolean DisplayModule;
declare K_Speaker[] Speakers;
declare Boolean LocalUserMuted;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_VoiceChat <=> (Frame_Global.GetFirstChild("frame-voicechat") as CMlFrame);
Frames_Players = [
	(Frame_Global.GetFirstChild("frame-player-1") as CMlFrame),
	(Frame_Global.GetFirstChild("frame-player-2") as CMlFrame),
	(Frame_Global.GetFirstChild("frame-player-3") as CMlFrame)
];

declare netread Boolean Net_Race_VoiceChat_IsVisible for UI;

DisplayModule = Frame_Global.Visible;
if (SplitScreenCount > 1) MV_Utils::AutoScaleSplitScreen(Frame_Global, 0.5, 1.);
LocalUserMuted = False;

// Must move this UI to respect safe area on Playstation (see /trackmania-next/tmnext/-/issues/5086)
if (Platform::IsSony(System)) {
	Frame_VoiceChat.RelativePosition_V3.X = Frame_VoiceChat.RelativePosition_V3.X - 14.;
}
***

***MainLoop***
***
if (PageIsVisible) {
	if (DisplayModule != UserMgr.VoiceChat_DisplayUI && Net_Race_VoiceChat_IsVisible) {
		DisplayModule = UserMgr.VoiceChat_DisplayUI && Net_Race_VoiceChat_IsVisible;
		Frame_Global.Visible = UserMgr.VoiceChat_DisplayUI && Net_Race_VoiceChat_IsVisible;
		Speakers.clear();
		ProcessEventPlayerSpeaking(LocalUserMuted, Speakers, Frames_Players);
	}

	if (LocalUser.VoiceChat != Null && LocalUserMuted != LocalUser.VoiceChat.IsMuted) {
		LocalUserMuted = LocalUser.VoiceChat.IsMuted;
		ProcessEventPlayerSpeaking(LocalUserMuted, Speakers, Frames_Players);
	}

	/* Voice chat events */
	foreach (Event in UserMgr.VoiceChat_Events) {
		switchtype (Event as E) {
			case CVoiceChatEvent_SpeakingUsersChanged: {
				Speakers.clear();
				foreach (Speaker in UserMgr.VoiceChat_Users_Speaking) {
					if (Speaker.MatchingPlayerInfo != Null) {
						Speakers.add(K_Speaker {
							WebServicesUserId = Speaker.MatchingPlayerInfo.WebServicesUserId,
							UserInfo = {{{PlayerName::P}}}GetUserInfo(Speaker.MatchingPlayerInfo, False)
						});
					}
				}
				ProcessEventPlayerSpeaking(LocalUserMuted, Speakers, Frames_Players);
			}
		}
	}
}
***
""",
[
	PlayerName::ComponentV2(),
	UIModules::Component()
],
[]
	);
}