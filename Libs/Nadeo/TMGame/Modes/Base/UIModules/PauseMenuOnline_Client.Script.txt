/**
 *	UI module: PauseMenuOnline client side
 */
#Const Version		"1.0.1"
#Const ScriptName "Libs/Nadeo/TMGame/Modes/Base/UIModules/PauseMenuOnline_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/MedalStack.Script.txt" as MedalStack
#Include "Libs/Nadeo/CMGame/Components/MenuButtonList.Script.txt" as MenuButtonList
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CMGame/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/Record_Client.Script.txt" as RecordsModule
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/ScoresTable_Visibility_Component.Script.txt" as ScoresTableVisibility
#Include "Libs/Nadeo/TMGame/Modes/ZIndex.Script.txt" as ZIndex
#Include "Libs/Nadeo/TMGame/Utils/Images.Script.txt" as Images
#Include "Libs/Nadeo/Trackmania/Components/Credits.Script.txt" as Credits
#Include "Libs/Nadeo/Trackmania/Components/Maniapubs.Script.txt" as Maniapubs
#Include "Libs/Nadeo/Trackmania/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/Trackmania/Components/ProfilePlayerInfo.Script.txt" as ProfilePlayerInfo
#Include "Libs/Nadeo/Trackmania/Components/ScriptSettingsEditor.Script.txt" as ScriptSettingsEditor
#Include "Libs/Nadeo/Trackmania/Components/Settings.Script.txt" as Settings
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as MenuConsts
#Include "Libs/Nadeo/Trackmania/Stores/MapStore_ML.Script.txt" as MapStore
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/Trackmania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/Trackmania/Components/FavoriteMapsTools.Script.txt" as FavoriteMapsTools
#Include "Libs/Nadeo/Trackmania/Components/PopUpReportSystem.Script.txt" as PopUpReportSystem
#Include "Libs/Nadeo/Trackmania/Modes/TimeAttackDaily/UIModules/DailyTrackerTA_Client.Script.txt" as DailyTrackerTAModule
#Include "Libs/Nadeo/Trackmania/Modes/COTDQualifications/UIModules/Ranking_Client.Script.txt" as COTDQualificationsRanking

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Online_PauseMenu"
#Const C_Type CUILayer::EUILayerType::InGameMenu

#Const C_Name "pause-menu-online" //< Component name
#Const P "PauseMenuOnline_" //< Prefix use to differentiate functions/variables in the script

#Const C_NavGroupMenu_Global "navgroup-pausemenu-global"
#Const C_NavGroupMenu "navgroup-pausemenu"
#Const C_NavGroupMenu_Help "navgroup-pausemenu-help"
#Const C_NavGroupMenu_Teams "navgroup-pausemenu-teams"
#Const C_NavGroupMenu_Options "navgroup-pausemenu-options"
#Const C_NavGroupMenu_Server "navgroup-pausemenu-server"
#Const C_NavGroupMenu_ValidationServer "navgroup-pausemenu-validation-server"
#Const C_NavGroupMenu_MapList "navgroup-pausemenu-map-list"
#Const C_NavGroupMenu_Profile "navgroup-pausemenu-profile"
#Const C_NavGroupMenu_Report "navgroup-pausemenu-report"
#Const C_NavGroupMenu_Settings "navgroup-pausemenu-settings"
#Const C_NavGroupMenu_Credits "navgroup-pausemenu-credits"
#Const C_NavGroupMenu_Vote "navgroup-pausemenu-vote"

#Const C_Row_Resume 0
#Const C_Row_Join 1
#Const C_Row_FavoriteMap 2
#Const C_Row_ScoresTable 3
#Const C_Row_Records 4
#Const C_Row_COTDScores 5
#Const C_Row_Spectate 6
#Const C_Row_Invite 7
#Const C_Row_Team 8
#Const C_Row_Options 9
#Const C_Row_UbiConnect 10
#Const C_Row_Margin 11
#Const C_Row_Footer 12

#Const C_Row_Profile 0
#Const C_Row_SaveReplay 1
#Const C_Row_SavePreviousReplay 2
#Const C_Row_SaveMap 3
#Const C_Row_ServerOptions 4
#Const C_Row_Help 5
#Const C_Row_MuteAll 6
#Const C_Row_Settings 7
#Const C_Row_Margin_Bis 8
#Const C_Row_Report 9
#Const C_Row_Footer_Bis 10

#Const C_Event_RecordUpdated "PauseMenuOnline_Event_RecordUpdated"

#Const C_Choice_No 0
#Const C_Choice_Yes 1
#Const C_Choices_ValidateServer [
	0 => _("No"),
	1 => _("Yes")
]

#Const C_Choice_Cancel 0
#Const C_Choice_Leave 1
#Const C_Choices_LeaveMatch [
	//L16N [PauseMenu Online] Stay on the server and keep playing on it
	0 => _("Cancel"),
	//L16N [PauseMenu Online] Leave the server
	1 => _("Leave")
]

//L16N [PauseMenu Online] %1 MUST STAY AT THE END OF THE STRING !!! %1 will be replaced by the name of the author of the track, e.g. "by PlayerA". If your language does not permit to keep the %1 at the end of the string, do not translate "By" and just keep the text "%1"
#Const C_Text_AuthorName _("|NameOnTheRight|By %1")

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *	@return										The module manialink
 */
Text GetML() {
	declare Vec2 RaceMenuSize = <128., 10.>;

	//L16N [PauseMenu Online] Pause menu title
	declare Text Pause_Text =	_("Pause");
	//L16N [PauseMenu Online] Show the game mode description
	declare Text Help_Text = _("Help");
	//L16N [PauseMenu Online] Spectate
	declare Text Spectator_Text = _("Spectator");
	//L16N [PauseMenu Online] Access the records interface.
	declare Text Text_AccessRecords = _("Access records");
	//L16N [PauseMenu Online] Open the friends invitation system
	declare Text InviteFriends_Text = _("Invite friends");
	//L16N [PauseMenu Online] Only in Teams mode, button to change your team in the pause menu
	declare Text ChangeTeam_Text = _("Change team");
	// Do not translate "Ubisoft Connect"
	declare Text Text_UbiConnect = "Ubisoft Connect";
	//L16N [PauseMenu Online]
	declare Text Options_Text = _("Advanced options");
	//L16N [PauseMenu Online] To mute all players in the voice chat
	declare Text Text_MuteAll = _("Mute all players");
	//L16N [PauseMenu Online] To unmute all players in the voice chat
	declare Text Text_UnmuteAll = _("Unmute all players");
	//L16N [PauseMenu Online]
	declare Text Settings_Text = _("Settings");
	//L16N [PauseMenu Online] Button to open the report system
	declare Text Report_Text = _("Report");
	//L16N [PauseMenu Online]
	declare Text Server_Text = _("Manage server");
	//L16N [PauseMenu Online]
	declare Text Resume_Text = _("Resume");
	//L16N [PauseMenu Online] Display the scores table from a pause menu button
	declare Text ScoresTable_Text = _("Consult scores table");
	//L16N [PauseMenu] Access the COTD scores interface in HUD.
	declare Text Text_AccessCOTDScores = _("Access Cup of the Day scores");
	//L16N [PauseMenu Online]
	declare Text Exit_Text = _("Exit");
	//L16N [PauseMenu Online] Button to join the server where the user's match will continue
	declare Text Join_Text = _("Join the match server");

	//L16N [PauseMenu Online] %1 will be replaced by the name of the author of the track, e.g. "by Darrek"
	declare Text By_Text = _("by %1");

	//L16N [PauseMenu Online]
	declare Text OK_Text = _("OK");

	//L16N [PauseMenu Online] Only in Teams mode, choose your team
	declare Text ChooseTeam_Text = _("Choose your team");
	//L16N [PauseMenu Online] Only in Teams mode, %1 will be replaced by the name of the team, e.g "Join Red"
	declare Text JoinTeam_Text = _("Join %1");

	//L16N [PauseMenu Online] Open the player profile of the selected player
	declare Text PlayerProfile_Text = _("Player profile");
	//L16N [PauseMenu Online] Save the current replay
	declare Text SaveReplay_Text = _("Save replay");
	//L16N [PauseMenu Online] Save the previous replay
	declare Text SavePrevReplay_Text = _("Save previous replay");
	//L16N [PauseMenu Online] Save the current track
	declare Text SaveMap_Text = _("Save track");
	declare Text Back_Text = _("Back");

	//L16N [PauseMenu Online] Restart the current track
	declare Text Restart_Text = _("Restart");
	//L16N [PauseMenu Online] Go to the next track
	declare Text NextMap_Text = _("Next track");
	//L16N [PauseMenu Online] Open the track list
	declare Text GoToMapList_Text = _("Go to track list");
	//L16N [PauseMenu Online] Adjust the teams so that they are balanced in terms of number of players per teams
	declare Text BalanceTeams_Text = _("Balance teams");
	//L16N [PauseMenu Online] Copy the join manialink
	declare Text CopyServerLink_Text = _("Copy server link");
	//L16N [PauseMenu Online]
	declare Text ModeSettings_Text = _("Mode settings");

	//L16N [PauseMenu Online] Track List menu title
	declare Text Map_List_Text = _("Select next track");
	//L16N [PauseMenu Online] Text displayed to indicate to the player that there is no currently selected track.
	declare Text SelectedMap_Text = _("No selected track");
	//L16N [PauseMenu Online] Select the next track
	declare Text SetNextMap_Text = _("Set next track");
	//L16N [PauseMenu Online] Go directly to the selected track
	declare Text JumpMap_Text = _("Jump to track");

	//L16N [PauseMenu Online] Title of the pop-up displayed when the player wants to leave the match.
	declare Text Text_LeaveMatch = _("Leave match");
	//L16N [PauseMenu Online] Title of the pop-up displayed when the player needs to validate their server choice.
	declare Text Text_ValidateServer = _("Validate your choice");
	//L16N [PauseMenu Online] Title of the pop-up displayed when the vote to skip the current track is unavailable.
	declare Text Text_VoteUnavailable = _("Vote unavailable");
	//L16N [PauseMenu Online] Message explaining to the player that they are about to leave the match.
	declare Text Text_LeaveMatchConfirm = _("Are you really sure you want to leave the match?");
	//L16N [PauseMenu Online] Only in matchmaking mode, warning for the player when they try to leave the match
	declare Text Text_LeaveMatchConfirmMatchmaking = _("Leaving too many matches in matchmaking can lead to a $<$C12temporary ban$>");
	// Description of the unavailable vote pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_VoteUnavailable = [
		//L16N [PauseMenu Online] Message explaining to the player that is not possible to vote to change a given setting
		PopUpMultiChoice::CreateDescriptionPart(_("It is currently not possible to vote for this server setting."), <120., 30.>, 3., Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold), "$t$i", <1., 1., 1.>, False)
	];

	// Map List Scroll
	declare Integer MapColumnsNb = 1;
	declare Integer MapRowsNb = 8;
	declare Integer MapsPerPage = MapColumnsNb * MapRowsNb;
	declare Vec2 Size_MapsScrollWindow = <RaceMenuSize.X *0.6, RaceMenuSize.Y * MapRowsNb * 0.9>;
	declare Vec2 Size_MapsMargin = <0., 0.>;
	declare Vec2 Size_Map = Scroll::GetElementSize(Size_MapsScrollWindow, Size_MapsMargin, MapColumnsNb, MapRowsNb);
	declare Vec2 Size_MapName = <Size_Map.X - 2., Size_Map.Y - 1.>;
	declare Vec2 Pos_MapName = <Size_Map.X * 0.5, Size_Map.Y * -0.5>;
	declare Integer MapsElementsNb = Scroll::GetRequiredElementsNb(Size_MapsScrollWindow, Size_Map, Size_MapsMargin, MapColumnsNb);

	declare Vec2 Size_MapHeader = <0., 0.>;
	declare Vec2 Size_MapFooter = <0., 0.>;

	declare ML_Maps = "";
	for (I, 1, MapsElementsNb) {
		ML_Maps ^= """
		<frameinstance
			hidden="1"
			modelid="framemodel-map-name"
			id="map{{{I}}}"
			class="{{{Scroll::C_Class_Element}}}"
		/>""";
	}

	// Team members scroll
	declare Integer TeamColumnsNb = 1;
	declare Integer TeamRowsNb = 8;
	declare Integer TeamMembersPerPage = TeamColumnsNb * TeamRowsNb;
	declare Vec2 Size_MembersScrollWindow = <RaceMenuSize.X*0.5, RaceMenuSize.Y * TeamRowsNb * 0.7>;
	declare Vec2 Size_MembersMargin = <0., 0.>;
	declare Vec2 Size_Member = Scroll::GetElementSize(Size_MembersScrollWindow, Size_MembersMargin, TeamColumnsNb, TeamRowsNb);
	declare Vec2 Size_MemberName = <Size_Member.X - 2., Size_Member.Y - 1.>;
	declare Vec2 Pos_MemberName = <Size_Member.X * 0.5, Size_Member.Y * -0.5>;
	declare Integer TeamMembersElementsNb = Scroll::GetRequiredElementsNb(Size_MembersScrollWindow, Size_Member, Size_MembersMargin, TeamColumnsNb);

	declare Vec2 Size_MemberHeader = <0., 0.>;
	declare Vec2 Size_MemberFooter = <0., 0.>;

	declare ML_TeamMembers = "";
	for (I, 1, TeamMembersElementsNb) {
		ML_TeamMembers ^= """
		<frameinstance
			hidden="1"
			modelid="framemodel-team-member"
			class="{{{Scroll::C_Class_Element}}}"
		/>""";
	}

	declare Vec2 Size_ListButton = <RaceMenuSize.X-3., (RaceMenuSize.X-3.)*64/748>;
	declare Vec2 Size_FooterButton = <Size_ListButton.X/2 + 1.5, (Size_ListButton.X/2 + 1.5)*88/388>;
	declare Vec2 Size_Background = <RaceMenuSize.X, RaceMenuSize.X*136/760.>;
	declare Real SizeY_AdjustedListButton = Size_ListButton.Y - (4*Size_ListButton.Y/64); //< Remove the outer pixel of the asset
	declare Real Margin = 1.;

	// Automatic rearranging list of button depending on buttons visibility
	// To add a new button, simply add a new row in the grid and its frameinstance in the ML
	// After buttons visibility update, the grid needs to be updated !
	declare GridConfig = Grid::Create(0., 0., 0., Grid::C_Direction_Bottom);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Resume, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Join, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_FavoriteMap, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_ScoresTable, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Records, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_COTDScores, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Spectate, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Invite, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Team, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_UbiConnect, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Options, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Margin, Margin, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Footer, Size_FooterButton.Y, Grid::C_Align_Center);
	GridConfig = Grid::SetSize(GridConfig, SizeY_AdjustedListButton * (GridConfig.Columns.count-2) + Margin + Size_FooterButton.Y);
	declare Grid = Grid::Compile(GridConfig);
	declare Text GridConfigJson = GridConfig.tojson();

	declare SubGridConfig = Grid::Create(0., 0., 0., Grid::C_Direction_Bottom);
	SubGridConfig = Grid::AddRow(SubGridConfig, C_Row_Profile, SizeY_AdjustedListButton, Grid::C_Align_Center);
	SubGridConfig = Grid::AddRow(SubGridConfig, C_Row_SaveReplay, SizeY_AdjustedListButton, Grid::C_Align_Center);
	SubGridConfig = Grid::AddRow(SubGridConfig, C_Row_SavePreviousReplay, SizeY_AdjustedListButton, Grid::C_Align_Center);
	SubGridConfig = Grid::AddRow(SubGridConfig, C_Row_SaveMap, SizeY_AdjustedListButton, Grid::C_Align_Center);
	SubGridConfig = Grid::AddRow(SubGridConfig, C_Row_ServerOptions, SizeY_AdjustedListButton, Grid::C_Align_Center);
	SubGridConfig = Grid::AddRow(SubGridConfig, C_Row_Help, SizeY_AdjustedListButton, Grid::C_Align_Center);
	SubGridConfig = Grid::AddRow(SubGridConfig, C_Row_MuteAll, SizeY_AdjustedListButton, Grid::C_Align_Center);
	SubGridConfig = Grid::AddRow(SubGridConfig, C_Row_Settings, SizeY_AdjustedListButton, Grid::C_Align_Center);
	SubGridConfig = Grid::AddRow(SubGridConfig, C_Row_Report, SizeY_AdjustedListButton, Grid::C_Align_Center);
	SubGridConfig = Grid::AddRow(SubGridConfig, C_Row_Margin_Bis, Margin, Grid::C_Align_Center);
	SubGridConfig = Grid::AddRow(SubGridConfig, C_Row_Footer_Bis, Size_FooterButton.Y, Grid::C_Align_Center);
	SubGridConfig = Grid::SetSize(SubGridConfig, SizeY_AdjustedListButton * (SubGridConfig.Columns.count-2) + Margin + Size_FooterButton.Y);
	declare SubGrid = Grid::Compile(SubGridConfig);
	declare Text SubGridConfigJson = SubGridConfig.tojson();

	// Maniapubs
	declare Vec2 Pos_Maniapubs = <75., -25.>;

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-default" halign="center" valign="center2" textsize="4" textprefix="$t$i" textcolor="FFF" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" />
	<style class="quad-default" halign="center" valign="center" />
</stylesheet>

<framemodel id="framemodel-map-name">
	<quad	size="{{{Size_Map.X}}} {{{Size_Map.Y}}}" opacity="0" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}" />
	<label id="label-map-name" size="{{{Size_MapName.X}}} {{{Size_MapName.Y}}}"	pos="{{{Pos_MapName.X}}} {{{Pos_MapName.Y}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" opacity="0.5" class="text-default" filter-profanities="OnlyIfNotTranslated" z-index="2"/>
</framemodel>
<framemodel id="framemodel-team-member">
	<quad	size="{{{Size_Member.X}}} {{{Size_Member.Y}}}" opacity="0" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}" />
	<label id="label-member-name" size="{{{Size_MemberName.X}}} {{{Size_MemberName.Y}}}" pos="{{{Pos_MemberName.X}}} {{{Pos_MemberName.Y}}}" textsize="3" class="text-default" z-index="2"/>
</framemodel>

<!-- Used only to capture inputs for the vote panel -->
<quad
	id="quad-vote"
	class="{{{Navigation::C_Class}}}"
	hidden="1"
	data-nav-inputs="action1;action2"
	data-nav-targets="_;_"
	data-nav-group="{{{C_NavGroupMenu_Vote}}}"
/>

<frame hidden="1" id="frame-global" z-index="{{{ZIndex::C_ZIndex_PauseMenuOnline}}}">
	<quad id="quad-background" bgcolor="000" size="320 180" fullscreen="1" halign="center" valign="center" z-index="-3" opacity=".6"/>
	<frameinstance id="frame-loading-spinner" modelid="{{{LoadingSpinner::C_Name}}}" z-index="5" data-label="{{{_("Retrieving track list...")}}}" />
	<frameinstance modelid="{{{MenuButtonList::C_Name}}}" id="frame-button-list-pausemenu-online" z-index="1"/>
	<frameinstance id="popupmultichoice-vote-unavailable" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_VoteUnavailable}}}" data-description="{{{TL::MLEncode(Description_VoteUnavailable.tojson())}}}" z-index="3" hidden="1"/>
	<frameinstance id="popupmultichoice-validate-server" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_ValidateServer}}}" data-choices="{{{TL::MLEncode(C_Choices_ValidateServer.tojson())}}}" z-index="3" hidden="1"/>
	<frameinstance id="popupmultichoice-leave-match" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_LeaveMatch}}}" data-choices="{{{TL::MLEncode(C_Choices_LeaveMatch.tojson())}}}" data-styles-secondchoice="{{{PopUpMultiChoice::C_ChoiceStyle_Default}}} {{{ExpendableButton::C_Style_ButtonWarning}}}" z-index="3" hidden="1"/>

	<frame id="frame-menu" pos="{{{MLHelpers::Skew(0., 35., 10.)}}}">
		<frame id="frame-header" pos="{{{MLHelpers::Skew(0., Size_Background.Y/2 + Margin, 10.)}}}">
			<quad id="quad-background" z-index="-1" size="{{{Size_Background.X}}} {{{Size_Background.Y}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}" image="{{{Images::C_ImageUrl_ModeMenu_Header}}}" class="quad-default"/>
			<label id="label-current-map-name" pos="{{{MLHelpers::Skew(-RaceMenuSize.X/2.+10., 2., 10.)}}}" z-index="1" size="{{{RaceMenuSize.X/2.}}} 10" halign="left" class="text-default" textsize="8" italicslope="0.2" filter-profanities="Always"/>
			<frameinstance id="playername-map-author" modelid="{{{PlayerName::C_Name}}}" pos="{{{MLHelpers::Skew(-RaceMenuSize.X/2.+10., -5., 10.)}}}" z-index="1" data-size="{{{RaceMenuSize.X/2.}}} 10" data-valign="center2" data-textsize="4" data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" data-textprefix="$t$i" data-textcompose="{{{C_Text_AuthorName}}}" />
			<frameinstance id="frameinstance-medal-stack" modelid="{{{MedalStack::C_Name}}}" pos="{{{RaceMenuSize.X * 0.25}}} -1" scale="0.8" data-bigmedaldirection="{{{MedalStack::C_BigMedal_Horizontal}}}" data-iscolorize="0" data-isingame="1" data-displayshadows="1"/>
		</frame>

		<frame id="frame-buttons-container" class="{{{Grid::C_Class_Container}}}" pos="{{{MLHelpers::Skew(0.5, 0., 10.)}}}">
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-resume"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Resume}}}"
				data-text="{{{Resume_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right"
				data-nav-targets="_;_;_;button-exit;button-join;frame-maniapubs"
				data-nav-group="{{{C_NavGroupMenu}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-join"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Join}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right"
				data-nav-targets="_;_;_;button-resume;button-favorite-map;frame-maniapubs"
				data-nav-group="{{{C_NavGroupMenu}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frame id="frame-favorite-map" class="{{{Grid::C_Class_Element}}}" data-grid-row="{{{C_Row_FavoriteMap}}}">
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-favorite-map"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{MenuConsts::C_AddFavoriteMap}}}"
					data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
					data-labelsize="{{{Size_ListButton.X-25.}}} {{{Size_ListButton.Y}}}"
					data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
					data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
					data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
					data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
					data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
					data-opacityunfocus=".9"
					data-textitalicslope=".2"
					data-textsize="4.5"
					data-textypos="-0.55"
					data-textopacityunfocus=".4"
					data-halign="center"
					data-valign="center"
					data-nav-inputs="select;cancel;appmenu;up;down;right"
					data-nav-targets="_;_;_;button-join;button-scorestable;frame-maniapubs"
					data-nav-group="{{{C_NavGroupMenu}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
				<frameinstance id="frame-loading-spinner-favorite-map" z-index="3" scale="0.5" pos="55 0" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" modelid="{{{LoadingSpinner::C_Name}}}"/>
			</frame>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-scorestable"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_ScoresTable}}}"
				data-text="{{{ScoresTable_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right"
				data-nav-targets="_;_;_;button-favorite-map;button-records;frame-maniapubs"
				data-nav-group="{{{C_NavGroupMenu}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-records"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Records}}}"
				data-text="{{{Text_AccessRecords}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right"
				data-nav-targets="_;_;_;button-scorestable;button-cotd-ranking;frame-maniapubs"
				data-nav-group="{{{C_NavGroupMenu}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-cotd-ranking"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_COTDScores}}}"
				data-text="{{{Text_AccessCOTDScores}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right"
				data-nav-targets="_;_;_;button-records;button-spectator;frame-maniapubs"
				data-nav-group="{{{C_NavGroupMenu}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frame id="frame-button-spectator" class="{{{Grid::C_Class_Element}}}" data-grid-row="{{{C_Row_Spectate}}}">
				<quad z-index="2" pos="35 0" size="6 6" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}" image="{{{Icons::C_Icon_128x128_CheckBox_Inactive}}}" class="quad-default"/>
				<quad id="checkbox-spectator" hidden="1" z-index="2" pos="35 0" size="6 6" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" image="{{{Icons::C_Icon_128x128_CheckBox_Active}}}" class="quad-default"/>
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-spectator"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{Spectator_Text}}}"
					data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
					data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
					data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
					data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
					data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
					data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
					data-opacityunfocus=".9"
					data-textitalicslope=".2"
					data-textsize="4.5"
					data-textypos="-0.55"
					data-textopacityunfocus=".4"
					data-halign="center"
					data-valign="center"
					data-nav-inputs="select;cancel;appmenu;up;down;right"
					data-nav-targets="_;_;_;button-cotd-ranking;button-invite-friends;frame-maniapubs"
					data-nav-group="{{{C_NavGroupMenu}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
			</frame>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-invite-friends"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Invite}}}"
				data-text="{{{InviteFriends_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right"
				data-nav-targets="_;_;_;button-spectator;button-change-team;frame-maniapubs"
				data-nav-group="{{{C_NavGroupMenu}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-change-team" hidden="1"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Team}}}"
				data-text="{{{ChangeTeam_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right"
				data-nav-targets="_;_;_;button-invite-friends;button-ubi-connect;frame-maniapubs"
				data-nav-group="{{{C_NavGroupMenu}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-ubi-connect"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_UbiConnect}}}"
				data-text="{{{Text_UbiConnect}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right"
				data-nav-targets="_;_;_;button-change-team;button-options;frame-maniapubs"
				data-nav-group="{{{C_NavGroupMenu}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-options"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Options}}}"
				data-text="{{{Options_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Round_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Round_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right"
				data-nav-targets="_;_;_;button-ubi-connect;button-exit;frame-maniapubs"
				data-nav-group="{{{C_NavGroupMenu}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frame id="frame-footer" class="{{{Grid::C_Class_Element}}}" data-grid-row="{{{C_Row_Footer}}}">
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-exit"
					pos="{{{-Size_FooterButton.X/2 + 1.2}}} 0."
					class="{{{Navigation::C_Class}}}"
					data-text="{{{Exit_Text}}}"
					data-size="{{{Size_FooterButton.X}}} {{{Size_FooterButton.Y}}}"
					data-labelsize="{{{Size_FooterButton.X-30.}}} {{{Size_FooterButton.Y}}}"
					data-textxpos="0.55"
					data-opacityunfocus=".9"
					data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Exit_Round}}}"
					data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Exit_Round}}}"
					data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
					data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
					data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
					data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-icon="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
					data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
					data-iconxpos=".2"
					data-iconypos="-.49"
					data-textsize="4.5"
					data-textopacityunfocus=".25"
					data-iconopacityunfocus=".25"
					data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
					data-textitalicslope=".2"
					data-halign="center"
					data-valign="center"
					data-nav-inputs="select;cancel;appmenu;up;down;right"
					data-nav-targets="_;_;_;button-options;button-resume;frame-maniapubs"
					data-nav-group="{{{C_NavGroupMenu}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
				<frame id="frame-error-message" pos="-3 -14">
					<frameinstance id="frame-bg-error" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_ListButton.X * 0.95}}}" data-height="{{{Size_ListButton.Y * 0.7}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextError)}}}" data-opacity="0." data-halign="center" data-valign="center2" z-index="-1"/>
					<label id="label-error" size="{{{Size_ListButton.X * 0.9}}} {{{Size_ListButton.Y}}}" halign="center" valign="center2" textprefix="$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textsize="3" textcolor="FFF"/>
				</frame>
			</frame>
		</frame>

		<frameinstance
			modelid="{{{Maniapubs::C_Name}}}" id="frame-maniapubs" hidden="1"
			pos="{{{Pos_Maniapubs.X*2}}} {{{Pos_Maniapubs.Y}}}"
			class="{{{Navigation::C_Class}}}"
			data-nav-inputs="select;cancel;left"
			data-nav-targets="_;_;button-resume"
			data-nav-group="{{{C_NavGroupMenu}}}"
			data-nav-zone="{{{Maniapubs::C_NavZone}}}"
		/>
	</frame>

	<frame id="frame-help" hidden="1" pos="{{{MLHelpers::Skew(0., 5., 10.)}}}">
		<quad id="quad-pop-up-help" z-index="-1" size="{{{RaceMenuSize.X}}} 90" class="quad-default" image="{{{Images::C_ImageUrl_ModeMenu_PopUp_PauseHelp}}}" opacity=".9"/>
		<label id="label-help-title" pos="{{{MLHelpers::Skew(0., 35., 10.)}}}" size="{{{RaceMenuSize.X*0.75}}} {{{RaceMenuSize.Y}}}" class="text-default" text="{{{Help_Text}}}" textsize="7" textemboss="1"/>
		<label id="label-help-description" pos="{{{MLHelpers::Skew(0., 0., 10.)}}}" size="{{{RaceMenuSize.X*0.65}}} 50" halign="center" autonewline="1" maxline="15" class="text-default" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textsize="2" filter-profanities="Always"/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-ok"
			pos="{{{MLHelpers::Skew(0., -35., 10.)}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{OK_Text}}}"
			data-size="{{{RaceMenuSize.X*0.5}}} {{{RaceMenuSize.Y}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-bgempty="1"
			data-textitalicslope=".2"
			data-textsize="4.5"
			data-textopacityunfocus=".4"
			data-halign="center"
			data-valign="center"
			data-nav-inputs="select;cancel;appmenu;up;down"
			data-nav-targets="_;_;_;_;_"
			data-nav-group="{{{C_NavGroupMenu_Help}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>

	<frame id="frame-report-system" class="{{{Navigation::C_Class}}}" data-nav-group="{{{C_NavGroupMenu_Report}}}" z-index="{{{ZIndex::C_ZIndex_PauseMenuOnline_Report}}}" hidden="1">
		<frameinstance id="frame-report-system-pause-menu-online" modelid="{{{PopUpReportSystem::C_Name}}}" />
	</frame>

	<frame id="frame-profile" class="{{{Navigation::C_Class}}}" data-nav-group="{{{C_NavGroupMenu_Profile}}}" z-index="{{{ZIndex::C_ZIndex_PauseMenuOnline_Profile}}}" hidden="1">
		<frameinstance
			modelid="{{{ProfilePlayerInfo::C_Name}}}"
			data-enable-players-pager="1"
			data-enable-zone-selection="0"
			data-enable-my-access-info="0"
		/>
	</frame>

	<frame id="frame-settings" class="{{{Navigation::C_Class}}}" data-nav-group="{{{C_NavGroupMenu_Settings}}}" z-index="{{{ZIndex::C_ZIndex_PauseMenuOnline_Settings}}}" hidden="1">
		<frameinstance modelid="{{{Settings::C_Name}}}" />
	</frame>

	<frame id="frame-credits" class="{{{Navigation::C_Class}}}" data-nav-group="{{{C_NavGroupMenu_Credits}}}" z-index="{{{ZIndex::C_ZIndex_PauseMenuOnline_Credits}}}" hidden="1">
		<frameinstance modelid="{{{Credits::C_Name}}}" />
	</frame>

	<frame id="frame-options" hidden="1" pos="{{{MLHelpers::Skew(0., 35., 10.)}}}">
		<frame id="frame-header" pos="{{{MLHelpers::Skew(0., Size_Background.Y/2 + Margin, 10.)}}}">
			<quad id="quad-background" z-index="-1" size="{{{Size_Background.X}}} {{{Size_Background.Y}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}" image="{{{Images::C_ImageUrl_ModeMenu_Header}}}" class="quad-default"/>
			<label id="label-sub-menu-title" pos="{{{MLHelpers::Skew(0., -2., 10.)}}}" z-index="1" size="{{{Size_Background.X*0.75}}} 10" text="{{{Options_Text}}}" class="text-default" textsize="7" italicslope="0.2"/>
		</frame>

		<frame id="frame-buttons-container-options" class="{{{Grid::C_Class_Container}}}" pos="{{{MLHelpers::Skew(-0.5, 5.25, 10.)}}}">
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-profile"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Profile}}}"
				data-text="{{{PlayerProfile_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-cancel;button-replay"
				data-nav-group="{{{C_NavGroupMenu_Options}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-replay"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_SaveReplay}}}"
				data-text="{{{SaveReplay_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-profile;button-prev-replay"
				data-nav-group="{{{C_NavGroupMenu_Options}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-prev-replay"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_SavePreviousReplay}}}"
				data-text="{{{SavePrevReplay_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-replay;button-map"
				data-nav-group="{{{C_NavGroupMenu_Options}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-map"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_SaveMap}}}"
				data-text="{{{SaveMap_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-prev-replay;button-server"
				data-nav-group="{{{C_NavGroupMenu_Options}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-server"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_ServerOptions}}}"
				data-text="{{{Server_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-map;button-help"
				data-nav-group="{{{C_NavGroupMenu_Options}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-help"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Help}}}"
				data-text="{{{Help_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-server;button-mute-all"
				data-nav-group="{{{C_NavGroupMenu_Options}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-mute-all"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_MuteAll}}}"
				data-text="{{{Text_MuteAll}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-help;button-settings"
				data-nav-group="{{{C_NavGroupMenu_Options}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-settings"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Settings}}}"
				data-text="{{{Settings_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-mute-all;button-report"
				data-nav-group="{{{C_NavGroupMenu_Options}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-report"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Report}}}"
				data-text="{{{Report_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Round_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Round_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-settings;button-cancel"
				data-nav-group="{{{C_NavGroupMenu_Options}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frame id="frame-footer" class="{{{Grid::C_Class_Element}}}" data-grid-row="{{{C_Row_Footer_Bis}}}">
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-cancel"
					pos="{{{-Size_FooterButton.X/2 + 1.2}}} -5.2"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{Back_Text}}}"
					data-size="{{{Size_FooterButton.X}}} {{{Size_FooterButton.Y}}}"
					data-labelsize="{{{Size_FooterButton.X-30.}}} {{{Size_FooterButton.Y}}}"
					data-textxpos="0.55"
					data-opacityunfocus=".9"
					data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Exit_Round}}}"
					data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Exit_Round}}}"
					data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
					data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
					data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
					data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-icon="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
					data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
					data-iconxpos=".2"
					data-iconypos="-.49"
					data-textsize="4.5"
					data-textopacityunfocus=".25"
					data-iconopacityunfocus=".25"
					data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
					data-textitalicslope=".2"
					data-halign="center"
					data-valign="center"
					data-nav-inputs="select;cancel;appmenu;up;down"
					data-nav-targets="_;_;_;button-report;button-profile"
					data-nav-group="{{{C_NavGroupMenu_Options}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
			</frame>
		</frame>
	</frame>

	<frame id="frame-teams" hidden="1" pos="0 10">
		<frame id="frame-pop-up-teams" z-index="-2">
			<frame id="frame-header" pos="8 50">
				<quad id="quad-background" z-index="-1" size="{{{RaceMenuSize.X * 1.3}}} 25" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}" image="{{{Images::C_ImageUrl_ModeMenu_Header}}}" class="quad-default" pos="0.25 -2."/>
				<label id="label-sub-menu-title" pos="2 -2" z-index="1" size="{{{RaceMenuSize.X*0.75}}} 10" text="{{{ChooseTeam_Text}}}" class="text-default" textsize="7" italicslope="0.2"/>
			</frame>
			<frame id="frame-body" pos="0.5 1">
				<quad id="quad-body" image="{{{MenuConsts::C_ImageUrl_Teams_Mode_Body}}}" size="{{{RaceMenuSize.X * 1.4 + 1.}}} 115" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}" class="quad-default" z-index="-2" opacity="0.9"/>
				<quad id="quad-body-gradient" image="{{{MenuConsts::C_ImageUrl_Teams_Mode_Body_Gradient}}}" size="{{{RaceMenuSize.X * 1.4 + 1.}}} 115" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" class="quad-default" z-index="-1" opacity="0.7"/>
				<quad id="quad-line-vertical" pos="-2.75 -9.5" class="quad-default" size="{{{RaceMenuSize.X * 1.2}}} 140" rot="2" image="{{{MenuConsts::C_ImageUrl_Teams_Mode_Separation_Line}}}"/>
				<quad id="quad-line-horizontal" pos="-8.4 -47.25" z-index="-1" class="quad-default" size="{{{RaceMenuSize.X*1.2+6.}}} 0.4" image="{{{MenuConsts::C_ImageUrl_Teams_Mode_Line_Horizontal}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" opacity="0.4"/>
			</frame>
		</frame>

		<frame id="frame-teams-infos" z-index="1">
			<label id="label-team-1" pos="{{{-RaceMenuSize.X*0.25}}} 28" size="{{{RaceMenuSize.X *0.6}}} {{{RaceMenuSize.Y}}}" class="text-default" textsize="7" italicslope=".2" filter-profanities="OnlyIfNotTranslated"/>
			<label id="label-team-2" pos="{{{RaceMenuSize.X*0.35}}} 28" size="{{{RaceMenuSize.X *0.6}}} {{{RaceMenuSize.Y}}}" class="text-default" textsize="7" italicslope=".2" filter-profanities="OnlyIfNotTranslated"/>

			<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-team-1-members" />
			<frame id="frame-scroll-team-1-members"
				pos="{{{-RaceMenuSize.X/2.-2.}}} 22"
				data-elements-per-line="{{{TeamColumnsNb}}}"
				data-elements-per-page="{{{TeamMembersPerPage}}}"
				data-element-size="{{{Size_Member.X}}} {{{Size_Member.Y}}}"
				data-margin-size="{{{Size_MembersMargin.X}}} {{{Size_MembersMargin.Y}}}"
				data-window-size="{{{Size_MembersScrollWindow.X}}} {{{Size_MembersScrollWindow.Y}}}"
				data-header-height="{{{Size_MemberHeader.Y}}}"
				data-footer-height="{{{Size_MemberFooter.Y}}}"
				data-scroll-indicator="1"
				data-scroll-indicator-y-offset="-5"
				data-scroll-indicator-x-offset="-10"
				data-scroll-indicator-image="{{{Icons::C_Icon_128x128_Arrow_Bottom_Oblique}}}"
				data-scroll-indicator-colorize="FFFFFF"
				data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_Never}}}"
				data-skew="-10"
				data-skew-valign="{{{Scroll::C_SkewVAlign_Top}}}"
				data-nav-group="{{{C_NavGroupMenu_Teams}}}"
				data-nav-inputs="select;cancel;appmenu;down"
				data-nav-targets="_;_;_;button-team-1"
				class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}" >
				<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
				{{{ML_TeamMembers}}}
			</frame>

			<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-team-2-members" />
			<frame id="frame-scroll-team-2-members"
				pos="10 22"
				data-elements-per-line="{{{TeamColumnsNb}}}"
				data-elements-per-page="{{{TeamMembersPerPage}}}"
				data-element-size="{{{Size_Member.X}}} {{{Size_Member.Y}}}"
				data-margin-size="{{{Size_MembersMargin.X}}} {{{Size_MembersMargin.Y}}}"
				data-window-size="{{{Size_MembersScrollWindow.X}}} {{{Size_MembersScrollWindow.Y}}}"
				data-header-height="{{{Size_MemberHeader.Y}}}"
				data-footer-height="{{{Size_MemberFooter.Y}}}"
				data-scroll-indicator="1"
				data-scroll-indicator-y-offset="-5"
				data-scroll-indicator-x-offset="-10"
				data-scroll-indicator-image="{{{Icons::C_Icon_128x128_Arrow_Bottom_Oblique}}}"
				data-scroll-indicator-colorize="FFFFFF"
				data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_Never}}}"
				data-skew="-10"
				data-skew-valign="{{{Scroll::C_SkewVAlign_Top}}}"
				data-nav-group="{{{C_NavGroupMenu_Teams}}}"
				data-nav-inputs="select;cancel;appmenu;down"
				data-nav-targets="_;_;_;button-team-2"
				class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}">
				<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
				{{{ML_TeamMembers}}}
			</frame>
		</frame>

		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-team-1"
			pos="-48.9 -51.2"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{JoinTeam_Text}}}"
			data-size="{{{RaceMenuSize.X*0.64}}} {{{RaceMenuSize.Y*0.95}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-imagefocus="{{{MenuConsts::C_ImageUrl_Teams_Mode_Button_Obtuse_Corner}}}"
			data-focuscolor="FFF"
			data-bgempty="1"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-opacityunfocus=".9"
			data-textitalicslope=".2"
			data-textsize="4.5"
			data-textypos="-0.55"
			data-textopacityunfocus=".4"
			data-halign="center"
			data-valign="center"
			data-nav-inputs="select;cancel;appmenu;up;down;right"
			data-nav-targets="_;_;_;frame-scroll-team-1-members;button-cancel-teams;button-team-2"
			data-nav-group="{{{C_NavGroupMenu_Teams}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>

		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-team-2"
			pos="32.5 -51"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{JoinTeam_Text}}}"
			data-size="{{{RaceMenuSize.X*0.635}}} {{{RaceMenuSize.Y}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-imagefocus="{{{MenuConsts::C_ImageUrl_Teams_Mode_Button_Round_Corner}}}"
			data-focuscolor="FFF"
			data-bgempty="1"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-opacityunfocus=".9"
			data-textitalicslope=".2"
			data-textsize="4.5"
			data-textypos="-0.55"
			data-textopacityunfocus=".4"
			data-halign="center"
			data-valign="center"
			data-nav-inputs="select;cancel;appmenu;up;down;left"
			data-nav-targets="_;_;_;frame-scroll-team-2-members;button-cancel-teams;button-team-1"
			data-nav-group="{{{C_NavGroupMenu_Teams}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>

		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-cancel-teams"
			pos="{{{-RaceMenuSize.X/4.-28.25}}} -65"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Back_Text}}}"
			data-size="{{{RaceMenuSize.X/2.}}} {{{RaceMenuSize.Y+4.}}}"
			data-labelsize="{{{RaceMenuSize.X/2.-30}}} {{{RaceMenuSize.Y+4.}}}"
			data-textxpos="0.55"
			data-opacityunfocus=".9"
			data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Exit_Round}}}"
			data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Exit_Round}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-icon="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
			data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
			data-iconxpos=".2"
			data-iconypos="-.49"
			data-textsize="4.5"
			data-textopacityunfocus=".25"
			data-iconopacityunfocus=".25"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-textitalicslope=".2"
			data-halign="center"
			data-valign="center"
			data-nav-inputs="select;cancel;appmenu;up"
			data-nav-targets="_;_;_;button-team-1"
			data-nav-group="{{{C_NavGroupMenu_Teams}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>

	<frame id="frame-server" hidden="1">
		<frameinstance id="frame-script-settings" modelid="{{{ScriptSettingsEditor::C_Name}}}" z-index="3"/>
		<frame id="frame-server-menu" pos="{{{MLHelpers::Skew(-0.5, 25., 10.)}}}">
			<frame id="frame-header" pos="{{{MLHelpers::Skew(0.5, 12., 10.)}}}">
				<quad id="quad-background" z-index="-1" size="{{{RaceMenuSize.X}}} {{{RaceMenuSize.X*136/760.}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}" image="{{{Images::C_ImageUrl_ModeMenu_Header}}}" class="quad-default"/>
				<label id="label-sub-menu-title" pos="{{{MLHelpers::Skew(0., -2., 10.)}}}" z-index="1" size="{{{RaceMenuSize.X*0.75}}} 10" text="{{{Server_Text}}}" class="text-default" textsize="7" italicslope="0.2"/>
			</frame>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-restart"
				pos="{{{MLHelpers::Skew(0., 0., 10.)}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{Restart_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-cancel-server;button-next-map"
				data-nav-group="{{{C_NavGroupMenu_Server}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-next-map"
				pos="{{{MLHelpers::Skew(0., -SizeY_AdjustedListButton, 10.)}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{NextMap_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-restart;button-go-to-map"
				data-nav-group="{{{C_NavGroupMenu_Server}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-go-to-map"
				pos="{{{MLHelpers::Skew(0., -2*SizeY_AdjustedListButton, 10.)}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{GoToMapList_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-next-map;button-balance-teams"
				data-nav-group="{{{C_NavGroupMenu_Server}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-balance-teams"
				pos="{{{MLHelpers::Skew(0., -3*SizeY_AdjustedListButton, 10.)}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{BalanceTeams_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-go-to-map;button-server-link"
				data-nav-group="{{{C_NavGroupMenu_Server}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-server-link"
				pos="{{{MLHelpers::Skew(0., -4*SizeY_AdjustedListButton, 10.)}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{CopyServerLink_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-balance-teams;button-mode-settings"
				data-nav-group="{{{C_NavGroupMenu_Server}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-mode-settings"
				pos="{{{MLHelpers::Skew(0., -5*SizeY_AdjustedListButton, 10.)}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{ModeSettings_Text}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Round_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Round_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4.5"
				data-textypos="-0.55"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-server-link;button-cancel-server"
				data-nav-group="{{{C_NavGroupMenu_Server}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-cancel-server"
				pos="{{{MLHelpers::Skew(-Size_FooterButton.X/2 + 0.75, -(6 * SizeY_AdjustedListButton + Margin), 10.)}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{Back_Text}}}"
				data-size="{{{RaceMenuSize.X/2.}}} {{{RaceMenuSize.Y+4.}}}"
				data-labelsize="{{{RaceMenuSize.X/2.-30}}} {{{RaceMenuSize.Y+4.}}}"
				data-textxpos="0.55"
				data-opacityunfocus=".9"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Exit_Round}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Exit_Round}}}"
				data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
				data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-icon="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-iconxpos=".2"
				data-iconypos="-.49"
				data-textsize="4.5"
				data-textopacityunfocus=".25"
				data-iconopacityunfocus=".25"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-textitalicslope=".2"
				data-halign="center" data-valign="top"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-mode-settings;button-restart"
				data-nav-group="{{{C_NavGroupMenu_Server}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
		</frame>
	</frame>

	<frame id="frame-map-list" hidden="1" pos="{{{MLHelpers::Skew(0., 10., 10.)}}}">
		<frame id="frame-header" pos="{{{MLHelpers::Skew(0., 49.5, 10.)}}}">
			<quad id="quad-background" z-index="-1" size="{{{MLHelpers::MLKeepRatioFromX(760., 136., RaceMenuSize.X*1.3)}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}" image="{{{Images::C_ImageUrl_ModeMenu_Header}}}" class="quad-default"/>
			<label id="label-sub-menu-title" z-index="1" size="{{{RaceMenuSize.X*0.75}}} 10" text="{{{Map_List_Text}}}" class="text-default" textsize="7" italicslope="0.2"/>
		</frame>
		<frame id="frame-body" pos="{{{MLHelpers::Skew(0.5, 0., 10.)}}}">
			<quad id="quad-body" image="{{{MenuConsts::C_ImageUrl_Teams_Mode_Body}}}" size="{{{MLHelpers::MLKeepRatioFromY(2256., 1408., 113.)}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}" class="quad-default" z-index="-2" opacity="0.9"/>
			<quad id="quad-body-gradient" image="{{{MenuConsts::C_ImageUrl_Teams_Mode_Body_Gradient}}}" size="{{{MLHelpers::MLKeepRatioFromY(2256., 1408., 113.)}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" class="quad-default" z-index="-1" opacity="0.7"/>
			<quad id="quad-line-vertical" z-index="-1" pos="{{{MLHelpers::Skew(0., -14., 10.)}}}" class="quad-default" size="{{{RaceMenuSize.X * 1.2}}} 160" rot="4.6" image="{{{MenuConsts::C_ImageUrl_Teams_Mode_Separation_Line}}}"/>

			<frame id="frame-left-side" pos="{{{MLHelpers::Skew(-40., 0., 10.)}}}">
				<label id="label-selected-map" pos="{{{MLHelpers::Skew(-32., 20., 10.)}}}" size="{{{RaceMenuSize.X*0.5}}} {{{RaceMenuSize.Y}}}" halign="left" text="{{{SelectedMap_Text}}}" textsize="6" class="text-default" filter-profanities="OnlyIfNotTranslated" />
				<label id="label-select-map-author" pos="{{{MLHelpers::Skew(-32., 13., 10.)}}}" z-index="1" size="{{{RaceMenuSize.X*0.5}}} {{{RaceMenuSize.Y}}}" halign="left" class="text-default" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" italicslope="0.2"/>
				<frameinstance id="frameinstance-medal-stack-select-map" pos="{{{MLHelpers::Skew(-15., -10., 10.)}}}" modelid="{{{MedalStack::C_Name}}}" data-bigmedaldirection="{{{MedalStack::C_BigMedal_Horizontal}}}" data-medaloffset="7.5" data-bigmedaloffset="6." data-iscolorize="0" data-isingame="1" data-displayshadows="1"/>
				<quad id="quad-line-horizontal-1" pos="{{{MLHelpers::Skew(0., -37., 10.)}}}" z-index="-1" class="quad-default" size="{{{RaceMenuSize.X*0.6 + 3.}}} 0.4" image="{{{MenuConsts::C_ImageUrl_Teams_Mode_Line_Horizontal}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" opacity="0.4"/>
				<quad id="quad-line-horizontal-2" pos="{{{MLHelpers::Skew(0., -47., 10.)}}}" z-index="-1" class="quad-default" size="{{{RaceMenuSize.X*0.6 + 3.}}} 0.4" image="{{{MenuConsts::C_ImageUrl_Teams_Mode_Line_Horizontal}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" opacity="0.4"/>
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-set-next"
					pos="{{{MLHelpers::Skew(0., -42., 10.)}}}"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{SetNextMap_Text}}}"
					data-size="{{{RaceMenuSize.X*0.64}}} {{{RaceMenuSize.Y*0.95}}}"
					data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
					data-imagefocus="{{{MenuConsts::C_ImageUrl_Teams_Mode_Button_Obtuse_Corner}}}"
					data-focuscolor="FFF"
					data-bgempty="1"
					data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
					data-opacityunfocus=".9"
					data-textitalicslope=".2"
					data-textsize="4.5"
					data-textypos="-0.55"
					data-textopacityunfocus=".4"
					data-halign="center" data-valign="center"
					data-nav-inputs="select;cancel;appmenu;up;down;right"
					data-nav-targets="_;_;_;button-cancel-map;button-jump;frame-scroll-maps"
					data-nav-group="{{{C_NavGroupMenu_MapList}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-jump"
					pos="{{{MLHelpers::Skew(0., -52., 10.)}}}"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{JumpMap_Text}}}"
					data-size="{{{RaceMenuSize.X*0.64}}} {{{RaceMenuSize.Y*0.95}}}"
					data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
					data-imagefocus="{{{MenuConsts::C_ImageUrl_Teams_Mode_Button_Obtuse_Corner}}}"
					data-focuscolor="FFF"
					data-bgempty="1"
					data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
					data-opacityunfocus=".9"
					data-textitalicslope=".2"
					data-textsize="4.5"
					data-textypos="-0.55"
					data-textopacityunfocus=".4"
					data-halign="center" data-valign="center"
					data-nav-inputs="select;cancel;appmenu;up;down;right"
					data-nav-targets="_;_;_;button-set-next;button-cancel-map;frame-scroll-maps"
					data-nav-group="{{{C_NavGroupMenu_MapList}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
			</frame>

			<frame id="frame-right-side" pos="{{{MLHelpers::Skew(0., -5., 10.)}}}">
				<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-maps" z-index="1" />
				<frame
						pos="{{{MLHelpers::Skew(0., 32., 10.)}}}"
						data-elements-per-line="{{{MapColumnsNb}}}"
						data-elements-per-page="{{{MapsPerPage}}}"
						data-element-size="{{{Size_Map.X}}} {{{Size_Map.Y}}}"
						data-margin-size="{{{Size_MapsMargin.X}}} {{{Size_MapsMargin.Y}}}"
						data-window-size="{{{Size_MapsScrollWindow.X}}} {{{Size_MapsScrollWindow.Y}}}"
						data-header-height="{{{Size_MapHeader.Y}}}"
						data-footer-height="{{{Size_MapFooter.Y}}}"
						data-scroll-indicator="1"
						data-scroll-indicator-y-offset="-9"
						data-scroll-indicator-x-offset="-10"
						data-scroll-indicator-image="{{{Icons::C_Icon_128x128_Arrow_Bottom_Oblique}}}"
						data-scroll-indicator-colorize="FFFFFF"
						data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_Never}}}"
						data-scrollpadding="12"
						data-skew="-10"
						data-skew-valign="{{{Scroll::C_SkewVAlign_Top}}}"
						data-nav-group="{{{C_NavGroupMenu_MapList}}}"
						data-nav-inputs="select;cancel;appmenu;left"
						data-nav-targets="_;_;_;button-set-next"
						class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
						id="frame-scroll-maps"
					>
					<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
					{{{ML_Maps}}}
				</frame>
			</frame>
		</frame>

		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-cancel-map"
			pos="{{{MLHelpers::Skew(-49., -64.5, 10.)}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Back_Text}}}"
			data-size="{{{RaceMenuSize.X/2.}}} {{{RaceMenuSize.Y+4.}}}"
			data-labelsize="{{{RaceMenuSize.X/2.-30}}} {{{RaceMenuSize.Y+4.}}}"
			data-textxpos="0.55"
			data-opacityunfocus=".9"
			data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Exit_Round}}}"
			data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Exit_Round}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-icon="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
			data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
			data-iconxpos=".2"
			data-iconypos="-.49"
			data-textsize="4"
			data-textopacityunfocus=".25"
			data-iconopacityunfocus=".25"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-textitalicslope=".2"
			data-halign="center"
			data-valign="center"
			data-nav-inputs="select;cancel;appmenu;down;up"
			data-nav-targets="_;_;_;button-set-next;button-jump"
			data-nav-group="{{{C_NavGroupMenu_MapList}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>
</frame>
""",
"""
#Include "ColorLib" as CL
#Include "TextLib" as TL
#Include "TimeLib" as TiL
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Medals.Script.txt" as Medals
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/Helpers_Client.Script.txt" as Helpers
#Include "Libs/Nadeo/TMGame/Modes/DecoImage_Client.Script.txt" as DecoImage
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/Vote_Common.Script.txt" as Vote
#Include "Libs/Nadeo/Trackmania/Structures/ReportStruct.Script.txt" as ReportStruct
#Include "Libs/Nadeo/TMGame/Modes/InputPriority.Script.txt" as InputPriority

//L16N [Online] Displayed when the replay has been saved
#Const C_Label_ReplaySaved _("Replay saved!")
//L16N [Online] Displayed when the previous replay has been saved
#Const C_Label_PrevReplaySaved _("Previous replay saved!")
//L16N [Online] Message displayed when the track has been saved
#Const C_Label_MapSaved _("Track saved!")

#Const C_Ask_Restart 0
#Const C_Ask_NextMap 1
#Const C_Ask_SetNextMap 2
#Const C_Ask_JumpMap 3
#Const C_Ask_BalanceTeams 4

//L16N [Online] Play the next track
#Const C_Label_NextMap _("Play next track")
//L16N [Online] Start a vote to restart the track
#Const C_Label_Restart_Vote _("Vote to restart")
//L16N [Online] Start a vote to play the next track
#Const C_Label_NextMap_Vote _("Vote to play next track")
//L16N [Online] Start a vote to select the next track
#Const C_Label_SetNextMap_Vote _("Vote to set next track")
//L16N [Online] Start a vote to go directly to the selected track
#Const C_Label_JumpMap_Vote _("Vote to jump to track")
//L16N [Online]
#Const C_Label_BalanceTeams_Vote _("Vote to balance teams")
//L16N [Online]
#Const C_Label_ModeSettings_Vote _("Vote for mode settings")

#Const C_ModeNames {{{dump(MenuConsts::C_ModeNames)}}}
#Const C_ModeNames_ScriptNames {{{dump(MenuConsts::C_ModeNames_ScriptNames)}}}
#Const C_BaseScriptName {{{dump(MenuConsts::C_BaseScriptName)}}}
#Const C_BaseScriptName_ToReplace {{{dump(MenuConsts::C_BaseScriptName_ToReplace)}}}

#Const C_Event_RecordUpdated {{{dump(C_Event_RecordUpdated)}}}

#Struct K_UI_MainMenu {
	CMlFrame Frame_Menu;
	CMlFrame Frame_ButtonsContainer;
	CMlFrame Button_Resume;
	CMlFrame Button_Join;
	CMlFrame Button_FavoriteMap;
	CMlFrame Frame_LoadingSpinnerFavorite;
	CMlFrame Button_ScoresTable;
	CMlFrame Button_Records;
	CMlFrame Button_COTDRanking;
	CMlFrame Button_InviteFriends;
	CMlFrame Button_ChangeTeam;
	CMlFrame Button_Options;
	CMlFrame Frame_Maniapubs;
	CMlFrame Frame_BgError;
	CMlLabel Label_Error;
	CMlFrame PopUpMultiChoice_LeaveMatch;
	CMlFrame PopUpMultiChoice_ValidateServer;
	CMlFrame PopUpMultiChoice_VoteUnavailable;
}

#Struct K_UI_HelpMenu {
	CMlFrame Frame_Help;
	CMlFrame Button_Ok;
}

#Struct K_UI_TeamsMenu {
	CMlFrame Frame_Teams;
	CMlFrame Frame_ScrollTeam1Members;
	CMlFrame Frame_ScrollTeam2Members;
	CMlFrame Button_JoinTeam1;
	CMlFrame Button_JoinTeam2;
}

#Struct K_UI_OptionsMenu {
	CMlFrame Frame_ButtonsContainer;
	CMlFrame Frame_Options;
	CMlFrame Button_Profile;
	CMlFrame Button_Replay;
	CMlFrame Button_PrevReplay;
	CMlFrame Button_Map;
	CMlFrame Button_Server;
	CMlFrame Button_Help;
	CMlFrame Button_MuteAll;
	CMlFrame Button_Settings;
	CMlFrame Button_Report;
}

#Struct K_UI_ServerMenu {
	CMlFrame Frame_Server;
	CMlFrame Button_Restart;
	CMlFrame Button_NextMap;
	CMlFrame Button_GoToMap;
	CMlFrame Frame_MapList;
	CMlLabel Label_Select_Map_Name;
	CMlLabel Label_Select_Map_AuthorName;
	CMlFrame Frame_Select_Map_MedalStack;
	CMlFrame Button_SetNextMap;
	CMlFrame Button_JumpMap;
	CMlFrame Button_BalanceTeams;
	CMlFrame Button_ModeSettings;
	CMlFrame Button_Cancel;
}

#Struct K_UI_ReportMenu {
	CMlFrame Frame_Report;
	CMlFrame Frame_ReportPopUp;
}

#Struct K_UI_ProfileMenu {
	CMlFrame Frame_Profile;
}

#Struct K_UI_SettingsMenu {
	CMlFrame Frame_Settings;
}

#Struct K_UI_CreditsMenu {
	CMlFrame Frame_Credits;
}

#Struct K_MedalsSettings {
	Text ScopeType;
	Text ScopeId;
	Text GameMode;
	Text CustomData;
}

#Struct K_MapSelected {
	Text Uid;
	Text Name;
	Text AuthorName;
}

#Struct K_PageControls {
	CMlFrame Frame_Global;
	K_UI_MainMenu MenuUI;
	K_UI_HelpMenu HelpUI;
	K_UI_TeamsMenu TeamsUI;
	K_UI_OptionsMenu OptionsUI;
	K_UI_ServerMenu ServerUI;
	K_UI_ReportMenu ReportUI;
	K_UI_ProfileMenu ProfileUI;
	K_UI_SettingsMenu SettingsUI;
	K_UI_CreditsMenu CreditsUI;
}

#Struct K_PageState {
	Text[] Team1MembersNames;
	Text[] Team2MembersNames;
	Boolean MapDownloadAllowed;
	Boolean PrevReplayAllowed;
	Boolean ReplaySaved;
	Boolean PrevReplaySaved;
	Boolean MapSaved;
	Integer AskValidationId;
	{{{ClubStruct::P}}}K_ScriptSetting[] ScriptSettings;
	Integer ModeIndex;
	Boolean MapListRequested;
	Boolean VoteRequested;
	Task::K_Task Task_MapList;
	{{{CampaignStruct::P}}}K_Map[] MapList;
	Text[] MapListUids;
	K_MapSelected MapSelect;
	K_MedalsSettings MedalsSettings;
	Boolean IsMatchmaking;
	Boolean ScoresTableDisplayed;
	Boolean RecordModuleAvailable;
	Boolean IsDailyTrackerTAModuleAvailable;
	Boolean IsCOTDQualificationsRankingAvailable;
	Grid::K_GridConfig GridConfig;
	Grid::K_GridConfig SubGridConfig;
	Text Joinlink;
	Boolean GoToMapDisabled;
	Boolean SettingsAreDisplayed;
	Boolean CreditsAreDisplayed;
	Task::K_Task Task_ShowUbisoftConnect;
	Task::K_Task Task_ShowUbisoftConnectFriends;
	Task::K_Task Task_ShowFirstPartyInviteUI;
	CMlFrame ActiveFrame;
	Text ActiveNavGroup;
}

#Const C_Component_Report {{{dump(PopUpReportSystem::C_Name)}}}
#Const C_Component_Settings {{{dump(Settings::C_Name)}}}
#Const C_Component_Credits {{{dump(Credits::C_Name)}}}
""",
"""
K_PageState DisplayMenu(K_PageState _State, CMlFrame _ToFrame, Text _ToNavGroup) {
	declare K_PageState State = _State;

	// Disable previous frame
	State.ActiveFrame.Visible = False;
	{{{Navigation::P}}}EnableGroup(This, State.ActiveNavGroup, State.ActiveFrame.Visible);
	// Enable new frame
	State.ActiveFrame = _ToFrame;
	State.ActiveNavGroup = _ToNavGroup;
	State.ActiveFrame.Visible = True;
	{{{Navigation::P}}}EnableGroup(This, State.ActiveNavGroup, State.ActiveFrame.Visible);

	return State;
}

Void Lock(CMlFrame _Frame, Boolean _Lock) {
	{{{Navigation::P}}}Lock(_Frame, _Lock);
	if (_Lock) {{{Button::P}}}SetTextColor(This, _Frame, CL::HexToRgb("{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"));
	else {{{Button::P}}}SetTextColor(This, _Frame, CL::HexToRgb("{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"));
}

Void EnableSpectatorMode(Boolean Enable) {
	RequestSpectatorClient(Enable);
	if (Enable) {
		foreach (Player in Players) {
			if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned && Player.User != Null) {
				SetSpectateTarget(Player.User.Login);
				break;
			}
		}
	}
}

Void UpdateMuteAllDisplay(CMlFrame _Button_MuteAll) {
	if (ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting == CGameUserVoiceChat::EMuteSetting::Muted) {
		{{{Button::P}}}SetValue(This, _Button_MuteAll, "{{{Text_UnmuteAll}}}");
	}	else {
		{{{Button::P}}}SetValue(This, _Button_MuteAll, "{{{Text_MuteAll}}}");
	}
}

K_PageState InitializeOptionsButtons(K_PageState _State, K_PageControls _PageControls) {
	declare K_PageState State = _State;
	State.ReplaySaved = False;
	State.PrevReplaySaved = False;
	State.MapSaved = False;
	{{{Button::P}}}SetValue(This, _PageControls.OptionsUI.Button_Replay, "{{{SaveReplay_Text}}}");
	{{{Button::P}}}SetValue(This, _PageControls.OptionsUI.Button_PrevReplay, "{{{SavePrevReplay_Text}}}");
	{{{Button::P}}}SetValue(This, _PageControls.OptionsUI.Button_Map, "{{{SaveMap_Text}}}");
	{{{Button::P}}}SetVisibilityAndNavigation(_PageControls.OptionsUI.Button_Map, !Platform::IsFromFirstParty(System) && State.MapDownloadAllowed);
	Lock(_PageControls.OptionsUI.Button_Report, Map == Null || Map.MapInfo == Null);
	Lock(_PageControls.OptionsUI.Button_MuteAll, !UserMgr.VoiceChat_DisplayUI);
	UpdateMuteAllDisplay(_PageControls.OptionsUI.Button_MuteAll);
	Lock(_PageControls.OptionsUI.Button_PrevReplay, !State.PrevReplayAllowed || Platform::IsFromFirstParty(System));
	return State;
}

Void InitializeServerButtons(K_PageState _State, K_PageControls _PageControls) {
	Lock(_PageControls.ServerUI.Button_ModeSettings, (_State.ModeIndex == {{{MenuConsts::C_ModeIndex_None}}}));
	if (!Playground.IsServerOrSolo) {
		{{{Button::P}}}SetValue(This, _PageControls.ServerUI.Button_Restart, C_Label_Restart_Vote);
		{{{Button::P}}}SetValue(This, _PageControls.ServerUI.Button_NextMap, C_Label_NextMap_Vote);
		{{{Button::P}}}SetValue(This, _PageControls.ServerUI.Button_SetNextMap, C_Label_SetNextMap_Vote);
		{{{Button::P}}}SetValue(This, _PageControls.ServerUI.Button_JumpMap, C_Label_JumpMap_Vote);
		{{{Button::P}}}SetValue(This, _PageControls.ServerUI.Button_BalanceTeams, C_Label_BalanceTeams_Vote);
		{{{Button::P}}}SetValue(This, _PageControls.ServerUI.Button_ModeSettings, C_Label_ModeSettings_Vote);
	} else {
		{{{Button::P}}}SetValue(This, _PageControls.ServerUI.Button_Restart, "{{{Restart_Text}}}");
		{{{Button::P}}}SetValue(This, _PageControls.ServerUI.Button_NextMap, "{{{NextMap_Text}}}");
		{{{Button::P}}}SetValue(This, _PageControls.ServerUI.Button_SetNextMap, "{{{SetNextMap_Text}}}");
		{{{Button::P}}}SetValue(This, _PageControls.ServerUI.Button_JumpMap, "{{{JumpMap_Text}}}");
		{{{Button::P}}}SetValue(This, _PageControls.ServerUI.Button_BalanceTeams, "{{{BalanceTeams_Text}}}");
		{{{Button::P}}}SetValue(This, _PageControls.ServerUI.Button_ModeSettings, "{{{ModeSettings_Text}}}");
		Lock(_PageControls.ServerUI.Button_ModeSettings, True); //@TODO : remove this when ModeSettings server side bug fixed by Xavier !
	}
	Lock(_PageControls.ServerUI.Button_BalanceTeams, !Playground.UseClans);
}

K_PageState SaveReplay(K_PageState _State, K_PageControls _PageControls) {
	declare K_PageState State = _State;
	if (!State.ReplaySaved) {
		declare Time = TiL::FormatDate(TiL::GetCurrent(), TiL::EDateFormats::Time);
		declare Text ReplayFileName = Map.MapInfo.Name^"_"^LocalUser.Name^"_"^Time;
		declare Text Filename = "My Replays/"^ReplayFileName^".Replay.Gbx";
		State.ReplaySaved = Playground.SaveReplay(Filename);
		if (State.ReplaySaved) {{{Button::P}}}SetValue(This, _PageControls.OptionsUI.Button_Replay, C_Label_ReplaySaved);
	}
	return State;
}

K_PageState SavePrevReplay(K_PageState _State, K_PageControls _PageControls) {
	declare K_PageState State = _State;
	if (!State.PrevReplaySaved) {
		declare Time = TiL::FormatDate(TiL::GetCurrent(), TiL::EDateFormats::Time);
		declare Text ReplayFileName = Map.MapInfo.Name^"_"^LocalUser.Name^"_"^Time;
		declare Text Filename = "My Replays/"^ReplayFileName^".Replay.Gbx";
		State.PrevReplaySaved = Playground.SavePrevReplay(Filename);
		if (State.PrevReplaySaved) {{{Button::P}}}SetValue(This, _PageControls.OptionsUI.Button_PrevReplay, C_Label_PrevReplaySaved);
	}
	return State;
}

K_PageState SaveMap(K_PageState _State, K_PageControls _PageControls) {
	declare K_PageState State = _State;
	if (Playground.ServerInfo.IsMapDownloadAllowed && !State.MapSaved) {
		declare Text Filename = "Downloaded/"^Map.MapInfo.Name^".Map.Gbx";
		State.MapSaved = Playground.SaveMap(Filename);
		if (State.MapSaved) {{{Button::P}}}SetValue(This, _PageControls.OptionsUI.Button_Map, C_Label_MapSaved);
	}
	return State;
}

Void FocusMap(CMlFrame _Frame_Map, Boolean _IsFocused) {
	declare Real Opacity = 0.5;
	if (_IsFocused) Opacity = 1.;
	(_Frame_Map.GetFirstChild("label-map-name") as CMlLabel).Opacity = Opacity;
}

Void ShowMap(CMlFrame _Frame_Map, Text _MapName) {
	_Frame_Map.Show();
	declare CMlLabel Label_MapName <=> (_Frame_Map.GetFirstChild("label-map-name") as CMlLabel);
	Label_MapName.Value = _MapName;
	Tools::FitLabelValue(Label_MapName, 4., 1., 0.25);
}

Void HideMap(CMlFrame _Frame_Map) {
	_Frame_Map.Hide();
}

Void ShowMember(CMlFrame _Frame_Member, Text _MemberName) {
	_Frame_Member.Show();
	declare CMlLabel LabelMemberName <=> (_Frame_Member.GetFirstChild("label-member-name") as CMlLabel);
	LabelMemberName.Value = _MemberName;
	if (_MemberName == {{{UserStore::P}}}GetPlayerName(LocalUser)) LabelMemberName.TextColor = <0., 0., 0.>;
	else LabelMemberName.TextColor = <1., 1., 1.>;
	Tools::FitLabelValue(LabelMemberName, 3., 1., 0.25);
	Tools::FirstPartyLogoMatchLuminance(LabelMemberName);
}

Void HideMember(CMlFrame _Frame_Member) {
	_Frame_Member.Hide();
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Scroll::P}}}IsScroll(_From)) {
			{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Maniapubs::P}}}IsManiapubs(_From)) {
			{{{Maniapubs::P}}}Unfocus((_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Scroll::P}}}IsScroll(_To)) {
			{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Maniapubs::P}}}IsManiapubs(_To)) {
			{{{Maniapubs::P}}}Focus((_To as CMlFrame));
		}
	}
}

K_PageState ExitTeams(K_PageState _State, K_PageControls _PageControls) {
	CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
	declare K_PageState State = DisplayMenu(_State, _PageControls.MenuUI.Frame_Menu, "{{{C_NavGroupMenu}}}");
	Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.MenuUI.Button_ChangeTeam);
	return State;
}

K_PageState ExitServerOptions(K_PageState _State, K_PageControls _PageControls) {
	declare K_PageState State = DisplayMenu(_State, _PageControls.OptionsUI.Frame_Options, "{{{C_NavGroupMenu_Options}}}");
	Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.OptionsUI.Button_Server);
	return State;
}

K_PageState AskValidation(K_PageState _State, K_PageControls _PageControls, Text _Action, Integer _AskActionId) {
	declare K_PageState State = _State;

	//L16N [PauseMenu Online] Ask player confirmation for the action
	declare Text Validation_Title = TL::Compose(_("Are you really sure you want to %1?"), TL::GetTranslatedText(_Action));
	{{{PopUpMultiChoice::P}}}SetDescription(This, _PageControls.MenuUI.PopUpMultiChoice_ValidateServer, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart(Validation_Title, <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$t$i", <1., 1., 1.>, False)]);
	{{{PopUpMultiChoice::P}}}Open(This, _PageControls.MenuUI.PopUpMultiChoice_ValidateServer);

	State.AskValidationId = _AskActionId;
	if (State.AskValidationId == C_Ask_SetNextMap || State.AskValidationId == C_Ask_JumpMap) {
		_PageControls.ServerUI.Frame_MapList.Hide();
	}	else {
		_PageControls.ServerUI.Frame_Server.Hide();
	}

	return State;
}

K_MapSelected InitMapSelected(K_MapSelected _MapSelect, K_PageControls _PageControls) {
	declare K_MapSelected MapSelect = _MapSelect;

	MapSelect.Uid = "";
	MapSelect.Name = "{{{SelectedMap_Text}}}";
	MapSelect.AuthorName = "";

	{{{MedalStack::P}}}SetMedalsNumber(_PageControls.ServerUI.Frame_Select_Map_MedalStack, 0);
	_PageControls.ServerUI.Label_Select_Map_Name.Value = MapSelect.Name;
	_PageControls.ServerUI.Label_Select_Map_AuthorName.Value = MapSelect.AuthorName;

	return MapSelect;
}

Integer Private_GetMedal(Text _MapUid, K_MedalsSettings _MedalsSettings) {
	declare Integer Medal = Medals::C_ScoreMgrMedal_None;
	if (_MapUid != "" && _MedalsSettings.ScopeType != "" && _MedalsSettings.GameMode != "") {
		Medal = ParentApp.ScoreMgr.Map_GetMedal(
			MainUser::GetMainUserId(),
			_MapUid,
			_MedalsSettings.ScopeType,
			_MedalsSettings.ScopeId,
			_MedalsSettings.GameMode,
			_MedalsSettings.CustomData
		);
	}
	return Medal;
}

K_MapSelected UpdateMapSelected(K_PageState _State, K_PageControls _PageControls, Text _Uid, Text _Name, Text _AuthorName) {
	declare K_MapSelected MapSelect = _State.MapSelect;

	MapSelect.Uid = _Uid;
	MapSelect.Name = _Name;
	MapSelect.AuthorName = _AuthorName;

	{{{MedalStack::P}}}SetMedalsNumber(_PageControls.ServerUI.Frame_Select_Map_MedalStack, Private_GetMedal(MapSelect.Uid, _State.MedalsSettings));
	_PageControls.ServerUI.Label_Select_Map_Name.Value = MapSelect.Name;
	if (MapSelect.AuthorName != "") {
		//L16N [PauseMenu Online] %1 will be replaced by the name of the author of the track, e.g. "by Darrek"
		_PageControls.ServerUI.Label_Select_Map_AuthorName.Value = TL::Compose("{{{By_Text}}}", MapSelect.AuthorName);
	} else {
		// We do not always have access to the author name. More info : /trackmania-next/tmnext/-/issues/3345
		_PageControls.ServerUI.Label_Select_Map_AuthorName.Value = "";
	}

	return MapSelect;
}

K_PageState UpdateMapList(K_PageState _State) {
	declare K_PageState State = _State;

	if (!State.MapListRequested && !Playground.MapList_IsInProgress) {
		State.MapListRequested = True;
		Playground.MapList_Request();
		{{{LoadingSpinner::P}}}StartAnimation(This, (Page.GetFirstChild("frame-loading-spinner") as CMlFrame));
	}

	return State;
}

K_PageState UpdateTeamsMembersList(K_PageState _State, K_PageControls _PageControls) {
	declare K_PageState State = _State;

	State.Team1MembersNames.clear();
	State.Team2MembersNames.clear();

	foreach (Player in Players) {
		if (Player != Null && Player.Score != Null && Player.User != Null) {
			declare Text MemberName = {{{UserStore::P}}}GetPlayerName(Player.User);
			if (Player.Score.TeamNum == 1) {
				if (!State.Team1MembersNames.exists(MemberName)) State.Team1MembersNames.add(MemberName);
			} else if (Player.Score.TeamNum == 2) {
				if (!State.Team2MembersNames.exists(MemberName)) State.Team2MembersNames.add(MemberName);
			}
		}
	}

	{{{Scroll::P}}}SetElementsTotal(This, _PageControls.TeamsUI.Frame_ScrollTeam1Members, State.Team1MembersNames.count);
	{{{Scroll::P}}}SetElementsTotal(This, _PageControls.TeamsUI.Frame_ScrollTeam2Members, State.Team2MembersNames.count);

	return State;
}

Void EnablePauseMenuNavigationGroups(Boolean _Enabled) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupMenu_Global}}}", _Enabled);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupMenu_Vote}}}", _Enabled);
}

K_PageState DisplayProfile(K_PageState _State, K_PageControls _PageControls, Boolean _Display, CUser _User) {
	declare K_PageState State = _State;
	if (_Display) {
		State = DisplayMenu(State, _PageControls.ProfileUI.Frame_Profile, "{{{C_NavGroupMenu_Profile}}}");
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.ProfileUI.Frame_Profile);
		EnablePauseMenuNavigationGroups(False);
		{{{ProfilePlayerInfo::P}}}SetUser(_User);
		{{{ProfilePlayerInfo::P}}}Enable(True);
	} else {
		{{{ProfilePlayerInfo::P}}}Enable(False);
		EnablePauseMenuNavigationGroups(True);
		State = DisplayMenu(State, _PageControls.OptionsUI.Frame_Options, "{{{C_NavGroupMenu_Options}}}");
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.OptionsUI.Button_Profile);
	}
	return State;
}
K_PageState DisplayProfile(K_PageState _State, K_PageControls _PageControls, Boolean _Display) {
	return DisplayProfile(_State, _PageControls, _Display, Null);
}

K_PageState Private_DisplayReportSystem(K_PageState _State, K_PageControls _PageControls, Boolean _Display) {
	declare K_PageState State = _State;

	EnablePauseMenuNavigationGroups(!_Display);

	if (_Display) {
		State = DisplayMenu(State, _PageControls.ReportUI.Frame_Report, "{{{C_NavGroupMenu_Report}}}");
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.ReportUI.Frame_Report);

		// Report current map
		declare ReportStruct::LibStructuresReport_K_ReportData[Integer] Data =
		[
			ReportStruct::C_ReportTarget_Track => ReportStruct::LibStructuresReport_K_ReportData {
				Details = [Map.MapInfo.Name],
				Ids = [Map.MapInfo.MapUid],
				Contexts = [["From" => "InGame Online"]]
			}
		];

		// Report current club if possible (for stadium screens and decals)
		if (DecoImage::GetClubId() != {{{ClubStruct::P}}}C_ClubNullId) {
			Data[ReportStruct::C_ReportTarget_Club] =
			ReportStruct::LibStructuresReport_K_ReportData {
				Details = [DecoImage::GetClubName()],
				Ids = [TL::ToText(DecoImage::GetClubId())],
				Contexts = [["From" => "InGame Online"]]
			};
		}

		{{{PopUpReportSystem::P}}}SetReportTargetsData(This, _PageControls.ReportUI.Frame_ReportPopUp, Data);
		{{{PopUpReportSystem::P}}}Display(This, _PageControls.ReportUI.Frame_ReportPopUp, True);
	} else {
		State = DisplayMenu(State, _PageControls.OptionsUI.Frame_Options, "{{{C_NavGroupMenu_Options}}}");
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.OptionsUI.Button_Report);
		State = InitializeOptionsButtons(State, _PageControls);
	}

	return State;
}

K_PageState Private_DisplaySettings(K_PageState _State, K_PageControls _PageControls, Boolean _Display, Boolean _ResetSettingsCategory) {
	declare K_PageState State = _State;

	State.SettingsAreDisplayed = _Display;
	EnablePauseMenuNavigationGroups(!State.SettingsAreDisplayed && !State.CreditsAreDisplayed);
	{{{Settings::P}}}Enable(State.SettingsAreDisplayed, _ResetSettingsCategory);

	if (State.SettingsAreDisplayed) {
		State = DisplayMenu(State, _PageControls.SettingsUI.Frame_Settings, "{{{C_NavGroupMenu_Settings}}}");
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.SettingsUI.Frame_Settings);
	} else {
		State = DisplayMenu(State, _PageControls.OptionsUI.Frame_Options, "{{{C_NavGroupMenu_Options}}}");
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.OptionsUI.Button_Settings);
		State = InitializeOptionsButtons(State, _PageControls);
	}

	return State;
}

K_PageState Private_DisplayCredits(K_PageState _State, K_PageControls _PageControls, Boolean _Display) {
	declare K_PageState State = _State;

	State.CreditsAreDisplayed = _Display;
	EnablePauseMenuNavigationGroups(!State.CreditsAreDisplayed && !State.SettingsAreDisplayed);
	{{{Credits::P}}}Enable(State.CreditsAreDisplayed);

	if (State.CreditsAreDisplayed) {
		State = DisplayMenu(State, _PageControls.CreditsUI.Frame_Credits, "{{{C_NavGroupMenu_Credits}}}");
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.CreditsUI.Frame_Credits);
	} else {
		State = DisplayMenu(State, _PageControls.OptionsUI.Frame_Options, "{{{C_NavGroupMenu_Options}}}");
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.OptionsUI.Button_Settings);
	}

	return State;
}

K_PageState DisplayComponent(K_PageState _State, K_PageControls _PageControls, Text _ComponentName, Boolean _Display, Boolean _ResetSettingsCategory) {
	declare K_PageState State = _State;

	switch (_ComponentName) {
		case C_Component_Report: {
			State = Private_DisplayReportSystem(State, _PageControls, _Display);
		}
		case C_Component_Settings: {
			if (_Display) {
				State = Private_DisplayCredits(State, _PageControls, False);
			}
			State = Private_DisplaySettings(State, _PageControls, _Display, _ResetSettingsCategory);
		}
		case C_Component_Credits: {
			if (_Display) {
				State = Private_DisplaySettings(State, _PageControls, False, True);
			}
			State = Private_DisplayCredits(State, _PageControls, _Display);
		}
	}

	return State;
}
K_PageState DisplayComponent(K_PageState _State, K_PageControls _PageControls, Text _ComponentName, Boolean _Display) {
	return DisplayComponent(_State, _PageControls, _ComponentName, _Display, True);
}

Boolean IsInviteFriendsAvalaible() {
	declare netread Boolean Net_PauseMenuOnline_InviteFriendsButton_IsHiddenAndLocked for Teams[0];
	return
		(Playground != Null && Playground.ServerInfo != Null && Playground.ServerInfo.ModeName != "" && Playground.ServerInfo.ServerLogin != "") && // on a server
		!Net_PauseMenuOnline_InviteFriendsButton_IsHiddenAndLocked // that allows friends invitations
	;
}

K_PageState OpenOptions(K_PageState _State, K_PageControls _PageControls) {
	declare K_PageState State = InitializeOptionsButtons(_State, _PageControls);
	State = DisplayMenu(State, _PageControls.OptionsUI.Frame_Options, "{{{C_NavGroupMenu_Options}}}");
	Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.OptionsUI.Button_Profile);
	return State;
}

Void MuteAll() {
	if (ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting == CGameUserVoiceChat::EMuteSetting::NotMuted) {
		ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting = CGameUserVoiceChat::EMuteSetting::Muted;
		UserMgr.VoiceChat_MuteAll();
	} else {
		ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting = CGameUserVoiceChat::EMuteSetting::NotMuted;
		UserMgr.VoiceChat_UnmuteAll();
	}
}

K_PageState Select(CMlControl _Control, K_PageState _State, K_PageControls _PageControls) {
	if (_Control == Null) return _State;

	declare K_PageState State = _State;

	switch (_Control.ControlId) {
		// Pause Menu
		case "button-resume": CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		case "button-join": {
			if (State.Joinlink != "") {
				OpenLink(State.Joinlink, CMlScript::LinkType::Goto);
			}
		}
		case "button-favorite-map": {{{FavoriteMapsTools::P}}}SelectFavoriteButton(Map);
		case "button-scorestable": State.ScoresTableDisplayed = {{{ScoresTableVisibility::P}}}DisplayScoresTableFromMenu(True, {{{ScoresTableVisibility::P}}}C_ScoresTable_PauseMenu_Online, _PageControls.Frame_Global);
		case "button-spectator": EnableSpectatorMode(!IsSpectatorClient);
		case "button-records": {
			{{{RecordsModule::P}}}EnableControllerNavigation();
			CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		}
		case "button-cotd-ranking": {
			{{{DailyTrackerTAModule::P}}}EnableControllerNavigation();
			{{{COTDQualificationsRanking::P}}}EnableControllerNavigation();
			CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		}
		case "button-invite-friends": {
			// Check that the user is on a server and not in solo (eg: test map with mode in the editor)
			// and a server that allows friends invitations (not royal and ranked modes for example)
			// UserMgr.LiveSession_ShowFirstPartyInviteUI() throw a runtime error when used in solo
			if (IsInviteFriendsAvalaible()) {
				if (Platform::IsConsole(System)) {
					State.Task_ShowFirstPartyInviteUI = Task::DestroyAndCreate(State.Task_ShowFirstPartyInviteUI, UserMgr, UserMgr.LiveSession_ShowFirstPartyInviteUI(MainUser::GetMainUserId()));
				} else {
					State.Task_ShowUbisoftConnectFriends = Task::DestroyAndCreate(State.Task_ShowUbisoftConnectFriends, UserMgr, UserMgr.UbisoftConnect_ShowSocialFriendList(MainUser::GetMainUserId()));
				}
			}
		}
		case "button-ubi-connect": State.Task_ShowUbisoftConnect = Task::DestroyAndCreate(State.Task_ShowUbisoftConnect, UserMgr, UserMgr.UbisoftConnect_Show(MainUser::GetMainUserId()));
		case "button-options": {
			State = OpenOptions(State, _PageControls);
		}
		case "button-change-team": {
			State = UpdateTeamsMembersList(State, _PageControls);
			State = DisplayMenu(State, _PageControls.TeamsUI.Frame_Teams, "{{{C_NavGroupMenu_Teams}}}");
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.TeamsUI.Button_JoinTeam1);
		}
		case "button-exit": {
			declare Text Description = "{{{Text_LeaveMatchConfirm}}}";
			if (State.IsMatchmaking) Description = "{{{Text_LeaveMatchConfirmMatchmaking}}}";
			{{{PopUpMultiChoice::P}}}SetDescription(This, _PageControls.MenuUI.PopUpMultiChoice_LeaveMatch, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart(Description, <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$t$i", <1., 1., 1.>, False)]);
			{{{PopUpMultiChoice::P}}}Open(This, _PageControls.MenuUI.PopUpMultiChoice_LeaveMatch);
		}
		// Teams
		case "button-team-1" : {
			Playground.JoinTeam1();
			State = ExitTeams(State, _PageControls);
		}
		case "button-team-2" : {
			Playground.JoinTeam2();
			State = ExitTeams(State, _PageControls);
		}
		case "button-cancel-teams":	{
			State = DisplayMenu(State, _PageControls.MenuUI.Frame_Menu, "{{{C_NavGroupMenu}}}");
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.MenuUI.Button_ChangeTeam);
		}
		// Advanced options
		case "button-profile": {
			State = DisplayProfile(State, _PageControls, True, LocalUser);
		}
		case "button-replay": State = SaveReplay(State, _PageControls);
		case "button-prev-replay": State = SavePrevReplay(State, _PageControls);
		case "button-map": State = SaveMap(State, _PageControls);
		case "button-server": {
			InitializeServerButtons(State, _PageControls);
			State = DisplayMenu(State, _PageControls.ServerUI.Frame_Server, "{{{C_NavGroupMenu_Server}}}");
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.ServerUI.Button_Restart);
		}
		case "button-help": {
			State = DisplayMenu(State, _PageControls.HelpUI.Frame_Help, "{{{C_NavGroupMenu_Help}}}");
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.HelpUI.Button_Ok);
		}
		case "button-mute-all": {
			MuteAll();
			UpdateMuteAllDisplay(_Control as CMlFrame);
		}
		case "button-report": {
			State = DisplayComponent(State, _PageControls, C_Component_Report, True);
		}
		case "button-settings": {
			State = DisplayComponent(State, _PageControls, C_Component_Settings, True);
		}
		case "button-cancel": {
			State = DisplayMenu(State, _PageControls.MenuUI.Frame_Menu, "{{{C_NavGroupMenu}}}");
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.MenuUI.Button_Options);
		}
		// Help
		case "button-ok":	{
			State = DisplayMenu(State, _PageControls.OptionsUI.Frame_Options, "{{{C_NavGroupMenu_Options}}}");
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.OptionsUI.Button_Help);
		}
		// Manage server
		case "button-restart": {
			State = AskValidation(State, _PageControls, "{{{Restart_Text}}}", C_Ask_Restart);
		}
		case "button-next-map": {
			State = AskValidation(State, _PageControls, C_Label_NextMap, C_Ask_NextMap);
		}
		case "button-go-to-map": {
			if (!State.GoToMapDisabled) {
				State = UpdateMapList(State);
				State = DisplayMenu(State, _PageControls.ServerUI.Frame_MapList, "{{{C_NavGroupMenu_MapList}}}");
				Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.ServerUI.Button_SetNextMap);
			}
		}
			// Map List
			case "button-set-next":	{
				State = AskValidation(State, _PageControls, "{{{SetNextMap_Text}}}", C_Ask_SetNextMap);
			}
			case "button-jump":	{
				State = AskValidation(State, _PageControls, "{{{JumpMap_Text}}}", C_Ask_JumpMap);
			}
			case "button-cancel-map":	{
				State = DisplayMenu(State, _PageControls.ServerUI.Frame_Server, "{{{C_NavGroupMenu_Server}}}");
				if ({{{Navigation::P}}}IsLocked(_PageControls.ServerUI.Button_GoToMap)) {
					Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.ServerUI.Button_Cancel);
				} else {
					Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), _PageControls.ServerUI.Button_GoToMap);
				}
			}
		case "button-balance-teams": {
			State = AskValidation(State, _PageControls, "{{{BalanceTeams_Text}}}", C_Ask_BalanceTeams);
		}
		case "button-server-link": {
			CopyServerLinkToClipBoard();
			State = ExitServerOptions(State, _PageControls);
		}
		case "button-mode-settings": {
			{{{ScriptSettingsEditor::P}}}Show(State.ModeIndex, State.ScriptSettings);
			{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupMenu_Server}}}", False);
		}
		case "button-cancel-server": {
			State = ExitServerOptions(State, _PageControls);
		}
	}
	return State;
}

Void UpdateChangeTeamButton(K_PageControls _PageControls, Boolean _CanChangeTeams) {
	_PageControls.MenuUI.Button_ChangeTeam.Visible = _CanChangeTeams;
	Lock(_PageControls.MenuUI.Button_ChangeTeam, !_PageControls.MenuUI.Button_ChangeTeam.Visible);

	if (_CanChangeTeams) {
		(_PageControls.TeamsUI.Frame_Teams.GetFirstChild("label-team-1") as CMlLabel).Value = Teams[0].ColorizedName;
		(_PageControls.TeamsUI.Frame_Teams.GetFirstChild("label-team-2") as CMlLabel).Value = Teams[1].ColorizedName;
		{{{Button::P}}}SetValue(This, _PageControls.TeamsUI.Button_JoinTeam1, TL::Compose("{{{JoinTeam_Text}}}", FilterProfanities(Teams[0].Name)));
		{{{Button::P}}}SetValue(This, _PageControls.TeamsUI.Button_JoinTeam2, TL::Compose("{{{JoinTeam_Text}}}", FilterProfanities(Teams[1].Name)));
	}
}

K_PageState UpdateJoinButton(
	K_PageState _State,
	K_PageControls _PageControls,
	Integer _JoinlinkUpdate,
	Text _CommonJoinlink,
	Text _CommonLabel,
	Text _PersonalJoinlink,
	Text _PersonalLabel
) {
	declare K_PageState State = _State;

	declare Text Joinlink = _CommonJoinlink;
	declare Text Label = _CommonLabel;
	if (_PersonalJoinlink != "") {
		Joinlink = _PersonalJoinlink;
		Label = _PersonalLabel;
	}

	State.Joinlink = Joinlink;

	_PageControls.MenuUI.Button_Join.Visible = (State.Joinlink != "");
	Lock(_PageControls.MenuUI.Button_Join, !_PageControls.MenuUI.Button_Join.Visible);
	if (_PageControls.MenuUI.Button_Join.Visible) {
		if (Label != "") {
			{{{Button::P}}}SetValue(This, _PageControls.MenuUI.Button_Join, Label);
		} else {
			{{{Button::P}}}SetValue(This, _PageControls.MenuUI.Button_Join, "{{{Join_Text}}}");
		}
	}

	Grid::Update(State.GridConfig, AnimMgr, _PageControls.MenuUI.Frame_ButtonsContainer, 10., False, True);

	return State;
}

K_PageState DisableGoToMap(K_PageState _State, K_PageControls _Controls, Boolean _Disabled) {
	declare K_PageState State = _State;
	State.GoToMapDisabled = _Disabled;
	Lock(_Controls.ServerUI.Button_GoToMap, State.GoToMapDisabled);
	if (State.GoToMapDisabled) {
		declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}");
		if (FocusedControl != Null && FocusedControl.Id == _Controls.ServerUI.Button_GoToMap.Id) {
			Focus(FocusedControl, _Controls.ServerUI.Button_Cancel);
		}
	}
	return State;
}

Void SetErrorMessage(CMlLabel _Label, CMlFrame _Frame_BgError, Text _Message) {
	_Label.Value = _Message;
	AnimMgr.Flush(_Label);
	AnimMgr.Add(_Label, "<a opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.Add(_Label, "<a opacity=\"0.\" />", Now + 4000, 500, CAnimManager::EAnimManagerEasing::QuadOut);
	{{{ExpendableAsset::P}}}FlushAnimations(This, _Frame_BgError);
	{{{ExpendableAsset::P}}}AddOpacityAnimation(This, _Frame_BgError, 1., 250, CAnimManager::EAnimManagerEasing::QuadOut);
	{{{ExpendableAsset::P}}}AddOpacityAnimation(This, _Frame_BgError, 0., Now + 4000, 500, CAnimManager::EAnimManagerEasing::QuadOut);
}

***MainInit***
***
declare CMlLabel Label_MapName;
declare CMlFrame PlayerName_MapAuthor;
declare CMlFrame Frame_MedalStack;
declare CMlQuad	 Quad_Spectator;
declare CMlLabel Label_Help;
declare CMlFrame Frame_ScrollMaps;

declare netread Text Net_Race_PauseMenuOnline_Help_Description for Teams[0];
declare netread Boolean Net_Race_PauseMenuOnline_IsPreviousReplayAllowed for Teams[0];
declare netread Text Net_Race_PauseMenuOnline_Medals_ScopeType for Teams[0];
declare netread Text Net_Race_PauseMenuOnline_Medals_ScopeId for Teams[0];
declare netread Text Net_Race_PauseMenuOnline_Medals_GameMode for Teams[0];
declare netread Text Net_Race_PauseMenuOnline_Medals_CustomData for Teams[0];
declare netread Boolean Net_Race_PauseMenuOnline_IsMatchmaking for Teams[0];
declare Text[] PauseMenuOnline_ScoresTableButton_IsLocked for UI;
declare netread Boolean Net_PauseMenuOnline_ScoresTableButton_IsLocked for Teams[0];
declare netread Integer Net_Race_PauseMenuOnline_JoinlinkUpdate for Teams[0];
declare netread Text Net_Race_PauseMenuOnline_PersonalJoinlinkLink for UI;
declare netread Text Net_Race_PauseMenuOnline_PersonalJoinlinkLabel for UI;
declare netread Text Net_Race_PauseMenuOnline_CommonJoinlinkLink for Teams[0];
declare netread Text Net_Race_PauseMenuOnline_CommonJoinlinkLabel for Teams[0];
declare netread Boolean Net_Race_PauseMenuOnline_GoToMapDisabled for Teams[0];

declare Boolean DisplayModule;
declare Text HelpInfo;
declare Text MapUid;
declare Boolean ShowFrameMenuAfterPopUp;
declare Integer ScoresCount;
declare Ident[] UserIds;
declare Boolean IsUsingClans;
declare Boolean IsUsingForcedClans;
declare Text Team1Name;
declare Text Team2Name;
declare Boolean IsInviteFriendsAvalaible;
declare Boolean PageWasHidden;
declare Boolean ScoresTableButton_Locked;
declare Integer JoinlinkUpdate;
declare Boolean GoBackToSettings;

declare K_PageState State;
declare K_UI_MainMenu MainMenuUI;
declare K_UI_HelpMenu HelpMenuUI;
declare K_UI_TeamsMenu TeamsMenuUI;
declare K_UI_OptionsMenu OptionsMenuUI;
declare K_UI_ServerMenu ServerMenuUI;
declare K_UI_ReportMenu ReportMenuUI;
declare K_UI_ProfileMenu ProfileMenuUI;
declare K_UI_SettingsMenu SettingsMenuUI;
declare K_UI_CreditsMenu CreditsMenuUI;
declare K_PageControls PageControls;
***

***MainStart***
***
PageControls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

MainMenuUI = K_UI_MainMenu {
	Frame_Menu = (PageControls.Frame_Global.GetFirstChild("frame-menu") as CMlFrame),
	Frame_ButtonsContainer = (PageControls.Frame_Global.GetFirstChild("frame-buttons-container") as CMlFrame),
	Button_Resume = (PageControls.Frame_Global.GetFirstChild("button-resume") as CMlFrame),
	Button_Join = (PageControls.Frame_Global.GetFirstChild("button-join") as CMlFrame),
	Button_FavoriteMap = (PageControls.Frame_Global.GetFirstChild("button-favorite-map") as CMlFrame),
	Frame_LoadingSpinnerFavorite = (PageControls.Frame_Global.GetFirstChild("frame-loading-spinner-favorite-map") as CMlFrame),
	Button_ScoresTable = (PageControls.Frame_Global.GetFirstChild("button-scorestable") as CMlFrame),
	Button_Records = (PageControls.Frame_Global.GetFirstChild("button-records") as CMlFrame),
	Button_COTDRanking = (PageControls.Frame_Global.GetFirstChild("button-cotd-ranking") as CMlFrame),
	Button_InviteFriends = (PageControls.Frame_Global.GetFirstChild("button-invite-friends") as CMlFrame),
	Button_ChangeTeam = (PageControls.Frame_Global.GetFirstChild("button-change-team") as CMlFrame),
	Button_Options = (PageControls.Frame_Global.GetFirstChild("button-options") as CMlFrame),
	Frame_Maniapubs = (PageControls.Frame_Global.GetFirstChild("frame-maniapubs") as CMlFrame),
	Frame_BgError = (PageControls.Frame_Global.GetFirstChild("frame-bg-error") as CMlFrame),
	Label_Error = (PageControls.Frame_Global.GetFirstChild("label-error") as CMlLabel),
	PopUpMultiChoice_LeaveMatch = (PageControls.Frame_Global.GetFirstChild("popupmultichoice-leave-match") as CMlFrame),
	PopUpMultiChoice_ValidateServer = (PageControls.Frame_Global.GetFirstChild("popupmultichoice-validate-server") as CMlFrame),
	PopUpMultiChoice_VoteUnavailable = (PageControls.Frame_Global.GetFirstChild("popupmultichoice-vote-unavailable") as CMlFrame)
};

HelpMenuUI = K_UI_HelpMenu {
	Frame_Help = (PageControls.Frame_Global.GetFirstChild("frame-help") as CMlFrame),
	Button_Ok = (PageControls.Frame_Global.GetFirstChild("button-ok") as CMlFrame)
};

TeamsMenuUI = K_UI_TeamsMenu {
	Frame_Teams = (PageControls.Frame_Global.GetFirstChild("frame-teams") as CMlFrame),
	Frame_ScrollTeam1Members = (PageControls.Frame_Global.GetFirstChild("frame-scroll-team-1-members") as CMlFrame),
	Frame_ScrollTeam2Members = (PageControls.Frame_Global.GetFirstChild("frame-scroll-team-2-members") as CMlFrame),
	Button_JoinTeam1 = (PageControls.Frame_Global.GetFirstChild("button-team-1") as CMlFrame),
	Button_JoinTeam2 = (PageControls.Frame_Global.GetFirstChild("button-team-2") as CMlFrame)
};

OptionsMenuUI = K_UI_OptionsMenu {
	Frame_ButtonsContainer = (PageControls.Frame_Global.GetFirstChild("frame-buttons-container-options") as CMlFrame),
	Frame_Options = (PageControls.Frame_Global.GetFirstChild("frame-options") as CMlFrame),
	Button_Profile = (PageControls.Frame_Global.GetFirstChild("button-profile") as CMlFrame),
	Button_Replay = (PageControls.Frame_Global.GetFirstChild("button-replay") as CMlFrame),
	Button_PrevReplay = (PageControls.Frame_Global.GetFirstChild("button-prev-replay") as CMlFrame),
	Button_Map = (PageControls.Frame_Global.GetFirstChild("button-map") as CMlFrame),
	Button_Server = (PageControls.Frame_Global.GetFirstChild("button-server") as CMlFrame),
	Button_Help = (PageControls.Frame_Global.GetFirstChild("button-help") as CMlFrame),
	Button_MuteAll = (PageControls.Frame_Global.GetFirstChild("button-mute-all") as CMlFrame),
	Button_Settings = (PageControls.Frame_Global.GetFirstChild("button-settings") as CMlFrame),
	Button_Report = (PageControls.Frame_Global.GetFirstChild("button-report") as CMlFrame)
};

ServerMenuUI = K_UI_ServerMenu {
	Frame_Server = (PageControls.Frame_Global.GetFirstChild("frame-server") as CMlFrame),
	Button_Restart = (PageControls.Frame_Global.GetFirstChild("button-restart") as CMlFrame),
	Button_NextMap = (PageControls.Frame_Global.GetFirstChild("button-next-map") as CMlFrame),
	Button_GoToMap = (PageControls.Frame_Global.GetFirstChild("button-go-to-map") as CMlFrame),
	Frame_MapList = (PageControls.Frame_Global.GetFirstChild("frame-map-list") as CMlFrame),
	Label_Select_Map_Name = (PageControls.Frame_Global.GetFirstChild("label-selected-map") as CMlLabel),
	Label_Select_Map_AuthorName = (PageControls.Frame_Global.GetFirstChild("label-select-map-author") as CMlLabel),
	Frame_Select_Map_MedalStack = (PageControls.Frame_Global.GetFirstChild("frameinstance-medal-stack-select-map") as CMlFrame),
	Button_SetNextMap = (PageControls.Frame_Global.GetFirstChild("button-set-next") as CMlFrame),
	Button_JumpMap = (PageControls.Frame_Global.GetFirstChild("button-jump") as CMlFrame),
	Button_BalanceTeams = (PageControls.Frame_Global.GetFirstChild("button-balance-teams") as CMlFrame),
	Button_ModeSettings = (PageControls.Frame_Global.GetFirstChild("button-mode-settings") as CMlFrame),
	Button_Cancel = (PageControls.Frame_Global.GetFirstChild("button-cancel-server") as CMlFrame)
};

ReportMenuUI = K_UI_ReportMenu {
	Frame_Report = (PageControls.Frame_Global.GetFirstChild("frame-report-system") as CMlFrame),
	Frame_ReportPopUp = (PageControls.Frame_Global.GetFirstChild("frame-report-system-pause-menu-online") as CMlFrame)
};

ProfileMenuUI = K_UI_ProfileMenu {
	Frame_Profile = (PageControls.Frame_Global.GetFirstChild("frame-profile") as CMlFrame)
};

SettingsMenuUI = K_UI_SettingsMenu {
	Frame_Settings = (PageControls.Frame_Global.GetFirstChild("frame-settings") as CMlFrame)
};

CreditsMenuUI = K_UI_CreditsMenu {
	Frame_Credits = (PageControls.Frame_Global.GetFirstChild("frame-credits") as CMlFrame)
};

PageControls = K_PageControls {
	Frame_Global = PageControls.Frame_Global,
	MenuUI = MainMenuUI,
	HelpUI = HelpMenuUI,
	TeamsUI = TeamsMenuUI,
	OptionsUI = OptionsMenuUI,
	ServerUI = ServerMenuUI,
	ReportUI = ReportMenuUI,
	ProfileUI = ProfileMenuUI,
	SettingsUI = SettingsMenuUI,
	CreditsUI = CreditsMenuUI
};

Label_MapName <=> (PageControls.MenuUI.Frame_Menu.GetFirstChild("label-current-map-name") as CMlLabel);
PlayerName_MapAuthor <=> (PageControls.MenuUI.Frame_Menu.GetFirstChild("playername-map-author") as CMlFrame);
Frame_MedalStack <=> (PageControls.MenuUI.Frame_Menu.GetFirstChild("frameinstance-medal-stack") as CMlFrame);
Quad_Spectator <=> (PageControls.MenuUI.Frame_Menu.GetFirstChild("checkbox-spectator") as CMlQuad);
Label_Help <=> (PageControls.HelpUI.Frame_Help.GetFirstChild("label-help-description") as CMlLabel);
Frame_ScrollMaps = (PageControls.ServerUI.Frame_MapList.GetFirstChild("frame-scroll-maps") as CMlFrame);

State.ActiveFrame = PageControls.MenuUI.Frame_Menu;
State.ActiveNavGroup = "{{{C_NavGroupMenu}}}";
State.ScoresTableDisplayed = {{{ScoresTableVisibility::P}}}DisplayScoresTableFromMenu(False, {{{ScoresTableVisibility::P}}}C_ScoresTable_PauseMenu_None, Null);
State.IsDailyTrackerTAModuleAvailable = {{{DailyTrackerTAModule::P}}}IsModuleAvailable();
State.IsCOTDQualificationsRankingAvailable = {{{COTDQualificationsRanking::P}}}IsModuleAvailable();
State.RecordModuleAvailable = {{{RecordsModule::P}}}IsRecordsModuleAvailable();
DisplayModule = PageControls.Frame_Global.Visible;
HelpInfo = "";
MapUid = "";
ShowFrameMenuAfterPopUp = False;
ScoresCount = Scores.count;
UserIds = [];
IsUsingClans = Playground.UseClans;
IsUsingForcedClans = Playground.UseForcedClans;
Team1Name = Teams[0].ColorizedName;
Team2Name = Teams[1].ColorizedName;
foreach (Score in Scores) {
	if (Score != Null && Score.User != Null) {
		UserIds.add(Score.User.Id);
	}
}
IsInviteFriendsAvalaible = IsInviteFriendsAvalaible();
Quad_Spectator.Visible = IsSpectatorClient;
PageWasHidden = !PageIsVisible;
GoBackToSettings = False;
ScoresTableButton_Locked = (PauseMenuOnline_ScoresTableButton_IsLocked.count > 0) || Net_PauseMenuOnline_ScoresTableButton_IsLocked;
Lock(PageControls.MenuUI.Button_ScoresTable, ScoresTableButton_Locked);
if (ScoresTableButton_Locked) {{{ScoresTableVisibility::P}}}SetEnabledFromMenu(False);
State = DisableGoToMap(State, PageControls, Net_Race_PauseMenuOnline_GoToMapDisabled);

{{{ProfilePlayerInfo::P}}}EnablePlayersPager(UserIds.count > 1);
{{{ProfilePlayerInfo::P}}}EnableGarageButton(False);

State.MapDownloadAllowed = Playground.ServerInfo.IsMapDownloadAllowed;
State.PrevReplayAllowed = Net_Race_PauseMenuOnline_IsPreviousReplayAllowed;
State.IsMatchmaking = Net_Race_PauseMenuOnline_IsMatchmaking;
State.Task_ShowUbisoftConnect = Task::GetEmptyTask();
State.Task_ShowUbisoftConnectFriends = Task::GetEmptyTask();
State.Task_ShowFirstPartyInviteUI = Task::GetEmptyTask();
Lock(PageControls.MenuUI.Button_ChangeTeam, True);
declare Text ScriptName = TL::Replace(C_BaseScriptName, C_BaseScriptName_ToReplace, CurrentServerModeName);
if (C_ModeNames_ScriptNames.exists(ScriptName)) {
	declare Text ModeName = C_ModeNames_ScriptNames.keyof(ScriptName);
	State.ModeIndex = C_ModeNames.keyof(ModeName);
	State.ScriptSettings = {{{ScriptSettingsEditor::P}}}C_DefaultScriptSettings[State.ModeIndex];
} else {
	State.ModeIndex = {{{MenuConsts::C_ModeIndex_None}}};
	State.ScriptSettings = [];
}

UpdateChangeTeamButton(PageControls, (IsUsingClans && !IsUsingForcedClans));
State = UpdateJoinButton(
	State,
	PageControls,
	Net_Race_PauseMenuOnline_JoinlinkUpdate,
	Net_Race_PauseMenuOnline_CommonJoinlinkLink,
	Net_Race_PauseMenuOnline_CommonJoinlinkLabel,
	Net_Race_PauseMenuOnline_PersonalJoinlinkLink,
	Net_Race_PauseMenuOnline_PersonalJoinlinkLabel
);

{{{ScriptSettingsEditor::P}}}SetDiffMethodId({{{ScriptSettingsEditor::P}}}C_DiffMethod_Previous);
{{{ScriptSettingsEditor::P}}}Hide();

{{{Navigation::P}}}SetChildrenGroupParent(
	This,
	[
		"{{{C_NavGroupMenu}}}",
		"{{{C_NavGroupMenu_Help}}}",
		"{{{C_NavGroupMenu_Teams}}}",
		"{{{C_NavGroupMenu_Options}}}",
		"{{{C_NavGroupMenu_Server}}}",
		"{{{C_NavGroupMenu_MapList}}}",
		"{{{C_NavGroupMenu_ValidationServer}}}"
	],
	"{{{C_NavGroupMenu_Global}}}"
);

{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupMenu_Help}}}", False);
{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupMenu_Teams}}}", False);
{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupMenu_Options}}}", False);
{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupMenu_Server}}}", False);
{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupMenu_MapList}}}", False);

{{{Scroll::P}}}UseLocalEvents(This, True);
{{{Navigation::P}}}UseLocalEvents(This, True);
{{{ProfilePlayerInfo::P}}}UseLocalEvents(True);
{{{Settings::P}}}UseLocalEvents(True);
{{{Settings::P}}}EnableCredits(True);
{{{Settings::P}}}EnableProfile(True);
{{{Credits::P}}}UseLocalEvents(True);
{{{RecordsModule::P}}}DisableControllerNavigation();
{{{DailyTrackerTAModule::P}}}DisableControllerNavigation();
{{{COTDQualificationsRanking::P}}}DisableControllerNavigation();
Vote::SetButtonInputs(LocalUser, CMlScriptEvent::EMenuNavAction::Action1, CMlScriptEvent::EMenuNavAction::Action2, CInputManager::EButton::X, CInputManager::EButton::Y);

// The vast majority of the time the user won't enter the menu to select and launch a vote for the next map
// So there's no point preloading all the tracks info at soon as the pause menu is created (when the user joins the server)
// This allow us to avoid two requests that can be quite costly when there are a lot of tracks on the server
// State = UpdateMapList(State);
State = UpdateTeamsMembersList(State, PageControls);
{{{Scroll::P}}}SetElementsTotal(This, Frame_ScrollMaps, State.MapList.count);

{{{Button::P}}}SetVisibilityAndNavigation(PageControls.OptionsUI.Button_Replay, !Platform::IsFromFirstParty(System));
{{{Button::P}}}SetVisibilityAndNavigation(PageControls.OptionsUI.Button_PrevReplay, !Platform::IsFromFirstParty(System));
{{{Button::P}}}SetVisibilityAndNavigation(PageControls.OptionsUI.Button_Map, !Platform::IsFromFirstParty(System) && State.MapDownloadAllowed);
{{{Button::P}}}SetVisibilityAndNavigation(PageControls.MenuUI.Button_InviteFriends, IsInviteFriendsAvalaible);

State.GridConfig.fromjson({{{"\"\"\""^GridConfigJson^"\"\"\""}}});
State.SubGridConfig.fromjson({{{"\"\"\""^SubGridConfigJson^"\"\"\""}}});
{{{Button::P}}}SetVisibilityAndNavigation(MainMenuUI.Button_Records, State.RecordModuleAvailable);
{{{Button::P}}}SetVisibilityAndNavigation(MainMenuUI.Button_COTDRanking, State.IsDailyTrackerTAModuleAvailable);
{{{Button::P}}}SetVisibilityAndNavigation(MainMenuUI.Button_COTDRanking, State.IsCOTDQualificationsRankingAvailable);
Grid::Update(State.GridConfig, AnimMgr, MainMenuUI.Frame_ButtonsContainer, 10., False, True);
Grid::Update(State.SubGridConfig, AnimMgr, PageControls.OptionsUI.Frame_ButtonsContainer, 10., False, True);
***

***MainLoop***
***
if (ScoresTableButton_Locked != ((PauseMenuOnline_ScoresTableButton_IsLocked.count > 0) || Net_PauseMenuOnline_ScoresTableButton_IsLocked)) {
	ScoresTableButton_Locked = ((PauseMenuOnline_ScoresTableButton_IsLocked.count > 0) || Net_PauseMenuOnline_ScoresTableButton_IsLocked);
	Lock(PageControls.MenuUI.Button_ScoresTable, ScoresTableButton_Locked);
	if (ScoresTableButton_Locked) {{{ScoresTableVisibility::P}}}SetEnabledFromMenu(False);
}

if (State.GoToMapDisabled != Net_Race_PauseMenuOnline_GoToMapDisabled) {
	State = DisableGoToMap(State, PageControls, Net_Race_PauseMenuOnline_GoToMapDisabled);
}

if (PageIsVisible) {
	if (PageWasHidden) {
		PageWasHidden = False;

		/* Display carousel if maniapubs are available */
		if (
			UserMgr != Null && UserMgr.MainUserProfile != Null && UserMgr.MainUserProfile.Adverts_Enabled &&
			{{{Maniapubs::P}}}IsManiapubsAvailable()
		) {
			{{{Maniapubs::P}}}Update(MainMenuUI.Frame_Maniapubs);
			MainMenuUI.Frame_Menu.RelativePosition_V3.X = MLHelpers::SkewX({{{-Pos_Maniapubs.X}}}, MainMenuUI.Frame_Menu.RelativePosition_V3.Y, 10.);
			MainMenuUI.Frame_Maniapubs.Show();
		} else {
			MainMenuUI.Frame_Menu.RelativePosition_V3.X = MLHelpers::SkewX(0., MainMenuUI.Frame_Menu.RelativePosition_V3.Y, 10.);
			MainMenuUI.Frame_Maniapubs.Hide();
		}

		// Check if the player unlocked a medal while the menu was hidden
		if (Map != Null && Map.MapInfo != Null) {
			// Force an update of the `MedalsSettings` because they will be used to get the medal
			State.MedalsSettings.ScopeType = Net_Race_PauseMenuOnline_Medals_ScopeType;
			State.MedalsSettings.ScopeId = Net_Race_PauseMenuOnline_Medals_ScopeId;
			State.MedalsSettings.GameMode = Net_Race_PauseMenuOnline_Medals_GameMode;
			State.MedalsSettings.CustomData = Net_Race_PauseMenuOnline_Medals_CustomData;
			{{{MedalStack::P}}}SetMedalsNumber(Frame_MedalStack, Private_GetMedal(Map.MapInfo.MapUid, State.MedalsSettings));
		}

		// Check if the favorite attribute of current map updated while the menu was hidden
		{{{FavoriteMapsTools::P}}}UdpateFavoriteButton(
			PageControls.MenuUI.Button_FavoriteMap,
			PageControls.MenuUI.Frame_LoadingSpinnerFavorite,
			PageControls.MenuUI.Frame_BgError,
			PageControls.MenuUI.Label_Error,
			MapUid
		);
	}

	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Race_PauseMenuOnline_IsVisible for Owner;
		if (DisplayModule != (Net_Race_PauseMenuOnline_IsVisible && !Helpers::IsLocalMode(Teams[0]))) {
			DisplayModule = (Net_Race_PauseMenuOnline_IsVisible && !Helpers::IsLocalMode(Teams[0]));
			PageControls.Frame_Global.Visible = Net_Race_PauseMenuOnline_IsVisible;
			State.MedalsSettings.ScopeType = Net_Race_PauseMenuOnline_Medals_ScopeType;
			State.MedalsSettings.ScopeId = Net_Race_PauseMenuOnline_Medals_ScopeId;
			State.MedalsSettings.GameMode = Net_Race_PauseMenuOnline_Medals_GameMode;
			State.MedalsSettings.CustomData = Net_Race_PauseMenuOnline_Medals_CustomData;
		}
	}

	if ({{{ScoresTableVisibility::P}}}GetSourceMenu() == {{{ScoresTableVisibility::P}}}C_ScoresTable_PauseMenu_Online && State.ScoresTableDisplayed != {{{ScoresTableVisibility::P}}}EnabledFromMenu()) {
		State.ScoresTableDisplayed = {{{ScoresTableVisibility::P}}}DisplayScoresTableFromMenu({{{ScoresTableVisibility::P}}}EnabledFromMenu(), {{{ScoresTableVisibility::P}}}C_ScoresTable_PauseMenu_Online, PageControls.Frame_Global);
		// When player wants to spectate another player from the pause menu scores table, we resume to the game
		if (IsSpectatorClient) CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
	}

	if (State.RecordModuleAvailable != {{{RecordsModule::P}}}IsRecordsModuleAvailable()) {
		State.RecordModuleAvailable = {{{RecordsModule::P}}}IsRecordsModuleAvailable();
		{{{Button::P}}}SetVisibilityAndNavigation(MainMenuUI.Button_Records, State.RecordModuleAvailable);
		Grid::Update(State.GridConfig, AnimMgr,  MainMenuUI.Frame_ButtonsContainer, 10., False, True);
	}

	if (State.IsDailyTrackerTAModuleAvailable != {{{DailyTrackerTAModule::P}}}IsModuleAvailable()) {
		State.IsDailyTrackerTAModuleAvailable = {{{DailyTrackerTAModule::P}}}IsModuleAvailable();
		{{{Button::P}}}SetVisibilityAndNavigation(MainMenuUI.Button_COTDRanking, State.IsDailyTrackerTAModuleAvailable);
		Grid::Update(State.GridConfig, AnimMgr,  MainMenuUI.Frame_ButtonsContainer, 10., False, True);
	}

	if (State.IsCOTDQualificationsRankingAvailable != {{{COTDQualificationsRanking::P}}}IsModuleAvailable()) {
		State.IsCOTDQualificationsRankingAvailable = {{{COTDQualificationsRanking::P}}}IsModuleAvailable();
		{{{Button::P}}}SetVisibilityAndNavigation(MainMenuUI.Button_COTDRanking, State.IsCOTDQualificationsRankingAvailable);
		Grid::Update(State.GridConfig, AnimMgr,  MainMenuUI.Frame_ButtonsContainer, 10., False, True);
	}

	/* Voice chat events */
	foreach (Event in UserMgr.VoiceChat_Events) {
		switchtype (Event) {
			case CVoiceChatEvent_DisplayUI: {
				if (PageControls.OptionsUI.Frame_Options.Visible) {
					Lock(PageControls.OptionsUI.Button_MuteAll, !UserMgr.VoiceChat_DisplayUI);
					UpdateMuteAllDisplay(PageControls.OptionsUI.Button_MuteAll);
				}
			}
		}
	}

	// Open Ubisoft Connect Overlay task
	if (Task::IsInitialized(State.Task_ShowUbisoftConnect)) {
		State.Task_ShowUbisoftConnect = Task::Update(State.Task_ShowUbisoftConnect);
		if (!Task::IsRunning(State.Task_ShowUbisoftConnect)) {
			if (!Task::IsSuccess(State.Task_ShowUbisoftConnect)) {
				SetErrorMessage(
					PageControls.MenuUI.Label_Error,
					PageControls.MenuUI.Frame_BgError,
					TL::Compose(
						"%1 (%2)",
						//L16N Error while opening Ubisoft Connect overlay.
						_("Error while opening Ubisoft Connect"),
						Task::GetCustomError(State.Task_ShowUbisoftConnect).Code
					)
				);
			}
			State.Task_ShowUbisoftConnect = Task::Destroy(State.Task_ShowUbisoftConnect);
		}
	}

	// Open Ubisoft Connect Friends Overlay task
	if (Task::IsInitialized(State.Task_ShowUbisoftConnectFriends)) {
		State.Task_ShowUbisoftConnectFriends = Task::Update(State.Task_ShowUbisoftConnectFriends);
		if (!Task::IsRunning(State.Task_ShowUbisoftConnectFriends)) {
			if (!Task::IsSuccess(State.Task_ShowUbisoftConnectFriends)) {
				SetErrorMessage(
					PageControls.MenuUI.Label_Error,
					PageControls.MenuUI.Frame_BgError,
					TL::Compose(
						"%1 (%2)",
						//L16N Error while opening Ubisoft Connect overlay.
						_("Error while opening Ubisoft Connect"),
						Task::GetCustomError(State.Task_ShowUbisoftConnectFriends).Code
					)
				);
			}
			State.Task_ShowUbisoftConnectFriends = Task::Destroy(State.Task_ShowUbisoftConnectFriends);
		}
	}

	// Show First Party Invite UI task
	if (Task::IsInitialized(State.Task_ShowFirstPartyInviteUI)) {
		State.Task_ShowFirstPartyInviteUI = Task::Update(State.Task_ShowFirstPartyInviteUI);
		if (!Task::IsRunning(State.Task_ShowFirstPartyInviteUI)) {
			State.Task_ShowFirstPartyInviteUI = Task::Destroy(State.Task_ShowFirstPartyInviteUI);
		}
	}

	if (PageControls.Frame_Global.Visible) {
		// It works like that for now probably because the online pause menu module is always enabled
		// It might be better at some points to move the menu navigation activation/deactivation
		// at the root of the `MainLoop` like in the other pause menu (Campaign, PlayMap, HotSeat, SplitScreen)
		// to avoid any risk of getting stuck with the menu navigation enabled but the pause menu hidden
		if (IsInGameMenuDisplayed && !EnableMenuNavigationInputs) {
			EnableMenuNavigation(True, False, False, Null, InputPriority::C_InputPriority_PauseMenuOnline);
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), PageControls.MenuUI.Button_Resume);
		} else if (!IsInGameMenuDisplayed && EnableMenuNavigationInputs) {
			EnableMenuNavigation(False, False, False, Null, InputPriority::C_InputPriority_PauseMenuOnline);
		}

		if (ShowFrameMenuAfterPopUp) {
			State = DisplayMenu(State, PageControls.MenuUI.Frame_Menu, "{{{C_NavGroupMenu}}}");
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), PageControls.MenuUI.Button_Resume);
			ShowFrameMenuAfterPopUp = False;
		}

		// Check if map has changed
		if (Map != Null && Map.MapInfo != Null) {
			if (MapUid != Map.MapInfo.MapUid) {
				MapUid = Map.MapInfo.MapUid;
				Label_MapName.Value = Tools::TranslateOfficialMapName(Map.MapName, Map.AuthorLogin);
				Tools::FitLabelValue(Label_MapName, 8., 5., 0.5);

				// Check if current map is player's favorite
				declare {{{MapStore::P}}}K_CurrentMap CurrentMap = {{{MapStore::P}}}GetCurrentMap();
				if (CurrentMap.Uid != MapUid) {
					{{{FavoriteMapsTools::P}}}UdpateFavoriteButton(
						PageControls.MenuUI.Button_FavoriteMap,
						PageControls.MenuUI.Frame_LoadingSpinnerFavorite,
						PageControls.MenuUI.Frame_BgError,
						PageControls.MenuUI.Label_Error,
						MapUid
					);
					{{{MapStore::P}}}Action_GetMap(This, MapUid);
				}

				{{{PlayerName::P}}}SetAccountId(This, PlayerName_MapAuthor, Map.AuthorLogin, False);
				{{{MedalStack::P}}}SetMedalsNumber(Frame_MedalStack, Private_GetMedal(Map.MapInfo.MapUid, State.MedalsSettings));
			}
		}

		if (State.IsMatchmaking != Net_Race_PauseMenuOnline_IsMatchmaking) {
			State.IsMatchmaking = Net_Race_PauseMenuOnline_IsMatchmaking;
		}

		if (HelpInfo != Net_Race_PauseMenuOnline_Help_Description) {
			HelpInfo = Net_Race_PauseMenuOnline_Help_Description;
			Label_Help.Value = Net_Race_PauseMenuOnline_Help_Description;
		}

		if (State.MapDownloadAllowed != Playground.ServerInfo.IsMapDownloadAllowed) {
			State.MapDownloadAllowed = Playground.ServerInfo.IsMapDownloadAllowed;
			{{{Button::P}}}SetVisibilityAndNavigation(PageControls.OptionsUI.Button_Map, !Platform::IsFromFirstParty(System) && State.MapDownloadAllowed);
		}

		if (State.PrevReplayAllowed != Net_Race_PauseMenuOnline_IsPreviousReplayAllowed) {
			State.PrevReplayAllowed = Net_Race_PauseMenuOnline_IsPreviousReplayAllowed;
			Lock(PageControls.OptionsUI.Button_PrevReplay, !State.PrevReplayAllowed || Platform::IsFromFirstParty(System));
		}

		if (IsInviteFriendsAvalaible != IsInviteFriendsAvalaible()) {
			IsInviteFriendsAvalaible = IsInviteFriendsAvalaible();
			{{{Button::P}}}SetVisibilityAndNavigation(PageControls.MenuUI.Button_InviteFriends, IsInviteFriendsAvalaible);
			Grid::Update(State.GridConfig, AnimMgr, MainMenuUI.Frame_ButtonsContainer, 10., False, True);
		}

		if (Quad_Spectator.Visible != IsSpectatorClient) {
			Quad_Spectator.Visible = IsSpectatorClient;
		}

		if (State.MapListRequested && !Playground.MapList_IsInProgress) {
			State.MapListRequested = False;
			{{{LoadingSpinner::P}}}StopAnimation(This, (Page.GetFirstChild("frame-loading-spinner") as CMlFrame));
			declare Text[] MapUidList;
			foreach (MapUid in Playground.MapList_MapUids) {
				if (!State.MapListUids.exists(MapUid)) {
					MapUidList.add(MapUid);
				}
			}
			if (MapUidList.count > 0) {
				State.Task_MapList = Task::DestroyAndCreate(
					State.Task_MapList,
					DataFileMgr,
					DataFileMgr.Map_NadeoServices_GetListFromUid(MainUser::GetMainUserId(), MapUidList)
				);
			}
			State.MapSelect = InitMapSelected(State.MapSelect, PageControls);
		}

		if (ScoresCount != Scores.count) {
			ScoresCount = Scores.count;
			if (Scores.count < UserIds.count) {
				UserIds = [];
			}
			foreach (Score in Scores) {
				if (Score != Null && Score.User != Null && !UserIds.exists(Score.User.Id)) {
					UserIds.add(Score.User.Id);
				}
			}
			{{{ProfilePlayerInfo::P}}}EnablePlayersPager(UserIds.count > 1);
			{{{ProfilePlayerInfo::P}}}EnableGarageButton(False);
		}

		if (IsUsingClans != Playground.UseClans || IsUsingForcedClans != Playground.UseForcedClans|| Team1Name != Teams[0].ColorizedName || Team2Name != Teams[1].ColorizedName) {
			IsUsingClans = Playground.UseClans;
			IsUsingForcedClans = Playground.UseForcedClans;
			Team1Name = Teams[0].ColorizedName;
			Team2Name = Teams[1].ColorizedName;
			InitializeServerButtons(State, PageControls);
			UpdateChangeTeamButton(PageControls, (IsUsingClans && !IsUsingForcedClans));
			Grid::Update(State.GridConfig, AnimMgr, MainMenuUI.Frame_ButtonsContainer, 10., False, True);
		}

		if (JoinlinkUpdate != Net_Race_PauseMenuOnline_JoinlinkUpdate) {
			JoinlinkUpdate = Net_Race_PauseMenuOnline_JoinlinkUpdate;
			State = UpdateJoinButton(
				State,
				PageControls,
				Net_Race_PauseMenuOnline_JoinlinkUpdate,
				Net_Race_PauseMenuOnline_CommonJoinlinkLink,
				Net_Race_PauseMenuOnline_CommonJoinlinkLabel,
				Net_Race_PauseMenuOnline_PersonalJoinlinkLink,
				Net_Race_PauseMenuOnline_PersonalJoinlinkLabel
			);
		}

		foreach (Event in {{{PopUpReportSystem::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{PopUpReportSystem::P}}}C_EventType_Close: {
					State = DisplayComponent(State, PageControls, C_Component_Report, False);
				}
			}
		}

		foreach (Event in {{{ProfilePlayerInfo::P}}}PendingEvents) {
			switch (Event.Type) {
				case {{{ProfilePlayerInfo::P}}}C_EventType_Close: {
					State = DisplayProfile(State, PageControls, False);
					if (GoBackToSettings) {
						GoBackToSettings = False;
						State = DisplayComponent(State, PageControls, C_Component_Settings, True, False);
					}
				}
				case {{{ProfilePlayerInfo::P}}}C_EventType_NextPlayer: {
					declare Integer Key = UserIds.keyof(Event.CurrentUserId);
					if (Key >= 0) {
						declare Ident UserId = NullId;
						if (UserIds.existskey(Key + 1)) {
							UserId = UserIds[Key + 1];
						} else if (UserIds.count > 0) {
							UserId = UserIds[0];
						}
						if (UserId != NullId && Scores.existskey(UserId)) {
							declare CSmScore Score <=> Scores[UserId];
							if (Score != Null && Score.User != Null) {
								{{{ProfilePlayerInfo::P}}}SetUser(Scores[UserId].User);
							}
						}
					}
				}
				case {{{ProfilePlayerInfo::P}}}C_EventType_PrevPlayer: {
					declare Integer Key = UserIds.keyof(Event.CurrentUserId);
					if (Key >= 0) {
						declare Ident UserId = NullId;
						if (UserIds.existskey(Key - 1)) {
							UserId = UserIds[Key - 1];
						} else if (UserIds.count > 0) {
							UserId = UserIds[UserIds.count - 1];
						}
						if (UserId != NullId && Scores.existskey(UserId)) {
							declare CSmScore Score <=> Scores[UserId];
							if (Score != Null && Score.User != Null) {
								{{{ProfilePlayerInfo::P}}}SetUser(Scores[UserId].User);
							}
						}
					}
				}
			}
		}

		foreach (Event in {{{Settings::P}}}PendingEvents) {
			switch (Event.Type) {
				case {{{Settings::P}}}C_EventType_Back: {
					State = DisplayComponent(State, PageControls, C_Component_Settings, False);
				}
				case {{{Settings::P}}}C_EventType_OpenCredits: {
					GoBackToSettings = True;
					State = DisplayComponent(State, PageControls, C_Component_Credits, True);
				}
				case {{{Settings::P}}}C_EventType_OpenProfile: {
					GoBackToSettings = True;
					State = DisplayComponent(State, PageControls, C_Component_Settings, False);
					State = OpenOptions(State, PageControls);
					State = DisplayProfile(State, PageControls, True, LocalUser);
				}
			}
		}

		foreach (Event in {{{Credits::P}}}PendingEvents) {
			switch (Event.Type) {
				case {{{Credits::P}}}C_EventType_CloseCredits: {
					if (GoBackToSettings) {
						GoBackToSettings = False;
						State = DisplayComponent(State, PageControls, C_Component_Settings, True, False);
					} else {
						State = DisplayComponent(State, PageControls, C_Component_Credits, False);
					}
				}
			}
		}

		/* PopUpMultiChoice events */
		foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
			if (Event.PopUpMultiChoice != Null) {
				switch (Event.Type) {
					case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
						switch (Event.PopUpMultiChoice.ControlId) {
							case PageControls.MenuUI.PopUpMultiChoice_LeaveMatch.ControlId, PageControls.MenuUI.PopUpMultiChoice_VoteUnavailable.ControlId: {
								EnablePauseMenuNavigationGroups(!Event.PopUpMultiChoice.Visible);
								ShowFrameMenuAfterPopUp = !Event.PopUpMultiChoice.Visible;
							}
							case PageControls.MenuUI.PopUpMultiChoice_ValidateServer.ControlId: {
								EnablePauseMenuNavigationGroups(!Event.PopUpMultiChoice.Visible);
								if (!Event.PopUpMultiChoice.Visible) {
									if (State.AskValidationId == C_Ask_SetNextMap || State.AskValidationId == C_Ask_JumpMap) {
										State = DisplayMenu(State, PageControls.ServerUI.Frame_MapList, "{{{C_NavGroupMenu_MapList}}}");
									}	else {
										State = DisplayMenu(State, PageControls.ServerUI.Frame_Server, "{{{C_NavGroupMenu_Server}}}");
									}
								}
							}
						}
					}
					case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
						switch (Event.PopUpMultiChoice.ControlId) {
							case PageControls.MenuUI.PopUpMultiChoice_LeaveMatch.ControlId: {
								switch (Event.SelectedIndex) {
									case {{{C_Choice_Leave}}}: CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
								}
							}
							case PageControls.MenuUI.PopUpMultiChoice_ValidateServer.ControlId: {
								switch (Event.SelectedIndex) {
									case {{{C_Choice_Yes}}}: {
										if (!State.VoteRequested) {
											State.VoteRequested = True;
											switch (State.AskValidationId) {
												case C_Ask_Restart: Playground.RequestRestartMap();
												case C_Ask_NextMap: Playground.RequestNextMap();
												case C_Ask_SetNextMap: Playground.RequestSetNextMap(State.MapSelect.Uid);
												case C_Ask_JumpMap: Playground.RequestGotoMap(State.MapSelect.Uid);
												case C_Ask_BalanceTeams: Playground.RequestAutoTeamBalance();
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{Navigation::P}}}C_EventType_NavigateInput: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupMenu_Global}}}")) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							State = Select(Event.To, State, PageControls);
						} else if (
							(	Event.Input == CMlScriptEvent::EMenuNavAction::Cancel ||
								Event.Input == CMlScriptEvent::EMenuNavAction::AppMenu
							)	&& {{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupMenu}}}")
						) {
							CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupMenu_Help}}}")) {
								State = DisplayMenu(State, PageControls.OptionsUI.Frame_Options, "{{{C_NavGroupMenu_Options}}}");
								Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), PageControls.OptionsUI.Button_Help);
							} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupMenu_Teams}}}")) {
								State = DisplayMenu(State, PageControls.MenuUI.Frame_Menu, "{{{C_NavGroupMenu}}}");
								Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), PageControls.MenuUI.Button_ChangeTeam);
							} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupMenu_Options}}}")) {
								State = DisplayMenu(State, PageControls.MenuUI.Frame_Menu, "{{{C_NavGroupMenu}}}");
								Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), PageControls.MenuUI.Button_Options);
							} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupMenu_Server}}}")) {
								State = DisplayMenu(State, PageControls.OptionsUI.Frame_Options, "{{{C_NavGroupMenu_Options}}}");
								Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), PageControls.OptionsUI.Button_Server);
							} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupMenu_MapList}}}")) {
								State = DisplayMenu(State, PageControls.ServerUI.Frame_Server, "{{{C_NavGroupMenu_Server}}}");
								Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), PageControls.ServerUI.Button_GoToMap);
							}
						} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupMenu_Teams}}}")) {
							Focus(Event.From, Event.To);
							if (Event.Input == CMlScriptEvent::EMenuNavAction::Up) {
								if (Event.To.Id == PageControls.TeamsUI.Frame_ScrollTeam1Members.Id) {
									{{{Scroll::P}}}ScrollToElement(This, PageControls.TeamsUI.Frame_ScrollTeam1Members, 0, False);
								} else if (Event.From.Id == PageControls.TeamsUI.Frame_ScrollTeam2Members.Id) {
									{{{Scroll::P}}}ScrollToElement(This, PageControls.TeamsUI.Frame_ScrollTeam2Members, 0, False);
								}
							} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Down) {
								if (Event.From.Id == PageControls.TeamsUI.Frame_ScrollTeam1Members.Id) {
									{{{Scroll::P}}}ScrollToElement(This, PageControls.TeamsUI.Frame_ScrollTeam1Members, State.Team1MembersNames.count, False);
								} else if (Event.From.Id == PageControls.TeamsUI.Frame_ScrollTeam2Members.Id) {
									{{{Scroll::P}}}ScrollToElement(This, PageControls.TeamsUI.Frame_ScrollTeam2Members, State.Team2MembersNames.count, False);
								}
							}
						} else {
							Focus(Event.From, Event.To);
						}
					} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupMenu_Vote}}}")) {
						Vote::ProcessButtonInput(This, LocalUser, Event.Input);
					}
				}
				case {{{Navigation::P}}}C_EventType_NavigateMouse: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupMenu_Global}}}")) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							State = Select(Event.To, State, PageControls);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							Focus(Event.From, Event.To);
						}
					}
				}
			}
		}

		foreach (Event in {{{ScriptSettingsEditor::P}}}PendingEvents) {
			switch (Event.Type) {
				case {{{ScriptSettingsEditor::P}}}C_Event_Confirm: {
					if (!State.VoteRequested) {
						State.VoteRequested = True;
						State.ScriptSettings = Event.ScriptSettings;
						Playground.RequestChangeModeScriptSettings(Event.ScriptSettingsDiffXML);
						{{{ScriptSettingsEditor::P}}}Hide();
					}
				}
				case {{{ScriptSettingsEditor::P}}}C_Event_Cancel: {
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupMenu_Server}}}", True);
				}
			}
		}

		/* Favorite map events */
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::PluginCustomEvent: {
					if (Event.CustomEventType == {{{MapStore::P}}}C_Event_CurrentMapUpdated) {
						{{{FavoriteMapsTools::P}}}UdpateFavoriteButton(
							PageControls.MenuUI.Button_FavoriteMap,
							PageControls.MenuUI.Frame_LoadingSpinnerFavorite,
							PageControls.MenuUI.Frame_BgError,
							PageControls.MenuUI.Label_Error,
							MapUid
						);
					}
				}
			}
		}

		foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
			if (Event.Scroll != Null) {
				if (Event.Scroll.Id == Frame_ScrollMaps.Id) {
					switch (Event.Type) {
						case {{{Scroll::P}}}C_EventType_Select: {
							if (State.MapList.existskey(Event.ToKey)) {
								declare Uid = State.MapList[Event.ToKey].Uid;
								declare Name = State.MapList[Event.ToKey].Name;
								declare AuthorName = State.MapList[Event.ToKey].AuthorDisplayName;
								State.MapSelect = UpdateMapSelected(State, PageControls, Uid, Name, AuthorName);
							}
						}
						case {{{Scroll::P}}}C_EventType_Focus: {
							if (Event.From != Null) FocusMap(Event.From, False);
							if (Event.To != Null) {
								FocusMap(Event.To, True);
							}
							if (Event.IsMouse && Event.To != Null && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
								Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupMenu_Global}}}"), Event.Scroll);
							}
						}
						case {{{Scroll::P}}}C_EventType_Update: {
							foreach (Key => Frame_Element in Event.ElementsVisible) {
								if (State.MapList.existskey(Key)) {
									ShowMap(Frame_Element, State.MapList[Key].Name);
								} else {
									HideMap(Frame_Element);
								}
							}
							foreach (Key => Frame_Element in Event.ElementsHidden) {
								HideMap(Frame_Element);
							}
						}
					}
				}
				if (Event.Scroll.Id == PageControls.TeamsUI.Frame_ScrollTeam1Members.Id || Event.Scroll.Id == PageControls.TeamsUI.Frame_ScrollTeam2Members.Id) {
					switch (Event.Type) {
						case {{{Scroll::P}}}C_EventType_Update: {
							declare Text[] TeamMembersNames;
							if (Event.Scroll.Id == PageControls.TeamsUI.Frame_ScrollTeam1Members.Id) TeamMembersNames = State.Team1MembersNames;
							else if	(Event.Scroll.Id == PageControls.TeamsUI.Frame_ScrollTeam2Members.Id) TeamMembersNames = State.Team2MembersNames;
							foreach (Key => Frame_Element in Event.ElementsVisible) {
								if (TeamMembersNames.existskey(Key)) {
									ShowMember(Frame_Element, TeamMembersNames[Key]);
								} else {
									HideMember(Frame_Element);
								}
							}
							foreach (Key => Frame_Element in Event.ElementsHidden) {
								HideMember(Frame_Element);
							}
						}
					}
				}
			}
		}

		if (Owner == Null && DisplayModule) {
			DisplayModule = False;
			PageControls.Frame_Global.Visible = DisplayModule;
		}
	}

	foreach (Event in PendingEvents) {
		if (Event.Type == CMlScriptEvent::Type::PluginCustomEvent && Event.CustomEventType == "{{{C_Event_RecordUpdated}}}" && Map != Null && Map.MapInfo != Null) {
			{{{MedalStack::P}}}SetMedalsNumber(Frame_MedalStack, Private_GetMedal(Map.MapInfo.MapUid, State.MedalsSettings));
		}
	}

	if (Task::IsInitialized(State.Task_MapList)) {
		State.Task_MapList = Task::Update(State.Task_MapList);
		if (!Task::IsRunning(State.Task_MapList)) {
			declare CTaskResult_NSMapList SourceTask = Task::GetSourceTask_NSMapList(State.Task_MapList);
			if (Task::IsSuccess(State.Task_MapList) && SourceTask != Null) {
				foreach (NSMap in SourceTask.MapList) {
					if (!State.MapListUids.exists(NSMap.Uid)) {
						State.MapList.add({{{CampaignStruct::P}}}K_Map {
							Uid = NSMap.Uid,
							Name = NSMap.Name,
							AuthorDisplayName = NSMap.AuthorDisplayName,
							AuthorTime = NSMap.AuthorScore
						});
						State.MapListUids.add(NSMap.Uid);
					}
				}
				// Check if all maps are registered in NadeoServices (otherwise add non-registered maps to the list)
				if (State.MapList.count != Playground.MapList_MapUids.count) {
					foreach (Index => MapUid in Playground.MapList_MapUids) {
						if (!State.MapListUids.exists(MapUid)) {
							State.MapList.add({{{CampaignStruct::P}}}K_Map {
								Uid = MapUid,
								Name = Playground.MapList_Names[Index],
								AuthorDisplayName = "",
								AuthorTime = -1
							});
							State.MapListUids.add(MapUid);
						}
					}
				}
				{{{Scroll::P}}}SetElementsTotal(This, Frame_ScrollMaps, State.MapList.count);
			}
			State.Task_MapList = Task::Destroy(State.Task_MapList);
		}
	}
} else {
	if (!PageWasHidden) PageWasHidden = True;
}

if (State.VoteRequested && !Playground.Request_IsInProgress) {
	State.VoteRequested = False;
	State = DisplayMenu(State, PageControls.MenuUI.Frame_Menu, "{{{C_NavGroupMenu}}}");
	PageControls.MenuUI.Frame_Menu.Hide();

	if (Playground.Request_Success) {
		CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		ShowFrameMenuAfterPopUp = True;
	} else {
		{{{PopUpMultiChoice::P}}}Open(This, PageControls.MenuUI.PopUpMultiChoice_VoteUnavailable);
	}
}

// The pause menu is opened and capturing inputs but not visible
// Close it to avoid being stuck
// This can happen if the `PauseMenu` UI module is hidden
// but the player is allowed to open the pause menu anymay
if (IsInGameMenuDisplayed && EnableMenuNavigationInputs && PageIsVisible && !PageControls.Frame_Global.Visible && !State.ScoresTableDisplayed) {
	CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
}

if (Vote::VoteActionEnabled(LocalUser) != (IsInGameMenuDisplayed && EnableMenuNavigationInputs && PageIsVisible && PageControls.Frame_Global.Visible)) {
	Vote::EnableVoteAction(LocalUser, IsInGameMenuDisplayed && EnableMenuNavigationInputs && PageIsVisible && PageControls.Frame_Global.Visible);
}
***
""",
[
	Navigation::ComponentV2(),
	Transition::ComponentV2(),
	Scroll::ComponentV2(),
	Button::ComponentV2(),
	ExpendableButton::ComponentV2(),
	MenuSounds::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	ScriptSettingsEditor::Component(),
	ClubStruct::Component(),
	MedalStack::Component(),
	UserStore::ComponentV2(),
	CampaignStruct::Component(),
	ProfilePlayerInfo::Component(),
	Settings::Component(),
	Credits::Component(),
	Maniapubs::Component(),
	UserStore::ComponentV2(),
	MenuButtonList::Component(),
	RecordsModule::Component(),
	DailyTrackerTAModule::Component(),
	COTDQualificationsRanking::Component(),
	MapStore::ComponentV2(),
	FavoriteMapsTools::Component(),
	PopUpReportSystem::ComponentV2(),
	ScoresTableVisibility::Component(),
	PlayerName::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the library
Void Yield() {
	foreach (Event in PendingEvents) {
		// ParentApp.PendingEvents is empty in CMlScriptInGame so we have to manually pass the events
		if (Event.PlaygroundType == CManiaAppPlaygroundEvent::Type::RecordUpdated) {
			declare CUILayer Layer = UIModules::GetModuleLayer(C_Id);
			if (Layer != Null) {
				LayerCustomEvent(Layer, C_Event_RecordUpdated, []);
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get a component with helper functions related to the scores table
Text Component() {
	return MV::Component(
		C_Name,
		"""
		""",
		"""
		""",
		"""
// Use when we want to lock the Scores Table button in the pause menu
Void {{{P}}}SetScoresTableButtonLocked(Boolean _IsLocked, Text _LockId) {
	declare Text[] PauseMenuOnline_ScoresTableButton_IsLocked for UI;
	if (!_IsLocked) {
		PauseMenuOnline_ScoresTableButton_IsLocked.remove(_LockId);
	} else if (!PauseMenuOnline_ScoresTableButton_IsLocked.exists(_LockId)) {
		PauseMenuOnline_ScoresTableButton_IsLocked.add(_LockId);
	}
}

// Check if the scores table button should be locked
Boolean {{{P}}}IsScoresTableButtonLocked() {
	declare Text[] PauseMenuOnline_ScoresTableButton_IsLocked for UI;
	declare netread Boolean Net_PauseMenuOnline_ScoresTableButton_IsLocked for Teams[0];
	return (PauseMenuOnline_ScoresTableButton_IsLocked.count > 0) || Net_PauseMenuOnline_ScoresTableButton_IsLocked;
}
		""",
		[],
		[]
	);
}