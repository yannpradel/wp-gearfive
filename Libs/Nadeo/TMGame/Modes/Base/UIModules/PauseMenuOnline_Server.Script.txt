/**
 *  UI module: PauseMenu server side
 */
#Const Version		"1.0.0"
#Const ScriptName "Libs/Nadeo/TMGame/Modes/Base/UIModules/PauseMenuOnline_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Online_PauseMenu"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set Previous Replay Save rights
 *
 *	@param	_IsPreviousReplayAllowed					True to allow previous replay save
 *																						False to forbid
 */
Void SetAllowPrevReplay(Boolean _IsPreviousReplayAllowed) {
	declare netwrite Boolean Net_Race_PauseMenuOnline_IsPreviousReplayAllowed for Teams[0];
	Net_Race_PauseMenuOnline_IsPreviousReplayAllowed = _IsPreviousReplayAllowed;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set the help description info
 *
 *	@param	_HelpDescription						Help description to display
 *
 */
Void SetHelp(Text _HelpDescription) {
	declare netwrite Text Net_Race_PauseMenuOnline_Help_Description for Teams[0];
	Net_Race_PauseMenuOnline_Help_Description = _HelpDescription;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set the medals info
 *
 *	@param	_ScopeType								Scope record type on the nadeoservices
 *	@param	_ScopeId									Scope record id on the nadeoservices
 *	@param	_ModeName									The name of the mode on the nadeoservices
 *	@param	_CustomData								Mode's custom data on the nadeoservices
 *
 */
Void SetupMedals(Text _ScopeType, Text _ScopeId, Text _GameMode, Text _CustomData) {
	declare netwrite Text Net_Race_PauseMenuOnline_Medals_ScopeType for Teams[0];
	declare netwrite Text Net_Race_PauseMenuOnline_Medals_ScopeId for Teams[0];
	declare netwrite Text Net_Race_PauseMenuOnline_Medals_GameMode for Teams[0];
	declare netwrite Text Net_Race_PauseMenuOnline_Medals_CustomData for Teams[0];
	Net_Race_PauseMenuOnline_Medals_ScopeType = _ScopeType;
	Net_Race_PauseMenuOnline_Medals_ScopeId = _ScopeId;
	Net_Race_PauseMenuOnline_Medals_GameMode = _GameMode;
	Net_Race_PauseMenuOnline_Medals_CustomData = _CustomData;
}

/** Set info if the mode is in matchmaking
 *
 *	@param	_IsMatchmaking						True to show special message when leaving the match
 *																		False to keep the default message
 */
Void SetMatchmaking(Boolean _IsMatchmaking) {
	declare netwrite Boolean Net_Race_PauseMenuOnline_IsMatchmaking for Teams[0];
	Net_Race_PauseMenuOnline_IsMatchmaking = _IsMatchmaking;
}

/** Use when we want to lock the Scores Table button in the pause menu
 *
 *	@param	_IsLocked								True to lock scores table feature in pause menu
 *																	False to unlock
 */
Void SetScoresTableButtonLocked(Boolean _IsLocked) {
	declare netwrite Boolean Net_PauseMenuOnline_ScoresTableButton_IsLocked for Teams[0];
	Net_PauseMenuOnline_ScoresTableButton_IsLocked = _IsLocked;
}

/** Use when we want to hide and lock the Invite Friends button in the pause menu
 *
 *	@param	_IsHiddenAndLocked								True to hide and lock Invite Friends feature in pause menu
 *																						False to show and unlock
 */
Void SetInviteFriendsButtonHiddenAndLocked(Boolean _IsHiddenAndLocked) {
	declare netwrite Boolean Net_PauseMenuOnline_InviteFriendsButton_IsHiddenAndLocked for Teams[0];
	Net_PauseMenuOnline_InviteFriendsButton_IsHiddenAndLocked = _IsHiddenAndLocked;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Display a button allowing the user
 *	to follow a joinlink. This joinlink
 *	is exclusive to the user and will
 *	override any global joinlink.
 *
 *	@param	_Player										The player receiving the joinlink
 *	@param	_JoinLink									The joinlink to follow
 *	@param	_Label										The text displayed in the button
 *	@parem	_QuickJoin								Force a quick join of the server (skip the server info pop-up)
 */
Void SetPersonalJoinlink(CSmPlayer _Player, Text _Joinlink, Text _Label, Boolean _QuickJoin) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;

	declare Text Joinlink = _Joinlink;
	if (_QuickJoin && Joinlink != "") {
		declare Tools::K_JoinLink ParsedJoinlink = Tools::ParseJoinLink(Joinlink);
		if (ParsedJoinlink.Type == "join") {
			ParsedJoinlink.Type = "qjoin";
		} else if (ParsedJoinlink.Type == "spectate") {
			ParsedJoinlink.Type = "qspectate";
		}
		Joinlink = Tools::GenerateJoinLink(ParsedJoinlink);
	}

	declare netwrite Integer Net_Race_PauseMenuOnline_JoinlinkUpdate for Teams[0];
	declare netwrite Text Net_Race_PauseMenuOnline_PersonalJoinlinkLink for UI;
	declare netwrite Text Net_Race_PauseMenuOnline_PersonalJoinlinkLabel for UI;
	Net_Race_PauseMenuOnline_PersonalJoinlinkLink = Joinlink;
	Net_Race_PauseMenuOnline_PersonalJoinlinkLabel = _Label;
	Net_Race_PauseMenuOnline_JoinlinkUpdate += 1;
}
Void SetPersonalJoinlink(CSmPlayer _Player, Text _Joinlink, Text _Label) {
	SetPersonalJoinlink(_Player, _Joinlink, _Label, True);
}
Void ResetPersonalJoinlink(CSmPlayer _Player) {
	SetPersonalJoinlink(_Player, "", "");
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Disable or enable the go to map button
Void DisableGoToMap(Boolean _Disabled) {
	declare netwrite Boolean Net_Race_PauseMenuOnline_GoToMapDisabled for Teams[0];
	Net_Race_PauseMenuOnline_GoToMapDisabled = _Disabled;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Display a button allowing the user
 *	to follow a joinlink. This joinlink
 *	is common to all users and will
 *	be overridden by any personal joinlink.
 *
 *	@param	_JoinLink									The joinlink to follow
 *	@param	_Label										The text displayed in the button
 */
Void SetCommonJoinlink(Text _Joinlink, Text _Label) {
	declare netwrite Integer Net_Race_PauseMenuOnline_JoinlinkUpdate for Teams[0];
	declare netwrite Text Net_Race_PauseMenuOnline_CommonJoinlinkLink for Teams[0];
	declare netwrite Text Net_Race_PauseMenuOnline_CommonJoinlinkLabel for Teams[0];
	Net_Race_PauseMenuOnline_CommonJoinlinkLink = _Joinlink;
	Net_Race_PauseMenuOnline_CommonJoinlinkLabel = _Label;
	Net_Race_PauseMenuOnline_JoinlinkUpdate += 1;
}
Void ResetCommonJoinlink() {
	SetCommonJoinlink("", "");
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;

	declare netwrite Boolean Net_Race_PauseMenuOnline_IsVisible for _Player;
	Net_Race_PauseMenuOnline_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
		ResetPersonalJoinlink(Player);
	}
	SetAllowPrevReplay(False);
	SetHelp("");
	SetMatchmaking(False);
	SetScoresTableButtonLocked(False);
	SetInviteFriendsButtonHiddenAndLocked(False);
	ResetCommonJoinlink();
	DisableGoToMap(False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}