/**
 *  UI module: SquadMembers client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/TMGame/Modes/Base/UIModules/SquadMembers_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Race_SquadMembers"
#Const C_LayerType CUILayer::EUILayerType::Normal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	return MV::Create(
GetId(), 3,
"""
""",
"""
#Include "Libs/Nadeo/CMGame/Utils/SquadNotificationObserver_SquadMembers_InGame.Script.txt" as NotificationObserver
#Include "Libs/Nadeo/CMGame/Utils/SquadNotificationObserver_Common.Script.txt" as NotificationObserver_Common
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "TextLib" as TL
""",
"""
// Send a message in the chat (for the other squad members) when a player leaves the squad
Void ManageSquadMemberRemoved(Text _MemberDisplayName) {
	if (ClientUI != Null) {
		//L16N [Squad] A squad member has left the squad, %1 will be replaced by the player name. e.g "[INFO] PlayerA has left the squad"
		ClientUI.SendChat(TL::Compose(_("$<$F00[INFO] %1 has left the squad$>"), _MemberDisplayName));
	}
}
***MainInit***
***
declare netread Boolean Net_Race_SquadMembers_IsVisible for UI;
***

***MainLoop***
***
if (Net_Race_SquadMembers_IsVisible) {
	/* Handle squad notifications */
	if (NotificationObserver::IsNotificationAvailable()) {
		declare NotificationObserver_Common::K_Notification Notification = NotificationObserver::GetNextNotification();
		if (Notification.Type == NotificationObserver_Common::C_NotificationSubType_MemberRemoved && Notification.SquadType != "") {
			declare Text MemberDisplayName = Notification.DisplayName;
			foreach (Score in Scores) {
				if (Score.User != Null && Score.User.WebServicesUserId == Notification.AccountId) {
					MemberDisplayName = UserStore::GetPlayerName(Score.User, False);
				}
			}
			ManageSquadMemberRemoved(MemberDisplayName);
		}
	}
}
***
""",
[],
[]
	);
}