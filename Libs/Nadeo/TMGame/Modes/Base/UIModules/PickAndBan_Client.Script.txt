/**
 *	UI module: PickAndBan client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/TMGame/Modes/Base/UIModules/PickAndBan_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/CMGame/Components/MenuButtonList.Script.txt" as MenuButtonList
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Outline.Script.txt" as Outline
#Include "Libs/Nadeo/CMGame/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/PickAndBan_Common.Script.txt" as UIModules_PickAndBan_Common
#Include "Libs/Nadeo/TMGame/Modes/ZIndex.Script.txt" as ZIndex
#Include "Libs/Nadeo/Trackmania/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_StepsMax 10
#Const C_TeamsMax 2
#Const C_TeamsCheckInterval 1000
#Const C_ImgPath "file://Media/Manialinks/Nadeo/TMGame/Modes/PickBan"
#Const C_NavGroup_Global "navgroup-pick-and-ban-global"

//L16N [PicksAndBans] Sequence during which the players select the tracks on which they will play (pick) or not (ban)
#Const C_Text_PicksAndBans _("Picks & Bans")
//L16N [PicksAndBans] Track selected to be played during the match
#Const C_Text_Pick _("|PicksAndBans|Pick")
//L16N [PicksAndBans] Track selected not to be played during the match
#Const C_Text_Ban _("|PicksAndBans|Ban")
//L16N [PicksAndBans] Track selected randomly
#Const C_Text_Random _("|PicksAndBans|Random")
//L16N [PicksAndBans] Last track of the match selected during the pick and ban. It will be picked randomly.
#Const C_Text_Decider _("|PicksAndBans|Decider")
//L16N [PicksAndBans] Display the name of the player picking a track to play and the name of their team. %1 will be replaced by the name of the player and %2 by the name of their team. eg: "Player1 is picking for TeamA".
#Const C_Text_PickingFor _("%1 is picking for %2")
//L16N [PicksAndBans] Display the name of the player banning a track to not play and the name of their team. %1 will be replaced by the name of the player and %2 by the name of their team. eg: "Player1 is banning for TeamA".
#Const C_Text_BanningFor _("%1 is banning for %2")
//L16N [PicksAndBans] Display the name of the player picking a track to play. %1 will be replaced by the name of the player. eg: "Player1 is picking".
#Const C_Text_Picking _("%1 is picking")
//L16N [PicksAndBans] Display the name of the player banning a track to not play. %1 will be replaced by the name of the player. eg: "Player1 is banning".
#Const C_Text_Banning _("%1 is banning")
//L16N [PicksAndBans]  Ask the player to confirm their track selection.
#Const C_Text_ConfirmSelection _("Confirm your selection")
//L16N [PicksAndBans] Ask the player to confirm their pick. %1 will be replaced by the name of the track picked. eg: "Pick TrackB".
#Const C_Text_ConfirmPick _("|PicksAndBans|Pick %1")
//L16N [PicksAndBans] Ask the player to confirm their ban. %1 will be replaced by the name of the track banned. eg: "Ban TrackB".
#Const C_Text_ConfirmBan _("|PicksAndBans|Ban %1")
//L16N [PicksAndBans] Picks and bans result.
#Const C_Text_Result _("|PicksAndBans|Result")

#Const C_Choice_Cancel 0
#Const C_Choice_Confirm 1
#Const C_Choices_ConfirmSelection [
	0 => _("|Infinitive|Cancel"),
	1 => _("|Infinitive|Confirm")
]

#Const C_TextSizeMax_LabelTeamsVs 6.
#Const C_TextSizeMin_LabelTeamsVs 2.
#Const C_TextSizeStep_LabelTeamsVs 0.5

#Const C_TextSizeMax_LabelMatchInfo 6.
#Const C_TextSizeMin_LabelMatchInfo 2.
#Const C_TextSizeStep_LabelMatchInfo 0.5

#Const C_TextSizeMax_LabelTeamName 3.5
#Const C_TextSizeMin_LabelTeamName 0.5
#Const C_TextSizeStep_LabelTeamName 0.5

#Const C_TextSizeMax_LabelAction 3.5
#Const C_TextSizeMin_LabelAction 0.5
#Const C_TextSizeStep_LabelAction 0.5

#Const C_TextSizeMax_LabelTitle 17.
#Const C_TextSizeMin_LabelTitle 7.
#Const C_TextSizeStep_LabelTitle 1.

#Const C_TextSizeMax_LabelUserAction 5.
#Const C_TextSizeMin_LabelUserAction 1.
#Const C_TextSizeStep_LabelUserAction 0.5

#Const C_Color_DefaultBg "000514"
#Const C_ColorVec3_DefaultTeam <0., 0.02, 0.078>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_PickAndBan_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_PickAndBan_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	// Steps properties
	declare Real SizeX_Steps = 296.;
	declare Real SizeX_StepsGutter = 1.;
	declare Real SizeX_Step = ML::Max(0., (SizeX_Steps - ((C_StepsMax - 1) * SizeX_StepsGutter)) / C_StepsMax);

	declare Text ML_StepsPlayer = "";
	for (I, 0, C_StepsMax - 1) {
		ML_StepsPlayer ^= """<frameinstance modelid="framemodel-step-player" pos="{{{I * (SizeX_Step + SizeX_StepsGutter)}}} 0" />""";
	}
	declare Text ML_StepsSpectator = "";
	for (I, 0, C_StepsMax - 1) {
		ML_StepsSpectator ^= """<frameinstance modelid="framemodel-step-spectator" pos="{{{I * (SizeX_Step + SizeX_StepsGutter)}}} 0" />""";
	}

	// Tracks scroll properties
	declare Vec2 Size_TracksScroll = <164., 66.>;
	declare Vec2 Size_TracksScrollGutter = <1., 1.>;
	declare Int2 Dimension_TracksScroll = <5, 2>;
	declare Vec2 Size_TracksScrollItem = Scroll::GetElementSize(Size_TracksScroll, Size_TracksScrollGutter, Dimension_TracksScroll.X, Dimension_TracksScroll.Y);
	declare Integer TracksItemNb = Scroll::GetRequiredElementsNb(Size_TracksScroll, Size_TracksScrollItem, Size_TracksScrollGutter, Dimension_TracksScroll.X);
	declare Text ML_TracksScrollLines;
	for (I, 1, TracksItemNb) {
		ML_TracksScrollLines ^= """<frameinstance modelid="framemodel-track" class="{{{Scroll::C_Class_Element}}}" />""";
	}

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-extrabold" textprefix="$t" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="ffffff" />
	<style class="text-regular" textprefix="$t" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textcolor="ffffff" />
</stylesheet>
<framemodel id="framemodel-step-player">
	<quad id="quad-team-logo-bg" z-index="0" size="{{{SizeX_Step}}} 17" image="{{{C_ImgPath}}}/PickBan_Square.dds" opacity="0.8" />
	<quad id="quad-team-logo" pos="{{{SizeX_Step * 0.5}}} -8.5" z-index="1" size="{{{SizeX_Step - 2}}} 15" halign="center" valign="center" keepratio="fit" />
	<label id="label-team-name" class="text-extrabold" pos="{{{SizeX_Step * 0.5}}} -8.5" z-index="2" size="{{{SizeX_Step - 2}}} 15" halign="center" valign="center2" textsize="{{{C_TextSizeMax_LabelTeamName}}}" hidden="1" />
	<label id="label-action" class="text-extrabold" pos="{{{SizeX_Step * 0.5}}} -22" z-index="3" size="{{{SizeX_Step}}} 9" halign="center" valign="center2" textsize="{{{C_TextSizeMax_LabelAction}}}" />
	<quad id="quad-track-name-bg" pos="0 -26"z-index="0" size="{{{SizeX_Step}}} 8" bgcolor="008800" opacity="0.8" />
	<frameinstance id="control-block-list-track-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" pos="{{{SizeX_Step * 0.5}}} -30" z-index="1" data-size="{{{SizeX_Step - 2}}} 6" data-halign="center" data-valign="center2" data-textsize="1.6" data-textsize-fitlabel-min="0.5" data-textsize-fitlabel-step="0.1" data-textprefix="$t" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" data-textcolor="ffffff" data-filter-profanities="Always" />
	<label id="label-countdown" pos="{{{SizeX_Step * 0.5}}} -30" z-index="2" size="{{{SizeX_Step - 2}}} 6" halign="center" valign="center2" textsize="1.6" textprefix="$t" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textcolor="ffffff" />
</framemodel>
<framemodel id="framemodel-step-spectator">
	<quad id="quad-team-logo-bg" z-index="0" size="{{{SizeX_Step}}} {{{SizeX_Step}}}" image="{{{C_ImgPath}}}/PickBan_Square.dds" opacity="0.8" />
	<quad id="quad-team-logo" pos="{{{SizeX_Step * 0.5}}} {{{SizeX_Step * -0.5}}}" z-index="1" size="{{{SizeX_Step - 2}}} {{{SizeX_Step - 2}}}" halign="center" valign="center" keepratio="fit" />
	<label id="label-team-name" class="text-extrabold" pos="{{{SizeX_Step * 0.5}}} {{{SizeX_Step * -0.5}}}" z-index="2" size="{{{SizeX_Step - 2}}} {{{SizeX_Step - 2}}}" halign="center" valign="center2" textsize="{{{C_TextSizeMax_LabelTeamName}}}" hidden="1" />
	<label id="label-action" class="text-extrabold" pos="{{{SizeX_Step * 0.5}}} {{{-SizeX_Step - 5}}}" z-index="3" size="{{{SizeX_Step}}} 9" halign="center" valign="center2" textsize="{{{C_TextSizeMax_LabelAction}}}" />
	<frameinstance id="control-block-list-track-thumbnail" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" pos="0 {{{-SizeX_Step - 9}}}" z-index="1" data-size="{{{SizeX_Step}}} {{{SizeX_Step}}}" data-keepratio="clip" />
	<quad id="quad-track-thumbnail-bg" pos="0 {{{-SizeX_Step - 9}}}" z-index="0" size="{{{SizeX_Step}}} {{{SizeX_Step}}}" image="{{{C_ImgPath}}}/PickBan_Square.dds" opacity="0.8" />
	<label id="label-countdown" pos="{{{SizeX_Step * 0.5}}} {{{-SizeX_Step - 9 - (SizeX_Step * 0.5)}}}" z-index="1" size="{{{SizeX_Step - 2}}} {{{SizeX_Step - 2}}}" halign="center" valign="center2" textsize="5" textprefix="$t" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textcolor="ffffff" />
	<frameinstance id="control-block-list-track-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" pos="{{{SizeX_Step * 0.5}}} {{{(SizeX_Step * -2) - 13}}}" z-index="1" data-size="{{{SizeX_Step - 2}}} 6" data-halign="center" data-valign="center2" data-textsize="1.6" data-textsize-fitlabel-min="0.5" data-textsize-fitlabel-step="0.1" data-textprefix="$t" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" data-textcolor="ffffff" data-filter-profanities="Always" />
</framemodel>
<framemodel id="framemodel-track">
	<quad class="{{{Scroll::C_Class_ActivationZone}}}" z-index="1" size="{{{Size_TracksScrollItem.X}}} {{{Size_TracksScrollItem.Y}}}" opacity="0" scriptevents="1" />
	<frameinstance id="control-block-list-track-thumbnail" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" z-index="2" data-size="{{{Size_TracksScrollItem.X}}} {{{Size_TracksScrollItem.Y}}}" data-keepratio="clip" />
	<quad id="quad-gradient" z-index="3" size="{{{Size_TracksScrollItem.X}}} {{{Size_TracksScrollItem.Y}}}" image="{{{C_ImgPath}}}/PickBan_Gradient.dds" colorize="000000" opacity="0.8" />
	<frameinstance id="control-block-list-track-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" pos="{{{Size_TracksScrollItem.X * 0.5}}} {{{-Size_TracksScrollItem.Y + 1}}}" z-index="4" data-size="{{{Size_TracksScrollItem.X - 2}}} 4" data-halign="center" data-valign="bottom" data-textsize="2" data-textsize-fitlabel-min="0.5" data-textsize-fitlabel-step="0.25" data-textprefix="$t" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" data-textcolor="ffffff" data-filter-profanities="Always" />
	<frameinstance id="outline-track-selection" modelid="{{{Outline::C_Name}}}" z-index="5" data-size="{{{Size_TracksScrollItem.X}}} {{{Size_TracksScrollItem.Y}}}" data-color="ffffff" data-thickness="0.5" data-opacity="0" />
</framemodel>
<frame
	id="frame-global"
	class="{{{Navigation::C_Class}}}"
	z-index="{{{ZIndex::C_ZIndex_PickAndBan}}}"
	hidden="1"
	data-nav-inputs="appmenu;cancel"
	data-nav-targets="_;_"
	data-nav-group="{{{C_NavGroup_Global}}}"
>
	<frame {{{UIModules::CustomizableUIModule(UIModules_PickAndBan_Common::C_UIModuleConfig)}}}>
		<quad id="quad-background" z-index="0" size="320 180" halign="center" valign="center" bgcolor="{{{C_Color_DefaultBg}}}" fullscreen="1" />
		<frame z-index="1">
			<!-- Top line -->
			<label id="label-title" class="text-extrabold" pos="0 62" z-index="4" size="190 14" halign="center" valign="center2" textsize="{{{C_TextSizeMax_LabelTitle}}}" text="{{{C_Text_PicksAndBans}}}" />
			<label id="label-user-action" class="text-regular" pos="0 52" z-index="4" size="190 6" halign="center" valign="center2" textsize="{{{C_TextSizeMax_LabelUserAction}}}" filter-profanities="Always" hidden="1" />
			<quad id="quad-logo-top-left" pos="-125 62" z-index="1" size="50 20" halign="center" valign="center" keepratio="fit" />
			<quad id="quad-logo-top-right" pos="125 62" z-index="1" size="50 20" halign="center" valign="center" keepratio="fit" />
			<!-- Bottom line -->
			<quad id="quad-logo-bottom" pos="0 -76" z-index="1" size="50 20" halign="center" valign="center" keepratio="fit" />
			<label id="label-teams-vs" class="text-regular" pos="-148 -74" z-index="2" size="118 8" halign="left" valign="center2" textsize="{{{C_TextSizeMax_LabelTeamsVs}}}" filter-profanities="Always" />
			<label id="label-match-info" class="text-regular" pos="148 -74" z-index="2" size="118 8" halign="right" valign="center2" textsize="{{{C_TextSizeMax_LabelMatchInfo}}}" filter-profanities="Always" />
			<!-- Steps -->
			<frame id="frame-steps-player" pos="{{{SizeX_Steps * -0.5}}} 46" z-index="2">
				{{{ML_StepsPlayer}}}
			</frame>
			<frame id="frame-steps-spectator" pos="{{{SizeX_Steps * -0.5}}} 46" z-index="2" hidden="1">
				{{{ML_StepsSpectator}}}
			</frame>
			<frame id="frame-active-step-spectator" pos="{{{SizeX_Steps * -0.5}}} 46" z-index="3" hidden="1">
				<frameinstance id="outline-active-step-spectator" modelid="{{{Outline::C_Name}}}" data-size="{{{SizeX_Step}}} {{{(SizeX_Step * 2) + 9}}}" data-color="ffffff" data-thickness="0.5" />
			</frame>
			<!-- Tracks scroll -->
			<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-tracks" z-index="4" />
			<frame
				id="scroll-tracks"
				class="{{{Scroll::C_Class_Window}}}"
				pos="{{{Size_TracksScroll.X * -0.5}}} 4"
				z-index="3"
				data-elements-per-line="{{{Dimension_TracksScroll.X}}}"
				data-element-size="{{{Size_TracksScrollItem.X}}} {{{Size_TracksScrollItem.Y}}}"
				data-margin-size="{{{Size_TracksScrollGutter.X}}} {{{Size_TracksScrollGutter.Y}}}"
				data-window-size="{{{Size_TracksScroll.X}}} {{{Size_TracksScroll.Y}}}"
				data-scrollbar-xoffset="2"
				data-scroll-indicator="0"
			>
				<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
				{{{ML_TracksScrollLines}}}
			</frame>
		</frame>
		<!-- Confirmation pop-up -->
		<frameinstance
			id="popup-confirm-selection"
			modelid="{{{PopUpMultiChoice::C_Name}}}"
			z-index="2"
			data-title="{{{C_Text_ConfirmSelection}}}"
			data-choices="{{{TL::MLEncode(C_Choices_ConfirmSelection.tojson())}}}"
			hidden="1"
		/>
		<!-- Controller info -->
		<frameinstance id="button-list-pick-and-ban" modelid="{{{MenuButtonList::C_Name}}}" z-index="3" />
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/PickAndBan_Common.Script.txt" as PickAndBan_Common
#Include "Libs/Nadeo/TMGame/Modes/InputPriority.Script.txt" as InputPriority

#Struct K_Team {
	Text Name;
	Text LogoUrl;
	Vec3 Color;
}
#Struct K_Map {
	Text Uid;
	Text Name;
	Text ThumbnailUrl;
	Text AuthorAccountId;
}
#Struct K_ControlsStep {
	CMlFrame Frame_Step;
	CMlQuad Quad_TeamLogoBg;
	CMlQuad Quad_TeamLogo;
	CMlLabel Label_TeamName;
	CMlLabel Label_Action;
	CMlLabel Label_Countdown;
	CMlQuad Quad_TrackThumbnailBg;
	CMlFrame ControlBlockList_TrackThumbnail;
	CMlQuad Quad_TrackNameBg;
	CMlFrame ControlBlockList_TrackName;
}
#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlQuad Quad_Background;
	CMlQuad Quad_LogoTopLeft;
	CMlQuad Quad_LogoTopRight;
	CMlQuad Quad_LogoBottom;
	CMlLabel Label_UserAction;
	CMlLabel Label_TeamsVs;
	CMlLabel Label_MatchInfo;
	CMlFrame Frame_StepsPlayer;
	K_ControlsStep[] StepsPlayer;
	CMlFrame Frame_StepsSpectator;
	CMlFrame Frame_ActiveStepSpectator;
	K_ControlsStep[] StepsSpectator;
	CMlFrame ButtonList_PickAndBan;
	CMlFrame Scroll_Tracks;
	CMlFrame Outline_ActiveStepSpectator;
	CMlLabel Label_ActiveCountdown;
	CMlFrame PopUp_ConfirmSelection;
}
#Struct K_State {
	K_Controls Controls;
	Boolean PageIsVisible;
	Boolean DisplayModule;
	Text BackgroundUrl;
	Text TopLeftLogoUrl;
	Text TopRightLogoUrl;
	Text BottomLogoUrl;
	Integer TeamsCheckTime;
	K_Team[] Teams;
	Text MatchInfo;
	Text PickAndBanOrder;
	PickAndBan_Common::K_Step[] Steps;
	Boolean IsSpectator;
	Boolean IsSpectatorDisplay;
	Boolean MapListRequestIsInProgress;
	K_Map[Text] MapList;
	Text[] ScrollMapList;
	Task::K_Task Task_GetMapInfoListFromUid;
	Boolean IsRunning;
	Boolean IsVisible;
	Integer CurrentStepKey;
	Integer CurrentStepEndTime;
	Text ActiveUserAccountId;
	Text ConfirmMapUid;
	Boolean CanSelectATrack;
	Boolean IsInGameMenuDisplayed;
	Boolean ConfirmationPopUpDisplayed;
	Text[] LockedMapUids;
	Integer[] LockedScrollKeys;
}

#Const C_State_Null K_State {
	Controls = K_Controls {},
	PageIsVisible = False,
	DisplayModule = False,
	BackgroundUrl = "",
	TopLeftLogoUrl = "",
	TopRightLogoUrl = "",
	BottomLogoUrl = "",
	TeamsCheckTime = 0,
	Teams = [],
	MatchInfo = "",
	PickAndBanOrder = "",
	Steps = [],
	IsSpectator = False,
	IsSpectatorDisplay = False,
	MapListRequestIsInProgress = False,
	MapList = [],
	ScrollMapList = [],
	Task_GetMapInfoListFromUid = Task::K_Task {},
	IsRunning = False,
	IsVisible = False,
	CurrentStepKey = -1,
	CurrentStepEndTime = -1,
	ActiveUserAccountId = "",
	ConfirmMapUid = "",
	CanSelectATrack = False,
	IsInGameMenuDisplayed = False,
	ConfirmationPopUpDisplayed = False,
	LockedMapUids = [],
	LockedScrollKeys = []
}
#Const C_Map_Null K_Map {
	Uid = ""
}

#Const C_TeamsMax {{{dump(C_TeamsMax)}}}
#Const C_TeamsCheckInterval {{{dump(C_TeamsCheckInterval)}}}
#Const C_ImgPath {{{dump(C_ImgPath)}}}
#Const C_SizeX_StepsGutter {{{dump(SizeX_StepsGutter)}}}
#Const C_SizeX_Step {{{dump(SizeX_Step)}}}
#Const C_StepUpdateAnimDuration 250
#Const C_ScrollTrackFocusAnimDuration 250
#Const C_NavGroup_Global {{{dump(C_NavGroup_Global)}}}

#Const C_ColorVec3_DefaultTeam {{{dump(C_ColorVec3_DefaultTeam)}}}

#Const C_TextSizeMax_LabelTeamsVs {{{dump(C_TextSizeMax_LabelTeamsVs)}}}
#Const C_TextSizeMin_LabelTeamsVs {{{dump(C_TextSizeMin_LabelTeamsVs)}}}
#Const C_TextSizeStep_LabelTeamsVs {{{dump(C_TextSizeStep_LabelTeamsVs)}}}
#Const C_TextSizeMax_LabelMatchInfo {{{dump(C_TextSizeMax_LabelMatchInfo)}}}
#Const C_TextSizeMin_LabelMatchInfo {{{dump(C_TextSizeMin_LabelMatchInfo)}}}
#Const C_TextSizeStep_LabelMatchInfo {{{dump(C_TextSizeStep_LabelMatchInfo)}}}
#Const C_TextSizeMax_LabelTeamName {{{dump(C_TextSizeMax_LabelTeamName)}}}
#Const C_TextSizeMin_LabelTeamName {{{dump(C_TextSizeMin_LabelTeamName)}}}
#Const C_TextSizeStep_LabelTeamName {{{dump(C_TextSizeStep_LabelTeamName)}}}
#Const C_TextSizeMax_LabelAction {{{dump(C_TextSizeMax_LabelAction)}}}
#Const C_TextSizeMin_LabelAction {{{dump(C_TextSizeMin_LabelAction)}}}
#Const C_TextSizeStep_LabelAction {{{dump(C_TextSizeStep_LabelAction)}}}
#Const C_TextSizeMax_LabelTitle {{{dump(C_TextSizeMax_LabelTitle)}}}
#Const C_TextSizeMin_LabelTitle {{{dump(C_TextSizeMin_LabelTitle)}}}
#Const C_TextSizeStep_LabelTitle {{{dump(C_TextSizeStep_LabelTitle)}}}
#Const C_TextSizeMax_LabelUserAction {{{dump(C_TextSizeMax_LabelUserAction)}}}
#Const C_TextSizeMin_LabelUserAction {{{dump(C_TextSizeMin_LabelUserAction)}}}
#Const C_TextSizeStep_LabelUserAction {{{dump(C_TextSizeStep_LabelUserAction)}}}

#Const C_Text_Pick {{{dump(C_Text_Pick)}}}
#Const C_Text_Ban {{{dump(C_Text_Ban)}}}
#Const C_Text_Random {{{dump(C_Text_Random)}}}
#Const C_Text_Decider {{{dump(C_Text_Decider)}}}
#Const C_Text_PickingFor {{{dump(C_Text_PickingFor)}}}
#Const C_Text_BanningFor {{{dump(C_Text_BanningFor)}}}
#Const C_Text_Picking {{{dump(C_Text_Picking)}}}
#Const C_Text_Banning {{{dump(C_Text_Banning)}}}
#Const C_Text_ConfirmPick {{{dump(C_Text_ConfirmPick)}}}
#Const C_Text_ConfirmBan {{{dump(C_Text_ConfirmBan)}}}
#Const C_Text_Result {{{dump(C_Text_Result)}}}

#Const C_Choice_Cancel {{{dump(C_Choice_Cancel)}}}
#Const C_Choice_Confirm {{{dump(C_Choice_Confirm)}}}
""",
"""
Void UpdateButtonList(K_State _State) {
	declare Text[Text] Buttons;
	if ((_State.CanSelectATrack || _State.ConfirmationPopUpDisplayed) && !_State.IsInGameMenuDisplayed) {
		Buttons["A"] = _("Select");
		if (_State.ConfirmationPopUpDisplayed) {
			Buttons["B"] = _("Cancel");
		}
	}
	{{{MenuButtonList::P}}}SetButtons(_State.Controls.ButtonList_PickAndBan, Buttons);
}

Boolean Private_IsActiveUser(K_State _State, CUser _LocalUser) {
	return (_LocalUser != Null && _State.ActiveUserAccountId == _LocalUser.WebServicesUserId);
}

K_State UpdateNavigation(K_State _State) {
	declare K_State State = _State;

	// Because the chat is hidden behind the pick and ban UI
	// we want to prevent the user from using it. To do that, we have to enable the
	// menu navigation all the time as long as the pick and ban UI is visible.
	// If we wan't to be able to chat, the navigation should be enabled
	// only when we are not in spectator mode and we are the active user
	declare Boolean NavigationIsEnabled = State.IsVisible && !State.IsInGameMenuDisplayed;
	State.CanSelectATrack = (
		NavigationIsEnabled &&
		!State.IsSpectatorDisplay &&
		Private_IsActiveUser(State, LocalUser) &&
		!State.ConfirmationPopUpDisplayed
	);

	EnableMenuNavigation(NavigationIsEnabled, False, Null, InputPriority::C_InputPriority_PickAndBan);

	{{{Navigation::P}}}EnableGroup(This, C_NavGroup_Global, NavigationIsEnabled && !{{{PopUpMultiChoice::P}}}IsDisplayed(State.Controls.PopUp_ConfirmSelection));

	if (State.CanSelectATrack) {
		{{{Scroll::P}}}Focus(This, State.Controls.Scroll_Tracks);
	} else {
		{{{Scroll::P}}}Unfocus(This, State.Controls.Scroll_Tracks);
	}
	{{{Scroll::P}}}LockNavigation(State.Controls.Scroll_Tracks, !State.CanSelectATrack);

	UpdateButtonList(State);

	return State;
}

Text Private_GetTrackThumbnail(K_Map _Map) {
	if (_Map.ThumbnailUrl != "") {
		return _Map.ThumbnailUrl;
	} else if (_Map.Uid != "") {
		return "file://Thumbnails/MapUid/"^_Map.Uid;
	}
	return "";
}

K_State SetBackgroundUrl(K_State _State, Text _BackgroundUrl) {
	if (_State.BackgroundUrl == _BackgroundUrl) return _State;

	declare K_State State = _State;
	State.BackgroundUrl = _BackgroundUrl;
	State.Controls.Quad_Background.ImageUrl = State.BackgroundUrl;
	return State;
}

K_State SetTopLeftLogoUrl(K_State _State, Text _TopLeftLogoUrl) {
	if (_State.TopLeftLogoUrl == _TopLeftLogoUrl) return _State;

	declare K_State State = _State;
	State.TopLeftLogoUrl = _TopLeftLogoUrl;
	State.Controls.Quad_LogoTopLeft.ImageUrl = State.TopLeftLogoUrl;
	return State;
}

K_State SetTopRightLogoUrl(K_State _State, Text _TopRightLogoUrl) {
	if (_State.TopRightLogoUrl == _TopRightLogoUrl) return _State;

	declare K_State State = _State;
	State.TopRightLogoUrl = _TopRightLogoUrl;
	State.Controls.Quad_LogoTopRight.ImageUrl = State.TopRightLogoUrl;
	return State;
}

K_State SetBottomLogoUrl(K_State _State, Text _BottomLogoUrl) {
	if (_State.BottomLogoUrl == _BottomLogoUrl) return _State;

	declare K_State State = _State;
	State.BottomLogoUrl = _BottomLogoUrl;
	State.Controls.Quad_LogoBottom.ImageUrl = State.BottomLogoUrl;
	return State;
}

K_State SetVisibility(K_State _State, Boolean _PageIsVisible, Boolean _DisplayModule, Boolean _IsRunning) {
	declare K_State State = _State;

	State.PageIsVisible = _PageIsVisible;
	State.DisplayModule = _DisplayModule;
	State.IsRunning = _IsRunning;
	State.IsVisible = State.PageIsVisible && State.DisplayModule && State.IsRunning;

	State.Controls.Frame_Global.Visible = State.IsVisible;
	if (State.IsVisible) {
		State.TeamsCheckTime = Now;
	} else {
		{{{PopUpMultiChoice::P}}}Close(This, State.Controls.PopUp_ConfirmSelection);
	}

	State = UpdateNavigation(State);

	return State;
}

Integer Private_GetStepKeyShift(K_State _State, Integer _ControlsStepsCount) {
	declare Integer StepKeyShift = 0;
	if (_State.Steps.count > _ControlsStepsCount) {
		if (_ControlsStepsCount == 1) {
			StepKeyShift = _State.CurrentStepKey;
		} else if (_ControlsStepsCount == 2) {
			StepKeyShift = ML::Max(0, _State.CurrentStepKey - _ControlsStepsCount + 1);
		} else {
			StepKeyShift = ML::Max(0, _State.CurrentStepKey - _ControlsStepsCount + 2);
		}
	}
	return StepKeyShift;
}

Void UpdateSteps(K_State _State) {
	declare K_ControlsStep[] ControlsSteps;
	declare CMlFrame Frame_Steps;
	if (_State.IsSpectatorDisplay) {
		ControlsSteps = _State.Controls.StepsSpectator;
		Frame_Steps <=> _State.Controls.Frame_StepsSpectator;
	} else {
		ControlsSteps = _State.Controls.StepsPlayer;
		Frame_Steps <=> _State.Controls.Frame_StepsPlayer;
	}

	foreach (Key => ControlsStep in ControlsSteps) {
		declare Integer StepKey = Private_GetStepKeyShift(_State, ControlsSteps.count) + Key;
		if (_State.Steps.existskey(StepKey)) {
			declare PickAndBan_Common::K_Step Step = _State.Steps[StepKey];
			if (Step.Team > 0 && _State.Teams.existskey(Step.Team - 1)) {
				declare K_Team LocalTeam = _State.Teams[Step.Team - 1];
				ControlsStep.Quad_TeamLogoBg.Colorize = LocalTeam.Color;
				if (ControlsStep.Quad_TrackNameBg != Null) {
					ControlsStep.Quad_TrackNameBg.BgColor = LocalTeam.Color;
				}
				if (ControlsStep.Quad_TrackThumbnailBg != Null) {
					ControlsStep.Quad_TrackThumbnailBg.Colorize = LocalTeam.Color;
				}
				if (LocalTeam.LogoUrl == "") {
					ControlsStep.Label_TeamName.Value = LocalTeam.Name;
					Tools::FitLabelValue(ControlsStep.Label_TeamName, C_TextSizeMax_LabelTeamName, C_TextSizeMin_LabelTeamName, C_TextSizeStep_LabelTeamName);
					ControlsStep.Quad_TeamLogo.Visible = False;
					ControlsStep.Label_TeamName.Visible = True;
				} else {
					ControlsStep.Quad_TeamLogo.ImageUrl = LocalTeam.LogoUrl;
					ControlsStep.Quad_TeamLogo.Colorize = <-1., -1., -1.>;
					ControlsStep.Quad_TeamLogo.Visible = True;
					ControlsStep.Label_TeamName.Visible = False;
				}
			} else {
				if (Step.Action == PickAndBan_Common::C_Action_RandomPick) {
					if (StepKey == _State.Steps.count - 1) {
						ControlsStep.Quad_TeamLogo.ImageUrl = C_ImgPath^"/Decider.dds";
						ControlsStep.Quad_TeamLogo.Colorize = <1., 1., 1.>;
						ControlsStep.Quad_TeamLogo.Visible = True;
						ControlsStep.Label_TeamName.Visible = False;
					} else {
						ControlsStep.Label_TeamName.Value = "?";
						ControlsStep.Label_TeamName.TextSizeReal = 16.;
						ControlsStep.Quad_TeamLogo.Visible = False;
						ControlsStep.Label_TeamName.Visible = True;
					}
				} else {
					ControlsStep.Quad_TeamLogo.Visible = False;
					ControlsStep.Label_TeamName.Visible = False;
				}
				ControlsStep.Quad_TeamLogoBg.Colorize = C_ColorVec3_DefaultTeam;
				if (ControlsStep.Quad_TrackNameBg != Null) {
					ControlsStep.Quad_TrackNameBg.BgColor = C_ColorVec3_DefaultTeam;
				}
				if (ControlsStep.Quad_TrackThumbnailBg != Null) {
					ControlsStep.Quad_TrackThumbnailBg.Colorize = C_ColorVec3_DefaultTeam;
				}
			}
			switch (Step.Action) {
				case PickAndBan_Common::C_Action_Pick: {
					ControlsStep.Label_Action.Value = C_Text_Pick;
				}
				case PickAndBan_Common::C_Action_Ban: {
					ControlsStep.Label_Action.Value = C_Text_Ban;
				}
				case PickAndBan_Common::C_Action_RandomPick: {
					if (StepKey == _State.Steps.count - 1) {
						ControlsStep.Label_Action.Value = C_Text_Decider;
					} else {
						ControlsStep.Label_Action.Value = C_Text_Random;
					}
				}
				default: {
					ControlsStep.Label_Action.Value = "";
				}
			}
			ControlsStep.Label_Action.Visible = (ControlsStep.Label_Action.Value != "");
			if (ControlsStep.Label_Action.Visible) {
				Tools::FitLabelValue(ControlsStep.Label_Action, C_TextSizeMax_LabelAction, C_TextSizeMin_LabelAction, C_TextSizeStep_LabelAction);
			}
			if (ControlsStep.ControlBlockList_TrackThumbnail != Null) {
				if (_State.IsSpectatorDisplay && Step.Action == PickAndBan_Common::C_Action_Ban) {
					{{{ControlBlockList::P}}}SetColorize(This, ControlsStep.ControlBlockList_TrackThumbnail, <1., 1., 1.>, False);
				} else {
					{{{ControlBlockList::P}}}SetColorize(This, ControlsStep.ControlBlockList_TrackThumbnail, {{{ControlBlockList::P}}}C_DefaultColorize, False);
				}
			}
			ControlsStep.Frame_Step.Visible = True;
		} else {
			ControlsStep.Frame_Step.Visible = False;
		}
	}

	declare Integer StepsNb = ML::Min(_State.Steps.count, ControlsSteps.count);
	if (StepsNb > 0) {
		Frame_Steps.RelativePosition_V3.X = ((StepsNb * C_SizeX_Step) + ((StepsNb - 1) * C_SizeX_StepsGutter)) * -0.5;
	} else {
		Frame_Steps.RelativePosition_V3.X = 0.;
	}
	_State.Controls.Frame_ActiveStepSpectator.RelativePosition_V3 = _State.Controls.Frame_StepsSpectator.RelativePosition_V3;
}

K_State UpdateCurrentStep(K_State _State) {
	declare K_State State = _State;
	declare K_ControlsStep[] ControlsSteps;
	if (State.IsSpectatorDisplay) {
		ControlsSteps = State.Controls.StepsSpectator;
	} else {
		ControlsSteps = State.Controls.StepsPlayer;
	}

	State.Controls.Label_ActiveCountdown = Null;
	State.Controls.Outline_ActiveStepSpectator.Visible = False;
	declare Vec2 Pos_ActiveStepSpectator = <0., 0.>;

	foreach (Key => ControlsStep in ControlsSteps) {
		if (ControlsStep.Frame_Step.Visible) {
			declare Integer StepKey = Private_GetStepKeyShift(State, ControlsSteps.count) + Key;

			AnimMgr.Flush(ControlsStep.Quad_TeamLogoBg);
			AnimMgr.Flush(ControlsStep.Quad_TeamLogo);
			AnimMgr.Flush(ControlsStep.Label_TeamName);
			AnimMgr.Flush(ControlsStep.Label_Action);
			AnimMgr.Flush(ControlsStep.Label_Countdown);
			if (ControlsStep.Quad_TrackThumbnailBg != Null) {
				AnimMgr.Flush(ControlsStep.Quad_TrackThumbnailBg);
			}
			if (ControlsStep.Quad_TrackNameBg != Null) {
				AnimMgr.Flush(ControlsStep.Quad_TrackNameBg);
			}

			ControlsStep.Label_Countdown.Value = "";

			if (StepKey > State.CurrentStepKey) {
				AnimMgr.Add(ControlsStep.Quad_TeamLogoBg, "<a opacity=\"0.4\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(ControlsStep.Quad_TeamLogo, "<a opacity=\"0.4\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(ControlsStep.Label_TeamName, "<a opacity=\"0.4\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(ControlsStep.Label_Action, "<a opacity=\"0.4\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(ControlsStep.Label_Countdown, "<a opacity=\"0\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				if (ControlsStep.Quad_TrackThumbnailBg != Null) {
					AnimMgr.Add(ControlsStep.Quad_TrackThumbnailBg, "<a opacity=\"0\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				}
				if (ControlsStep.ControlBlockList_TrackThumbnail != Null) {
					{{{ControlBlockList::P}}}SetOpacity(This, ControlsStep.ControlBlockList_TrackThumbnail, 0., C_StepUpdateAnimDuration);
				}
				if (ControlsStep.Quad_TrackNameBg != Null) {
					AnimMgr.Add(ControlsStep.Quad_TrackNameBg, "<a opacity=\"0\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				}
				if (ControlsStep.ControlBlockList_TrackName != Null) {
					{{{ControlBlockList::P}}}SetOpacity(This, ControlsStep.ControlBlockList_TrackName, 0., C_StepUpdateAnimDuration);
				}
			} else {
				AnimMgr.Add(ControlsStep.Quad_TeamLogoBg, "<a opacity=\"0.8\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(ControlsStep.Quad_TeamLogo, "<a opacity=\"1\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(ControlsStep.Label_TeamName, "<a opacity=\"1\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(ControlsStep.Label_Action, "<a opacity=\"1\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				if (StepKey == State.CurrentStepKey) {
					AnimMgr.Add(ControlsStep.Label_Countdown, "<a opacity=\"1\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				} else {
					AnimMgr.Add(ControlsStep.Label_Countdown, "<a opacity=\"0\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				}
				if (ControlsStep.Quad_TrackThumbnailBg != Null) {
					AnimMgr.Add(ControlsStep.Quad_TrackThumbnailBg, "<a opacity=\"0.8\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				}

				declare K_Map StepMap = C_Map_Null;
				if (StepKey < State.CurrentStepKey && State.Steps.existskey(StepKey)) {
					StepMap = State.MapList.get(State.Steps[StepKey].MapUid, C_Map_Null);
				}
				if (ControlsStep.ControlBlockList_TrackThumbnail != Null) {
					if (StepKey < State.CurrentStepKey) {
						{{{ControlBlockList::P}}}SetOpacity(This, ControlsStep.ControlBlockList_TrackThumbnail, 1., C_StepUpdateAnimDuration, False);
						{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, ControlsStep.ControlBlockList_TrackThumbnail, StepMap.AuthorAccountId, Private_GetTrackThumbnail(StepMap), False);
						{{{ControlBlockList::P}}}Redraw(This, ControlsStep.ControlBlockList_TrackThumbnail);
					} else {
						{{{ControlBlockList::P}}}SetOpacity(This, ControlsStep.ControlBlockList_TrackThumbnail, 0., C_StepUpdateAnimDuration);
					}
				}
				if (ControlsStep.Quad_TrackNameBg != Null) {
					AnimMgr.Add(ControlsStep.Quad_TrackNameBg, "<a opacity=\"0.8\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				}
				if (ControlsStep.ControlBlockList_TrackName != Null) {
					if (StepKey < State.CurrentStepKey) {
						{{{ControlBlockList::P}}}SetOpacity(This, ControlsStep.ControlBlockList_TrackName, 1., C_StepUpdateAnimDuration, False);
						{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlsStep.ControlBlockList_TrackName, StepMap.AuthorAccountId, StepMap.Name, False);
						{{{ControlBlockList::P}}}Redraw(This, ControlsStep.ControlBlockList_TrackName);
					} else {
						{{{ControlBlockList::P}}}SetOpacity(This, ControlsStep.ControlBlockList_TrackName, 0., C_StepUpdateAnimDuration);
					}
				}
				if (StepKey == State.CurrentStepKey) {
					State.Controls.Label_ActiveCountdown = ControlsStep.Label_Countdown;
					State.Controls.Outline_ActiveStepSpectator.Visible = True;
					Pos_ActiveStepSpectator = ControlsStep.Frame_Step.RelativePosition_V3;
				}
			}
		}
	}

	if (State.Controls.Outline_ActiveStepSpectator.Visible) {
		AnimMgr.Flush(State.Controls.Outline_ActiveStepSpectator);
		AnimMgr.Add(State.Controls.Outline_ActiveStepSpectator, "<a pos=\""^Pos_ActiveStepSpectator.X^" "^Pos_ActiveStepSpectator.Y^"\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

Void UpdateTeamsVs(K_State _State) {
	declare Text TeamsVs = "";
	foreach (Team in _State.Teams) {
		if (TeamsVs == "") {
			TeamsVs ^= Team.Name;
		} else {
			TeamsVs ^= " vs "^Team.Name;
		}
	}
	_State.Controls.Label_TeamsVs.Value = TeamsVs;
	Tools::FitLabelValue(_State.Controls.Label_TeamsVs, C_TextSizeMax_LabelTeamsVs, C_TextSizeMin_LabelTeamsVs, C_TextSizeStep_LabelTeamsVs);
}

Void UpdateUserAction(K_State _State) {
	declare Text UserAction = "";
	if (_State.Steps.existskey(_State.CurrentStepKey)) {
		declare PickAndBan_Common::K_Step Step = _State.Steps[_State.CurrentStepKey];
		if (
			Step.Action == PickAndBan_Common::C_Action_Pick ||
			Step.Action == PickAndBan_Common::C_Action_Ban
		) {
			declare CUser ActiveUser;
			foreach (Score in Scores) {
				if (Score.User != Null && Score.User.WebServicesUserId == _State.ActiveUserAccountId) {
					ActiveUser <=> Score.User;
					break;
				}
			}
			if (ActiveUser != Null) {
				declare Text PlayerName = "$<"^UserStore::GetPlayerName(ActiveUser, False)^"$>";
				declare Text TeamName = "";
				if (_State.Teams.existskey(Step.Team - 1)) {
					TeamName = "$<"^_State.Teams[Step.Team - 1].Name^"$>";
				}
				declare K_Team LocalTeam = _State.Teams[Step.Team - 1];
				if (TeamName == "") {
					if (Step.Action == PickAndBan_Common::C_Action_Pick) {
						UserAction = TL::Compose(C_Text_Picking, PlayerName);
					} else if (Step.Action == PickAndBan_Common::C_Action_Ban) {
						UserAction = TL::Compose(C_Text_Banning, PlayerName);
					}
				} else {
					if (Step.Action == PickAndBan_Common::C_Action_Pick) {
						UserAction = TL::Compose(C_Text_PickingFor, PlayerName, TeamName);
					} else if (Step.Action == PickAndBan_Common::C_Action_Ban) {
						UserAction = TL::Compose(C_Text_BanningFor, PlayerName, TeamName);
					}
				}
			}
		}
	}

	if (
		UserAction == "" &&
		_State.IsRunning &&
		_State.CurrentStepKey >= _State.Steps.count &&
		_State.ActiveUserAccountId == ""
	) {
		UserAction = C_Text_Result;
	}

	if (UserAction == "") {
		_State.Controls.Label_UserAction.Visible = False;
	} else {
		_State.Controls.Label_UserAction.Value = UserAction;
		Tools::FitLabelValue(_State.Controls.Label_UserAction, C_TextSizeMax_LabelUserAction, C_TextSizeMin_LabelUserAction, C_TextSizeStep_LabelUserAction);
		_State.Controls.Label_UserAction.Visible = True;
	}
}

K_State UpdateTeams(K_State _State) {
	declare K_State State = _State;

	declare Boolean TeamsUpdated = False;
	for (I, 0, C_TeamsMax - 1) {
		declare CTeam ModeTeam <=> Teams[I];
		if (State.Teams.existskey(I)) {
			declare K_Team LocalTeam = State.Teams[I];
			if (LocalTeam.Name != ModeTeam.Name) {
				LocalTeam.Name = ModeTeam.Name;
				TeamsUpdated = True;
			}
			if (LocalTeam.LogoUrl != ModeTeam.EmblemUrl) {
				LocalTeam.LogoUrl = ModeTeam.EmblemUrl;
				TeamsUpdated = True;
			}
			if (LocalTeam.Color != ModeTeam.ColorUI) {
				LocalTeam.Color = ModeTeam.ColorUI;
				TeamsUpdated = True;
			}
			if (TeamsUpdated) {
				State.Teams[I] = LocalTeam;
			}
		} else {
			TeamsUpdated = True;
			State.Teams.add(K_Team {
				Name = ModeTeam.Name,
				LogoUrl = ModeTeam.EmblemUrl,
				Color = ModeTeam.ColorUI
			});
		}
	}

	if (TeamsUpdated) {
		UpdateTeamsVs(State);
		UpdateSteps(State);
		UpdateUserAction(State);
	}

	return State;
}

Void UpdateMapList(K_State _State) {
	{{{Scroll::P}}}SetElementsTotal(This, _State.Controls.Scroll_Tracks, _State.ScrollMapList.count);
}

Void UpdateScrollTrack(K_State _State, Integer _Key, CMlFrame _Frame_Track) {
	declare K_Map ScrollMap = C_Map_Null;
	if (_State.ScrollMapList.existskey(_Key)) {
		ScrollMap = _State.MapList.get(_State.ScrollMapList[_Key], C_Map_Null);
	}

	declare CMlFrame ControlBlockList_TrackThumbnail <=> (_Frame_Track.GetFirstChild("control-block-list-track-thumbnail") as CMlFrame);
	declare CMlFrame ControlBlockList_TrackName <=> (_Frame_Track.GetFirstChild("control-block-list-track-name") as CMlFrame);

	declare Text TrackThumbnail = Private_GetTrackThumbnail(ScrollMap);
	{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, ControlBlockList_TrackThumbnail, ScrollMap.AuthorAccountId, TrackThumbnail, False);
	if (TrackThumbnail != "" && ScrollMap.Uid != "" && _State.LockedMapUids.exists(ScrollMap.Uid)) {
		{{{ControlBlockList::P}}}SetColorize(This, ControlBlockList_TrackThumbnail, <1., 1., 1.>, False);
	} else {
		{{{ControlBlockList::P}}}SetColorize(This, ControlBlockList_TrackThumbnail, {{{ControlBlockList::P}}}C_DefaultColorize, False);
	}
	{{{ControlBlockList::P}}}Redraw(This, ControlBlockList_TrackThumbnail);
	{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlBlockList_TrackName, ScrollMap.AuthorAccountId, ScrollMap.Name);
}

K_State UpdateLockedMaps(K_State _State) {
	declare K_State State = _State;

	declare Text[] LockedMapUids;
	declare Integer[] LockedScrollKeys;
	foreach (Key => Step in State.Steps) {
		if (
			Key < State.CurrentStepKey &&
			Step.MapUid != "" &&
			!LockedMapUids.exists(Step.MapUid)
		) {
			LockedMapUids.add(Step.MapUid);
			if (State.ScrollMapList.exists(Step.MapUid)) {
				LockedScrollKeys.add(State.ScrollMapList.keyof(Step.MapUid));
			}
		}
	}
	if (State.LockedMapUids != LockedMapUids || State.LockedScrollKeys != LockedScrollKeys) {
		State.LockedMapUids = LockedMapUids;
		State.LockedScrollKeys = LockedScrollKeys;
		foreach (Key => Frame_Track in {{{Scroll::P}}}GetElementsVisible(State.Controls.Scroll_Tracks)) {
			UpdateScrollTrack(State, Key, Frame_Track);
		}
		{{{Scroll::P}}}UnlockAllElements(State.Controls.Scroll_Tracks);
		{{{Scroll::P}}}LockElements(This, State.Controls.Scroll_Tracks, State.LockedScrollKeys);
	}

	return State;
}

K_State SetMatchInfo(K_State _State, Text _MatchInfo) {
	if (_State.MatchInfo == _MatchInfo) return _State;

	declare K_State State = _State;

	State.MatchInfo = _MatchInfo;
	State.Controls.Label_MatchInfo.Value = State.MatchInfo;
	Tools::FitLabelValue(_State.Controls.Label_MatchInfo, C_TextSizeMax_LabelMatchInfo, C_TextSizeMin_LabelMatchInfo, C_TextSizeStep_LabelMatchInfo);

	return State;
}

K_State SetPickAndBanOrder(K_State _State, Text _PickAndBanOrder) {
	if (_State.PickAndBanOrder == _PickAndBanOrder) return _State;

	declare K_State State = _State;

	State.PickAndBanOrder = _PickAndBanOrder;
	if (State.PickAndBanOrder == "") {
		State.Steps = [];
	} else {
		State.Steps.fromjson(State.PickAndBanOrder);
	}

	State = UpdateLockedMaps(State);
	UpdateSteps(State);

	return State;
}

K_State SetMapList(K_State _State, CPlaygroundClient _Playground) {
	declare K_State State = _State;

	State.MapListRequestIsInProgress = _Playground.MapList_IsInProgress;
	if (!State.MapListRequestIsInProgress) {
		declare Text[] NewMapUids;
		declare K_Map[Text] NewMapList;
		State.ScrollMapList = [];
		foreach (Key => MapUid in _Playground.MapList_MapUids) {
			declare K_Map ScrollMap = State.MapList.get(MapUid, C_Map_Null);
			if (ScrollMap.Uid == "" || ScrollMap.ThumbnailUrl == "" || ScrollMap.AuthorAccountId == "") {
				NewMapUids.add(MapUid);
				ScrollMap = K_Map {
					Uid = MapUid,
					Name = "",
					ThumbnailUrl = "",
					AuthorAccountId = ""
				};
				if (_Playground.MapList_Names.existskey(Key)) {
					ScrollMap.Name = _Playground.MapList_Names[Key];
				}
			}
			if (!State.ScrollMapList.exists(MapUid)) {
				State.ScrollMapList.add(MapUid);
			}
			NewMapList[MapUid] = ScrollMap;
		}
		if (NewMapUids.count > 0) {
			State.Task_GetMapInfoListFromUid = Task::DestroyAndCreate(
				State.Task_GetMapInfoListFromUid,
				DataFileMgr,
				DataFileMgr.Map_NadeoServices_GetListFromUid(MainUser::GetMainUserId(), NewMapUids)
			);
		}
		State.MapList = NewMapList;
		State = UpdateCurrentStep(State);
		UpdateMapList(State);
		State = UpdateLockedMaps(State);
	}

	return State;
}

K_State RequestMapListUpdate(K_State _State, CPlaygroundClient _Playground) {
	declare K_State State = _State;

	if (!_Playground.MapList_IsInProgress) {
		_Playground.MapList_Request();
	}
	State = SetMapList(State, _Playground);

	return State;
}

K_State SetIsSpectator(K_State _State, Boolean _IsSpectator) {
	declare K_State State = _State;

	State.IsSpectator = _IsSpectator;
	State.IsSpectatorDisplay = (State.IsSpectator && !Private_IsActiveUser(State, LocalUser));

	if (
		State.IsSpectator != _State.IsSpectator ||
		State.IsSpectatorDisplay != _State.IsSpectatorDisplay
	) {
		State.Controls.Frame_StepsPlayer.Visible = !State.IsSpectatorDisplay;
		State.Controls.Frame_StepsSpectator.Visible = State.IsSpectatorDisplay;
		State.Controls.Frame_ActiveStepSpectator.Visible = State.IsSpectatorDisplay;
		State.Controls.Scroll_Tracks.Visible = !State.IsSpectatorDisplay;

		State = UpdateNavigation(State);
		UpdateSteps(State);
		State = UpdateCurrentStep(State);
	}

	return State;
}

K_State SetCurrentStep(K_State _State, Integer _CurrentStepKey, Integer _CurrentStepEndTime, Text _AccountId) {
	if (
		_State.CurrentStepKey == _CurrentStepKey &&
		_State.CurrentStepEndTime == _CurrentStepEndTime &&
		_State.ActiveUserAccountId == _AccountId
	) {
		return _State;
	}

	declare K_State State = _State;

	State.CurrentStepKey = _CurrentStepKey;
	State.CurrentStepEndTime = _CurrentStepEndTime;
	State.ActiveUserAccountId = _AccountId;
	State.ConfirmMapUid = "";

	{{{PopUpMultiChoice::P}}}Close(This, State.Controls.PopUp_ConfirmSelection);

	State = SetIsSpectator(State, State.IsSpectator);
	State = UpdateLockedMaps(State);
	State = RequestMapListUpdate(State, Playground);
	State = UpdateCurrentStep(State);
	if (State.CurrentStepKey != _State.CurrentStepKey) {
		UpdateSteps(State);
	}
	UpdateUserAction(State);
	State = UpdateNavigation(State);

	return State;
}

K_State SetIsInGameMenuDisplayed(K_State _State, Boolean _IsInGameMenuDisplayed) {
	if (_State.IsInGameMenuDisplayed == _IsInGameMenuDisplayed) return _State;

	declare K_State State = _State;
	State.IsInGameMenuDisplayed = _IsInGameMenuDisplayed;
	State = UpdateNavigation(State);
	return State;
}

K_State SetConfirmationPopUpDisplayed(K_State _State, Boolean _ConfirmationPopUpDisplayed) {
	if (_State.ConfirmationPopUpDisplayed == _ConfirmationPopUpDisplayed) return _State;

	declare K_State State = _State;
	State.ConfirmationPopUpDisplayed = _ConfirmationPopUpDisplayed;
	State = UpdateNavigation(State);
	return State;
}

Void FocusScrollTrack(CMlFrame _Frame_Track, Boolean _IsFocused, Boolean _PlayFocusAnimation) {
	if (_Frame_Track == Null) return;
	declare CMlQuad Quad_Gradient <=> (_Frame_Track.GetFirstChild("quad-gradient") as CMlQuad);
	declare CMlFrame Outline_TrackSelection <=> (_Frame_Track.GetFirstChild("outline-track-selection") as CMlFrame);
	AnimMgr.Flush(Quad_Gradient);
	declare CMlFrame ControlBlockList_TrackName <=> (_Frame_Track.GetFirstChild("control-block-list-track-name") as CMlFrame);
	if (_IsFocused) {
		{{{Outline::P}}}SetOpacity(This, Outline_TrackSelection, 1., C_ScrollTrackFocusAnimDuration);
		AnimMgr.Add(Quad_Gradient, "<a opacity=\"0.6\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackName, 1., C_StepUpdateAnimDuration);
	} else {
		{{{Outline::P}}}SetOpacity(This, Outline_TrackSelection, 0., C_ScrollTrackFocusAnimDuration);
		AnimMgr.Add(Quad_Gradient, "<a opacity=\"0.8\" />", C_StepUpdateAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackName, 0.8, C_StepUpdateAnimDuration);
	}
}

K_State SelectScrollTrack(K_State _State, Integer _Key) {
	if (!_State.ScrollMapList.existskey(_Key) || _State.LockedScrollKeys.exists(_Key)) return _State;

	declare K_State State = _State;

	declare Text SelectedMapUid = State.ScrollMapList[_Key];
	declare Text ConfirmationText = "";
	if (
		State.Steps.existskey(State.CurrentStepKey) &&
		State.MapList.existskey(SelectedMapUid)
	) {
		declare PickAndBan_Common::K_Step Step = State.Steps[State.CurrentStepKey];
		if (Step.Action == PickAndBan_Common::C_Action_Pick) {
			ConfirmationText = TL::Compose(C_Text_ConfirmPick, "$<$7FA"^Tools::FormatValue(State.MapList[SelectedMapUid].Name)^"$>");
		} else if (Step.Action == PickAndBan_Common::C_Action_Ban) {
			ConfirmationText = TL::Compose(C_Text_ConfirmBan, "$<$7FA"^Tools::FormatValue(State.MapList[SelectedMapUid].Name)^"$>");
		}
	}
	if (ConfirmationText != "") {
		State.ConfirmMapUid = SelectedMapUid;
		{{{PopUpMultiChoice::P}}}SetDescription(This, State.Controls.PopUp_ConfirmSelection, [
			{{{PopUpMultiChoice::P}}}CreateDescriptionPart(ConfirmationText, <130., 30.>, 3., {{{dump(Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold))}}}, "$t$i", <1., 1., 1.>, False)
		]);
		{{{PopUpMultiChoice::P}}}Open(This, State.Controls.PopUp_ConfirmSelection);
		(ParentApp as CManiaAppPlayground).SendCustomEvent(PickAndBan_Common::C_Event_TrackPreSelected, [SelectedMapUid]);
	} else if (SelectedMapUid != "") {
		(ParentApp as CManiaAppPlayground).SendCustomEvent(PickAndBan_Common::C_Event_TrackSelected, [SelectedMapUid]);
	}

	return State;
}

K_ControlsStep[] GetStepsControls(CMlFrame _Frame_Steps) {
	declare K_ControlsStep[] StepsControls;

	foreach (Control in _Frame_Steps.Controls) {
		declare CMlFrame Frame_Step = (Control as CMlFrame);
		declare K_ControlsStep ControlsStep = K_ControlsStep {
			Frame_Step = Frame_Step,
			Quad_TeamLogoBg = (Frame_Step.GetFirstChild("quad-team-logo-bg") as CMlQuad),
			Quad_TeamLogo = (Frame_Step.GetFirstChild("quad-team-logo") as CMlQuad),
			Label_TeamName = (Frame_Step.GetFirstChild("label-team-name") as CMlLabel),
			Label_Action = (Frame_Step.GetFirstChild("label-action") as CMlLabel),
			Label_Countdown = (Frame_Step.GetFirstChild("label-countdown") as CMlLabel),
			Quad_TrackThumbnailBg = (Frame_Step.GetFirstChild("quad-track-thumbnail-bg") as CMlQuad),
			ControlBlockList_TrackThumbnail = (Frame_Step.GetFirstChild("control-block-list-track-thumbnail") as CMlFrame),
			Quad_TrackNameBg = (Frame_Step.GetFirstChild("quad-track-name-bg") as CMlQuad),
			ControlBlockList_TrackName = (Frame_Step.GetFirstChild("control-block-list-track-name") as CMlFrame)
		};
		StepsControls.add(ControlsStep);
	}

	return StepsControls;
}

***MainInit***
***
declare netread Boolean Net_TMGame_PickAndBan_DisplayModule for UI = False;
declare netread Boolean Net_TMGame_PickAndBan_IsRunning for Teams[0] = False;
declare netread Integer Net_TMGame_PickAndBan_CurrentStepKey for Teams[0] = 0;
declare netread Integer Net_TMGame_PickAndBan_CurrentStepEndTime for Teams[0] = -1;
declare netread Text Net_TMGame_PickAndBan_PickAndBanOrder for Teams[0] = "";
declare netread Text Net_TMGame_PickAndBan_BackgroundUrl for Teams[0] = "";
declare netread Text Net_TMGame_PickAndBan_TopLeftLogoUrl for Teams[0] = "";
declare netread Text Net_TMGame_PickAndBan_TopRightLogoUrl for Teams[0] = "";
declare netread Text Net_TMGame_PickAndBan_BottomLogoUrl for Teams[0] = "";
declare netread Text Net_TMGame_PickAndBan_MatchInfo for Teams[0] = "";
declare netread Text Net_TMGame_PickAndBan_ActiveUserAccountId for Teams[0] = "";

declare K_State State = C_State_Null;
***

***MainStart***
***
State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Quad_Background <=> (State.Controls.Frame_Global.GetFirstChild("quad-background") as CMlQuad);
State.Controls.Quad_LogoTopLeft <=> (State.Controls.Frame_Global.GetFirstChild("quad-logo-top-left") as CMlQuad);
State.Controls.Quad_LogoTopRight <=> (State.Controls.Frame_Global.GetFirstChild("quad-logo-top-right") as CMlQuad);
State.Controls.Quad_LogoBottom <=> (State.Controls.Frame_Global.GetFirstChild("quad-logo-bottom") as CMlQuad);
State.Controls.Label_UserAction <=> (State.Controls.Frame_Global.GetFirstChild("label-user-action") as CMlLabel);
State.Controls.Label_TeamsVs <=> (State.Controls.Frame_Global.GetFirstChild("label-teams-vs") as CMlLabel);
State.Controls.Label_MatchInfo <=> (State.Controls.Frame_Global.GetFirstChild("label-match-info") as CMlLabel);
State.Controls.Frame_StepsPlayer <=> (State.Controls.Frame_Global.GetFirstChild("frame-steps-player") as CMlFrame);
State.Controls.StepsPlayer = GetStepsControls(State.Controls.Frame_StepsPlayer);
State.Controls.Frame_StepsSpectator <=> (State.Controls.Frame_Global.GetFirstChild("frame-steps-spectator") as CMlFrame);
State.Controls.Frame_ActiveStepSpectator <=> (State.Controls.Frame_Global.GetFirstChild("frame-active-step-spectator") as CMlFrame);
State.Controls.StepsSpectator = GetStepsControls(State.Controls.Frame_StepsSpectator);
State.Controls.Outline_ActiveStepSpectator <=> (State.Controls.Frame_Global.GetFirstChild("outline-active-step-spectator") as CMlFrame);
State.Controls.Scroll_Tracks <=> (State.Controls.Frame_Global.GetFirstChild("scroll-tracks") as CMlFrame);
State.Controls.ButtonList_PickAndBan <=> (State.Controls.Frame_Global.GetFirstChild("button-list-pick-and-ban") as CMlFrame);
State.Controls.PopUp_ConfirmSelection <=> (State.Controls.Frame_Global.GetFirstChild("popup-confirm-selection") as CMlFrame);

Tools::FitLabelValue(
	(State.Controls.Frame_Global.GetFirstChild("label-title") as CMlLabel),
	C_TextSizeMax_LabelTitle, C_TextSizeMin_LabelTitle, C_TextSizeStep_LabelTitle
);

{{{Navigation::P}}}UseLocalEvents(This, True);
{{{Scroll::P}}}UseLocalEvents(This, True);
{{{PopUpMultiChoice::P}}}UseLocalEvents(This, True);

State = SetVisibility(State, PageIsVisible, State.Controls.Frame_Global.Visible, Net_TMGame_PickAndBan_IsRunning);
State = SetBackgroundUrl(State, Net_TMGame_PickAndBan_BackgroundUrl);
State = SetTopLeftLogoUrl(State, Net_TMGame_PickAndBan_TopLeftLogoUrl);
State = SetTopRightLogoUrl(State, Net_TMGame_PickAndBan_TopRightLogoUrl);
State = SetBottomLogoUrl(State, Net_TMGame_PickAndBan_BottomLogoUrl);
State = UpdateTeams(State);
State = SetMatchInfo(State, Net_TMGame_PickAndBan_MatchInfo);
State = SetPickAndBanOrder(State, Net_TMGame_PickAndBan_PickAndBanOrder);
State = SetIsSpectator(State, IsSpectatorClient);
State = RequestMapListUpdate(State, Playground);
State = SetCurrentStep(State, Net_TMGame_PickAndBan_CurrentStepKey, Net_TMGame_PickAndBan_CurrentStepEndTime, Net_TMGame_PickAndBan_ActiveUserAccountId);
State = SetIsInGameMenuDisplayed(State, IsInGameMenuDisplayed);
State = SetConfirmationPopUpDisplayed(State, {{{PopUpMultiChoice::P}}}IsDisplayed(State.Controls.PopUp_ConfirmSelection));
UpdateButtonList(State);
***

***MainLoop***
***
if (State.PageIsVisible != PageIsVisible) {
	State = SetVisibility(State, PageIsVisible, Net_TMGame_PickAndBan_DisplayModule, Net_TMGame_PickAndBan_IsRunning);
}
if (State.PageIsVisible) {
	if (
		State.DisplayModule != Net_TMGame_PickAndBan_DisplayModule ||
		State.IsRunning != Net_TMGame_PickAndBan_IsRunning
	) {
		State = SetVisibility(State, PageIsVisible, Net_TMGame_PickAndBan_DisplayModule, Net_TMGame_PickAndBan_IsRunning);
	}

	if (State.IsVisible) {
		if (State.BackgroundUrl != Net_TMGame_PickAndBan_BackgroundUrl) {
			State = SetBackgroundUrl(State, Net_TMGame_PickAndBan_BackgroundUrl);
		}
		if (State.TopLeftLogoUrl != Net_TMGame_PickAndBan_TopLeftLogoUrl) {
			State = SetTopLeftLogoUrl(State, Net_TMGame_PickAndBan_TopLeftLogoUrl);
		}
		if (State.TopRightLogoUrl != Net_TMGame_PickAndBan_TopRightLogoUrl) {
			State = SetTopRightLogoUrl(State, Net_TMGame_PickAndBan_TopRightLogoUrl);
		}
		if (State.BottomLogoUrl != Net_TMGame_PickAndBan_BottomLogoUrl) {
			State = SetBottomLogoUrl(State, Net_TMGame_PickAndBan_BottomLogoUrl);
		}
		if (State.TeamsCheckTime <= Now) {
			State.TeamsCheckTime = Now + C_TeamsCheckInterval;
			State = UpdateTeams(State);
		}
		if (State.MatchInfo != Net_TMGame_PickAndBan_MatchInfo) {
			State = SetMatchInfo(State, Net_TMGame_PickAndBan_MatchInfo);
		}
		if (State.PickAndBanOrder != Net_TMGame_PickAndBan_PickAndBanOrder) {
			State = SetPickAndBanOrder(State, Net_TMGame_PickAndBan_PickAndBanOrder);
		}
		if (State.IsSpectator != IsSpectatorClient) {
			State = SetIsSpectator(State, IsSpectatorClient);
		}
		if (State.MapListRequestIsInProgress != Playground.MapList_IsInProgress) {
			State = SetMapList(State, Playground);
		}
		if (State.IsInGameMenuDisplayed != IsInGameMenuDisplayed) {
			State = SetIsInGameMenuDisplayed(State, IsInGameMenuDisplayed);
		}
		if (State.ConfirmationPopUpDisplayed != {{{PopUpMultiChoice::P}}}IsDisplayed(State.Controls.PopUp_ConfirmSelection)) {
			State = SetConfirmationPopUpDisplayed(State, {{{PopUpMultiChoice::P}}}IsDisplayed(State.Controls.PopUp_ConfirmSelection));
		}
		if (
			State.CurrentStepKey != Net_TMGame_PickAndBan_CurrentStepKey ||
			State.CurrentStepEndTime != Net_TMGame_PickAndBan_CurrentStepEndTime ||
			State.ActiveUserAccountId != Net_TMGame_PickAndBan_ActiveUserAccountId
		) {
			State = SetCurrentStep(State, Net_TMGame_PickAndBan_CurrentStepKey, Net_TMGame_PickAndBan_CurrentStepEndTime, Net_TMGame_PickAndBan_ActiveUserAccountId);
		}
		if (State.Controls.Label_ActiveCountdown != Null) {
			if (State.CurrentStepEndTime >= 0) {
				State.Controls.Label_ActiveCountdown.Value = TL::TimeToText(ML::Max(0, State.CurrentStepEndTime - GameTime + 1000));
			} else if (State.Controls.Label_ActiveCountdown.Value != "") {
				State.Controls.Label_ActiveCountdown.Value = "";
			}
		}
	}
}

if (Task::IsInitialized(State.Task_GetMapInfoListFromUid)) {
	State.Task_GetMapInfoListFromUid = Task::Update(State.Task_GetMapInfoListFromUid);
	if (!Task::IsRunning(State.Task_GetMapInfoListFromUid)) {
		declare CTaskResult_NSMapList SourceTask = Task::GetSourceTask_NSMapList(State.Task_GetMapInfoListFromUid);
		if (Task::IsSuccess(State.Task_GetMapInfoListFromUid) && SourceTask != Null) {
			declare Boolean MapListUpdated = False;
			foreach (TaskMap in SourceTask.MapList) {
				declare K_Map LocalMap = State.MapList.get(TaskMap.Uid, C_Map_Null);
				if (LocalMap.Uid != "") {
					LocalMap.ThumbnailUrl = TaskMap.ThumbnailUrl;
					LocalMap.AuthorAccountId = TaskMap.AuthorAccountId;
					State.MapList[LocalMap.Uid] = LocalMap;
					MapListUpdated = True;
				}
			}
			if (MapListUpdated) {
				UpdateMapList(State);
			}
		}
		State.Task_GetMapInfoListFromUid = Task::Destroy(State.Task_GetMapInfoListFromUid);
	}
}

foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
	if (Event.Scroll == State.Controls.Scroll_Tracks) {
		switch (Event.Type) {
			case {{{Scroll::P}}}C_EventType_Update: {
				foreach (Key => Frame_Track in Event.ElementsVisible) {
					UpdateScrollTrack(State, Key, Frame_Track);
					Frame_Track.Visible = True;
				}
				foreach (Frame_Track in Event.ElementsHidden) {
					Frame_Track.Visible = False;
				}
			}
			case {{{Scroll::P}}}C_EventType_Focus: {
				FocusScrollTrack(Event.From, False, Event.PlayFocusAnimation);
				if ({{{Scroll::P}}}IsFocused(State.Controls.Scroll_Tracks)) {
					FocusScrollTrack(Event.To, True, Event.PlayFocusAnimation);
				}
			}
			case {{{Scroll::P}}}C_EventType_Select: {
				if (!Event.IsActionAutoRepeat) {
					State = SelectScrollTrack(State, Event.ToKey);
				}
			}
		}
	}
}

foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
	if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice == State.Controls.PopUp_ConfirmSelection) {
		switch (Event.Type) {
			case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
				UpdateButtonList(State);
				State = UpdateNavigation(State);
			}
			case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
				if (Event.SelectedIndex == C_Choice_Confirm && State.ConfirmMapUid != "") {
					(ParentApp as CManiaAppPlayground).SendCustomEvent(PickAndBan_Common::C_Event_TrackSelected, [State.ConfirmMapUid]);
				}
			}
		}
	}
}

foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
	switch (Event.Type) {
		case {{{Navigation::P}}}C_EventType_NavigateInput: {
			if ({{{Navigation::P}}}IsEventFromGroup(This, Event, C_NavGroup_Global)) {
				if (
					Event.Input == CMlScriptEvent::EMenuNavAction::AppMenu ||
					Event.Input == CMlScriptEvent::EMenuNavAction::Cancel
				) {
					ShowInGameMenu();
				}
			}
		}
	}
}
***
""",
[
	UIModules::Component(),
	Scroll::ComponentV2(),
	ControlBlockList::ComponentV2(),
	Outline::ComponentV2(),
	MenuButtonList::Component(),
	PopUpMultiChoice::ComponentV2(),
	Navigation::ComponentV2()
],
[]
	);
}