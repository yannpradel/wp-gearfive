/**
 *	ScoreTable visibility layer
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/TMGame/Modes/Base/UIModules/ScoresTable_Visibility_Component.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

#Const C_Name "Component_UIModule_Race_ScoresTable_Visibility" //< Component name
#Const P "Component_UIModule_Race_ScoresTable_Visibility_" //< Prefix used to differentiate functions/variables in the script

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {
	return MV::Component(
		C_Name,
"""
""",
"""
#Include "Libs/Nadeo/TMGame/Modes/InputPriority.Script.txt" as InputPriority

#Const {{{P}}}C_ScoresTable_PauseMenu_None -1
#Const {{{P}}}C_ScoresTable_PauseMenu_Solo 0
#Const {{{P}}}C_ScoresTable_PauseMenu_Online 1
#Const {{{P}}}C_ScoresTable_PauseMenu_Splitscreen 2

#Struct {{{P}}}K_ScoresTableIsVisible {
	Boolean FromLayer;
	Boolean FromMenu;
}
""",
"""
Boolean {{{P}}}LayerIsVisible() {
	declare Boolean {{{P}}}LayerIsVisible for UI;
	return {{{P}}}LayerIsVisible;
}

Void {{{P}}}SetLayerIsVisible(Boolean _LayerIsVisible) {
	declare Boolean {{{P}}}LayerIsVisible for UI;
	{{{P}}}LayerIsVisible = _LayerIsVisible;
}

Boolean {{{P}}}EnabledFromMenu() {
	declare Boolean {{{P}}}EnabledFromMenu for UI;
	return {{{P}}}EnabledFromMenu;
}

Void {{{P}}}SetEnabledFromMenu(Boolean _Enabled) {
	declare Boolean {{{P}}}EnabledFromMenu for UI;
	{{{P}}}EnabledFromMenu = _Enabled;
}

Integer {{{P}}}GetSourceMenu() {
	declare Integer {{{P}}}SourceMenu for UI;
	return {{{P}}}SourceMenu;
}

Void {{{P}}}SetSourceMenu(Integer _SourceMenu) {
	declare Integer {{{P}}}SourceMenu for UI;
	{{{P}}}SourceMenu = _SourceMenu;
}

Boolean {{{P}}}DisplayScoresTableFromMenu(Boolean _Display, Integer _SourceMenu, CMlFrame _Frame_ToHide) {
	{{{P}}}SetEnabledFromMenu(_Display);
	if (_Frame_ToHide != Null) _Frame_ToHide.Visible = !_Display;
	if (_Display) {{{P}}}SetSourceMenu(_SourceMenu);
	else {{{P}}}SetSourceMenu({{{P}}}C_ScoresTable_PauseMenu_None);
	return {{{P}}}EnabledFromMenu();
}

{{{P}}}K_ScoresTableIsVisible {{{P}}}SetScoresTableVisibility(CMlFrame _Frame_Layer, CMlQuad _QuadBg, Boolean _IsFromLayer, Boolean _IsFromMenu) {
	declare {{{P}}}K_ScoresTableIsVisible ScoresTableIsVisible = {{{P}}}K_ScoresTableIsVisible {
		FromLayer = _IsFromLayer,
		FromMenu = _IsFromMenu
	};

	_Frame_Layer.Visible = (ScoresTableIsVisible.FromLayer || ScoresTableIsVisible.FromMenu);
	_QuadBg.Visible = ScoresTableIsVisible.FromMenu;
	EnableMenuNavigation(ScoresTableIsVisible.FromMenu, False, False, Null, InputPriority::C_InputPriority_ScoresTable);

	return ScoresTableIsVisible;
}

{{{P}}}K_ScoresTableIsVisible {{{P}}}SetScoresTableVisibility(CMlFrame _Frame_Layer, CMlFrame _Frame_Global, CMlQuad _QuadBg, Boolean _IsFromLayer, Boolean _IsFromMenu) {
	declare {{{P}}}K_ScoresTableIsVisible ScoresTableIsVisible = {{{P}}}K_ScoresTableIsVisible {
		FromLayer = _IsFromLayer,
		FromMenu = _IsFromMenu
	};

	declare Boolean VisibleFromMenu = ((ScoresTableIsVisible.FromMenu && SplitScreenCount == 1) || (ScoresTableIsVisible.FromMenu && SplitScreenCount > 1 && SplitScreenNum == 0))	;
	_Frame_Layer.Visible = (ScoresTableIsVisible.FromLayer || VisibleFromMenu);
	_QuadBg.Visible = VisibleFromMenu;
	EnableMenuNavigation((ScoresTableIsVisible.FromMenu && _Frame_Layer.Visible), False, False, Null, InputPriority::C_InputPriority_ScoresTable);

	// Display Scores Table from menu only for common layer in SplitScreen
	if (SplitScreenCount > 1 && SplitScreenNum == 0) {
		_Frame_Global.Visible = {{{P}}}EnabledFromMenu();
	}

	return ScoresTableIsVisible;
}

Void {{{P}}}SetPageShift(Integer _Shift) {
	declare Integer {{{P}}}PageShift for UI = 0;
	{{{P}}}PageShift = _Shift;
}

Integer {{{P}}}GetPageShift() {
	declare Integer {{{P}}}PageShift for UI = 0;
	return {{{P}}}PageShift;
}
""",
[],
[]
);
}