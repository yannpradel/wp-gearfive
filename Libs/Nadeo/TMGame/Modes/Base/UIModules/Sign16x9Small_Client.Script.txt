/**
 *	UI module: Sign16x9Small client side
 *	Podium screen and small signs in the stadium corners
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/TMGame/Modes/Base/UIModules/Sign16x9Small_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/Sign16x9Small_Common.Script.txt" as UIModules_Sign16x9Small_Common
#Include "Libs/Nadeo/TMGame/Utils/Images.Script.txt" as Images

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const UIModules_Sign16x9Small_Common::C_Id as C_Id
#Const UIModules_Sign16x9Small_Common::C_LayerType as C_LayerType
#Const UIModules_Sign16x9Small_Common::C_AttachId as C_AttachId

#Const UIModules_Sign16x9Small_Common::C_ScoreMode_BestRaceTime as C_ScoreMode_BestRaceTime
#Const UIModules_Sign16x9Small_Common::C_ScoreMode_Points as C_ScoreMode_Points
#Const UIModules_Sign16x9Small_Common::C_ScoreMode_RaceProgression as C_ScoreMode_RaceProgression
#Const UIModules_Sign16x9Small_Common::C_ScoreMode_Hidden as C_ScoreMode_Hidden

#Const C_Image_PodiumBgDefault "file://Media/Manialinks/Nadeo/TMGame/Modes/Podium/PodiumScreen_classic.dds"
#Const C_Image_PodiumBgRanked "file://Media/Manialinks/Nadeo/TMGame/Modes/Podium/PodiumScreen_ranked.dds"
#Const C_Image_PodiumBgRoyal "file://Media/Manialinks/Nadeo/TMGame/Modes/Podium/PodiumScreen_royal.dds"
#Const C_Image_PodiumBgDimmer "file://Media/Manialinks/Nadeo/TMGame/Modes/Podium/Ranked_PodiumScene_Gradient.dds"
#Const C_Image_PodiumStripes "file://Media/Manialinks/Nadeo/TMGame/Modes/Podium/PodiumScreen_PodiumLines.dds"
#Const C_Image_PlayerLight "file://Media/Manialinks/Nadeo/TMGame/Modes/Podium/PodiumScreen_PlayerLight.dds"
#Const C_Image_WorldFlag "file://ZoneFlags/Path/World"
#Const C_Image_Confetti "file://Media/Manialinks/Nadeo/TMGame/Modes/Podium/CommonConfetti.webm"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Vec2 Size_PlayerCard = MLHelpers::KeepRatioFromX(<1092., 140.>, 92.);
	declare Vec2 Size_Flag = MLHelpers::KeepRatioFromY(<232., 140.>, Size_PlayerCard.Y);
	declare Vec2 Size_Content = <Size_PlayerCard.X - Size_Flag.X - 3, Size_PlayerCard.Y>;
	declare Vec2 Size_MVPIcon = <4., 4.>;
	declare Vec2 Size_MVP = <(Size_Content.X * 0.3) - Size_MVPIcon.X - 0.5, Size_Content.Y>;
	declare Vec2 Size_Name = <Size_Content.X, Size_Content.Y * 0.6>;
	declare Vec2 Size_Score = <Size_Content.X * 0.7, Size_Content.Y>;
	declare Vec2 Size_PlayerLight = MLHelpers::KeepRatioFromY(<564., 536.>, Size_PlayerCard.Y * 10);
	declare Vec2 Size_BgDimmer = MLHelpers::KeepRatioFromX(<1920., 296.>, 320.);
	declare Vec2 Size_RoyalTeamLogo = MLHelpers::KeepRatioFromX(<272., 200.>, 40.);

	//L16N [Podium] %1 MUST STAY AT THE END OF THE STRING !!! %1 will be replaced by the name of the author of the track, e.g. "by PlayerA". If your language does not permit to keep the %1 at the end of the string, do not translate "By" and just keep the text "%1"
	declare Text Text_AuthorName = _("|NameOnTheRight|By %1");
	//L16N [Podium] The player has 0 points
	declare Text Text_ZeroPoints = _("0 points");
	//L16N [Podium] The player has 1 point
	declare Text Text_OnePoint = _("1 point");
	//L16N [Podium] The player has several points
	declare Text Text_SeveralPoints = _("%1 points");
	//L16N [Podium] Message displayed when the blue team wins the match
	declare Text Text_WinningTeamBlue = _("Blue team won!");
	//L16N [Podium] Message displayed when the red team wins the match
	declare Text Text_WinningTeamRed = _("Red team won!");
	//L16N [Podium] MVP means "Most valuable player", if "Most Valuable Player" is not common in your language please translate by "Best Player"
	declare Text Text_MVP = _("MVP");
	declare Text Text_ComposedMVP = TL::Compose("%1 -", Text_MVP);
	//L16N [Podium] Announce the name of the team that won the Royal match. %1 will be replaced by the name of the team. eg: "Flamingo is the Royal champion team!"
	declare Text Text_RoyalWinner = _("%1 is the Royal champion team!");

	return MV::Create(
		C_Id, 3,
"""
<stylesheet>
	<style class="text-bold" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" textcolor="ffffff" />
	<style class="text-semibold" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$t$i" textcolor="ffffff" />
</stylesheet>
<framemodel id="framemodel-player-card">
	<quad id="quad-light" pos="{{{Size_PlayerCard.X * 0.5}}} 0" {{{MLHelpers::Size(Size_PlayerLight)}}} z-index="-1" halign="center" valign="center" image="{{{C_Image_PlayerLight}}}" opacity="0.5" />
	<quad {{{MLHelpers::Size(Size_PlayerCard)}}} z-index="0" valign="center" image="{{{Images::C_ImageUrl_Podium_PlayerBackground}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}" />
	<quad id="quad-player-flag" {{{MLHelpers::Size(Size_Flag)}}} z-index="1" valign="center" alphamask="{{{Images::C_ImageUrl_Podium_PlayerFlag_Mask}}}" image="{{{C_Image_WorldFlag}}}" />
	<quad id="quad-contour" {{{MLHelpers::Size(Size_PlayerCard)}}} z-index="2" valign="center" image="{{{Images::C_ImageUrl_Podium_PlayerContour}}}" />
	<quad id="quad-myself" {{{MLHelpers::Size(Size_PlayerCard)}}} z-index="3" valign="center" image="{{{Images::C_ImageUrl_Podium_PlayerContour}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" hidden="1" />
	<frame z-index="4" pos="{{{Size_Flag.X + 1}}} {{{Size_PlayerCard.Y * 0.45}}}">
		<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" data-size="{{{Size_Name.X}}} {{{Size_Name.Y}}}" data-valign="top" data-textsize="5" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" data-textprefix="$t$i" data-textcolor="ffffff" />
		<frame pos="-0.5 -6.5">
			<quad id="quad-mvp-icon" {{{MLHelpers::Size(Size_MVPIcon)}}} image="{{{Icons::C_Icon_128x128_MVP_Inc}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" hidden="1" />
			<label id="label-mvp" class="text-semibold" pos="4.5 0" {{{MLHelpers::Size(Size_MVP)}}} textsize="2.5" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" text="{{{Text_ComposedMVP}}}" hidden="1" />
			<label id="label-player-score" class="text-semibold" {{{MLHelpers::Size(Size_Score)}}} textsize="2.5" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" />
		</frame>
	</frame>
</framemodel>
<frame id="frame-global" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_Sign16x9Small_Common::C_UIModuleConfig)}}}>
		<frame z-index="0">
			<quad id="quad-bg-default" z-index="0" size="320 180" halign="center" valign="center" image="{{{C_Image_PodiumBgDefault}}}" />
			<quad id="quad-bg-ranked" z-index="1" size="320 180" halign="center" valign="center" image="{{{C_Image_PodiumBgRanked}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}" hidden="1" />
			<quad id="quad-bg-royal" z-index="1" size="320 180" halign="center" valign="center" image="{{{C_Image_PodiumBgRoyal}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}" hidden="1" />
			<quad id="quad-stripes" z-index="2" size="320 180" halign="center" valign="center" image="{{{C_Image_PodiumStripes}}}" opacity="0.5" hidden="1" />
			<quad id="quad-bg-dimmer" pos="0 90" z-index="3" {{{MLHelpers::Size(Size_BgDimmer)}}} halign="center" valign="top" image="{{{C_Image_PodiumBgDimmer}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" hidden="1" />
		</frame>
		<quad id="quad-confetti" z-index="1" size="320 180" halign="center" valign="center" image="{{{C_Image_Confetti}}}" hidden="1" />
		<frame id="frame-map-info" z-index="2" pos="0 83">
			<label id="label-map-name" class="text-bold" size="300 10" halign="center" textsize="5" />
			<frameinstance id="playername-map-author" modelid="{{{PlayerName::C_Name}}}" pos="0 -7" data-size="300 6" data-halign="center" data-valign="top" data-textsize="3" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-textprefix="$t$i" data-textcolor="ffffff" data-textcompose="{{{Text_AuthorName}}}" />
		</frame>
		<label id="label-ranked-message" class="text-bold" pos="0 83" z-index="3" size="300 10" halign="center" textsize="8" hidden="1" />
		<frame id="frame-royal" pos="0 74" z-index="4" hidden="1">
			<quad id="quad-royal-team-logo" z-index="1" {{{MLHelpers::Size(Size_RoyalTeamLogo)}}} halign="center" valign="center" keepratio="fit" hidden="1" />
			<label id="label-royal-message" class="text-bold" pos="0 -15" z-index="2" size="300 10" halign="center" textsize="8" hidden="1" />
		</frame>
		<frame id="frame-player-cards" z-index="5">
			<frameinstance modelid="framemodel-player-card" pos="{{{Size_PlayerCard.X * -0.5}}} 11" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_MedalGold)}}}" />
			<frameinstance modelid="framemodel-player-card" pos="-149 3" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_MedalSilver)}}}" />
			<frameinstance modelid="framemodel-player-card" pos="{{{149 - Size_PlayerCard.X}}} -5" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_MedalBronze)}}}" />
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Modes/Bot.Script.txt" as Bot
#Include "Libs/Nadeo/CMGame/Modes/Clans_Client.Script.txt" as Clans
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/Sign16x9Small_Common.Script.txt" as Sign16x9Small

#Struct K_ControlPlayerCard {
	CMlFrame Frame_PlayerCard;
	CMlQuad Quad_PlayerFlag;
	CMlFrame PlayerName_Name;
	CMlQuad Quad_MVPIcon;
	CMlLabel Label_MVP;
	CMlLabel Label_PlayerScore;
	CMlQuad Quad_Light;
	CMlQuad Quad_Contour;
	CMlQuad Quad_Myself;
}
#Struct K_Controls {
	CMlLabel Label_MapName;
	CMlFrame PlayerName_MapAuthor;
	K_ControlPlayerCard[] PlayerCards;
	CMlQuad Quad_BgDefault;
	CMlQuad Quad_BgRanked;
	CMlQuad Quad_BgRoyal;
	CMlQuad Quad_BgDimmer;
	CMlQuad Quad_Stripes;
	CMlFrame Frame_MapInfo;
	CMlLabel Label_RankedMessage;
	CMlFrame Frame_Royal;
	CMlQuad Quad_RoyalTeamLogo;
	CMlLabel Label_RoyalMessage;
	CMlQuad Quad_Confetti;
}
#Struct K_State {
	K_Controls Controls;
	Text MapUid;
	Task::K_Task Task_GetMapInfo;
	Integer PlayersUpdate;
	Integer ScoreMode;
	Integer DisplayMode;
	Text PodiumPlayersWin;
	Text PodiumPlayersLose;
	Text[] Top3Logins;
	Integer WinningClan;
	Text MVPAccountId;
}

#Const C_ScoresUpdateCheckInterval 1000
#Const C_Image_WorldFlag {{{dump(C_Image_WorldFlag)}}}

#Const C_BgColor_Blue <0., 0., 0.7>
#Const C_BgColor_Red <0.7, 0., 0.>
""",
"""
K_State UpdateMap(K_State _State, CMap _Map) {
	declare K_State State = _State;

	State.Task_GetMapInfo = Task::Destroy(State.Task_GetMapInfo);
	if (_Map == Null) {
		State.MapUid = "";
		State.Controls.Label_MapName.Visible = False;
		State.Controls.PlayerName_MapAuthor.Visible = False;
	} else {
		State.MapUid = _Map.MapInfo.MapUid;
		State.Controls.Label_MapName.Value = Tools::TranslateOfficialMapName(_Map.MapInfo.Name, _Map.MapInfo.AuthorLogin);
		State.Controls.Label_MapName.Visible = True;
		if (_Map.MapInfo.AuthorLogin != "{{{PlayerName::C_Nadeo_Login}}}") {
			State.Controls.PlayerName_MapAuthor.Visible = False;
			State.Task_GetMapInfo = Task::Create(DataFileMgr, DataFileMgr.Map_NadeoServices_GetFromUid(MainUser::GetMainUserId(), _Map.MapInfo.MapUid));
		} else {
			State.Controls.PlayerName_MapAuthor.Visible = True;
			{{{PlayerName::P}}}SetName(
				This,
				State.Controls.PlayerName_MapAuthor,
				{{{dump(PlayerName::C_Nadeo_Name)}}},
				{{{dump(PlayerName::C_Nadeo_ClubTag)}}},
				{{{dump(PlayerName::C_Nadeo_IsFirstPartyDisplayName)}}},
				{{{dump(PlayerName::C_Nadeo_DisplayFirstPartyLogo)}}}
			);
		}
	}

	return State;
}

Void UpdateMapAuthor(K_State _State, CNadeoServicesMap _NSMap) {
	if (_NSMap.AuthorDisplayName == "") {
		_State.Controls.PlayerName_MapAuthor.Visible = False;
	} else {
		_State.Controls.PlayerName_MapAuthor.Visible = True;
		{{{PlayerName::P}}}SetName(This, _State.Controls.PlayerName_MapAuthor, _NSMap.AuthorDisplayName, "", _NSMap.AuthorIsFirstPartyDisplayName, True);
	}
}

// `CUser.IsFakeUser` is valid only for the host of the server
// All players that connect to the server will see `IsFakeUser` as `False`
// even if the user is indeed a fake one
Boolean IsFakeUser(CUser _User) {
	return (
		_User != Null && (
			_User.IsFakeUser ||
			TL::StartsWith("*fake", _User.Login)
		)
	);
}

Void UpdateMVP(K_ControlPlayerCard _PlayerCard, CUser _User, Text _MVPAccountId) {
	if (_MVPAccountId != "" && _User != Null && _User.WebServicesUserId == _MVPAccountId) {
		_PlayerCard.Quad_MVPIcon.Visible = True;
		_PlayerCard.Label_MVP.Visible = True;
		_PlayerCard.Label_PlayerScore.RelativePosition_V3.X = _PlayerCard.Label_MVP.RelativePosition_V3.X + ML::Min(_PlayerCard.Label_MVP.ComputeWidth(_PlayerCard.Label_MVP.Value), _PlayerCard.Label_MVP.Size.X) + 0.5;
	} else {
		_PlayerCard.Quad_MVPIcon.Visible = False;
		_PlayerCard.Label_MVP.Visible = False;
		_PlayerCard.Label_PlayerScore.RelativePosition_V3.X = 0.;
	}
}

Void UpdatePlayerCard(K_ControlPlayerCard _PlayerCard, CUser _LocalUser, CSmScore _Score, Integer _ScoreMode, Text _MVPAccountId, Text[Text] _PlayersNames) {
	UpdateMVP(_PlayerCard, _Score.User, _MVPAccountId);

	if (_Score.User != Null) {
		if (IsFakeUser(_Score.User)) {
			_PlayerCard.Quad_PlayerFlag.ImageUrl = Bot::GetCountryFlagUrl(_Score.User.Name);
		} else if (_Score.User.CountryFlagUrl == "") {
			_PlayerCard.Quad_PlayerFlag.ImageUrl = C_Image_WorldFlag;
		} else {
			_PlayerCard.Quad_PlayerFlag.ImageUrl = _Score.User.CountryFlagUrl;
		}
		_PlayerCard.Quad_PlayerFlag.Visible = True;
		if (_PlayersNames.existskey(_Score.User.WebServicesUserId)) {
			{{{PlayerName::P}}}SetName(
				This,
				_PlayerCard.PlayerName_Name,
				_PlayersNames[_Score.User.WebServicesUserId],
				"",
				_Score.User.IsFirstPartyDisplayName,
				True,
				False
			);
		} else {
			{{{PlayerName::P}}}SetUser(This, _PlayerCard.PlayerName_Name, _Score.User, True, False);
		}
		_PlayerCard.PlayerName_Name.Visible = True;

		if (
			_LocalUser != Null &&
			_Score.User.WebServicesUserId == _LocalUser.WebServicesUserId
		) {
			_PlayerCard.Quad_Myself.Visible = True;
			{{{PlayerName::P}}}SetTextColor(This, _PlayerCard.PlayerName_Name, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}}, False);
		} else {
			_PlayerCard.Quad_Myself.Visible = False;
			{{{PlayerName::P}}}SetTextColor(This, _PlayerCard.PlayerName_Name, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight)}}}, False);
		}

		{{{PlayerName::P}}}Redraw(This, _PlayerCard.PlayerName_Name);
	} else {
		_PlayerCard.Quad_PlayerFlag.Visible = False;
		_PlayerCard.PlayerName_Name.Visible = False;
		_PlayerCard.Quad_Myself.Visible = False;
	}

	switch (_ScoreMode) {
		case Sign16x9Small::C_ScoreMode_BestRaceTime: {
			if (_Score.BestRaceTimes.count > 0 && _Score.BestRaceTimes[_Score.BestRaceTimes.count - 1] >= 0) {
				_PlayerCard.Label_PlayerScore.Value = TL::TimeToText(_Score.BestRaceTimes[_Score.BestRaceTimes.count - 1], True, True);
			} else {
				_PlayerCard.Label_PlayerScore.Value = "--:--.---";
			}
			_PlayerCard.Label_PlayerScore.Visible = True;
			_PlayerCard.PlayerName_Name.RelativePosition_V3 = <0., 0.>;
		}
		case Sign16x9Small::C_ScoreMode_Points: {
			if (_Score.Points == 0) {
				_PlayerCard.Label_PlayerScore.Value = "{{{Text_ZeroPoints}}}";
			} else if (_Score.Points == 1) {
				_PlayerCard.Label_PlayerScore.Value = "{{{Text_OnePoint}}}";
			} else {
				_PlayerCard.Label_PlayerScore.Value = TL::Compose("{{{Text_SeveralPoints}}}", ""^_Score.Points);
			}
			_PlayerCard.Label_PlayerScore.Visible = True;
			_PlayerCard.PlayerName_Name.RelativePosition_V3 = <0., 0.>;
		}
		case Sign16x9Small::C_ScoreMode_RaceProgression: {
			if (_Score.BestRaceTimes.count > 0 && _Score.BestRaceTimes[_Score.BestRaceTimes.count - 1] >= 0) {
				_PlayerCard.Label_PlayerScore.Value = _Score.BestRaceTimes.count^" | "^TL::TimeToText(_Score.BestRaceTimes[_Score.BestRaceTimes.count - 1], True, True);
			} else {
				_PlayerCard.Label_PlayerScore.Value = "0 | --:--.---";
			}
			_PlayerCard.Label_PlayerScore.Visible = True;
			_PlayerCard.PlayerName_Name.RelativePosition_V3 = <0., 0.>;
		}
		default: {
			_PlayerCard.Label_PlayerScore.Visible = False;
			_PlayerCard.PlayerName_Name.RelativePosition_V3 = <-0.25, -2.>;
		}
	}
}

K_State UpdatePlayers(
	K_State _State,
	Integer _PlayersUpdate,
	Integer _ScoreMode,
	Text _PodiumPlayersWin,
	Text _PodiumPlayersLose,
	CSmScore[] _Top3Scores,
	Text _MVPAccountId,
	Text[Text] _PlayersNames
) {
	declare K_State State = _State;

	State.PlayersUpdate = _PlayersUpdate;
	State.ScoreMode = _ScoreMode;
	State.PodiumPlayersWin = _PodiumPlayersWin;
	State.PodiumPlayersLose = _PodiumPlayersLose;
	State.MVPAccountId = _MVPAccountId;

	declare CSmScore[Integer] Top3Scores;
	State.Top3Logins = [];
	foreach (Key => Score in _Top3Scores) {
		Top3Scores[Key] <=> Score;
		if (Score.User != Null) {
			State.Top3Logins.add(Score.User.Login);
		} else {
			State.Top3Logins.add("");
		}
	}

	if (State.PodiumPlayersWin != "" || State.PodiumPlayersLose != "") {
		declare Text[] WinLogins = TL::Split(",", State.PodiumPlayersWin);
		declare Text[] LoseLogins = TL::Split(",", State.PodiumPlayersLose);
		Top3Scores = [];
		foreach (Score in Scores) {
			if (Score.User != Null) {
				declare Boolean CheckComplete = False;
				if (WinLogins.exists(Score.User.Login)) {
					Top3Scores[WinLogins.keyof(Score.User.Login)] <=> Score;
					CheckComplete = True;
				} else if (LoseLogins.exists(Score.User.Login)) {
					Top3Scores[WinLogins.count + LoseLogins.keyof(Score.User.Login)] <=> Score;
					CheckComplete = True;
				}
				if (
					CheckComplete &&
					Top3Scores.count >= 3 &&
					Top3Scores.existskey(0) &&
					Top3Scores.existskey(1) &&
					Top3Scores.existskey(2)
				) {
					break;
				}
			}
		}
		Top3Scores = Top3Scores.sortkey();
	}

	foreach (Key => PlayerCard in State.Controls.PlayerCards) {
		if (Top3Scores.existskey(Key)) {
			UpdatePlayerCard(PlayerCard, LocalUser, Top3Scores[Key], State.ScoreMode, State.MVPAccountId, _PlayersNames);
			PlayerCard.Frame_PlayerCard.Visible = True;
		} else {
			PlayerCard.Frame_PlayerCard.Visible = False;
		}
	}

	return State;
}

K_State UpdateDisplayMode(K_State _State, Integer _DisplayMode) {
	declare K_State State = _State;

	State.DisplayMode = _DisplayMode;

	State.Controls.Quad_BgDefault.Visible = (State.DisplayMode == Sign16x9Small::C_DisplayMode_Default);
	State.Controls.Quad_BgRanked.Visible = (State.DisplayMode == Sign16x9Small::C_DisplayMode_Ranked);
	State.Controls.Quad_BgRoyal.Visible = (State.DisplayMode == Sign16x9Small::C_DisplayMode_Royal);
	State.Controls.Quad_BgDimmer.Visible = (State.DisplayMode == Sign16x9Small::C_DisplayMode_Ranked);
	State.Controls.Quad_Stripes.Visible = (State.DisplayMode == Sign16x9Small::C_DisplayMode_Ranked);
	State.Controls.Frame_MapInfo.Visible = (State.DisplayMode == Sign16x9Small::C_DisplayMode_Default);
	State.Controls.Label_RankedMessage.Visible = (State.DisplayMode == Sign16x9Small::C_DisplayMode_Ranked);
	State.Controls.Frame_Royal.Visible = (State.DisplayMode == Sign16x9Small::C_DisplayMode_Royal);
	State.Controls.Quad_Confetti.Visible = (State.DisplayMode == Sign16x9Small::C_DisplayMode_Royal);

	foreach (Key => PlayerCard in State.Controls.PlayerCards) {
		PlayerCard.Quad_Light.Visible = (Key != 0 && State.DisplayMode == Sign16x9Small::C_DisplayMode_Default);
		PlayerCard.Quad_Contour.Visible = (State.DisplayMode == Sign16x9Small::C_DisplayMode_Default);
	}

	return State;
}

K_State UpdateWinningClan(K_State _State, Integer _WinningClan) {
	declare K_State State = _State;

	State.WinningClan = _WinningClan;

	if (State.DisplayMode == Sign16x9Small::C_DisplayMode_Royal) {
		if (State.WinningClan > 0) {
			State.Controls.Label_RoyalMessage.Value = TL::Compose("{{{Text_RoyalWinner}}}", Clans::GetClanName(State.WinningClan));
			State.Controls.Label_RoyalMessage.Visible = True;
			State.Controls.Quad_RoyalTeamLogo.ImageUrl = Clans::GetClanLogo(State.WinningClan);
			State.Controls.Quad_RoyalTeamLogo.Visible = (State.Controls.Quad_RoyalTeamLogo.ImageUrl != "");
			State.Controls.Quad_Confetti.Colorize = Clans::GetClanColor(State.WinningClan);
		} else {
			State.Controls.Label_RoyalMessage.Visible = False;
			State.Controls.Quad_RoyalTeamLogo.Visible = False;
			State.Controls.Quad_Confetti.Colorize = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentTwo)}}};
		}
	} else {
		if (State.WinningClan == 1) {
			State.Controls.Label_RankedMessage.Value = "{{{Text_WinningTeamBlue}}}";
			State.Controls.Quad_BgRanked.Colorize = C_BgColor_Blue;
		} else if (State.WinningClan == 2) {
			State.Controls.Label_RankedMessage.Value = "{{{Text_WinningTeamRed}}}";
			State.Controls.Quad_BgRanked.Colorize = C_BgColor_Red;
		} else {
			State.Controls.Label_RankedMessage.Value = "";
		}
	}

	return State;
}

CSmScore[] GetTop3Scores() {
	declare CSmScore[] Top3Scores;
	foreach (Score in Scores) {
		Top3Scores.add(Score);
		if (Top3Scores.count >= 3) break;
	}
	return Top3Scores;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_PlayerCards;

declare netread Boolean Net_Race_Sign16x9Small_IsVisible for UI = False;
declare netread Integer Net_Race_Sign16x9Small_PlayersUpdate for Teams[0] = 0;
declare netread Integer Net_Race_Sign16x9Small_ScoreMode for Teams[0] = Sign16x9Small::C_ScoreMode_Hidden;
declare netread Integer Net_Race_Sign16x9Small_DisplayMode for Teams[0] = Sign16x9Small::C_DisplayMode_Default;
declare netread Integer Net_Race_Sign16x9Small_WinningClan for Teams[0] = Sign16x9Small::C_WinningClanNull;
declare netread Text Net_Race_Sign16x9Small_MVPAccountId for Teams[0] = "";
declare netread Text[Text] Net_Race_Sign16x9Small_PlayersNames for Teams[0] = [];

declare Boolean DisplayModule;
declare Integer ScoresUpdateCheckTime;
declare Boolean WaitingScoresInitialization;
declare K_State State;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Label_MapName = (Frame_Global.GetFirstChild("label-map-name") as CMlLabel);
State.Controls.PlayerName_MapAuthor = (Frame_Global.GetFirstChild("playername-map-author") as CMlFrame);
State.Controls.Quad_BgDefault = (Frame_Global.GetFirstChild("quad-bg-default") as CMlQuad);
State.Controls.Quad_BgRanked = (Frame_Global.GetFirstChild("quad-bg-ranked") as CMlQuad);
State.Controls.Quad_BgRoyal = (Frame_Global.GetFirstChild("quad-bg-royal") as CMlQuad);
State.Controls.Quad_BgDimmer = (Frame_Global.GetFirstChild("quad-bg-dimmer") as CMlQuad);
State.Controls.Quad_Stripes = (Frame_Global.GetFirstChild("quad-stripes") as CMlQuad);
State.Controls.Frame_MapInfo = (Frame_Global.GetFirstChild("frame-map-info") as CMlFrame);
State.Controls.Label_RankedMessage = (Frame_Global.GetFirstChild("label-ranked-message") as CMlLabel);
State.Controls.Frame_Royal = (Frame_Global.GetFirstChild("frame-royal") as CMlFrame);
State.Controls.Quad_RoyalTeamLogo = (State.Controls.Frame_Royal.GetFirstChild("quad-royal-team-logo") as CMlQuad);
State.Controls.Label_RoyalMessage = (State.Controls.Frame_Royal.GetFirstChild("label-royal-message") as CMlLabel);
State.Controls.Quad_Confetti = (Frame_Global.GetFirstChild("quad-confetti") as CMlQuad);
Frame_PlayerCards <=> (Frame_Global.GetFirstChild("frame-player-cards") as CMlFrame);
foreach (Key => Control in Frame_PlayerCards.Controls) {
	declare CMlFrame Frame_PlayerCard <=> (Control as CMlFrame);
	declare K_ControlPlayerCard PlayerCard = K_ControlPlayerCard {
		Frame_PlayerCard = Frame_PlayerCard,
		Quad_PlayerFlag = (Frame_PlayerCard.GetFirstChild("quad-player-flag") as CMlQuad),
		PlayerName_Name = (Frame_PlayerCard.GetFirstChild("playername-name") as CMlFrame),
		Quad_MVPIcon = (Frame_PlayerCard.GetFirstChild("quad-mvp-icon") as CMlQuad),
		Label_MVP = (Frame_PlayerCard.GetFirstChild("label-mvp") as CMlLabel),
		Label_PlayerScore = (Frame_PlayerCard.GetFirstChild("label-player-score") as CMlLabel),
		Quad_Light = (Frame_PlayerCard.GetFirstChild("quad-light") as CMlQuad),
		Quad_Contour = (Frame_PlayerCard.GetFirstChild("quad-contour") as CMlQuad),
		Quad_Myself = (Frame_PlayerCard.GetFirstChild("quad-myself") as CMlQuad)
	};
	State.Controls.PlayerCards.add(PlayerCard);
	switch (Key) {
		case 0: {
			PlayerCard.Quad_Light.Visible = False;
			PlayerCard.Quad_Contour.Colorize = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_MedalGold))}}};
		}
		case 1: {
			PlayerCard.Quad_Light.Colorize = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_MedalSilver))}}};
			PlayerCard.Quad_Contour.Colorize = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_MedalSilver))}}};
		}
		case 2: {
			PlayerCard.Quad_Light.Colorize = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_MedalBronze))}}};
			PlayerCard.Quad_Contour.Colorize = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_MedalBronze))}}};
		}
	}
}

DisplayModule = Frame_Global.Visible;
ScoresUpdateCheckTime = Now + C_ScoresUpdateCheckInterval;
WaitingScoresInitialization = (Scores.count <= 0);
State = UpdateMap(State, Map);
State = UpdateDisplayMode(State, Net_Race_Sign16x9Small_DisplayMode);
State = UpdateWinningClan(State, Net_Race_Sign16x9Small_WinningClan);
State = UpdatePlayers(
	State,
	Net_Race_Sign16x9Small_PlayersUpdate,
	Net_Race_Sign16x9Small_ScoreMode,
	UI.UISequence_PodiumPlayersWin,
	UI.UISequence_PodiumPlayersLose,
	GetTop3Scores(),
	Net_Race_Sign16x9Small_MVPAccountId,
	Net_Race_Sign16x9Small_PlayersNames
);
***

***MainLoop***
***
if (PageIsVisible) {
	if (DisplayModule != Net_Race_Sign16x9Small_IsVisible) {
		DisplayModule = Net_Race_Sign16x9Small_IsVisible;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_Global.Visible) {
		if (
			((Map == Null || Map.MapInfo == Null) && State.MapUid != "") ||
			(Map != Null && Map.MapInfo != Null && State.MapUid != Map.MapInfo.MapUid)
		) {
			State = UpdateMap(State, Map);
		}

		if (Net_Race_Sign16x9Small_DisplayMode != State.DisplayMode) {
			State = UpdateDisplayMode(State, Net_Race_Sign16x9Small_DisplayMode);
			State = UpdateWinningClan(State, Net_Race_Sign16x9Small_WinningClan);
			State = UpdatePlayers(
				State,
				Net_Race_Sign16x9Small_PlayersUpdate,
				Net_Race_Sign16x9Small_ScoreMode,
				UI.UISequence_PodiumPlayersWin,
				UI.UISequence_PodiumPlayersLose,
				GetTop3Scores(),
				Net_Race_Sign16x9Small_MVPAccountId,
				Net_Race_Sign16x9Small_PlayersNames
			);
		}

		if (Net_Race_Sign16x9Small_WinningClan != State.WinningClan) {
			State = UpdateWinningClan(State, Net_Race_Sign16x9Small_WinningClan);
		}

		if (
			Net_Race_Sign16x9Small_PlayersUpdate != State.PlayersUpdate ||
			Net_Race_Sign16x9Small_ScoreMode != State.ScoreMode ||
			UI.UISequence_PodiumPlayersWin != State.PodiumPlayersWin ||
			UI.UISequence_PodiumPlayersLose != State.PodiumPlayersLose ||
			Net_Race_Sign16x9Small_MVPAccountId != State.MVPAccountId
		) {
			State = UpdatePlayers(
				State,
				Net_Race_Sign16x9Small_PlayersUpdate,
				Net_Race_Sign16x9Small_ScoreMode,
				UI.UISequence_PodiumPlayersWin,
				UI.UISequence_PodiumPlayersLose,
				GetTop3Scores(),
				Net_Race_Sign16x9Small_MVPAccountId,
				Net_Race_Sign16x9Small_PlayersNames
			);
		}

		if (WaitingScoresInitialization && Scores.count > 0) {
			WaitingScoresInitialization = False;
			State = UpdatePlayers(
				State,
				Net_Race_Sign16x9Small_PlayersUpdate,
				Net_Race_Sign16x9Small_ScoreMode,
				UI.UISequence_PodiumPlayersWin,
				UI.UISequence_PodiumPlayersLose,
				GetTop3Scores(),
				Net_Race_Sign16x9Small_MVPAccountId,
				Net_Race_Sign16x9Small_PlayersNames
			);
		}

		if (
			State.PodiumPlayersWin == "" &&
			State.PodiumPlayersLose == "" &&
			Now >= ScoresUpdateCheckTime
		) {
			ScoresUpdateCheckTime = Now + C_ScoresUpdateCheckInterval;
			declare CSmScore[] Top3Scores = GetTop3Scores();
			if (
				Top3Scores.count != State.Top3Logins.count ||
				(Top3Scores.count > 0 && Top3Scores[0].User != Null && Top3Scores[0].User.Login != State.Top3Logins[0]) ||
				(Top3Scores.count > 1 && Top3Scores[1].User != Null && Top3Scores[1].User.Login != State.Top3Logins[1]) ||
				(Top3Scores.count > 2 && Top3Scores[2].User != Null && Top3Scores[2].User.Login != State.Top3Logins[2])
			) {
				State = UpdatePlayers(
					State,
					Net_Race_Sign16x9Small_PlayersUpdate,
					Net_Race_Sign16x9Small_ScoreMode,
					UI.UISequence_PodiumPlayersWin,
					UI.UISequence_PodiumPlayersLose,
					Top3Scores,
					Net_Race_Sign16x9Small_MVPAccountId,
					Net_Race_Sign16x9Small_PlayersNames
				);
			}
		}
	}
}

if (Task::IsInitialized(State.Task_GetMapInfo)) {
	State.Task_GetMapInfo = Task::Update(State.Task_GetMapInfo);
	if (!Task::IsRunning(State.Task_GetMapInfo)) {
		declare CTaskResult_NSMap SourceTask = Task::GetSourceTask_NSMap(State.Task_GetMapInfo);
		if (Task::IsSuccess(State.Task_GetMapInfo) && SourceTask != Null && SourceTask.Map != Null) {
			UpdateMapAuthor(State, SourceTask.Map);
		}
		State.Task_GetMapInfo = Task::Destroy(State.Task_GetMapInfo);
	}
}
***
""",
[
	UIModules::Component(),
	PlayerName::ComponentV2()
],
[]
	);
}