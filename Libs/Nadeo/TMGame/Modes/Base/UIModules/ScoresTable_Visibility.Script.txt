/**
 *	ScoreTable visibility layer
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/TMGame/Modes/Base/UIModules/ScoresTable_Visibility.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/ScoresTable_Visibility_Component.Script.txt" as ScoresTableVisibility

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

#Const C_Layer_ScoresTable "UIModule_Race_ScoresTable_Visibility"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink of the ScoresTable
 *
 *  @return				The the ScoresTable module manialink
 */
Text GetScoreTableML() {

	return MV::Create(
	C_Layer_ScoresTable, 3,
"""

""",
"""

""",
"""
***MainLoop***
***
if ({{{ScoresTableVisibility::P}}}LayerIsVisible() != PageIsVisible) {
	{{{ScoresTableVisibility::P}}}SetLayerIsVisible(PageIsVisible);
}

if (PageIsVisible) {
	// Only layers of type `CUILayer::EUILayerType::ScoresTable` will receive the special `MenuNavigation` events
	// when pressing the "Prev score page" and "Next score page" binds
	// see: /trackmania-next/tmnext/-/issues/5654
	foreach (Event in PendingEvents) {
		if (Event.Type == CMlScriptEvent::Type::MenuNavigation) {
			if (Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::PageUp) {
				{{{ScoresTableVisibility::P}}}SetPageShift(-1);
			} else if (Event.MenuNavAction == CMlScriptEvent::EMenuNavAction::PageDown) {
				{{{ScoresTableVisibility::P}}}SetPageShift(1);
			}
		}
	}
}
***
""",
[ScoresTableVisibility::Component()],
[]
	);
}

Void Start(Boolean _IsSplitscreen) {
	if (_IsSplitscreen) {
		for (I, 1, SplitScreenCount) {
			Layers::Create(C_Layer_ScoresTable^I, GetScoreTableML());
			Layers::SetType(C_Layer_ScoresTable^I, CUILayer::EUILayerType::ScoresTable);
			SplitScreenAssignLayer(Layers::Get(C_Layer_ScoresTable^I), I);
		}
	} else {
		Layers::Create(C_Layer_ScoresTable, GetScoreTableML());
		Layers::SetType(C_Layer_ScoresTable, CUILayer::EUILayerType::ScoresTable);
	}
}