/** 
 * Layers library.
 */

#Const Version		"2015-04-14"
#Const ScriptName	"Layers.Script.txt"

declare Ident[Text] G_LibLayers_LayersIds;

Text GetScriptVersion() { return Version; }
Text GetScriptName() { return ScriptName; }

// Create a layer
CUILayer Create(Text _Name) {
	declare CUILayer Layer;
	
	Layer <=> UILayerCreate();
	G_LibLayers_LayersIds[_Name] = Layer.Id;
	
	return Layer;
}

// Destroy the layer with the specified id
Void Destroy(Ident _Id) {
	if (UILayers.existskey(_Id)) UILayerDestroy(UILayers[_Id]);
	declare Removed = G_LibLayers_LayersIds.remove(_Id);
}

// Destroy the layer with the specified name
Void Destroy(Text _Name) {
	if (!G_LibLayers_LayersIds.existskey(_Name)) return;
	Destroy(G_LibLayers_LayersIds[_Name]);
}

// Destroy all the layers created by the plugin
Void DestroyAll() {
	foreach (LayerId in G_LibLayers_LayersIds) Destroy(LayerId);
}

// Get a layer from its name
CUILayer Get(Text _Name) {
	if (!G_LibLayers_LayersIds.existskey(_Name)) return Null;
	declare LayerId = G_LibLayers_LayersIds[_Name];
	if (!UILayers.existskey(LayerId)) return Null;
	
	return UILayers[LayerId];
}

// Get the local page of a layer
CMlPage GetPage(Text _Name) {
	declare Layer <=> Get(_Name);
	if (Layer == Null) return Null;
	
	return Layer.LocalPage;
}

Void Unload() {
	DestroyAll();
}

Void Load() {
	Unload();
}