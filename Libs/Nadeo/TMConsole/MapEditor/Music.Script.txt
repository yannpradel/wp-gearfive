/**
 *	Music library
 *
 *	One music contains several tracks
 *	All tracks are contained in a .zip
 */
#Const Version		"2015-11-26"
#Const ScriptName	"Music.Script.txt"

#Include "Libs/Nadeo/TMConsole/Volumes.Script.txt" as Volumes

/// Path to the music
#Const C_MusicPath_Random	"file://Media/Manialinks/Nadeo/TMConsole/MapEditor/Sounds/RandomGeneration.zip" 
#Const C_MusicPath_Normal	"file://Media/Musics/Stadium/Editor/TrackEditor-Infusion.ogg" 
/// Tracks
#Const C_Tracks [
	"PlaceTerrain_01" => 0,
	"PlaceTerrain_02" => 1,
	"PlaceRoads" => 2,
	"PlaceDeco" => 3,
	"Trackbuilder" => 0
]

declare CAudioSourceMusic	G_MusicRandom;		// only one of them is not Null
declare CAudioSource		G_MusicNormal;

// Get a track index from its name
Integer GetTrack(Text _TrackName) {
	if (!C_Tracks.existskey(_TrackName)) return -1;
	
	return C_Tracks[_TrackName];
}

// Reset the music
Void Reset(Boolean _Play) {
	if (G_MusicRandom != Null) {
		G_MusicRandom.Stop();
		G_MusicRandom.EnableSegment(C_Tracks["PlaceTerrain_01"]^"");
		if (_Play) G_MusicRandom.Play();
	} 
	if (G_MusicNormal != Null) {
		G_MusicNormal.Stop();
		if (_Play) G_MusicNormal.Play();
	}
}

// Select the track to play in the music
Void SetTracks(Integer[] _Tracks) {
	if (G_MusicRandom == Null)  return;
	//on envoie toujours un tableau de type [0, ..., N], donc on active le segment N (qui joue les tracks 0 Ã  N)
	G_MusicRandom.EnableSegment(_Tracks[_Tracks.count-1]^"");
}

Void Unload() {
	Reset(False);
}

Void Load(Boolean _IsRandom) {
	Unload();
	
	assert(G_MusicRandom == Null && G_MusicNormal == Null);
	declare MusicVolumedB = Volumes::GetVolumedB("EditorMusic");
	if (_IsRandom) {
		G_MusicRandom = Audio.CreateMusic(C_MusicPath_Random);
		G_MusicRandom.VolumedB = MusicVolumedB;
	} else {
		G_MusicNormal = Audio.CreateSound(C_MusicPath_Normal, MusicVolumedB, True, True, False);
	}
}