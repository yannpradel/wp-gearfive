/** 
 * Utils library
 */

#Const Version		"2015-12-30"
#Const ScriptName	"Utils.Script.txt"

#Include "MathLib" as ML
#Include "Libs/Nadeo/TMConsole/MapEditor/Layers.Script.txt" as Layers

// Save status
#Const C_SaveStatus_NotSaved	0
#Const C_SaveStatus_Modified	1
#Const C_SaveStatus_Saved		2

// Globales
declare Boolean G_EnableLog;		///< Log status
declare Integer G_SaveStatus;		///< Save status
declare Boolean G_LogToFile;		///< Log to file
declare Text	G_Log;				///< Log content

Text GetScriptVersion() { return Version; }
Text GetScriptName() { return ScriptName; }

// Log a value
Void Log(Text _Text) {
	if (!G_EnableLog) return;
	
	if (G_LogToFile) G_Log ^= Now^"> "^_Text^"\n";
	else log(Now^"> "^_Text);
}

// Enable the log function to output logs
Void EnableLog(Boolean _Enable) {
	G_EnableLog = _Enable;
}

// Save log message to file instead of sending them to the console
Void LogToFile(Boolean _ToFile) {
	G_LogToFile = _ToFile;
}

Void ResetLogFile() {
	G_Log = "";
}

Void ViewLogFile() {
	if (!G_EnableLog) return;
	
	declare LayerLogFile <=> Layers::Create("LogFile");
	declare LibUtils_WaitLog for LayerLogFile.LocalPage = True;
	declare LibUtils_LogUpdate for LayerLogFile.LocalPage = -1;
	declare LibUtils_Log for LayerLogFile.LocalPage = "";
	LibUtils_Log = G_Log;
	LibUtils_LogUpdate = Now;
	
	LibUtils_WaitLog = True;
	
	LayerLogFile.ManialinkPage = """
<manialink version="3" name="MapEditor:LogFile">
<frame pos="0 0" z-index="10000">
	<quad pos="0 0" z-index="-1" size="320 180" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur" />
	<quad pos="0 0" z-index="-2" size="320 180" halign="center" valign="center" bgcolor="000" opacity="0.8" scriptevents="1" />
	<textedit pos="0 80" size="220 100" halign="center" textformat="script" textsize="2" id="TextEdit_Log" />
	<label pos="0 -25" halign="center" style="CardButtonMedium" scriptevents="1" text="OK" id="Button_OK" />
</frame>
<script><!--
main() {
	declare TextEdit_Log <=> (Page.GetFirstChild("TextEdit_Log") as CMlTextEdit);
	
	declare LibUtils_WaitLog for Page = True;
	declare LibUtils_LogUpdate for Page = -1;
	declare LibUtils_Log for Page = "";
	
	declare PrevLogUpdate = -1;
	
	while (True) {
		yield;
		
		if (PrevLogUpdate != LibUtils_LogUpdate) {
			PrevLogUpdate = LibUtils_LogUpdate;
			TextEdit_Log.Value = LibUtils_Log;
		}
		
		foreach (Event in PendingEvents) {
			if (Event.Type == CMlScriptEvent ::Type::MouseClick) {
				if (Event.ControlId == "Button_OK") LibUtils_WaitLog = False;
			}
		}
	}
}
--></script>
</manialink>
""";
	
	while (LibUtils_WaitLog) yield;
	
	Layers::Destroy("LogFile");
}

// Convert an Integer to a CMapEditorPlugin::CardinalDirections *	0: North, 1: East, 2: South, 3: West
CMapEditorPlugin::CardinalDirections IntToDir(Integer _ClipNb) {
	switch (_ClipNb) {
		case 0: return CMapEditorPlugin::CardinalDirections::North;
		case 1: return CMapEditorPlugin::CardinalDirections::East;
		case 2: return CMapEditorPlugin::CardinalDirections::South;
		case 3: return CMapEditorPlugin::CardinalDirections::West;
	}
	
	return CMapEditorPlugin::CardinalDirections::North;
}

// Convert a CMapEditorPlugin::CardinalDirections to  an Integer *	0: North, 1: East, 2: South, 3: West
Integer DirToInt(CMapEditorPlugin::CardinalDirections _Dir) {
	switch (_Dir) {
		case CMapEditorPlugin::CardinalDirections::North	: return 0;
		case CMapEditorPlugin::CardinalDirections::East	: return 1;
		case CMapEditorPlugin::CardinalDirections::South	: return 2;
		case CMapEditorPlugin::CardinalDirections::West	: return 3;
	}
	
	return 0;
}

// Convert a CMapEditorPlugin::CardinalDirections to  a Vec3
Vec3 DirToVec3(CMapEditorPlugin::CardinalDirections _Dir) {
	switch (_Dir) {
		case CMapEditorPlugin::CardinalDirections::North	: return <0., 0., 1.>;
		case CMapEditorPlugin::CardinalDirections::East	: return <1., 0., 0.>;
		case CMapEditorPlugin::CardinalDirections::South	: return <0., 0., -1.>;
		case CMapEditorPlugin::CardinalDirections::West	: return <-1., 0., 0.>;
	}
	
	return <0., 0., 0.>;
}


// Compute the manhattan distance between two points
Integer ManhattanDistance(Int3 _Start, Int3 _End) {
	return ML::Abs(_Start.X - _End.X) + ML::Abs(_Start.Y - _End.Y) + ML::Abs(_Start.Z - _End.Z);
}

// Return the neighbor coordinates of a coordinate
Int3[] GetNeighbors(Int3 _Coord) {
	declare NeighborsCoords = [<1, 0, 0>, <-1, 0, 0>, <0, 0, 1>, <0, 0, -1>, <0, 1, 0>, <0, -1, 0>];
	declare Int3[] Neighbors;
	foreach (NeighborCoord in NeighborsCoords) {
		Neighbors.add(_Coord + NeighborCoord);
	}
	return Neighbors;
}


// Get Null coord
Int3 NullCoord() {
	return <-1, -1, -1>;
}

/// Get the save status constants
Integer SaveStatus_NotSaved() { return C_SaveStatus_NotSaved; }
Integer SaveStatus_Modified() { return C_SaveStatus_Modified; }
Integer SaveStatus_Saved() { return C_SaveStatus_Saved; }

// Set the saved status of the track
Void SetSaveStatus(Integer _SaveStatus) {
	G_SaveStatus = _SaveStatus;
}

//Get the saved status of the track
Integer GetSaveStatus() {
	return G_SaveStatus;
}