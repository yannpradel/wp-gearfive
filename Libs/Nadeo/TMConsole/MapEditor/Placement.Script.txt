/**
 *	Placement library
 *
 *	Save possible placement for macroblocks
 */
#Const Version		"2019-01-18"
#Const ScriptName	"Collection.Script.txt"

#Include "Libs/Nadeo/TMConsole/MapEditor/Utils.Script.txt" as Utils

///Structure for the placement information
#Struct K_LibPlacement {
	Int3 									Coord;
	CMapEditorPlugin::CardinalDirections 	Dir;
	Integer									ConnectedBy;
	Integer 								ConnectedTo;
}

//  Add a new placement possibility
Void Add(CMacroblockModel _MacroblockModel, Int3 _Coord, CMapEditorPlugin::CardinalDirections _Dir, Integer _ConnectedBy, Integer _ConnectedTo) {
	if (_MacroblockModel == Null) return;
	declare K_LibPlacement[] Placements for _MacroblockModel;

	Placements.add(K_LibPlacement{
		Coord = _Coord,
		Dir = _Dir,
		ConnectedBy = _ConnectedBy,
		ConnectedTo = _ConnectedTo
	});
}

// Remove a placement possibility
Void Remove(CMacroblockModel _MacroblockModel, Integer _Placement) {
	if (_MacroblockModel == Null) return;
		
	declare K_LibPlacement[] Placements for _MacroblockModel;
	declare Removed = Placements.removekey(_Placement);
	if (Removed) {
		declare Integer LibPlacement_PlacementSelected for _MacroblockModel;
		if (_Placement <= LibPlacement_PlacementSelected) LibPlacement_PlacementSelected -= 1;
		else if (_Placement == LibPlacement_PlacementSelected) LibPlacement_PlacementSelected = -1;
	}
}

// Select a placement among the available ones
Void Select(CMacroblockModel _MacroblockModel, Integer _Placement) {
	if (_MacroblockModel == Null) return;
	
	declare Integer LibPlacement_PlacementSelected for _MacroblockModel;
	LibPlacement_PlacementSelected = _Placement;
}

// Select the next placement available with a different connected by clip
Void Next(CMacroblockModel _MacroblockModel, Boolean _SwitchOnlyConnectedBy) {
	if (_MacroblockModel == Null) return;
	
	declare K_LibPlacement[] Placements for _MacroblockModel;
	declare Integer LibPlacement_PlacementSelected for _MacroblockModel;
	declare Count = Placements.count;
	
	if (_SwitchOnlyConnectedBy) {
		if (Count <= 0) return;
		
		if (!Placements.existskey(LibPlacement_PlacementSelected)) 
			LibPlacement_PlacementSelected = 0;
		
		declare CurrentConnectedBy = Placements[LibPlacement_PlacementSelected].ConnectedBy;
		for (I, 1, Count) {
			declare NewPlacement = (LibPlacement_PlacementSelected + I) % Count;
			if (Placements[NewPlacement].ConnectedBy == CurrentConnectedBy) {
				LibPlacement_PlacementSelected = NewPlacement;
				return;
			}
		}
	} else {
		LibPlacement_PlacementSelected += 1;
		if (!Placements.existskey(LibPlacement_PlacementSelected)) 
			LibPlacement_PlacementSelected = 0;
	}
}

// Get the placement selected for the given macroblock
Integer GetPlacement(CMacroblockModel _MacroblockModel) {
	if (_MacroblockModel == Null) return -1;
	
	declare Integer LibPlacement_PlacementSelected for _MacroblockModel;
	return LibPlacement_PlacementSelected;
}

// Get the coordinates available for the given macroblock
Int3[] GetCoords(CMacroblockModel _MacroblockModel) {
	declare Int3[] Coords;
	if (_MacroblockModel == Null) return Coords;
	
	declare K_LibPlacement[] Placements for _MacroblockModel;
	// With new structure, it's not really fast to get all of the individual elements of the struct table.
	// It's usually better to directly loop on the Placements table in the concerned scripts
	foreach(Placement in Placements){
		Coords.add(Placement.Coord);
	}
	return Coords;
}

// Get the coordinates of the given placement
Int3 GetCoord(CMacroblockModel _MacroblockModel, Integer _Placement) {
	if (_MacroblockModel == Null) return Utils::NullCoord();
	
	declare K_LibPlacement[] Placements for _MacroblockModel;
	if (Placements.existskey(_Placement)) 
		return Placements[_Placement].Coord;
	
	return Utils::NullCoord();
}

// Get the coordinates of the selected placement
Int3 GetCoord(CMacroblockModel _MacroblockModel) {
	if (_MacroblockModel == Null) return Utils::NullCoord();
	
	declare Integer LibPlacement_PlacementSelected for _MacroblockModel;
	declare K_LibPlacement[] Placements for _MacroblockModel;
	if (Placements.existskey(LibPlacement_PlacementSelected)) 
		return Placements[LibPlacement_PlacementSelected].Coord;
	
	return Utils::NullCoord();
}

// Get the directions available for the given macroblock
CMapEditorPlugin::CardinalDirections[] GetDirs(CMacroblockModel _MacroblockModel) {
	declare CMapEditorPlugin::CardinalDirections[] Dirs;
	if (_MacroblockModel == Null) return Dirs;
	
	declare K_LibPlacement[] Placements for _MacroblockModel;
	// With new structure, it's not really fast to get all of the individual elements of the struct table.
	// It's usually better to directly loop on the Placements table in the concerned scripts
	foreach(Placement in Placements){
		Dirs.add(Placement.Dir);
	}
	return Dirs;
}

// Get the direction of the given placement
CMapEditorPlugin::CardinalDirections GetDir(CMacroblockModel _MacroblockModel, Integer _Placement) {
	if (_MacroblockModel == Null) return CMapEditorPlugin::CardinalDirections::North;
	
	declare K_LibPlacement[] Placements for _MacroblockModel;
	if (Placements.existskey(_Placement)) 
		return Placements[_Placement].Dir;

	return CMapEditorPlugin::CardinalDirections::North;
}

// Get the direction of the selected placement
CMapEditorPlugin::CardinalDirections GetDir(CMacroblockModel _MacroblockModel) {
	if (_MacroblockModel == Null) return CMapEditorPlugin::CardinalDirections::North;
	
	declare Integer LibPlacement_PlacementSelected for _MacroblockModel;
	declare K_LibPlacement[] Placements for _MacroblockModel;
	if (Placements.existskey(LibPlacement_PlacementSelected)) 
		return Placements[LibPlacement_PlacementSelected].Dir;
	
	return CMapEditorPlugin::CardinalDirections::North;
}

// Get the connected by clips available for the given macroblock
Integer[] GetConnectedByClips(CMacroblockModel _MacroblockModel) {
	declare Integer[] ConnectedBy;
	if (_MacroblockModel == Null) return ConnectedBy;
	
	declare K_LibPlacement[] Placements for _MacroblockModel;
	// With new structure, it's not really fast to get all of the individual elements of the struct table.
	// It's usually better to directly loop on the Placements table in the concerned scripts
	foreach(Placement in Placements){
		ConnectedBy.add(Placement.ConnectedBy);
	}
	
	return ConnectedBy;
}

// Get the connected by clip of the given placement
Integer GetConnectedByClip(CMacroblockModel _MacroblockModel, Integer _Placement) {
	if (_MacroblockModel == Null) return -1;
	
	declare K_LibPlacement[] Placements for _MacroblockModel;
	if (Placements.existskey(_Placement))
		return Placements[_Placement].ConnectedBy;
	
	return -1;
}

// Get the connected by clip of the selected placement
Integer GetConnectedByClip(CMacroblockModel _MacroblockModel) {
	if (_MacroblockModel == Null) return -1;
	
	declare Integer LibPlacement_PlacementSelected for _MacroblockModel;
	declare K_LibPlacement[] Placements for _MacroblockModel;
	if (Placements.existskey(LibPlacement_PlacementSelected))
		return Placements[LibPlacement_PlacementSelected].ConnectedBy;

	return -1;
}

// Get the connected to clips available for the given macroblock
Integer[] GetConnectedToClips(CMacroblockModel _MacroblockModel) {
	declare Integer[] ConnectedTo;
	if (_MacroblockModel == Null) return ConnectedTo;
	
	declare K_LibPlacement[] Placements for _MacroblockModel;
	// With new structure, it's not really fast to get all of the individual elements of the struct table.
	// It's usually better to directly loop on the Placements table in the concerned scripts
	foreach(Placement in Placements){
		ConnectedTo.add(Placement.ConnectedTo);
	}
	
	return ConnectedTo;
}

// Get the connected to clip of the given placement
Integer GetConnectedToClip(CMacroblockModel _MacroblockModel, Integer _Placement) {
	if (_MacroblockModel == Null) return -1;
	
	declare K_LibPlacement[] Placements for _MacroblockModel;
	if (Placements.existskey(_Placement)) 
		return Placements[_Placement].ConnectedTo;

	return -1;
}

// Get the connected to clip of the selected placement
Integer GetConnectedToClip(CMacroblockModel _MacroblockModel) {
	if (_MacroblockModel == Null) return -1;
	
	declare Integer LibPlacement_PlacementSelected for _MacroblockModel;
	declare K_LibPlacement[] Placements for _MacroblockModel;
	if (Placements.existskey(LibPlacement_PlacementSelected)) 
		return Placements[LibPlacement_PlacementSelected].ConnectedTo;

	return -1;
}

// Get the number of possible placements for a given macroblock model
Integer Count(CMacroblockModel _MacroblockModel) {
	if (_MacroblockModel == Null) return 0;
	
	declare K_LibPlacement[] Placements for _MacroblockModel;
	return Placements.count;
}

// Check if the given placement exists on the macroblock model
Boolean Exists(CMacroblockModel _MacroblockModel, Integer _Placement) {
	if (_MacroblockModel == Null) return False;
	
	declare K_LibPlacement[] Placements for _MacroblockModel;
	return Placements.existskey(_Placement);
}

// Check if the given direction exists on the macroblock model
Boolean Exists(CMacroblockModel _MacroblockModel, CMapEditorPlugin::CardinalDirections _Dir) {
	if (_MacroblockModel == Null) return False;
	
	declare K_LibPlacement[] Placements for _MacroblockModel;
	foreach(Placement in Placements){
		if(Placement.Dir == _Dir) return True;
	}
	
	return False;
}

// Check if the selected placement exists on the macroblock model
Boolean Exists(CMacroblockModel _MacroblockModel) {
	if (_MacroblockModel == Null) return False;
	
	declare Integer LibPlacement_PlacementSelected for _MacroblockModel;
	declare K_LibPlacement[] Placements for _MacroblockModel;
	return Placements.existskey(LibPlacement_PlacementSelected);
}

// Clear the placements of a given macroblock model
Void Clear(CMacroblockModel _MacroblockModel) {
	if (_MacroblockModel == Null) return;
	
	declare Integer LibPlacement_PlacementSelected for _MacroblockModel;
	LibPlacement_PlacementSelected = -1;
	declare K_LibPlacement[] Placements for _MacroblockModel;
	if (Placements.count > 0)
		Placements.clear();
}

Void Unload() {}

Void Load() {
	Unload();
}