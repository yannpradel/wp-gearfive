/** 
 * Style selection UI
 */

#Const Version		"2022-09-16"
#Const ScriptName	"StyleSelection.Script.txt"

#Include "Libs/Nadeo/ModeLibs/Legacy/Manialink3.Script.txt" as Manialink
#Include "Libs/Nadeo/TMConsole/Buttons.Script.txt" as Buttons2
#Include "Libs/Nadeo/TMConsole/MLEffects.Script.txt" as MLE
#Include "Libs/Nadeo/TMConsole/MapEditor/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as Colors
#Include "Libs/Nadeo/TMConsole/MapEditor/UI/Stylesheet.Script.txt" as Styles

// Constants
#Const C_MaxStyles	5
#Const C_MinStyles	4
/// Events
#Const C_Event_StyleHover	"LibStyleSelection_StyleHover"
#Const C_Event_StyleClick	"LibStyleSelection_StyleClick"
#Const C_Event_StyleNext	"LibStyleSelection_StyleNext"
#Const C_Event_StylePrev	"LibStyleSelection_StylePrev"
#Const C_Event_StyleSelectLandscape	"LibStyleSelection_StylePrevSelectLandscape"

Text Private_GetStyleSelection() {
	declare Styles = "";
	declare StylesSizeX = Styles::GetHeaderSize2();
	declare StyleSizeX = StylesSizeX / C_MaxStyles;
	declare ButtonSize = 2.;
	declare FullHeaderSizeX = StylesSizeX + (2 * ButtonSize);
	for (I, 0, C_MaxStyles-1) {
		declare PosX = I * Styles::GetSize2(<StyleSizeX, 0.>, Styles::CircleSize_Bottom()).X;
		Styles ^= """<frameinstance pos="{{{PosX}}} 0" modelid="Framemodel_Style" class="{{{MLE::ML_Class()}}}" {{{MLE::Data_Group()}}}="S{{{I}}}" />""";
	}
	
	declare MinStyles = "";
	declare MinStyleSizeX = StylesSizeX / C_MinStyles;
	for (I, 0, C_MinStyles-1) {
		declare PosX = I * Styles::GetSize2(<MinStyleSizeX, 0.>, Styles::CircleSize_Bottom()).X;
		MinStyles ^= """<frameinstance pos="{{{PosX}}} 0" modelid="Framemodel_MinStyle" class="{{{MLE::ML_Class()}}}" {{{MLE::Data_Group()}}}="MS{{{I}}}" />""";
	}
	
	
	declare PrevStyle = Buttons2::Editor_PrevCategory();
	declare NextStyle = Buttons2::Editor_NextCategory();
	
	declare OptionSize = 8.;
	declare SmallButtonSize = 0.95;
	declare ButtonSelect = Buttons2::Editor_Valid();
	declare ButtonCancel = Buttons2::Editor_RemoveBlock();
	declare ButtonCamera = Buttons2::Editor_CameraMove();
	
	return """
<manialink version="3" name="MapEditor:Style-selection">
<stylesheet>
	{{{Styles::Get()}}}
</stylesheet>
<framemodel id="Framemodel_Style">
	{{{Styles::BuildLine(<0., 0., 0.>, <StyleSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::C_Color_DarkBlue, False, False, ["scriptevents" => "1", MLE::Data_Effects() => """T1:{{{MLE::Effect_QuadHover2()}}}""", MLE::Data_Triggers() => "T1", "class" => MLE::ML_Class(), "id" => "Quad_Style", "opacity" => "0.6"])}}}
	{{{Styles::BuildLabel(<StyleSizeX*0.5, -0.55, 2.>, <StyleSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), ["class" => "tm2020-text-button", "id" => "Label_Style"])}}}
</framemodel>
<framemodel id="Framemodel_MinStyle">
	{{{Styles::BuildLine(<0., 0., 0.>, <MinStyleSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::C_Color_DarkBlue, False, False, ["scriptevents" => "1", MLE::Data_Effects() => """T1:{{{MLE::Effect_QuadHover2()}}}""", MLE::Data_Triggers() => "T1", "class" => MLE::ML_Class(), "id" => "Quad_Style", "opacity" => "0.6"])}}}
	{{{Styles::BuildLabel(<MinStyleSizeX*0.5, -0.55, 2.>, <MinStyleSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), ["class" => "tm2020-text-button", "id" => "Label_Style"])}}}
</framemodel>
<frame z-index="1" id="Frame_Global">
	<frame pos="0 -90" hidden="1" id="Frame_StyleSelection">
		<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<-FullHeaderSizeX*0.5, 0., 0.>, Styles::CircleSize_Bottom()))}}}>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<ButtonSize, 0., 1.>, Styles::CircleSize_Bottom()))}}} id="Frame_Styles">
				{{{Styles}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<ButtonSize, 0., 1.>, Styles::CircleSize_Bottom()))}}} id="Frame_MinStyles">
				{{{MinStyles}}}
			</frame>
			<frame z-index="2">
				{{{Styles::BuildQuad(<0., 0., 0.>, <ButtonSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Colors::C_Color_DarkBlue, "opacity" => "0.8", MLE::Data_Effects() => """A1:{{{MLE::Effect_QuadHover()}}}""", MLE::Data_Triggers() => "A1", "class" => MLE::ML_Class(), "scriptevents" => "1", "id" => "Quad_PrevStyle"])}}}
				{{{Styles::BuildButton(PrevStyle, <ButtonSize*0.5, -0.5, 1.>, <ButtonSize-0.2, (ButtonSize*0.5)-0.2>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), [])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<ButtonSize+StylesSizeX, 0., 3.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildQuad(<0., 0., 0.>, <ButtonSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Colors::C_Color_DarkBlue, "opacity" => "0.8", MLE::Data_Effects() => """A2:{{{MLE::Effect_QuadHover()}}}""", MLE::Data_Triggers() => "A2", "class" => MLE::ML_Class(), "scriptevents" => "1", "id" => "Quad_NextStyle"])}}}
				{{{Styles::BuildButton(NextStyle, <ButtonSize*0.5, -0.5, 1.>, <ButtonSize-0.2, (ButtonSize*0.5)-0.2>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), [])}}}
			</frame>
		</frame>
		<frame id="Frame_Buttons" pos="0 -5">
			//L16N [MapEditor] Choose in a list of prefabricated decorations
			{{{Styles::BuildSmartQuad(Styles::GetPosition2(<FullHeaderSizeX*0.5, -0.65, 0.>, Styles::CircleSize_Bottom()), 5., 0., _("|Infinitive|Select landscape"), "", "", ButtonSelect, True, "tm2020-text-button", Colors::C_Color_DarkBlue, "SmartQuad_Select")}}}
			
			//L16N [MapEditor] Show the player how to move their camera
			{{{Styles::BuildSmartQuad(Styles::GetPosition2(<FullHeaderSizeX*0.5 - (OptionSize) - 0.1, -0.65, 0.>, Styles::CircleSize_Bottom()), 5., 0., _("|Move camera|Camera"), "", "", ButtonCamera, True, "tm2020-text-button", Colors::C_Color_DarkBlue, "SmartQuad_Camera")}}}
			
			//L16N [MapEditor] Cancel an action
			{{{Styles::BuildSmartQuad(Styles::GetPosition2(<FullHeaderSizeX*0.5 - (OptionSize) - 0.1, -0.65, 0.>, Styles::CircleSize_Bottom()), 5., 0., _("|Infinitive|Cancel"), "", "", ButtonCancel, True, "tm2020-text-button", Colors::C_Color_DarkBlue, "SmartQuad_Cancel")}}}
		</frame>
	</frame>
</frame>
<script><!--
#Include "ColorLib" as CL
#Include "Libs/Nadeo/TMConsole/MapEditor/UI/Stylesheet.Script.txt" as Styles
{{{Manialink::DefaultIncludes()}}}
{{{MLE::ML_Includes()}}}
#Const C_ClickTick 100
#Const C_InitTick 500

declare CMlFrame G_FrameStyles;

{{{Manialink::Animations(["EaseOutQuad"])}}}
{{{Buttons2::ML_Functions()}}}
{{{MLE::ML_Functions()}}}

Void SetStyles(Text[] _Styles, Text[] _StylesDisabled) {
	if (_Styles.count > 0) {
		foreach (Key => Control in G_FrameStyles.Controls) {
			declare Frame_Style <=> (Control as CMlFrame);
			declare Label_Style <=> (Frame_Style.GetFirstChild("Label_Style") as CMlLabel);
			declare Control_Style <=> (Frame_Style.GetFirstChild("Quad_Style"));
			declare Quad_Style <=> (Control_Style as CMlQuad);
			declare Disabled for Frame_Style = False;
			declare Selected for Frame_Style = False;
			declare SelectStyle for Quad_Style = "";
			SelectStyle = "";
			
			if (_Styles.existskey(Key)) {
				SelectStyle = _Styles[Key];
				Disabled = _StylesDisabled.exists(SelectStyle);
				LibMLEffects_EnableTriggers(Control_Style, !Disabled);
				if (Disabled) {
					Label_Style.Opacity = 0.4;
					Label_Style.TextColor = CL::Hex6ToRgb("808080");
				}	else if (Selected) {
					Label_Style.Opacity = 1.;
					Label_Style.TextColor = CL::Hex6ToRgb("{{{Colors::C_Color_GreenOne}}}");
				} else {
					Label_Style.Opacity = 0.6;
					Label_Style.TextColor = CL::Hex6ToRgb("{{{Colors::C_Color_White}}}");
				}
				Label_Style.Value = SelectStyle;
				Label_Style.Visible = True;
			} else {
				Label_Style.Visible = False;
			}
		}
		
		G_FrameStyles.Visible = True;
	} else {
		G_FrameStyles.Visible = False;
	}
}

Void SelectStyle(Text _Style) {
	declare Side = 0;
	foreach (Key => Control in G_FrameStyles.Controls) {
		declare Frame_Style <=> (Control as CMlFrame);
		declare Label_Style <=> (Frame_Style.GetFirstChild("Label_Style") as CMlLabel);
		declare Quad_Style <=> (Frame_Style.GetFirstChild("Quad_Style") as CMlQuad);
		declare Disabled for Frame_Style = False;
		declare Selected for Frame_Style = False;
		
		if (Side == 0 && Selected) {
			Side = 1;
		} else if (Side == 0 && Label_Style.Value == _Style) {
			Side = -1;
		}
		
		declare LibMLEffects__OriginalOpacity for Quad_Style = -1.;
		
		if (Label_Style.Value == _Style) {
			Selected = True;
			LibManialink_Anim(Quad_Style, {{{Manialink::Inject("""<quad opacity="1." />""")}}}, 250, "EaseOutQuad");
			LibManialink_Anim(Label_Style, {{{Manialink::Inject("""<label opacity="1." textcolor="{{{Colors::C_Color_GreenOne}}}"/>""")}}}, 250, "EaseOutQuad");
			LibMLEffects__OriginalOpacity = 1.;
		} else {
			Selected = False;
			LibManialink_Anim(Quad_Style, {{{Manialink::Inject("""<quad opacity=".6" />""")}}}, 250, "EaseOutQuad");
			LibManialink_Anim(Label_Style, {{{Manialink::Inject("""<label opacity=".6" textcolor="{{{Colors::C_Color_White}}}"/>""")}}}, 250, "EaseOutQuad");
			LibMLEffects__OriginalOpacity = 0.6;
		}
	}
}

Void SetVisibility(Boolean _Visible) {
	if (_Visible) {
		declare L_PositionY for Page = 0.;
		LibManialink_Anim("<frame pos=\"0 "^L_PositionY^"\" hidden=\"0\" id=\"Frame_StyleSelection\" />", 250, "EaseOutQuad");
	} else {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 -90" hidden="1" id="Frame_StyleSelection" />""")}}}, 250, "EaseOutQuad");
	}
}

Void SetupButtons() {
	declare Frame_Buttons <=> (Page.GetFirstChild("Frame_Buttons") as CMlFrame);
	declare SmartQuad_Select <=> (Frame_Buttons.GetFirstChild("SmartQuad_Select") as CMlFrame);
	declare SmartQuad_Camera <=> (Frame_Buttons.GetFirstChild("SmartQuad_Camera") as CMlFrame);
	declare SmartQuad_Cancel <=> (Frame_Buttons.GetFirstChild("SmartQuad_Cancel") as CMlFrame);
	
	Styles::SetupAndAlignButtonsRightToLeft([SmartQuad_Select, SmartQuad_Camera, SmartQuad_Cancel], 0., 100.);
}

main() {
	declare Frame_StylesMax <=> (Page.GetFirstChild("Frame_Styles") as CMlFrame);
	declare Frame_StylesMin <=> (Page.GetFirstChild("Frame_MinStyles") as CMlFrame);
	G_FrameStyles <=> Frame_StylesMax;
	
	declare Frame_Buttons <=> (Page.GetFirstChild("Frame_Buttons") as CMlFrame);
	declare SmartQuad_Select <=> (Frame_Buttons.GetFirstChild("SmartQuad_Select") as CMlFrame);
	declare SmartQuad_Camera <=> (Frame_Buttons.GetFirstChild("SmartQuad_Camera") as CMlFrame);
	declare SmartQuad_Cancel <=> (Frame_Buttons.GetFirstChild("SmartQuad_Cancel") as CMlFrame);
	
	declare L_StylesUpdate for Page = -1;
	declare L_Styles for Page = Text[];
	declare L_StylesDisabled for Page = Text[];
	declare L_StylesSelectedUpdate for Page = -1;
	declare L_StylesSelected for Page = "";
	declare L_Visibility for Page = False;
	declare L_PositionY for Page = 0.;
	declare L_StylesNb for Page = {{{C_MaxStyles}}};
	
	declare L_Visibility_Button_Select for Page = False;
	declare L_Visibility_Button_Camera for Page = False;
	declare L_Visibility_Button_Cancel for Page = False;
	
	declare ClickPage = 0;
	declare NextClickUpdate = -1;
	
	declare PrevStylesUpdate = -1;
	declare PrevStylesSelectedUpdate = -1;
	declare PrevVisibility = False;
	declare PrevPositionY = -1.;
	declare PrevStylesNb = -1;
	
	declare PrevVisibility_Button_Select = False;
	declare PrevVisibility_Button_Camera = False;
	declare PrevVisibility_Button_Cancel = False;
	
	LibButtons_Init();
	LibMLEffects_Init();
	SetupButtons();
	
	SmartQuad_Select.Visible = L_Visibility_Button_Select;
	SmartQuad_Camera.Visible = L_Visibility_Button_Camera;
	SmartQuad_Cancel.Visible = L_Visibility_Button_Cancel;
	
	while (True) {
		yield;
		
		LibManialink_AnimLoop();
		LibButtons_Loop();
		LibMLEffects_Loop();
		
		if (PrevStylesNb != L_StylesNb) {
			PrevStylesNb = L_StylesNb;
			
			if (L_StylesNb >= {{{C_MaxStyles}}}) {
				G_FrameStyles <=> Frame_StylesMax;
				Frame_StylesMin.Visible = False;
			} else if (L_StylesNb <= {{{C_MinStyles}}}) {
				G_FrameStyles <=> Frame_StylesMin;
				Frame_StylesMax.Visible = False;
			} else {
				G_FrameStyles <=> Frame_StylesMax;
				Frame_StylesMin.Visible = False;
			}
			
			SetStyles(L_Styles, L_StylesDisabled);
			SelectStyle(L_StylesSelected);
		}
		
		if (PrevStylesUpdate != L_StylesUpdate) {
			PrevStylesUpdate = L_StylesUpdate;
			SetStyles(L_Styles, L_StylesDisabled);
		}
		
		if (PrevStylesSelectedUpdate != L_StylesSelectedUpdate) {
			PrevStylesSelectedUpdate = L_StylesSelectedUpdate;
			SelectStyle(L_StylesSelected);
		}
		
		if (PrevVisibility != L_Visibility || PrevPositionY != L_PositionY) {
			PrevVisibility = L_Visibility;
			PrevPositionY = L_PositionY;
			SetVisibility(L_Visibility);
			if (L_Visibility) SelectStyle(L_StylesSelected);
		}
		
		if (PrevVisibility_Button_Select != L_Visibility_Button_Select) {
			PrevVisibility_Button_Select = L_Visibility_Button_Select;
			SmartQuad_Select.Visible = L_Visibility_Button_Select;
			SetupButtons();
		}
		
		if (PrevVisibility_Button_Camera != L_Visibility_Button_Camera) {
			PrevVisibility_Button_Camera = L_Visibility_Button_Camera;
			SmartQuad_Camera.Visible = L_Visibility_Button_Camera;
			SetupButtons();
		}

		if (PrevVisibility_Button_Cancel != L_Visibility_Button_Cancel) {
			PrevVisibility_Button_Cancel = L_Visibility_Button_Cancel;
			SmartQuad_Cancel.Visible = L_Visibility_Button_Cancel;
			SetupButtons();
		}


		if (ClickPage != 0) {
			if (!MouseLeftButton) {
				ClickPage = 0;
				NextClickUpdate = -1;
			}
			
			if (NextClickUpdate > 0 && Now >= NextClickUpdate) {
				if (ClickPage > 0) {
					SendCustomEvent("{{{C_Event_StyleNext}}}", Text[]);
					NextClickUpdate = Now + C_ClickTick;
				} else if (ClickPage < 0) {
					SendCustomEvent("{{{C_Event_StylePrev}}}", Text[]);
					NextClickUpdate = Now + C_ClickTick;
				}
			}
		}
		
		foreach (Event in PendingEvents) {
			if (Event.Type == CMlScriptEvent::Type::MouseClick) {
				if (Event.Control != Null && Event.ControlId == "Quad_Style") {
					declare SelectStyle for Event.Control = "";
					SendCustomEvent("{{{C_Event_StyleClick}}}", [SelectStyle]);
				} else if (Event.ControlId == "Button_PrevStyle") {
					SendCustomEvent("{{{C_Event_StylePrev}}}", [""]);
					ClickPage = -1;
					NextClickUpdate = Now + C_InitTick;
				} else if (Event.ControlId == "Quad_NextStyle") {
					SendCustomEvent("{{{C_Event_StyleNext}}}", [""]);
					ClickPage = 1;
					NextClickUpdate = Now + C_InitTick;
				} else if (Event.ControlId == "Quad_SmartQuad" && Event.Control.Parent.ControlId == "SmartQuad_Select") {
					SendCustomEvent("{{{C_Event_StyleSelectLandscape}}}", [""]);
				}
			}
		}
	}
}
--></script>
</manialink>
""";
}

// Set the number of styles visible in the UI
Void Private_SetStylesNb(Integer _Nb) {
	declare Page <=> Layers::Get("StyleSelection").LocalPage;
	declare L_StylesNb for Page = C_MaxStyles;
	
	if (L_StylesNb == _Nb) return;
	
	if (_Nb <= C_MinStyles) L_StylesNb = C_MinStyles;
	else if (_Nb >= C_MaxStyles) L_StylesNb = C_MaxStyles;
}

Text GetScriptVersion() { return Version; }
Text GetScriptName() { return ScriptName; }

/// Get the events constants
Text Event_StyleHover() { return C_Event_StyleHover; }
Text Event_StyleClick() { return C_Event_StyleClick; }
Text Event_StyleNext() { return C_Event_StyleNext; }
Text Event_StylePrev() { return C_Event_StylePrev; }
Text Event_StyleSelectLandscape() { return C_Event_StyleSelectLandscape; }

// Enable a style
Void Enable(Text _Style) {
	declare Page <=> Layers::Get("StyleSelection").LocalPage;
	declare L_StylesUpdate for Page = -1;
	declare Text[] L_StylesDisabled for Page;
	declare Removed = L_StylesDisabled.remove(_Style);
	L_StylesUpdate = Now;
}

// Disable a style 
Void Disable(Text _Style) {
	declare Page <=> Layers::Get("StyleSelection").LocalPage;
	declare L_StylesUpdate for Page = -1;
	declare Text[] L_StylesDisabled for Page;
	if (!L_StylesDisabled.exists(_Style)) L_StylesDisabled.add(_Style);
	L_StylesUpdate = Now;
}

// Check if a style is disabled
Boolean IsDisabled(Text _Style) {
	declare Page <=> Layers::Get("StyleSelection").LocalPage;
	declare Text[] L_StylesDisabled for Page;
	return L_StylesDisabled.exists(_Style);
}

Void ShowLandscapeButtons(Boolean _Select, Boolean _Camera, Boolean _Cancel) {
	declare Page <=> Layers::Get("StyleSelection").LocalPage;
	declare L_Visibility_Button_Select for Page = False;
	declare L_Visibility_Button_Camera for Page = False;
	declare L_Visibility_Button_Cancel for Page = False;
	L_Visibility_Button_Select = _Select;
	L_Visibility_Button_Camera = _Camera;
	L_Visibility_Button_Cancel = _Cancel;
}

// Set the styles
Void SetStyles(Text[] _Styles) {
	Private_SetStylesNb(_Styles.count);
	
	declare Page <=> Layers::Get("StyleSelection").LocalPage;
	declare L_StylesUpdate for Page = -1;
	declare Text[] L_Styles for Page;
	L_Styles = _Styles;
	L_StylesUpdate = Now;
}

// Select a style
Void SelectStyle(Text _Style) {
	declare Page <=> Layers::Get("StyleSelection").LocalPage;
	declare L_StylesSelectedUpdate for Page = -1;
	declare L_StylesSelected for Page = "";
	L_StylesSelected = _Style;
	L_StylesSelectedUpdate = Now;
}

// Set the position of the UI
Void SetPositionY(Real _PositionY) {
	declare Page <=> Layers::Get("StyleSelection").LocalPage;
	declare L_PositionY for Page = 0.;
	L_PositionY = _PositionY;
}

// Set the style selection visibility
Void SetVisibility(Boolean _Visible) {
	declare Page <=> Layers::Get("StyleSelection").LocalPage;
	declare L_Visibility for Page = False;
	L_Visibility = _Visible;
}

Void Show() {
	SetVisibility(True);
}

Void Hide() {
	SetVisibility(False);
}

Void Unload() {
	Layers::Destroy("StyleSelection");
}

Void Load() {
	Unload();
	
	declare LayerStyleSelection <=> Layers::Create("StyleSelection");
	LayerStyleSelection.ManialinkPage = Private_GetStyleSelection();
	
	declare Page <=> LayerStyleSelection.LocalPage;
	declare L_StylesUpdate for Page = -1;
	declare Text[] L_Styles for Page;
	declare Text[] L_StylesDisabled for Page;
	declare L_StylesSelectedUpdate for Page = -1;
	declare L_StylesSelected for Page = "";
	declare L_Visibility for Page = False;
	declare L_PositionY for Page = 0.;
	declare L_StylesNb for Page = C_MaxStyles;
	L_Styles.clear();
	L_StylesDisabled.clear();
	L_StylesSelected = "";
	L_StylesSelectedUpdate = -1;
	L_StylesUpdate = -1;
	L_Visibility = False;
	L_PositionY = Styles::GetSize2(<0., 9.>, Styles::CircleSize_Bottom()).Y - 90.;
	L_StylesNb = C_MaxStyles;
}