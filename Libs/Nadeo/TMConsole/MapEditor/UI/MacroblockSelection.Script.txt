/** 
 * Macroblock selection UI
 */

#Const Version		"2023-02-15"
#Const ScriptName	"MacroblockSelection.Script.txt"

#Include "Libs/Nadeo/ModeLibs/Legacy/Manialink3.Script.txt" as Manialink
#Include "Libs/Nadeo/TMConsole/Buttons.Script.txt" as Buttons2
#Include "Libs/Nadeo/TMConsole/MLEffects.Script.txt" as MLE
#Include "Libs/Nadeo/TMConsole/Volumes.Script.txt" as Volumes
#Include "Libs/Nadeo/TMConsole/MapEditor/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/TMConsole/MapEditor/ThemePack.Script.txt" as ThemePack
#Include "Libs/Nadeo/TMConsole/MapEditor/Sound.Script.txt" as Sound
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as Colors
#Include "Libs/Nadeo/TMConsole/MapEditor/UI/Stylesheet.Script.txt" as Styles

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_ImagesFolder "file://Media/Manialinks/Nadeo/TMConsole/MapEditor/Images/"	///< Path to the images
#Const C_SoundsPath "file://Media/Manialinks/Nadeo/TMConsole/MapEditor/Sounds/"		///< Path to the sounds
#Const C_SimpleMacroblocksNb	12									///< Number of macroblocks to display in the simple UI
#Const C_SimpleFamiliesNb		8									///< Number of families to display in the simple UI
#Const C_ExpertMacroblocksNb	8									///< Number of macroblocks to display in the expert UI
#Const C_SticksActivation		0.8									///< Threshold before stick activation
/// Modes
#Const C_Mode_Track			0	///< Track mode
#Const C_Mode_Terrain		1	///< Terrain mode
#Const C_Mode_Decoration	2	///< Decoration mode
/// Editor levels
#Const C_Editor_Beginner	0
#Const C_Editor_Advanced	1
#Const C_Editor_Expert		2
/// Events
#Const C_Event_MacroblockPagePrev	"LibMacroblockSelection_MacroblockPagePrev"
#Const C_Event_MacroblockPageNext	"LibMacroblockSelection_MacroblockPageNext"
#Const C_Event_MacroblockHover	"LibMacroblockSelection_MacroblockHover"
#Const C_Event_MacroblockClick	"LibMacroblockSelection_MacroblockClick"
#Const C_Event_MacroblockPrev	"LibMacroblockSelection_MacroblockPrev"
#Const C_Event_MacroblockNext	"LibMacroblockSelection_MacroblockNext"
#Const C_Event_FamilyClick		"LibMacroblockSelection_FamilyClick"
#Const C_Event_FamilyPrev		"LibMacroblockSelection_FamilyPrev"
#Const C_Event_FamilyNext		"LibMacroblockSelection_FamilyNext"
#Const C_Event_FilterPrev		"LibMacroblockSelection_FilterPrev"
#Const C_Event_FilterNext		"LibMacroblockSelection_FilterNext"

// Globales
declare Ident[][Text] G_FamiliesMacroblocks; ///< List of macroblocks ids and families
declare Integer[][Text] G_FamiliesPlacements; ///< List of placements and families
declare Boolean[][Text] G_FamiliesAvailabilities; ///< List of availabilities and families
declare Ident[] G_Macroblocks;		///<List of macroblocks
declare Integer[] G_Placements;		///< List of placements
declare Boolean[] G_Availabilities;	///< List of availability
declare Text[] G_Families;			///< List of families
declare Integer G_MacroblockUpdate;	///< Last macroblock update time
declare Integer G_FamilyUpdate;		///< Last family update time
declare Ident[Text] G_Macroblock;	///< Selected macroblock
declare Integer[Text] G_Placement;	///< Selected placement
declare Text G_Family;				///< Selected family
declare Integer[Text] G_MacroblocksStart; ///< Macroblocks range starting value
declare Boolean G_UseRosace;		///< Using the rosaces to select a macroblock

// Functions

Text Private_GetMacroblockSelectionML() {
	declare Macroblocks = "";
	declare MacroblocksSizeX = Styles::GetHeaderSize2();
	declare MacroblockSizeX = MacroblocksSizeX / C_SimpleMacroblocksNb;
	declare MacroblockSizeY = 4.;
	for (I, 0, C_SimpleMacroblocksNb+1) {
		declare PosX = (I - 1) * Styles::GetSize2(<MacroblockSizeX, 0.>, Styles::CircleSize_Bottom()).X;
		Macroblocks ^= """<frameinstance pos="{{{PosX}}} 0" modelid="Framemodel_Macroblock" z-index="1"/>""";
	}
	
	declare Families = "";
	declare FamiliesSizeX = Styles::GetHeaderSize2();
	declare FamilySizeX = FamiliesSizeX / C_SimpleFamiliesNb;
	for (I, 0, C_SimpleFamiliesNb-1) {
		declare PosX = I * Styles::GetSize2(<FamilySizeX, 0.>, Styles::CircleSize_Bottom()).X;
		Families ^= """<frameinstance pos="{{{PosX}}} 0" modelid="Framemodel_Family" class="{{{MLE::ML_Class()}}}" {{{MLE::Data_Group()}}}="F{{{I}}}" />""";
	}
	
	declare ButtonSize = 2.;
	declare FullHeaderSizeX = Styles::GetHeaderSize2() + 2.*ButtonSize;
	
	declare PrevMacroblock = Buttons2::Editor_PrevMacroblock();
	declare NextMacroblock = Buttons2::Editor_NextMacroblock();
	declare PrevFamily = Buttons2::Editor_PrevFamily();
	declare NextFamily = Buttons2::Editor_NextFamily();
	
	return """
<manialink version="3" name="MapEditor:Macroblock-selection">
<stylesheet>
	{{{Styles::Get()}}}
</stylesheet>
<framemodel id="Framemodel_Macroblock">
	{{{Styles::BuildQuad(<0., 0., 0.>, <MacroblockSizeX, MacroblockSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Colors::C_Color_DarkBlue, "scriptevents" => "1", "id" => "Quad_Select", "opacity" => "0."])}}}
	
	{{{Styles::BuildQuad(<MacroblockSizeX*0.5, -MacroblockSizeY*0.5, 1.>, <MacroblockSizeX-0.5, MacroblockSizeY-0.5>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["id" => "Quad_Macroblock"])}}}
	
	{{{Styles::BuildQuad(<0., -MacroblockSizeY, 2.>, <MacroblockSizeX, MacroblockSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftBottom(), ["class" => "tm2020-background-text", "id" => "Quad_LegendBackground"])}}}
	
	{{{Styles::BuildLabel(<MacroblockSizeX, -MacroblockSizeY, 5.>, <MacroblockSizeX, MacroblockSizeY>, Styles::CircleSize_Bottom(), Styles::Align_RightBottom(), ["class" => "tm2020-text-legend", "id" => "Label_Macroblock"])}}}
	
	<frame z-index="3" id="Frame_NotAvailable">
		{{{Styles::BuildQuad(<0., 0., 0.>, <MacroblockSizeX, MacroblockSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["class" => "turbo2-macroblock-disabled"])}}}
	</frame>
</framemodel>
<framemodel id="Framemodel_Family">
	{{{Styles::BuildLine(<0., 0., 0.>, <FamilySizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::C_Color_DarkBlue, False, False, ["scriptevents" => "1", MLE::Data_Effects() => """T1:{{{MLE::Effect_QuadHover2()}}}""", MLE::Data_Triggers() => "T1", "class" => MLE::ML_Class(), "id" => "Quad_Family", "opacity" => "0.6"])}}}
	{{{Styles::BuildLabel(<FamilySizeX*0.5, -0.55, 2.>, <FamilySizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), ["class" => "tm2020-text-button", "id" => "Label_Family"])}}}
</framemodel>
<frame z-index="0" id="Frame_Global">
	{{{Styles::BuildLabel(<0., 100., 0.>, <MacroblockSizeX, MacroblockSizeY>, Styles::CircleSize_Bottom(), Styles::Align_RightBottom(), ["class" => "tm2020-text-legend", "id" => "Label_LinesNumber"])}}}
	<frame pos="0 -90" z-index="0" hidden="1" id="Frame_FamilySelection">
		<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<-FullHeaderSizeX*0.5, 0., 0.>, Styles::CircleSize_Bottom()))}}}>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<ButtonSize, 0., 1.>, Styles::CircleSize_Bottom()))}}} id="Frame_Families">
				{{{Families}}}
			</frame>
			<frame z-index="2">
				{{{Styles::BuildQuad(<0., 0., 0.>, <ButtonSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Colors::C_Color_DarkBlue, "opacity" => "0.8", MLE::Data_Effects() => """A1:{{{MLE::Effect_QuadHover()}}}""", MLE::Data_Triggers() => "A1", "class" => MLE::ML_Class(), "scriptevents" => "1", "id" => "Quad_PrevFamily"])}}}
				{{{Styles::BuildButton(PrevFamily, <ButtonSize*0.5, -0.5, 1.>, <ButtonSize-0.4, (ButtonSize*0.6)-0.4>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), [])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<ButtonSize+MacroblocksSizeX, 0., 3.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildQuad(<0., 0., 0.>, <ButtonSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Colors::C_Color_DarkBlue, "opacity" => "0.8", MLE::Data_Effects() => """A2:{{{MLE::Effect_QuadHover()}}}""", MLE::Data_Triggers() => "A2", "class" => MLE::ML_Class(), "scriptevents" => "1", "id" => "Quad_NextFamily"])}}}
				{{{Styles::BuildButton(NextFamily, <ButtonSize*0.5, -0.5, 1.>, <ButtonSize-0.4, (ButtonSize*0.6)-0.4>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), [])}}}
			</frame>
		</frame>
	</frame>
	<frame pos="0 -90" z-index="1" hidden="1" id="Frame_MacroblockSelection">
		<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<-FullHeaderSizeX*0.5, 0., 0.>, Styles::CircleSize_Bottom()))}}}>
			{{{Styles::BuildQuad(<ButtonSize, 0., -1.>, <Styles::GetHeaderSize2(), MacroblockSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Colors::C_Color_DarkBlue, "opacity" => "0.6"])}}}
			
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<ButtonSize, 0., 1.>, Styles::CircleSize_Bottom()))}}} {{{Styles::BuildSize2(Styles::GetSize2(<MacroblocksSizeX, MacroblockSizeY>, Styles::CircleSize_Bottom()))}}}>
				<frame z-index="0" id="Frame_Macroblocks">
					
					{{{Macroblocks}}}
					<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<ButtonSize, 0., -1.>, Styles::CircleSize_Bottom()))}}} id="Frame_Selector2">
						{{{Styles::BuildQuad(<MacroblockSizeX*0.02, -MacroblockSizeY*0.02, 0.>, <MacroblockSizeX*0.96, MacroblockSizeY*0.96>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Colors::C_Color_DarkBlue])}}}
					</frame>
				</frame>
			</frame>
			<frame z-index="3">
				{{{Styles::BuildQuad(<0., 0., 0.>, <ButtonSize, MacroblockSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Colors::C_Color_DarkBlue, "opacity" => "0.8", MLE::Data_Effects() => """A3:{{{MLE::Effect_QuadHover()}}}""", MLE::Data_Triggers() => "A3", "class" => MLE::ML_Class(), "scriptevents" => "1", "id" => "Quad_PrevMacroblock"])}}}
				{{{Styles::BuildButton(PrevMacroblock, <ButtonSize * 0.5, -MacroblockSizeY*0.5, 1.>, <ButtonSize-0.5, ButtonSize-0.5>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), [])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<ButtonSize+MacroblocksSizeX, 0., 4.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildQuad(<0., 0., 0.>, <ButtonSize, MacroblockSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Colors::C_Color_DarkBlue, "opacity" => "0.8", MLE::Data_Effects() => """A4:{{{MLE::Effect_QuadHover()}}}""", MLE::Data_Triggers() => "A4", "class" => MLE::ML_Class(), "scriptevents" => "1", "id" => "Quad_NextMacroblock"])}}}
				{{{Styles::BuildButton(NextMacroblock, <ButtonSize*0.5, -MacroblockSizeY*0.5, 1.>, <ButtonSize-0.5, ButtonSize-0.5>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), [])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<ButtonSize, 0., 5.>, Styles::CircleSize_Bottom()))}}}>
				<frame z-index="2" id="Frame_Selector">
					{{{Styles::BuildQuad(<MacroblockSizeX*0.49, -MacroblockSizeY*0.5, 1.>, <MacroblockSizeX, MacroblockSizeY>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["class" => "tm2020-selector", "colorize" => Colors::C_Color_White])}}}
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
{{{Manialink::DefaultIncludes()}}}
{{{MLE::ML_Includes()}}}
#Const C_ClickTick	100
#Const C_InitTick	500

declare Real G_MacroblocksPosY;
declare Real G_FamiliesPosY;
declare Integer[Text] G_LinesNumber;

{{{Manialink::Animations(["EaseOutQuad"])}}}
{{{Buttons2::ML_Functions()}}}
{{{MLE::ML_Functions()}}}

Integer GetLinesNumber(Text _Value) {
	if (G_LinesNumber.existskey(_Value)) return G_LinesNumber[_Value];
	
	declare Label_LinesNumber <=> (Page.GetFirstChild("Label_LinesNumber") as CMlLabel);
	declare TranslatedValueSplit = TL::Split("|", TL::GetTranslatedText(_Value));
	declare ValueWithoutLegend = TranslatedValueSplit[TranslatedValueSplit.count-1];
	Label_LinesNumber.Value = ValueWithoutLegend;
	G_LinesNumber[_Value] = Label_LinesNumber.ValueLineCount;
	
	return Label_LinesNumber.ValueLineCount;
}

Void SetVisibility(Boolean _Visible, Boolean _VisibleFamily) {
	if (_Visible) {
		LibManialink_Anim("<frame pos=\"0 "^G_MacroblocksPosY^"\" hidden=\"0\" id=\"Frame_MacroblockSelection\" />", 250, "EaseOutQuad");
		if (_VisibleFamily) {
			LibManialink_Anim("<frame pos=\"0 "^G_FamiliesPosY^"\" hidden=\"0\" id=\"Frame_FamilySelection\" />", 250, "EaseOutQuad");
		} else {
			LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 -90" hidden="1" id="Frame_FamilySelection" />""")}}}, 250, "EaseOutQuad");
		}
	} else {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 -90" hidden="1" id="Frame_MacroblockSelection" />""")}}}, 250, "EaseOutQuad");
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 -90" hidden="1" id="Frame_FamilySelection" />""")}}}, 250, "EaseOutQuad");
	}
}

Void SetEditor(Integer _Editor) {
	if (_Editor == {{{C_Editor_Beginner}}}) {
		G_MacroblocksPosY = {{{Styles::Margin_Bottom()}}} + {{{Styles::GetSize2(<0., 4.>, Styles::CircleSize_Bottom()).Y}}};
		G_FamiliesPosY = -90.;
	} else if (_Editor == {{{C_Editor_Advanced}}}) {
		G_MacroblocksPosY = {{{Styles::Margin_Bottom()}}} + {{{Styles::GetSize2(<0., 4.>, Styles::CircleSize_Bottom()).Y}}};
		G_FamiliesPosY = {{{Styles::Margin_Bottom()}}} + {{{Styles::GetSize2(<0., 5.>, Styles::CircleSize_Bottom()).Y}}};
	} else {
		G_MacroblocksPosY = -90.;
		G_FamiliesPosY = -90.;
	}
	
	declare L_Visibility for Page = False;
	declare L_VisibilityFamily for Page = False;
	SetVisibility(L_Visibility, L_VisibilityFamily);
}

Void SelectFamily(Text _Family) {
	declare Boolean[Text] L_Families for Page;
	declare Frame_Families <=> (Page.GetFirstChild("Frame_Families") as CMlFrame);
	declare Side = 0;
	foreach (Key => Control in Frame_Families.Controls) {
		declare Frame_Family <=> (Control as CMlFrame);
		declare Quad_Family <=> (Frame_Family.GetFirstChild("Quad_Family") as CMlQuad);
		declare Label_Family <=> (Frame_Family.GetFirstChild("Label_Family") as CMlLabel);
		declare FamilyName for Frame_Family = "";
		declare FamilySelected for Frame_Family = False;
		declare FamilyDisabled for Frame_Family = False;
		
		if (Side == 0 && FamilySelected) {
			Side = 1;
		} else if (Side == 0 && FamilyName == _Family) {
			Side = -1;
		}
		
		declare LibMLEffects__OriginalOpacity for Quad_Family = -1.;
		
		if (FamilyName == _Family) {
			FamilySelected = True;
			declare Color for Quad_Family = -1;
			if (Color != 0) {
				LibManialink_Anim(Quad_Family, {{{Manialink::Inject("""<quad opacity="1."/>""")}}}, 250, "EaseOutQuad");
				LibManialink_Anim(Label_Family, {{{Manialink::Inject("""<label opacity="1." textcolor="{{{Colors::C_Color_GreenOne}}}"/>""")}}}, 250, "EaseOutQuad");
				LibMLEffects__OriginalOpacity = 1.;
				Color = 0;
			}
		} else {
			FamilySelected = False;
			declare Color for Quad_Family = -1;
			if (Color != 1) {
				LibManialink_Anim(Quad_Family, {{{Manialink::Inject("""<quad opacity=".6" />""")}}}, 250, "EaseOutQuad");
				
				if(FamilyDisabled)
					LibManialink_Anim(Label_Family, {{{Manialink::Inject("""<label opacity=".4" textcolor="808080"/>""")}}}, 250, "EaseOutQuad");
				else
					LibManialink_Anim(Label_Family, {{{Manialink::Inject("""<label opacity=".6" textcolor="{{{Colors::C_Color_White}}}"/>""")}}}, 250, "EaseOutQuad");
				LibMLEffects__OriginalOpacity = 0.6;
				Color = 1;
			}
		}
	}
}

Void SetFamilies(Boolean[Text] _Families) {
	declare Text[] Families ;
	declare Boolean[] HasMacroblocks;
	foreach (Family => HasOne in _Families) {
		Families.add(Family);
		HasMacroblocks.add(HasOne);
	}
	
	declare Frame_Families <=> (Page.GetFirstChild("Frame_Families") as CMlFrame);
	foreach (Key => Control in Frame_Families.Controls) {
		declare Frame_Family <=> (Control as CMlFrame);
		
		if (Families.existskey(Key)) {
			declare Family = Families[Key];
			declare Control_Family <=> (Frame_Family.GetFirstChild("Quad_Family"));
			declare Quad_Family <=> (Control_Family as CMlQuad);
			declare SelectFamily for Quad_Family = "";
			SelectFamily = Family;
			
			declare Label_Family <=> (Frame_Family.GetFirstChild("Label_Family") as CMlLabel);
			Label_Family.Value = Family;
			Frame_Family.Visible = True;
			
			declare FamilySelected for Frame_Family = False;
			declare FamilyDisabled for Frame_Family = False;
			FamilyDisabled = !HasMacroblocks[Key];
			
			LibMLEffects_EnableTriggers(Control_Family, !FamilyDisabled);
			
			if (FamilyDisabled) {
				Label_Family.Opacity = 0.4;
				Label_Family.TextColor = CL::Hex6ToRgb("808080");
			}	else if (FamilySelected) {
				Label_Family.Opacity = 1.;
				Label_Family.TextColor = CL::Hex6ToRgb("{{{Colors::C_Color_GreenOne}}}");
			} else {
				Label_Family.Opacity = 0.6;
				Label_Family.TextColor = CL::Hex6ToRgb("{{{Colors::C_Color_White}}}");
			}
			
			//if (HasMacroblocks[Key]) Label_Family.Opacity = 1.;
			//else Label_Family.Opacity = 0.5;
			
			declare FamilyName for Frame_Family = "";
			FamilyName = Family;
		} else {
			Frame_Family.Visible = False;
			
			declare FamilyName for Frame_Family = "";
			FamilyName = "";
		}
	}
	
	declare L_Family for Page = "";
	SelectFamily(L_Family);
}

Void SetMacroblocks(
	Ident[] _MacroblocksIds,
	Integer[] _MacroblocksKeys,
	Boolean[] _MacroblocksAvailabilities,
	Integer _Shift,
	Integer _Selected,
	Text[Ident] _MacroblocksNames,
	Boolean _VisibilityName,
	Integer[] _MacroblocksSelectKeys
) {
	declare Frame_Macroblocks <=> (Page.GetFirstChild("Frame_Macroblocks") as CMlFrame);
	
	foreach (Key => Control in Frame_Macroblocks.Controls) {
		declare Frame_Macroblock <=> (Control as CMlFrame);
		if(Control.ControlId == "Frame_Selector" || Control.ControlId == "Frame_Selector2") continue;
		if (_MacroblocksIds.existskey(Key)) {
			declare MacroblockModelId = _MacroblocksIds[Key];
			declare MacroblockKey = _MacroblocksKeys[Key];
			declare CMacroblockModel MacroblockModel;
			if (Editor.MacroblockModels.existskey(MacroblockModelId)) {
				MacroblockModel <=> Editor.MacroblockModels[MacroblockModelId];
			}
			if (MacroblockModel != Null) {
				declare Quad_Select <=> (Frame_Macroblock.GetFirstChild("Quad_Select") as CMlQuad);
				declare Quad_Macroblock <=> (Frame_Macroblock.GetFirstChild("Quad_Macroblock") as CMlQuad);
				declare Quad_LegendBackground <=> (Frame_Macroblock.GetFirstChild("Quad_LegendBackground") as CMlQuad);
				declare Label_Macroblock <=> (Frame_Macroblock.GetFirstChild("Label_Macroblock") as CMlLabel);
				declare Frame_NotAvailable <=> (Frame_Macroblock.GetFirstChild("Frame_NotAvailable") as CMlFrame);
				
				declare MacroblockAvailable for Quad_Select = False;
				declare MacroblockSelectKey for Quad_Select = -1;
				MacroblockSelectKey = _MacroblocksSelectKeys[Key];
				MacroblockAvailable = False;
				
				if (_MacroblocksNames.existskey(MacroblockModelId)) {
					Label_Macroblock.Value = _MacroblocksNames[MacroblockModelId];
					Label_Macroblock.Visible = True;
				} else if (_VisibilityName) {
					Label_Macroblock.Value = "#"^TL::FormatInteger(MacroblockKey+1, 2);
					Label_Macroblock.Visible = True;
				} else {
					Label_Macroblock.Value = "";
					Label_Macroblock.Visible = False;
				}
				Quad_Macroblock.Image = MacroblockModel.Icon;
				Frame_Macroblock.Visible = True;
				
				if (!_MacroblocksAvailabilities[Key]) {
					MacroblockAvailable = False;
					Frame_NotAvailable.Visible = True;
					Label_Macroblock.Value = "{{{
						//L16N [MapEditor] The block that the player is trying to place is blocked by an element of the terrain (cliff, hill, river, ...)
						_("Blocked by the terrain")
					}}}";
					Label_Macroblock.Visible = True;
					Quad_LegendBackground.Visible = False;
				} else {
					MacroblockAvailable = True;
					Frame_NotAvailable.Visible = False;
					
					if (Label_Macroblock.Value != "") {
						declare LinesNb = GetLinesNumber(Label_Macroblock.Value);
						if (LinesNb > 1) {
							Quad_LegendBackground.Size.Y = (LinesNb * 3.3) + 1.;
							Quad_LegendBackground.Visible = True;
						} else {
							Quad_LegendBackground.Visible = False;
						}
					} else {
						Quad_LegendBackground.Visible = False;
					}
				}
				
				if (_MacroblocksAvailabilities[Key]) {
					Frame_NotAvailable.Visible = False;
				} else {
					Frame_NotAvailable.Visible = True;
					Label_Macroblock.Value = "{{{
						//L16N [MapEditor] The block that the player is trying to place is blocked by an element of the terrain (cliff, hill, river, ...)
						_("Blocked by the terrain")
					}}}";
					Label_Macroblock.Visible = True;
				}
			} else {
				Frame_Macroblock.Visible = False;
			}
		} else {
			Frame_Macroblock.Visible = False;
		}
	}
	
	declare Frame_MacroblockSelection <=> (Page.GetFirstChild("Frame_MacroblockSelection") as CMlFrame);
	declare Frame_Selector <=> (Frame_MacroblockSelection.GetFirstChild("Frame_Selector") as CMlFrame);
	declare Frame_Selector2 <=> (Frame_MacroblockSelection.GetFirstChild("Frame_Selector2") as CMlFrame);
	if (_Selected >= 0) {
		declare CursorPosX = _Selected * {{{Styles::GetSize2(<MacroblockSizeX, 0.>, Styles::CircleSize_Bottom()).X}}};
		Frame_Selector.Visible = True;
		LibManialink_Anim(Frame_Selector, "<quad pos=\""^CursorPosX^" 0\" />", 250, "EaseOutQuad");
		Frame_Selector2.Visible = True;
		LibManialink_Anim(Frame_Selector2, "<quad pos=\""^CursorPosX^" 0\" />", 250, "EaseOutQuad");
	} else {
		Frame_Selector.Visible = False;
		Frame_Selector2.Visible = False;
	}
	
	if (_Shift < 0) {
		Frame_Macroblocks.RelativePosition_V3.X = {{{-Styles::GetSize2(<MacroblockSizeX, 0.>, Styles::CircleSize_Bottom()).X}}};
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 0" id="Frame_Macroblocks" />""")}}}, 250, "EaseOutQuad");
	} else if (_Shift > 0) {
		Frame_Macroblocks.RelativePosition_V3.X = {{{Styles::GetSize2(<MacroblockSizeX, 0.>, Styles::CircleSize_Bottom()).X}}};
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 0" id="Frame_Macroblocks" />""")}}}, 250, "EaseOutQuad");
	}
}

main() {
	declare L_Visibility for Page = False;
	declare L_VisibilityName for Page = False;
	declare L_VisibilityFamily for Page = False;
	declare L_FamiliesUpdate for Page = -1;
	declare L_Filter for Page = "";
	declare L_PrevFilter for Page = "";
	declare L_NextFilter for Page = "";
	declare Boolean[Text] L_Families for Page;
	declare L_Family for Page = "";
	declare L_MacroblocksUpdate for Page = -1;
	declare L_Macroblocks for Page = Ident[];
	declare L_MacroblocksKeys for Page = Integer[];
	declare L_MacroblocksAvailabilities for Page = Boolean[];
	declare L_MacroblocksShift for Page = 0;
	declare L_MacroblocksSelected for Page = -1;
	declare L_MacroblocksNames for Page = Text[Ident];
	declare Integer[] L_MacroblocksSelectKeys for Page;
	declare L_Editor for Page = {{{C_Editor_Beginner}}};
	
	declare ClickFamily = 0;
	declare ClickMacroblock = 0;
	declare NextClickUpdate = -1;
	
	declare PrevVisibility = False;
	declare PrevVisibilityName = False;
	declare PrevVisibilityFamily = False;
	declare PrevFamiliesUpdate = -1;
	declare PrevFamily = "";
	declare PrevMacroblocksUpdate = -1;
	declare PrevEditor = -1;
	
	SetEditor(L_Editor);
	LibButtons_Init();
	LibMLEffects_Init();
	
	while (True) {
		yield;
		
		LibManialink_AnimLoop();
		LibButtons_Loop();
		LibMLEffects_Loop();
		
		if (PrevVisibility != L_Visibility || PrevVisibilityFamily != L_VisibilityFamily) {
			PrevVisibility = L_Visibility;
			PrevVisibilityFamily = L_VisibilityFamily;
			SetVisibility(L_Visibility, L_VisibilityFamily);
		}
		
		if (PrevEditor != L_Editor) {
			PrevEditor = L_Editor;
			SetEditor(L_Editor);
		}
		
		if (PrevVisibilityName != L_VisibilityName) {
			PrevVisibilityName = L_VisibilityName;
			SetMacroblocks(L_Macroblocks, L_MacroblocksKeys, L_MacroblocksAvailabilities, L_MacroblocksShift, L_MacroblocksSelected, L_MacroblocksNames, L_VisibilityName, L_MacroblocksSelectKeys);
		}
		
		if (PrevFamiliesUpdate != L_FamiliesUpdate) {
			PrevFamiliesUpdate = L_FamiliesUpdate;
			SetFamilies(L_Families);
		}
		
		if (PrevFamily != L_Family) {
			PrevFamily = L_Family;
			SelectFamily(L_Family);
		}
		
		if (PrevMacroblocksUpdate != L_MacroblocksUpdate) {
			PrevMacroblocksUpdate = L_MacroblocksUpdate;
			SetMacroblocks(L_Macroblocks, L_MacroblocksKeys, L_MacroblocksAvailabilities, L_MacroblocksShift, L_MacroblocksSelected, L_MacroblocksNames, L_VisibilityName, L_MacroblocksSelectKeys);
		}
		
		if (ClickFamily != 0 || ClickMacroblock != 0) {
			if (!MouseLeftButton) {
				ClickFamily = 0;
				ClickMacroblock = 0;
				NextClickUpdate = -1;
			}
			
			if (NextClickUpdate > 0 && Now >= NextClickUpdate) {
				if (ClickFamily > 0) {
					SendCustomEvent("{{{C_Event_FamilyNext}}}", []);
					NextClickUpdate = Now + C_ClickTick;
				} else if (ClickFamily < 0) {
					SendCustomEvent("{{{C_Event_FamilyPrev}}}", []);
					NextClickUpdate = Now + C_ClickTick;
				}
				
				if (ClickMacroblock > 0) {
					SendCustomEvent("{{{C_Event_MacroblockNext}}}", []);
					NextClickUpdate = Now + C_ClickTick;
				} else if (ClickMacroblock < 0) {
					SendCustomEvent("{{{C_Event_MacroblockPrev}}}", []);
					NextClickUpdate = Now + C_ClickTick;
				}
			}
		}
		
		foreach (Event in PendingEvents) {
			if (Event.Type == CMlScriptEvent::Type::MouseOver) {
				if (Event.Control != Null && Event.ControlId == "Quad_Select") {
					declare MacroblockAvailable for Event.Control = False;
					if (MacroblockAvailable) {
						declare MacroblockSelectKey for Event.Control = -1;
						SendCustomEvent("{{{C_Event_MacroblockHover}}}", [TL::ToText(MacroblockSelectKey)]);
					}
				}
			} else if (Event.Type == CMlScriptEvent::Type::MouseClick) {
				if (Event.Control != Null && Event.ControlId == "Quad_Select") {
					declare MacroblockAvailable for Event.Control = False;
					if (MacroblockAvailable) {
						declare MacroblockSelectKey for Event.Control = -1;
						SendCustomEvent("{{{C_Event_MacroblockClick}}}", [TL::ToText(MacroblockSelectKey)]);
					}
				} else if (Event.Control != Null && Event.ControlId == "Quad_Family") {
					declare SelectFamily for Event.Control = "";
					SendCustomEvent("{{{C_Event_FamilyClick}}}", [SelectFamily]);
				} else if (Event.ControlId == "Quad_PrevFamily") {
					SendCustomEvent("{{{C_Event_FamilyPrev}}}", [""]);
					ClickFamily = -1;
					NextClickUpdate = Now + C_InitTick;
				} else if (Event.ControlId == "Quad_NextFamily") {
					SendCustomEvent("{{{C_Event_FamilyNext}}}", [""]);
					ClickFamily = 1;
					NextClickUpdate = Now + C_InitTick;
				} else if (Event.ControlId == "Quad_PrevMacroblock") {
					SendCustomEvent("{{{C_Event_MacroblockPrev}}}", [""]);
					NextClickUpdate = Now + C_InitTick;
					ClickMacroblock = -1;
				} else if (Event.ControlId == "Quad_NextMacroblock") {
					SendCustomEvent("{{{C_Event_MacroblockNext}}}", [""]);
					NextClickUpdate = Now + C_InitTick;
					ClickMacroblock = 1;
				}
			}
		}
	}
}
--></script>
</manialink>	
""";
}

// Get the rosace manialink
Text Private_GetRosaceML() {
	declare Rosace = "";
	declare RosaceSize = <110., 110.>;
	declare ItemsNb = C_ExpertMacroblocksNb;
	declare ItemSize = <RosaceSize.X / 2., RosaceSize.Y / 2.>;
	declare ItemAngle = 360. / ItemsNb;
	declare IconSize = 20.;
	declare LabelSize = 28.;
	
	for (I, 0, ItemsNb-1) {
		declare Rot = I * ItemAngle;
		Rosace ^= """
<frame rot="{{{Rot}}}">
	<quad z-index="0" size="{{{ItemSize.X}}} {{{ItemSize.Y}}}" halign="center" valign="bottom" opacity="0.3" colorize="000" image="{{{C_ImagesFolder}}}Menu/rosace-slice.dds" id="Quad_RosaceSlice" />
	<quad pos="0 {{{ItemSize.Y-IconSize+2.}}}" z-index="1" size="{{{IconSize}}} {{{IconSize}}}" rot="{{{-Rot}}}" class="center" id="Quad_RosaceIcon" />
	<label pos="0 {{{ItemSize.Y-17.}}}" z-index="2" size="{{{LabelSize}}} 10" rot="{{{-Rot}}}" halign="center" valign="center2" class="tm2020-text-rosace" id="Label_RosaceFamilyName" />
</frame>
""";
	}
	
	declare NextFamilyPage = Buttons2::Editor_RosaceNextFamily();
	declare PrevFamilyPage = Buttons2::Editor_RosacePrevFamily();
	declare NextMacroblockPage = Buttons2::Editor_RosaceNextMacroblock();
	declare PrevMacroblockPage = Buttons2::Editor_RosacePrevMacroblock();
	declare NextFilter = Buttons2::Editor_RosaceNextFilter();
	declare PrevFilter = Buttons2::Editor_RosacePrevFilter();
	
	declare LeftStick = Buttons2::Editor_RosaceLeft();
	declare RightStick = Buttons2::Editor_RosaceRight();	
	
	return """
<manialink version="3" name="MapEditor:Rosace">
<stylesheet>
	{{{Styles::Get()}}}
	<style class="center" halign="center" valign="center" />
</stylesheet>
<framemodel id="Framemodel_Rosace">
	<quad z-index="0" size="{{{RosaceSize.X}}} {{{RosaceSize.Y}}}" halign="center" valign="center" image="{{{C_ImagesFolder}}}Menu/rosace-full.dds" id="Quad_RosaceBackground" opacity="0.8"/>
	<quad z-index="-1" size="{{{RosaceSize.X}}} {{{RosaceSize.Y}}}" halign="center" valign="center" image="{{{C_ImagesFolder}}}Menu/rosace-full.dds" id="Quad_RosaceBackground2" opacity="0.8"/>
	<frame z-index="2" id="Frame_Items">
		{{{Rosace}}}
	</frame>
	<quad z-index="3" size="{{{RosaceSize.X+1.}}} {{{RosaceSize.Y+1.}}}" halign="center" valign="center" image="{{{C_ImagesFolder}}}Menu/rosace-cache.dds" colorize="000" />	
	{{{Buttons2::ML_Button("", ["z-index" => "4", "size" => """{{{RosaceSize.X*0.11}}} {{{RosaceSize.Y*0.11}}}""", "id" => "Quad_Stick"])}}}
	
	<frame pos="0 {{{-RosaceSize.Y*0.5-5.}}}" z-index="5" hidden="1" id="Frame_Pager_Left">
		{{{Styles::BuildSmartQuad(<-20., 0., 0.>, 6., 0., "", Styles::C_Img_TitleLeft, "", "", True, "tm2020-text-rosace-pager-side", Colors::C_Color_DarkBlue, "SmartQuad_Page_Prev_Left")}}}
		{{{Styles::BuildSmartQuad(<0., 0., 0.>, 6., 0., "", "", "", "", False, "tm2020-text-rosace-pager", Colors::C_Color_DarkBlue, "SmartQuad_Page_Left")}}}
		{{{Styles::BuildSmartQuad(<20., 0., 0.>, 6., 0., "", "", Styles::C_Img_TitleRight, "", True, "tm2020-text-rosace-pager-side", Colors::C_Color_DarkBlue, "SmartQuad_Page_Next_Left")}}}
	</frame>
	
	<frame pos="0 {{{-RosaceSize.Y*0.5-5.}}}" z-index="5" hidden="1" id="Frame_Pager_Right">
		{{{Styles::BuildSmartQuad(<-20., 0., 0.>, 6., 0., "", Styles::C_Img_TitleLeft, "", "", True, "tm2020-text-rosace-pager-side", Colors::C_Color_DarkBlue, "SmartQuad_Page_Prev_Right")}}}
		{{{Styles::BuildSmartQuad(<0., 0., 0.>, 6., 0., "", "", "", "", False, "tm2020-text-rosace-pager", Colors::C_Color_DarkBlue, "SmartQuad_Page_Right")}}}
		{{{Styles::BuildSmartQuad(<20., 0., 0.>, 6., 0., "", "", Styles::C_Img_TitleRight, "", True, "tm2020-text-rosace-pager-side", Colors::C_Color_DarkBlue, "SmartQuad_Page_Next_Right")}}}
	</frame>
	<frame z-index="6" id="Frame_Wheel">
		<quad size="{{{RosaceSize.X*0.11}}} {{{RosaceSize.Y*0.11}}}" halign="center" valign="center" image="{{{Buttons2::GetMouseWheelImage()}}}" />
	</frame>
	<quad z-index="7" size="{{{RosaceSize.X}}} {{{RosaceSize.Y}}}" class="center" scriptevents="1" id="Quad_Rosace" /><!--scriptevents="1"--> 
</framemodel>
<frame id="Frame_Global">
	<frame pos="0 -10" scale="0" hidden="1" id="Frame_Rosaces">
		<frameinstance pos="-92 0" modelid="Framemodel_Rosace" id="Frame_RosaceLeft" />
		<frameinstance pos="92 0" modelid="Framemodel_Rosace" id="Frame_RosaceRight" />
		<frame pos="-92 -68" id="Frame_Filters">
			{{{Styles::BuildSmartQuad(<-20., 0., 0.>, 6., 0., "", Styles::C_Img_TitleLeft, "", PrevFilter, True, "tm2020-text-rosace-pager-side", Colors::C_Color_DarkBlue, "SmartQuad_Filter_Prev")}}}
			{{{Styles::BuildSmartQuad(<0., 0., 0.>, 6., 0., "", "", "", "", False, "tm2020-text-rosace-pager", Colors::C_Color_DarkBlue, "SmartQuad_Filter")}}}
			{{{Styles::BuildSmartQuad(<20., 0., 0.>, 6., 0., "", "", Styles::C_Img_TitleRight, NextFilter, True, "tm2020-text-rosace-pager-side", Colors::C_Color_DarkBlue, "SmartQuad_Filter_Next")}}}
		</frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/TMConsole/MapEditor/UI/Stylesheet.Script.txt" as Styles
#Include "Libs/Nadeo/TMConsole/MapEditor/Inputs.Script.txt" as Inputs
{{{Manialink::DefaultIncludes()}}}
{{{MLE::ML_Includes()}}}

#Const C_StickLeft	0
#Const C_StickRight	1

declare CMlFrame G_Frame_Pager_Left;
declare CMlFrame G_Frame_Pager_Right;
declare CMlFrame G_Frame_Wheel_Left;
declare CMlFrame G_Frame_Wheel_Right;
declare CMlFrame[] G_Frames_RosaceLeftItem;
declare CMlFrame[] G_Frames_RosaceRightItem;

declare Text[] G_Families;
declare Text G_Family;
declare Ident[] G_Macroblocks;
declare Ident G_Macroblock;
declare Integer[] G_Placements;
declare Integer G_Placement;
declare Boolean[] G_Availabilities;
declare Boolean G_Availability;
declare Integer G_SelectionLeft;
declare Integer G_SelectionRight;
declare Boolean G_ForceSelection;
declare Integer G_PageLeft;
declare Integer[Text] G_PageRight;
declare CAudioSource G_SoundClick;
declare CAudioSource G_SoundRosaceScale;

{{{Manialink::Animations(["EaseOutQuad"])}}}
{{{Buttons2::ML_Functions()}}}
{{{MLE::ML_Functions()}}}

Void UpdateFamilies() {
	declare PageMax = (G_Families.count - 1) / {{{ItemsNb}}};
	if (G_PageLeft > PageMax) G_PageLeft = PageMax;
	else if (G_PageLeft < 0) G_PageLeft = 0;
	declare StartIndex = G_PageLeft * {{{ItemsNb}}};
	
	// Do not update visual if not visible
	declare L_RosaceVisible for Page = False;
	if (!L_RosaceVisible) return;
	
	declare L_RosaceAvailabilities for Page = Boolean[][Text];
	declare L_RosaceMode for Page = -1;
	
	foreach (Key => Frame_Item in G_Frames_RosaceLeftItem) {
		declare Quad_RosaceSlice <=> (Frame_Item.GetFirstChild("Quad_RosaceSlice") as CMlQuad);
		declare Quad_RosaceIcon <=> (Frame_Item.GetFirstChild("Quad_RosaceIcon") as CMlQuad);
		declare Label_RosaceFamilyName <=> (Frame_Item.GetFirstChild("Label_RosaceFamilyName") as CMlLabel);
		
		declare FamilyKey = StartIndex + Key;
		if (G_Families.existskey(FamilyKey)) {
			declare Family = G_Families[FamilyKey];
			
			Quad_RosaceSlice.Colorize = CL::Hex6ToRgb("{{{Colors::C_Color_DarkBlue}}}");
			if (Key == G_SelectionLeft) {
				Quad_RosaceSlice.Opacity = 0.8;
				Label_RosaceFamilyName.TextColor = CL::Hex6ToRgb("{{{Colors::C_Color_GreenOne}}}");
			}
			else {
				Quad_RosaceSlice.Opacity = 0.;
				Label_RosaceFamilyName.TextColor = CL::Hex6ToRgb("{{{Colors::C_Color_White}}}");
			}
			
			/*if (L_RosaceMode == {{{C_Mode_Track}}}) {
				Quad_RosaceIcon.ImageUrl = "{{{C_ImagesFolder}}}Family/"^Family^".dds";
				Quad_RosaceIcon.Opacity = 1.;
				Quad_RosaceIcon.Visible = True;
				Label_RosaceFamilyName.Visible = False;
			} else {*/
				Label_RosaceFamilyName.Opacity = 1.;
				Label_RosaceFamilyName.Value = Family;
				Label_RosaceFamilyName.Visible = True;
				Quad_RosaceIcon.Visible = False;
			//}
			
			if (L_RosaceAvailabilities.existskey(Family)) {
				if (L_RosaceAvailabilities[Family].count <= 0) {
					Label_RosaceFamilyName.Opacity = 0.4;
					Label_RosaceFamilyName.TextColor = CL::Hex6ToRgb("{{{Colors::C_Color_White}}}");
				} else {
					Label_RosaceFamilyName.Opacity = 1.;
				}
			}
		} else {
			Quad_RosaceIcon.ImageUrl = "";
			Quad_RosaceSlice.Opacity = 0.;
			Label_RosaceFamilyName.Value = "";
		}
	}
}

Void AlignSmartQuads(CMlFrame _ButtonLeft, CMlFrame _LabelCenter, CMlFrame _ButtonRight, Real _Margin) {
		declare Length_Center = Styles::GetSmartQuadTotalLength(_LabelCenter);
		declare SideLabelPos = (Length_Center * 0.5) + _Margin;
		
		_ButtonLeft.RelativePosition_V3.X = -SideLabelPos;
		_ButtonRight.RelativePosition_V3.X = SideLabelPos;
}

Void SetButtonsAroundLabel(CMlFrame _ButtonLeft, CMlFrame _ButtonRight, CMlLabel _Label) {
	// Expects buttons and Label to be centered horizontally
	
	declare LabelWidth = _Label.ComputeWidth(_Label.Value);
	declare LabelCenteredPos = _Label.RelativePosition_V3.X;
	declare Margin = 8.;
	declare Distance = (LabelWidth + Margin) / 2.;
	
	_ButtonLeft.RelativePosition_V3.X 	= LabelCenteredPos - Distance;
	_ButtonRight.RelativePosition_V3.X 	= LabelCenteredPos + Distance;
}

Void UpdateMacroblocks() {
	declare PageMax = (G_Macroblocks.count - 1) / {{{ItemsNb}}};
	if (G_PageRight[G_Family] > PageMax) G_PageRight[G_Family] = PageMax;
	else if (G_PageRight[G_Family] < 0) G_PageRight[G_Family] = 0;
	declare StartIndex = G_PageRight[G_Family] * {{{ItemsNb}}};
	
	// Do not update visual if not visible
	declare L_RosaceVisible for Page = False;
	if (!L_RosaceVisible) return;
	
	declare L_RosaceMode for Page = -1;
	
	foreach (Key => Frame_Item in G_Frames_RosaceRightItem) {
		declare Quad_RosaceIcon <=> (Frame_Item.GetFirstChild("Quad_RosaceIcon") as CMlQuad);
		declare Quad_RosaceSlice <=> (Frame_Item.GetFirstChild("Quad_RosaceSlice") as CMlQuad);
		
		declare MacroblockKey = StartIndex + Key;
		if (G_Macroblocks.existskey(MacroblockKey)) {
			declare MacroblockModelId = G_Macroblocks[MacroblockKey];
			//declare Available = G_Availabilities[MacroblockKey];
			declare CMacroblockModel MacroblockModel;
			if (Editor.MacroblockModels.existskey(MacroblockModelId)) {
				MacroblockModel <=> Editor.MacroblockModels[MacroblockModelId];
			}
			
			if (MacroblockModel != Null) {
				Quad_RosaceIcon.Image = MacroblockModel.Icon;
				Quad_RosaceSlice.Colorize = CL::Hex6ToRgb("818081");
				if (Key == G_SelectionRight) Quad_RosaceSlice.Opacity = 0.8;
				else Quad_RosaceSlice.Opacity = 0.;
			} else {
				Quad_RosaceIcon.Image = Null;
				Quad_RosaceSlice.Opacity = 0.;
			}
		} else {
			Quad_RosaceIcon.Image = Null;
			Quad_RosaceSlice.Opacity = 0.;
		}
	}
	
	declare L_Filter for Page = "";
	declare L_PrevFilter for Page = "";
	declare L_NextFilter for Page = "";
	declare Frame_Rosaces <=> (Page.GetFirstChild("Frame_Rosaces") as CMlFrame);
	
	declare SmartQuad_Filter <=> (Frame_Rosaces.GetFirstChild("SmartQuad_Filter") as CMlFrame);
	declare SmartQuad_Filter_Prev <=> (Frame_Rosaces.GetFirstChild("SmartQuad_Filter_Prev") as CMlFrame);
	declare SmartQuad_Filter_Next <=> (Frame_Rosaces.GetFirstChild("SmartQuad_Filter_Next") as CMlFrame);
	declare Label_Filter <=> (SmartQuad_Filter.GetFirstChild("Label_SmartQuad") as CMlLabel);
	declare Quad_Filter <=> (SmartQuad_Filter.GetFirstChild("Quad_SmartQuad") as CMlQuad);
	declare Label_Filter_Prev <=> (SmartQuad_Filter_Prev.GetFirstChild("Label_SmartQuad") as CMlLabel);
	declare Label_Filter_Next <=> (SmartQuad_Filter_Next.GetFirstChild("Label_SmartQuad") as CMlLabel);
	
	Label_Filter.Value = L_Filter;
	Label_Filter_Prev.Value = L_PrevFilter;
	Label_Filter_Next.Value = L_NextFilter;
	
	Styles::SetupSmartQuad(SmartQuad_Filter, CMlControl::AlignHorizontal::HCenter, 22., 35.);
	Styles::SetupSmartQuad(SmartQuad_Filter_Prev, CMlControl::AlignHorizontal::Right, 20., 35.);
	Styles::SetupSmartQuad(SmartQuad_Filter_Next, CMlControl::AlignHorizontal::Left, 20., 35.);
	
	if (L_Filter == "") {
		SmartQuad_Filter.Visible = False;
		SmartQuad_Filter_Prev.Visible = False;
		SmartQuad_Filter_Next.Visible = False;
	} else {
		SmartQuad_Filter.Visible = True;
		SmartQuad_Filter_Prev.Visible = True;
		SmartQuad_Filter_Next.Visible = True;
		Quad_Filter.Opacity = 0.8;
		
		AlignSmartQuads(SmartQuad_Filter_Prev, SmartQuad_Filter, SmartQuad_Filter_Next, 0.8);
	}
	
	if (PageMax > 0) {
		G_Frame_Pager_Right.Visible = True;
		
		declare SmartQuad_Page_Right <=> (G_Frame_Pager_Right.GetFirstChild("SmartQuad_Page_Right") as CMlFrame);
		declare SmartQuad_Page_Prev_Right <=> (G_Frame_Pager_Right.GetFirstChild("SmartQuad_Page_Prev_Right") as CMlFrame);
		declare SmartQuad_Page_Next_Right <=> (G_Frame_Pager_Right.GetFirstChild("SmartQuad_Page_Next_Right") as CMlFrame);
		
		declare Label_Page <=> (SmartQuad_Page_Right.GetFirstChild("Label_SmartQuad") as CMlLabel);
		Label_Page.Value = (G_PageRight[G_Family] + 1)^"/"^(PageMax + 1);
		
		declare Quad_Page <=> (SmartQuad_Page_Right.GetFirstChild("Quad_SmartQuad") as CMlQuad);
		declare Quad_Page_Left <=> (SmartQuad_Page_Prev_Right.GetFirstChild("Quad_SmartQuad") as CMlQuad);
		declare Quad_Page_Left_Image <=> (SmartQuad_Page_Prev_Right.GetFirstChild("ImageLeft_SmartQuad") as CMlQuad);
		declare Quad_Page_Right <=> (SmartQuad_Page_Next_Right.GetFirstChild("Quad_SmartQuad") as CMlQuad);
		declare Quad_Page_Right_Image <=> (SmartQuad_Page_Next_Right.GetFirstChild("ImageRight_SmartQuad") as CMlQuad);
		Quad_Page.Opacity = 0.8;
		Quad_Page_Left.Opacity = 0.8;
		Quad_Page_Right.Opacity = 0.8;
		Quad_Page_Left_Image.Opacity = 0.8;
		Quad_Page_Right_Image.Opacity = 0.8;
		
		Styles::SetupSmartQuad(SmartQuad_Page_Right, CMlControl::AlignHorizontal::HCenter, 0., 30.);
		Styles::SetupSmartQuad(SmartQuad_Page_Prev_Right, CMlControl::AlignHorizontal::Right, 0., 3.);
		Styles::SetupSmartQuad(SmartQuad_Page_Next_Right, CMlControl::AlignHorizontal::Left, 0., 3.);

		AlignSmartQuads(SmartQuad_Page_Prev_Right, SmartQuad_Page_Right, SmartQuad_Page_Next_Right, 0.4);
	} else {
		G_Frame_Pager_Right.Visible = False;
	}
}

Void Select(Integer _Side, Integer _Item, Boolean _PlaySound) {
	declare Item = _Item;
	declare FamilyKey = _Item;
	declare MacroblockKey = _Item;
	if (_Side == C_StickLeft) {
		FamilyKey = (G_PageLeft * {{{ItemsNb}}}) + Item;
		if (!G_Families.existskey(FamilyKey)) {
			declare Max = (G_Families.count % {{{ItemsNb}}}) - 1;
			if (Max > {{{ItemsNb-1}}}) Max = {{{ItemsNb-1}}};
			if ({{{ItemsNb-1}}} - Item < Item - Max) Item = 0;
			else Item = Max;
			FamilyKey = (G_PageLeft * {{{ItemsNb}}}) + Item;
		} else {
			declare Ident[][Text] L_RosaceMacroblocks for Page;
			declare Family = G_Families[FamilyKey];
			if (L_RosaceMacroblocks.existskey(Family) && L_RosaceMacroblocks[Family].count <= 0) {
				declare PrevFamily = "";
				declare PrevFamilyKey = -1;
				declare SelectedFamilyKey = -1;
				declare NextFamily = "";
				declare NextFamilyKey = -1;
				declare Count = 0;
				
				Item = -1;
				FamilyKey = -1;
				
				foreach (RosaceFamily => RosaceMacroblocks in L_RosaceMacroblocks) {
					if (RosaceFamily == Family) {
						SelectedFamilyKey = Count;
						Count += 1;
					} else if (RosaceMacroblocks.count > 0) {
						if (SelectedFamilyKey < 0) {
							PrevFamily = RosaceFamily;
							PrevFamilyKey = Count;
						} else if (NextFamilyKey < 0) {
							NextFamily = RosaceFamily;
							NextFamilyKey = Count;
							break;
						}
						Count += 1;
					} else {
						Count += 1;
					}
				}
				
				if (PrevFamilyKey >= 0 && NextFamilyKey >= 0) {
					if (SelectedFamilyKey - PrevFamilyKey >= NextFamilyKey - SelectedFamilyKey) {
						if (G_Families.keyof(NextFamily) >= 0) FamilyKey = G_Families.keyof(NextFamily);
					} else {
						if (G_Families.keyof(PrevFamily) >= 0) FamilyKey = G_Families.keyof(PrevFamily);
					}
				} else if (PrevFamilyKey >= 0) {
					if (G_Families.keyof(PrevFamily) >= 0) FamilyKey = G_Families.keyof(PrevFamily);
				} else if (NextFamilyKey >= 0) {
					if (G_Families.keyof(NextFamily) >= 0) FamilyKey = G_Families.keyof(NextFamily);
				}
				Item = FamilyKey;
			}
		}
	} else if (_Side == C_StickRight) {
		MacroblockKey = (G_PageRight[G_Family] * {{{ItemsNb}}}) + Item;
		if (!G_Macroblocks.existskey(MacroblockKey)) {
			declare Max = (G_Macroblocks.count % {{{ItemsNb}}}) - 1;
			if (Max > {{{ItemsNb-1}}}) Max = {{{ItemsNb-1}}};
			if ({{{ItemsNb-1}}} - Item < Item - Max) Item = 0;
			else Item = Max;
			MacroblockKey = (G_PageRight[G_Family] * {{{ItemsNb}}}) + Item;
		}
	}
	
	if (!G_ForceSelection) {
		if (
			(_Side == C_StickLeft && G_SelectionLeft == Item) ||
			(_Side == C_StickRight && G_SelectionRight == Item)
		) {
			return;
		}
	}
	
	if (_PlaySound) {
		G_SoundClick.Stop();
		G_SoundClick.Play();
	}
	
	G_ForceSelection = False;
	
	declare CMlFrame Frame_NewItem;
	declare CMlFrame Frame_OldItem;
	
	if (_Side == C_StickLeft) {
		if (G_Frames_RosaceLeftItem.existskey(G_SelectionLeft)) Frame_OldItem <=> G_Frames_RosaceLeftItem[G_SelectionLeft];
		if (G_Frames_RosaceLeftItem.existskey(Item)) Frame_NewItem <=> G_Frames_RosaceLeftItem[Item];
		G_SelectionLeft = Item;
		
		declare Ident[][Text] L_RosaceMacroblocks for Page;
		declare Integer[][Text] L_RosacePlacements for Page;
		declare Boolean[][Text] L_RosaceAvailabilities for Page;
		declare L_RosaceFamilyUpdate for Page = -1;
		declare L_RosaceFamily for Page = "";
		
		G_Macroblocks.clear();
		G_Placements.clear();
		G_Availabilities.clear();
		G_Macroblock = NullId;
		G_Placement = -1;
		G_Availability = False;
		
		if (G_Families.existskey(FamilyKey)) {
			G_Family = G_Families[FamilyKey];
			if (L_RosaceMacroblocks.existskey(G_Family)) {
				G_Macroblocks = L_RosaceMacroblocks[G_Family];
				G_Placements = L_RosacePlacements[G_Family];
				G_Availabilities = L_RosaceAvailabilities[G_Family];
			}
			
			G_ForceSelection = True;
			Select(C_StickRight, G_SelectionRight, _PlaySound);
			
			L_RosaceFamily = G_Family;
			L_RosaceFamilyUpdate = Now;
		}
		
		UpdateFamilies();
		UpdateMacroblocks();
	} else if (_Side == C_StickRight) {
		if (G_Frames_RosaceRightItem.existskey(G_SelectionRight)) Frame_OldItem <=> G_Frames_RosaceRightItem[G_SelectionRight];
		if (G_Frames_RosaceRightItem.existskey(Item)) Frame_NewItem <=> G_Frames_RosaceRightItem[Item];
		G_SelectionRight = Item;
		
		declare L_RosaceMacroblockUpdate for Page = -1;
		declare L_RosaceMacroblock for Page = NullId;
		declare L_RosacePlacement for Page = -1;
		
		if (G_Macroblocks.existskey(MacroblockKey)) {
			G_Macroblock = G_Macroblocks[MacroblockKey];
			G_Placement = G_Placements[MacroblockKey];
			G_Availability = G_Availabilities[MacroblockKey];
		} else if (G_Macroblocks.count > 0) {
			G_Macroblock = G_Macroblocks[0];
			G_Placement = G_Placements[0];
			G_Availability = G_Availabilities[0];
		} else {
			G_Macroblock = NullId;
			G_Placement = -1;
			G_Availability = False;
		}
		
		L_RosaceMacroblock = G_Macroblock;
		L_RosacePlacement = G_Placement;
		L_RosaceMacroblockUpdate = Now;
		
		UpdateMacroblocks();
	}
	
	/*if (Frame_OldItem != Null) {
		LibManialink_AnimStop(Frame_OldItem);
		LibManialink_Anim(Frame_OldItem, {{{Manialink::Inject("""<frame scale="1." />""")}}}, 250, "EaseOutQuad");
	}
	
	if (Frame_NewItem != Null) {
		LibManialink_AnimStop(Frame_NewItem);
		LibManialink_Anim(Frame_NewItem, {{{Manialink::Inject("""<frame scale="1.1" />""")}}}, 250, "EaseOutQuad");
	}*/
}

Void NextPage(Integer _Side) {
	/*if (_Side == C_StickLeft) {
		G_PageLeft += 1;
		declare PageMax = (G_Families.count - 1) / {{{ItemsNb}}};
		if (G_PageLeft > PageMax || G_PageLeft < 0) G_PageLeft = 0;
		G_ForceSelection = True;
		Select(C_StickLeft, G_SelectionLeft, True);
		UpdateFamilies();
	} else*/ if (_Side == C_StickRight) {
		G_PageRight[G_Family] += 1;
		declare PageMax = (G_Macroblocks.count - 1) / {{{ItemsNb}}};
		if (G_PageRight[G_Family] > PageMax || G_PageRight[G_Family] < 0) G_PageRight[G_Family] = 0;
		G_ForceSelection = True;
		Select(C_StickRight, G_SelectionRight, True);
		UpdateMacroblocks();
	}
}

Void PrevPage(Integer _Side) {
	/*if (_Side == C_StickLeft) {
		G_PageLeft -= 1;
		declare PageMax = (G_Families.count - 1) / {{{ItemsNb}}};
		if (G_PageLeft > PageMax || G_PageLeft < 0) G_PageLeft = PageMax;
		G_ForceSelection = True;
		Select(C_StickLeft, G_SelectionLeft, True);
		UpdateFamilies();
	} else*/ if (_Side == C_StickRight) {
		G_PageRight[G_Family] -= 1;
		declare PageMax = (G_Macroblocks.count - 1) / {{{ItemsNb}}};
		if (G_PageRight[G_Family] > PageMax || G_PageRight[G_Family] < 0) G_PageRight[G_Family] = PageMax;
		G_ForceSelection = True;
		Select(C_StickRight, G_SelectionRight, True);
		UpdateMacroblocks();
	}
}

Void SelectAngle(Integer _Side, Real _Angle, Boolean _PlaySound) {
	declare Selection = ML::FloorInteger((ML::NearestInteger(180 + _Angle + {{{ItemAngle/2.}}}) % 360) / {{{ItemAngle}}});
	Select(_Side, Selection, _PlaySound);
}

Void MoveSelector(Integer _Stick, Vec2 _Position) {
	// It worked in Turbo, but does not work in Maniaplanet
	//declare Angle = ML::OrientedAngle(<0., 0., -1.>, <_Position.X, 0., _Position.Y>) * (180. / ML::PI());
	// Fix
	declare Down = <0., -1.>;
	declare Angle = ML::Atan2(_Position.X, _Position.Y) - ML::Atan2(Down.X, Down.Y);
	if (Angle > ML::PI()) {
		Angle -= 2 * ML::PI();
	} else if (Angle < -ML::PI()) {
		Angle += 2 * ML::PI();
	}
	Angle *= 180. / ML::PI();
	
	SelectAngle(_Stick, Angle, True);
}

Void SetContent(Ident[][Text] _Macroblocks, Integer[][Text] _Placements, Boolean[][Text] _Availabilities) {
	G_Families.clear();
	G_Macroblocks.clear();
	G_Placements.clear();
	G_Availabilities.clear();
	if (G_Family != "" && !_Macroblocks.existskey(G_Family)) {
		G_Family = "";
	}
	
	foreach (Family => AvailableMacroblocks in _Macroblocks) {
		if (G_Family == "") G_Family = Family;
		if (!G_PageRight.existskey(Family)) G_PageRight[Family] = 0;
		
		if (Family == G_Family) {
			G_Macroblocks = AvailableMacroblocks;
			G_Placements = _Placements[Family];
			G_Availabilities = _Availabilities[Family];
		}
		
		G_Families.add(Family);
	}
	
	if (G_Macroblocks.existskey(G_SelectionRight)) {
		G_Macroblock = G_Macroblocks[G_SelectionRight];
		G_Placement = G_Placements[G_SelectionRight];
		G_Availability = G_Availabilities[G_SelectionRight];
	} else if (G_Macroblocks.count > 0) {
		G_Macroblock = G_Macroblocks[0];
		G_Placement = G_Placements[0];
		G_Availability = G_Availabilities[0];
	} else {
		G_Macroblock = NullId;
		G_Placement = -1;
		G_Availability = False;
	}
	
	UpdateFamilies();
	
	G_ForceSelection = True;
	Select(C_StickLeft, G_Families.keyof(G_Family), False);
	Select(C_StickRight, G_Macroblocks.keyof(G_Macroblock), False);
}

Void SetMode(Integer _Mode) {
	declare Frame_Rosaces <=> (Page.GetFirstChild("Frame_Rosaces") as CMlFrame);
	declare Frame_RosaceLeft <=> (Frame_Rosaces.GetFirstChild("Frame_RosaceLeft") as CMlFrame);
	
	if (_Mode == {{{C_Mode_Track}}} || _Mode == {{{C_Mode_Decoration}}}) {
		G_Frame_Pager_Left.Visible = True;
	} else {
		G_Frame_Pager_Left.Visible = False;
	}
	
	UpdateFamilies();
	UpdateMacroblocks();
}

Void ForceSelection(Integer _Family, Integer _Macroblock) {
	declare LeftAngle = (_Family % {{{ItemsNb}}}) * {{{ItemAngle}}} - 180.;
	G_PageLeft = _Family / {{{ItemsNb}}};
	G_ForceSelection = True;
	SelectAngle(C_StickLeft, LeftAngle, False);
	UpdateFamilies();
	
	declare RightAngle = (_Macroblock % {{{ItemsNb}}}) * {{{ItemAngle}}} - 180.;
	G_PageRight[G_Family] = _Macroblock / {{{ItemsNb}}};
	G_ForceSelection = True;
	SelectAngle(C_StickRight, RightAngle, False);
	UpdateMacroblocks();
}

Void SetStyle(Text _Name, Integer _PageCurrent, Integer _PageMax) {
	
	declare SmartQuad_Page_Left <=> (G_Frame_Pager_Left.GetFirstChild("SmartQuad_Page_Left") as CMlFrame);
	declare SmartQuad_Page_Prev_Left <=> (G_Frame_Pager_Left.GetFirstChild("SmartQuad_Page_Prev_Left") as CMlFrame);
	declare SmartQuad_Page_Next_Left <=> (G_Frame_Pager_Left.GetFirstChild("SmartQuad_Page_Next_Left") as CMlFrame);
	
	declare Label_Page <=> (SmartQuad_Page_Left.GetFirstChild("Label_SmartQuad") as CMlLabel);
	Label_Page.Value = TL::GetTranslatedText(_Name);
	Label_Page.Value ^= " "^_PageCurrent^"/"^_PageMax;
	
	declare Quad_Page <=> (SmartQuad_Page_Left.GetFirstChild("Quad_SmartQuad") as CMlQuad);
	declare Quad_Page_Left <=> (SmartQuad_Page_Prev_Left.GetFirstChild("Quad_SmartQuad") as CMlQuad);
	declare Quad_Page_Right <=> (SmartQuad_Page_Next_Left.GetFirstChild("Quad_SmartQuad") as CMlQuad);
	declare Quad_Page_Left_Image <=> (SmartQuad_Page_Prev_Left.GetFirstChild("ImageLeft_SmartQuad") as CMlQuad);
	declare Quad_Page_Right_Image <=> (SmartQuad_Page_Next_Left.GetFirstChild("ImageRight_SmartQuad") as CMlQuad);
	Quad_Page.Opacity = 0.8;
	Quad_Page_Left.Opacity = 0.8;
	Quad_Page_Right.Opacity = 0.8;
	Quad_Page_Left_Image.Opacity = 0.8;
	Quad_Page_Right_Image.Opacity = 0.8;
	
	declare Frame_Rosaces <=> (Page.GetFirstChild("Frame_Rosaces") as CMlFrame);
	declare Frame_RosaceLeft <=> (Frame_Rosaces.GetFirstChild("Frame_RosaceLeft") as CMlFrame);
	declare Frame_RosaceRight <=> (Frame_Rosaces.GetFirstChild("Frame_RosaceRight") as CMlFrame);
	declare Quad_RosaceBackgroundLeft <=> (Frame_RosaceLeft.GetFirstChild("Quad_RosaceBackground") as CMlQuad);
	declare Quad_RosaceBackground2Left <=> (Frame_RosaceLeft.GetFirstChild("Quad_RosaceBackground2") as CMlQuad);
	Quad_RosaceBackgroundLeft.Colorize = CL::Hex6ToRgb("818081");
	Quad_RosaceBackground2Left.Visible = False;
	
	declare Quad_RosaceBackgroundRight <=> (Frame_RosaceRight.GetFirstChild("Quad_RosaceBackground") as CMlQuad);
	declare Quad_RosaceBackground2Right <=> (Frame_RosaceRight.GetFirstChild("Quad_RosaceBackground2") as CMlQuad);
	Quad_RosaceBackgroundRight.Colorize = CL::Hex6ToRgb("{{{Colors::C_Color_DarkBlue}}}");
	Quad_RosaceBackgroundRight.Opacity = 0.4;
	Quad_RosaceBackground2Right.Colorize = CL::Hex6ToRgb("818081");
	Quad_RosaceBackground2Right.Opacity = 0.6;
	
	Styles::SetupSmartQuad(SmartQuad_Page_Left, CMlControl::AlignHorizontal::HCenter, 50., 90.);
	Styles::SetupSmartQuad(SmartQuad_Page_Prev_Left, CMlControl::AlignHorizontal::Right, 0., 3.);
	Styles::SetupSmartQuad(SmartQuad_Page_Next_Left, CMlControl::AlignHorizontal::Left, 0., 3.);
	AlignSmartQuads(SmartQuad_Page_Prev_Left, SmartQuad_Page_Left, SmartQuad_Page_Next_Left, 0.4);
}

main() {
	LibButtons_Init();
	LibMLEffects_Init();
	
	declare Frame_Rosaces <=> (Page.GetFirstChild("Frame_Rosaces") as CMlFrame);
	declare Frame_Global <=> (Page.GetFirstChild("Frame_Global") as CMlFrame);
	declare Frame_RosaceLeft <=> (Frame_Rosaces.GetFirstChild("Frame_RosaceLeft") as CMlFrame);
	declare Frame_RosaceRight <=> (Frame_Rosaces.GetFirstChild("Frame_RosaceRight") as CMlFrame);
	declare Frame_Filters <=> (Frame_Global.GetFirstChild("Frame_Filters") as CMlFrame);
	declare Frame_Modes <=> (Frame_Global.GetFirstChild("Frame_Modes") as CMlFrame);
	declare Quad_RosaceLeft <=> (Frame_RosaceLeft.GetFirstChild("Quad_Rosace") as CMlQuad);
	declare Quad_RosaceRight <=> (Frame_RosaceRight.GetFirstChild("Quad_Rosace") as CMlQuad);
	
	declare SmartQuad_Page_Prev_Left 	<=> (Frame_RosaceLeft.GetFirstChild("SmartQuad_Page_Prev_Left") as CMlFrame);
	declare SmartQuad_Page_Next_Left 	<=> (Frame_RosaceLeft.GetFirstChild("SmartQuad_Page_Next_Left") as CMlFrame);
	declare Frame_Button_Prev_Left 		<=> (SmartQuad_Page_Prev_Left.GetFirstChild("Button_SmartQuad") as CMlFrame);
	declare Frame_Button_Next_Left 		<=> (SmartQuad_Page_Next_Left.GetFirstChild("Button_SmartQuad") as CMlFrame);
	
	declare SmartQuad_Page_Prev_Right <=> (Frame_RosaceRight.GetFirstChild("SmartQuad_Page_Prev_Right") as CMlFrame);
	declare SmartQuad_Page_Next_Right <=> (Frame_RosaceRight.GetFirstChild("SmartQuad_Page_Next_Right") as CMlFrame);
	declare Frame_Button_Prev_Right 	<=> (SmartQuad_Page_Prev_Right.GetFirstChild("Button_SmartQuad") as CMlFrame);
	declare Frame_Button_Next_Right 	<=> (SmartQuad_Page_Next_Right.GetFirstChild("Button_SmartQuad") as CMlFrame);	
	
	// Note: Frame_Pager is duplicated for Left & Right, otherwise the MLE::Hover effects would activate both at once
	// Frame_Pager_Right is hidden for the Left frame and vice versa. Changes in one frame should /probably/ be in both
	G_Frame_Pager_Left <=> (Frame_RosaceLeft.GetFirstChild("Frame_Pager_Left") as CMlFrame);
	G_Frame_Pager_Right <=> (Frame_RosaceRight.GetFirstChild("Frame_Pager_Right") as CMlFrame);
	G_Frame_Wheel_Left <=> (Frame_RosaceLeft.GetFirstChild("Frame_Wheel") as CMlFrame);
	G_Frame_Wheel_Right <=> (Frame_RosaceRight.GetFirstChild("Frame_Wheel") as CMlFrame);
	
	declare Frame_Pager_ToHide_Left <=> (Frame_RosaceLeft.GetFirstChild("Frame_Pager_Right") as CMlFrame);
	declare Frame_Pager_ToHide_Right <=> (Frame_RosaceRight.GetFirstChild("Frame_Pager_Left") as CMlFrame);
	
	Frame_Pager_ToHide_Left.Visible = False;
	Frame_Pager_ToHide_Right.Visible = False;
	
	Quad_RosaceLeft.Visible = False;
	Quad_RosaceRight.Visible = False;
	
	LibButtons_SetAction(Frame_Button_Prev_Left, "{{{PrevFamilyPage}}}");
	LibButtons_SetAction(Frame_Button_Next_Left, "{{{NextFamilyPage}}}");
	LibButtons_SetAction(Frame_Button_Next_Right, "{{{NextMacroblockPage}}}");
	LibButtons_SetAction(Frame_Button_Prev_Right, "{{{PrevMacroblockPage}}}");
	
	for (I, 0, 1) {
		declare CMlFrame Frame_Rosace;
		if (I == C_StickLeft) Frame_Rosace <=> Frame_RosaceLeft;
		else Frame_Rosace <=> Frame_RosaceRight;
		
		declare Frame_Items <=> (Frame_Rosace.GetFirstChild("Frame_Items") as CMlFrame);
		foreach (Control in Frame_Items.Controls) {
			if (I == C_StickLeft) G_Frames_RosaceLeftItem.add((Control as CMlFrame));
			else G_Frames_RosaceRightItem.add((Control as CMlFrame));
		}
		
		declare Quad_Stick <=> (Frame_Rosace.GetFirstChild("Quad_Stick") as CMlFrame);
		if (I == 0) LibButtons_SetAction(Quad_Stick, "{{{LeftStick}}}");
		else LibButtons_SetAction(Quad_Stick, "{{{RightStick}}}");
	}
	
	G_Families.clear();
	G_Family = "";
	G_Macroblocks.clear();
	G_Macroblock = NullId;
	G_Placements.clear();
	G_Availabilities.clear();
	G_Placement = -1;
	G_Availability = False;
	G_ForceSelection = True;
	G_PageLeft = 0;
	G_PageRight[""] = 0;
	G_SelectionLeft = -1;
	G_SelectionRight = -1;
	
	G_SoundClick = Audio.CreateSound(
		"{{{C_SoundsPath}}}SFX_UI_ClicRosace.wav",
		{{{Volumes::GetVolumedB("EditorBlockSelection")}}},
		False,
		False,
		False
	);
	G_SoundClick.PanRadiusLfe = {{{Volumes::GetPanRadiusLfe("MenuUISpreadLarge")}}};
	G_SoundRosaceScale = Audio.CreateSound(
		"{{{C_SoundsPath}}}SFX_UI_Pop-Up_InterfaceSmall.wav",
		{{{Volumes::GetVolumedB("EditorBlockHelp")}}},
		False,
		False,
		False
	);
	G_SoundRosaceScale.PanRadiusLfe = {{{Volumes::GetPanRadiusLfe("MenuUISpreadLarge")}}};
		
	SelectAngle(C_StickLeft, 0., False);
	SelectAngle(C_StickRight, 0., False);
	
	declare L_Visibility for Page = False;
	declare L_RosaceContentUpdate for Page = -1;
	declare Ident[][Text] L_RosaceMacroblocks for Page;
	declare Integer[][Text] L_RosacePlacements for Page;
	declare Boolean[][Text] L_RosaceAvailabilities for Page;
	declare L_RosaceVisible for Page = False;
	declare L_RosaceMode for Page = -1;
	declare L_ForceUpdate for Page = -1;
	declare L_ForceFamily for Page = -1;
	declare L_ForceMacroblock for Page = -1;
	declare L_StyleUpdate for Page = -1;
	declare L_StyleName for Page = "";
	declare L_StylePageCurrent for Page = 0;
	declare L_StylePageMax for Page = 0;
	declare L_ForceClose for Page = -1;
	declare L_ShiftRightPage for Page = 0;
	L_RosaceVisible = False;
	
	declare UIMacroblockSelection_RosaceVisible for This = False;
	
	declare RosaceLeftActive = False;
	declare RosaceRightActive = False;
	declare ActiveClic = False;
	declare RosaceLeftLock = False;
	declare RosaceCanClick = -1;
	
	declare PrevRosaceContentUpdate = -1;
	declare PrevForceUpdate = -1;
	declare PrevRosaceMode = -1;
	declare PrevStyleUpdate = -1;
	declare PrevMouseRightButton = MouseRightButton;
	declare PrevForceClose = -1;
	
	while (True) {
		yield;
		
		LibManialink_AnimLoop();
		LibButtons_Loop();
		LibMLEffects_Loop();
		
		if (PrevRosaceContentUpdate != L_RosaceContentUpdate) {
			PrevRosaceContentUpdate = L_RosaceContentUpdate;
			SetContent(L_RosaceMacroblocks, L_RosacePlacements, L_RosaceAvailabilities);
		}
		
		if (PrevRosaceMode != L_RosaceMode) {
			PrevRosaceMode = L_RosaceMode;
			SetMode(L_RosaceMode);
		}
		
		if (PrevStyleUpdate != L_StyleUpdate) {
			PrevStyleUpdate = L_StyleUpdate;
			SetStyle(L_StyleName, L_StylePageCurrent, L_StylePageMax);
		}
		
		if (PrevMouseRightButton != MouseRightButton) {
			if (L_Visibility && PrevMouseRightButton) {
				if (!L_RosaceVisible) ActiveClic = True;
				else ActiveClic = False;
			}
			PrevMouseRightButton = MouseRightButton;
		}
		
		if (L_ShiftRightPage != 0) {
			if (L_ShiftRightPage < 0)
				PrevPage(C_StickRight);
			else
				NextPage(C_StickRight);
			
			L_ShiftRightPage = 0;
		}
		
		if (!L_Visibility && ActiveClic) ActiveClic = False;
		
		declare DistanceLeft = ML::Distance(<MouseX, MouseY, 0.>, <Quad_RosaceLeft.AbsolutePosition_V3.X, Quad_RosaceLeft.AbsolutePosition_V3.Y, 0.>);
		declare DistanceRight = ML::Distance(<MouseX, MouseY, 0.>, <Quad_RosaceRight.AbsolutePosition_V3.X, Quad_RosaceRight.AbsolutePosition_V3.Y, 0.>);
		
		foreach (Event in PendingEvents) {
			if (Event.Type == CMlScriptEvent::Type::MouseOver) {
				if (Event.Control.Id == Quad_RosaceLeft.Id) {
					RosaceLeftActive = True;
					RosaceRightActive = False;
				} else if (Event.Control.Id == Quad_RosaceRight.Id) {
					RosaceLeftActive = False;
					RosaceRightActive = True;
				}
			} else if (Event.Type == CMlScriptEvent::Type::MouseOut) {
				if (Event.Control.Id == Quad_RosaceLeft.Id) {
					RosaceLeftActive = False;
				} else if (Event.Control.Id == Quad_RosaceRight.Id) {
					RosaceRightActive = False;
				}
			} else if (Event.Type == CMlScriptEvent::Type::MouseClick) {
				if (Event.ControlId == "Quad_SmartQuad" || Event.ControlId == "ImageLeft_SmartQuad" || Event.ControlId == "ImageRight_SmartQuad") {
					switch(Event.Control.Parent.ControlId) {
						case "SmartQuad_Filter_Prev" : SendCustomEvent("{{{C_Event_FilterPrev}}}", [""]);
						case "SmartQuad_Filter_Next" : SendCustomEvent("{{{C_Event_FilterNext}}}", [""]);
						case "SmartQuad_Page_Prev_Left" : SendCustomEvent("{{{C_Event_FamilyPrev}}}", [""]);
						case "SmartQuad_Page_Next_Left" : SendCustomEvent("{{{C_Event_FamilyNext}}}", [""]);
						case "SmartQuad_Page_Prev_Right" : SendCustomEvent("{{{C_Event_MacroblockPagePrev}}}", [""]);
						case "SmartQuad_Page_Next_Right" : SendCustomEvent("{{{C_Event_MacroblockPageNext}}}", [""]);
					}
				}
				else if (Event.Control.Id == Quad_RosaceLeft.Id) {
					if (DistanceLeft <= Quad_RosaceLeft.Size.X * 0.5) {
						if (!RosaceLeftLock) {
							RosaceLeftLock = True;
						} else {
							declare Position = <MouseX - Quad_RosaceLeft.AbsolutePosition_V3.X, 0., MouseY - Quad_RosaceLeft.AbsolutePosition_V3.Y>;
							declare Angle = ML::OrientedAngle(<0., 0., -1.>, Position) * (180. / ML::PI());
							declare Selection = ML::FloorInteger((ML::NearestInteger(180 + Angle + {{{ItemAngle/2.}}}) % 360) / {{{ItemAngle}}});
							if (G_SelectionLeft == Selection) {
								RosaceLeftLock = False;
							} else {
								if (RosaceLeftActive && L_RosaceVisible && ActiveClic) {
									MoveSelector(C_StickLeft, <MouseX - Quad_RosaceLeft.AbsolutePosition_V3.X, MouseY - Quad_RosaceLeft.AbsolutePosition_V3.Y>);
								}
							}
						}
					}
				} else if (Event.Control.Id == Quad_RosaceRight.Id) {
					if (DistanceRight <= Quad_RosaceRight.Size.X * 0.5) {
						ActiveClic = False;
						SendCustomEvent("{{{C_Event_MacroblockClick}}}", ["-1"]);
					}
				}
			}
		}
		
		declare WheelLeftVisible = LibButtons_IsKeyboard() && RosaceLeftActive && DistanceLeft <= Quad_RosaceLeft.Size.X * 0.5 && G_Frame_Pager_Left.Visible;
		declare WheelRightVisible = LibButtons_IsKeyboard() && RosaceRightActive && DistanceRight <= Quad_RosaceRight.Size.X * 0.5 && G_Frame_Pager_Right.Visible;
		if (G_Frame_Wheel_Left.Visible != WheelLeftVisible) G_Frame_Wheel_Left.Visible = WheelLeftVisible;
		if (G_Frame_Wheel_Right.Visible != WheelRightVisible) G_Frame_Wheel_Right.Visible = WheelRightVisible;
		
		declare ActiveRight = False;
		declare ActiveLeft = False;

		if (L_Visibility) {
			if (RosaceLeftActive && !RosaceLeftLock) {
				if (L_RosaceVisible && ActiveClic && DistanceLeft <= Quad_RosaceLeft.Size.X * 0.5) {
					MoveSelector(C_StickLeft, <MouseX - Quad_RosaceLeft.AbsolutePosition_V3.X, MouseY - Quad_RosaceLeft.AbsolutePosition_V3.Y>);
				}
				//ActiveLeft = True;
			}
			
			if (RosaceRightActive) {
				if (L_RosaceVisible && ActiveClic && DistanceRight <= Quad_RosaceRight.Size.X * 0.5) {
					MoveSelector(C_StickRight, <MouseX - Quad_RosaceRight.AbsolutePosition_V3.X, MouseY - Quad_RosaceRight.AbsolutePosition_V3.Y>);
				}
				//ActiveRight = True;
			}
			
			// I'm not sure that this code still works.... MainUserPad.LeftStickX seems to always be 0, and we don't quite get in this if I think.
			// (because MainUserPad.Type is mouse)
			// I don't know if it would work on console. I don't have a devkit to test it.
			
			if (Editor != Null && Editor.UserMgr != Null && Editor.UserMgr.MainUserPad != Null && Editor.UserMgr.MainUserPad.Type != CInputPad::EPadType::Keyboard && Editor.UserMgr.MainUserPad.Type != CInputPad::EPadType::Mouse) {
				if (ML::Sqrt((Editor.UserMgr.MainUserPad.LeftStickX * Editor.UserMgr.MainUserPad.LeftStickX) + (Editor.UserMgr.MainUserPad.LeftStickY * Editor.UserMgr.MainUserPad.LeftStickY)) > {{{C_SticksActivation}}}) {
					if (L_RosaceVisible) {
						MoveSelector(C_StickLeft, <Editor.UserMgr.MainUserPad.LeftStickX, -Editor.UserMgr.MainUserPad.LeftStickY>);
						ActiveClic = False;
					}
					ActiveLeft = True;
				}
				
				if (ML::Sqrt((Editor.UserMgr.MainUserPad.RightStickX * Editor.UserMgr.MainUserPad.RightStickX) + (Editor.UserMgr.MainUserPad.RightStickY * Editor.UserMgr.MainUserPad.RightStickY)) > {{{C_SticksActivation}}}) {
					if (L_RosaceVisible) {
						MoveSelector(C_StickRight, <Editor.UserMgr.MainUserPad.RightStickX, -Editor.UserMgr.MainUserPad.RightStickY>);
						ActiveClic = False;
					}
					ActiveRight = True;
				}
			} else {
				foreach (Pad in Input.Pads) {
					if (Pad.Type == CInputPad::EPadType::Keyboard) continue;
					
					if (ML::Sqrt((Pad.LeftStickX * Pad.LeftStickX) + (Pad.LeftStickY * Pad.LeftStickY)) > {{{C_SticksActivation}}}) {
						if (L_RosaceVisible) {
							MoveSelector(C_StickLeft, <Pad.LeftStickX, -Pad.LeftStickY>);
							ActiveClic = False;
						}
						ActiveLeft = True;
					}
					
					if (ML::Sqrt((Pad.RightStickX * Pad.RightStickX) + (Pad.RightStickY * Pad.RightStickY)) > {{{C_SticksActivation}}}) {
						if (L_RosaceVisible) {
							MoveSelector(C_StickRight, <Pad.RightStickX, -Pad.RightStickY>);
							ActiveClic = False;
						}
						ActiveRight = True;
					}
				}
			}
		}
			
		if (L_RosaceVisible) {
			foreach (Event in Editor.PendingEvents) {
				if (Event.Type == CMapEditorPluginEvent::Type::EditorInput) {
					declare CMapEditorPluginEvent::EInput EventInput = Inputs::GetEventInput(Event.Input, Input.JapanStylePadButtons);
					if (Event.IsFromMouse) { // scroll
						if (RosaceRightActive && DistanceRight <= Quad_RosaceRight.Size.X * 0.5) {
							switch (EventInput) {
								case CMapEditorPluginEvent::EInput::CursorLower: PrevPage(C_StickRight);
								case CMapEditorPluginEvent::EInput::CursorRaise: NextPage(C_StickRight);
							}
						} else if (RosaceLeftActive && DistanceLeft <= Quad_RosaceLeft.Size.X * 0.5) {
							switch (EventInput) {
								case CMapEditorPluginEvent::EInput::CursorLower: SendCustomEvent("{{{C_Event_FamilyPrev}}}", []);
								case CMapEditorPluginEvent::EInput::CursorRaise: SendCustomEvent("{{{C_Event_FamilyNext}}}", []);
							}
						}
					}
					
					if (EventInput == CMapEditorPluginEvent::EInput::Menu) {
						ActiveClic = False;
					}
				}
			}
		}
		
		if (PrevForceClose != L_ForceClose) {
			PrevForceClose = L_ForceClose;
			ActiveLeft = False;
			ActiveRight = False;
			ActiveClic = False;
		}
		
		if (!L_RosaceVisible && (ActiveLeft || ActiveClic)) {
			G_SoundRosaceScale.Stop();
			G_SoundRosaceScale.Play();
			LibManialink_AnimStop(Frame_Rosaces);
			LibManialink_Anim(Frame_Rosaces, {{{Manialink::Inject("""<frame scale="1." hidden="0" />""")}}}, 250, "EaseOutQuad");
			RosaceCanClick = Now + 250;
			L_RosaceVisible = True;
		} else if (L_RosaceVisible && !ActiveLeft && !ActiveRight && !ActiveClic) {
			LibManialink_AnimStop(Frame_Rosaces);
			LibManialink_Anim(Frame_Rosaces, {{{Manialink::Inject("""<frame scale="0." hidden="1" />""")}}}, 250, "EaseOutQuad");
			Quad_RosaceLeft.Visible = False;
			Quad_RosaceRight.Visible = False;
			L_RosaceVisible = False;
			RosaceLeftActive = False;
			RosaceRightActive = False;
			RosaceLeftLock = False;
		}
		
		if (RosaceCanClick > 0 && Now >= RosaceCanClick) {
			RosaceCanClick = -1;
			Quad_RosaceLeft.Visible = True;
			Quad_RosaceRight.Visible = True;
		}
		
		if (PrevForceUpdate != L_ForceUpdate) {
			PrevForceUpdate = L_ForceUpdate;
			ForceSelection(L_ForceFamily, L_ForceMacroblock);
		}
		
		if (UIMacroblockSelection_RosaceVisible != L_RosaceVisible) {
			UIMacroblockSelection_RosaceVisible = L_RosaceVisible;
			
			if (L_RosaceVisible) {
				UpdateFamilies();
				UpdateMacroblocks();
			}
		}
	}
	
	Audio.DestroySound(G_SoundClick);
	Audio.DestroySound(G_SoundRosaceScale);
}
--></script>
</manialink>	
""";
}

// Get the key of the macroblock with the given model id and placement
// @return							The key if found, -1 otherwise
Integer Private_GetMacroblockKey(Ident _MacroblockModelId, Integer _MacroblockPlacement) {
	foreach (MacroblockKey => MacroblockModelId in G_Macroblocks) {
		if (
			MacroblockModelId == _MacroblockModelId &&
			G_Placements.existskey(MacroblockKey) &&
			G_Placements[MacroblockKey] == _MacroblockPlacement
		) return MacroblockKey;
	}
	
	return -1;
}

// Select a macroblock
Void Private_SelectMacroblock(Integer _MacroblockKey, Boolean _PlaySound) {
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_MacroblocksUpdate for Page = -1;
	declare Ident[] L_Macroblocks for Page;
	declare Integer[] L_MacroblocksKeys for Page;
	declare Boolean[] L_MacroblocksAvailabilities for Page;
	declare L_MacroblocksShift for Page = 0;
	declare L_MacroblocksSelected for Page = -1;
	declare Text[Ident] L_MacroblocksNames for Page;
	declare Integer[] L_MacroblocksSelectKeys for Page;
	L_Macroblocks.clear();
	L_MacroblocksKeys.clear();
	L_MacroblocksAvailabilities.clear();
	L_MacroblocksShift = 0;
	L_MacroblocksSelected = 0;
	L_MacroblocksNames.clear();
	L_MacroblocksSelectKeys.clear();
	
	declare MacroblockKey = _MacroblockKey;
	if (!G_Macroblocks.existskey(MacroblockKey)) {
		if (G_Macroblocks.count > 0) MacroblockKey = 0;
		else MacroblockKey = -1;
	}
	
	if (!G_MacroblocksStart.existskey(G_Family)) G_MacroblocksStart[G_Family] = 0;
	
	if (MacroblockKey > G_MacroblocksStart[G_Family] + C_SimpleMacroblocksNb - 1) {
		G_MacroblocksStart[G_Family] = MacroblockKey - C_SimpleMacroblocksNb + 1;
		L_MacroblocksShift = 1;
	} else if (MacroblockKey < G_MacroblocksStart[G_Family]) {
		G_MacroblocksStart[G_Family] = MacroblockKey;
		L_MacroblocksShift = -1;
	}
	
	if (G_MacroblocksStart[G_Family] < 0) G_MacroblocksStart[G_Family] = 0;
	
	L_MacroblocksSelected = MacroblockKey - G_MacroblocksStart[G_Family];
	
	declare Min = G_MacroblocksStart[G_Family] - 1;
	declare Max = G_MacroblocksStart[G_Family] + C_SimpleMacroblocksNb;
	for (I, Min, Max) {
		if (G_Macroblocks.existskey(I)) {
			declare MacroblockModelId = G_Macroblocks[I];
			declare MacroblockModel <=> MacroblockModels[MacroblockModelId];
			declare Name = ThemePack::GetName(MacroblockModel);
			if (Name != "") L_MacroblocksNames[MacroblockModelId] = Name;
			L_Macroblocks.add(MacroblockModelId);
			L_MacroblocksAvailabilities.add(G_Availabilities[I]);
			L_MacroblocksKeys.add(ThemePack::GetOrder(MacroblockModel));
			L_MacroblocksSelectKeys.add(I);
		} else {
			L_Macroblocks.add(NullId);
			L_MacroblocksAvailabilities.add(False);
			L_MacroblocksKeys.add(0);
			//L_MacroblocksKeys.add(I+1);
			L_MacroblocksSelectKeys.add(I);
		}
	}
	
	if (G_Macroblocks.existskey(MacroblockKey)) G_Macroblock[G_Family] = G_Macroblocks[MacroblockKey];
	else G_Macroblock[G_Family] = NullId;
	if (G_Placements.existskey(MacroblockKey)) G_Placement[G_Family] = G_Placements[MacroblockKey]; 
	else G_Placement[G_Family] = -1; 
	
	G_MacroblockUpdate = Now;
	L_MacroblocksUpdate = Now;
	
	if (_PlaySound) Sound::Play("EditorSimpleSelectMacroblock");
}

/// Overload Private_SelectMacroblock()
Void Private_SelectMacroblock(Integer _MacroblockKey) {
	Private_SelectMacroblock(_MacroblockKey, False);
}

// Select a family and a macroblock in the rosace
Void Private_SelectRosace(Integer _Family, Integer _MacroblockKey) {
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_ForceUpdate for Page = -1;
	declare L_ForceFamily for Page = -1;
	declare L_ForceMacroblock for Page = -1;
	L_ForceFamily = _Family;
	L_ForceMacroblock = _MacroblockKey;
	L_ForceUpdate = Now;
}

Text GetScriptVersion() { return Version; }
Text GetScriptName() { return ScriptName; }

/// Get the events constants
Text Event_MacroblockPagePrev() { return C_Event_MacroblockPagePrev; }
Text Event_MacroblockPageNext() { return C_Event_MacroblockPageNext; }
Text Event_MacroblockHover() { return C_Event_MacroblockHover; }
Text Event_MacroblockClick() { return C_Event_MacroblockClick; }
Text Event_MacroblockPrev() { return C_Event_MacroblockPrev; }
Text Event_MacroblockNext() { return C_Event_MacroblockNext; }
Text Event_FamilyClick() { return C_Event_FamilyClick; }
Text Event_FamilyPrev() { return C_Event_FamilyPrev; }
Text Event_FamilyNext() { return C_Event_FamilyNext; }
Text Event_FilterPrev() { return C_Event_FilterPrev; }
Text Event_FilterNext() { return C_Event_FilterNext; }

Integer GetMacroblockUpdate() {
	if (G_UseRosace) {
		declare Page <=> Layers::GetPage("MacroblockSelection");
		declare L_RosaceMacroblockUpdate for Page = -1;
		return L_RosaceMacroblockUpdate;
	}
	
	return G_MacroblockUpdate;
}

// Get the currently selected macroblock id
Ident GetMacroblockId() {
	if (G_UseRosace) {
		declare Page <=> Layers::GetPage("MacroblockSelection");
		declare L_RosaceMacroblock for Page = NullId;
		return L_RosaceMacroblock;
	}
	if (G_Macroblock.existskey(G_Family))
		return G_Macroblock[G_Family];
	return NullId;
}

// Get the currently selected macroblock
CMacroblockModel GetMacroblock() {
	declare Ident MacroblockModelId;
	
	if (G_UseRosace) {
		declare Page <=> Layers::GetPage("MacroblockSelection");
		declare L_RosaceMacroblock for Page = NullId;
		MacroblockModelId = L_RosaceMacroblock;
	} else {
		MacroblockModelId = GetMacroblockId();
	}
	
	if (MacroblockModelId != NullId && MacroblockModels.existskey(MacroblockModelId)) return MacroblockModels[MacroblockModelId];
	return Null;
}

// Get the currently selected macroblock placement
Integer GetMacroblockPlacement() {
	if (G_UseRosace) {
		declare Page <=> Layers::GetPage("MacroblockSelection");
		declare L_RosacePlacement for Page = -1;
		return L_RosacePlacement;
	}
	
	if (G_Placement.existskey(G_Family)) return G_Placement[G_Family];
	return -1;
}

// Select the next macroblock
Void NextMacroblock() {
	declare Key = Private_GetMacroblockKey(GetMacroblockId(), GetMacroblockPlacement());
	if (Key >= 0) {
		for (I, 1, G_Macroblocks.count) {
			declare ShiftKey = (I + Key) % G_Macroblocks.count;
			if (!G_Availabilities[ShiftKey]) continue;
			Private_SelectMacroblock(ShiftKey);
			break;
		}
	} else {
		Private_SelectMacroblock(-1);
	}
	Sound::Play("EditorSimpleSelectMacroblock");
}

// Select the previous macroblock
Void PrevMacroblock() {
	declare Key = Private_GetMacroblockKey(GetMacroblockId(), GetMacroblockPlacement());
	if (Key >= 0) {
		for (I, 1, G_Macroblocks.count) {
			declare ShiftKey = (-I + Key + G_Macroblocks.count) % G_Macroblocks.count;
			if (!G_Availabilities[ShiftKey]) continue;
			Private_SelectMacroblock(ShiftKey);
			break;
		}
	} else {
		Private_SelectMacroblock(-1);
	}
	Sound::Play("EditorSimpleSelectMacroblock");
}

// Select a family
Void Private_SelectFamily(Text _Family, Integer _MacroblockKey) {
	G_Family = _Family;
	if (!G_Families.exists(G_Family) || !G_FamiliesAvailabilities[G_Family].exists(True)) {
		G_Family = "";
		foreach (Family in G_Families) {
			if (G_FamiliesAvailabilities[Family].exists(True)) {
				G_Family = Family;
				break;
			}
		}
	}
	
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_Family for Page = "";
	L_Family = G_Family;
	G_FamilyUpdate = Now;
	
	G_Macroblocks.clear();
	G_Placements.clear();
	G_Availabilities.clear();
	if (G_FamiliesMacroblocks.existskey(G_Family)) {
		G_Macroblocks = G_FamiliesMacroblocks[G_Family];
	}
	if (G_FamiliesPlacements.existskey(G_Family)) {
		G_Placements = G_FamiliesPlacements[G_Family];
	}
	if (G_FamiliesAvailabilities.existskey(G_Family)) {
		G_Availabilities = G_FamiliesAvailabilities[G_Family];
	}
	if (_MacroblockKey < 0) {
		Private_SelectMacroblock(Private_GetMacroblockKey(GetMacroblockId(), GetMacroblockPlacement()));
	} else {
		Private_SelectMacroblock(_MacroblockKey);
	}
}

/// Overload Private_SelectFamily()
Void Private_SelectFamily(Text _Family) {
	Private_SelectFamily(_Family, -1);
}

// Select a family from oustide the lib
Void SelectFamily(Text _Family, Boolean _PlaySound) {
	if (!G_Families.exists(_Family) || !G_FamiliesAvailabilities[_Family].exists(True)) return;
	if (_PlaySound) Sound::Play("EditorSimpleSelectFamily");
	Private_SelectFamily(_Family, -1);
}

//  Get the family last update time
Integer GetFamilyUpdate() {
	if (G_UseRosace) {
		declare Page <=> Layers::GetPage("MacroblockSelection");
		declare L_RosaceFamilyUpdate for Page = -1;
		return L_RosaceFamilyUpdate;
	}
	
	return G_FamilyUpdate;
}

// Get the currently selected family
Text GetFamily() {
	if (G_UseRosace) {
		declare Page <=> Layers::GetPage("MacroblockSelection");
		declare L_RosaceFamily for Page = "";
		return L_RosaceFamily;
	}
	
	return G_Family;
}

// Select the next family
Void NextFamily() {
	declare Key = G_Families.keyof(G_Family);
	if (Key >= 0) {
		for (I, 1, G_Families.count) {
			declare ShiftKey = (I + Key) % G_Families.count;
			declare NextFamily = G_Families[ShiftKey];
			if (G_FamiliesAvailabilities.existskey(NextFamily)) {
				if (G_FamiliesAvailabilities[NextFamily].exists(True)) {
					Private_SelectFamily(NextFamily);
					break;
				}
			}
		}
	} else {
		Private_SelectFamily("");
	}
	Sound::Play("EditorSimpleSelectFamily");
}

// Select the previous family
Void PrevFamily() {
	declare Key = G_Families.keyof(G_Family);
	if (Key >= 0) {
		for (I, 1, G_Families.count) {
			declare ShiftKey = (-I + Key + G_Families.count) % G_Families.count;
			declare PrevFamily = G_Families[ShiftKey];
			if (G_FamiliesAvailabilities.existskey(PrevFamily)) {
				if (G_FamiliesAvailabilities[PrevFamily].exists(True)) {
					Private_SelectFamily(PrevFamily);
					break;
				}
			}
		}
	} else {
		Private_SelectFamily("");
	}
	Sound::Play("EditorSimpleSelectFamily");
}

Void ShiftRightPage(Integer _Shift) {
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_ShiftRightPage for Page = 0;
	L_ShiftRightPage = _Shift;
}

// Get all available macroblocks ids
Ident[] GetAllMacroblocksIds() {
	declare Ident[] AllMacroblockModelsIds;
	
	foreach (Family => MacroblocksIds in G_FamiliesMacroblocks) {
		foreach (Key => MacroblockId in MacroblocksIds) {
			if (G_FamiliesAvailabilities[Family][Key]) AllMacroblockModelsIds.add(MacroblockId);
		}
	}
	
	return AllMacroblockModelsIds;
}

// Find and select a macroblock in the currently available ones
Void FindMacroblock(Ident _MacroblockModelId, Integer _MacroblockPlacement) {
	if (_MacroblockModelId == NullId) return;
	
	declare FamilyKey = -1;
	declare Found = False;
	foreach (Family => MacroblocksIds in G_FamiliesMacroblocks) {
		FamilyKey += 1;
		if (!MacroblocksIds.exists(_MacroblockModelId)) continue;
		foreach (MacroblockKey => MacroblockId in MacroblocksIds) {
			if (MacroblockId != _MacroblockModelId) continue;
		
			if (
				G_UseRosace || (
					G_FamiliesPlacements.existskey(Family) &&
					G_FamiliesPlacements[Family].existskey(MacroblockKey) &&
					G_FamiliesPlacements[Family][MacroblockKey] == _MacroblockPlacement
				)
			) {
				if (G_UseRosace) {
					Private_SelectRosace(FamilyKey, MacroblockKey);
				} else {
					Private_SelectFamily(Family, MacroblockKey);
				}
				Found = True;
			}
			
			if (Found) break;
		}
		
		if (Found) break;
	}
}

// Check if a macroblock is available
Boolean IsAvailable(Ident _MacroblockModelId) {
	declare Found = False;
	foreach (Family => MacroblocksIds in G_FamiliesMacroblocks) {
		declare MacroblockKey = MacroblocksIds.keyof(_MacroblockModelId);
		if (MacroblockKey >= 0) {
			if (!G_FamiliesAvailabilities.existskey(Family)) continue;
			if (!G_FamiliesAvailabilities[Family].existskey(MacroblockKey)) continue;
			if (!G_FamiliesAvailabilities[Family][MacroblockKey]) continue;
			
			Found = True;
			break;
		}
	}
	
	return Found;
}

//  Find and select a macroblock in the currently available ones
Void FindMacroblock(Ident _MacroblockModelId) {
	if (!G_UseRosace && GetMacroblockId() == _MacroblockModelId) return;
	
	declare FamilyKey = 0;
	foreach (Family => MacroblocksIds in G_FamiliesMacroblocks) {
		declare MacroblockKey = MacroblocksIds.keyof(_MacroblockModelId);
		if (MacroblockKey >= 0) {
			if (G_UseRosace) {
				Private_SelectRosace(FamilyKey, MacroblockKey);
			} else {
				Private_SelectFamily(Family, MacroblockKey);
			}
			break;
		}
		FamilyKey += 1;
	}
}

// Set the families and macroblocks to display
Void SetFamiliesAndMacroblocks(
	Ident[][Text] _FamiliesAndMacroblocks, 
	Integer[][Text] _FamiliesAndPlacements, 
	Boolean[][Text] _FamiliesAndAvailabilities,
	Text _Filter, Text _PrevFilter, Text _NextFilter
) {
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_FamiliesUpdate for Page = -1;
	declare L_Filter for Page = "";
	declare L_PrevFilter for Page = "";
	declare L_NextFilter for Page = "";
	declare Boolean[Text] L_Families for Page;
	declare L_RosaceContentUpdate for Page = -1;
	declare Ident[][Text] L_RosaceMacroblocks for Page;
	declare Integer[][Text] L_RosacePlacements for Page;
	declare Boolean[][Text] L_RosaceAvailabilities for Page;
	
	G_FamiliesMacroblocks = _FamiliesAndMacroblocks;
	G_FamiliesPlacements = _FamiliesAndPlacements;
	G_FamiliesAvailabilities = _FamiliesAndAvailabilities;
	G_Families.clear();
	L_Families.clear();
	
	foreach (Family => MacroblocksIds in _FamiliesAndMacroblocks) {
		G_Families.add(Family);
		L_Families[Family] = _FamiliesAndAvailabilities[Family].exists(True);
	}
	
	L_Filter = _Filter;
	L_PrevFilter = _PrevFilter;
	L_NextFilter = _NextFilter;
	
	L_FamiliesUpdate = Now;
	
	L_RosaceMacroblocks = _FamiliesAndMacroblocks;
	L_RosacePlacements = _FamiliesAndPlacements;
	L_RosaceAvailabilities = _FamiliesAndAvailabilities;
	L_RosaceContentUpdate = Now;
	
	if (G_UseRosace) {
		FindMacroblock(GetMacroblockId());
	} else {
		Private_SelectFamily(G_Family);
	}
}

/// Get the mode constants
Integer Mode_Track() { return C_Mode_Track; }
Integer Mode_Terrain() { return C_Mode_Terrain; }
Integer Mode_Decoration() { return C_Mode_Decoration; }

// Set the rosaces mode
Void SetMode(Integer _Mode) {
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_RosaceMode for Page = -1;
	L_RosaceMode = _Mode;
}

// Display or not the macroblocks' names under their icon
Void DisplayNames(Boolean _Visible) {
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_VisibilityName for Page = False;
	L_VisibilityName = _Visible;
}

/// Get editor levels
Integer Editor_Beginner() { return C_Editor_Beginner; }
Integer Editor_Advanced() { return C_Editor_Advanced; }
Integer Editor_Expert() { return C_Editor_Expert; }

// Set the editor level
Void SetEditor(Integer _Editor) {
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_Editor for Page = C_Editor_Beginner;
	L_Editor = _Editor;
}

// Set the style information for the rosace
Void SetStyle(Text _Name, Integer _PageCurrent, Integer _PageMax) {
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_StyleUpdate for Page = -1;
	declare L_StyleName for Page = "";
	declare L_StylePageCurrent for Page = 0;
	declare L_StylePageMax for Page = 0;
	L_StyleName = _Name;
	L_StylePageCurrent = _PageCurrent;
	L_StylePageMax = _PageMax;
	L_StyleUpdate = Now;
}

//  Set the macroblock selection visibility
Void SetVisibility(Boolean _Visible) {
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_Visibility for Page = False;
	L_Visibility = _Visible;
}

Void Show() {
	SetVisibility(True);
}

Void Hide() {
	SetVisibility(False);
}

// Set the family selection panel visibility
Void SetFamilyVisibility(Boolean _Visible) {
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_VisibilityFamily for Page = False;
	L_VisibilityFamily = _Visible;
}

// Check if the player is selecting a macroblock in advanced mode
Boolean IsSelecting() {
	if (!G_UseRosace) return False;
	
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_RosaceVisible for Page = False;
	return L_RosaceVisible;
}

/// Close the rosaces
Void CloseRosaces() {
	if (!G_UseRosace) return;
	
	declare Page <=> Layers::GetPage("MacroblockSelection");
	declare L_ForceClose for Page = -1;
	L_ForceClose = Now;
}

Void Unload() {
	Layers::Destroy("MacroblockSelection");
}

Void Load(Boolean _SimpleEditor) {
	Unload();
	
	declare LayerMacroblockSelection <=> Layers::Create("MacroblockSelection");
	if (_SimpleEditor) LayerMacroblockSelection.ManialinkPage = Private_GetMacroblockSelectionML();
	else LayerMacroblockSelection.ManialinkPage = Private_GetRosaceML();
	
	G_FamiliesMacroblocks.clear();
	G_FamiliesPlacements.clear();
	G_FamiliesAvailabilities.clear();
	G_Macroblocks.clear();
	G_Placements.clear();
	G_Availabilities.clear();
	G_Families.clear();
	G_MacroblockUpdate = -1;
	G_Macroblock.clear();
	G_Placement.clear();
	G_FamilyUpdate = -1;
	G_Family = "";
	G_MacroblocksStart.clear();
	G_UseRosace = !_SimpleEditor;
	
	declare Page <=> LayerMacroblockSelection.LocalPage;
	declare L_FamiliesUpdate for Page = -1;
	declare L_Filter for Page = "";
	declare L_PrevFilter for Page = "";
	declare L_NextFilter for Page = "";
	declare Boolean[Text] L_Families for Page;
	declare L_Family for Page = "";
	declare L_MacroblocksUpdate for Page = -1;
	declare Ident[] L_Macroblocks for Page;
	declare Integer[] L_MacroblocksKeys for Page;
	declare Boolean[] L_MacroblocksAvailabilities for Page;
	declare L_MacroblocksShift for Page = 0;
	declare L_MacroblocksSelected for Page = -1;
	declare Text[Ident] L_MacroblocksNames for Page;
	declare Integer[] L_MacroblocksSelectKeys for Page;
	declare L_Visibility for Page = False;
	declare L_VisibilityName for Page = False;
	declare L_RosaceVisible for Page = False;
	declare L_RosaceContentUpdate for Page = -1;
	declare Ident[][Text] L_RosaceMacroblocks for Page;
	declare Integer[][Text] L_RosacePlacements for Page;
	declare Boolean[][Text] L_RosaceAvailabilities for Page;
	declare L_RosaceFamily for Page = "";
	declare L_RosaceFamilyUpdate for Page = -1;
	declare L_RosacePlacement for Page = -1;
	declare L_RosaceMacroblock for Page = NullId;
	declare L_RosaceMacroblockUpdate for Page = -1;
	declare L_RosaceMode for Page = -1;
	declare L_ForceFamily for Page = -1;
	declare L_ForceMacroblock for Page = -1;
	declare L_ForceUpdate for Page = -1;
	declare L_Editor for Page = C_Editor_Beginner;
	declare L_StyleUpdate for Page = -1;
	declare L_StyleName for Page = "";
	declare L_StylePageCurrent for Page = 0;
	declare L_StylePageMax for Page = 0;
	declare L_ForceClose for Page = -1;
	declare L_ShiftRightPage for Page = 0;
	L_FamiliesUpdate = -1;
	L_Families.clear();
	L_Family = "";
	L_MacroblocksUpdate = -1;
	L_Macroblocks.clear();
	L_MacroblocksKeys.clear();
	L_MacroblocksAvailabilities.clear();
	L_MacroblocksSelectKeys.clear();
	L_MacroblocksShift = 0;
	L_MacroblocksSelected = -1;
	L_MacroblocksNames.clear();
	L_Visibility = False;
	L_VisibilityName = False;
	L_RosaceVisible = False;
	L_RosaceContentUpdate = -1;
	L_RosaceMacroblocks.clear();
	L_RosacePlacements.clear();
	L_RosaceAvailabilities.clear();
	L_RosaceFamily = "";
	L_RosaceFamilyUpdate = -1;
	L_RosacePlacement = -1;
	L_RosaceMacroblock = NullId;
	L_RosaceMacroblockUpdate = -1;
	L_RosaceMode = -1;
	L_ForceFamily = -1;
	L_ForceMacroblock = -1;
	L_ForceUpdate = -1;
	L_Editor = C_Editor_Beginner;
	L_StyleUpdate = -1;
	L_StyleName = "";
	L_StylePageCurrent = 0;
	L_StylePageMax = 0;
	L_ForceClose = -1;
	L_ShiftRightPage = 0;
	L_Filter = "";
	L_PrevFilter = "";
	L_NextFilter = "";
}