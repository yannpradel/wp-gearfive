/** 
 * Get image for buttons
 */

#Const Version		"2023-03-30"
#Const ScriptName	"UIPadButtons.Script.txt"

#Include "TextLib" as TL

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_DefaultPlatform		2 // PC
// Plaforms
#Const C_Platforms [ ///< Take care before changing these numbers, it is linked to the index of the C_Buttons_Menu, etc arrays !
	"PlayStation"	=> 0,	
	"XBox"	=> 1,
	"PC"	=> 2,
	"Stadia"=> 3,
	"Luna"	=> 4
]

declare Integer	G_Private_Platform; ///< Current platform, always use Private_SetPlatform() and GetPlatform() to set and get its value


Boolean IsJapan() {
	return Input.JapanStylePadButtons;
}

Void Private_SetPlatform(Integer _Platform) {
	G_Private_Platform = _Platform;
}

Integer GetPlatform(Text _Platform) {
	if (!C_Platforms.existskey(_Platform)) return C_DefaultPlatform;
	return C_Platforms[_Platform];
}

// Get current platform index
Integer GetPlatform() {
	if (!C_Platforms.exists(G_Private_Platform)) return C_DefaultPlatform;
	return G_Private_Platform;
}

// Get platform name from index
Text GetPlatformName(Integer _PlatformIndex) {
	if (!C_Platforms.exists(_PlatformIndex)) return C_Platforms.keyof(C_DefaultPlatform);
	return C_Platforms.keyof(_PlatformIndex);
}

// Get the folder stocking the images for the given platform
Text GetPlatformFolder(Integer _Platform) {
	return GetPlatformName(_Platform)^"/";
}

// Get the platform index associated to the given system
Integer GetPlatformIndexFromSystem(CSystemPlatform::ESystemPlatform _System) {
	switch (_System) {
		case CSystemPlatform::ESystemPlatform::PS4		: return C_Platforms["PlayStation"];
		case CSystemPlatform::ESystemPlatform::PS5		: return C_Platforms["PlayStation"];
		case CSystemPlatform::ESystemPlatform::XBoxOne	: return C_Platforms["XBox"];
		case CSystemPlatform::ESystemPlatform::XBoxSeries	: return C_Platforms["XBox"];
		case CSystemPlatform::ESystemPlatform::Stadia	: return C_Platforms["Stadia"];
		case CSystemPlatform::ESystemPlatform::Luna		: return C_Platforms["Luna"];
		case CSystemPlatform::ESystemPlatform::Steam	: return C_Platforms["PC"];
		case CSystemPlatform::ESystemPlatform::UPlay	: return C_Platforms["PC"];
		case CSystemPlatform::ESystemPlatform::None		: return C_Platforms["PC"];
	}
	
	return C_DefaultPlatform;
}

// ---------------------------------- //
/// Unload the library
Void Unload() {

}

// ---------------------------------- //
/// Load the library
Void Load(CInputPad::EPadType _PadModelName) {

	Unload();
	
	declare PlatformIndex = GetPlatformIndexFromSystem(System.Platform);
	
	// Note: Stadia missing 
	if(_PadModelName == CInputPad::EPadType::PlayStation)
	{
		PlatformIndex = 0;
	}
	else if(_PadModelName == CInputPad::EPadType::XBox)
	{
		PlatformIndex = 1;
	}
	Private_SetPlatform(PlatformIndex);
}

Void Load() {
	Load(CInputPad::EPadType::Keyboard);
}

Text GetPadName() {
	declare Integer Platform = GetPlatform();
	switch(Platform) {
		// ne pas modifier, c'est TRC.
		case C_Platforms["PlayStation"] : return _("DUALSHOCK®4 Wireless Controller");
		case C_Platforms["XBox"] : return _("Xbox One Wireless Controller");
	}
	
	return _("controller");
}

// Note: Do not reuse this in other places: It may break german sentences. 
// Luckily enough it's the same translation for every sentence now ("der linker stick") but this might not always be the case
Text GetLeftStickName() {
	switch(GetPlatform()) {
		// ne pas modifier, c'est TRC.
		case C_Platforms["PlayStation"] : return _("|PlayStation|the left stick");
		case C_Platforms["XBox"] : return _("|XBox|the left stick");
	}
	
	return _("|PC|the left stick");
}

// Note: Do not reuse this in other places: It may break german sentences. 
// Luckily enough it's the same translation for every sentence now but this might not always be the case
Text GetRightStickName() {
	switch(GetPlatform()) {
		// ne pas modifier, c'est TRC.
		case C_Platforms["PlayStation"] : return _("|PlayStation|the right stick");
		case C_Platforms["XBox"] : return _("|XBox|the right stick");
	}
	
	return _("|PC|the right stick");
}

Text GetDirectionalButtonsName() {
	switch(GetPlatform()) {
		// ne pas modifier, c'est TRC.
		case C_Platforms["PlayStation"] : return _("|PlayStation|the directional buttons");
		case C_Platforms["XBox"] : return _("|XBox|the directional buttons");
	}
	
	return _("|PC|the directional buttons");
}

// EG : arg, bon, je vais pas tout changer pour ça, mais c'est un peu moche.
Text GetChangeCamButtonName() {
	declare Integer Platform = GetPlatform();
	switch(Platform) {
		case C_Platforms["PlayStation"] : return _("R3 button");
		case C_Platforms["XBox"] : return "RS";
	}
	
	return _("The Right Stick");
}

Text GetChangeEditorModeName() {
	declare Integer Platform = GetPlatform();
	switch(Platform) {
		case C_Platforms["PlayStation"] : return _("L3 button");
		case C_Platforms["XBox"] : return "LS";
	}
	
	return _("The Left Stick");
}

Text GetL1ButtonName() {
	declare Integer Platform = GetPlatform();
	switch(Platform) {
		case C_Platforms["PlayStation"] : return _("L1 button");
		case C_Platforms["XBox"] : return "LB";
	}
	
	return "LB";
}

Text GetR1ButtonName() {
	declare Integer Platform = GetPlatform();
	switch(Platform) {
		case C_Platforms["PlayStation"] : return _("R1 button");
		case C_Platforms["XBox"] : return "RB";
		// case C_Platforms["PC"]	: 
	}
	
	return "RB";
}

Text GetSelectButtonName() {
	declare Integer Platform = GetPlatform();
	switch(Platform) {
		case C_Platforms["PlayStation"] : {
			if(IsJapan()) 	return _("|PlayStation textual button name|Circle button");
			else 			return _("|PlayStation textual button name|Cross button");
		}
		case C_Platforms["XBox"] : return "A";
	}
	
	return "A";
}