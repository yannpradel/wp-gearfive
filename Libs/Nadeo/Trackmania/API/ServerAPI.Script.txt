/**
 *  Component : ServerAPI
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/API/ServerAPI.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as Http
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as Config

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "lib-server-api" //< Component name
#Const P "LibServerAPI_" //< Prefix use to differentiate functions/variables in the script

#Const C_API_Server "/api/token/server"

#Const C_Route_GetPlayerServerAccounts "/player-server/account"

#Const C_Headers [
	"Accept" => "application/json",
	"Content-Type" => "application/json"
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_HttpPlayerServerAccount {
	Text accountId;
	Text login;
	Boolean alreadyUsed;
	Integer clubRoomId;
	Text clubRoomName;
}

#Struct K_HttpResponseGetPlayerServerAccounts {
	K_HttpPlayerServerAccount[] playerServerAccount;
	Integer itemCount;
}

#Struct K_PlayerServerAccount {
	Text AccountId;
	Text Login;
	Boolean AlreadyUsed;
	Integer ClubRoomId;
	Text ClubRoomName;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the server accounts of the connected player
 *
 *	@return														The request
 */
Http::K_Request GetPlayerServerAccounts() {
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Server^C_Route_GetPlayerServerAccounts, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_PlayerServerAccount[] GetResponseFromGetPlayerServerAccounts(Http::K_Request _Request) {
	declare K_HttpResponseGetPlayerServerAccounts HttpResponse;
	HttpResponse.fromjson(Http::GetResult(_Request));

	declare K_PlayerServerAccount[] PlayerServerAccountList;
	foreach (HttpServerAccount in HttpResponse.playerServerAccount) {
		PlayerServerAccountList.add(K_PlayerServerAccount {
			AccountId = HttpServerAccount.accountId,
			Login = HttpServerAccount.login,
			AlreadyUsed = HttpServerAccount.alreadyUsed,
			ClubRoomId = HttpServerAccount.clubRoomId,
			ClubRoomName = HttpServerAccount.clubRoomName
		});
	}

	return PlayerServerAccountList;
}