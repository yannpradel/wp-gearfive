/**
 *  Component : ChannelAPI
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/API/ChannelAPI.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as Http
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as Config

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_JoinLink {
	Text joinLink;
}

#Struct K_ScriptSettings {
	Text key;
	Text value;
	Text type;
}

#Struct K_HttpChannelProgram {
	Integer startTimestamp;
	Integer endTimestamp;
	Text[] maps;
	Text name;
	Text currentMap;
	Integer relativeStart;
	Integer relativeEnd;
	Text mediaUrl;
	Integer roomId;
	Text creatorAccountId;
	Text latestEditorAccountId;
}

#Struct K_HttpChannelProgramGrid {
	Integer id;
	Text name;
	Integer clubId;
	Integer roomId;
	Integer state;
	Text dataPackUid;
	Text script;
	Text[] maps;
	Integer maxPlayersPerServer;
	Text mediaUrl;
	Boolean channel;
}

#Struct K_HttpCurrentAndNextChannelProgram {
	Text uid;
	Text name;
	Integer playerCount;
	K_HttpChannelProgram currentTimeSlot;
	K_HttpChannelProgram nextTimeSlot;
}

#Struct K_HttpChannelGridHours {
	Integer hour;
	K_HttpChannelProgramGrid program;
}

#Struct K_HttpChannelGridDays {
	Integer day;
	K_HttpChannelGridHours[] hours;
}

#Struct K_HttpChannelGrid {
	K_HttpChannelGridDays[] days;
}

#Struct K_ChannelProgram {
	Integer Id; //< Only used by the program grid
	Integer RoomId;
	Integer StartTimestamp;
	Integer EndTimestamp;
	Text[] Maps;
	Text Name;
	Text CurrentMap;
	Integer RelativeStart;
	Integer RelativeEnd;
	Text MediaUrl;
	Text CreatorAccountId;
	Text LatestEditorAccountId;
}

#Struct K_CurrentAndNextChannelProgram {
	Text Uid;
	Text Name;
	Integer PlayerCount;
	K_ChannelProgram CurrentTimeSlot;
	K_ChannelProgram NextTimeSlot;
}

#Struct K_ChannelGridHours {
	Integer Hour;
	K_ChannelProgram Program;
}

#Struct K_ChannelGridDays {
	Integer Day;
	K_ChannelGridHours[] Hours;
}

#Struct K_ChannelGrid {
	K_ChannelGridDays[] Days;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_API_Channel "/api/token/channel"

#Const C_RouteParameter_ChannelUid "ChannelUid"

#Const C_Route_PostJoinLink "/:ChannelUid/join"
#Const C_Route_GetChannelInfo "/:ChannelUid"
#Const C_Route_GetChannelGrid "/:ChannelUid/grid"

#Const C_Headers [
	"Accept" => "application/json",
	"Content-Type" => "application/json"
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a join link of a channel
 *
 *	@param	_ChannelUid								The Uid of the channel
 *
 *	@return														The request
 */
Http::K_Request GetJoinLink(Text _ChannelUid) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostJoinLink, [C_RouteParameter_ChannelUid => _ChannelUid]);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Channel^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text GetResponseFromGetJoinLink(Http::K_Request _Request) {
	declare K_JoinLink JoinLinkResponse;
	JoinLinkResponse.fromjson(Http::GetResult(_Request));
	return JoinLinkResponse.joinLink;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get information on a channel
 *
 *	@param	_ChannelUid								The Uid of the channel
 *
 *	@return														The request
 */
Http::K_Request GetChannelInfo(Text _ChannelUid) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetChannelInfo, [C_RouteParameter_ChannelUid => _ChannelUid]);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Channel^Route, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_CurrentAndNextChannelProgram GetResponseFromGetChannelInfo(Http::K_Request _Request) {
	declare K_HttpCurrentAndNextChannelProgram HttpChannelInfoResponse;
	HttpChannelInfoResponse.fromjson(Http::GetResult(_Request));

	return K_CurrentAndNextChannelProgram {
		Uid = HttpChannelInfoResponse.uid,
		Name = HttpChannelInfoResponse.name,
		PlayerCount = HttpChannelInfoResponse.playerCount,
		CurrentTimeSlot = K_ChannelProgram {
			StartTimestamp = HttpChannelInfoResponse.currentTimeSlot.startTimestamp,
			EndTimestamp = HttpChannelInfoResponse.currentTimeSlot.endTimestamp,
			Maps = HttpChannelInfoResponse.currentTimeSlot.maps,
			Name = HttpChannelInfoResponse.currentTimeSlot.name,
			CurrentMap = HttpChannelInfoResponse.currentTimeSlot.currentMap,
			RelativeStart = HttpChannelInfoResponse.currentTimeSlot.relativeStart,
			RelativeEnd = HttpChannelInfoResponse.currentTimeSlot.relativeEnd,
			MediaUrl = HttpChannelInfoResponse.currentTimeSlot.mediaUrl,
			RoomId = HttpChannelInfoResponse.currentTimeSlot.roomId,
			CreatorAccountId = HttpChannelInfoResponse.currentTimeSlot.creatorAccountId,
			LatestEditorAccountId = HttpChannelInfoResponse.currentTimeSlot.latestEditorAccountId
		},
		NextTimeSlot = K_ChannelProgram {
			StartTimestamp = HttpChannelInfoResponse.nextTimeSlot.startTimestamp,
			EndTimestamp = HttpChannelInfoResponse.nextTimeSlot.endTimestamp,
			Maps = HttpChannelInfoResponse.nextTimeSlot.maps,
			Name = HttpChannelInfoResponse.nextTimeSlot.name,
			CurrentMap = HttpChannelInfoResponse.nextTimeSlot.currentMap,
			RelativeStart = HttpChannelInfoResponse.nextTimeSlot.relativeStart,
			RelativeEnd = HttpChannelInfoResponse.nextTimeSlot.relativeEnd,
			MediaUrl = HttpChannelInfoResponse.nextTimeSlot.mediaUrl,
			RoomId = HttpChannelInfoResponse.nextTimeSlot.roomId,
			CreatorAccountId = HttpChannelInfoResponse.nextTimeSlot.creatorAccountId,
			LatestEditorAccountId = HttpChannelInfoResponse.nextTimeSlot.latestEditorAccountId
		}
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the grid of a channel
 *
 *	@param	_ChannelUid								The Uid of the channel
 *
 *	@return														The request
 */
Http::K_Request GetChannelGrid(Text _ChannelUid) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetChannelGrid, [C_RouteParameter_ChannelUid => _ChannelUid]);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Channel^Route, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_ChannelGrid GetResponseFromGetChannelGrid(Http::K_Request _Request) {
	declare K_HttpChannelGrid HttpChannelGridResponse;
	HttpChannelGridResponse.fromjson(Http::GetResult(_Request));

	declare K_ChannelGridDays[] ChannelGridDays;
	foreach (HttpChannelGridDays in HttpChannelGridResponse.days) {
		declare K_ChannelGridHours[] ChannelGridHours;
		foreach (HttpChannelGridHours in HttpChannelGridDays.hours) {
			ChannelGridHours.add(K_ChannelGridHours {
				Hour = HttpChannelGridHours.hour,
				Program = K_ChannelProgram {
					Id = HttpChannelGridHours.program.id,
					Maps = HttpChannelGridHours.program.maps,
					Name = HttpChannelGridHours.program.name,
					MediaUrl = HttpChannelGridHours.program.mediaUrl
				}
			});
		}

		ChannelGridDays.add(K_ChannelGridDays {
			Day = HttpChannelGridDays.day,
			Hours = ChannelGridHours
		});
	}

	return K_ChannelGrid{
		Days = ChannelGridDays
	};
}