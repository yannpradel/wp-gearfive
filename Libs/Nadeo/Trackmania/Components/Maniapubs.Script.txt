/**
 *	Component: Maniapubs
 */
#Const Version		"1.1.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Components/Maniapubs.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-maniapubs" //< Component name
#Const P "ComponentManiapubs_" //< Prefix used to differentiate functions/variables in the script
#Const C_NavZone "ComponentManiapubs_quad-activation"
#Const C_NavGroup "ComponentManiapubs_NavGroup"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {
	declare Real AdsMargin = 2.5;
	declare Real Opacity_Unfocus = 0.6;

	declare Vec2 Size_ManiapubFrame = <140., 90.>;
	declare Vec2 Size_ManiapubControls = <10., 10.>;
	declare Vec2 Size_ButtonLink = MLHelpers::KeepRatioFromY(808., 112., Size_ManiapubControls.Y);
	declare Real Size_ArrowSpacing = Size_ButtonLink.X + 10.;
	declare Vec2 Size_Activation = <Size_ArrowSpacing + Size_ManiapubControls.X, Size_ManiapubControls.Y>;
	declare Real SizeX_Ads_64x41 = (Size_ManiapubFrame.X-10.)*64/(64+AdsMargin+(41*2/3)); //< Compute the horizontal size of the 64x41 ad depending on the size of the maniapub frame and its content
	declare Vec2 Size_Ads_64x41 = MLHelpers::KeepRatioFromX(64., 41., SizeX_Ads_64x41);
	declare Vec2 Size_Ads_64x10 = MLHelpers::KeepRatioFromX(64., 10., SizeX_Ads_64x41);
	declare Vec2 Size_Ads_2x3 = <(Size_Ads_64x10.Y + Size_Ads_64x41.Y + AdsMargin)*2/3, Size_Ads_64x10.Y + Size_Ads_64x41.Y + AdsMargin>;
	declare Vec2[Text] Size_Ads = [
		Const::C_InfoPanels_2x3 => Size_Ads_2x3,
		Const::C_InfoPanels_64x41 => Size_Ads_64x41,
		Const::C_InfoPanels_64x10 => Size_Ads_64x10
	];

	declare Vec2 Pos_ManiapubControls = <0., -Size_ManiapubFrame.Y/2 - 10.>;

	declare Text ML_Maniapubs;
	for (Index, 0, 1) { //< Create the current and the next slide to display.
		ML_Maniapubs ^= """
			<frame class="{{{P}}}C_Class_Slide">
				<frameinstance modelid="{{{P}}}framemodel-ads" id="{{{P}}}frame-ad-64x10"/>
				<frameinstance modelid="{{{P}}}framemodel-ads" id="{{{P}}}frame-ad-2x3"/>
				<frameinstance modelid="{{{P}}}framemodel-ads" id="{{{P}}}frame-ad-64x41"/>
			</frame>
		""";
	}

	return MV::Component(
		C_Name,
		"""
<framemodel id="{{{P}}}framemodel-ads">
	<quad id="{{{P}}}quad-image" halign="center" valign="center" z-index="1"/>
	<quad id="{{{P}}}quad-contour" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentThree)}}}" halign="center" valign="center" z-index="2"/>
</framemodel>

<frame class="{{{P}}}frame-container-maniapubs">
	<frame z-index="1" id="{{{P}}}frame-navigation-container" class="{{{Navigation::C_Class_Container}}}">
		<quad id="{{{P}}}quad-activation" class="{{{Navigation::C_Class_ActivationZone}}}" pos="{{{Pos_ManiapubControls.X}}} {{{Pos_ManiapubControls.Y}}}" size="{{{Size_Activation.X}}} {{{Size_Activation.Y}}}" halign="center" valign="center" z-index="10" opacity="0" scriptevents="1"/>
		<frame id="{{{P}}}frame-maniapub-mask" size="{{{Size_ManiapubFrame.X}}} {{{Size_ManiapubFrame.Y}}}" halign="center" valign="center">
			<frame id="{{{P}}}frame-maniapub-window">
				{{{ML_Maniapubs}}}
			</frame>
		</frame>
		<frame id="{{{P}}}frame-maniapub-controls" pos="{{{Pos_ManiapubControls.X}}} {{{Pos_ManiapubControls.Y}}}">
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="{{{P}}}button-slide-previous"
				class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{P}}}leave-maniapub"
				pos="{{{-Size_ArrowSpacing * 0.5}}} 0"
				data-size="{{{Size_ManiapubControls.X}}} {{{Size_ManiapubControls.Y}}}"
				data-bgcolor="FFF"
				data-opacityunfocus="{{{Opacity_Unfocus}}}"
				data-image="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-imagefocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;right"
				data-nav-targets="_;_;{{{P}}}button-slide-title"
				data-nav-group="{{{C_NavGroup}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="ArrowSelect"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="{{{P}}}button-slide-title"
				class="{{{Navigation::C_Class}}} {{{P}}}leave-maniapub"
				data-size="{{{Size_ButtonLink.X}}} {{{Size_ButtonLink.Y}}}"
				data-labelsize="{{{Size_ButtonLink.X - 20.}}} {{{Size_ButtonLink.Y}}}"
				data-fitlabel="3" data-fitlabelstep="0.25"
				data-opacityunfocus=".6"
				data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentThree)}}}"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-image="{{{Const::C_ImageUrl_Common_Entry_BG}}}"
				data-imagefocus="{{{Const::C_ImageUrl_Common_Entry_BG}}}"
				data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
				data-icon="{{{Icons::C_Icon_128x128_Link}}}"
				data-iconfocus="{{{Icons::C_Icon_128x128_Link}}}"
				data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
				data-iconxpos=".12" data-iconypos="-.49"
				data-iconopacityunfocus=".6"
				data-textsize="4.5"
				data-textitalicslope=".2"
				data-textopacityunfocus=".6"
				data-textxpos="0.57" data-textypos="-0.55"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;left;right"
				data-nav-targets="_;_;{{{P}}}button-slide-previous;{{{P}}}button-slide-next"
				data-nav-group="{{{C_NavGroup}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="{{{P}}}button-slide-next"
				class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{P}}}leave-maniapub"
				pos="{{{Size_ArrowSpacing * 0.5}}} 0"
				data-size="{{{Size_ManiapubControls.X}}} {{{Size_ManiapubControls.Y}}}"
				data-bgcolor="FFF"
				data-opacityunfocus="{{{Opacity_Unfocus}}}"
				data-image="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
				data-imagefocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;left"
				data-nav-targets="_;_;{{{P}}}button-slide-title"
				data-nav-group="{{{C_NavGroup}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="ArrowSelect"
			/>
		</frame>
	</frame>
</frame>
		""",
		"""
#Include "Libs/Nadeo/Trackmania/Components/PluginAdverts.Script.txt" as {{{P}}}PluginAdverts
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as {{{P}}}Tools

#Const Size_Ads {{{dump(Size_Ads)}}}
#Const C_InfoPanels_Sizes {{{dump(Const::C_InfoPanels_Sizes)}}}
#Const C_ImageUrl_Ads_Contour {{{dump(Const::C_ImageUrl_Ads_Contour)}}}
#Const C_Thickness_Ads_Contour 10. //< Thickness of the contour in pixels
#Const C_Size_Ads_Contour [ //< Assets size in pixels
	{{{dump(Const::C_InfoPanels_2x3)}}} => <512., 760.>,
	{{{dump(Const::C_InfoPanels_64x41)}}} => <1080., 692.>,
	{{{dump(Const::C_InfoPanels_64x10)}}} => <992., 176.>
]

#Const {{{P}}}C_Maniapub_Interval 10000
#Const {{{P}}}C_Maniapub_Previous -1
#Const {{{P}}}C_Maniapub_Reset 0
#Const {{{P}}}C_Maniapub_Next 1

#Const {{{P}}}C_Anim_Duration 250

#Struct {{{P}}}K_State {
	CMlControl LastControlFocused;
	CMlFrame Frame_CurrentSlide;
	Integer CurrentKey;
	Integer Timer;
	{{{P}}}PluginAdverts::K_Maniapub CurrentManiapub;
	{{{P}}}PluginAdverts::K_Maniapub[] Maniapubs;
}

#Struct {{{P}}}K_Properties {
	Boolean IsFocused;
	Boolean IsLocked;
	Boolean IsManiapubs;
	Integer Interval;
	Text HAlign;
	Text VAlign;
	Vec2 Size;
	{{{P}}}K_State State;
}
		""",
		"""
declare CMlFrame[] {{{P}}}G_Maniapubs;

Boolean {{{P}}}IsManiapubsAvailable() {
	return {{{P}}}PluginAdverts::IsManiapubsAvailable();
}

Boolean {{{P}}}IsManiapubs(CMlControl _Frame_Maniapubs) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_Maniapubs;
	return {{{P}}}Properties.IsManiapubs;
}

Boolean {{{P}}}IsFocused(CMlControl _Frame_Maniapubs) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_Maniapubs;
	return {{{P}}}Properties.IsFocused;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Handle the navigation inside the maniapub container
Void {{{P}}}Private_ButtonFocus(CMlFrame _Frame_Maniapubs, CMlControl _From, CMlControl _To) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_Maniapubs;
	assert({{{P}}}Properties.IsManiapubs, "Control '"^_Frame_Maniapubs.ControlId^"' is not a maniapub");
	if ({{{P}}}Properties.IsLocked) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, _From as CMlFrame);
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, _To as CMlFrame);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Enable the navigation inside the maniapub container
Void {{{P}}}Focus(CMlFrame _Frame_Maniapubs) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_Maniapubs;
	assert({{{P}}}Properties.IsManiapubs, "Control '"^_Frame_Maniapubs.ControlId^"' is not a maniapub");
	if ({{{P}}}Properties.IsLocked) return;

	if (!{{{P}}}Properties.IsFocused) {
		declare CMlFrame Button_Previous <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}button-slide-previous") as CMlFrame);
		declare CMlFrame Button_Title <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}button-slide-title") as CMlFrame);
		declare CMlFrame Button_Next <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}button-slide-next") as CMlFrame);
		declare CMlFrame Frame_NavigationContainer <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}frame-navigation-container") as CMlFrame);
		declare CMlQuad Quad_Activation <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}quad-activation") as CMlQuad);

		// Enable navigation
		{{{P}}}Properties.IsFocused = True;
		Quad_Activation.Visible = !{{{P}}}Properties.IsFocused;
		{{{Navigation::P}}}EnableContainer(This, Frame_NavigationContainer, {{{P}}}Properties.IsFocused);

		// Entering maniapub component - focus the default button if possible
		if ({{{P}}}Properties.State.LastControlFocused != Null && !{{{Navigation::P}}}IsLocked({{{P}}}Properties.State.LastControlFocused)) {
			{{{P}}}Private_ButtonFocus(_Frame_Maniapubs, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup}}}"), {{{P}}}Properties.State.LastControlFocused);
		} else if (!{{{Navigation::P}}}IsLocked(Button_Previous)) {
			{{{P}}}Private_ButtonFocus(_Frame_Maniapubs, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup}}}"), Button_Previous);
		} else if (!{{{Navigation::P}}}IsLocked(Button_Next)) {
			{{{P}}}Private_ButtonFocus(_Frame_Maniapubs, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup}}}"), Button_Next);
		} else {
			{{{P}}}Private_ButtonFocus(_Frame_Maniapubs, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup}}}"), Button_Title);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Disable the navigation inside the maniapub container
Void {{{P}}}Unfocus(CMlFrame _Frame_Maniapubs) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_Maniapubs;
	assert({{{P}}}Properties.IsManiapubs, "Control '"^_Frame_Maniapubs.ControlId^"' is not a maniapub");
	if ({{{P}}}Properties.IsLocked) return;

	if ({{{P}}}Properties.IsFocused) {
		declare CMlFrame Frame_NavigationContainer <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}frame-navigation-container") as CMlFrame);
		declare CMlQuad Quad_Activation <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}quad-activation") as CMlQuad);

		// Disable navigation
		{{{P}}}Properties.IsFocused = False;
		{{{P}}}Properties.State.LastControlFocused = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup}}}");
		Quad_Activation.Visible = !{{{P}}}Properties.IsFocused;
		{{{Navigation::P}}}EnableContainer(This, Frame_NavigationContainer, {{{P}}}Properties.IsFocused);

		// Leaving maniapub component - unfocus buttons
		{{{P}}}Private_ButtonFocus(_Frame_Maniapubs, {{{P}}}Properties.State.LastControlFocused, Null);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Update the given slide
Void {{{P}}}UpdateSlide(CMlFrame _Frame_Slide, {{{P}}}PluginAdverts::K_Maniapub _Maniapub) {
	assert(_Frame_Slide.HasClass("{{{P}}}C_Class_Slide"), "Control '"^_Frame_Slide.ControlId^"' is not a maniapub slide.");

	declare CMlFrame Frame_Ad_2x3 <=> (_Frame_Slide.GetFirstChild("{{{P}}}frame-ad-2x3") as CMlFrame);
	declare CMlFrame Frame_Ad_64x41 <=> (_Frame_Slide.GetFirstChild("{{{P}}}frame-ad-64x41") as CMlFrame);
	declare CMlFrame Frame_Ad_64x10 <=> (_Frame_Slide.GetFirstChild("{{{P}}}frame-ad-64x10") as CMlFrame);
	declare Integer AdsNumber = 0;

	// Initialize the frame corresponding to the ratio of the ad
	foreach (Ratio in C_InfoPanels_Sizes) {
		declare CMlFrame Frame_Ad <=> (_Frame_Slide.GetFirstChild("{{{P}}}frame-ad-"^Ratio) as CMlFrame);

		if (_Maniapub.MediaUrl.existskey(Ratio) && _Maniapub.MediaUrl[Ratio] != "") {
			declare CMlQuad Quad_Image <=> (Frame_Ad.GetFirstChild("{{{P}}}quad-image") as CMlQuad);
			declare CMlQuad Quad_Contour <=> (Frame_Ad.GetFirstChild("{{{P}}}quad-contour") as CMlQuad);
			AdsNumber += 1;

			{{{P}}}Tools::Align(Frame_Ad, Size_Ads[Ratio], {{{P}}}Tools::C_HAlign_Center, {{{P}}}Tools::C_VAlign_Bottom);
			Quad_Image.ImageUrl = _Maniapub.MediaUrl[Ratio];
			Quad_Contour.ImageUrl = C_ImageUrl_Ads_Contour[Ratio];
			Quad_Image.Size.X = Size_Ads[Ratio].X - (2*C_Thickness_Ads_Contour/C_Size_Ads_Contour[Ratio].X)*Size_Ads[Ratio].X; //< Remove the thickness of the contour to have the image inside the contour
			Quad_Image.Size.Y = Size_Ads[Ratio].Y - (2*C_Thickness_Ads_Contour/C_Size_Ads_Contour[Ratio].Y)*Size_Ads[Ratio].Y; //< Remove the thickness of the contour to have the image inside the contour
			Quad_Contour.Size = Size_Ads[Ratio];
			Frame_Ad.Show();
		} else {
			Frame_Ad.Hide();
		}
	}

	// Update ads layout
	switch (AdsNumber) {
		case 1: {
			Frame_Ad_64x41.RelativePosition_V3 += <0., {{{-Size_ManiapubFrame.Y*0.5}}}>;
			Frame_Ad_64x10.RelativePosition_V3 += <0., {{{-Size_ManiapubFrame.Y*0.5}}}>;
			Frame_Ad_2x3.RelativePosition_V3 += <0., {{{-Size_ManiapubFrame.Y*0.5}}}>;
		}
		case 2: {
			if (_Maniapub.MediaUrl["{{{Const::C_InfoPanels_2x3}}}"] != "" && _Maniapub.MediaUrl["{{{Const::C_InfoPanels_64x41}}}"] != "") {
				{{{P}}}Tools::Align(Frame_Ad_64x41, {{{Size_Ads_64x41}}}, {{{P}}}Tools::C_HAlign_Right, {{{P}}}Tools::C_VAlign_Center);
				Frame_Ad_2x3.RelativePosition_V3 += <{{{Size_Ads_64x41.X*0.5 + AdsMargin*0.5}}}, {{{-Size_ManiapubFrame.Y*0.5}}}>;
				Frame_Ad_64x41.RelativePosition_V3 += <Frame_Ad_2x3.RelativePosition_V3.X - {{{Size_Ads_2x3.X*0.5 + AdsMargin}}}, Frame_Ad_2x3.RelativePosition_V3.Y>;
			} else if (_Maniapub.MediaUrl["{{{Const::C_InfoPanels_2x3}}}"] != "" && _Maniapub.MediaUrl["{{{Const::C_InfoPanels_64x10}}}"] != "") {
				Frame_Ad_64x10.RelativePosition_V3 += <0., {{{-Size_ManiapubFrame.Y*0.5}}}>;
				Frame_Ad_2x3.RelativePosition_V3 += <0., Frame_Ad_64x10.RelativePosition_V3.Y + {{{Size_Ads_64x10.Y*0.5 + AdsMargin}}}>;
			} else if (_Maniapub.MediaUrl["{{{Const::C_InfoPanels_64x41}}}"] != "" && _Maniapub.MediaUrl["{{{Const::C_InfoPanels_64x10}}}"] != "") {
				Frame_Ad_64x41.RelativePosition_V3 += <0., {{{-Size_ManiapubFrame.Y*0.5}}}>;
				Frame_Ad_64x10.RelativePosition_V3 += <0., Frame_Ad_64x41.RelativePosition_V3.Y + {{{Size_Ads_64x41.Y*0.5 + AdsMargin}}}>;
			}
		}
		case 3: {
			{{{P}}}Tools::Align(Frame_Ad_2x3, {{{Size_Ads_2x3}}}, {{{P}}}Tools::C_HAlign_Left, {{{P}}}Tools::C_VAlign_Bottom);
			Frame_Ad_64x41.RelativePosition_V3 += <{{{-Size_Ads_2x3.X*0.5 - AdsMargin*0.5}}}, {{{-Size_ManiapubFrame.Y*0.5}}}>;
			Frame_Ad_2x3.RelativePosition_V3 += <Frame_Ad_64x41.RelativePosition_V3.X + {{{Size_Ads_64x41.X*0.5 + AdsMargin}}}, {{{-Size_ManiapubFrame.Y*0.5}}}>;
			Frame_Ad_64x10.RelativePosition_V3 += <Frame_Ad_64x41.RelativePosition_V3.X, Frame_Ad_64x41.RelativePosition_V3.Y + {{{Size_Ads_64x41.Y*0.5 + AdsMargin}}}>;
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Change the slide currently displayed in the maniapub component
Void Private_Cycle(CMlFrame _Frame_Maniapubs, Integer _ManiapubShift) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_Maniapubs;
	assert({{{P}}}Properties.IsManiapubs, "Control '"^_Frame_Maniapubs.ControlId^"' is not a maniapub");

	declare CMlFrame Frame_ManiapubsWindow <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}frame-maniapub-window") as CMlFrame);
	declare CMlFrame Button_Title <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}button-slide-title") as CMlFrame);

	// Handle infinite cycle through the maniapub
	if (_ManiapubShift == {{{P}}}C_Maniapub_Reset || {{{P}}}Properties.State.CurrentKey + _ManiapubShift > {{{P}}}Properties.State.Maniapubs.count-1) {
		{{{P}}}Properties.State.CurrentKey = 0;
	} else if ({{{P}}}Properties.State.CurrentKey + _ManiapubShift < 0) {
		{{{P}}}Properties.State.CurrentKey = {{{P}}}Properties.State.Maniapubs.count-1;
	} else {
		{{{P}}}Properties.State.CurrentKey = {{{P}}}Properties.State.CurrentKey + _ManiapubShift;
	}

	// Prepare for the upcoming animation
	Frame_ManiapubsWindow.RelativePosition_V3.X = 0.;
	{{{P}}}Properties.State.Frame_CurrentSlide.ZIndex = 0.;
	{{{P}}}Properties.State.Frame_CurrentSlide.RelativePosition_V3.X = 0.;
	foreach (Control_Slide in Frame_ManiapubsWindow.Controls) {
		if (Control_Slide.Id != {{{P}}}Properties.State.Frame_CurrentSlide.Id && {{{P}}}Properties.State.Maniapubs.existskey({{{P}}}Properties.State.CurrentKey)) {
			{{{P}}}Properties.State.CurrentManiapub = {{{P}}}Properties.State.Maniapubs[{{{P}}}Properties.State.CurrentKey];
			{{{P}}}Properties.State.Frame_CurrentSlide = Control_Slide as CMlFrame;

			Control_Slide.ZIndex = 1.;
			Control_Slide.RelativePosition_V3.X = {{{P}}}Properties.Size.X * _ManiapubShift;
			{{{P}}}UpdateSlide(Control_Slide as CMlFrame, {{{P}}}Properties.State.CurrentManiapub);
			{{{Button::P}}}SetValue(This, Button_Title, {{{P}}}Properties.State.CurrentManiapub.Name);
			{{{Navigation::P}}}Lock(Button_Title, !Http.IsValidUrl({{{P}}}Properties.State.CurrentManiapub.ExternalUrl));
			if (Http.IsValidUrl({{{P}}}Properties.State.CurrentManiapub.ExternalUrl)) {
				{{{Button::P}}}SetIcon(This, Button_Title, "{{{Icons::C_Icon_128x128_Link}}}");
				{{{Button::P}}}SetIconFocus(This, Button_Title, "{{{Icons::C_Icon_128x128_Link}}}");
				{{{Button::P}}}SetTextXPos(This, Button_Title, 0.57);
			} else {
				{{{Button::P}}}SetIcon(This, Button_Title, "");
				{{{Button::P}}}SetIconFocus(This, Button_Title, "");
				{{{Button::P}}}SetTextXPos(This, Button_Title, 0.5);
			}
			break;
		}
	}

	// Anim the maniapub
	declare Vec2 Pos = <-{{{P}}}Properties.Size.X * _ManiapubShift, Frame_ManiapubsWindow.RelativePosition_V3.Y>;
	AnimMgr.Flush(Frame_ManiapubsWindow);
	AnimMgr.Add(Frame_ManiapubsWindow, "<anim pos=\""^Pos.X^" "^Pos.Y^"\" />", {{{P}}}C_Anim_Duration, CAnimManager::EAnimManagerEasing::Linear);

	// Reset cycle timer
	{{{P}}}Properties.State.Timer = Now + {{{P}}}Properties.Interval;
}
Void {{{P}}}Reset(CMlFrame _Frame_Maniapubs) {
	Private_Cycle(_Frame_Maniapubs, {{{P}}}C_Maniapub_Reset);
}
Void {{{P}}}NextSlide(CMlFrame _Frame_Maniapubs) {
	Private_Cycle(_Frame_Maniapubs, {{{P}}}C_Maniapub_Next);
}
Void {{{P}}}PreviousSlide(CMlFrame _Frame_Maniapubs) {
	Private_Cycle(_Frame_Maniapubs, {{{P}}}C_Maniapub_Previous);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	If valid, open the url associated with the slide currently displayed
Void {{{P}}}SelectSlide(CMlFrame _Frame_Maniapubs) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_Maniapubs;
	if (Http.IsValidUrl({{{P}}}Properties.State.CurrentManiapub.ExternalUrl)) {
		OpenLink({{{P}}}PluginAdverts::GetManiapubLink({{{P}}}Properties.State.CurrentManiapub), CMlScript::LinkType::ExternalBrowser);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Update the component with the latest maniapubs available
Void {{{P}}}Update(CMlFrame _Frame_Maniapubs) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_Maniapubs;
	assert({{{P}}}Properties.IsManiapubs, "Control '"^_Frame_Maniapubs.ControlId^"' is not a maniapub component.");

	declare CMlFrame Button_Next <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}button-slide-next") as CMlFrame);
	declare CMlFrame Button_Previous <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}button-slide-previous") as CMlFrame);
	declare CMlFrame Button_Title <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}button-slide-title") as CMlFrame);
	declare CMlFrame Frame_NavigationContainer <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}frame-navigation-container") as CMlFrame);

	// Get available maniapubs
	{{{P}}}Properties.State.Maniapubs = {{{P}}}PluginAdverts::GetManiapubs();

	// Button visibility
	{{{Button::P}}}SetVisibilityAndNavigation(Button_Previous, {{{P}}}Properties.State.Maniapubs.count > 1);
	{{{Button::P}}}SetVisibilityAndNavigation(Button_Title, {{{P}}}Properties.State.Maniapubs.count > 0);
	{{{Button::P}}}SetVisibilityAndNavigation(Button_Next, {{{P}}}Properties.State.Maniapubs.count > 1);
	if ({{{P}}}Properties.IsFocused && {{{P}}}Properties.State.Maniapubs.count > 1) {
		{{{P}}}Private_ButtonFocus(_Frame_Maniapubs, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup}}}"), Button_Title);
	}

	// Navigation
	{{{P}}}Properties.IsLocked = {{{P}}}Properties.State.Maniapubs.count <= 0;
	{{{Navigation::P}}}Lock(_Frame_Maniapubs, {{{P}}}Properties.State.Maniapubs.count <= 0 || ({{{P}}}Properties.State.Maniapubs.count == 1 && !Http.IsValidUrl({{{P}}}Properties.State.Maniapubs[0].ExternalUrl)));
	if ({{{Navigation::P}}}IsLocked(Button_Previous)) {{{Navigation::P}}}ChangeControlTarget(This, Frame_NavigationContainer, Button_Title, "left", "_");
	else {{{Navigation::P}}}ChangeControlTarget(This, Frame_NavigationContainer, Button_Title, "left", Button_Previous.ControlId);
	if ({{{Navigation::P}}}IsLocked(Button_Next)) {{{Navigation::P}}}ChangeControlTarget(This, Frame_NavigationContainer, Button_Title, "right", "_");
	else {{{Navigation::P}}}ChangeControlTarget(This, Frame_NavigationContainer, Button_Title, "right", Button_Next.ControlId);

	// Reset to the first maniapub
	{{{P}}}Reset(_Frame_Maniapubs);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Initialize the maniapubs component
Void {{{P}}}InitManiapubs(CMlFrame _Frame_Maniapubs)	{
	if (_Frame_Maniapubs == Null) return;

	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_Maniapubs;
	declare CMlFrame Button_Next <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}button-slide-next") as CMlFrame);
	declare CMlFrame Button_Previous <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}button-slide-previous") as CMlFrame);
	declare CMlFrame Button_Title <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}button-slide-title") as CMlFrame);
	declare CMlFrame Frame_ManiapubsWindow <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}frame-maniapub-window") as CMlFrame);
	declare CMlFrame Frame_NavigationContainer <=> (_Frame_Maniapubs.GetFirstChild("{{{P}}}frame-navigation-container") as CMlFrame);

	// Initialize the Properties structure
	{{{P}}}Properties = {{{P}}}K_Properties {
		IsManiapubs = True,
		IsFocused = False,
		IsLocked = False,
		Interval = {{{P}}}C_Maniapub_Interval,
		HAlign = {{{P}}}Tools::C_HAlign_Center,
		VAlign = {{{P}}}Tools::C_VAlign_Center,
		Size = {{{Size_ManiapubFrame}}},
		State = {{{P}}}K_State {
			LastControlFocused = Button_Previous,
			Frame_CurrentSlide = Frame_ManiapubsWindow.Controls[0] as CMlFrame,
			CurrentKey = 0,
			Timer = 0
		}
	};

	// Handle navigation inputs
	if ({{{Navigation::P}}}GetControlTarget(_Frame_Maniapubs, CMlScriptEvent::EMenuNavAction::Left) != Null) {
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_NavigationContainer, Button_Previous, "left", "_");
	}
	if ({{{Navigation::P}}}GetControlTarget(_Frame_Maniapubs, CMlScriptEvent::EMenuNavAction::Right) != Null) {
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_NavigationContainer, Button_Next, "right", "_");
	}
	if ({{{Navigation::P}}}GetControlTarget(_Frame_Maniapubs, CMlScriptEvent::EMenuNavAction::Up) != Null) {
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_NavigationContainer, Button_Previous, "up", "_");
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_NavigationContainer, Button_Title, "up", "_");
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_NavigationContainer, Button_Next, "up", "_");
	}
	if ({{{Navigation::P}}}GetControlTarget(_Frame_Maniapubs, CMlScriptEvent::EMenuNavAction::Down) != Null) {
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_NavigationContainer, Button_Previous, "down", "_");
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_NavigationContainer, Button_Title, "down", "_");
		{{{Navigation::P}}}ChangeControlTarget(This, Frame_NavigationContainer, Button_Next, "down", "_");
	}
	{{{Navigation::P}}}EnableInputs(_Frame_Maniapubs, False);

	// First update of the component after initialization
	{{{P}}}Update(_Frame_Maniapubs);
}

***MainInit***
***
Page.GetClassChildren("{{{P}}}frame-container-maniapubs", Page.MainFrame, True);
foreach (Control in Page.GetClassChildren_Result) {
	declare CMlFrame Frame_ManiapubContainer = (Control as CMlFrame);
	{{{P}}}InitManiapubs(Frame_ManiapubContainer.Parent);
	{{{P}}}G_Maniapubs.add(Frame_ManiapubContainer.Parent);
}
***

***MainLoop***
***
/* Maniapub automatic cycling */
if ({{{P}}}G_Maniapubs.count > 0) {
	foreach (Maniapub in {{{P}}}G_Maniapubs) {
		declare {{{P}}}K_Properties {{{P}}}Properties for Maniapub;
		if ({{{P}}}Properties.Interval != 0 && {{{P}}}Properties.State.Maniapubs.count > 1 && Now > {{{P}}}Properties.State.Timer) {
			Private_Cycle(Maniapub, {{{P}}}C_Maniapub_Next);
		}
	}
}

/* Navigation events */
foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
	switch (Event.Type) {
		case {{{Navigation::P}}}C_EventType_NavigateInput: {
			if ({{{Navigation::P}}}IsEventFromNestedContainer(This, Event.Container) && Event.Container.ControlId == "{{{P}}}frame-navigation-container") {
				assert({{{P}}}IsManiapubs(Event.Container.Parent.Parent), "The manialink has been modified, we do not point to the right frame anymore");
				declare CMlFrame Frame_Maniapub = Event.Container.Parent.Parent;
				if ({{{P}}}IsFocused(Frame_Maniapub)) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						switch (Event.To.ControlId) {
							case "{{{P}}}button-slide-previous": {{{P}}}PreviousSlide(Frame_Maniapub);
							case "{{{P}}}button-slide-title": {{{P}}}SelectSlide(Frame_Maniapub);
							case "{{{P}}}button-slide-next": {{{P}}}NextSlide(Frame_Maniapub);
						}
					} else if (
							Event.From != Null &&
							Event.From == Event.To &&
							Event.From.HasClass("{{{P}}}leave-maniapub")
						) {
							{{{Navigation::P}}}EnableInputs(Frame_Maniapub, True);
							{{{Navigation::P}}}ApplyInput(This, Frame_Maniapub, Event.Input, Event.UserIndex, []);
							{{{Navigation::P}}}EnableInputs(Frame_Maniapub, False);
					} else {
						{{{P}}}Private_ButtonFocus(Frame_Maniapub, Event.From, Event.To);
					}
				}
			}
		}
		case {{{Navigation::P}}}C_EventType_NavigateMouse: {
			if ({{{Navigation::P}}}IsEventFromNestedContainer(This, Event.Container) && Event.Container.ControlId == "{{{P}}}frame-navigation-container") {
				assert({{{P}}}IsManiapubs(Event.Container.Parent.Parent), "The manialink has been modified, we do not point to the right frame anymore");
				declare CMlFrame Frame_Maniapub = Event.Container.Parent.Parent;
				if ({{{P}}}IsFocused(Frame_Maniapub)) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						switch (Event.To.ControlId) {
							case "{{{P}}}button-slide-previous": {{{P}}}PreviousSlide(Frame_Maniapub);
							case "{{{P}}}button-slide-title": {{{P}}}SelectSlide(Frame_Maniapub);
							case "{{{P}}}button-slide-next": {{{P}}}NextSlide(Frame_Maniapub);
						}
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						{{{P}}}Private_ButtonFocus(Frame_Maniapub, Event.From, Event.To);
					}
				}
			}
		}
	}
}
***
		""",
		[
			Button::ComponentV2(),
			Navigation::ComponentV2()
		],
		[]
	);
}