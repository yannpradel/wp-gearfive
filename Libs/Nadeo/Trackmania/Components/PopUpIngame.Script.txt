/**
 *	Component: PopUpIngame
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Components/PopUpIngame.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-pop-up-ingame" //< Component name
#Const P "ComponentPopUpIngame_" //< Prefix use to differentiate functions/variables in the script
#Const C_NavGroupName "component-pop-up-ingame"

#Const C_MaxButtons 2

#Const C_Button_Null -1
#Const C_Button_0 0
#Const C_Button_1 1
#Const C_Button_Cancel 2

#Const C_ButtonSize <60., 15.>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {
	return MV::Component(
		C_Name,
		"""
<stylesheet>
	<style class="{{{P}}}label-base" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textsize="4" textcolor="FFF"/>
	<style class="{{{P}}}quad-base" halign="center" valign="center"/>
</stylesheet>
<frame id="{{{P}}}frame-pop-up">
	<quad z-index="0" size="164 92.5" class="{{{P}}}quad-base" bgcolor="777" />
	<frame id="{{{P}}}frame-button-0" pos="40 -35"
		data-nav-inputs="select;cancel;left"
		data-nav-targets="_;_;{{{P}}}frame-button-1"
		data-nav-zone="{{{P}}}quad-nav"
		data-nav-group="{{{C_NavGroupName}}}"
		class="{{{Navigation::C_Class}}}"
		z-index="1"
	>
		<quad id="{{{P}}}quad-nav" z-index="2" size="{{{C_ButtonSize.X}}} {{{C_ButtonSize.Y}}}" bgcolor="0077ff" scriptevents="1" class="{{{Navigation::C_Class_ActivationZone}}} {{{P}}}quad-base"/>
		<quad id="{{{P}}}quad-focus" z-index="1" size="{{{C_ButtonSize.X+1}}} {{{C_ButtonSize.Y+1}}}" bgcolor="ffff00" class="{{{P}}}quad-base" hidden="1"/>
		<label id="{{{P}}}label-button" z-index="3" size="{{{C_ButtonSize.X}}} {{{C_ButtonSize.Y}}}" class="{{{P}}}label-base" textprefix="$t"/>
	</frame>
	<frame id="{{{P}}}frame-button-1" pos="-40 -35"
		data-nav-inputs="select;cancel;right"
		data-nav-targets="_;_;{{{P}}}frame-button-0"
		data-nav-zone="{{{P}}}quad-nav"
		data-nav-group="{{{C_NavGroupName}}}"
		class="{{{Navigation::C_Class}}}"
		z-index="1"
	>
		<quad id="{{{P}}}quad-nav" z-index="2" size="{{{C_ButtonSize.X}}} {{{C_ButtonSize.Y}}}" bgcolor="0077ff" scriptevents="1" class="{{{Navigation::C_Class_ActivationZone}}} {{{P}}}quad-base"/>
		<quad id="{{{P}}}quad-focus" z-index="1" size="{{{C_ButtonSize.X+1}}} {{{C_ButtonSize.Y+1}}}" bgcolor="ffff00" class="{{{P}}}quad-base" hidden="1"/>
		<label id="{{{P}}}label-button" z-index="3" size="{{{C_ButtonSize.X}}} {{{C_ButtonSize.Y}}}" class="{{{P}}}label-base" textprefix="$t"/>
	</frame>
</frame>
		""",
		"""
#Const {{{P}}}C_Button_Null {{{C_Button_Null}}}
#Const {{{P}}}C_Button_0 {{{C_Button_0}}}
#Const {{{P}}}C_Button_1 {{{C_Button_1}}}
#Const {{{P}}}C_Button_Cancel {{{C_Button_Cancel}}}

#Struct {{{P}}}K_Event_Input {
	Integer ButtonId;
	Boolean IsMouseClick;
}
		""",
		"""
declare CMlFrame {{{P}}}G_Frame_PopUp;
declare CMlFrame {{{P}}}G_Frame_Button0;
declare Boolean {{{P}}}G_EnabledMenuNavInputs;
declare {{{P}}}K_Event_Input {{{P}}}G_SelectedButton;
declare Boolean {{{P}}}G_DeleteSelectedButton;

Boolean {{{P}}}IsVisible() {
	return {{{P}}}G_Frame_PopUp.Visible;
}

Void {{{P}}}FocusVisible(CMlControl _NavToFocus, Boolean _IsVisible) {
	if (_NavToFocus == Null || !(_NavToFocus is CMlFrame)) return;
	declare Quad_Focus = ((_NavToFocus as CMlFrame).GetFirstChild("{{{P}}}quad-focus") as CMlQuad);
	if (Quad_Focus != Null) Quad_Focus.Visible = _IsVisible;
}

Void {{{P}}}Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		{{{P}}}FocusVisible(_From, False);
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		{{{P}}}FocusVisible(_To, True);
	}
}

Void {{{P}}}FocusDefault() {
	{{{P}}}Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), {{{P}}}G_Frame_Button0);
}

Void {{{P}}}ChangePopUpVisibility(Boolean _IsVisible) {
	{{{P}}}G_Frame_PopUp.Visible = _IsVisible;
	EnableMenuNavigation(_IsVisible, False, Null, 0);
	{{{P}}}G_EnabledMenuNavInputs = EnableMenuNavigationInputs;
	if (_IsVisible) {{{P}}}FocusDefault();
}

Void {{{P}}}Select(CMlControl _Control, Boolean _IsMouseClick) {
	if (_Control == Null) return;

	if (_Control.ControlId == "{{{P}}}frame-button-0") {
		{{{P}}}G_SelectedButton.ButtonId = {{{P}}}C_Button_0;
		{{{P}}}G_SelectedButton.IsMouseClick = _IsMouseClick;
	} else if (_Control.ControlId == "{{{P}}}frame-button-1") {
		{{{P}}}G_SelectedButton.ButtonId = {{{P}}}C_Button_1;
		{{{P}}}G_SelectedButton.IsMouseClick = _IsMouseClick;
	}
}

Void {{{P}}}Cancel() {
	{{{P}}}G_SelectedButton.ButtonId = {{{P}}}C_Button_Cancel;
	{{{P}}}G_SelectedButton.IsMouseClick = False;
}

Void {{{P}}}SetButtons(Text[] _ButtonsLabel) {
	for (Index, 0, {{{C_MaxButtons-1}}}) {
		declare CMlFrame Frame_Button <=> (Page.GetFirstChild("{{{P}}}frame-button-"^Index) as CMlFrame);
		if (_ButtonsLabel.existskey(Index) && _ButtonsLabel[Index] != "") {
			(Frame_Button.GetFirstChild("{{{P}}}label-button") as CMlLabel).Value = _ButtonsLabel[Index];
			Frame_Button.Show();
		} else {
			Frame_Button.Hide();
		}
	}
}

{{{P}}}K_Event_Input {{{P}}}GetSelectedButton() {
	return {{{P}}}G_SelectedButton;
}
***MainStart***
***
{{{P}}}G_SelectedButton = {{{P}}}K_Event_Input {
	ButtonId = {{{P}}}C_Button_Null,
	IsMouseClick = False
};
{{{P}}}G_DeleteSelectedButton = False;
{{{P}}}G_Frame_PopUp <=> (Page.GetFirstChild("{{{P}}}frame-pop-up") as CMlFrame);
{{{P}}}G_Frame_Button0 <=> ({{{P}}}G_Frame_PopUp.GetFirstChild("{{{P}}}frame-button-0") as CMlFrame);
{{{P}}}ChangePopUpVisibility(False);
{{{P}}}SetButtons([_("Ok")]);
{{{Navigation::P}}}UseLocalEvents(This, True);
***
***MainLoop***
***
if ({{{P}}}IsVisible()) {
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						{{{P}}}Select(Event.To, False);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						{{{P}}}Cancel();
					} else {
						{{{P}}}Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						{{{P}}}Select(Event.To, True);
					} else {
						{{{P}}}Focus(Event.From, Event.To);
					}
				}
			}
		}
	}
} else if ({{{P}}}G_EnabledMenuNavInputs) {
	// Reset MenuNavInputs once
	{{{P}}}ChangePopUpVisibility(False);
}

if ({{{P}}}G_SelectedButton.ButtonId != {{{P}}}C_Button_Null) {
	if ({{{P}}}G_DeleteSelectedButton) {
		{{{P}}}G_SelectedButton.ButtonId = {{{P}}}C_Button_Null;
		{{{P}}}G_DeleteSelectedButton = False;
	} else {
		{{{P}}}G_DeleteSelectedButton = True;
	}
}
***

		""",
		[Navigation::ComponentV2()],
		[]
	);
}