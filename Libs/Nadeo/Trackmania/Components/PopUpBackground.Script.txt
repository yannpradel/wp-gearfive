/**
 *	Component: PopUpBackground
 *
 *	Available parameters :
 *	- data-pop-up-name
 *	- data-layout
 *	- data-show-header
 *	- data-use-hitbox
 *	- data-background-url
 *	- data-background-alphamask
 *	- data-background-size
 *	- data-background-colorize
 *	- data-background-position
 *	- data-background-opacity
 *	- data-overlay-url
 *	- data-overlay-alphamask
 *	- data-overlay-size
 *	- data-overlay-colorize
 *	- data-overlay-position
 *	- data-overlay-opacity
 *	- data-header-url
 *	- data-header-alphamask
 *	- data-header-size
 *	- data-header-colorize
 *	- data-header-position
 *	- data-header-opacity
 *	- data-header-overlay-url
 *	- data-header-overlay-alphamask
 *	- data-header-overlay-size
 *	- data-header-overlay-colorize
 *	- data-header-overlay-position
 *	- data-header-overlay-opacity
 *	- data-header-background-url
 *	- data-header-background-alphamask
 *	- data-header-background-size
 *	- data-header-background-colorize
 *	- data-header-background-position
 *	- data-header-background-opacity
 *	- data-footer-url
 *	- data-footer-alphamask
 *	- data-footer-size
 *	- data-footer-colorize
 *	- data-footer-position
 *	- data-footer-opacity
 *	- data-button-close-url
 *	- data-button-close-alphamask
 *	- data-button-close-size
 *	- data-button-close-colorize
 *	- data-button-close-position
 *	- data-button-close-opacity
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Components/PopUpBackground.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "ColorLib" as CL
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/AudioManager_ML.Script.txt" as AudioManager
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_Event {
	Text Type;
	Text PopUpName;
	Boolean FromCloseButton;
}
#Struct K_Image {
	Text Url;
	Text AlphaMask;
	Vec2 Size;
	Vec2 Position;
	Vec3 Colorize;
	Real Opacity;
}
#Struct K_PopUpBackground {
	Boolean ShowHeader;
	Boolean UseHitbox;
	K_Image Background;
	K_Image Overlay;
	K_Image Header;
	K_Image HeaderOverlay;
	K_Image HeaderBackground;
	K_Image Footer;
	K_Image CloseButton;
}
#Struct K_State {
	CMlFrame[] PopUpBackgroundList;
	K_Event[] PendingEvents;
	Integer[CMlQuad] DownloadInProgress;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_PopUpBackground_Null K_PopUpBackground {
	ShowHeader = False,
	UseHitbox = False,
	Background = K_Image {},
	Overlay = K_Image {},
	Header = K_Image {},
	HeaderOverlay = K_Image {},
	HeaderBackground = K_Image {},
	Footer = K_Image {},
	CloseButton = K_Image {}
}
#Const C_State_Null K_State {
	PopUpBackgroundList = [],
	PendingEvents = [],
	DownloadInProgress = []
}

#Const C_Name "component-popupbackground" //< Component name
#Const P "Trackmania_PopUpBackground::" //< Prefix used to differentiate functions/variables in the script
#Const Q "Trackmania_PopUpBackground"

#Const C_Event_LeavePopUp "Event_LeavePopUp"
#Const C_PopUp_SizeX 299.
#Const C_PopUp_SizeY 154.

#Const C_PopUp_BigSizeX 308.
#Const C_PopUp_BigSizeY 156.

#Const C_PopUp_Header_SizeY 53.1

#Const C_DelayBetweenClicks 100

#Const C_PopUp_PosY -3.
#Const C_Class_PopUpBackground "class-popupbackground"

#Const C_Layout_Type_Null -1
#Const C_Layout_Type_Default 0
#Const C_Layout_Type_Campaign 1
#Const C_Layout_Type_Browser 2
#Const C_Layout_Type_ClubSubMenu 3
#Const C_Layout_Type_ClubSubMenuLight 4

#Const C_Class_ImageBase "trackmania-pop-up-background_image-base"
#Const C_Id_FrameGlobal "trackmania-pop-up-background_frame-global"
#Const C_Id_ButtonLeave "trackmania-pop-up-background_button-leave"
#Const C_Id_FrameHeader "trackmania-pop-up-background_frame-header"
#Const C_Id_QuadHeaderOverlay "trackmania-pop-up-background_quad-header-overlay"
#Const C_Id_QuadHeader "trackmania-pop-up-background_quad-header"
#Const C_Id_QuadFooter "trackmania-pop-up-background_quad-footer"
#Const C_Id_QuadOverlay "trackmania-pop-up-background_quad-overlay"
#Const C_Id_QuadBgHeader "trackmania-pop-up-background_quad-bg-header"
#Const C_Id_QuadBg "trackmania-pop-up-background_quad-bg"
#Const C_Id_QuadBgPopup "trackmania-pop-up-background_quad-bg-popup"
#Const C_Id_FrameHitbox "trackmania-pop-up-background_frame-hitbox"
#Const C_Id_QuadHitbox "trackmania-pop-up-background_quad-hitbox"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text GetManialink() {
	return """
<stylesheet>
	<style class="{{{C_Class_ImageBase}}}" halign="center" valign="center" keepratio="Fit"/>
</stylesheet>
<frame id="{{{C_Id_FrameGlobal}}}" pos="0 {{{C_PopUp_PosY}}}" class="{{{C_Class_PopUpBackground}}}">
	<quad id="{{{C_Id_ButtonLeave}}}" image="{{{Icons::C_Icon_256x256_Cross_Oblique}}}" size="7 7"
		class="{{{C_Class_ImageBase}}}" pos="{{{C_PopUp_SizeX/2.-6.}}} {{{C_PopUp_SizeY/2.-5.}}}" colorize="FFF"
		scriptevents="1" z-index="5"
	/>
	<frame id="{{{C_Id_FrameHeader}}}" z-index="2">
		<quad id="{{{C_Id_QuadHeaderOverlay}}}" size="{{{C_PopUp_SizeX-1.2}}} {{{C_PopUp_Header_SizeY}}}" keepratio="Inactive" class="{{{C_Class_ImageBase}}}" valign="top" pos="0 {{{C_PopUp_SizeY/2.}}}" alphamask="{{{Const::C_ImageUrl_PopUp_Campaign_MaskHeader}}}" colorize="000"/>
		<quad id="{{{C_Id_QuadHeader}}}" size="{{{C_PopUp_SizeX-1.2}}} {{{C_PopUp_Header_SizeY}}}" keepratio="Inactive" class="{{{C_Class_ImageBase}}}" valign="top" pos="0 {{{C_PopUp_SizeY/2.}}}" alphamask="{{{Const::C_ImageUrl_PopUp_Campaign_MaskHeader}}}"/>
	</frame>
	<quad id="{{{C_Id_QuadFooter}}}" class="{{{C_Class_ImageBase}}}" keepratio="Inactive" pos="0 {{{-C_PopUp_SizeY/2.-0.9}}}" valign="bottom" opacity=".3" z-index="5"/>
	<quad id="{{{C_Id_QuadOverlay}}}" pos=".5 0" size="{{{C_PopUp_SizeX}}} {{{C_PopUp_SizeY}}}" class="{{{C_Class_ImageBase}}}"/>
	<quad id="{{{C_Id_QuadBgHeader}}}" size="{{{C_PopUp_SizeX}}} {{{C_PopUp_SizeY}}}" class="{{{C_Class_ImageBase}}}" z-index="-1"/>
	<quad id="{{{C_Id_QuadBg}}}" size="{{{C_PopUp_SizeX}}} {{{C_PopUp_SizeY}}}" class="{{{C_Class_ImageBase}}}" z-index="-1" scriptevents="1"/>
	<quad id="{{{C_Id_QuadBgPopup}}}" size="320 180" pos="0 {{{-C_PopUp_PosY}}}" fullscreen="1" class="{{{C_Class_ImageBase}}}" z-index="-2" scriptevents="1" opacity=".60" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" />
	<frame id="{{{C_Id_FrameHitbox}}}" size="{{{C_PopUp_BigSizeX}}} {{{C_PopUp_BigSizeY}}}" halign="center" valign="center" z-index="4">
		<quad id="{{{C_Id_QuadHitbox}}}" size="{{{C_PopUp_BigSizeX-30.}}} {{{C_PopUp_BigSizeX}}}" rot="10" opacity="0" scriptevents="1" class="{{{C_Class_ImageBase}}}" />
	</frame>
</frame>
	""";
}

Void LeavePopUp(CMlScript _This, CMlFrame _Frame_PopUpBackground, Boolean _FromCloseButton) {
	declare K_State Trackmania_PopUpBackground_State for _This.Page = C_State_Null;
	declare CMlControl Button_Leave = _Frame_PopUpBackground.GetFirstChild(C_Id_ButtonLeave);
	Button_Leave.RelativeScale = 1.;

	declare Text Trackmania_PopUpBackground_PopUpName for _Frame_PopUpBackground = "";
	Trackmania_PopUpBackground_State.PendingEvents.add(K_Event {
		Type = C_Event_LeavePopUp,
		PopUpName = Trackmania_PopUpBackground_PopUpName,
		FromCloseButton = _FromCloseButton
	});
}
Void LeavePopUp(CMlScript _This, CMlFrame _Frame_PopUpBackground) {
	LeavePopUp(_This, _Frame_PopUpBackground, False);
}

Void TempDisableAlphaMask(CMlScript _This, CMlQuad _Quad, K_Image _ImageProperties) {
	if (_ImageProperties.Url != "") {
		declare K_State Trackmania_PopUpBackground_State for _This.Page = C_State_Null;
		// Disable alpha mask and re-enable once the image is downloaded
		// to avoid a bug where the image is stretch (see: trackmania-next/tmnext/-/issues/749)
		declare Text Trackmania_PopUpBackground_AlphaMaskUrl for _Quad = "";
		declare Real Trackmania_PopUpBackground_Opacity for _Quad = 0.;
		Trackmania_PopUpBackground_AlphaMaskUrl = _ImageProperties.AlphaMask;
		Trackmania_PopUpBackground_Opacity = _ImageProperties.Opacity;
		_Quad.Opacity = 0.;
		_Quad.AlphaMaskUrl = "";
		_This.AnimMgr.Flush(_Quad);
		Trackmania_PopUpBackground_State.DownloadInProgress[_Quad] = Now;
	}
}

Void ApplyProperties(CMlScript _This, CMlFrame _Frame_Container, K_PopUpBackground _Properties) {
	declare CMlQuad Quad_Header <=> (_Frame_Container.GetFirstChild(C_Id_QuadHeader) as CMlQuad);
	declare CMlQuad Quad_HeaderBG <=> (_Frame_Container.GetFirstChild(C_Id_QuadBgHeader) as CMlQuad);
	declare CMlQuad Quad_BG <=> (_Frame_Container.GetFirstChild(C_Id_QuadBg) as CMlQuad);
	declare CMlQuad Quad_Overlay <=> (_Frame_Container.GetFirstChild(C_Id_QuadOverlay) as CMlQuad);
	declare CMlQuad Quad_Footer <=> (_Frame_Container.GetFirstChild(C_Id_QuadFooter) as CMlQuad);
	declare CMlQuad Button_Leave <=> (_Frame_Container.GetFirstChild(C_Id_ButtonLeave) as CMlQuad);
	declare CMlQuad Quad_HeaderOverlay <=> (_Frame_Container.GetFirstChild(C_Id_QuadHeaderOverlay) as CMlQuad);

	// TO SET BEFORE TEMP DISABLE ALPHAMASK METHOD
	Quad_HeaderBG.AlphaMaskUrl = _Properties.HeaderBackground.AlphaMask;
	Quad_BG.AlphaMaskUrl = _Properties.Background.AlphaMask;
	Quad_Overlay.AlphaMaskUrl = _Properties.Overlay.AlphaMask;
	Quad_Footer.AlphaMaskUrl = _Properties.Footer.AlphaMask;
	Button_Leave.AlphaMaskUrl = _Properties.CloseButton.AlphaMask;
	Quad_HeaderOverlay.AlphaMaskUrl = _Properties.HeaderOverlay.AlphaMask;
	Quad_Header.AlphaMaskUrl = _Properties.Header.AlphaMask;

	// TO SET BEFORE TEMP DISABLE ALPHAMASK METHOD
	Quad_HeaderBG.Opacity = _Properties.HeaderBackground.Opacity;
	Quad_BG.Opacity = _Properties.Background.Opacity;
	Quad_Overlay.Opacity = _Properties.Overlay.Opacity;
	Quad_Footer.Opacity = _Properties.Footer.Opacity;
	Button_Leave.Opacity = _Properties.CloseButton.Opacity;
	Quad_HeaderOverlay.Opacity = _Properties.HeaderOverlay.Opacity;
	Quad_Header.Opacity = _Properties.Header.Opacity;

	Quad_HeaderBG.ChangeImageUrl(_Properties.HeaderBackground.Url);
	if (Quad_HeaderBG.DownloadInProgress) TempDisableAlphaMask(_This, Quad_HeaderBG, _Properties.HeaderBackground);

	Quad_BG.ChangeImageUrl(_Properties.Background.Url);
	if (Quad_BG.DownloadInProgress) TempDisableAlphaMask(_This, Quad_BG, _Properties.Background);

	Quad_Overlay.ChangeImageUrl(_Properties.Overlay.Url);
	if (Quad_Overlay.DownloadInProgress) TempDisableAlphaMask(_This, Quad_Overlay, _Properties.Overlay);

	Quad_Footer.ChangeImageUrl(_Properties.Footer.Url);
	if (Quad_Footer.DownloadInProgress) TempDisableAlphaMask(_This, Quad_Footer, _Properties.Footer);

	Button_Leave.ChangeImageUrl(_Properties.CloseButton.Url);
	if (Button_Leave.DownloadInProgress) TempDisableAlphaMask(_This, Button_Leave, _Properties.CloseButton);

	Quad_HeaderOverlay.ChangeImageUrl(_Properties.HeaderOverlay.Url);
	if (Quad_HeaderOverlay.DownloadInProgress) TempDisableAlphaMask(_This, Quad_HeaderOverlay, _Properties.HeaderOverlay);

	Quad_Header.ChangeImageUrl(_Properties.Header.Url);
	if (Quad_Header.DownloadInProgress) TempDisableAlphaMask(_This, Quad_Header, _Properties.Header);

	if (_Properties.HeaderBackground.Size != <-1., -1.>) {
		Quad_HeaderBG.Size = _Properties.HeaderBackground.Size;
	}
	if (_Properties.Background.Size != <-1., -1.>) {
		Quad_BG.Size = _Properties.Background.Size;
	}
	if (_Properties.Overlay.Size != <-1., -1.>) {
		Quad_Overlay.Size = _Properties.Overlay.Size;
	}
	if (_Properties.Footer.Size != <-1., -1.>) {
		Quad_Footer.Size = _Properties.Footer.Size;
	}
	if (_Properties.CloseButton.Size != <-1., -1.>) {
		Button_Leave.Size = _Properties.CloseButton.Size;
	}
	if (_Properties.HeaderOverlay.Size != <-1., -1.>) {
		Quad_HeaderOverlay.Size = _Properties.HeaderOverlay.Size;
	}
	if (_Properties.Header.Size != <-1., -1.>) {
		Quad_Header.Size = _Properties.Header.Size;
	}

	Quad_HeaderBG.RelativePosition_V3 = _Properties.HeaderBackground.Position;
	Quad_BG.RelativePosition_V3 = _Properties.Background.Position;
	Quad_Overlay.RelativePosition_V3 = _Properties.Overlay.Position;
	Quad_Footer.RelativePosition_V3 = _Properties.Footer.Position;
	Button_Leave.RelativePosition_V3 = _Properties.CloseButton.Position;
	Quad_HeaderOverlay.RelativePosition_V3 = _Properties.HeaderOverlay.Position;
	Quad_Header.RelativePosition_V3 = _Properties.Header.Position;

	Quad_HeaderBG.Colorize = _Properties.HeaderBackground.Colorize;
	Quad_BG.Colorize = _Properties.Background.Colorize;
	Quad_Overlay.Colorize = _Properties.Overlay.Colorize;
	Quad_Footer.Colorize = _Properties.Footer.Colorize;
	Button_Leave.Colorize = _Properties.CloseButton.Colorize;
	Quad_HeaderOverlay.Colorize = _Properties.HeaderOverlay.Colorize;
	Quad_Header.Colorize = _Properties.Header.Colorize;

	_Frame_Container.GetFirstChild(C_Id_FrameHitbox).Visible = _Properties.UseHitbox;
	_Frame_Container.GetFirstChild(C_Id_FrameHeader).Visible = _Properties.ShowHeader;
}

Void SetBackgroundHeaderImage(CMlScript _This, CMlFrame _Frame_Container, Text _ImageUrl) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.HeaderBackground.Url = _ImageUrl;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetBackgroundHeaderOpacity(CMlScript _This, CMlFrame _Frame_Container, Real _Opacity) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.HeaderBackground.Opacity = _Opacity;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetBackgroundHeaderColorize(CMlScript _This, CMlFrame _Frame_Container, Vec3 _Color) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.HeaderBackground.Colorize = _Color;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}
Void SetBackgroundHeaderColorize(CMlScript _This, CMlFrame _Frame_Container, Text _Color) {
	SetBackgroundHeaderColorize(_This, _Frame_Container, CL::HexToRgb(_Color));
}

Void SetBackgroundImage(CMlScript _This, CMlFrame _Frame_Container, Text _ImageUrl) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Background.Url = _ImageUrl;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetBackgroundColorize(CMlScript _This, CMlFrame _Frame_Container, Vec3 _Color) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Background.Colorize = _Color;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}
Void SetBackgroundColorize(CMlScript _This, CMlFrame _Frame_Container, Text _Color) {
	SetBackgroundColorize(_This, _Frame_Container, CL::HexToRgb(_Color));
}

Void SetOverlayImage(CMlScript _This, CMlFrame _Frame_Container, Text _ImageUrl) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Overlay.Url = _ImageUrl;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetOverlayOpacity(CMlScript _This, CMlFrame _Frame_Container, Real _Opacity) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Overlay.Opacity = _Opacity;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetOverlayColorize(CMlScript _This, CMlFrame _Frame_Container, Vec3 _Color) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Overlay.Colorize = _Color;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}
Void SetOverlayColorize(CMlScript _This, CMlFrame _Frame_Container, Text _Color) {
	SetOverlayColorize(_This, _Frame_Container, CL::HexToRgb(_Color));
}

Void SetBackgroundSize(CMlScript _This, CMlFrame _Frame_Container, Vec2 _Size) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Background.Size = _Size;
	Trackmania_PopUpBackground_PopUpBackground.Overlay.Size = _Size;
	Trackmania_PopUpBackground_PopUpBackground.HeaderBackground.Size = _Size;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetMaskImage(CMlScript _This, CMlFrame _Frame_Container, Text _ImageUrl) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Background.AlphaMask = _ImageUrl;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetOverlayMask(CMlScript _This, CMlFrame _Frame_Container, Text _ImageUrl) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Overlay.AlphaMask = _ImageUrl;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetHeaderImage(CMlScript _This, CMlFrame _Frame_Container, Text _ImageUrl) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Header.Url = _ImageUrl;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetHeaderOverlayImage(CMlScript _This, CMlFrame _Frame_Container, Text _ImageUrl) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.HeaderOverlay.Url = _ImageUrl;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetHeaderOverlayOpacity(CMlScript _This, CMlFrame _Frame_Container, Real _Opacity) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.HeaderOverlay.Opacity = _Opacity;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetHeaderSize(CMlScript _This, CMlFrame _Frame_Container, Vec2 _Size) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Header.Size = _Size;
	Trackmania_PopUpBackground_PopUpBackground.HeaderOverlay.Size = <_Size.X, _Size.Y>;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetHeaderPosition(CMlScript _This, CMlFrame _Frame_Container, Vec2 _Position) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Header.Position = _Position;
	Trackmania_PopUpBackground_PopUpBackground.HeaderOverlay.Position = <_Position.X, _Position.Y>;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetFooterImage(CMlScript _This, CMlFrame _Frame_Container, Text _ImageUrl) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Footer.Url = _ImageUrl;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetFooterSize(CMlScript _This, CMlFrame _Frame_Container, Vec2 _Size) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Footer.Size = _Size;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetFooterPosition(CMlScript _This, CMlFrame _Frame_Container, Vec2 _Position) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Footer.Position = _Position;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetFooterColorize(CMlScript _This, CMlFrame _Frame_Container, Vec3 _Color) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.Footer.Colorize = _Color;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}
Void SetFooterColorize(CMlScript _This, CMlFrame _Frame_Container, Text _Color) {
	SetFooterColorize(_This, _Frame_Container, CL::HexToRgb(_Color));
}

Void ShowHeader(CMlScript _This, CMlFrame _Frame_Container, Boolean _IsVisible) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.ShowHeader = _IsVisible;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void SetCloseImageColor(CMlScript _This, CMlFrame _Frame_Container, Vec3 _Color) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.CloseButton.Colorize = _Color;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}
Void SetCloseImageColor(CMlScript _This, CMlFrame _Frame_Container, Text _Color) {
	SetCloseImageColor(_This, _Frame_Container, CL::HexToRgb(_Color));
}

Void SetCloseImagePosition(CMlScript _This, CMlFrame _Frame_Container, Vec2 _Position) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.CloseButton.Position = _Position;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);}

Void UseHitbox(CMlScript _This, CMlFrame _Frame_Container, Boolean _UseHitbox) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	Trackmania_PopUpBackground_PopUpBackground.UseHitbox = _UseHitbox;
	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

K_PopUpBackground[Integer] Private_GetLayoutTypes(CMlScript _This) {
	declare K_PopUpBackground[Integer] Trackmania_PopUpBackground_LayoutTypes for _This.Page = [];

	if (Trackmania_PopUpBackground_LayoutTypes.count <= 0) {
		Trackmania_PopUpBackground_LayoutTypes = [
			C_Layout_Type_Default => K_PopUpBackground {
				ShowHeader = False,
				UseHitbox = False,
				Background = K_Image {
					Url = Const::C_ImageUrl_PopUp_Background_Gradient,
					AlphaMask = "",
					Size = <C_PopUp_SizeX, C_PopUp_SizeY>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				Overlay = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <C_PopUp_SizeX, C_PopUp_SizeY>,
					Position = <0.5, 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				HeaderBackground = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <C_PopUp_SizeX, C_PopUp_SizeY>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				Header = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <-1., -1.>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				HeaderOverlay = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <-1., -1.>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				Footer = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <C_PopUp_SizeX, C_PopUp_SizeY>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 0.3
				},
				CloseButton = K_Image {
					Url = Icons::C_Icon_256x256_Cross_Oblique,
					AlphaMask = "",
					Size = <7., 7.>,
					Position = <C_PopUp_SizeX/2.-6., C_PopUp_SizeY/2.-5.>,
					Colorize = <1., 1., 1.>,
					Opacity = 1.
				}
			},
			C_Layout_Type_Campaign => K_PopUpBackground {
				ShowHeader = True,
				UseHitbox = True,
				Background = K_Image {
					Url = Const::C_ImageUrl_PopUp_Campaign_Background_Full,
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentTwo),
					Opacity = 1.
				},
				Overlay = K_Image {
					Url = Const::C_ImageUrl_PopUp_Campaign_Background_Gradient,
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentFour),
					Opacity = 1.
				},
				HeaderBackground = K_Image {
					Url = Const::C_ImageUrl_PopUp_Campaign_Header_Background,
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentTwo),
					Opacity = 1.
				},
				Header = K_Image {
					Url = "",
					AlphaMask = Const::C_ImageUrl_PopUp_Campaign_MaskHeader,
					Size = <C_PopUp_BigSizeX-18.2, C_PopUp_Header_SizeY-2.75>,
					Position = <9.1, C_PopUp_SizeY/2.+0.6>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				HeaderOverlay = K_Image {
					Url = Const::C_ImageUrl_PopUp_Campaign_Header_Gradient,
					AlphaMask = Const::C_ImageUrl_PopUp_Campaign_MaskHeader,
					Size = <C_PopUp_BigSizeX-18.2, C_PopUp_Header_SizeY-2.75>,
					Position = <9.1, C_PopUp_SizeY/2.+0.6>,
					Colorize = <0., 0., 0.>,
					Opacity = 1.
				},
				Footer = K_Image {
					Url = Const::C_ImageUrl_PopUp_Campaign_Footer,
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., -C_PopUp_SizeY/2.-0.9>,
					Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne),
					Opacity = 0.3
				},
				CloseButton = K_Image {
					Url = Icons::C_Icon_256x256_Cross_Oblique,
					AlphaMask = "",
					Size = <7., 7.>,
					Position = <C_PopUp_BigSizeX/2.-6., C_PopUp_BigSizeY/2.-6.>,
					Colorize = <1., 1., 1.>,
					Opacity = 1.
				}
			},
			C_Layout_Type_Browser => K_PopUpBackground {
				ShowHeader = True,
				UseHitbox = True,
				Background = K_Image {
					Url = Const::C_ImageUrl_PopUp_Browser_Body_Background,
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentTwo),
					Opacity = 1.
				},
				Overlay = K_Image {
					Url = Const::C_ImageUrl_PopUp_Browser_Body_Gradient,
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentThree),
					Opacity = 1.
				},
				HeaderBackground = K_Image {
					Url = Const::C_ImageUrl_PopUp_Browser_Header_Background,
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne),
					Opacity = 1.
				},
				Header = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <0., 0.>,
					Position = <9.1, C_PopUp_SizeY/2.+0.6>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				HeaderOverlay = K_Image {
					Url = Const::C_ImageUrl_PopUp_Browser_Header_Gradient,
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX-19.5, C_PopUp_Header_SizeY-10.5>,
					Position = <10., C_PopUp_SizeY/2.+0.6>,
					Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentTwo),
					Opacity = 1.
				},
				Footer = K_Image {
					Url = Const::C_ImageUrl_PopUp_Campaign_Footer,
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., -C_PopUp_SizeY/2.-0.9>,
					Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne),
					Opacity = 0.3
				},
				CloseButton = K_Image {
					Url = Icons::C_Icon_256x256_Cross_Oblique,
					AlphaMask = "",
					Size = <7., 7.>,
					Position = <C_PopUp_BigSizeX/2.-6., C_PopUp_BigSizeY/2.-6.>,
					Colorize = <1., 1., 1.>,
					Opacity = 1.
				}
			},
			C_Layout_Type_ClubSubMenu => K_PopUpBackground {
				ShowHeader = False,
				UseHitbox = True,
				Background = K_Image {
					Url = Const::C_ImageUrl_PopUp_ClubSubMenu_Body_Background,
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				Overlay = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				HeaderBackground = K_Image {
					Url = Const::C_ImageUrl_PopUp_ClubSubMenu_Header_Background,
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				Header = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <-1., -1.>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				HeaderOverlay = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <-1., -1.>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				Footer = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 0.
				},
				CloseButton = K_Image {
					Url = Icons::C_Icon_256x256_Cross_Oblique,
					AlphaMask = "",
					Size = <7., 7.>,
					Position = <C_PopUp_BigSizeX/2.-6.5, C_PopUp_BigSizeY/2.-5.5>,
					Colorize = <1., 1., 1.>,
					Opacity = 1.
				}
			},
			C_Layout_Type_ClubSubMenuLight => K_PopUpBackground {
				ShowHeader = False,
				UseHitbox = True,
				Background = K_Image {
					Url = Const::C_ImageUrl_PopUp_Activity_Background_Body,
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				Overlay = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				HeaderBackground = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				Header = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <-1., -1.>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				HeaderOverlay = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <-1., -1.>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 1.
				},
				Footer = K_Image {
					Url = "",
					AlphaMask = "",
					Size = <C_PopUp_BigSizeX, C_PopUp_BigSizeY>,
					Position = <0., 0.>,
					Colorize = <-1., -1., -1.>,
					Opacity = 0.
				},
				CloseButton = K_Image {
					Url = Icons::C_Icon_256x256_Cross_Oblique,
					AlphaMask = "",
					Size = <7., 7.>,
					Position = <C_PopUp_BigSizeX/2.-6.5, C_PopUp_BigSizeY/2.-5.5>,
					Colorize = <1., 1., 1.>,
					Opacity = 1.
				}
			}
		];
	}

	return Trackmania_PopUpBackground_LayoutTypes;
}

Void InitPopUpBackground(CMlScript _This, CMlFrame _Frame_Container) {
	declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
	declare K_PopUpBackground[Integer] LayoutTypes = Private_GetLayoutTypes(_This);
	Trackmania_PopUpBackground_PopUpBackground = LayoutTypes[C_Layout_Type_Default];

	if (_Frame_Container.DataAttributeExists("layout")) {
		declare Integer LayoutType = TL::ToInteger(_Frame_Container.DataAttributeGet("layout"));
		if (LayoutTypes.existskey(LayoutType)) {
			Trackmania_PopUpBackground_PopUpBackground = LayoutTypes[LayoutType];
		}
	}

	if (_Frame_Container.DataAttributeExists("show-header")) {
		Trackmania_PopUpBackground_PopUpBackground.ShowHeader = Tools::GetBooleanAttribute(_Frame_Container, "show-header");
	}
	if (_Frame_Container.DataAttributeExists("use-hitbox")) {
		Trackmania_PopUpBackground_PopUpBackground.UseHitbox = Tools::GetBooleanAttribute(_Frame_Container, "use-hitbox");
	}

	if (_Frame_Container.DataAttributeExists("background-url")) {
		Trackmania_PopUpBackground_PopUpBackground.Background.Url = _Frame_Container.DataAttributeGet("background-url");
	}
	if (_Frame_Container.DataAttributeExists("background-alphamask")) {
		Trackmania_PopUpBackground_PopUpBackground.Background.AlphaMask = _Frame_Container.DataAttributeGet("background-alphamask");
	}
	if (_Frame_Container.DataAttributeExists("background-size")) {
		Trackmania_PopUpBackground_PopUpBackground.Background.Size = Tools::TextToVec2(_Frame_Container.DataAttributeGet("background-size"));
	}
	if (_Frame_Container.DataAttributeExists("background-position")) {
		Trackmania_PopUpBackground_PopUpBackground.Background.Position = Tools::TextToVec2(_Frame_Container.DataAttributeGet("background-position"));
	}
	if (_Frame_Container.DataAttributeExists("background-colorize")) {
		Trackmania_PopUpBackground_PopUpBackground.Background.Colorize = CL::HexToRgb(_Frame_Container.DataAttributeGet("background-colorize"));
	}
	if (_Frame_Container.DataAttributeExists("background-opacity")) {
		Trackmania_PopUpBackground_PopUpBackground.Background.Opacity = TL::ToReal(_Frame_Container.DataAttributeGet("background-opacity"));
	}

	if (_Frame_Container.DataAttributeExists("overlay-url")) {
		Trackmania_PopUpBackground_PopUpBackground.Overlay.Url = _Frame_Container.DataAttributeGet("overlay-url");
	}
	if (_Frame_Container.DataAttributeExists("overlay-alphamask")) {
		Trackmania_PopUpBackground_PopUpBackground.Overlay.AlphaMask = _Frame_Container.DataAttributeGet("overlay-alphamask");
	}
	if (_Frame_Container.DataAttributeExists("overlay-size")) {
		Trackmania_PopUpBackground_PopUpBackground.Overlay.Size = Tools::TextToVec2(_Frame_Container.DataAttributeGet("overlay-size"));
	}
	if (_Frame_Container.DataAttributeExists("overlay-position")) {
		Trackmania_PopUpBackground_PopUpBackground.Overlay.Position = Tools::TextToVec2(_Frame_Container.DataAttributeGet("overlay-position"));
	}
	if (_Frame_Container.DataAttributeExists("overlay-colorize")) {
		Trackmania_PopUpBackground_PopUpBackground.Overlay.Colorize = CL::HexToRgb(_Frame_Container.DataAttributeGet("overlay-colorize"));
	}
	if (_Frame_Container.DataAttributeExists("overlay-opacity")) {
		Trackmania_PopUpBackground_PopUpBackground.Overlay.Opacity = TL::ToReal(_Frame_Container.DataAttributeGet("overlay-opacity"));
	}

	if (_Frame_Container.DataAttributeExists("header-url")) {
		Trackmania_PopUpBackground_PopUpBackground.Header.Url = _Frame_Container.DataAttributeGet("header-url");
	}
	if (_Frame_Container.DataAttributeExists("header-alphamask")) {
		Trackmania_PopUpBackground_PopUpBackground.Header.AlphaMask = _Frame_Container.DataAttributeGet("header-alphamask");
	}
	if (_Frame_Container.DataAttributeExists("header-size")) {
		Trackmania_PopUpBackground_PopUpBackground.Header.Size = Tools::TextToVec2(_Frame_Container.DataAttributeGet("header-size"));
	}
	if (_Frame_Container.DataAttributeExists("header-position")) {
		Trackmania_PopUpBackground_PopUpBackground.Header.Position = Tools::TextToVec2(_Frame_Container.DataAttributeGet("header-position"));
	}
	if (_Frame_Container.DataAttributeExists("header-colorize")) {
		Trackmania_PopUpBackground_PopUpBackground.Header.Colorize = CL::HexToRgb(_Frame_Container.DataAttributeGet("header-colorize"));
	}
	if (_Frame_Container.DataAttributeExists("header-opacity")) {
		Trackmania_PopUpBackground_PopUpBackground.Header.Opacity = TL::ToReal(_Frame_Container.DataAttributeGet("header-opacity"));
	}

	if (_Frame_Container.DataAttributeExists("header-overlay-url")) {
		Trackmania_PopUpBackground_PopUpBackground.HeaderOverlay.Url = _Frame_Container.DataAttributeGet("header-overlay-url");
	}
	if (_Frame_Container.DataAttributeExists("header-overlay-alphamask")) {
		Trackmania_PopUpBackground_PopUpBackground.HeaderOverlay.AlphaMask = _Frame_Container.DataAttributeGet("header-overlay-alphamask");
	}
	if (_Frame_Container.DataAttributeExists("header-overlay-size")) {
		Trackmania_PopUpBackground_PopUpBackground.HeaderOverlay.Size = Tools::TextToVec2(_Frame_Container.DataAttributeGet("header-overlay-size"));
	}
	if (_Frame_Container.DataAttributeExists("header-overlay-position")) {
		Trackmania_PopUpBackground_PopUpBackground.HeaderOverlay.Position = Tools::TextToVec2(_Frame_Container.DataAttributeGet("header-overlay-position"));
	}
	if (_Frame_Container.DataAttributeExists("header-overlay-colorize")) {
		Trackmania_PopUpBackground_PopUpBackground.HeaderOverlay.Colorize = CL::HexToRgb(_Frame_Container.DataAttributeGet("header-overlay-colorize"));
	}
	if (_Frame_Container.DataAttributeExists("header-overlay-opacity")) {
		Trackmania_PopUpBackground_PopUpBackground.HeaderOverlay.Opacity = TL::ToReal(_Frame_Container.DataAttributeGet("header-overlay-opacity"));
	}

	if (_Frame_Container.DataAttributeExists("header-background-url")) {
		Trackmania_PopUpBackground_PopUpBackground.HeaderBackground.Url = _Frame_Container.DataAttributeGet("header-background-url");
	}
	if (_Frame_Container.DataAttributeExists("header-background-alphamask")) {
		Trackmania_PopUpBackground_PopUpBackground.HeaderBackground.AlphaMask = _Frame_Container.DataAttributeGet("header-background-alphamask");
	}
	if (_Frame_Container.DataAttributeExists("header-background-size")) {
		Trackmania_PopUpBackground_PopUpBackground.HeaderBackground.Size = Tools::TextToVec2(_Frame_Container.DataAttributeGet("header-background-size"));
	}
	if (_Frame_Container.DataAttributeExists("header-background-position")) {
		Trackmania_PopUpBackground_PopUpBackground.HeaderBackground.Position = Tools::TextToVec2(_Frame_Container.DataAttributeGet("header-background-position"));
	}
	if (_Frame_Container.DataAttributeExists("header-background-colorize")) {
		Trackmania_PopUpBackground_PopUpBackground.HeaderBackground.Colorize = CL::HexToRgb(_Frame_Container.DataAttributeGet("header-background-colorize"));
	}
	if (_Frame_Container.DataAttributeExists("header-background-opacity")) {
		Trackmania_PopUpBackground_PopUpBackground.HeaderBackground.Opacity = TL::ToReal(_Frame_Container.DataAttributeGet("header-background-opacity"));
	}

	if (_Frame_Container.DataAttributeExists("footer-url")) {
		Trackmania_PopUpBackground_PopUpBackground.Footer.Url = _Frame_Container.DataAttributeGet("footer-url");
	}
	if (_Frame_Container.DataAttributeExists("footer-alphamask")) {
		Trackmania_PopUpBackground_PopUpBackground.Footer.AlphaMask = _Frame_Container.DataAttributeGet("footer-alphamask");
	}
	if (_Frame_Container.DataAttributeExists("footer-size")) {
		Trackmania_PopUpBackground_PopUpBackground.Footer.Size = Tools::TextToVec2(_Frame_Container.DataAttributeGet("footer-size"));
	}
	if (_Frame_Container.DataAttributeExists("footer-position")) {
		Trackmania_PopUpBackground_PopUpBackground.Footer.Position = Tools::TextToVec2(_Frame_Container.DataAttributeGet("footer-position"));
	}
	if (_Frame_Container.DataAttributeExists("footer-colorize")) {
		Trackmania_PopUpBackground_PopUpBackground.Footer.Colorize = CL::HexToRgb(_Frame_Container.DataAttributeGet("footer-colorize"));
	}
	if (_Frame_Container.DataAttributeExists("footer-opacity")) {
		Trackmania_PopUpBackground_PopUpBackground.Footer.Opacity = TL::ToReal(_Frame_Container.DataAttributeGet("footer-opacity"));
	}

	if (_Frame_Container.DataAttributeExists("button-close-url")) {
		Trackmania_PopUpBackground_PopUpBackground.CloseButton.Url = _Frame_Container.DataAttributeGet("button-close-url");
	}
	if (_Frame_Container.DataAttributeExists("button-close-alphamask")) {
		Trackmania_PopUpBackground_PopUpBackground.CloseButton.AlphaMask = _Frame_Container.DataAttributeGet("button-close-alphamask");
	}
	if (_Frame_Container.DataAttributeExists("button-close-size")) {
		Trackmania_PopUpBackground_PopUpBackground.CloseButton.Size = Tools::TextToVec2(_Frame_Container.DataAttributeGet("button-close-size"));
	}
	if (_Frame_Container.DataAttributeExists("button-close-position")) {
		Trackmania_PopUpBackground_PopUpBackground.CloseButton.Position = Tools::TextToVec2(_Frame_Container.DataAttributeGet("button-close-position"));
	}
	if (_Frame_Container.DataAttributeExists("button-close-colorize")) {
		Trackmania_PopUpBackground_PopUpBackground.CloseButton.Colorize = CL::HexToRgb(_Frame_Container.DataAttributeGet("button-close-colorize"));
	}
	if (_Frame_Container.DataAttributeExists("button-close-opacity")) {
		Trackmania_PopUpBackground_PopUpBackground.CloseButton.Opacity = TL::ToReal(_Frame_Container.DataAttributeGet("button-close-opacity"));
	}

	ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
}

Void ApplyLayout(CMlScript _This, CMlFrame _Frame_Container, Integer _LayoutType) {
	declare K_PopUpBackground[Integer] LayoutTypes = Private_GetLayoutTypes(_This);
	if (LayoutTypes.existskey(_LayoutType)) {
		declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for _Frame_Container = C_PopUpBackground_Null;
		Trackmania_PopUpBackground_PopUpBackground = LayoutTypes[_LayoutType];
		ApplyProperties(_This, _Frame_Container, Trackmania_PopUpBackground_PopUpBackground);
	}
}

K_Event[] GetPendingEvents(CMlScript _This) {
	declare K_State Trackmania_PopUpBackground_State for _This.Page = C_State_Null;
	return Trackmania_PopUpBackground_State.PendingEvents;
}

Void MainInit(CMlScript _This) {
	declare K_State Trackmania_PopUpBackground_State for _This.Page = C_State_Null;
	Trackmania_PopUpBackground_State = C_State_Null;
}

Void MainStart(CMlScript _This) {
	declare K_State Trackmania_PopUpBackground_State for _This.Page = C_State_Null;
	Trackmania_PopUpBackground_State.PopUpBackgroundList = [];
	_This.Page.GetClassChildren(C_Class_PopUpBackground, _This.Page.MainFrame, True);
	foreach (Control in _This.Page.GetClassChildren_Result) {
		if (Control.Parent is CMlFrame) {
			declare CMlFrame Frame_PopUpBackground = Control.Parent;
			Trackmania_PopUpBackground_State.PopUpBackgroundList.add(Frame_PopUpBackground);

			InitPopUpBackground(_This, Frame_PopUpBackground);

			declare CMlControl Button_Leave = Frame_PopUpBackground.GetFirstChild(C_Id_ButtonLeave);
			declare Ident Trackmania_PopUpBackground_ParentFrameId for Button_Leave = NullId;
			Trackmania_PopUpBackground_ParentFrameId = Frame_PopUpBackground.Id;

			if (Frame_PopUpBackground.DataAttributeExists("pop-up-name")) {
				declare Text Trackmania_PopUpBackground_PopUpName for Frame_PopUpBackground = "";
				Trackmania_PopUpBackground_PopUpName = Frame_PopUpBackground.DataAttributeGet("pop-up-name");
			} else {
				assert(False, "[PopUpBackground] You must define 'data-pop-up-name' in your frameinstance");
			}
		}
	}
}

Void MainLoop(CMlScript _This) {
	declare K_State Trackmania_PopUpBackground_State for _This.Page = C_State_Null;
	Trackmania_PopUpBackground_State.PendingEvents = [];

	if (Trackmania_PopUpBackground_State.DownloadInProgress.count > 0) {
		declare Integer[CMlQuad] TmpDownloadInProgress = Trackmania_PopUpBackground_State.DownloadInProgress;
		foreach (Quad => DownloadStartTime in TmpDownloadInProgress) {
			if (
				Now > DownloadStartTime &&
				!Quad.DownloadInProgress
			) {
				declare Text Trackmania_PopUpBackground_AlphaMaskUrl for Quad = "";
				declare Real Trackmania_PopUpBackground_Opacity for Quad = 0.;
				Quad.AlphaMaskUrl = Trackmania_PopUpBackground_AlphaMaskUrl;
				_This.AnimMgr.Add(Quad, "<quad opacity=\""^Trackmania_PopUpBackground_Opacity^"\"", 200, CAnimManager::EAnimManagerEasing::QuadOut);
				Trackmania_PopUpBackground_State.DownloadInProgress.removekey(Quad);
			}
		}
	}

	if (_This.PageIsVisible) {
		foreach (Frame_PopUpBackground in Trackmania_PopUpBackground_State.PopUpBackgroundList) {
			if (Frame_PopUpBackground.Parent.Visible) {
				foreach (Event in _This.PendingEvents) {
					switch (Event.Type) {
						case CMlScriptEvent::Type::MouseOver: {
							if (Event.ControlId == C_Id_ButtonLeave) {
								_This.AnimMgr.Add(Event.Control, "<anim scale=\"1.2\"/>", 100, CAnimManager::EAnimManagerEasing::Linear);
							}
						}
						case CMlScriptEvent::Type::MouseOut: {
							if (Event.ControlId == C_Id_ButtonLeave) {
								_This.AnimMgr.Add(Event.Control, "<anim scale=\"1.\"/>", 100, CAnimManager::EAnimManagerEasing::Linear);
							}
						}
						case CMlScriptEvent::Type::MouseClick: {
							declare K_PopUpBackground Trackmania_PopUpBackground_PopUpBackground for Frame_PopUpBackground = C_PopUpBackground_Null;
							if (Event.ControlId == C_Id_ButtonLeave) {
								// Check if the control belongs to the Frame_PopUpBackground
								declare Ident Trackmania_PopUpBackground_ParentFrameId for Event.Control = NullId;
								if (Trackmania_PopUpBackground_ParentFrameId == Frame_PopUpBackground.Id) {
									AudioManager::StopSound(_This, "ClosePopUpButtonSelect");
									AudioManager::PlaySound(_This, "ClosePopUpButtonSelect");
									LeavePopUp(_This, Frame_PopUpBackground, True);
								}
							} else if (
								(Trackmania_PopUpBackground_PopUpBackground.UseHitbox && Event.ControlId != C_Id_QuadHitbox) ||
								(!Trackmania_PopUpBackground_PopUpBackground.UseHitbox && Event.ControlId != C_Id_QuadBg)
							) {
								// Check if the control belongs to the Frame_PopUpBackground
								declare CMlControl Control = Frame_PopUpBackground.GetFirstChild(Event.ControlId);
								if (Control != Null && Control.Id == Event.Control.Id) {
									AudioManager::StopSound(_This, "ClosePopUpButtonSelect");
									AudioManager::PlaySound(_This, "ClosePopUpButtonSelect");
									LeavePopUp(_This, Frame_PopUpBackground, False);
								}
							}
						}
					}
				}
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text ComponentV2() {
	return MV::ComponentV2(
		C_Name,
		GetManialink(),
		"""
#Include "Libs/Nadeo/Trackmania/Components/PopUpBackground.Script.txt" as {{{Q}}}
		""",
		"""
***MainInit***
***
{{{P}}}MainInit(This);
***

***MainStart***
***
{{{P}}}MainStart(This);
***

***MainLoop***
***
{{{P}}}MainLoop(This);
***
		""",
		[],
		[]
	);
}