/**
 *	Component: Banner Animation
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Components/BannerAnimation.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-banner-animation" //< Component name
#Const P "ComponentBannerAnimation_" //< Prefix used to differentiate functions/variables in the script
#Const C_Class_Banner "class-banner-animation"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {

	return MV::Component(
		C_Name,
		"""
		""",
		"""
#Include "MathLib" as {{{P}}}ML

#Const {{{P}}}C_AnimSpeedLow 4 // in pixel/sec
#Const {{{P}}}C_AnimSpeedNormal 8 // in pixel/sec
#Const {{{P}}}C_AnimSpeedHigh 12 // in pixel/sec
""",
"""
declare Real {{{P}}}G_InitialPosX;
declare Integer {{{P}}}G_AnimStartTime;
declare Integer {{{P}}}G_AnimDuration;
declare Real {{{P}}}G_ShiftX;
declare CMlControl {{{P}}}G_Control1;
declare CMlControl {{{P}}}G_Control2;

Void {{{P}}}Anim() {
	{{{P}}}G_Control1.RelativePosition_V3.X = {{{P}}}G_InitialPosX;
	{{{P}}}G_Control2.RelativePosition_V3.X = {{{P}}}G_InitialPosX + {{{P}}}G_ShiftX;

	declare Real NewPosX = {{{P}}}G_InitialPosX - {{{P}}}G_ShiftX;
	AnimMgr.Flush({{{P}}}G_Control1);
	AnimMgr.Add({{{P}}}G_Control1, "<anim pos=\""^NewPosX^" "^{{{P}}}G_Control1.RelativePosition_V3.Y^"\" />", {{{P}}}G_AnimDuration, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Flush({{{P}}}G_Control2);
	AnimMgr.Add({{{P}}}G_Control2, "<anim pos=\""^{{{P}}}G_InitialPosX^" "^{{{P}}}G_Control2.RelativePosition_V3.Y^"\" />", {{{P}}}G_AnimDuration, CAnimManager::EAnimManagerEasing::Linear);
	{{{P}}}G_AnimStartTime = Now;
}

Void {{{P}}}LaunchAnimation(CMlControl _Control1, CMlControl _Control2, Real _ShiftX, Integer _Speed) {
	if (_Control1 != Null && _Control2 != Null) {
		{{{P}}}G_Control1 = _Control1;
		{{{P}}}G_Control2 = _Control2;
		{{{P}}}G_InitialPosX = _Control1.RelativePosition_V3.X;
		{{{P}}}G_ShiftX = _ShiftX;
		{{{P}}}G_AnimDuration = ({{{P}}}ML::NearestInteger({{{P}}}G_ShiftX) / _Speed) * 1000;
		{{{P}}}Anim();
	}
}

Void {{{P}}}StopAnimation() {
	{{{P}}}G_AnimStartTime = -1;
	if ({{{P}}}G_Control1 != Null) {
		AnimMgr.Flush({{{P}}}G_Control1);
		{{{P}}}G_Control1.RelativePosition_V3.X = 0.;
	}
	if ({{{P}}}G_Control2 != Null) {
		AnimMgr.Flush({{{P}}}G_Control2);
		{{{P}}}G_Control2.RelativePosition_V3.X = 0.;
	}
}

***MainInit***
***
{{{P}}}G_InitialPosX = 0.;
{{{P}}}G_AnimStartTime = -1;
{{{P}}}G_AnimDuration = 0;
{{{P}}}G_ShiftX = 0.;
{{{P}}}G_Control1 = Null;
{{{P}}}G_Control2 = Null;
***

***MainLoop***
***

if ({{{P}}}G_AnimStartTime > 0 && ({{{P}}}G_AnimStartTime + {{{P}}}G_AnimDuration) <= Now) {
	{{{P}}}Anim();
}
***
""",
[],
[]
	);
}


/** Get the manialink of the frame instance component
 *
 *	@param	_ManiaLinkToInject				The manialink to animate (Careful do not add an id to your control, it will be duplicated in the component)
 *	@param	_Id												Id of the frame instance
 *	@param	_FrameSizeX								Size (in X) of the frame instance
 *	@param	_FrameSizeY								Size (in Y) of the frame instance
 *	@param	_FramePosX								Pos (in X) of the frame instance
 *	@param	_FramePosY								Pos (in Y) of the frame instance
 *	@param	_VAlign										Vertical align of the frame instance
 *	@param	_HAlign										Horizontal align of the frame instance
 *
 *	@return														The manialink of the frame instance component
 */
Text InjectML(
	Text _ManiaLinkToInject,
	Text _Id,
	Real _FrameSizeX,
	Real _FrameSizeY,
	Real _FramePosX,
	Real _FramePosY,
	Text _VAlign,
	Text _HAlign
	) {
	declare Text ML =
	"""
	<frame id="frame-banner-{{{_Id}}}" size="{{{_FrameSizeX}}} {{{_FrameSizeY}}}" pos="{{{_FramePosX}}} {{{_FramePosY}}}" class="{{{C_Class_Banner}}}" halign="{{{_HAlign}}}" valign="{{{_VAlign}}}">
		{{{_ManiaLinkToInject}}}
		{{{_ManiaLinkToInject}}}
	</frame>
	""";
	return ML;
}