/**
 *	Component: PlayerRoyalVictories
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Components/PlayerRoyalVictories.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-playerroyalvictories" //< Component name
#Const P "Trackmania_PlayerRoyalVictories::" //< Prefix used to differentiate functions/variables in the script
#Const Q "Trackmania_PlayerRoyalVictories"

#Const C_ImageType_Lion_Victories_Count 0
#Const C_ImageType_Lion_SuperVictories_Count 1
#Const C_ImageType_Lion_Without_Count 2
#Const C_ImageType_Crown 3

#Const Const::C_Royal_Lions as C_Royal_Lions
#Const Const::C_Royal_Crowns as C_Royal_Crowns

//L16N [PlayerRoyalVictories] Displayed after the number of royal victories of the player, in this case 0 so "0 Royal victories"
#Const C_Text_RoyalVictories0 _("Royal victories")
//L16N [PlayerRoyalVictories] Displayed after the number of royal victories of the player, in this case 1 so "victory" is singular
#Const C_Text_RoyalVictory _("Royal victory")
//L16N [PlayerRoyalVictories] Displayed after the number of royal victories of the player, in this case more than 1 so "victory" is plural, e.g "52 Royal victories"
#Const C_Text_RoyalVictories _("Royal victories")
//L16N [PlayerRoyalVictories] Displayed after the number of super royal victories of the player, in this case 1 so "victory" is singular
#Const C_Text_SuperRoyalVictory _("Super Royal victory")
//L16N [PlayerRoyalVictories] Displayed after the number of super royal victories of the player, in this case more than 1 so "victory" is plural, e.g "52 Super Royal victories"
#Const C_Text_SuperRoyalVictories _("Super Royal victories")

#Const C_Class_QuadBase "trackmania-player-royal-victories_quad-base"
#Const C_Class_TextBase "trackmania-player-royal-victories_text-base"
#Const C_Class_Container "trackmania-player-royal-victories_container"
#Const C_Id_FramePlayerRoyalVictories "trackmania-player-royal-victories_frame-player-royal-victories"
#Const C_Id_FrameLion "trackmania-player-royal-victories_frame-lion"
#Const C_Id_QuadLion "trackmania-player-royal-victories_quad-lion"
#Const C_Id_FrameVictoryCount "trackmania-player-royal-victories_frame-victory-count"
#Const C_Id_LabelCount "trackmania-player-royal-victories_label-count"
#Const C_Id_LabelVictory "trackmania-player-royal-victories_label-victory"
#Const C_Id_FrameSuperVictoryCount "trackmania-player-royal-victories_frame-super-victory-count"
#Const C_Id_LabelSuperCount "trackmania-player-royal-victories_label-super-count"
#Const C_Id_LabelSuperVictory "trackmania-player-royal-victories_label-super-victory"
#Const C_Id_FrameCrown "trackmania-player-royal-victories_frame-crown"
#Const C_Id_QuadCrown "trackmania-player-royal-victories_quad-crown"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text GetManialink() {
	return """
<stylesheet>
	<style class="{{{C_Class_QuadBase}}}" halign="center" valign="center"/>
	<style class="{{{C_Class_TextBase}}}" halign="center" valign="center2" textprefix="$t$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textsize="3"/>
</stylesheet>

<frame id="{{{C_Id_FramePlayerRoyalVictories}}}" class="{{{C_Class_Container}}}">
	<frame id="{{{C_Id_FrameLion}}}">
		<quad id="{{{C_Id_QuadLion}}}" size="36 36" class="{{{C_Class_QuadBase}}}"/>
		<frame id="{{{C_Id_FrameVictoryCount}}}" pos="0 -30">
			<label id="{{{C_Id_LabelCount}}}" pos="0 7" size="25 10" class="{{{C_Class_TextBase}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textsize="6"/>
			<label id="{{{C_Id_LabelVictory}}}" size="55 10" class="{{{C_Class_TextBase}}}" maxline="2" autonewline="1" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textsize="3"/>
		</frame>
		<frame id="{{{C_Id_FrameSuperVictoryCount}}}" pos="0 -23">
			<label id="{{{C_Id_LabelCount}}}" halign="right" pos="-15 0" size="25 10" class="{{{C_Class_TextBase}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textsize="6"/>
			<label id="{{{C_Id_LabelVictory}}}" halign="left" pos="-14 0" size="45 10" class="{{{C_Class_TextBase}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textsize="3"/>

			<label id="{{{C_Id_LabelSuperCount}}}" halign="right" pos="-25 -7" size="25 10" class="{{{C_Class_TextBase}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textsize="6"/>
			<label id="{{{C_Id_LabelSuperVictory}}}" halign="left" pos="-24 -7" size="55 10" class="{{{C_Class_TextBase}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textsize="3"/>
		</frame>
	</frame>
	<frame id="{{{C_Id_FrameCrown}}}">
		<quad id="{{{C_Id_QuadCrown}}}" size="10 10" class="{{{C_Class_QuadBase}}}"/>
	</frame>
</frame>
	""";
}

// Mandatory function to call to use the PlayerRoyalVictories component
Void SetDivisions(CMlScript _This, MatchmakingStruct::LibStructuresMatchmaking_K_Division[Text] _Divisions) {
	declare MatchmakingStruct::LibStructuresMatchmaking_K_Division[Text] Trackmania_PlayerRoyalVictories_Divisions for _This.Page = [];
	Trackmania_PlayerRoyalVictories_Divisions = _Divisions;
}

Void Private_InitRoyalVictoriesType(CMlFrame _Frame_PlayerRoyalVictories) {
	if (_Frame_PlayerRoyalVictories.Parent.DataAttributeExists("imagetype")) {
		declare CMlFrame Frame_Lion <=> (_Frame_PlayerRoyalVictories.GetFirstChild(C_Id_FrameLion) as CMlFrame);
		declare CMlFrame Frame_VictoryCount <=> (Frame_Lion.GetFirstChild(C_Id_FrameVictoryCount) as CMlFrame);
		declare CMlFrame Frame_SuperVictoryCount <=> (Frame_Lion.GetFirstChild(C_Id_FrameSuperVictoryCount) as CMlFrame);
		declare CMlFrame Frame_Crown <=> (_Frame_PlayerRoyalVictories.GetFirstChild(C_Id_FrameCrown) as CMlFrame);

		declare Integer ImageType = TL::ToInteger(_Frame_PlayerRoyalVictories.Parent.DataAttributeGet("imagetype"));
		Frame_Lion.Visible = (ImageType == C_ImageType_Lion_Victories_Count || ImageType == C_ImageType_Lion_SuperVictories_Count || ImageType == C_ImageType_Lion_Without_Count);
		Frame_VictoryCount.Visible = (ImageType == C_ImageType_Lion_Victories_Count);
		Frame_SuperVictoryCount.Visible = (ImageType == C_ImageType_Lion_SuperVictories_Count);
		Frame_Crown.Visible = (ImageType == C_ImageType_Crown);
	}
}

Integer GetRoyalLevelFromDivisionId(CMlScript _This, Text _DivisionId) {
	declare MatchmakingStruct::LibStructuresMatchmaking_K_Division[Text] Trackmania_PlayerRoyalVictories_Divisions for _This.Page = [];
	// return 1 if division not found to display the first royal level in any case
	declare Integer Level = 1;
	if (Trackmania_PlayerRoyalVictories_Divisions.existskey(_DivisionId)) Level = Trackmania_PlayerRoyalVictories_Divisions[_DivisionId].Position;
	return Level;
}

Void UpdatePlayerRoyalVictories(CMlScript _This, CMlFrame _Frame_PlayerRoyalVictories, Text _NewDivisionId, Integer _NewVictoriesCount, Integer _NewSuperVictoriesCount) {
	declare Integer RoyalLevel = GetRoyalLevelFromDivisionId(_This, _NewDivisionId);

	declare CMlFrame Frame_Lion <=> (_Frame_PlayerRoyalVictories.GetFirstChild(C_Id_FrameLion) as CMlFrame);
	declare CMlFrame Frame_Crown <=> (_Frame_PlayerRoyalVictories.GetFirstChild(C_Id_FrameCrown) as CMlFrame);
	declare CMlQuad Quad_Lion <=> (Frame_Lion.GetFirstChild(C_Id_QuadLion) as CMlQuad);
	declare CMlQuad Quad_Crown <=> (Frame_Crown.GetFirstChild(C_Id_QuadCrown) as CMlQuad);
	declare CMlFrame Frame_VictoryCount <=> (Frame_Lion.GetFirstChild(C_Id_FrameVictoryCount) as CMlFrame);
	declare CMlFrame Frame_SuperVictoryCount <=> (Frame_Lion.GetFirstChild(C_Id_FrameSuperVictoryCount) as CMlFrame);

	declare Integer ImageType = TL::ToInteger(_Frame_PlayerRoyalVictories.DataAttributeGet("imagetype"));
	declare Boolean ShowSuperRoyalVictories = _NewSuperVictoriesCount > 0;
	Frame_VictoryCount.Visible = (ImageType == C_ImageType_Lion_Victories_Count && !ShowSuperRoyalVictories);
	Frame_SuperVictoryCount.Visible = (ImageType == C_ImageType_Lion_SuperVictories_Count || ShowSuperRoyalVictories);
	if (ShowSuperRoyalVictories) {
		Frame_VictoryCount <=> (Frame_Lion.GetFirstChild(C_Id_FrameSuperVictoryCount) as CMlFrame);
		declare CMlLabel Label_SuperCount <=> (Frame_VictoryCount.GetFirstChild(C_Id_LabelSuperCount) as CMlLabel);
		declare CMlLabel Label_SuperVictory <=> (Frame_VictoryCount.GetFirstChild(C_Id_LabelSuperVictory) as CMlLabel);
		Label_SuperCount.Value = TL::ToText(_NewSuperVictoriesCount);
		if (_NewSuperVictoriesCount == 1) {
			Label_SuperVictory.Value = C_Text_SuperRoyalVictory;
		} else {
			Label_SuperVictory.Value = C_Text_SuperRoyalVictories;
		}
	}
	declare CMlLabel Label_Count <=> (Frame_VictoryCount.GetFirstChild(C_Id_LabelCount) as CMlLabel);
	declare CMlLabel Label_Victory <=> (Frame_VictoryCount.GetFirstChild(C_Id_LabelVictory) as CMlLabel);

	Label_Count.Value = TL::ToText(_NewVictoriesCount);
	if (_NewVictoriesCount <= 0) {
		Label_Victory.Value = C_Text_RoyalVictories0;
	} else if (_NewVictoriesCount == 1) {
		Label_Victory.Value = C_Text_RoyalVictory;
	} else {
		Label_Victory.Value = C_Text_RoyalVictories;
	}
	Quad_Lion.ChangeImageUrl(C_Royal_Lions.get(RoyalLevel, ""));
	Quad_Crown.ChangeImageUrl(C_Royal_Crowns.get(RoyalLevel, ""));
}

Void UpdatePlayerRoyalVictories(CMlScript _This, CMlFrame _Frame_PlayerRoyalVictories, Text _NewDivisionId, Integer _NewVictoriesCount) {
	UpdatePlayerRoyalVictories(_This, _Frame_PlayerRoyalVictories, _NewDivisionId, _NewVictoriesCount, -1);
}

Void MainInit(CMlScript _This) {
	declare MatchmakingStruct::LibStructuresMatchmaking_K_Division[Text] Trackmania_PlayerRoyalVictories_Divisions for _This.Page = [];
	Trackmania_PlayerRoyalVictories_Divisions = [];

	_This.Page.GetClassChildren(C_Class_Container, _This.Page.MainFrame, True);
	foreach (Control in _This.Page.GetClassChildren_Result) {
		declare CMlFrame Container_PlayerRoyalVictories = (Control as CMlFrame);
		Private_InitRoyalVictoriesType(Container_PlayerRoyalVictories);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text ComponentV2() {
	return MV::ComponentV2(
		C_Name,
		GetManialink(),
		"""
#Include "Libs/Nadeo/Trackmania/Components/PlayerRoyalVictories.Script.txt" as {{{Q}}}
		""",
		"""
***MainInit***
***
{{{P}}}MainInit(This);
***
		""",
[
	MatchmakingStruct::Component()
],
[]
	);
}