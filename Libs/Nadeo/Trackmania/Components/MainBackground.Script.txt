/**
 *	Component: MainBackground
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Components/MainBackground.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/TimeOfDay.Script.txt" as TimeOfDay
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-mainbackground" //< Component name
#Const P "ComponentMainBackground_" //< Prefix used to differentiate functions/variables in the script

#Const TimeOfDay::C_DayPart_NightSunrise as C_DayPart_NightSunrise
#Const TimeOfDay::C_DayPart_Sunrise as C_DayPart_Sunrise
#Const TimeOfDay::C_DayPart_SunriseDay as C_DayPart_SunriseDay
#Const TimeOfDay::C_DayPart_Day as C_DayPart_Day
#Const TimeOfDay::C_DayPart_DaySunset as C_DayPart_DaySunset
#Const TimeOfDay::C_DayPart_Sunset as C_DayPart_Sunset
#Const TimeOfDay::C_DayPart_SunsetNight as C_DayPart_SunsetNight
#Const TimeOfDay::C_DayPart_Night as C_DayPart_Night

#Const TimeOfDay::C_TimeRange_NightSunrise as C_TimeRange_NightSunrise
#Const TimeOfDay::C_TimeRange_Sunrise as C_TimeRange_Sunrise
#Const TimeOfDay::C_TimeRange_SunriseDay as C_TimeRange_SunriseDay
#Const TimeOfDay::C_TimeRange_Day as C_TimeRange_Day
#Const TimeOfDay::C_TimeRange_DaySunset as C_TimeRange_DaySunset
#Const TimeOfDay::C_TimeRange_Sunset as C_TimeRange_Sunset
#Const TimeOfDay::C_TimeRange_SunsetNight as C_TimeRange_SunsetNight
#Const TimeOfDay::C_TimeRange_Night as C_TimeRange_Night

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {
	return MV::Component(
		C_Name,
		"""
<stylesheet>
	<style class="{{{P}}}background" size="320 180" halign="center" valign="center" keepratio="fit"/>
</stylesheet>

<frame id="{{{P}}}frame-global">
	<quad id="{{{P}}}quad-night" image="{{{Const::C_ImageUrl_Menu_BG_Night}}}" fullscreen="1" opacity="1." class="{{{P}}}background" z-index="0" />
	<quad id="{{{P}}}quad-day" image="{{{Const::C_ImageUrl_Menu_BG_Day}}}" fullscreen="1" opacity="0." class="{{{P}}}background" z-index="1" />
	<quad id="{{{P}}}quad-morning" image="{{{Const::C_ImageUrl_Menu_BG_Morning}}}" fullscreen="1" opacity="0." class="{{{P}}}background" z-index="2" />
	<quad id="{{{P}}}quad-evening" image="{{{Const::C_ImageUrl_Menu_BG_Evening}}}" fullscreen="1" opacity="0." class="{{{P}}}background" z-index="3" />
</frame>
		""",
		"""
#Include "MathLib" as {{{P}}}ML
#Include "TimeLib" as {{{P}}}TiL
#Include "TextLib" as {{{P}}}TL
#Include "Libs/Nadeo/CMGame/Utils/TimeOfDay.Script.txt" as {{{P}}}TimeOfDay

#Struct {{{P}}}K_QuadOpacities {
	Real Morning;
	Real Day;
	Real Evening;
	Real Night;
}
#Struct {{{P}}}K_Controls {
	CMlQuad Quad_Morning;
	CMlQuad Quad_Day;
	CMlQuad Quad_Evening;
	CMlQuad Quad_Night;
}
#Struct {{{P}}}K_State {
	{{{P}}}K_Controls Controls;
	Boolean IsVisible;
	Integer UpdateTimer;
	Integer DisplayAnimEndTime;
	Text[Integer] CustomBackgroundImgUrls;
}

#Struct {{{P}}}K_Event {
	Integer Type;
	Real DayProgression;
	Integer DayPart;
}

#Const {{{P}}}C_EventType_UpdateOpacities 0

#Const {{{P}}}C_UpdateDelay 30000 //< 30 seconds
#Const {{{P}}}C_BackgroundTransition 800

#Const {{{P}}}C_DayMaxOpacity 0.8

#Const {{{P}}}C_DayPart_NightSunrise {{{dump(C_DayPart_NightSunrise)}}}
#Const {{{P}}}C_DayPart_Sunrise {{{dump(C_DayPart_Sunrise)}}}
#Const {{{P}}}C_DayPart_SunriseDay {{{dump(C_DayPart_SunriseDay)}}}
#Const {{{P}}}C_DayPart_Day {{{dump(C_DayPart_Day)}}}
#Const {{{P}}}C_DayPart_DaySunset {{{dump(C_DayPart_DaySunset)}}}
#Const {{{P}}}C_DayPart_Sunset {{{dump(C_DayPart_Sunset)}}}
#Const {{{P}}}C_DayPart_SunsetNight {{{dump(C_DayPart_SunsetNight)}}}
#Const {{{P}}}C_DayPart_Night {{{dump(C_DayPart_Night)}}}

#Const {{{P}}}C_TimeRange_NightSunrise {{{dump(C_TimeRange_NightSunrise)}}}
#Const {{{P}}}C_TimeRange_Sunrise {{{dump(C_TimeRange_Sunrise)}}}
#Const {{{P}}}C_TimeRange_SunriseDay {{{dump(C_TimeRange_SunriseDay)}}}
#Const {{{P}}}C_TimeRange_Day {{{dump(C_TimeRange_Day)}}}
#Const {{{P}}}C_TimeRange_DaySunset {{{dump(C_TimeRange_DaySunset)}}}
#Const {{{P}}}C_TimeRange_Sunset {{{dump(C_TimeRange_Sunset)}}}
#Const {{{P}}}C_TimeRange_SunsetNight {{{dump(C_TimeRange_SunsetNight)}}}
#Const {{{P}}}C_TimeRange_Night {{{dump(C_TimeRange_Night)}}}

#Const {{{P}}}C_DefaultQuadOpacities {{{P}}}K_QuadOpacities {
	Morning = 0.,
	Day = 0.,
	Evening = 0.,
	Night = 0.
}
		""",
		"""
declare {{{P}}}K_State {{{P}}}G_State;
declare {{{P}}}K_Event[] {{{P}}}PendingEvents;

Real {{{P}}}Private_CalculateOpacity(Real _CurrentHourReal, Real _StartTime, Real _EndTime, Boolean _Ascending) {
	if (_Ascending) {
		return (_CurrentHourReal-_StartTime)/(_EndTime-_StartTime);
	}
	return (_EndTime-_CurrentHourReal)/(_EndTime-_StartTime);
}

Void {{{P}}}Private_ApplyOpacities(
	{{{P}}}K_Controls _Controls,
	{{{P}}}K_QuadOpacities _QuadOpacities
) {
	_Controls.Quad_Morning.Opacity = _QuadOpacities.Morning;
	_Controls.Quad_Day.Opacity = _QuadOpacities.Day;
	_Controls.Quad_Evening.Opacity = _QuadOpacities.Evening;
	_Controls.Quad_Night.Opacity = _QuadOpacities.Night;

	{{{P}}}PendingEvents.add({{{P}}}K_Event {
		Type = {{{P}}}C_EventType_UpdateOpacities,
		DayProgression = {{{P}}}TimeOfDay::GetDayProgression(),
		DayPart = {{{P}}}TimeOfDay::GetDayPart({{{P}}}TimeOfDay::GetDayProgression(), True)
	});
}

{{{P}}}K_QuadOpacities {{{P}}}Private_GetDayProgressionQuadOpacities(Real _DayProgression) {
	declare {{{P}}}K_QuadOpacities {{{P}}}QuadOpacities = {{{P}}}C_DefaultQuadOpacities;
	declare Integer DayPart = {{{P}}}TimeOfDay::GetDayPart(_DayProgression, True);

	switch (DayPart) {
		case {{{P}}}C_DayPart_NightSunrise: {
			{{{P}}}QuadOpacities.Night = 1.;
			{{{P}}}QuadOpacities.Morning = {{{P}}}Private_CalculateOpacity(_DayProgression, {{{P}}}C_TimeRange_NightSunrise, {{{P}}}C_TimeRange_Sunrise, True);
		}
		case {{{P}}}C_DayPart_Sunrise: {
			{{{P}}}QuadOpacities.Morning = 1.;
		}
		case {{{P}}}C_DayPart_SunriseDay: {
			{{{P}}}QuadOpacities.Morning = {{{P}}}Private_CalculateOpacity(_DayProgression, {{{P}}}C_TimeRange_SunriseDay, {{{P}}}C_TimeRange_Day, False);
			{{{P}}}QuadOpacities.Day = 1.;
		}
		case {{{P}}}C_DayPart_Day: {
			{{{P}}}QuadOpacities.Day = 1.;
		}
		case {{{P}}}C_DayPart_DaySunset: {
			{{{P}}}QuadOpacities.Day = 1.;
			{{{P}}}QuadOpacities.Evening = {{{P}}}Private_CalculateOpacity(_DayProgression, {{{P}}}C_TimeRange_DaySunset, {{{P}}}C_TimeRange_Sunset, True);
		}
		case {{{P}}}C_DayPart_Sunset: {
			{{{P}}}QuadOpacities.Evening = 1.;
		}
		case {{{P}}}C_DayPart_SunsetNight: {
			{{{P}}}QuadOpacities.Evening = {{{P}}}Private_CalculateOpacity(_DayProgression, {{{P}}}C_TimeRange_SunsetNight, {{{P}}}C_TimeRange_Night, False);
			{{{P}}}QuadOpacities.Night = 1.;
		}
		case {{{P}}}C_DayPart_Night: {
			{{{P}}}QuadOpacities.Night = 1.;
		}
	}

	return {{{P}}}QuadOpacities;
}
{{{P}}}K_QuadOpacities {{{P}}}Private_GetDayProgressionQuadOpacities() {
	return {{{P}}}Private_GetDayProgressionQuadOpacities({{{P}}}TimeOfDay::GetDayProgression());
}

CMlQuad {{{P}}}GetQuadMorning() {
	return {{{P}}}G_State.Controls.Quad_Morning;
}
CMlQuad {{{P}}}GetQuadDay() {
	return {{{P}}}G_State.Controls.Quad_Day;
}
CMlQuad {{{P}}}GetQuadEvening() {
	return {{{P}}}G_State.Controls.Quad_Evening;
}
CMlQuad {{{P}}}GetQuadNight() {
	return {{{P}}}G_State.Controls.Quad_Night;
}

Void {{{P}}}SetVisibility(Boolean _IsVisible, Integer _AnimDuration) {
	{{{P}}}G_State.IsVisible = _IsVisible;

	AnimMgr.Flush({{{P}}}G_State.Controls.Quad_Morning);
	AnimMgr.Flush({{{P}}}G_State.Controls.Quad_Day);
	AnimMgr.Flush({{{P}}}G_State.Controls.Quad_Evening);
	AnimMgr.Flush({{{P}}}G_State.Controls.Quad_Night);

	if (_AnimDuration <= 1) {
		{{{P}}}G_State.UpdateTimer = Now + {{{P}}}C_UpdateDelay;

		if (_IsVisible) {
			{{{P}}}Private_ApplyOpacities(
				{{{P}}}G_State.Controls,
				{{{P}}}Private_GetDayProgressionQuadOpacities()
			);
		} else {
			{{{P}}}Private_ApplyOpacities(
				{{{P}}}G_State.Controls,
				{{{P}}}C_DefaultQuadOpacities
			);
		}
	} else {
		{{{P}}}G_State.UpdateTimer = Now + _AnimDuration + {{{P}}}C_UpdateDelay;

		declare {{{P}}}K_QuadOpacities {{{P}}}QuadOpacities = {{{P}}}C_DefaultQuadOpacities;
		declare Integer Hidden = 1;
		if (_IsVisible) {
			{{{P}}}QuadOpacities = {{{P}}}Private_GetDayProgressionQuadOpacities();
			Hidden = 0;
		}

		AnimMgr.Add({{{P}}}G_State.Controls.Quad_Morning, "<a opacity=\""^{{{P}}}QuadOpacities.Morning^"\" hidden=\""^Hidden^"\" />", _AnimDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add({{{P}}}G_State.Controls.Quad_Day, "<a opacity=\""^{{{P}}}QuadOpacities.Day^"\" hidden=\""^Hidden^"\" />", _AnimDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add({{{P}}}G_State.Controls.Quad_Evening, "<a opacity=\""^{{{P}}}QuadOpacities.Evening^"\" hidden=\""^Hidden^"\" />", _AnimDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add({{{P}}}G_State.Controls.Quad_Night, "<a opacity=\""^{{{P}}}QuadOpacities.Night^"\" hidden=\""^Hidden^"\" />", _AnimDuration, CAnimManager::EAnimManagerEasing::Linear);
	}
}
Void {{{P}}}SetVisibility(Boolean _IsVisible) {
	{{{P}}}SetVisibility(_IsVisible, -1);
}


Void {{{P}}}ChangeBackgroundImages(Text[Integer] _BackgroundsImgUrl, Boolean _Animation) {
	AnimMgr.Flush({{{P}}}G_State.Controls.Quad_Morning);
	AnimMgr.Flush({{{P}}}G_State.Controls.Quad_Day);
	AnimMgr.Flush({{{P}}}G_State.Controls.Quad_Evening);
	AnimMgr.Flush({{{P}}}G_State.Controls.Quad_Night);

	if (_Animation) {
		{{{P}}}G_State.UpdateTimer = Now + ({{{P}}}C_BackgroundTransition * 2) + {{{P}}}C_UpdateDelay;
		declare {{{P}}}K_QuadOpacities {{{P}}}QuadOpacities = {{{P}}}C_DefaultQuadOpacities;

		AnimMgr.Add({{{P}}}G_State.Controls.Quad_Morning, "<a opacity=\""^{{{P}}}QuadOpacities.Morning^"\"  />", {{{P}}}C_BackgroundTransition / 2, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add({{{P}}}G_State.Controls.Quad_Day, "<a opacity=\""^{{{P}}}QuadOpacities.Day^"\" />", {{{P}}}C_BackgroundTransition / 2, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add({{{P}}}G_State.Controls.Quad_Evening, "<a opacity=\""^{{{P}}}QuadOpacities.Evening^"\"  />", {{{P}}}C_BackgroundTransition / 2, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add({{{P}}}G_State.Controls.Quad_Night, "<a opacity=\""^{{{P}}}QuadOpacities.Night^"\" />", {{{P}}}C_BackgroundTransition / 2, CAnimManager::EAnimManagerEasing::QuadOut);

		{{{P}}}G_State.DisplayAnimEndTime = Now + {{{P}}}C_BackgroundTransition * 2;
		{{{P}}}G_State.CustomBackgroundImgUrls = _BackgroundsImgUrl;

		{{{P}}}QuadOpacities = {{{P}}}Private_GetDayProgressionQuadOpacities();

		AnimMgr.Add({{{P}}}G_State.Controls.Quad_Morning, "<a opacity=\""^{{{P}}}QuadOpacities.Morning^"\" />", {{{P}}}G_State.DisplayAnimEndTime, {{{P}}}C_BackgroundTransition, CAnimManager::EAnimManagerEasing::ExpIn);
		AnimMgr.Add({{{P}}}G_State.Controls.Quad_Day, "<a opacity=\""^{{{P}}}QuadOpacities.Day^"\" />", {{{P}}}G_State.DisplayAnimEndTime, {{{P}}}C_BackgroundTransition, CAnimManager::EAnimManagerEasing::ExpIn);
		AnimMgr.Add({{{P}}}G_State.Controls.Quad_Evening, "<a opacity=\""^{{{P}}}QuadOpacities.Evening^"\" />", {{{P}}}G_State.DisplayAnimEndTime, {{{P}}}C_BackgroundTransition, CAnimManager::EAnimManagerEasing::ExpIn);
		AnimMgr.Add({{{P}}}G_State.Controls.Quad_Night, "<a opacity=\""^{{{P}}}QuadOpacities.Night^"\" />", {{{P}}}G_State.DisplayAnimEndTime, {{{P}}}C_BackgroundTransition, CAnimManager::EAnimManagerEasing::ExpIn);
	} else {
		{{{P}}}G_State.DisplayAnimEndTime = -1;

		{{{P}}}Private_ApplyOpacities(
				{{{P}}}G_State.Controls,
				{{{P}}}Private_GetDayProgressionQuadOpacities()
			);

		{{{P}}}G_State.Controls.Quad_Morning.ChangeImageUrl(_BackgroundsImgUrl.get(0, ""));
		{{{P}}}G_State.Controls.Quad_Day.ChangeImageUrl(_BackgroundsImgUrl.get(1, ""));
		{{{P}}}G_State.Controls.Quad_Evening.ChangeImageUrl(_BackgroundsImgUrl.get(2, ""));
		{{{P}}}G_State.Controls.Quad_Night.ChangeImageUrl(_BackgroundsImgUrl.get(3, ""));
	}
}

Void {{{P}}}ResetBackgroundImages() {
	{{{P}}}G_State.Controls.Quad_Morning.ChangeImageUrl("{{{Const::C_ImageUrl_Menu_BG_Morning}}}");
	{{{P}}}G_State.Controls.Quad_Day.ChangeImageUrl("{{{Const::C_ImageUrl_Menu_BG_Day}}}");
	{{{P}}}G_State.Controls.Quad_Evening.ChangeImageUrl("{{{Const::C_ImageUrl_Menu_BG_Evening}}}");
	{{{P}}}G_State.Controls.Quad_Night.ChangeImageUrl("{{{Const::C_ImageUrl_Menu_BG_Night}}}");
}

***MainInit***
***
declare CMlFrame {{{P}}}Frame_Global;
***

***MainStart***
***
{{{P}}}Frame_Global <=> (Page.GetFirstChild("{{{P}}}frame-global") as CMlFrame);
{{{P}}}G_State.Controls.Quad_Morning <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}quad-morning") as CMlQuad);
{{{P}}}G_State.Controls.Quad_Day <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}quad-day") as CMlQuad);
{{{P}}}G_State.Controls.Quad_Evening <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}quad-evening") as CMlQuad);
{{{P}}}G_State.Controls.Quad_Night <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}quad-night") as CMlQuad);

{{{P}}}G_State.UpdateTimer = -1;
{{{P}}}G_State.CustomBackgroundImgUrls = [];
{{{P}}}G_State.DisplayAnimEndTime = -1;

{{{P}}}SetVisibility(True);
***

***MainLoop***
***
{{{P}}}PendingEvents = [];

if ({{{P}}}G_State.IsVisible && ({{{P}}}G_State.UpdateTimer < 0 || {{{P}}}G_State.UpdateTimer < Now)) {
	// Only update every 30s
	{{{P}}}G_State.UpdateTimer = Now + {{{P}}}C_UpdateDelay;

	{{{P}}}Private_ApplyOpacities(
		{{{P}}}G_State.Controls,
		{{{P}}}Private_GetDayProgressionQuadOpacities()
	);
}
if ({{{P}}}G_State.DisplayAnimEndTime >= 0 && {{{P}}}G_State.DisplayAnimEndTime <= Now) {
	{{{P}}}G_State.DisplayAnimEndTime = -1;
	{{{P}}}G_State.Controls.Quad_Morning.ChangeImageUrl({{{P}}}G_State.CustomBackgroundImgUrls.get(0, ""));
	{{{P}}}G_State.Controls.Quad_Day.ChangeImageUrl({{{P}}}G_State.CustomBackgroundImgUrls.get(1, ""));
	{{{P}}}G_State.Controls.Quad_Evening.ChangeImageUrl({{{P}}}G_State.CustomBackgroundImgUrls.get(2, ""));
	{{{P}}}G_State.Controls.Quad_Night.ChangeImageUrl({{{P}}}G_State.CustomBackgroundImgUrls.get(3, ""));
}
***
		""",
		[],
		[]
	);
}