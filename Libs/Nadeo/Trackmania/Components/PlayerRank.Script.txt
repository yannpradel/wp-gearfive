/**
 *	Component: Player Rank
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Components/PlayerRank.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-playerrank" //< Component name
#Const P "ComponentPlayerRank_" //< Prefix used to differentiate functions/variables in the script

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {

	return MV::Component(
		C_Name,
		"""
<stylesheet>
	<style class="{{{P}}}quad-base" halign="center" valign="center"/>
	<style class="{{{P}}}text-base" halign="center" valign="center2" textprefix="$t$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textsize="3"/>
</stylesheet>

<frame id="{{{P}}}frame-player-rank">
	<quad id="{{{P}}}quad-rank" class="{{{P}}}quad-base" size="20 20" keepratio="Fit" z-index="1"/>
</frame>
		""",
		"""
#Include "MathLib" as {{{P}}}ML

#Const {{{P}}}C_Rank_Icons {{{dump(Const::C_Rank_Icons)}}}
#Const {{{P}}}C_RankAnim_Delay 500
#Const {{{P}}}C_RankAnim_Duration 500

""",
"""
declare {{{MatchmakingStruct::P}}}K_Division[Text] {{{P}}}G_Divisions;

// Mandatory function to call to use the PlayerRank component
Void {{{P}}}SetDivisions({{{MatchmakingStruct::P}}}K_Division[Text] _Divisions) {
	{{{P}}}G_Divisions.clear();
	{{{P}}}G_Divisions = _Divisions;
}

Integer {{{P}}}GetRankNumberFromDivisionId(Text _DivisionId) {
	declare Integer Rank = -1;
	if ({{{P}}}G_Divisions.existskey(_DivisionId)) Rank = {{{P}}}G_Divisions[_DivisionId].Position;
	return Rank;
}

Void {{{P}}}UpdatePlayerRank(CMlFrame _Frame_PlayerRank, Integer _NewRank, Integer _InitialRank) {
	declare CMlQuad Quad_PlayerRankBg <=> (_Frame_PlayerRank.GetFirstChild("{{{P}}}quad-rank") as CMlQuad);

	Quad_PlayerRankBg.ChangeImageUrl({{{P}}}C_Rank_Icons.get(_NewRank, ""));
	if (_InitialRank >= 0) {
		AnimMgr.Flush(_Frame_PlayerRank);
		AnimMgr.Add(_Frame_PlayerRank, "<anim scale=\"1.35\" rot=\""^{{{P}}}ML::Rand(-4., 4.)^"\"/>", {{{P}}}C_RankAnim_Duration/4, CAnimManager::EAnimManagerEasing::QuadIn);
		AnimMgr.Add(_Frame_PlayerRank, "<anim scale=\"1.\" rot=\"0.\"/>", Now + {{{P}}}C_RankAnim_Duration/4, 3*{{{P}}}C_RankAnim_Duration/4, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void {{{P}}}UpdatePlayerRank(CMlFrame _Frame_PlayerRank, Integer _NewRank) {
	{{{P}}}UpdatePlayerRank(_Frame_PlayerRank, _NewRank, -1);
}

Void {{{P}}}UpdatePlayerRank(CMlFrame _Frame_PlayerRank, Text _NewDivisionId) {
	declare Integer NewRank = {{{P}}}GetRankNumberFromDivisionId(_NewDivisionId);
	{{{P}}}UpdatePlayerRank(_Frame_PlayerRank, NewRank, -1);
}


""",
[
	MatchmakingStruct::Component()
],
[]
	);
}