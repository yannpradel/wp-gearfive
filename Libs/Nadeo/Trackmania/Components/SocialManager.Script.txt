/**
 *	Component: SocialManager (handle only one squad)
 */
#Const Version		"1.1.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Components/SocialManager.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/Trackmania/Structures/SquaddingStruct.Script.txt" as SquaddingStruct
#Include "Libs/Nadeo/Trackmania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-socialmanager" //< Component name
#Const P "ComponentSocialManager_" //< Prefix used to differentiate functions/variables in the script

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {
	return MV::Component(
		C_Name,
		"""
""",
"""
#Include "TextLib" as {{{P}}}TL
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as {{{P}}}Task
#Include "Libs/Nadeo/CMGame/Utils/SquadNotificationObserver_Common.Script.txt" as {{{P}}}NotificationObserver_Common
#Include "Libs/Nadeo/CMGame/Utils/SquadNotificationObserver_Social_Menu.Script.txt" as {{{P}}}NotificationObserver
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as {{{P}}}MainUser
#Include "Libs/Nadeo/CMGame/Utils/Log.Script.txt" as {{{P}}}Log

#Const {{{P}}}C_Event_MemberAdded 0
#Const {{{P}}}C_Event_MemberRemoved 1
#Const {{{P}}}C_Event_SquadUpdated 2
#Const {{{P}}}C_Event_SquadLeft 3
#Const {{{P}}}C_Event_SquadLocked 4
#Const {{{P}}}C_Event_UbiConnectError 5

#Const {{{P}}}C_Open_UbiConnectFriendsList 0
#Const {{{P}}}C_Open_FirstPartyFriendsList 1
#Const {{{P}}}C_Open_UbiConnectInvitesList 2

#Struct {{{P}}}K_Friend {
	Text AccountId;
	Text DisplayName;
	Boolean IsFirstPartyDisplayName;
	Boolean IsCommunicationRestricted;
	Text ZoneUrl;
	Text SkinName;
	Text SkinUrl;
	Text SkinPrestigeOptions;
}

#Struct {{{P}}}K_Event {
	Integer	Type;
	{{{P}}}K_Friend Friend;
	Boolean IsLocked;
	Text SquadType;
	Text SquadId;
	Text ErrorMessage;
	Text SquadLeaderId;
	Boolean WasForcedToLeaveDueToCrossPlaySetting;
}

#Struct {{{P}}}K_State {
	Text CurrentSquadType;
	{{{P}}}Task::K_Task Task_SquadLeave;
	{{{P}}}Task::K_Task Task_OpenUbiConnectFriends;
	{{{P}}}Task::K_Task Task_OpenFirstPartyInvite;
	{{{P}}}Task::K_Task Task_OpenUbiConnectInvitations;
}
""",
"""
declare {{{P}}}K_State {{{P}}}State;
declare {{{P}}}K_Event[] {{{P}}}PendingEvents;

/* Open first party or ubisoft connect menu */
Void {{{P}}}Open(Integer _OpenChoice) {
	if (UserMgr == Null) return;
	switch (_OpenChoice) {
		case {{{P}}}C_Open_UbiConnectFriendsList: {
			{{{P}}}State.Task_OpenUbiConnectFriends = {{{P}}}Task::DestroyAndCreate({{{P}}}State.Task_OpenUbiConnectFriends, UserMgr, UserMgr.UbisoftConnect_ShowSocialFriendList({{{P}}}MainUser::GetMainUserId()));
		}
		case {{{P}}}C_Open_FirstPartyFriendsList: {
			{{{P}}}State.Task_OpenFirstPartyInvite = {{{P}}}Task::DestroyAndCreate({{{P}}}State.Task_OpenFirstPartyInvite, UserMgr, UserMgr.LiveSession_ShowFirstPartyInviteUI({{{P}}}MainUser::GetMainUserId()));
		}
		case {{{P}}}C_Open_UbiConnectInvitesList: {
			{{{P}}}State.Task_OpenUbiConnectInvitations = {{{P}}}Task::DestroyAndCreate({{{P}}}State.Task_OpenUbiConnectInvitations, UserMgr, UserMgr.UbisoftConnect_ShowSocialInvitationList({{{P}}}MainUser::GetMainUserId()));
		}
	}
}

/* Leave the given squad */
Void {{{P}}}LeaveSquad(Text _SquadId) {
	if (UserMgr == Null) return;
	{{{P}}}State.Task_SquadLeave = {{{P}}}Task::DestroyAndCreate({{{P}}}State.Task_SquadLeave, UserMgr, UserMgr.Squad_Leave({{{P}}}MainUser::GetMainUserId(), _SquadId));
}

/* Store the current squad type (ranked or royal) FOR THE COMPONENT (to update it when we know the squad leader) */
Void {{{P}}}StoreCurrentSquadTypeInSocialManager(Text _CurrentModeId) {
	switch (_CurrentModeId) {
		case {{{MatchmakingStruct::P}}}C_Mode_Teams3v3: {
			{{{P}}}State.CurrentSquadType = {{{SquaddingStruct::P}}}C_SquadType_Ranked;
		}
		case {{{MatchmakingStruct::P}}}C_Mode_Royal: {
			{{{P}}}State.CurrentSquadType = {{{SquaddingStruct::P}}}C_SquadType_Royal;
		}
	}
}

/* Set the current squad type (ranked or royal) BY THE SQUAD LEADER (when switching modes) */
Void {{{P}}}SetCurrentSquadTypeByLeader(Text _CurrentModeId, Text _SquadId) {
	if (UserMgr == Null) return;
	{{{P}}}StoreCurrentSquadTypeInSocialManager(_CurrentModeId);
	UserMgr.Squad_SetType({{{P}}}MainUser::GetMainUserId(), _SquadId, {{{P}}}State.CurrentSquadType);
}

/* Reset voice chat data for the given squad */
Void {{{P}}}ResetVoiceChatFromSquadId(Text _SquadId) {
	ParentApp.VoiceChat.Manual_Channel = _SquadId;
	ParentApp.VoiceChat.Manual_ClearUsers();
	ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting = CGameUserVoiceChat::EMuteSetting::NotMuted;
}

/* Set voice chat data for the given squad */
Void {{{P}}}SetVoiceChatFromSquadMembers(Text[] _SquadMembersAccountIds) {
	ParentApp.VoiceChat.Manual_ClearUsers();
	foreach (MemberId in _SquadMembersAccountIds) {
		ParentApp.VoiceChat.Manual_UserAdd_Proc(MemberId);
	}
	// Do not forget to add the local user
	ParentApp.VoiceChat.Manual_UserAdd_Proc(LocalUser.WebServicesUserId);
}

/* Send an event when a member is added to the squad */
Void {{{P}}}AddSquadMember(
	Text _SquadId,
	Text _MemberId,
	Text _MemberName,
	Boolean _MemberIsFirstPartyDisplayName,
	Boolean _MemberIsCommunicationRestricted,
	Text _MemberZone,
	Text _MemberSkinName,
	Text _MemberSkinUrl,
	Text _MemberSkinPrestigeOptions
) {
	{{{P}}}PendingEvents.add({{{P}}}K_Event {
		Type = {{{P}}}C_Event_MemberAdded,
		SquadId = _SquadId,
		Friend = {{{P}}}K_Friend {
			AccountId = _MemberId,
			DisplayName = _MemberName,
			IsFirstPartyDisplayName = _MemberIsFirstPartyDisplayName,
			IsCommunicationRestricted = _MemberIsCommunicationRestricted,
			ZoneUrl = _MemberZone,
			SkinName = _MemberSkinName,
			SkinUrl = _MemberSkinUrl,
			SkinPrestigeOptions = _MemberSkinPrestigeOptions
		}
	});
}

/* Send an event when a member is removed from the squad */
Void {{{P}}}RemoveSquadMember(Text _MemberId, Text _MemberName) {
	{{{P}}}PendingEvents.add({{{P}}}K_Event {
		Type = {{{P}}}C_Event_MemberRemoved,
		Friend = {{{P}}}K_Friend {
			AccountId = _MemberId,
			DisplayName = _MemberName
		}
	});
}

***MainStart***
***
{{{P}}}State = {{{P}}}K_State {
	CurrentSquadType = "",
	Task_SquadLeave = {{{P}}}Task::GetEmptyTask(),
	Task_OpenUbiConnectFriends = {{{P}}}Task::GetEmptyTask(),
	Task_OpenFirstPartyInvite = {{{P}}}Task::GetEmptyTask(),
	Task_OpenUbiConnectInvitations = {{{P}}}Task::GetEmptyTask()
};
***

***MainLoop***
***
{{{P}}}PendingEvents = [];

// Leave squad task
if ({{{P}}}Task::IsInitialized({{{P}}}State.Task_SquadLeave)) {
	{{{P}}}State.Task_SquadLeave = {{{P}}}Task::Update({{{P}}}State.Task_SquadLeave);
	if (!{{{P}}}Task::IsRunning({{{P}}}State.Task_SquadLeave)) {
		declare CTaskResult_Squad SourceTask = {{{P}}}Task::GetSourceTask_Squad({{{P}}}State.Task_SquadLeave);
		if (!{{{P}}}Task::IsSuccess({{{P}}}State.Task_SquadLeave)) log({{{P}}}TL::Compose(_("Error while leaving the squad. (Error code: %1)"), SourceTask.ErrorCode));
		{{{P}}}PendingEvents.add({{{P}}}K_Event {
			Type = {{{P}}}C_Event_SquadLeft
		});
		{{{P}}}State.Task_SquadLeave = {{{P}}}Task::Destroy({{{P}}}State.Task_SquadLeave);
	}
}

// Open Friends list in Ubisoft Connect overlay
if ({{{P}}}Task::IsInitialized({{{P}}}State.Task_OpenUbiConnectFriends)) {
	{{{P}}}State.Task_OpenUbiConnectFriends = {{{P}}}Task::Update({{{P}}}State.Task_OpenUbiConnectFriends);
	if (!{{{P}}}Task::IsRunning({{{P}}}State.Task_OpenUbiConnectFriends)) {
		if (!{{{P}}}Task::IsSuccess({{{P}}}State.Task_OpenUbiConnectFriends)) {
			{{{P}}}PendingEvents.add({{{P}}}K_Event {
				Type = {{{P}}}C_Event_UbiConnectError,
				//L16N Error while opening Ubisoft Connect overlay. %1 will be replaced with an error type and %2 with a code e.g. "Error from WebServices - 500"
				ErrorMessage = {{{P}}}TL::Compose(
					"%1 (%2)",
					//L16N Error while opening Ubisoft Connect overlay.
					_("Error while opening Ubisoft Connect"),
					{{{P}}}Task::GetCustomError({{{P}}}State.Task_OpenUbiConnectFriends).Code
				)
			});
		}
		{{{P}}}State.Task_OpenUbiConnectFriends = {{{P}}}Task::Destroy({{{P}}}State.Task_OpenUbiConnectFriends);
	}
}

// Open First Party invite system overlay
if ({{{P}}}Task::IsInitialized({{{P}}}State.Task_OpenFirstPartyInvite)) {
	{{{P}}}State.Task_OpenFirstPartyInvite = {{{P}}}Task::Update({{{P}}}State.Task_OpenFirstPartyInvite);
	if (!{{{P}}}Task::IsRunning({{{P}}}State.Task_OpenFirstPartyInvite)) {
		{{{P}}}State.Task_OpenFirstPartyInvite = {{{P}}}Task::Destroy({{{P}}}State.Task_OpenFirstPartyInvite);
	}
}

// Open Invitation list in Ubisoft Connect overlay
if ({{{P}}}Task::IsInitialized({{{P}}}State.Task_OpenUbiConnectInvitations)) {
	{{{P}}}State.Task_OpenUbiConnectInvitations = {{{P}}}Task::Update({{{P}}}State.Task_OpenUbiConnectInvitations);
	if (!{{{P}}}Task::IsRunning({{{P}}}State.Task_OpenUbiConnectInvitations)) {
		if (!{{{P}}}Task::IsSuccess({{{P}}}State.Task_OpenUbiConnectInvitations)) {
			{{{P}}}PendingEvents.add({{{P}}}K_Event {
				Type = {{{P}}}C_Event_UbiConnectError,
				//L16N Error while opening Ubisoft Connect overlay. %1 will be replaced with an error type and %2 with a code e.g. "Error from WebServices - 500"
				ErrorMessage = {{{P}}}TL::Compose(
					"%1 (%2)",
					//L16N Error while opening Ubisoft Connect overlay.
					_("Error while opening Ubisoft Connect"),
					{{{P}}}Task::GetCustomError({{{P}}}State.Task_OpenUbiConnectInvitations).Code
				)
			});
		}
		{{{P}}}State.Task_OpenUbiConnectInvitations = {{{P}}}Task::Destroy({{{P}}}State.Task_OpenUbiConnectInvitations);
	}
}

// Retrieve squad notifications
declare Integer I = 0;
while ({{{P}}}State.CurrentSquadType != "" && {{{P}}}NotificationObserver::IsNotificationAvailable()) {
	if (I > 100) break;
	I +=1;
	declare {{{P}}}NotificationObserver_Common::K_Notification Notif = {{{P}}}NotificationObserver::GetNextNotification();
	switch (Notif.Type) {
		case {{{P}}}NotificationObserver_Common::C_NotificationSubType_MemberAdded: {
			if (Notif.SquadType != "" && Notif.SquadType == {{{P}}}State.CurrentSquadType) {
				{{{P}}}AddSquadMember(
					Notif.SquadId,
					Notif.AccountId,
					Notif.DisplayName,
					Notif.IsFirstPartyDisplayName,
					Notif.IsCommunicationRestricted,
					Notif.ZoneUrl,
					Notif.SkinName,
					Notif.SkinUrl,
					Notif.SkinPrestigeOptions
				);
			}
		}
		case {{{P}}}NotificationObserver_Common::C_NotificationSubType_MemberRemoved: {
			// We do not check if (Notif.SquadType == {{{P}}}State.CurrentSquadType) in case leader was switching squad type a this moment /!\ (see trackmania-next/tmnext/-/issues/5820)
			// Example: if PlayerA and PlayerB are in a Royal squad together, PlayerB leaves when PlayerA switch to Ranked...
			// PlayerA needs to see this notification even if the squad type does not correspond anymore
			if (Notif.SquadType != "") {
				{{{P}}}RemoveSquadMember(Notif.AccountId, Notif.DisplayName);
			}
		}
		case {{{P}}}NotificationObserver_Common::C_NotificationSubType_SquadUpdated: {
			if ({{{P}}}State.CurrentSquadType != Notif.SquadType && Notif.SquadLeaderId == LocalUser.WebServicesUserId) {
				// Set the type of the squad when we arrive on a matchmaking page for the first time
				if (UserMgr != Null) UserMgr.Squad_SetType({{{P}}}MainUser::GetMainUserId(), Notif.SquadId, {{{P}}}State.CurrentSquadType);
			}
			{{{P}}}PendingEvents.add({{{P}}}K_Event {
				Type = {{{P}}}C_Event_SquadUpdated,
				SquadType = Notif.SquadType,
				SquadId = Notif.SquadId,
				SquadLeaderId = Notif.SquadLeaderId,
				WasForcedToLeaveDueToCrossPlaySetting = Notif.WasForcedToLeaveDueToCrossPlaySetting
			});
		}
		case {{{P}}}NotificationObserver_Common::C_NotificationSubType_SquadLockUpdated: {
			{{{P}}}PendingEvents.add({{{P}}}K_Event {
				Type = {{{P}}}C_Event_SquadLocked,
				IsLocked = Notif.IsLocked
			});
		}
	}
}
***
""",
[
	SquaddingStruct::Component(),
	MatchmakingStruct::Component()
],
[]
);
}