/**
 *	UI module: Countdown client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/ChampionCommon/UIModules/Countdown_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/UIModules/Countdown_Common.Script.txt" as UIModules_Countdown_Common
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/ZIndex.Script.txt" as ZIndex

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_Countdown_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_Countdown_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Text Color_Red = "b02326";
	declare Text Color_White = "ffffff";

	return MV::Create(
GetId(), 3,
"""
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_Countdown}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_Countdown_Common::C_UIModuleConfig)}}}>
		<frame id="frame-countdown">
			<quad id="quad-background" pos="7 -3" z-index="0" size="20 8.5" halign="right" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.7" />
			<label id="label-countdown" pos="4 -4.2" z-index="1" size="25 6" halign="right" textsize="5" textcolor="{{{Color_White}}}" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_IngameTime)}}}" />
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/Helpers_Client.Script.txt" as RaceHelpers
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/WarmupHelpers_Client.Script.txt" as WarmupHelpers

#Const C_RedCountdownDuration 30000

#Const C_Color_BGDanger {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_BGDanger))}}}
#Const C_Color_BGDark {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_BGDark))}}}
#Const C_Color_WarmUp {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_WarmUp))}}}

#Const C_VisibleFor_Everyone {{{dump(UIModules_Countdown_Common::C_VisibleFor_Everyone)}}}
#Const C_VisibleFor_PlayersOnly {{{dump(UIModules_Countdown_Common::C_VisibleFor_PlayersOnly)}}}
#Const C_VisibleFor_SpectatorsOnly {{{dump(UIModules_Countdown_Common::C_VisibleFor_SpectatorsOnly)}}}
""",
"""
***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Countdown;
declare CMlLabel Label_Countdown;
declare CMlQuad Quad_Background;

declare netread Boolean Net_ChampionCup_Countdown_IsVisible for UI;
declare netread Integer Net_ChampionCup_Countdown_VisibleFor for Teams[0];

declare Boolean DisplayModule;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Countdown  <=> (Frame_Global.GetFirstChild("frame-countdown") as CMlFrame);
Label_Countdown <=> (Frame_Countdown.GetFirstChild("label-countdown") as CMlLabel);
Quad_Background <=> (Frame_Countdown.GetFirstChild("quad-background") as CMlQuad);

DisplayModule = Frame_Global.Visible;
***

***MainLoop***
***
if (PageIsVisible) {
	if (DisplayModule != Net_ChampionCup_Countdown_IsVisible) {
		DisplayModule = Net_ChampionCup_Countdown_IsVisible;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_Global.Visible) {
		if (
			(
				(WarmupHelpers::IsWarmupActive(Teams[0]) && WarmupHelpers::CurrentWarmupEndTime(Teams[0]) >= 0) ||
				RaceHelpers::GetTimeLimit(Teams[0]) > 0
			) && (
				Net_ChampionCup_Countdown_VisibleFor == C_VisibleFor_Everyone ||
				(Net_ChampionCup_Countdown_VisibleFor == C_VisibleFor_PlayersOnly && InputPlayer != Null && InputPlayer.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) ||
				(Net_ChampionCup_Countdown_VisibleFor == C_VisibleFor_SpectatorsOnly && InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)
			)
		) {
			if (!Frame_Countdown.Visible) Frame_Countdown.Visible = True;
		} else if (Frame_Countdown.Visible) {
			Frame_Countdown.Visible = False;
		}

		if (Frame_Countdown.Visible) {
			if (WarmupHelpers::IsWarmupActive(Teams[0]) && WarmupHelpers::CurrentWarmupEndTime(Teams[0]) >= GameTime) {
				Label_Countdown.Value = TL::TimeToText(WarmupHelpers::CurrentWarmupEndTime(Teams[0]) - GameTime + 1000);
			} else if (RaceHelpers::GetTimeLimit(Teams[0]) >= GameTime) {
				Label_Countdown.Value = TL::TimeToText(RaceHelpers::GetTimeLimit(Teams[0]) - GameTime + 1000);
			} else {
				Label_Countdown.Value = TL::TimeToText(0);
			}

			if (WarmupHelpers::IsWarmupActive(Teams[0])) {
				Quad_Background.BgColor = C_Color_WarmUp;
			} else if (RaceHelpers::GetTimeLimit(Teams[0]) - GameTime > C_RedCountdownDuration) {
				Quad_Background.BgColor = C_Color_BGDark;
			} else {
				Quad_Background.BgColor = C_Color_BGDanger;
			}

			Quad_Background.Size.X = ML::Min(Label_Countdown.Size.X, Label_Countdown.ComputeWidth(Label_Countdown.Value)) + 6.;
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}