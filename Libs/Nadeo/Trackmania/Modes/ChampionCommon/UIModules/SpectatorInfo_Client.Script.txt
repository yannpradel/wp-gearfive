/**
 *	UI module: SpectatorInfo client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/ChampionCommon/UIModules/SpectatorInfo_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as MenuConst
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCup/Constants.Script.txt" as ChampionCupConst
#Include "Libs/Nadeo/Trackmania/Modes/Champion/ColorPalette.Script.txt" as ChampionColorPalette
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/PlayerProfiles.Script.txt" as PlayerProfiles
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/UIModules/SpectatorInfo_Common.Script.txt" as UIModules_SpectatorInfo_Common
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/Shared_Client.Script.txt" as Shared
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/ZIndex.Script.txt" as ZIndex

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_TeamLogoPath "file://Media/Manialinks/Nadeo/Trackmania/Modes/Champion/TeamsLogo"
#Const ChampionCupConst::C_DisplayGapAfter as C_DisplayGapAfter
#Const ChampionCupConst::C_FinalRankThreshold as C_FinalRankThreshold

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_SpectatorInfo_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_SpectatorInfo_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Text Text_Point = _("|Point|pt");
	declare Text Text_Points = _("|Points|pts");
	declare Text Text_WarmUp = _("Warm up");
	//L16N [TMGL] The match is currently paused
	declare Text Text_Pause = _("|TMGL|Pause");
	//L16N [TMGL] This player is the leader of the race
	declare Text Text_Leader = _("Leader");
	//L16N [TMGL] Display time difference from n th place. eg: "+1.45 from 8th"
	declare Text_From = _("|Rank|from %1");

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-bold" halign="center" valign="center2" textsize="3.5" textprefix="$t$i" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" />
	<style class="text-number" valign="center2" textprefix="$t$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="ffffff" textsize="5.5" />
</stylesheet>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_SpectatorInfo}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_SpectatorInfo_Common::C_UIModuleConfig)}}}>
		<frame id="frame-spectator-info">
			<frame id="frame-left" pos="-47 0" z-index="1">
				<quad size="20 14" pos="0 7" z-index="-1" halign="center" image="{{{MenuConst::C_ImageUrl_Champion_Spec_Background_Left}}}" id="quad-status-1" opacity="0.7" />
				<label pos="2.25 -1" size="11 6" halign="right" class="text-number" id="label-rank" />
				<label pos="2.5 0.8" size="6 6" halign="left" textsize="2" class="text-bold" textprefix="$i" opacity="0.7" id="label-rank-suffix" />
			</frame>
			<frame id="frame-middle" z-index="3">
				<quad size="74 14" pos="0 7" z-index="-1" halign="center" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" image="{{{MenuConst::C_ImageUrl_Champion_Spec_Background_Center}}}" opacity="0.7" />
				<quad pos="-35 0" size="12 12" valign="center" keepratio="fit" id="quad-team-logo" />
				<label pos="-21.5 1.75" size="36 6" halign="left" class="text-bold" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" id="label-player-name" />
				<label pos="-21.5 -3" size="36 6" halign="left" textsize="2.5" class="text-bold" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" id="label-team-name" />
				<label pos="28 -0.5" size="11 6" halign="right" class="text-number" id="label-points" />
				<label pos="28 -0.75" size="7 6" halign="left" textsize="2" class="text-bold" opacity="0.7" id="label-points-suffix" />
				<label pos="35 -0.5" size="19 6" halign="right" hidden="1" class="text-bold" id="label-finalist" />
			</frame>
			<frame id="frame-right" pos="47 0" z-index="2">
				<quad size="20 14" pos="0 7" z-index="-1" halign="center" image="{{{MenuConst::C_ImageUrl_Champion_Spec_Background_Right}}}" id="quad-status-2" opacity="0.7" />
				<label pos="8 -0.5" size="16 6" halign="right" class="text-number" id="label-time-diff" />
				<label pos="5 -4.5" size="14 6" halign="right" textsize="0.5" class="text-bold" opacity="0.7" id="label-time-from" />
				<label pos="5 -4.3" size="5 6" scale="0.8" halign="left" textsize="0.5" class="text-bold" textprefix="$i" opacity="0.7" id="label-time-from-suffix" />
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/WarmupHelpers_Client.Script.txt" as WarmupHelpers

#Struct K_Controls {
	CMlFrame Frame_SpectatorInfo;
	CMlQuad Quad_Status1;
	CMlQuad Quad_Status2;
	CMlLabel Label_Rank;
	CMlLabel Label_RankSuffix;
	CMlQuad Quad_TeamLogo;
	CMlLabel Label_PlayerName;
	CMlLabel Label_TeamName;
	CMlLabel Label_Points;
	CMlLabel Label_PointsSuffix;
	CMlLabel Label_Finalist;
	CMlLabel Label_TimeDiff;
	CMlLabel Label_TimeFrom;
	CMlLabel Label_TimeFromSuffix;
}

#Struct K_State {
	K_Controls Controls;
	Boolean IsVisible;
}

#Const C_Color_WarmUp {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_WarmUp))}}}
#Const C_Color_Green {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentTwo))}}}
#Const C_Color_Red {{{dump(CL::Hex6ToRgb(ChampionColorPalette::C_Loss))}}}

#Const C_TeamLogoPath {{{dump(C_TeamLogoPath)}}}
#Const C_FinalRankThreshold {{{dump(C_FinalRankThreshold)}}}
#Const C_DisplayGapAfter {{{dump(C_DisplayGapAfter)}}}
""",
"""
K_State SetVisibility(K_State _State, CSmPlayer _TargetPlayer, CSmPlayer _InputPlayer) {
	declare K_State State = _State;

	State.IsVisible = (
		_TargetPlayer != Null &&
		_TargetPlayer.User != Null &&
		_TargetPlayer.Score != Null &&
		_InputPlayer != Null &&
		_InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned
	);

	State.Controls.Frame_SpectatorInfo.Visible = State.IsVisible;

	return State;
}

K_State UpdateTarget(
	K_State _State,
	CSmPlayer _TargetPlayer,
	CSmPlayer _InputPlayer,
	Boolean _IsFinal,
	Boolean _IsWarmUp,
	Boolean _IsPause,
	Boolean _IsClashTime,
	Integer _CupPointsLimit,
	Text[] _MatchWinners
) {
	declare K_State State = SetVisibility(_State, _TargetPlayer, _InputPlayer);

	if (State.IsVisible && _TargetPlayer != Null && _TargetPlayer.User != Null && _TargetPlayer.Score != Null) {
		declare {{{PlayerProfiles::P}}}K_PlayerProfile PlayerProfile = {{{PlayerProfiles::P}}}GetPlayerProfiles().get(_TargetPlayer.User.WebServicesUserId, {{{PlayerProfiles::P}}}K_PlayerProfile {});
		declare {{{Shared::P}}}K_LiveRank LiveRank = {{{Shared::P}}}GetLiveRank(_TargetPlayer.Score);

		if (_IsWarmUp || _IsPause) {
			State.Controls.Quad_Status1.Colorize = C_Color_WarmUp;
			State.Controls.Quad_Status2.Colorize = C_Color_WarmUp;
		} else if (
			(!_IsFinal && (C_DisplayGapAfter <= 0 || LiveRank.Rank <= C_DisplayGapAfter)) ||
			(_IsFinal && LiveRank.Rank <= C_FinalRankThreshold)
		) {
			State.Controls.Quad_Status1.Colorize = C_Color_Green;
			State.Controls.Quad_Status2.Colorize = C_Color_Green;
		} else {
			State.Controls.Quad_Status1.Colorize = C_Color_Red;
			State.Controls.Quad_Status2.Colorize = C_Color_Red;
		}

		State.Controls.Label_Rank.Value = ""^LiveRank.Rank;
		State.Controls.Label_RankSuffix.Value = MV_Utils::GetRankSuffix(LiveRank.Rank);

		if (PlayerProfile.WebServicesUserId != "" && PlayerProfile.TeamLogoWhite != "") {
			State.Controls.Quad_TeamLogo.ImageUrl = C_TeamLogoPath^"/"^PlayerProfile.TeamLogoWhite;
		} else if (PlayerProfile.WebServicesUserId != "" && PlayerProfile.TeamLogo != "") {
			State.Controls.Quad_TeamLogo.ImageUrl = C_TeamLogoPath^"/"^PlayerProfile.TeamLogo;
		} else {
			State.Controls.Quad_TeamLogo.ImageUrl = "file://ZoneFlags/Login/"^_TargetPlayer.User.Login^"/country";
		}

		if (PlayerProfile.WebServicesUserId != "") {
			State.Controls.Label_PlayerName.RelativePosition_V3.Y = 1.75;
			State.Controls.Label_PlayerName.Value = PlayerProfile.Nickname;
			State.Controls.Label_TeamName.Value = PlayerProfile.Team;
		} else {
			State.Controls.Label_PlayerName.RelativePosition_V3.Y = -0.5;
			State.Controls.Label_PlayerName.Value = _TargetPlayer.User.Name;
			State.Controls.Label_TeamName.Value = "";
		}
		Tools::FitLabelValue(State.Controls.Label_PlayerName, 3.5, 1.5, 0.5);
		Tools::FitLabelValue(State.Controls.Label_TeamName, 2.5, 1.5, 0.5);

		if (_IsClashTime) {
			State.Controls.Label_Points.Visible = False;
			State.Controls.Label_PointsSuffix.Visible = False;
			State.Controls.Label_Finalist.Visible = False;
		} else if (_CupPointsLimit > 0 && _TargetPlayer.Score.Points >= _CupPointsLimit) {
			State.Controls.Label_Finalist.Value = {{{Shared::P}}}FormatPoints(_TargetPlayer.Score.Points, _CupPointsLimit, _MatchWinners, _TargetPlayer.User.WebServicesUserId, False);
			Tools::FitLabelValue(State.Controls.Label_Finalist, 3.5, 1.5, 0.5);
			State.Controls.Label_Points.Visible = False;
			State.Controls.Label_PointsSuffix.Visible = False;
			State.Controls.Label_Finalist.Visible = True;
		} else {
			State.Controls.Label_Points.Value = ""^_TargetPlayer.Score.Points;
			if (_TargetPlayer.Score.Points >= -1 && _TargetPlayer.Score.Points <= 1) {
				State.Controls.Label_PointsSuffix.Value = "{{{Text_Point}}}";
			} else {
				State.Controls.Label_PointsSuffix.Value = "{{{Text_Points}}}";
			}
			State.Controls.Label_Points.Visible = True;
			State.Controls.Label_PointsSuffix.Visible = True;
			State.Controls.Label_Finalist.Visible = False;
		}

		if (_IsWarmUp || _IsPause) {
			if (_IsWarmUp) State.Controls.Label_TimeDiff.Value = "{{{Text_WarmUp}}}";
			else if (_IsPause) State.Controls.Label_TimeDiff.Value = "{{{Text_Pause}}}";
			else State.Controls.Label_TimeDiff.Value = "";
			Tools::FitLabelValue(State.Controls.Label_TimeDiff, 5.5, 2., 0.5);
			State.Controls.Label_TimeFrom.Value = "";
			State.Controls.Label_TimeFromSuffix.Value = "";
		} else if (LiveRank.Rank == 1) {
			State.Controls.Label_TimeDiff.Value = "{{{Text_Leader}}}";
			Tools::FitLabelValue(State.Controls.Label_TimeDiff, 5.5, 2., 0.5);
			State.Controls.Label_TimeFrom.Value = "";
			State.Controls.Label_TimeFromSuffix.Value = "";
		} else if (LiveRank.TimeDiff >= 0) {
			State.Controls.Label_TimeDiff.Value = "+"^{{{Shared::P}}}GetShortTime(LiveRank.TimeDiff, False);
			Tools::FitLabelValue(State.Controls.Label_TimeDiff, 5.5, 2., 0.5);

			if (!_IsFinal && C_DisplayGapAfter > 0 && LiveRank.Rank > C_DisplayGapAfter) {
				State.Controls.Label_TimeFrom.Value = TL::Compose("{{{Text_From}}}", ""^C_DisplayGapAfter);
				State.Controls.Label_TimeFromSuffix.Value = MV_Utils::GetRankSuffix(C_DisplayGapAfter);
			} else {
				State.Controls.Label_TimeFrom.Value = TL::Compose("{{{Text_From}}}", "1");
				State.Controls.Label_TimeFromSuffix.Value = MV_Utils::GetRankSuffix(1);
			}
		} else {
			State.Controls.Label_TimeDiff.Value = "";
			State.Controls.Label_TimeFrom.Value = "";
			State.Controls.Label_TimeFromSuffix.Value = "";
		}
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare netread Boolean Net_ChampionCup_SpectatorInfo_IsVisible for UI;

declare K_State State;
declare Boolean DisplayModule;
declare Integer LiveRankingUpdate;
declare Boolean IsFinal;
declare Boolean IsWarmUp;
declare Boolean IsPause;
declare Boolean IsClashTime;
declare Ident InputPlayerId;
declare CSmPlayer::ESpawnStatus InputPlayerSpawnStatus;
declare Ident GUIPlayerId;
declare Integer CupPointsLimit;
declare Integer MatchWinnersUpdate;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_SpectatorInfo <=> (Frame_Global.GetFirstChild("frame-spectator-info") as CMlFrame);
State.Controls.Quad_Status1 <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("quad-status-1") as CMlQuad);
State.Controls.Quad_Status2 <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("quad-status-2") as CMlQuad);
State.Controls.Label_Rank <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("label-rank") as CMlLabel);
State.Controls.Label_RankSuffix <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("label-rank-suffix") as CMlLabel);
State.Controls.Quad_TeamLogo <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("quad-team-logo") as CMlQuad);
State.Controls.Label_PlayerName <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("label-player-name") as CMlLabel);
State.Controls.Label_TeamName <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("label-team-name") as CMlLabel);
State.Controls.Label_Points <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("label-points") as CMlLabel);
State.Controls.Label_PointsSuffix <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("label-points-suffix") as CMlLabel);
State.Controls.Label_Finalist <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("label-finalist") as CMlLabel);
State.Controls.Label_TimeDiff <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("label-time-diff") as CMlLabel);
State.Controls.Label_TimeFrom <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("label-time-from") as CMlLabel);
State.Controls.Label_TimeFromSuffix <=> (State.Controls.Frame_SpectatorInfo.GetFirstChild("label-time-from-suffix") as CMlLabel);

DisplayModule = Frame_Global.Visible;
CupPointsLimit = {{{Shared::P}}}GetCupPointsLimit();
MatchWinnersUpdate = {{{Shared::P}}}GetMatchWinnersUpdate();

State = SetVisibility(State, GUIPlayer, InputPlayer);
State = UpdateTarget(State, GUIPlayer, InputPlayer, IsFinal, IsWarmUp, IsPause, IsClashTime, CupPointsLimit, {{{Shared::P}}}GetMatchWinners());
***

***MainLoop***
***
if (PageIsVisible) {
	if (DisplayModule != Net_ChampionCup_SpectatorInfo_IsVisible) {
		DisplayModule = Net_ChampionCup_SpectatorInfo_IsVisible;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_Global.Visible) {
		if (
			(InputPlayer == Null && InputPlayerId != NullId) ||
			(InputPlayer != Null && (InputPlayerId != InputPlayer.Id || InputPlayerSpawnStatus != InputPlayer.SpawnStatus)) ||
			(GUIPlayer == Null && GUIPlayerId != NullId) ||
			(GUIPlayer != Null && GUIPlayerId != GUIPlayer.Id)
		) {
			if (InputPlayer != Null) {
				InputPlayerId = InputPlayer.Id;
				InputPlayerSpawnStatus = InputPlayer.SpawnStatus;
			} else {
				InputPlayerId = NullId;
			}
			if (GUIPlayer != Null) {
				GUIPlayerId = GUIPlayer.Id;
			} else {
				GUIPlayerId = NullId;
			}

			State = SetVisibility(State, GUIPlayer, InputPlayer);
			if (State.IsVisible) {
				State = UpdateTarget(State, GUIPlayer, InputPlayer, IsFinal, IsWarmUp, IsPause, IsClashTime, CupPointsLimit, {{{Shared::P}}}GetMatchWinners());
			}
		}

		if (State.IsVisible) {
			if (
				LiveRankingUpdate != {{{Shared::P}}}GetLiveRankingUpdate() ||
				IsFinal != {{{Shared::P}}}IsFinal() ||
				IsWarmUp != WarmupHelpers::IsWarmupActive(Teams[0]) ||
				IsPause != {{{Shared::P}}}IsPause() ||
				IsClashTime != {{{Shared::P}}}IsClashTime() ||
				CupPointsLimit != {{{Shared::P}}}GetCupPointsLimit() ||
				MatchWinnersUpdate != {{{Shared::P}}}GetMatchWinnersUpdate()
			) {
				LiveRankingUpdate = {{{Shared::P}}}GetLiveRankingUpdate();
				IsFinal = {{{Shared::P}}}IsFinal();
				IsWarmUp = WarmupHelpers::IsWarmupActive(Teams[0]);
				IsPause = {{{Shared::P}}}IsPause();
				IsClashTime = {{{Shared::P}}}IsClashTime();
				CupPointsLimit = {{{Shared::P}}}GetCupPointsLimit();
				MatchWinnersUpdate = {{{Shared::P}}}GetMatchWinnersUpdate();

				State = UpdateTarget(State, GUIPlayer, InputPlayer, IsFinal, IsWarmUp, IsPause, IsClashTime, CupPointsLimit, {{{Shared::P}}}GetMatchWinners());
			}
		}
	}
}
***
""",
[
	UIModules::Component(),
	Shared::Component(),
	PlayerProfiles::Component()
],
[]
	);
}