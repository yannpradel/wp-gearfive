/**
 *	UI module: KOVictory server side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/ChampionCommon/UIModules/KOVictory_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/UIModules/KOVictory_Common.Script.txt" as UIModules_KOVictory_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_KOVictory_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::K_ModuleConfig GetConfig() {
	return UIModules_KOVictory_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Update the knockout progression
 *
 *	@param	_SourceAccountId					The account id of the player doing the knock out
 *	@param	_TargetAccountId					The account id of the player being knocked out
 *																		Leave empty if several players are being knocked out
 *	@param	_Current									The number of validated checkpoint
 *	@param	_Max											The number of checkpoints needed to validate the knock out
 */
Void SetKOProgression(Text _SourceAccountId, Text _TargetAccountId, Integer _Current, Integer _Max) {
	declare netwrite Integer Net_FinalTMGL_KOVictory_Update for Teams[0];
	declare netwrite Text Net_FinalTMGL_KOVictory_SourceAccountId for Teams[0];
	declare netwrite Text Net_FinalTMGL_KOVictory_TargetAccountId for Teams[0];
	declare netwrite Integer Net_FinalTMGL_KOVictory_Current for Teams[0];
	declare netwrite Integer Net_FinalTMGL_KOVictory_Max for Teams[0];
	Net_FinalTMGL_KOVictory_Update += 1;
	Net_FinalTMGL_KOVictory_SourceAccountId = _SourceAccountId;
	Net_FinalTMGL_KOVictory_TargetAccountId = _TargetAccountId;
	Net_FinalTMGL_KOVictory_Current = _Current;
	Net_FinalTMGL_KOVictory_Max = _Max;
}
Void ResetKOProgression() {
	SetKOProgression("", "", 0, 0);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;

	declare netwrite Boolean Net_FinalTMGL_KOVictory_IsVisible for _Player;
	Net_FinalTMGL_KOVictory_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	ResetKOProgression();

	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}