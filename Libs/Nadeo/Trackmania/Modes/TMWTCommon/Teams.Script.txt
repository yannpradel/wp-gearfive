/**
 *	Teams for TMWT
 */
#Const Version		"1.1.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/TMWTCommon/Teams.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as Http
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Stylesheet.Script.txt" as TMWTStylesheet
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/ScoresTable_Common.Script.txt" as ScoresTable

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_Message {
	Text[] Customize;
	Text VideoUrl;
	Int2 VideoResolution;
	Integer VideoDelay;
	Text SoundUrl;
	Integer SoundDelay;
	Text Message;
	Integer MessageDuration;
	Integer MessageDelay;
}
#Struct K_Messages {
	K_Message Ace;
	K_Message Victory;
	K_Message Draw;
	K_Message Overtime;
	K_Message TrackPoint;
	K_Message MatchPoint;
	K_Message TrackWin;
	K_Message MatchWin;
}
#Struct K_Player {
	Text AccountId;
	Text Name;
	Text PhotoUrl;
}
#Struct K_Team {
	Text Id;
	Text Name;
	Text ShortName;
	Text CountryFlagUrl;
	Text LogoUrl;
	Text Sign2x3Url;
	Text Sign16x9Url;
	Text Sign64x10Url;
	K_Messages Messages;
	K_Player[] Players;
}
#Struct K_TeamsLoading {
	Boolean IsLoading;
	Http::K_Request Request;
	K_Team[] Teams;
}
#Struct K_TeamSelection {
	Text TeamId;
	Integer PlayersNb;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Player_NullId ""
#Const C_Player_Null K_Player {
	AccountId = ""
}
#Const C_Team_NullId ""
#Const C_Team_Null K_Team {
	Id = ""
}
#Const C_TeamsLoading_Null K_TeamsLoading {
	IsLoading = False,
	Teams = []
}
#Const C_Clan_Null 0

#Const C_Property_VideoUrl "VideoUrl"
#Const C_Property_VideoResolution "VideoResolution"
#Const C_Property_VideoDelay "VideoDelay"
#Const C_Property_SoundUrl "SoundUrl"
#Const C_Property_SoundDelay "SoundDelay"
#Const C_Property_Message "Message"
#Const C_Property_MessageDuration "MessageDuration"
#Const C_Property_MessageDelay "MessageDelay"

#Const C_Teams_GrandLeague [
	K_Team {
		Id = "alliance",
		Name = "Alliance",
		LogoUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/TeamsLogo/ALL.dds",
		Messages = K_Messages {
			TrackPoint = K_Message {
				Customize = ["SoundUrl", "MessageDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackPoint/TrackPoint_Alliance.wav",
				MessageDelay = 700
			},
			TrackWin = K_Message {
				Customize = ["SoundUrl", "VideoDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackWin/TrackWin_Alliance.wav",
				VideoDelay = 500
			}
		},
		Players = []
	},
	K_Team {
		Id = "bds",
		Name = "Team BDS",
		LogoUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/TeamsLogo/BDS.dds",
		Messages = K_Messages {
			TrackPoint = K_Message {
				Customize = ["SoundUrl", "MessageDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackPoint/TrackPoint_BDS.wav",
				MessageDelay = 700
			},
			TrackWin = K_Message {
				Customize = ["SoundUrl", "VideoDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackWin/TrackWin_BDS.wav",
				VideoDelay = 500
			}
		},
		Players = []
	},
	K_Team {
		Id = "big",
		Name = "BIG",
		LogoUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/TeamsLogo/BIG.dds",
		Messages = K_Messages {
			TrackPoint = K_Message {
				Customize = ["SoundUrl", "MessageDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackPoint/TrackPoint_BIG.wav",
				MessageDelay = 700
			},
			TrackWin = K_Message {
				Customize = ["SoundUrl", "VideoDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackWin/TrackWin_BIG.wav",
				VideoDelay = 500
			}
		},
		Players = []
	},
	K_Team {
		Id = "g1",
		Name = "Gamers First",
		LogoUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/TeamsLogo/G1.dds",
		Messages = K_Messages {
			TrackPoint = K_Message {
				Customize = ["SoundUrl", "MessageDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackPoint/TrackPoint_G1.wav",
				MessageDelay = 700
			},
			TrackWin = K_Message {
				Customize = ["SoundUrl", "VideoDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackWin/TrackWin_G1.wav",
				VideoDelay = 500
			}
		},
		Players = []
	},
	K_Team {
		Id = "itb",
		Name = "Into The Breach",
		LogoUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/TeamsLogo/ITB.dds",
		Messages = K_Messages {
			TrackPoint = K_Message {
				Customize = ["SoundUrl", "MessageDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackPoint/TrackPoint_ITB.wav",
				MessageDelay = 700
			},
			TrackWin = K_Message {
				Customize = ["SoundUrl", "VideoDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackWin/TrackWin_ITB.wav",
				VideoDelay = 500
			}
		},
		Players = []
	},
	K_Team {
		Id = "karmine-corp",
		Name = "Karmine Corp",
		LogoUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/TeamsLogo/KC.dds",
		Messages = K_Messages {
			TrackPoint = K_Message {
				Customize = ["SoundUrl", "MessageDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackPoint/TrackPoint_KarmineCorp.wav",
				MessageDelay = 700
			},
			TrackWin = K_Message {
				Customize = ["SoundUrl", "VideoDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackWin/TrackWin_KarmineCorp.wav",
				VideoDelay = 500
			}
		},
		Players = []
	},
	K_Team {
		Id = "sinners",
		Name = "Sinners",
		LogoUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/TeamsLogo/SIN.dds",
		Messages = K_Messages {
			TrackPoint = K_Message {
				Customize = ["SoundUrl", "MessageDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackPoint/TrackPoint_Sinners.wav",
				MessageDelay = 700
			},
			TrackWin = K_Message {
				Customize = ["SoundUrl", "VideoDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackWin/TrackWin_Sinners.wav",
				VideoDelay = 500
			}
		},
		Players = []
	},
	K_Team {
		Id = "solary",
		Name = "Solary",
		LogoUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/TeamsLogo/SLY.dds",
		Messages = K_Messages {
			TrackPoint = K_Message {
				Customize = ["SoundUrl", "MessageDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackPoint/TrackPoint_Solary.wav",
				MessageDelay = 700
			},
			TrackWin = K_Message {
				Customize = ["SoundUrl", "VideoDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackWin/TrackWin_Solary.wav",
				VideoDelay = 500
			}
		},
		Players = []
	}
]

#Const C_Teams_ChallengerLeague [
	K_Team {
		Id = "atn-attax",
		Name = "ALTERNATE aTTaX",
		LogoUrl = "",
		Players = []
	},
	K_Team {
		Id = "izi-dream",
		Name = "IziDream",
		LogoUrl = "",
		Players = []
	}
]

#Const C_Teams_Debug [
	K_Team {
		Id = "debug-a",
		Name = "Alpha AAA AAA AAA AAA AAA 123",
		LogoUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/TeamsLogo/ALL.dds",
		Messages = K_Messages {
			TrackPoint = K_Message {
				Customize = ["SoundUrl", "MessageDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackPoint/TrackPoint_Alliance.wav",
				MessageDelay = 700
			},
			TrackWin = K_Message {
				Customize = ["SoundUrl", "VideoDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackWin/TrackWin_Alliance.wav",
				VideoDelay = 500
			}
		},
		Players = [
			K_Player {
				AccountId = "9defb3a8-9f5a-44cf-88c6-e72c190f6d7c",
				Name = "Eole 111 111 111 111 111 ABC",
				PhotoUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/PlayersPhoto/DebugA.dds"
			},
			K_Player {
				AccountId = "00b24233-c60c-4991-ac66-a90dc4cff959",
				Name = "Eole 222 222 222 222 222 ABC"
			}
		]
	},
	K_Team {
		Id = "debug-b",
		Name = "Beta BBB BBB BBB BBB BBB 123",
		LogoUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/TeamsLogo/BDS.dds",
		Messages = K_Messages {
			TrackPoint = K_Message {
				Customize = ["SoundUrl", "MessageDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackPoint/TrackPoint_BDS.wav",
				MessageDelay = 700
			},
			TrackWin = K_Message {
				Customize = ["SoundUrl", "VideoDelay"],
				SoundUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/EventMessage/TrackWin/TrackWin_BDS.wav",
				VideoDelay = 500
			}
		},
		Players = [
			K_Player {
				AccountId = "ead9841a-9dc6-4e0a-95be-b00bd0c3e41e",
				Name = "Eole 333 333 333 333 333 ABC",
				PhotoUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWT/PlayersPhoto/DebugB.dds"
			},
			K_Player {
				AccountId = "7d57f85f-edc6-4e59-9943-b19776f6e294",
				Name = "Eole 444 444 444 444 444 ABC"
			},
			K_Player {
				AccountId = "cf681147-2c0e-4b79-a412-16a895f01a72",
				Name = "OOOO"
			},
			K_Player {
				AccountId = "79bb1c08-4519-4c34-9156-32dd48d48fc4",
				Name = "VVVV"
			},
			K_Player {
				AccountId = "403b50a4-e71e-4a3d-8f0c-62b7a7e4f284",
				Name = "AAAA"
			},
			K_Player {
				AccountId = "aa5b9808-a028-428e-add1-8078e4bccb42",
				Name = "YYYY"
			},
			K_Player {
				AccountId = "e6e4ab93-5fcd-44e2-b980-cc76d7e16ac9",
				Name = "CCCC"
			},
			K_Player {
				AccountId = "646ba4ba-f829-44e6-99ce-e56881eb0188",
				Name = "LLLL"
			}
		]
	}
]

#Const C_TeamUrl_GrandLeague "GrandLeague"
#Const C_TeamUrl_ChallengerLeague "ChallengerLeague"
#Const C_TeamUrl_Debug "Debug"

#Const C_DefaultTeams_Name [0 => "Blue", 1 => "Red"]
#Const C_DefaultTeams_EmblemUrl [0 => "", 1 => ""]

#Const C_RequestedClanTimeout 1000
#Const C_ClanNotInitialized -2

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare K_Team[Text] G_Teams;
declare K_Player[Text] G_Players;
declare Text[Text] G_PlayerAccountIdToTeamId;
declare K_Team[Integer] G_SelectedTeams;
declare Boolean G_TeamsAreInitialized;
declare Integer G_PlayersNb;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the teams to use in the match
K_TeamsLoading LoadTeams(Text _Url) {
	declare K_TeamsLoading TeamsLoading;

	switch (_Url) {
		case C_TeamUrl_GrandLeague: {
			TeamsLoading = K_TeamsLoading {
				IsLoading = False,
				Teams = C_Teams_GrandLeague
			};
		}
		case C_TeamUrl_ChallengerLeague: {
			TeamsLoading = K_TeamsLoading {
				IsLoading = False,
				Teams = C_Teams_ChallengerLeague
			};
		}
		case C_TeamUrl_Debug: {
			TeamsLoading = K_TeamsLoading {
				IsLoading = False,
				Teams = C_Teams_Debug
			};
		}
		default: {
			if (_Url == "") {
				TeamsLoading = K_TeamsLoading {
					IsLoading = False,
					Teams = []
				};
			} else {
				TeamsLoading = K_TeamsLoading {
					IsLoading = True,
					Request = Http::CreateGet(_Url, []),
					Teams = []
				};
			}
		}
	}

	return TeamsLoading;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the teams are being loading
Boolean IsLoading(K_TeamsLoading _TeamsLoading) {
	return _TeamsLoading.IsLoading;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the teams loading
K_TeamsLoading UpdateLoading(K_TeamsLoading _TeamsLoading) {
	if (!_TeamsLoading.IsLoading) return _TeamsLoading;

	declare K_TeamsLoading TeamsLoading = _TeamsLoading;
	TeamsLoading.Request = Http::Update(TeamsLoading.Request);
	if (!Http::IsRunning(TeamsLoading.Request)) {
		TeamsLoading.IsLoading = False;
		if (Http::IsSuccess(TeamsLoading.Request)) {
			TeamsLoading.Teams.fromjson(Http::GetResult(TeamsLoading.Request));
		}
		Http::Destroy(TeamsLoading.Request);
	}

	return TeamsLoading;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set teams on the server and send them to the clients
Void SetTeamsInfo(K_Team[] _Teams) {
	G_Teams = [];
	G_Players = [];
	G_PlayerAccountIdToTeamId = [];

	foreach (Team in _Teams) {
		G_Teams[Team.Id] = Team;
		foreach (Player in Team.Players) {
			G_Players[Player.AccountId] = Player;
			G_PlayerAccountIdToTeamId[Player.AccountId] = Team.Id;
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Reset the clans associated to the players by the matchmaking
Void ResetMatchmakingClans() {
	declare Integer[Text] Trackmania_TMWTCommon_PlayerAccountIdToMatchmakingClan for This = [];
	Trackmania_TMWTCommon_PlayerAccountIdToMatchmakingClan = [];
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the clan associated to the player by the matchmaking
Void SetMatchmakingClan(Text _AccountId, Integer _Clan) {
	declare Integer[Text] Trackmania_TMWTCommon_PlayerAccountIdToMatchmakingClan for This = [];
	Trackmania_TMWTCommon_PlayerAccountIdToMatchmakingClan[_AccountId] = _Clan;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Remove a player from matchmaking
Void ResetMatchmakingClan(Text _AccountId) {
	declare Integer[Text] Trackmania_TMWTCommon_PlayerAccountIdToMatchmakingClan for This = [];
	Trackmania_TMWTCommon_PlayerAccountIdToMatchmakingClan.removekey(_AccountId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the clan associated to the player by the matchmaking
Integer GetMatchmakingClan(Text _AccountId) {
	declare Integer[Text] Trackmania_TMWTCommon_PlayerAccountIdToMatchmakingClan for This = [];
	return Trackmania_TMWTCommon_PlayerAccountIdToMatchmakingClan.get(_AccountId, C_Clan_Null);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the players' names to display in the scores table
ScoresTable::K_CustomName[Text] GetScoresTableNames(CSmMode _This) {
	declare ScoresTable::K_CustomName[Text] CustomNames;

	foreach (Score in _This.Scores) {
		if (Score.User != Null) {
			declare K_Player Player = G_Players.get(Score.User.WebServicesUserId, C_Player_Null);
			if (Player.AccountId != "" && Player.Name != "") {
				CustomNames[Player.AccountId] = ScoresTable::K_CustomName {
					Name = Player.Name,
					IsFirstPartyDisplayName = Score.User.IsFirstPartyDisplayName,
					DisplayFirstParty = True
				};
			}
		}
	}

	return CustomNames;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send all the teams info to the clients
Void SendAllTeams(CSmMode _This) {
	declare netwrite K_Team[Text] Net_TMWTCommon_Teams_AllTeams for _This.Teams[0] = [];
	Net_TMWTCommon_Teams_AllTeams = G_Teams;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get all the teams info
K_Team[Text] GetAllTeamsInfo(CMlScriptIngame _This) {
	declare netread K_Team[Text] Net_TMWTCommon_Teams_AllTeams for _This.Teams[0] = [];
	return Net_TMWTCommon_Teams_AllTeams;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the teams info to the clients
Void Private_SendTeams(CSmMode _This, K_Team[Integer] _Teams) {
	declare netwrite Integer Net_TMWTCommon_Teams_TeamsUpdate for _This.Teams[0] = 0;
	declare netwrite K_Team[Integer] Net_TMWTCommon_Teams_Teams for _This.Teams[0] = [];
	Net_TMWTCommon_Teams_Teams = _Teams;
	Net_TMWTCommon_Teams_TeamsUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get the teams info last update
Integer GetTeamsUpdate(CMlScriptIngame _This) {
	declare netread Integer Net_TMWTCommon_Teams_TeamsUpdate for _This.Teams[0] = 0;
	return Net_TMWTCommon_Teams_TeamsUpdate;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get the teams info
K_Team[Integer] GetTeamsInfo(CMlScriptIngame _This) {
	declare netread K_Team[Integer] Net_TMWTCommon_Teams_Teams for _This.Teams[0] = [];
	return Net_TMWTCommon_Teams_Teams;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the name of a clan
Text GetClanName(CMlScriptIngame _This, K_Team[Integer] _TeamsInfo, Integer _Clan) {
	declare Text ClanName = _TeamsInfo.get(_Clan, C_Team_Null).Name;
	if (ClanName == "" && _This.Teams.existskey(_Clan - 1)) {
		ClanName = _This.Teams[_Clan - 1].Name;
	}
	return ClanName;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the short name of a clan
Text GetClanShortName(K_Team[Integer] _TeamsInfo, Integer _Clan) {
	return _TeamsInfo.get(_Clan, C_Team_Null).ShortName;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the country url of a clan
Text GetClanCountryFlagUrl(K_Team[Integer] _TeamsInfo, Integer _Clan) {
	return _TeamsInfo.get(_Clan, C_Team_Null).CountryFlagUrl;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the logo url of a clan
Text GetClanLogoUrl(CMlScriptIngame _This, K_Team[Integer] _TeamsInfo, Integer _Clan) {
	declare Text ClanLogoUrl = _TeamsInfo.get(_Clan, C_Team_Null).LogoUrl;
	if ((ClanLogoUrl == "" || !_This.Http.IsValidUrl(ClanLogoUrl)) && _This.Teams.existskey(_Clan - 1)) {
		ClanLogoUrl = _This.Teams[_Clan - 1].EmblemUrl;
	}
	return ClanLogoUrl;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the 2x3 sign url of a clan
Text GetClanSign2x3Url(K_Team[Integer] _TeamsInfo, Integer _Clan) {
	return _TeamsInfo.get(_Clan, C_Team_Null).Sign2x3Url;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the 16x9 sign url of a clan
Text GetClanSign16x9Url(K_Team[Integer] _TeamsInfo, Integer _Clan) {
	return _TeamsInfo.get(_Clan, C_Team_Null).Sign16x9Url;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the 64x10 sign url of a clan
Text GetClanSign64x10Url(K_Team[Integer] _TeamsInfo, Integer _Clan) {
	return _TeamsInfo.get(_Clan, C_Team_Null).Sign64x10Url;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get the players info
K_Player[Text] GetPlayersInfo(CMlScriptIngame _This) {
	declare netread Integer Net_TMWTCommon_Teams_TeamsUpdate for _This.Teams[0] = 0;
	declare Integer TMWTCommon_Teams_TeamsUpdate for _This.Teams[0] = 0;
	declare K_Player[Text] TMWTCommon_Teams_Players for _This.Teams[0] = [];

	// Compute and cache the players info
	if (TMWTCommon_Teams_TeamsUpdate != Net_TMWTCommon_Teams_TeamsUpdate) {
		declare netread K_Team[Integer] Net_TMWTCommon_Teams_Teams for _This.Teams[0] = [];
		TMWTCommon_Teams_TeamsUpdate = Net_TMWTCommon_Teams_TeamsUpdate;
		TMWTCommon_Teams_Players = [];
		foreach (Team in Net_TMWTCommon_Teams_Teams) {
			foreach (Player in Team.Players) {
				TMWTCommon_Teams_Players[Player.AccountId] = Player;
			}
		}
	}

	return TMWTCommon_Teams_Players;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the name of a player
Text GetPlayerName(K_Player[Text] _PlayersInfo, Text _AccountId, Text _DefaultName, Boolean _IsFirstPartyDisplayName) {
	declare Text Name = _PlayersInfo.get(_AccountId, C_Player_Null).Name;
	if (Name == "") Name = _DefaultName;
	return UserStore::GetPlayerName(Name, _IsFirstPartyDisplayName);
}
Text GetPlayerName(K_Player[Text] _PlayersInfo, CUser _User) {
	if (_User == Null) return "";
	return GetPlayerName(_PlayersInfo, _User.WebServicesUserId, _User.Name, _User.IsFirstPartyDisplayName);
}
Text GetPlayerName(CUser _User) {
	assert(This is CSmMode, "This function can only be used server side in the game mode script");
	if (_User == Null) return "";
	declare Text Name = G_Players.get(_User.WebServicesUserId, C_Player_Null).Name;
	if (Name == "") Name = _User.Name;
	return Name; //< It will be the responsability of the client to display the platform logo if needed
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the player's photo
Text GetPlayerPhotoUrl(K_Player[Text] _PlayersInfo, Text _AccountId) {
	return _PlayersInfo.get(_AccountId, C_Player_Null).PhotoUrl;
}
Text GetPlayerPhotoUrl(K_Player[Text] _PlayersInfo, CUser _User) {
	if (_User == Null) return "";
	return GetPlayerPhotoUrl(_PlayersInfo, _User.WebServicesUserId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Select the teams to use in the mode
Void SelectTeams(CSmMode _This) {
	// Find how many players of each team there are in each clan
	declare Integer[Text][Integer] ClansTeamsIdsPlayersNb;
	foreach (Player in _This.Players) {
		if ((Player.CurrentClan == 1 || Player.CurrentClan == 2) && Player.User != Null) {
			declare Text TeamId = G_PlayerAccountIdToTeamId.get(Player.User.WebServicesUserId, C_Team_NullId);
			if (TeamId != C_Team_NullId) {
				if (ClansTeamsIdsPlayersNb.existskey(Player.CurrentClan)) {
					if (ClansTeamsIdsPlayersNb[Player.CurrentClan].existskey(TeamId)) {
						ClansTeamsIdsPlayersNb[Player.CurrentClan][TeamId] += 1;
					} else {
						ClansTeamsIdsPlayersNb[Player.CurrentClan][TeamId] = 1;
					}
				} else {
					ClansTeamsIdsPlayersNb[Player.CurrentClan] = [TeamId => 1];
				}
			}
		}
	}

	// Find the two most populated teams for each clan
	declare K_TeamSelection[][Integer] ClansMostPopulatedTeams;
	for (Clan, 1, 2) {
		ClansMostPopulatedTeams[Clan] = [];
		if (ClansTeamsIdsPlayersNb.existskey(Clan)) {
			declare Integer[Text] SortedTeamsIdsPlayersNb = ClansTeamsIdsPlayersNb[Clan].sortreverse();
			foreach (TeamId => PlayersNb in SortedTeamsIdsPlayersNb) {
				ClansMostPopulatedTeams[Clan].add(K_TeamSelection {
					TeamId = TeamId,
					PlayersNb = PlayersNb
				});
				if (ClansMostPopulatedTeams[Clan].count >= 2) break;
			}
		}
	}

	// Select the two teams to use
	declare K_Team[Integer] PreviouslySelectedTeams = G_SelectedTeams;
	G_SelectedTeams = [1 => C_Team_Null, 2 => C_Team_Null];
	if (ClansMostPopulatedTeams[1].count > 0 && ClansMostPopulatedTeams[2].count > 0) {
		// Both clans have players from teams, we want to avoid using the same team for both clans
		if (ClansMostPopulatedTeams[1][0].TeamId == ClansMostPopulatedTeams[2][0].TeamId) {
			// The most populated team is the same for both clans
			if (ClansMostPopulatedTeams[2][0].PlayersNb > ClansMostPopulatedTeams[1][0].PlayersNb) {
				// Clan 2 has more players of this team
				G_SelectedTeams[2] = G_Teams.get(ClansMostPopulatedTeams[2][0].TeamId, C_Team_Null);
				if (ClansMostPopulatedTeams[1].count > 1) {
					// There is an alternative for clan 1
					G_SelectedTeams[1] = G_Teams.get(ClansMostPopulatedTeams[1][1].TeamId, C_Team_Null);
				} else {
					// There are no alternative for clan 1
					G_SelectedTeams[1] = C_Team_Null;
				}
			} else if (ClansMostPopulatedTeams[1][0].PlayersNb > ClansMostPopulatedTeams[2][0].PlayersNb) {
				// Clan 1 has more players of this team
				G_SelectedTeams[1] = G_Teams.get(ClansMostPopulatedTeams[1][0].TeamId, C_Team_Null);
				if (ClansMostPopulatedTeams[2].count > 1) {
					// There is an alternative for clan 2
					G_SelectedTeams[2] = G_Teams.get(ClansMostPopulatedTeams[2][1].TeamId, C_Team_Null);
				} else {
					// There are no alternative for clan 2
					G_SelectedTeams[2] = C_Team_Null;
				}
			} else if (ClansMostPopulatedTeams[1].count > 1) {
				// Another team is available for clan 1
				G_SelectedTeams[1] = G_Teams.get(ClansMostPopulatedTeams[1][1].TeamId, C_Team_Null);
				G_SelectedTeams[2] = G_Teams.get(ClansMostPopulatedTeams[2][0].TeamId, C_Team_Null);
			} else if (ClansMostPopulatedTeams[2].count > 1) {
				// Another team is available for clan 2
				G_SelectedTeams[1] = G_Teams.get(ClansMostPopulatedTeams[1][0].TeamId, C_Team_Null);
				G_SelectedTeams[2] = G_Teams.get(ClansMostPopulatedTeams[2][1].TeamId, C_Team_Null);
			} else {
				// Both clans has only one team available and its the same
				// Give the team to clan 1
				G_SelectedTeams[1] = G_Teams.get(ClansMostPopulatedTeams[1][0].TeamId, C_Team_Null);
				G_SelectedTeams[2] = C_Team_Null;
			}
		} else {
			// The most populated teams are different for each clan
			G_SelectedTeams[1] = G_Teams.get(ClansMostPopulatedTeams[1][0].TeamId, C_Team_Null);
			G_SelectedTeams[2] = G_Teams.get(ClansMostPopulatedTeams[2][0].TeamId, C_Team_Null);
		}
	} else {
		// Only one clan have players from a team, we can safely use the team without duplication
		if (ClansMostPopulatedTeams[1].count > 0) {
			G_SelectedTeams[1] = G_Teams.get(ClansMostPopulatedTeams[1][0].TeamId, C_Team_Null);
		}
		if (ClansMostPopulatedTeams[2].count > 0) {
			G_SelectedTeams[2] = G_Teams.get(ClansMostPopulatedTeams[2][0].TeamId, C_Team_Null);
		}
	}

	// Update the C++ teams and send teams info to the clients if they changed
	if (
		!G_TeamsAreInitialized ||
		PreviouslySelectedTeams.get(1, C_Team_Null).Id != G_SelectedTeams.get(1, C_Team_Null).Id ||
		PreviouslySelectedTeams.get(2, C_Team_Null).Id != G_SelectedTeams.get(2, C_Team_Null).Id
	) {
		G_TeamsAreInitialized = True;
		for (Clan, 1, 2) {
			declare K_Team Team = G_SelectedTeams.get(Clan, C_Team_Null);
			if (Team.Id == C_Team_NullId) {
				Teams[Clan - 1].Name = C_DefaultTeams_Name[Clan - 1];
				Teams[Clan - 1].EmblemUrl = C_DefaultTeams_EmblemUrl[Clan - 1];
			} else {
				Teams[Clan - 1].Name = Team.Name;
				Teams[Clan - 1].EmblemUrl = Team.LogoUrl;
			}
			if (Clan == 1) {
				Teams[Clan - 1].ColorPrimary = TMWTStylesheet::C_ColorRGB_TMWT_BlueTeam;
				Teams[Clan - 1].ColorUI = TMWTStylesheet::C_ColorRGB_TMWT_BlueTeam;
			} else if (Clan == 2) {
				Teams[Clan - 1].ColorPrimary = TMWTStylesheet::C_ColorRGB_TMWT_RedTeam;
				Teams[Clan - 1].ColorUI = TMWTStylesheet::C_ColorRGB_TMWT_RedTeam;
			}
		}

		Private_SendTeams(_This, G_SelectedTeams);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the player to the clan they belong to when they join the server
Void SetPlayerClanOnJoin(CSmMode _This, CSmPlayer _Player, Boolean _IsMatchmaking) {
	if (_Player == Null || _Player.User == Null) return;
	declare Integer PlayerClan = C_Clan_Null;

	if (_IsMatchmaking) {
		PlayerClan = GetMatchmakingClan(_Player.User.WebServicesUserId);
		_This.SetPlayerClan(_Player, PlayerClan);
	} else {
		declare K_Team Clan1Team = G_SelectedTeams.get(1, C_Team_Null);
		declare K_Team Clan2Team = G_SelectedTeams.get(2, C_Team_Null);
		declare Text PlayerTeamId = G_PlayerAccountIdToTeamId.get(_Player.User.WebServicesUserId, C_Team_NullId);

		if (Clan1Team.Id != C_Team_NullId && PlayerTeamId == Clan1Team.Id) {
			PlayerClan = 1;
		} else if (Clan2Team.Id != C_Team_NullId && PlayerTeamId == Clan2Team.Id) {
			PlayerClan = 2;
		} else if (PlayerTeamId != C_Team_NullId && (Clan1Team.Id == C_Team_NullId || Clan2Team.Id == C_Team_NullId)) {
			// The player is not in one of the already selected team
			// But they are part of another team and there's still an open team slot
			if (Clan1Team.Id == C_Team_NullId && Clan2Team.Id == C_Team_NullId) {
				// Both team slots are open, put the player in the clan with less players
				if (_This.ClansNbPlayers[1] > _This.ClansNbPlayers[2]) {
					PlayerClan = 2;
				} else {
					PlayerClan = 1;
				}
			} if (Clan1Team.Id == C_Team_NullId) {
				PlayerClan = 1;
			} else {
				PlayerClan = 2;
			}
		} else if (_This.ClansNbPlayers[1] > _This.ClansNbPlayers[2]) {
			PlayerClan = 2;
		} else {
			PlayerClan = 1;
		}

		if (PlayerClan == 1 || PlayerClan == 2) {
			declare Integer TMWTCommon_Teams_RequestedClanTimeout for _Player = Now;
			declare Integer TMWTCommon_Teams_RequestedClan for _Player = _Player.RequestedClan;
			if (_This.ServerAdmin == Null || _Player.RequestedClan == PlayerClan) {
				TMWTCommon_Teams_RequestedClanTimeout = Now;
				TMWTCommon_Teams_RequestedClan = _Player.RequestedClan;
			} else {
				// Despite the function name, it needs a clan index and not a team index
				// Warning 1: the change of requested clan is not instant, it takes a few hundred milliseconds
				// Warning 2: in local server, the function has no effect on the player hosting the server, they keep their requested clan
				_This.ServerAdmin.ForcePlayerRequestedTeam(_Player.User, PlayerClan);
				TMWTCommon_Teams_RequestedClanTimeout = Now + C_RequestedClanTimeout;
				TMWTCommon_Teams_RequestedClan = PlayerClan;
			}
			_This.SetPlayerClan(_Player, PlayerClan);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the requested clan of the player
Integer GetPlayerRequestedClan(CSmPlayer _Player, Boolean _IsMatchmaking) {
	if (_IsMatchmaking) {
		if (_Player.User == Null) {
			return C_Clan_Null;
		} else {
			return GetMatchmakingClan(_Player.User.WebServicesUserId);
		}
	} else {
		declare Integer TMWTCommon_Teams_RequestedClanTimeout for _Player = Now;
		if (Now < TMWTCommon_Teams_RequestedClanTimeout) {
			declare Integer TMWTCommon_Teams_RequestedClan for _Player = _Player.RequestedClan;
			if (TMWTCommon_Teams_RequestedClan == _Player.RequestedClan) {
				TMWTCommon_Teams_RequestedClanTimeout = Now;
			} else {
				return TMWTCommon_Teams_RequestedClan;
			}
		}
		return _Player.RequestedClan;
	}
	return C_Clan_Null;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Move the player to the correct clan. Player must be unspawned.
Void MovePlayerToRequestedClan(CSmMode _This, CSmPlayer _Player, Boolean _IsMatchmaking) {
	_This.SetPlayerClan(_Player, GetPlayerRequestedClan(_Player, _IsMatchmaking));
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if a player can play the mode
Boolean CanPlay(CSmPlayer _Player, Boolean _IsMatchmaking) {
	return (
		!_IsMatchmaking ||
		GetPlayerRequestedClan(_Player, _IsMatchmaking) != C_Clan_Null
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Automatically select the teams if a player changed clan, joined or left
Void AutoSelectTeams(CSmMode _This) {
	declare Boolean NeedTeamsUpdate = False;
	if (G_PlayersNb != _This.Players.count) {
		G_PlayersNb = _This.Players.count;
		NeedTeamsUpdate = True;
	}
	foreach (Player in _This.Players) {
		declare Integer TMWTCommon_Teams_CurrentClan for Player = C_ClanNotInitialized;
		if (TMWTCommon_Teams_CurrentClan != Player.CurrentClan) {
			TMWTCommon_Teams_CurrentClan = Player.CurrentClan;
			NeedTeamsUpdate = True;
		}
	}
	if (NeedTeamsUpdate) {
		SelectTeams(_This);
	}
}