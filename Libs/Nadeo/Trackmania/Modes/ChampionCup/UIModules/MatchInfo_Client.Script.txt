/**
 *	UI module: MatchInfo client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/ChampionCup/UIModules/MatchInfo_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as MenuConst
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/PlayerProfiles.Script.txt" as PlayerProfiles
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCup/UIModules/MatchInfo_Common.Script.txt" as UIModules_MatchInfo_Common
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/Shared_Client.Script.txt" as Shared
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/ZIndex.Script.txt" as ZIndex

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_MatchInfo_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_MatchInfo_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [ChampionCup] Displayed beside the best lap time of the race
	declare Text Text_BestLap = _("Best lap");
	//L16N [ChampionCup] Text displayed when a player improves the best lap time
	declare Text Text_NewBestLap = _("New best lap");
	//L16N [ChampionCup] %1 will be replaced by the number of the track or the track progress. eg: "Track 2" or "Track 2/6"
	declare Text Text_Map = _("|League|Track %1");
	//L16N [ChampionCup] Displayed beside the world record time
	declare Text Text_WorldRecord = _("World record");
	//L16N [ChampionCup] Text displayed when a player improves the lap time world record
	declare Text Text_NewWorldRecord = _("New world record");
	//L16N [ChampionCup] Name of the first stage of the match
	declare Text Text_OpeningStage = _("|Champion|Opening stage");
	//L16N [ChampionCup] Name of the last stage of the match
	declare Text Text_FinalStage = _("|Champion|Final stage");
	// Do not translate
	declare Text Text_ClashTime = "Clash Time";

	declare Text Color_Text = "ffffff";
	declare Text Color_Background = Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark);
	declare Text Color_HihglighText = Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne);

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-bold" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="{{{Color_Text}}}" textsize="3" textprefix="$t$i" />
</stylesheet>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_MatchInfo}}}" size="320 180" halign="center" valign="center" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_MatchInfo_Common::C_UIModuleConfig)}}}>
		<frame id="frame-lap-info" z-index="2">
			<quad pos="-24.5 -20" z-index="0" size="14.66 14.66" halign="center" valign="center" opacity="0.7" bgcolor="{{{Color_Background}}}"/>
			<frame z-index="1">
				<label id="label-laps-current" pos="-31.75 -21" size="10 14.66" valign="center2" textsize="9" class="text-bold" />
				<label id="label-laps-total" pos="-17.25 -19" size="5.5 12.66" halign="right" valign="center2" textsize="1.75" class="text-bold" textcolor="{{{Color_HihglighText}}}"/>
			</frame>
		</frame>
		<frame id="frame-map-info" pos="45.25 0" z-index="1">
			<frame z-index="0">
				<quad pos="-1.86 -4." z-index="-2" size="60 14.66" halign="center" valign="center" opacity="0.7" bgcolor="{{{Color_Background}}}"/>
				<quad id="quad-multilap-icon" pos="20.5 -4." z-index="-1" size="11 11" halign="center" valign="center" image="{{{Icons::C_Icon_256x256_Mode_Multi_Lap}}}" colorize="ddd"/>
			</frame>
			<frame id="frame-map-info-labels" pos="-20 0" z-index="1" hidden="1">
				<label id="label-map-name" pos="-30 -1." size="35 6.8" valign="center2" textsize="3" class="text-bold" />
				<label id="label-map-count" pos="26.25 -1." size="21.25 6.8" halign="right" valign="center2" textsize="3" class="text-bold" textcolor="{{{Color_HihglighText}}}" />
				<label id="label-stage" pos="-30. -7.75" size="35 6.8" valign="center2" textsize="3" class="text-bold" />
				<label id="label-chrono" pos="26.25 -7.75" size="20 6.8" halign="right" valign="center2" textsize="2.75" text="--:--.--" class="text-bold" />
			</frame>
		</frame>
		<frame size="45.12 15" pos="-17.12 -12.5">
			<frame pos="17.12 12.5">
				<frame id="frame-best-lap-info" pos="45.25 0" z-index="0" hidden="1">
					<frame id="frame-best-lap-current" z-index="1">
						<frame z-index="0">
							<quad pos="6.12 -20" z-index="-2" size="44 14.66" halign="center" valign="center" opacity="0.7" bgcolor="{{{Color_Background}}}"/>
							<quad pos="23 -17.5" z-index="-1" size="8 8" halign="center" valign="center" image="{{{MenuConst::C_ImageUrl_Champion_Icon_BestLap}}}" colorize="{{{Color_HihglighText}}}"/>
						</frame>
						<frame z-index="1">
							<label id="label-time-legend" pos="-14.12 -18" size="42 10" valign="center2" textsize="1.25" class="text-bold" text="{{{Text_BestLap}}}"/>
							<label id="label-best-lap-current-player" pos="-14.33 -23.25" size="25 6" valign="center2" textsize="1.25" class="text-bold"/>
							<label id="label-best-lap-current-time" pos="25.75 -23.25" size="15 6" halign="right" valign="center2" textsize="1.5" class="text-bold"/>
						</frame>
					</frame>
					<frame id="frame-best-lap-new" pos="44 0" z-index="2" hidden="1">
						<quad id="quad-best-lap-new-bg" pos="6.12 -20" z-index="0" size="44 14.66" halign="center" valign="center" opacity="0.6" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}"/>
						<label id="label-new-time-legend" pos="6.12 -18" z-index="1" size="42 10" halign="center" valign="center2" textsize="2" class="text-bold" text="{{{Text_NewBestLap}}}"/>
						<label id="label-best-lap-new-name" pos="6.12 -23.25" z-index="1" size="42 6" halign="center" valign="center2" textsize="1.25" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}" class="text-bold"/>
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/AudioManager_ML.Script.txt" as AudioManager
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/Helpers_Client.Script.txt" as RaceHelpers
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/WarmupHelpers_Client.Script.txt" as WarmupHelpers

#Struct K_Controls {
	CMlFrame Frame_MapInfo;
	CMlFrame Frame_LapInfo;
	CMlFrame Frame_BestLapInfo;
	CMlFrame Frame_MapInfoLabels;
	CMlLabel Label_LapsCurrent;
	CMlLabel Label_LapsTotal;
	CMlLabel Label_Stage;
	CMlLabel Label_MapCount;
	CMlLabel Label_MapName;
	CMlQuad Quad_MultilapIcon;
	CMlFrame Frame_BestLapCurrent;
	CMlLabel Label_BestLapCurrentPlayer;
	CMlLabel Label_BestLapCurrentTime;
	CMlFrame Frame_BestLapNew;
	CMlQuad Quad_BestLapNewBg;
	CMlLabel Label_BestLapNewPlayer;
	CMlLabel Label_TimeLegend;
	CMlLabel Label_NewTimeLegend;
}

#Struct K_BestLapAnim {
	Boolean Active;
	Integer UpdateNameTime;
	Integer AnimEndTime;
	Text Name;
	Integer Time;
}

#Struct K_State {
	K_Controls Controls;
	Boolean LiveRankingIsVisible;
	Boolean WarmUpIsVisible;
	Boolean MatchInfoIsVisible;
	Integer LapsCurrent;
	Integer LapsTotal;
	Int2 MapsProgression;
	Text MapUid;
	Boolean IsFinal;
	Boolean IsClashTime;
	K_BestLapAnim BestLapAnim;
	Boolean InputPlayerIsSpectator;
}

#Const C_BestLapDisplayDuration 2500
#Const C_BestLapSound "BestLap"
#Const C_LapNumberUpdateFrequency 250
""",
"""
K_State SetVisibility(K_State _State, Boolean _LiveRankingIsVisible, Boolean _WarmUpIsVisible, Boolean _InputPlayerIsSpectator, Boolean _PlayAnim) {
	declare K_State State = _State;
	State.LiveRankingIsVisible = _LiveRankingIsVisible;
	State.WarmUpIsVisible = _WarmUpIsVisible;
	State.InputPlayerIsSpectator = _InputPlayerIsSpectator;
	declare Boolean HideForSpectatorsDuringWarmUp = State.WarmUpIsVisible && State.InputPlayerIsSpectator;
	State.MatchInfoIsVisible = State.LiveRankingIsVisible && !HideForSpectatorsDuringWarmUp;

	AnimMgr.Flush(_State.Controls.Frame_MapInfo);
	AnimMgr.Flush(_State.Controls.Frame_LapInfo);
	AnimMgr.Flush(_State.Controls.Frame_BestLapInfo);
	AnimMgr.Flush(_State.Controls.Frame_MapInfoLabels);
	AnimMgr.Flush(_State.Controls.Quad_MultilapIcon);

	if (State.MatchInfoIsVisible) {
		if (_PlayAnim) {
			AnimMgr.Add(_State.Controls.Frame_MapInfo, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_State.Controls.Frame_LapInfo, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_State.Controls.Frame_BestLapInfo, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_State.Controls.Frame_MapInfoLabels, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_State.Controls.Quad_MultilapIcon, "<frame opacity=\"0\" />", 100, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			_State.Controls.Frame_MapInfo.Visible = True;
			_State.Controls.Frame_LapInfo.Visible = True;
			_State.Controls.Frame_BestLapInfo.Visible = True;
			_State.Controls.Frame_MapInfoLabels.Visible = True;
			_State.Controls.Frame_MapInfo.RelativePosition_V3.X = 0.;
			_State.Controls.Frame_LapInfo.RelativePosition_V3.X = 0.;
			_State.Controls.Frame_BestLapInfo.RelativePosition_V3.X = 0.;
			_State.Controls.Frame_MapInfoLabels.RelativePosition_V3.X = 0.;
			_State.Controls.Quad_MultilapIcon.Opacity = 0.;
		}
	} else if (HideForSpectatorsDuringWarmUp) {
		_State.Controls.Frame_MapInfo.Visible = False;
		_State.Controls.Frame_LapInfo.Visible = False;
		_State.Controls.Frame_BestLapInfo.Visible = False;
	} else {
		if (_PlayAnim) {
			AnimMgr.Add(_State.Controls.Frame_MapInfo, "<frame pos=\"-45.25 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_State.Controls.Frame_LapInfo, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_State.Controls.Frame_BestLapInfo, "<frame pos=\"-45.25 0\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_State.Controls.Frame_MapInfoLabels, "<frame pos=\"-20 0\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_State.Controls.Quad_MultilapIcon, "<frame opacity=\"1\" />", 100, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			_State.Controls.Frame_MapInfo.Visible = True;
			_State.Controls.Frame_LapInfo.Visible = True;
			_State.Controls.Frame_BestLapInfo.Visible = False;
			_State.Controls.Frame_MapInfoLabels.Visible = False;
			_State.Controls.Frame_MapInfo.RelativePosition_V3.X = -45.25;
			_State.Controls.Frame_LapInfo.RelativePosition_V3.X = 0.;
			_State.Controls.Frame_BestLapInfo.RelativePosition_V3.X = -45.25;
			_State.Controls.Frame_MapInfoLabels.RelativePosition_V3.X = -20.;
			_State.Controls.Quad_MultilapIcon.Opacity = 1.;

		}
	}

	return State;
}

K_State UpdateMap(
	K_State _State,
	CMap _Map,
	Int2 _MapsProgression,
	Boolean _IsFinal,
	Boolean _IsClashTime
) {
	declare K_State State = _State;
	State.MapsProgression = _MapsProgression;
	if (_Map == Null) State.MapUid = "";
	else State.MapUid = _Map.MapInfo.MapUid;
	State.IsFinal = _IsFinal;
	State.IsClashTime = _IsClashTime;

	if (State.IsClashTime) {
		State.Controls.Label_Stage.Value = "{{{Text_ClashTime}}}";
	} else if (State.IsFinal) {
		State.Controls.Label_Stage.Value = "{{{Text_FinalStage}}}";
	} else {
		State.Controls.Label_Stage.Value = "{{{Text_OpeningStage}}}";
	}
	Tools::FitLabelValue(State.Controls.Label_Stage, 3., 1., 0.25);

	if (State.MapsProgression.Y > 0) {
		State.Controls.Label_MapCount.Value = TL::Compose("{{{Text_Map}}}", State.MapsProgression.X^"/"^State.MapsProgression.Y);
		Tools::FitLabelValue(State.Controls.Label_MapCount, 2.75, 1., 0.25);
	} else {
		State.Controls.Label_MapCount.Value = "";
	}

	if (_Map != Null) {
		State.Controls.Label_MapName.Value = _Map.MapName;
	} else {
		State.Controls.Label_MapName.Value = TL::Compose("{{{Text_Map}}}",""^State.MapsProgression.X);
	}
	Tools::FitLabelValue(State.Controls.Label_MapName, 3., 1., 0.25);

	return State;
}

K_State UpdateLaps(K_State _State, Integer _LapsCurrent, Integer _LapsTotal) {
	declare K_State State = _State;
	State.LapsCurrent = _LapsCurrent;
	State.LapsTotal = _LapsTotal;

	declare Integer Total = ML::Max(1, State.LapsTotal);
	declare Integer Current = ML::Clamp(State.LapsCurrent, 1, Total);
	State.Controls.Label_LapsCurrent.Value = ""^Current;
	State.Controls.Label_LapsTotal.Value = "/"^Total;

	// Compute size
	Tools::FitLabelValue(State.Controls.Label_LapsCurrent, 9., 5., 0.5);
	Tools::FitLabelValue(State.Controls.Label_LapsTotal, State.Controls.Label_LapsCurrent.TextSizeReal * 0.5, 2., 0.5);
	if (Current < 10) State.Controls.Label_LapsTotal.RelativePosition_V3.X = -18.;
	else State.Controls.Label_LapsTotal.RelativePosition_V3.X = -17.25;

	return State;
}

K_State SetBestLap(
	K_State _State,
	Text _WebServicesUserId,
	Integer _Time,
	Boolean _IsWorldRecord,
	Boolean _IsInit,
	Boolean _PlaySound
) {
	declare K_State State = _State;
	State.BestLapAnim = K_BestLapAnim {
		Active = False,
		UpdateNameTime = -1,
		AnimEndTime = -1,
		Name = "",
		Time = -1
	};

	if (_IsWorldRecord) {
		State.Controls.Label_TimeLegend.Value = "{{{Text_WorldRecord}}}";
		State.Controls.Label_NewTimeLegend.Value = "{{{Text_NewWorldRecord}}}";
	} else {
		State.Controls.Label_TimeLegend.Value = "{{{Text_BestLap}}}";
		State.Controls.Label_NewTimeLegend.Value = "{{{Text_NewBestLap}}}";
	}

	AnimMgr.Flush(State.Controls.Frame_BestLapCurrent);
	AnimMgr.Flush(State.Controls.Frame_BestLapNew);
	State.Controls.Frame_BestLapCurrent.RelativePosition_V3.X = 0.;
	State.Controls.Frame_BestLapNew.RelativePosition_V3.X = 44.;
	State.Controls.Frame_BestLapCurrent.Visible = True;
	State.Controls.Frame_BestLapNew.Visible = False;

	if (_WebServicesUserId == "" || _Time <= 0) {
		State.Controls.Label_BestLapCurrentPlayer.Value = "-";
		State.Controls.Label_BestLapCurrentTime.Value = "--:--.---";
	} else {
		declare Text Nickname = _WebServicesUserId;
		if ({{{PlayerProfiles::P}}}GetPlayerProfiles().existskey(_WebServicesUserId)) {
			Nickname = {{{PlayerProfiles::P}}}GetPlayerProfiles()[_WebServicesUserId].Nickname;
		} else {
			foreach (Score in Scores) {
				if (Score.User.WebServicesUserId == _WebServicesUserId) {
					Nickname = Score.User.Name;
					break;
				}
			}
		}
		if (_IsInit) {
			State.Controls.Label_BestLapCurrentPlayer.Value = Nickname;
			State.Controls.Label_BestLapCurrentTime.Value = TL::TimeToText(_Time, True, True);
		} else {
			State.Controls.Label_BestLapNewPlayer.Value = Nickname;
			State.BestLapAnim = K_BestLapAnim {
				Active = True,
				UpdateNameTime = Now + 250,
				AnimEndTime = Now + C_BestLapDisplayDuration,
				Name = Nickname,
				Time = _Time
			};
			AnimMgr.Add(State.Controls.Frame_BestLapCurrent, "<frame pos=\"-44 0\" hidden=\"1\" />", Now, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Frame_BestLapNew, "<frame pos=\"0 0\" hidden=\"0\" />", Now, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Frame_BestLapCurrent, "<frame pos=\"44 0\" hidden=\"1\" />", Now + 251, 1, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Frame_BestLapCurrent, "<frame pos=\"0 0\" hidden=\"0\" />", Now + C_BestLapDisplayDuration - 250, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Frame_BestLapNew, "<frame pos=\"-44 0\" hidden=\"1\" />", Now + C_BestLapDisplayDuration - 250, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			if (_PlaySound) {
				AudioManager::StopSound(This, C_BestLapSound);
				AudioManager::PlaySound(This, C_BestLapSound);
			}
		}
	}

	return State;
}

Boolean PlayerIsSpectator(CSmPlayer _Player) {
	return (_Player != Null && _Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlLabel Label_Chrono;

declare netread Boolean Net_ChampionCup_MatchInfo_IsVisible for UI;
declare netread Integer Net_ChampionCup_MatchInfo_BestLapUpdate for Teams[0];
declare netread Text Net_ChampionCup_MatchInfo_BestLapPlayer for Teams[0];
declare netread Integer Net_ChampionCup_MatchInfo_BestLapTime for Teams[0];
declare netread Boolean Net_ChampionCup_MatchInfo_IsWorldRecord for Teams[0];
declare netread Boolean Net_ChampionCup_MatchInfo_IsInit for Teams[0];

declare K_State State;
declare Boolean DisplayModule;
declare Integer LapNumberUpdateTime;
declare CSmPlayer::ESpawnStatus PrevSpawnStatus;
declare Integer BestLapUpdate;
declare Text BestLapPlayer;
declare Integer BestLapTime;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_LapInfo <=> (Frame_Global.GetFirstChild("frame-lap-info") as CMlFrame);
State.Controls.Label_LapsCurrent <=> (State.Controls.Frame_LapInfo.GetFirstChild("label-laps-current") as CMlLabel);
State.Controls.Label_LapsTotal <=> (State.Controls.Frame_LapInfo.GetFirstChild("label-laps-total") as CMlLabel);
State.Controls.Frame_MapInfo <=> (Frame_Global.GetFirstChild("frame-map-info") as CMlFrame);
State.Controls.Quad_MultilapIcon <=> (State.Controls.Frame_MapInfo.GetFirstChild("quad-multilap-icon") as CMlQuad);
State.Controls.Frame_MapInfoLabels <=> (State.Controls.Frame_MapInfo.GetFirstChild("frame-map-info-labels") as CMlFrame);
Label_Chrono <=> (State.Controls.Frame_MapInfoLabels.GetFirstChild("label-chrono") as CMlLabel);
State.Controls.Label_Stage <=> (State.Controls.Frame_MapInfoLabels.GetFirstChild("label-stage") as CMlLabel);
State.Controls.Label_MapCount <=> (State.Controls.Frame_MapInfoLabels.GetFirstChild("label-map-count") as CMlLabel);
State.Controls.Label_MapName <=> (State.Controls.Frame_MapInfoLabels.GetFirstChild("label-map-name") as CMlLabel);
State.Controls.Frame_BestLapInfo <=> (Frame_Global.GetFirstChild("frame-best-lap-info") as CMlFrame);
State.Controls.Frame_BestLapCurrent <=> (Frame_Global.GetFirstChild("frame-best-lap-current") as CMlFrame);
State.Controls.Label_TimeLegend <=> (State.Controls.Frame_BestLapCurrent.GetFirstChild("label-time-legend") as CMlLabel);
State.Controls.Label_BestLapCurrentPlayer <=> (State.Controls.Frame_BestLapCurrent.GetFirstChild("label-best-lap-current-player") as CMlLabel);
State.Controls.Label_BestLapCurrentTime <=> (State.Controls.Frame_BestLapCurrent.GetFirstChild("label-best-lap-current-time") as CMlLabel);
State.Controls.Frame_BestLapNew <=> (Frame_Global.GetFirstChild("frame-best-lap-new") as CMlFrame);
State.Controls.Quad_BestLapNewBg <=> (State.Controls.Frame_BestLapNew.GetFirstChild("quad-best-lap-new-bg") as CMlQuad);
State.Controls.Label_BestLapNewPlayer <=> (State.Controls.Frame_BestLapNew.GetFirstChild("label-best-lap-new-name") as CMlLabel);
State.Controls.Label_NewTimeLegend <=> (State.Controls.Frame_BestLapNew.GetFirstChild("label-new-time-legend") as CMlLabel);

DisplayModule = Frame_Global.Visible;
LapNumberUpdateTime = Now;
PrevSpawnStatus = CSmPlayer::ESpawnStatus::NotSpawned;
BestLapUpdate = -1;
BestLapPlayer = "";
BestLapTime = -1;

State = SetVisibility(State, {{{Shared::P}}}LiveRankingIsVisible(), WarmupHelpers::IsWarmupActive(Teams[0]), PlayerIsSpectator(InputPlayer), False);
State = UpdateMap(State, Map, {{{Shared::P}}}GetMapsProgression(), {{{Shared::P}}}IsFinal(), {{{Shared::P}}}IsClashTime());
State = UpdateLaps(State, 1, 1);
State = SetBestLap(State, "", 0, False, False, False);
***

***MainLoop***
***
if (PageIsVisible) {
	if (DisplayModule != Net_ChampionCup_MatchInfo_IsVisible) {
		DisplayModule = Net_ChampionCup_MatchInfo_IsVisible;
		Frame_Global.Visible = DisplayModule;
	}

	if (
		State.LiveRankingIsVisible != {{{Shared::P}}}LiveRankingIsVisible() ||
		State.WarmUpIsVisible != WarmupHelpers::IsWarmupActive(Teams[0]) ||
		State.InputPlayerIsSpectator != PlayerIsSpectator(InputPlayer)
	) {
		State = SetVisibility(State, {{{Shared::P}}}LiveRankingIsVisible(), WarmupHelpers::IsWarmupActive(Teams[0]), PlayerIsSpectator(InputPlayer), True);
	}

	if (LapNumberUpdateTime <= Now) {
		LapNumberUpdateTime = Now + C_LapNumberUpdateFrequency;

		if (State.LapsTotal != RaceHelpers::GetLapsNb(Teams[0])) {
			State = UpdateLaps(State, State.LapsCurrent, RaceHelpers::GetLapsNb(Teams[0]));
		}

		// Following a spawned player
		if (GUIPlayer != Null && GUIPlayer.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) {
			if (State.LapsCurrent != RaceHelpers::GetPlayerLap(GUIPlayer)) {
				State = UpdateLaps(State, RaceHelpers::GetPlayerLap(GUIPlayer), RaceHelpers::GetLapsNb(Teams[0]));
			}
		}
		// Free cam
		else {
			declare Integer LapsCurrentMax = 1;
			foreach (Player in Players) {
				if (Player != Null) {
					if (LapsCurrentMax < RaceHelpers::GetPlayerLap(Player)) LapsCurrentMax = RaceHelpers::GetPlayerLap(Player);
				}
			}
			if (State.LapsCurrent != LapsCurrentMax) {
				State = UpdateLaps(State, LapsCurrentMax, RaceHelpers::GetLapsNb(Teams[0]));
			}
		}
	}

	if (State.MatchInfoIsVisible) {
		if (
			Map != Null && State.MapUid != Map.MapInfo.MapUid ||
			Map == Null && State.MapUid != ""
		) {
			State = UpdateMap(State, Map, {{{Shared::P}}}GetMapsProgression(), {{{Shared::P}}}IsFinal(), {{{Shared::P}}}IsClashTime());
		}

		if (
			State.MapsProgression != {{{Shared::P}}}GetMapsProgression() ||
			State.IsFinal != {{{Shared::P}}}IsFinal() ||
			State.IsClashTime != {{{Shared::P}}}IsClashTime()
		) {
			State = UpdateMap(State, Map, {{{Shared::P}}}GetMapsProgression(), {{{Shared::P}}}IsFinal(), {{{Shared::P}}}IsClashTime());
		}

		// Only spectators see the chrono
		if (InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
			if (!Label_Chrono.Visible) Label_Chrono.Visible = True;
		} else if (Label_Chrono.Visible) {
			Label_Chrono.Visible = False;
		}
		if (Label_Chrono.Visible) {
			if (
				GUIPlayer == Null && PrevSpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned ||
				GUIPlayer != Null && PrevSpawnStatus != GUIPlayer.SpawnStatus
			) {
				if (GUIPlayer == Null) PrevSpawnStatus = CSmPlayer::ESpawnStatus::NotSpawned;
				else PrevSpawnStatus = GUIPlayer.SpawnStatus;

				if (PrevSpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
					if (GUIPlayer != Null && GUIPlayer.StartTime >= 0) {
						Label_Chrono.Value = TL::TimeToText(GameTime - GUIPlayer.StartTime, True);
					} else {
						Label_Chrono.Value = "--:--.--";
					}
				} else if (PrevSpawnStatus == CSmPlayer::ESpawnStatus::Spawning) {
					Label_Chrono.Value = TL::TimeToText(0, True);
				}
			}

			// When spectating a player, `GUIPlayer.SpawnStatus` stays at `CSmPlayer::ESpawnStatus::Spawning`
			// even if the targeted player is already spawned. Waiting for a fix.
			if (GUIPlayer != Null && GUIPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
				RaceHelpers::UpdatePlayerChronoLabel(Teams[0], Label_Chrono, GUIPlayer);
			} else {
				declare RacingPlayerFound = False;
				foreach (Player in Players) {
					if (Player.StartTime >= 0) {
						declare Integer ChronoTime = 0;
						if (GameTime - Player.StartTime > 0) ChronoTime = GameTime - Player.StartTime;
						Label_Chrono.Value = TL::TimeToText(ChronoTime, True);
						RacingPlayerFound = True;
						break;
					}
				}
				if (!RacingPlayerFound) {
					Label_Chrono.Value = "--:--.--";
				}
			}
		}
	}

	if (BestLapUpdate != Net_ChampionCup_MatchInfo_BestLapUpdate) {
		BestLapUpdate = Net_ChampionCup_MatchInfo_BestLapUpdate;
		// Play sound only if the panel is visible and the user is spectating someone
		declare Boolean PlaySound = (
			State.MatchInfoIsVisible &&
			InputPlayer != Null &&
			InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && (
				BestLapPlayer != Net_ChampionCup_MatchInfo_BestLapPlayer ||
				BestLapTime != Net_ChampionCup_MatchInfo_BestLapTime
			)
		);
		BestLapPlayer = Net_ChampionCup_MatchInfo_BestLapPlayer;
		BestLapTime = Net_ChampionCup_MatchInfo_BestLapTime;
		State = SetBestLap(
			State,
			Net_ChampionCup_MatchInfo_BestLapPlayer,
			Net_ChampionCup_MatchInfo_BestLapTime,
			Net_ChampionCup_MatchInfo_IsWorldRecord,
			Net_ChampionCup_MatchInfo_IsInit,
			PlaySound
		);
	}

	if (State.BestLapAnim.Active) {
		State.Controls.Quad_BestLapNewBg.Opacity = 0.8 + (ML::Sin(Now / 100.) * 0.2);

		if (State.BestLapAnim.UpdateNameTime >= 0 && Now >= State.BestLapAnim.UpdateNameTime) {
			State.Controls.Label_BestLapCurrentPlayer.Value = State.BestLapAnim.Name;
			State.Controls.Label_BestLapCurrentTime.Value = TL::TimeToText(State.BestLapAnim.Time, True, True);
			State.BestLapAnim.UpdateNameTime = -1;
		}

		if (Now >= State.BestLapAnim.AnimEndTime) {
			State.BestLapAnim.Active = False;
		}
	}
}
***
""",
[
	UIModules::Component(),
	PlayerProfiles::Component(),
	Shared::Component()
],
[]
	);
}