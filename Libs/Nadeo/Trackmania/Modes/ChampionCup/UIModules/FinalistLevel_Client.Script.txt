/**
 *	UI module: FinalistLevel client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/ChampionCup/UIModules/FinalistLevel_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/ZIndex.Script.txt" as ZIndex
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCup/UIModules/FinalistLevel_Common.Script.txt" as UIModules_FinalistLevel_Common
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/Shared_Client.Script.txt" as Shared

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ImgFolder "file://Media/Manialinks/Nadeo/Trackmania/Modes/Champion"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_FinalistLevel_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_FinalistLevel_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [ChampionCup] Current finalist level. %1 will be replaced by a color code. %2 will be replaced by a number. eg: "Finalist $<$f00Level 3$>".
	declare Text Text_FinalistLevel = _("|ChampionCup|Finalist $<%1Level %2$>");
	//L16N [ChampionCup] The finalist level increase
	declare Text Text_LevelUp = _("|ChampionCup|Level up!");
	//L16N [ChampionCup] This is the last spot to earn a point multiplier. %1 will be replaced by a color code. eg: "$<$f00Last$> spot!".
	declare Text Text_LastSpot = _("|ChampionCup|$<%1Last$> spot!");
	//L16N [ChampionCup] Still several spots to take to earn a point multiplier. %1 will be replaced by a number greater than 1. eg: "3 spots left".
	declare Text Text_SpotsLeft = _("|ChampionCup|%1 spots left");

	declare Vec2 Size_FinalistLevelBg = <14.5 * 1176. / 176., 14.5>;
	declare Vec2 Size_FinalistLevelQuad = <10., 10.>;
	declare Vec2 Size_FinalistLevelLabel = Size_FinalistLevelBg - <5. + Size_FinalistLevelQuad.X + 2., 1.>;
	declare Vec2 Size_LevelUpLabel = Size_FinalistLevelBg - <5., 1.>;
	declare Vec2 Size_RemainingSpotsBg = <7.5 * 688. / 88., 7.5>;
	declare Vec2 Size_RemainingSpotsLabel = Size_RemainingSpotsBg - <3., 1.>;
	declare Vec2 Size_GlobalClip = <ML::Max(Size_FinalistLevelBg.X, Size_RemainingSpotsBg.X), Size_FinalistLevelBg.Y + Size_RemainingSpotsBg.Y>;
	declare Vec2 Pos_LevelUp = <0., -Size_FinalistLevelBg.Y>;
	declare Vec2 Pos_RemainingSpots = <0., -Size_FinalistLevelBg.Y>;

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
		<style class="text-bold" textprefix="$t$i" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" />
		<style class="text-semibold" textprefix="$t$i" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" />
</stylesheet>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_FinalistLevel}}}">
	<frame {{{UIModules::CustomizableUIModule(UIModules_FinalistLevel_Common::C_UIModuleConfig)}}}>
		<frame {{{MLHelpers::Size(Size_GlobalClip)}}} halign="center" valign="top">
			<frame id="frame-visibility" pos="0 {{{Size_GlobalClip.Y}}}">
				<frame id="frame-clip-finalist-level" {{{MLHelpers::Size(Size_FinalistLevelBg)}}} z-index="2" halign="center" valign="top">
					<frame pos="0 {{{Size_FinalistLevelBg.Y * -0.5}}}">
						<quad {{{MLHelpers::Size(Size_FinalistLevelBg)}}} halign="center" valign="center" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.7" image="{{{C_ImgFolder}}}/HUD_TMGL_FinalistLevel_BG.dds" />
						<frame z-index="1">
							<quad id="quad-finalist-level" {{{MLHelpers::Size(Size_FinalistLevelQuad)}}} halign="center" valign="center" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" hidden="1" />
							<label id="label-finalist-level" {{{MLHelpers::Size(Size_FinalistLevelLabel)}}} halign="center" valign="center2" textsize="5" class="text-bold" hidden="1" />
						</frame>
					</frame>
				</frame>
				<frame id="frame-clip-level-up" {{{MLHelpers::Pos(Pos_LevelUp)}}} {{{MLHelpers::Size(Size_FinalistLevelBg - <0., Size_FinalistLevelBg.Y>)}}} z-index="3" halign="center" valign="bottom">
					<frame pos="0 {{{Size_FinalistLevelBg.Y * 0.5}}}">
						<quad {{{MLHelpers::Size(Size_FinalistLevelBg)}}} halign="center" valign="center" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}" opacity="0.7" image="{{{C_ImgFolder}}}/HUD_TMGL_FinalistLevel_BG.dds" />
						<label id="label-level-up" z-index="1" {{{MLHelpers::Size(Size_LevelUpLabel)}}} halign="center" valign="center2" textsize="5" text="{{{Text_LevelUp}}}" class="text-bold" />
					</frame>
				</frame>
				<frame {{{MLHelpers::Pos(Pos_RemainingSpots)}}} {{{MLHelpers::Size(Size_RemainingSpotsBg)}}} z-index="1" halign="center" valign="top">
					<frame pos="0 {{{Size_RemainingSpotsBg.Y * -0.5}}}">
						<frame id="frame-remaining-spots" pos="0 {{Size_RemainingSpotsBg.Y}}}" hidden="1">
							<quad {{{MLHelpers::Size(Size_RemainingSpotsBg)}}} halign="center" valign="center" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}" opacity="0.7" image="{{{C_ImgFolder}}}/HUD_TMGL_RemainingSlots_BG.dds" />
							<label id="label-remaining-spots" z-index="1" {{{MLHelpers::Size(Size_RemainingSpotsLabel)}}} halign="center" valign="center2" textsize="2" class="text-semibold" />
						</frame>
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools

#Struct K_Controls {
	CMlFrame Frame_Visibility;
	CMlFrame Frame_ClipFinalistLevel;
	CMlLabel Label_FinalistLevel;
	CMlQuad Quad_FinalistLevel;
	CMlFrame Frame_ClipLevelUp;
	CMlFrame Frame_RemainingSpots;
	CMlLabel Label_RemainingSpots;
}

#Struct K_LevelUpAnim {
	Integer LevelUpdateTime;
	Text LabelNewValue;
	Text QuadNewImageUrl;
	Vec3 QuadNewColorize;
}

#Struct K_RemainingSpotsAnim {
	Integer LabelUpdateTime;
	Text LabelNewValue;
}

#Struct K_State {
	K_Controls Controls;
	Boolean IsVisible;
	Boolean IsVisible_DisplayModule;
	Boolean IsVisible_IsRacing;
	Boolean IsVisible_IsFinal;
	Integer FinalistLevel;
	Integer SpotsLeft;
	K_LevelUpAnim LevelUpAnim;
	K_RemainingSpotsAnim RemainingSpotsAnim;
}

#Const C_VisibilitySlideAnimDuration 200
#Const C_VisibilityHidingDelay 1500
#Const C_LevelUpSlideAnimDuration 200
#Const C_RemainingSpotsSlideAnimDuration 200
#Const C_LevelUpPauseAnimDuration 1000
#Const C_FinalistLevel_Colors {{{dump(UIModules_FinalistLevel_Common::C_FinalistLevel_Colors)}}}
#Const C_FinalistLevel_Images {{{dump(UIModules_FinalistLevel_Common::C_FinalistLevel_Images)}}}
""",
"""
K_State SetVisibility(K_State _State, Boolean _DisplayModule, Boolean _IsRacing, Boolean _IsFinal) {
	declare K_State State = _State;

	State.IsVisible_DisplayModule = _DisplayModule;
	State.IsVisible_IsRacing = _IsRacing;
	State.IsVisible_IsFinal = _IsFinal;
	State.IsVisible = State.IsVisible_DisplayModule && !State.IsVisible_IsRacing && State.IsVisible_IsFinal;

	AnimMgr.Flush(State.Controls.Frame_Visibility);
	if (State.IsVisible) {
		AnimMgr.Add(State.Controls.Frame_Visibility, "<anim pos=\"0 0\" hidden=\"0\" />", C_VisibilitySlideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(State.Controls.Frame_Visibility, "<anim pos=\"0 {{{Size_GlobalClip.Y}}}\" hidden=\"1\" />", Now + C_VisibilityHidingDelay, C_VisibilitySlideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

Void UpdateFinalistLevelLabel(K_State _State, Text _LabelValue, Text _QuadImageUrl, Vec3 _QuadColorize) {
	if (_LabelValue == "") {
		_State.Controls.Label_FinalistLevel.Visible = False;
	} else {
		_State.Controls.Label_FinalistLevel.Value = _LabelValue;
		Tools::FitLabelValue(_State.Controls.Label_FinalistLevel, 5., 2., 0.5);
		_State.Controls.Label_FinalistLevel.Visible = True;
	}
	if (_QuadImageUrl == "") {
		_State.Controls.Quad_FinalistLevel.Visible = False;
	} else {
		_State.Controls.Quad_FinalistLevel.ImageUrl = _QuadImageUrl;
		_State.Controls.Quad_FinalistLevel.Colorize = _QuadColorize;
		_State.Controls.Quad_FinalistLevel.Visible = True;
	}

	if (_State.Controls.Quad_FinalistLevel.Visible && _State.Controls.Label_FinalistLevel.Visible) {
		declare Real LabelSizeX = ML::Min(
			_State.Controls.Label_FinalistLevel.Size.X,
			_State.Controls.Label_FinalistLevel.ComputeWidth(_State.Controls.Label_FinalistLevel.Value)
		);
		_State.Controls.Label_FinalistLevel.RelativePosition_V3.X = (_State.Controls.Quad_FinalistLevel.Size.X / 2.) + 0.5;
		_State.Controls.Quad_FinalistLevel.RelativePosition_V3.X = -(LabelSizeX / 2.) - 0.5;
	} else if (!_State.Controls.Quad_FinalistLevel.Visible && _State.Controls.Label_FinalistLevel.Visible) {
		_State.Controls.Label_FinalistLevel.RelativePosition_V3.X = 0.;
	} else if (_State.Controls.Quad_FinalistLevel.Visible && !_State.Controls.Label_FinalistLevel.Visible) {
		_State.Controls.Quad_FinalistLevel.RelativePosition_V3.X = 0.;
	}
}

K_State SetFinalistLevel(K_State _State, Integer _FinalistLevel) {
	if (_State.FinalistLevel == _FinalistLevel) return _State;

	declare K_State State = _State;

	declare Boolean IsLevelUp = (State.FinalistLevel < _FinalistLevel && State.FinalistLevel > 0);
	State.FinalistLevel = _FinalistLevel;
	declare Integer ClampedFinalistLevel = ML::Max(1, State.FinalistLevel);

	declare Vec3 Color = C_FinalistLevel_Colors.get(ClampedFinalistLevel, <1., 1., 1.>);
	State.LevelUpAnim.LabelNewValue = TL::Compose("{{{Text_FinalistLevel}}}", "$"^CL::RgbToHex3(Color), ""^ClampedFinalistLevel);
	State.LevelUpAnim.QuadNewImageUrl = C_FinalistLevel_Images.get(ClampedFinalistLevel, "");
	State.LevelUpAnim.QuadNewColorize = Color;

	AnimMgr.Flush(State.Controls.Frame_ClipFinalistLevel);
	AnimMgr.Flush(State.Controls.Frame_ClipLevelUp);
	State.Controls.Frame_ClipFinalistLevel.Size = <State.Controls.Frame_ClipFinalistLevel.Size.X, {{{Size_FinalistLevelBg.Y}}}>;
	State.Controls.Frame_ClipLevelUp.Size = <State.Controls.Frame_ClipFinalistLevel.Size.X, 0.>;
	State.Controls.Frame_ClipFinalistLevel.Visible = True;
	State.Controls.Frame_ClipLevelUp.Visible = False;
	if (IsLevelUp) {
		AnimMgr.Add(State.Controls.Frame_ClipFinalistLevel, "<anim size=\"{{{Size_FinalistLevelBg.X}}} 0\" hidden=\"1\" />", C_LevelUpSlideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Frame_ClipLevelUp, "<anim size=\"{{{Size_FinalistLevelBg.X}}} {{{Size_FinalistLevelBg.Y}}}\" hidden=\"0\" />", C_LevelUpSlideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Frame_ClipFinalistLevel, "<anim size=\"{{{Size_FinalistLevelBg.X}}} {{{Size_FinalistLevelBg.Y}}}\" hidden=\"0\" />", Now + C_LevelUpSlideAnimDuration + C_LevelUpPauseAnimDuration, C_LevelUpSlideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Frame_ClipLevelUp, "<anim size=\"{{{Size_FinalistLevelBg.X}}} 0\" hidden=\"1\" />", Now + C_LevelUpSlideAnimDuration + C_LevelUpPauseAnimDuration, C_LevelUpSlideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		State.LevelUpAnim.LevelUpdateTime = Now + C_LevelUpSlideAnimDuration;
		PlayUiSound(CMlScriptIngame::EUISound::Notice, 1, 0.75);
	} else {
		UpdateFinalistLevelLabel(State, State.LevelUpAnim.LabelNewValue, State.LevelUpAnim.QuadNewImageUrl, State.LevelUpAnim.QuadNewColorize);
		State.LevelUpAnim.LevelUpdateTime = -1;
	}

	return State;
}

K_State SetSpotsLeft(K_State _State, Integer _SpotsLeft) {
	if (_State.SpotsLeft == _SpotsLeft) return _State;

	declare K_State State = _State;

	declare Integer PrevSpotsLeft = State.SpotsLeft;
	State.SpotsLeft = _SpotsLeft;

	declare Text Color = "$"^CL::RgbToHex3(C_FinalistLevel_Colors.get(ML::Max(1, State.FinalistLevel), <1., 1., 1.>));
	if (State.SpotsLeft > 1) {
		State.RemainingSpotsAnim.LabelNewValue = TL::Compose("{{{Text_SpotsLeft}}}", "$<"^Color^State.SpotsLeft^"$>");
	} else if (State.SpotsLeft == 1) {
		State.RemainingSpotsAnim.LabelNewValue = TL::Compose("{{{Text_LastSpot}}}", Color);
	} else {
		State.RemainingSpotsAnim.LabelNewValue = "";
	}
	State.RemainingSpotsAnim.LabelUpdateTime = -1;

	AnimMgr.Flush(State.Controls.Frame_RemainingSpots);
	if (State.SpotsLeft > 0) {
		if (PrevSpotsLeft <= 0) {
			State.Controls.Frame_RemainingSpots.RelativePosition_V3.Y = {{{Size_RemainingSpotsBg.Y}}};
			AnimMgr.Add(State.Controls.Frame_RemainingSpots, "<anim pos=\"0 0\" hidden=\"0\" />", C_RemainingSpotsSlideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			State.Controls.Label_RemainingSpots.Value = State.RemainingSpotsAnim.LabelNewValue;
			Tools::FitLabelValue(State.Controls.Label_RemainingSpots, 2., 1., 0.25);
			State.RemainingSpotsAnim.LabelUpdateTime = -1;
		} else {
			State.Controls.Frame_RemainingSpots.RelativePosition_V3.Y = 0.;
			State.Controls.Frame_RemainingSpots.Visible = True;
			AnimMgr.Add(State.Controls.Frame_RemainingSpots, "<anim pos=\"0 {{{Size_RemainingSpotsBg.Y}}}\" hidden=\"1\" />", C_RemainingSpotsSlideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Frame_RemainingSpots, "<anim pos=\"0 0\" hidden=\"0\" />", Now + C_RemainingSpotsSlideAnimDuration + C_LevelUpPauseAnimDuration, C_RemainingSpotsSlideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			State.RemainingSpotsAnim.LabelUpdateTime = Now + C_RemainingSpotsSlideAnimDuration;
			PlayUiSound(CMlScriptIngame::EUISound::Notice, 0, 0.5);
		}
	} else if (PrevSpotsLeft > 0) {
		State.Controls.Frame_RemainingSpots.RelativePosition_V3.Y = 0.;
		State.Controls.Frame_RemainingSpots.Visible = True;
		AnimMgr.Add(State.Controls.Frame_RemainingSpots, "<anim pos=\"0 {{{Size_RemainingSpotsBg.Y}}}\" hidden=\"1\" />", C_RemainingSpotsSlideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		State.RemainingSpotsAnim.LabelUpdateTime = -1;
	}

	return State;
}

Boolean IsRacing(CSmPlayer _Player) {
	return (_Player != Null && _Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlLabel Label_LevelUp;

declare netread Boolean Net_ChampionCup_FinalistLevel_IsVisible for UI;
declare netread Integer Net_ChampionCup_FinalistLevel_FinalistLevel for Teams[0];
declare netread Integer Net_ChampionCup_FinalistLevel_SpotsLeft for Teams[0];

declare K_State State;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_Visibility <=> (Frame_Global.GetFirstChild("frame-visibility") as CMlFrame);
State.Controls.Frame_ClipFinalistLevel <=> (State.Controls.Frame_Visibility.GetFirstChild("frame-clip-finalist-level") as CMlFrame);
State.Controls.Label_FinalistLevel <=> (State.Controls.Frame_Visibility.GetFirstChild("label-finalist-level") as CMlLabel);
State.Controls.Quad_FinalistLevel <=> (State.Controls.Frame_Visibility.GetFirstChild("quad-finalist-level") as CMlQuad);
State.Controls.Frame_ClipLevelUp <=> (State.Controls.Frame_Visibility.GetFirstChild("frame-clip-level-up") as CMlFrame);
Label_LevelUp <=> (State.Controls.Frame_ClipLevelUp.GetFirstChild("label-level-up") as CMlLabel);
State.Controls.Frame_RemainingSpots <=> (State.Controls.Frame_Visibility.GetFirstChild("frame-remaining-spots") as CMlFrame);
State.Controls.Label_RemainingSpots <=> (State.Controls.Frame_RemainingSpots.GetFirstChild("label-remaining-spots") as CMlLabel);

Tools::FitLabelValue(Label_LevelUp, 5., 2., 0.5);

State = SetVisibility(State, Net_ChampionCup_FinalistLevel_IsVisible, IsRacing(InputPlayer), {{{Shared::P}}}IsFinal());
State = SetFinalistLevel(State, Net_ChampionCup_FinalistLevel_FinalistLevel);
State = SetSpotsLeft(State, Net_ChampionCup_FinalistLevel_SpotsLeft);
***

***MainLoop***
***
if (PageIsVisible) {
	if (
		State.IsVisible_DisplayModule != Net_ChampionCup_FinalistLevel_IsVisible ||
		State.IsVisible_IsRacing != IsRacing(InputPlayer) ||
		State.IsVisible_IsFinal != {{{Shared::P}}}IsFinal()
	) {
		State = SetVisibility(State, Net_ChampionCup_FinalistLevel_IsVisible, IsRacing(InputPlayer), {{{Shared::P}}}IsFinal());
	}

	if (State.IsVisible) {
		if (State.FinalistLevel != Net_ChampionCup_FinalistLevel_FinalistLevel) {
			State = SetFinalistLevel(State, Net_ChampionCup_FinalistLevel_FinalistLevel);
			State = SetSpotsLeft(State, Net_ChampionCup_FinalistLevel_SpotsLeft); //< Call after `SetFinalistLevel()`
		}
		if (State.SpotsLeft != Net_ChampionCup_FinalistLevel_SpotsLeft) {
			State = SetSpotsLeft(State, Net_ChampionCup_FinalistLevel_SpotsLeft);
		}
	}

	if (State.RemainingSpotsAnim.LabelUpdateTime > 0 && Now >= State.RemainingSpotsAnim.LabelUpdateTime) {
		State.RemainingSpotsAnim.LabelUpdateTime = -1;
		State.Controls.Label_RemainingSpots.Value = State.RemainingSpotsAnim.LabelNewValue;
		Tools::FitLabelValue(State.Controls.Label_RemainingSpots, 2., 1., 0.25);
	}

	if (State.LevelUpAnim.LevelUpdateTime > 0 && Now >= State.LevelUpAnim.LevelUpdateTime) {
		State.LevelUpAnim.LevelUpdateTime = -1;
		UpdateFinalistLevelLabel(State, State.LevelUpAnim.LabelNewValue, State.LevelUpAnim.QuadNewImageUrl, State.LevelUpAnim.QuadNewColorize);
	}
}
***
""",
[
	UIModules::Component(),
	Shared::Component()
],
[]
	);
}