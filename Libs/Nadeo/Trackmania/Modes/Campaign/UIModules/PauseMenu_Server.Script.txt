/**
 *  UI module: PauseMenu server side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/Campaign/UIModules/PauseMenu_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/Trackmania/Modes/Campaign/Constants.Script.txt" as Consts

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Campaign_PauseMenu"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Global variables
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Text G_LastEventType;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;

	declare netwrite Boolean Net_Campaign_PauseMenu_IsVisible for _Player;
	Net_Campaign_PauseMenu_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the last event received by the server
 *
 *	@return											The last event received by the server
 */
Text GetLastEventType() {
	return G_LastEventType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the library
Void Yield() {
	G_LastEventType = "";
	foreach (Event in UIManager.PendingEvents) {
		declare RaceMenuEvents = Consts::C_PauseRaceMenuEvents;
		if (Event.Type == CUIConfigEvent::EType::OnLayerCustomEvent && RaceMenuEvents.exists(Event.CustomEventType)) {
			G_LastEventType = Event.CustomEventType;
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	G_LastEventType = "";

	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}