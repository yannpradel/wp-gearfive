/**
 *  UI module: EndRaceMenu server side
 */
#Const Version    "1.0.1"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/Campaign/UIModules/EndRaceMenu_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Campaign_EndRaceMenu"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/Trackmania/Modes/Campaign/Constants.Script.txt" as Consts
#Include "Libs/Nadeo/Trackmania/Structures/CampaignStruct.Script.txt" as CampaignStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Global variables
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Text G_LastEventType;
declare CampaignStruct::LibCampaignStruct_K_PlayerCloseToMedal G_PlayerCloseToMedal;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;

	declare netwrite Boolean Net_Campaign_EndRaceMenu_IsVisible for _Player;
	Net_Campaign_EndRaceMenu_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Inform the UI that the finish line has just been crosed
Void SetEarlyMedalDisplay(Boolean _EarlyDisplay) {
	declare netwrite Boolean Net_Campaign_EndRaceMenu_EarlyMedalDisplay for Teams[0];
	Net_Campaign_EndRaceMenu_EarlyMedalDisplay = _EarlyDisplay;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Is there a new medal ready to be displayed
Boolean GetVisibilityOfNewMedal() {
	declare netwrite Boolean Net_Campaign_EndRaceMenu_IsNewMedal for Teams[0];
	return Net_Campaign_EndRaceMenu_IsNewMedal;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Inform the UI that the map has changed
Void SetMapChanged() {
	declare netwrite Integer Net_Campaign_EndRaceMenu_MapChangeTime for Teams[0];
	Net_Campaign_EndRaceMenu_MapChangeTime = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// UI stops playing the current sounds
Void StopCurrentSounds() {
	declare netwrite Integer Net_Campaign_EndRaceMenu_StopSound for Teams[0];
	Net_Campaign_EndRaceMenu_StopSound = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// UI stops playing the medal animation
Void ShowMedalWithoutAnim() {
	declare netwrite Integer Net_Campaign_EndRaceMenu_ShowMedalWithoutAnim for Teams[0];
	Net_Campaign_EndRaceMenu_ShowMedalWithoutAnim = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Inform the UI that the map has changed
Void SetRoundChanged() {
	declare netwrite Integer Net_Campaign_EndRaceMenu_RoundChangeTime for Teams[0];
	Net_Campaign_EndRaceMenu_RoundChangeTime = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Allow the user to view the PB replay or not
Void SetCanViewReplay(Boolean _CanViewReplay) {
	declare netwrite Boolean Net_Campaign_EndRaceMenu_CanViewReplay for Teams[0];
	Net_Campaign_EndRaceMenu_CanViewReplay = _CanViewReplay;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Inform the UI that the replay has been saved
Void SetReplaySaved() {
	declare netwrite Integer Net_Campaign_EndRaceMenu_ReplaySaved for Teams[0];
	Net_Campaign_EndRaceMenu_ReplaySaved = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the new medal ui
 *
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibilityOfNewMedal(Boolean _Display) {
	declare netwrite Boolean Net_Campaign_EndRaceMenu_IsNewMedal for Teams[0];
	Net_Campaign_EndRaceMenu_IsNewMedal = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the unlocked trophies to the UI
Void SetTrophies(Integer[Integer] _Trophies) {
	declare netwrite Integer[Integer] Net_Campaign_EndRaceMenu_Trophies for Teams[0];
	declare netwrite Integer Net_Campaign_EndRaceMenu_TrophiesUpdate for Teams[0];
	Net_Campaign_EndRaceMenu_Trophies = _Trophies;
	Net_Campaign_EndRaceMenu_TrophiesUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Indicates if the player is driving alone or not
Void SetPlayerDrivingAloneState(Boolean _IsAlone) {
	declare netwrite Boolean Net_Campaign_EndRaceMenu_IsPlayerDrivingAlone for Teams[0];
	Net_Campaign_EndRaceMenu_IsPlayerDrivingAlone = _IsAlone;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the last event received by the server
 *
 *	@return											The last event received by the server
 */
Text GetLastEventType() {
	return G_LastEventType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the the player close to the choosen medal
 *
 *	@return											The the player close to the choosen medal
 */
CampaignStruct::LibCampaignStruct_K_PlayerCloseToMedal GetPlayerCloseToMedal() {
	return G_PlayerCloseToMedal;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
	SetVisibilityOfNewMedal(False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the library
Void Yield() {
	G_LastEventType = "";
	foreach (Event in UIManager.PendingEvents) {
		declare RaceMenuEvents = Consts::C_EndRaceMenuEvents;
		if (Event.Type == CUIConfigEvent::EType::OnLayerCustomEvent && RaceMenuEvents.exists(Event.CustomEventType)) {
			G_LastEventType = Event.CustomEventType;
			switch (Event.CustomEventType) {
				case Consts::C_EndRaceMenuEvent_Challenge: {
					if (Event.CustomEventData.count > 1) {
						G_PlayerCloseToMedal = CampaignStruct::LibCampaignStruct_K_PlayerCloseToMedal {
							AccountId = Event.CustomEventData[0],
							Medal = Event.CustomEventData[1]
						};
					}
				}
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	G_LastEventType = "";
	G_PlayerCloseToMedal = CampaignStruct::LibCampaignStruct_K_PlayerCloseToMedal {};
	SetCanViewReplay(False);

	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}