/**
 *  UI module: ScorestableHelper client side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/Campaign/UIModules/ScorestableHelper_Client.Script.txt"
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Constants.Script.txt" as CommonConst
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as ExpendableAsset

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Campaign_ScorestableHelper"
#Const C_Type CUILayer::EUILayerType::Normal
#Const C_TextMargin 3.
#Const C_MaxWidth 78.

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Text Text_NoBind = _("|Input|No binding");

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-default" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textcolor="ffffff" textsize="3" textprefix="$t$i" />
</stylesheet>
<frame id="frame-global" z-index="-2" hidden="1">
	<frame id="frame-helper" pos="160 0" size="{{{C_MaxWidth}}} 40" halign="right" valign="center">
		<frame id="frame-scoreshideshow" pos="{{{C_MaxWidth}}} 0" hidden="1">
			<frameinstance
				id="expendable-bg-scoreshideshow"
				modelid="{{{ExpendableAsset::C_Name}}}"
				z-index="0"
				data-height="9"
				data-halign="right"
				data-valign="center"
				data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
				data-opacity="0.6"
				data-image-right=""
				data-colormode-right="{{{ExpendableAsset::C_ColorMode_Background}}}"
				data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}"
			/>
			<quad id="quad-scoreshideshow" pos="{{{-C_TextMargin}}} 0" z-index="1" size="7 7" halign="right" valign="center" hidden="1" />
			<label id="label-scoreshideshow" class="text-default" pos="{{{-C_TextMargin}}} 0" z-index="2" size="60 10" halign="right" valign="center2"/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils

#Const C_PadInputs {{{dump(CommonConst::C_PadInputCharacters)}}}
#Const C_MaxDisplayCount 50
#Const C_DisplayDuration 5000
#Const C_ActivePadUpdateInterval 500
#Const C_TextMargin {{{dump(C_TextMargin)}}}
#Const C_MaxWidth {{{dump(C_MaxWidth)}}}
""",
"""
Void UpdateLabels(CMlLabel _Label_ScoresHideShow, CMlQuad _Quad_ScoresHideShow, CMlFrame _Expendable_BgScoresHideShow, Ident _ActivePadId) {
	if (Input.Pads.existskey(_ActivePadId)) {
		declare CInputPad Pad = Input.Pads[_ActivePadId];
		if (Pad.Type != CInputPad::EPadType::Mouse) {
			declare Real ScoresHideShowIconSizeX = 0.;
			declare Text ActionName_ScoresHideShow = Input.GetActionDisplayName("Vehicle", "ScoresHideShow");
			declare Text Binding_ScoresHideShow = Input.GetActionBinding(Pad, "Vehicle", "ScoresHideShow");
			declare Text BindingRaw_ScoresHideShow = Input.GetActionBindingRaw(Pad, "Vehicle", "ScoresHideShow");

			if (BindingRaw_ScoresHideShow != "" && ButtonIcon::CanGetPadButtonIcon(Pad)) {
				ScoresHideShowIconSizeX = _Quad_ScoresHideShow.Size.X + 1.;
				_Label_ScoresHideShow.Value = ActionName_ScoresHideShow;
				_Label_ScoresHideShow.RelativePosition_V3.X = _Quad_ScoresHideShow.RelativePosition_V3.X - ScoresHideShowIconSizeX;
				_Quad_ScoresHideShow.ImageUrl = ButtonIcon::GetPadButtonIcon(System, Pad, BindingRaw_ScoresHideShow);
				_Quad_ScoresHideShow.Visible = True;
			} else {
				if (Binding_ScoresHideShow == "") {
					_Label_ScoresHideShow.Value = TL::Compose("%1  [%2]", TL::GetTranslatedText(ActionName_ScoresHideShow), "{{{Text_NoBind}}}");
				} else if (C_PadInputs.exists(Binding_ScoresHideShow)) {
					_Label_ScoresHideShow.Value = TL::Compose("%1  %2", TL::GetTranslatedText(ActionName_ScoresHideShow), Binding_ScoresHideShow);
				} else {
					_Label_ScoresHideShow.Value = TL::Compose("%1 [%2]", TL::GetTranslatedText(ActionName_ScoresHideShow), Binding_ScoresHideShow);
				}
				_Label_ScoresHideShow.RelativePosition_V3.X = _Quad_ScoresHideShow.RelativePosition_V3.X;
				_Quad_ScoresHideShow.Visible = False;
			}

			Tools::FitLabelValue(_Label_ScoresHideShow, 3., 1.5, 0.5);

			{{{ExpendableAsset::P}}}SetWidth(This, _Expendable_BgScoresHideShow, ML::Min(_Label_ScoresHideShow.ComputeWidth(_Label_ScoresHideShow.Value, True), _Label_ScoresHideShow.Size.X) + (C_TextMargin * 2) + ScoresHideShowIconSizeX);
		}
	}
}

Boolean UpdateVisibility(CMlFrame _Frame_ScoresHideShow, Boolean _Visible) {
	AnimMgr.Flush(_Frame_ScoresHideShow);
	if (_Visible) {
		AnimMgr.Add(_Frame_ScoresHideShow, "<a pos=\"0 "^_Frame_ScoresHideShow.RelativePosition_V3.Y^"\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Frame_ScoresHideShow, "<a pos=\""^C_MaxWidth^" "^_Frame_ScoresHideShow.RelativePosition_V3.Y^"\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
	return _Visible;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Helper;
declare CMlFrame Frame_ScoresHideShow;
declare CMlLabel Label_ScoresHideShow;
declare CMlQuad Quad_ScoresHideShow;
declare CMlFrame Expendable_BgScoresHideShow;

declare persistent Integer Persistent_ScorestableHelper_DisplayCount for UserMgr.MainUser = 0;

declare Boolean DisplayModule;
declare Integer HideTime;
declare Ident ActivePadId;
declare Integer NextActivePadUpdateTime;
declare CSmPlayer::ESpawnStatus SpawnStatus;
declare Boolean HelperIsVisible;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Helper <=> (Frame_Global.GetFirstChild("frame-helper") as CMlFrame);
Frame_ScoresHideShow <=> (Frame_Helper.GetFirstChild("frame-scoreshideshow") as CMlFrame);
Label_ScoresHideShow <=> (Frame_ScoresHideShow.GetFirstChild("label-scoreshideshow") as CMlLabel);
Quad_ScoresHideShow <=> (Frame_ScoresHideShow.GetFirstChild("quad-scoreshideshow") as CMlQuad);
Expendable_BgScoresHideShow <=> (Frame_ScoresHideShow.GetFirstChild("expendable-bg-scoreshideshow") as CMlFrame);

DisplayModule = Frame_Global.Visible;
HideTime = -123;
if (SplitScreenCount > 1) MV_Utils::AutoScaleSplitScreen(Frame_Global, 0.5, 1.);
SpawnStatus = CSmPlayer::ESpawnStatus::NotSpawned;

ActivePadId = Tools::GetActivePadId(Input, True);
HelperIsVisible = UpdateVisibility(Frame_ScoresHideShow, False);
UpdateLabels(Label_ScoresHideShow, Quad_ScoresHideShow, Expendable_BgScoresHideShow, ActivePadId);
***

***MainLoop***
***
if (PageIsVisible && Persistent_ScorestableHelper_DisplayCount <= C_MaxDisplayCount) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Campaign_ScorestableHelper_IsVisible for Owner;
		if (DisplayModule != Net_Campaign_ScorestableHelper_IsVisible) {
			DisplayModule = Net_Campaign_ScorestableHelper_IsVisible;
			Frame_Global.Visible = Net_Campaign_ScorestableHelper_IsVisible;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_Global.Visible) {
		// Detect active pad
		if (HelperIsVisible && NextActivePadUpdateTime <= Now) {
			NextActivePadUpdateTime = Now + C_ActivePadUpdateInterval;
			declare Ident NewActivePadId = Tools::GetActivePadId(Input, True);
			if (ActivePadId != NewActivePadId) {
				ActivePadId = NewActivePadId;
				UpdateLabels(Label_ScoresHideShow, Quad_ScoresHideShow, Expendable_BgScoresHideShow, ActivePadId);
			}
		}

		// On race start
		if (InputPlayer != Null && SpawnStatus != InputPlayer.SpawnStatus) {
			SpawnStatus = InputPlayer.SpawnStatus;
			if (SpawnStatus == CSmPlayer::ESpawnStatus::Spawning) {
				Persistent_ScorestableHelper_DisplayCount += 1;
				UserMgr.MainUser.PersistentSave();
				HideTime = GameTime + C_DisplayDuration;
			}
		}
		if ((HideTime < 0 || GameTime > HideTime) && HelperIsVisible) {
			HelperIsVisible = UpdateVisibility(Frame_ScoresHideShow, False);
		} else if (HideTime >= 0 && GameTime <= HideTime && !HelperIsVisible) {
			HelperIsVisible = UpdateVisibility(Frame_ScoresHideShow, True);
			UpdateLabels(Label_ScoresHideShow, Quad_ScoresHideShow, Expendable_BgScoresHideShow, ActivePadId);
		}
	}
} else if (HelperIsVisible) {
	HelperIsVisible = UpdateVisibility(Frame_ScoresHideShow, False);
}
***
""",
[ExpendableAsset::ComponentV2()],
[]
	);
}