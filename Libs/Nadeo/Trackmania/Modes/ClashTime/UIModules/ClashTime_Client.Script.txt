/**
 *	UI module: ClashTime client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/ClashTime/UIModules/ClashTime_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/ClashTime/UIModules/ClashTime_Common.Script.txt" as UIModules_ClashTime_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ImgPath "file://Media/Manialinks/Nadeo/Trackmania/Modes/ClashTime"
#Const C_Command_Accelerate "++"
#Const C_Command_Brake "--"
#Const C_Command_TurnLeft "<<"
#Const C_Command_TurnRight ">>"
#Const C_Command_Respawn "rs"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_ClashTime_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_ClashTime_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Text Text_ClashTime = "Clash Time"; //< Do not translate
	//L16N [Clash Time] Display the rank of the player at the end of the race. %1 will be replacer by the rank. e.g. "You finished 2nd".
	declare Text Text_FinishRank = _("You finished %1");
	//L16N [Clash Time] Title of the screen explaining of the Clash Time works. Do not translate "Clash Time".
	declare Text Text_Welcome = _("Welcome to Clash Time!");
	//L16N [Clash Time] Description of the Clash Time mode for the viewers on Twitch. "TMGL" is the acronym of Trackmania Grand League, do not translate it.
	declare Text Text_ModeDescription = _("During the break, you will control your favorite TMGL player's car. Cooperate and do your best to cross as many checkpoints as you can in the given time!");
	declare Text CommandStyle = "$o$n$"^CL::RgbToHex3(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne));
	declare Text Text_CommandAccelerate = TL::Compose(
		//L16N [Clash Time] Give the command to type in the chat to accelerate with the car. %1 will be replaced by the command. e.g. "Type ++ in chat to accelerate".
		_("Type %1 in chat to accelerate"),
		"$<"^CommandStyle^C_Command_Accelerate^"$>"
	);
	declare Text Text_CommandBrake =
	TL::Compose(
		//L16N [Clash Time] Give the command to type in the chat to brake with the car. %1 will be replaced by the command. e.g. "Type -- in chat to brake".
		_("Type %1 in chat to brake"),
		"$<"^CommandStyle^C_Command_Brake^"$>"
	);
	declare Text Text_CommandTurnLeft = TL::Compose(
		//L16N [Clash Time] Give the command to type in the chat to turn left with the car. %1 will be replaced by the command. e.g. "Type << in chat to turn left".
		_("Type %1 in chat to turn left"),
		"$<"^CommandStyle^C_Command_TurnLeft^"$>"
	);
	declare Text Text_CommandTurnRight = TL::Compose(
		//L16N [Clash Time] Give the command to type in the chat to turn right with the car. %1 will be replaced by the command. e.g. "Type >> in chat to turn right".
		_("Type %1 in chat to turn right"),
		"$<"^CommandStyle^C_Command_TurnRight^"$>"
	);
	declare Text Text_CommandRespawn = TL::Compose(
		//L16N [Clash Time] Give the command to type in the chat to respawn with the car. %1 will be replaced by the command. e.g. "Type rs in chat to respawn".
		_("Type %1 in chat to respawn"),
		"$<"^CommandStyle^C_Command_Respawn^"$>"
	);
	//L16N [Clash Time] Give the top speed of the car. %1 will be replaced by the speed. e.g. "The car has a top speed of 50 km/h".
	declare Text Text_TopSpeed = _("The car has a top speed of %1 km/h");
	//L16N [Clash Time] Displayed above a countdown before the start of Clash Time.
	declare Text Text_StartsIn = _("Clash Time starts in...");
	//L16N [ClashTime] Displayed above the name of the player controlled by the Twitch viewers.
	declare Text Text_PlayAs = _("You play as");
	//L16N [Clash Time] Displayed below the commands that the Twitch viewers can type in the chat to control the car.
	declare Text Text_TypeInChat = _("Type in chat to play");
	//L16N [Clash Time] Displayed when your own car is controlled by Twitch viewers. Do not translate Twitch.
	declare Text Text_YouControlledByTwitch = _("Your car is controlled by Twitch");
	//L16N [Clash Time] Displayed when the followed player's car is controlled by Twitch viewers. Do not translate Twitch.
	declare Text Text_ThisControlledByTwitch = _("This car is controlled by Twitch");

	declare Vec2 ButtonSize = <8., 8.>;
	declare Real RankPosY = 72.;
	declare Real CommandActiveOpacity = 0.9;

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-command" size="{{{ButtonSize.X}}} {{{ButtonSize.Y}}}" textsize="2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i" textcolor="ffffff" />
	<style class="text-rank" textsize="6" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" textcolor="ffffff" />
	<style class="text-help-body" textsize="6" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i" textcolor="ffffff" />
	<style class="text-help-command" textsize="6" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textprefix="$i" textcolor="ffffff" />
	<style class="text-help-speed" textsize="6" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textprefix="$i" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" />
	<style class="text-help-countdown" textsize="8" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i" textcolor="ffffff" />
	<style class="button-size" size="{{{ButtonSize.X}}} {{{ButtonSize.Y}}}" halign="center" valign="center" />
</stylesheet>
<frame z-index="-2" hidden="1" id="frame-global">
	<frame {{{UIModules::CustomizableUIModule(UIModules_ClashTime_Common::C_UIModuleConfig)}}}>
		<frame id="frame-help" z-index="2" hidden="1">
			<quad z-index="0" size="320 180" halign="center" valign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.7" fullscreen="1" />
			<frame pos="0 78" z-index="1">
				<quad size="154 18" halign="center" autoscale="0" image="{{{C_ImgPath}}}/clashtime_logo_start.dds" />
				<label pos="0 -28" size="240 10" halign="center" valign="center2" text="{{{Text_Welcome}}}" class="text-help-body" />
				<label pos="0 -53" size="240 10" halign="center" valign="center2" maxline="5" text="{{{Text_ModeDescription}}}" class="text-help-body" />
				<frame id="frame-commands-list" pos="-50 -79">
					<label size="240 10" valign="center2" text="{{{Text_CommandAccelerate}}}" class="text-help-command" />
					<label pos="0 -8" size="240 10" valign="center2" text="{{{Text_CommandBrake}}}" class="text-help-command" />
					<label pos="0 -16" size="240 10" valign="center2" text="{{{Text_CommandTurnLeft}}}" class="text-help-command" />
					<label pos="0 -24" size="240 10" valign="center2" text="{{{Text_CommandTurnRight}}}" class="text-help-command" />
					<label pos="0 -32" size="240 10" valign="center2" text="{{{Text_CommandRespawn}}}" class="text-help-command" />
				</frame>
				<label id="label-top-speed" pos="0 -128" size="240 10" halign="center" valign="center2" class="text-help-speed" hidden="1" />
				<frame id="frame-countdown">
					<label pos="0 -148" size="240 10" halign="center" valign="center2" text="{{{Text_StartsIn}}}" class="text-help-body" />
					<label id="label-countdown" pos="0 -158" size="240 10" halign="center" valign="center2" text="20" class="text-help-countdown" />
				</frame>
			</frame>
		</frame>
		<frame id="frame-race" z-index="1">
			<quad pos="153 84" size="36.3 16.5" halign="right" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}" opacity="0.5" autoscale="0" image="{{{C_ImgPath}}}/clashtime_logo_ingame.dds" />
			<frame id="frame-target" pos="0 80.5">
				<quad z-index="0" size="69.25 12" halign="center" valign="center" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.7" image="{{{C_ImgPath}}}/clashtime_control_info.dds" />
				<label pos="1 3.5" z-index="1" size="64 4" halign="center" valign="center" textsize="1.8" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" textcolor="ffffff" text="{{{Text_PlayAs}}}" />
				<label id="label-target" pos="-1 -1" z-index="1" size="64 4" halign="center" valign="center" textsize="5" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" />
			</frame>
			<frame id="frame-rank">
				<label id="label-rank" pos="0 {{{RankPosY}}}" z-index="3" size="150 10" halign="center" class="text-rank" />
			</frame>
			<frame pos="0 69" id="frame-commands" z-index="2">
				<frame z-index="3">
					<quad id="quad-accelerate" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}" opacity="{{{CommandActiveOpacity}}}" class="button-size" />
					<quad id="quad-brake" pos="0 {{{-ButtonSize.Y - 1}}}" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}" opacity="{{{CommandActiveOpacity}}}" class="button-size" />
					<quad id="quad-right" pos="{{{(0.5 * ButtonSize.X) + 1}}} {{{-ButtonSize.Y - 1}}}" halign="left" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}" opacity="{{{CommandActiveOpacity}}}" class="button-size" />
					<quad id="quad-left" pos="{{{(-0.5 * ButtonSize.X) - 1}}} {{{-ButtonSize.Y - 1}}}" halign="right" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}" opacity="{{{CommandActiveOpacity}}}" class="button-size" />
					<quad id="quad-respawn" pos="{{{(ButtonSize.X + 1) * 2}}} 0" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}" opacity="{{{CommandActiveOpacity}}}" class="button-size" />
				</frame>
				<frame z-index="2">
					<quad bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.7" class="button-size" />
					<quad pos="0 {{{-ButtonSize.Y - 1}}}" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.7" class="button-size" />
					<quad pos="{{{ButtonSize.X + 1}}} {{{-ButtonSize.Y - 1}}}" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.7" class="button-size" />
					<quad pos="{{{-ButtonSize.X - 1}}} {{{-ButtonSize.Y - 1}}}" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.7" class="button-size" />
					<quad pos="{{{(ButtonSize.X + 1) * 2}}} 0" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.7" class="button-size" />
				</frame>
				<frame z-index="4">
					<label halign="center" valign="center2" text="++" class="text-command" />
					<label pos="0 {{{-ButtonSize.Y - 1}}}" halign="center" valign="center2" text="--" class="text-command" />
					<label pos="{{{ButtonSize.X + 1}}} {{{-ButtonSize.Y - 1}}}" halign="center" valign="center2" text=">>" class="text-command" />
					<label pos="{{{-ButtonSize.X - 1}}} {{{-ButtonSize.Y - 1}}}" halign="center" valign="center2" text="<<" class="text-command" />
					<label pos="{{{(ButtonSize.X + 1) * 2}}} 0" halign="center" valign="center2" text="rs" class="text-command" />
				</frame>
				<label id="label-type-in-chat" pos="0 {{{(-1.5 * ButtonSize.Y) - 2}}}" z-index="5" size="150 4" halign="center" textsize="2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$t$i" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}" text="{{{Text_TypeInChat}}}" />
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils

#Struct K_Commands {
	Boolean Accelerate;
	Boolean Brake;
	Real Steer;
	Boolean Respawn;
}

#Struct K_Controls {
	CMlQuad Quad_Accelerate;
	CMlQuad Quad_Brake;
	CMlQuad Quad_Right;
	CMlQuad Quad_Left;
	CMlQuad Quad_Respawn;
	CMlFrame Frame_Rank;
	CMlLabel Label_Rank;
	CMlFrame Frame_Help;
	CMlFrame Frame_CommandsList;
	CMlFrame Frame_Countdown;
	CMlLabel Label_Countdown;
	CMlLabel Label_TopSpeed;
	CMlFrame Frame_Race;
	CMlFrame Frame_Target;
	CMlFrame Frame_Commands;
	CMlLabel Label_TypeInChat;
	CMlLabel Label_Target;
}

#Const C_CommandsRefreshInterval 250
#Const C_ButtonSize {{{dump(ButtonSize)}}}
#Const C_RankPosY {{{dump(RankPosY)}}}
#Const C_CommandActiveOpacity {{{dump(CommandActiveOpacity)}}}
""",
"""
K_Commands UpdateCommands(
	K_Controls _Controls,
	K_Commands _Commands,
	Boolean _Initialize,
	Boolean _Accelerate,
	Boolean _Brake,
	Real _Steer,
	Boolean _Respawn
) {
	declare K_Commands Commands = _Commands;

	if (_Initialize || Commands.Accelerate != _Accelerate) {
		Commands.Accelerate = _Accelerate;
		AnimMgr.Flush(_Controls.Quad_Accelerate);
		if (Commands.Accelerate) {
			AnimMgr.Add(_Controls.Quad_Accelerate, "<quad opacity=\""^C_CommandActiveOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(_Controls.Quad_Accelerate, "<quad opacity=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}
	if (_Initialize || Commands.Brake != _Brake) {
		Commands.Brake = _Brake;
		AnimMgr.Flush(_Controls.Quad_Brake);
		if (Commands.Brake) {
			AnimMgr.Add(_Controls.Quad_Brake, "<quad opacity=\""^C_CommandActiveOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(_Controls.Quad_Brake, "<quad opacity=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}
	if (_Initialize || Commands.Steer != _Steer) {
		declare Boolean SwitchSide = (
			_Initialize ||
			(Commands.Steer >= 0. && _Steer < 0.) ||
			(Commands.Steer < 0. && _Steer >= 0.)
		);
		Commands.Steer = _Steer;
		AnimMgr.Flush(_Controls.Quad_Right);
		AnimMgr.Flush(_Controls.Quad_Left);
		if (Commands.Steer >= 0.) {
			declare Real SizeX = C_ButtonSize.X * Commands.Steer;
			AnimMgr.Add(_Controls.Quad_Right, "<quad size=\""^SizeX^" {{{ButtonSize.Y}}}\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			if (SwitchSide) {
				AnimMgr.Add(_Controls.Quad_Left, "<quad size=\"0 {{{ButtonSize.Y}}}\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		} else {
			declare Real SizeX = C_ButtonSize.X * Commands.Steer * -1;
			AnimMgr.Add(_Controls.Quad_Left, "<quad size=\""^SizeX^" {{{ButtonSize.Y}}}\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			if (SwitchSide) {
				AnimMgr.Add(_Controls.Quad_Right, "<quad size=\"0 {{{ButtonSize.Y}}}\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	}
	if (_Initialize || Commands.Respawn != _Respawn) {
		Commands.Respawn = _Respawn;
		AnimMgr.Flush(_Controls.Quad_Respawn);
		if (Commands.Respawn) {
			AnimMgr.Add(_Controls.Quad_Respawn, "<quad opacity=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(_Controls.Quad_Respawn, "<quad opacity=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	return Commands;
}
K_Commands UpdateCommands(
	K_Controls _Controls,
	K_Commands _Commands,
	Boolean _Accelerate,
	Boolean _Brake,
	Real _Steer,
	Boolean _Respawn
) {
	return UpdateCommands(_Controls, _Commands, False, _Accelerate, _Brake, _Steer, _Respawn);
}
K_Commands InitializeCommands(
	K_Controls _Controls,
	Boolean _Accelerate,
	Boolean _Brake,
	Real _Steer,
	Boolean _Respawn
) {
	return UpdateCommands(_Controls, K_Commands {}, True, _Accelerate, _Brake, _Steer, _Respawn);
}

Void SetFinishRank(K_Controls _Controls, Integer _Rank) {
	AnimMgr.Flush(_Controls.Label_Rank);
	if (_Rank > 0) {
		_Controls.Label_Rank.Visible = True;
		_Controls.Label_Rank.RelativePosition_V3.Y = C_RankPosY + 5.;
		_Controls.Label_Rank.RelativeScale = 3.;
		_Controls.Label_Rank.Opacity = 0.;
		_Controls.Label_Rank.Value = TL::Compose("{{{Text_FinishRank}}}", TL::FormatRank(_Rank, False));
		AnimMgr.Add(_Controls.Label_Rank, "<label pos=\"0. "^C_RankPosY^"\" scale=\"1\" opacity=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		_Controls.Label_Rank.Visible = False;
	}
}

Void UpdateContentDisplay(K_Controls _Controls, Boolean _IsIntro, Boolean _IsRace) {
	_Controls.Frame_Help.Visible = _IsIntro;
	_Controls.Frame_Race.Visible = _IsRace && !_Controls.Frame_Help.Visible;
}

Void UpdateIntroCountdown(K_Controls _Controls, Integer _IntroEndTime) {
	_Controls.Frame_Countdown.Visible = _IntroEndTime >= 0;
}

Void UpdateCommandsListAlign(K_Controls _Controls) {
	declare Real MaxWidth = 0.;
	foreach (Control in _Controls.Frame_CommandsList.Controls) {
		declare CMlLabel Label_Command <=> (Control as CMlLabel);
		declare Real Width = ML::Min(Label_Command.ComputeWidth(Label_Command.Value), Label_Command.Size.X);
		if (Width > MaxWidth) MaxWidth = Width;
	}
	_Controls.Frame_CommandsList.RelativePosition_V3.X = MaxWidth * -0.5;
}

Void UpdateRaceDisplay(
	K_Controls _Controls,
	Text _TargetAccountId,
	Text _TargetName,
	Text _SpecAccountId,
	Boolean _IsFinishSequence,
	Boolean _IsControlledPlayer
) {
	if (_TargetAccountId != "" && _TargetAccountId == _SpecAccountId) {
		declare Text TargetName = _TargetName;
		if (TargetName == "") {
			foreach (Score in Scores) {
				if (Score.User.WebServicesUserId == _TargetAccountId) {
					TargetName = Score.User.Name;
					break;
				}
			}
		}
		_Controls.Label_Target.Value = TargetName;
		_Controls.Frame_Target.Visible = (TargetName != "");
		_Controls.Frame_Commands.RelativePosition_V3.Y = 69.;
	} else {
		_Controls.Frame_Target.Visible = False;
		_Controls.Frame_Commands.RelativePosition_V3.Y = _Controls.Frame_Target.RelativePosition_V3.Y;
	}

	if (_Controls.Frame_Target.Visible) {
		_Controls.Label_TypeInChat.Value = "{{{Text_TypeInChat}}}";
	} else if (_IsControlledPlayer) {
		_Controls.Label_TypeInChat.Value = "{{{Text_YouControlledByTwitch}}}";
	} else {
		_Controls.Label_TypeInChat.Value = "{{{Text_ThisControlledByTwitch}}}";
	}

	_Controls.Frame_Rank.Visible = (_SpecAccountId != "" && _IsFinishSequence);
	_Controls.Frame_Commands.Visible = (_SpecAccountId != "" && !_IsFinishSequence);
}

Void UpdateSpectateTarget(Text _AccountId) {
	if (_AccountId != "") {
		foreach (Player in Players) {
			if (Player.User != Null && Player.User.WebServicesUserId == _AccountId) {
				SetSpectateTarget(Player.User.Login);
				return;
			}
		}
	}
}

Void SetTopSpeed(K_Controls _Controls, Real _TopSpeed) {
	if (_TopSpeed > 0.) {
		_Controls.Label_TopSpeed.Value = TL::Compose("{{{Text_TopSpeed}}}", ""^ML::NearestInteger(_TopSpeed));
		_Controls.Label_TopSpeed.Visible = True;
	} else {
		_Controls.Label_TopSpeed.Visible = False;
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare netread Boolean Net_ClashTime_ClashTime_Accelerate for UI;
declare netread Boolean Net_ClashTime_ClashTime_Brake for UI;
declare netread Real Net_ClashTime_ClashTime_Steer for UI;
declare netread Boolean Net_ClashTime_ClashTime_Respawn for UI;
declare netread Text Net_ClashTime_ClashTime_TargetAccountId for UI;
declare netread Text Net_ClashTime_ClashTime_TargetName for UI;
declare netread Boolean Net_ClashTime_ClashTime_IsIntro for Teams[0];
declare netread Integer Net_ClashTime_ClashTime_IntroEndTime for Teams[0];
declare netread Boolean Net_ClashTime_ClashTime_IsRace for Teams[0];
declare netread Real Net_ClashTime_ClashTime_TopSpeed for Teams[0];
declare netread Integer Net_ClashTime_ClashTime_AllStreamersSpectateTarget for Teams[0];

declare netwrite Text Net_ClashTime_ClashTime_SpecTarget for UI;

declare Boolean DisplayModule;
declare Integer CommandsRefreshTime;
declare K_Commands Commands;
declare K_Controls Controls;
declare Integer FinishRank;
declare Boolean IsFinishSequence;
declare Boolean IsControlledPlayer;
declare Boolean IsIntro;
declare Integer IntroEndTime;
declare Boolean IsRace;
declare Text TargetAccountId;
declare Text TargetName;
declare Text SpecAccountId;
declare Real TopSpeed;
declare Integer AllStreamersSpectateTarget;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

Controls.Frame_Race = (Frame_Global.GetFirstChild("frame-race") as CMlFrame);
Controls.Frame_Commands = (Controls.Frame_Race.GetFirstChild("frame-commands") as CMlFrame);
Controls.Quad_Accelerate = (Controls.Frame_Commands.GetFirstChild("quad-accelerate") as CMlQuad);
Controls.Quad_Brake = (Controls.Frame_Commands.GetFirstChild("quad-brake") as CMlQuad);
Controls.Quad_Right = (Controls.Frame_Commands.GetFirstChild("quad-right") as CMlQuad);
Controls.Quad_Left = (Controls.Frame_Commands.GetFirstChild("quad-left") as CMlQuad);
Controls.Quad_Respawn = (Controls.Frame_Commands.GetFirstChild("quad-respawn") as CMlQuad);
Controls.Frame_Rank = (Controls.Frame_Race.GetFirstChild("frame-rank") as CMlFrame);
Controls.Label_Rank = (Controls.Frame_Rank.GetFirstChild("label-rank") as CMlLabel);
Controls.Frame_Target = (Controls.Frame_Race.GetFirstChild("frame-target") as CMlFrame);
Controls.Label_Target = (Controls.Frame_Target.GetFirstChild("label-target") as CMlLabel);
Controls.Label_TypeInChat = (Controls.Frame_Commands.GetFirstChild("label-type-in-chat") as CMlLabel);
Controls.Frame_Help = (Frame_Global.GetFirstChild("frame-help") as CMlFrame);
Controls.Frame_CommandsList = (Controls.Frame_Help.GetFirstChild("frame-commands-list") as CMlFrame);
Controls.Frame_Countdown = (Controls.Frame_Help.GetFirstChild("frame-countdown") as CMlFrame);
Controls.Label_Countdown = (Controls.Frame_Countdown.GetFirstChild("label-countdown") as CMlLabel);
Controls.Label_TopSpeed = (Controls.Frame_Help.GetFirstChild("label-top-speed") as CMlLabel);

Net_ClashTime_ClashTime_SpecTarget = "";
SpecAccountId = "";

DisplayModule = Frame_Global.Visible;
CommandsRefreshTime = Now;
Commands = InitializeCommands(
	Controls,
	Net_ClashTime_ClashTime_Accelerate,
	Net_ClashTime_ClashTime_Brake,
	Net_ClashTime_ClashTime_Steer,
	Net_ClashTime_ClashTime_Respawn
);
FinishRank = 0;
IsFinishSequence = False;
IsControlledPlayer = False;
SetFinishRank(Controls, FinishRank);
IsIntro = Net_ClashTime_ClashTime_IsIntro;
IsRace = Net_ClashTime_ClashTime_IsRace;
UpdateContentDisplay(Controls, IsIntro, IsRace);
IntroEndTime = Net_ClashTime_ClashTime_IntroEndTime;
UpdateIntroCountdown(Controls, IntroEndTime);
UpdateCommandsListAlign(Controls);
TargetAccountId = Net_ClashTime_ClashTime_TargetAccountId;
TargetName = Net_ClashTime_ClashTime_TargetName;
AllStreamersSpectateTarget = Net_ClashTime_ClashTime_AllStreamersSpectateTarget;
UpdateSpectateTarget(TargetAccountId);
UpdateRaceDisplay(Controls, TargetAccountId, TargetName, SpecAccountId, IsFinishSequence, IsControlledPlayer);
TopSpeed = Net_ClashTime_ClashTime_TopSpeed;
SetTopSpeed(Controls, TopSpeed);
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_ClashTime_ClashTime_IsVisible for Owner;
		if (DisplayModule != Net_ClashTime_ClashTime_IsVisible) {
			DisplayModule = Net_ClashTime_ClashTime_IsVisible;
			Frame_Global.Visible = Net_ClashTime_ClashTime_IsVisible;
			if (!Frame_Global.Visible) {
				Net_ClashTime_ClashTime_SpecTarget = "";
			}
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
		Net_ClashTime_ClashTime_SpecTarget = "";
	}

	if (Frame_Global.Visible) {
		// Check if the player finished the race
		if (Owner != Null) {
			declare netread Integer Net_ClashTime_ClashTime_FinishRank for Owner;
			if (
				FinishRank != Net_ClashTime_ClashTime_FinishRank ||
				IsFinishSequence != (Owner.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && Net_ClashTime_ClashTime_FinishRank > 0)
			) {
				FinishRank = Net_ClashTime_ClashTime_FinishRank;
				IsFinishSequence = (Owner.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && Net_ClashTime_ClashTime_FinishRank > 0);
				SetFinishRank(Controls, FinishRank);
				UpdateRaceDisplay(Controls, TargetAccountId, TargetName, SpecAccountId, IsFinishSequence, IsControlledPlayer);
			}
		}

		// Update spectator target
		if (GUIPlayer != Null && Net_ClashTime_ClashTime_SpecTarget != GUIPlayer.User.Login) {
			// Use login and not `WebServicesUserId` because the value will be used by `CSmMode::GetPlayer(Text _Login)` on the server
			Net_ClashTime_ClashTime_SpecTarget = GUIPlayer.User.Login;
			SpecAccountId =  GUIPlayer.User.WebServicesUserId;
			IsControlledPlayer = (InputPlayer != Null && InputPlayer == GUIPlayer);
			UpdateRaceDisplay(Controls, TargetAccountId, TargetName, SpecAccountId, IsFinishSequence, IsControlledPlayer);
		} else if (GUIPlayer == Null && Net_ClashTime_ClashTime_SpecTarget != "") {
			Net_ClashTime_ClashTime_SpecTarget = "";
			SpecAccountId = "";
			IsControlledPlayer = (InputPlayer != Null && InputPlayer == GUIPlayer);
			UpdateRaceDisplay(Controls, TargetAccountId, TargetName, SpecAccountId, IsFinishSequence, IsControlledPlayer);
		}

		if (Controls.Frame_Commands.Visible) {
			// Update commands
			if (CommandsRefreshTime >= 0 && Now >= CommandsRefreshTime) {
				CommandsRefreshTime = Now + C_CommandsRefreshInterval;

				if (
					Commands.Accelerate != Net_ClashTime_ClashTime_Accelerate ||
					Commands.Brake != Net_ClashTime_ClashTime_Brake ||
					Commands.Steer != Net_ClashTime_ClashTime_Steer ||
					Commands.Respawn != Net_ClashTime_ClashTime_Respawn
				) {
					Commands = UpdateCommands(
						Controls,
						Commands,
						Net_ClashTime_ClashTime_Accelerate,
						Net_ClashTime_ClashTime_Brake,
						Net_ClashTime_ClashTime_Steer,
						Net_ClashTime_ClashTime_Respawn
					);
				}
			}
		}

		if (IsIntro != Net_ClashTime_ClashTime_IsIntro) {
			IsIntro = Net_ClashTime_ClashTime_IsIntro;
			UpdateContentDisplay(Controls, IsIntro, IsRace);
		}
		if (IsRace != Net_ClashTime_ClashTime_IsRace) {
			IsRace = Net_ClashTime_ClashTime_IsRace;
			UpdateContentDisplay(Controls, IsIntro, IsRace);
		}

		if (IsIntro) {
			if (IntroEndTime != Net_ClashTime_ClashTime_IntroEndTime) {
				IntroEndTime = Net_ClashTime_ClashTime_IntroEndTime;
				UpdateIntroCountdown(Controls, IntroEndTime);
			}

			if (Controls.Frame_Countdown.Visible) {
				Controls.Label_Countdown.Value = ""^ML::Max((IntroEndTime - GameTime + 1000) / 1000, 0);
			}

			if (TopSpeed != Net_ClashTime_ClashTime_TopSpeed) {
				TopSpeed = Net_ClashTime_ClashTime_TopSpeed;
				SetTopSpeed(Controls, TopSpeed);
			}
		}

		if (
			TargetAccountId != Net_ClashTime_ClashTime_TargetAccountId ||
			TargetName != Net_ClashTime_ClashTime_TargetName ||
			AllStreamersSpectateTarget != Net_ClashTime_ClashTime_AllStreamersSpectateTarget
		) {
			TargetAccountId = Net_ClashTime_ClashTime_TargetAccountId;
			TargetName = Net_ClashTime_ClashTime_TargetName;
			AllStreamersSpectateTarget = Net_ClashTime_ClashTime_AllStreamersSpectateTarget;
			UpdateSpectateTarget(TargetAccountId);
			UpdateRaceDisplay(Controls, TargetAccountId, TargetName, SpecAccountId, IsFinishSequence, IsControlledPlayer);
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}