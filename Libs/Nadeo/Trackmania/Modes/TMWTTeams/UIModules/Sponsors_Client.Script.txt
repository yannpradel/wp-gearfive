/**
 *	UI module: Sponsors client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/TMWTTeams/UIModules/Sponsors_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/Modes/TMWTTeams/UIModules/Sponsors_Common.Script.txt" as UIModules_Sponsors_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_SponsorUpdateInterval 15000
#Const C_VisibilityAnimDuration 250
#Const C_SponsorsAnimDuration 250

#Const C_Size_SponsorsBg <66., 12.>
#Const C_Size_SponsorsLogo <64., 10.>

#Const C_Id_FrameGlobal "frame-global"
#Const C_Id_FrameAnimVisibility "frame-anim-visibility"
#Const C_Id_QuadOldSponsor "quad-old-sponsor"
#Const C_Id_QuadNewSponsor "quad-new-sponsor"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_Sponsors_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_Sponsors_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	return MV::Create(
GetId(), 3,
"""
{{{Stylesheet::Get()}}}
<frame id="{{{C_Id_FrameGlobal}}}" z-index="{{{Shared::C_ZIndex_Sponsors}}}">
	<frame {{{MLHelpers::Size(C_Size_SponsorsBg + <Stylesheet::C_BorderWidth, 0.>)}}} halign="right" valign="center" {{{UIModules::CustomizableUIModule(UIModules_Sponsors_Common::C_UIModuleConfig)}}}>
		<frame id="{{{C_Id_FrameAnimVisibility}}}" pos="{{{C_Size_SponsorsBg.X + Stylesheet::C_BorderWidth}}} 0" hidden="1">
			<quad class="{{{Stylesheet::C_Class_Border_Accent}}}" z-index="1" size="{{{Stylesheet::C_BorderWidth}}} {{{C_Size_SponsorsBg.Y}}}" halign="right" valign="center" />
			<frame pos="{{{-Stylesheet::C_BorderWidth}}}" z-index="0">
				<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" {{{MLHelpers::Size(C_Size_SponsorsBg)}}} halign="right" valign="center" />
				<frame pos="{{{C_Size_SponsorsBg.X * -0.5}}} 0" {{{MLHelpers::Size(C_Size_SponsorsLogo)}}} halign="center" valign="center">
					<quad id="{{{C_Id_QuadOldSponsor}}}" z-index="1" {{{MLHelpers::Size(C_Size_SponsorsLogo)}}} halign="center" valign="center" keepratio="fit" />
					<quad id="{{{C_Id_QuadNewSponsor}}}" z-index="2" {{{MLHelpers::Size(C_Size_SponsorsLogo)}}} halign="center" valign="center" keepratio="fit" />
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Stylesheet.Script.txt" as Stylesheet

#Struct K_Controls {
	CMlFrame Frame_AnimVisibility;
	CMlQuad Quad_OldSponsor;
	CMlQuad Quad_NewSponsor;
}
#Struct K_State {
	K_Controls Controls;
	Boolean IsVisible;
	Boolean IsSpectating;
	Boolean DisplayModule;
	Integer SponsorsURLUpdate;
	Text[] SponsorsURL;
	Integer NextSponsorKey;
	Integer NextSponsorTime;
}

#Const C_State_Null K_State {
	Controls = K_Controls {},
	IsVisible = False,
	IsSpectating = False,
	DisplayModule = False,
	SponsorsURLUpdate = -1,
	SponsorsURL = [],
	NextSponsorKey = -1,
	NextSponsorTime = -1
}

#Const C_SponsorUpdateInterval {{{dump(C_SponsorUpdateInterval)}}}
#Const C_VisibilityAnimDuration {{{dump(C_VisibilityAnimDuration)}}}
#Const C_SponsorsAnimDuration {{{dump(C_SponsorsAnimDuration)}}}

#Const C_Size_SponsorsBg {{{dump(C_Size_SponsorsBg)}}}
#Const C_Size_SponsorsLogo {{{dump(C_Size_SponsorsLogo)}}}

#Const C_Id_FrameGlobal {{{dump(C_Id_FrameGlobal)}}}
#Const C_Id_FrameAnimVisibility {{{dump(C_Id_FrameAnimVisibility)}}}
#Const C_Id_QuadOldSponsor {{{dump(C_Id_QuadOldSponsor)}}}
#Const C_Id_QuadNewSponsor {{{dump(C_Id_QuadNewSponsor)}}}
""",
"""
K_State SetVisibility(K_State _State, Boolean _DisplayModule, Boolean _IsSpectating, Text[] _SponsorsURL) {
	declare K_State State = _State;

	State.DisplayModule = _DisplayModule;
	State.IsSpectating = _IsSpectating;
	State.IsVisible = (
		State.DisplayModule &&
		State.IsSpectating &&
		_SponsorsURL.count > 0
	);

	AnimMgr.Flush(State.Controls.Frame_AnimVisibility);
	if (State.IsVisible) {
		AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\"0 0\" hidden=\"0\" />", C_VisibilityAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\""^(C_Size_SponsorsBg.X + Stylesheet::C_BorderWidth)^" 0\" hidden=\"1\" />", C_VisibilityAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

K_State SetSponsorsURL(K_State _State, Integer _SponsorsURLUpdate, Text[] _SponsorsURL) {
	declare K_State State = _State;

	State.SponsorsURLUpdate = _SponsorsURLUpdate;
	State.SponsorsURL = _SponsorsURL;
	State.NextSponsorKey = 0;
	State.NextSponsorTime = Now;

	return SetVisibility(State, State.DisplayModule, State.IsSpectating, State.SponsorsURL);
}

K_State CycleSponsors(K_State _State) {
	if (_State.SponsorsURL.count <= 0) return _State;

	declare K_State State = _State;

	if (State.NextSponsorKey < 0 || State.NextSponsorKey > State.SponsorsURL.count - 1) {
		State.NextSponsorKey = 0;
	}

	if (State.Controls.Quad_NewSponsor.ImageUrl != State.SponsorsURL[State.NextSponsorKey]) {
		State.Controls.Quad_OldSponsor.ImageUrl = State.Controls.Quad_NewSponsor.ImageUrl;
		State.Controls.Quad_NewSponsor.ImageUrl = State.SponsorsURL[State.NextSponsorKey];
		State.Controls.Quad_OldSponsor.RelativePosition_V3.Y = 0.;
		State.Controls.Quad_NewSponsor.RelativePosition_V3.Y = -C_Size_SponsorsLogo.Y;
		State.Controls.Quad_OldSponsor.Visible = True;
		State.Controls.Quad_NewSponsor.Visible = False;
		AnimMgr.Flush(State.Controls.Quad_OldSponsor);
		AnimMgr.Flush(State.Controls.Quad_NewSponsor);
		AnimMgr.Add(State.Controls.Quad_OldSponsor, "<a pos=\""^State.Controls.Quad_OldSponsor.RelativePosition_V3.X^" "^C_Size_SponsorsLogo.Y^"\" hidden=\"1\" />", C_SponsorsAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Quad_NewSponsor, "<a pos=\""^State.Controls.Quad_OldSponsor.RelativePosition_V3.X^" 0\" hidden=\"0\" />", C_SponsorsAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	State.NextSponsorKey += 1;
	State.NextSponsorTime = Now + C_SponsorUpdateInterval;

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare netread Boolean Net_TMWTTeams_Sponsors_IsVisible for UI;
declare netread Text[] Net_TMWTTeams_Sponsors_SponsorsURL for Teams[0] = [];
declare netread Integer Net_TMWTTeams_Sponsors_SponsorsURLUpdate for Teams[0] = 0;

declare K_State State = C_State_Null;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);
State.Controls.Frame_AnimVisibility <=> (Frame_Global.GetFirstChild(C_Id_FrameAnimVisibility) as CMlFrame);
State.Controls.Quad_OldSponsor <=> (State.Controls.Frame_AnimVisibility.GetFirstChild(C_Id_QuadOldSponsor) as CMlQuad);
State.Controls.Quad_NewSponsor <=> (State.Controls.Frame_AnimVisibility.GetFirstChild(C_Id_QuadNewSponsor) as CMlQuad);

State = SetVisibility(State, State.Controls.Frame_AnimVisibility.Visible, Shared::IsSpectating(This), Net_TMWTTeams_Sponsors_SponsorsURL);
State = SetSponsorsURL(State, Net_TMWTTeams_Sponsors_SponsorsURLUpdate, Net_TMWTTeams_Sponsors_SponsorsURL);
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.DisplayModule != Net_TMWTTeams_Sponsors_IsVisible) {
		State = SetVisibility(State, Net_TMWTTeams_Sponsors_IsVisible, State.IsSpectating, State.SponsorsURL);
	}

	if (State.DisplayModule) {
		if (State.IsSpectating != Shared::IsSpectating(This)) {
			State = SetVisibility(State, State.DisplayModule, Shared::IsSpectating(This), State.SponsorsURL);
		}

		if (State.SponsorsURLUpdate != Net_TMWTTeams_Sponsors_SponsorsURLUpdate) {
			State = SetSponsorsURL(State, Net_TMWTTeams_Sponsors_SponsorsURLUpdate, Net_TMWTTeams_Sponsors_SponsorsURL);
		}

		if (State.IsVisible) {
			if (Now >= State.NextSponsorTime && State.SponsorsURL.count > 0) {
				State = CycleSponsors(State);
			}
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}