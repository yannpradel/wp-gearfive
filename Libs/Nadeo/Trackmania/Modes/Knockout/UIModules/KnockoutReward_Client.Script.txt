/**
 *  UI module: KnockoutReward client side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/Knockout/UIModules/KnockoutReward_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Knockout_KnockoutReward"
#Const C_Type CUILayer::EUILayerType::Normal
#Const C_NavGroup_Page "navgroup-knockout-reward"

#Const C_Knockout_SmallPopup "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup.dds"
#Const C_Knockout_SmallPopup_ButtonLeft "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup_ButtonLeft.dds"
#Const C_Knockout_SmallPopup_ButtonRight "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup_ButtonRight.dds"

#Const C_PopUp_SizeX 180
#Const C_PopUp_SizeY 94

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Daily Knockout] Displayed when the player is eliminated from Knockout match.
	declare Text_Eliminated = _("You have been eliminated");
	//L16N [Daily Knockout] Displayed when the player is the winner in Knockout match.
	declare Text_Winner = _("Congratulations");
	//L16N [Daily Knockout] Display the rank of the player at the end of the league match. eg: "Your match rank is 1st".
	declare Text Text_MatchRank = _("Your match rank is $<$7FA%1$>");
	//L16N [Daily Knockout] Display the rank of the player in Cup at the end of the league match. eg: "Your final rank in the Cup of the Day is 1st".
	declare Text Text_CupRank = _("Your final rank in the Cup of the Day is $<$7FA%1$>");
	//L16N [Daily Knockout] Quit game button
	declare Text_Quit = _("Quit");
	//L16N [Daily Knockout] Button to stay after being eliminated, to spectate the rest of the game.
	declare Text_Spectate = _("|Verb|Stay");

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-title" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" textsize="8" textprefix="$t$i" halign="center" valign="center2" />
	<style class="text-header" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" textsize="4" textprefix="$t$i" halign="center" valign="center2"/>
	<style class="text-trophy" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" textsize="15" textprefix="$t$i" halign="center" valign="center2"/>
	<style class="text-body" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" textsize="4" textprefix="$i" halign="center" valign="center2"/>
	<style class="quad-base" halign="center" valign="center" />
</stylesheet>

<frame z-index="50" id="frame-global" hidden="1">
	<frame id="frame-content" hidden="1">
		<quad class="quad-base" z-index="0" size="400 200" opacity="0.4" bgcolor="000" fullscreen="1"/>
		<frame z-index="1" pos="0 -5">
			<quad class="quad-base" pos="-3 8" size="{{{C_PopUp_SizeX}}} {{{C_PopUp_SizeY}}}" opacity="1" image="{{{C_Knockout_SmallPopup}}}"/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-leave"
				class="{{{Navigation::C_Class}}}"
				pos="{{{C_PopUp_SizeX/2.-12.}}} {{{C_PopUp_SizeY/2.}}}"
				data-size="7 7"
				data-bgcolor="FFF"
				data-focuscolor="FFF"
				data-image="{{{Icons::C_Icon_256x256_Cross_Oblique}}}"
				data-imagefocus="{{{Icons::C_Icon_256x256_Cross_Oblique}}}"
				data-opacityunfocus=".5"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel"
				data-nav-targets="_;_"
				data-nav-group="{{{C_NavGroup_Page}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				z-index="3"
			/>
			<label id="label-title" class="text-title" pos="3 40" z-index="3" size="170 20" text="{{{Text_Eliminated}}}"/>
			<frame id="frame-results" z-index="3" pos="0 15">
				<label id="label-match-rank" class="text-header" pos="0 5" size="130 10"/>
				<label id="label-cup-rank" class="text-header" pos="0 -5" size="130 10"/>
				<frame id="frame-trophies" pos="0 -25">
					<frame pos="-45 0">
						<quad id="quad-icon" class="quad-base" size="22 22" autoscale="0"/>
						<label id="label-amount" class="text-trophy" pos="12 -1" z-index="1" size="13 22" />
					</frame>
					<frame pos="-15 0">
						<quad id="quad-icon" class="quad-base" size="22 22" autoscale="0"/>
						<label id="label-amount" class="text-trophy" pos="12 -1" z-index="1" size="13 22" />
					</frame>
					<frame pos="15 0">
						<quad id="quad-icon" class="quad-base" size="22 22" autoscale="0"/>
						<label id="label-amount" class="text-trophy" pos="12 -1" z-index="1" size="13 22" />
						<label id="label-remaining" class="text-trophy" pos="17 -3" z-index="2" size="50 22" opacity="0.6" textsize="7.8"/>
					</frame>
				</frame>
			</frame>
			<frame id="frame-buttons" z-index="3" pos="0 -54" >
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-quit"
					pos="-52 0" z-index="3"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{Text_Quit}}}"
					data-size="87 17"
					data-labelsize="87 17"
					data-textxpos="0.5"
					data-opacityunfocus=".5"
					data-image="{{{C_Knockout_SmallPopup_ButtonLeft}}}"
					data-imagefocus="{{{C_Knockout_SmallPopup_ButtonLeft}}}"
					data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
					data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
					data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
					data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-icon="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
					data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
					data-iconxpos=".15"
					data-iconypos="-.5"
					data-textsize="5"
					data-textopacityunfocus=".5"
					data-iconopacityunfocus=".5"
					data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
					data-textitalicslope=".2"
					data-halign="center"
					data-valign="bottom"
					data-nav-inputs="select;cancel;right"
					data-nav-targets="_;_;button-spectate"
					data-nav-group="{{{C_NavGroup_Page}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-spectate"
					pos="29 0" z-index="3"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{Text_Spectate}}}"
					data-size="83 17"
					data-labelsize="83 17"
					data-textxpos="0.5"
					data-opacityunfocus=".5"
					data-image="{{{C_Knockout_SmallPopup_ButtonRight}}}"
					data-imagefocus="{{{C_Knockout_SmallPopup_ButtonRight}}}"
					data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
					data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
					data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
					data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-icon="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
					data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
					data-iconxpos=".85"
					data-iconypos="-.5"
					data-textsize="5"
					data-textopacityunfocus=".5"
					data-iconopacityunfocus=".5"
					data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
					data-textitalicslope=".2"
					data-halign="center"
					data-valign="bottom"
					data-nav-inputs="select;cancel;left"
					data-nav-targets="_;_;button-quit"
					data-nav-group="{{{C_NavGroup_Page}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML

#Const C_TrophyDecimals 2
#Const C_InputPriority_KnockoutRewards 1

""",
"""
Text GetTrophyIcon(Integer _Trophy) {
	switch (_Trophy) {
		case 1: return "{{{Const::C_ImageUrl_Trophy_512_Bronze1}}}";
		case 2: return "{{{Const::C_ImageUrl_Trophy_512_Bronze2}}}";
		case 3: return "{{{Const::C_ImageUrl_Trophy_512_Bronze3}}}";
		case 4: return "{{{Const::C_ImageUrl_Trophy_512_Silver1}}}";
		case 5: return "{{{Const::C_ImageUrl_Trophy_512_Silver2}}}";
		case 6: return "{{{Const::C_ImageUrl_Trophy_512_Silver3}}}";
		case 7: return "{{{Const::C_ImageUrl_Trophy_512_Gold1}}}";
		case 8: return "{{{Const::C_ImageUrl_Trophy_512_Gold2}}}";
		case 9: return "{{{Const::C_ImageUrl_Trophy_512_Gold3}}}";
	}
	return "{{{Const::C_ImageUrl_Trophy_512_None}}}";
}

Void SetResult(CMlLabel _Label_Title, CMlLabel _Label_MatchRank, CMlLabel _Label_CupRank, CMlFrame _Frame_Trophies, Integer _Rank, Integer[Integer] _Trophies, Integer _CupRank) {
	/* Update the ranks*/
	if (_Rank > 1) {
		_Label_MatchRank.Value = TL::Compose("{{{Text_MatchRank}}}", TL::FormatRank(_Rank, False));
		_Label_Title.Value = "{{{Text_Eliminated}}}";
	} else if (_Rank == 1) {
		_Label_MatchRank.Value = TL::Compose("{{{Text_MatchRank}}}", TL::FormatRank(_Rank, False));
		_Label_Title.Value = "{{{Text_Winner}}}";
	} else {
		_Label_MatchRank.Value = TL::Compose("{{{Text_MatchRank}}}", "-");
		_Label_Title.Value = "{{{Text_Eliminated}}}";
	}
	if (_CupRank >= 1) {
		_Label_CupRank.Value = TL::Compose("{{{Text_CupRank}}}", TL::FormatRank(_CupRank, False));
		_Label_CupRank.Show();
	} else {
		_Label_CupRank.Hide();
	}

	/* Update trophies */
	declare Integer[Integer] SortedTrophies = _Trophies.sortkeyreverse();
	declare Integer[][] Trophies;
	foreach (Trophy => Amount in SortedTrophies) {
		if (Amount > 0) Trophies.add([Trophy, Amount]);
	}
	if (Trophies.count > 0) {
		foreach (Key => Control in _Frame_Trophies.Controls) {
			declare CMlFrame Frame_Trophy <=> (Control as CMlFrame);
			if (Key == 0) {
				if (Trophies.count == 1) Frame_Trophy.RelativePosition_V3.X = -5.;
				else Frame_Trophy.RelativePosition_V3.X = -45.;
			}
			if (Trophies.existskey(Key)) {
				declare CMlQuad Quad_Icon <=> (Frame_Trophy.GetFirstChild("quad-icon") as CMlQuad);
				declare CMlLabel Label_Amount <=> (Frame_Trophy.GetFirstChild("label-amount") as CMlLabel);
				Quad_Icon.ImageUrl = GetTrophyIcon(Trophies[Key][0]);
				Label_Amount.Value = ""^Trophies[Key][1];

				declare CMlLabel Label_Remaining <=> (Frame_Trophy.GetFirstChild("label-remaining") as CMlLabel);
				if (Label_Remaining != Null) {
					declare Text Remaining;
					declare Boolean OnlyZero = True;
					declare Integer TrophyStop = Trophies[Key][0] - 1;
					// We trust that the amount of trophies cannot be above 9
					for (I, 1, TrophyStop) {
						declare TrophyLevel = TrophyStop - I + 1;
						if (SortedTrophies.existskey(TrophyLevel) && SortedTrophies[TrophyLevel] >= 0) {
							Remaining ^= SortedTrophies[TrophyLevel];
							OnlyZero = False;
						} else {
							Remaining ^= "0";
						}
						if (I >= C_TrophyDecimals) break;
					}
					if (Remaining != "" && !OnlyZero) {
						Label_Remaining.Value = "."^Remaining;
						Label_Remaining.RelativePosition_V3.X = Label_Amount.RelativePosition_V3.X - 3. + ML::Min(Label_Amount.Size.X, Label_Amount.ComputeWidth(Label_Amount.Value));
						Label_Remaining.Visible = True;
					} else {
						Label_Remaining.Visible = False;
					}
				}
				Frame_Trophy.Visible = True;
			} else {
				Control.Visible = False;
			}
		}
		_Frame_Trophies.Visible = True;
	} else {
		_Frame_Trophies.Visible = False;
	}
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton((_From as CMlFrame))) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton((_To as CMlFrame))) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void Select(CMlControl _SelectedControl, CMlFrame _Frame_Content) {
	if (_SelectedControl == Null || {{{Transition::P}}}IsInTransition(This)) return;

	switch (_SelectedControl.ControlId) {
		case "button-spectate": _Frame_Content.Hide();
		case "button-leave": _Frame_Content.Hide();
		case "button-quit": Playground.QuitServer(False);
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Content;
declare CMlFrame Frame_Trophies;
declare CMlFrame Button_Quit;
declare CMlFrame Button_Spectate;
declare CMlLabel Label_Title;
declare CMlLabel Label_MatchRank;
declare CMlLabel Label_CupRank;

declare netread Integer Net_Knockout_KnockoutReward_Rank for UI;
declare netread Integer Net_Knockout_KnockoutReward_CupRank for UI;
declare netread Integer[Integer] Net_Knockout_KnockoutReward_Trophies for UI;
declare netread Boolean Net_KnockoutPlugin_KORewardAndReturn_PlayerEliminated for UI = False;
declare netread Integer Net_KnockoutPlugin_KORewardAndReturn_PlayerEliminatedUpdate for UI = -1;

declare Boolean DisplayContent;
declare Boolean DisplayModule;
declare Integer PlayerEliminatedUpdate;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Content <=> (Page.GetFirstChild("frame-content") as CMlFrame);
Frame_Trophies <=> (Frame_Global.GetFirstChild("frame-trophies") as CMlFrame);
Button_Quit <=> (Frame_Global.GetFirstChild("button-quit") as CMlFrame);
Button_Spectate <=> (Frame_Global.GetFirstChild("button-spectate") as CMlFrame);
Label_Title <=> (Frame_Global.GetFirstChild("label-title") as CMlLabel);
Label_MatchRank <=> (Frame_Global.GetFirstChild("label-match-rank") as CMlLabel);
Label_CupRank <=> (Frame_Global.GetFirstChild("label-cup-rank") as CMlLabel);

{{{Navigation::P}}}UseLocalEvents(This, True);
SetResult(Label_Title, Label_MatchRank, Label_CupRank, Frame_Trophies, Net_Knockout_KnockoutReward_Rank, Net_Knockout_KnockoutReward_Trophies, Net_Knockout_KnockoutReward_CupRank);
DisplayModule = Frame_Global.Visible;
DisplayContent = Frame_Content.Visible;
PlayerEliminatedUpdate = Net_KnockoutPlugin_KORewardAndReturn_PlayerEliminatedUpdate;
***

***MainLoop***
***
/* Enable menu navigation */
if (
	!EnableMenuNavigationInputs &&
	PageIsVisible &&
	Frame_Global.Visible &&
	Frame_Content.Visible
) {
	EnableMenuNavigation(True, False, False, Null, C_InputPriority_KnockoutRewards);
} else if (
	EnableMenuNavigationInputs &&
	(
		!PageIsVisible ||
		!Frame_Global.Visible ||
		!Frame_Content.Visible
	)
) {
	ClientUI.ScoreTableVisibility = CUIConfig::EVisibility::None;
	EnableMenuNavigation(False, False, False, Null, C_InputPriority_KnockoutRewards);
}

if (PageIsVisible) {
	if (InputPlayer != Null) {
		declare netread Boolean Net_Knockout_KnockoutReward_IsVisible for InputPlayer;
		if (DisplayModule != Net_Knockout_KnockoutReward_IsVisible) {
			DisplayModule = Net_Knockout_KnockoutReward_IsVisible;
			Frame_Global.Visible = Net_Knockout_KnockoutReward_IsVisible;
		}
	}

	if (
		InputPlayer == Null &&
		DisplayModule
	) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	/* Check for local player status */
	if (PlayerEliminatedUpdate != Net_KnockoutPlugin_KORewardAndReturn_PlayerEliminatedUpdate) {
		PlayerEliminatedUpdate = Net_KnockoutPlugin_KORewardAndReturn_PlayerEliminatedUpdate;
		DisplayContent = Net_KnockoutPlugin_KORewardAndReturn_PlayerEliminated;
		Frame_Content.Visible = DisplayContent;
		{{{Navigation::P}}}Lock(Button_Quit, !DisplayContent);
		{{{Navigation::P}}}Lock(Button_Spectate, !DisplayContent);
		if (DisplayContent) {
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Page}}}"), Button_Spectate);
			SetResult(Label_Title, Label_MatchRank, Label_CupRank, Frame_Trophies, Net_Knockout_KnockoutReward_Rank, Net_Knockout_KnockoutReward_Trophies, Net_Knockout_KnockoutReward_CupRank);
			ClientUI.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
		}
	}

	/* Check for Navigation events*/
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Page}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						Select(Event.To, Frame_Content);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						Frame_Content.Hide();
					} else {
						Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Page}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						Select(Event.To, Frame_Content);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	Navigation::ComponentV2(),
	Transition::ComponentV2(),
	MenuSounds::ComponentV2()
],
[]
	);
}