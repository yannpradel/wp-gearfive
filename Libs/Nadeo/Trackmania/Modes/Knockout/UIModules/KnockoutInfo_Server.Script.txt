/**
 *  UI module: KnockoutInfo server side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/Knockout/UIModules/KnockoutInfo_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common
#Include "Libs/Nadeo/Trackmania/Modes/Knockout/UIModules/KnockoutInfo_Common.Script.txt" as UIModules_KnockoutInfo_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_KnockoutInfo_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::K_ModuleConfig GetConfig() {
	return UIModules_KnockoutInfo_Common::C_UIModuleConfig;
}

Void SetServerNumber(Integer _ServerNumber) {
	declare netwrite Integer Net_Knockout_KnockoutInfo_ServerNumber for Teams[0] = -1;
	Net_Knockout_KnockoutInfo_ServerNumber = _ServerNumber;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;

	declare netwrite Boolean Net_Knockout_KnockoutInfo_IsVisible for _Player;
	Net_Knockout_KnockoutInfo_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Trigers scroes UI update
 *
 */
Void UpdateLiveRanking() {
	declare netwrite Integer Net_Knockout_KnockoutInfo_RankingUpdate for Teams[0] = 0;
	Net_Knockout_KnockoutInfo_RankingUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set map rounds
 *
 *	@param	_MapRoundNb								Current round nb on map
 *	@param	_MapRoundTotal						Max round nb on map
 */
Void SetMapRoundNb(Integer _MapRoundNb, Integer _MapRoundTotal) {
	declare netwrite Integer Net_Knockout_KnockoutInfo_MapRoundNb for Teams[0] = 0;
	declare netwrite Integer Net_Knockout_KnockoutInfo_MapRoundTotal for Teams[0] = 0;
	Net_Knockout_KnockoutInfo_MapRoundNb = _MapRoundNb;
	Net_Knockout_KnockoutInfo_MapRoundTotal = _MapRoundTotal;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set rounds
 *
 *	@param	_RoundNb								Current round nb
 *	@param	_RoundTotal						estimation of total rounds nb
 */
Void SetRoundNb(Integer _RoundNb, Integer _RoundTotal) {
	declare netwrite Integer Net_Knockout_KnockoutInfo_RoundNb for Teams[0] = 0;
	declare netwrite Integer Net_Knockout_KnockoutInfo_RoundTotal for Teams[0] = 0;
	Net_Knockout_KnockoutInfo_RoundNb = _RoundNb;
	Net_Knockout_KnockoutInfo_RoundTotal = _RoundTotal;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set alive players nb
 *
 *	@param	_PlayersNb								alive players nb
 */
Void SetAlivePlayersNb(Integer _PlayersNb) {
	declare netwrite Integer Net_Knockout_KnockoutInfo_PlayersNb for Teams[0] = 0;
	Net_Knockout_KnockoutInfo_PlayersNb = _PlayersNb;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set number of KOs this round
 *
 *	@param	_KOsNumber								number of KOs this round
 *	@param	_KOsMilestone							next elimination rate decrease
 */
Void SetKOsNumber(Integer _KOsNumber, Integer _KOsMilestone) {
	declare netwrite Integer Net_Knockout_KnockoutInfo_KOsNumber for Teams[0] = 0;
	declare netwrite Integer Net_Knockout_KnockoutInfo_KOsMilestone for Teams[0] = 0;
	Net_Knockout_KnockoutInfo_KOsNumber = _KOsNumber;
	Net_Knockout_KnockoutInfo_KOsMilestone = _KOsMilestone;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetRoundNb(0, 0);
	SetAlivePlayersNb(0);
	SetKOsNumber(0, 0);
	UpdateLiveRanking();
	SetServerNumber(-1);
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}