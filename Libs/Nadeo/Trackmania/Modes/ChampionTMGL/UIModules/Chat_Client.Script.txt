/**
 *  UI module: Chat client side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/ChampionTMGL/UIModules/Chat_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as MenuConsts

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Champion_Chat"
#Const C_Type CUILayer::EUILayerType::Normal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {

	return MV::Create(
C_Id, 3,
"""
<frame z-index="10" hidden="1" id="frame-global">
	<frame pos="-160.25 -68.5" z-index="5" id="frame-chat-toggle">
		<quad size="6 6.5" pos="2.9 0" z-index="-1" halign="center" valign="center" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}" image="{{{MenuConsts::C_ImageUrl_Champion_Spec_Background_Center}}}" opacity="0.5"/>
		<quad z-index="0" size="6 6" valign="center" image="{{{Icons::C_Icon_128x128_Tchat}}}" colorize="FFF" scriptevents="1" id="button-chat-toggle" />
	</frame>
</frame>
""",
"""
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils

#Const C_BottomLeftCorner <-155., -83.5>
""",
"""
declare CMlFrame Frame_ChatToggle;

Void SetButtonVisibility(Boolean _ChatIsVisible, Boolean _IsSpectatorClient) {
	if (_ChatIsVisible) {
		Frame_ChatToggle.RelativePosition_V3.Y = -68.5;
		Frame_ChatToggle.Visible = True;
	} else if (!_IsSpectatorClient) {
		Frame_ChatToggle.RelativePosition_V3.Y = -86.75;
		Frame_ChatToggle.Visible = True;
	} else {
		Frame_ChatToggle.RelativePosition_V3.Y = -86.75;
		Frame_ChatToggle.Visible = False;
	}
}

Boolean GetVisibility() {
	declare persistent ChampionChat_IsVisible_V3 for This = False;
	return ChampionChat_IsVisible_V3;
}

Void SetVisibility(Boolean _Visible) {
	declare persistent ChampionChat_IsVisible_V3 for This = False;
	ChampionChat_IsVisible_V3 = _Visible;

	ClientUI.OverlayHideChat = !ChampionChat_IsVisible_V3;
	SetButtonVisibility(ChampionChat_IsVisible_V3, IsSpectatorClient);
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare Boolean DisplayModule;
declare Boolean PrevIsSpectatorClient;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_ChatToggle <=> (Frame_Global.GetFirstChild("frame-chat-toggle") as CMlFrame);

DisplayModule = Frame_Global.Visible;
PrevIsSpectatorClient = IsSpectatorClient;

SetVisibility(GetVisibility() && !PrevIsSpectatorClient);

ClientUI.OverlayChatOffset = <-0.037,0.01>;
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Champion_Chat_IsVisible for Owner;
		if (DisplayModule != Net_Champion_Chat_IsVisible || PrevIsSpectatorClient != IsSpectatorClient) {
			DisplayModule = Net_Champion_Chat_IsVisible;
			PrevIsSpectatorClient = IsSpectatorClient;
			Frame_Global.Visible = DisplayModule;
			if (PrevIsSpectatorClient) SetVisibility(False);
			else SetButtonVisibility(GetVisibility(), PrevIsSpectatorClient);
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_Global.Visible) {
		if (PrevIsSpectatorClient && !GetVisibility()) {
			if (Frame_ChatToggle.Visible && (MouseY > C_BottomLeftCorner.Y || MouseX > C_BottomLeftCorner.X)) {
				Frame_ChatToggle.Visible = False;
			} else if (!Frame_ChatToggle.Visible && MouseY <= C_BottomLeftCorner.Y && MouseX <= C_BottomLeftCorner.X && MouseY > -1000 && MouseX > -1000) {
				Frame_ChatToggle.Visible = True;
			}
		}
	}

	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::MouseClick: {
				if (Event.ControlId == "button-chat-toggle") {
					SetVisibility(!GetVisibility());
				}
			}
		}
	}
}
***
""",
[],
[]
	);
}