/**
 *  UI module: SmallScoresTable server side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/Rounds/UIModules/SmallScoresTable_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common
#Include "Libs/Nadeo/Trackmania/Modes/Rounds/UIModules/SmallScoresTable_Common.Script.txt" as UIModules_SmallScoresTable_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_SmallScoresTable_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::K_ModuleConfig GetConfig() {
	return UIModules_SmallScoresTable_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Display a custom time for some scores
 *	instead of the `PrevRaceTime`.
 *	The scores will be sorted by this custom time
 *	instead of the `Score.PrevRaceTimes`.
 *
 *	@param	_CustomTimes							The custom time for each account id
 *																		["acount-id" => 1234, "aaaa-bbbb-cccc-dddd" => 63859, ...]
 */
Void SetCustomTimes(Integer[Text] _CustomTimes) {
	declare netwrite Integer[Text] Net_Rounds_SmallScoresTable_CustomTimes for Teams[0];
	declare netwrite Integer Net_Rounds_SmallScoresTable_CustomValuesUpdate for Teams[0];
	Net_Rounds_SmallScoresTable_CustomTimes = _CustomTimes;
	Net_Rounds_SmallScoresTable_CustomValuesUpdate += 1;
}
Void ResetCustomTimes() {
	SetCustomTimes([]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the current custom times
Integer[Text] GetCustomTimes() {
	declare netwrite Integer[Text] Net_Rounds_SmallScoresTable_CustomTimes for Teams[0];
	return Net_Rounds_SmallScoresTable_CustomTimes;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Display a custom string for some scores
 *	instead of the `Score.PrevRaceTimes` or custom time.
 *
 *	@param	_CustomResults						The custom text for each account id
 *																		["acount-id" => "custom text", "aaaa-bbbb-cccc-dddd" => "another custom text", ...]
 */
Void SetCustomResults(Text[Text] _CustomResults) {
	declare netwrite Text[Text] Net_Rounds_SmallScoresTable_CustomResults for Teams[0];
	declare netwrite Integer Net_Rounds_SmallScoresTable_CustomValuesUpdate for Teams[0];
	Net_Rounds_SmallScoresTable_CustomResults = _CustomResults;
	Net_Rounds_SmallScoresTable_CustomValuesUpdate += 1;
}
Void ResetCustomResults() {
	SetCustomResults([]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the current custom results
Text[Text] GetCustomResults() {
	declare netwrite Text[Text] Net_Rounds_SmallScoresTable_CustomResults for Teams[0];
	return Net_Rounds_SmallScoresTable_CustomResults;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;

	declare netwrite Boolean Net_Rounds_SmallScoresTable_IsVisible for _Player;
	Net_Rounds_SmallScoresTable_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	ResetCustomTimes();
	ResetCustomResults();

	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}