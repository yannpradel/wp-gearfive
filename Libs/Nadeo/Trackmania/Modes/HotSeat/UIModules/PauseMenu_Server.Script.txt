/**
 *  UI module: PauseMenu server side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/HotSeat/UIModules/PauseMenu_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/Trackmania/Modes/HotSeat/Consts.Script.txt" as Consts

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_HotSeat_PauseMenu"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Text G_EventType;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;

	declare netwrite Boolean Net_HotSeat_PauseMenu_IsVisible for _Player;
	Net_HotSeat_PauseMenu_IsVisible = _Display;
}

/**	Inform the UI of the time to beat
 *		@param	_TimeToBeat		Time to beat for the current player
 */
Void SetTimeToBeat(Integer _TimeToBeat) {
	declare netwrite Integer Net_HotSeat_PauseMenu_TimeToBeat for Teams[0];
	Net_HotSeat_PauseMenu_TimeToBeat = _TimeToBeat;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	G_EventType = "";
	SetTimeToBeat(Consts::C_BestTime_None);

	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}

Text GetEvent() {
	return G_EventType;
}

Void ResetEvent() {
	G_EventType = "";
}

Void Yield() {
	foreach (Event in UIManager.PendingEvents) {
		if (Event.Type == CUIConfigEvent::EType::OnLayerCustomEvent
				&& (Event.CustomEventType == Consts::C_PauseMenu_RestartMap
					|| Event.CustomEventType == Consts::C_PauseMenu_NextMap)) {
			G_EventType = Event.CustomEventType;
		}
	}
}