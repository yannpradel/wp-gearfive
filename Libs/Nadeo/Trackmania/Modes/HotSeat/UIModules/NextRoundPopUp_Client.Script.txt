/**
 *  UI module: NextRoundPopup client side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/HotSeat/UIModules/NextRoundPopUp_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/Modes/HotSeat/Consts.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/Modes/HotSeat/Components/NetShare_Client.Script.txt" as NetShare
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as MenuConsts

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModules_HotSeat_NextRoundPopUp"
#Const C_Type CUILayer::EUILayerType::Normal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [HotSeat] Sentence divided into two parts. %1 will be replaced by an image of the key/button to press to start the race. eg: "Press ENTER to start".
	declare Text Text_PressStart1 = _("|Press xx to start|Press");
	//L16N [HotSeat] Sentence divided into two parts. %1 will be replaced by an image of the key/button to press to start the race. eg: "Press ENTER to start".
	declare Text Text_PressStart2 = _("|Press xx to start|to start");
	//L16N [HotSeat] Name of the enter key on the keyboard.
	declare Text Text_Enter = _("|Keyboard|Enter");

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-base" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" />
</stylesheet>
<frame z-index="{{{Const::C_ZIndex_NextRound}}}" id="frame-global" hidden="1">
	<frame id="frame-calltoaction" hidden="1">
		<quad z-index="-1" pos="0 0" size="320 180" fullscreen="1" valign="center" halign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" opacity="0.8" scriptevents="1" id="quad-background" />
		<label id="label-hotseat-currentname" pos="5 30" z-index="2" size="125 10" halign="center" valign="center2" textsize="10" textprefix="$t$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" class="text-base"/>
		<label pos="4 19" z-index="2" size="125 50" halign="center" valign="center2" textsize="5" textprefix="$t$i" text="{{{Text_PressStart1}}}" class="text-base"/>
		<label pos="-3 -18" z-index="2" size="125 50" halign="center" valign="center2" textsize="5" textprefix="$t$i" text="{{{Text_PressStart2}}}" class="text-base"/>
		<frame id="frame-key" pos="0 1" z-index="1">
			<quad size="28 22" halign="center" valign="center" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" image="{{{MenuConsts::C_ImageUrl_HotSeat_Icon_Enter}}}" />
			<label pos="-1 -4" size="20 6" halign="center" valign="center" textsize="1.8" textprefix="$t$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" text="{{{Text_Enter}}}" class="text-base"/>
		</frame>
		<frame id="frame-button" hidden="1" pos="0 -1" z-index="1">
			<label halign="center" valign="center2" size="125 10" textsize="16" text="" id="label-button" />
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/Trackmania/Modes/HotSeat/Consts.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/Modes/HotSeat/Structs.Script.txt" as Struct
""",
"""
Boolean UsePad(CMlFrame _Frame_Key, CMlFrame _Frame_Button, Boolean _IsUsingPad, CInputPad::EPadType _PadType) {
	_Frame_Key.Visible = !_IsUsingPad;
	_Frame_Button.Visible = _IsUsingPad;

	if (_Frame_Button.Visible) {
		declare Label_Button <=> (_Frame_Button.GetFirstChild("label-button") as CMlLabel);
		if (_PadType == CInputPad::EPadType::PlayStation) {
			Label_Button.Value = "";
		} else {
			Label_Button.Value = "";
		}
	}

	return _IsUsingPad;
}
Boolean UsePad(CMlFrame _Frame_Key, CMlFrame _Frame_Button) {
	declare Boolean IsUsingPad = False;
	declare CInputPad::EPadType PadType = CInputPad::EPadType::Keyboard;
	if (Platform::IsSony(System)) {
		PadType = CInputPad::EPadType::PlayStation;
		IsUsingPad = True;
	} else if (Platform::IsMicrosoft(System)) {
		PadType = CInputPad::EPadType::XBox;
		IsUsingPad = True;
	}
	return UsePad(_Frame_Key, _Frame_Button, IsUsingPad, PadType);
}

Boolean IsPadType(CInputPad::EPadType _PadType) {
	return (
		_PadType == CInputPad::EPadType::PlayStation ||
		_PadType == CInputPad::EPadType::XBox ||
		_PadType == CInputPad::EPadType::Generic
	);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_CallToAction;
declare CMlLabel Label_CurrentName;
declare CMlFrame Frame_Key;
declare CMlFrame Frame_Button;

declare Boolean DisplayModule;
declare Boolean MenuOpen;
declare Integer CurrentPlayerID;
declare Boolean IsUsingPad;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_CallToAction <=> (Frame_Global.GetFirstChild("frame-calltoaction") as CMlFrame);
Label_CurrentName <=> (Frame_Global.GetFirstChild("label-hotseat-currentname") as CMlLabel);
Frame_Key <=> (Frame_Global.GetFirstChild("frame-key") as CMlFrame);
Frame_Button <=> (Frame_Global.GetFirstChild("frame-button") as CMlFrame);

declare netread Boolean Net_HotSeat_NextRoundPopUp_MenuOpen for Teams[0];

DisplayModule = Frame_Global.Visible;
CurrentPlayerID = Const::C_PlayerID_Null;
IsUsingPad = UsePad(Frame_Key, Frame_Button);
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_HotSeat_NextRoundPopUp_IsVisible for Owner;
		if (DisplayModule != Net_HotSeat_NextRoundPopUp_IsVisible) {
			DisplayModule = Net_HotSeat_NextRoundPopUp_IsVisible;
			Frame_Global.Visible = DisplayModule;
		}

		if (Frame_Global.Visible) {
			//Open menu (from server) => Here to only open when frame-global is visible
			if (Net_HotSeat_NextRoundPopUp_MenuOpen && !MenuOpen) {
				MenuOpen = True;
				Frame_CallToAction.Show();
				EnableMenuNavigation(True, False, Null, Const::C_InputsPriority_NextRound);
			}

			//We refresh it dynamically because sometimes the server close then reopen the menu with a new player faster
			//than the data is transmitted via Teams[0] (so Net_HotSeat_NextRoundPopUp_MenuOpen don't go through the False state)
			declare Integer NewCurrentPlayerID = {{{NetShare::P}}}GetCurrentPlayerID();
			if (CurrentPlayerID != NewCurrentPlayerID) {
				CurrentPlayerID = NewCurrentPlayerID;
				Label_CurrentName.Value = {{{NetShare::P}}}GetHotSeatPlayers().get(CurrentPlayerID, Struct::K_HotSeatPlayer {}).PlayerName;
			}

			//Manage inputs
			if (Frame_CallToAction.Visible) {
				foreach (Event in PendingEvents) {
					if (Event.Type == CMlScriptEvent::Type::MenuNavigation) {
						switch (Event.MenuNavAction) {
							case CMlScriptEvent::EMenuNavAction::Select: {
								SendCustomEvent(Const::C_NextRoundPopUp_Closed, []);
								Frame_CallToAction.Hide();
								EnableMenuNavigation(False, False, Null, Const::C_InputsPriority_NextRound);
							}
							case CMlScriptEvent::EMenuNavAction::Cancel: {
								ShowInGameMenu();
							}
							case CMlScriptEvent::EMenuNavAction::AppMenu: {
								ShowInGameMenu();
							}
						}
					}
				}
			}
		}
	} else if (DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	//Close menu (from server) => Here to be sure to always detect the close request
	if (!Net_HotSeat_NextRoundPopUp_MenuOpen && MenuOpen) {
		MenuOpen = False;
		Frame_CallToAction.Hide();
		EnableMenuNavigation(False, False, Null, Const::C_InputsPriority_NextRound);
	}

	// Switch between keyboard and pad
	foreach (Event in Input.PendingEvents) {
		if (Event.Type == CInputEvent::EType::PadButtonPress) {
			if (Event.Pad != Null) {
				if (IsUsingPad && !IsPadType(Event.Pad.Type)) {
					IsUsingPad = UsePad(Frame_Key, Frame_Button);
				} else if (!IsUsingPad && IsPadType(Event.Pad.Type)) {
					IsUsingPad = UsePad(Frame_Key, Frame_Button, True, Event.Pad.Type);
				}
			}
		}
	}
	foreach (Event in PendingEvents) {
		if (Event.Type == CMlScriptEvent::Type::KeyPress) {
			if (IsUsingPad) {
				IsUsingPad = UsePad(Frame_Key, Frame_Button);
			}
		}
	}
	if (IsUsingPad && Input.TimeSinceLatestActivity == Input.TimeSinceLatestMouseActivity) {
		IsUsingPad = UsePad(Frame_Key, Frame_Button);
	}
}
***
""",
[
	NetShare::Component()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update library
Void Yield() {
	foreach (Event in PendingEvents) {
		if (Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
			declare Text[] ModeEvents = Const::C_NextRoundPopUpEvents;
			if (ModeEvents.exists(Event.CustomEventType)) {
				declare Text[] EventData;
				foreach (Value in Event.CustomEventData) EventData.add(Value);
				SendCustomEvent(Event.CustomEventType, EventData);
			}
		}
	}
}