/**
 *	UI module: EliminationWarning client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/UIModules/EliminationWarning_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/UIModules/EliminationWarning_Common.Script.txt" as UIModules_EliminationWarning_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/Ranking_Client.Script.txt" as Ranking

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_EliminationWarning_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_EliminationWarning_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *	@return									The module manialink
 */
Text GetML() {
	declare Img_TopBar = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/hud_knockout_warning_top.dds";
	declare Img_BottomLeftBar = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/hud_knockout_warning_bottom_left.dds";
	declare Img_BottomRightBar = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/hud_knockout_warning_bottom_right.dds";
	declare Img_LeftWarning = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/hud_knockout_warning_timer_left.dds";
	declare Img_RightWarning = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/hud_knockout_warning_timer_right.dds";
	return MV::Create(
GetId(), 3,
"""
<frame z-index="-50" hidden="1" id="frame-global">
	<frame {{{UIModules::CustomizableUIModule(UIModules_EliminationWarning_Common::C_UIModuleConfig)}}}>
		<frame id="frame-content" hidden="1" z-index="0">
			<quad id="quad-top-bar" fullscreen="1" pos="0 91.5" size="380 10" halign="center" valign="top" image="{{{Img_TopBar}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDanger)}}}"/>
			<quad id="quad-bot-left-bar" fullscreen="1" size="161 5.5" pos="-21 -91" halign="right" valign="bottom" image="{{{Img_BottomLeftBar}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDanger)}}}"/>
			<quad id="quad-bot-right-bar" fullscreen="1" size="161 5.5" pos="21 -91" halign="left" valign="bottom" image="{{{Img_BottomRightBar}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDanger)}}}"/>
			<quad id="quad-warning-left" fullscreen="1" pos="-25 -81" size="11. {{{11. * 112./128.}}}" halign="center" valign="center" image="{{{Img_LeftWarning}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDanger)}}}"/>
			<quad id="quad-warning-right" fullscreen="1" pos="25 -81" size="11. {{{11. * 112./128.}}}" halign="center" valign="center" image="{{{Img_RightWarning}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDanger)}}}"/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/AudioManager_ML.Script.txt" as AudioManager
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/Trackmania/Modes/Knockout/Components/EliminationStatus.Script.txt" as EliminationStatus

#Const C_AnimDelay 100
#Const C_AnimDuration 3000
#Const C_AlertSound "KnockoutEliminationAlert"

#Const C_GameMode_Knockout {{{dump(UIModules_EliminationWarning_Common::C_GameMode_Knockout)}}}
#Const C_GameMode_Royal {{{dump(UIModules_EliminationWarning_Common::C_GameMode_Royal)}}}

#Struct K_State {
	Integer AnimStartTime;
	Boolean AnimStarted;
	Boolean EliminationSoundPlayed;
}
""",
"""
K_State DisplayWarning(K_State _State, CMlFrame _Frame_Content, Boolean _IsVisible) {
	declare K_State State = _State;

	_Frame_Content.Visible = _IsVisible;
	State.AnimStarted = _IsVisible;
	AudioManager::StopSound(This, C_AlertSound);

	if (_IsVisible && !State.EliminationSoundPlayed) {
		State.EliminationSoundPlayed = True;
		AudioManager::PlaySound(This, C_AlertSound);
	} else if (!_IsVisible) {
		State.AnimStartTime = -1;
		State.EliminationSoundPlayed = False;
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Content;
declare CMlQuad Quad_TopBar;
declare CMlQuad Quad_BotLeftBar;
declare CMlQuad Quad_BotRightBar;
declare CMlQuad Quad_WarningLeft;
declare CMlQuad Quad_WarningRight;

declare K_State State;
declare Boolean DisplayModule;
declare Integer CPCount;
declare Text OwnerAccountId;
declare Integer DisplayWarning;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Content <=> (Page.GetFirstChild("frame-content") as CMlFrame);
Quad_TopBar <=> (Page.GetFirstChild("quad-top-bar") as CMlQuad);
Quad_BotLeftBar <=> (Page.GetFirstChild("quad-bot-left-bar") as CMlQuad);
Quad_BotRightBar <=> (Page.GetFirstChild("quad-bot-right-bar") as CMlQuad);
Quad_WarningLeft <=> (Page.GetFirstChild("quad-warning-left") as CMlQuad);
Quad_WarningRight <=> (Page.GetFirstChild("quad-warning-right") as CMlQuad);

State = K_State {
	AnimStartTime = -1,
	AnimStarted = False,
	EliminationSoundPlayed = False
};

DisplayModule = Frame_Global.Visible;
CPCount = 0;
OwnerAccountId = "";
DisplayWarning = -1;
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Knockout_EliminationWarning_IsVisible for Owner;
		if (DisplayModule != Net_Knockout_EliminationWarning_IsVisible) {
			DisplayModule = Net_Knockout_EliminationWarning_IsVisible;
			Frame_Global.Visible = Net_Knockout_EliminationWarning_IsVisible;
		}

		if (OwnerAccountId != Owner.User.WebServicesUserId) {
			declare netread Integer Net_EliminationWarning_DisplayWarning for Owner;
			DisplayWarning = Net_EliminationWarning_DisplayWarning;
			OwnerAccountId = Owner.User.WebServicesUserId;
			CPCount = Owner.RaceWaypointTimes.count;
			State = DisplayWarning(State, Frame_Content, False);
		}

		declare netread Integer Net_Knockout_EliminationWarning_GameMode for Teams[0];
		switch (Net_Knockout_EliminationWarning_GameMode) {
			case C_GameMode_Knockout: {
				if (CPCount != Owner.RaceWaypointTimes.count) {
					CPCount = Owner.RaceWaypointTimes.count;
					if (CPCount != 0) {
						if (State.AnimStartTime <= 0) {
							State.AnimStartTime = Now + C_AnimDelay;
							State.AnimStarted = False;
						}
					} else {
						State = DisplayWarning(State, Frame_Content, False);
					}
				}
			}
			case C_GameMode_Royal: {
				// Hide left and right warning for specs
				declare Boolean IsSpec = InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned;
				Quad_WarningLeft.Visible = !IsSpec;
				Quad_WarningRight.Visible = !IsSpec;

				declare netread Integer Net_EliminationWarning_DisplayWarning for Owner;
				if (DisplayWarning != Net_EliminationWarning_DisplayWarning) {
					DisplayWarning = Net_EliminationWarning_DisplayWarning;
					if (State.AnimStartTime <= 0) {
						State.AnimStartTime = Now + C_AnimDelay;
						State.AnimStarted = False;
					}
				}
			}
		}
	}

	/* Warning animation */
	if (State.AnimStartTime > 0 && State.AnimStartTime <= Now) {
		if (State.AnimStartTime + C_AnimDuration <= Now || !EliminationStatus::IsOwnerEliminated(UI)) {
			State = DisplayWarning(State, Frame_Content, False);
			State.EliminationSoundPlayed = EliminationStatus::IsOwnerEliminated(UI);
		} else {
			if (!State.AnimStarted) State = DisplayWarning(State, Frame_Content, True);
			declare Real Opacity = (ML::Cos(( (Now-State.AnimStartTime)/1000.*2.*ML::PI() - ML::PI())) * 0.5) + 0.5;
			Quad_TopBar.Opacity = Opacity;
			Quad_BotLeftBar.Opacity = Opacity;
			Quad_BotRightBar.Opacity = Opacity;
			Quad_WarningLeft.Opacity = Opacity;
			Quad_WarningRight.Opacity = Opacity;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}
}
***
""",
[
	UIModules::Component(),
	Ranking::Component()
],
[]
	);
}