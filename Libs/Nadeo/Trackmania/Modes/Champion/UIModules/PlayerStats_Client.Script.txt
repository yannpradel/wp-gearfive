/**
 *  UI module: Player statictics client side
 */
#Const Version		"1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/Champion/UIModules/PlayerStats_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/PlayerProfiles.Script.txt" as PlayerProfiles
#Include "Libs/Nadeo/Trackmania/Modes/Champion/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/Trackmania/Modes/ChampionTMGL/LeagueRanking.Script.txt" as LeagueRanking

#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Champion_PlayerStats"
#Const C_Type CUILayer::EUILayerType::Normal
#Const C_MaxHearts 8

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text Hex6ToHex3(Text _Hex6) {
	if(TL::Length(_Hex6) == 3) return _Hex6;
	if(TL::Length(_Hex6) != 6) return "fff";
	return TL::SubString(_Hex6, 0, 1) ^ TL::SubString(_Hex6, 2, 1) ^ TL::SubString(_Hex6, 4, 1);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Color_Text1 = ColorPalette::C_White;
	declare Color_Text2 = ColorPalette::C_LightTonic;
	declare Color_Background = ColorPalette::C_DarkBackground1;
	declare Color_Lines = ColorPalette::C_DarkBackground2;

	// Must be 3 characters colors code
	declare Color_WhiteShort = Hex6ToHex3(ColorPalette::C_White);
	declare Color_RedShort = Hex6ToHex3(ColorPalette::C_Loss);
	declare Color_GreenShort = Hex6ToHex3(ColorPalette::C_Transition);

	declare Img_Background = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Champion/FondPlayersInfoGreen.dds";
	declare Img_ButtonToggle = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Champion/TogglePlayersInfo.dds";
	declare Img_Hearts = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Champion/Hearts/TMGL2020_Hearts";

	//L16N [TMCL] Legend beside the ranking of the player in the league
	declare Text_League = _("League ranking");
	//L16N [TMCL] Legend beside the ranking of the player in the current league step
	declare Text_Step = _("Step ranking");
	//L16N [TMCL] The position of the player on each track
	declare Text_MapPosition = _("Track position");
	//L16N [TMCL] The best lap time of the player
	declare Text_BestLap = _("Best lap");
	//L16N [TMCL] Time difference between the player best time and the race best time
	declare Text_VsRaceRecord = _("Vs race record");
	//L16N [TMCL] The average lap time of the player
	declare Text_AverageLap = _("Average lap");
	//L16N [TMCL] The number of points of the player (0 or 1)
	declare Text_Point = _("|Point|pt");
	//L16N [TMCL] The number of points of the player (more than 1)
	declare Text_Points = _("|Points|pts");
	//L16N [TMCL] Title of the card that display info about the player the user is currently spectating
	declare Text_PlayerInfo = _("Player info");
	//L16N [TMCL] Statistics about the player
	declare Text_Stats = _("Stats");
	//L16N [TMCL] Rankings of the player in the league
	declare Text_Rankings = _("Rankings");

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-player-name" textsize="5" textcolor="{{{Color_Text1}}}" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" />
	<style class="text-title" textprefix="$t" textsize="2" textcolor="{{{Color_Text1}}}" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" />
	<style class="text-legend" textsize="2" textcolor="{{{Color_Text2}}}" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" />
	<style class="text-default" textsize="2" textcolor="{{{Color_Text1}}}" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" />
</stylesheet>
<frame z-index="-2" hidden="1" id="frame-global">
	<frame id="frame-spec">
		<frame pos="160 42" z-index="1" id="frame-header">
			<quad z-index="0" size="5 6.5" halign="right" valign="bottom" image="{{{Img_ButtonToggle}}}" scriptevents="1" id="button-toggle" />
		</frame>
		<frame pos="109 42" id="frame-card">
			<quad z-index="0" size="51 49" opacity="1" image="{{{Img_Background}}}" colorize="{{{Color_Background}}}"/>
			<frame pos="0.5 23" z-index="1">
				<quad pos="26 -26" size="5 5" halign="center" valign="center" keepratio="fit" image="" id="quad-hearts" />
				<label pos="50 -26" size="21 5" halign="right" valign="center2" class="text-title" id="label-player-name"/>
				<label pos="1.5 -20" size="47 5" valign="center2" class="text-title" id="label-map-name" />
				<frame pos="0 -26">
					<label pos="1.5 -0.1" z-index="1" size="47 5" valign="center2" text="{{{Text_Stats}}}" class="text-title" />
				</frame>
				<frame pos="0 -32">
					<label pos="1.5 0" z-index="1" size="21 5" valign="center2" text="{{{Text_AverageLap}}}" class="text-legend" />
					<quad pos="23.5 0" z-index="0" size="27.5 6" valign="center" opacity="0.75" bgcolor="{{{Color_Lines}}}" />
					<label pos="48.5 0" z-index="1" size="24.5 5" halign="right" valign="center2" class="text-default" id="label-average-lap" />
				</frame>
				<frame pos="0 -38">
					<label pos="1.5 0" z-index="1" size="21 5" valign="center2" text="{{{Text_BestLap}}}" class="text-legend" />
					<quad pos="23.5 0" z-index="0" size="27.5 6" valign="center" opacity="0.9" bgcolor="{{{Color_Lines}}}" />
					<label pos="48.5 0" z-index="1" size="24.5 5" halign="right" valign="center2" class="text-default" id="label-best-lap" />
				</frame>
				<frame pos="0 -44">
					<label pos="1.5 0" z-index="1" size="21 5" valign="center2" text="{{{Text_VsRaceRecord}}}" class="text-legend" />
					<quad pos="23.5 0" z-index="0" size="27.5 6" valign="center" opacity="0.75" bgcolor="{{{Color_Lines}}}" />
					<label pos="48.5 0" z-index="1" size="24.5 5" halign="right" valign="center2" class="text-default" id="label-record-lap" />
				</frame>
				<frame pos="0 -50">
					<label pos="1.5 -0.1" z-index="1" size="47 5" valign="center2" text="{{{Text_Rankings}}}" class="text-title" />
				</frame>
				<frame pos="0 -56">
					<label pos="1.5 0" z-index="1" size="21 5" valign="center2" text="{{{Text_MapPosition}}}" class="text-legend" />
					<quad pos="23.5 0" z-index="0" size="27.5 6" valign="center" opacity="0.75" bgcolor="{{{Color_Lines}}}" />
					<label pos="48.5 0" z-index="1" size="24.5 5" halign="right" valign="center2" class="text-default" id="label-map-position" />
				</frame>
				<frame pos="0 -62">
					<label pos="1.5 0" z-index="1" size="21 5" valign="center2" text="{{{Text_Step}}}" class="text-legend" />
					<quad pos="23.5 0" z-index="0" size="27.5 6" valign="center" opacity="0.9" bgcolor="{{{Color_Lines}}}" />
					<label pos="31 0" z-index="1" size="7 5" halign="right" valign="center2" class="text-default" id="label-step-ranking" />
					<label pos="48.5 0" z-index="1" size="14 5" halign="right" valign="center2" class="text-default" id="label-step-points" />
				</frame>
				<frame pos="0 -68">
					<label pos="1.5 0" z-index="1" size="21 5" valign="center2" text="{{{Text_League}}}" class="text-legend" />
					<quad pos="23.5 0" z-index="0" size="27.5 6" valign="center" opacity="0.75" bgcolor="{{{Color_Lines}}}" />
					<label pos="31 0" z-index="1" size="7 5" halign="right" valign="center2" class="text-default" id="label-league-ranking" />
					<label pos="48.5 0" z-index="1" size="14 5" halign="right" valign="center2" class="text-default" id="label-league-points" />
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils

{{{dumptype(LeagueRanking::K_LeagueRankingPlayer)}}}
{{{dumptype(LeagueRanking::K_LeagueRanking)}}}
""",
"""
declare CMlFrame Frame_Card;
declare CMlQuad Quad_Hearts;
declare CMlLabel Label_LeagueRanking;
declare CMlLabel Label_LeaguePoints;
declare CMlLabel Label_StepRanking;
declare CMlLabel Label_StepPoints;
declare CMlLabel Label_MapPosition;
declare CMlLabel Label_MapName;
declare CMlLabel Label_BestLap;
declare CMlLabel Label_RecordLap;
declare CMlLabel Label_AverageLap;
declare CMlLabel Label_PlayerName;

Integer GetPlayersNb() {
	declare netread Integer Net_Champion_PlayerStats_PlayersNb for Teams[0];
	if (Net_Champion_PlayerStats_PlayersNb > 0) {
		return Net_Champion_PlayerStats_PlayersNb;
	}

	return Scores.count;
}

Integer GetPlayerRank(CSmScore _Score) {
	if (_Score == Null) return 0;

	declare Rank = 1;
	foreach (Score in Scores) {
		if (Score.Id != _Score.Id && Score.Points > _Score.Points) {
			Rank += 1;
		}
	}

	return Rank;
}

Text FormatMapPosition(Text _Login, Integer _WinningNb) {
	declare netread Integer[Text][Integer] Net_Champion_PlayerStats_MatchProgression for Teams[0];
	declare netread Integer Net_Champion_PlayerStats_RoundsTotal for Teams[0];
	if (Net_Champion_PlayerStats_RoundsTotal <= 0) return "-";

	declare Text MapPosition;
	for (RoundNb, 1, Net_Champion_PlayerStats_RoundsTotal) {
		if (MapPosition != "") MapPosition ^= " / ";
		declare Color = "{{{Color_WhiteShort}}}";
		if (
			Net_Champion_PlayerStats_MatchProgression.existskey(RoundNb) &&
			Net_Champion_PlayerStats_MatchProgression[RoundNb].existskey(_Login)
		) {
			if (Net_Champion_PlayerStats_MatchProgression[RoundNb][_Login] <= _WinningNb) {
				Color = "{{{Color_GreenShort}}}";
			} else {
				Color = "{{{Color_RedShort}}}";
			}
			MapPosition ^= "$<$"^Color^TL::ToText(Net_Champion_PlayerStats_MatchProgression[RoundNb][_Login])^"$>";
		} else {
			MapPosition ^= "$<$"^Color^"-$>";
		}
	}

	return MapPosition;
}

Text FormatMapName() {
	declare Text MapName;
	if (Map != Null) {
		MapName ^= Map.MapInfo.Name;
	}

	declare netread Integer Net_Champion_PlayerStats_RoundNb for Teams[0];
	declare netread Integer Net_Champion_PlayerStats_RoundsTotal for Teams[0];
	if (Net_Champion_PlayerStats_RoundNb > 0 && Net_Champion_PlayerStats_RoundsTotal > 0) {
		MapName ^= " - "^Net_Champion_PlayerStats_RoundNb^"/"^Net_Champion_PlayerStats_RoundsTotal;
	}

	return MapName;
}

Text FormatBestLapTime(Integer[] _BestLapTimes) {
	// NB Score.BestLapTimes is updated only when a turn is finished
	if (_BestLapTimes.count == 0 || _BestLapTimes[_BestLapTimes.count - 1] <= 0) return "--.---";
	return TL::TimeToText(_BestLapTimes[_BestLapTimes.count - 1], True, True);
}

Text FormatRecordLapTime(Integer[] _BestLapTimes) {
	declare netread Integer Net_Champion_PlayerStats_BestLapTime for Teams[0];
	if (_BestLapTimes.count == 0 || _BestLapTimes[_BestLapTimes.count - 1] <= 0 || Net_Champion_PlayerStats_BestLapTime <= 0) return "--.---";
	declare TimeDiff = _BestLapTimes[_BestLapTimes.count - 1] - Net_Champion_PlayerStats_BestLapTime;
	if (TimeDiff < 0) return TL::TimeToText(TimeDiff, True, True);
	return "+"^TL::TimeToText(TimeDiff, True, True);
}

Text FormatAverageTime(Text _Login) {
	declare netread Integer[Text] Net_Champion_PlayerStats_AverageLapTimes for Teams[0];
	if (!Net_Champion_PlayerStats_AverageLapTimes.existskey(_Login) || Net_Champion_PlayerStats_AverageLapTimes[_Login] <= 0) return "--.---";
	return TL::TimeToText(Net_Champion_PlayerStats_AverageLapTimes[_Login], True, True);
}

Text FormatRank(Integer _Rank, Integer _Points) {
	if (_Points >= -1 && _Points <= 1) return TL::Compose("%1 - %2%3", TL::FormatRank(_Rank, False), TL::ToText(_Points), "{{{Text_Point}}}");
	return TL::Compose("%1 - %2%3", TL::FormatRank(_Rank, False), TL::ToText(_Points), "{{{Text_Points}}}");
}

Text FormatLeagueRank(Text _Login) {
	declare netread K_LeagueRanking Net_Champion_LeagueRanking_LeagueRanking for Teams[0];
	if (Net_Champion_LeagueRanking_LeagueRanking.ranking.existskey(_Login)) {
		declare Player = Net_Champion_LeagueRanking_LeagueRanking.ranking[_Login];
		return FormatRank(Player.rank, Player.score);
	}
	return "-";
}

Text FormatPlayerName(CPlayer _Player) {
	if (_Player == Null) return "";
	if ({{{PlayerProfiles::P}}}GetPlayerProfiles().existskey(_Player.User.WebServicesUserId)) {
		return {{{PlayerProfiles::P}}}GetPlayerProfiles()[_Player.User.WebServicesUserId].Nickname;
	}
	return _Player.User.Name;
}

Text FormatHearts(Text _Login) {
	declare netread Integer[Text] Net_Champion_PlayerStats_Hearts for Teams[0];

	if (!Net_Champion_PlayerStats_Hearts.existskey(_Login)) return "";

	declare HeartsNb = Net_Champion_PlayerStats_Hearts[_Login];
	if (HeartsNb <= 0) {
		return "";
	} else if (HeartsNb <= {{{C_MaxHearts}}}) {
		return "{{{Img_Hearts}}}"^HeartsNb^".dds";
	}

	return "{{{Img_Hearts}}}{{{C_MaxHearts}}}.dds";
}

Void UpdateCardInfo(CSmPlayer _Player, Integer _WinningNb) {
	declare PlayersNb = GetPlayersNb();

	if (_Player == Null) {
		Quad_Hearts.Visible = False;
		Label_LeaguePoints.Value = FormatLeagueRank("");
		Label_StepPoints.Value = FormatRank(1, 0);
		Label_MapPosition.Value = FormatMapPosition("", _WinningNb);
		Label_BestLap.Value = FormatBestLapTime([]);
		Label_RecordLap.Value = FormatRecordLapTime([]);
		Label_AverageLap.Value = FormatAverageTime("");
		Label_PlayerName.Value = FormatPlayerName(Null);
	} else {
		declare PlayerRank = GetPlayerRank(_Player.Score);
		Quad_Hearts.ImageUrl = FormatHearts(_Player.User.Login);
		Quad_Hearts.Visible = (Quad_Hearts.ImageUrl != "");
		Label_LeaguePoints.Value = FormatLeagueRank(_Player.User.Login);
		if (_Player.Score != Null) {
			Label_StepPoints.Value = FormatRank(PlayerRank, _Player.Score.Points);
			Label_BestLap.Value = FormatBestLapTime(_Player.Score.BestLapTimes);
			Label_RecordLap.Value = FormatRecordLapTime(_Player.Score.BestLapTimes);
		} else {
			Label_StepPoints.Value = FormatRank(PlayerRank, 0);
			Label_BestLap.Value = FormatBestLapTime([]);
			Label_RecordLap.Value = FormatRecordLapTime([]);
		}
		Label_MapPosition.Value = FormatMapPosition(_Player.User.Login, _WinningNb);
		Label_AverageLap.Value = FormatAverageTime(_Player.User.Login);
		Label_PlayerName.Value = FormatPlayerName(_Player);
	}
}

Boolean CardIsVisible() {
	return (IsSpectator && GUIPlayer != Null);
}

Boolean GetVisibility() {
	declare persistent Boolean ChampionPlayerStats_IsVisible_V2 for This = True;
	return ChampionPlayerStats_IsVisible_V2;
}

Void SetVisibility(Boolean _Visible) {
	declare persistent Boolean ChampionPlayerStats_IsVisible_V2 for This = True;
	ChampionPlayerStats_IsVisible_V2 = _Visible;

	AnimMgr.Flush(Frame_Card);
	if (ChampionPlayerStats_IsVisible_V2) {
		AnimMgr.Add(Frame_Card, "<frame pos=\"109 42\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(Frame_Card, "<frame pos=\"161 42\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Spec;

declare netread Integer Net_Champion_PlayerStats_MatchProgressionUpdate for Teams[0];
declare netread Integer Net_Champion_PlayerStats_RoundNb for Teams[0];
declare netread Integer Net_Champion_PlayerStats_RoundsTotal for Teams[0];
declare netread Integer Net_Champion_PlayerStats_LapUpdate for Teams[0];
declare netread Integer Net_ShareChampion_WinningPlayersNb for Teams[0];
declare netread Integer Net_Champion_PlayerStats_HeartsUpdate for Teams[0];
declare netread Integer Net_Champion_LeagueRanking_LeagueRankingUpdate for Teams[0];

declare Boolean DisplayModule;
declare Ident SpecTargetId;
declare Text MapUid;
declare Integer MatchProgressionUpdate;
declare Integer RoundNb;
declare Integer RoundsTotal;
declare Integer BestLapTime;
declare Integer LapUpdate;
declare Integer WinningNb;
declare Integer HeartsUpdate;
declare Integer LeagueRankingUpdate;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Spec <=> (Frame_Global.GetFirstChild("frame-spec") as CMlFrame);
Frame_Card <=> (Frame_Spec.GetFirstChild("frame-card") as CMlFrame);
Quad_Hearts <=> (Frame_Card.GetFirstChild("quad-hearts") as CMlQuad);
Label_LeagueRanking <=> (Frame_Card.GetFirstChild("label-league-ranking") as CMlLabel);
Label_LeaguePoints <=> (Frame_Card.GetFirstChild("label-league-points") as CMlLabel);
Label_StepRanking <=> (Frame_Card.GetFirstChild("label-step-ranking") as CMlLabel);
Label_StepPoints <=> (Frame_Card.GetFirstChild("label-step-points") as CMlLabel);
Label_MapPosition <=> (Frame_Card.GetFirstChild("label-map-position") as CMlLabel);
Label_MapName <=> (Frame_Card.GetFirstChild("label-map-name") as CMlLabel);
Label_BestLap <=> (Frame_Card.GetFirstChild("label-best-lap") as CMlLabel);
Label_RecordLap <=> (Frame_Card.GetFirstChild("label-record-lap") as CMlLabel);
Label_AverageLap <=> (Frame_Card.GetFirstChild("label-average-lap") as CMlLabel);
Label_PlayerName <=> (Frame_Card.GetFirstChild("label-player-name") as CMlLabel);

DisplayModule = Frame_Global.Visible;
SpecTargetId = NullId;
MapUid = "";
MatchProgressionUpdate = -123;
RoundNb = -123;
RoundsTotal = -123;
BestLapTime = -123;
LapUpdate = -123;
WinningNb = -123;
HeartsUpdate = -123;
LeagueRankingUpdate = -123;

SetVisibility(GetVisibility());
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Champion_PlayerStats_IsVisible for Owner;
		if (DisplayModule != Net_Champion_PlayerStats_IsVisible) {
			DisplayModule = Net_Champion_PlayerStats_IsVisible;
			Frame_Global.Visible = Net_Champion_PlayerStats_IsVisible;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_Spec.Visible != CardIsVisible()) {
		Frame_Spec.Visible = CardIsVisible();
	}

	if (Frame_Global.Visible && Frame_Spec.Visible && GUIPlayer != Null) {
		declare UpdateCardInfo = False;

		if (
			SpecTargetId != GUIPlayer.Id ||
			MatchProgressionUpdate != Net_Champion_PlayerStats_MatchProgressionUpdate ||
			RoundNb != Net_Champion_PlayerStats_RoundNb ||
			RoundsTotal != Net_Champion_PlayerStats_RoundsTotal
		) {
			SpecTargetId = GUIPlayer.Id;
			MatchProgressionUpdate = Net_Champion_PlayerStats_MatchProgressionUpdate;
			RoundNb = Net_Champion_PlayerStats_RoundNb;
			RoundsTotal = Net_Champion_PlayerStats_RoundsTotal;
			UpdateCardInfo = True;
		}

		if (Map != Null && MapUid != Map.MapInfo.MapUid) {
			MapUid = Map.MapInfo.MapUid;
			UpdateCardInfo = True;
		}
		if (Map == Null && MapUid != "") {
			MapUid = "";
			UpdateCardInfo = True;
		}

		if (GUIPlayer.Score != Null && GUIPlayer.Score.BestLapTimes.count != 0 && BestLapTime != GUIPlayer.Score.BestLapTimes[GUIPlayer.Score.BestLapTimes.count - 1]) {
			BestLapTime = GUIPlayer.Score.BestLapTimes[GUIPlayer.Score.BestLapTimes.count - 1];
			UpdateCardInfo = True;
		}
		if (GUIPlayer.Score != Null && GUIPlayer.Score.BestLapTimes.count == 0 && BestLapTime != -1) {
			BestLapTime = -1;
			UpdateCardInfo = True;
		}

		if (LapUpdate != Net_Champion_PlayerStats_LapUpdate) {
			LapUpdate = Net_Champion_PlayerStats_LapUpdate;
			UpdateCardInfo = True;
		}

		if (WinningNb != Net_ShareChampion_WinningPlayersNb) {
			WinningNb = Net_ShareChampion_WinningPlayersNb;
			UpdateCardInfo = True;
		}

		if (HeartsUpdate != Net_Champion_PlayerStats_HeartsUpdate) {
			HeartsUpdate = Net_Champion_PlayerStats_HeartsUpdate;
			UpdateCardInfo = True;
		}

		if (LeagueRankingUpdate != Net_Champion_LeagueRanking_LeagueRankingUpdate) {
			LeagueRankingUpdate = Net_Champion_LeagueRanking_LeagueRankingUpdate;
			UpdateCardInfo = True;
		}

		if (UpdateCardInfo) {
			UpdateCardInfo(GUIPlayer, WinningNb);
		}

		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::MouseClick : {
					if (Event.ControlId == "button-toggle") {
						SetVisibility(!GetVisibility());
					}
				}
			}
		}
	}
}
***
""",
[PlayerProfiles::Component()],
[]
	);
}