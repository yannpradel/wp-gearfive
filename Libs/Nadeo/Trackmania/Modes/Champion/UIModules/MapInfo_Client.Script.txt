/**
 *  UI module: MapInfo client side
 */
#Const Version		"1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/Champion/UIModules/MapInfo_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as MenuConsts
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/Constants.Script.txt" as LibChampion_Constants


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Champion_MapInfo"
#Const C_Type CUILayer::EUILayerType::Normal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Text_WarmUp = _("Warm up");
	//L16N [Champion] Text written just before the name of the track creator
	declare Text_By = _("|Author|By");

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-default" halign="center" valign="center2" textsize="3" textprefix="$t$i" textcolor="FFF" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" />
</stylesheet>
<frame z-index="-2" hidden="1" id="frame-global">
	<frame pos="0 80.7" id="frame-map-info" hidden="1">
		<quad size="62.6 15" pos="-54.5 0" z-index="-1" halign="center" valign="center2" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_WarmUp)}}}" image="{{{MenuConsts::C_ImageUrl_Champion_Spec_WarmUp_Left}}}" opacity="0.9"/>
		<quad size="80 15" pos="16 0" z-index="-1" halign="center" valign="center2" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" image="{{{MenuConsts::C_ImageUrl_Champion_Spec_WarmUp_Center}}}" opacity="0.7"/>
		<quad size="24.6 15" pos="67.4 0" z-index="-1" halign="center" valign="center2" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_WarmUp)}}}" image="{{{MenuConsts::C_ImageUrl_Champion_Spec_WarmUp_Right}}}" opacity="0.9"/>
		<frame z-index="1">
			<label id="label-warm-up" pos="-54 2.5" size="60 5" textsize="5" text="{{{Text_WarmUp}}}" class="text-default" />
			<label id="label-phase-name" pos="-54 -3.5" size="60 5" textsize="4." class="text-default" />
			<label id="label-map-name" pos="-20 2" size="52 5" halign="left" class="text-default" />
			<label id="label-map-author" pos="-20 -3" size="52 5" halign="left" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textsize="2.5" class="text-default" />
			<label id="label-map-count" pos="53.5 2" size="20 5" halign="right" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" textsize="2.5" class="text-default" />
			<label id="label-timer" pos="68 -0.5" size="23 5" textsize="4.5" class="text-default" />
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils

#Const C_Phase_Names {{{dump(LibChampion_Constants::C_Phase_Names)}}}
#Const C_Phase_Null {{{dump(LibChampion_Constants::C_Phase_Null)}}}
""",
"""
declare CMlLabel Label_MapName;
declare CMlLabel Label_MapAuthor;
declare CMlLabel Label_MapCount;

Void UpdateMapInfo(CMap _Map) {
	if (_Map != Null) {
		Label_MapName.Value = _Map.MapName;
		Label_MapAuthor.Value = TL::Compose("%1 %2", TL::ToLowerCase("{{{Text_By}}}"), _Map.AuthorNickName);
		Label_MapName.Visible = True;
		Label_MapAuthor.Visible = True;
	} else {
		Label_MapName.Visible = False;
		Label_MapAuthor.Visible = False;
	}
	Tools::FitLabelValue(Label_MapName, 3., 1.5, 0.25);
	Tools::FitLabelValue(Label_MapAuthor, 2.5, 1.5, 0.25);
}

Void UpdateProgression(Integer _MapCurrent, Integer _MapTotal) {
	if (_MapTotal > 0) {
		//L16N TMGL: Track number eg "track 1/6"
		Label_MapCount.Value = TL::ToLowerCase(TL::Compose(_("|League|track %1/%2"), ""^_MapCurrent, ""^_MapTotal));
	} else {
		Label_MapCount.Value = "";
	}
}

Void UpdatePhase(CMlLabel _Label_WarmUp, CMlLabel _Label_PhaseName, Integer _PhaseNb) {
	if (_PhaseNb == C_Phase_Null) {
		_Label_PhaseName.Value = "";
		_Label_WarmUp.RelativePosition_V3.Y = -0.5;
	} else {
		//L16N In Champion mode, a phase is a part of the match including one or more rounds. For example "Phase 1". %1 will be replaced by the phase number.
		declare PhaseName = TL::Compose(_("Phase %1"), ""^(_PhaseNb + 1));
		if (C_Phase_Names.existskey(_PhaseNb)) {
			PhaseName = C_Phase_Names[_PhaseNb];
		}
		_Label_PhaseName.Value = PhaseName;
		Tools::FitLabelValue(_Label_PhaseName, 4., 1.5, 0.5);
		_Label_WarmUp.RelativePosition_V3.Y = 2.5;
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_MapInfo;
declare CMlLabel Label_Timer;
declare CMlLabel Label_WarmUp;
declare CMlLabel Label_PhaseName;

declare netread Integer Net_ShareChampion_RoundsNb for Teams[0];
declare netread Integer Net_ShareChampion_RoundsTotal for Teams[0];
declare netread Integer Net_Champion_MapInfo_CutOffTimeLimit for Teams[0];
declare netread Integer Net_ShareChampion_Phase for Teams[0];
declare Boolean Champion_PausePopUp_IsVisible for UI = False;
declare netread Boolean Net_Champion_MapInfo_SpecialVisibility for Teams[0] = True;

declare Boolean DisplayModule;
declare Boolean DisplayContent;
declare Text CurrentMapUid;
declare Integer MapCurrent;
declare Integer MapTotal;
declare Integer CutOffTimeLimit;
declare Integer PhaseNb;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_MapInfo <=> (Frame_Global.GetFirstChild("frame-map-info") as CMlFrame);
Label_MapName <=> (Frame_MapInfo.GetFirstChild("label-map-name") as CMlLabel);
Label_MapAuthor <=> (Frame_MapInfo.GetFirstChild("label-map-author") as CMlLabel);
Label_MapCount <=> (Frame_MapInfo.GetFirstChild("label-map-count") as CMlLabel);
Label_Timer <=> (Frame_MapInfo.GetFirstChild("label-timer") as CMlLabel);
Label_WarmUp <=> (Frame_MapInfo.GetFirstChild("label-warm-up") as CMlLabel);
Label_PhaseName <=> (Frame_MapInfo.GetFirstChild("label-phase-name") as CMlLabel);

DisplayModule = Frame_Global.Visible;
DisplayContent = Frame_MapInfo.Visible;
CurrentMapUid = "";
MapCurrent = -123;
MapTotal = -123;
CutOffTimeLimit = -123;
PhaseNb = C_Phase_Null;

UpdatePhase(Label_WarmUp, Label_PhaseName, PhaseNb);
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Champion_MapInfo_IsVisible for Owner;
		if (DisplayModule != Net_Champion_MapInfo_IsVisible) {
			DisplayModule = Net_Champion_MapInfo_IsVisible;
			Frame_Global.Visible = Net_Champion_MapInfo_IsVisible;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Map == Null && CurrentMapUid != "") {
		CurrentMapUid = "";
		UpdateMapInfo(Map);
	} else if (Map != Null && CurrentMapUid != Map.MapInfo.MapUid) {
		CurrentMapUid = Map.MapInfo.MapUid;
		UpdateMapInfo(Map);
	}

	if (Frame_Global.Visible) {
		if (
			MapCurrent != Net_ShareChampion_RoundsNb ||
			MapTotal != Net_ShareChampion_RoundsTotal
		) {
			MapCurrent = Net_ShareChampion_RoundsNb;
			MapTotal = Net_ShareChampion_RoundsTotal;
			UpdateProgression(MapCurrent, MapTotal);
		}

		if (CutOffTimeLimit != Net_Champion_MapInfo_CutOffTimeLimit) {
			CutOffTimeLimit = Net_Champion_MapInfo_CutOffTimeLimit;
			Label_Timer.Value = TL::TimeToText(CutOffTimeLimit - GameTime);
		}

		if (CutOffTimeLimit >= 0) {
			Label_Timer.Value = TL::TimeToText(ML::Max(0, CutOffTimeLimit - GameTime + 1000));
		}

		if (PhaseNb != Net_ShareChampion_Phase) {
			PhaseNb = Net_ShareChampion_Phase;
			UpdatePhase(Label_WarmUp, Label_PhaseName, PhaseNb);
		}

		Label_WarmUp.Opacity = 0.5 + (0.5 * ML::Abs(ML::Cos(Now * 0.15 * (ML::PI() / 180.))));
		Label_PhaseName.Opacity = 0.5 + (0.5 * ML::Abs(ML::Cos(Now * 0.15 * (ML::PI() / 180.))));

		if (
			DisplayContent != (
				!Champion_PausePopUp_IsVisible &&
				Net_Champion_MapInfo_SpecialVisibility &&
				IsSpectatorClient
			)
		) {
			DisplayContent = (
				!Champion_PausePopUp_IsVisible &&
				Net_Champion_MapInfo_SpecialVisibility &&
				IsSpectatorClient
			);
			Frame_MapInfo.Visible = DisplayContent;
		}
	}
}
***
""",
[],
[]
	);
}