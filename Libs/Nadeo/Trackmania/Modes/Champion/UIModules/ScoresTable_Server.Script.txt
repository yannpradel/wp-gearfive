/**
 *  UI module: ScoresTable server side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/Champion/UIModules/ScoresTable_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Champion_ScoresTable"

#Const C_Sequence_Null -1
#Const C_Sequence_Race 0
#Const C_Sequence_PlayerFinishedRace 1
#Const C_Sequence_BeforeResult 2
#Const C_Sequence_AfterResult 3

#Const C_Tab_StepRanking 0
#Const C_Tab_LeagueRanking 1

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

Void SetLeagueRankingVisibility(Boolean _IsVisible) {
	declare netwrite Boolean Net_Champion_ScoresTable_LeagueRankingAvailable for Teams[0];
	Net_Champion_ScoresTable_LeagueRankingAvailable = _IsVisible;
}

Void SetBestLapPlayer(Text _AccountId, Integer _BonusPoints) {
	declare netwrite Integer Net_Champion_ScoresTable_BestLapUpdate for Teams[0];
	declare netwrite Text Net_Champion_ScoresTable_BestLapPlayer for Teams[0];
	declare netwrite Integer Net_Champion_ScoresTable_BestLapBonus for Teams[0];
	Net_Champion_ScoresTable_BestLapUpdate = Now;
	Net_Champion_ScoresTable_BestLapPlayer = _AccountId;
	Net_Champion_ScoresTable_BestLapBonus = _BonusPoints;
}

/** Update the scores table footer text
 *
 *	@param	_IsPaused									True if the match is paused
 */
Void UpdateScoresTableFooter(Boolean _IsPaused) {
	declare netwrite Boolean Net_Champion_ScoresTable_MatchIsPaused for Teams[0];
	declare netwrite Integer Net_Champion_ScoresTable_FooterUpdate for Teams[0];
	Net_Champion_ScoresTable_MatchIsPaused = _IsPaused;
	Net_Champion_ScoresTable_FooterUpdate = Now;
}

Void SetSequence(Integer _Sequence) {
	declare netwrite Integer Net_Champion_ScoresTable_Sequence for Teams[0];
	Net_Champion_ScoresTable_Sequence = _Sequence;
}

Void SetLostPoints(CUser _User, Integer _Points) {
	if (_User == Null) return;

	declare netwrite Integer[Text] Net_Champion_ScoresTable_LostPoints for Teams[0];
	declare netwrite Integer Net_Champion_ScoresTable_LostPointsUpdate for Teams[0];
	Net_Champion_ScoresTable_LostPoints[_User.WebServicesUserId] = _Points;
	Net_Champion_ScoresTable_LostPointsUpdate = Now;
}

Void ResetAllLostPoints() {
	declare netwrite Integer[Text] Net_Champion_ScoresTable_LostPoints for Teams[0];
	declare netwrite Integer Net_Champion_ScoresTable_LostPointsUpdate for Teams[0];
	Net_Champion_ScoresTable_LostPoints = [];
	Net_Champion_ScoresTable_LostPointsUpdate = Now;
}

Void SetRacePoints(CUser _User, Integer _Points) {
	if (_User == Null) return;

	declare netwrite Integer[Text] Net_Champion_ScoresTable_RacePoints for Teams[0];
	declare netwrite Integer Net_Champion_ScoresTable_RacePointsUpdate for Teams[0];
	Net_Champion_ScoresTable_RacePoints[_User.WebServicesUserId] = _Points;
	Net_Champion_ScoresTable_RacePointsUpdate = Now;
}

Void ResetAllRacePoints() {
	declare netwrite Integer[Text] Net_Champion_ScoresTable_RacePoints for Teams[0];
	declare netwrite Integer Net_Champion_ScoresTable_RacePointsUpdate for Teams[0];
	Net_Champion_ScoresTable_RacePoints = [];
	Net_Champion_ScoresTable_RacePointsUpdate = Now;
}

Void ResetRankDiff() {
	foreach (Key => Score in Scores) {
		declare Integer ChampionScoresTable_Key for Score;
		ChampionScoresTable_Key = Key;
	}
	declare netwrite Integer[Text] Net_Champion_ScoresTable_RankDiff for Teams[0];
	declare netwrite Integer Net_Champion_ScoresTable_RankDiffUpdate for Teams[0];
	Net_Champion_ScoresTable_RankDiff = [];
	Net_Champion_ScoresTable_RankDiffUpdate = Now;
}

Void ComputeRankDiff() {
	declare netwrite Integer[Text] Net_Champion_ScoresTable_RankDiff for Teams[0];
	declare netwrite Integer Net_Champion_ScoresTable_RankDiffUpdate for Teams[0];
	Net_Champion_ScoresTable_RankDiff = [];
	foreach (Key => Score in Scores) {
		declare Integer ChampionScoresTable_Key for Score;
		Net_Champion_ScoresTable_RankDiff[Score.User.Login] = ChampionScoresTable_Key - Key;
	}
	Net_Champion_ScoresTable_RankDiffUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the number of hearts
 *
 *	@param	_Hearts										The number of hearts of each player
 */
Void SetHearts(Integer[Text] _Hearts) {
	declare netwrite Integer[Text] Net_Champion_ScoresTable_Hearts for Teams[0];
	declare netwrite Integer Net_Champion_ScoresTable_HeartsUpdate for Teams[0];
	Net_Champion_ScoresTable_Hearts = _Hearts;
	Net_Champion_ScoresTable_HeartsUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Switch the scores table to the given tab
 *
 *	@param	_Tab											The tab to display
 */
Void SetTab(Integer _Tab) {
	declare netwrite Integer Net_Champion_ScoresTable_Tab for Teams[0];
	declare netwrite Integer Net_Champion_ScoresTable_TabUpdate for Teams[0];
	Net_Champion_ScoresTable_Tab = _Tab;
	Net_Champion_ScoresTable_TabUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the points limit used to
 *	displayed finalist and winner status
 *	Cup mode
 */
Void SetPointsLimit(Integer _PointsLimit) {
	declare netwrite Integer Net_Champion_ScoresTable_PointsLimit for Teams[0];
	Net_Champion_ScoresTable_PointsLimit = _PointsLimit;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;

	declare netwrite Boolean Net_Champion_ScoresTable_IsVisible for _Player;
	Net_Champion_ScoresTable_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	UpdateScoresTableFooter(False);
	SetSequence(C_Sequence_Race);
	ResetAllRacePoints();
	ResetAllLostPoints();
	ResetRankDiff();
	SetHearts([]);
	SetTab(C_Tab_StepRanking);
	SetPointsLimit(-1);
	SetLeagueRankingVisibility(False);
	SetBestLapPlayer("", 0);

	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}