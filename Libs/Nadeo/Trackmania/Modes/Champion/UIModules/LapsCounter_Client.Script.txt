/**
 *  UI module: LapsCounter client side
 */
#Const Version		"1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/Champion/UIModules/LapsCounter_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/PlayerProfiles.Script.txt" as PlayerProfiles
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Constants
#Include "Libs/Nadeo/Trackmania/Modes/ChampionCommon/Constants.Script.txt" as LibChampion_Constants

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Champion_LapsCounter"
#Const C_Type CUILayer::EUILayerType::Normal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Pos_LapsCounter = <-128.16, 85., 5.>;

	declare Img_BestLap = Constants::C_ImageUrl_Champion_Icon_BestLap;

	declare Color_Text = "ffffff";
	declare Color_Background = "000000";
	declare Color_HihglighText = Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne);

	//L16N Displayed beside the best lap time of the race
	declare Text_BestLap = _("Best lap");
	//L16N Displayed beside the world record time
	declare Text_WorldRecord = _("World record");

	//L16N [Trackmania UI] Legend displayed near the number of laps raced and the total number of laps to race
	declare Text_Laps = TL::ToUpperCase(_("|Race|Laps"));
	//L16N In TMGL context. "%1" will be replaced by the number of the track, e.g. "Track 2" or "Track 2/6"
	declare Text_Map = _("|League|Track %1");
	//L16N In TMGL context. "%1" will be replaced by the number of the round, e.g. "Round 2" or "Round 2/6"
	declare Text_Round = _("|League|Round %1");
	//L16N Text displayed when a player improves the best lap time
	declare Text_NewBestLap = _("New best lap");
	//L16N Text displayed when a player improves the lap time world record
	declare Text_NewWorldRecord = _("New world record");

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-default" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="{{{Color_Text}}}" textsize="3" textprefix="$t$i" italicslope="0.2"/>
</stylesheet>
<frame z-index="-2" hidden="1" id="frame-global">
	<frame size="320 180" halign="center" valign="center">
		<frame pos="{{{Pos_LapsCounter.X}}} {{{Pos_LapsCounter.Y + 2}}}" z-index="{{{Pos_LapsCounter.Z}}}" id="frame-laps-counter">
			<frame pos="0 2">
				<frame id="frame-intro" pos="0 -3">
					<frame z-index="1" id="frame-content">
						<frame z-index="2" id="frame-lap-info">
							<quad pos="-24.5 -20" z-index="0" size="14.66 14.66" halign="center" valign="center" opacity="0.6" bgcolor="{{{Color_Background}}}"/>
							<frame z-index="1">
								<label id="label-laps" pos="-31.75 -21" size="10 14.66" halign="left" valign="center2" textsize="9" class="text-default" />
								<label id="label-laps-total" pos="-17.25 -19" size="5.5 12.66" halign="right" valign="center2" textsize="1.75" class="text-default" textcolor="{{{Color_HihglighText}}}"/>
							</frame>
						</frame>
						<frame z-index="1" id="frame-map-info">
							<frame z-index="0">
								<quad pos="-1.86 -4." z-index="-2" size="60 14.66" halign="center" valign="center" opacity="0.6" bgcolor="{{{Color_Background}}}"/>
								<quad id="quad-multilap" pos="20.5 -4." z-index="-1" size="11 11" halign="center" valign="center" image="{{{Icons::C_Icon_256x256_Mode_Multi_Lap}}}" colorize="ddd"/>
							</frame>
							<frame z-index="1" id="frame-labels">
								<label id="label-map-name" pos="-30 -1." size="35 6.8" halign="left" valign="center2" textsize="3" class="text-default" />
								<label id="label-map-count" pos="26.25 -1." size="21.25 6.8" halign="right" valign="center2" textsize="3" class="text-default" textcolor="{{{Color_HihglighText}}}" />

								<label id="label-phase" pos="-30. -7.75" size="35 6.8" halign="left" valign="center2" textsize="3" class="text-default" />
								<label id="label-chrono" pos="26.25 -7.75" size="20 6.8" halign="right" valign="center2" textsize="2.75" class="text-default" />
							</frame>
						</frame>
						<frame size="45.12 15" pos="-17.12 -12.5">
							<frame pos="17.12 12.5">
								<frame z-index="0" id="frame-best-lap-info">
									<frame id="frame-best-lap-current" z-index="1">
										<frame z-index="0">
											<quad pos="6.12 -20" z-index="-2" size="44 14.66" halign="center" valign="center" opacity="0.6" bgcolor="{{{Color_Background}}}"/>
											<quad pos="23 -17.5" z-index="-1" size="8 8" halign="center" valign="center" image="{{{Img_BestLap}}}" colorize="{{{Color_HihglighText}}}"/>
										</frame>
										<frame z-index="1">
											<label id="label-time-legend" pos="-14.12 -18" size="42 10" halign="left" valign="center2" textsize="1.25" class="text-default" text="{{{Text_BestLap}}}"/>
											<label id="label-best-lap-current-player" pos="-14.33 -23.25" size="25 6" halign="left" valign="center2" textsize="1.25" class="text-default"/>
											<label id="label-best-lap-current-time" pos="25.75 -23.25" size="15 6" halign="right" valign="center2" textsize="1.5" class="text-default"/>
										</frame>
									</frame>
									<frame id="frame-best-lap-new" pos="44 0" z-index="2" hidden="1">
										<quad id="quad-best-lap-new-bg" pos="6.12 -20" z-index="0" size="44 14.66" halign="center" valign="center" opacity="0.6" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}"/>
										<label id="label-new-time-legend" pos="6.12 -18" z-index="1" size="42 10" halign="center" valign="center2" textsize="2" class="text-default" text="{{{Text_NewBestLap}}}"/>
										<label id="label-best-lap-new-name" pos="6.12 -23.25" z-index="1" size="42 6" halign="center" valign="center2" textsize="1.25" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}" class="text-default"/>
									</frame>
								</frame>
							</frame>
						</frame>
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/AudioManager_ML.Script.txt" as AudioManager
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/Helpers_Client.Script.txt" as RaceHelpers

#Struct K_BestLapControls {
	CMlFrame Frame_BestLapCurrent;
	CMlLabel Label_BestLapCurrentPlayer;
	CMlLabel Label_BestLapCurrentTime;
	CMlFrame Frame_BestLapNew;
	CMlQuad Quad_BestLapNewBg;
	CMlLabel Label_BestLapNewPlayer;
	CMlLabel Label_TimeLegend;
	CMlLabel Label_NewTimeLegend;
}

#Struct K_BestLapAnim {
	Boolean Active;
	Integer UpdateNameTime;
	Integer AnimEndTime;
	Text Name;
	Integer Time;
}

#Const C_Phase_Names {{{dump(LibChampion_Constants::C_Phase_Names)}}}
#Const C_Phase_Null {{{dump(LibChampion_Constants::C_Phase_Null)}}}

#Const C_BestLapAnimDuration 2500
#Const C_BestLapSound "BestLap"
""",
"""
declare CMlFrame G_Frame_Content;
declare CMlLabel Label_Chrono;

Void HideDuringIntro(CMlFrame _Frame) {
	if (_Frame == Null) return;

	declare IsIntro = (
		UI.UISequence == CUIConfig::EUISequence::Intro ||
		UI.UISequence == CUIConfig::EUISequence::RollingBackgroundIntro ||
		UI.UISequence == CUIConfig::EUISequence::Outro
	);

	if (_Frame.Visible && IsIntro) {
		_Frame.Visible = False;
	} else if (!_Frame.Visible && !IsIntro) {
		_Frame.Visible = True;
	}
}

Void UpdateLaps(CMlLabel _Label_Laps, CMlLabel _Label_LapsTotal, Integer _Current, Integer _Total) {
	declare Current = ML::Max(1, _Current);
	declare Total = ML::Max(1, _Total);
	_Label_Laps.Value = ""^Current;
	_Label_LapsTotal.Value = "/"^Total;

	// Compute size
	Tools::FitLabelValue(_Label_Laps, 9., 5., 0.5);
	Tools::FitLabelValue(_Label_LapsTotal, _Label_Laps.TextSizeReal * 0.5, 2., 0.5);
	if (Current < 10) _Label_LapsTotal.RelativePosition_V3.X = -18.;
	else _Label_LapsTotal.RelativePosition_V3.X = -17.25;

}

Void UpdateMap(
	CMlLabel _Label_Phase,
	CMlLabel _Label_MapCount,
	CMlLabel _Label_Map,
	CMap _Map,
	Integer _Phase,
	Integer _MapCurrent,
	Integer _MapTotal,
	Boolean _IsRoundMode,
	Boolean _ClashTimeIsActive
) {
	if (_ClashTimeIsActive) {
		_Label_Phase.Value = "Clash Time"; //< Do not translate
	} else if (_Phase == C_Phase_Null) {
		_Label_Phase.Value = "";
	} else {
		//L16N In Champion mode, a phase is a part of the match including one or more rounds. For example "Phase 1". %1 will be replaced by the phase number.
		declare PhaseName = TL::Compose(_("Phase %1"), ""^(_Phase + 1));
		if (C_Phase_Names.existskey(_Phase)) {
			PhaseName = C_Phase_Names[_Phase];
		}
		_Label_Phase.Value = PhaseName;
		Tools::FitLabelValue(_Label_Phase, 3., 1., 0.25);
	}

	if (_MapTotal > 0) {
		if (_IsRoundMode) _Label_MapCount.Value = TL::ToUpperCase(TL::Compose("{{{Text_Round}}}", _MapCurrent^"/"^_MapTotal));
		else _Label_MapCount.Value = TL::ToUpperCase(TL::Compose("{{{Text_Map}}}", _MapCurrent^"/"^_MapTotal));
		Tools::FitLabelValue(_Label_MapCount, 2.75, 1., 0.25);
	} else {
		_Label_MapCount.Value = "";
	}

	if (_Map != Null) {
		_Label_Map.Value = TL::ToUpperCase("$<"^_Map.MapName^"$>");
	} else {
		_Label_Map.Value = TL::ToUpperCase(TL::Compose("{{{Text_Map}}}",""^_MapCurrent));
	}
	Tools::FitLabelValue(_Label_Map, 3., 1., 0.25);
}

Void SetVisibility(Boolean _IsVisible) {
	declare CMlFrame Frame_MapInfo <=> (G_Frame_Content.GetFirstChild("frame-map-info") as CMlFrame);
	declare CMlFrame Frame_LapInfo <=> (G_Frame_Content.GetFirstChild("frame-lap-info") as CMlFrame);
	declare CMlFrame Frame_BestLapInfo <=> (G_Frame_Content.GetFirstChild("frame-best-lap-info") as CMlFrame);
	declare CMlFrame Frame_MapInfoLabels <=> (Frame_MapInfo.GetFirstChild("frame-labels") as CMlFrame);
	declare CMlQuad Quad_MapInfoLabels <=> (Frame_MapInfo.GetFirstChild("quad-multilap") as CMlQuad);

	AnimMgr.Flush(Frame_MapInfo);
	AnimMgr.Flush(Frame_LapInfo);
	AnimMgr.Flush(Frame_BestLapInfo);
	AnimMgr.Flush(Frame_MapInfoLabels);
	AnimMgr.Flush(Quad_MapInfoLabels);
	if (_IsVisible) {
		AnimMgr.Add(Frame_MapInfo, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Frame_LapInfo, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Frame_BestLapInfo, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Frame_MapInfoLabels, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_MapInfoLabels, "<frame opacity=\"0\" />", 100, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(Frame_MapInfo, "<frame pos=\"-45.25 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Frame_LapInfo, "<frame pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Frame_BestLapInfo, "<frame pos=\"-45.25 0\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Frame_MapInfoLabels, "<frame pos=\"-20 0\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_MapInfoLabels, "<frame opacity=\"1\" />", 100, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

K_BestLapAnim SetBestLap(
	K_BestLapControls _BestLapControls,
	Text _WebServicesUserId,
	Integer _Time,
	Boolean _IsWorldRecord,
	Boolean _IsInit,
	Boolean _PlaySound
) {
	declare K_BestLapAnim BestLapAnim = K_BestLapAnim {
		Active = False,
		UpdateNameTime = -1,
		AnimEndTime = -1,
		Name = "",
		Time = -1
	};

	if (_IsWorldRecord) {
		_BestLapControls.Label_TimeLegend.Value = "{{{Text_WorldRecord}}}";
		_BestLapControls.Label_NewTimeLegend.Value = "{{{Text_NewWorldRecord}}}";
	} else {
		_BestLapControls.Label_TimeLegend.Value = "{{{Text_BestLap}}}";
		_BestLapControls.Label_NewTimeLegend.Value = "{{{Text_NewBestLap}}}";
	}

	AnimMgr.Flush(_BestLapControls.Frame_BestLapCurrent);
	AnimMgr.Flush(_BestLapControls.Frame_BestLapNew);
	_BestLapControls.Frame_BestLapCurrent.RelativePosition_V3.X = 0.;
	_BestLapControls.Frame_BestLapNew.RelativePosition_V3.X = 44.;
	_BestLapControls.Frame_BestLapCurrent.Visible = True;
	_BestLapControls.Frame_BestLapNew.Visible = False;

	if (_WebServicesUserId == "" || _Time <= 0) {
		_BestLapControls.Label_BestLapCurrentPlayer.Value = "-";
		_BestLapControls.Label_BestLapCurrentTime.Value = "--:--.---";
	} else {
		declare Text Nickname = _WebServicesUserId;
		if ({{{PlayerProfiles::P}}}GetPlayerProfiles().existskey(_WebServicesUserId)) {
			Nickname = {{{PlayerProfiles::P}}}GetPlayerProfiles()[_WebServicesUserId].Nickname;
		} else {
			foreach (Score in Scores) {
				if (Score.User.WebServicesUserId == _WebServicesUserId) {
					Nickname = Score.User.Name;
					break;
				}
			}
		}
		if (_IsInit) {
			_BestLapControls.Label_BestLapCurrentPlayer.Value = Nickname;
			_BestLapControls.Label_BestLapCurrentTime.Value = TL::TimeToText(_Time, True, True);
		} else {
			_BestLapControls.Label_BestLapNewPlayer.Value = Nickname;
			BestLapAnim = K_BestLapAnim {
				Active = True,
				UpdateNameTime = Now + 250,
				AnimEndTime = Now + C_BestLapAnimDuration,
				Name = Nickname,
				Time = _Time
			};
			AnimMgr.Add(_BestLapControls.Frame_BestLapCurrent, "<frame pos=\"-44 0\" hidden=\"1\" />", Now, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_BestLapControls.Frame_BestLapNew, "<frame pos=\"0 0\" hidden=\"0\" />", Now, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_BestLapControls.Frame_BestLapCurrent, "<frame pos=\"44 0\" hidden=\"1\" />", Now + 251, 1, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_BestLapControls.Frame_BestLapCurrent, "<frame pos=\"0 0\" hidden=\"0\" />", Now + C_BestLapAnimDuration - 250, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_BestLapControls.Frame_BestLapNew, "<frame pos=\"-44 0\" hidden=\"1\" />", Now + C_BestLapAnimDuration - 250, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			if (_PlaySound) {
				AudioManager::StopSound(This, C_BestLapSound);
				AudioManager::PlaySound(This, C_BestLapSound);
			}
		}
	}

	return BestLapAnim;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Intro;
declare CMlFrame Frame_LapsCounter;
declare CMlLabel Label_Laps;
declare CMlLabel Label_LapsTotal;
declare CMlLabel Label_Phase;
declare CMlLabel Label_MapCount;
declare CMlLabel Label_Map;
declare K_BestLapControls BestLapControls;

declare netread Integer Net_ShareChampion_Phase for Teams[0];
declare netread Integer Net_ShareChampion_RoundsNb for Teams[0];
declare netread Integer Net_ShareChampion_RoundsTotal for Teams[0];
declare netread Boolean Net_ShareChampion_WarmUpIsActive for Teams[0];
declare netread Boolean Net_ShareChampion_ClashTimeIsActive for Teams[0];
declare netread Integer Net_Champion_LapsCounter_BestLapUpdate for Teams[0];
declare netread Text Net_Champion_LapsCounter_BestLapPlayer for Teams[0];
declare netread Integer Net_Champion_LapsCounter_BestLapTime for Teams[0];
declare netread Boolean Net_Champion_LapsCounter_IsRoundMode for Teams[0];
declare netread Boolean Net_Champion_LapsCounter_IsWorldRecord for Teams[0];
declare netread Boolean Net_Champion_LapsCounter_IsInit for Teams[0];
declare Boolean Champion_LiveRankingMapInfo_Visibility for UI;
declare Boolean Champion_PausePopUp_IsVisible for UI = False;

declare Boolean DisplayModule;
declare Boolean DisplayContent;
declare Integer PrevCurrentLap ;
declare Integer PrevNbLaps;
declare Integer CurrentLap;
declare CSmPlayer::ESpawnStatus PrevSpawnStatus;
declare CUIConfig::EUIStatus PrevUIStatus;
declare Integer Phase;
declare Integer MapCurrent;
declare Integer MapTotal;
declare Text CurMapUid;
declare Integer BestLapUpdate;
declare Text BestLapPlayer;
declare Integer BestLapTime;
declare Boolean IsVisible;
declare Integer LapNumberUpdateTime;
declare Boolean IsRoundMode;
declare K_BestLapAnim BestLapAnim;
declare Boolean ClashTimeIsActive;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Intro <=> (Frame_Global.GetFirstChild("frame-intro") as CMlFrame);
G_Frame_Content <=> (Frame_Global.GetFirstChild("frame-content") as CMlFrame);
Frame_LapsCounter <=> (Frame_Global.GetFirstChild("frame-laps-counter") as CMlFrame);
Label_Laps <=> (G_Frame_Content.GetFirstChild("label-laps") as CMlLabel);
Label_LapsTotal <=> (G_Frame_Content.GetFirstChild("label-laps-total") as CMlLabel);
Label_Chrono <=> (G_Frame_Content.GetFirstChild("label-chrono") as CMlLabel);
Label_Phase <=> (G_Frame_Content.GetFirstChild("label-phase") as CMlLabel);
Label_MapCount <=> (G_Frame_Content.GetFirstChild("label-map-count") as CMlLabel);
Label_Map <=> (G_Frame_Content.GetFirstChild("label-map-name") as CMlLabel);
BestLapControls.Frame_BestLapCurrent <=> (Page.GetFirstChild("frame-best-lap-current") as CMlFrame);
BestLapControls.Label_TimeLegend <=> (BestLapControls.Frame_BestLapCurrent.GetFirstChild("label-time-legend") as CMlLabel);
BestLapControls.Label_BestLapCurrentPlayer <=> (BestLapControls.Frame_BestLapCurrent.GetFirstChild("label-best-lap-current-player") as CMlLabel);
BestLapControls.Label_BestLapCurrentTime <=> (BestLapControls.Frame_BestLapCurrent.GetFirstChild("label-best-lap-current-time") as CMlLabel);
BestLapControls.Frame_BestLapNew <=> (Page.GetFirstChild("frame-best-lap-new") as CMlFrame);
BestLapControls.Quad_BestLapNewBg <=> (BestLapControls.Frame_BestLapNew.GetFirstChild("quad-best-lap-new-bg") as CMlQuad);
BestLapControls.Label_BestLapNewPlayer <=> (BestLapControls.Frame_BestLapNew.GetFirstChild("label-best-lap-new-name") as CMlLabel);
BestLapControls.Label_NewTimeLegend <=> (BestLapControls.Frame_BestLapNew.GetFirstChild("label-new-time-legend") as CMlLabel);

DisplayModule = Frame_Global.Visible;
DisplayContent = G_Frame_Content.Visible;
PrevCurrentLap = -1;
PrevNbLaps = -1;
CurrentLap = -1;
PrevSpawnStatus = CSmPlayer::ESpawnStatus::Spawning;
PrevUIStatus = CUIConfig::EUIStatus::None;
Phase = -123;
MapCurrent = -123;
MapTotal = -123;
CurMapUid = "";
BestLapUpdate = -123;
BestLapPlayer = "";
BestLapTime = -123;
LapNumberUpdateTime = Now;
IsRoundMode = False;
ClashTimeIsActive = False;

UpdateLaps(Label_Laps, Label_LapsTotal, 1, 1);

IsVisible = Champion_LiveRankingMapInfo_Visibility;
SetVisibility(IsVisible);
BestLapAnim = SetBestLap(BestLapControls, "", 0, False, False, False);
UpdateMap(Label_Phase, Label_MapCount, Label_Map, Map, Phase, MapCurrent, MapTotal, IsRoundMode, ClashTimeIsActive);
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Champion_LapsCounter_IsVisible for Owner;
		if (DisplayModule != Net_Champion_LapsCounter_IsVisible) {
			DisplayModule = Net_Champion_LapsCounter_IsVisible;
			Frame_Global.Visible = Net_Champion_LapsCounter_IsVisible;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	HideDuringIntro(Frame_Intro);

	if (Owner != Null) {
		if (Net_ShareChampion_WarmUpIsActive && IsSpectatorClient) {
			if (Frame_LapsCounter.Visible) {
				Frame_LapsCounter.Visible = False;
			}
		} else if (!Frame_LapsCounter.Visible) {
			Frame_LapsCounter.Visible = True;
		}

		if (Frame_LapsCounter.Visible) {
			if (Map != Null && CurMapUid != Map.MapInfo.MapUid) {
				CurMapUid = Map.MapInfo.MapUid;
				UpdateMap(Label_Phase, Label_MapCount, Label_Map, Map, Phase, MapCurrent, MapTotal, IsRoundMode, ClashTimeIsActive);
			} else if (Map == Null && CurMapUid != "") {
				CurMapUid = "";
				UpdateMap(Label_Phase, Label_MapCount, Label_Map, Map, Phase, MapCurrent, MapTotal, IsRoundMode, ClashTimeIsActive);
			}

			if (
				Phase != Net_ShareChampion_Phase ||
				MapCurrent != Net_ShareChampion_RoundsNb ||
				MapTotal != Net_ShareChampion_RoundsTotal ||
				IsRoundMode != Net_Champion_LapsCounter_IsRoundMode ||
				ClashTimeIsActive != Net_ShareChampion_ClashTimeIsActive
			) {
				Phase = Net_ShareChampion_Phase;
				MapCurrent = Net_ShareChampion_RoundsNb;
				MapTotal = Net_ShareChampion_RoundsTotal;
				IsRoundMode = Net_Champion_LapsCounter_IsRoundMode;
				ClashTimeIsActive = Net_ShareChampion_ClashTimeIsActive;
				UpdateMap(Label_Phase, Label_MapCount, Label_Map, Map, Phase, MapCurrent, MapTotal, IsRoundMode, ClashTimeIsActive);
			}

			if (LapNumberUpdateTime > 0 && LapNumberUpdateTime <= Now) {
				LapNumberUpdateTime = Now + 250;
				if (PrevNbLaps != RaceHelpers::GetLapsNb(Teams[0])) {
					PrevNbLaps = RaceHelpers::GetLapsNb(Teams[0]);
					UpdateLaps(Label_Laps, Label_LapsTotal, CurrentLap, PrevNbLaps);
				}

				if (GUIPlayer != Null && GUIPlayer.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) { // aka not Free nor Follow all cam mode
					if (Owner != Null && PrevCurrentLap != RaceHelpers::GetPlayerLap(Owner)) {
						PrevCurrentLap = RaceHelpers::GetPlayerLap(Owner);
						CurrentLap = RaceHelpers::GetPlayerLap(Owner);
						if (CurrentLap > RaceHelpers::GetLapsNb(Teams[0])) CurrentLap = RaceHelpers::GetLapsNb(Teams[0]);
						UpdateLaps(Label_Laps, Label_LapsTotal, CurrentLap, RaceHelpers::GetLapsNb(Teams[0]));
					}
				} else {
					declare MaxLapNb = 1;
					foreach (Player in Players) {
						if (Player != Null) {
							if (MaxLapNb < RaceHelpers::GetPlayerLap(Player)) MaxLapNb = RaceHelpers::GetPlayerLap(Player);
						}
					}
					if (PrevCurrentLap != MaxLapNb) {
						PrevCurrentLap = MaxLapNb;
						CurrentLap = MaxLapNb;
						if (CurrentLap > RaceHelpers::GetLapsNb(Teams[0])) CurrentLap = RaceHelpers::GetLapsNb(Teams[0]);
						UpdateLaps(Label_Laps, Label_LapsTotal, CurrentLap, RaceHelpers::GetLapsNb(Teams[0]));
					}
				}
			}

			if (InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
				if (!Label_Chrono.Visible) Label_Chrono.Visible = True;
			} else if (Label_Chrono.Visible) {
				Label_Chrono.Visible = False;
			}

			if (IsVisible != Champion_LiveRankingMapInfo_Visibility) {
				IsVisible = Champion_LiveRankingMapInfo_Visibility;
				SetVisibility(IsVisible);
			}

			if (Label_Chrono.Visible) {
				if (PrevSpawnStatus != Owner.SpawnStatus) {
					PrevSpawnStatus = Owner.SpawnStatus;

					if (PrevSpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
						if(Owner.StartTime >= 0) {
							Label_Chrono.Value = TL::TimeToText(GameTime - Owner.StartTime, True);
						} else {
							Label_Chrono.Value = "--:--.--";
						}
					} else if (PrevSpawnStatus == CSmPlayer::ESpawnStatus::Spawning) {
						Label_Chrono.Value = TL::TimeToText(0, True);
					}
				}

				if (PrevSpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
					RaceHelpers::UpdatePlayerChronoLabel(Teams[0], Label_Chrono, Owner);
				} if (InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
					declare RacingPlayerFound = False;
					foreach (Player in Players) {
						if (Player != Null && Player.StartTime >= 0) {
							declare ChronoTime = 0;
							if (GameTime - Player.StartTime > 0) ChronoTime = GameTime - Player.StartTime;
							Label_Chrono.Value = TL::TimeToText(ChronoTime, True);
							RacingPlayerFound = True;
							break;
						}
					}
					if (!RacingPlayerFound) {
						Label_Chrono.Value = "--:--.--";
					}
				}

				if (UI != Null && PrevUIStatus != UI.UIStatus) {
					PrevUIStatus = UI.UIStatus;
					switch (UI.UIStatus) {
						case CUIConfig::EUIStatus::Warning: {
							Label_Chrono.TextColor = <1., 0.6, 0.>;
						}
						case CUIConfig::EUIStatus::Error: {
							Label_Chrono.TextColor = <1., 0., 0.>;
						}
						case CUIConfig::EUIStatus::Official: {
							Label_Chrono.TextColor = <0., 0.6, 0.>;
						}
						default: {
							Label_Chrono.TextColor = <1., 1., 1.>;
						}
					}
				}
			}

			if (DisplayContent == Champion_PausePopUp_IsVisible) {
				DisplayContent = !Champion_PausePopUp_IsVisible;
				G_Frame_Content.Visible = DisplayContent;
			}
		}

		if (BestLapUpdate != Net_Champion_LapsCounter_BestLapUpdate) {
			BestLapUpdate = Net_Champion_LapsCounter_BestLapUpdate;
			// Play sound only if the panel is visible and the user is spectating someone
			declare Boolean PlaySound = (
				IsVisible &&
				InputPlayer != Null &&
				InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && (
					BestLapPlayer != Net_Champion_LapsCounter_BestLapPlayer ||
					BestLapTime != Net_Champion_LapsCounter_BestLapTime
				)
			);
			BestLapPlayer = Net_Champion_LapsCounter_BestLapPlayer;
			BestLapTime = Net_Champion_LapsCounter_BestLapTime;
			BestLapAnim = SetBestLap(
				BestLapControls,
				Net_Champion_LapsCounter_BestLapPlayer,
				Net_Champion_LapsCounter_BestLapTime,
				Net_Champion_LapsCounter_IsWorldRecord,
				Net_Champion_LapsCounter_IsInit,
				PlaySound
			);
		}

		if (BestLapAnim.Active) {
			BestLapControls.Quad_BestLapNewBg.Opacity = 0.8 + (ML::Sin(Now / 100.) * 0.2);

			if (BestLapAnim.UpdateNameTime >= 0 && Now >= BestLapAnim.UpdateNameTime) {
				BestLapControls.Label_BestLapCurrentPlayer.Value = BestLapAnim.Name;
				BestLapControls.Label_BestLapCurrentTime.Value = TL::TimeToText(BestLapAnim.Time, True, True);
				BestLapAnim.UpdateNameTime = -1;
			}

			if (Now >= BestLapAnim.AnimEndTime) {
				BestLapAnim.Active = False;
			}
		}
	}
}
***
""",
[
	PlayerProfiles::Component()
],
[]
	);
}