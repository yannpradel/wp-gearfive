/**
 *	UI module: LiveRanking server side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/TMWC2023/UIModules/LiveRanking_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common
#Include "Libs/Nadeo/Trackmania/Modes/TMWC2023/UIModules/LiveRanking_Common.Script.txt" as UIModules_LiveRanking_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_DefaultVisibility False

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_LiveRanking_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::K_ModuleConfig GetConfig() {
	return UIModules_LiveRanking_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Start a new race
Void ResetRace() {
	declare netwrite Integer Net_TMWC2023_LiveRanking_RankingUpdate for Teams[0] = 0;
	declare netwrite Integer Net_TMWC2023_LiveRanking_RaceIndex for Teams[0] = 0;
	declare netwrite Text[] Net_TMWC2023_LiveRanking_FinishedRacePlayers for Teams[0] = [];
	declare netwrite Text[] Net_TMWC2023_LiveRanking_BeatPersonalBests for Teams[0] = [];
	declare netwrite Text Net_TMWC2023_LiveRanking_BeatTheWorldRecord for Teams[0] = "";
	Net_TMWC2023_LiveRanking_RankingUpdate += 1;
	Net_TMWC2023_LiveRanking_RaceIndex += 1;
	Net_TMWC2023_LiveRanking_FinishedRacePlayers = [];
	Net_TMWC2023_LiveRanking_BeatPersonalBests = [];
	Net_TMWC2023_LiveRanking_BeatTheWorldRecord = "";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// A player crossed the finish line
Void PlayerFinishRace(CSmPlayer _Player) {
	if (_Player == Null || _Player.User == Null) return;

	declare netwrite Integer Net_TMWC2023_LiveRanking_RankingUpdate for Teams[0] = 0;
	declare netwrite Text[] Net_TMWC2023_LiveRanking_FinishedRacePlayers for Teams[0] = [];
	if (!Net_TMWC2023_LiveRanking_FinishedRacePlayers.exists(_Player.User.WebServicesUserId)) {
		Net_TMWC2023_LiveRanking_RankingUpdate += 1;
		Net_TMWC2023_LiveRanking_FinishedRacePlayers.add(_Player.User.WebServicesUserId);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// A player beated their Personal best
Void PlayerBeatTheirPersonalBest(Text _AccountId) {
	declare netwrite Integer Net_TMWC2023_LiveRanking_RankingUpdate for Teams[0] = 0;
	declare netwrite Text[] Net_TMWC2023_LiveRanking_BeatPersonalBests for Teams[0] = [];
	if (!Net_TMWC2023_LiveRanking_BeatPersonalBests.exists(_AccountId)) {
		Net_TMWC2023_LiveRanking_RankingUpdate += 1;
		Net_TMWC2023_LiveRanking_BeatPersonalBests.add(_AccountId);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// A player beated the world record
Void PlayerBeatTheWorldRecord(Text _AccountId) {
	declare netwrite Text Net_TMWC2023_LiveRanking_BeatTheWorldRecord for Teams[0] = "";
	declare netwrite Integer Net_TMWC2023_LiveRanking_RankingUpdate for Teams[0] = 0;
	Net_TMWC2023_LiveRanking_BeatTheWorldRecord = _AccountId;
	Net_TMWC2023_LiveRanking_RankingUpdate += 1;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Force an update of the live ranking on the client
Void ForceUpdate() {
	declare netwrite Integer Net_TMWC2023_LiveRanking_RankingUpdate for Teams[0] = 0;
	Net_TMWC2023_LiveRanking_RankingUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;

	declare netwrite Boolean Net_TMWC2023_LiveRanking_IsVisible for UI = C_DefaultVisibility;
	Net_TMWC2023_LiveRanking_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, C_DefaultVisibility);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	ResetRace();
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}