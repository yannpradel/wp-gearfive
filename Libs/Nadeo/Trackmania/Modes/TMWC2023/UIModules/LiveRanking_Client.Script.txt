/**
 *	UI module: LiveRanking client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/TMWC2023/UIModules/LiveRanking_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/Trackmania/Modes/TMWC2023/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/Modes/TMWC2023/UIModules/LiveRanking_Common.Script.txt" as UIModules_LiveRanking_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Img_Default "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWC2023/UI/"

#Const C_PlayersNb 4
#Const C_Width_LiveRanking 60.
#Const C_Height_Title 8.
#Const C_Height_Player 6.5
#Const C_Size_VisibilityClip <100., 110.>
#Const C_VisibilityAnimDuration 250

#Const C_UpdateMaxFrequency 250
#Const C_CheckpointUpdateFrequency 250
#Const C_FinishAnimDuration 200
#Const C_SpectatorFocusAnimDuration 200

#Const C_TextSize_LabelLiveRanking 4.
#Const C_TextSize_LabelPlayerCard 3.

//L16N [TrackMania World Tour - Teams] Title of the UI displaying the ranking of the ongoing race
#Const C_Text_LiveRanking "Live Ranking"
//L16N [TrackMania World Tour - Teams] Text displayed beside players that retired from the race
#Const C_Text_DNF "DNF"

#Const C_ModelId_FramemodelPlayer "framemodel-player"
#Const C_Id_FrameGlobal "frame-global"
#Const C_Id_FrameAnimVisibility "frame-anim-visibility"
#Const C_Id_QuadBgLiveRanking "quad-bg-live-ranking"
#Const C_Id_QuadBgPlayer "quad-bg-player"
#Const C_Id_QuadBgTime "quad-bg-time"
#Const C_Id_QuadBgRank "quad-bg-rank"
#Const C_Id_LabelRank "label-rank"
#Const C_Id_QuadLogo "quad-logo"
#Const C_Id_LabelName "label-name"
#Const C_Id_LabelTime "label-time"
#Const C_Id_FramePlayers "frame-players"
#Const C_Id_ButtonSpectate "button-spectate"
#Const C_Id_FrameFinish "frame-finish"
#Const C_Id_QuadFinish "quad-finish"
#Const C_Id_FrameRecord "frame-record"
#Const C_Id_QuadRecord "quad-record"
#Const C_Id_LabelRecord "label-record"
#Const C_Class_IsPlayerFrameinstance "twwc2023_is-player-frameinstance"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_LiveRanking_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_LiveRanking_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Vec2 Size_Player = <C_Width_LiveRanking * 0.72, C_Height_Player>;
	declare Vec2 Size_Rank = <C_Height_Player, C_Height_Player>;
	declare Vec2 Size_Logo = <C_Height_Player - 1., C_Height_Player - 1.>;
	declare Vec2 Size_Name = <(Size_Player.X * 0.65), C_Height_Player>;
	declare Vec2 Size_Time = <C_Width_LiveRanking * 0.28, C_Height_Player>;
	declare Vec2 Size_Finish = <C_Height_Player, C_Height_Player>;
	declare Vec2 Size_Record = <C_Height_Player, C_Height_Player>;

	declare Vec2 Pos_Rank = <Size_Rank.X * 0.5, 0.>;
	declare Vec2 Pos_Logo = <Size_Rank.X + (Size_Logo.X * 0.5) + 1., 0.>;
	declare Vec2 Pos_Name = <Pos_Logo.X + Size_Logo.X / 2. + 1., -0.2>;
	declare Vec2 Pos_Time = <C_Width_LiveRanking - 1.5, -0.2>;
	declare Vec2 Pos_Flag = <Size_Finish.X * 0.5, Size_Finish.Y * -0.5>;
	declare Vec2 Pos_Record = <Size_Record.X * 0.5, Size_Record.Y * -0.5 - 0.2>;

	declare Text ML_Players = "";
	for (I, 1, C_PlayersNb) {
		ML_Players ^= """<frameinstance modelid="{{{C_ModelId_FramemodelPlayer}}}" class="{{{C_Class_IsPlayerFrameinstance}}}"/>""";
	}

	return MV::Create(
GetId(), 3,
"""
{{{Stylesheet::Get()}}}
<framemodel id="{{{C_ModelId_FramemodelPlayer}}}">
	<frame z-index="0">
		<quad id="{{{C_Id_ButtonSpectate}}}" z-index="0" {{{MLHelpers::Size(<C_Width_LiveRanking, C_Height_Player>)}}} scriptevents="1" />
		<quad id="{{{C_Id_QuadBgRank}}}" z-index="2" {{{MLHelpers::Size(Size_Rank)}}}/>
		<quad id="{{{C_Id_QuadBgPlayer}}}" z-index="1" {{{MLHelpers::Size(Size_Player)}}} />
		<quad id="{{{C_Id_QuadBgTime}}}" class="{{{Stylesheet::C_Class_BackgroundBgColor_Accent}}}" pos="{{{Size_Player.X}}} 0" z-index="2" {{{MLHelpers::Size(Size_Time)}}}/>
	</frame>
	<frame pos="0 {{{C_Height_Player * -0.5}}}" z-index="1">
		<label id="{{{C_Id_LabelRank}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" {{{MLHelpers::Pos(<Pos_Rank.X, -0.4>)}}} {{{MLHelpers::Size(Size_Rank - <1., 0.>)}}} halign="center" valign="center2" textsize="{{{C_TextSize_LabelPlayerCard + 0.5}}}" />
		<quad id="{{{C_Id_QuadLogo}}}" {{{MLHelpers::Pos(Pos_Logo)}}} {{{MLHelpers::Size(Size_Logo - <1., 1.>)}}} halign="center" valign="center" keepratio="fit" />
		<label id="{{{C_Id_LabelName}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" {{{MLHelpers::Pos(Pos_Name)}}} {{{MLHelpers::Size(Size_Name - <1., 0.>)}}} valign="center2" textsize="{{{C_TextSize_LabelPlayerCard}}}" />
		<label id="{{{C_Id_LabelTime}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" {{{MLHelpers::Pos(Pos_Time)}}} {{{MLHelpers::Size(Size_Time - <1., 0.>)}}} halign="right" valign="center2" textsize="{{{C_TextSize_LabelPlayerCard}}}" />
	</frame>
	<frame pos="{{{C_Width_LiveRanking}}} 0" z-index="2" {{{MLHelpers::Size(Size_Finish + Size_Record)}}}>
		<frame id="{{{C_Id_FrameFinish}}}" pos="{{{-Size_Finish.X}}} 0">
			<quad id="{{{C_Id_QuadFinish}}}" z-index="1" {{{MLHelpers::Size(Size_Finish)}}} />
			<quad class="{{{Stylesheet::C_Class_BackgroundColorize_Accent}}}" {{{MLHelpers::Pos(Pos_Flag)}}} z-index="2" {{{MLHelpers::Size(Size_Finish - <2.5, 2.5>)}}} halign="center" valign="center" image="{{{C_Img_Default ^ "Flag.dds"}}}" keepratio="fit" />
		</frame>
		<frame id="{{{C_Id_FrameRecord}}}" pos="{{{-Size_Record.X}}} 0">
			<quad id="{{{C_Id_QuadRecord}}}" z-index="1" {{{MLHelpers::Size(Size_Record)}}}/>
			<label id="{{{C_Id_LabelRecord}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" z-index="2"  {{{MLHelpers::Pos(Pos_Record)}}} halign="center" valign="center2" textsize="{{{C_TextSize_LabelPlayerCard - 0.5}}} "/>
		</frame>
	</frame>
</framemodel>
<frame id="{{{C_Id_FrameGlobal}}}" z-index="{{{Shared::C_ZIndex_LiveRanking}}}">
	<frame {{{UIModules::CustomizableUIModule(UIModules_LiveRanking_Common::C_UIModuleConfig)}}} {{{MLHelpers::Size(C_Size_VisibilityClip)}}}>
		<frame id="{{{C_Id_FrameAnimVisibility}}}" pos="{{{-C_Size_VisibilityClip.X}}} 0" hidden="1">
			<frame z-index="1">
				<quad id="{{{C_Id_QuadBgLiveRanking}}}" class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="{{{C_Width_LiveRanking}}} 10" />
				<frame z-index="1">
					<label class="{{{Stylesheet::C_Class_Text_Default}}}" pos="{{{C_Width_LiveRanking * 0.5}}} -1.4" size="{{{C_Width_LiveRanking - 1.}}} {{{C_Height_Title}}}" halign="center" textsize="{{{C_TextSize_LabelLiveRanking}}}" text="{{{C_Text_LiveRanking}}}"/>
				</frame>
				<frame id="{{{C_Id_FramePlayers}}}" pos="0 {{{-C_Height_Title}}}" z-index="2">
					{{{ML_Players}}}
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Utils.Script.txt" as CommonUtils
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMGame/Modes/ScoresSort.Script.txt" as ScoresSort
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/WarmupHelpers_Client.Script.txt" as WarmupHelpers
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Teams.Script.txt" as Teams
#Include "Libs/Nadeo/Trackmania/Modes/TMWC2023/Stylesheet.Script.txt" as Stylesheet

#Struct K_Controls {
	CMlFrame Frame_AnimVisibility;
	CMlFrame Frame_Players;
	CMlFrame[] Frames_Player;
	CMlQuad Quad_BgLiveRanking;
}
#Struct K_State {
	K_Controls Controls;
	Boolean LiveRankingIsVisible;
}
#Struct K_PlayerInfo {
	Text Login;
	Text WebServicesUserId;
	Text Name;
	Boolean IsFirstPartyDisplayName;
	Integer Interval;
	Boolean Eliminated;
	Integer PrevRank;
	Integer CurRank;
	Integer Clan;
	Boolean RaceFinished;
	Boolean BeatTheirPersonalBest;
	Boolean BeatTheWorldRecord;
}

#Const C_PlayerInfo_Null K_PlayerInfo {
	Login = "",
	WebServicesUserId = "",
	Name = "",
	IsFirstPartyDisplayName = False,
	Interval = 0,
	Eliminated = True,
	PrevRank = 0,
	CurRank = 0,
	Clan = 0,
	RaceFinished = False
}

#Const C_PreviousRank -1
#Const C_NextRank 1

#Const C_Text_DNF {{{dump(C_Text_DNF)}}}

#Const C_Height_Title {{{dump(C_Height_Title)}}}
#Const C_Height_Player {{{dump(C_Height_Player)}}}
#Const C_Size_VisibilityClip {{{dump(C_Size_VisibilityClip)}}}
#Const C_Size_Finish {{{dump(Size_Finish)}}}
#Const C_Size_Record {{{dump(Size_Record)}}}
#Const C_Size_Name {{{dump(Size_Name)}}}
#Const C_VisibilityAnimDuration {{{dump(C_VisibilityAnimDuration)}}}

#Const C_TextSize_LabelLiveRanking {{{dump(C_TextSize_LabelLiveRanking)}}}
#Const C_TextSize_LabelPlayerCard {{{dump(C_TextSize_LabelPlayerCard)}}}

#Const C_UpdateMaxFrequency {{{dump(C_UpdateMaxFrequency)}}}
#Const C_CheckpointUpdateFrequency {{{dump(C_CheckpointUpdateFrequency)}}}
#Const C_FinishAnimDuration {{{dump(C_FinishAnimDuration)}}}
#Const C_SpectatorFocusAnimDuration {{{dump(C_SpectatorFocusAnimDuration)}}}

#Const C_Id_FrameGlobal {{{dump(C_Id_FrameGlobal)}}}
#Const C_Id_FrameAnimVisibility {{{dump(C_Id_FrameAnimVisibility)}}}
#Const C_Id_QuadBgLiveRanking {{{dump(C_Id_QuadBgLiveRanking)}}}
#Const C_Id_QuadBgPlayer {{{dump(C_Id_QuadBgPlayer)}}}
#Const C_Id_QuadBgTime {{{dump(C_Id_QuadBgTime)}}}
#Const C_Id_FrameFinish {{{dump(C_Id_FrameFinish)}}}
#Const C_Id_QuadFinish {{{dump(C_Id_QuadFinish)}}}
#Const C_Id_QuadBgRank {{{dump(C_Id_QuadBgRank)}}}
#Const C_Id_LabelRank {{{dump(C_Id_LabelRank)}}}
#Const C_Id_QuadLogo {{{dump(C_Id_QuadLogo)}}}
#Const C_Id_LabelName {{{dump(C_Id_LabelName)}}}
#Const C_Id_LabelTime {{{dump(C_Id_LabelTime)}}}
#Const C_Id_FramePlayers {{{dump(C_Id_FramePlayers)}}}
#Const C_Id_FrameRecord {{{dump(C_Id_FrameRecord)}}}
#Const C_Id_QuadRecord {{{dump(C_Id_QuadRecord)}}}
#Const C_Id_LabelRecord {{{dump(C_Id_LabelRecord)}}}
#Const C_Id_ButtonSpectate {{{dump(C_Id_ButtonSpectate)}}}
#Const C_Class_IsPlayerFrameinstance {{{dump(C_Class_IsPlayerFrameinstance)}}}
""",
"""
Real GetRankPosY(Integer _Rank, Integer _MaxRank) {
	return -(ML::Clamp(_Rank, 1, _MaxRank) - 1) * C_Height_Player;
}

Void ResetDelayedAnim(K_State _State) {
	foreach (Frame_Player in _State.Controls.Frames_Player) {
		declare CMlFrame Frame_Finish <=> (Frame_Player.GetFirstChild(C_Id_FrameFinish) as CMlFrame);
		AnimMgr.Flush(Frame_Finish);
		Frame_Finish.RelativePosition_V3.X = -C_Size_Finish.X;
		Frame_Finish.Visible = False;
	}
}

Void UpdatePlayerBg(K_State _State, CMlFrame _Frame_Player, K_PlayerInfo _PlayerInfo, Boolean _IsWarmUp) {
	declare CMlQuad Quad_BgRank <=> (_Frame_Player.GetFirstChild(C_Id_QuadBgRank) as CMlQuad);
	declare CMlQuad Quad_BgPlayer <=> (_Frame_Player.GetFirstChild(C_Id_QuadBgPlayer) as CMlQuad);
	declare CMlQuad Quad_BgTime <=> (_Frame_Player.GetFirstChild(C_Id_QuadBgTime) as CMlQuad);

	AnimMgr.Flush(Quad_BgPlayer);
	AnimMgr.Flush(Quad_BgTime);

	if (_PlayerInfo.Clan == 1) {
		Quad_BgPlayer.Visible = True;
		Quad_BgRank.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_BlueTeam_Secondary;
		Quad_BgPlayer.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_BlueTeam_Primary;
		Quad_BgTime.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_BlueTeam_Secondary;
	} else if (_PlayerInfo.Clan == 2) {
		Quad_BgPlayer.Visible = True;
		Quad_BgRank.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_RedTeam_Secondary;
		Quad_BgPlayer.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_RedTeam_Primary;
		Quad_BgTime.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_RedTeam_Secondary;
	} else {
		Quad_BgPlayer.Visible = False;
	}
}

Void UpdateButtonSpectateFocus(CMlQuad _Button_Spectate) {
	assert(_Button_Spectate.Parent.Parent.HasClass(C_Class_IsPlayerFrameinstance), "Wrong CMlQuad passed to this function");
	declare K_PlayerInfo TMWC2023_LiveRanking_PlayerInfo for _Button_Spectate.Parent.Parent = C_PlayerInfo_Null;
	declare CMlQuad Quad_BgPlayer <=> (_Button_Spectate.Parent.GetFirstChild(C_Id_QuadBgPlayer) as CMlQuad) ;
	AnimMgr.Flush(Quad_BgPlayer);
	declare Text Color;
	if (_Button_Spectate.IsFocused) {
		if (TMWC2023_LiveRanking_PlayerInfo.Clan == 1) Color = Stylesheet::C_Color_TMWC2023_BlueTeam_Secondary;
		else if (TMWC2023_LiveRanking_PlayerInfo.Clan == 2) Color = Stylesheet::C_Color_TMWC2023_RedTeam_Secondary;
	} else {
		if (TMWC2023_LiveRanking_PlayerInfo.Clan == 1) Color = Stylesheet::C_Color_TMWC2023_BlueTeam_Primary;
		else if (TMWC2023_LiveRanking_PlayerInfo.Clan == 2) Color = Stylesheet::C_Color_TMWC2023_RedTeam_Primary;
	}
	AnimMgr.Add(Quad_BgPlayer, "<quad bgcolor=\""^Color^"\" />", C_SpectatorFocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
}

Void UpdatePlayer(
	K_State _State,
	CMlFrame _Frame_Player,
	K_PlayerInfo _PlayerInfo,
	Teams::K_Team[Integer] _TeamsInfo,
	Teams::K_Player[Text] _PlayersInfo,
	Boolean _IsNewRace,
	Boolean _IsWarmUp,
	Boolean _IsPause
) {
	declare CMlLabel Label_Rank <=> (_Frame_Player.GetFirstChild(C_Id_LabelRank) as CMlLabel);
	declare CMlQuad Quad_Logo <=> (_Frame_Player.GetFirstChild(C_Id_QuadLogo) as CMlQuad);
	declare CMlLabel Label_Name <=> (_Frame_Player.GetFirstChild(C_Id_LabelName) as CMlLabel);
	declare CMlLabel Label_Time <=> (_Frame_Player.GetFirstChild(C_Id_LabelTime) as CMlLabel);
	declare CMlFrame Frame_Finish <=> (_Frame_Player.GetFirstChild(C_Id_FrameFinish) as CMlFrame);
	declare CMlQuad Quad_Finish <=> (Frame_Finish.GetFirstChild(C_Id_QuadFinish) as CMlQuad);
	declare CMlFrame Frame_Record <=> (_Frame_Player.GetFirstChild(C_Id_FrameRecord) as CMlFrame);
	declare CMlQuad Quad_Record <=> (Frame_Record.GetFirstChild(C_Id_QuadRecord) as CMlQuad);
	declare CMlLabel Label_Record <=> (Frame_Record.GetFirstChild(C_Id_LabelRecord) as CMlLabel);
	declare CMlQuad Button_Spectate <=> (_Frame_Player.GetFirstChild(C_Id_ButtonSpectate) as CMlQuad);

	declare K_PlayerInfo TMWC2023_LiveRanking_PlayerInfo for _Frame_Player = C_PlayerInfo_Null;
	declare Text TMWC2023_LiveRanking_PlayerLogin for Button_Spectate = "";
	TMWC2023_LiveRanking_PlayerInfo = _PlayerInfo;
	TMWC2023_LiveRanking_PlayerLogin = _PlayerInfo.Login;

	UpdatePlayerBg(_State, _Frame_Player, _PlayerInfo, _IsWarmUp);
	UpdateButtonSpectateFocus(Button_Spectate);

	Label_Rank.Value = ""^_PlayerInfo.CurRank;
	Label_Name.Value = Teams::GetPlayerName(_PlayersInfo, _PlayerInfo.WebServicesUserId, _PlayerInfo.Name, _PlayerInfo.IsFirstPartyDisplayName);
	Tools::FitLabelValue(Label_Name, C_TextSize_LabelPlayerCard, 1.5, 0.1);
	Tools::FirstPartyLogoMatchLuminance(Label_Name);

	if (_IsWarmUp || _IsPause) {
		Label_Time.Visible = False;
	} else {
		if (_PlayerInfo.Eliminated) {
			Label_Time.Value = C_Text_DNF;
		} else if (_PlayerInfo.CurRank == 1) {
			Label_Time.Value = Shared::GetShortTime(_PlayerInfo.Interval, True);
		} else if (_PlayerInfo.CurRank > 1) {
			Label_Time.Value = "+"^Shared::GetShortTime(_PlayerInfo.Interval, False);
		} else {
			Label_Time.Value = "";
		}
		Tools::FitLabelValue(Label_Time, C_TextSize_LabelPlayerCard, 1.5, 0.1);
		Label_Time.Visible = True;
	}

	declare Text ClanLogo = Teams::GetClanLogoUrl(This, _TeamsInfo, _PlayerInfo.Clan);
	if (ClanLogo != "" && Http.IsValidUrl(ClanLogo)) {
		Quad_Logo.ImageUrl = ClanLogo;
		Quad_Logo.ModulateColor = Stylesheet::C_Color_Vec3_TMWC2023_Accent;
	} else {
		Quad_Logo.ImageUrl = "file://ZoneFlags/Login/"^_PlayerInfo.Login^"/country";
		Quad_Logo.ModulateColor = <1., 1., 1.>;
	}

	// Update and animate rank changes
	if (_IsNewRace) {
		AnimMgr.Flush(_Frame_Player);
		AnimMgr.Flush(Frame_Finish);
		AnimMgr.Flush(Frame_Record);
		_Frame_Player.RelativePosition_V3.Y = GetRankPosY(_PlayerInfo.CurRank, _State.Controls.Frames_Player.count);
		Frame_Finish.RelativePosition_V3.X = -C_Size_Finish.X;
		Frame_Finish.Visible = False;
		Frame_Record.RelativePosition_V3.X = -C_Size_Record.X;
		Frame_Record.Visible = False;
	} else {
		declare Boolean RankChanged = (_PlayerInfo.PrevRank > 0 && _PlayerInfo.PrevRank != _PlayerInfo.CurRank);

		// Update player position in the ranking
		if (RankChanged) {
			_Frame_Player.RelativePosition_V3.Y = GetRankPosY(_PlayerInfo.PrevRank, _State.Controls.Frames_Player.count);
			declare Real NewRankPosY = GetRankPosY(_PlayerInfo.CurRank, _State.Controls.Frames_Player.count);
			AnimMgr.Flush(_Frame_Player);
			AnimMgr.Add(_Frame_Player, "<frame pos=\"0 "^NewRankPosY^"\" />", C_FinishAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Flush(_Frame_Player);
			_Frame_Player.RelativePosition_V3.Y = GetRankPosY(_PlayerInfo.CurRank, _State.Controls.Frames_Player.count);
		}

		if (_PlayerInfo.RaceFinished) {
			if (_PlayerInfo.Clan == 1) {
				Quad_Finish.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_BlueTeam_Primary;
				Quad_Record.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_BlueTeam_Secondary;
			} else if (_PlayerInfo.Clan == 2) {
				Quad_Finish.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_RedTeam_Primary;
				Quad_Record.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_RedTeam_Secondary;
			} else {
				Quad_Finish.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_Accent;
				Quad_Record.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_Accent;
			}
			AnimMgr.Flush(Frame_Finish);
			AnimMgr.Flush(Frame_Record);
			AnimMgr.Add(Frame_Finish, "<quad pos=\"0 "^Frame_Finish.RelativePosition_V3.Y^"\" hidden=\"0\" />", C_FinishAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			if (_PlayerInfo.BeatTheWorldRecord) {
				Label_Record.Value = Shared::C_Text_WR;
				AnimMgr.Add(Frame_Record, "<quad pos=\"" ^ C_Size_Record.X ^ " "^Frame_Record.RelativePosition_V3.Y^"\" hidden=\"0\" />", C_FinishAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			} else if (_PlayerInfo.BeatTheirPersonalBest) {
				Label_Record.Value = Shared::C_Text_PB;
				AnimMgr.Add(Frame_Record, "<quad pos=\"" ^ C_Size_Record.X ^ " "^Frame_Record.RelativePosition_V3.Y^"\" hidden=\"0\" />", C_FinishAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				AnimMgr.Add(Frame_Record, "<quad pos=\"" ^ -C_Size_Record.X ^ " "^Frame_Record.RelativePosition_V3.Y^"\" hidden=\"0\" />", C_FinishAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		} else if (RankChanged) {
			AnimMgr.Flush(Frame_Finish);
			AnimMgr.Flush(Frame_Record);
			AnimMgr.Add(Frame_Finish, "<quad pos=\""^-C_Size_Finish.X^" "^Frame_Finish.RelativePosition_V3.Y^"\" hidden=\"1\" />", C_FinishAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(Frame_Record, "<quad pos=\""^-C_Size_Record.X^" "^Frame_Record.RelativePosition_V3.Y^"\" hidden=\"1\" />", C_FinishAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Flush(Frame_Finish);
			AnimMgr.Add(Frame_Finish, "<quad pos=\""^-C_Size_Finish.X^" "^Frame_Finish.RelativePosition_V3.Y^"\" hidden=\"1\" />", C_FinishAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(Frame_Record, "<quad pos=\""^-C_Size_Record.X^" "^Frame_Record.RelativePosition_V3.Y^"\" hidden=\"1\" />", C_FinishAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);

		}
	}
}

Void UpdateRanking(
	K_State _State,
	Boolean _IsNewRace,
	Boolean _IsWarmUp,
	Boolean _IsPause,
	Text[] _RaceFinished,
	Text[] _BeatPersonalBests,
	Text _BeatTheWorldRecord
) {
	declare Ident[Ident] ScoreIdToPlayerId;
	foreach (Player in Players) {
		if (Player.Score != Null) {
			ScoreIdToPlayerId[Player.Score.Id] = Player.Id;

			// Check if the player is still spawned
			declare Integer TMWC2023_LiveRanking_LastUpdate for Player.Score = -1;
			if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned && Player.StartTime > 0) {
				TMWC2023_LiveRanking_LastUpdate = Now;
			}

			// On the client, the `Players` array contains the players and the spectators
			declare Boolean TMWC2023_LiveRanking_IsSpectator for Player.Score = False;
			TMWC2023_LiveRanking_IsSpectator = Player.RequestsSpectate;

			// Reset the player's rank
			declare Integer TMWC2023_LiveRanking_Rank for Player = -1;
			TMWC2023_LiveRanking_Rank = -1;
		}
	}
	foreach (Score in Scores) {
		Shared::SetLiveRank(Score, Scores.count);
	}

	// Sort the players by race progression
	declare Integer[][Ident] ScoreIdsToSortByWaypointTimes;
	declare Integer LatestCheckpointTime = 0;
	foreach (Player in Players) {
		if (Player.Score != Null && Player.User != Null) {
			declare Boolean TMWC2023_LiveRanking_IsSpectator for Player.Score = False;
			if (!TMWC2023_LiveRanking_IsSpectator) {
				if (_IsWarmUp || _IsPause) {
					ScoreIdsToSortByWaypointTimes[Player.Score.Id] = [];
				} else {
					ScoreIdsToSortByWaypointTimes[Player.Score.Id] = CommonUtils::ToScriptArray(Player.RaceWaypointTimes);
				}
				declare Integer TMWC2023_LiveRanking_CheckpointKey for Player.Score;
				declare Integer TMWC2023_LiveRanking_CheckpointTime for Player.Score;
				TMWC2023_LiveRanking_CheckpointKey = Player.RaceWaypointTimes.count;
				if (Player.RaceWaypointTimes.count > 0) {
					TMWC2023_LiveRanking_CheckpointTime = Player.RaceWaypointTimes[Player.RaceWaypointTimes.count - 1];
					if (TMWC2023_LiveRanking_CheckpointTime > LatestCheckpointTime) {
						LatestCheckpointTime = TMWC2023_LiveRanking_CheckpointTime;
					}
				} else {
					TMWC2023_LiveRanking_CheckpointTime = -1;
				}
			}
		}
	}

	// Create the race ranking
	declare K_PlayerInfo[] Ranking;
	declare Integer Rank = 1;
	declare Boolean IsLeader = True;
	declare Ident LeaderId = NullId;
	declare Integer MinTimeDiff = 0;
	declare Integer RankingPlayersNbMax = _State.Controls.Frames_Player.count;
	declare Ident[][Integer] ScoreIdsSortedByWaypointTimes = ScoresSort::SortIdsByWaypointTimes(ScoreIdsToSortByWaypointTimes);
	declare Boolean HasGap = False;
	foreach (WaypointTimesScoreIds in ScoreIdsSortedByWaypointTimes) {
		foreach (ScoreId in WaypointTimesScoreIds) {
			declare CSmScore Score <=> Scores[ScoreId];
			declare Integer TMWC2023_LiveRanking_CheckpointKey for Score = 0;
			declare Integer TMWC2023_LiveRanking_CheckpointTime for Score = -1;
			declare Integer TMWC2023_LiveRanking_LastUpdate for Score = -1;
			declare Integer TMWC2023_LiveRanking_PrevRank for Score = 0;
			declare Integer TimeDiff = 0;

			if (!_IsWarmUp && !_IsPause) {
				// Save the checkpoint times of the leader
				if (IsLeader) {
					LeaderId = ScoreId;
					MinTimeDiff = 0;
					if (TMWC2023_LiveRanking_CheckpointTime >= 0) {
						TimeDiff = TMWC2023_LiveRanking_CheckpointTime;
					}
				}
				// Compute the time diff with the leader
				else {
					if (
						LeaderId != NullId &&
						ScoreIdToPlayerId.existskey(LeaderId) &&
						Players.existskey(ScoreIdToPlayerId[LeaderId]) &&
						Players[ScoreIdToPlayerId[LeaderId]].RaceWaypointTimes.existskey(TMWC2023_LiveRanking_CheckpointKey - 1)
					) {
						declare CSmPlayer LeaderPlayer <=> Players[ScoreIdToPlayerId[LeaderId]];
						declare Integer LeaderTimeAtCheckpoint = LeaderPlayer.RaceWaypointTimes[TMWC2023_LiveRanking_CheckpointKey-1];
						if (LeaderPlayer.RaceWaypointTimes.existskey(TMWC2023_LiveRanking_CheckpointKey)) {
							TimeDiff = ML::Max(TMWC2023_LiveRanking_CheckpointTime - LeaderTimeAtCheckpoint, LatestCheckpointTime - LeaderPlayer.RaceWaypointTimes[TMWC2023_LiveRanking_CheckpointKey]);
						} else {
							TimeDiff = TMWC2023_LiveRanking_CheckpointTime - LeaderTimeAtCheckpoint;
						}
					} else {
						TimeDiff = 0;
					}

					if (TimeDiff > MinTimeDiff) {
						MinTimeDiff = TimeDiff;
					} else {
						TimeDiff = MinTimeDiff;
					}
				}
			}

			// Add the player to the ranking
			declare Boolean RaceFinished = _RaceFinished.exists(Score.User.WebServicesUserId);
			declare Boolean BeatTheirPersonalBest = _BeatPersonalBests.exists(Score.User.WebServicesUserId);
			declare Boolean BeatTheWorldRecord = (Score.User.WebServicesUserId == _BeatTheWorldRecord);
			Ranking.add(K_PlayerInfo {
				Login = Score.User.Login,
				WebServicesUserId = Score.User.WebServicesUserId,
				Name = Score.User.Name,
				IsFirstPartyDisplayName = Score.User.IsFirstPartyDisplayName,
				Interval = TimeDiff,
				Eliminated = (UI.UISequence == CUIConfig::EUISequence::Playing && Now != TMWC2023_LiveRanking_LastUpdate && !RaceFinished),
				PrevRank = TMWC2023_LiveRanking_PrevRank,
				CurRank = Rank,
				Clan = Score.TeamNum,
				RaceFinished = RaceFinished,
				BeatTheirPersonalBest = BeatTheirPersonalBest,
				BeatTheWorldRecord = BeatTheWorldRecord
			});
			TMWC2023_LiveRanking_PrevRank = Rank;
			Shared::SetLiveRank(Score, Rank);

			Rank += 1;
			IsLeader = False;

			// Stop adding players to the ranking once we cannot display them
			if (Ranking.count >= RankingPlayersNbMax) break;
		}
		if (Ranking.count >= RankingPlayersNbMax) break;
	}
	Shared::SignalLiveRankingUpdate(This);

	// The ranking must be updated even if the live ranking UI is not visible
	// because other UI rely on this ranking. However we do not need to update
	// the visual of the live ranking UI if it is not visible.
	if (_State.LiveRankingIsVisible) {
		// Update background size
		declare Real BgSizeY = ML::Abs(_State.Controls.Frame_Players.RelativePosition_V3.Y) + (Ranking.count * C_Height_Player);
		AnimMgr.Flush(_State.Controls.Quad_BgLiveRanking);
		AnimMgr.Add(_State.Controls.Quad_BgLiveRanking, "<quad size=\""^_State.Controls.Quad_BgLiveRanking.Size.X^" "^BgSizeY^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);

		// Update players list
		declare Teams::K_Team[Integer] TeamsInfo = Teams::GetTeamsInfo(This);
		declare Teams::K_Player[Text] PlayersInfo = Teams::GetPlayersInfo(This);
		foreach (Key => Frame_Player in _State.Controls.Frames_Player) {
			if (Ranking.existskey(Key)) {
				UpdatePlayer(_State, Frame_Player, Ranking[Key], TeamsInfo, PlayersInfo, _IsNewRace, _IsWarmUp, _IsPause);
				Frame_Player.Visible = True;
			} else {
				Frame_Player.Visible = False;
			}
		}
	}
}

Void SpectatePreviousOrNextRank(CSmPlayer _CurrentTarget, Integer _Direction) {
	if (_CurrentTarget == Null) return;
	declare Integer CurrentRank = 0;
	if (_CurrentTarget.Score != Null) {
		declare Integer TMWC2023_LiveRanking_PrevRank for _CurrentTarget.Score = 0;
		CurrentRank = TMWC2023_LiveRanking_PrevRank;
	}
	declare Integer NewRank = -1;
	declare Text NewTargetLogin = "";
	foreach (Player in Players) {
		if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) {
			declare Integer Rank = 0;
			if (Player.Score != Null) {
				declare Integer TMWC2023_LiveRanking_PrevRank for Player.Score = 0;
				Rank = TMWC2023_LiveRanking_PrevRank;
			}
			if (Rank > 0) {
				if (
					(
						_Direction == C_PreviousRank &&
						Rank < CurrentRank &&
						(NewRank == -1 || Rank > NewRank)
					) || (
						_Direction == C_NextRank &&
						Rank > CurrentRank &&
						(NewRank == -1 || Rank < NewRank)
					)
				) {
					NewRank = Rank;
					NewTargetLogin = Player.User.Login;
				}
			}
		}
	}

	if (NewTargetLogin != "") {
		Shared::SpectateLogin(This, NewTargetLogin);
	}
}
Void SpectatePreviousRank(CSmPlayer _CurrentTarget) {
	SpectatePreviousOrNextRank(_CurrentTarget, C_PreviousRank);
}
Void SpectateNextRank(CSmPlayer _CurrentTarget) {
	SpectatePreviousOrNextRank(_CurrentTarget, C_NextRank);
}

K_State SetVisibility(K_State _State, Boolean _LiveRankingIsVisible) {
	declare K_State State = _State;

	if (State.LiveRankingIsVisible != _LiveRankingIsVisible) {
		State.LiveRankingIsVisible = _LiveRankingIsVisible;
		AnimMgr.Flush(State.Controls.Frame_AnimVisibility);
		if (State.LiveRankingIsVisible) {
			AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\"0 0\" hidden=\"0\" />", C_VisibilityAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\""^(-C_Size_VisibilityClip.X)^" 0\" hidden=\"1\" />", C_VisibilityAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare netread Boolean Net_TMWC2023_LiveRanking_IsVisible for UI;
declare netread Integer Net_TMWC2023_LiveRanking_RankingUpdate for Teams[0] = 0;
declare netread Integer Net_TMWC2023_LiveRanking_RaceIndex for Teams[0] = 0;
declare netread Text[] Net_TMWC2023_LiveRanking_FinishedRacePlayers for Teams[0] = [];
declare netread Text[] Net_TMWC2023_LiveRanking_BeatPersonalBests for Teams[0] = [];
declare netread Text Net_TMWC2023_LiveRanking_BeatTheWorldRecord for Teams[0] = "";

declare K_State State;
declare Boolean PrevPageIsVisible;
declare Integer NextRankingUpdate;
declare Integer NextCheckpointUpdate;
declare Integer RankingUpdate;
declare Integer RaceIndex;
declare Boolean IsNewRace;
declare Boolean IsWarmUp;
declare Boolean IsPause;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);

State.Controls.Frame_AnimVisibility <=> (Frame_Global.GetFirstChild(C_Id_FrameAnimVisibility) as CMlFrame);
State.Controls.Frame_Players <=> (Frame_Global.GetFirstChild(C_Id_FramePlayers) as CMlFrame);
State.Controls.Frames_Player = [];
foreach (Control in State.Controls.Frame_Players.Controls) {
	State.Controls.Frames_Player.add(Control as CMlFrame);
}
State.Controls.Quad_BgLiveRanking <=> (Frame_Global.GetFirstChild(C_Id_QuadBgLiveRanking) as CMlQuad);

State.Controls.Frame_Players.RelativePosition_V3.Y = -C_Height_Title;

PrevPageIsVisible = PageIsVisible;
NextRankingUpdate = Now;
NextCheckpointUpdate = Now;
RankingUpdate = -1;
RaceIndex = -1;
IsNewRace = False;
IsWarmUp = WarmupHelpers::IsWarmupActive(Teams[0]);
IsPause = Shared::GetIsPause(This);

State = SetVisibility(State, State.Controls.Frame_AnimVisibility.Visible);
***

***MainLoop***
***
if (PrevPageIsVisible != PageIsVisible) {
	PrevPageIsVisible = PageIsVisible;
	// Force an update to apply animations that were skipped while the UI was hidden
	if (PrevPageIsVisible) ResetDelayedAnim(State);
}

if (PageIsVisible) {
	if (State.LiveRankingIsVisible != Net_TMWC2023_LiveRanking_IsVisible) {
		State = SetVisibility(State, Net_TMWC2023_LiveRanking_IsVisible);
	}

	if (State.LiveRankingIsVisible) {
		if (
			RankingUpdate != Net_TMWC2023_LiveRanking_RankingUpdate ||
			IsWarmUp != WarmupHelpers::IsWarmupActive(Teams[0]) ||
			IsPause != Shared::GetIsPause(This)
		) {
			RankingUpdate = Net_TMWC2023_LiveRanking_RankingUpdate;
			IsWarmUp = WarmupHelpers::IsWarmupActive(Teams[0]);
			IsPause = Shared::GetIsPause(This);

			NextRankingUpdate = Now;
		}
	}

	if (Frame_Global.Visible) {
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::MouseClick : {
					if (Event.ControlId == C_Id_ButtonSpectate) {
						declare Text TMWC2023_LiveRanking_PlayerLogin for Event.Control = "";
						if (TMWC2023_LiveRanking_PlayerLogin != "") {
							Shared::SpectateLogin(This, TMWC2023_LiveRanking_PlayerLogin);
						}
					}
				}
				case CMlScriptEvent::Type::MouseOver: {
					if (Event.ControlId == C_Id_ButtonSpectate) {
						UpdateButtonSpectateFocus(Event.Control as CMlQuad);
					}
				}
				case CMlScriptEvent::Type::MouseOut: {
					if (Event.ControlId == C_Id_ButtonSpectate) {
						UpdateButtonSpectateFocus(Event.Control as CMlQuad);
					}
				}
				case CMlScriptEvent::Type::KeyPress: {
					// Only check keypress if player is spectator
					if (IsSpectatorClient) {
						if (Event.KeyName == "Down") {
							SpectateNextRank(GUIPlayer);
						} else if (Event.KeyName == "Up") {
							SpectatePreviousRank(GUIPlayer);
						}
					}
				}
			}
		}
	}
}

// Other UIs rely on the ranking computed by this UI
// So even if the live ranking is not visible, we have to
// continue to update the ranking

// A new race started
if (RaceIndex != Net_TMWC2023_LiveRanking_RaceIndex) {
	RaceIndex = Net_TMWC2023_LiveRanking_RaceIndex;
	IsNewRace = True;
	if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;

	// Reset the last checkpoint times tracking
	foreach (Score in Scores) {
		declare Integer TMWC2023_LiveRanking_PrevRank for Score;
		TMWC2023_LiveRanking_PrevRank = 0;
	}
	foreach (Player in Players) {
		declare Integer TMWC2023_LiveRanking_CurrentRaceLastTime for Player;
		declare Integer TMWC2023_LiveRanking_RaceStartTime for Player;
		declare CSmPlayer::ESpawnStatus TMWC2023_LiveRanking_SpawnStatus for Player;
		TMWC2023_LiveRanking_CurrentRaceLastTime = -1;
		TMWC2023_LiveRanking_RaceStartTime = -1;
		TMWC2023_LiveRanking_SpawnStatus = CSmPlayer::ESpawnStatus::NotSpawned;
	}
}

// Check if a player crossed a checkpoint or spawned/unspawned
if (NextCheckpointUpdate <= Now) {
	NextCheckpointUpdate = Now + C_CheckpointUpdateFrequency;

	foreach (Player in Players) {
		declare Integer TMWC2023_LiveRanking_CurrentRaceLastTime for Player;
		declare Integer CurrentRaceLastTime = -1;
		if (Player.RaceWaypointTimes.count > 0) CurrentRaceLastTime = Player.RaceWaypointTimes[Player.RaceWaypointTimes.count - 1];
		if (TMWC2023_LiveRanking_CurrentRaceLastTime != CurrentRaceLastTime) {
			TMWC2023_LiveRanking_CurrentRaceLastTime = CurrentRaceLastTime;
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		}

		declare Integer TMWC2023_LiveRanking_RaceStartTime for Player;
		if (TMWC2023_LiveRanking_RaceStartTime != Player.StartTime) {
			TMWC2023_LiveRanking_RaceStartTime = Player.StartTime;
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		}

		declare CSmPlayer::ESpawnStatus TMWC2023_LiveRanking_SpawnStatus for Player;
		if (TMWC2023_LiveRanking_SpawnStatus != Player.SpawnStatus) {
			TMWC2023_LiveRanking_SpawnStatus = Player.SpawnStatus;
			if (NextRankingUpdate < 0) NextRankingUpdate = Now + C_UpdateMaxFrequency;
		}
	}
}


// Update the ranking
if (NextRankingUpdate > 0 && Now >= NextRankingUpdate) {
	NextRankingUpdate = -1;
	UpdateRanking(
		State,
		IsNewRace,
		IsWarmUp,
		IsPause,
		Net_TMWC2023_LiveRanking_FinishedRacePlayers,
		Net_TMWC2023_LiveRanking_BeatPersonalBests,
		Net_TMWC2023_LiveRanking_BeatTheWorldRecord
	);
	IsNewRace = False;
}
***
""",
[
	UIModules::Component()
],
[]
	);
}