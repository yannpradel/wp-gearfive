/**
 *	UI module: Header client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/TMWC2023/UIModules/Header_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as CMGameStylesheet
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/TMWC2023/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/Trackmania/Modes/TMWC2023/UIModules/Header_Common.Script.txt" as UIModules_Header_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_MaxPointsPerRound 3
#Const C_DefaultClan1Logo "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWC2023/UI/DefaultClanLogo_1.dds"
#Const C_DefaultClan2Logo "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWC2023/UI/DefaultClanLogo_2.dds"
#Const C_TMWTLogo "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWC2023/UI/Logo.dds"

#Const C_Text_MatchPoint "Match Point"
#Const C_Text_TrackPoint "Track Point"
#Const C_Text_Overtime "Overtime"
#Const C_Text_Pause "Pause"
#Const C_Text_WarmUp "WarmUp"

#Const C_Padding_MatchInfo 10.

#Const C_AnimDuration_HeaderVisibility 250
#Const C_AnimDuration_ClanName 250
#Const C_AnimDuration_WinPoint 250
#Const C_AnimDuration_NotPlaying 250

#Const C_Pos_MatchPoints_OneLine -3.
#Const C_Pos_MatchPoints_TwoLines -4.

#Const C_Size_Background <80., 14.>
#Const C_Size_VisibilityClip <160., 40.>
#Const C_Size_ClanFlag <3., 3.>
#Const C_Size_ClanLogoBg <14., 14.>
#Const C_Size_WinPoint <41., 4.5>
#Const C_Size_Overtime <26., 4.5>
#Const C_Size_NotPlaying <108., 5.>

#Const C_SizeX_LabelClanName 20. // Name without the ClanFlag X size
#Const C_SizeY_MatchInfo 5.

#Const C_TextSize_LabelMatchInfo 2.5
#Const C_TextSize_LabelClanMapPoints 10.
#Const C_TextSize_LabelClanName 5.
#Const C_TextSize_LabelTrackPoint 2.
#Const C_TextSize_LabelNotPlaying 2.5

#Const C_Opacity_MatchPoint_On 1.
#Const C_Opacity_MatchPoint_Off 0.3

#Const C_Id_FrameGlobal "frame-global"
#Const C_Id_FrameAnimVisibility "frame-anim-visibility"
#Const C_Id_LabelClan1MapPoints "label-clan-1-map-points"
#Const C_Id_LabelClan2MapPoints "label-clan-2-map-points"

#Const C_Id_FrameMatchInfo "frame-match-info"
#Const C_Id_QuadMatchInfo "quad-match-info"
#Const C_Id_LabelMatchInfo "label-match-info"

#Const C_Id_FrameClan1Name "frame-clan-1-name"
#Const C_Id_FrameClan2Name "frame-clan-2-name"
#Const C_Id_QuadClanFlag "quad-clan-flag"
#Const C_Id_LabelClanName "label-clan-name"
#Const C_Id_FrameClan1Logo "frame-clan-1-logo"
#Const C_Id_QuadClan1Logo "quad-clan-1-logo"
#Const C_Id_FrameClan2Logo "frame-clan-2-logo"
#Const C_Id_QuadClan2Logo "quad-clan-2-logo"
#Const C_Id_FrameClan1MatchPoints "frame-clan-1-match-points"
#Const C_Id_FrameClan2MatchPoints "frame-clan-2-match-points"
#Const C_Id_FrameClan1WinPoint "frame-clan-1-win-point"
#Const C_Id_FrameClan2WinPoint "frame-clan-2-win-point"
#Const C_Id_FrameAnimClanWinPoint "frame-anim-clan-win-point"
#Const C_Id_LabelClanWinPoint "label-clan-win-point"

#Const C_Id_FrameAnimOvertime "frame-anim-overtime"

#Const C_Id_FrameAnimNotPlaying "frame-anim-not-playing"
#Const C_Id_QuadNotPlaying "quad-not-playing"
#Const C_Id_LabelNotPlaying "label-not-playing"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_Header_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_Header_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	return MV::Create(
GetId(), 3,
"""
{{{Stylesheet::Get()}}}
<frame id="{{{C_Id_FrameGlobal}}}" z-index="{{{Shared::C_ZIndex_Header}}}">
	<frame {{{UIModules::CustomizableUIModule(UIModules_Header_Common::C_UIModuleConfig)}}}>
		<frame id="{{{C_Id_FrameMatchInfo}}}">
			<quad id="{{{C_Id_QuadMatchInfo}}}" class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="0 {{{C_SizeY_MatchInfo}}}" halign="center" opacity="0.75" />
			<label id="{{{C_Id_LabelMatchInfo}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" pos="0 {{{C_SizeY_MatchInfo / -2}}}" z-index="1" size="50 4" halign="center" valign="center2" textsize="{{{C_TextSize_LabelMatchInfo}}}" />
		</frame>
		<frame pos="0 -7." size="{{{C_Size_VisibilityClip.X}}} {{{C_Size_VisibilityClip.Y}}}"  halign="center">
			<frame id="{{{C_Id_FrameAnimVisibility}}}" pos="0 {{{C_Size_VisibilityClip.Y}}}" hidden="1">
				<frame pos="0 {{{-C_Size_Background.Y / 2.}}}">
					<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Accent}}}" z-index="0" {{{MLHelpers::Size(C_Size_Background)}}} halign="center" valign="center" />
					<quad z-index="1" size="8 8" halign="center" valign="center" image="{{{C_TMWTLogo}}}"/>
					<!-- Clan 1 map points -->
					<label id="{{{C_Id_LabelClan1MapPoints}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" pos="-13 -0.5" z-index="2" size="12 12" halign="center" valign="center2" textsize="{{{C_TextSize_LabelClanMapPoints}}}" text="0" textcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}"/>

					<!-- Clan 2 map points -->
					<label id="{{{C_Id_LabelClan2MapPoints}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" pos="13 -0.5" z-index="2" size="12 12" halign="center" valign="center2" textsize="{{{C_TextSize_LabelClanMapPoints}}}" text="0" textcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}"/>

					<!-- Clan 1 name -->
					<frame id="{{{C_Id_FrameClan1Name}}}" pos="{{{C_Size_Background.X / -2 + 2.}}} 1.9">
						<quad id="{{{C_Id_QuadClanFlag}}}" z-index="3" {{{MLHelpers::Size(C_Size_ClanFlag)}}} halign="left" valign="center" keepratio="fit" />
						<label id="{{{C_Id_LabelClanName}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" z-index="3" pos="{{{C_Size_ClanFlag.X + 1.5}}} 0" size="{{{C_SizeX_LabelClanName}}} 10" halign="left" valign="center2" textsize="{{{C_TextSize_LabelClanName}}}" maxline="2" textcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}"/>
					</frame>
					<!-- Clan 2 name -->
					<frame id="{{{C_Id_FrameClan2Name}}}" pos="{{{C_Size_Background.X / 2 - 2.}}} 1.9">
						<quad id="{{{C_Id_QuadClanFlag}}}" z-index="3" {{{MLHelpers::Size(C_Size_ClanFlag)}}} halign="right" valign="center" keepratio="fit" />
						<label id="{{{C_Id_LabelClanName}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" z-index="3" pos="{{{- C_Size_ClanFlag.X - 1.5}}} 0" size="{{{C_SizeX_LabelClanName}}} 10" halign="right" valign="center2" textsize="{{{C_TextSize_LabelClanName}}}" maxline="2" textcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}"/>
					</frame>

					<!-- Clan 1 match points -->
					<frame id="{{{C_Id_FrameClan1MatchPoints}}}" pos="{{{C_Size_Background.X / -2 + 2.}}} -2.7" z-index="1">
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
					</frame>
					<!-- Clan 2 match points -->
					<frame id="{{{C_Id_FrameClan2MatchPoints}}}" pos="{{{C_Size_Background.X / 2 - 2.}}} -2.7" z-index="1">
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
						<quad size="0 1.5" bgcolor="{{{Stylesheet::C_Color_TMWC2023_Default}}}" opacity="{{{C_Opacity_MatchPoint_Off}}}"/>
					</frame>

					<!-- Clan 1 logo -->
					<frame id="{{{C_Id_FrameClan1Logo}}}" pos="{{{-C_Size_Background.X / 2 - C_Size_ClanLogoBg.X / 2}}} 0">
						<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_BlueTeam_Primary}}}" z-index="0" {{{MLHelpers::Size(C_Size_ClanLogoBg)}}}  halign="center" valign="center" />
						<quad id="{{{C_Id_QuadClan1Logo}}}" z-index="1" {{{MLHelpers::Size(C_Size_ClanLogoBg - <4., 4.>)}}}  halign="center" valign="center" keepratio="fit" image="{{{C_DefaultClan1Logo}}}"/>
					</frame>
					<!-- Clan 2 logo -->
					<frame id="{{{C_Id_FrameClan2Logo}}}" pos="{{{C_Size_Background.X / 2 + C_Size_ClanLogoBg.X / 2}}} 0">
						<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_RedTeam_Primary}}}" z-index="0" {{{MLHelpers::Size(C_Size_ClanLogoBg)}}} halign="center" valign="center" />
						<quad id="{{{C_Id_QuadClan2Logo}}}" z-index="3" {{{MLHelpers::Size(C_Size_ClanLogoBg - <4., 4.>)}}} halign="center" valign="center" keepratio="fit" image="{{{C_DefaultClan2Logo}}}"/>
					</frame>
					<frame pos="0 {{{C_Size_Background.Y / -2}}}">
						<!-- Clan 1 win track or match point message -->
						<frame id="{{{C_Id_FrameClan1WinPoint}}}" pos="{{{C_Size_Background.X / -2 - C_Size_ClanLogoBg.X}}} 0" size="{{{C_Size_WinPoint.X}}} {{{C_Size_WinPoint.Y}}}" >
							<frame pos="{{{C_Size_WinPoint.X / 2}}} {{{C_Size_WinPoint.Y / -2}}}" halign="center" valign="center">
								<frame id="{{{C_Id_FrameAnimClanWinPoint}}}" pos="{{{-C_Size_WinPoint.X}}} 0" hidden="1">
									<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_BlueTeam_Primary}}}" z-index="0" {{{MLHelpers::Size(C_Size_WinPoint)}}} halign="center" valign="center" />
									<label id="{{{C_Id_LabelClanWinPoint}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" pos="0 -0.15" z-index="2" {{{MLHelpers::Size(C_Size_WinPoint)}}} halign="center" valign="center2" textsize="{{{C_TextSize_LabelTrackPoint}}}" text="{{{C_Text_TrackPoint}}}" />
								</frame>
							</frame>
						</frame>
						<!-- Clan 2 win track or matchpoint message -->
						<frame id="{{{C_Id_FrameClan2WinPoint}}}" pos="{{{C_Size_Background.X / 2 + C_Size_ClanLogoBg.X}}} 0" size="{{{C_Size_WinPoint.X}}} {{{C_Size_WinPoint.Y}}}" halign="right">
							<frame pos="{{{C_Size_WinPoint.X / -2}}} {{{C_Size_WinPoint.Y / -2}}}" halign="center" valign="center">
								<frame id="{{{C_Id_FrameAnimClanWinPoint}}}" pos="{{{C_Size_WinPoint.X}}} 0" hidden="1">
									<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_RedTeam_Primary}}}" z-index="0" {{{MLHelpers::Size(C_Size_WinPoint)}}} halign="center" valign="center" />
									<label id="{{{C_Id_LabelClanWinPoint}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" pos="0 -0.15" z-index="2" {{{MLHelpers::Size(C_Size_WinPoint)}}} halign="center" valign="center2" textsize="{{{C_TextSize_LabelTrackPoint}}}" text="{{{C_Text_TrackPoint}}}" />
								</frame>
							</frame>
						</frame>
						<!-- Overtime -->
						<frame {{{MLHelpers::Size(C_Size_Overtime)}}} halign="center">
							<frame id="{{{C_Id_FrameAnimOvertime}}}" pos="0 {{{C_Size_Overtime.Y}}}" hidden="1">
								<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" {{{MLHelpers::Size(C_Size_Overtime)}}} halign="center" />
								<label class="{{{Stylesheet::C_Class_Text_Default}}}" pos="0 {{{C_Size_Overtime.Y / -2. - 0.15}}}" z-index="1" {{{MLHelpers::Size(C_Size_Overtime - <1. , 0.>)}}} halign="center" valign="center2" textsize="{{{C_TextSize_LabelTrackPoint}}}" text="{{{C_Text_Overtime}}}"/>
							</frame>
						</frame>

						<!-- WarmUp -->
						<frame {{{MLHelpers::Size(C_Size_NotPlaying)}}} halign="center">
							<frame id="{{{C_Id_FrameAnimNotPlaying}}}" pos="0 {{{C_Size_NotPlaying.Y}}}" hidden="1">
								<quad id="{{{C_Id_QuadNotPlaying}}}" z-index="0" {{{MLHelpers::Size(C_Size_NotPlaying)}}} halign="center" bgcolor="{{{CMGameStylesheet::GetColorHex6(CMGameStylesheet::C_Color_WarmUp)}}}" opacity="0.75" />
								<label id="{{{C_Id_LabelNotPlaying}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" pos="0 {{{C_Size_NotPlaying.Y / -2. - 0.15}}}" z-index="1" {{{MLHelpers::Size(C_Size_NotPlaying - <1. , 0.>)}}} halign="center" valign="center2" textsize="{{{C_TextSize_LabelNotPlaying}}}" text="{{{C_Text_WarmUp}}}"/>
							</frame>
						</frame>
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/WarmupHelpers_Client.Script.txt" as WarmupHelpers
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Teams.Script.txt" as Teams
#Include "Libs/Nadeo/Trackmania/Modes/TMWC2023/Stylesheet.Script.txt" as Stylesheet

#Struct K_ControlsMatchInfo {
	CMlFrame Frame_MatchInfo;
	CMlQuad Quad_MatchInfo;
	CMlLabel Label_MatchInfo;
}
#Struct K_ControlsClanName {
	CMlQuad Quad_ClanFlag;
	CMlLabel Label_ClanName;
}
#Struct K_ControlsTrackPoint {
	CMlFrame Frame_TrackPoint;
	CMlFrame Frame_AnimTrackPoint;
	CMlLabel Label_TrackPoint;
}
#Struct K_ControlsNotPlaying {
	CMlFrame Frame_AnimNotPlaying;
	CMlQuad Quad_NotPlaying;
	CMlLabel Label_NotPlaying;
}
#Struct K_Controls {
	CMlFrame Frame_AnimVisibility;
	K_ControlsMatchInfo MatchInfo;
	K_ControlsNotPlaying NotPlaying;
	CMlQuad[][Integer] Quads_ClansMatchPoints;
	CMlLabel[Integer] Labels_ClansMapPoints;
	K_ControlsClanName[Integer] ClansNames;
	CMlFrame[Integer] Frames_ClanLogo;
	CMlQuad[Integer] Quads_ClanLogo;
	K_ControlsTrackPoint[Integer] ClanWinPoint;
	CMlFrame[Integer] Frames_ClanMatchWinPoint;
	CMlLabel[Integer] Labels_ClanMatchWinPoint;
	CMlFrame[Integer] Frames_ClanMatchPoints;
	CMlFrame Frame_AnimOvertime;
}
#Struct K_State {
	K_Controls Controls;
	Integer MatchPointsLimit;
	Integer MapPointsLimit;
	Int2 ClansMatchPoints;
	Int2 ClansMapPoints;
	Int2 PreviousClansMapPoints;
	Text MatchInfo;
	Integer ClansInfoUpdate;
	Integer TeamsUpdate;
	Boolean HeaderIsVisible;
	Boolean IsWarmUp;
	Boolean IsPause;
	Boolean[Integer] DisplayClanWinPoint;
	Boolean DisplayOvertime;
}

#Const C_State_Null K_State {
	Controls = K_Controls {
		Quads_ClansMatchPoints = [1 => [], 2 => []]
	},
	MatchPointsLimit = 0,
	MapPointsLimit = 0,
	ClansMatchPoints = <0, 0>,
	ClansMapPoints = <0, 0>,
	PreviousClansMapPoints = <0, 0>,
	MatchInfo = "",
	ClansInfoUpdate = 0,
	TeamsUpdate = 0
}

#Const C_MaxPointsPerRound {{{dump(C_MaxPointsPerRound)}}}
#Const C_DefaultClan1Logo {{{dump(C_DefaultClan1Logo)}}}
#Const C_DefaultClan2Logo {{{dump(C_DefaultClan2Logo)}}}

#Const C_Text_MatchPoint {{{dump(C_Text_MatchPoint)}}}
#Const C_Text_TrackPoint {{{dump(C_Text_TrackPoint)}}}
#Const C_Text_Overtime {{{dump(C_Text_Overtime)}}}
#Const C_Text_Pause {{{dump(C_Text_Pause)}}}
#Const C_Text_WarmUp {{{dump(C_Text_WarmUp)}}}

#Const C_Padding_MatchInfo {{{dump(C_Padding_MatchInfo)}}}

#Const C_AnimDuration_HeaderVisibility {{{dump(C_AnimDuration_HeaderVisibility)}}}
#Const C_AnimDuration_ClanName {{{dump(C_AnimDuration_ClanName)}}}
#Const C_AnimDuration_WinPoint {{{dump(C_AnimDuration_WinPoint)}}}
#Const C_AnimDuration_NotPlaying {{{dump(C_AnimDuration_NotPlaying)}}}

#Const C_Size_ClanFlag {{{dump(C_Size_ClanFlag)}}}
#Const C_Size_WinPoint {{{dump(C_Size_WinPoint)}}}
#Const C_Size_NotPlaying {{{dump(C_Size_NotPlaying)}}}
#Const C_Size_VisibilityClip {{{dump(C_Size_VisibilityClip)}}}
#Const C_SizeX_LabelClanName {{{dump(C_SizeX_LabelClanName)}}} // Name without the flag X size

#Const C_Pos_MatchPoints_OneLine {{{dump(C_Pos_MatchPoints_OneLine)}}}
#Const C_Pos_MatchPoints_TwoLines {{{dump(C_Pos_MatchPoints_TwoLines)}}}

#Const C_TextSize_LabelClanName {{{dump(C_TextSize_LabelClanName)}}}
#Const C_TextSize_LabelTrackPoint {{{dump(C_TextSize_LabelTrackPoint)}}}
#Const C_TextSize_LabelClanMapPoints {{{dump(C_TextSize_LabelClanMapPoints)}}}

#Const C_Opacity_MatchPoint_On {{{dump(C_Opacity_MatchPoint_On)}}}
#Const C_Opacity_MatchPoint_Off {{{dump(C_Opacity_MatchPoint_Off)}}}

#Const C_Id_FrameMatchInfo {{{dump(C_Id_FrameMatchInfo)}}}
#Const C_Id_QuadMatchInfo {{{dump(C_Id_QuadMatchInfo)}}}
#Const C_Id_LabelMatchInfo {{{dump(C_Id_LabelMatchInfo)}}}

#Const C_Id_FrameGlobal {{{dump(C_Id_FrameGlobal)}}}
#Const C_Id_FrameAnimVisibility {{{dump(C_Id_FrameAnimVisibility)}}}
#Const C_Id_LabelClan1MapPoints {{{dump(C_Id_LabelClan1MapPoints)}}}
#Const C_Id_LabelClan2MapPoints {{{dump(C_Id_LabelClan2MapPoints)}}}
#Const C_Id_FrameClan1Name {{{dump(C_Id_FrameClan1Name)}}}
#Const C_Id_FrameClan2Name {{{dump(C_Id_FrameClan2Name)}}}
#Const C_Id_QuadClanFlag {{{dump(C_Id_QuadClanFlag)}}}
#Const C_Id_LabelClanName {{{dump(C_Id_LabelClanName)}}}
#Const C_Id_FrameClan1Logo {{{dump(C_Id_FrameClan1Logo)}}}
#Const C_Id_QuadClan1Logo {{{dump(C_Id_QuadClan1Logo)}}}
#Const C_Id_FrameClan2Logo {{{dump(C_Id_FrameClan2Logo)}}}
#Const C_Id_QuadClan2Logo {{{dump(C_Id_QuadClan2Logo)}}}
#Const C_Id_FrameClan1MatchPoints {{{dump(C_Id_FrameClan1MatchPoints)}}}
#Const C_Id_FrameClan2MatchPoints {{{dump(C_Id_FrameClan2MatchPoints)}}}
#Const C_Id_FrameClan1WinPoint {{{dump(C_Id_FrameClan1WinPoint)}}}
#Const C_Id_FrameClan2WinPoint {{{dump(C_Id_FrameClan2WinPoint)}}}
#Const C_Id_FrameAnimClanWinPoint {{{dump(C_Id_FrameAnimClanWinPoint)}}}
#Const C_Id_LabelClanWinPoint {{{dump(C_Id_LabelClanWinPoint)}}}

#Const C_Id_FrameAnimOvertime {{{dump(C_Id_FrameAnimOvertime)}}}

#Const C_Id_FrameAnimNotPlaying {{{dump(C_Id_FrameAnimNotPlaying)}}}
#Const C_Id_QuadNotPlaying {{{dump(C_Id_QuadNotPlaying)}}}
#Const C_Id_LabelNotPlaying {{{dump(C_Id_LabelNotPlaying)}}}

""",
"""
K_State UpdateMapPoints(K_State _State) {
	declare K_State State = _State;

	declare Boolean NotPlayingNotDisplayed = (!State.IsWarmUp && !State.IsPause);

	// We do not want to display overtime if both teams have just passed the map points limit.
	// eg: the map points limit is 10, score was 9 - 9, first team get a victory, final score is 11 - 10, overtime should not be displayed in this case
	declare Boolean DisplayOvertime = (NotPlayingNotDisplayed && State.MapPointsLimit > 0 && ((
			State.ClansMapPoints.X == State.ClansMapPoints.Y &&
			State.ClansMapPoints.X >= State.MapPointsLimit
		) || (
			State.ClansMapPoints.X >= State.MapPointsLimit &&
			State.ClansMapPoints.Y >= State.MapPointsLimit &&
			State.PreviousClansMapPoints.X >= State.MapPointsLimit &&
			State.PreviousClansMapPoints.Y >= State.MapPointsLimit
	)));

	if (State.DisplayOvertime != DisplayOvertime) {
		State.DisplayOvertime = DisplayOvertime;
		AnimMgr.Flush(State.Controls.Frame_AnimOvertime);
		if (DisplayOvertime) {
			AnimMgr.Add(State.Controls.Frame_AnimOvertime, "<a pos=\"0 0\" hidden=\"0\"/>", C_AnimDuration_WinPoint, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_AnimOvertime, "<a pos=\"0 0\" hidden=\"1\"/>", C_AnimDuration_WinPoint, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	declare Boolean Clan1WinPoint = (NotPlayingNotDisplayed && State.ClansMapPoints.X >= State.MapPointsLimit - C_MaxPointsPerRound);
	declare Boolean Clan2WinPoint = (NotPlayingNotDisplayed && State.ClansMapPoints.Y >= State.MapPointsLimit - C_MaxPointsPerRound);

	if (Clan1WinPoint && State.ClansMatchPoints.X >= State.MatchPointsLimit - 1) {
		State.Controls.ClanWinPoint[1].Label_TrackPoint.Value = C_Text_MatchPoint;
	} else {
		State.Controls.ClanWinPoint[1].Label_TrackPoint.Value = C_Text_TrackPoint;
	}

	if (Clan2WinPoint && State.ClansMatchPoints.Y >= State.MatchPointsLimit - 1) {
		State.Controls.ClanWinPoint[2].Label_TrackPoint.Value = C_Text_MatchPoint;
	} else {
		State.Controls.ClanWinPoint[2].Label_TrackPoint.Value = C_Text_TrackPoint;
	}

	// Do not display the track point if there's only 1 track in the match. Only display the match point.
	if (State.DisplayClanWinPoint[1] != Clan1WinPoint) {
		State.DisplayClanWinPoint[1] = Clan1WinPoint;
		AnimMgr.Flush(State.Controls.ClanWinPoint[1].Frame_AnimTrackPoint);
		if (State.DisplayClanWinPoint[1]) {
			AnimMgr.Add(State.Controls.ClanWinPoint[1].Frame_AnimTrackPoint, "<a pos=\"0 0\" hidden=\"0\" />", C_AnimDuration_WinPoint, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.ClanWinPoint[1].Frame_AnimTrackPoint, "<a pos=\""^ - C_Size_WinPoint.X ^" 0\" hidden=\"1\" />", C_AnimDuration_WinPoint, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	if (State.DisplayClanWinPoint[2] != Clan2WinPoint) {
		State.DisplayClanWinPoint[2] = Clan2WinPoint;
		AnimMgr.Flush(State.Controls.ClanWinPoint[2].Frame_AnimTrackPoint);
		if (State.DisplayClanWinPoint[2]) {
			AnimMgr.Add(State.Controls.ClanWinPoint[2].Frame_AnimTrackPoint, "<a pos=\"0 0\" hidden=\"0\" />", C_AnimDuration_WinPoint, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.ClanWinPoint[2].Frame_AnimTrackPoint, "<a pos=\""^ C_Size_WinPoint.X ^" 0\" hidden=\"1\" />", C_AnimDuration_WinPoint, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	return State;
}

K_State SetMatchPointsLimit(K_State _State, Integer _MatchPointsLimit) {
	declare K_State State = _State;

	State.MatchPointsLimit = _MatchPointsLimit;
	State = UpdateMapPoints(State);

	declare Real SizeOfPoint = 0.;
	if (_MatchPointsLimit != 0) SizeOfPoint = (20. / _MatchPointsLimit) - 1.;

	foreach (Clan => Quads in State.Controls.Quads_ClansMatchPoints) {
		declare Integer Direction = 1;
		declare CMlControl::AlignHorizontal HorizontalAlign = CMlControl::AlignHorizontal::Left;
		if (Clan == 2) {
			Direction = -1;
			HorizontalAlign = CMlControl::AlignHorizontal::Right;
		}
		foreach (Key => Quad in Quads) {
			Quad.Visible = (Key < State.MatchPointsLimit);
			if (Quad.Visible) {
				Quad.HorizontalAlign = HorizontalAlign;
				Quad.Size.X = SizeOfPoint;
				Quad.RelativePosition_V3.X = Direction * SizeOfPoint * Key + Direction * 1. * Key;
			}
		}
	}

	return State;
}

K_State SetMapPointsLimit(K_State _State, Integer _MapPointsLimit) {
	declare K_State State = _State;

	State.MapPointsLimit = _MapPointsLimit;
	State = UpdateMapPoints(State);

	return State;
}

K_State SetClansMatchPoints(K_State _State, Int2 _ClansMatchPoints) {
	declare K_State State = _State;

	State.ClansMatchPoints = _ClansMatchPoints;
	State = UpdateMapPoints(State);

	foreach (Clan => Quads in State.Controls.Quads_ClansMatchPoints) {
		if (Clan == 1 || Clan == 2) {
			foreach (Key => Quad in Quads) {
				if (Key < State.ClansMatchPoints[Clan - 1]) {
					// Light on
					Quad.Opacity = C_Opacity_MatchPoint_On;
					if (Clan == 1) Quad.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_BlueTeam_Primary;
					else if (Clan == 2) Quad.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_RedTeam_Primary;
				} else {
					// Light off
					Quad.Opacity = C_Opacity_MatchPoint_Off;
					Quad.BgColor = Stylesheet::C_Color_Vec3_TMWC2023_Default;
				}
			}
		}
	}

	return State;
}

K_State SetClansMapPoints(K_State _State, Int2 _ClansMapPoints) {
	declare K_State State = _State;

	State.PreviousClansMapPoints = State.ClansMapPoints;
	State.ClansMapPoints = _ClansMapPoints;
	for (Clan, 1, 2) {
		declare CMlLabel Label_MapPoint = State.Controls.Labels_ClansMapPoints[Clan];
		Label_MapPoint.Value = ""^State.ClansMapPoints[Clan - 1];
		Tools::FitLabelValue(Label_MapPoint, C_TextSize_LabelClanMapPoints, 4., 0.5);
	}
	State = UpdateMapPoints(State);

	return State;
}

K_State SetMatchInfo(K_State _State, Text _MatchInfo) {
	declare K_State State = _State;

	State.MatchInfo = _MatchInfo;
	State.Controls.MatchInfo.Frame_MatchInfo.Visible = (State.MatchInfo != "");
	if (State.Controls.MatchInfo.Frame_MatchInfo.Visible) {
		State.Controls.MatchInfo.Label_MatchInfo.Value = State.MatchInfo;
		State.Controls.MatchInfo.Quad_MatchInfo.Size.X = State.Controls.MatchInfo.Label_MatchInfo.ComputeWidth(State.MatchInfo) + C_Padding_MatchInfo * 2.;
	}

	return State;
}

K_State SetTeamsInfo(K_State _State, Integer _TeamsUpdate, Teams::K_Team[Integer] _TeamsInfo) {
	declare K_State State = _State;

	State.TeamsUpdate = _TeamsUpdate;

	for (Clan, 1, 2) {
		declare K_ControlsClanName ClansNames = State.Controls.ClansNames[Clan];
		declare Text Name = Teams::GetClanShortName(_TeamsInfo, Clan);
		if (Name == "") Name = Teams::GetClanName(This, _TeamsInfo, Clan);
		ClansNames.Label_ClanName.Value = Name;
		ClansNames.Quad_ClanFlag.ImageUrl = Teams::GetClanCountryFlagUrl( _TeamsInfo, Clan);

		declare Real Direction = 1.;
		if (Clan == 2) Direction = -1.;

		if (ClansNames.Quad_ClanFlag.ImageUrl == "") {
			ClansNames.Label_ClanName.RelativePosition_V3.X = 0.;
			ClansNames.Label_ClanName.Size.X = C_SizeX_LabelClanName;
		} else {
			ClansNames.Label_ClanName.RelativePosition_V3.X = (C_Size_ClanFlag.X + 1.5) * Direction;
			ClansNames.Label_ClanName.Size.X = C_SizeX_LabelClanName - C_Size_ClanFlag.X - 1.5;
		}

		Tools::FitLabelValue(ClansNames.Label_ClanName, C_TextSize_LabelClanName, 2., 0.25);

		// Adjust if the name is too long
		if (ClansNames.Label_ClanName.ValueLineCount > 1) {
			State.Controls.Frames_ClanMatchPoints[Clan].RelativePosition_V3.Y = C_Pos_MatchPoints_TwoLines;
			ClansNames.Label_ClanName.LineSpacing = .75;
		} else {
			State.Controls.Frames_ClanMatchPoints[Clan].RelativePosition_V3.Y = C_Pos_MatchPoints_OneLine;
		}

		declare Text ClanLogo = Teams::GetClanLogoUrl(This, _TeamsInfo, Clan);
		if (ClanLogo == "") {
			State.Controls.Quads_ClanLogo[Clan].Colorize = <1., 1., 1.>;
			if (Clan == 1) State.Controls.Quads_ClanLogo[Clan].ImageUrl = C_DefaultClan1Logo;
			else State.Controls.Quads_ClanLogo[Clan].ImageUrl = C_DefaultClan2Logo;
		} else {
			State.Controls.Quads_ClanLogo[Clan].Colorize = <0., 0., 0.>;
			State.Controls.Quads_ClanLogo[Clan].ImageUrl = ClanLogo;
		}
	}

	return State;
}

K_State SetMatchNotPlaying(K_State _State, Boolean _IsWarmUp, Boolean _IsPause) {
	declare K_State State = _State;

	State.IsWarmUp = _IsWarmUp;
	State.IsPause = _IsPause;

	declare Boolean ShouldBeVisible;

	if (State.IsWarmUp) {
		ShouldBeVisible = True;
		State.Controls.NotPlaying.Label_NotPlaying.Value = C_Text_WarmUp;
	} else if (State.IsPause) {
		ShouldBeVisible = True;
		State.Controls.NotPlaying.Label_NotPlaying.Value = C_Text_Pause;
	}

	AnimMgr.Flush(State.Controls.NotPlaying.Frame_AnimNotPlaying);
	if (ShouldBeVisible) {
		AnimMgr.Add(State.Controls.NotPlaying.Frame_AnimNotPlaying, "<a pos=\"0 0\" hidden=\"0\"/>", C_AnimDuration_NotPlaying, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(State.Controls.NotPlaying.Frame_AnimNotPlaying, "<a pos=\"0 "^ C_Size_NotPlaying.Y ^"\" hidden=\"1\"/>", C_AnimDuration_NotPlaying, CAnimManager::EAnimManagerEasing::QuadOut);
	}
	State = UpdateMapPoints(State);

	return State;
}

K_State SetVisibility(K_State _State, Boolean _HeaderIsVisible) {
	declare K_State State = _State;

	if (State.HeaderIsVisible != _HeaderIsVisible) {
		State.HeaderIsVisible = _HeaderIsVisible;
		AnimMgr.Flush(State.Controls.Frame_AnimVisibility);
		if (State.HeaderIsVisible) {
			AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\"0 0\" hidden=\"0\" />", C_AnimDuration_HeaderVisibility, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\"0 "^(C_Size_VisibilityClip.Y)^"\" hidden=\"1\" />", C_AnimDuration_HeaderVisibility, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare netread Boolean Net_TMWC2023_Header_IsVisible for UI;
declare netread Integer Net_TMWC2023_Header_MatchPointsLimit for Teams[0] = 0;
declare netread Integer Net_TMWC2023_Header_MapPointsLimit for Teams[0] = 0;
declare netread Int2 Net_TMWC2023_Header_ClansMatchPoints for Teams[0] = <0, 0>;
declare netread Int2 Net_TMWC2023_Header_ClansMapPoints for Teams[0] = <0, 0>;

declare K_State State;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);

State = C_State_Null;
State.Controls.Frame_AnimVisibility = (Frame_Global.GetFirstChild(C_Id_FrameAnimVisibility) as CMlFrame);

State.Controls.MatchInfo = K_ControlsMatchInfo {
	Frame_MatchInfo = (Frame_Global.GetFirstChild(C_Id_FrameMatchInfo) as CMlFrame),
	Quad_MatchInfo = (Frame_Global.GetFirstChild(C_Id_QuadMatchInfo) as CMlQuad),
	Label_MatchInfo = (Frame_Global.GetFirstChild(C_Id_LabelMatchInfo) as CMlLabel)
};

State.Controls.NotPlaying = K_ControlsNotPlaying {
	Frame_AnimNotPlaying = (Frame_Global.GetFirstChild(C_Id_FrameAnimNotPlaying) as CMlFrame),
	Quad_NotPlaying = (Frame_Global.GetFirstChild(C_Id_QuadNotPlaying) as CMlQuad),
	Label_NotPlaying = (Frame_Global.GetFirstChild(C_Id_LabelNotPlaying) as CMlLabel)
};

State.Controls.Labels_ClansMapPoints[1] = (Frame_Global.GetFirstChild(C_Id_LabelClan1MapPoints) as CMlLabel);
State.Controls.Labels_ClansMapPoints[2] = (Frame_Global.GetFirstChild(C_Id_LabelClan2MapPoints) as CMlLabel);

declare CMlFrame Frame_Clan1Name <=> (Frame_Global.GetFirstChild(C_Id_FrameClan1Name) as CMlFrame) ;
State.Controls.ClansNames[1] = K_ControlsClanName {
	Quad_ClanFlag = (Frame_Clan1Name.GetFirstChild(C_Id_QuadClanFlag) as CMlQuad),
	Label_ClanName = (Frame_Clan1Name.GetFirstChild(C_Id_LabelClanName) as CMlLabel)
};
declare CMlFrame Frame_Clan2Name <=> (Frame_Global.GetFirstChild(C_Id_FrameClan2Name) as CMlFrame) ;
State.Controls.ClansNames[2] = K_ControlsClanName {
	Quad_ClanFlag = (Frame_Clan2Name.GetFirstChild(C_Id_QuadClanFlag) as CMlQuad),
	Label_ClanName = (Frame_Clan2Name.GetFirstChild(C_Id_LabelClanName) as CMlLabel)
};
State.Controls.Frames_ClanLogo[1] = (Frame_Global.GetFirstChild(C_Id_FrameClan1Logo) as CMlFrame);
State.Controls.Frames_ClanLogo[2] = (Frame_Global.GetFirstChild(C_Id_FrameClan2Logo) as CMlFrame);
State.Controls.Quads_ClanLogo[1] = (Frame_Global.GetFirstChild(C_Id_QuadClan1Logo) as CMlQuad);
State.Controls.Quads_ClanLogo[2] = (Frame_Global.GetFirstChild(C_Id_QuadClan2Logo) as CMlQuad);

declare CMlFrame Frame_Clan1TrackPoint = (Frame_Global.GetFirstChild(C_Id_FrameClan1WinPoint) as CMlFrame);
State.Controls.ClanWinPoint[1] = K_ControlsTrackPoint {
	Frame_TrackPoint = Frame_Clan1TrackPoint,
	Frame_AnimTrackPoint = (Frame_Clan1TrackPoint.GetFirstChild(C_Id_FrameAnimClanWinPoint) as CMlFrame),
	Label_TrackPoint = (Frame_Clan1TrackPoint.GetFirstChild(C_Id_LabelClanWinPoint) as CMlLabel)
};

declare CMlFrame Frame_Clan2TrackPoint = (Frame_Global.GetFirstChild(C_Id_FrameClan2WinPoint) as CMlFrame);
State.Controls.ClanWinPoint[2] = K_ControlsTrackPoint {
	Frame_TrackPoint = Frame_Clan2TrackPoint,
	Frame_AnimTrackPoint = (Frame_Clan2TrackPoint.GetFirstChild(C_Id_FrameAnimClanWinPoint) as CMlFrame),
	Label_TrackPoint = (Frame_Clan2TrackPoint.GetFirstChild(C_Id_LabelClanWinPoint) as CMlLabel)
};

State.Controls.Frames_ClanMatchPoints[1] <=> (Frame_Global.GetFirstChild(C_Id_FrameClan1MatchPoints) as CMlFrame);
State.Controls.Frames_ClanMatchPoints[2] <=> (Frame_Global.GetFirstChild(C_Id_FrameClan2MatchPoints) as CMlFrame);
for (Clan, 1, 2) {
	State.Controls.Quads_ClansMatchPoints[Clan] = [];
	foreach (Control in State.Controls.Frames_ClanMatchPoints[Clan].Controls) {
		State.Controls.Quads_ClansMatchPoints[Clan].add(Control as CMlQuad);
	}
}

State.Controls.Frame_AnimOvertime <=> (Frame_Global.GetFirstChild(C_Id_FrameAnimOvertime) as CMlFrame);


// Init values
State.DisplayClanWinPoint[1] = False;
State.DisplayClanWinPoint[2] = False;

Tools::FitLabelValue(State.Controls.ClanWinPoint[1].Label_TrackPoint, C_TextSize_LabelTrackPoint, 0.5, 0.1);
Tools::FitLabelValue(State.Controls.ClanWinPoint[2].Label_TrackPoint, C_TextSize_LabelTrackPoint, 0.5, 0.1);

State = SetVisibility(State, State.Controls.Frame_AnimVisibility.Visible);
State = SetMapPointsLimit(State, Net_TMWC2023_Header_MapPointsLimit);
State = SetMatchPointsLimit(State, Net_TMWC2023_Header_MatchPointsLimit);
State = SetClansMatchPoints(State, Net_TMWC2023_Header_ClansMatchPoints);
State = SetClansMapPoints(State, Net_TMWC2023_Header_ClansMapPoints);
State = SetMatchInfo(State, Shared::GetMatchInfo(This));
State = SetTeamsInfo(State, Teams::GetTeamsUpdate(This), Teams::GetTeamsInfo(This));
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.HeaderIsVisible != Net_TMWC2023_Header_IsVisible) {
		State = SetVisibility(State, Net_TMWC2023_Header_IsVisible);
	}

	if (Frame_Global.Visible) {
		if (State.MapPointsLimit != Net_TMWC2023_Header_MapPointsLimit) {
			State = SetMapPointsLimit(State, Net_TMWC2023_Header_MapPointsLimit);
		}
		if (State.MatchPointsLimit != Net_TMWC2023_Header_MatchPointsLimit) {
			State = SetMatchPointsLimit(State, Net_TMWC2023_Header_MatchPointsLimit);
		}
		if (State.ClansMatchPoints != Net_TMWC2023_Header_ClansMatchPoints) {
			State = SetClansMatchPoints(State, Net_TMWC2023_Header_ClansMatchPoints);
		}
		if (State.ClansMapPoints != Net_TMWC2023_Header_ClansMapPoints) {
			State = SetClansMapPoints(State, Net_TMWC2023_Header_ClansMapPoints);
		}
		if (State.IsWarmUp != WarmupHelpers::IsWarmupActive(Teams[0]) ||
			State.IsPause != Shared::GetIsPause(This)) {
			State = SetMatchNotPlaying(State, WarmupHelpers::IsWarmupActive(Teams[0]), Shared::GetIsPause(This));
		}
		if (State.MatchInfo != Shared::GetMatchInfo(This)) {
			State = SetMatchInfo(State, Shared::GetMatchInfo(This));
		}
		if (State.TeamsUpdate != Teams::GetTeamsUpdate(This)) {
			State = SetTeamsInfo(State, Teams::GetTeamsUpdate(This), Teams::GetTeamsInfo(This));
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}