/**
 *	UI module: PlayerInfo client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/TMWC2023/UIModules/PlayerInfo_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/Trackmania/Modes/TMWC2023/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/Modes/TMWC2023/UIModules/PlayerInfo_Common.Script.txt" as UIModules_PlayerInfo_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Img_Default "file://Media/Manialinks/Nadeo/Trackmania/Modes/TMWC2023/UI/"

#Const C_Text_PlayerStats "Player Stats"
#Const C_Text_Crashes "Crashes"
#Const C_Text_Top1 "Top 1's"

#Const C_VisibilityAnimDuration 250

#Const C_Class_ColorPrimary "class-colorprimary"
#Const C_Class_ColorSecondary "class-colorsecondary"

#Const C_Size_VisibilityClip <38., 80.>

#Const C_TextSize_LabelDefaultSize 5.
#Const C_TextSize_PlayerStatsTitle 2.5
#Const C_TextSize_Caption 1.

#Const C_Id_FrameGlobal "frame-global"
#Const C_Id_FrameAnimVisibility "frame-anim-visibility"

#Const C_Id_QuadCountryFlag "quad-country-flag"
#Const C_Id_QuadPlayerPhoto "quad-player-photo"

#Const C_Id_LabelPlayerName "label-playername"
#Const C_Id_LabelPersonalBest "label-Personalbest"
#Const C_Id_LabelCrashes "label-crashes"
#Const C_Id_LabelTop1 "label-top1"

#Const C_Size_PlayerPhoto <38., 50.>

#Const C_Size_PlayerStatsTitleBg <38., 5.>
#Const C_Size_PlayerStatsBg <38., 19.5>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_PlayerInfo_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_PlayerInfo_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	// Component is based on a grid view, so we get the size of one cell and will compute almost all size with it
	declare Real Size_GridCell = C_Size_PlayerStatsBg.X / 4.;

	return MV::Create(
GetId(), 3,
"""
{{{Stylesheet::Get()}}}
<frame id="{{{C_Id_FrameGlobal}}}" z-index="{{{Shared::C_ZIndex_PlayerInfo}}}">
	<frame {{{UIModules::CustomizableUIModule(UIModules_PlayerInfo_Common::C_UIModuleConfig)}}} {{{MLHelpers::Size(C_Size_VisibilityClip)}}} valign="bottom">
		<frame id="{{{C_Id_FrameAnimVisibility}}}" pos="{{{-C_Size_VisibilityClip.X}}} 0" hidden="1">
			<!-- Player Name + Photo -->
			<frame pos="0 38">
				<!-- Player Name -->
				<frame pos="0 0">
					<frame>
						<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" size="{{{Size_GridCell}}} {{{Size_GridCell}}}" />
						<quad id="{{{C_Id_QuadCountryFlag}}}" pos="{{{Size_GridCell / 2}}} {{{Size_GridCell / -2}}}" z-index="1" size="{{{Size_GridCell - 4.}}} {{{Size_GridCell - 4.}}}" halign="center" valign="center" keepratio="fit"/>
					</frame>
					<frame pos="{{{Size_GridCell}}} 0">
						<quad class="{{{C_Class_ColorSecondary}}}" z-index="0" size="{{{Size_GridCell * 3.}}} {{{Size_GridCell}}}" bgcolor="{{{Stylesheet::C_Color_TMWC2023_BlueTeam_Secondary}}}"/>
						<label id="{{{C_Id_LabelPlayerName}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" pos="2 {{{Size_GridCell / -2 - 0.25}}} " size="{{{Size_GridCell * 3. - 4.}}} {{{Size_GridCell}}}" z-index="1" valign="center2" textsize="{{{C_TextSize_LabelDefaultSize}}}"/>
					</frame>
				</frame>
				<!-- Photo -->
				<frame pos="0 0" {{{MLHelpers::Size(C_Size_PlayerPhoto)}}} valign="bottom">
					<quad id="{{{C_Id_QuadPlayerPhoto}}}" z-index="0" pos="0 {{{-C_Size_PlayerPhoto.Y}}}" {{{MLHelpers::Size(C_Size_PlayerPhoto)}}} valign="bottom" keepratio="fit"/>
				</frame>
			</frame>

			<!-- Player Stats -->
			<frame pos="0 26">
				<frame>
					<quad class="{{{Stylesheet::C_Class_BackgroundBgColor_Default}}}" z-index="0" {{{MLHelpers::Size(C_Size_PlayerStatsTitleBg)}}}/>
					<label class="{{{Stylesheet::C_Class_Text_Default}}}" pos="{{{C_Size_PlayerStatsTitleBg.X / 2.}}} {{{C_Size_PlayerStatsTitleBg.Y / -2. - 0.25}}}" z-index="1" {{{MLHelpers::Size(C_Size_PlayerStatsBg)}}} halign="center" valign="center2" textsize="{{{C_TextSize_PlayerStatsTitle}}}" text="{{{C_Text_PlayerStats}}}"/>
				</frame>
				<frame pos="0 {{{-C_Size_PlayerStatsTitleBg.Y}}}">
					<quad class="{{{C_Class_ColorSecondary}}}" z-index="0" {{{MLHelpers::Size(C_Size_PlayerStatsBg)}}} bgcolor="{{{Stylesheet::C_Color_TMWC2023_BlueTeam_Secondary}}}"/>
					<!-- First line -->
					<frame z-index="1" >
						<label class="{{{Stylesheet::C_Class_Text_Default}}}" z-index="0" pos="{{{Size_GridCell / 2.}}} {{{Size_GridCell / -2. - 0.25}}}" size="{{{Size_GridCell - 1.}}} {{{Size_GridCell - 1.}}}" halign="center" valign="center2" textsize="{{{C_TextSize_LabelDefaultSize}}}" text="{{{Shared::C_Text_PB}}}"/>
						<frame pos="{{{Size_GridCell}}} 0" z-index="1">
							<quad class="{{{C_Class_ColorPrimary}}}" z-index="0" size="{{{Size_GridCell * 3.}}} {{{Size_GridCell}}}" bgcolor="{{{Stylesheet::C_Color_TMWC2023_BlueTeam_Primary}}}"/>
							<label id="{{{C_Id_LabelPersonalBest}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" pos="{{{Size_GridCell * 3. / 2.}}} {{{Size_GridCell / -2. - 0.25}}}" size="{{{Size_GridCell * 3.}}} {{{Size_GridCell}}}" z-index="1" halign="center" valign="center2" textsize="{{{C_TextSize_LabelDefaultSize}}}" text="--:--.---"/>
						</frame>
					</frame>

					<!-- Second line -->
					<frame pos="0 {{{-Size_GridCell - 0.5}}}" z-index="1" >
						<quad class="{{{Stylesheet::C_Class_BackgroundColorize_Accent}}}" pos="{{{Size_GridCell / 2.}}} {{{Size_GridCell / -2.}}}" z-index="0" size="{{{Size_GridCell -5.}}} {{{Size_GridCell -5.}}}" halign="center" valign="center" image="{{{C_Img_Default ^ "Crash.dds"}}}"/>
						<frame pos="{{{Size_GridCell}}} 0" z-index="1" >
							<quad class="{{{C_Class_ColorPrimary}}}" size="{{{Size_GridCell}}} {{{Size_GridCell}}}" bgcolor="{{{Stylesheet::C_Color_TMWC2023_BlueTeam_Primary}}}"/>
							<label id="{{{C_Id_LabelCrashes}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" pos="{{{Size_GridCell / 2.}}} 0" size="{{{Size_GridCell - 1.}}} {{{Size_GridCell - 1.}}}" halign="center" valign="top" textsize="{{{C_TextSize_LabelDefaultSize}}}" text="0"/>
							<label class="{{{Stylesheet::C_Class_Text_Default}}}" pos="{{{Size_GridCell / 2.}}} {{{-Size_GridCell + 0.7}}}" size="{{{Size_GridCell -1.}}} {{{Size_GridCell -3.}}}" halign="center" valign="bottom" textsize="{{{C_TextSize_Caption}}}" text="{{{C_Text_Crashes}}}"/>
						</frame>
						<quad class="{{{Stylesheet::C_Class_BackgroundColorize_Accent}}}" pos="{{{Size_GridCell * 2 + Size_GridCell / 2.}}} {{{Size_GridCell / -2.}}}" z-index="0" size="{{{Size_GridCell -5.}}} {{{Size_GridCell -5.}}}" halign="center" valign="center" image="{{{C_Img_Default ^ "Star.dds"}}}"/>
						<frame pos="{{{Size_GridCell * 3.}}} 0" z-index="1">
							<quad class="{{{C_Class_ColorPrimary}}}" size="{{{Size_GridCell}}} {{{Size_GridCell}}}" bgcolor="{{{Stylesheet::C_Color_TMWC2023_BlueTeam_Primary}}}"/>
							<label id="{{{C_Id_LabelTop1}}}" class="{{{Stylesheet::C_Class_Text_Default}}}" pos="{{{Size_GridCell / 2.}}} 0" size="{{{Size_GridCell - 1.}}} {{{Size_GridCell - 1.}}}" halign="center" valign="top" textsize="{{{C_TextSize_LabelDefaultSize}}}" text="0"/>
							<label class="{{{Stylesheet::C_Class_Text_Default}}}" pos="{{{Size_GridCell / 2.}}} {{{-Size_GridCell + 0.7}}}" size="{{{Size_GridCell -1.}}} {{{Size_GridCell -3.}}}"  halign="center" valign="bottom" textsize="{{{C_TextSize_Caption}}}" text="{{{C_Text_Top1}}}"/>
						</frame>
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Shared.Script.txt" as Shared
#Include "Libs/Nadeo/Trackmania/Modes/TMWTCommon/Teams.Script.txt" as Teams
#Include "Libs/Nadeo/Trackmania/Modes/TMWC2023/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/Modes/TMWC2023/Structs.Script.txt" as Structs

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_AnimVisibility;
	CMlQuad[] Quads_ColorPrimary;
	CMlQuad[] Quads_ColorSecondary;
	CMlQuad Quad_CountryFlag;
	CMlLabel Label_PlayerName;
	CMlQuad Quad_PlayerPhoto;
	CMlLabel Label_PersonalBest;
	CMlLabel Label_Crashes;
	CMlLabel Label_Top1;
}
#Struct K_State {
	K_Controls Controls;
	Ident GUIPlayerId;
	Boolean IsVisible;
	Boolean IsSpectating;
	Boolean DisplayModule;
	Integer TeamsUpdate;
	Integer PlayerClan;
	Boolean PlayerPhotoWasVisible;
	Integer PlayerStatsUpdate;
}

#Const C_State_Null K_State {
	Controls = K_Controls {},
	GUIPlayerId = NullId,
	IsVisible = False,
	IsSpectating = False,
	DisplayModule = False,
	TeamsUpdate = -1,
	PlayerClan = 0
}

#Const C_VisibilityAnimDuration {{{dump(C_VisibilityAnimDuration)}}}

#Const C_Class_ColorPrimary {{{dump(C_Class_ColorPrimary)}}}
#Const C_Class_ColorSecondary {{{dump(C_Class_ColorSecondary)}}}

#Const C_Size_VisibilityClip {{{dump(C_Size_VisibilityClip)}}}

#Const C_TextSize_LabelDefaultSize {{{dump(C_TextSize_LabelDefaultSize)}}}
#Const C_TextSize_PlayerStatsTitle {{{dump(C_TextSize_PlayerStatsTitle)}}}

#Const C_Id_FrameGlobal {{{dump(C_Id_FrameGlobal)}}}
#Const C_Id_FrameAnimVisibility {{{dump(C_Id_FrameAnimVisibility)}}}

#Const C_Id_QuadCountryFlag {{{dump(C_Id_QuadCountryFlag)}}}
#Const C_Id_QuadPlayerPhoto {{{dump(C_Id_QuadPlayerPhoto)}}}

#Const C_Id_LabelPlayerName {{{dump(C_Id_LabelPlayerName)}}}
#Const C_Id_LabelPersonalBest {{{dump(C_Id_LabelPersonalBest)}}}
#Const C_Id_LabelCrashes {{{dump(C_Id_LabelCrashes)}}}
#Const C_Id_LabelTop1 {{{dump(C_Id_LabelTop1)}}}

#Const C_Size_PlayerPhoto {{{dump(C_Size_PlayerPhoto)}}}
""",
"""
K_State SetVisibility(K_State _State, Boolean _DisplayModule, Boolean _IsSpectating) {
	declare K_State State = _State;

	State.DisplayModule = _DisplayModule;
	State.IsSpectating = _IsSpectating;
	declare Boolean IsVisible = (State.DisplayModule && State.IsSpectating && State.GUIPlayerId != NullId);

	if (State.IsVisible != IsVisible) {
		State.IsVisible = IsVisible;
		AnimMgr.Flush(State.Controls.Frame_AnimVisibility);
		if (State.IsVisible) {
			AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\"0 0\" hidden=\"0\" />", C_VisibilityAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_AnimVisibility, "<a pos=\""^ -C_Size_VisibilityClip.X ^ " 0\" hidden=\"1\" />", C_VisibilityAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	return State;
}

K_State UpdatePlayerStats(K_State _State, CScore _Score, Integer _PlayerStatsUpdate) {
	declare K_State State = _State;
	State.PlayerStatsUpdate = _PlayerStatsUpdate;

	declare netread Integer Net_TMWC2023_PlayerInfo_PersonalBest for _Score;

	if (Net_TMWC2023_PlayerInfo_PersonalBest > 0) {
		State.Controls.Label_PersonalBest.Value = TL::TimeToText(Net_TMWC2023_PlayerInfo_PersonalBest, True, True );
	} else {
		State.Controls.Label_PersonalBest.Value = "--:--.---";
	}

	declare netread Structs::K_PlayerStats Net_TMWC2023_PlayerInfo_PlayerStats as PlayerStats for _Score = Structs::K_PlayerStats {};

	if (PlayerStats.NumberOfRuns > 0) {
		State.Controls.Label_Top1.Value = TL::ToText(ML::FloorInteger(PlayerStats.Top1 / (PlayerStats.NumberOfRuns * 1.) * 100)) ^ "%";
		State.Controls.Label_Crashes.Value = TL::ToText(ML::FloorInteger(PlayerStats.Crashes / (PlayerStats.NumberOfRuns * 1.) * 100)) ^ "%";
	} else {
		State.Controls.Label_Top1.Value = "-";
		State.Controls.Label_Crashes.Value = "-";
	}

	Tools::FitLabelValue(State.Controls.Label_Top1, C_TextSize_LabelDefaultSize, C_TextSize_LabelDefaultSize, 0.1);
	Tools::FitLabelValue(State.Controls.Label_Crashes, C_TextSize_LabelDefaultSize, C_TextSize_LabelDefaultSize, 0.1);
	return State;
}

K_State SetSpectatorTarget(K_State _State, CSmPlayer _GUIPlayer, Integer _TeamsUpdate) {
	declare K_State State = _State;

	declare Boolean TeamsInfoUpdated = (State.TeamsUpdate != _TeamsUpdate);
	State.TeamsUpdate = _TeamsUpdate;

	declare Teams::K_Team[Integer] TeamsInfo = Teams::GetTeamsInfo(This);
	declare Teams::K_Player[Text] PlayersInfo = Teams::GetPlayersInfo(This);

	if (_GUIPlayer == Null && State.GUIPlayerId != NullId) {
		State.GUIPlayerId = NullId;
		State = SetVisibility(State, State.DisplayModule, State.IsSpectating);
	} else if (_GUIPlayer != Null && _GUIPlayer.Score != Null) {
		if (State.GUIPlayerId != _GUIPlayer.Id || TeamsInfoUpdated) {
			State.GUIPlayerId = _GUIPlayer.Id;

			declare Text NewPhoto = Teams::GetPlayerPhotoUrl(PlayersInfo, _GUIPlayer.User);
			declare Boolean NewPhotoIsVisible = (NewPhoto != "");
			if (State.PlayerPhotoWasVisible != NewPhotoIsVisible) {
				State.PlayerPhotoWasVisible = NewPhotoIsVisible;
				AnimMgr.Flush(State.Controls.Quad_PlayerPhoto);
				if (NewPhotoIsVisible) {
					State.Controls.Quad_PlayerPhoto.ImageUrl = NewPhoto;
					AnimMgr.Add(State.Controls.Quad_PlayerPhoto, "<frame pos=\"0 0\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
				} else {
					AnimMgr.Add(State.Controls.Quad_PlayerPhoto, "<frame pos=\"0 " ^ -C_Size_PlayerPhoto.Y ^"\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			} else {
				State.Controls.Quad_PlayerPhoto.ImageUrl = NewPhoto;
			}

			State.Controls.Quad_CountryFlag.ImageUrl = "file://ZoneFlags/Login/"^_GUIPlayer.User.Login^"/country";

			State.Controls.Label_PlayerName.Value = Teams::GetPlayerName(PlayersInfo, _GUIPlayer.User);
			Tools::FitLabelValue(State.Controls.Label_PlayerName, C_TextSize_LabelDefaultSize, 1., 0.5);
			Tools::FirstPartyLogoMatchLuminance(State.Controls.Label_PlayerName);

			declare netread Integer Net_TMWC2023_PlayerInfo_PlayerStatsUpdate for GUIPlayer.Score = 0;
			State = UpdatePlayerStats(State, _GUIPlayer.Score, Net_TMWC2023_PlayerInfo_PlayerStatsUpdate);

			if (State.PlayerClan != _GUIPlayer.CurrentClan) {
				State.PlayerClan = _GUIPlayer.CurrentClan;
				declare Vec3 ColorPrimary = Stylesheet::C_Color_Vec3_TMWC2023_Default;
				declare Vec3 ColorSecondary = Stylesheet::C_Color_Vec3_TMWC2023_Default;
				if (State.PlayerClan == 1) {
					ColorPrimary = Stylesheet::C_Color_Vec3_TMWC2023_BlueTeam_Primary;
					ColorSecondary = Stylesheet::C_Color_Vec3_TMWC2023_BlueTeam_Secondary;
				} else if (State.PlayerClan == 2) {
					ColorPrimary = Stylesheet::C_Color_Vec3_TMWC2023_RedTeam_Primary;
					ColorSecondary = Stylesheet::C_Color_Vec3_TMWC2023_RedTeam_Secondary;
				}
				foreach (Quad in State.Controls.Quads_ColorPrimary) {
					Quad.BgColor = ColorPrimary;
				}
				foreach (Quad in State.Controls.Quads_ColorSecondary) {
					Quad.BgColor = ColorSecondary;
				}
			}

			State = SetVisibility(State, State.DisplayModule, State.IsSpectating);
		}
	}

	return State;
}

***MainInit***
***
declare netread Boolean Net_TMWC2023_PlayerInfo_IsVisible for UI;

declare K_State State = C_State_Null;
***

***MainStart***
***
State.Controls.Frame_Global <=> (Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);
State.Controls.Frame_AnimVisibility <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_FrameAnimVisibility) as CMlFrame);

Page.GetClassChildren(C_Class_ColorPrimary, State.Controls.Frame_Global, True);
foreach (Control in Page.GetClassChildren_Result) {
	declare CMlQuad Quad = (Control as CMlQuad); // Must be declare as a variable before adding it
	State.Controls.Quads_ColorPrimary.add(Quad);
}
Page.GetClassChildren(C_Class_ColorSecondary, State.Controls.Frame_Global, True);
foreach (Control in Page.GetClassChildren_Result) {
	declare CMlQuad Quad = (Control as CMlQuad); // Must be declare as a variable before adding it
	State.Controls.Quads_ColorSecondary.add(Quad);
}
State.Controls.Quad_CountryFlag <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_QuadCountryFlag) as CMlQuad);
State.Controls.Label_PlayerName <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_LabelPlayerName) as CMlLabel);
State.Controls.Quad_PlayerPhoto <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_QuadPlayerPhoto) as CMlQuad);
State.Controls.Label_PersonalBest <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_LabelPersonalBest) as CMlLabel);
State.Controls.Label_Crashes <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_LabelCrashes) as CMlLabel);
State.Controls.Label_Top1 <=> (State.Controls.Frame_Global.GetFirstChild(C_Id_LabelTop1) as CMlLabel);

State.DisplayModule = State.Controls.Frame_AnimVisibility.Visible;

State = SetSpectatorTarget(State, GUIPlayer, Teams::GetTeamsUpdate(This));
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.DisplayModule != Net_TMWC2023_PlayerInfo_IsVisible) {
		State.DisplayModule = Net_TMWC2023_PlayerInfo_IsVisible;
		State = SetVisibility(State, Net_TMWC2023_PlayerInfo_IsVisible, Shared::IsSpectating(This));
	}
	if (State.DisplayModule) {
		if (
			(GUIPlayer == Null && State.GUIPlayerId != NullId) ||
			(GUIPlayer != Null && State.GUIPlayerId != GUIPlayer.Id) ||
			State.TeamsUpdate != Teams::GetTeamsUpdate(This)
		) {
			State = SetSpectatorTarget(State, GUIPlayer, Teams::GetTeamsUpdate(This));
		} else if (GUIPlayer != Null && GUIPlayer.Score != Null) {
			declare netread Integer Net_TMWC2023_PlayerInfo_PlayerStatsUpdate for GUIPlayer.Score = 0;
			if (State.PlayerStatsUpdate != Net_TMWC2023_PlayerInfo_PlayerStatsUpdate) {
				State = UpdatePlayerStats(State, GUIPlayer.Score, Net_TMWC2023_PlayerInfo_PlayerStatsUpdate);
			}
		}
		if (State.IsSpectating != Shared::IsSpectating(This)) {
			State = SetVisibility(State, State.DisplayModule, Shared::IsSpectating(This));
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}