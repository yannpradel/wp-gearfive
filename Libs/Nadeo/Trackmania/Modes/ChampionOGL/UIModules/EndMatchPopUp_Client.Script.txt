/**
 *  UI module: EndMatchPopUp client side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/ChampionOGL/UIModules/EndMatchPopUp_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/Trackmania/Components/PopUpBackground.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as MenuConst
#Include "Libs/Nadeo/Trackmania/Modes/ChampionOGL/Constants.Script.txt" as ChampionOGLConst

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_ChampionOGL_EndMatchPopUp"
#Const C_Type CUILayer::EUILayerType::Normal
#Const C_PopUpName "EndMatchPopUp"
#Const C_NavGroupName "navgroup-endmatchpopup"

#Const C_Img_PopUpHeader "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/HUD_scorestable_header.dds"
#Const C_Img_PopUpBg "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/HUD_scorestable_body.dds"

#Const C_TrophyDecimals 2

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Champion OGL] Title of a pop-up displayed at the end of the league match
	declare Text Text_Congratulations = _("Congratulations");
	//L16N [Champion OGL] Display the number of the step that the player completed. eg: "Step 3 completed".
	declare Text Text_StepCompleted = _("Step %1 completed");
	//L16N [Champion OGL] Display the rank of the player at the end of the league match. eg: "You finished 1st in your league match".
	declare Text Text_MatchRank = _("You finished $<$7FA%1$> in your league match");
	//L16N [Champion OGL] Display the number of points won by the player. Always more than 2. eg: "You won 5000 points for the Open Grand League".
	declare Text Text_MatchPoints = _("You won $<$7FA%1$> points for the Open Grand League");
	//L16N [Champion OGL] Display the number of points won by the player. eg: "You won 1 point for the Open Grand League".
	declare Text Text_1Point = _("You won $<$7FA1$> point for the Open Grand League");
	//L16N [Champion OGL] Display the number of points won by the player. eg: "You won 0 points for the Open Grand League".
	declare Text Text_0Points = _("You won $<$7FA0$> points for the Open Grand League");
	//L16N [Champion OGL] Title of section explaining what is happening next.
	declare Text Text_WhatsNext = _("What's next");
	//L16N [Champion OGL] Explains what will happens after this league match. eg: "Come back next week for step 3 to get more points for the Open Grand League"
	declare Text Text_ComeBack = _("Come back next week for step %1 to get more points for the Open Grand League");
	//L16N [Champion OGL] Explains what will happens after this league match.
	declare Text Text_LastStep = _("Check your final Open Grand League rank on the event page");
	declare Text Text_Exit = _("Close");

	declare Vec2 Size_Background = <260., 260.>;

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-title" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" textsize="8" textprefix="$t$i" />
	<style class="text-subtitle" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" textsize="6" textprefix="$t$i" />
	<style class="text-header" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" textsize="4" textprefix="$t$i" />
	<style class="text-trophy" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" textsize="15" textprefix="$t$i" />
	<style class="text-body" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" textsize="2" textprefix="$t$i" />
</stylesheet>
<frame z-index="{{{ChampionOGLConst::C_ZIndex_EndMatchPopUp}}}" hidden="1" id="frame-global">
	<frame id="frame-content">
		<frame id="frame-pop-up">
			<frameinstance
				modelid="{{{PopUpBackground::C_Name}}}"
				z-index="-1"
				data-pop-up-name="{{{C_PopUpName}}}"
				data-background-url="{{{C_Img_PopUpBg}}}"
				data-background-position="0 8.5"
				data-background-size="{{{Size_Background.X}}} {{{Size_Background.Y}}}"
				data-header-background-url="{{{C_Img_PopUpHeader}}}"
				data-header-background-position="0 8.5"
				data-header-background-size="{{{Size_Background.X}}} {{{Size_Background.Y}}}"
				data-button-close-position="{{{(Size_Background.X * 0.5) - 12.5}}} 81"
				data-button-close-size="11 11"
				data-button-close-opacity="0.7"
			/>
			<frame pos="0 80" z-index="1">
				<frame pos="6 1">
					<label id="label-title" class="text-title" size="{{{Size_Background.X - 110}}} 10" halign="center" text="{{{Text_Congratulations}}}" />
					<label id="label-step-completed" class="text-subtitle" pos="-1.1 -10" size="{{{Size_Background.X - 120}}} 10" halign="center" text="{{{Text_StepCompleted}}}" />
					<quad id="quad-division" pos="71 -4" size="28 28" autoscale="0" image="{{{MenuConst::C_ImageUrl_Medal_Gold}}}" />
				</frame>
				<frame pos="6 -32">
					<label id="label-match-rank" class="text-header" size="{{{Size_Background.X - 50}}} 10" halign="center" text="{{{Text_MatchRank}}}" />
					<frame id="frame-trophies" pos="0 -7">
						<frame pos="-30 0">
							<quad id="quad-icon" size="22 22" halign="right" autoscale="0" />
							<label id="label-amount" class="text-trophy" pos="-6 -19" z-index="1" size="13 22" valign="bottom" />
						</frame>
						<frame pos="1 0">
							<quad id="quad-icon" size="22 22" halign="right" autoscale="0" />
							<label id="label-amount" class="text-trophy" pos="-6 -19" z-index="1" size="13 22" valign="bottom" />
						</frame>
						<frame pos="32 0">
							<quad id="quad-icon" size="22 22" halign="right" autoscale="0" />
							<label id="label-amount" class="text-trophy" pos="-6 -19" z-index="1" size="13 22" valign="bottom" />
							<label id="label-remaining" class="text-trophy" pos="4 -17.5" z-index="2" size="50 22" valign="bottom" opacity="0.6" textsize="7.8" />
						</frame>
					</frame>
					<label id="label-match-points" class="text-header" pos="-6 -34" size="{{{Size_Background.X - 50}}} 10" halign="center" text="{{{Text_MatchPoints}}}" />
				</frame>
				<frame pos="-7 -106">
					<label id="label-whats-next" class="text-header" size="{{{Size_Background.X - 50}}} 10" halign="center" text="{{{Text_WhatsNext}}}" />
					<label id="label-next-step" class="text-body" pos="-1 -8" size="{{{Size_Background.X - 55}}} 10" halign="center" autonewline="1" maxline="5" text="{{{Text_LastStep}}}" />
				</frame>
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-exit"
					pos="-14 -150"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{Text_Exit}}}"
					data-size="60 12"
					data-labelsize="40 12"
					data-opacityunfocus=".5"
					data-image="{{{MenuConst::C_ImageUrl_ButtonBG_LocalMulti_Play}}}"
					data-imagefocus="{{{MenuConst::C_ImageUrl_ButtonBG_LocalMulti_Play}}}"
					data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
					data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
					data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}"
					data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}"
					data-textsize="5"
					data-textopacityunfocus=".5"
					data-iconopacityunfocus=".5"
					data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
					data-textitalicslope=".2"
					data-halign="center"
					data-valign="bottom"
					data-nav-inputs="select;cancel"
					data-nav-targets="_;_"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
					data-menusounds-selectsound="IngameSelectQuit"
				/>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML

#Const C_DivisionsMedals {{{dump(ChampionOGLConst::C_DivisionsMedals)}}}
#Const C_TrophyDecimals {{{dump(C_TrophyDecimals)}}}
""",
"""
Void SetDivision(CMlQuad _Quad_Division, Text _Division) {
	if (C_DivisionsMedals.existskey(_Division)) {
		_Quad_Division.ImageUrl = C_DivisionsMedals[_Division];
		_Quad_Division.Visible = True;
	} else {
		_Quad_Division.Visible = False;
	}
}

Text GetTrophyIcon(Integer _Trophy) {
	switch (_Trophy) {
		case 1: return "{{{MenuConst::C_ImageUrl_Trophy_512_Bronze1}}}";
		case 2: return "{{{MenuConst::C_ImageUrl_Trophy_512_Bronze2}}}";
		case 3: return "{{{MenuConst::C_ImageUrl_Trophy_512_Bronze3}}}";
		case 4: return "{{{MenuConst::C_ImageUrl_Trophy_512_Silver1}}}";
		case 5: return "{{{MenuConst::C_ImageUrl_Trophy_512_Silver2}}}";
		case 6: return "{{{MenuConst::C_ImageUrl_Trophy_512_Silver3}}}";
		case 7: return "{{{MenuConst::C_ImageUrl_Trophy_512_Gold1}}}";
		case 8: return "{{{MenuConst::C_ImageUrl_Trophy_512_Gold2}}}";
		case 9: return "{{{MenuConst::C_ImageUrl_Trophy_512_Gold3}}}";
	}
	return "{{{MenuConst::C_ImageUrl_Trophy_512_None}}}";
}

Void SetStep(CMlLabel _Label_StepCompleted, CMlLabel _Label_NextStep, Integer _StepCurrent, Integer _StepMax) {
	_Label_StepCompleted.Value = TL::Compose("{{{Text_StepCompleted}}}", ""^_StepCurrent);
	if (_StepMax > 0 && _StepCurrent >= _StepMax) {
		_Label_NextStep.Value = "{{{Text_LastStep}}}";
	} else {
		_Label_NextStep.Value = TL::Compose("{{{Text_ComeBack}}}", ""^(_StepCurrent + 1));
	}
}

Void SetResult(
	CMlLabel _Label_MatchRank,
	CMlFrame _Frame_Trophies,
	CMlLabel _Label_MatchPoints,
	Integer _Rank,
	Integer _Points,
	Integer[Integer] _Trophies
) {
	if (_Rank > 0) {
		_Label_MatchRank.Value = TL::Compose("{{{Text_MatchRank}}}", TL::FormatRank(_Rank, False));
	} else {
		_Label_MatchRank.Value = TL::Compose("{{{Text_MatchRank}}}", "-");
	}

	if (_Points > 1) {
		_Label_MatchPoints.Value = TL::Compose("{{{Text_MatchPoints}}}", ""^_Points);
	} else if (_Points == 1) {
		_Label_MatchPoints.Value = "{{{Text_1Point}}}";
	} else {
		_Label_MatchPoints.Value = "{{{Text_0Points}}}";
	}

	declare Integer[Integer] SortedTrophies = _Trophies.sortkeyreverse();
	declare Integer[][] Trophies;
	foreach (Trophy => Amount in SortedTrophies) {
		if (Amount > 0) Trophies.add([Trophy, Amount]);
	}
	if (Trophies.count > 0) {
		foreach (Key => Control in _Frame_Trophies.Controls) {
			declare CMlFrame Frame_Trophy <=> (Control as CMlFrame);
			if (Key == 0) {
				if (Trophies.count == 1) {
					Frame_Trophy.RelativePosition_V3.X = 1.;
				} else {
					Frame_Trophy.RelativePosition_V3.X = -30.;
				}
			}
			if (Trophies.existskey(Key)) {
				declare CMlQuad Quad_Icon <=> (Frame_Trophy.GetFirstChild("quad-icon") as CMlQuad);
				declare CMlLabel Label_Amount <=> (Frame_Trophy.GetFirstChild("label-amount") as CMlLabel);
				Quad_Icon.ImageUrl = GetTrophyIcon(Trophies[Key][0]);
				Label_Amount.Value = ""^Trophies[Key][1];

				declare CMlLabel Label_Remaining <=> (Frame_Trophy.GetFirstChild("label-remaining") as CMlLabel);
				if (Label_Remaining != Null) {
					declare Text Remaining;
					declare Boolean OnlyZero = True;
					declare Integer TrophyStop = Trophies[Key][0] - 1;
					// We trust that the amount of trophies cannot be above 9
					for (I, 1, TrophyStop) {
						declare TrophyLevel = TrophyStop - I + 1;
						if (SortedTrophies.existskey(TrophyLevel) && SortedTrophies[TrophyLevel] >= 0) {
							Remaining ^= SortedTrophies[TrophyLevel];
							OnlyZero = False;
						} else {
							Remaining ^= "0";
						}
						if (I >= C_TrophyDecimals) break;
					}
					if (Remaining != "" && !OnlyZero) {
						Label_Remaining.Value = "."^Remaining;
						Label_Remaining.RelativePosition_V3.X = Label_Amount.RelativePosition_V3.X - 3. + ML::Min(Label_Amount.Size.X, Label_Amount.ComputeWidth(Label_Amount.Value));
						Label_Remaining.Visible = True;
					} else {
						Label_Remaining.Visible = False;
					}
				}

				Frame_Trophy.Visible = True;
			} else {
				Control.Visible = False;
			}
		}
		_Frame_Trophies.Visible = True;
	} else {
		_Frame_Trophies.Visible = False;
	}
}

Void Toggle(CMlFrame _Frame_PopUp, Boolean _Enabled) {
	_Frame_PopUp.Visible = _Enabled;
}

Void Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);

		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);

		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void Select(CMlFrame _Frame_PopUp, CMlControl _Control) {
	if (_Control == Null) return;

	switch (_Control.ControlId) {
		case "button-exit": {
			Toggle(_Frame_PopUp, False);
		}
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Content;
declare CMlFrame Frame_PopUp;
declare CMlQuad Quad_Division;
declare CMlLabel Label_StepCompleted;
declare CMlLabel Label_NextStep;
declare CMlLabel Label_MatchRank;
declare CMlFrame Frame_Trophies;
declare CMlLabel Label_MatchPoints;
declare CMlFrame Button_Exit;

declare netread Boolean Net_ChampionOGL_EndMatchPopUp_DisplayContent for UI = False;
declare netread Text Net_ChampionOGL_EndMatchPopUp_Division for Teams[0];
declare netread Integer Net_ChampionOGL_EndMatchPopUp_StepCurrent for Teams[0];
declare netread Integer Net_ChampionOGL_EndMatchPopUp_StepMax for Teams[0];
declare netread Integer Net_ChampionOGL_EndMatchPopUp_Rank for UI;
declare netread Integer Net_ChampionOGL_EndMatchPopUp_Points for UI;
declare netread Integer[Integer] Net_ChampionOGL_EndMatchPopUp_Trophies for UI;
declare netread Integer Net_ChampionOGL_EndMatchPopUp_ResultUpdate for UI;

declare Boolean DisplayModule;
declare Boolean DisplayContent;
declare Text Division;
declare Integer StepCurrent;
declare Integer StepMax;
declare Integer ResultUpdate;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Content <=> (Page.GetFirstChild("frame-content") as CMlFrame);
Frame_PopUp <=> (Frame_Content.GetFirstChild("frame-pop-up") as CMlFrame);
Quad_Division <=> (Frame_PopUp.GetFirstChild("quad-division") as CMlQuad);
Label_StepCompleted <=> (Frame_PopUp.GetFirstChild("label-step-completed") as CMlLabel);
Label_NextStep <=> (Frame_PopUp.GetFirstChild("label-next-step") as CMlLabel);
Label_MatchRank <=> (Frame_PopUp.GetFirstChild("label-match-rank") as CMlLabel);
Frame_Trophies <=> (Frame_PopUp.GetFirstChild("frame-trophies") as CMlFrame);
Label_MatchPoints <=> (Frame_PopUp.GetFirstChild("label-match-points") as CMlLabel);
Button_Exit <=> (Frame_PopUp.GetFirstChild("button-exit") as CMlFrame);

DisplayModule = Frame_Global.Visible;
DisplayContent = Frame_Content.Visible;
Division = Net_ChampionOGL_EndMatchPopUp_Division;
StepCurrent = Net_ChampionOGL_EndMatchPopUp_StepCurrent;
StepMax = Net_ChampionOGL_EndMatchPopUp_StepMax;
ResultUpdate = Net_ChampionOGL_EndMatchPopUp_ResultUpdate;

{{{Navigation::P}}}UseLocalEvents(This, True);
Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Button_Exit);
SetDivision(Quad_Division, Division);
SetStep(Label_StepCompleted, Label_NextStep, StepCurrent, StepMax);
SetResult(
	Label_MatchRank,
	Frame_Trophies,
	Label_MatchPoints,
	Net_ChampionOGL_EndMatchPopUp_Rank,
	Net_ChampionOGL_EndMatchPopUp_Points,
	Net_ChampionOGL_EndMatchPopUp_Trophies
);
***

***MainLoop***
***
if (!EnableMenuNavigationInputs && PageIsVisible && Frame_Global.Visible && Frame_Content.Visible && Frame_PopUp.Visible) {
	EnableMenuNavigation(True, False, False, Null, {{{ChampionOGLConst::C_ZIndex_EndMatchPopUp}}});
} else if (EnableMenuNavigationInputs && (!PageIsVisible || !Frame_Global.Visible || !Frame_Content.Visible || !Frame_PopUp.Visible)) {
	EnableMenuNavigation(False, False, False, Null, {{{ChampionOGLConst::C_ZIndex_EndMatchPopUp}}});
}

if (PageIsVisible) {
	if (InputPlayer != Null) {
		declare netread Boolean Net_ChampionOGL_EndMatchPopUp_IsVisible for InputPlayer;
		if (DisplayModule != Net_ChampionOGL_EndMatchPopUp_IsVisible) {
			DisplayModule = Net_ChampionOGL_EndMatchPopUp_IsVisible;
			Frame_Global.Visible = Net_ChampionOGL_EndMatchPopUp_IsVisible;
		}

		if (DisplayContent != Net_ChampionOGL_EndMatchPopUp_DisplayContent) {
			DisplayContent = Net_ChampionOGL_EndMatchPopUp_DisplayContent;
			Frame_Content.Visible = DisplayContent;
		}
	}

	if (InputPlayer == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_Content.Visible) {
		if (Division != Net_ChampionOGL_EndMatchPopUp_Division) {
			Division = Net_ChampionOGL_EndMatchPopUp_Division;
			SetDivision(Quad_Division, Division);
		}

		if (
			StepCurrent != Net_ChampionOGL_EndMatchPopUp_StepCurrent ||
			StepMax != Net_ChampionOGL_EndMatchPopUp_StepMax
		) {
			StepCurrent = Net_ChampionOGL_EndMatchPopUp_StepCurrent;
			StepMax = Net_ChampionOGL_EndMatchPopUp_StepMax;
			SetStep(Label_StepCompleted, Label_NextStep, StepCurrent, StepMax);
		}

		if (ResultUpdate != Net_ChampionOGL_EndMatchPopUp_ResultUpdate) {
			ResultUpdate = Net_ChampionOGL_EndMatchPopUp_ResultUpdate;
			SetResult(
				Label_MatchRank,
				Frame_Trophies,
				Label_MatchPoints,
				Net_ChampionOGL_EndMatchPopUp_Rank,
				Net_ChampionOGL_EndMatchPopUp_Points,
				Net_ChampionOGL_EndMatchPopUp_Trophies
			);
		}

		foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
			if (
				Event.Type == {{{PopUpBackground::P}}}C_Event_LeavePopUp &&
				Event.PopUpName == "{{{C_PopUpName}}}" &&
				Event.FromCloseButton
			) {
				Toggle(Frame_PopUp, False);
			}
		}

		foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{Navigation::P}}}C_EventType_NavigateInput: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							Select(Frame_PopUp, Event.To);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							Toggle(Frame_PopUp, False);
						} else {
							Focus(Event.From, Event.To);
						}
					}
				}
				case {{{Navigation::P}}}C_EventType_NavigateMouse: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							Select(Frame_PopUp, Event.To);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							Focus(Event.From, Event.To);
						}
					}
				}
			}
		}
	}
}
***
""",
		[
			Navigation::ComponentV2(),
			MenuSounds::ComponentV2(),
			PopUpBackground::ComponentV2(),
			Button::ComponentV2()
		],
		[]
	);
}