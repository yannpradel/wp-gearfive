/**
 *	Component with the button to stay on the server
 *	or leave the server after being eliminated
 */
#Const Version "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/Royal/StayLeaveButtons.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/Trackmania/Modes/Royal/SuperRoyal_Client.Script.txt" as SuperRoyal
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/MatchResult_Client.Script.txt" as MatchResult

#Const C_Name "royal-stay-leave-buttons" //< Component name
#Const P "RoyalStayLeaveButtons_" //< Prefix use to differentiate functions/variables in the script
#Const C_NavGroup_Buttons "navgroup-royal-stay-leave-buttons"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Get the component
Text Component(Real _SizeY_Button) {
	//L16N [Royal StayLeaveButtons] Click on this button to leave the server after being eliminated.
	declare Text Text_Quit = _("Quit");
	//L16N [Royal StayLeaveButtons] Click on this button to stay on the server after being eliminated and continue to spectate the match.
	declare Text Text_Stay = _("|Verb|Stay");
	//L16N [Royal StayLeaveButtons] In SuperRoyal, click on this button to stay on the server after being eliminated and continue to spectate the match.
	declare Text Text_Wait = _("Wait for next match");

	declare Text Img_ButtonLeft = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup_ButtonLeft.dds";
	declare Text Img_ButtonRight = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup_ButtonRight.dds";
	declare Text Img_ButtonFull = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup_Button.dds";

	declare Vec2 ImgSize_ButtonLeft = <520., 104.>;
	declare Vec2 ImgSize_ButtonRight = <496., 104.>;
	declare Vec2 ImgSize_ButtonFull = <1960., 184.>;

	declare Vec2 Size_ButtonLeft = <_SizeY_Button * (ImgSize_ButtonLeft.X / ImgSize_ButtonLeft.Y), _SizeY_Button>;
	declare Vec2 Size_ButtonRight = <_SizeY_Button * (ImgSize_ButtonRight.X / ImgSize_ButtonRight.Y), _SizeY_Button>;
	declare Vec2 Size_ButtonFull = <_SizeY_Button * (ImgSize_ButtonFull.X / ImgSize_ButtonFull.Y), _SizeY_Button> * 0.889;
	declare Vec2 Size_ButtonsClip = <Size_ButtonLeft.X + Size_ButtonRight.X + 20., _SizeY_Button + 5.>;
	declare Vec2 Pos_ButtonsHidden = MLHelpers::SkewX(<0., _SizeY_Button>, 10.);

	return MV::Component(
		C_Name,
"""
<frame size="{{{Size_ButtonsClip.X}}} {{{Size_ButtonsClip.Y}}}" halign="center" valign="top">
	<frame id="{{{P}}}frame-display-anim" pos="{{{Pos_ButtonsHidden.X}}} {{{Pos_ButtonsHidden.Y}}}" hidden="1">
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="{{{P}}}button-quit"
			pos="2.3 0" z-index="2"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_Quit}}}"
			data-size="{{{Size_ButtonLeft.X}}} {{{Size_ButtonLeft.Y}}}"
			data-labelsize="{{{Size_ButtonLeft.X}}} {{{Size_ButtonLeft.Y}}}"
			data-textxpos="0.5"
			data-opacityunfocus=".5"
			data-image="{{{Img_ButtonLeft}}}"
			data-imagefocus="{{{Img_ButtonLeft}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-icon="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
			data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
			data-iconxpos=".15"
			data-iconypos="-.5"
			data-textsize="5"
			data-textopacityunfocus=".5"
			data-iconopacityunfocus=".5"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-textitalicslope=".2"
			data-halign="right"
			data-nav-inputs="select;right"
			data-nav-targets="_;{{{P}}}button-stay"
			data-nav-group="{{{C_NavGroup_Buttons}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="{{{P}}}button-stay"
			pos="-1.2 0" z-index="2"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_Stay}}}"
			data-size="{{{Size_ButtonRight.X}}} {{{Size_ButtonRight.Y}}}"
			data-labelsize="{{{Size_ButtonRight.X}}} {{{Size_ButtonRight.Y}}}"
			data-textxpos="0.5"
			data-opacityunfocus=".5"
			data-image="{{{Img_ButtonRight}}}"
			data-imagefocus="{{{Img_ButtonRight}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-icon="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
			data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
			data-iconxpos=".85"
			data-iconypos="-.5"
			data-textsize="5"
			data-textopacityunfocus=".5"
			data-iconopacityunfocus=".5"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-textitalicslope=".2"
			data-halign="left"
			data-nav-inputs="select;left"
			data-nav-targets="_;{{{P}}}button-quit"
			data-nav-group="{{{C_NavGroup_Buttons}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="{{{P}}}button-wait"
			pos="-1.5 -1." z-index="1"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_Wait}}}"
			data-size="{{{Size_ButtonFull.X}}} {{{Size_ButtonFull.Y}}}"
			data-labelsize="90 10"
			data-textxpos="0.5"
			data-opacityunfocus=".5"
			data-image="{{{Img_ButtonFull}}}"
			data-imagefocus="{{{Img_ButtonFull}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-icon="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
			data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
			data-iconxpos=".95"
			data-iconypos="-.5"
			data-textsize="5"
			data-fitlabel="2"
			data-textopacityunfocus=".5"
			data-iconopacityunfocus=".5"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-textitalicslope=".2"
			data-halign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_Buttons}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
			hidden="1"
		/>
	</frame>
</frame>
""",
"""
#Struct {{{P}}}K_Controls {
	CMlFrame Frame_DisplayAnim;
	CMlFrame Button_Quit;
	CMlFrame Button_Stay;
	CMlFrame Button_Wait;
}

#Struct {{{P}}}K_State {
	{{{P}}}K_Controls Controls;
	Boolean IsVisible;
	Boolean DisplayButtons;
	Integer DisplayAnimEndTime;
	Boolean SuperRoyalEnabled;
	Boolean SuperRoyalFinale;
	Integer SuperRoyalRoundNumber;
	Integer TeamsRankUpdate;
	Integer InputPlayerClan;
	Boolean IsLastRound;
}

#Struct {{{P}}}K_Event {
	Integer Type;
	Integer Selection;
}

#Const {{{P}}}C_NavGroup_Buttons {{{dump(C_NavGroup_Buttons)}}}
#Const {{{P}}}C_DisplayAnimDuration 250

#Const {{{P}}}C_EventType_Selection 0

#Const {{{P}}}C_Selection_Quit 0
#Const {{{P}}}C_Selection_Stay 1
#Const {{{P}}}C_Selection_Wait 2
""",
"""
declare {{{P}}}K_State {{{P}}}G_State;
declare {{{P}}}K_Event[] {{{P}}}PendingEvents;

Void {{{P}}}Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void {{{P}}}SetVisibility(Boolean _IsVisible, Integer[Integer] _TeamsRank, Boolean _ClickedOnStay) {
	declare Integer TeamRank = _TeamsRank.get({{{P}}}G_State.InputPlayerClan, -1);
	declare Boolean DisplayWaitButton = (
		{{{P}}}G_State.SuperRoyalEnabled &&
		!{{{P}}}G_State.SuperRoyalFinale &&
		{{{P}}}G_State.SuperRoyalRoundNumber == 1 &&
		!{{{P}}}G_State.IsLastRound &&
		TeamRank >= 1 &&
		TeamRank <= 12
	);

	{{{P}}}G_State.IsVisible = _IsVisible;
	{{{P}}}G_State.DisplayButtons = {{{P}}}G_State.IsVisible && TeamRank >= 1 && !_ClickedOnStay;

	if (DisplayWaitButton) {
		{{{P}}}G_State.Controls.Button_Wait.Visible = True;
		{{{P}}}G_State.Controls.Button_Quit.Visible = False;
		{{{P}}}G_State.Controls.Button_Stay.Visible = False;
	} else {
		{{{P}}}G_State.Controls.Button_Wait.Visible = False;
		{{{P}}}G_State.Controls.Button_Quit.Visible = True;
		{{{P}}}G_State.Controls.Button_Stay.Visible = True;
	}

	{{{Navigation::P}}}Lock({{{P}}}G_State.Controls.Button_Wait, !{{{P}}}G_State.Controls.Button_Wait.Visible);
	{{{Navigation::P}}}Lock({{{P}}}G_State.Controls.Button_Quit, !{{{P}}}G_State.Controls.Button_Quit.Visible);
	{{{Navigation::P}}}Lock({{{P}}}G_State.Controls.Button_Stay, !{{{P}}}G_State.Controls.Button_Stay.Visible);

	if ({{{P}}}G_State.DisplayButtons) {
		declare CMlControl CurrentFocus = {{{Navigation::P}}}GetFocusedControl(This, {{{P}}}C_NavGroup_Buttons);
		if (DisplayWaitButton) {
			if (CurrentFocus != {{{P}}}G_State.Controls.Button_Wait) {
				{{{P}}}Focus(CurrentFocus, {{{P}}}G_State.Controls.Button_Wait);
			}
		} else {
			if (CurrentFocus != {{{P}}}G_State.Controls.Button_Quit && CurrentFocus != {{{P}}}G_State.Controls.Button_Stay) {
				{{{P}}}Focus(CurrentFocus, {{{P}}}G_State.Controls.Button_Stay);
			}
		}
	}

	AnimMgr.Flush({{{P}}}G_State.Controls.Frame_DisplayAnim);
	declare Vec2 Pos = <0., 0.>;
	declare Boolean Hidden = False;
	if (!{{{P}}}G_State.DisplayButtons) {
		Pos = {{{dump(Pos_ButtonsHidden)}}};
		Hidden = True;
	}
	{{{P}}}G_State.DisplayAnimEndTime = Now + {{{P}}}C_DisplayAnimDuration;
	AnimMgr.Add({{{P}}}G_State.Controls.Frame_DisplayAnim, "<anim pos=\""^Pos.X^" "^Pos.Y^"\" hidden=\""^Hidden^"\" />", {{{P}}}C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
}
Void {{{P}}}SetVisibility(Boolean _IsVisible) {
	{{{P}}}SetVisibility(_IsVisible, {{{MatchResult::P}}}GetTeamsRank(), {{{MatchResult::P}}}GetClickedOnStay());
}

Void {{{P}}}Select(CMlControl _SelectedControl) {
	if (_SelectedControl == Null || {{{P}}}G_State.DisplayAnimEndTime >= Now || !{{{P}}}G_State.DisplayButtons) return;

	switch (_SelectedControl.ControlId) {
		case "{{{P}}}button-quit": {
			{{{P}}}PendingEvents.add({{{P}}}K_Event {
				Type = {{{P}}}C_EventType_Selection,
				Selection = {{{P}}}C_Selection_Quit
			});
			if (Playground != Null) {
				Playground.QuitServer(False);
			}
		}
		case "{{{P}}}button-stay": {
			{{{P}}}PendingEvents.add({{{P}}}K_Event {
				Type = {{{P}}}C_EventType_Selection,
				Selection = {{{P}}}C_Selection_Stay
			});
			{{{MatchResult::P}}}SetClickedOnStay(True);
		}
		case "{{{P}}}button-wait": {
			{{{P}}}PendingEvents.add({{{P}}}K_Event {
				Type = {{{P}}}C_EventType_Selection,
				Selection = {{{P}}}C_Selection_Wait
			});
			{{{MatchResult::P}}}SetClickedOnStay(True);
		}
	}
}

Boolean {{{P}}}ButtonsAreVisible() {
	return {{{P}}}G_State.DisplayButtons;
}

***MainStart***
***
{{{P}}}G_State = {{{P}}}K_State {
	Controls = {{{P}}}K_Controls {},
	IsVisible = False,
	DisplayButtons = False,
	DisplayAnimEndTime = -1,
	SuperRoyalEnabled = {{{SuperRoyal::P}}}GetSuperRoyalEnabled(),
	SuperRoyalFinale = {{{SuperRoyal::P}}}GetSuperRoyalFinale(),
	SuperRoyalRoundNumber = {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber(),
	TeamsRankUpdate = {{{MatchResult::P}}}GetTeamsRankUpdate(),
	InputPlayerClan = -1,
	IsLastRound = {{{MatchResult::P}}}IsLastRound()
};

{{{P}}}G_State.Controls.Frame_DisplayAnim <=> (Page.GetFirstChild("{{{P}}}frame-display-anim") as CMlFrame);
{{{P}}}G_State.Controls.Button_Quit <=> ({{{P}}}G_State.Controls.Frame_DisplayAnim.GetFirstChild("{{{P}}}button-quit") as CMlFrame);
{{{P}}}G_State.Controls.Button_Stay <=> ({{{P}}}G_State.Controls.Frame_DisplayAnim.GetFirstChild("{{{P}}}button-stay") as CMlFrame);
{{{P}}}G_State.Controls.Button_Wait <=> ({{{P}}}G_State.Controls.Frame_DisplayAnim.GetFirstChild("{{{P}}}button-wait") as CMlFrame);

{{{Navigation::P}}}UseLocalEvents(This, True);
{{{P}}}SetVisibility({{{P}}}G_State.IsVisible);
***

***MainLoop***
***
{{{P}}}PendingEvents = [];

if ({{{P}}}G_State.IsVisible) {
	if (
		{{{P}}}G_State.SuperRoyalEnabled != {{{SuperRoyal::P}}}GetSuperRoyalEnabled() ||
		{{{P}}}G_State.SuperRoyalFinale != {{{SuperRoyal::P}}}GetSuperRoyalFinale() ||
		{{{P}}}G_State.SuperRoyalRoundNumber != {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber() ||
		{{{P}}}G_State.TeamsRankUpdate != {{{MatchResult::P}}}GetTeamsRankUpdate() ||
		{{{P}}}G_State.IsLastRound != {{{MatchResult::P}}}IsLastRound() ||
		(InputPlayer == Null && {{{P}}}G_State.InputPlayerClan != -1) ||
		(InputPlayer != Null && {{{P}}}G_State.InputPlayerClan != InputPlayer.CurrentClan)
	) {
		{{{P}}}G_State.SuperRoyalEnabled = {{{SuperRoyal::P}}}GetSuperRoyalEnabled();
		{{{P}}}G_State.SuperRoyalFinale = {{{SuperRoyal::P}}}GetSuperRoyalFinale();
		{{{P}}}G_State.SuperRoyalRoundNumber = {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber();
		{{{P}}}G_State.TeamsRankUpdate = {{{MatchResult::P}}}GetTeamsRankUpdate();
		{{{P}}}G_State.IsLastRound = {{{MatchResult::P}}}IsLastRound();
		if (InputPlayer != Null) {
			{{{P}}}G_State.InputPlayerClan = InputPlayer.CurrentClan;
		} else {
			{{{P}}}G_State.InputPlayerClan = -1;
		}
		{{{P}}}SetVisibility({{{P}}}G_State.IsVisible);
	}

	if (IsMenuNavigationForeground) {
		foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{Navigation::P}}}C_EventType_NavigateInput: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, {{{P}}}C_NavGroup_Buttons)) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							{{{P}}}Select(Event.To);
						} else {
							{{{P}}}Focus(Event.From, Event.To);
						}
					}
				}
				case {{{Navigation::P}}}C_EventType_NavigateMouse: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, {{{P}}}C_NavGroup_Buttons)) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							{{{P}}}Select(Event.To);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							{{{P}}}Focus(Event.From, Event.To);
						}
					}
				}
			}
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	Navigation::ComponentV2(),
	SuperRoyal::Component(),
	MatchResult::Component()
],
[]
	);
}