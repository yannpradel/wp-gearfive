/**
 *	UI module: SegmentComplete client side
 */
#Const Version		"1.0.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/SegmentComplete_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Constants.Script.txt" as CommonConst
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/Royal/Constants.Script.txt" as RoyalConst
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/SegmentComplete_Common.Script.txt" as UIModules_SegmentComplete_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/ZIndex.Script.txt" as ZIndex
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_SegmentComplete_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_SegmentComplete_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Royal SegmentComplete] Display the name of the player that completed the last race section. %1 will be replaced by the name of the player. %2 and %3 will be replaced by the color of the section. eg: "Alex has finished the red section"
	declare Text Text_TeamComplete = _("$<%1$> has finished the $<%2%3$> section");
	//L16N [Royal SegmentComplete] Message displayed when the player completes a section of the race. %1 and %2 will be replaced by the color of the section. eg: "You have finished the red section"
	declare Text Text_YouComplete = _("You have finished the $<%1%2$> section");
	//L16N [Royal SegmentComplete] Display the name of the player that completed the last loop on the section. %1 will be replaced by the name of the player. %2 and %3 will be replaced by the color of the section. %4 will be replaced by the number of the loop. eg: "Alex has finished the black loop #2"
	declare Text Text_TeamLoop = _("$<%1$> has finished the $<%2%3$> loop %4");
	//L16N [Royal SegmentComplete] Message displayed when the player completes a loop on a section of the race. %1 and %2 will be replaced by the color of the section. %3 will be replaced by the number of the loop. eg: "You have finished the black loop #2"
	declare Text Text_YouLoop = _("You have finished the $<%1%2$> loop %3");
	//L16N [Royal SegmentComplete] If the player presses the displayed button, they will respawn with their teammate. %1 will be replaced by a button icon or key name. eg: "Press [Del] to join your teammate".
	declare Text Text_JoinTeamPad = _("Press %1 to join your teammate");
	//L16N [Royal SegmentComplete] If the player presses the displayed button, they will respawn with their teammate. %1 will be replaced by a button icon or key name. eg: "Press [Del] to join your teammate".
	declare Text Text_JoinTeamKeyboard = _("Press [%1] to join your teammate");
	//L16N [Royal SegmentComplete] If the player presses the button displayed beside this text, they will respawn with their teammate.
	declare Text Text_JoinTeam = _("Join your teammate");
	//L16N [Royal SegmentComplete] Text displayed if an action is not bound to a button.
	declare Text Text_NoBind = _("|Input|No binding");
	//L16N [Royal SegmentComplete] Text displayed when a player complete a segment and add a given amount of bonus time to their team. %1 will be replaced by the amount of bonus time. eg: "Bonus time +2"
	declare Text Text_BonusTime = _("Bonus time %1");

	declare Vec2 Size_ButtonJoin = <7., 7.>;
	declare Real Margin_ButtonJoin = 1.;
	declare Vec2 Size_LabelMessage = <200., 10.>;
	declare Vec2 Size_LabelJoin = <Size_LabelMessage.X - Margin_ButtonJoin - Size_ButtonJoin.X, 10.>;

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-bold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" />
	<style class="text-semibold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$t$i" />
</stylesheet>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_SegmentComplete}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_SegmentComplete_Common::C_UIModuleConfig)}}}>
		<frame id="frame-message" hidden="1">
			<frame id="frame-clip" z-index="0" size="240 12" halign="center" valign="center">
				<quad id="quad-message" size="220 180" rot="10" halign="center" valign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" />
			</frame>
			<label id="label-message" z-index="1" {{{MLHelpers::Size(Size_LabelMessage)}}} halign="center" valign="center2" textsize="6" class="text-bold" />
			<quad id="quad-button-join" pos="0 -10" z-index="2" {{{MLHelpers::Size(Size_ButtonJoin)}}} halign="center" valign="center" hidden="1" />
			<label id="label-join" z-index="3" pos="0 -10" {{{MLHelpers::Size(Size_LabelJoin)}}} halign="center" valign="center2" class="text-semibold" textsize="3" />
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/CMGame/Modes/Clans_Client.Script.txt" as Clans
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/TMGame/Utils/Difficulty.Script.txt" as Difficulty

{{{dumptype(UIModules_SegmentComplete_Common::K_LastSegmentActivation)}}}

#Struct K_Segment {
	Text Name;
	Text Color;
}

#Const C_ShowAnimDuration 250
#Const C_HideAnimDuration 250
#Const C_DisplayDuration 3000
#Const C_PadInputs {{{dump(CommonConst::C_PadInputCharacters)}}}
#Const C_StayAtBlackSegment {{{dump(RoyalConst::C_StayAtBlackSegment)}}}

#Const C_Margin_ButtonJoin {{{dump(Margin_ButtonJoin)}}}
""",
"""
K_Segment GetSegment(Integer _Segment) {
	return K_Segment {
		Name = Difficulty::GetRoyalSegmentName(_Segment),
		Color = "$"^Difficulty::GetRoyalSegmentColorHex3(_Segment)
	};
}

Text GetCompleteMessage(Text _Name, Integer _LoopNb, K_Segment _Segment) {
	if (C_StayAtBlackSegment && _LoopNb > 0) {
		if (_Name == "") {
			return TL::Compose("{{{Text_YouLoop}}}", _Segment.Color, _Segment.Name, "#"^_LoopNb);
		}
		return TL::Compose("{{{Text_TeamLoop}}}", _Name, _Segment.Color, _Segment.Name, "#"^_LoopNb);
	} else if (_Name == "") {
		return TL::Compose("{{{Text_YouComplete}}}", _Segment.Color, _Segment.Name);
	}
	return TL::Compose("{{{Text_TeamComplete}}}", _Name, _Segment.Color, _Segment.Name);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Message;
declare CMlFrame Frame_Clip;
declare CMlQuad Quad_Message;
declare CMlLabel Label_Message;
declare CMlLabel Label_Join;
declare CMlQuad Quad_ButtonJoin;

declare netread K_LastSegmentActivation[Integer] Net_Royal_SegmentComplete_LastSegmentActivations for Teams[0];
declare netread Integer Net_Royal_SegmentComplete_LastSegmentActivationsUpdate for Teams[0];

declare Boolean DisplayModule;
declare Integer LastSegmentActivationsUpdate;
declare Integer TargetedClan;
declare Integer ClanLastSegmentActivationTime;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Message <=> (Frame_Global.GetFirstChild("frame-message") as CMlFrame);
Frame_Clip <=> (Frame_Message.GetFirstChild("frame-clip") as CMlFrame);
Quad_Message <=> (Frame_Message.GetFirstChild("quad-message") as CMlQuad);
Label_Message <=> (Frame_Message.GetFirstChild("label-message") as CMlLabel);
Label_Join <=> (Frame_Message.GetFirstChild("label-join") as CMlLabel);
Quad_ButtonJoin <=> (Frame_Message.GetFirstChild("quad-button-join") as CMlQuad);

DisplayModule = Frame_Global.Visible;
LastSegmentActivationsUpdate = -1;
TargetedClan = -1;
ClanLastSegmentActivationTime = -1;
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Royal_SegmentComplete_IsVisible for Owner;
		if (DisplayModule != Net_Royal_SegmentComplete_IsVisible) {
			DisplayModule = Net_Royal_SegmentComplete_IsVisible;
			Frame_Global.Visible = Net_Royal_SegmentComplete_IsVisible;
		}
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Frame_Global.Visible = DisplayModule;
	}

	if (Frame_Global.Visible) {
		if (
			(GUIPlayer != Null && TargetedClan != GUIPlayer.CurrentClan) ||
			(GUIPlayer == Null && TargetedClan != -1)
		) {
			if (GUIPlayer == Null) {
				TargetedClan = -1;
			} else {
				TargetedClan = GUIPlayer.CurrentClan;
			}
			// When spectating another clan, update activation time here to not display an old segment activation
			// the next time someone complete a segment
			if (TargetedClan > 0 && Net_Royal_SegmentComplete_LastSegmentActivations.existskey(TargetedClan)) {
				ClanLastSegmentActivationTime = Net_Royal_SegmentComplete_LastSegmentActivations[TargetedClan].Time;
			}
		}

		if (LastSegmentActivationsUpdate != Net_Royal_SegmentComplete_LastSegmentActivationsUpdate) {
			LastSegmentActivationsUpdate = Net_Royal_SegmentComplete_LastSegmentActivationsUpdate;

			if (
				TargetedClan > 0 &&
				Net_Royal_SegmentComplete_LastSegmentActivations.existskey(TargetedClan) &&
				ClanLastSegmentActivationTime != Net_Royal_SegmentComplete_LastSegmentActivations[TargetedClan].Time
			) {
				declare K_LastSegmentActivation LastSegmentActivation = Net_Royal_SegmentComplete_LastSegmentActivations[TargetedClan];
				ClanLastSegmentActivationTime = LastSegmentActivation.Time;

				// Find player name, use team name otherwise
				declare Text Name = Clans::GetClanName(TargetedClan);
				if (LastSegmentActivation.AccountId != "") {
					foreach (Player in Players) {
						if (Player.User != Null && Player.User.WebServicesUserId == LastSegmentActivation.AccountId) {
							Name = {{{UserStore::P}}}GetPlayerName(Player.User, True);
							break;
						}
					}
				}

				// Display message if
				// - The player or team has a name
				// - The team completed a new segment
				// - The target player completed a segment with bonus time
				if (
					Name != "" && (
						!LastSegmentActivation.OnlyBonusTime || (
							GUIPlayer != Null &&
							GUIPlayer.User != Null &&
							GUIPlayer.User.WebServicesUserId == LastSegmentActivation.AccountId &&
							LastSegmentActivation.BonusTime != 0
						)
					)
				) {
					declare K_Segment Segment = GetSegment(LastSegmentActivation.Segment);
					AnimMgr.Flush(Frame_Message);
					AnimMgr.Flush(Quad_Message);
					AnimMgr.Flush(Label_Message);
					AnimMgr.Flush(Label_Join);
					AnimMgr.Flush(Quad_ButtonJoin);

					declare Real MessageSizeX;
					declare Text MessageValue;
					declare Text JoinValue;
					declare Boolean DisplayButtonJoin;
					Frame_Message.Visible = True;
					Frame_Message.RelativeScale = 1.1;
					Frame_Message.RelativePosition_V3.Y = 5.;
					Quad_Message.Opacity = 0.;
					Label_Message.Opacity = 0.;
					Label_Join.Opacity = 0.;
					Quad_ButtonJoin.Opacity = 0.;

					if (LastSegmentActivation.OnlyBonusTime) {
						// You completed a segment that your team already completed but gained bonus time
						if (GUIPlayer != Null && GUIPlayer.User != Null && GUIPlayer.User.WebServicesUserId == LastSegmentActivation.AccountId) {
							if (InputPlayer != Null && InputPlayer.User != Null && InputPlayer.User.WebServicesUserId == LastSegmentActivation.AccountId) {
								MessageValue = GetCompleteMessage("", LastSegmentActivation.LoopNb, Segment);
							} else {
								MessageValue = GetCompleteMessage(Name, LastSegmentActivation.LoopNb, Segment);
							}
							if (LastSegmentActivation.BonusTime > 0) {
								JoinValue = TL::Compose("{{{Text_BonusTime}}}", "+"^LastSegmentActivation.BonusTime);
							} else if (LastSegmentActivation.BonusTime < 0) {
								JoinValue = TL::Compose("{{{Text_BonusTime}}}", ""^LastSegmentActivation.BonusTime);
							}
						}
					} else if (InputPlayer != Null && InputPlayer.User != Null && InputPlayer.User.WebServicesUserId == LastSegmentActivation.AccountId) {
						// You have finished the segment
						MessageValue = GetCompleteMessage("", LastSegmentActivation.LoopNb, Segment);
						if (LastSegmentActivation.BonusTime > 0) {
							JoinValue = TL::Compose("{{{Text_BonusTime}}}", "+"^LastSegmentActivation.BonusTime);
						} else if (LastSegmentActivation.BonusTime < 0) {
							JoinValue = TL::Compose("{{{Text_BonusTime}}}", ""^LastSegmentActivation.BonusTime);
						}
					} else if (
						(InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) ||
						!LastSegmentActivation.CanJoin
					) {
						// The player you are spectating has finished the segment
						// Or you cannot join your teammates yet
						MessageValue = GetCompleteMessage(Name, LastSegmentActivation.LoopNb, Segment);
					} else {
						// A player from your team has finished the segment

						// Find latest active input device
						declare Integer MinIdleDuration = 0;
						declare CInputPad ActivePad = Null;
						foreach (Pad in Input.Pads) {
							if (Pad.Type != CInputPad::EPadType::Mouse) {
								if (ActivePad == Null || MinIdleDuration > Pad.IdleDuration) {
									ActivePad = Pad;
									MinIdleDuration = Pad.IdleDuration;
								}
							}
						}
						if (ActivePad != Null) {
							declare Text Binding_Restart = Input.GetActionBinding(ActivePad, "Vehicle", "GiveUp");
							declare Text BindingRaw_Restart = Input.GetActionBindingRaw(ActivePad, "Vehicle", "GiveUp");
							DisplayButtonJoin = ButtonIcon::CanGetPadButtonIcon(ActivePad) && BindingRaw_Restart != "";

							if (DisplayButtonJoin) {
								Quad_ButtonJoin.ImageUrl = ButtonIcon::GetPadButtonIcon(System, ActivePad, BindingRaw_Restart);
								JoinValue = "{{{Text_JoinTeam}}}";
							} else if (Binding_Restart == "") {
								JoinValue = TL::Compose("{{{Text_JoinTeamKeyboard}}}", "{{{Text_NoBind}}}");
							} else if (C_PadInputs.exists(Binding_Restart)) {
								JoinValue = TL::Compose("{{{Text_JoinTeamPad}}}", Binding_Restart);
							} else {
								JoinValue = TL::Compose("{{{Text_JoinTeamKeyboard}}}", Binding_Restart);
							}
						} else {
							JoinValue = TL::Compose("{{{Text_JoinTeamKeyboard}}}", "{{{Text_NoBind}}}");
						}

						MessageValue = GetCompleteMessage(Name, LastSegmentActivation.LoopNb, Segment);
					}

					Quad_ButtonJoin.Visible = DisplayButtonJoin;
					declare Real ButtonJoinSizeX = 0.;
					if (Quad_ButtonJoin.Visible) ButtonJoinSizeX = Quad_ButtonJoin.Size.X + C_Margin_ButtonJoin;
					Label_Join.Visible = JoinValue != "";
					Label_Message.Value = MessageValue;
					Tools::FitLabelValue(Label_Message, 6., 3., 1.);
					Tools::FirstPartyLogoMatchLuminance(Label_Message);
					if (JoinValue == "") {
						Label_Message.RelativePosition_V3 = <0., 0.>;
						Frame_Clip.Size.Y = 12.;
						MessageSizeX = ML::Min(Label_Message.Size.X, Label_Message.ComputeWidth(Label_Message.Value));
					} else {
						Label_Join.Value = JoinValue;
						Label_Message.RelativePosition_V3 = {{{MLHelpers::SkewX(<0., 3.>, 10.)}}};
						Label_Join.RelativePosition_V3 = {{{MLHelpers::SkewX(<0., -4.>, 10.)}}} - <ButtonJoinSizeX * 0.5, 0.>;
						Frame_Clip.Size.Y = 16.;
						declare Real JoinMessageSizeX = ML::Min(Label_Join.Size.X, Label_Join.ComputeWidth(Label_Join.Value)) + ButtonJoinSizeX;
						MessageSizeX = ML::Max(
							ML::Min(Label_Message.Size.X, Label_Message.ComputeWidth(Label_Message.Value)),
							JoinMessageSizeX
						);
						Quad_ButtonJoin.RelativePosition_V3 = <Label_Join.RelativePosition_V3.X + (JoinMessageSizeX * 0.5), Label_Join.RelativePosition_V3.Y>;
					}
					Quad_Message.Size.X = MessageSizeX + 2.;

					AnimMgr.Add(Frame_Message, "<a pos=\"0 0\" scale=\"1\" />", C_ShowAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(Quad_Message, "<a opacity=\"0.6\" />", C_ShowAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(Label_Message, "<a opacity=\"1\" />", C_ShowAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(Label_Join, "<a opacity=\"1\" />", C_ShowAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(Quad_ButtonJoin, "<a opacity=\"1\" />", C_ShowAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);

					AnimMgr.Add(Frame_Message, "<a pos=\"0 -5\" scale=\"0.9\" hidden=\"1\" />", Now + C_ShowAnimDuration + C_DisplayDuration, C_HideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(Quad_Message, "<a opacity=\"0\" />", Now + C_ShowAnimDuration + C_DisplayDuration, C_HideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(Label_Message, "<a opacity=\"0\" />", Now + C_ShowAnimDuration + C_DisplayDuration, C_HideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(Label_Join, "<a opacity=\"0\" />", Now + C_ShowAnimDuration + C_DisplayDuration, C_HideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(Quad_ButtonJoin, "<a opacity=\"0\" />", Now + C_ShowAnimDuration + C_DisplayDuration, C_HideAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			}
		}
	}
}
***
""",
[
	UIModules::Component(),
	UserStore::ComponentV2()
],
[]
	);
}