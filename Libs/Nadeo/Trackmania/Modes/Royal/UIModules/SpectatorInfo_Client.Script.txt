/**
 *	UI module: SpectatorInfo client side
 */
#Const Version		"1.0.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/SpectatorInfo_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as MenuConst
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/SpectatorInfo_Common.Script.txt" as UIModules_SpectatorInfo_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/Spectator_Client.Script.txt" as Spectator
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/ZIndex.Script.txt" as ZIndex
#Include "Libs/Nadeo/Trackmania/Modes/Royal/SuperRoyal_Client.Script.txt" as SuperRoyal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ImgPath "file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal"
#Const UIModules_SpectatorInfo_Common::C_UIModuleConfig as C_UIModuleConfig
#Const C_Class_Interactive "interactive"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_SpectatorInfo_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_SpectatorInfo_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Text Img_NameBg = C_ImgPath^"/hud_royal_scoretable_team_name_bg.dds";
	declare Text Img_TeamColor = C_ImgPath^"/hud_marker_team.dds";

	//L16N [Spectator Info Royal] Display the qualification phase number of the Super Royal competition, %1 will be replaced by a number. e.g "Qualification phase 2"
	declare Text Text_QualifNumber = _("Qualification phase %1");
	//L16N [Spectator Info Royal] Last phase of the Super Royal competition
	declare Text Text_Finale =  _("Finale");

	declare Real NameBgWidth = 50.;
	declare Vec2 Size_Name = <NameBgWidth, NameBgWidth * (108. / 668.)>;
	declare Vec2 Size_NameBg = Size_Name * 1.1;
	declare Vec2 Size_NameLabel = <Size_Name.X * 0.98, Size_Name.Y>;
	declare Vec2 Size_TeamColor = <Size_Name.Y * (64. / 128.), Size_Name.Y>;
	declare Vec2 Size_Flag = <Size_Name.Y * (4. / 3.), Size_Name.Y>;
	declare Vec2 Size_Arrow = <Size_Name.Y, Size_Name.Y> * 1.4;
	declare Vec2 Size_Center = <(Size_Name.X + Size_TeamColor.X + Size_Flag.X) * 1.06, Size_Name.Y>;
	declare Vec2 Pos_ArrowLeft = <(Size_Arrow.X * 0.5), 0.>;
	declare Vec2 Pos_Center = <Pos_ArrowLeft.X + (Size_Arrow.X * 0.5), 0.>;
	declare Vec2 Pos_Flag = <0., 0.>;
	declare Vec2 Pos_TeamColor = <Pos_Flag.X + (Size_Flag.X * 1.1), 0.>;
	declare Vec2 Pos_NameBg = <Pos_TeamColor.X + (Size_TeamColor.X * 0.55), 0.>;
	declare Vec2 Pos_NameLabel = <Pos_NameBg.X + (Size_NameBg.X * 0.05), 0.>;
	declare Vec2 Pos_ArrowRight = <Pos_Center.X + Pos_NameBg.X + Size_NameBg.X + (Size_Arrow.X * 0.5), 0.>;
	declare Vec2 Size_ButtonIcon = <Size_Name.Y, Size_Name.Y>;
	declare Vec2 Pos_ButtonIconPrevPlayer = <Pos_ArrowLeft.X - (Size_Arrow.X * 0.5) - 1., Pos_ArrowLeft.Y>;
	declare Vec2 Pos_ButtonIconNextPlayer = <Pos_ArrowRight.X + (Size_Arrow.X * 0.5) + 1., Pos_ArrowLeft.Y>;
	declare Real SkewX_Flag = 0.25;
	declare Vec2 Size_CenterAndArrows = <(Pos_ArrowRight.X - Pos_ArrowLeft.X) + ((Size_ButtonIcon.X + 1) * 2) + Size_Arrow.X, Size_NameBg.Y>;
	declare Vec2 Size_Clip = <Size_CenterAndArrows.X, (90. + C_UIModuleConfig.Properties.Position.Y) * 2>;

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-bold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" />
</stylesheet>
<framemodel id="framemodel-spectator-info">
	<frame {{{MLHelpers::Pos(Pos_Center)}}} {{{MLHelpers::Size(Size_Center)}}} valign="center">
		<frame id="frame-center">
			<quad id="quad-flag" {{{MLHelpers::Pos(Pos_Flag)}}} z-index="2" {{{MLHelpers::Size(Size_Flag)}}} pincorners="<{{{0. + SkewX_Flag}}},1.>:<{{{2. + SkewX_Flag}}},1.>:<2.,-1.>:<0.,-1.>" valign="center" />
			<quad id="quad-team-color" {{{MLHelpers::Pos(Pos_TeamColor)}}} z-index="1" {{{MLHelpers::Size(Size_TeamColor)}}} valign="center" image="{{{Img_TeamColor}}}" opacity="0.9" />
			<quad {{{MLHelpers::Pos(Pos_NameBg)}}} z-index="0" {{{MLHelpers::Size(Size_NameBg)}}} valign="center" image="{{{Img_NameBg}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" />
			<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" {{{MLHelpers::Pos(Pos_NameLabel)}}} z-index="4" data-{{{MLHelpers::Size(Size_NameLabel)}}} data-valign="center2" data-textsize="3" data-textcolor="ffffff" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" data-textprefix="$t$i" />
		</frame>
	</frame>
	<frame id="frame-arrows">
		<quad id="button-next-player" {{{MLHelpers::Pos(Pos_ArrowLeft)}}} z-index="3" {{{MLHelpers::Size(Size_Arrow)}}} halign="center" valign="center" image="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}" colorize="ffffff" opacity="0.6" scriptevents="1" class="{{{C_Class_Interactive}}}" />
		<quad id="button-prev-player" {{{MLHelpers::Pos(Pos_ArrowRight)}}} z-index="3" {{{MLHelpers::Size(Size_Arrow)}}} halign="center" valign="center" image="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}" colorize="ffffff" opacity="0.6" scriptevents="1" class="{{{C_Class_Interactive}}}" />
		<frameinstance id="button-icon-prev-player" modelid="{{{ButtonIcon::C_Name}}}" {{{MLHelpers::Pos(Pos_ButtonIconPrevPlayer)}}} z-index="1" data-size="{{{Size_ButtonIcon.X}}} {{{Size_ButtonIcon.Y}}}" data-halign="right" data-valign="center" data-hideformouse="1" />
		<frameinstance id="button-icon-next-player" modelid="{{{ButtonIcon::C_Name}}}" {{{MLHelpers::Pos(Pos_ButtonIconNextPlayer)}}} z-index="1" data-size="{{{Size_ButtonIcon.X}}} {{{Size_ButtonIcon.Y}}}" data-halign="left" data-valign="center" data-hideformouse="1" />
	</frame>
</framemodel>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_SpectatorInfo}}}" hidden="1">
	<frame id="frame-super-royal-logo" pos="-125 100" halign="center" valign="center" hidden="1">
		<quad id="quad-super-royal-logo" size="30 30" halign="center" valign="center2"/>
	</frame>
	<frame id="frame-super-royal-match" pos="0 100" halign="center" valign="center" hidden="1">
		<label id="label-super-royal-match" size="100 20" halign="center" valign="center" textsize="4.5" class="text-bold" />
	</frame>
	<frame {{{UIModules::CustomizableUIModule(UIModules_SpectatorInfo_Common::C_UIModuleConfig)}}}>
		<frame {{{MLHelpers::Size(Size_Clip)}}} halign="center" valign="center">
			<frame id="frame-display-anim" pos="0 {{{-Size_Clip.Y}}}">
				<frame pos="{{{Size_CenterAndArrows.X * -0.5}}} 0">
					<frame {{{MLHelpers::Size(Size_CenterAndArrows)}}} halign="left" valign="center">
						<frame id="frame-spectators" pos="{{{Size_ButtonIcon.X + 1}}} 0">
							<frameinstance modelid="framemodel-spectator-info" />
							<frameinstance modelid="framemodel-spectator-info" />
						</frame>
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Modes/Clans_Client.Script.txt" as Clans
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModulesData.Script.txt" as UIModulesData

#Struct K_SpectatorInfo {
	CMlFrame Frame_SpectatorInfo;
	CMlFrame Frame_Center;
	CMlFrame Frame_Arrows;
	CMlQuad Quad_Flag;
	CMlQuad Quad_TeamColor;
	CMlFrame PlayerName_Name;
	CMlFrame ButtonIcon_NextPlayer;
	CMlFrame ButtonIcon_PrevPlayer;
}

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_DisplayAnim;
	CMlFrame Frame_SuperRoyalLogo;
	CMlQuad Quad_SuperRoyal_Logo;
	CMlFrame Frame_SuperRoyalMatch;
	CMlLabel Label_SuperRoyalMatch;
	K_SpectatorInfo[] SpectatorInfo;
}

#Struct K_State {
	K_Controls Controls;
	Boolean IsDisplayed_HasValidTarget;
	Boolean IsDisplayed_DisplayModule;
	Boolean IsDisplayed;
	Ident TargetPlayerId;
	Integer TargetPlayerClan;
	Boolean TargetPlayerHasTeammates;
	Boolean TargetPlayerHadTeammates;
	Integer DisplayAnimEndTime;
	Integer SwitchDirection;
	Boolean SwitchedTarget;
	Boolean SwitchedClan;
}

#Const C_DisplayAnimDuration 250
#Const C_SwitchAnimDuration 250
#Const C_Next 1
#Const C_Prev -1
#Const C_SuperRoyal_Logos {{{dump(MenuConst::C_SuperRoyal_Logos)}}}
""",
"""
K_State SetVisibility(K_State _State, Boolean _HasValidTarget, Boolean _DisplayModule, Boolean _IsSuperRoyal) {
	declare K_State State = _State;

	State.IsDisplayed_HasValidTarget = _HasValidTarget;
	State.IsDisplayed_DisplayModule = _DisplayModule;
	declare Boolean NewVisibility = State.IsDisplayed_HasValidTarget && State.IsDisplayed_DisplayModule;

	if (State.IsDisplayed != NewVisibility) {
		State.IsDisplayed = NewVisibility;

		AnimMgr.Flush(State.Controls.Frame_DisplayAnim);
		AnimMgr.Flush(State.Controls.Frame_SuperRoyalLogo);
		AnimMgr.Flush(State.Controls.Frame_SuperRoyalMatch);
		State.Controls.Frame_Global.Visible = True;
		State.Controls.Frame_DisplayAnim.Visible = True;
		State.Controls.Frame_SuperRoyalLogo.Visible = State.IsDisplayed && _IsSuperRoyal;
		State.Controls.Frame_SuperRoyalMatch.Visible = State.IsDisplayed && _IsSuperRoyal;

		if (State.IsDisplayed) {
			// If the hiding animation was still in progress, play the show animation now
			// Otherwise the UI will remain stopped in the screen, possibly overlapping the countdown
			// because the show animation starts only after a delay.
			declare Integer Delay = C_SwitchAnimDuration + UIModulesData::C_SpecModeActivationDelay;
			if (State.Controls.Frame_DisplayAnim.RelativePosition_V3.Y > {{{-Size_Clip.Y}}} && State.Controls.Frame_DisplayAnim.RelativePosition_V3.Y < 0.) {
				Delay = 0;
			}
			State.DisplayAnimEndTime = Now + Delay + C_DisplayAnimDuration;
			AnimMgr.Add(State.Controls.Frame_DisplayAnim, "<a pos=\"0 0\" hidden=\"0\" />", Now + Delay, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			if (_IsSuperRoyal) {
				AnimMgr.Add(State.Controls.Frame_SuperRoyalLogo, "<a pos=\"-125 80\" hidden=\"0\" />", Now + Delay, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(State.Controls.Frame_SuperRoyalMatch, "<a pos=\"0 85\" hidden=\"0\" />", Now + Delay, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		} else {
			State.DisplayAnimEndTime = Now + C_DisplayAnimDuration;
			AnimMgr.Add(State.Controls.Frame_DisplayAnim, "<a pos=\"0 {{{-Size_Clip.Y}}}\" hidden=\"1\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				if (_IsSuperRoyal) {
				AnimMgr.Add(State.Controls.Frame_SuperRoyalLogo, "<a pos=\"-125 100\" hidden=\"1\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(State.Controls.Frame_SuperRoyalMatch, "<a pos=\"0 100\" hidden=\"1\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	}

	return State;
}

K_State Update(K_State _State, CSmPlayer _TargetPlayer, Boolean _DisplayModule, Boolean _IsSuperRoyal, Boolean _IsSuperRoyalFinale, Integer _SuperRoyalMatchNumber, Text _SuperRoyalDivision) {
	declare K_State State = _State;

	if (_TargetPlayer == Null) {
		State.TargetPlayerId = NullId;
		State.TargetPlayerClan = -1;
		State.TargetPlayerHasTeammates = False;
	} else {
		if (State.TargetPlayerId != _TargetPlayer.Id) {
			State.SwitchedTarget = True;
			State.TargetPlayerId = _TargetPlayer.Id;
		}

		if (State.TargetPlayerClan != _TargetPlayer.CurrentClan) {
			State.SwitchedClan = True;
			State.TargetPlayerClan = _TargetPlayer.CurrentClan;
		}
	}

	if (_IsSuperRoyal) {
		if (_IsSuperRoyalFinale) State.Controls.Label_SuperRoyalMatch.Value = "{{{Text_Finale}}}";
		else State.Controls.Label_SuperRoyalMatch.Value = TL::Compose("{{{Text_QualifNumber}}}", ""^_SuperRoyalMatchNumber);
		State.Controls.Quad_SuperRoyal_Logo.ImageUrl = C_SuperRoyal_Logos.get(_SuperRoyalDivision, "");
	}

	State = SetVisibility(State, _TargetPlayer != Null && _TargetPlayer.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned && _TargetPlayer != InputPlayer, _DisplayModule, _IsSuperRoyal);

	if (State.IsDisplayed && (State.SwitchedTarget || State.SwitchedClan)) {
		State.TargetPlayerHasTeammates = False;
		foreach (Player in Players) {
			if (Player.CurrentClan == State.TargetPlayerClan && Player.Id != State.TargetPlayerId) {
				State.TargetPlayerHasTeammates = True;
				break;
			}
		}

		foreach (Key => SpectatorInfo in State.Controls.SpectatorInfo) {
			AnimMgr.Flush(SpectatorInfo.Frame_SpectatorInfo);
			AnimMgr.Flush(SpectatorInfo.Frame_Center);
			SpectatorInfo.Frame_SpectatorInfo.RelativePosition_V3 = <0., 0.>;
			SpectatorInfo.Frame_Center.RelativePosition_V3 = <0., 0.>;
			SpectatorInfo.Frame_SpectatorInfo.Visible = True;
			SpectatorInfo.Frame_Center.Visible = (Key == 0);
			SpectatorInfo.Frame_Arrows.Visible = (Key == 0);
		}

		if (_TargetPlayer != Null && _TargetPlayer.User != Null) {
			State.Controls.SpectatorInfo[1].Quad_Flag.ImageUrl = State.Controls.SpectatorInfo[0].Quad_Flag.ImageUrl;
			State.Controls.SpectatorInfo[1].Quad_TeamColor.Colorize = State.Controls.SpectatorInfo[0].Quad_TeamColor.Colorize;
			{{{PlayerName::P}}}CopyName(This, State.Controls.SpectatorInfo[0].PlayerName_Name, State.Controls.SpectatorInfo[1].PlayerName_Name);

			State.Controls.SpectatorInfo[0].Quad_Flag.ImageUrl = _TargetPlayer.User.CountryFlagUrl;
			State.Controls.SpectatorInfo[0].Quad_TeamColor.Colorize = Clans::GetClanColor(_TargetPlayer.CurrentClan);
			{{{PlayerName::P}}}SetUser(This, State.Controls.SpectatorInfo[0].PlayerName_Name, _TargetPlayer.User, True);
			State.Controls.SpectatorInfo[0].Quad_Flag.Visible = True;
			State.Controls.SpectatorInfo[0].Quad_TeamColor.Visible = True;
			State.Controls.SpectatorInfo[0].PlayerName_Name.Visible = True;

			if (State.SwitchedClan) {
				State.Controls.SpectatorInfo[1].Frame_Arrows.Visible = State.TargetPlayerHadTeammates;
				State.Controls.SpectatorInfo[1].Frame_Center.Visible = True;
				State.Controls.SpectatorInfo[0].Frame_Arrows.Visible = State.TargetPlayerHasTeammates;
				State.Controls.SpectatorInfo[0].Frame_SpectatorInfo.RelativePosition_V3.Y = {{{Size_Clip.Y}}};
				AnimMgr.Add(State.Controls.SpectatorInfo[0].Frame_SpectatorInfo, "<a pos=\"0 0\" hidden=\"0\" />", C_SwitchAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(State.Controls.SpectatorInfo[1].Frame_SpectatorInfo, "<a pos=\"0 "^{{{-Size_Clip.Y}}}^"\" hidden=\"1\" />", C_SwitchAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				declare Real EndPosX = 0.;
				declare Real StartPosX = 0.;
				if (State.SwitchDirection > 0) {
					EndPosX = {{{Size_Center.X}}};
					StartPosX = {{{-Size_Center.X}}};
				} else {
					EndPosX = {{{-Size_Center.X}}};
					StartPosX = {{{Size_Center.X}}};
				}

				State.Controls.SpectatorInfo[1].Frame_Center.Visible = True;
				State.Controls.SpectatorInfo[0].Frame_Center.RelativePosition_V3.X = StartPosX;
				AnimMgr.Add(State.Controls.SpectatorInfo[0].Frame_Center, "<a pos=\"0 0\" hidden=\"0\" />", C_SwitchAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(State.Controls.SpectatorInfo[1].Frame_Center, "<a pos=\""^EndPosX^" 0\" hidden=\"1\" />", C_SwitchAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		} else {
			State.Controls.SpectatorInfo[0].Frame_Center.Visible = True;
			State.Controls.SpectatorInfo[0].Quad_Flag.Visible = False;
			State.Controls.SpectatorInfo[0].Quad_TeamColor.Visible = False;
			State.Controls.SpectatorInfo[0].PlayerName_Name.Visible = False;
			State.Controls.SpectatorInfo[1].Frame_Center.Visible = False;
		}

		State.SwitchDirection = 0;
		State.TargetPlayerHadTeammates = State.TargetPlayerHasTeammates;
		State.SwitchedTarget = False;
		State.SwitchedClan = False;
	}

	return State;
}

// When using a keyboard, only presses on the menu navigation key will trigger an update
// All the other keys will not update the `IdleDuration` of the `Pad`
Void UpdateButtonIcons(K_State _State, Ident _PadId) {
	foreach (SpectatorInfo in _State.Controls.SpectatorInfo) {
		if (Input.Pads.existskey(_PadId)) {
			declare CInputPad Pad = Input.Pads[_PadId];
			if (Pad.Type == CInputPad::EPadType::Mouse) {
				SpectatorInfo.ButtonIcon_NextPlayer.Visible = False;
				SpectatorInfo.ButtonIcon_PrevPlayer.Visible = False;
			} else {
				declare Text BindingRaw_SpectateNextPlayer = Input.GetActionBindingRaw(Pad, "Vehicle", "SpectatorTargetNext");
				declare Text Binding_SpectateNextPlayer = Input.GetActionBinding(Pad, "Vehicle", "SpectatorTargetNext");
				declare Text BindingRaw_SpectatePreviousPlayer = Input.GetActionBindingRaw(Pad, "Vehicle", "SpectatorTargetPrev");
				declare Text Binding_SpectatePreviousPlayer = Input.GetActionBinding(Pad, "Vehicle", "SpectatorTargetPrev");
				if (BindingRaw_SpectateNextPlayer != "") {
					SpectatorInfo.ButtonIcon_NextPlayer.Visible = True;
					if (Pad.Type == CInputPad::EPadType::Keyboard) {
						{{{ButtonIcon::P}}}SetBind(This, SpectatorInfo.ButtonIcon_NextPlayer, "", False);
						{{{ButtonIcon::P}}}SetKeyboardKeyName(This, SpectatorInfo.ButtonIcon_NextPlayer, BindingRaw_SpectateNextPlayer, Binding_SpectateNextPlayer);
					} else {
						{{{ButtonIcon::P}}}SetKeyboardKeyName(This, SpectatorInfo.ButtonIcon_NextPlayer, "", "", False);
						{{{ButtonIcon::P}}}SetBind(This, SpectatorInfo.ButtonIcon_NextPlayer, BindingRaw_SpectateNextPlayer);
					}
				} else {
					SpectatorInfo.ButtonIcon_NextPlayer.Visible = False;
				}
				if (BindingRaw_SpectatePreviousPlayer != "") {
					SpectatorInfo.ButtonIcon_PrevPlayer.Visible = True;
					if (Pad.Type == CInputPad::EPadType::Keyboard) {
						{{{ButtonIcon::P}}}SetBind(This, SpectatorInfo.ButtonIcon_PrevPlayer, "", False);
						{{{ButtonIcon::P}}}SetKeyboardKeyName(This, SpectatorInfo.ButtonIcon_PrevPlayer, BindingRaw_SpectatePreviousPlayer, Binding_SpectatePreviousPlayer);
					} else {
						{{{ButtonIcon::P}}}SetKeyboardKeyName(This, SpectatorInfo.ButtonIcon_PrevPlayer, "", "", False);
						{{{ButtonIcon::P}}}SetBind(This, SpectatorInfo.ButtonIcon_PrevPlayer, BindingRaw_SpectatePreviousPlayer);
					}
				} else {
					SpectatorInfo.ButtonIcon_PrevPlayer.Visible = False;
				}
			}
		} else {
			SpectatorInfo.ButtonIcon_NextPlayer.Visible = False;
			SpectatorInfo.ButtonIcon_PrevPlayer.Visible = False;
		}
	}
}

***MainInit***
***
declare netread Boolean Net_Royal_SpectatorInfo_IsVisible for UI;

declare K_State State;
***

***MainStart***
***
State = K_State {
	Controls = K_Controls {},
	IsDisplayed_HasValidTarget = False,
	IsDisplayed_DisplayModule = False,
	IsDisplayed = False,
	TargetPlayerId = NullId,
	TargetPlayerClan = -1,
	TargetPlayerHasTeammates = False,
	TargetPlayerHadTeammates = False,
	DisplayAnimEndTime = -1,
	SwitchDirection = 0,
	SwitchedTarget = True,
	SwitchedClan = True
};

State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_DisplayAnim <=> (State.Controls.Frame_Global.GetFirstChild("frame-display-anim") as CMlFrame);
State.Controls.Frame_SuperRoyalLogo <=> (State.Controls.Frame_Global.GetFirstChild("frame-super-royal-logo") as CMlFrame);
State.Controls.Quad_SuperRoyal_Logo <=> (State.Controls.Frame_Global.GetFirstChild("quad-super-royal-logo") as CMlQuad);
State.Controls.Frame_SuperRoyalMatch <=> (State.Controls.Frame_Global.GetFirstChild("frame-super-royal-match") as CMlFrame);
State.Controls.Label_SuperRoyalMatch <=> (State.Controls.Frame_Global.GetFirstChild("label-super-royal-match") as CMlLabel);
declare CMlFrame Frame_Spectators <=> (State.Controls.Frame_DisplayAnim.GetFirstChild("frame-spectators") as CMlFrame);
foreach (Control in Frame_Spectators.Controls) {
	declare CMlFrame Frame_SpectatorInfo <=> (Control as CMlFrame);
	State.Controls.SpectatorInfo.add(K_SpectatorInfo {
		Frame_SpectatorInfo = Frame_SpectatorInfo,
		Frame_Center = (Frame_SpectatorInfo.GetFirstChild("frame-center") as CMlFrame),
		Frame_Arrows = (Frame_SpectatorInfo.GetFirstChild("frame-arrows") as CMlFrame),
		Quad_Flag = (Frame_SpectatorInfo.GetFirstChild("quad-flag") as CMlQuad),
		Quad_TeamColor = (Frame_SpectatorInfo.GetFirstChild("quad-team-color") as CMlQuad),
		PlayerName_Name = (Frame_SpectatorInfo.GetFirstChild("playername-name") as CMlFrame),
		ButtonIcon_NextPlayer = (Frame_SpectatorInfo.GetFirstChild("button-icon-next-player") as CMlFrame),
		ButtonIcon_PrevPlayer = (Frame_SpectatorInfo.GetFirstChild("button-icon-prev-player") as CMlFrame)
	});
}

State = Update(State, GUIPlayer, False, {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());
UpdateButtonIcons(State, Tools::GetActivePadId(Input, False));
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.IsDisplayed_DisplayModule != Net_Royal_SpectatorInfo_IsVisible) {
		State = Update(State, GUIPlayer, Net_Royal_SpectatorInfo_IsVisible, {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());
	}

	if (State.IsDisplayed_DisplayModule) {
		if (
			(GUIPlayer != Null && (GUIPlayer.Id != State.TargetPlayerId || GUIPlayer.CurrentClan != State.TargetPlayerClan)) ||
			(GUIPlayer == Null && (State.TargetPlayerId != NullId || State.TargetPlayerClan != -1))
		) {
			State = Update(State, GUIPlayer, State.IsDisplayed_DisplayModule, {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());
		}

		foreach (Event in PendingEvents) {
			if (Event.Type == CMlScriptEvent::Type::MouseOver) {
				if (Event.Control.HasClass("{{{C_Class_Interactive}}}")) {
					AnimMgr.Flush(Event.Control);
					AnimMgr.Add(Event.Control, "<a opacity=\"1\" scale=\"1.05\" />", 125, CAnimManager::EAnimManagerEasing::QuadIn);
				}
			} else if (Event.Type == CMlScriptEvent::Type::MouseOut) {
				if (Event.Control.HasClass("{{{C_Class_Interactive}}}")) {
					AnimMgr.Flush(Event.Control);
					AnimMgr.Add(Event.Control, "<a opacity=\"0.6\" scale=\"1\" colorize=\"ffffff\" />", 125, CAnimManager::EAnimManagerEasing::QuadIn);
				}
			} else if (Event.Type == CMlScriptEvent::Type::MouseClick) {
				if (Event.Control.HasClass("{{{C_Class_Interactive}}}")) {
					AnimMgr.Flush(Event.Control);
					AnimMgr.Add(Event.Control, "<a colorize=\"{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}\" />", 125, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.AddChain(Event.Control, "<a colorize=\"ffffff\" />", 125, CAnimManager::EAnimManagerEasing::QuadOut);
				}
				if (GUIPlayer != Null) {
					if (Event.ControlId == "button-next-player") {
						{{{Spectator::P}}}SpectateNextClanPlayer(GUIPlayer);
						State.SwitchDirection = 1;
					} else if (Event.ControlId == "button-prev-player") {
						{{{Spectator::P}}}SpectatePrevClanPlayer(GUIPlayer);
						State.SwitchDirection = -1;
					}
				}
			}
		}

		foreach (Event in {{{ButtonIcon::P}}}GetPendingEvents(This)) {
			if (Event.Type == {{{ButtonIcon::P}}}C_EventType_ActivePadUpdate) {
				UpdateButtonIcons(State, Event.PadId);
			}
		}
	}
}
***
""",
[
	UIModules::Component(),
	SuperRoyal::Component(),
	Spectator::Component(),
	ButtonIcon::ComponentV2(),
	PlayerName::ComponentV2()
],
[]
	);
}