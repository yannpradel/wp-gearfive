/**
 *	UI module: SegmentProgression client side
 */
#Const Version		"1.0.3"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/SegmentProgression_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Constants.Script.txt" as CommonConst
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/Royal/Constants.Script.txt" as RoyalConst
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/SegmentProgression_Common.Script.txt" as UIModules_SegmentProgression_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/ZIndex.Script.txt" as ZIndex

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ImgPath "file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal"
#Const UIModules_SegmentProgression_Common::C_UIModuleConfig as C_UIModuleConfig
#Const C_UpdateInterval 250

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_SegmentProgression_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_SegmentProgression_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Royal TeamProgression] If the player presses the displayed button, they will respawn with their teammates at the next segment. %1 will be replaced by a button icon or key name. %2 will be replaced by a colored flag icon representing the segment. eg: "Press [Del] to advance to [RedFlag]".
	declare Text Text_JoinTeamPad = _("Press %1 to advance to %2");
	//L16N [Royal TeamProgression] If the player presses the displayed button, they will respawn with their teammates at the next segment. %1 will be replaced by a button icon or key name.  %2 will be replaced by a colored flag icon representing the segment. eg: "Press [Del] to advance to [RedFlag]".
	declare Text Text_JoinTeamKeyboard = _("Press [%1] to advance to %2");
	//L16N [Royal TeamProgression] If the player presses the button displayed beside this text, they will respawn with their teammates at the next segment. %1 will be replaced by a colored flag icon representing the segment. eg: "Advance to [RedFlag]".
	declare Text Text_JoinTeam = _("Advance to %1");
	//L16N [RoyalTeamProgression] Text displayed if an action is not bound to a button.
	declare Text Text_NoBind = _("|Input|No binding");

	declare Text[Integer] Img_ProgressionMasks = [
		1 => C_ImgPath^"/hud_royal_ingame_progression_mask_01.dds",
		2 => C_ImgPath^"/hud_royal_ingame_progression_mask_02.dds",
		3 => C_ImgPath^"/hud_royal_ingame_progression_mask_03.dds",
		4 => C_ImgPath^"/hud_royal_ingame_progression_mask_04.dds",
		5 => C_ImgPath^"/hud_royal_ingame_progression_mask_05.dds"
	];
	declare Text Img_DarkBlueFill = C_ImgPath^"/DarkBlueFill.dds"; //< alphamask and colorize do not work together, so we use an already colored image to fill the quad
	declare Text Img_GreenFourFill = C_ImgPath^"/GreenFourFill.dds";
	declare Text Img_PointHighlightLeft = C_ImgPath^"/hud_royal_ingame_progression_localplayer_start.dds";
	declare Text Img_PointHighlightCenter = C_ImgPath^"/hud_royal_ingame_progression_localplayer_middle.dds";
	declare Text Img_PointHighlightRight = C_ImgPath^"/hud_royal_ingame_progression_localplayer_end.dds";
	declare Text Img_Segment = C_ImgPath^"/hud_royal_ingame_progression_segment_links.dds";
	declare Text Img_Timer = C_ImgPath^"/hud_royal_ingame_progression_timer.dds";
	declare Text Img_MessageSideLeft = C_ImgPath^"/hud_royal_ingame_progression_info_left.dds";
	declare Text Img_MessageSideRight = C_ImgPath^"/hud_royal_ingame_progression_info_right.dds";

	declare Integer FlagsNb = 5;
	declare Integer SegmentsNb = FlagsNb - 1;
	declare Real ProgressionWidth = 130.;
	declare Vec2 Size_ProgressionBg = <ProgressionWidth, ProgressionWidth * (136. / 1548.)>;
	declare Vec2 Size_Point = <Size_ProgressionBg.Y * (160. / 144.), Size_ProgressionBg.Y>;
	declare Vec2 Pos_Point = <Size_Point.X * 0.5, 0.>;
	declare Real SizeX_PointInterval = (Size_ProgressionBg.X - Size_Point.X) / (FlagsNb - 1);
	declare Vec2 Size_PointFlag = Size_Point * 0.9;
	declare Vec2 Pos_PointFlag = <Size_PointFlag.X * -0.05, 0.>;
	declare Vec2 Size_PointHighlight = <Size_Point.Y * (180. / 156.), Size_Point.Y> * 1.12;
	declare Vec2 Size_Segment = <Size_ProgressionBg.X * 0.157, 1.>;
	Size_Segment.Y = Size_Segment.X * (28. / 236.);
	declare Real SizeX_SegmentPadding = Size_ProgressionBg.X * 0.083;
	declare Real SizeX_SegmentGutter = Size_ProgressionBg.X * 0.069;
	declare Vec2 Size_Timer = <Size_Point.X, Size_Point.X * (64. / 144.)>;
	declare Vec2 Pos_Timer = <0., (Size_Point.Y * 0.5) + 1. + (Size_Timer.Y * 0.5)>;
	declare Vec2 Pos_TimerSkew = <MLHelpers::SkewX(Pos_Timer.Y, 10.), 0.>;
	declare Vec2 Size_TimerLabel = <Size_Timer.X * 0.7, Size_Timer.Y * 0.9>;
	declare Vec2 Pos_TimerLabel = <Size_Timer.X * 0.5, Size_TimerLabel.Y * -0.05>;
	declare Vec2 Size_Loop = <20., 10.>;
	declare Vec2 Pos_Loop = <(Size_ProgressionBg.X * 0.5) + 1., 0.>;
	declare Vec2 Size_Message = <Size_ProgressionBg.X * 0.991, 6.>;
	declare Vec2 Pos_Message = MLHelpers::SkewX(<Size_Message.X * 0.002, -(Size_ProgressionBg.Y * 0.5) - 1. - (Size_Message.Y * 0.5)>, 10.);
	declare Vec2 Size_MessageSide = <Size_Message.Y * (56. / 72.), Size_Message.Y>;
	declare Vec2 Size_MessageCenter = <Size_MessageSide.X, Size_MessageSide.Y * 0.96>;
	declare Vec2 Size_ButtonIcon = <Size_Message.Y - 1., Size_Message.Y - 1.>;
	declare Vec2 Size_MessageLabel = <Size_Message.X - (Size_MessageSide.X * 2) - Size_ButtonIcon.X - 1., Size_Message.Y>;
	declare Vec2 Pos_MessageLabel = <0., Size_Message.Y * -0.05>;
	declare Vec2 Size_Clip = <Size_ProgressionBg.X + 1. + (Size_Loop.X * 2), (90. - C_UIModuleConfig.Properties.Position.Y) * 2.>;

	declare Text ML_Flags = "";
	for (I, 0, FlagsNb - 1) {
		ML_Flags ^= """<frameinstance modelid="framemodel-flag" pos="{{{I * SizeX_PointInterval}}} 0" />""";
	}
	declare Text ML_Segments = "";
	for (I, 0, SegmentsNb - 1) {
		declare Vec2 Pos = <SizeX_SegmentPadding + (I * (Size_Segment.X + SizeX_SegmentGutter)), Size_Segment.Y * 0.05>;
		ML_Segments ^= """<quad {{{MLHelpers::Pos(Pos)}}} {{{MLHelpers::Size(Size_Segment)}}} valign="center" image="{{{Img_Segment}}}" opacity="0.9" />""";
	}

	return MV::Create(
GetId(), 3,
"""
<framemodel id="framemodel-flag">
	<frame {{{MLHelpers::Pos(Pos_Point)}}}>
		<quad id="quad-point-flag" {{{MLHelpers::Pos(Pos_PointFlag)}}} {{{MLHelpers::Size(Size_PointFlag)}}} halign="center" valign="center" image="{{{Icons::C_Icon_128x128_Flag}}}" />
		<quad id="quad-point-highlight" {{{MLHelpers::Size(Size_PointHighlight)}}} halign="center" valign="center" image="{{{Img_PointHighlightCenter}}}" opacity="0.9" />
	</frame>
</framemodel>
<stylesheet>
	<style class="text-bold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" />
	<style class="text-semibold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$t$i" />
</stylesheet>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_SegmentProgression}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_SegmentProgression_Common::C_UIModuleConfig)}}}>
		<frame {{{MLHelpers::Size(Size_Clip)}}} halign="center" valign="center">
			<frame id="frame-display-anim" pos="0 {{{Size_Clip.Y}}}">
				<frame id="frame-progression" pos="{{{Size_ProgressionBg.X * -0.5}}} 0">
					<quad {{{MLHelpers::Size(Size_ProgressionBg)}}} valign="center" image="{{{Img_DarkBlueFill}}}" alphamask="{{{Img_ProgressionMasks[5]}}}" opacity="0.4" />
					<frame id="frame-gauge" size="10 {{{Size_ProgressionBg.Y}}}" valign="center" z-index="1">
						<quad id="quad-gauge" {{{MLHelpers::Size(Size_ProgressionBg)}}} valign="center" image="{{{Img_GreenFourFill}}}" alphamask="{{{Img_ProgressionMasks[3]}}}" opacity="0.7" />
						<frame id="frame-segments" z-index="1">
							{{{ML_Segments}}}
						</frame>
					</frame>
					<frame id="frame-flags" z-index="2">
						{{{ML_Flags}}}
					</frame>
					<frame id="frame-timer" {{{MLHelpers::Pos(Pos_Timer)}}}>
						<frame {{{MLHelpers::Pos(Pos_TimerSkew)}}}>
							<quad id="quad-timer" {{{MLHelpers::Size(Size_Timer)}}} valign="center" image="{{{Img_Timer}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" />
							<label id="label-timer" z-index="1" {{{MLHelpers::Pos(Pos_TimerLabel)}}} {{{MLHelpers::Size(Size_TimerLabel)}}} halign="center" valign="center2" textsize="2" class="text-semibold" />
						</frame>
					</frame>
				</frame>
				<frame {{{MLHelpers::Pos(Pos_Loop)}}} z-index="1">
					<label id="label-loop-icon" pos="5 0" size="10 10" halign="center" valign="center2" textsize="7" text="" opacity="0" />
					<label id="label-loop" pos="9 0" size="10 10" valign="center2" textsize="5" class="text-bold" opacity="0" />
				</frame>
				<frame id="frame-message" {{{MLHelpers::Pos(Pos_Message)}}} {{{MLHelpers::Size(Size_Message)}}} z-index="2" halign="center" valign="center">
					<frame id="frame-message-anim" pos="0 {{{Size_Message.Y}}}" hidden="1">
						<quad id="quad-message-left" {{{MLHelpers::Size(Size_MessageSide)}}} halign="right" valign="center" image="{{{Img_MessageSideLeft}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.9" />
						<quad id="quad-message-right" {{{MLHelpers::Size(Size_MessageSide)}}} halign="left" valign="center" image="{{{Img_MessageSideRight}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.9" />
						<quad id="quad-message-center" {{{MLHelpers::Size(Size_MessageCenter)}}} halign="center" valign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.9" />
						<quad id="quad-button-icon" z-index="1" {{{MLHelpers::Size(Size_ButtonIcon)}}} valign="center" hidden="1" />
						<label id="label-message" {{{MLHelpers::Pos(Pos_MessageLabel)}}} z-index="2" {{{MLHelpers::Size(Size_MessageLabel)}}} halign="center" valign="center2" textsize="2" class="text-semibold" />
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/TMGame/Utils/Difficulty.Script.txt" as Difficulty
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModulesData.Script.txt" as UIModulesData

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_DisplayAnim;
	CMlLabel Label_LoopIcon;
	CMlLabel Label_Loop;
	CMlFrame Frame_Gauge;
	CMlQuad Quad_GaugeProgression;
	CMlQuad[] Quads_GaugeSegment;
	CMlQuad[] Quads_GaugeFlag;
	CMlQuad[] Quads_GaugeHighlight;
	CMlFrame Frame_Timer;
	CMlQuad Quad_Timer;
	CMlLabel Label_Timer;
	CMlFrame Frame_MessageAnim;
	CMlQuad Quad_MessageLeft;
	CMlQuad Quad_MessageRight;
	CMlQuad Quad_MessageCenter;
	CMlLabel Label_Message;
	CMlQuad Quad_ButtonIcon;
}

#Struct K_State {
	K_Controls Controls;
	Int2 GaugeFilling;
	Integer TeamsProgressionUpdate;
	Boolean IsDisplayed_HasValidTarget;
	Boolean IsDisplayed_DisplayModule;
	Boolean IsDisplayed;
	Integer DisplayAnimEndTime;
	Ident TargetPlayerId;
	Integer TargetPlayerClan;
	Integer TargetPlayerSegment;
	Integer TargetTeamSegment;
	Integer SegmentsNb;
	Integer LoopsNb;
	Integer UnlockedSegment;
	Integer NextUnlockTime;
	Boolean DisplayUnlockTimer;
	Boolean AlwaysDisplayUnlockTimer;
	Boolean CanJoinTeam;
	Boolean InputPlayerIsSpawned;
	Ident ActivePadId;
	Integer JoinBlinkingEndTime;
	Boolean DisplayMessage;
}

#Const C_UpdateInterval {{{dump(C_UpdateInterval)}}}
#Const C_ActivePadUpdateInterval 250
#Const C_DisplayAnimDuration 250
#Const C_SegmentActivationAnimDuration 1000
#Const C_JoinBlinkingDuration 5000
#Const C_PadInputCharacters {{{dump(CommonConst::C_PadInputCharacters)}}}
#Const C_ProgressionMasks {{{dump(Img_ProgressionMasks)}}}
#Const C_UnlockAllSegmentsOnLoop {{{dump(RoyalConst::C_UnlockAllSegmentsOnLoop)}}}
#Const C_StayAtBlackSegment {{{dump(RoyalConst::C_StayAtBlackSegment)}}}
#Const C_Pos_MessageLabel {{{dump(Pos_MessageLabel)}}}
""",
"""
K_State InitializeGauge(K_State _State) {
	declare K_State State = _State;

	declare CMlFrame Frame_Progression <=> (State.Controls.Frame_DisplayAnim.GetFirstChild("frame-progression") as CMlFrame);
	State.Controls.Frame_Gauge <=> (Frame_Progression.GetFirstChild("frame-gauge") as CMlFrame);
	State.Controls.Quad_GaugeProgression <=> (State.Controls.Frame_Gauge.GetFirstChild("quad-gauge") as CMlQuad);
	declare CMlFrame Frame_Segments <=> (State.Controls.Frame_Gauge.GetFirstChild("frame-segments") as CMlFrame);
	State.Controls.Quads_GaugeSegment = [];
	foreach (Key => Control in Frame_Segments.Controls) {
		declare CMlQuad Quad_Segment <=> (Control as CMlQuad);
		Quad_Segment.Colorize = Difficulty::GetRoyalSegmentColorRGB(Key + 2);
		State.Controls.Quads_GaugeSegment.add(Quad_Segment);
	}
	declare CMlFrame Frame_Flags <=> (Frame_Progression.GetFirstChild("frame-flags") as CMlFrame);
	State.Controls.Quads_GaugeFlag = [];
	State.Controls.Quads_GaugeHighlight = [];
	foreach (Key => Control in Frame_Flags.Controls) {
		declare CMlFrame Frame_Flag <=> (Control as CMlFrame);
		declare CMlQuad Quad_GaugeFlag <=> (Frame_Flag.GetFirstChild("quad-point-flag") as CMlQuad);
		declare CMlQuad Quad_GaugeHighlight <=> (Frame_Flag.GetFirstChild("quad-point-highlight") as CMlQuad);
		declare Vec3 SegmentColor = Difficulty::GetRoyalSegmentColorRGB(Key + 1);
		Quad_GaugeFlag.Colorize = SegmentColor;
		Quad_GaugeFlag.Opacity = 0.4;
		Quad_GaugeHighlight.Colorize = SegmentColor;
		if (Key <= 0) {
			Quad_GaugeFlag.Opacity = 0.9;
			Quad_GaugeHighlight.ImageUrl = "{{{Img_PointHighlightLeft}}}";
		} else if (Key >= Frame_Flags.Controls.count - 1) {
			Quad_GaugeHighlight.ImageUrl = "{{{Img_PointHighlightRight}}}";
		} else {
			Quad_GaugeHighlight.ImageUrl = "{{{Img_PointHighlightCenter}}}";
		}
		State.Controls.Quads_GaugeFlag.add(Quad_GaugeFlag);
		State.Controls.Quads_GaugeHighlight.add(Quad_GaugeHighlight);
	}

	return State;
}

K_State FillGauge(K_State _State, Int2 _GaugeFilling, Boolean _SkipAnim) {
	declare K_State State = _State;

	if (State.GaugeFilling != _GaugeFilling) {
		// Only animate the gauge when its increasing
		declare Boolean PlayAnim = State.GaugeFilling.X <= _GaugeFilling.X && !_SkipAnim;
		State.GaugeFilling = _GaugeFilling;

		foreach (Key => Quad_GaugeSegment in State.Controls.Quads_GaugeSegment) {
			Quad_GaugeSegment.Visible = State.GaugeFilling.X > Key + 1;
		}

		foreach (Key => Quad_GaugeFlag in State.Controls.Quads_GaugeFlag) {
			declare Real TargetOpacity = 0.4;
			if (State.GaugeFilling.X > Key) {
				TargetOpacity = 0.9;
			}
			AnimMgr.Flush(Quad_GaugeFlag);
			if (PlayAnim) {
				AnimMgr.Add(Quad_GaugeFlag, "<a opacity=\""^TargetOpacity^"\" />", Now + ML::NearestInteger(C_SegmentActivationAnimDuration * 0.25), ML::NearestInteger(C_SegmentActivationAnimDuration * 0.75), CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				Quad_GaugeFlag.Opacity = TargetOpacity;
			}
		}

		State.Controls.Quad_GaugeProgression.AlphaMaskUrl = C_ProgressionMasks[ML::Clamp(State.GaugeFilling.X, 1, C_ProgressionMasks.count)];

		declare Real TargetSizeX = ML::Max(0., {{{Size_Point.X}}} + ((State.GaugeFilling.X - 1) * {{{SizeX_PointInterval}}}));
		AnimMgr.Flush(State.Controls.Frame_Gauge);
		if (PlayAnim) {
			AnimMgr.Add(State.Controls.Frame_Gauge, "<a size=\""^TargetSizeX^" "^State.Controls.Frame_Gauge.Size.Y^"\" />", C_SegmentActivationAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			State.Controls.Frame_Gauge.Size.X = TargetSizeX;
		}
	}

	return State;
}

K_State UpdateLoop(K_State _State, Integer _LoopsNb, Boolean _SkipAnim) {
	declare K_State State = _State;

	if (State.LoopsNb != _LoopsNb) {
		State.LoopsNb = _LoopsNb;
		State.Controls.Label_Loop.Value = ""^State.LoopsNb;

		AnimMgr.Flush(State.Controls.Label_LoopIcon);
		AnimMgr.Flush(State.Controls.Label_Loop);
		State.Controls.Label_LoopIcon.RelativeRotation = 0.;
		State.Controls.Label_LoopIcon.Opacity = State.Controls.Label_LoopIcon.Opacity; //< For some reason we have to update the opacity before the animation, otherwise it won't work

		if (State.LoopsNb > 0) {
			if (_SkipAnim) {
				State.Controls.Label_LoopIcon.Opacity = 1.;
				State.Controls.Label_Loop.Opacity = 1.;
			} else {
				AnimMgr.Add(State.Controls.Label_LoopIcon, "<a rot=\"360\" opacity=\"1\" />", 1000, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(State.Controls.Label_Loop, "<a opacity=\"1\" />", 1000, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		} else {
			if (_SkipAnim) {
				State.Controls.Label_LoopIcon.Opacity = 0.;
				State.Controls.Label_Loop.Opacity = 0.;
			} else {
				AnimMgr.Add(State.Controls.Label_LoopIcon, "<a opacity=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(State.Controls.Label_Loop, "<a opacity=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	}

	return State;
}

K_State UpdateLock(K_State _State) {
	declare K_State State = _State;

	AnimMgr.Flush(State.Controls.Frame_Timer);
	AnimMgr.Flush(State.Controls.Quad_Timer);
	AnimMgr.Flush(State.Controls.Label_Timer);
	if (
		State.UnlockedSegment <= 0 ||
		State.UnlockedSegment >= State.SegmentsNb ||
		(C_UnlockAllSegmentsOnLoop && State.LoopsNb > 0) ||
		(!State.AlwaysDisplayUnlockTimer && State.UnlockedSegment >= State.TargetTeamSegment)
	) {
		AnimMgr.Add(State.Controls.Quad_Timer, "<a opacity=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Label_Timer, "<a opacity=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		State.DisplayUnlockTimer = False;
	} else {
		AnimMgr.Add(State.Controls.Quad_Timer, "<a opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadIn);
		AnimMgr.Add(State.Controls.Label_Timer, "<a opacity=\"0.8\" />", 250, CAnimManager::EAnimManagerEasing::QuadIn);
		declare Real TargetPosX = State.UnlockedSegment * {{{SizeX_PointInterval}}};
		AnimMgr.Add(State.Controls.Frame_Timer, "<a pos=\""^TargetPosX^" "^State.Controls.Frame_Timer.RelativePosition_V3.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		State.DisplayUnlockTimer = True;
	}

	return State;
}

Void UpdateTargetPlayerProgression(K_State _State) {
	foreach (Key => Quad_GaugeHighlight in _State.Controls.Quads_GaugeHighlight) {
		AnimMgr.Flush(Quad_GaugeHighlight);
		declare Real TargetOpacity = 0.;
		if (_State.TargetPlayerSegment == Key + 1) {
			TargetOpacity = 0.9;
		}
		if (Quad_GaugeHighlight.Opacity != TargetOpacity) {
			AnimMgr.Add(Quad_GaugeHighlight, "<a opacity=\""^TargetOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadIn);
		}
	}
}

K_State SetVisibility(K_State _State, Boolean _HasValidTarget, Boolean _DisplayModule) {
	declare K_State State = _State;

	State.IsDisplayed_HasValidTarget = _HasValidTarget;
	State.IsDisplayed_DisplayModule = _DisplayModule;
	declare Boolean NewVisibility = State.IsDisplayed_HasValidTarget && State.IsDisplayed_DisplayModule;

	if (State.IsDisplayed != NewVisibility) {
		State.IsDisplayed = NewVisibility;

		AnimMgr.Flush(State.Controls.Frame_DisplayAnim);
		State.Controls.Frame_Global.Visible = True;
		State.Controls.Frame_DisplayAnim.Visible = True;
		State.DisplayAnimEndTime = Now + C_DisplayAnimDuration;

		if (State.IsDisplayed) {
			AnimMgr.Add(State.Controls.Frame_DisplayAnim, "<a pos=\"0 0\" hidden=\"0\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_DisplayAnim, "<a pos=\"0 {{{Size_Clip.Y}}}\" hidden=\"1\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	return State;
}

K_State UpdateJoinTeamLabel(K_State _State, Ident _ActivePadId) {
	declare K_State State = _State;
	State.ActivePadId = _ActivePadId;

	declare Integer Segment = State.UnlockedSegment;
	if (C_StayAtBlackSegment) Segment = ML::Min(State.TargetTeamSegment, State.UnlockedSegment);
	else if (C_UnlockAllSegmentsOnLoop && State.LoopsNb > 0) Segment = State.TargetTeamSegment;
	else if (State.UnlockedSegment >= State.SegmentsNb) Segment =  ML::Min(State.TargetTeamSegment, State.UnlockedSegment);
	declare Text SegmentFlag = "$<$"^Difficulty::GetRoyalSegmentColorHex3(Segment)^"🏁$>";

	declare Boolean DisplayButtonIcon = False;

	if (
		State.ActivePadId != NullId &&
		Input.Pads.existskey(State.ActivePadId) &&
		Input.Pads[State.ActivePadId].Type != CInputPad::EPadType::Mouse
	) {
		declare CInputPad ActivePad <=> Input.Pads[State.ActivePadId];
		declare Text Binding_Restart = Input.GetActionBinding(ActivePad, "Vehicle", "GiveUp");
		declare Text BindingRaw_Restart = Input.GetActionBindingRaw(ActivePad, "Vehicle", "GiveUp");
		DisplayButtonIcon = ButtonIcon::CanGetPadButtonIcon(ActivePad) && BindingRaw_Restart != "";

		if (DisplayButtonIcon) {
			State.Controls.Label_Message.Value = TL::Compose("{{{Text_JoinTeam}}}", SegmentFlag);
			State.Controls.Quad_ButtonIcon.ImageUrl = ButtonIcon::GetPadButtonIcon(System, ActivePad, BindingRaw_Restart);
		} else if (Binding_Restart == "") {
			State.Controls.Label_Message.Value = TL::Compose("{{{Text_JoinTeamKeyboard}}}", "{{{Text_NoBind}}}", SegmentFlag);
		} else if (C_PadInputCharacters.exists(Binding_Restart)) {
			State.Controls.Label_Message.Value = TL::Compose("{{{Text_JoinTeamPad}}}", Binding_Restart, SegmentFlag);
		} else {
			State.Controls.Label_Message.Value = TL::Compose("{{{Text_JoinTeamKeyboard}}}", Binding_Restart, SegmentFlag);
		}
	} else {
		State.Controls.Label_Message.Value = TL::Compose("{{{Text_JoinTeamKeyboard}}}", "{{{Text_NoBind}}}", SegmentFlag);
	}

	declare Real MessageWidth = ML::Min(State.Controls.Label_Message.Size.X, State.Controls.Label_Message.ComputeWidth(State.Controls.Label_Message.Value));
	State.Controls.Quad_ButtonIcon.Visible = DisplayButtonIcon;
	if (State.Controls.Quad_ButtonIcon.Visible) {
		State.Controls.Label_Message.RelativePosition_V3.X = C_Pos_MessageLabel.X - ((State.Controls.Quad_ButtonIcon.Size.X + 1.) * 0.5);
		State.Controls.Quad_ButtonIcon.RelativePosition_V3.X = State.Controls.Label_Message.RelativePosition_V3.X + (MessageWidth * 0.5) + 1.;
		MessageWidth += State.Controls.Quad_ButtonIcon.Size.X + 1.;
	} else {
		State.Controls.Label_Message.RelativePosition_V3.X = C_Pos_MessageLabel.X;
	}
	State.Controls.Quad_MessageLeft.RelativePosition_V3.X = MessageWidth * -0.5;
	State.Controls.Quad_MessageRight.RelativePosition_V3.X = MessageWidth * 0.5;
	State.Controls.Quad_MessageCenter.Size.X = MessageWidth;

	return State;
}

K_State UpdateJoinTeam(K_State _State) {
	declare K_State State = _State;

	declare Boolean DisplayMessage = (
		State.CanJoinTeam &&
		State.InputPlayerIsSpawned && (
			(C_UnlockAllSegmentsOnLoop && State.LoopsNb > 0) ||
			(!C_StayAtBlackSegment && State.TargetPlayerSegment < State.UnlockedSegment) || (
				C_StayAtBlackSegment && (
					(State.TargetPlayerSegment < State.TargetTeamSegment && State.TargetPlayerSegment < State.UnlockedSegment) ||
					(State.UnlockedSegment >= State.SegmentsNb && State.LoopsNb > 0)
				)
			)
		)
	);
	if (State.DisplayMessage != DisplayMessage) {
		State.DisplayMessage = DisplayMessage;

		AnimMgr.Flush(State.Controls.Frame_MessageAnim);
		if (State.DisplayMessage) {
			AnimMgr.Add(State.Controls.Frame_MessageAnim, "<a pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_MessageAnim, "<a pos=\"0 {{{Size_Message.Y}}}\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}
	if (State.DisplayMessage) {
		State.JoinBlinkingEndTime = Now + C_JoinBlinkingDuration;
		State.Controls.Label_Message.TextColor = <1., 1., 1.>;
		State = UpdateJoinTeamLabel(State, Tools::GetActivePadId(Input, True));
	}

	return State;
}

K_State UpdateProgression(
	K_State _State,
	CSmPlayer _TargetPlayer,
	Boolean _DisplayModule,
	Integer _TeamsProgressionUpdate,
	Int2[Integer] _TeamsProgression,
	Integer _SegmentsNb,
	Integer _UnlockedSegment,
	Integer _NextUnlockTime,
	Integer _TargetPlayerSegment,
	Boolean _CanJoinTeam,
	Boolean _InputPlayerIsSpawned,
	Boolean _AlwaysDisplayUnlockTimer
) {
	declare K_State State = _State;
	declare Boolean PrevIsDisplayed = State.IsDisplayed;

	declare Boolean TargetPlayerUpdate = False;
	if (_TargetPlayer == Null) {
		if (State.TargetPlayerId != NullId) {
			State.TargetPlayerId = NullId;
			TargetPlayerUpdate = True;
		}
		if (State.TargetPlayerClan != -1) {
			State.TargetPlayerClan = -1;
			TargetPlayerUpdate = True;
		}
	} else {
		if (State.TargetPlayerId != _TargetPlayer.Id) {
			State.TargetPlayerId = _TargetPlayer.Id;
			TargetPlayerUpdate = True;
		}
		if (State.TargetPlayerClan != _TargetPlayer.CurrentClan) {
			State.TargetPlayerClan = _TargetPlayer.CurrentClan;
			TargetPlayerUpdate = True;
		}
	}

	declare Boolean TeamsProgressionUpdate = False;
	if (State.TeamsProgressionUpdate != _TeamsProgressionUpdate) {
		State.TeamsProgressionUpdate = _TeamsProgressionUpdate;
		TeamsProgressionUpdate = True;
	}

	declare Boolean SegmentsNbUpdate = False;
	if (State.SegmentsNb != _SegmentsNb) {
		State.SegmentsNb = _SegmentsNb;
		SegmentsNbUpdate = True;
	}

	declare Boolean LockUpdate = False;
	if (
		State.UnlockedSegment != _UnlockedSegment ||
		State.NextUnlockTime != _NextUnlockTime ||
		State.AlwaysDisplayUnlockTimer != _AlwaysDisplayUnlockTimer
	) {
		State.UnlockedSegment = _UnlockedSegment;
		State.NextUnlockTime = _NextUnlockTime;
		State.AlwaysDisplayUnlockTimer = _AlwaysDisplayUnlockTimer;
		LockUpdate = True;
	}

	declare Boolean TargetPlayerSegmentUpdate = False;
	if (State.TargetPlayerSegment != _TargetPlayerSegment) {
		State.TargetPlayerSegment = _TargetPlayerSegment;
		TargetPlayerSegmentUpdate = True;
	}

	declare Boolean JoinTeamUpdate = False;
	if (
		State.CanJoinTeam != _CanJoinTeam ||
		State.InputPlayerIsSpawned != _InputPlayerIsSpawned
	) {
		State.CanJoinTeam = _CanJoinTeam;
		State.InputPlayerIsSpawned = _InputPlayerIsSpawned;
		JoinTeamUpdate = True;
	}

	State = SetVisibility(State, (State.TargetPlayerId != NullId && State.TargetPlayerClan > 0), _DisplayModule);
	declare Boolean VisibilityUpdate = PrevIsDisplayed != State.IsDisplayed;

	if (State.IsDisplayed) {
		declare Integer PrevLoopsNb = State.LoopsNb;
		declare Integer PrevTargetTeamSegment = State.TargetTeamSegment;
		if (TargetPlayerUpdate || TeamsProgressionUpdate || SegmentsNbUpdate || VisibilityUpdate) {
			declare Int2 TeamProgression = <0, 0>;
			if (State.TargetPlayerClan > 0 && _TeamsProgression.existskey(State.TargetPlayerClan)) {
				TeamProgression = _TeamsProgression[State.TargetPlayerClan];
			}
			State.TargetTeamSegment = TeamProgression.X;
			State = FillGauge(State, <TeamProgression.X, State.SegmentsNb>, TargetPlayerUpdate);
			State = UpdateLoop(State, TeamProgression.Y, TargetPlayerUpdate);

			// Play sound on segment completion
			if (!TargetPlayerUpdate) {
				if (PrevLoopsNb != State.LoopsNb) {
					PlayUiSound(CMlScriptIngame::EUISound::ScoreProgress, 1, 0.75);
				} else if (PrevTargetTeamSegment != State.TargetTeamSegment) {
					PlayUiSound(CMlScriptIngame::EUISound::ScoreProgress, 0, 0.75);
				}
			}
		}

		if (LockUpdate || PrevLoopsNb != State.LoopsNb || TargetPlayerUpdate || TeamsProgressionUpdate || TargetPlayerSegmentUpdate || VisibilityUpdate) {
			State = UpdateLock(State);
		}

		if (TargetPlayerSegmentUpdate || VisibilityUpdate) {
			UpdateTargetPlayerProgression(State);
		}

		if (JoinTeamUpdate || LockUpdate || PrevLoopsNb != State.LoopsNb || TargetPlayerSegmentUpdate || TeamsProgressionUpdate || VisibilityUpdate) {
			State = UpdateJoinTeam(State);
		}
	}

	return State;
}

Boolean PlayerIsSpawned(CSmPlayer _Player) {
	return (_Player != Null && _Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && UI.UISequence != CUIConfig::EUISequence::Finish);
}

Boolean DelaySpecModeActivation(Integer _UnspawnTime) {
	return (_UnspawnTime > 0 && Now < _UnspawnTime + UIModulesData::C_SpecModeActivationDelay);
}

***MainInit***
***
declare CMlFrame Frame_SegmentsBg;
declare CMlQuad[] Quads_SegmentBg;

declare netread Integer Net_Royal_SegmentProgression_TeamsProgressionUpdate for Teams[0];
declare netread Int2[Integer] Net_Royal_SegmentProgression_TeamsProgression for Teams[0];
declare netread Integer Net_Royal_SegmentProgression_SegmentsNb for Teams[0];
declare netread Integer Net_Royal_SegmentProgression_UnlockedSegment for Teams[0];
declare netread Integer Net_Royal_SegmentProgression_NextUnlockTime for Teams[0];
declare netread Boolean Net_Royal_SegmentProgression_CanJoinTeam for UI;
declare netread Boolean Net_Royal_SegmentProgression_AlwaysDisplayUnlockTimer for Teams[0];

declare K_State State;
declare Integer NextUpdateTime;
declare Integer ActivePadUpdateTime;
declare Integer InputPlayerUnspawnTime;
***

***MainStart***
***
State = K_State {
	Controls = K_Controls {},
	GaugeFilling = <-1, -1>,
	TeamsProgressionUpdate = -1,
	IsDisplayed_HasValidTarget = False,
	IsDisplayed_DisplayModule = False,
	IsDisplayed = False,
	DisplayAnimEndTime = -1,
	TargetPlayerId = NullId,
	TargetPlayerClan = -1,
	TargetPlayerSegment = -1,
	TargetTeamSegment = -1,
	SegmentsNb = 0,
	LoopsNb = 0,
	UnlockedSegment = 0,
	NextUnlockTime = -1,
	DisplayUnlockTimer = False,
	AlwaysDisplayUnlockTimer = False,
	CanJoinTeam = False,
	InputPlayerIsSpawned = False,
	ActivePadId = NullId,
	JoinBlinkingEndTime = -1,
	DisplayMessage = False
};

State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_DisplayAnim <=> (State.Controls.Frame_Global.GetFirstChild("frame-display-anim") as CMlFrame);
Frame_SegmentsBg <=> (State.Controls.Frame_DisplayAnim.GetFirstChild("frame-segments-bg") as CMlFrame);
State.Controls.Label_LoopIcon <=> (State.Controls.Frame_DisplayAnim.GetFirstChild("label-loop-icon") as CMlLabel);
State.Controls.Label_Loop <=> (State.Controls.Frame_DisplayAnim.GetFirstChild("label-loop") as CMlLabel);
State.Controls.Frame_Timer <=> (State.Controls.Frame_DisplayAnim.GetFirstChild("frame-timer") as CMlFrame);
State.Controls.Quad_Timer <=> (State.Controls.Frame_Timer.GetFirstChild("quad-timer") as CMlQuad);
State.Controls.Label_Timer <=> (State.Controls.Frame_Timer.GetFirstChild("label-timer") as CMlLabel);
State.Controls.Frame_MessageAnim <=> (State.Controls.Frame_DisplayAnim.GetFirstChild("frame-message-anim") as CMlFrame);
State.Controls.Quad_MessageLeft <=> (State.Controls.Frame_MessageAnim.GetFirstChild("quad-message-left") as CMlQuad);
State.Controls.Quad_MessageRight <=> (State.Controls.Frame_MessageAnim.GetFirstChild("quad-message-right") as CMlQuad);
State.Controls.Quad_MessageCenter <=> (State.Controls.Frame_MessageAnim.GetFirstChild("quad-message-center") as CMlQuad);
State.Controls.Label_Message <=> (State.Controls.Frame_MessageAnim.GetFirstChild("label-message") as CMlLabel);
State.Controls.Quad_ButtonIcon <=> (State.Controls.Frame_MessageAnim.GetFirstChild("quad-button-icon") as CMlQuad);

NextUpdateTime = Now;
InputPlayerUnspawnTime = -1;

State = InitializeGauge(State);
State = UpdateProgression(State, GUIPlayer, False, Net_Royal_SegmentProgression_TeamsProgressionUpdate, Net_Royal_SegmentProgression_TeamsProgression, Net_Royal_SegmentProgression_SegmentsNb, Net_Royal_SegmentProgression_UnlockedSegment, Net_Royal_SegmentProgression_NextUnlockTime, State.TargetPlayerSegment, Net_Royal_SegmentProgression_CanJoinTeam, PlayerIsSpawned(InputPlayer), Net_Royal_SegmentProgression_AlwaysDisplayUnlockTimer);
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Royal_SegmentProgression_IsVisible for Owner;
		if (State.IsDisplayed_DisplayModule != Net_Royal_SegmentProgression_IsVisible) {
			State = UpdateProgression(State, GUIPlayer, Net_Royal_SegmentProgression_IsVisible, Net_Royal_SegmentProgression_TeamsProgressionUpdate, Net_Royal_SegmentProgression_TeamsProgression, Net_Royal_SegmentProgression_SegmentsNb, Net_Royal_SegmentProgression_UnlockedSegment, Net_Royal_SegmentProgression_NextUnlockTime, State.TargetPlayerSegment, Net_Royal_SegmentProgression_CanJoinTeam, PlayerIsSpawned(InputPlayer), Net_Royal_SegmentProgression_AlwaysDisplayUnlockTimer);
		}
	}

	if (Owner == Null && State.IsDisplayed_DisplayModule) {
		State = UpdateProgression(State, GUIPlayer, False, Net_Royal_SegmentProgression_TeamsProgressionUpdate, Net_Royal_SegmentProgression_TeamsProgression, Net_Royal_SegmentProgression_SegmentsNb, Net_Royal_SegmentProgression_UnlockedSegment, Net_Royal_SegmentProgression_NextUnlockTime, State.TargetPlayerSegment, Net_Royal_SegmentProgression_CanJoinTeam, PlayerIsSpawned(InputPlayer), Net_Royal_SegmentProgression_AlwaysDisplayUnlockTimer);
	}

	if (State.IsDisplayed_DisplayModule) {
		if (Now >= NextUpdateTime) {
			NextUpdateTime = Now + C_UpdateInterval;

			if (InputPlayer != Null) {
				if (InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && InputPlayerUnspawnTime < 0) {
					InputPlayerUnspawnTime = Now;
				} else if (InputPlayer.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned && InputPlayerUnspawnTime >= 0) {
					InputPlayerUnspawnTime = -1;
				}
			}

			if (GUIPlayer != Null) {
				declare netread Integer Net_Royal_SegmentProgression_CurrentSegment for GUIPlayer;
				if (State.TargetPlayerSegment != Net_Royal_SegmentProgression_CurrentSegment && !DelaySpecModeActivation(InputPlayerUnspawnTime)) {
					State = UpdateProgression(State, GUIPlayer, State.IsDisplayed_DisplayModule, Net_Royal_SegmentProgression_TeamsProgressionUpdate, Net_Royal_SegmentProgression_TeamsProgression, Net_Royal_SegmentProgression_SegmentsNb, Net_Royal_SegmentProgression_UnlockedSegment, Net_Royal_SegmentProgression_NextUnlockTime, Net_Royal_SegmentProgression_CurrentSegment, Net_Royal_SegmentProgression_CanJoinTeam, PlayerIsSpawned(InputPlayer), Net_Royal_SegmentProgression_AlwaysDisplayUnlockTimer);
				}
			}

			if (
				(
					State.TeamsProgressionUpdate != Net_Royal_SegmentProgression_TeamsProgressionUpdate ||
					State.SegmentsNb != Net_Royal_SegmentProgression_SegmentsNb ||
					State.UnlockedSegment != Net_Royal_SegmentProgression_UnlockedSegment ||
					State.NextUnlockTime != Net_Royal_SegmentProgression_NextUnlockTime ||
					State.CanJoinTeam != Net_Royal_SegmentProgression_CanJoinTeam ||
					State.InputPlayerIsSpawned != PlayerIsSpawned(InputPlayer) ||
					State.AlwaysDisplayUnlockTimer != Net_Royal_SegmentProgression_AlwaysDisplayUnlockTimer ||
					(GUIPlayer != Null && (State.TargetPlayerId != GUIPlayer.Id || State.TargetPlayerClan != GUIPlayer.CurrentClan)) ||
					(GUIPlayer == Null && (State.TargetPlayerId != NullId || State.TargetPlayerClan != -1))
				) && !DelaySpecModeActivation(InputPlayerUnspawnTime)
			) {
				State = UpdateProgression(State, GUIPlayer, State.IsDisplayed_DisplayModule, Net_Royal_SegmentProgression_TeamsProgressionUpdate, Net_Royal_SegmentProgression_TeamsProgression, Net_Royal_SegmentProgression_SegmentsNb, Net_Royal_SegmentProgression_UnlockedSegment, Net_Royal_SegmentProgression_NextUnlockTime, State.TargetPlayerSegment, Net_Royal_SegmentProgression_CanJoinTeam, PlayerIsSpawned(InputPlayer), Net_Royal_SegmentProgression_AlwaysDisplayUnlockTimer);
			}
		}

		if (State.DisplayMessage) {
			// Detect active pad
			foreach (Event in PendingEvents) {
				if (Event.Type == CMlScriptEvent::Type::KeyPress) {
					if (ActivePadUpdateTime < 0) ActivePadUpdateTime = Now + C_ActivePadUpdateInterval;
				}
			}
			foreach (Event in Input.PendingEvents) {
				if (Event.Type == CInputEvent::EType::PadButtonPress) {
					if (ActivePadUpdateTime < 0) ActivePadUpdateTime = Now + C_ActivePadUpdateInterval;
				}
			}
			if (ActivePadUpdateTime >= 0 && ActivePadUpdateTime <= Now) {
				ActivePadUpdateTime = -1;
				declare Ident ActivePadId = Tools::GetActivePadId(Input, True);
				if (State.ActivePadId != ActivePadId) {
					State = UpdateJoinTeamLabel(State, ActivePadId);
				}
			}

			// Blinking label
			if (State.JoinBlinkingEndTime >= 0 && State.JoinBlinkingEndTime > Now) {
				State.Controls.Label_Message.TextColor = Tools::GetBlinkingRed(State.JoinBlinkingEndTime);
			} else if (State.JoinBlinkingEndTime >= 0 && State.JoinBlinkingEndTime <= Now) {
				State.JoinBlinkingEndTime = -1;
				State.Controls.Label_Message.TextColor = <1., 1., 1.>;
			}
		}

		if (State.DisplayUnlockTimer) {
			if (State.NextUnlockTime <= 0) {
				State.Controls.Label_Timer.Value = "--:--";
			} else {
				declare Integer RemainingTime = ML::Max(0, State.NextUnlockTime - GameTime + 1000);
				State.Controls.Label_Timer.Value = TL::TimeToText(RemainingTime);
				if (RemainingTime <= 6000) {
					State.Controls.Label_Timer.TextColor = Tools::GetBlinkingColor(State.NextUnlockTime, 1000, 4, <1., 1., 1.>, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}});
					State.Controls.Label_Timer.Opacity = 1.;
					State.Controls.Quad_Timer.Opacity = 0.7;
				} else {
					State.Controls.Label_Timer.TextColor = <1., 1., 1.>;
				}
			}
		}
	}

	if (State.DisplayAnimEndTime >= 0 && State.DisplayAnimEndTime <= Now) {
		State.DisplayAnimEndTime = -1;
		State.Controls.Frame_Global.Visible = State.IsDisplayed;
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}