/**
 *	UI module: RespawnHelper client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/RespawnHelper_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/CMGame/Utils/Constants.Script.txt" as CommonConst
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/RespawnHelper_Common.Script.txt" as UIModules_RespawnHelper_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/ZIndex.Script.txt" as ZIndex

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_TextMargin 3.
#Const C_MaxWidth 78.

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_RespawnHelper_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_RespawnHelper_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Text Text_NoBind = _("|Input|No binding");

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-default" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textcolor="ffffff" textsize="3" textprefix="$t$i" />
</stylesheet>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_RespawnHelper}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_RespawnHelper_Common::C_UIModuleConfig)}}}>
		<frame id="frame-helper" size="{{{C_MaxWidth}}} 40" halign="right" valign="center">
			<frame id="frame-restart" pos="{{{C_MaxWidth}}} 0" hidden="1">
				<frameinstance
					id="expendable-bg-restart"
					modelid="{{{ExpendableAsset::C_Name}}}"
					z-index="0"
					data-height="9"
					data-halign="right"
					data-valign="center"
					data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
					data-opacity="0.6"
					data-image-right=""
					data-colormode-right="{{{ExpendableAsset::C_ColorMode_Background}}}"
					data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}"
				/>
				<quad id="quad-restart" pos="{{{-C_TextMargin}}} 0" z-index="1" size="7 7" halign="right" valign="center" hidden="1" />
				<label id="label-restart" class="text-default" pos="{{{-C_TextMargin}}} 0" z-index="2" size="60 10" halign="right" valign="center2"/>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon

#Const C_MinSpeed 10.
#Const C_MinSpeedDelay 10000
#Const C_UpdateInterval 500
#Const C_PadInputs {{{dump(CommonConst::C_PadInputCharacters)}}}
#Const C_TextMargin {{{dump(C_TextMargin)}}}
#Const C_MaxWidth {{{dump(C_MaxWidth)}}}
""",
"""
Void UpdateLabel(CMlLabel _Label_Restart, CMlQuad _Quad_Restart, CMlFrame _Expendable_BgRestart, Ident _ActivePadId) {
	if (Input.Pads.existskey(_ActivePadId)) {
		declare CInputPad Pad = Input.Pads[_ActivePadId];
		if (Pad.Type != CInputPad::EPadType::Mouse) {
			declare Real RestartIconSizeX = 0.;
			declare Text ActionName_Restart = Input.GetActionDisplayName("Vehicle", "GiveUp");
			declare Text Binding_Restart = Input.GetActionBinding(Pad, "Vehicle", "GiveUp");
			declare Text BindingRaw_Restart = Input.GetActionBindingRaw(Pad, "Vehicle", "GiveUp");

			if (BindingRaw_Restart != "" && ButtonIcon::CanGetPadButtonIcon(Pad)) {
				RestartIconSizeX = _Quad_Restart.Size.X + 1.;
				_Label_Restart.Value = ActionName_Restart;
				_Label_Restart.RelativePosition_V3.X = _Quad_Restart.RelativePosition_V3.X - RestartIconSizeX;
				_Quad_Restart.ImageUrl = ButtonIcon::GetPadButtonIcon(System, Pad, BindingRaw_Restart);
				_Quad_Restart.Visible = True;
			} else {
				if (Binding_Restart == "") {
					_Label_Restart.Value = TL::Compose("%1  [%2]", TL::GetTranslatedText(ActionName_Restart), "{{{Text_NoBind}}}");
				} else if (C_PadInputs.exists(Binding_Restart)) {
					_Label_Restart.Value = TL::Compose("%1  %2", TL::GetTranslatedText(ActionName_Restart), Binding_Restart);
				} else {
					_Label_Restart.Value = TL::Compose("%1 [%2]", TL::GetTranslatedText(ActionName_Restart), Binding_Restart);
				}
				_Label_Restart.RelativePosition_V3.X = _Quad_Restart.RelativePosition_V3.X;
				_Quad_Restart.Visible = False;
			}

			Tools::FitLabelValue(_Label_Restart, 3., 1.5, 0.5);

			{{{ExpendableAsset::P}}}SetWidth(This, _Expendable_BgRestart, ML::Min(_Label_Restart.ComputeWidth(_Label_Restart.Value, True), _Label_Restart.Size.X) + (C_TextMargin * 2) + RestartIconSizeX);
		}
	}
}

Boolean UpdateVisibility(CMlFrame _Frame_Restart, Boolean _Visible) {
	AnimMgr.Flush(_Frame_Restart);
	if (_Visible) {
		AnimMgr.Add(_Frame_Restart, "<a pos=\"0 "^_Frame_Restart.RelativePosition_V3.Y^"\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Frame_Restart, "<a pos=\""^C_MaxWidth^" "^_Frame_Restart.RelativePosition_V3.Y^"\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
	return _Visible;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Helper;
declare CMlFrame Frame_Restart;
declare CMlLabel Label_Restart;
declare CMlQuad Quad_Restart;
declare CMlFrame Expendable_BgRestart;

declare netread Boolean Net_Royal_RespawnHelper_IsVisible for UI;

declare Boolean DisplayModule;
declare CSmPlayer::ESpawnStatus SpawnStatus;
declare Integer DisplayTime;
declare Ident ActivePadId;
declare Integer NextUpdateTime;
declare Boolean HelperIsVisible;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Helper <=> (Frame_Global.GetFirstChild("frame-helper") as CMlFrame);
Frame_Restart <=> (Frame_Helper.GetFirstChild("frame-restart") as CMlFrame);
Label_Restart <=> (Frame_Restart.GetFirstChild("label-restart") as CMlLabel);
Quad_Restart <=> (Frame_Restart.GetFirstChild("quad-restart") as CMlQuad);
Expendable_BgRestart <=> (Frame_Restart.GetFirstChild("expendable-bg-restart") as CMlFrame);

DisplayModule = Frame_Global.Visible;
SpawnStatus = CSmPlayer::ESpawnStatus::NotSpawned;
DisplayTime = -123;
ActivePadId = Tools::GetActivePadId(Input, True);
NextUpdateTime = Now;

HelperIsVisible = UpdateVisibility(Frame_Restart, False);
UpdateLabel(Label_Restart, Quad_Restart, Expendable_BgRestart, ActivePadId);
***

***MainLoop***
***
if (PageIsVisible) {
	if (DisplayModule != Net_Royal_RespawnHelper_IsVisible) {
		DisplayModule = Net_Royal_RespawnHelper_IsVisible;
		Frame_Global.Visible = Net_Royal_RespawnHelper_IsVisible;
	}

	if (Frame_Global.Visible) {
		if (Now >= NextUpdateTime) {
			NextUpdateTime = Now + C_UpdateInterval;

			if (InputPlayer == Null || InputPlayer.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) {
				if (HelperIsVisible) {
					HelperIsVisible = UpdateVisibility(Frame_Restart, False);
					DisplayTime = -1;
				}
			} else {
				if (InputPlayer.IsEntityStateAvailable) {
					if (DisplayTime < 0 && InputPlayer.Speed < C_MinSpeed) {
						DisplayTime = GameTime + C_MinSpeedDelay;
					} else if (DisplayTime >= 0 && InputPlayer.Speed >= C_MinSpeed) {
						DisplayTime = -1;
					}
				}

				if (HelperIsVisible) {
					declare Ident NewActivePadId = Tools::GetActivePadId(Input, True);
					if (ActivePadId != NewActivePadId) {
						ActivePadId = NewActivePadId;
						UpdateLabel(Label_Restart, Quad_Restart, Expendable_BgRestart, ActivePadId);
					}

					if (DisplayTime < 0 || GameTime < DisplayTime) {
						HelperIsVisible = UpdateVisibility(Frame_Restart, False);
					}
				} else {
					if (DisplayTime >= 0 && GameTime > DisplayTime) {
						HelperIsVisible = UpdateVisibility(Frame_Restart, True);
						UpdateLabel(Label_Restart, Quad_Restart, Expendable_BgRestart, ActivePadId);
					}
				}
			}
		}
	}
}
***
""",
[
	UIModules::Component(),
	ExpendableAsset::ComponentV2()
],
[]
	);
}