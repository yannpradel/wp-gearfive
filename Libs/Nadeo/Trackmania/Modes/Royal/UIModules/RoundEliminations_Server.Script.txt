/**
 *	UI module: RoundEliminations server side
 */
#Const Version		"1.0.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/RoundEliminations_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/RoundEliminations_Common.Script.txt" as UIModules_RoundEliminations_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_RoundEliminations_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::K_ModuleConfig GetConfig() {
	return UIModules_RoundEliminations_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the duration of the elimination animation
Integer GetAnimationDuration(Integer _EliminatedTeamsNb) {
	declare Integer PagesNb = 0;
	if (_EliminatedTeamsNb >= 1) PagesNb = ((_EliminatedTeamsNb - 1) / UIModules_RoundEliminations_Common::C_SlotsNb) + 1;

	if (PagesNb <= 0) {
		return (
			UIModules_RoundEliminations_Common::C_AnimDuration_UIShow +
			UIModules_RoundEliminations_Common::C_AnimDuration_NoEliminations +
			UIModules_RoundEliminations_Common::C_AnimDuration_UIHide +
			250 //< Add a bit of time to compensate ping variation
		);
	} else if (PagesNb == 1) {
		return (
			UIModules_RoundEliminations_Common::C_AnimDuration_UIShow +
			UIModules_RoundEliminations_Common::C_AnimDuration_BeforeEliminations +
			((UIModules_RoundEliminations_Common::C_AnimDuration_Elimination + UIModules_RoundEliminations_Common::C_AnimDuration_EliminationInvervalSlow) * _EliminatedTeamsNb) +
			UIModules_RoundEliminations_Common::C_AnimDuration_AfterEliminations +
			UIModules_RoundEliminations_Common::C_AnimDuration_UIHide +
			250 //< Add a bit of time to compensate ping variation
		);
	}
	return (
		UIModules_RoundEliminations_Common::C_AnimDuration_UIShow +
		UIModules_RoundEliminations_Common::C_AnimDuration_BeforeEliminations +
		(UIModules_RoundEliminations_Common::C_AnimDuration_BetweenPages * (PagesNb - 1)) +
		((UIModules_RoundEliminations_Common::C_AnimDuration_Elimination + UIModules_RoundEliminations_Common::C_AnimDuration_EliminationInvervalFast) * _EliminatedTeamsNb) +
		UIModules_RoundEliminations_Common::C_AnimDuration_AfterEliminations +
		UIModules_RoundEliminations_Common::C_AnimDuration_UIHide +
		250 //< Add a bit of time to compensate ping variation
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the id and the rank of the eliminated teams
Integer SendEliminatedTeams(Integer[Integer] _EliminatedTeams) {
	declare netwrite Integer[Integer] Net_Royal_RoundEliminations_EliminatedTeams for Teams[0];
	declare netwrite Integer Net_Royal_RoundEliminations_EliminatedTeamsUpdate for Teams[0];
	Net_Royal_RoundEliminations_EliminatedTeams = _EliminatedTeams;
	Net_Royal_RoundEliminations_EliminatedTeamsUpdate += 1;

	return GetAnimationDuration(_EliminatedTeams.count);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;

	declare netwrite Boolean Net_Royal_RoundEliminations_IsVisible for UI;
	Net_Royal_RoundEliminations_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SendEliminatedTeams([]);

	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}