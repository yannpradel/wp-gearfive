/**
 *	UI module: LiveRanking client side
 */
#Const Version		"1.0.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/LiveRanking_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/LiveRanking_Common.Script.txt" as UIModules_LiveRanking_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/Ranking_Client.Script.txt" as Ranking
#Include "Libs/Nadeo/Trackmania/Modes/Royal/Spectator_Client.Script.txt" as Spectator
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/ZIndex.Script.txt" as ZIndex

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Column_Rank 0
#Const C_Column_Logo 1
#Const C_Column_Name 2
#Const C_Column_Points 3
#Const C_Column_Time 4

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_LiveRanking_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_LiveRanking_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Vec2 Size_DisplayButton = <10., 10.>;
	declare Vec2 Size_Arrow = Size_DisplayButton;
	declare Vec2 Pos_Arrow = <Size_DisplayButton.X * 0.5, Size_DisplayButton.Y * -0.5>;

	declare Integer TeamsNb = 20;
	declare Vec2 Size_Team = <62.3, 5.>;
	declare Vec2 Size_TeamSeparator = <Size_Team.X, 3.>;
	declare Vec2 Size_TeamSeparatorLine = <Size_TeamSeparator.X - 2., 0.3>;
	declare Vec2 Pos_TeamSeparatorLine = <Size_TeamSeparator.X * 0.5, Size_TeamSeparator.Y * -0.5>;
	declare Vec2 Size_LiveRankingBg = <Size_Team.X, (TeamsNb * Size_Team.Y) + Size_TeamSeparator.Y>;
	declare Vec2 Size_Clip = <Size_Team.X, Size_DisplayButton.Y + 1.5 + Size_LiveRankingBg.Y>;
	declare Vec2 Pos_LiveRanking = <0., -Size_DisplayButton.Y - 1.5>;

	declare Real Gutter = 1.;
	declare GridConfig_LiveRanking = Grid::Create(Size_Team.X, Gutter * 0.5, Gutter, Grid::C_Direction_Right);
	GridConfig_LiveRanking = Grid::AddColumn(GridConfig_LiveRanking, C_Column_Rank, 10., Grid::C_Align_Center);
	GridConfig_LiveRanking = Grid::AddColumn(GridConfig_LiveRanking, C_Column_Logo, 10., Grid::C_Align_Center);
	GridConfig_LiveRanking = Grid::AddColumn(GridConfig_LiveRanking, C_Column_Name, 37., Grid::C_Align_Left);
	GridConfig_LiveRanking = Grid::AddColumn(GridConfig_LiveRanking, C_Column_Points, 10., Grid::C_Align_Right);
	GridConfig_LiveRanking = Grid::AddColumn(GridConfig_LiveRanking, C_Column_Time, 20., Grid::C_Align_Right);
	declare Grid_LiveRanking = Grid::Compile(GridConfig_LiveRanking);

	declare Text ML_Teams = "";
	for (I, 0, TeamsNb - 1) {
		ML_Teams ^= """<frameinstance modelid="framemodel-ranking-line" pos="0 {{{-I * Size_Team.Y}}}" />""";
	}

	declare Integer SmallTeamsNb = 4;
	declare Vec2 Pos_SmallLiveRanking = <0., 0.>;
	declare Vec2 Size_SmallLiveRankingBg = <Size_Team.X, (SmallTeamsNb * Size_Team.Y) + Size_TeamSeparator.Y>;

	declare Text ML_SmallLiveRanking = "";
	for (I, 0, SmallTeamsNb - 1) {
		ML_SmallLiveRanking ^= """<frameinstance modelid="framemodel-ranking-line" pos="0 {{{-I * Size_Team.Y}}}" />""";
	}

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-bold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" />
	<style class="text-semibold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$t$i" />
</stylesheet>
<framemodel id="framemodel-ranking-line">
	<quad id="button-spec-team" {{{MLHelpers::Size(Size_Team)}}} valign="center" opacity="0" scriptevents="1" />
	<frame z-index="-1">
		<quad id="quad-rank-bg" z-index="1" {{{Grid::PosBg(Grid_LiveRanking, C_Column_Rank)}}} {{{Grid::SizeBg(Grid_LiveRanking, C_Column_Rank, Size_Team.Y)}}} halign="center" valign="center" opacity="0.4" />
		<quad id="quad-logo-bg" z-index="1" {{{Grid::PosBg(Grid_LiveRanking, C_Column_Logo)}}} {{{Grid::SizeBg(Grid_LiveRanking, C_Column_Logo, Size_Team.Y)}}} halign="center" valign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.4" />
		<quad id="quad-name-bg" z-index="1" {{{Grid::PosBg(Grid_LiveRanking, C_Column_Name)}}} {{{Grid::SizeBg(Grid_LiveRanking, C_Column_Name, Size_Team.Y)}}} halign="left" valign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.4" />
		<quad id="quad-points-bg" z-index="1" {{{Grid::PosBg(Grid_LiveRanking, C_Column_Points)}}} {{{Grid::SizeBg(Grid_LiveRanking, C_Column_Points, Size_Team.Y)}}} halign="right" valign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.4" />
		<quad id="quad-time-bg" z-index="1" {{{Grid::PosBg(Grid_LiveRanking, C_Column_Time)}}} {{{Grid::SizeBg(Grid_LiveRanking, C_Column_Time, Size_Team.Y)}}} halign="right" valign="center" opacity="0.5" />
	</frame>
	<label id="label-rank" {{{Grid::Pos(Grid_LiveRanking, C_Column_Rank, 0.)}}} {{{Grid::Size(Grid_LiveRanking, C_Column_Rank, Size_Team.Y)}}} halign="center" valign="center2" textsize="1" class="text-bold" />
	<quad id="quad-logo" {{{Grid::Pos(Grid_LiveRanking, C_Column_Logo, 0.)}}} {{{Grid::Size(Grid_LiveRanking, C_Column_Logo, Size_Team.Y)}}} halign="center" valign="center" keepratio="fit" />
	<label id="label-name" {{{Grid::Pos(Grid_LiveRanking, C_Column_Name, 0.)}}} {{{Grid::Size(Grid_LiveRanking, C_Column_Name, Size_Team.Y)}}} halign="left" valign="center2" textsize="1" class="text-bold" />
	<label id="label-points" {{{Grid::Pos(Grid_LiveRanking, C_Column_Points, 0.)}}} {{{Grid::Size(Grid_LiveRanking, C_Column_Points, Size_Team.Y)}}} halign="right" valign="center2" textsize="1" class="text-bold" />
	<label id="label-time" {{{Grid::Pos(Grid_LiveRanking, C_Column_Time, 0.)}}} {{{Grid::Size(Grid_LiveRanking, C_Column_Time, Size_Team.Y)}}} halign="right" valign="center2" textsize="0.5" class="text-bold" />
</framemodel>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_LiveRanking}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_LiveRanking_Common::C_UIModuleConfig)}}}>
		<frame {{{MLHelpers::Size(Size_Clip)}}}>
			<frame id="frame-display-button" pos="{{{-Size_Clip.X}}} 0" hidden="1">
				<quad z-index="-1" {{{MLHelpers::Size(Size_DisplayButton)}}} bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" />
				<quad id="button-toggle" {{{MLHelpers::Pos(Pos_Arrow)}}} {{{MLHelpers::Size(Size_Arrow)}}} halign="center" valign="center" image="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}" colorize="ffffff" opacity="0.6" scriptevents="1" class="interactive" />
			</frame>
			<frame {{{MLHelpers::Pos(Pos_LiveRanking)}}}>
				<frame id="frame-live-ranking" pos="{{{-Size_Clip.X}}} 0" hidden="1">
					<quad id="quad-live-ranking-bg" {{{MLHelpers::Size(Size_LiveRankingBg)}}} bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" />
					<quad id="quad-live-ranking-line" {{{MLHelpers::Pos(Pos_TeamSeparatorLine)}}} z-index="1" {{{MLHelpers::Size(Size_TeamSeparatorLine)}}} halign="center" valign="center" bgcolor="ffffff" opacity="0.5" />
					<frame id="frame-teams" pos="0 {{{Size_Team.Y * -0.5}}}" z-index="2">
						{{{ML_Teams}}}
					</frame>
				</frame>
			</frame>
			<frame {{{MLHelpers::Pos(Pos_SmallLiveRanking)}}}>
				<frame id="frame-small-live-ranking" pos="{{{-Size_Clip.X}}} 0" z-index="2">
					<quad id="quad-live-ranking-bg" {{{MLHelpers::Size(Size_SmallLiveRankingBg)}}} bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" />
					<quad id="quad-live-ranking-line" {{{MLHelpers::Pos(Pos_TeamSeparatorLine)}}} z-index="1" {{{MLHelpers::Size(Size_TeamSeparatorLine)}}} halign="center" valign="center" bgcolor="ffffff" opacity="0.5" />
					<frame id="frame-teams" pos="0 {{{Size_Team.Y * -0.5}}}" z-index="2">
						{{{ML_SmallLiveRanking}}}
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Modes/Clans_Client.Script.txt" as Clans
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModulesData.Script.txt" as UIModulesData

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_DisplayButton;
	CMlQuad Button_Toggle;
	CMlFrame Frame_LiveRanking;
	CMlFrame Frame_Teams;
	CMlQuad Quad_LiveRankingBg;
	CMlQuad Quad_LiveRankingLine;
	CMlFrame Frame_SmallLiveRanking;
	CMlFrame Frame_SmallTeams;
	CMlQuad Quad_SmallLiveRankingLine;
}

#Struct K_State {
	K_Controls Controls;
	Boolean IsDisplayed_BigLiveRanking;
	Boolean IsDisplayed_SmallLiveRanking;
	Boolean IsDisplayed_DisplayModule;
	Boolean IsDisplayed_PlayerEnabled;
	Boolean IsDisplayed;
	Integer DisplayAnimEndTime;
	Ident TargetPlayerId;
	Integer TargetPlayerClan;
	Boolean InputPlayerIsSpawned;
	Integer RankingUpdate;
	Integer EliminationRank;
	Integer[Integer] TeamsPrevRank;
	Integer NotEliminatedTeamsNb;
}

#Const C_DisplayAnimDuration 250
#Const C_LiveRankingAnimDuration 250

#Const C_Color_AccentOne {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}}
#Const C_Color_AccentTwo {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentTwo))}}}
#Const C_Color_BGValueBetter {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_BGValueBetter))}}}
#Const C_Color_BGValueWorse {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_BGValueWorse))}}}
""",
"""
Boolean GetVisibility_PlayerEnabled() {
	declare persistent Boolean Persistent_Royal_LiveRanking_IsVisible for This = True;
	return Persistent_Royal_LiveRanking_IsVisible;
}

Boolean IsSpawned(CSmPlayer _Player) {
	return (_Player != Null && _Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned);
}

K_State SetVisibility(K_State _State, Boolean _DisplayModule, Boolean _PlayerEnabled, Boolean _HasRanking, Boolean _NoDelay, Boolean _InputPlayerIsSpawned) {
	declare K_State State = _State;

	declare Integer Delay = UIModulesData::C_SpecModeActivationDelay;
	if (_InputPlayerIsSpawned || _NoDelay) {
		Delay = 0;
	}

	State.InputPlayerIsSpawned = _InputPlayerIsSpawned;
	State.IsDisplayed_DisplayModule = _DisplayModule;
	State.IsDisplayed_PlayerEnabled = _PlayerEnabled;
	State.IsDisplayed = State.IsDisplayed_DisplayModule && _HasRanking;
	State.IsDisplayed_BigLiveRanking = State.IsDisplayed && State.IsDisplayed_PlayerEnabled && !_InputPlayerIsSpawned;
	State.IsDisplayed_SmallLiveRanking = State.IsDisplayed && _InputPlayerIsSpawned;
	State.DisplayAnimEndTime = Now + Delay + C_DisplayAnimDuration;

	declare persistent Boolean Persistent_Royal_LiveRanking_IsVisible for This = True;
	Persistent_Royal_LiveRanking_IsVisible = State.IsDisplayed_PlayerEnabled;

	AnimMgr.Flush(State.Controls.Frame_DisplayButton);
	AnimMgr.Flush(State.Controls.Frame_LiveRanking);
	AnimMgr.Flush(State.Controls.Frame_SmallLiveRanking);

	if (State.IsDisplayed) {
		State.Controls.Frame_Global.Visible = True;
	}

	if (State.IsDisplayed && !_InputPlayerIsSpawned) {
		AnimMgr.Add(State.Controls.Frame_DisplayButton, "<a pos=\"0 0\" hidden=\"0\" />", Now + Delay, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(State.Controls.Frame_DisplayButton, "<a pos=\"{{{-Size_Clip.X}}} 0\" hidden=\"1\" />", Now + Delay, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	if (State.IsDisplayed_BigLiveRanking) {
		AnimMgr.Add(State.Controls.Frame_LiveRanking, "<a pos=\"0 0\" hidden=\"0\" />", Now + Delay, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		State.Controls.Button_Toggle.ImageUrl = "{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}";
	} else {
		AnimMgr.Add(State.Controls.Frame_LiveRanking, "<a pos=\"{{{-Size_Clip.X}}} 0\" hidden=\"1\" />", Now + Delay, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		State.Controls.Button_Toggle.ImageUrl = "{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}";
	}

	if (State.IsDisplayed_SmallLiveRanking) {
		AnimMgr.Add(State.Controls.Frame_SmallLiveRanking, "<a pos=\"0 0\" hidden=\"0\" />", Now + Delay, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(State.Controls.Frame_SmallLiveRanking, "<a pos=\"{{{-Size_Clip.X}}} 0\" hidden=\"1\" />", Now + Delay, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

Void FocusTeam(CMlFrame _Frame_Team, Integer _TargetPlayerClan, Integer _TeamScore_TeamId, Boolean _IsFocused) {
	declare CMlQuad Quad_RankBg <=> (_Frame_Team.GetFirstChild("quad-rank-bg") as CMlQuad);
	declare CMlQuad Quad_LogoBg <=> (_Frame_Team.GetFirstChild("quad-logo-bg") as CMlQuad);
	declare CMlQuad Quad_NameBg <=> (_Frame_Team.GetFirstChild("quad-name-bg") as CMlQuad);
	declare CMlQuad Quad_PointsBg <=> (_Frame_Team.GetFirstChild("quad-points-bg") as CMlQuad);
	declare CMlLabel Label_Name <=> (_Frame_Team.GetFirstChild("label-name") as CMlLabel);
	declare CMlLabel Label_Points <=> (_Frame_Team.GetFirstChild("label-points") as CMlLabel);

	if (_IsFocused) {
		Quad_RankBg.Opacity = 0.8;
		Quad_LogoBg.Opacity = 0.8;
		Quad_NameBg.Opacity = 0.8;
		Quad_PointsBg.Opacity = 0.8;
		if (_TargetPlayerClan == _TeamScore_TeamId) {
			Label_Name.TextColor = C_Color_AccentOne;
			Label_Points.TextColor = C_Color_AccentOne;
		} else {
			Label_Name.TextColor = C_Color_AccentTwo;
			Label_Points.TextColor = C_Color_AccentTwo;
		}
	} else if (_TargetPlayerClan != _TeamScore_TeamId) {
		Quad_RankBg.Opacity = 0.4;
		Quad_LogoBg.Opacity = 0.4;
		Quad_NameBg.Opacity = 0.4;
		Quad_PointsBg.Opacity = 0.4;
		Label_Name.TextColor = <1., 1., 1.>;
		Label_Points.TextColor = <1., 1., 1.>;
	}
}

Void UpdateSmallLiveRanking(K_State _State, Integer[][] _TeamsRanking) {
	declare {{{Ranking::P}}}K_TeamRank TargetTeamRank = {{{Ranking::P}}}C_TeamRankNull;
	TargetTeamRank.TeamId = _State.TargetPlayerClan;
	foreach (Key => TeamRank in _TeamsRanking) {
		if ({{{Ranking::P}}}IsTeamIdRank(_State.TargetPlayerClan, TeamRank)) {
			TargetTeamRank = {{{Ranking::P}}}GetTeamRank(TeamRank, Key + 1);
			break;
		}
	}

	// Gather teams to display
	declare {{{Ranking::P}}}K_TeamRank[] LiveRanking;
	if (_State.NotEliminatedTeamsNb <= 4 || _TeamsRanking.count <= 4) {
		foreach (Key => Team in _TeamsRanking) {
			declare {{{Ranking::P}}}K_TeamRank TeamRank = {{{Ranking::P}}}GetTeamRank(Team, Key + 1);
			if (!TeamRank.Eliminated) LiveRanking.add(TeamRank);
			if (LiveRanking.count >= 4) break;
		}
	} else {
		declare Integer FirstTeamKey = 0;
		declare Integer LastTeamKey = ML::Min(_State.NotEliminatedTeamsNb - 1, _TeamsRanking.count - 1);

		// If the team with the elimination rank is first or last
		// Select the second or penultimate team instead
		declare Integer FirstEliminationKey = _State.EliminationRank - 1;
		if (FirstEliminationKey == FirstTeamKey) {
			FirstEliminationKey += 1;
		} else if (FirstEliminationKey == LastTeamKey) {
			FirstEliminationKey -= 1;
		}

		// If my team is first or last
		// Select the second or penultimate team instead
		declare Integer MyTeamKey = TargetTeamRank.Rank - 1;
		if (MyTeamKey == FirstTeamKey) {
			MyTeamKey += 1;
		} else if (MyTeamKey == LastTeamKey) {
			MyTeamKey -= 1;
		}

		// If my team is the first team that will be eliminated
		// (taking into account the first/last update above)
		// Select the team before the elimination rank
		// (It cannot be the first because there are at least 5 teams in the ranking)
		if (MyTeamKey == FirstEliminationKey) {
			MyTeamKey -= 1;
		}

		declare Integer[] LiveRankingKeys = [FirstTeamKey];
		if (!LiveRankingKeys.exists(LastTeamKey)) LiveRankingKeys.add(LastTeamKey);
		if (!LiveRankingKeys.exists(FirstEliminationKey)) LiveRankingKeys.add(FirstEliminationKey);
		if (!LiveRankingKeys.exists(MyTeamKey)) LiveRankingKeys.add(MyTeamKey);
		LiveRankingKeys = LiveRankingKeys.sort();
		foreach (Key in LiveRankingKeys) {
			if (_TeamsRanking.existskey(Key)) {
				LiveRanking.add({{{Ranking::P}}}GetTeamRank(_TeamsRanking[Key], Key + 1));
			}
		}
	}

	// Update live ranking
	declare Boolean HasLeadTime = False;
	declare Integer SeparatorIndex = -1;
	foreach (Key => Control in _State.Controls.Frame_SmallTeams.Controls) {
		if (Key < LiveRanking.count) {
			declare CMlFrame Frame_Team <=> (Control as CMlFrame);
			declare CMlQuad Button_SpecTeam <=> (Frame_Team.GetFirstChild("button-spec-team") as CMlQuad);
			declare CMlQuad Quad_RankBg <=> (Frame_Team.GetFirstChild("quad-rank-bg") as CMlQuad);
			declare CMlQuad Quad_TimeBg <=> (Frame_Team.GetFirstChild("quad-time-bg") as CMlQuad);
			declare CMlLabel Label_Rank <=> (Frame_Team.GetFirstChild("label-rank") as CMlLabel);
			declare CMlQuad Quad_Logo <=> (Frame_Team.GetFirstChild("quad-logo") as CMlQuad);
			declare CMlLabel Label_Name <=> (Frame_Team.GetFirstChild("label-name") as CMlLabel);
			declare CMlLabel Label_Points <=> (Frame_Team.GetFirstChild("label-points") as CMlLabel);
			declare CMlLabel Label_Time <=> (Frame_Team.GetFirstChild("label-time") as CMlLabel);

			declare {{{Ranking::P}}}K_TeamRank TeamRank = LiveRanking[Key];

			declare Integer TeamScore_TeamId for Button_SpecTeam = 0;
			TeamScore_TeamId = TeamRank.TeamId;

			Quad_RankBg.BgColor = Clans::GetClanColor(TeamRank.TeamId);
			FocusTeam(Frame_Team, _State.TargetPlayerClan, TeamScore_TeamId, TeamRank.TeamId == _State.TargetPlayerClan);

			if (TeamRank.Rank < _State.EliminationRank) {
				Quad_TimeBg.BgColor = C_Color_BGValueBetter;
			} else {
				Quad_TimeBg.BgColor = C_Color_BGValueWorse;
				if (SeparatorIndex <= 0) SeparatorIndex = Key;
			}

			Label_Rank.Value = ""^TeamRank.Rank;
			Quad_Logo.ImageUrl = Clans::GetClanLogo(TeamRank.TeamId);
			Quad_Logo.Visible = Quad_Logo.ImageUrl != "";
			Label_Name.Value = Clans::GetClanName(TeamRank.TeamId);
			Label_Points.Value = ""^TeamRank.Points;
			if (TeamRank.Rank <= 1) {
				if (TeamRank.Time > 0) {
					HasLeadTime = True;
					Label_Time.Value = TL::TimeToText(TeamRank.Time, True, True);
				} else {
					Label_Time.Value = "--:--.---";
				}
			} else if (HasLeadTime && TeamRank.Time > 0) {
				Label_Time.Value = Tools::FormatTimeDiff(TeamRank.TimeDiff);
			} else {
				Label_Time.Value = "--:--.---";
			}

			declare Real PosY = -Key * {{{Size_Team.Y}}};
			if (SeparatorIndex >= 0) PosY -= {{{Size_TeamSeparator.Y}}};
			AnimMgr.Flush(Frame_Team);
			if (Frame_Team.RelativePosition_V3.Y != PosY) {
				AnimMgr.Add(Frame_Team, "<a pos=\"0 "^PosY^"\" />", C_LiveRankingAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}

			Frame_Team.Visible = True;
		} else {
			Control.Visible = False;
		}
	}
	AnimMgr.Flush(_State.Controls.Quad_SmallLiveRankingLine);
	_State.Controls.Quad_SmallLiveRankingLine.Visible = SeparatorIndex >= 0;
	if (_State.Controls.Quad_SmallLiveRankingLine.Visible) {
		declare Vec2 Pos = <_State.Controls.Quad_SmallLiveRankingLine.RelativePosition_V3.X, (-SeparatorIndex * {{{Size_Team.Y}}}) - {{{Size_TeamSeparator.Y * 0.5}}}>;
		if (_State.Controls.Quad_SmallLiveRankingLine.RelativePosition_V3.Y != Pos.Y) {
			AnimMgr.Add(_State.Controls.Quad_SmallLiveRankingLine, "<a pos=\""^Pos.X^" "^Pos.Y^"\" />", C_LiveRankingAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}
}

K_State UpdateLiveRanking(K_State _State, Integer[][] _TeamsRanking) {
	declare K_State State = _State;

	declare Boolean HasLeadTime = False;
	declare Integer SeparatorKey = -1;
	declare Integer TeamsNb = 0;
	foreach (Key => Control in State.Controls.Frame_Teams.Controls) {
		if (Key < _TeamsRanking.count) {
			declare {{{Ranking::P}}}K_TeamRank TeamRank = {{{Ranking::P}}}GetTeamRank(_TeamsRanking[Key], Key + 1);
			declare Integer TeamPrevRank = State.TeamsPrevRank.get(TeamRank.TeamId, State.Controls.Frame_Teams.Controls.count + 1);
			State.TeamsPrevRank[TeamRank.TeamId] = Key + 1;

			if (!TeamRank.Eliminated) {
				declare CMlFrame Frame_Team <=> (Control as CMlFrame);
				declare CMlQuad Button_SpecTeam <=> (Frame_Team.GetFirstChild("button-spec-team") as CMlQuad);
				declare CMlQuad Quad_RankBg <=> (Frame_Team.GetFirstChild("quad-rank-bg") as CMlQuad);
				declare CMlQuad Quad_LogoBg <=> (Frame_Team.GetFirstChild("quad-logo-bg") as CMlQuad);
				declare CMlQuad Quad_NameBg <=> (Frame_Team.GetFirstChild("quad-name-bg") as CMlQuad);
				declare CMlQuad Quad_PointsBg <=> (Frame_Team.GetFirstChild("quad-points-bg") as CMlQuad);
				declare CMlQuad Quad_TimeBg <=> (Frame_Team.GetFirstChild("quad-time-bg") as CMlQuad);
				declare CMlLabel Label_Rank <=> (Frame_Team.GetFirstChild("label-rank") as CMlLabel);
				declare CMlQuad Quad_Logo <=> (Frame_Team.GetFirstChild("quad-logo") as CMlQuad);
				declare CMlLabel Label_Name <=> (Frame_Team.GetFirstChild("label-name") as CMlLabel);
				declare CMlLabel Label_Points <=> (Frame_Team.GetFirstChild("label-points") as CMlLabel);
				declare CMlLabel Label_Time <=> (Frame_Team.GetFirstChild("label-time") as CMlLabel);

				declare Integer TeamScore_TeamId for Button_SpecTeam = 0;
				TeamScore_TeamId = TeamRank.TeamId;

				Quad_RankBg.BgColor = Clans::GetClanColor(TeamRank.TeamId);
				FocusTeam(Frame_Team, State.TargetPlayerClan, TeamScore_TeamId, TeamRank.TeamId == State.TargetPlayerClan);

				if (TeamRank.Rank < State.EliminationRank) {
					Quad_TimeBg.BgColor = C_Color_BGValueBetter;
				} else {
					Quad_TimeBg.BgColor = C_Color_BGValueWorse;
					if (SeparatorKey <= 0) SeparatorKey = Key;
				}

				Label_Rank.Value = ""^TeamRank.Rank;
				Quad_Logo.ImageUrl = Clans::GetClanLogo(TeamRank.TeamId);
				Quad_Logo.Visible = Quad_Logo.ImageUrl != "";
				Label_Name.Value = Clans::GetClanName(TeamRank.TeamId);
				Label_Points.Value = ""^TeamRank.Points;
				if (TeamRank.Rank <= 1) {
					if (TeamRank.Time > 0) {
						HasLeadTime = True;
						Label_Time.Value = TL::TimeToText(TeamRank.Time, True, True);
					} else {
						Label_Time.Value = "--:--.---";
					}
				} else if (HasLeadTime && TeamRank.Time > 0) {
					Label_Time.Value = Tools::FormatTimeDiff(TeamRank.TimeDiff);
				} else {
					Label_Time.Value = "--:--.---";
				}

				declare Real NewPosY = -Key * {{{Size_Team.Y}}};
				declare Real PrevPosY = -(TeamPrevRank - 1) * {{{Size_Team.Y}}};
				if (SeparatorKey >= 0) NewPosY -= {{{Size_TeamSeparator.Y}}};
				if (TeamPrevRank >= State.EliminationRank) PrevPosY -= {{{Size_TeamSeparator.Y}}};
				AnimMgr.Flush(Frame_Team);
				Frame_Team.RelativePosition_V3.Y = PrevPosY;
				if (Frame_Team.RelativePosition_V3.Y != NewPosY) {
					AnimMgr.Add(Frame_Team, "<a pos=\"0 "^NewPosY^"\" />", C_LiveRankingAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				}

				TeamsNb += 1;
				Frame_Team.Visible = True;
			} else {
				Control.Visible = False;
			}
		} else {
			Control.Visible = False;
		}
	}

	AnimMgr.Flush(State.Controls.Quad_LiveRankingLine);
	State.Controls.Quad_LiveRankingLine.Visible = SeparatorKey >= 0;
	if (State.Controls.Quad_LiveRankingLine.Visible) {
		declare Vec2 Pos = <State.Controls.Quad_LiveRankingLine.RelativePosition_V3.X, (-SeparatorKey * {{{Size_Team.Y}}}) - {{{Size_TeamSeparator.Y * 0.5}}}>;
		if (State.Controls.Quad_LiveRankingLine.RelativePosition_V3.Y != Pos.Y) {
			AnimMgr.Add(State.Controls.Quad_LiveRankingLine, "<a pos=\""^Pos.X^" "^Pos.Y^"\" />", C_LiveRankingAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	AnimMgr.Flush(State.Controls.Quad_LiveRankingBg);
	declare Real BgSizeY = (TeamsNb * {{{Size_Team.Y}}});
	if (State.Controls.Quad_LiveRankingLine.Visible) {
		BgSizeY += {{{Size_TeamSeparator.Y}}};
	}
	if (State.Controls.Quad_LiveRankingBg.Size.Y != BgSizeY) {
		AnimMgr.Add(State.Controls.Quad_LiveRankingBg, "<a size=\""^State.Controls.Quad_LiveRankingBg.Size.X^" "^BgSizeY^"\" />", C_LiveRankingAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

K_State Update(
	K_State _State,
	CSmPlayer _TargetPlayer,
	Boolean _DisplayModule,
	Boolean _PlayerEnabled,
	Integer _RankingUpdate,
	Integer[][] _TeamsRanking,
	Integer _EliminationRank,
	Integer _NotEliminatedTeamsNb,
	Boolean _NoDelay,
	Boolean _InputPlayerIsSpawned
) {
	declare K_State State = _State;

	if (_TargetPlayer == Null) {
		State.TargetPlayerId = NullId;
		State.TargetPlayerClan = -1;
	} else {
		State.TargetPlayerId = _TargetPlayer.Id;
		State.TargetPlayerClan = _TargetPlayer.CurrentClan;
	}

	State.RankingUpdate = _RankingUpdate;
	State.EliminationRank = _EliminationRank;
	State.NotEliminatedTeamsNb = _NotEliminatedTeamsNb;

	State = SetVisibility(State, _DisplayModule, _PlayerEnabled, _TeamsRanking.count > 0, _NoDelay, _InputPlayerIsSpawned);
	if (State.IsDisplayed_BigLiveRanking) {
		State = UpdateLiveRanking(State, _TeamsRanking);
	}
	if (State.IsDisplayed_SmallLiveRanking) {
		UpdateSmallLiveRanking(State, _TeamsRanking);
	}

	return State;
}

***MainInit***
***
declare netread Boolean Net_Royal_LiveRanking_IsVisible for UI;
declare netread Integer Net_Royal_TeamScore_EliminationRank for Teams[0];
declare netread Integer Net_Royal_TeamScore_NotEliminatedTeamsNb for Teams[0];

declare K_State State;
***

***MainStart***
***
State = K_State {
	Controls = K_Controls {},
	IsDisplayed_BigLiveRanking = False,
	IsDisplayed_SmallLiveRanking = False,
	IsDisplayed_DisplayModule = False,
	IsDisplayed_PlayerEnabled = False,
	IsDisplayed = False,
	DisplayAnimEndTime = -1,
	TargetPlayerId = NullId,
	TargetPlayerClan = -1,
	RankingUpdate = -1,
	EliminationRank = -1,
	TeamsPrevRank = [],
	NotEliminatedTeamsNb = -1
};

State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_DisplayButton <=> (State.Controls.Frame_Global.GetFirstChild("frame-display-button") as CMlFrame);
State.Controls.Button_Toggle <=> (State.Controls.Frame_DisplayButton.GetFirstChild("button-toggle") as CMlQuad);
State.Controls.Frame_LiveRanking <=> (State.Controls.Frame_Global.GetFirstChild("frame-live-ranking") as CMlFrame);
State.Controls.Frame_Teams <=> (State.Controls.Frame_LiveRanking.GetFirstChild("frame-teams") as CMlFrame);
State.Controls.Quad_LiveRankingBg <=> (State.Controls.Frame_LiveRanking.GetFirstChild("quad-live-ranking-bg") as CMlQuad);
State.Controls.Quad_LiveRankingLine <=> (State.Controls.Frame_LiveRanking.GetFirstChild("quad-live-ranking-line") as CMlQuad);
State.Controls.Frame_SmallLiveRanking <=> (State.Controls.Frame_Global.GetFirstChild("frame-small-live-ranking") as CMlFrame);
State.Controls.Frame_SmallTeams <=> (State.Controls.Frame_SmallLiveRanking.GetFirstChild("frame-teams") as CMlFrame);
State.Controls.Quad_SmallLiveRankingLine <=> (State.Controls.Frame_SmallLiveRanking.GetFirstChild("quad-live-ranking-line") as CMlQuad);

State = Update(State, GUIPlayer, State.Controls.Frame_Global.Visible, GetVisibility_PlayerEnabled(), {{{Ranking::P}}}GetTeamsRankingUpdate(), {{{Ranking::P}}}GetTeamsRanking(), Net_Royal_TeamScore_EliminationRank, Net_Royal_TeamScore_NotEliminatedTeamsNb, True, IsSpawned(InputPlayer));

// On Sony consoles every player names must be in the safe area
// see: /trackmania-next/tmnext/-/issues/4660
if (Platform::IsSony(System)) {
	State.Controls.Frame_Global.GetFirstChild("{{{UIModules::GetCustomizableUIModuleFrameId(UIModules_LiveRanking_Common::C_UIModuleConfig)}}}").RelativePosition_V3 = <-144., 80.>;
}
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.IsDisplayed_DisplayModule != Net_Royal_LiveRanking_IsVisible) {
		State = Update(State, GUIPlayer, Net_Royal_LiveRanking_IsVisible, State.IsDisplayed_PlayerEnabled, {{{Ranking::P}}}GetTeamsRankingUpdate(), {{{Ranking::P}}}GetTeamsRanking(), Net_Royal_TeamScore_EliminationRank, Net_Royal_TeamScore_NotEliminatedTeamsNb, True, IsSpawned(InputPlayer));
	}

	if (State.IsDisplayed_DisplayModule) {
		if (
			State.RankingUpdate != {{{Ranking::P}}}GetTeamsRankingUpdate() ||
			State.EliminationRank != Net_Royal_TeamScore_EliminationRank ||
			State.NotEliminatedTeamsNb != Net_Royal_TeamScore_NotEliminatedTeamsNb ||
			State.InputPlayerIsSpawned != IsSpawned(InputPlayer) ||
			(GUIPlayer != Null && (State.TargetPlayerId != GUIPlayer.Id || State.TargetPlayerClan != GUIPlayer.CurrentClan)) ||
			(GUIPlayer == Null && (State.TargetPlayerId != NullId || State.TargetPlayerClan != -1))
		) {
			State = Update(State, GUIPlayer, State.IsDisplayed_DisplayModule, State.IsDisplayed_PlayerEnabled, {{{Ranking::P}}}GetTeamsRankingUpdate(), {{{Ranking::P}}}GetTeamsRanking(), Net_Royal_TeamScore_EliminationRank, Net_Royal_TeamScore_NotEliminatedTeamsNb, False, IsSpawned(InputPlayer));
		}

		foreach (Event in PendingEvents) {
			if (Event.Type == CMlScriptEvent::Type::MouseOver) {
				if (Event.Control.HasClass("interactive")) {
					AnimMgr.Flush(Event.Control);
					AnimMgr.Add(Event.Control, "<a opacity=\"1\" scale=\"1.05\" />", 125, CAnimManager::EAnimManagerEasing::QuadIn);
				} else if (Event.ControlId == "button-spec-team") {
					if (InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
						declare Integer TeamScore_TeamId for Event.Control = 0;
						if (TeamScore_TeamId != 0) {
							FocusTeam(Event.Control.Parent as CMlFrame, State.TargetPlayerClan, TeamScore_TeamId, True);
						}
					}
				}
			} else if (Event.Type == CMlScriptEvent::Type::MouseOut) {
				if (Event.Control.HasClass("interactive")) {
					AnimMgr.Flush(Event.Control);
					AnimMgr.Add(Event.Control, "<a opacity=\"0.6\" scale=\"1\" colorize=\"ffffff\" />", 125, CAnimManager::EAnimManagerEasing::QuadIn);
				} else if (Event.ControlId == "button-spec-team") {
					if (InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
						declare Integer TeamScore_TeamId for Event.Control = 0;
						if (TeamScore_TeamId != 0) {
							FocusTeam(Event.Control.Parent as CMlFrame, State.TargetPlayerClan, TeamScore_TeamId, False);
						}
					}
				}
			} else if (Event.Type == CMlScriptEvent::Type::MouseClick) {
				if (Event.Control.HasClass("interactive")) {
					AnimMgr.Flush(Event.Control);
					AnimMgr.Add(Event.Control, "<a colorize=\"{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}\" />", 125, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.AddChain(Event.Control, "<a colorize=\"ffffff\" />", 125, CAnimManager::EAnimManagerEasing::QuadOut);
				}
				if (Event.ControlId == "button-toggle") {
					State = Update(State, GUIPlayer, State.IsDisplayed_DisplayModule, !State.IsDisplayed_PlayerEnabled, {{{Ranking::P}}}GetTeamsRankingUpdate(), {{{Ranking::P}}}GetTeamsRanking(), Net_Royal_TeamScore_EliminationRank, Net_Royal_TeamScore_NotEliminatedTeamsNb, True, IsSpawned(InputPlayer));
				} else if (Event.ControlId == "button-spec-team") {
					if (InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
						declare Integer TeamScore_TeamId for Event.Control = 0;
						if (TeamScore_TeamId != 0) {
							{{{Spectator::P}}}SpectateNextClanPlayer(TeamScore_TeamId);
						}
					}
				}
			}
		}
	}

	if (State.DisplayAnimEndTime >= 0 && State.DisplayAnimEndTime <= Now) {
		State.DisplayAnimEndTime = -1;
		State.Controls.Frame_Global.Visible = State.IsDisplayed;
	}
}
***
""",
[
	UIModules::Component(),
	Ranking::Component(),
	Spectator::Component()
],
[]
	);
}