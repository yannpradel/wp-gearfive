/**
 *	UI module: WaitingScreen client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/WaitingScreen_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as MenuConst
#Include "Libs/Nadeo/Trackmania/Components/MainBackground.Script.txt" as MainBackground
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/WaitingScreen_Common.Script.txt" as UIModules_WaitingScreen_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/ZIndex.Script.txt" as ZIndex
#Include "Libs/Nadeo/Trackmania/Modes/Royal/SuperRoyal_Client.Script.txt" as SuperRoyal
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/PauseMenuOnline_Client.Script.txt" as PauseMenu_Online
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/CMGame/Components/MenuButtonList.Script.txt" as MenuButtonList
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_HideBackground True
#Const C_ImgPath "file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal"
#Const C_PlayersCheckInterval 1000

#Const C_NavGroupPlayers "navgroup-waiting-screen-royal-players"
#Const C_NavGroupGlobal "navgroup-waiting-screen-royal-global"

#Const C_Class_Player "class-waiting-screen-royal-player"

#Const C_InputPriority_WaitingScreen 1

#Const C_Column_Number 0
#Const C_Column_Legend 1

//L16N [Track Browser] %1 MUST STAY AT THE END OF THE STRING !!! %1 will be replaced by the name of the author of the track, e.g. "by PlayerA". If your language does not permit to keep the %1 at the end of the string, do not translate "By" and just keep the text "%1"
#Const C_Text_AuthorName _("|NameOnTheRight|By %1")

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_WaitingScreen_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_WaitingScreen_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Text Text_Royal = "Royal";
	//L16N [WaitingScreen Royal] Display the qualification phase number of the Super Royal competition, %1 will be replaced by a number. e.g "Qualification phase 2"
	declare Text Text_QualifNumber =  _("Qualification phase %1");
	//L16N [WaitingScreen Royal] Last phase of the Super Royal competition
	declare Text Text_Finale =  _("Finale");
	//L16N [WaitingScreen Royal] Display the number of tracks played in the match. %1 will be replaced by the number of the track currently played. %2 will be replaced by the total number of tracks that will be played. eg: "Track 3/5" meaning that we are playing the third track on the five that will be played.
	declare Text Text_MapsProgressionFull = _("Track %1/%2");
	//L16N [WaitingScreen Royal] Display the number of tracks played in the match. %1 will be replaced by the number of the track currently played. eg: "Track 3" meaning that we are playing the third track.
	declare Text Text_MapsProgressionPart = _("Track %1");
	//L16N [WaitingScreen Royal] Message displayed while waiting for the other players connexion at the beginning of a match.
	declare Text Text_WaitingForPlayers = _("Waiting for players");
	//L16N [WaitingScreen Royal] Message displayed when the match is ready to start and the user will begin to play.
	declare Text Text_MatchStarting = _("Match starting, get ready!");
	//L16N [WaitingScreen Royal] The number of teams still playing this round. The number will be displayed on the left, always 2 or more. eg: "20 Teams remaining"
	declare Text Text_RemainingTeams = _("Teams remaining");
	//L16N [WaitingScreen Royal] One team still playing this round. The number will be displayed on the left. eg: "1 Team remaining"
	declare Text Text_RemainingTeam = _("Team remaining");
	//L16N [WaitingScreen Royal] The number of teams eliminated at the end of the round. The number will be displayed on the left, always 2 or more. eg: "4 Teams eliminated this round".
	declare Text Text_EliminatedTeams = _("Teams eliminated this round");
	//L16N [WaitingScreen Royal] One team eliminated at the end of the round. The number will be displayed on the left. eg: "1 Team eliminated this round".
	declare Text Text_EliminatedTeam = _("Team eliminated this round");
	//L16N [WaitingScreen Royal] To mute all players in the voice chat
	declare Text Text_MuteAll = _("Mute all");
	//L16N [WaitingScreen Royal] To unmute all players in the voice chat
	declare Text Text_UnmuteAll = _("Unmute all");

	declare Text Img_MapInfoBackground = C_ImgPath^"/hud_royal_ingame_team_icon_bg.dds";
	declare Text Img_EliminationsBackground = C_ImgPath^"/hud_royal_ingame_loading_teams_infos.dds";

	declare Real SizeX_ThumbnailMask = 108.;
	declare Vec2 Size_ThumbnailMask = <SizeX_ThumbnailMask, SizeX_ThumbnailMask * (400. / 680.)>;
	declare Vec2 Size_ThumbnailMargin = <1., 1.5>;
	declare Vec2 Size_Thumbnail = Size_ThumbnailMask - (Size_ThumbnailMargin * 2.);
	declare Vec2 Pos_Thumbnail = <Size_ThumbnailMargin.X, -Size_ThumbnailMargin.Y>;
	declare Real Opacity_Dimmer = 0.2;
	declare Vec2 Size_MapInfoBackground = <12.7 * (756. / 152.), 12.7>;
	declare Vec2 Size_EliminationsBackground = <12.7 * (965. / 144.), 12.7>;
	declare Vec2 Size_Player = <60., 8.>;
	declare Vec2 Size_PlayerName = <50., 8.>;
	declare Vec2 Size_PlayerSpeaker = <10., 8.>;
	declare Vec2 Pos_PlayerVoiceChatSpeaker = <Size_Player.X * 0.49, 0.>;
	declare Real PosX_PlayerNameDefault = Size_Player.X * 0.06;
	declare Real PosX_PlayerNameVoiceChatEnabled = 0.;
	declare Vec2 Size_TeamLogo = <65., 65. * (208. / 532.)>;
	declare Real PosY_HideTeam = -60.;
	declare Real PosY_Team_Default = -82.;
	if (Platform::IsSony(System)) PosY_Team_Default = -73.5;
	declare Vec2 Pos_MapProgression_Royal = <0., 69.>;
	declare Vec2 Pos_MapProgression_SuperRoyal = <6., 55.>;
	declare Real Rot_MapProgression_Royal = 0.;
	declare Real Rot_MapProgression_SuperRoyal = -10.;

	declare Grid::K_GridConfig GridConfig_Eliminations = Grid::Create(Size_EliminationsBackground.X * 0.96, 1., 1., Grid::C_Direction_Right);
	GridConfig_Eliminations = Grid::AddColumn(GridConfig_Eliminations, C_Column_Number, 10., Grid::C_Align_Right);
	GridConfig_Eliminations = Grid::AddColumn(GridConfig_Eliminations, C_Column_Legend, 90., Grid::C_Align_Left);
	declare Grid::K_Grid Grid_Elmiminations = Grid::Compile(GridConfig_Eliminations);

	declare Text ManialinkId = GetId();
	return MV::Create(
		ManialinkId, 3,
"""
<stylesheet>
	<style class="text-bold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" />
	<style class="text-semibold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$t$i" />
	<style class="text-regular" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textprefix="$t$i" />
</stylesheet>

<framemodel id="framemodel-player">
	<frame id="frame-player-name" pos="{{{PosX_PlayerNameDefault}}} 0" halign="center" valign="center">
		<quad id="quad-hitbox" size="{{{Size_Player.X}}} {{{Size_Player.Y}}}" pos="{{{Size_Player.X * 0.07}}} 0" scriptevents="1" opacity="0" halign="center" valign="center2" class="{{{Navigation::C_Class_ActivationZone}}}"/>
		<frameinstance id="frame-player-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_PlayerName.X}}}" data-height="{{{Size_PlayerName.Y}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" data-opacity="0.6" data-halign="center" data-valign="center2" z-index="-1"/>
		<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" z-index="2" data-size="{{{Size_PlayerName.X * 0.9}}} {{{Size_PlayerName.Y}}}" data-halign="center" data-valign="center2" data-textcolor="ffffff" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" data-textprefix="$t$i" />
	</frame>

	<frame id="frame-voicechat" pos="{{{Pos_PlayerVoiceChatSpeaker.X}}} {{{Pos_PlayerVoiceChatSpeaker.Y}}}" hidden="1">
		<frameinstance id="frame-speaker-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_PlayerSpeaker.X}}}" data-height="{{{Size_PlayerSpeaker.Y}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" data-styles="{{{ExpendableAsset::C_Style_RightEdgeRounded}}}" data-opacity="0.6" data-halign="center" data-valign="center2" z-index="-1"/>
		<quad id="quad-speaker" size="5 5" image="{{{Icons::C_Icon_128x128_Speaker_Off}}}" opacity="0.6" colorize="FFF" halign="center" valign="center2" />
		<frameinstance
			z-index="2"
			id="loading-spinner-speaker"
			modelid="{{{LoadingSpinner::C_Name}}}"
			scale="0.15"
			pos="1.5 -0.1"
			hidden="1"
		/>
	</frame>
</framemodel>

<frame id="frame-global"
	z-index="{{{ZIndex::C_ZIndex_WaitingScreen}}}"
	data-nav-inputs="cancel;appmenu;action1"
	data-nav-targets="_;_;_"
	data-nav-group="{{{C_NavGroupGlobal}}}"
	data-nav-selected="1"
	class="{{{Navigation::C_Class}}}"
	hidden="1"
>
	<frame {{{UIModules::CustomizableUIModule(UIModules_WaitingScreen_Common::C_UIModuleConfig)}}}>
		<frameinstance modelid="{{{MainBackground::C_Name}}}" z-index="0" hidden="{{{C_HideBackground}}}" />
		<quad id="quad-dimmer" z-index="1" size="320 180" halign="center" valign="center" fullscreen="1" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0" />
		<frameinstance modelid="{{{MenuButtonList::C_Name}}}" id="frame-button-list-waiting-screen-royal" z-index="3" />
		<frame z-index="2" size="320 180" halign="center" valign="center">
			<frame id="frame-visibility-anim-up" pos="0 180">
				<quad hidden="1" id="quad-super-royal-logo" pos="0 73" size="50 50" halign="center" valign="center2" z-index="1"/>
				<label id="label-mode-name" pos="0 79" size="180 20" halign="center" valign="center2" textsize="9" text="{{{Text_Royal}}}" class="text-bold" z-index="1"/>
				<label id="label-maps-progression" pos="0 69" size="180 20" halign="center" valign="center2" textsize="6" class="text-bold" z-index="1"/>
				<frame id="frame-maps-progression-bg-clip" size="50 50" halign="center" valign="center" z-index="0">
					<quad id="quad-maps-progression-bg" size="50 22" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" halign="center" valign="center" opacity="0.6"/>
				</frame>
			</frame>
			<frame id="frame-visibility-anim-right" pos="320 0">
				<frame pos="160 74.5">
					<quad pos="0.5 0" z-index="-1" {{{MLHelpers::Size(Size_MapInfoBackground)}}} halign="right" opacity="0.6" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" image="{{{Img_MapInfoBackground}}}" />
					<label id="label-map-name" pos="{{{Size_MapInfoBackground.X * -0.93}}} -4.5" size="{{{Size_MapInfoBackground.X * 0.9}}} 6" valign="center2" textsize="3" class="text-bold" filter-profanities="OnlyIfNotTranslated" />
					<frameinstance id="playername-map-author" modelid="{{{PlayerName::C_Name}}}" pos="{{{Size_MapInfoBackground.X * -0.945}}} -9" data-size="{{{Size_MapInfoBackground.X * 0.9}}} 6" data-valign="center2" data-textsize="3" data-textcolor="ffffff" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-textprefix="$t$i" data-textcompose="{{{C_Text_AuthorName}}}" />
				</frame>
			</frame>
			<frame id="frame-visibility-anim-left" pos="-320 0">
				<frame id="frame-eliminations" pos="-160 74">
					<quad pos="-0.5 0" z-index="-1" {{{MLHelpers::Size(Size_EliminationsBackground)}}} opacity="0.6" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" image="{{{Img_EliminationsBackground}}}" />
					<label id="label-remaining-teams-number" {{{Grid::Pos(Grid_Elmiminations, C_Column_Number, -4.)}}} {{{Grid::Size(Grid_Elmiminations, C_Column_Number, 6.)}}} halign="right" valign="center2" textsize="4" class="text-bold" />
					<label id="label-remaining-teams-legend" {{{Grid::Pos(Grid_Elmiminations, C_Column_Legend, -4.3)}}} {{{Grid::Size(Grid_Elmiminations, C_Column_Legend, 6.)}}} valign="center2" textsize="2" class="text-semibold" />
					<label id="label-eliminated-teams-number" {{{Grid::Pos(Grid_Elmiminations, C_Column_Number, -9.)}}} {{{Grid::Size(Grid_Elmiminations, C_Column_Number, 6.)}}} halign="right" valign="center2" textsize="4" class="text-bold" />
					<label id="label-eliminated-teams-legend" {{{Grid::Pos(Grid_Elmiminations, C_Column_Legend, -9.3)}}} {{{Grid::Size(Grid_Elmiminations, C_Column_Legend, 6.)}}} valign="center2" textsize="2" class="text-semibold" />
				</frame>
			</frame>
			<frame id="frame-visibility-anim-down" pos="0 -180">
				<frame pos="-54 32.5" hidden="{{{C_HideBackground}}}">
					<quad {{{MLHelpers::Size(Size_ThumbnailMask)}}} image="{{{MenuConst::C_ImageUrl_LocalNetwork_Boxmap}}}" colorize="000000" />
					<quad id="quad-map-thumbnail" {{{MLHelpers::Pos(Pos_Thumbnail)}}} z-index="1" {{{MLHelpers::Size(Size_Thumbnail)}}} alphamask="{{{MenuConst::C_ImageUrl_LocalNetwork_Boxmap_Mask}}}" keepratio="clip" />
					<quad z-index="2" {{{MLHelpers::Size(Size_ThumbnailMask)}}} image="{{{MenuConst::C_ImageUrl_LocalNetwork_Boxmap_Contour}}}" colorize="ffffff"/>
				</frame>
				<frame id="frame-team-infos" pos="0 {{{PosY_Team_Default}}}">
					<frame id="frame-team-display-anim" pos="0 {{{PosY_HideTeam}}}" hidden="1">
						<frame id="frame-team-members" pos="0 20">
							<frameinstance modelid="framemodel-player"
								id="frame-player-0"
								pos="{{{MLHelpers::SkewX(0., 0., 10.)}}} 0."
								class="{{{Navigation::C_Class}}} {{{C_Class_Player}}}"
								halign="center" valign="center2"
								data-nav-inputs="select;down"
								data-nav-targets="_;frame-player-1"
								data-nav-group="{{{C_NavGroupPlayers}}}"
								data-nav-zone="quad-hitbox"
							/>
							<frameinstance modelid="framemodel-player"
								id="frame-player-1"
								pos="{{{MLHelpers::SkewX(0., -9., 10.)}}} -9."
								class="{{{Navigation::C_Class}}} {{{C_Class_Player}}}"
								halign="center" valign="center2"
								data-nav-inputs="select;up;down"
								data-nav-targets="_;frame-player-0;frame-player-2"
								data-nav-group="{{{C_NavGroupPlayers}}}"
								data-nav-zone="quad-hitbox"
							/>
							<frameinstance modelid="framemodel-player"
								id="frame-player-2"
								pos="{{{MLHelpers::SkewX(0., -18., 10.)}}} -18."
								class="{{{Navigation::C_Class}}} {{{C_Class_Player}}}"
								halign="center" valign="center2"
								data-nav-inputs="select;up"
								data-nav-targets="_;frame-player-1"
								data-nav-group="{{{C_NavGroupPlayers}}}"
								data-nav-zone="quad-hitbox"
							/>
						</frame>
						<label id="label-team-name" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 30.>, 10.))}}} size="120 10" halign="center" valign="center2" textsize="4" class="text-bold" />
						<quad id="quad-team-logo" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 32.>, 10.))}}} {{{MLHelpers::Size(Size_TeamLogo)}}} halign="center" valign="bottom" keepratio="fit" />
					</frame>
				</frame>
				<frame pos="160 -85" size="130 20" halign="right" valign="bottom">
					<frame pos="-12 12">
						<frame id="frame-waiting-players">
							<frameinstance id="spinner-waiting-players" modelid="{{{LoadingSpinner::C_Name}}}" scale="0.6" />
							<label id="label-waiting-players" pos="-7 0" size="105 20" halign="right" valign="center2" textsize="4" textprefix="$i" class="text-semibold" text="{{{Text_WaitingForPlayers}}}" />
						</frame>
						<label id="label-match-starting" pos="-150 0" size="110 20" halign="right" valign="center2" textsize="4" textprefix="$i" class="text-semibold" text="{{{Text_MatchStarting}}}" />
					</frame>
				</frame>
				<label id="label-super-royal-division" pos="150 -58" size="100 20" halign="right" valign="bottom" textsize="7" class="text-regular" />
				<label id="label-super-royal-round" pos="150 -68" size="100 20" halign="right" valign="bottom" textsize="7" class="text-bold" />
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Modes/Clans_Client.Script.txt" as Clans
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as MenuConst

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_VisibilityAnimLeft;
	CMlFrame Frame_VisibilityAnimRight;
	CMlFrame Frame_VisibilityAnimUp;
	CMlFrame Frame_VisibilityAnimDown;
	CMlQuad Quad_Dimmer;
	CMlFrame Spinner_WaitingPlayers;
	CMlLabel Label_MapsProgression;
	CMlQuad Quad_MapThumbnail;
	CMlLabel Label_MapName;
	CMlFrame PlayerName_MapAuthor;
	CMlFrame Frame_Eliminations;
	CMlLabel Label_RemainingTeamsNumber;
	CMlLabel Label_RemainingTeamsLegend;
	CMlLabel Label_EliminatedTeamsNumber;
	CMlLabel Label_EliminatedTeamsLegend;
	CMlFrame Frame_WaitingPlayers;
	CMlLabel Label_WaitingPlayers;
	CMlLabel Label_MatchStarting;
	CMlFrame Frame_TeamDisplayAnim;
	CMlFrame Frame_TeamMembers;
	CMlFrame[] Frames_Members;
	CMlLabel Label_TeamName;
	CMlQuad Quad_TeamLogo;
	CMlFrame Frame_MapsProgressionBgClip;
	CMlQuad Quad_MapsProgressionBg;
	CMlLabel Label_ModeName;
	CMlQuad Quad_SuperRoyalLogo;
	CMlLabel Label_SuperRoyal_Round;
	CMlLabel Label_SuperRoyal_Division;
}

#Struct K_State {
	K_Controls Controls;
	Int2 MapsProgression;
	Int2 ConnectedPlayersNb;
	Integer WaitEndTime;
	Integer NextTimerUpdate;
	Ident MapId;
	Int2 EliminationsNb;
	Integer DisplayAnimEndTime;
	Boolean DisplayModule;
	Boolean MatchStarting;
	Integer MatchStateAnimStartTime;
	Boolean DisplayTeam;
	Ident InputPlayerId;
	Integer InputPlayerClan;
}

#Const C_DisplayAnimDuration 250
#Const C_MatchStartAnimDuration 250
#Const C_TeamDisplayAnimDurtion 250
#Const C_BackgroundImageUrl {{{dump(MenuConst::C_ImageUrl_Menu_Matchmaking_BG_Royal)}}}
#Const C_PlayersCheckInterval {{{dump(C_PlayersCheckInterval)}}}
#Const C_Color_AccentOne {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}}
#Const C_SuperRoyal_Logos {{{dump(MenuConst::C_SuperRoyal_Logos)}}}
#Const C_SuperRoyal_DivisionNames {{{dump(MenuConst::C_SuperRoyal_DivisionNames)}}}
#Const C_SuperRoyal_DivisionColors {{{dump(MenuConst::C_SuperRoyal_DivisionColors)}}}
#Const C_Id {{{dump(ManialinkId)}}}
#Const C_Class_Player {{{dump(C_Class_Player)}}}
""",
"""
Boolean IsInVoiceChatChannel() {
	return UserMgr.VoiceChat_DisplayUI && LocalUser.VoiceChat != Null && LocalUser.VoiceChat.IsConnected;
}

Boolean IsNotAloneInVoiceChatChannel() {
	return UserMgr.VoiceChat_Users_Remote.count > 0;
}

Void UpdateControllerInfos(CMlFrame _Frame_ButtonList) {
	declare Boolean FocusedPlayerIsMuted = False;
	declare CMlControl FocusedControl =	{{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupPlayers}}}");
	if (FocusedControl != Null) {
		declare Boolean IsMuted for FocusedControl = False;
		FocusedPlayerIsMuted = IsMuted;
	}

	if (IsInVoiceChatChannel() && IsNotAloneInVoiceChatChannel()) {
		if (ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting == CGameUserVoiceChat::EMuteSetting::Muted) {
			if (FocusedPlayerIsMuted) {{{MenuButtonList::P}}}SetButtons(_Frame_ButtonList, ["A" => _("|Voice chat|Unmute player"), "Action1" => "{{{Text_UnmuteAll}}}"]);
			else {{{MenuButtonList::P}}}SetButtons(_Frame_ButtonList, ["A" => _("|Voice chat|Mute player"), "Action1" => "{{{Text_UnmuteAll}}}"]);
		} else {
			if (FocusedPlayerIsMuted){{{MenuButtonList::P}}}SetButtons(_Frame_ButtonList, ["A" => _("|Voice chat|Unmute player"), "Action1" => "{{{Text_MuteAll}}}"]);
			else {{{MenuButtonList::P}}}SetButtons(_Frame_ButtonList, ["A" => _("|Voice chat|Mute player"), "Action1" => "{{{Text_MuteAll}}}"]);
		}
	} else {
		{{{MenuButtonList::P}}}SetButtons(_Frame_ButtonList, []);
	}
}

Void FocusPlayer(CMlFrame _Frame_Player, Boolean _IsFocused) {
	declare CMlFrame Frame_PlayerBg <=> (_Frame_Player.GetFirstChild("frame-player-background") as CMlFrame);
	declare CMlFrame Frame_SpeakerBg <=> (_Frame_Player.GetFirstChild("frame-speaker-background") as CMlFrame);
	declare CMlQuad Quad_Speaker <=> (_Frame_Player.GetFirstChild("quad-speaker") as CMlQuad);

	if (_IsFocused) {
		AnimMgr.Flush(Quad_Speaker);
		AnimMgr.Add(Quad_Speaker, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ExpendableAsset::P}}}SetOpacity(This, Frame_PlayerBg, 1.);
		{{{ExpendableAsset::P}}}SetOpacity(This, Frame_SpeakerBg, 1.);
	} else {
		AnimMgr.Flush(Quad_Speaker);
		AnimMgr.Add(Quad_Speaker, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ExpendableAsset::P}}}SetOpacity(This, Frame_PlayerBg, 0.6);
		{{{ExpendableAsset::P}}}SetOpacity(This, Frame_SpeakerBg, 0.6);
	}
}

Void Focus(CMlControl _From, CMlControl _To, CMlFrame _Frame_ButtonList) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if (_From.HasClass(C_Class_Player)) {
			FocusPlayer(_From as CMlFrame, False);
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if (_To.HasClass(C_Class_Player)) {
			FocusPlayer(_To as CMlFrame, True);
			UpdateControllerInfos(_Frame_ButtonList);
		}
	}
}

K_State UpdateMapsProgression(K_State _State, Int2 _MapsProgression) {
	declare K_State State = _State;

	State.MapsProgression = _MapsProgression;

	if (_MapsProgression.X > 0) {
		if (_MapsProgression.Y > 0) {
			State.Controls.Label_MapsProgression.Value = TL::Compose("{{{Text_MapsProgressionFull}}}", ""^_MapsProgression.X, ""^_MapsProgression.Y);
		} else {
			State.Controls.Label_MapsProgression.Value = TL::Compose("{{{Text_MapsProgressionPart}}}", ""^_MapsProgression.X);
		}
		State.Controls.Label_MapsProgression.Visible = True;
	} else {
		State.Controls.Label_MapsProgression.Visible = False;
	}

	return State;
}

K_State UpdateConnectedPlayersNb(K_State _State, Int2 _ConnectedPlayersNb, Integer _WaitEndTime) {
	declare K_State State = _State;

	State.ConnectedPlayersNb = _ConnectedPlayersNb;
	State.WaitEndTime = _WaitEndTime;
	State.NextTimerUpdate = -1;

	if (_ConnectedPlayersNb.Y > 0 || (_WaitEndTime >= 0 && GameTime < _WaitEndTime)) {
		declare Text MessageEnd;
		if (_ConnectedPlayersNb.Y > 0) {
			MessageEnd ^= "("^_ConnectedPlayersNb.X^"/"^_ConnectedPlayersNb.Y^")";
		}
		if (_WaitEndTime >= 0 && GameTime < _WaitEndTime) {
			if (MessageEnd != "") MessageEnd ^= " ";
			MessageEnd ^= TL::TimeToText(_WaitEndTime - GameTime + 1000);
			State.NextTimerUpdate = Now + 1000;
		}
		State.Controls.Label_WaitingPlayers.Value = TL::Compose("%1 %2", "{{{Text_WaitingForPlayers}}}", MessageEnd);
	} else {
		State.Controls.Label_WaitingPlayers.Value = "{{{Text_WaitingForPlayers}}}";
	}

	return State;
}

K_State UpdateMap(K_State _State, CMap _Map) {
	declare K_State State = _State;

	if (_Map == Null) {
		State.MapId = NullId;
		State.Controls.Quad_MapThumbnail.Visible = False;
		State.Controls.Label_MapName.Visible = False;
		State.Controls.PlayerName_MapAuthor.Visible = False;
	} else {
		State.MapId = _Map.Id;

		if (_Map.MapInfo.MapUid != "") {
			State.Controls.Quad_MapThumbnail.ImageUrl = "file://Thumbnails/MapUid/"^_Map.MapInfo.MapUid;
			State.Controls.Quad_MapThumbnail.Visible = True;
		} else {
			State.Controls.Quad_MapThumbnail.Visible = False;
		}

		State.Controls.Label_MapName.Value = _Map.MapName;
		State.Controls.Label_MapName.Visible = True;

		{{{PlayerName::P}}}SetAccountId(This, State.Controls.PlayerName_MapAuthor, _Map.AuthorLogin, False);
		State.Controls.PlayerName_MapAuthor.Visible = True;
	}

	return State;
}

K_State UpdateEliminationsNb(K_State _State, Int2 _EliminationsNb) {
	declare K_State State = _State;

	State.EliminationsNb = _EliminationsNb;

	if (_EliminationsNb.X > 0 || _EliminationsNb.Y > 0) {
		// Remaining teams number
		if (_EliminationsNb.X <= 0) {
			State.Controls.Label_RemainingTeamsNumber.Visible = False;
			State.Controls.Label_RemainingTeamsLegend.Visible = False;
		} else {
			if (_EliminationsNb.X > 1) {
				State.Controls.Label_RemainingTeamsLegend.Value = "{{{Text_RemainingTeams}}}";
			} else {
				State.Controls.Label_RemainingTeamsLegend.Value = "{{{Text_RemainingTeam}}}";
			}
			State.Controls.Label_RemainingTeamsNumber.Value = ""^_EliminationsNb.X;
			State.Controls.Label_RemainingTeamsNumber.Visible = True;
			State.Controls.Label_RemainingTeamsLegend.Visible = True;
		}

		// Eliminated teams number
		if (_EliminationsNb.Y <= 0) {
			State.Controls.Label_EliminatedTeamsNumber.Visible = False;
			State.Controls.Label_EliminatedTeamsLegend.Visible = False;
		} else {
			if (_EliminationsNb.Y > 1) {
				State.Controls.Label_EliminatedTeamsLegend.Value = "{{{Text_EliminatedTeams}}}";
			} else {
				State.Controls.Label_EliminatedTeamsLegend.Value = "{{{Text_EliminatedTeam}}}";
			}
			State.Controls.Label_EliminatedTeamsNumber.Value = ""^_EliminationsNb.Y;
			State.Controls.Label_EliminatedTeamsNumber.Visible = True;
			State.Controls.Label_EliminatedTeamsLegend.Visible = True;
		}

		State.Controls.Frame_Eliminations.Visible = True;
	} else {
		State.Controls.Frame_Eliminations.Visible = False;
	}

	return State;
}

K_State SetMatchStarting(K_State _State, Boolean _IsStarting) {
	declare K_State State = _State;

	declare Boolean PlayAnim = State.MatchStarting != _IsStarting;
	State.MatchStarting = _IsStarting;
	State.MatchStateAnimStartTime = Now; //< Sync the start of the blinking animation with the arrival of the label in the screen

	if (PlayAnim) {
		AnimMgr.Flush(State.Controls.Frame_WaitingPlayers);
		AnimMgr.Flush(State.Controls.Label_MatchStarting);
		State.Controls.Label_MatchStarting.TextColor = <1., 1., 1.>;

		if (State.MatchStarting) {
			AnimMgr.Add(State.Controls.Frame_WaitingPlayers, "<a pos=\"100 0\" hidden=\"1\" />", C_MatchStartAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Label_MatchStarting, "<a pos=\"0 0\" hidden=\"0\" />", Now + C_MatchStartAnimDuration, C_MatchStartAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_WaitingPlayers, "<a pos=\"0 0\" hidden=\"0\" />", Now + C_MatchStartAnimDuration, C_MatchStartAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(State.Controls.Label_MatchStarting, "<a pos=\"-150 0\" hidden=\"1\" />", C_MatchStartAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	return State;
}

Void UpdateTeamMembers(K_State _State) {
	if (_State.DisplayTeam) {
		declare CSmPlayer[] TeamMembers;
		foreach (Player in Players) {
			if (_State.InputPlayerClan > 0 && Player.CurrentClan == _State.InputPlayerClan && Player.User != Null) {
				TeamMembers.add(Player);
				if (TeamMembers.count >= _State.Controls.Frame_TeamMembers.Controls.count) break;
			}
		}

		foreach (Key => Frame_Member in _State.Controls.Frames_Members) {
			if (Key < TeamMembers.count) {
				declare CSmPlayer Member <=> TeamMembers[Key];
				if (Member.User != Null) {
					declare Text CurrentPlayerAccountId for Frame_Member = "";
					CurrentPlayerAccountId = Member.User.WebServicesUserId;

					declare CMlFrame PlayerName_Name <=> (Frame_Member.GetFirstChild("playername-name") as CMlFrame);
					declare CMlQuad Quad_Speaker <=> (Frame_Member.GetFirstChild("quad-speaker") as CMlQuad);
					declare CMlFrame LoadingSpinner_Mute <=> (Frame_Member.GetFirstChild("loading-spinner-speaker") as CMlFrame);

					// Player name
					if (Member.Id == _State.InputPlayerId) {
						{{{PlayerName::P}}}SetTextColor(This, PlayerName_Name, C_Color_AccentOne, False);
						Quad_Speaker.Colorize = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}};
					} else {
						{{{PlayerName::P}}}SetTextColor(This, PlayerName_Name, <1., 1., 1.>, False);
						Quad_Speaker.Colorize = <1.,1.,1.>;
					}
					{{{PlayerName::P}}}SetUser(This, PlayerName_Name, Member.User, True, False);
					{{{PlayerName::P}}}Redraw(This, PlayerName_Name);

					// Voice chat
					declare Boolean UserConnectedToVoiceChat = 	Member.User != Null && Member.User.VoiceChat != Null &&	Member.User.VoiceChat.IsConnected;
					Quad_Speaker.Visible = IsInVoiceChatChannel() && IsNotAloneInVoiceChatChannel() && UserConnectedToVoiceChat;
					if (Quad_Speaker.Visible) {
						declare Boolean IsMuted for Frame_Member = False;
						IsMuted = Member.User.VoiceChat.IsMuted;

						declare Text ImageUrl = Icons::C_Icon_128x128_Speaker_Off;
						if (!Member.User.VoiceChat.MuteChangePending) {
							if (Member.User.VoiceChat.IsMuted) {
								if (Member.User.WebServicesUserId == LocalUser.WebServicesUserId) {
									ImageUrl = Icons::C_Icon_128x128_Micro_Off;
								} else {
									ImageUrl = Icons::C_Icon_128x128_Speaker_Mute;
								}
							} else if (Member.User.VoiceChat.IsSpeaking) {
								ImageUrl = Icons::C_Icon_128x128_Speaker_On;
							}
						}
						if (Quad_Speaker.ImageUrl != ImageUrl) Quad_Speaker.ImageUrl = ImageUrl;

						// Start or stop mute loading spinner if necessary
						LoadingSpinner_Mute.Visible = Member.User.VoiceChat.MuteChangePending;
						if (LoadingSpinner_Mute.Visible && !{{{LoadingSpinner::P}}}IsLoading(LoadingSpinner_Mute)) {{{LoadingSpinner::P}}}StartAnimation(This, LoadingSpinner_Mute);
						else if (!LoadingSpinner_Mute.Visible && {{{LoadingSpinner::P}}}IsLoading(LoadingSpinner_Mute)) {{{LoadingSpinner::P}}}StopAnimation(This, LoadingSpinner_Mute);
					}

					Frame_Member.Visible = True;
					{{{Navigation::P}}}Lock(Frame_Member, False);
				}
			} else {
				Frame_Member.Visible = False;
				{{{Navigation::P}}}Lock(Frame_Member, False);
			}
		}
	}
}


K_State UpdateTeams(K_State _State) {
	declare K_State State = _State;

	declare Ident InputPlayerId = NullId;
	declare Integer InputPlayerClan = -1;
	if (InputPlayer != Null) {
		InputPlayerId = InputPlayer.Id;
		InputPlayerClan = InputPlayer.CurrentClan;
	}
	declare Boolean DisplayTeam = (InputPlayerClan > 0);

	if (State.DisplayTeam != DisplayTeam) {
		State.DisplayTeam = DisplayTeam;
		AnimMgr.Flush(State.Controls.Frame_TeamDisplayAnim);
		if (State.DisplayTeam) {
			AnimMgr.Add(State.Controls.Frame_TeamDisplayAnim, "<a pos=\"0 0\" hidden=\"0\" />", C_TeamDisplayAnimDurtion, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_TeamDisplayAnim, "<a pos=\"0 {{{PosY_HideTeam}}}\" hidden=\"1\" />", C_TeamDisplayAnimDurtion, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	if (State.InputPlayerId != InputPlayerId || State.InputPlayerClan != InputPlayerClan) {
		State.InputPlayerId = InputPlayerId;
		State.InputPlayerClan = InputPlayerClan;

		State.Controls.Label_TeamName.Value = Clans::GetClanName(State.InputPlayerClan);
		State.Controls.Quad_TeamLogo.ImageUrl = Clans::GetClanLogo(State.InputPlayerClan);
		State.Controls.Quad_TeamLogo.Visible = (State.Controls.Quad_TeamLogo.ImageUrl != "");
	}

	UpdateTeamMembers(State);

	return State;
}

K_State SetVisibility(K_State _State, Boolean _IsVisible) {
	declare K_State State = _State;

	State.DisplayModule = _IsVisible;
	State.DisplayAnimEndTime = Now + C_DisplayAnimDuration;

	{{{LoadingSpinner::P}}}SetIsLoading(This, State.Controls.Spinner_WaitingPlayers, State.DisplayModule);
	{{{MainBackground::P}}}SetVisibility(_IsVisible, C_DisplayAnimDuration);
	{{{PauseMenu_Online::P}}}SetScoresTableButtonLocked(_IsVisible, C_Id);

	AnimMgr.Flush(State.Controls.Frame_VisibilityAnimLeft);
	AnimMgr.Flush(State.Controls.Frame_VisibilityAnimRight);
	AnimMgr.Flush(State.Controls.Frame_VisibilityAnimUp);
	AnimMgr.Flush(State.Controls.Frame_VisibilityAnimDown);
	AnimMgr.Flush(State.Controls.Quad_Dimmer);
	if (_IsVisible) {
		State.Controls.Frame_Global.Visible = True;
		AnimMgr.Add(State.Controls.Frame_VisibilityAnimLeft, "<a pos=\"0 0\" hidden=\"0\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Frame_VisibilityAnimRight, "<a pos=\"0 0\" hidden=\"0\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Frame_VisibilityAnimUp, "<a pos=\"0 0\" hidden=\"0\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Frame_VisibilityAnimDown, "<a pos=\"0 0\" hidden=\"0\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Quad_Dimmer, "<a opacity=\"{{{Opacity_Dimmer}}}\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(State.Controls.Frame_VisibilityAnimLeft, "<a pos=\"-320 0\" hidden=\"1\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Frame_VisibilityAnimRight, "<a pos=\"320 0\" hidden=\"1\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Frame_VisibilityAnimUp, "<a pos=\"0 180\" hidden=\"1\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Frame_VisibilityAnimDown, "<a pos=\"0 -180\" hidden=\"1\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Quad_Dimmer, "<a opacity=\"0\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

Void UpdateModename(K_State _State, Boolean _IsSuperRoyalEnabled, Integer _QualifNumber, Boolean _IsSuperRoyalFinale, Text _SuperRoyalDivision) {
	_State.Controls.Label_ModeName.Visible = !_IsSuperRoyalEnabled;
	_State.Controls.Quad_SuperRoyalLogo.Visible = _IsSuperRoyalEnabled;
	_State.Controls.Label_SuperRoyal_Round.Visible = _IsSuperRoyalEnabled;
	_State.Controls.Label_SuperRoyal_Division.Visible = _IsSuperRoyalEnabled;
	if (_IsSuperRoyalEnabled) {
		if (_IsSuperRoyalFinale) _State.Controls.Label_SuperRoyal_Round.Value = "{{{Text_Finale}}}";
		else _State.Controls.Label_SuperRoyal_Round.Value = TL::Compose("{{{Text_QualifNumber}}}", ""^_QualifNumber);
		_State.Controls.Quad_SuperRoyalLogo.ImageUrl = C_SuperRoyal_Logos.get(_SuperRoyalDivision, "");
		_State.Controls.Label_SuperRoyal_Division.Value = C_SuperRoyal_DivisionNames.get(_SuperRoyalDivision, "");
		if (C_SuperRoyal_DivisionColors.existskey(_SuperRoyalDivision))	_State.Controls.Label_SuperRoyal_Division.TextColor = CL::Hex6ToRgb(C_SuperRoyal_DivisionColors[_SuperRoyalDivision]);
		_State.Controls.Label_MapsProgression.RelativePosition_V3 = {{{Pos_MapProgression_SuperRoyal}}};
		_State.Controls.Label_MapsProgression.RelativeRotation = {{{Rot_MapProgression_SuperRoyal}}};
		_State.Controls.Frame_MapsProgressionBgClip.RelativePosition_V3 = _State.Controls.Label_MapsProgression.RelativePosition_V3 + <-0.5, 0.6>;
		_State.Controls.Frame_MapsProgressionBgClip.Size = <_State.Controls.Label_MapsProgression.ComputeWidth(_State.Controls.Label_MapsProgression.Value) + 4., 50.>;
		_State.Controls.Quad_MapsProgressionBg.Size = <2*_State.Controls.Frame_MapsProgressionBgClip.Size.X, _State.Controls.Label_MapsProgression.ComputeHeight(_State.Controls.Label_MapsProgression.Value) + 2.>;
		_State.Controls.Quad_MapsProgressionBg.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/hud_royal_scoretable_team_name_bg.dds";
		_State.Controls.Quad_MapsProgressionBg.RelativeRotation = {{{Rot_MapProgression_SuperRoyal}}};
	} else {
		_State.Controls.Label_MapsProgression.RelativePosition_V3 = {{{Pos_MapProgression_Royal}}};
		_State.Controls.Label_MapsProgression.RelativeRotation = {{{Rot_MapProgression_Royal}}};
		_State.Controls.Label_SuperRoyal_Round.Value = "";
		_State.Controls.Label_SuperRoyal_Division.Value = "";
		_State.Controls.Frame_MapsProgressionBgClip.RelativePosition_V3 = 0.5*(_State.Controls.Label_ModeName.RelativePosition_V3 + _State.Controls.Label_MapsProgression.RelativePosition_V3) + <0., 1.>;
		_State.Controls.Frame_MapsProgressionBgClip.Size = <
			ML::Max(_State.Controls.Label_ModeName.ComputeWidth(_State.Controls.Label_ModeName.Value), _State.Controls.Label_MapsProgression.ComputeWidth(_State.Controls.Label_MapsProgression.Value)) + 4.,
			_State.Controls.Label_ModeName.ComputeHeight(_State.Controls.Label_ModeName.Value) + _State.Controls.Label_MapsProgression.ComputeHeight(_State.Controls.Label_MapsProgression.Value) + 4.
		>;
		_State.Controls.Quad_MapsProgressionBg.Size = 2*_State.Controls.Frame_MapsProgressionBgClip.Size;
		_State.Controls.Quad_MapsProgressionBg.RelativeRotation = {{{Rot_MapProgression_Royal}}};
		_State.Controls.Quad_MapsProgressionBg.ImageUrl = "";
	}
}

Void MuteMyself() {
	UserMgr.VoiceChat_Mute_Myself = !UserMgr.VoiceChat_Mute_Myself;
}

Void Mute(Text _AccountId) {
	declare CGameUserVoiceChat VoiceChatUser = UserMgr.VoiceChat_FindUserFromWebServicesUserId(_AccountId);
	if (VoiceChatUser != Null) {
		if (VoiceChatUser.MuteSetting == CGameUserVoiceChat::EMuteSetting::Muted) {
			VoiceChatUser.MuteSetting = CGameUserVoiceChat::EMuteSetting::NotMuted;
		} else {
			VoiceChatUser.MuteSetting = CGameUserVoiceChat::EMuteSetting::Muted;
		}
	}
}

Void UpdateMuteAllDisplay(CMlFrame _Frame_ButtonList) {
	declare Boolean AllPlayerMuted = UserMgr.VoiceChat_Users_Remote_Muted.count > 0 && UserMgr.VoiceChat_Users_Remote_Muted.count == UserMgr.VoiceChat_Users_Remote.count;

	// Adapt DefaultMuteSetting if player manually mute or unmute everyone
	if (AllPlayerMuted && ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting == CGameUserVoiceChat::EMuteSetting::NotMuted) {
		ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting = CGameUserVoiceChat::EMuteSetting::Muted;
	} else if (UserMgr.VoiceChat_Users_Remote_Muted.count == 0 && ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting == CGameUserVoiceChat::EMuteSetting::Muted) {
		ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting = CGameUserVoiceChat::EMuteSetting::NotMuted;
	}
	UpdateControllerInfos(_Frame_ButtonList);
}

Void MuteAll() {
	if (ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting == CGameUserVoiceChat::EMuteSetting::NotMuted) {
		ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting = CGameUserVoiceChat::EMuteSetting::Muted;
		UserMgr.VoiceChat_MuteAll();
	} else {
		ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting = CGameUserVoiceChat::EMuteSetting::NotMuted;
		UserMgr.VoiceChat_UnmuteAll();
	}
}

Void RedrawPlayers(Boolean _VoiceChatEnabled, CMlFrame[] _Frames_Members, CMlFrame _Frame_ButtonList) {
	foreach (Frame_Member in _Frames_Members) {
		declare CMlFrame Frame_PlayerName <=> (Frame_Member.GetFirstChild("frame-player-name") as CMlFrame);
		declare CMlFrame Frame_VoiceChat <=> (Frame_Member.GetFirstChild("frame-voicechat") as CMlFrame);

		Frame_VoiceChat.Visible = _VoiceChatEnabled;
		if (_VoiceChatEnabled) Frame_PlayerName.RelativePosition_V3.X = {{{PosX_PlayerNameVoiceChatEnabled}}};
		else Frame_PlayerName.RelativePosition_V3.X = {{{PosX_PlayerNameDefault}}};
		FocusPlayer(Frame_Member, False);
		{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupPlayers}}}", _VoiceChatEnabled);
	}
	// Focus first player line if VoiceChat enabled
	if (_Frames_Members.count > 0 && _VoiceChatEnabled) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupPlayers}}}"), _Frames_Members[0], _Frame_ButtonList);
	}
}

Void Select(CMlControl _Control) {
	if (_Control == Null) return;

	if (_Control.HasClass(C_Class_Player)) {
		declare Text CurrentPlayerAccountId for _Control = "";
		if (CurrentPlayerAccountId == LocalUser.WebServicesUserId) {
			MuteMyself();
		} else {
			Mute(CurrentPlayerAccountId);
		}
	} else if (_Control.ControlId == "button-mute-all") {
		MuteAll();
	}
}

***MainInit***
***
declare netread Boolean Net_Royal_WaitingScreen_IsVisible for UI;
declare netread Int2 Net_Royal_WaitingScreen_MapsProgression for Teams[0];
declare netread Int2 Net_Royal_WaitingScreen_ConnectedPlayersNb for Teams[0];
declare netread Integer Net_Royal_WaitingScreen_WaitEndTime for Teams[0];
declare netread Boolean Net_Royal_WaitingScreen_MatchStarting for Teams[0];
declare netread Int2 Net_Royal_WaitingScreen_EliminationsNb for Teams[0];

declare K_State State;
declare Integer NextPlayersCheckTime;
declare CMlFrame Frame_ButtonList;
declare Boolean IsInVoiceChatChannel;
declare Boolean IsInVoiceChatChannelNotAlone;
***

***MainStart***
***
State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_VisibilityAnimLeft <=> (Page.GetFirstChild("frame-visibility-anim-left") as CMlFrame);
State.Controls.Frame_VisibilityAnimRight <=> (Page.GetFirstChild("frame-visibility-anim-right") as CMlFrame);
State.Controls.Frame_VisibilityAnimUp <=> (Page.GetFirstChild("frame-visibility-anim-up") as CMlFrame);
State.Controls.Frame_VisibilityAnimDown <=> (Page.GetFirstChild("frame-visibility-anim-down") as CMlFrame);
State.Controls.Quad_Dimmer <=> (State.Controls.Frame_Global.GetFirstChild("quad-dimmer") as CMlQuad);
State.Controls.Spinner_WaitingPlayers <=> (State.Controls.Frame_VisibilityAnimDown.GetFirstChild("spinner-waiting-players") as CMlFrame);
State.Controls.Label_MapsProgression <=> (State.Controls.Frame_VisibilityAnimUp.GetFirstChild("label-maps-progression") as CMlLabel);
State.Controls.Frame_MapsProgressionBgClip <=> (State.Controls.Frame_VisibilityAnimUp.GetFirstChild("frame-maps-progression-bg-clip") as CMlFrame);
State.Controls.Quad_MapsProgressionBg <=> (State.Controls.Frame_VisibilityAnimUp.GetFirstChild("quad-maps-progression-bg") as CMlQuad);
State.Controls.Quad_MapThumbnail <=> (State.Controls.Frame_VisibilityAnimDown.GetFirstChild("quad-map-thumbnail") as CMlQuad);
State.Controls.Label_MapName <=> (State.Controls.Frame_VisibilityAnimRight.GetFirstChild("label-map-name") as CMlLabel);
State.Controls.PlayerName_MapAuthor <=> (State.Controls.Frame_VisibilityAnimRight.GetFirstChild("playername-map-author") as CMlFrame);
State.Controls.Frame_Eliminations <=> (State.Controls.Frame_VisibilityAnimLeft.GetFirstChild("frame-eliminations") as CMlFrame);
State.Controls.Label_RemainingTeamsNumber <=> (State.Controls.Frame_Eliminations.GetFirstChild("label-remaining-teams-number") as CMlLabel);
State.Controls.Label_RemainingTeamsLegend <=> (State.Controls.Frame_Eliminations.GetFirstChild("label-remaining-teams-legend") as CMlLabel);
State.Controls.Label_EliminatedTeamsNumber <=> (State.Controls.Frame_Eliminations.GetFirstChild("label-eliminated-teams-number") as CMlLabel);
State.Controls.Label_EliminatedTeamsLegend <=> (State.Controls.Frame_Eliminations.GetFirstChild("label-eliminated-teams-legend") as CMlLabel);
State.Controls.Frame_WaitingPlayers <=> (Page.GetFirstChild("frame-waiting-players") as CMlFrame);
State.Controls.Label_WaitingPlayers <=> (State.Controls.Frame_VisibilityAnimDown.GetFirstChild("label-waiting-players") as CMlLabel);
State.Controls.Label_MatchStarting <=> (State.Controls.Frame_VisibilityAnimDown.GetFirstChild("label-match-starting") as CMlLabel);
State.Controls.Frame_TeamDisplayAnim <=> (State.Controls.Frame_VisibilityAnimDown.GetFirstChild("frame-team-display-anim") as CMlFrame);
State.Controls.Frame_TeamMembers <=> (State.Controls.Frame_TeamDisplayAnim.GetFirstChild("frame-team-members") as CMlFrame);
State.Controls.Frames_Members = [
	(State.Controls.Frame_TeamMembers.GetFirstChild("frame-player-0") as CMlFrame),
	(State.Controls.Frame_TeamMembers.GetFirstChild("frame-player-1") as CMlFrame),
	(State.Controls.Frame_TeamMembers.GetFirstChild("frame-player-2") as CMlFrame)
];
State.Controls.Label_TeamName <=> (State.Controls.Frame_TeamDisplayAnim.GetFirstChild("label-team-name") as CMlLabel);
State.Controls.Quad_TeamLogo <=> (State.Controls.Frame_TeamDisplayAnim.GetFirstChild("quad-team-logo") as CMlQuad);
State.Controls.Label_ModeName <=> (State.Controls.Frame_VisibilityAnimUp.GetFirstChild("label-mode-name") as CMlLabel);
State.Controls.Quad_SuperRoyalLogo <=> (State.Controls.Frame_VisibilityAnimUp.GetFirstChild("quad-super-royal-logo") as CMlQuad);
State.Controls.Label_SuperRoyal_Round <=> (State.Controls.Frame_VisibilityAnimDown.GetFirstChild("label-super-royal-round") as CMlLabel);
State.Controls.Label_SuperRoyal_Division <=> (State.Controls.Frame_VisibilityAnimDown.GetFirstChild("label-super-royal-division") as CMlLabel);

Frame_ButtonList <=> (State.Controls.Frame_Global.GetFirstChild("frame-button-list-waiting-screen-royal") as CMlFrame);

{{{Navigation::P}}}UseLocalEvents(This, True);
{{{MainBackground::P}}}ChangeBackgroundImages(C_BackgroundImageUrl, False);
{{{MainBackground::P}}}SetVisibility(State.Controls.Frame_Global.Visible);
State = SetVisibility(State, State.Controls.Frame_Global.Visible);
State = UpdateMapsProgression(State, Net_Royal_WaitingScreen_MapsProgression);
State = UpdateConnectedPlayersNb(State, Net_Royal_WaitingScreen_ConnectedPlayersNb, Net_Royal_WaitingScreen_WaitEndTime);
State = UpdateMap(State, Map);
State = UpdateEliminationsNb(State, Net_Royal_WaitingScreen_EliminationsNb);
State = SetMatchStarting(State, Net_Royal_WaitingScreen_MatchStarting);
State = UpdateTeams(State);
UpdateModename(State, {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());

IsInVoiceChatChannel = False;
IsInVoiceChatChannelNotAlone = False;
{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupPlayers}}}", False);
NextPlayersCheckTime = Now;
***

***MainLoop***
***
if (PageIsVisible) {
	if (!EnableMenuNavigationInputs && State.DisplayModule && State.Controls.Frame_Global.Visible) {
		EnableMenuNavigation(True, False, False, Null, {{{C_InputPriority_WaitingScreen}}});
	} else if (EnableMenuNavigationInputs && (!State.DisplayModule || !State.Controls.Frame_Global.Visible)) {
		EnableMenuNavigation(False, False, False, Null, {{{C_InputPriority_WaitingScreen}}});
	}

	if (State.DisplayModule != Net_Royal_WaitingScreen_IsVisible) {
		State = SetVisibility(State, Net_Royal_WaitingScreen_IsVisible);
		UpdateMuteAllDisplay(Frame_ButtonList);
	}

	if (State.Controls.Frame_Global.Visible) {
		if (State.MapsProgression != Net_Royal_WaitingScreen_MapsProgression) {
			State = UpdateMapsProgression(State, Net_Royal_WaitingScreen_MapsProgression);
			UpdateModename(State, {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());
		}

		if (
			State.ConnectedPlayersNb != Net_Royal_WaitingScreen_ConnectedPlayersNb ||
			State.WaitEndTime != Net_Royal_WaitingScreen_WaitEndTime
		) {
			State = UpdateConnectedPlayersNb(State, Net_Royal_WaitingScreen_ConnectedPlayersNb, Net_Royal_WaitingScreen_WaitEndTime);
		}

		if (State.MatchStarting != Net_Royal_WaitingScreen_MatchStarting) {
			State = SetMatchStarting(State, Net_Royal_WaitingScreen_MatchStarting);
		}

		if (
			Map != Null && State.MapId != Map.Id ||
			Map == Null && State.MapId != NullId
		) {
			State = UpdateMap(State, Map);
		}

		if (State.EliminationsNb != Net_Royal_WaitingScreen_EliminationsNb) {
			State = UpdateEliminationsNb(State, Net_Royal_WaitingScreen_EliminationsNb);
		}

		if (State.MatchStarting) {
			declare Real A = ML::Cos((Now - State.MatchStateAnimStartTime) / 200.);
			declare Real B = (A * 0.5 * 0.2) + 0.9;
			if (A > 0.) A *= 0.1;
			A = (A * 0.9) + 0.9;
			State.Controls.Label_MatchStarting.TextColor = <B, A, A>;
		}

		if (State.NextTimerUpdate >= 0 && State.NextTimerUpdate <= Now) {
			State = UpdateConnectedPlayersNb(State, Net_Royal_WaitingScreen_ConnectedPlayersNb, Net_Royal_WaitingScreen_WaitEndTime);
		}

		if (
			(InputPlayer != Null && (State.InputPlayerId != InputPlayer.Id || State.InputPlayerClan != InputPlayer.CurrentClan)) ||
			(InputPlayer == Null && (State.InputPlayerId != NullId || State.InputPlayerClan != -1))
		) {
			NextPlayersCheckTime = Now;
		}

		if (NextPlayersCheckTime >= 0 && Now >= NextPlayersCheckTime) {
			NextPlayersCheckTime = Now + C_PlayersCheckInterval;

			declare Boolean TeamsUpdated = False;
			foreach (Player in Players) {
				declare Integer Royal_WaitingScreen_CurrentClan for Player = -1;
				if (Royal_WaitingScreen_CurrentClan != Player.CurrentClan) {
					Royal_WaitingScreen_CurrentClan = Player.CurrentClan;
					TeamsUpdated = True;
				}
			}

			if (TeamsUpdated) {
				State = UpdateTeams(State);
			}
		}
	}

	if (State.DisplayAnimEndTime >= 0 && State.DisplayAnimEndTime <= Now) {
		State.DisplayAnimEndTime = -1;
		State.Controls.Frame_Global.Visible = State.DisplayModule;
	}

	if (IsInVoiceChatChannel != IsInVoiceChatChannel()) {
		IsInVoiceChatChannel = IsInVoiceChatChannel();
		UpdateMuteAllDisplay(Frame_ButtonList);
		RedrawPlayers(IsInVoiceChatChannel && IsInVoiceChatChannelNotAlone, State.Controls.Frames_Members, Frame_ButtonList);
	}

	if (IsInVoiceChatChannelNotAlone != IsNotAloneInVoiceChatChannel()) {
		IsInVoiceChatChannelNotAlone = IsNotAloneInVoiceChatChannel();
		UpdateMuteAllDisplay(Frame_ButtonList);
		RedrawPlayers(IsInVoiceChatChannel && IsInVoiceChatChannelNotAlone, State.Controls.Frames_Members, Frame_ButtonList);
	}

	/* Voice chat events */
	if (IsInVoiceChatChannel) {
		foreach (Event in UserMgr.VoiceChat_Events) {
			switchtype (Event) {
				case CVoiceChatEvent_User_IsConnected: {
					RedrawPlayers(IsInVoiceChatChannel && IsInVoiceChatChannelNotAlone, State.Controls.Frames_Members, Frame_ButtonList);
					UpdateTeamMembers(State);
					UpdateMuteAllDisplay(Frame_ButtonList);
				}
				case CVoiceChatEvent_SpeakingUsersChanged, CVoiceChatEvent_User_IsMuted: {
					UpdateTeamMembers(State);
					UpdateMuteAllDisplay(Frame_ButtonList);
				}
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupPlayers}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						Select(Event.To);
					} else {
						Focus(Event.From, Event.To, Frame_ButtonList);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupGlobal}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::AppMenu || Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						ShowInGameMenu();
					} if (Event.Input == CMlScriptEvent::EMenuNavAction::Action1 && IsInVoiceChatChannel) {
						MuteAll();
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupPlayers}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						Select(Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To, Frame_ButtonList);
					}
				}
			}
		}
	}
}
***
""",
[
	UIModules::Component(),
	MainBackground::Component(),
	LoadingSpinner::ComponentV2(),
	SuperRoyal::Component(),
	Navigation::ComponentV2(),
	MenuButtonList::Component(),
	ExpendableAsset::ComponentV2(),
	PauseMenu_Online::Component(),
	PlayerName::ComponentV2()
],
[]
	);
}