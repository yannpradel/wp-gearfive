/**
 *	UI module: TeamScore client side
 */
#Const Version		"1.1.2"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/TeamScore_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/TeamScore_Common.Script.txt" as UIModules_TeamScore_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/Ranking_Client.Script.txt" as Ranking
#Include "Libs/Nadeo/Trackmania/Modes/Royal/Spectator_Client.Script.txt" as Spectator
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/ZIndex.Script.txt" as ZIndex

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Img_PointsBackground "file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/hud_royal_ingame_team_points_bg.dds"
#Const C_Img_MVP "file://Media/Manialinks/Nadeo/Trackmania/Modes/Matchmaking/icons_128_settings_top_inc.dds"
#Const C_UpdateInterval 100 //< Time interval between two updates check
#Const C_ScoresUpdateInterval 1000 //< Time interval between two scores update check
#Const C_DisplayTotalPoints False

#Const C_Column_Rank 0
#Const C_Column_Logo 1
#Const C_Column_Name 2
#Const C_Column_Points 3
#Const C_Column_Time 4
#Const C_Column_MVP 5
#Const C_Column_BonusTimeLegend 6
#Const C_Column_BonusTimeValue 7

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_TeamScore_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_TeamScore_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [RoyalTeamScore] Display the number of points.
	declare Text Text_0Points = _("0 points");
	//L16N [RoyalTeamScore] Display the number of points.
	declare Text Text_1Point = _("1 point");
	//L16N [RoyalTeamScore] Display the number of points. %1 will be replaced by the number of points, always more than 1. eg: "16 points".
	declare Text Text_Points = _("%1 points");
	//L16N [RoyalTeamScore] Text displayed beside the amount of bonus time of the team. The user will see: "Bonus time      9s".
	declare Text Text_BonusTime = _("Bonus time");
	//L16N [RoyalTeamScore] Display a number of seconds. %1 will be replaced by a number. eg: "3s" meaning "3 seconds".
	declare Text Text_BonusTimeValue = _("%1s");

	declare Vec2 Size_Clip = <65., 65.>;

	declare Vec2 Size_LogoBackground = <45., 12.7>;
	declare Vec2 Size_Logo = <(Size_LogoBackground.X * 0.45) - 5., Size_LogoBackground.Y - 1.>;
	declare Vec2 Pos_Logo = <-Size_LogoBackground.X * 0.92, Size_LogoBackground.Y * -0.5>;

	declare Vec2 Pos_TeamRanking = <0., 0.>;
	declare Vec2 Size_RankTotal = <10., Size_LogoBackground.Y * 0.85>;
	declare Vec2 Pos_RankTotal = <-Size_RankTotal.X - 1., -2.6>;
	declare Vec2 Size_RankCurrent = <17., Size_RankTotal.Y>;
	declare Vec2 Pos_RankCurrent = <Pos_RankTotal.X + 1., -1.>;

	declare Vec2 Size_BonusTime = <Size_LogoBackground.X, 8.>;
	declare Vec2 Pos_BonusTime = <0., Pos_TeamRanking.Y - Size_LogoBackground.Y - 1.>;
	declare Vec2 Pos_BonusTimeContent = <0., Size_BonusTime.Y * -0.5>;
	declare Grid::K_GridConfig GridConfig_BonusTime = Grid::Create(Size_BonusTime.X, 1., 1., Grid::C_Direction_Left);
	GridConfig_BonusTime = Grid::AddColumn(GridConfig_BonusTime, C_Column_BonusTimeValue, 25., Grid::C_Align_Right);
	GridConfig_BonusTime = Grid::AddColumn(GridConfig_BonusTime, C_Column_BonusTimeLegend, 75., Grid::C_Align_Left);
	declare Grid::K_Grid Grid_BonusTime = Grid::Compile(GridConfig_BonusTime);

	declare Integer MembersNb = 3;
	declare Vec2 Size_Member = <Size_LogoBackground.X, 4.>;
	declare Vec2 Pos_Members = <-Size_Member.X, Pos_BonusTime.Y - Size_BonusTime.Y - 1. - (Size_Member.Y * 0.5)>;

	declare Grid::K_GridConfig GridConfig_Members = Grid::Create(Size_Member.X, 1., 1., Grid::C_Direction_Right);
	GridConfig_Members = Grid::AddColumn(GridConfig_Members, C_Column_Name, 75., Grid::C_Align_Left);
	GridConfig_Members = Grid::AddColumn(GridConfig_Members, C_Column_Points, 15., Grid::C_Align_Right);
	GridConfig_Members = Grid::AddColumn(GridConfig_Members, C_Column_MVP, 10., Grid::C_Align_Center);
	declare Grid::K_Grid Grid_Members = Grid::Compile(GridConfig_Members);

	declare Vec2 Size_PointsBackground = <32.2, 32.2 * (72. / 388.)>;
	declare Vec2 Pos_PointsBackground = <0.5, Pos_Members.Y - (MembersNb * Size_Member.Y) + (Size_Member.Y * 0.5) - 1.>;
	declare Vec2 Size_Points = Size_PointsBackground - <4., 1.>;
	declare Vec2 Pos_Points = <-Size_Points.X - 1., Pos_PointsBackground.Y - (Size_PointsBackground.Y * 0.5) - 0.15>;
	declare Vec2 Size_PointsAdd = <10., Size_Points.Y>;
	declare Vec2 Pos_PointsAdd = <-Size_PointsBackground.X, Pos_Points.Y>;
	declare Vec2 Size_PlayerName = Grid::GetSize(Grid_Members, C_Column_Name, Size_Member.Y - 0.5);

	declare Text ML_Members = "";
	for (I, 0, MembersNb - 1) {
		ML_Members ^= """<frameinstance modelid="framemodel-member" pos="0 {{{I * -Size_Member.Y}}}" hidden="1" />""";
	}

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-bold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" />
	<style class="text-semibold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$t$i" />
</stylesheet>

<framemodel id="framemodel-member">
	<quad id="button-spec-player" {{{MLHelpers::Size(Size_Member)}}} valign="center" opacity="0" scriptevents="1" />
	<quad z-index="-1" {{{MLHelpers::Size(Size_Member)}}} valign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" />
	<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" {{{Grid::Pos(Grid_Members, C_Column_Name, 0.)}}} data-size="{{{Size_PlayerName.X}}} {{{Size_PlayerName.Y}}}" data-valign="center" data-textsize="1" data-textcolor="ffffff" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-textprefix="$t$i" />
	<label id="label-points" {{{Grid::Pos(Grid_Members, C_Column_Points, 0.)}}} {{{Grid::Size(Grid_Members, C_Column_Points, Size_Member.Y)}}} halign="right" valign="center2" textsize="1" class="text-semibold" />
	<quad id="quad-mvp" {{{Grid::Pos(Grid_Members, C_Column_MVP, 0.2)}}} {{{Grid::Size(Grid_Members, C_Column_MVP, Size_Member.Y)}}} halign="center" valign="center" image="{{{C_Img_MVP}}}" colorize="ffffff" keepratio="fit" />
</framemodel>

<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_TeamScore}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_TeamScore_Common::C_UIModuleConfig)}}}>
		<frame {{{MLHelpers::Size(Size_Clip)}}} halign="right">
			<frame id="frame-team-points" pos="{{{Size_Clip.X}}} 0" hidden="1">

				<frame id="frame-team-ranking" {{{MLHelpers::Pos(Pos_TeamRanking)}}}>
					<quad id="quad-logo-bg" z-index="-1" {{{MLHelpers::Size(Size_LogoBackground)}}} halign="right" opacity="0.6" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" />
					<quad id="quad-logo" {{{MLHelpers::Pos(Pos_Logo)}}} {{{MLHelpers::Size(Size_Logo)}}} valign="center" keepratio="fit" />
					<frame {{{MLHelpers::Pos(Pos_RankCurrent)}}} {{{MLHelpers::Size(Size_RankCurrent)}}} halign="right">
						<label id="label-rank-current-1" {{{MLHelpers::Size(Size_RankCurrent)}}} halign="right" textsize="10" class="text-bold" />
						<label id="label-rank-current-2" {{{MLHelpers::Size(Size_RankCurrent)}}} halign="right" textsize="10" class="text-bold" />
					</frame>
					<label id="label-rank-total" {{{MLHelpers::Pos(Pos_RankTotal)}}} {{{MLHelpers::Size(Size_RankTotal)}}} textsize="3" class="text-bold" />
				</frame>

				<frame id="frame-bonus-time" {{{MLHelpers::Pos(Pos_BonusTime)}}}>
					<quad z-index="-1" {{{MLHelpers::Size(Size_BonusTime)}}} halign="right" opacity="0.6" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" />
					<frame {{{MLHelpers::Pos(Pos_BonusTimeContent)}}} z-index="0">
						<label id="label-bonus-time-legend" {{{Grid::Pos(Grid_BonusTime, C_Column_BonusTimeLegend, 0.)}}} {{{Grid::Size(Grid_BonusTime, C_Column_BonusTimeLegend, Size_BonusTime.Y)}}} valign="center2" textsize="2" text="{{{Text_BonusTime}}}" class="text-bold" />
						<frame {{{Grid::Pos(Grid_BonusTime, C_Column_BonusTimeValue, 0.)}}} {{{Grid::Size(Grid_BonusTime, C_Column_BonusTimeValue, Size_BonusTime.Y - 2.)}}} halign="right" valign="center">
							<label id="label-bonus-time-value-1" {{{Grid::Size(Grid_BonusTime, C_Column_BonusTimeValue, Size_BonusTime.Y)}}} halign="right" valign="center2" textsize="2" textprefix="$i" class="text-bold" />
							<label id="label-bonus-time-value-2" {{{Grid::Size(Grid_BonusTime, C_Column_BonusTimeValue, Size_BonusTime.Y)}}} halign="right" valign="center2" textsize="2" textprefix="$i" class="text-bold" hidden="1" />
						</frame>
					</frame>
				</frame>

				<frame id="frame-points-total" hidden="{{{!C_DisplayTotalPoints}}}">
					<quad {{{MLHelpers::Pos(Pos_PointsBackground)}}} z-index="-1" {{{MLHelpers::Size(Size_PointsBackground)}}} halign="right" opacity="0.6" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" image="{{{C_Img_PointsBackground}}}" />
					<label id="label-points" {{{MLHelpers::Pos(Pos_Points)}}} {{{MLHelpers::Size(Size_Points)}}} valign="center2" textsize="1.7" class="text-semibold"/>
					<label id="label-points-add" {{{MLHelpers::Pos(Pos_PointsAdd)}}} {{{MLHelpers::Size(Size_PointsAdd)}}} halign="right" valign="center2" textsize="1.7" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" class="text-bold" />
				</frame>

				<frame id="frame-members" {{{MLHelpers::Pos(Pos_Members)}}} z-index="1">
					{{{ML_Members}}}
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Modes/Clans_Client.Script.txt" as Clans
#Include "Libs/Nadeo/Trackmania/Modes/Knockout/Components/EliminationStatus.Script.txt" as EliminationStatus
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModulesData.Script.txt" as UIModulesData

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_TeamPoints;
	CMlQuad Quad_Logo;
	CMlFrame Frame_Members;
	CMlLabel Label_Points;
	CMlLabel Label_PointsAdd;
	CMlLabel Label_RankCurrent1;
	CMlLabel Label_RankCurrent2;
	CMlLabel Label_RankTotal;
	CMlLabel Label_BonusTimeLegend;
	CMlLabel Label_BonusTimeValue1;
	CMlLabel Label_BonusTimeValue2;
}
#Struct K_State {
	K_Controls Controls;
	Integer RankingUpdate;
	Integer EliminationRank;
	Ident TargetPlayerId;
	Integer TargetPlayerClan;
	Integer PreviousPoints;
	Integer PreviousRank;
	Integer NotEliminatedTeamsNb;
	Boolean IsDisplayed_HasValidTarget;
	Boolean IsDisplayed_DisplayModule;
	Boolean IsDisplayed;
	Integer DisplayAnimEndTime;
	Integer TeamsBonusTimeUpdate;
	Integer TeamBonusTime;
	Task::K_Task Task_RetrieveDisplayName;
}
#Struct K_Member {
	CUser User;
	Integer Points;
	Integer PrevRank;
	Integer NewRank;
}

#Const C_UpdateInterval {{{dump(C_UpdateInterval)}}}
#Const C_ScoresUpdateInterval {{{dump(C_ScoresUpdateInterval)}}}
#Const C_DisplayAnimDuration 125
#Const C_HighlightPlayer True
#Const C_DisplayTotalPoints {{{dump(C_DisplayTotalPoints)}}}
#Const C_MembersAnimDuration 250
#Const C_BonusTimeAnimDuration 500

#Const C_Color_TextValueWorse {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_TextValueWorse))}}}
#Const C_Color_AccentOne {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}}
#Const C_Color_AccentTwo {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentTwo))}}}
""",
"""
Boolean HasValidTarget(CSmPlayer _TargetPlayer) {
	return (_TargetPlayer != Null && _TargetPlayer.CurrentClan > 0);
}

K_State SetVisibility(K_State _State, Boolean _DisplayModule, Boolean _HasValidTarget) {
	declare K_State State = _State;

	if (State.IsDisplayed_HasValidTarget != _HasValidTarget || State.IsDisplayed_DisplayModule != _DisplayModule) {
		State.IsDisplayed_HasValidTarget = _HasValidTarget;
		State.IsDisplayed_DisplayModule = _DisplayModule;
		State.IsDisplayed = State.IsDisplayed_HasValidTarget && State.IsDisplayed_DisplayModule;
		State.DisplayAnimEndTime = Now + C_DisplayAnimDuration;

		AnimMgr.Flush(State.Controls.Frame_TeamPoints);
		if (State.IsDisplayed) {
			State.Controls.Frame_Global.Visible = True;
			AnimMgr.Add(State.Controls.Frame_TeamPoints, "<a pos=\"0 0\" hidden=\"0\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadIn);
		} else {
			AnimMgr.Add(State.Controls.Frame_TeamPoints, "<a pos=\"{{{Size_Clip.X}}} 0\" hidden=\"1\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadIn);
		}
	}

	return State;
}

Void FocusPlayer(CMlFrame _Frame_Member, Text _TargetPlayerLogin, Text _TeamScore_PlayerLogin, Boolean _IsFocused) {
	declare CMlFrame PlayerName_Name = (_Frame_Member.GetFirstChild("playername-name") as CMlFrame);
	declare CMlLabel Label_Points = (_Frame_Member.GetFirstChild("label-points") as CMlLabel);

	if (_IsFocused && _TargetPlayerLogin == _TeamScore_PlayerLogin) {
		{{{PlayerName::P}}}SetTextColor(This, PlayerName_Name, C_Color_AccentOne);
		Label_Points.TextColor = C_Color_AccentOne;
	} else if (_IsFocused) {
		{{{PlayerName::P}}}SetTextColor(This, PlayerName_Name, C_Color_AccentTwo);
		Label_Points.TextColor = C_Color_AccentTwo;
	} else if (_TargetPlayerLogin != _TeamScore_PlayerLogin) {
		{{{PlayerName::P}}}SetTextColor(This, PlayerName_Name, <1., 1., 1.>);
		Label_Points.TextColor = <1., 1., 1.>;
	}
}

Void Focus(K_State _State, CMlControl _Control, Text _GUIPlayerLogin, Boolean _IsFocused) {
	switch (_Control.ControlId) {
		case "button-spec-player": {
			declare Text TeamScore_PlayerLogin for _Control = "";
			if (TeamScore_PlayerLogin != "") {
				FocusPlayer(_Control.Parent as CMlFrame, _GUIPlayerLogin, TeamScore_PlayerLogin, _IsFocused);
			}
		}
	}
}

K_State UpdatePoints(
	K_State _State,
	Integer _RankingUpdate,
	Integer[][] _TeamsRanking,
	Integer _EliminationRank,
	Integer _NotEliminatedTeamsNb,
	CSmPlayer _TargetPlayer,
	Boolean _UpdateDisplayNames
) {
	declare K_State State = _State;

	declare Boolean SkipAnimation = False;

	State.RankingUpdate = _RankingUpdate;
	State.EliminationRank = _EliminationRank;
	State.NotEliminatedTeamsNb = _NotEliminatedTeamsNb;
	declare Ident MyUserId = NullId;
	declare Text TargetPlayerLogin = "";
	if (_TargetPlayer == Null) {
		SkipAnimation = True;
		State.TargetPlayerId = NullId;
		State.TargetPlayerClan = -1;
	} else {
		if (State.TargetPlayerId != _TargetPlayer.Id) {
			SkipAnimation = True;
		}
		State.TargetPlayerId = _TargetPlayer.Id;
		State.TargetPlayerClan = _TargetPlayer.CurrentClan;
		if (_TargetPlayer.User != Null) {
			MyUserId = _TargetPlayer.User.Id;
			TargetPlayerLogin = _TargetPlayer.User.Login;
		}
	}

	// Show/Hide UI if we are following a player or not
	State = SetVisibility(State, State.IsDisplayed_DisplayModule, HasValidTarget(_TargetPlayer));

	if (State.IsDisplayed) {
		declare {{{Ranking::P}}}K_TeamRank TargetTeamRank = {{{Ranking::P}}}C_TeamRankNull;
		TargetTeamRank.TeamId = _TargetPlayer.CurrentClan;
		foreach (Key => TeamRank in _TeamsRanking) {
			if ({{{Ranking::P}}}IsTeamIdRank(_TargetPlayer.CurrentClan, TeamRank)) {
				TargetTeamRank = {{{Ranking::P}}}GetTeamRank(TeamRank, Key + 1);
				break;
			}
		}

		// Set the eliminiation status for elimination warning
		EliminationStatus::SetOwnerEliminated(UI, TargetTeamRank.Rank >= State.EliminationRank);

		// Update logo
		declare Text LogoUrl = Clans::GetClanLogo(TargetTeamRank.TeamId);
		State.Controls.Quad_Logo.Visible = (LogoUrl != "");
		if (State.Controls.Quad_Logo.Visible) {
			State.Controls.Quad_Logo.ImageUrl = LogoUrl;
		}

		// Update members names
		declare K_Member[] Members;
		declare Integer MyMemberKey = -1;
		declare Text[] AccountIdsRetrieveDisplayName;
		if (State.TargetPlayerClan > 0) {
			foreach (Score in Scores) {
				if (Score.User != Null && {{{Ranking::P}}}GetScoreClan(Score) == State.TargetPlayerClan) {
					declare Integer Royal_TeamScore_NewRank for Score = State.Controls.Frame_Members.Controls.count;
					declare Integer NewRank = Members.count + 1;
					if ({{{UserStore::P}}}GetUserMgrPlayerName(Score.User.WebServicesUserId) == "") {
						AccountIdsRetrieveDisplayName.add(Score.User.WebServicesUserId);
					}
					Members.add(K_Member {
						User = Score.User,
						Points = {{{Ranking::P}}}GetPlayerPoints(Score),
						PrevRank = Royal_TeamScore_NewRank,
						NewRank = NewRank
					});
					Royal_TeamScore_NewRank = NewRank;
					if (Score.User.Id == MyUserId) {
						MyMemberKey = Members.count - 1;
					}
					if (Members.count >= State.Controls.Frame_Members.Controls.count) break;
				}
			}
		}

		declare Real Height = {{{Size_LogoBackground.Y}}} + 1. + {{{Size_BonusTime.Y}}} + 1. + {{{Size_Member.Y}}} * Members.count;
		UIModulesData::SetSize(This, {{{dump(GetId())}}}, <{{{Size_Clip.X}}}, Height>);

		foreach (Key => Control in State.Controls.Frame_Members.Controls) {
			if (Key < Members.count) {
				declare CMlFrame Frame_Member <=> (Control as CMlFrame);
				declare CMlQuad Button_SpecPlayer <=> (Frame_Member.GetFirstChild("button-spec-player") as CMlQuad);
				declare CMlFrame PlayerName_Name = (Frame_Member.GetFirstChild("playername-name") as CMlFrame);
				declare CMlLabel Label_Points <=> (Frame_Member.GetFirstChild("label-points") as CMlLabel);
				declare CMlQuad Quad_MVP <=> (Frame_Member.GetFirstChild("quad-mvp") as CMlQuad);

				declare K_Member Member = Members[Key];

				declare Text TeamScore_PlayerLogin for Button_SpecPlayer = "";
				TeamScore_PlayerLogin = Member.User.Login;
				{{{PlayerName::P}}}SetUser(This, PlayerName_Name, Member.User, True);
				Label_Points.Value = ""^Member.Points;
				FocusPlayer(Frame_Member, TargetPlayerLogin, TeamScore_PlayerLogin, C_HighlightPlayer && Key == MyMemberKey);

				AnimMgr.Flush(Frame_Member);
				if (Member.PrevRank == Member.NewRank) {
					Frame_Member.RelativePosition_V3.Y = Key * -{{{Size_Member.Y}}};
				} else {
					Frame_Member.RelativePosition_V3.Y = (Member.PrevRank - 1) * -{{{Size_Member.Y}}};
					AnimMgr.Add(Frame_Member, "<a pos=\"0 "^(Key * -{{{Size_Member.Y}}})^"\" />", C_MembersAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				}

				AnimMgr.Flush(Quad_MVP);
				if (Member.PrevRank == 1 && Member.NewRank > 1) {
					AnimMgr.Add(Quad_MVP, "<a opacity=\"0\" />", C_MembersAnimDuration, CAnimManager::EAnimManagerEasing::QuadIn);
				} else if (Member.NewRank == 1 && Member.PrevRank > 1) {
					AnimMgr.Add(Quad_MVP, "<a opacity=\"1\" />", C_MembersAnimDuration, CAnimManager::EAnimManagerEasing::QuadIn);
				} else if (Member.PrevRank == 1) {
					Quad_MVP.Opacity = 1.;
				} else {
					Quad_MVP.Opacity = 0.;
				}

				Frame_Member.Visible = True;
			} else {
				Control.Visible = False;
			}
		}

		// Retrieve missing display names with a task
		// This is shared with other UIs of the game modes
		if (_UpdateDisplayNames && AccountIdsRetrieveDisplayName.count > 0) {
			State.Task_RetrieveDisplayName = Task::DestroyAndCreate(State.Task_RetrieveDisplayName, UserMgr, UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), AccountIdsRetrieveDisplayName));
		}

		if (C_DisplayTotalPoints) {
			// Update points
			if (TargetTeamRank.Points <= 0) {
				State.Controls.Label_Points.Value = "{{{Text_0Points}}}";
			} else if (TargetTeamRank.Points == 1) {
				State.Controls.Label_Points.Value = "{{{Text_1Point}}}";
			} else {
				State.Controls.Label_Points.Value = TL::Compose("{{{Text_Points}}}", ""^TargetTeamRank.Points);
			}

			// Display points win animation
			if (SkipAnimation) {
				AnimMgr.Flush(State.Controls.Label_PointsAdd);
				State.Controls.Label_PointsAdd.Visible = False;
			} else if (State.PreviousPoints != TargetTeamRank.Points) {
				AnimMgr.Flush(State.Controls.Label_PointsAdd);
				if (State.PreviousPoints < TargetTeamRank.Points) {
					State.Controls.Label_PointsAdd.Visible = True;
					State.Controls.Label_PointsAdd.Opacity = 0.;
					State.Controls.Label_PointsAdd.RelativeScale = 0.;
					State.Controls.Label_PointsAdd.Value = "+"^(TargetTeamRank.Points - State.PreviousPoints);
					AnimMgr.Add(State.Controls.Label_PointsAdd, "<a opacity=\"1\" scale=\"1\" />", 125, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(State.Controls.Label_PointsAdd, "<a opacity=\"0\" hidden=\"1\" />", Now + 1500, 250, CAnimManager::EAnimManagerEasing::QuadOut);
				} else {
					State.Controls.Label_PointsAdd.Visible = False;
				}
			}
			State.PreviousPoints = TargetTeamRank.Points;
		}

		// Update ranking
		if (TargetTeamRank.Rank > 0 && State.NotEliminatedTeamsNb > 0) {
			State.Controls.Label_RankTotal.Value = "/"^State.NotEliminatedTeamsNb;
			State.Controls.Label_RankTotal.Visible = True;

			if (State.PreviousRank <= 0 || SkipAnimation) {
				AnimMgr.Flush(State.Controls.Label_RankCurrent1);
				AnimMgr.Flush(State.Controls.Label_RankCurrent2);
				State.Controls.Label_RankCurrent1.Value = ""^ML::Min(TargetTeamRank.Rank, State.NotEliminatedTeamsNb);
				State.Controls.Label_RankCurrent1.RelativePosition_V3.Y = 0.;
				if (TargetTeamRank.Rank >= State.EliminationRank) {
					State.Controls.Label_RankCurrent1.TextColor = C_Color_TextValueWorse;
				} else {
					State.Controls.Label_RankCurrent1.TextColor = C_Color_AccentOne;
				}
				State.Controls.Label_RankCurrent1.Visible = True;
				State.Controls.Label_RankCurrent2.Visible = False;
			} else if (State.PreviousRank != TargetTeamRank.Rank) {
				AnimMgr.Flush(State.Controls.Label_RankCurrent1);
				AnimMgr.Flush(State.Controls.Label_RankCurrent2);
				State.Controls.Label_RankCurrent1.Visible = True;
				State.Controls.Label_RankCurrent2.Visible = True;
				State.Controls.Label_RankCurrent1.Value = ""^ML::Min(TargetTeamRank.Rank, State.NotEliminatedTeamsNb);
				State.Controls.Label_RankCurrent2.Value = ""^ML::Min(State.PreviousRank, State.NotEliminatedTeamsNb);
				if (State.PreviousRank > TargetTeamRank.Rank) {
					State.Controls.Label_RankCurrent1.RelativePosition_V3.Y = {{{Size_RankCurrent.Y}}};
				} else {
					State.Controls.Label_RankCurrent1.RelativePosition_V3.Y = {{{-Size_RankCurrent.Y}}};
				}
				State.Controls.Label_RankCurrent2.RelativePosition_V3.Y = 0.;
				AnimMgr.Add(State.Controls.Label_RankCurrent1, "<a pos=\"0 0\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				if (State.PreviousRank > TargetTeamRank.Rank) {
					AnimMgr.Add(State.Controls.Label_RankCurrent2, "<a pos=\"0 {{{-Size_RankCurrent.Y}}}\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				} else {
					AnimMgr.Add(State.Controls.Label_RankCurrent2, "<a pos=\"0 {{{Size_RankCurrent.Y}}}\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				}
				if (State.PreviousRank >= State.EliminationRank) {
					State.Controls.Label_RankCurrent2.TextColor = C_Color_TextValueWorse;
				} else {
					State.Controls.Label_RankCurrent2.TextColor = C_Color_AccentOne;
				}
				if (TargetTeamRank.Rank >= State.EliminationRank) {
					State.Controls.Label_RankCurrent1.TextColor = C_Color_TextValueWorse;
				} else {
					State.Controls.Label_RankCurrent1.TextColor = C_Color_AccentOne;
				}
			}
		} else {
			AnimMgr.Flush(State.Controls.Label_RankCurrent1);
			AnimMgr.Flush(State.Controls.Label_RankCurrent2);
			State.Controls.Label_RankCurrent1.Visible = False;
			State.Controls.Label_RankCurrent2.Visible = False;
			State.Controls.Label_RankTotal.Visible = False;
		}
		State.PreviousRank = TargetTeamRank.Rank;
	}

	return State;
}

K_State UpdateBonusTime(K_State _State, Integer _TeamsBonusTimeUpdate, Integer[Integer] _TeamsBonusTime, Boolean _ChangedTargetedClan) {
	declare K_State State = _State;

	State.TeamsBonusTimeUpdate = _TeamsBonusTimeUpdate;
	declare Integer NewBonusTime = _TeamsBonusTime.get(State.TargetPlayerClan, 0);
	declare Boolean BonusTimeUpdated = False;
	if (State.TeamBonusTime != NewBonusTime) {
		State.TeamBonusTime = NewBonusTime;
		BonusTimeUpdated = True;
	}

	if (_ChangedTargetedClan || BonusTimeUpdated) {
		AnimMgr.Flush(State.Controls.Label_BonusTimeLegend);
		AnimMgr.Flush(State.Controls.Label_BonusTimeValue1);
		AnimMgr.Flush(State.Controls.Label_BonusTimeValue2);
		State.Controls.Label_BonusTimeLegend.TextColor = <1., 1., 1.>;
		State.Controls.Label_BonusTimeValue1.TextColor = <1., 1., 1.>;
		State.Controls.Label_BonusTimeValue2.TextColor = <1., 1., 1.>;
	}

	if (_ChangedTargetedClan) {
		State.Controls.Label_BonusTimeValue1.RelativePosition_V3.Y = 0.;
		State.Controls.Label_BonusTimeValue2.RelativePosition_V3.Y = {{{-Size_BonusTime.Y}}};
		State.Controls.Label_BonusTimeValue1.Visible = True;
		State.Controls.Label_BonusTimeValue2.Visible = False;
		State.Controls.Label_BonusTimeValue1.Value = TL::Compose("{{{Text_BonusTimeValue}}}", ""^State.TeamBonusTime);
	} else if (BonusTimeUpdated) {
		State.Controls.Label_BonusTimeValue1.RelativePosition_V3.Y = {{{Size_BonusTime.Y}}};
		State.Controls.Label_BonusTimeValue2.RelativePosition_V3.Y = 0.;
		State.Controls.Label_BonusTimeValue1.Visible = True;
		State.Controls.Label_BonusTimeValue2.Visible = True;

		if (State.Controls.Label_BonusTimeValue1.Value != "") {
			State.Controls.Label_BonusTimeValue2.Value = State.Controls.Label_BonusTimeValue1.Value;
		} else {
			State.Controls.Label_BonusTimeValue2.Value = TL::Compose("{{{Text_BonusTimeValue}}}", "0");
		}
		State.Controls.Label_BonusTimeValue1.Value = TL::Compose("{{{Text_BonusTimeValue}}}", ""^State.TeamBonusTime);

		AnimMgr.Add(State.Controls.Label_BonusTimeLegend, "<a textcolor=\"{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}\" />", C_BonusTimeAnimDuration / 4, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Label_BonusTimeValue1, "<a pos=\"0 0\" />", C_BonusTimeAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Label_BonusTimeValue2, "<a pos=\"0 {{{-Size_BonusTime.Y}}}\" hidden=\"1\" />", C_BonusTimeAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);

		AnimMgr.Add(State.Controls.Label_BonusTimeLegend, "<a textcolor=\"ffffff\" />", Now + C_BonusTimeAnimDuration - (C_BonusTimeAnimDuration / 4), C_BonusTimeAnimDuration / 4, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

Boolean DelaySpecModeActivation(Integer _UnspawnTime) {
	return (_UnspawnTime > 0 && Now < _UnspawnTime + UIModulesData::C_SpecModeActivationDelay);
}

***MainInit***
***
declare netread Boolean Net_Royal_TeamScore_IsVisible for UI;
declare netread Integer Net_Royal_TeamScore_EliminationRank for Teams[0];
declare netread Integer Net_Royal_TeamScore_NotEliminatedTeamsNb for Teams[0];
declare netread Integer[Integer] Net_Royal_TeamScore_TeamsBonusTime for Teams[0];
declare netread Integer Net_Royal_TeamScore_TeamsBonusTimeUpdate for Teams[0];

declare Integer NextUpdateTime;
declare Integer NextScoresUpdateTime;
declare Integer InputPlayerUnspawnTime;
declare K_State State;
***

***MainStart***
***
State = K_State {
	RankingUpdate = -1,
	EliminationRank = -1,
	TargetPlayerId = NullId,
	TargetPlayerClan = -1,
	PreviousPoints = 0,
	PreviousRank = -1,
	NotEliminatedTeamsNb = -1,
	IsDisplayed_HasValidTarget = False,
	IsDisplayed_DisplayModule = False,
	IsDisplayed = False,
	DisplayAnimEndTime = -1,
	TeamsBonusTimeUpdate = -1,
	TeamBonusTime = 0
};

State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_TeamPoints <=> (State.Controls.Frame_Global.GetFirstChild("frame-team-points") as CMlFrame);
State.Controls.Quad_Logo <=> (State.Controls.Frame_TeamPoints.GetFirstChild("quad-logo") as CMlQuad);
State.Controls.Frame_Members <=> (State.Controls.Frame_TeamPoints.GetFirstChild("frame-members") as CMlFrame);
State.Controls.Label_Points <=> (State.Controls.Frame_TeamPoints.GetFirstChild("label-points") as CMlLabel);
State.Controls.Label_PointsAdd <=> (State.Controls.Frame_TeamPoints.GetFirstChild("label-points-add") as CMlLabel);
State.Controls.Label_RankCurrent1 <=> (State.Controls.Frame_TeamPoints.GetFirstChild("label-rank-current-1") as CMlLabel);
State.Controls.Label_RankCurrent2 <=> (State.Controls.Frame_TeamPoints.GetFirstChild("label-rank-current-2") as CMlLabel);
State.Controls.Label_RankTotal <=> (State.Controls.Frame_TeamPoints.GetFirstChild("label-rank-total") as CMlLabel);
State.Controls.Label_BonusTimeLegend <=> (State.Controls.Frame_TeamPoints.GetFirstChild("label-bonus-time-legend") as CMlLabel);
State.Controls.Label_BonusTimeValue1 <=> (State.Controls.Frame_TeamPoints.GetFirstChild("label-bonus-time-value-1") as CMlLabel);
State.Controls.Label_BonusTimeValue2 <=> (State.Controls.Frame_TeamPoints.GetFirstChild("label-bonus-time-value-2") as CMlLabel);

NextUpdateTime = Now;
NextScoresUpdateTime = Now;
InputPlayerUnspawnTime = -1;

State = SetVisibility(State, State.Controls.Frame_Global.Visible, HasValidTarget(GUIPlayer));
State = UpdatePoints(
	State,
	{{{Ranking::P}}}GetTeamsRankingUpdate(),
	{{{Ranking::P}}}GetTeamsRanking(),
	Net_Royal_TeamScore_EliminationRank,
	Net_Royal_TeamScore_NotEliminatedTeamsNb,
	GUIPlayer,
	True
);
State = UpdateBonusTime(State, Net_Royal_TeamScore_TeamsBonusTimeUpdate, Net_Royal_TeamScore_TeamsBonusTime, True);

// On Sony consoles every player names must be in the safe area
// see: /trackmania-next/tmnext/-/issues/4660
if (Platform::IsSony(System)) {
	State.Controls.Frame_Global.GetFirstChild("{{{UIModules::GetCustomizableUIModuleFrameId(UIModules_TeamScore_Common::C_UIModuleConfig)}}}").RelativePosition_V3 = <144., 80.>;
}
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.IsDisplayed_DisplayModule != Net_Royal_TeamScore_IsVisible) {
		State = SetVisibility(State, Net_Royal_TeamScore_IsVisible, State.IsDisplayed_HasValidTarget);
		State = UpdatePoints(
			State,
			{{{Ranking::P}}}GetTeamsRankingUpdate(),
			{{{Ranking::P}}}GetTeamsRanking(),
			Net_Royal_TeamScore_EliminationRank,
			Net_Royal_TeamScore_NotEliminatedTeamsNb,
			GUIPlayer,
			True
		);
	}

	if (State.IsDisplayed_DisplayModule) {
		if (Now >= NextUpdateTime) {
			NextUpdateTime = Now + C_UpdateInterval;

			if (InputPlayer != Null) {
				if (InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && InputPlayerUnspawnTime < 0) {
					InputPlayerUnspawnTime = Now;
				} else if (InputPlayer.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned && InputPlayerUnspawnTime >= 0) {
					InputPlayerUnspawnTime = -1;
				}
			}

			if (
				(
					State.RankingUpdate != {{{Ranking::P}}}GetTeamsRankingUpdate() ||
					State.EliminationRank != Net_Royal_TeamScore_EliminationRank ||
					State.NotEliminatedTeamsNb != Net_Royal_TeamScore_NotEliminatedTeamsNb ||
					State.TeamsBonusTimeUpdate != Net_Royal_TeamScore_TeamsBonusTimeUpdate ||
					(GUIPlayer != Null && (State.TargetPlayerId != GUIPlayer.Id || State.TargetPlayerClan != GUIPlayer.CurrentClan)) ||
					(GUIPlayer == Null && State.TargetPlayerId != NullId)
				) && !DelaySpecModeActivation(InputPlayerUnspawnTime)
			) {
				declare Integer PrevTargetPlayerClan = State.TargetPlayerClan;
				foreach (Player in Players) {
					if (Player.Score != Null) {
						declare Integer Royal_TeamScore_PrevScorePoints for Player.Score = 0;
						declare Integer Royal_TeamScore_PrevPlayerPoints for Player.Score = 0;
						Royal_TeamScore_PrevScorePoints = Player.Score.Points;
						Royal_TeamScore_PrevPlayerPoints = {{{Ranking::P}}}GetPlayerPoints(Player.Score);
					}
				}
				State = UpdatePoints(
					State,
					{{{Ranking::P}}}GetTeamsRankingUpdate(),
					{{{Ranking::P}}}GetTeamsRanking(),
					Net_Royal_TeamScore_EliminationRank,
					Net_Royal_TeamScore_NotEliminatedTeamsNb,
					GUIPlayer,
					True
				);
				State = UpdateBonusTime(State, Net_Royal_TeamScore_TeamsBonusTimeUpdate, Net_Royal_TeamScore_TeamsBonusTime, State.TargetPlayerClan != PrevTargetPlayerClan);
			}
		}

		if (Now >= NextScoresUpdateTime) {
			NextScoresUpdateTime = Now + C_ScoresUpdateInterval;

			if (!DelaySpecModeActivation(InputPlayerUnspawnTime)) {
				// Check only the scores of the connected players
				declare Boolean NeedUpdate = False;
				foreach (Player in Players) {
					if (Player.Score != Null) {
						declare Integer Royal_TeamScore_PrevScorePoints for Player.Score = 0;
						if (Royal_TeamScore_PrevScorePoints != Player.Score.Points) {
							Royal_TeamScore_PrevScorePoints = Player.Score.Points;
							NeedUpdate = True;
						}
						declare Integer Royal_TeamScore_PrevPlayerPoints for Player.Score = 0;
						if (Royal_TeamScore_PrevPlayerPoints != {{{Ranking::P}}}GetPlayerPoints(Player.Score)) {
							Royal_TeamScore_PrevPlayerPoints = {{{Ranking::P}}}GetPlayerPoints(Player.Score);
							NeedUpdate = True;
						}
					}
				}
				if (NeedUpdate) {
					State = UpdatePoints(
						State,
						{{{Ranking::P}}}GetTeamsRankingUpdate(),
						{{{Ranking::P}}}GetTeamsRanking(),
						Net_Royal_TeamScore_EliminationRank,
						Net_Royal_TeamScore_NotEliminatedTeamsNb,
						GUIPlayer,
						True
					);
				}
			}
		}

		if (InputPlayer != Null && InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
			foreach (Event in PendingEvents) {
				switch (Event.Type) {
					case CMlScriptEvent::Type::MouseOver: {
						if (GUIPlayer != Null) Focus(State, Event.Control, GUIPlayer.Login, True);
						else Focus(State, Event.Control, "", True);
					}
					case CMlScriptEvent::Type::MouseOut: {
						if (GUIPlayer != Null) Focus(State, Event.Control, GUIPlayer.Login, False);
						else Focus(State, Event.Control, "", False);
					}
					case CMlScriptEvent::Type::MouseClick: {
						if (Event.ControlId == "button-spec-player") {
							declare Text TeamScore_PlayerLogin for Event.Control = "";
							if (TeamScore_PlayerLogin != "") {
								{{{Spectator::P}}}SpectatePlayer(TeamScore_PlayerLogin);
							}
						}
					}
				}
			}
		}

		// Process ongoing task
		if (Task::IsInitialized(State.Task_RetrieveDisplayName)) {
			State.Task_RetrieveDisplayName = Task::Update(State.Task_RetrieveDisplayName);
			if (!Task::IsRunning(State.Task_RetrieveDisplayName)) {
				if (Task::IsSuccess(State.Task_RetrieveDisplayName)) {
					State = UpdatePoints(
						State,
						{{{Ranking::P}}}GetTeamsRankingUpdate(),
						{{{Ranking::P}}}GetTeamsRanking(),
						Net_Royal_TeamScore_EliminationRank,
						Net_Royal_TeamScore_NotEliminatedTeamsNb,
						GUIPlayer,
						False
					);
				}
				State.Task_RetrieveDisplayName = Task::Destroy(State.Task_RetrieveDisplayName);
			}
		}
	}

	if (State.DisplayAnimEndTime >= 0 && State.DisplayAnimEndTime <= Now) {
		State.DisplayAnimEndTime = -1;
		State.Controls.Frame_Global.Visible = State.IsDisplayed;
	}
}
***
""",
[
	UIModules::Component(),
	Ranking::Component(),
	Spectator::Component(),
	UserStore::ComponentV2(),
	PlayerName::ComponentV2()
],
[]
	);
}