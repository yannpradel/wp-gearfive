/**
 *	UI module: WaitingScreen server side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/WaitingScreen_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/WaitingScreen_Common.Script.txt" as UIModules_WaitingScreen_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_WaitingScreen_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::K_ModuleConfig GetConfig() {
	return UIModules_WaitingScreen_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Display the maps progression
Void SetMapsProgression(Integer _Current, Integer _Max) {
	declare netwrite Int2 Net_Royal_WaitingScreen_MapsProgression for Teams[0];
	Net_Royal_WaitingScreen_MapsProgression = <_Current, _Max>;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the number of connected players
Void SetConnectedPlayersNb(Integer _Current, Integer _Max) {
	declare netwrite Int2 Net_Royal_WaitingScreen_ConnectedPlayersNb for Teams[0];
	Net_Royal_WaitingScreen_ConnectedPlayersNb = <_Current, _Max>;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the number of remaining and eliminated teams this round
Void SetEliminationsNb(Integer _RemainingTeamsNb, Integer _EliminatedTeamsNb) {
	declare netwrite Int2 Net_Royal_WaitingScreen_EliminationsNb for Teams[0];
	Net_Royal_WaitingScreen_EliminationsNb = <_RemainingTeamsNb, _EliminatedTeamsNb>;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Warn the players that the match is starting
Void SetMatchStarting(Boolean _IsStarting) {
	declare netwrite Boolean Net_Royal_WaitingScreen_MatchStarting for Teams[0];
	Net_Royal_WaitingScreen_MatchStarting = _IsStarting;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the time at which the wait for other players will stop
Void SetWaitEndTime(Integer _WaitEndTime) {
	declare netwrite Integer Net_Royal_WaitingScreen_WaitEndTime for Teams[0];
	Net_Royal_WaitingScreen_WaitEndTime = _WaitEndTime;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;

	declare netwrite Boolean Net_Royal_WaitingScreen_IsVisible for UI;
	Net_Royal_WaitingScreen_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetMapsProgression(0, 0);
	SetConnectedPlayersNb(0, 0);
	SetEliminationsNb(0, 0);
	SetMatchStarting(False);
	SetWaitEndTime(-1);

	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}