/**
 *	UI module: SegmentProgression server side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/SegmentProgression_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/SegmentProgression_Common.Script.txt" as UIModules_SegmentProgression_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_SegmentProgression_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::K_ModuleConfig GetConfig() {
	return UIModules_SegmentProgression_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the race progression of a team
Void SetTeamProgression(Integer _TeamId, Integer _CurrentSegment, Integer _Loop) {
	declare netwrite Integer Net_Royal_SegmentProgression_TeamsProgressionUpdate for Teams[0];
	declare netwrite Int2[Integer] Net_Royal_SegmentProgression_TeamsProgression for Teams[0];
	Net_Royal_SegmentProgression_TeamsProgression[_TeamId] = <_CurrentSegment, _Loop>;
	Net_Royal_SegmentProgression_TeamsProgressionUpdate += 1;
}
Void ResetTeamProgression(Integer _TeamId) {
	declare netwrite Integer Net_Royal_SegmentProgression_TeamsProgressionUpdate for Teams[0];
	declare netwrite Int2[Integer] Net_Royal_SegmentProgression_TeamsProgression for Teams[0];
	if (Net_Royal_SegmentProgression_TeamsProgression.removekey(_TeamId)) {
		Net_Royal_SegmentProgression_TeamsProgressionUpdate += 1;
	}
}
Void ResetTeamsProgression() {
	declare netwrite Integer Net_Royal_SegmentProgression_TeamsProgressionUpdate for Teams[0];
	declare netwrite Int2[Integer] Net_Royal_SegmentProgression_TeamsProgression for Teams[0];
	Net_Royal_SegmentProgression_TeamsProgression = [];
	Net_Royal_SegmentProgression_TeamsProgressionUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the active segment of a player
Void SetPlayerProgression(CPlayer _Player, Integer _CurrentSegment) {
	declare netwrite Integer Net_Royal_SegmentProgression_CurrentSegment for _Player;
	Net_Royal_SegmentProgression_CurrentSegment = _CurrentSegment;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the number of segments in the map
Void SetSegmentsNb(Integer _SegmentsNb) {
	declare netwrite Integer Net_Royal_SegmentProgression_SegmentsNb for Teams[0];
	Net_Royal_SegmentProgression_SegmentsNb = _SegmentsNb;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set which segment is unlocked
Void SetUnlockedSegment(Integer _UnlockedSegment) {
	declare netwrite Integer Net_Royal_SegmentProgression_UnlockedSegment for Teams[0];
	Net_Royal_SegmentProgression_UnlockedSegment = _UnlockedSegment;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set when the next segment will be unlocked
Void SetNextSegmentUnlockTime(Integer _NextUnlockTime) {
	declare netwrite Integer Net_Royal_SegmentProgression_NextUnlockTime for Teams[0];
	Net_Royal_SegmentProgression_NextUnlockTime = _NextUnlockTime;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Always display when the next segment will be unlocked
 *	or only if the team reached it already
 */
Void AlwaysDisplayUnlockTimer(Boolean _AlwaysDisplayUnlockTimer) {
	declare netwrite Boolean Net_Royal_SegmentProgression_AlwaysDisplayUnlockTimer for Teams[0];
	Net_Royal_SegmentProgression_AlwaysDisplayUnlockTimer = _AlwaysDisplayUnlockTimer;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Can the player joins their team by restarting ?
Void SetCanJoinTeam(CPlayer _Player, Boolean _CanJoinTeam) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;

	declare netwrite Boolean Net_Royal_SegmentProgression_CanJoinTeam for UI;
	Net_Royal_SegmentProgression_CanJoinTeam = _CanJoinTeam;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;

	declare netwrite Boolean Net_Royal_SegmentProgression_IsVisible for _Player;
	Net_Royal_SegmentProgression_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
	SetPlayerProgression(_Player, 0);
	SetCanJoinTeam(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	ResetTeamsProgression();
	SetSegmentsNb(0);
	SetUnlockedSegment(0);
	SetNextSegmentUnlockTime(-1);
	AlwaysDisplayUnlockTimer(False);

	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}