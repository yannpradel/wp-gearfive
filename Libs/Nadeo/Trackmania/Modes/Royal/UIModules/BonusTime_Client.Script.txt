/**
 *	UI module: BonusTime client side
 */
#Const Version		"1.1.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/BonusTime_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/BonusTime_Common.Script.txt" as UIModules_BonusTime_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/ZIndex.Script.txt" as ZIndex

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_BonusTime_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_BonusTime_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [RoyalCountdown] Message displayed above a countdown when the bonus time period starts in Royal
	declare Text Text_BonusTime = _("Bonus time");

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-bold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" />
</stylesheet>

<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_BonusTime}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_BonusTime_Common::C_UIModuleConfig)}}}>
		<frame id="frame-bonus-time">
			<frame id="frame-clip" z-index="0" size="140 8" halign="center" valign="center">
				<quad id="quad-background" size="120 180" rot="10" halign="center" valign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" />
			</frame>
			<label id="label-bonus-time" z-index="1" size="100 10" halign="center" valign="center2" textsize="5" text="{{{Text_BonusTime}}}" class="text-bold" />
		</frame>
	</frame>
</frame>
""",
"""
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModulesData.Script.txt" as UIModulesData

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_BonusTime;
	CMlQuad Quad_Background;
	CMlLabel Label_BonusTime;
}

#Struct K_State {
	K_Controls Controls;
	Boolean DisplayModule;
	Integer DisplayAnimEndTime;
}

#Const C_DisplayAnimDuration 250
""",
"""
K_State SetVisibility(K_State _State, Boolean _IsVisible) {
	declare K_State State = _State;

	State.DisplayModule = _IsVisible;
	State.DisplayAnimEndTime = Now + C_DisplayAnimDuration;

	AnimMgr.Flush(State.Controls.Frame_BonusTime);
	AnimMgr.Flush(State.Controls.Quad_Background);
	AnimMgr.Flush(State.Controls.Label_BonusTime);

	if (_IsVisible) {
		State.Controls.Frame_Global.Visible = True;
		State.Controls.Frame_BonusTime.RelativeScale = 1.1;
		State.Controls.Frame_BonusTime.RelativePosition_V3.Y = 5.;
		State.Controls.Quad_Background.Opacity = 0.;
		State.Controls.Label_BonusTime.Opacity = 0.;
		AnimMgr.Add(State.Controls.Frame_BonusTime, "<a pos=\"0 0\" scale=\"1\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Quad_Background, "<a opacity=\"0.6\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Label_BonusTime, "<a opacity=\"1\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		PlayUiSound(CMlScriptIngame::EUISound::PhaseChange, 1, 0.75);
	} else {
		AnimMgr.Add(State.Controls.Frame_BonusTime, "<a pos=\"0 -5\" scale=\"0.9\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Quad_Background, "<a opacity=\"0\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Label_BonusTime, "<a opacity=\"0\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Clip;

declare K_State State;
declare Boolean IsSegmentCompleteMessageVisible;
***

***MainStart***
***
State = K_State {
	Controls = K_Controls {},
	DisplayModule = False,
	DisplayAnimEndTime = -1
};

State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_BonusTime <=> (State.Controls.Frame_Global.GetFirstChild("frame-bonus-time") as CMlFrame);
Frame_Clip <=> (State.Controls.Frame_BonusTime.GetFirstChild("frame-clip") as CMlFrame);
State.Controls.Quad_Background <=> (Frame_Clip.GetFirstChild("quad-background") as CMlQuad);
State.Controls.Label_BonusTime <=> (State.Controls.Frame_BonusTime.GetFirstChild("label-bonus-time") as CMlLabel);

State.Controls.Quad_Background.Size.X = ML::Min(State.Controls.Label_BonusTime.Size.X, State.Controls.Label_BonusTime.ComputeWidth(State.Controls.Label_BonusTime.Value)) + 2.;

State = SetVisibility(State, State.Controls.Frame_Global.Visible);
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Royal_BonusTime_IsVisible for Owner;
		if (State.DisplayModule != Net_Royal_BonusTime_IsVisible) {
			State = SetVisibility(State, Net_Royal_BonusTime_IsVisible);
		}
	}

	if (Owner == Null && State.DisplayModule) {
		State = SetVisibility(State, False);
	}

	if (State.DisplayAnimEndTime >= 0 && Now >= State.DisplayAnimEndTime) {
		State.Controls.Frame_Global.Visible = State.DisplayModule;
		State.DisplayAnimEndTime = -1;
	}

	// Move bonus time if the segment complete message is visible
	if (State.DisplayModule) {
		if (!IsSegmentCompleteMessageVisible && Now <= UIModulesData::GetSegmentCompleteEndAnimTimestamp(This)) {
			AnimMgr.Add(State.Controls.Frame_Global, "<anim pos=\""^MLHelpers::SkewX(-13., 10.)^" -13\" />", 500, CAnimManager::EAnimManagerEasing::BackOut);
			IsSegmentCompleteMessageVisible = True;
		} else if (IsSegmentCompleteMessageVisible && Now > UIModulesData::GetSegmentCompleteEndAnimTimestamp(This)) {
			AnimMgr.Add(State.Controls.Frame_Global, "<anim pos=\"0 0\" />", 500, CAnimManager::EAnimManagerEasing::BackOut);
			IsSegmentCompleteMessageVisible = False;
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}