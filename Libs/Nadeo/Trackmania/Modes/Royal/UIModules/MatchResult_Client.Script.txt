/**
 *	UI module: MatchResult client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/MatchResult_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as MenuConst
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/MatchResult_Common.Script.txt" as UIModules_MatchResult_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/Ranking_Client.Script.txt" as Ranking
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/ZIndex.Script.txt" as ZIndex
#Include "Libs/Nadeo/Trackmania/Modes/Royal/SuperRoyal_Client.Script.txt" as SuperRoyal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "royal-match-result" //< Component name
#Const P "RoyalMatchResult_" //< Prefix used to differentiate functions/variables in the script
#Const C_NavGroup_Page "navgroup-knockout-reward"
#Const C_InputPriority 1
#Const C_UpdateInterval 250 //< Time interval between two updates check in the scores table

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_MatchResult_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_MatchResult_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Get the component
Text Component() {
	return MV::Component(
		C_Name,
"""
""",
"""
""",
"""
Void {{{P}}}SetClickedOnStay(Boolean _ClickedOnStay) {
	declare {{{P}}}ClickedOnStay for UI = False;
	{{{P}}}ClickedOnStay = _ClickedOnStay;
}

Boolean {{{P}}}GetClickedOnStay() {
	declare {{{P}}}ClickedOnStay for UI = False;
	return {{{P}}}ClickedOnStay;
}

Integer {{{P}}}GetTeamsRankUpdate() {
	declare netread Integer Net_Royal_MatchResult_TeamsRankUpdate for Teams[0];
	return Net_Royal_MatchResult_TeamsRankUpdate;
}

Integer[Integer] {{{P}}}GetTeamsRank() {
	declare netread Integer[Integer] Net_Royal_MatchResult_TeamsRank for Teams[0];
	return Net_Royal_MatchResult_TeamsRank;
}

Boolean {{{P}}}IsLastRound() {
	declare netread Boolean Net_Royal_MatchResult_IsLastRound for Teams[0];
	return Net_Royal_MatchResult_IsLastRound;
}
""",
[],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Royal MatchResult] Click on this button to leave the server after being eliminated.
	declare Text Text_Quit = _("Quit");
	//L16N [Royal MatchResult] Click on this button to stay on the server after being eliminated and continue to spectate the match.
	declare Text Text_Stay = _("|Verb|Stay");
	//L16N [Royal MatchResult] In SuperRoyal, click on this button to stay on the server after being eliminated and continue to spectate the match.
	declare Text Text_Wait = _("Wait for next match");
	//L16N [Royal MatchResult] Message displayed when the player and their team have been eliminated from the match and cannot play anymore.
	declare Text Text_Eliminated = _("You have been eliminated");
	//L16N [Royal MatchResult] Message displayed when the player and their team have been eliminated from the Super Royal competition and cannot play anymore. If possible keep "Super Royal" in english in the traduction
	declare Text Text_Eliminated_SR = _("You have been eliminated from the Super Royal");
	//L16N [Royal MatchResult] Message displayed when the player and their team win the match.
	declare Text Text_Congratulations = _("Congratulations");
	//L16N [Royal MatchResult] Give the rank of the player's team at the end of the match. %1 will be replaced by the team rank. eg: "Your team finish 5th".
	declare Text Text_TeamRank = _("Your team finished $<$7FA%1$>");
	//L16N [Royal MatchResult] Message displayed when the player and their team won the match. This text will be followed by "Royal Champion".
	declare Text Text_TeamWin = _("You are the");
	//L16N [Royal MatchResult] Title of the popup displayed when the player and their team won the royal match.
	declare Text Text_RoyalChampion = _("Royal Champion");
	//L16N [Royal MatchResult] Title of the popup displayed when the player and their team won the royal match of a specific SuperRoyal division. e.g "Silver Super Royal Champion"
	declare Text Text_RoyalChampionDivision = _("$<$%1%2$> Super Royal Champion");
	//L16N [Royal MatchResult] Message displayed when the player and their team win the round of Super Royal and can continue the competition. If possible keep "Super Royal" in english in the traduction. %1 will be replaced by the division name, e.g "You are qualified for the next round of Super Royal in the silver division!"
	declare Text Text_TeamWin_SR_Step_Qualif = _("You are qualified for the next round of Super Royal in the $<$%1%2$> division! Wait for the end of this match then go to the Royal menu to start your next match.");
	//L16N [Royal MatchResult] Message displayed when the player and their team win the round of Super Royal and can continue the competition. If possible keep "Super Royal" in english in the traduction. %1 will be replaced by the division name, e.g "You are qualified for the next round of Super Royal in the silver division!"
	declare Text Text_TeamWin_SR_Step = _("You are qualified for the next round of Super Royal in the $<$%1%2$> division! Go to the menu to start next match");

	declare Text Video_Confetti = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/Royal_Champion_Results_Anim.webm";
	declare Text Img_Background = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_PopupWithButtons.dds";
	declare Text Img_ButtonLeft = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup_ButtonLeft.dds";
	declare Text Img_ButtonRight = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup_ButtonRight.dds";
	declare Text Img_ButtonFull = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup_Button.dds";
	declare Text Img_TeamLogoBg = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/hud_royal_scoretable_team_icon_bg.dds";
	declare Text Img_Lion = "file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Lion_Unranked.dds";
	declare Text Img_LionBronze = "file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Lion_Bronze.dds";
	declare Text Img_LionSilver = "file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Lion_Silver.dds";
	declare Text Img_LionGold = "file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Lion_Gold.dds";
	declare Text Img_LionSR = "file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Lion_Master.dds";

	declare Vec2 ImgSize_Background = <1072., 560.>;
	declare Vec2 ImgSize_ButtonLeft = <520., 104.>;
	declare Vec2 ImgSize_ButtonRight = <496., 104.>;
	declare Vec2 ImgSize_TeamLogoBg = <188., 108.>;

	declare Real SizeX_Bg = 180.;
	declare Vec2 Size_Bg = <SizeX_Bg, SizeX_Bg * (ImgSize_Background.Y / ImgSize_Background.X)>;
	declare Real PosX_PopupHidden = 160. + (Size_Bg.X * 0.5) + 5.;
	declare Vec2 Pos_Buttons = MLHelpers::SkewX(<0., Size_Bg.Y * -0.485>, 10.);
	declare Real SizeY_Button = Size_Bg.Y * (ImgSize_ButtonLeft.Y / ImgSize_Background.Y) * 0.996;
	declare Vec2 Size_ButtonLeft = <SizeY_Button * (ImgSize_ButtonLeft.X / ImgSize_ButtonLeft.Y), SizeY_Button>;
	declare Vec2 Size_ButtonRight = <SizeY_Button * (ImgSize_ButtonRight.X / ImgSize_ButtonRight.Y), SizeY_Button>;
	declare Vec2 Pos_Content = MLHelpers::SkewX(<0., Size_Bg.Y * 0.485>, 10.);
	declare Real SizeX_Content = SizeX_Bg * 0.85;
	declare Vec2 Pos_TitlePrefix = MLHelpers::SkewX(<0., -8.>, 10.);
	declare Vec2 Pos_Title = MLHelpers::SkewX(<0., -15.>, 10.);
	declare Real TextSize_Title = 8.;
	declare Vec2 Pos_Rank = MLHelpers::SkewX(<0., -29.>, 10.);
	declare Real SizeX_TeamLogoBg = 35.;
	declare Vec2 Size_TeamLogoBg = <SizeX_TeamLogoBg, SizeX_TeamLogoBg * (ImgSize_TeamLogoBg.Y / ImgSize_TeamLogoBg.X)>;
	declare Vec2 Pos_TeamLogoBg = MLHelpers::SkewX(<0., -49.>, 10.);
	declare Vec2 Size_TeamLogo = <Size_TeamLogoBg.X * 0.77, Size_TeamLogoBg.Y * 0.86>;
	declare Vec2 Size_Lion = <Size_TeamLogoBg.X * 1.5, Size_TeamLogoBg.X * 1.5>;
	declare Vec2 Pos_Lion = MLHelpers::SkewX(<0., -44.>, 10.);
	declare Vec2 Pos_TeamName = MLHelpers::SkewX(<0., -62.5>, 10.);
	declare Vec2 Pos_TeamMembers = MLHelpers::SkewX(<0., -68.>, 10.);
	declare Vec2 Pos_TeamMembersWin = MLHelpers::SkewX(<0., -75.>, 10.);

	declare Text ML_TeamMembers = "";
	for (I, 0, 3) {
		declare Vec2 Pos_TeamMember = MLHelpers::SkewX(<0., I * -5.>, 10.);
		ML_TeamMembers ^= """<frameinstance modelid="{{{PlayerName::C_Name}}}" {{{MLHelpers::Pos(Pos_TeamMember)}}} data-size="{{{SizeX_Content}}} 5." data-halign="center" data-valign="center" data-textsize="3.5" data-textcolor="ffffff" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-textprefix="$t$i" />""";
	}

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-bold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" />
	<style class="text-semibold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$t$i" />
</stylesheet>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_MatchResult}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_MatchResult_Common::C_UIModuleConfig)}}}>
		<quad id="quad-dimmer" z-index="0" size="320 180" halign="center" valign="center" bgcolor="000000" opacity="0" fullscreen="1" />
		<quad id="video-confetti" size="320 180" z-index="1" halign="center" valign="center" fullscreen="1" />
		<frame z-index="2" size="320 180" halign="center" valign="center">
			<frame pos="1.5 12.9">
				<frame id="frame-popup" pos="{{{-PosX_PopupHidden}}} 0">
					<quad z-index="0" {{{MLHelpers::Size(Size_Bg)}}} halign="center" valign="center" image="{{{Img_Background}}}" />
					<frame {{{MLHelpers::Pos(Pos_Content)}}} z-index="1">
						<label id="label-titleprefix" {{{MLHelpers::Pos(Pos_TitlePrefix)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" text="{{{Text_TeamWin}}}" textsize="4" class="text-bold" hidden="1"/>
						<label id="label-title" {{{MLHelpers::Pos(Pos_Title)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" textsize="{{{TextSize_Title}}}" class="text-bold" />
						<label id="label-rank" {{{MLHelpers::Pos(Pos_Rank)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" textsize="4" class="text-bold" maxline="3"/>
						<quad id="quad-lion" z-index="1" {{{MLHelpers::Size(Size_Lion)}}} {{{MLHelpers::Pos(Pos_Lion)}}} image="{{{Img_Lion}}}" halign="center" valign="center" keepratio="fit" hidden="1"/>
						<frame {{{MLHelpers::Pos(Pos_TeamLogoBg)}}}>
							<quad z-index="0" {{{MLHelpers::Size(Size_TeamLogoBg)}}} halign="center" valign="center" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.5" image="{{{Img_TeamLogoBg}}}" />
							<quad id="quad-team-logo" z-index="1" {{{MLHelpers::Size(Size_TeamLogo)}}} halign="center" valign="center" keepratio="fit" />
						</frame>
						<label id="label-team-name" {{{MLHelpers::Pos(Pos_TeamName)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" textsize="3.5" class="text-bold" />
						<frame id="frame-team-members" {{{MLHelpers::Pos(Pos_TeamMembers)}}}>
							{{{ML_TeamMembers}}}
						</frame>
					</frame>
					<frame {{{MLHelpers::Pos(Pos_Buttons)}}} z-index="2">
						<frameinstance
							modelid="{{{Button::C_Name}}}" id="button-quit"
							pos="2.3 0" z-index="3"
							class="{{{Navigation::C_Class}}}"
							data-text="{{{Text_Quit}}}"
							data-size="{{{Size_ButtonLeft.X}}} {{{Size_ButtonLeft.Y}}}"
							data-labelsize="{{{Size_ButtonLeft.X}}} {{{Size_ButtonLeft.Y}}}"
							data-textxpos="0.5"
							data-opacityunfocus=".5"
							data-image="{{{Img_ButtonLeft}}}"
							data-imagefocus="{{{Img_ButtonLeft}}}"
							data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
							data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
							data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
							data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
							data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
							data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
							data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
							data-icon="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
							data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
							data-iconxpos=".15"
							data-iconypos="-.5"
							data-textsize="5"
							data-textopacityunfocus=".5"
							data-iconopacityunfocus=".5"
							data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
							data-textitalicslope=".2"
							data-halign="right"
							data-nav-inputs="select;cancel;right"
							data-nav-targets="_;_;button-stay"
							data-nav-group="{{{C_NavGroup_Page}}}"
							data-nav-zone="{{{Button::C_NavZone}}}"
						/>
						<frameinstance
							modelid="{{{Button::C_Name}}}" id="button-stay"
							pos="-1.2 0" z-index="3"
							class="{{{Navigation::C_Class}}}"
							data-text="{{{Text_Stay}}}"
							data-size="{{{Size_ButtonRight.X}}} {{{Size_ButtonRight.Y}}}"
							data-labelsize="{{{Size_ButtonRight.X}}} {{{Size_ButtonRight.Y}}}"
							data-textxpos="0.5"
							data-opacityunfocus=".5"
							data-image="{{{Img_ButtonRight}}}"
							data-imagefocus="{{{Img_ButtonRight}}}"
							data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
							data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
							data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
							data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
							data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
							data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
							data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
							data-icon="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
							data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
							data-iconxpos=".85"
							data-iconypos="-.5"
							data-textsize="5"
							data-textopacityunfocus=".5"
							data-iconopacityunfocus=".5"
							data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
							data-textitalicslope=".2"
							data-halign="left"
							data-nav-inputs="select;cancel;left"
							data-nav-targets="_;_;button-quit"
							data-nav-group="{{{C_NavGroup_Page}}}"
							data-nav-zone="{{{Button::C_NavZone}}}"
						/>
						<frameinstance
							hidden="1"
							modelid="{{{Button::C_Name}}}" id="button-wait"
							pos="-1.25 -1." z-index="3"
							class="{{{Navigation::C_Class}}}"
							data-text="{{{Text_Wait}}}"
							data-size="164.5 15"
							data-labelsize="90 10"
							data-textxpos="0.5"
							data-opacityunfocus=".5"
							data-image="{{{Img_ButtonFull}}}"
							data-imagefocus="{{{Img_ButtonFull}}}"
							data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
							data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
							data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
							data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
							data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
							data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
							data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
							data-icon="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
							data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
							data-iconxpos=".95"
							data-iconypos="-.5"
							data-textsize="5"
							data-fitlabel="2"
							data-textopacityunfocus=".5"
							data-iconopacityunfocus=".5"
							data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
							data-textitalicslope=".2"
							data-halign="center"
							data-nav-inputs="select;cancel"
							data-nav-targets="_;_"
							data-nav-group="{{{C_NavGroup_Page}}}"
							data-nav-zone="{{{Button::C_NavZone}}}"
							data-nav-locked="1"
						/>
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Modes/Clans_Client.Script.txt" as Clans

#Struct K_Controls {
	CMlFrame Button_Quit;
	CMlFrame Frame_Global;
	CMlFrame Frame_Popup;
	CMlFrame Frame_TeamMembers;
	CMlLabel Label_Rank;
	CMlLabel Label_TeamName;
	CMlLabel Label_Title;
	CMlLabel Label_TitlePrefix;
	CMlQuad Quad_Dimmer;
	CMlQuad Quad_Lion;
	CMlQuad Quad_TeamLogo;
	CMlQuad Video_Confetti;
	CMlFrame Button_Stay;
	CMlFrame Button_Wait;
}
#Struct K_State {
	Boolean DisplayModule;
	Boolean IsVisible;
	Ident ConfettiVideoId;
	Ident PlayerId;
	Integer DisplayAnimEndTime;
	Integer PlayerClan;
	Integer ResetClickedOnStay;
	Integer TeamsRankUpdate;
	Integer[Integer] TeamsRank;
	K_Controls Controls;
	Boolean IsLastRound;
}

#Const C_DisplayAnimDuration 250
#Const C_Color_AccentOne {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}}
#Const C_NavGroup_Page {{{dump(C_NavGroup_Page)}}}
#Const C_InputPriority {{{dump(C_InputPriority)}}}
#Const C_UpdateInterval {{{dump(C_UpdateInterval)}}}
#Const C_SuperRoyal_DivisionNames {{{dump(MenuConst::C_SuperRoyal_DivisionNames)}}}
#Const C_SuperRoyal_DivisionColors {{{dump(MenuConst::C_SuperRoyal_DivisionColorsHex3)}}}
#Const C_SuperRoyal_Division_Bronze {{{dump(MenuConst::C_SuperRoyal_Division_Bronze)}}}
#Const C_SuperRoyal_Division_Silver {{{dump(MenuConst::C_SuperRoyal_Division_Silver)}}}
#Const C_SuperRoyal_Division_Gold {{{dump(MenuConst::C_SuperRoyal_Division_Gold)}}}
#Const C_SuperRoyal_Division_Master {{{dump(MenuConst::C_SuperRoyal_Division_Master)}}}
""",
"""
Void Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

K_State SetVisibility(K_State _State, Boolean _IsVisible) {
	declare K_State State = _State;

	State.IsVisible = _IsVisible;

	AnimMgr.Flush(State.Controls.Quad_Dimmer);
	AnimMgr.Flush(State.Controls.Frame_Popup);
	if (State.IsVisible) {
		if (State.Controls.Button_Wait.Visible) Focus({{{Navigation::P}}}GetFocusedControl(This, C_NavGroup_Page), State.Controls.Button_Wait);
		else if	(State.Controls.Button_Quit.Visible) Focus({{{Navigation::P}}}GetFocusedControl(This, C_NavGroup_Page), State.Controls.Button_Quit);
		State.Controls.Frame_Global.Visible = True;
		State.Controls.Quad_Dimmer.Opacity = 0.;
		State.Controls.Frame_Popup.RelativePosition_V3.X = {{{-PosX_PopupHidden}}};
		AnimMgr.Add(State.Controls.Quad_Dimmer, "<anim opacity=\"0.4\"/>", Now, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(State.Controls.Frame_Popup, "<anim pos=\"0 0\"/>", Now, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(State.Controls.Quad_Dimmer, "<anim opacity=\"0\"/>", Now, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(State.Controls.Frame_Popup, "<anim pos=\"{{{PosX_PopupHidden}}} 0\"/>", Now, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	State.DisplayAnimEndTime = Now + C_DisplayAnimDuration;
	EnableMenuNavigation(_IsVisible, False, False, Null, C_InputPriority);

	return State;
}

Integer GetPlayerClan(CSmPlayer _Player) {
	if (_Player == Null) return 0;
	if (_Player.CurrentClan <= 0 && _Player.Score != Null && {{{Ranking::P}}}GetScoreClan(_Player.Score) > 0) return {{{Ranking::P}}}GetScoreClan(_Player.Score);
	return _Player.CurrentClan;
}

Void ShowWaitButton(K_State _State, Boolean _Show) {
	_State.Controls.Button_Wait.Visible = _Show;
	{{{Navigation::P}}}Lock(_State.Controls.Button_Wait, !_State.Controls.Button_Wait.Visible);
	_State.Controls.Button_Quit.Visible = !_Show;
	{{{Navigation::P}}}Lock(_State.Controls.Button_Quit, !_State.Controls.Button_Quit.Visible);
	_State.Controls.Button_Stay.Visible = !_Show;
	{{{Navigation::P}}}Lock(_State.Controls.Button_Stay, !_State.Controls.Button_Stay.Visible);
}

K_State SetResult(
	K_State _State,
	Boolean _DisplayModule,
	Boolean _ClickedOnStay,
	CSmPlayer _Player,
	Integer _TeamsRankUpdate,
	Integer[Integer] _TeamsRank,
	Boolean _IsSuperRoyal,
	Boolean _IsSuperRoyalFinale,
	Integer _SuperRoyalMatchNumber,
	Text _SuperRoyalCurrentDivision
) {
	declare K_State State = _State;

	declare Ident MyUserId = NullId;
	State.DisplayModule = _DisplayModule;
	{{{P}}}SetClickedOnStay(_ClickedOnStay);
	State.TeamsRankUpdate = _TeamsRankUpdate;
	State.TeamsRank = _TeamsRank;
	if (_Player == Null) {
		State.PlayerId = NullId;
		State.PlayerClan = -1;
	} else {
		State.PlayerId = _Player.Id;
		State.PlayerClan = GetPlayerClan(_Player);
		MyUserId = _Player.User.Id;
	}

	declare Boolean IsVisible = (State.DisplayModule && !{{{P}}}GetClickedOnStay() && State.PlayerClan > 0 && _TeamsRank.existskey(State.PlayerClan));
	State = SetVisibility(State, IsVisible);

	if (IsVisible) {
		ShowWaitButton(State, False);

		declare Integer TeamRank = _TeamsRank.get(State.PlayerClan, -1);
		declare Text TeamLogo = Clans::GetClanLogo(State.PlayerClan);
		declare Text TeamName = Clans::GetClanName(State.PlayerClan);
		declare Vec3 TeamColor = Clans::GetClanColor(State.PlayerClan);
		declare Boolean IsWinner = (TeamRank == 1 && !_IsSuperRoyal) || (TeamRank == 1 && _IsSuperRoyal && _IsSuperRoyalFinale);

		// Confetti video
		if (State.ConfettiVideoId != NullId && Video.Videos.existskey(State.ConfettiVideoId)) {
			Video.Videos[State.ConfettiVideoId].Stop();
			if (IsWinner) Video.Videos[State.ConfettiVideoId].Play();
		}

		// Update labels
		if (IsWinner) {
			State.Controls.Frame_TeamMembers.RelativePosition_V3 = {{{Pos_TeamMembersWin}}};
			if (_IsSuperRoyalFinale) {
				State.Controls.Label_Title.TextColor = <1., 1., 1.>;
				declare Text DivisionTranslated = C_SuperRoyal_DivisionNames.get(_SuperRoyalCurrentDivision, "");
				declare Text DivisionColor = C_SuperRoyal_DivisionColors.get(_SuperRoyalCurrentDivision, "");
				if (DivisionTranslated != "") State.Controls.Label_Title.Value = TL::Compose("{{{Text_RoyalChampionDivision}}}", DivisionColor, DivisionTranslated);
				else State.Controls.Label_Title.Value = "{{{Text_RoyalChampion}}}";
			} else {
				State.Controls.Label_Title.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}};
				State.Controls.Label_Title.Value = "{{{Text_RoyalChampion}}}";
			}
		} else {
			State.Controls.Frame_TeamMembers.RelativePosition_V3 = {{{Pos_TeamMembers}}};
			State.Controls.Label_Title.TextColor = <1., 1., 1.>;
			// During Super Royal qualifications, the Top 12 will qualify in a specific division
			// Then only the Top 3 will qualify to division's next step
			if (
				_IsSuperRoyal && !_IsSuperRoyalFinale && TeamRank >= 1 &&
				(TeamRank <= 3 || (_SuperRoyalMatchNumber == 1 && TeamRank <= 12))
				) {
					State.Controls.Label_Title.Value = "{{{Text_Congratulations}}}";
					declare Text DivisionTranslated = "";
					declare Text DivisionColor = "";
					if (_SuperRoyalMatchNumber == 1 && TeamRank <= 12) {
						declare Text DivisionId = "";
						if (TeamRank >= 1 && TeamRank <= 3) DivisionId = C_SuperRoyal_Division_Master;
						else if (TeamRank >= 4 && TeamRank <= 6) DivisionId = C_SuperRoyal_Division_Gold;
						else if (TeamRank >= 7 && TeamRank <= 9) DivisionId = C_SuperRoyal_Division_Silver;
						else if (TeamRank >= 10 && TeamRank <= 12) DivisionId = C_SuperRoyal_Division_Bronze;
						DivisionTranslated = C_SuperRoyal_DivisionNames.get(DivisionId, "");
						DivisionColor = C_SuperRoyal_DivisionColors.get(DivisionId, "");
						if (!State.IsLastRound) {
							State.Controls.Label_Rank.Value = TL::Compose("{{{Text_TeamWin_SR_Step_Qualif}}}", DivisionColor, DivisionTranslated);
							ShowWaitButton(State, True);
						} else {
							State.Controls.Label_Rank.Value = TL::Compose("{{{Text_TeamWin_SR_Step}}}", DivisionColor, DivisionTranslated);
						}
					} else if (TeamRank <= 3) {
						DivisionTranslated = C_SuperRoyal_DivisionNames.get(_SuperRoyalCurrentDivision, "");
						DivisionColor = C_SuperRoyal_DivisionColors.get(_SuperRoyalCurrentDivision, "");
						State.Controls.Label_Rank.Value = TL::Compose("{{{Text_TeamWin_SR_Step}}}", DivisionColor, DivisionTranslated);
					}
			} else {
				State.Controls.Label_Rank.Value = TL::Compose("{{{Text_TeamRank}}}", TL::FormatRank(TeamRank, False));
				if (_IsSuperRoyal) {
					State.Controls.Label_Title.Value = "{{{Text_Eliminated_SR}}}";
				} else {
					State.Controls.Label_Title.Value = "{{{Text_Eliminated}}}";
				}
			}
		}

		if (TeamName == "" || IsWinner) {
			State.Controls.Label_TeamName.Hide();
		} else {
			State.Controls.Label_TeamName.Value = TeamName;
			State.Controls.Label_TeamName.TextColor = TeamColor;
			State.Controls.Label_TeamName.Show();
		}
		State.Controls.Label_Rank.Visible = !IsWinner;
		State.Controls.Label_TitlePrefix.Visible = IsWinner;
		Tools::FitLabelValue(State.Controls.Label_Title, {{{TextSize_Title}}}, 4., 1.);
		Tools::FitLabelValue(State.Controls.Label_Rank, 4., 2., 0.5);

		// Update quads
		State.Controls.Quad_Lion.Visible = IsWinner;
		if (TeamLogo == "" || IsWinner) {
			State.Controls.Quad_TeamLogo.Hide();
		} else {
			State.Controls.Quad_TeamLogo.ImageUrl = TeamLogo;
			State.Controls.Quad_TeamLogo.Show();
		}
		if (_IsSuperRoyalFinale) {
			switch (_SuperRoyalCurrentDivision) {
				case {{{SuperRoyal::P}}}C_Division_Bronze: State.Controls.Quad_Lion.ImageUrl = "{{{Img_LionBronze}}}";
				case {{{SuperRoyal::P}}}C_Division_Silver: State.Controls.Quad_Lion.ImageUrl = "{{{Img_LionSilver}}}";
				case {{{SuperRoyal::P}}}C_Division_Gold: State.Controls.Quad_Lion.ImageUrl = "{{{Img_LionGold}}}";
				case {{{SuperRoyal::P}}}C_Division_Master: State.Controls.Quad_Lion.ImageUrl = "{{{Img_LionSR}}}";
				default: State.Controls.Quad_Lion.ImageUrl = "{{{Img_Lion}}}";
			}
		} else {
			State.Controls.Quad_Lion.ImageUrl = "{{{Img_Lion}}}";
		}

		// Set team members' name
		declare {{{PlayerName::P}}}K_UserInfo[] TeamMembers;
		declare Integer MyMemberKey = -1;
		foreach (Score in Scores) {
			if ({{{Ranking::P}}}GetScoreClan(Score) == State.PlayerClan) {
				if (Score.User != Null) {
					TeamMembers.add({{{PlayerName::P}}}GetUserInfo(Score.User, True));
					if (Score.User.Id == MyUserId) MyMemberKey = TeamMembers.count - 1;
					if (TeamMembers.count >= State.Controls.Frame_TeamMembers.Controls.count) break;
				}
			}
		}
		foreach (Key => Control in State.Controls.Frame_TeamMembers.Controls) {
			if (TeamMembers.existskey(Key)) {
				declare CMlFrame PlayerName_TeamMember <=> (Control as CMlFrame);
				{{{PlayerName::P}}}SetUserInfo(This, PlayerName_TeamMember, TeamMembers[Key], False);
				if (MyMemberKey == Key) {
					{{{PlayerName::P}}}SetTextColor(This, PlayerName_TeamMember, C_Color_AccentOne, False);
				} else {
					{{{PlayerName::P}}}SetTextColor(This, PlayerName_TeamMember, <1., 1., 1.>, False);
				}
				{{{PlayerName::P}}}Redraw(This, PlayerName_TeamMember);
				PlayerName_TeamMember.Visible = True;
			} else {
				Control.Visible = False;
			}
		}
	}

	return State;
}

K_State Select(K_State _State, CMlControl _SelectedControl, Boolean _IsSuperRoyal, Boolean _IsSuperRoyalFinale, Integer _SuperRoyalMatchNumber, Text _SuperRoyalCurrentDivision) {
	if (_SelectedControl == Null || _State.DisplayAnimEndTime >= Now) return _State;

	declare K_State State = _State;

	switch (_SelectedControl.ControlId) {
		case "button-quit": Playground.QuitServer(False);
		case "button-stay": State = SetResult(State, State.DisplayModule, True, InputPlayer, State.TeamsRankUpdate, State.TeamsRank, _IsSuperRoyal, _IsSuperRoyalFinale, _SuperRoyalMatchNumber, _SuperRoyalCurrentDivision);
		case "button-wait": State = SetResult(State, State.DisplayModule, True, InputPlayer, State.TeamsRankUpdate, State.TeamsRank, _IsSuperRoyal, _IsSuperRoyalFinale, _SuperRoyalMatchNumber, _SuperRoyalCurrentDivision);
	}

	return State;
}

***MainInit***
***
declare netread Boolean Net_Royal_MatchResult_IsVisible for UI;
declare netread Integer Net_Royal_MatchResult_ResetClickedOnStay for Teams[0];

declare K_State State;
declare Integer NextUpdateTime;
***

***MainStart***
***
State = K_State {
	Controls = K_Controls {},
	TeamsRankUpdate = -1,
	TeamsRank = [],
	PlayerId = NullId,
	PlayerClan = -1,
	ResetClickedOnStay = -1,
	DisplayModule = False,
	IsVisible = False,
	DisplayAnimEndTime = -1,
	ConfettiVideoId = NullId
};
NextUpdateTime = Now;
{{{P}}}SetClickedOnStay(False);

State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_Popup <=> (State.Controls.Frame_Global.GetFirstChild("frame-popup") as CMlFrame);
State.Controls.Frame_TeamMembers <=> (State.Controls.Frame_Popup.GetFirstChild("frame-team-members") as CMlFrame);
State.Controls.Button_Quit <=> (State.Controls.Frame_Popup.GetFirstChild("button-quit") as CMlFrame);
State.Controls.Label_Rank <=> (State.Controls.Frame_Popup.GetFirstChild("label-rank") as CMlLabel);
State.Controls.Label_TeamName <=> (State.Controls.Frame_Popup.GetFirstChild("label-team-name") as CMlLabel);
State.Controls.Label_Title <=> (State.Controls.Frame_Popup.GetFirstChild("label-title") as CMlLabel);
State.Controls.Label_TitlePrefix <=> (State.Controls.Frame_Popup.GetFirstChild("label-titleprefix") as CMlLabel);
State.Controls.Quad_Dimmer <=> (State.Controls.Frame_Global.GetFirstChild("quad-dimmer") as CMlQuad);
State.Controls.Quad_Lion <=> (State.Controls.Frame_Global.GetFirstChild("quad-lion") as CMlQuad);
State.Controls.Quad_TeamLogo <=> (State.Controls.Frame_Popup.GetFirstChild("quad-team-logo") as CMlQuad);
State.Controls.Video_Confetti <=> (State.Controls.Frame_Global.GetFirstChild("video-confetti") as CMlQuad);
State.Controls.Button_Stay <=> (State.Controls.Frame_Popup.GetFirstChild("button-stay") as CMlFrame);
State.Controls.Button_Wait <=> (State.Controls.Frame_Popup.GetFirstChild("button-wait") as CMlFrame);

declare CVideo ConfettiVideo <=> Video.CreateVideo("{{{Video_Confetti}}}", False, True);
if (ConfettiVideo != Null) {
	State.ConfettiVideoId = ConfettiVideo.Id;
	State.Controls.Video_Confetti.Image = ConfettiVideo.Image;
}

{{{Navigation::P}}}UseLocalEvents(This, True);
State = SetResult(State, State.Controls.Frame_Global.Visible, False, InputPlayer, {{{P}}}GetTeamsRankUpdate(), {{{P}}}GetTeamsRank(), {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.DisplayModule != Net_Royal_MatchResult_IsVisible) {
		State = SetResult(State, Net_Royal_MatchResult_IsVisible, {{{P}}}GetClickedOnStay(), InputPlayer, {{{P}}}GetTeamsRankUpdate(), {{{P}}}GetTeamsRank(), {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());
	}

	if (State.DisplayModule) {
		if (Now >= NextUpdateTime) {
			NextUpdateTime = Now + C_UpdateInterval;

			if (State.IsLastRound != {{{P}}}IsLastRound()) {
				State.IsLastRound = {{{P}}}IsLastRound();
			}

			if (
				State.TeamsRankUpdate != {{{P}}}GetTeamsRankUpdate() ||
				State.ResetClickedOnStay != Net_Royal_MatchResult_ResetClickedOnStay ||
				(InputPlayer != Null && (State.PlayerId != InputPlayer.Id || State.PlayerClan != GetPlayerClan(InputPlayer))) ||
				(InputPlayer == Null && State.PlayerId != NullId)
			) {
				if (State.ResetClickedOnStay != Net_Royal_MatchResult_ResetClickedOnStay) {
					State.ResetClickedOnStay = Net_Royal_MatchResult_ResetClickedOnStay;
					{{{P}}}SetClickedOnStay(False);
				}
				State = SetResult(State, State.DisplayModule, {{{P}}}GetClickedOnStay(), InputPlayer, {{{P}}}GetTeamsRankUpdate(), {{{P}}}GetTeamsRank(), {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());
			}
		}

		if (IsMenuNavigationForeground) {
			foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
				switch (Event.Type) {
					case {{{Navigation::P}}}C_EventType_NavigateInput: {
						if ({{{Navigation::P}}}IsEventFromGroup(This, Event, C_NavGroup_Page)) {
							if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
								State = Select(State, Event.To, {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());
							} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							} else {
								Focus(Event.From, Event.To);
							}
						}
					}
					case {{{Navigation::P}}}C_EventType_NavigateMouse: {
						if ({{{Navigation::P}}}IsEventFromGroup(This, Event, C_NavGroup_Page)) {
							if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
								State = Select(State, Event.To, {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalRoundNumber(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());
							} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
								Focus(Event.From, Event.To);
							}
						}
					}
				}
			}
		}
	}

	if (State.DisplayAnimEndTime >= 0 && State.DisplayAnimEndTime <= Now) {
		State.DisplayAnimEndTime = -1;
		if (!State.IsVisible) {
			State.Controls.Frame_Global.Visible = False;
		}
	}
}
***
""",
[
	UIModules::Component(),
	Navigation::ComponentV2(),
	Button::ComponentV2(),
	SuperRoyal::Component(),
	Ranking::Component(),
	PlayerName::ComponentV2(),
	Component()
],
[]
	);
}