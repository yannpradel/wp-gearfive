/**
 *	UI module: FinishFeed server side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/FinishFeed_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/FinishFeed_Common.Script.txt" as UIModules_FinishFeed_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_FinishFeed_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::K_ModuleConfig GetConfig() {
	return UIModules_FinishFeed_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send a finish notification to the clients
Void TriggerFinish(CSmPlayer _Player, Integer _Segment) {
	if (_Player == Null || _Player.User == Null) return;

	foreach (Player in AllPlayers) {
		declare CUIConfig UI <=> UIManager.GetUI(Player);
		if (UI != Null) {
			declare netread Integer[] Net_Royal_FinishFeed_NotificationsRead for UI;
			declare netwrite UIModules_FinishFeed_Common::K_Notification[Integer] Net_Royal_FinishFeed_NotificationsSent for UI;
			declare netwrite Integer Net_Royal_FinishFeed_NotificationsUpdate for UI;

			// Remove read notifications
			foreach (NotificationId in Net_Royal_FinishFeed_NotificationsRead) {
				Net_Royal_FinishFeed_NotificationsSent.removekey(NotificationId);
			}

			// Remove notifications above the limit
			while (Net_Royal_FinishFeed_NotificationsSent.count >= UIModules_FinishFeed_Common::C_NotificationMaxAmount) {
				declare Integer ToRemoveId = -1;
				foreach (NotificationId => Notification in Net_Royal_FinishFeed_NotificationsSent) {
					ToRemoveId = NotificationId;
					break;
				}
				Net_Royal_FinishFeed_NotificationsSent.removekey(ToRemoveId);
			}

			// Send notification
			Net_Royal_FinishFeed_NotificationsSent[Net_Royal_FinishFeed_NotificationsUpdate] = UIModules_FinishFeed_Common::K_Notification {
				AccountId = _Player.User.WebServicesUserId,
				Segment = _Segment
			};
			Net_Royal_FinishFeed_NotificationsUpdate += 1;
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Reset the notifications of a player
Void ResetNotifications(CPlayer _Player) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;

	declare netwrite UIModules_FinishFeed_Common::K_Notification[Integer] Net_Royal_FinishFeed_NotificationsSent for UI;
	declare netwrite Integer Net_Royal_FinishFeed_NotificationsUpdate for UI;
	Net_Royal_FinishFeed_NotificationsSent = [];
	Net_Royal_FinishFeed_NotificationsUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;

	declare netwrite Boolean Net_Royal_FinishFeed_IsVisible for UI;
	Net_Royal_FinishFeed_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
	ResetNotifications(_Player);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}