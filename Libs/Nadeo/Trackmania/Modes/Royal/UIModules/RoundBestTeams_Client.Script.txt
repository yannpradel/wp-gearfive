/**
 *	UI module: RoundBestTeams client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/RoundBestTeams_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/Modes/Royal/Ranking_Client.Script.txt" as Ranking
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/RoundBestTeams_Common.Script.txt" as UIModules_RoundBestTeams_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/StayLeaveButtons.Script.txt" as StayLeaveButtons

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Column_Rank 0
#Const C_Column_Logo 1
#Const C_Column_Name 2

#Const C_InputPriority 2

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_RoundBestTeams_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_RoundBestTeams_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Royal] Header of the popup displayed at the end of each round to highlight the best teams of the round.
	declare Text Text_BestTeams = _("Best teams of the round");

	declare Text Img_Background = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_Popup.dds";
	declare Text Img_BackgroundButtons = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_PopupWithButtons.dds";
	declare Text Img_TeamLogoBg = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/hud_royal_scoretable_team_icon_bg.dds";

	declare Real BgSizeX = 190.;
	declare Real BgSizeY = BgSizeX * (624. / 1088.);
	declare Real BgSkew = 10.;
	declare Real OutPosX = 160. + (BgSizeX * 0.5) + 5.;
	declare Real TitleSizeRatioY = 0.23;
	declare Real BottomMarginSizeRatioY = 0.06;
	declare Real SlotsZoneSizeY = BgSizeY * (1. - TitleSizeRatioY - BottomMarginSizeRatioY);
	declare Real SlotSizeY = (SlotsZoneSizeY / UIModules_RoundBestTeams_Common::C_SlotsNb);
	declare Real UsableSizeX = BgSizeX * 0.8;
	declare Real LeftStartX = UsableSizeX * -0.5;

	declare Real BgButtonsSizeX = BgSizeX + 2.;
	declare Real BgButtonsSizeY = BgButtonsSizeX * (560. / 1072.);
	declare Real SizeY_Button = BgButtonsSizeY * 0.185;
	declare Vec2 Pos_Buttons = MLHelpers::SkewX(<0., BgButtonsSizeY * -0.485>, BgSkew);

	declare Grid::K_GridConfig GridConfig = Grid::Create(UsableSizeX, 3., 2., Grid::C_Direction_Right);
	GridConfig = Grid::AddColumn(GridConfig, C_Column_Rank, 15., Grid::C_Align_Right);
	GridConfig = Grid::AddColumn(GridConfig, C_Column_Logo, 20., Grid::C_Align_Center);
	GridConfig = Grid::AddColumn(GridConfig, C_Column_Name, 40., Grid::C_Align_Left);
	declare Grid::K_Grid Grid = Grid::Compile(GridConfig);

	declare Text ML_AllSlots = "";
	for (SlotsNb, 1, UIModules_RoundBestTeams_Common::C_SlotsNb) {
		declare Real SlotsZonePosY = (SlotsZoneSizeY * 0.5 - SlotSizeY) - ((0.9-SlotsNb*0.04) * SlotSizeY * (SlotsNb - 1));
		declare Real SlotsZonePosX = LeftStartX + MLHelpers::SkewX(SlotsZonePosY, BgSkew);
		ML_AllSlots ^= """
			<frame id="frame-slot-{{{SlotsNb}}}" {{{MLHelpers::Pos(<SlotsZonePosX, SlotsZonePosY>)}}}>
				<label id="label-rank" text="{{{SlotsNb}}}" class="label-bold" z-index="3" {{{Grid::Pos(Grid, C_Column_Rank, 0.)}}} {{{Grid::Size(Grid, C_Column_Rank, SlotSizeY * 0.9)}}} halign="right" textsize="{{{10-2*SlotsNb}}}" />
				<quad id="quad-logo-bg" class="quad-default" z-index="2" {{{Grid::Pos(Grid, C_Column_Logo, 0.)}}} {{{Grid::Size(Grid, C_Column_Logo, SlotSizeY * 0.9)}}} scale="{{{1.-SlotsNb*0.10}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.5" image="{{{Img_TeamLogoBg}}}" keepratio="fit" />
				<quad id="quad-logo" class="quad-default" z-index="3" {{{Grid::Pos(Grid, C_Column_Logo, 0.)}}} {{{Grid::Size(Grid, C_Column_Logo, SlotSizeY * 0.9)}}} scale="{{{0.95-SlotsNb*0.10}}}" keepratio="fit" />
				<frame id="frame-names" z-index="4" {{{Grid::Pos(Grid, C_Column_Name, 0.)}}}>
					<frameinstance modelid="framemodel-player" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 5.>, 10.))}}} data-textsize="{{{3.5 - (SlotsNb * 0.5)}}}"/>
					<frameinstance modelid="framemodel-player" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 0.>, 10.))}}} data-textsize="{{{3.5 - (SlotsNb * 0.5)}}}"/>
					<frameinstance modelid="framemodel-player" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -5.>, 10.))}}} data-textsize="{{{3.5 - (SlotsNb * 0.5)}}}"/>
				</frame>
			</frame>
		""";
	}

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="label-bold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textsize="2.25" textcolor="FFF"/>
	<style class="quad-default" halign="center" valign="center"/>
</stylesheet>

<framemodel id="framemodel-player">
	<quad id="quad-mvp-icon" pos="0 0.4" size="6 6" class="quad-default" image="{{{Const::C_ImageUrl_Matchmaking_MVP_Icon}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"/>
	<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" pos="5 0" data-{{{Grid::Size(Grid, C_Column_Name, 5.)}}} data-halign="left" data-valign="center2" data-textsize="3.5" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-textprefix="$i$t" data-textcolor="ffffff" />
</framemodel>

<frame id="frame-global" z-index="5" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_RoundBestTeams_Common::C_UIModuleConfig)}}}>
		<quad id="quad-black-bg" z-index="0" size="320 180" halign="center" valign="center" bgcolor="000" opacity="0" fullscreen="1" />
		<frame id="frame-valign" z-index="1" size="320 180" halign="center" valign="center">
			<frame id="frame-content" pos="{{{-OutPosX}}} 0">
				<quad id="quad-background" z-index="0" size="{{{BgSizeX}}} {{{BgSizeY}}}" halign="center" valign="center" image="{{{Img_Background}}}" />
				<quad id="quad-background-buttons" z-index="0" size="{{{BgButtonsSizeX}}} {{{BgButtonsSizeY}}}" halign="center" valign="center" image="{{{Img_BackgroundButtons}}}" opacity="0" hidden="1" />
				<label z-index="1" pos="{{{((0.176 * BgButtonsSizeY) / 2.) * (1. - TitleSizeRatioY)}}} {{{(BgButtonsSizeY / 2.) * (1. - TitleSizeRatioY)}}}" size="{{{BgSizeX*0.7}}} 12" class="label-bold" textsize="7" text="{{{Text_BestTeams}}}" autonewline="1" maxline="2" />
				<frame id="frame-all-slots" z-index="3">
					{{{ML_AllSlots}}}
				</frame>
				<frameinstance modelid="{{{StayLeaveButtons::C_Name}}}" {{{MLHelpers::Pos(Pos_Buttons)}}} />
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/AudioManager_ML.Script.txt" as AudioManager
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Modes/Clans_Client.Script.txt" as Clans

#Const C_SlotsNb {{{dump(UIModules_RoundBestTeams_Common::C_SlotsNb)}}}
#Const C_InputPriority {{{dump(C_InputPriority)}}}

#Const C_AnimDuration_UIShow {{{dump(UIModules_RoundBestTeams_Common::C_AnimDuration_UIShow)}}}
#Const C_AnimDuration_BeforeBestTeams {{{dump(UIModules_RoundBestTeams_Common::C_AnimDuration_BeforeBestTeams)}}}
#Const C_AnimDuration_BestTeam {{{dump(UIModules_RoundBestTeams_Common::C_AnimDuration_BestTeam)}}}
#Const C_AnimDuration_BestTeamInverval {{{dump(UIModules_RoundBestTeams_Common::C_AnimDuration_BestTeamInverval)}}}
#Const C_AnimDuration_AfterBestTeams {{{dump(UIModules_RoundBestTeams_Common::C_AnimDuration_AfterBestTeams)}}}
#Const C_AnimDuration_UIHide {{{dump(UIModules_RoundBestTeams_Common::C_AnimDuration_UIHide)}}}
""",
"""
declare Text[Integer] G_ScheduledSounds;

Void DisplayBestTeams(CMlFrame _Frame_Slots, {{{PlayerName::P}}}K_UserInfo[][Integer] _PlayerUserInfos, Integer _BestTeamsNb) {
	declare Integer[][] TeamsRanking = {{{Ranking::P}}}GetTeamsRanking();
	declare Integer StartAnim = Now + C_AnimDuration_BeforeBestTeams;

	for (FrameIndex, 1, C_SlotsNb) {
		declare Integer SlotIndex = C_SlotsNb - FrameIndex + 1; //< Invert the for loop
		declare CMlFrame Frame_Slot <=> (_Frame_Slots.GetFirstChild("frame-slot-"^SlotIndex) as CMlFrame);

		if (Frame_Slot != Null) {
			Frame_Slot.Hide();

			if (TeamsRanking.existskey(SlotIndex - 1)) {
				declare {{{Ranking::P}}}K_TeamRank TeamRank = {{{Ranking::P}}}GetTeamRank(TeamsRanking[SlotIndex - 1], SlotIndex);
				declare CMlQuad Quad_Logo <=> (Frame_Slot.GetFirstChild("quad-logo") as CMlQuad);
				declare CMlQuad Quad_LogoBg <=> (Frame_Slot.GetFirstChild("quad-logo-bg") as CMlQuad);
				declare CMlFrame Frame_Names <=> (Frame_Slot.GetFirstChild("frame-names") as CMlFrame);
				declare CMlLabel Label_Rank <=> (Frame_Slot.GetFirstChild("label-rank") as CMlLabel);

				declare SlotAnimStartTime = StartAnim + ((C_AnimDuration_BestTeam + C_AnimDuration_BestTeamInverval) * (_BestTeamsNb - SlotIndex));
				declare Vec3 RankColor = <1.,1.,1.>;
				declare Real BgOpacity = 0.5;
				declare Text Rank = "";
				declare Text Logo = "";

				if (!TeamRank.Eliminated) {
					if (InputPlayer != Null && InputPlayer.CurrentClan == TeamRank.TeamId) {
						RankColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}};
						BgOpacity = 1.;
					}
					Rank = TL::FormatRank(TeamRank.Rank, False);
					Logo = Clans::GetClanLogo(TeamRank.TeamId);

					Frame_Slot.RelativeRotation = ML::Rand(-6., 6.);
					Frame_Slot.RelativeScale = 0.7;
					AnimMgr.Flush(Frame_Slot);
					AnimMgr.Add(Frame_Slot, "<anim scale=\"1.\" hidden=\"0\" rot=\"0\"/>", SlotAnimStartTime, C_AnimDuration_BestTeam, CAnimManager::EAnimManagerEasing::ElasticOut);
					G_ScheduledSounds[SlotAnimStartTime] = "{{{UIModules_RoundBestTeams_Common::C_Sound_BestTeams}}}"^TeamRank.Rank;
				}

				foreach (Key => Control in Frame_Names.Controls) {
					declare CMlFrame PlayerName_Name <=> ((Control as CMlFrame).GetFirstChild("playername-name") as CMlFrame);
					declare CMlQuad Quad_MVP <=> ((Control as CMlFrame).GetFirstChild("quad-mvp-icon") as CMlQuad);

					if (!TeamRank.Eliminated && _PlayerUserInfos.existskey(TeamRank.TeamId) && _PlayerUserInfos[TeamRank.TeamId].count > Key) {
						if (Control.DataAttributeExists("textsize")) {
							{{{PlayerName::P}}}SetTextSize(This, PlayerName_Name, TL::ToReal(Control.DataAttributeGet("textsize")), False);
						}
						{{{PlayerName::P}}}SetUserInfo(This, PlayerName_Name, _PlayerUserInfos[TeamRank.TeamId][Key], False);
						if (InputPlayer != Null && InputPlayer.User != Null && InputPlayer.User.WebServicesUserId == _PlayerUserInfos[TeamRank.TeamId][Key].AccountId) {
							{{{PlayerName::P}}}SetTextColor(This, PlayerName_Name, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}}, False);
						} else {
							{{{PlayerName::P}}}SetTextColor(This, PlayerName_Name, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight)}}}, False);
						}
						{{{PlayerName::P}}}Redraw(This, PlayerName_Name);
						PlayerName_Name.Visible = True;
						Quad_MVP.Hide();
						if (Key == 0) {
							AnimMgr.Flush(Quad_MVP);
							Quad_MVP.RelativeScale = 1.3;
							Quad_MVP.RelativeRotation = ML::Rand(-6., 6.);
							AnimMgr.Add(Quad_MVP, "<anim scale=\"1.\" hidden=\"0\" rot=\"0\"/>", SlotAnimStartTime + 250, C_AnimDuration_BestTeam, CAnimManager::EAnimManagerEasing::QuadIn);
						}
					} else {
						PlayerName_Name.Visible = False;
						Quad_MVP.Hide();
					}
				}

				Quad_Logo.Visible = (Logo != "");
				Quad_LogoBg.Visible = Quad_Logo.Visible;
				if (Quad_Logo.Visible) {
					Quad_Logo.ImageUrl = Logo;
					Quad_LogoBg.Opacity = BgOpacity;
				}

				Label_Rank.Visible = !TeamRank.Eliminated;
				if (Label_Rank.Visible) Label_Rank.TextColor = RankColor;
			}
		}
	}
}

Boolean SetVisibility(CMlFrame _Frame_Content, CMlQuad _Quad_BlackBg, Boolean _IsVisible) {
	AnimMgr.Flush(_Quad_BlackBg);
	AnimMgr.Flush(_Frame_Content);

	if (_IsVisible) {
		_Quad_BlackBg.Opacity = 0.;
		_Frame_Content.RelativePosition_V3.X = {{{-OutPosX}}};
		AnimMgr.Add(_Quad_BlackBg, "<anim opacity=\"0.4\"/>", Now, C_AnimDuration_UIShow, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(_Frame_Content, "<anim pos=\"0 0\"/>", Now, C_AnimDuration_UIShow, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Quad_BlackBg, "<anim opacity=\"0\"/>", Now, C_AnimDuration_UIHide, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(_Frame_Content, "<anim pos=\"{{{OutPosX}}} 0\"/>", Now, C_AnimDuration_UIHide, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return _IsVisible;
}

Void DisplayButtons(Boolean _DisplayButtons) {
	{{{StayLeaveButtons::P}}}SetVisibility(_DisplayButtons);
}

Boolean SetButtonsAreVisible(CMlFrame _Frame_VAlign, CMlQuad _Quad_Background, CMlQuad _Quad_BackgroundButtons, Boolean _ButtonsAreVisible) {
	EnableMenuNavigation(_ButtonsAreVisible, False, False, Null, C_InputPriority);

	AnimMgr.Flush(_Frame_VAlign);
	AnimMgr.Flush(_Quad_Background);
	AnimMgr.Flush(_Quad_BackgroundButtons);
	if (_ButtonsAreVisible) {
		AnimMgr.Add(_Quad_BackgroundButtons, "<anim opacity=\"1\" hidden=\"0\" />", 100, CAnimManager::EAnimManagerEasing::QuadIn);
		AnimMgr.Add(_Quad_Background, "<anim opacity=\"0\" hidden=\"1\" />", Now + 100, 100, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(_Frame_VAlign, "<anim pos=\"0 5\" />", Now + 200, {{{StayLeaveButtons::P}}}C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Frame_VAlign, "<anim pos=\"0 0\" />", {{{StayLeaveButtons::P}}}C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(_Quad_Background, "<anim opacity=\"1\" hidden=\"0\" />", Now + {{{StayLeaveButtons::P}}}C_DisplayAnimDuration, 100, CAnimManager::EAnimManagerEasing::QuadIn);
		AnimMgr.Add(_Quad_BackgroundButtons, "<anim opacity=\"0\" hidden=\"1\" />", Now + {{{StayLeaveButtons::P}}}C_DisplayAnimDuration + 100, 100, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return _ButtonsAreVisible;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Content;
declare CMlFrame Frame_AllSlots;
declare CMlQuad Quad_BlackBg;
declare CMlFrame Frame_VAlign;
declare CMlQuad Quad_Background;
declare CMlQuad Quad_BackgroundButtons;

declare netread Boolean Net_Royal_RoundBestTeams_IsVisible for UI;
declare netread Integer Net_Royal_RoundEliminations_BestTeamsNb for Teams[0];

declare Boolean DisplayModule;
declare Integer RankingUpdate;
declare Integer CurrentAnimationEndTime;
declare {{{PlayerName::P}}}K_UserInfo [][Integer] PlayerUserInfos;
declare Boolean ButtonsAreVisible;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Content <=> (Frame_Global.GetFirstChild("frame-content") as CMlFrame);
Frame_AllSlots <=> (Frame_Content.GetFirstChild("frame-all-slots") as CMlFrame);
Quad_BlackBg <=> (Frame_Global.GetFirstChild("quad-black-bg") as CMlQuad);
Frame_VAlign <=> (Frame_Global.GetFirstChild("frame-valign") as CMlFrame);
Quad_Background <=> (Frame_Content.GetFirstChild("quad-background") as CMlQuad);
Quad_BackgroundButtons <=> (Frame_Content.GetFirstChild("quad-background-buttons") as CMlQuad);

DisplayModule = Frame_Global.Visible;
SetVisibility(Frame_Content, Quad_BlackBg, False);
DisplayButtons(Frame_Global.Visible);
RankingUpdate = -1;
CurrentAnimationEndTime = -1;
G_ScheduledSounds = [];
ButtonsAreVisible = SetButtonsAreVisible(Frame_VAlign, Quad_Background, Quad_BackgroundButtons, False);
***

***MainLoop***
***
if (PageIsVisible) {
	if (DisplayModule != Net_Royal_RoundBestTeams_IsVisible) {
		DisplayModule = Net_Royal_RoundBestTeams_IsVisible;
		Frame_Global.Visible = Net_Royal_RoundBestTeams_IsVisible;
		DisplayButtons(Frame_Global.Visible);
		// Disable menu navigation when hiding this UI
		if (!Frame_Global.Visible) {
			ButtonsAreVisible = SetButtonsAreVisible(Frame_VAlign, Quad_Background, Quad_BackgroundButtons, False);
		}
	}

	if (DisplayModule && RankingUpdate != {{{Ranking::P}}}GetTeamsRankingUpdate()) {
		RankingUpdate = {{{Ranking::P}}}GetTeamsRankingUpdate();
		G_ScheduledSounds = [];

		// Find players' names
		PlayerUserInfos = [];
		foreach (Score in Scores) {
			declare Integer ScoreClan = {{{Ranking::P}}}GetScoreClan(Score);
			if (ScoreClan > 0) {
				if (!PlayerUserInfos.existskey(ScoreClan)) {
					PlayerUserInfos[ScoreClan] = [{{{PlayerName::P}}}GetUserInfo(Score.User, True)];
				} else {
					PlayerUserInfos[ScoreClan].add({{{PlayerName::P}}}GetUserInfo(Score.User, True));
				}
			}
		}

		DisplayBestTeams(Frame_AllSlots, PlayerUserInfos, Net_Royal_RoundEliminations_BestTeamsNb);
		SetVisibility(Frame_Content, Quad_BlackBg, True);
		CurrentAnimationEndTime = Now + (C_AnimDuration_BestTeam + C_AnimDuration_BestTeamInverval) * Net_Royal_RoundEliminations_BestTeamsNb + C_AnimDuration_AfterBestTeams;
	}

	if (CurrentAnimationEndTime >= 0 && CurrentAnimationEndTime <= Now) {
		SetVisibility(Frame_Content, Quad_BlackBg, False);
		CurrentAnimationEndTime = -1;
	}

	if (G_ScheduledSounds.count > 0) {
		declare Integer[] SoundsToRemove_Key;
		foreach (Time => SoundName in G_ScheduledSounds) {
			if (Time <= 0) {
				SoundsToRemove_Key.add(Time);
			} else if (Time <= Now) {
				AudioManager::StopSound(This, SoundName);
				AudioManager::PlaySound(This, SoundName);
				SoundsToRemove_Key.add(Time);
			}
		}
		foreach (SoundTime in SoundsToRemove_Key) {
			if (G_ScheduledSounds.existskey(SoundTime)) G_ScheduledSounds.removekey(SoundTime);
		}
	}

	if (Frame_Global.Visible) {
		if (ButtonsAreVisible != {{{StayLeaveButtons::P}}}ButtonsAreVisible()) {
			ButtonsAreVisible = SetButtonsAreVisible(Frame_VAlign, Quad_Background, Quad_BackgroundButtons, {{{StayLeaveButtons::P}}}ButtonsAreVisible());
		}

		foreach (Event in {{{StayLeaveButtons::P}}}PendingEvents) {
			switch (Event.Type) {
				case {{{StayLeaveButtons::P}}}C_EventType_Selection: {
					DisplayButtons(False);
				}
			}
		}
	}
} else {
	if (EnableMenuNavigationInputs) {
		EnableMenuNavigation(False, False, False, Null, C_InputPriority);
	}
}
***
""",
[
	UIModules::Component(),
	Ranking::Component(),
	StayLeaveButtons::Component(SizeY_Button),
	PlayerName::ComponentV2()
],
[]
	);
}