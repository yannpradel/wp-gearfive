/**
 *	UI module: WinScreen client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/UIModules/WinScreen_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/WinScreen_Common.Script.txt" as UIModules_WinScreen_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/Ranking_Client.Script.txt" as Ranking
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/ZIndex.Script.txt" as ZIndex
#Include "Libs/Nadeo/Trackmania/Modes/Royal/SuperRoyal_Client.Script.txt" as SuperRoyal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_UpdateInterval 250 //< Time interval between two updates check
#Const C_ImgPath "file://Media/Manialinks/Nadeo/Trackmania/Modes"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_WinScreen_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_WinScreen_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Royal WinScreen] Title of the pop-up displaying the winners of the match.
	declare Text Text_Winners = _("Winners");
	//L16N [Royal WinScreen] This text is displayed to the winning team at the end of a Royal match. It will be displayed above an animated logo containing the following text: "Royal Champion". The whole phrase will be read as "You are the Royal Champion".
	declare Text Text_YouAreThe = _("|ChampionHeader|You are the");

	declare Text Img_Background = C_ImgPath^"/Knockout/TM_UI_HUD_02_KnockOut_Popup.dds";
	declare Text Img_TeamLogoBg = C_ImgPath^"/Royal/hud_royal_team_icon_bg.dds";
	declare Text Video_RoyalChampion = C_ImgPath^"/Royal/Animation_royal_champion.webm";
	declare Text Video_BronzeSuperRoyalChampion = C_ImgPath^"/Royal/SuperRoyal/Animation_SR_champion_bronze.webm";
	declare Text Video_SilverSuperRoyalChampion = C_ImgPath^"/Royal/SuperRoyal/Animation_SR_champion_silver.webm";
	declare Text Video_GoldSuperRoyalChampion = C_ImgPath^"/Royal/SuperRoyal/Animation_SR_champion_gold.webm";
	declare Text Video_MasterSuperRoyalChampion = C_ImgPath^"/Royal/SuperRoyal/Animation_SR_champion.webm";
	declare Text Sound_RoyalChampion = C_ImgPath^"/Royal/LionAnim.wav";

	declare Vec2 ImgSize_Background = <1088., 624.>;
	declare Vec2 ImgSize_TeamLogoBg = <188., 108.>;

	declare Real SizeX_Bg = 180.;
	declare Vec2 Size_Bg = <SizeX_Bg, SizeX_Bg * (ImgSize_Background.Y / ImgSize_Background.X)>;
	declare Real PosX_PopupHidden = 160. + (Size_Bg.X * 0.5) + 5.;
	declare Vec2 Pos_Content = MLHelpers::SkewX(<0., Size_Bg.Y * 0.485>, 10.);
	declare Real SizeX_Content = SizeX_Bg * 0.85;
	declare Vec2 Pos_Title = MLHelpers::SkewX(<0., -10.>, 10.);
	declare Real TextSize_Title = 8.;
	declare Real SizeX_TeamLogoBg = 70.;
	declare Vec2 Size_TeamLogoBg = <SizeX_TeamLogoBg, SizeX_TeamLogoBg * (ImgSize_TeamLogoBg.Y / ImgSize_TeamLogoBg.X)>;
	declare Vec2 Pos_TeamLogoBg = MLHelpers::SkewX(<0., -38.>, 10.);
	declare Vec2 Size_TeamLogo = <Size_TeamLogoBg.X * 0.77, Size_TeamLogoBg.Y * 0.86>;
	declare Vec2 Pos_TeamName = MLHelpers::SkewX(<0., -61.>, 10.);
	declare Vec2 Pos_TeamMembers = MLHelpers::SkewX(<0., -67.>, 10.);

	declare Vec2 Size_WinnerVideo = <320., 180.>;
	declare Vec2 Size_WinnerTitle = <300., 20.>;
	declare Vec2 Pos_WinnerTitle = <0., 70.>;

	declare Text ML_TeamMembers = "";
	for (I, 0, 5) {
		declare Vec2 Pos_TeamMember = MLHelpers::SkewX(<0., I * -5.>, 10.);
		ML_TeamMembers ^= """<frameinstance modelid="{{{PlayerName::C_Name}}}" {{{MLHelpers::Pos(Pos_TeamMember)}}} data-size="{{{SizeX_Content}}} 5" data-halign="center" data-valign="center" data-textsize="3.5" data-textcolor="ffffff" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-textprefix="$t$i" />""";
	}

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-bold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" />
	<style class="text-semibold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$t$i" />
</stylesheet>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_WinScreen}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_WinScreen_Common::C_UIModuleConfig)}}}>
		<quad id="quad-dimmer" z-index="0" size="320 180" halign="center" valign="center" bgcolor="000000" opacity="0" fullscreen="1" />
		<frame z-index="1" size="320 180" halign="center" valign="center">
			<frame id="frame-popup" pos="{{{-PosX_PopupHidden}}} 0" z-index="0">
				<quad z-index="0" {{{MLHelpers::Size(Size_Bg)}}} halign="center" valign="center" image="{{{Img_Background}}}" />
				<frame {{{MLHelpers::Pos(Pos_Content)}}} z-index="1">
					<label {{{MLHelpers::Pos(Pos_Title)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" textsize="{{{TextSize_Title}}}" text="{{{Text_Winners}}}" class="text-bold" />
					<frame {{{MLHelpers::Pos(Pos_TeamLogoBg)}}}>
						<quad z-index="0" {{{MLHelpers::Size(Size_TeamLogoBg)}}} halign="center" valign="center" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.5" image="{{{Img_TeamLogoBg}}}" />
						<quad id="quad-team-logo" z-index="1" {{{MLHelpers::Size(Size_TeamLogo)}}} halign="center" valign="center" keepratio="fit" />
					</frame>
					<label id="label-team-name" {{{MLHelpers::Pos(Pos_TeamName)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" textsize="3.5" class="text-bold" />
					<frame id="frame-team-members" {{{MLHelpers::Pos(Pos_TeamMembers)}}}>
						{{{ML_TeamMembers}}}
					</frame>
				</frame>
			</frame>
			<frame z-index="1">
				<label id="label-winner" {{{MLHelpers::Pos(Pos_WinnerTitle)}}} {{{MLHelpers::Size(Size_WinnerTitle)}}} z-index="1" halign="center" valign="center2" text="{{{Text_YouAreThe}}}" textsize="14" opacity="0" class="text-bold" />
				<quad id="video-winner" {{{MLHelpers::Size(Size_WinnerVideo)}}} z-index="0" halign="center" valign="center" keepratio="fit" opacity="0" />
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Modes/Clans_Client.Script.txt" as Clans

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlQuad Quad_Dimmer;
	CMlFrame Frame_Popup;
	CMlQuad Video_Winner;
	CMlLabel Label_Winner;
	CMlQuad Quad_TeamLogo;
	CMlLabel Label_TeamName;
	CMlFrame Frame_TeamMembers;
}
#Struct K_State {
	K_Controls Controls;
	Boolean IsDisplayed_DisplayModule;
	Boolean IsDisplayed;
	Integer DisplayAnimEndTime;
	Integer RankingUpdate;
	Ident WinnerVideoId;
	Ident WinnerAudioId;
}

#Const C_DisplayAnimDuration 250
#Const C_UpdateInterval {{{dump(C_UpdateInterval)}}}
#Const C_Color_AccentOne {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}}
""",
"""
Integer GetPlayerClan(CSmPlayer _Player) {
	if (_Player == Null) return 0;
	if (_Player.CurrentClan <= 0 && _Player.Score != Null && {{{Ranking::P}}}GetScoreClan(_Player.Score) > 0) return {{{Ranking::P}}}GetScoreClan(_Player.Score);
	return _Player.CurrentClan;
}

Void ShakeLabel(CMlLabel _Label, Integer _Delay) {
	_Label.RelativeRotation = -8.;
	_Label.RelativeScale = 1.3;
	_Label.Opacity = 0.;

	declare Integer ShakeFrequency = 50;
	declare Integer ShakeDelay = -75;
	declare Real RandRange = 1 - ((2 * ML::Rand(0, 1)) * ML::Rand(0., 0.1));
	declare Integer AnimStartTime = Now + _Delay;
	declare Integer AnimScaleDuration = 250;

	AnimMgr.Add(_Label, "<anim scale=\"1\" rot=\"0\" opacity=\"1\"/>", AnimStartTime, AnimScaleDuration, CAnimManager::EAnimManagerEasing::QuadIn);
	AnimMgr.Add(_Label, "<anim rot=\""^ML::Rand(-0.75 * RandRange, -0.5 * RandRange)^"\"/>", AnimStartTime + AnimScaleDuration, ShakeFrequency + ShakeDelay, CAnimManager::EAnimManagerEasing::SineInOut);
	AnimMgr.Add(_Label, "<anim rot=\""^ML::Rand(0.5 * RandRange, 0.75 * RandRange)^"\"/>", AnimStartTime + AnimScaleDuration + (2 * ShakeFrequency) + ShakeDelay, ShakeFrequency, CAnimManager::EAnimManagerEasing::SineInOut);
	AnimMgr.Add(_Label, "<anim rot=\""^ML::Rand(-0.25 * RandRange, -0.1 * RandRange)^"\"/>", AnimStartTime + AnimScaleDuration + (3 * ShakeFrequency) + ShakeDelay, ShakeFrequency, CAnimManager::EAnimManagerEasing::SineInOut);
	AnimMgr.Add(_Label, "<anim rot=\"0\"/>", AnimStartTime + AnimScaleDuration + (5 * ShakeFrequency) + ShakeDelay, ShakeFrequency, CAnimManager::EAnimManagerEasing::SineInOut);
}

K_State SetVisibility(K_State _State, Boolean _DisplayModule, Integer _WinningTeamId, Boolean _IsWinner, Boolean _IsSuperRoyal, Boolean _IsFinale, Text _SuperRoyalDivision) {
	declare K_State State = _State;

	State.IsDisplayed_DisplayModule = _DisplayModule;
	State.IsDisplayed = State.IsDisplayed_DisplayModule && _WinningTeamId > 0;
	State.DisplayAnimEndTime = Now + C_DisplayAnimDuration;

	AnimMgr.Flush(State.Controls.Quad_Dimmer);
	AnimMgr.Flush(State.Controls.Frame_Popup);
	AnimMgr.Flush(State.Controls.Video_Winner);
	AnimMgr.Flush(State.Controls.Label_Winner);

	if (State.IsDisplayed) {
		State.Controls.Frame_Global.Visible = True;
		State.Controls.Quad_Dimmer.Opacity = 0.;
		if (_IsWinner) {
			State.Controls.Frame_Popup.Visible = False;
			AnimMgr.Add(State.Controls.Quad_Dimmer, "<anim opacity=\"0.8\"/>", Now, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::Linear);
			AnimMgr.Add(State.Controls.Video_Winner, "<anim opacity=\"1\"/>", Now, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			if (State.WinnerVideoId != NullId && Video.Videos.existskey(State.WinnerVideoId)) {
				declare CVideo WinnerVideo = Video.Videos[State.WinnerVideoId];
				if (WinnerVideo != Null) Video.DestroyVideo(WinnerVideo);
			}
			declare Text Video_Url = "{{{Video_RoyalChampion}}}";
			if (_IsSuperRoyal && _IsFinale) {
				switch (_SuperRoyalDivision) {
					case {{{SuperRoyal::P}}}C_Division_Bronze: Video_Url = "{{{Video_BronzeSuperRoyalChampion}}}";
					case {{{SuperRoyal::P}}}C_Division_Silver: Video_Url = "{{{Video_SilverSuperRoyalChampion}}}";
					case {{{SuperRoyal::P}}}C_Division_Gold: Video_Url = "{{{Video_GoldSuperRoyalChampion}}}";
					case {{{SuperRoyal::P}}}C_Division_Master: Video_Url = "{{{Video_MasterSuperRoyalChampion}}}";
				}
			}
			declare CVideo WinnerVideo <=> Video.CreateVideo(Video_Url, False, True);
			if (WinnerVideo != Null) {
				State.WinnerVideoId = WinnerVideo.Id;
				State.Controls.Video_Winner.Image = WinnerVideo.Image;
			}
			if (State.WinnerVideoId != NullId && Video.Videos.existskey(State.WinnerVideoId)) {
				Video.Videos[State.WinnerVideoId].Stop();
				Video.Videos[State.WinnerVideoId].Play();
			}
			if (State.WinnerAudioId != NullId && Audio.Sounds.existskey(State.WinnerAudioId)) {
				Audio.Sounds[State.WinnerAudioId].Stop();
				Audio.Sounds[State.WinnerAudioId].Play();
			}
			ShakeLabel(State.Controls.Label_Winner, 2800);
		} else {
			State.Controls.Frame_Popup.RelativePosition_V3.X = {{{-PosX_PopupHidden}}};
			State.Controls.Frame_Popup.Visible = True;
			AnimMgr.Add(State.Controls.Quad_Dimmer, "<anim opacity=\"0.4\"/>", Now, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::Linear);
			AnimMgr.Add(State.Controls.Frame_Popup, "<anim pos=\"0 0\"/>", Now, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	} else {
		AnimMgr.Add(State.Controls.Quad_Dimmer, "<anim opacity=\"0\"/>", Now, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(State.Controls.Frame_Popup, "<anim pos=\"{{{PosX_PopupHidden}}} 0\"/>", Now, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Video_Winner, "<anim opacity=\"0\"/>", Now, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(State.Controls.Label_Winner, "<anim opacity=\"0\"/>", Now, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::Linear);
		if (State.WinnerVideoId != NullId && Video.Videos.existskey(State.WinnerVideoId)) {
			Video.Videos[State.WinnerVideoId].Stop();
		}
		if (State.WinnerAudioId != NullId && Audio.Sounds.existskey(State.WinnerAudioId)) {
			Audio.Sounds[State.WinnerAudioId].Stop();
		}
		if (State.WinnerVideoId != NullId && Video.Videos.existskey(State.WinnerVideoId)) {
			declare CVideo WinnerVideo = Video.Videos[State.WinnerVideoId];
			if (WinnerVideo != Null) Video.DestroyVideo(WinnerVideo);
		}
		State.WinnerVideoId = NullId;
	}

	return State;
}

K_State Update(K_State _State, Boolean _DisplayModule, Integer _RankingUpdate, Integer[][] _TeamsRanking, Boolean _IsSuperRoyal, Boolean _IsFinale, Text _SuperRoyalDivision) {
	declare K_State State = _State;

	State.RankingUpdate = _RankingUpdate;

	declare Integer PlayerClan = GetPlayerClan(InputPlayer);
	declare {{{Ranking::P}}}K_TeamRank WinningTeamRank;
	if (_TeamsRanking.count > 0) {
		WinningTeamRank = {{{Ranking::P}}}GetTeamRank(_TeamsRanking[0], 1);
	}
	declare Boolean IsWinner = (PlayerClan > 0 && PlayerClan == WinningTeamRank.TeamId);

	State = SetVisibility(State, _DisplayModule, WinningTeamRank.TeamId, IsWinner, _IsSuperRoyal, _IsFinale, _SuperRoyalDivision);

	if (State.IsDisplayed) {
		if (WinningTeamRank.TeamId > 0 && !IsWinner) {
			declare Text TeamLogo = Clans::GetClanLogo(WinningTeamRank.TeamId);
			declare Text TeamName = Clans::GetClanName(WinningTeamRank.TeamId);
			declare Vec3 TeamColor = Clans::GetClanColor(WinningTeamRank.TeamId);

			if (TeamLogo == "") {
				State.Controls.Quad_TeamLogo.Visible = False;
			} else {
				State.Controls.Quad_TeamLogo.ImageUrl = TeamLogo;
				State.Controls.Quad_TeamLogo.Visible = True;
			}

			if (TeamName == "") {
				State.Controls.Label_TeamName.Visible = False;
			} else {
				State.Controls.Label_TeamName.Value = TeamName;
				State.Controls.Label_TeamName.TextColor = TeamColor;
				State.Controls.Label_TeamName.Visible = True;
			}

			declare {{{PlayerName::P}}}K_UserInfo[] TeamMembers;
			declare Integer MyMemberKey = -1;
			foreach (Score in Scores) {
				if ({{{Ranking::P}}}GetScoreClan(Score) == WinningTeamRank.TeamId) {
					TeamMembers.add({{{PlayerName::P}}}GetUserInfo(Score.User, True));
					if (InputPlayer != Null && InputPlayer.User != Null && InputPlayer.User.Id == Score.User.Id) MyMemberKey = TeamMembers.count - 1;
					if (TeamMembers.count >= State.Controls.Frame_TeamMembers.Controls.count) break;
				}
			}
			foreach (Key => Control in State.Controls.Frame_TeamMembers.Controls) {
				if (TeamMembers.existskey(Key)) {
					declare CMlFrame PlayerName_TeamMember <=> (Control as CMlFrame);
					{{{PlayerName::P}}}SetUserInfo(This, PlayerName_TeamMember, TeamMembers[Key], False);
					if (MyMemberKey == Key) {
						{{{PlayerName::P}}}SetTextColor(This, PlayerName_TeamMember, C_Color_AccentOne, False);
					} else {
						{{{PlayerName::P}}}SetTextColor(This, PlayerName_TeamMember, <1., 1., 1.>, False);
					}
					{{{PlayerName::P}}}Redraw(This, PlayerName_TeamMember);
					PlayerName_TeamMember.Visible = True;
				} else {
					Control.Visible = False;
				}
			}
		}
	}

	return State;
}

***MainInit***
***
declare netread Boolean Net_Royal_WinScreen_IsVisible for UI;

declare K_State State;
declare Integer NextUpdateTime;
***

***MainStart***
***
State = K_State {
	Controls = K_Controls {},
	IsDisplayed_DisplayModule = False,
	IsDisplayed = False,
	DisplayAnimEndTime = -1,
	RankingUpdate = -1,
	WinnerVideoId = NullId,
	WinnerAudioId = NullId
};
NextUpdateTime = Now;

State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Quad_Dimmer <=> (State.Controls.Frame_Global.GetFirstChild("quad-dimmer") as CMlQuad);
State.Controls.Frame_Popup <=> (State.Controls.Frame_Global.GetFirstChild("frame-popup") as CMlFrame);
State.Controls.Quad_TeamLogo <=> (State.Controls.Frame_Popup.GetFirstChild("quad-team-logo") as CMlQuad);
State.Controls.Label_TeamName <=> (State.Controls.Frame_Popup.GetFirstChild("label-team-name") as CMlLabel);
State.Controls.Frame_TeamMembers <=> (State.Controls.Frame_Popup.GetFirstChild("frame-team-members") as CMlFrame);
State.Controls.Video_Winner <=> (State.Controls.Frame_Global.GetFirstChild("video-winner") as CMlQuad);
State.Controls.Label_Winner <=> (State.Controls.Frame_Global.GetFirstChild("label-winner") as CMlLabel);

declare CAudioSource WinnerAudio <=> Audio.CreateSound("{{{Sound_RoyalChampion}}}", 0., False, False, False);
if (WinnerAudio != Null) {
	State.WinnerAudioId = WinnerAudio.Id;
}

State = Update(State, State.Controls.Frame_Global.Visible, {{{Ranking::P}}}GetTeamsRankingUpdate(), {{{Ranking::P}}}GetTeamsRanking(), {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());
***

***MainLoop***
***
if (PageIsVisible) {
	if (State.IsDisplayed_DisplayModule != Net_Royal_WinScreen_IsVisible) {
		State = Update(State, Net_Royal_WinScreen_IsVisible, {{{Ranking::P}}}GetTeamsRankingUpdate(), {{{Ranking::P}}}GetTeamsRanking(), {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());
	}

	if (State.IsDisplayed_DisplayModule) {
		if (Now >= NextUpdateTime) {
			NextUpdateTime = Now + C_UpdateInterval;

			if (State.RankingUpdate != {{{Ranking::P}}}GetTeamsRankingUpdate()) {
				State = Update(State, State.IsDisplayed_DisplayModule, {{{Ranking::P}}}GetTeamsRankingUpdate(), {{{Ranking::P}}}GetTeamsRanking(), {{{SuperRoyal::P}}}GetSuperRoyalEnabled(), {{{SuperRoyal::P}}}GetSuperRoyalFinale(), {{{SuperRoyal::P}}}GetSuperRoyalDivision());
			}
		}
	}

	if (State.DisplayAnimEndTime >= 0 && State.DisplayAnimEndTime <= Now) {
		State.DisplayAnimEndTime = -1;
		if (!State.IsDisplayed) {
			State.Controls.Frame_Global.Visible = False;
		}
	}
}
***
""",
[
	UIModules::Component(),
	Ranking::Component(),
	SuperRoyal::Component(),
	PlayerName::ComponentV2()
],
[]
	);
}