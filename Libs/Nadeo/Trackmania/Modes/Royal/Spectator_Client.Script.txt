/**
 *	Royal spectator client side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/Spectator_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV

#Const C_Name "royal-spectator" //< Component name
#Const P "RoyalSpectator_" //< Prefix use to differentiate functions/variables in the script

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text Component() {
	return MV::Component(
		C_Name,
"",
"""
""",
"""
Void {{{P}}}SpectatePlayer(Text _Login, Boolean _SpawnCheck) {
	declare Boolean CanSpectate = !_SpawnCheck;
	if (_SpawnCheck) {
		foreach (Player in Players) {
			if (Player.User != Null && Player.User.Login == _Login) {
				CanSpectate = (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned);
				break;
			}
		}
	}
	if (CanSpectate) {
		if (Playground != Null && Playground.GetSpectatorTargetType() != CPlaygroundClient::ESpectatorTargetType::Single) {
			ClientUI.Spectator_SetForcedTarget_Clear();
		}
		SetSpectateTarget(_Login);
	}
}
Void {{{P}}}SpectatePlayer(Text _Login) {
	{{{P}}}SpectatePlayer(_Login, True);
}

Void {{{P}}}SpectateNextClanPlayer(CSmPlayer _TargetedPlayer) {
	if (_TargetedPlayer != Null) {
		declare CSmPlayer TargetPlayer;
		declare Boolean CanSelectNextPlayer = False;
		foreach (Player in Players) {
			if (Player == _TargetedPlayer) {
				CanSelectNextPlayer = True;
			} else if (
				Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned &&
				Player.CurrentClan == _TargetedPlayer.CurrentClan &&
				Player.User != Null
			) {
				if (TargetPlayer == Null) {
					TargetPlayer <=> Player;
				}
				if (CanSelectNextPlayer) {
					TargetPlayer <=> Player;
					break;
				}
			}
		}
		if (TargetPlayer != Null && TargetPlayer != _TargetedPlayer && TargetPlayer.User != Null) {
			{{{P}}}SpectatePlayer(TargetPlayer.User.Login, False);
		}
	}
}

Void {{{P}}}SpectatePrevClanPlayer(CSmPlayer _TargetedPlayer) {
	if (_TargetedPlayer != Null) {
		declare CSmPlayer TargetPlayer;
		foreach (Player in Players) {
			if (Player.CurrentClan == _TargetedPlayer.CurrentClan) {
				if (Player == _TargetedPlayer && TargetPlayer != Null) {
					break;
				}
				TargetPlayer <=> Player;
			}
		}
		if (TargetPlayer != Null && TargetPlayer != _TargetedPlayer && TargetPlayer.User != Null) {
			{{{P}}}SpectatePlayer(TargetPlayer.User.Login, False);
		}
	}
}

Void {{{P}}}SpectateNextClanPlayer(Integer _TargetClan, Integer _Direction) {
	// Already spectating this team, select the next/prev player in the team
	if (GUIPlayer != Null && GUIPlayer.CurrentClan == _TargetClan) {
		if (_Direction < 0) {{{P}}}SpectatePrevClanPlayer(GUIPlayer);
		else if (_Direction > 0) {{{P}}}SpectateNextClanPlayer(GUIPlayer);
	}
	// Spectating a new team, select the first player in the team
	else {
		foreach (Player in Players) {
			if (
				Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned &&
				Player.CurrentClan == _TargetClan &&
				Player.User != Null
			) {
				{{{P}}}SpectatePlayer(Player.User.Login, False);
				break;
			}
		}
	}
}
Void {{{P}}}SpectateNextClanPlayer(Integer _TargetClan) {
	{{{P}}}SpectateNextClanPlayer(_TargetClan, 1);
}
Void {{{P}}}SpectatePrevClanPlayer(Integer _TargetClan) {
	{{{P}}}SpectateNextClanPlayer(_TargetClan, -1);
}
""",
[],
[]
	);
}