/**
 *	Royal ranking client side
 */
#Const Version		"1.4.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/Ranking_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV

#Const C_Name "royal-ranking" //< Component name
#Const P "RoyalRanking_" //< Prefix use to differentiate functions/variables in the script

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text Component() {
	return MV::Component(
		C_Name,
"",
"""
#Struct {{{P}}}K_TeamRank {
	Integer TeamId;
	Integer Rank;
	Integer Points;
	Integer Time;
	Integer TimeDiff;
	Boolean Eliminated;
	Integer Stars;
	Integer Progression;
}

#Const {{{P}}}C_TeamRankNull {{{P}}}K_TeamRank {
	TeamId = -1,
	Rank = -1,
	Points = 0,
	Time = -1,
	TimeDiff = 0,
	Eliminated = False,
	Stars = 0,
	Progression = 0
}
""",
"""
Integer {{{P}}}GetTeamsRankingUpdate() {
	declare netread Integer Net_Royal_Ranking_TeamsRankingUpdate for Teams[0];
	return Net_Royal_Ranking_TeamsRankingUpdate;
}

Integer[][] {{{P}}}GetTeamsRanking() {
	declare netread Integer[][] Net_Royal_Ranking_TeamsRanking for Teams[0];
	return Net_Royal_Ranking_TeamsRanking;
}

{{{P}}}K_TeamRank {{{P}}}GetTeamRank(Integer[] _TeamRank, Integer _Rank) {
	declare {{{P}}}K_TeamRank TeamRank = {{{P}}}C_TeamRankNull;

	if (_TeamRank.count >= 1) TeamRank.TeamId = _TeamRank[0];
	if (_TeamRank.count >= 2) TeamRank.Points = _TeamRank[1];
	if (_TeamRank.count >= 3) TeamRank.Time = _TeamRank[2];
	if (_TeamRank.count >= 4) TeamRank.TimeDiff = _TeamRank[3];
	if (_TeamRank.count >= 5) TeamRank.Eliminated = _TeamRank[4] > 0;
	if (_TeamRank.count >= 6) TeamRank.Stars = _TeamRank[5];
	if (_TeamRank.count >= 7) TeamRank.Progression = _TeamRank[6];
	TeamRank.Rank = _Rank;

	return TeamRank;
}

Integer {{{P}}}GetTeamRank(Integer _TeamId) {
	declare netread Integer[][] Net_Royal_Ranking_TeamsRanking for Teams[0];
	declare Integer Rank = 1;
	foreach (TeamRanking in Net_Royal_Ranking_TeamsRanking) {
		if (TeamRanking.count >= 1 && TeamRanking[0] == _TeamId) break;
		Rank += 1;
	}
	return Rank;
}

Boolean {{{P}}}IsTeamIdRank(Integer _TeamId, Integer[] _TeamRank) {
	return (_TeamRank.count >= 1 && _TeamRank[0] == _TeamId);
}

Integer {{{P}}}GetScoreClan(CSmScore _Score) {
	if (_Score == Null) return 0;
	declare netread Integer Net_Royal_Ranking_Clan for _Score;
	return Net_Royal_Ranking_Clan;
}

Integer {{{P}}}GetPlayerSegmentsNb(CSmScore _Score) {
	if (_Score == Null) return 0;
	declare netread Integer Net_Royal_Ranking_SegmentsNb for _Score;
	return Net_Royal_Ranking_SegmentsNb;
}

Integer {{{P}}}GetPlayerSegmentsPoints(CSmScore _Score) {
	if (_Score == Null) return 0;
	declare netread Integer Net_Royal_Ranking_SegmentsPoints for _Score = 0;
	return Net_Royal_Ranking_SegmentsPoints;
}

Integer {{{P}}}GetPlayerRecordsPoints(CSmScore _Score) {
	if (_Score == Null) return 0;
	declare netread Integer Net_Royal_Ranking_RecordsPoints for _Score = 0;
	return Net_Royal_Ranking_RecordsPoints;
}

Integer {{{P}}}GetPlayerPoints(CSmScore _Score) {
	return {{{P}}}GetPlayerSegmentsPoints(_Score) + {{{P}}}GetPlayerRecordsPoints(_Score);
}
""",
[],
[]
	);
}