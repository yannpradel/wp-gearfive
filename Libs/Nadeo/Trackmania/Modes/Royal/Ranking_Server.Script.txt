/**
 *	Royal ranking server side
 */
#Const Version		"2.3.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Royal/Ranking_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Create a rank for the ranking array
Integer[] CreateRank(Integer _TeamId, Integer[] _SegmentTimes, Integer _TimeDiff, Boolean _Eliminated, Integer _StarsNb, Integer _Points) {
	declare Integer LastSegmentTime = -1;
	if (_SegmentTimes.count > 0) {
		LastSegmentTime = _SegmentTimes[_SegmentTimes.count - 1];
	}
	declare Integer Eliminated = 0;
	if (_Eliminated) Eliminated = 1;
	return [_TeamId, _Points, LastSegmentTime, _TimeDiff, Eliminated, _StarsNb, _SegmentTimes.count]; //< Order is important, do not change
}
Integer[] CreateRank(Integer _TeamId, Integer[] _SegmentTimes, Integer _TimeDiff, Boolean _Eliminated, Integer _StarsNb) {
	return CreateRank(_TeamId, _SegmentTimes, _TimeDiff, _Eliminated, _StarsNb, _SegmentTimes.count);
}
Integer[] CreateRank(Integer _TeamId, Integer[] _SegmentTimes, Integer _TimeDiff, Boolean _Eliminated) {
	return CreateRank(_TeamId, _SegmentTimes, _TimeDiff, _Eliminated, 0);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the ranking to the client
Void UpdateRanking(Integer[][] _TeamsRanking) {
	declare netwrite Integer[][] Net_Royal_Ranking_TeamsRanking for Teams[0];
	declare netwrite Integer Net_Royal_Ranking_TeamsRankingUpdate for Teams[0];
	Net_Royal_Ranking_TeamsRanking = _TeamsRanking;
	Net_Royal_Ranking_TeamsRankingUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the ranking sent to the client
Integer[][] GetTeamsRanking() {
	declare netwrite Integer[][] Net_Royal_Ranking_TeamsRanking for Teams[0];
	return Net_Royal_Ranking_TeamsRanking;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the last known clan of a score
Void SetScoreClan(CSmScore _Score, Integer _Clan) {
	declare netwrite Integer Net_Royal_Ranking_Clan for _Score;
	Net_Royal_Ranking_Clan = _Clan;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// The player activated a new segment
Void AddPlayerSegment(CSmScore _Score, Integer _Time, Integer _Points) {
	declare netwrite Integer Net_Royal_Ranking_SegmentsNb for _Score;
	declare netwrite Integer Net_Royal_Ranking_SegmentsPoints for _Score;
	declare Integer Net_Royal_Ranking_LastSegmentTime for _Score;
	Net_Royal_Ranking_SegmentsNb += 1;
	Net_Royal_Ranking_SegmentsPoints += _Points;
	Net_Royal_Ranking_LastSegmentTime = _Time;
}
Void AddPlayerSegment(CSmScore _Score, Integer _Time) {
	AddPlayerSegment(_Score, _Time, 1);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Reset the segments activated by the player
Void ResetPlayerSegment(CSmScore _Score) {
	declare netwrite Integer Net_Royal_Ranking_SegmentsNb for _Score;
	declare netwrite Integer Net_Royal_Ranking_SegmentsPoints for _Score;
	declare Integer Net_Royal_Ranking_LastSegmentTime for _Score;
	Net_Royal_Ranking_SegmentsNb = 0;
	Net_Royal_Ranking_SegmentsPoints = 0;
	Net_Royal_Ranking_LastSegmentTime = 0;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the number of segments completed by a player
Integer GetPlayerSegmentsNb(CSmScore _Score) {
	declare netwrite Integer Net_Royal_Ranking_SegmentsNb for _Score;
	return Net_Royal_Ranking_SegmentsNb;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the number of segments completed first by a player
Integer GetPlayerSegmentsPoints(CSmScore _Score) {
	declare netwrite Integer Net_Royal_Ranking_SegmentsPoints for _Score;
	return Net_Royal_Ranking_SegmentsPoints;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the last time a player completed a segment
Integer GetPlayerLastSegmentTime(CSmScore _Score) {
	declare Integer Net_Royal_Ranking_LastSegmentTime for _Score;
	return Net_Royal_Ranking_LastSegmentTime;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the segment records points of the player
Void SetPlayerRecordsPoints(CSmScore _Score, Integer _RecordsPoints) {
	declare netwrite Integer Net_Royal_Ranking_RecordsPoints for _Score;
	Net_Royal_Ranking_RecordsPoints = _RecordsPoints;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Reset the segment records points of the player
Void ResetPlayerRecordsPoints(CSmScore _Score) {
	SetPlayerRecordsPoints(_Score, 0);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the segment records points of the player
Integer GetPlayerRecordsPoints(CSmScore _Score) {
	declare netwrite Integer Net_Royal_Ranking_RecordsPoints for _Score;
	return Net_Royal_Ranking_RecordsPoints;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the player's total points
Integer GetPlayerPoints(CSmScore _Score) {
	return GetPlayerSegmentsPoints(_Score) + GetPlayerRecordsPoints(_Score);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// The player earned a new star
Void SetPlayerStars(CSmScore _Score, Integer _StarsNb, Integer _LastStarTime) {
	declare Integer Net_Royal_Ranking_StarsNb for _Score = 0;
	declare Integer Net_Royal_Ranking_LastStarTime for _Score = -1;
	Net_Royal_Ranking_StarsNb = _StarsNb;
	Net_Royal_Ranking_LastStarTime = _LastStarTime;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Reset the stars earned by the player
Void ResetPlayerStars(CSmScore _Score) {
	SetPlayerStars(_Score, 0, -1);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the number of stars owned by a player
Integer GetPlayerStarsNb(CSmScore _Score) {
	declare Integer Net_Royal_Ranking_StarsNb for _Score = 0;
	return Net_Royal_Ranking_StarsNb;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the last time a player earned a star
Integer GetPlayerLastStarTime(CSmScore _Score) {
	declare Integer Net_Royal_Ranking_LastStarTime for _Score = -1;
	return Net_Royal_Ranking_LastStarTime;
}