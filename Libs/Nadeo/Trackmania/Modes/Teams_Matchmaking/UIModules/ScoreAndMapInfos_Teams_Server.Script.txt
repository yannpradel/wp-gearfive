/**
 *	UI module: ScoreAndMapInfos_Teams server side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/Teams_Matchmaking/UIModules/ScoreAndMapInfos_Teams_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common
#Include "Libs/Nadeo/Trackmania/Modes/Teams_Matchmaking/UIModules/ScoreAndMapInfos_Teams_Common.Script.txt" as UIModules_ScoreAndMapInfos_Teams_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_ScoreAndMapInfos_Teams_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::K_ModuleConfig GetConfig() {
	return UIModules_ScoreAndMapInfos_Teams_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the current round number of the match
Void SetRoundNumber(Integer _RoundNumber) {
	declare netwrite Integer Net_Teams_Matchmaking_ScoreAndMapInfos_RoundNumber for Teams[0];
	Net_Teams_Matchmaking_ScoreAndMapInfos_RoundNumber = _RoundNumber;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the points limit of the match
Void SetPointsLimit(Integer _PointsLimit) {
	declare netwrite Integer Net_Teams_Matchmaking_ScoreAndMapInfos_PointsLimit for Teams[0];
	Net_Teams_Matchmaking_ScoreAndMapInfos_PointsLimit = _PointsLimit;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the end round anim duration of the UI
Void SetEndRoundAnimDuration(Integer _DisplayDuration) {
	declare netwrite Integer Net_Teams_Matchmaking_ScoreAndMapInfos_EndRound_AnimDuration for Teams[0];
	Net_Teams_Matchmaking_ScoreAndMapInfos_EndRound_AnimDuration = _DisplayDuration;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the round winning team of the match
Void SetRoundWinningClan(Integer _RoundWinningClan) {
	declare netwrite Integer Net_Teams_Matchmaking_ScoreAndMapInfos_RoundWinningClan for Teams[0] = -1;
	Net_Teams_Matchmaking_ScoreAndMapInfos_RoundWinningClan = _RoundWinningClan;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// If the player needs an update (leave and rejoin the match for example)
Void SetUpdateUI(CPlayer _Player, Integer _UpdateUI) {
	if (_Player == Null) return;
	declare PlayerUI = UIManager.GetUI(_Player);
	if (PlayerUI == Null) return;
	declare netwrite Integer Net_Teams_Matchmaking_ScoreAndMapInfos_UpdateUI for PlayerUI = -1;
	Net_Teams_Matchmaking_ScoreAndMapInfos_UpdateUI = _UpdateUI;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;

	declare netwrite Boolean Net_Teams_Matchmaking_ScoreAndMapInfos_Teams_IsVisible for _Player;
	Net_Teams_Matchmaking_ScoreAndMapInfos_Teams_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
	SetUpdateUI(_Player, Now);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
	SetRoundNumber(-1);
	SetPointsLimit(-1);
	SetEndRoundAnimDuration(-1);
	SetRoundWinningClan(-1);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}