/**
 *  UI module: LiveRankingTeams_Matchmaking server side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/Teams_Matchmaking/UIModules/LiveRanking_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/Trackmania/Modes/Teams_Matchmaking/UIModules/LiveRanking_Common.Script.txt" as UIModules_LiveRanking_Common
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_Teams_Matchmaking_LiveRanking"

#Const C_RankingMode_BestRace 0
#Const C_RankingMode_CurrentRace 1

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_LiveRanking_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::K_ModuleConfig GetConfig() {
	return UIModules_LiveRanking_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Trigger an update of the UI
Void TriggerUIUpdate() {
	declare netwrite Integer Net_Teams_Matchmaking_LiveRanking_TriggerUIUpdate for Teams[0] = 0;
	Net_Teams_Matchmaking_LiveRanking_TriggerUIUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update Mvp display
Void UpdateMvp(Text _MvpAccountId) {
	declare netwrite Text Net_Teams_Matchmaking_LiveRanking_MvpAccountId for Teams[0] = "";
	Net_Teams_Matchmaking_LiveRanking_MvpAccountId = _MvpAccountId;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update Mvp display
Void WarmupIsActive(Boolean _WarmupIsActive) {
	declare netwrite Boolean Net_Teams_Matchmaking_LiveRanking_WarmUpIsActive for Teams[0] = False;
	Net_Teams_Matchmaking_LiveRanking_WarmUpIsActive = _WarmupIsActive;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Tell the UI that a new race started
Void StartNewRace() {
	declare netwrite Integer Net_Teams_Matchmaking_LiveRanking_StartNewRace for Teams[0] = 0;
	Net_Teams_Matchmaking_LiveRanking_StartNewRace += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the list of players that finished race
 *
 *  @param  _PlayerFinishedRace               List of players that finished race
 */
Void SetPlayerFinishedRace(Text[] _PlayerFinishedRace) {
	declare netwrite Text[] Net_Teams_Matchmaking_LiveRanking_PlayerFinishedRace for Teams[0];
	Net_Teams_Matchmaking_LiveRanking_PlayerFinishedRace = _PlayerFinishedRace;
	declare netwrite Integer Net_Teams_Matchmaking_LiveRanking_PlayerFinishedRaceUpdate for Teams[0];
	Net_Teams_Matchmaking_LiveRanking_PlayerFinishedRaceUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the ranking mode
Void SetRankingMode(Integer _RankingMode) {
	declare netwrite Integer Net_Teams_Matchmaking_LiveRanking_RankingMode for Teams[0];
	Net_Teams_Matchmaking_LiveRanking_RankingMode = _RankingMode;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the Points Repartition of the match
Void SetPointsRepartition(Integer[] _PointsRepartition) {
	declare netwrite Integer[] Net_Teams_Matchmaking_LiveRanking_PointsRepartition for Teams[0];
	Net_Teams_Matchmaking_LiveRanking_PointsRepartition = _PointsRepartition;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;

	declare netwrite Boolean Net_Teams_Matchmaking_LiveRanking_IsVisible for _Player;
	Net_Teams_Matchmaking_LiveRanking_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	SetPlayerFinishedRace([]);
	SetRankingMode(C_RankingMode_CurrentRace);
	UpdateMvp("");
	WarmupIsActive(False);
	SetPointsRepartition([]);
	Unload();
}