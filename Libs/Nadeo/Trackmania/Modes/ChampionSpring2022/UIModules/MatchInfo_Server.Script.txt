/**
 *	UI module: MatchInfo server side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/ChampionSpring2022/UIModules/MatchInfo_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common
#Include "Libs/Nadeo/Trackmania/Modes/ChampionSpring2022/UIModules/MatchInfo_Common.Script.txt" as UIModules_MatchInfo_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constant
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const UIModules_MatchInfo_Common::C_MatchLevel_Seeding as C_MatchLevel_Seeding
#Const UIModules_MatchInfo_Common::C_MatchLevel_Bronze as C_MatchLevel_Bronze
#Const UIModules_MatchInfo_Common::C_MatchLevel_Silver as C_MatchLevel_Silver
#Const UIModules_MatchInfo_Common::C_MatchLevel_Gold as C_MatchLevel_Gold
#Const UIModules_MatchInfo_Common::C_MatchLevel_Champion as C_MatchLevel_Champion

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_MatchInfo_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::K_ModuleConfig GetConfig() {
	return UIModules_MatchInfo_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the best time
Void SetBestTime(Text _WebServicesUserId, Integer _Time, Boolean _IsWorldRecord, Boolean _IsInit, Text _OverrideName) {
	declare netwrite Integer Net_ChampionSpring2022_MatchInfo_BestTimeUpdate for Teams[0];
	declare netwrite Text Net_ChampionSpring2022_MatchInfo_BestTimePlayer for Teams[0];
	declare netwrite Integer Net_ChampionSpring2022_MatchInfo_BestTime for Teams[0];
	declare netwrite Boolean Net_ChampionSpring2022_MatchInfo_IsWorldRecord for Teams[0];
	declare netwrite Boolean Net_ChampionSpring2022_MatchInfo_IsInit for Teams[0];
	declare netwrite Text Net_ChampionSpring2022_MatchInfo_OverrideName for Teams[0];
	Net_ChampionSpring2022_MatchInfo_BestTimeUpdate += 1;
	Net_ChampionSpring2022_MatchInfo_BestTimePlayer = _WebServicesUserId;
	Net_ChampionSpring2022_MatchInfo_BestTime = _Time;
	Net_ChampionSpring2022_MatchInfo_IsWorldRecord = _IsWorldRecord;
	Net_ChampionSpring2022_MatchInfo_IsInit = _IsInit;
	Net_ChampionSpring2022_MatchInfo_OverrideName = _OverrideName;
}
Void SetBestTime(Text _WebServicesUserId, Integer _Time, Boolean _IsWorldRecord, Boolean _IsInit) {
	SetBestTime(_WebServicesUserId, _Time, False, False, "");
}
Void SetBestTime(Text _WebServicesUserId, Integer _Time) {
	SetBestTime(_WebServicesUserId, _Time, False, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the match level
Void SetMatchLevel(Integer _MatchLevel) {
	declare netwrite Integer Net_ChampionSpring2022_MatchInfo_MatchLevel for Teams[0];
	Net_ChampionSpring2022_MatchInfo_MatchLevel = _MatchLevel;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the track progress
 *
 *	@param	_TrackNb									The number of the current track
 *	@param	_TracksTotal							The total number of tracks
 */
Void SetTrackProgress(Integer _TrackNb, Integer _TracksTotal) {
	declare netwrite Int2 Net_ChampionSpring2022_MatchInfo_TrackProgress for Teams[0];
	Net_ChampionSpring2022_MatchInfo_TrackProgress = <_TrackNb, _TracksTotal>;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;

	declare netwrite Boolean Net_ChampionSpring2022_MatchInfo_IsVisible for UI;
	Net_ChampionSpring2022_MatchInfo_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetBestTime("", 0, False, True, "");
	SetMatchLevel(C_MatchLevel_Seeding);
	SetTrackProgress(0, 0);

	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}