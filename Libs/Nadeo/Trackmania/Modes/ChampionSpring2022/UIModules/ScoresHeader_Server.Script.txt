/**
 *	UI module: ScoresHeader server side
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/ChampionSpring2022/UIModules/ScoresHeader_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common
#Include "Libs/Nadeo/Trackmania/Modes/ChampionSpring2022/UIModules/ScoresHeader_Common.Script.txt" as UIModules_ScoresHeader_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const UIModules_ScoresHeader_Common::C_MatchType_Regular as C_MatchType_Regular
#Const UIModules_ScoresHeader_Common::C_MatchType_HeadToHead as C_MatchType_HeadToHead
#Const UIModules_ScoresHeader_Common::C_MatchType_GrandFinal as C_MatchType_GrandFinal

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_ScoresHeader_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the configuration of the UI module
UIModules_Common::K_ModuleConfig GetConfig() {
	return UIModules_ScoresHeader_Common::C_UIModuleConfig;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the players' cup points
Void SetCupPoints(Integer[Text] _CupPoints) {
	declare netwrite Integer[Text] Net_ChampionSpring2022_ScoresHeader_CupPoints for Teams[0];
	declare netwrite Integer Net_ChampionSpring2022_ScoresHeader_PointsUpdate for Teams[0];
	Net_ChampionSpring2022_ScoresHeader_CupPoints = _CupPoints;
	Net_ChampionSpring2022_ScoresHeader_PointsUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the players' match points
Void SetMatchPoints(Integer[Text] _MatchPoints) {
	declare netwrite Integer[Text] Net_ChampionSpring2022_ScoresHeader_MatchPoints for Teams[0];
	declare netwrite Integer Net_ChampionSpring2022_ScoresHeader_PointsUpdate for Teams[0];
	Net_ChampionSpring2022_ScoresHeader_MatchPoints = _MatchPoints;
	Net_ChampionSpring2022_ScoresHeader_PointsUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set if the match is finished or not
Void SetMatchComplete(Boolean _MatchComplete) {
	declare netwrite Boolean Net_ChampionSpring2022_ScoresHeader_MatchComplete for Teams[0];
	Net_ChampionSpring2022_ScoresHeader_MatchComplete = _MatchComplete;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the match type
Void SetMatchType(Integer _MatchType) {
	declare netwrite Integer Net_ChampionSpring2022_ScoresHeader_MatchType for Teams[0];
	Net_ChampionSpring2022_ScoresHeader_MatchType = _MatchType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Enable or disable the scores header
Void Enable(Boolean _Enabled) {
	declare netwrite Boolean Net_ChampionSpring2022_ScoresHeader_Enabled for Teams[0];
	Net_ChampionSpring2022_ScoresHeader_Enabled = _Enabled;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;
	declare CUIConfig UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;

	declare netwrite Boolean Net_ChampionSpring2022_ScoresHeader_IsVisible for UI;
	Net_ChampionSpring2022_ScoresHeader_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetCupPoints([]);
	SetMatchPoints([]);
	SetMatchComplete(False);
	SetMatchType(C_MatchType_Regular);
	Enable(True);

	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}