/**
 *	UI module: FinishFeed client side
 */
#Const Version		"2.2.3"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/RoyalStars/UIModules/FinishFeed_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as UIModules_Common
#Include "Libs/Nadeo/Trackmania/Modes/Royal/Ranking_Client.Script.txt" as Ranking
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/ZIndex.Script.txt" as ZIndex
#Include "Libs/Nadeo/Trackmania/Modes/RoyalStars/UIModules/FinishFeed_Common.Script.txt" as UIModules_FinishFeed_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constantes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Column_TeamColor 0
#Const C_Column_TeamLogo 1
#Const C_Column_PlayerName 2
#Const C_Column_Flag 3

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_FinishFeed_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_FinishFeed_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	declare Vec2 Size_Notification = <62.3, 5.>;
	declare Vec2 Size_Notifications = <Size_Notification.X, (Size_Notification.Y * UIModules_FinishFeed_Common::C_NotificationMaxAmount)>;

	declare Grid::K_GridConfig GridConfig_Notification = Grid::Create(Size_Notification.X, 0.5, 1., Grid::C_Direction_Right);
	GridConfig_Notification = Grid::AddColumn(GridConfig_Notification, C_Column_TeamColor, 10., Grid::C_Align_Center);
	GridConfig_Notification = Grid::AddColumn(GridConfig_Notification, C_Column_TeamLogo, 10., Grid::C_Align_Center);
	GridConfig_Notification = Grid::AddColumn(GridConfig_Notification, C_Column_PlayerName, 50., Grid::C_Align_Left);
	GridConfig_Notification = Grid::AddColumn(GridConfig_Notification, C_Column_Flag, 10., Grid::C_Align_Center);
	declare Grid::K_Grid Grid_Notification = Grid::Compile(GridConfig_Notification);

	declare Text ML_Notifications = "";
	for (I, 0, UIModules_FinishFeed_Common::C_NotificationMaxAmount) {
		ML_Notifications ^= """<frameinstance modelid="framemodel-notification" pos="{{{Size_Notification.X}}} {{{Size_Notification.Y * -I}}}" hidden="1" />""";
	}

	declare UIModules_Common::K_ModuleConfig UIModuleConfig = UIModules_FinishFeed_Common::C_UIModuleConfig;
	declare Vec2 Pos_Sony = <ML::Clamp(UIModuleConfig.Properties.Position.X, -144., 144.), UIModuleConfig.Properties.Position.Y>;

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-bold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t$i" />
	<style class="text-semibold" textcolor="ffffff" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$t$i" />
</stylesheet>
<framemodel id="framemodel-notification">
	<quad z-index="0" {{{MLHelpers::Size(Size_Notification)}}} valign="center" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" />
	<frame z-index="1">
		<quad id="quad-team-color" {{{Grid::PosBg(Grid_Notification, C_Column_TeamColor, 0.)}}} {{{Grid::SizeBg(Grid_Notification, C_Column_TeamColor, Size_Notification.Y)}}} halign="center" valign="center" opacity="0.6" />
		<label id="label-player-rank" {{{Grid::Pos(Grid_Notification, C_Column_TeamColor, 0.)}}} z-index="1" {{{Grid::Size(Grid_Notification, C_Column_TeamColor, Size_Notification.Y)}}} halign="center" valign="center2" textsize="1" class="text-bold" />
		<quad id="quad-team-logo" {{{Grid::Pos(Grid_Notification, C_Column_TeamLogo, 0.)}}} {{{Grid::Size(Grid_Notification, C_Column_TeamLogo, Size_Notification.Y)}}} halign="center" valign="center" keepratio="fit" />
		<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" {{{Grid::Pos(Grid_Notification, C_Column_PlayerName, 0.)}}} data-{{{Grid::Size(Grid_Notification, C_Column_PlayerName, Size_Notification.Y)}}} data-valign="center2" data-textsize="1" data-textcolor="ffffff" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-textprefix="$t$i" />
		<quad id="quad-flag" {{{Grid::Pos(Grid_Notification, C_Column_Flag, 0.)}}} {{{Grid::Size(Grid_Notification, C_Column_Flag, Size_Notification.Y)}}} halign="center" valign="center" keepratio="fit" image="{{{Icons::C_Icon_128x128_Flag}}}" />
	</frame>
</framemodel>
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_FinishFeed}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_FinishFeed_Common::C_UIModuleConfig)}}}>
		<frame id="frame-live-ranking-height">
			<frame {{{MLHelpers::Size(Size_Notifications)}}}>
				<frame id="frame-notifications" pos="{{{Size_Notification.X}}} {{{Size_Notification.Y * -0.5}}}">
					{{{ML_Notifications}}}
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Modes/Clans_Client.Script.txt" as Clans
#Include "Libs/Nadeo/TMGame/Utils/Difficulty.Script.txt" as Difficulty
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModulesData.Script.txt" as UIModulesData
#Include "Libs/Nadeo/Trackmania/Modes/RoyalStars/UIModules/LiveRanking_Common.Script.txt" as UIModules_LiveRanking_Common

{{{dumptype(UIModules_FinishFeed_Common::K_Notification)}}}

#Struct K_NotificationDisplay {
	K_Notification Notification;
	Integer DisplayEndTime;
	Integer NotificationId;
}
#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_LiveRankingHeight;
	CMlFrame Frame_Notifications;
	CMlFrame[] Frames_Notification;
}
#Struct K_State {
	K_Controls Controls;
	K_NotificationDisplay[] DisplayedNotifications;
	Integer NotificationsUpdate;
	Integer PrevNotificationsCount;
	Boolean DisplayModule;
	Integer DisplayAnimEndTime;
	Integer RankingUpdate;
	Real LiveRankingHeight;
}

#Const C_UpdateInterval 250 //< Should be equal or higher than C_NotificationSlideDuration to not skip an ongoing update animation
#Const C_NotificationDisplayDuration 10000
#Const C_NotificationSlideDuration 250
#Const C_DisplayAnimDuration 125
#Const C_Size_Notification {{{dump(Size_Notification)}}}
#Const C_NotificationMaxAmount {{{dump(UIModules_FinishFeed_Common::C_NotificationMaxAmount)}}}
#Const C_MarginWithLiveRanking 1.5
""",
"""
Void DisplayNotification(CMlFrame _Frame_Notification, K_NotificationDisplay _NotificationDisplay, Integer _NotificationKey) {
	declare CMlQuad Quad_TeamColor <=> (_Frame_Notification.GetFirstChild("quad-team-color") as CMlQuad);
	declare CMlLabel Label_PlayerRank <=> (_Frame_Notification.GetFirstChild("label-player-rank") as CMlLabel);
	declare CMlQuad Quad_TeamLogo <=> (_Frame_Notification.GetFirstChild("quad-team-logo") as CMlQuad);
	declare CMlFrame PlayerName_Name <=> (_Frame_Notification.GetFirstChild("playername-name") as CMlFrame);
	declare CMlQuad Quad_Flag <=> (_Frame_Notification.GetFirstChild("quad-flag") as CMlQuad);

	declare Integer FinishFeed_NotificationKey for _Frame_Notification;
	FinishFeed_NotificationKey = _NotificationKey;

	declare Integer PlayerClan = 0;
	declare CUser PlayerUser = Null;
	foreach (Player in Players) {
		if (Player.User != Null && Player.User.WebServicesUserId == _NotificationDisplay.Notification.AccountId) {
			PlayerClan = Player.CurrentClan;
			PlayerUser <=> Player.User;
			break;
		}
	}
	Quad_TeamColor.BgColor = Clans::GetClanColor(PlayerClan);
	Label_PlayerRank.Value = ""^{{{Ranking::P}}}GetTeamRank(PlayerClan);
	Quad_TeamLogo.ImageUrl = Clans::GetClanLogo(PlayerClan);
	Quad_TeamLogo.Visible = (Quad_TeamLogo.ImageUrl != "");
	if (PlayerUser == Null) {
		{{{PlayerName::P}}}SetAccountId(This, PlayerName_Name, _NotificationDisplay.Notification.AccountId, False);
	} else {
		{{{PlayerName::P}}}SetUser(This, PlayerName_Name, PlayerUser, True);
	}
	Quad_Flag.Colorize = Difficulty::GetRoyalSegmentColorRGB(_NotificationDisplay.Notification.Segment);
}

K_State DisplayNotifications(K_State _State) {
	declare K_State State = _State;

	if (State.PrevNotificationsCount < State.DisplayedNotifications.count && State.DisplayedNotifications.count <= C_NotificationMaxAmount) {
		// Make new notifications appear from the right
		foreach (Key => Frame_Notification in State.Controls.Frames_Notification) {
			AnimMgr.Flush(Frame_Notification);
			if (State.DisplayedNotifications.existskey(Key)) {
				DisplayNotification(Frame_Notification, State.DisplayedNotifications[Key], Key);
				Frame_Notification.Visible = True;
				if (Key < State.PrevNotificationsCount) {
					Frame_Notification.RelativePosition_V3 = <0., Key * -C_Size_Notification.Y>;
				} else {
					Frame_Notification.RelativePosition_V3 = <-C_Size_Notification.X, Key * -C_Size_Notification.Y>;
					AnimMgr.Add(Frame_Notification, "<a pos=\"0 "^Key * -C_Size_Notification.Y^"\" />", C_NotificationSlideDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			} else {
				Frame_Notification.Visible = False;
			}
		}
	} else {
		if (State.PrevNotificationsCount > C_NotificationMaxAmount && State.PrevNotificationsCount > State.DisplayedNotifications.count) {
			// No animation required when we remove one notification from the max
			// The removed notification is already hidden by the previous animation
		} else {
			// Move notifications to the top
			foreach (Key => Frame_Notification in State.Controls.Frames_Notification) {
				declare Integer NotificationKey = Key;
				if (State.PrevNotificationsCount > State.DisplayedNotifications.count) {
					NotificationKey = Key - 1;
				}
				AnimMgr.Flush(Frame_Notification);
				if (NotificationKey < 0) {
					Frame_Notification.Visible = True;
					Frame_Notification.RelativePosition_V3 = <0., Key * -C_Size_Notification.Y>;
					AnimMgr.Add(Frame_Notification, "<a pos=\"0 "^(Key - 1) * -C_Size_Notification.Y^"\" hidden=\"1\" />", C_NotificationSlideDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				} else if (State.DisplayedNotifications.existskey(NotificationKey)) {
					DisplayNotification(Frame_Notification, State.DisplayedNotifications[NotificationKey], NotificationKey);
					Frame_Notification.Visible = True;
					Frame_Notification.RelativePosition_V3 = <0., Key * -C_Size_Notification.Y>;
					AnimMgr.Add(Frame_Notification, "<a pos=\"0 "^(Key - 1) * -C_Size_Notification.Y^"\" />", C_NotificationSlideDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				} else {
					Frame_Notification.Visible = False;
				}
			}

			// Place the first frame that is now hidden to the bottom of the list
			declare CMlFrame Frame_Notification = State.Controls.Frames_Notification[0];
			State.Controls.Frames_Notification.removekey(0);
			State.Controls.Frames_Notification.add(Frame_Notification);
		}
	}

	State.PrevNotificationsCount = State.DisplayedNotifications.count;
	State.RankingUpdate = {{{Ranking::P}}}GetTeamsRankingUpdate();

	return State;
}

K_State PushNotificationToDisplay(K_State _State, Integer _NodificationId, K_Notification _Notification) {
	declare K_State State = _State;

	State.DisplayedNotifications.add(K_NotificationDisplay {
		Notification = _Notification,
		DisplayEndTime = Now + C_NotificationDisplayDuration,
		NotificationId = _NodificationId
	});
	while (State.DisplayedNotifications.count > State.Controls.Frames_Notification.count) {
		State.DisplayedNotifications.removekey(0);
	}

	return State;
}

K_State ReadNotifications(K_State _State, Integer _NotificationsUpdate, K_Notification[Integer] _NotificationsSent) {
	declare K_State State = _State;
	State.NotificationsUpdate = _NotificationsUpdate;

	// Remove read confirmations for notifications that have been deleted
	declare netwrite Integer[] Net_RoyalStars_FinishFeed_NotificationsRead for UI;
	declare Integer[] NotificationIdsToRemove;
	foreach (NotificationId in Net_RoyalStars_FinishFeed_NotificationsRead) {
		if (!_NotificationsSent.existskey(NotificationId)) {
			NotificationIdsToRemove.add(NotificationId);
		}
	}
	foreach (NotificationId in NotificationIdsToRemove) {
		Net_RoyalStars_FinishFeed_NotificationsRead.remove(NotificationId);
	}

	// Post read confirmations for the other notifications
	foreach (NotificationId => Notification in _NotificationsSent) {
		if (!Net_RoyalStars_FinishFeed_NotificationsRead.exists(NotificationId)) {
			Net_RoyalStars_FinishFeed_NotificationsRead.add(NotificationId);
			State = PushNotificationToDisplay(State, NotificationId, Notification);
		}
	}

	State = DisplayNotifications(State);

	return State;
}

K_State SetVisibility(K_State _State, Boolean _DisplayModule, Real _LiveRankingHeight) {
	declare K_State State = _State;

	if (State.DisplayModule != _DisplayModule) {
		State.DisplayModule = _DisplayModule;
		State.DisplayAnimEndTime = Now + C_DisplayAnimDuration;

		AnimMgr.Flush(State.Controls.Frame_Notifications);
		if (State.DisplayModule) {
			State.Controls.Frame_Global.Visible = True;
			State.Controls.Frame_Notifications.Visible = True;
			AnimMgr.Add(State.Controls.Frame_Notifications, "<a pos=\"0 "^State.Controls.Frame_Notifications.RelativePosition_V3.Y^"\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Frame_Notifications, "<a pos=\""^-C_Size_Notification.X^" "^State.Controls.Frame_Notifications.RelativePosition_V3.Y^"\" hidden=\"1\" />", C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	if (State.LiveRankingHeight != _LiveRankingHeight) {
		State.LiveRankingHeight = _LiveRankingHeight;
		AnimMgr.Flush(State.Controls.Frame_LiveRankingHeight);
		AnimMgr.Add(State.Controls.Frame_LiveRankingHeight, "<a pos=\""^State.Controls.Frame_LiveRankingHeight.RelativePosition_V3.X^" "^(-State.LiveRankingHeight - C_MarginWithLiveRanking)^"\" />", Now + UIModulesData::C_SpecModeActivationDelay, C_DisplayAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

***MainInit***
***
declare netread Boolean Net_RoyalStars_FinishFeed_IsVisible for UI;
declare netread K_Notification[Integer] Net_RoyalStars_FinishFeed_NotificationsSent for UI;
declare netread Integer Net_RoyalStars_FinishFeed_NotificationsUpdate for UI;

declare K_State State;
declare Integer NextUpdateTime;
***

***MainStart***
***
State = K_State {
	Controls = K_Controls {},
	DisplayedNotifications = [],
	NotificationsUpdate = -1,
	PrevNotificationsCount = 0,
	DisplayModule = False,
	DisplayAnimEndTime = -1,
	RankingUpdate = -1,
	LiveRankingHeight = 0.
};

State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_LiveRankingHeight <=> (State.Controls.Frame_Global.GetFirstChild("frame-live-ranking-height") as CMlFrame);
State.Controls.Frame_Notifications <=> (State.Controls.Frame_LiveRankingHeight.GetFirstChild("frame-notifications") as CMlFrame);
foreach (Control in State.Controls.Frame_Notifications.Controls) {
	State.Controls.Frames_Notification.add((Control as CMlFrame));
}

NextUpdateTime = Now;
State = SetVisibility(State, State.Controls.Frame_Global.Visible, UIModulesData::GetSize(This, UIModules_LiveRanking_Common::C_Id).Y);
State = ReadNotifications(State, Net_RoyalStars_FinishFeed_NotificationsUpdate, Net_RoyalStars_FinishFeed_NotificationsSent);

// On Sony consoles every player names must be in the safe area
// see: /trackmania-next/tmnext/-/issues/4660
if (Platform::IsSony(System)) {
	State.Controls.Frame_Global.GetFirstChild("{{{UIModules::GetCustomizableUIModuleFrameId(UIModules_FinishFeed_Common::C_UIModuleConfig)}}}").RelativePosition_V3 = {{{dump(Pos_Sony)}}};
}
***

***MainLoop***
***
if (PageIsVisible) {
	if (
		State.DisplayModule != Net_RoyalStars_FinishFeed_IsVisible ||
		State.LiveRankingHeight != UIModulesData::GetSize(This, UIModules_LiveRanking_Common::C_Id).Y
	) {
		State = SetVisibility(State, Net_RoyalStars_FinishFeed_IsVisible, UIModulesData::GetSize(This, UIModules_LiveRanking_Common::C_Id).Y);
	}

	if (State.DisplayModule) {
		if (Now >= NextUpdateTime) {
			NextUpdateTime = Now + C_UpdateInterval;

			if (State.NotificationsUpdate != Net_RoyalStars_FinishFeed_NotificationsUpdate) {
				State = ReadNotifications(State, Net_RoyalStars_FinishFeed_NotificationsUpdate, Net_RoyalStars_FinishFeed_NotificationsSent);
			}

			declare Boolean NotificationRemoved = False;
			while (State.DisplayedNotifications.count > 0 && State.DisplayedNotifications[0].DisplayEndTime <= Now) {
				State.DisplayedNotifications.removekey(0);
				NotificationRemoved = True;
			}
			if (NotificationRemoved) {
				State = DisplayNotifications(State);
			}

			if (State.RankingUpdate != {{{Ranking::P}}}GetTeamsRankingUpdate()) {
				State.RankingUpdate = {{{Ranking::P}}}GetTeamsRankingUpdate();
				foreach (Frame_Notification in State.Controls.Frames_Notification) {
					declare Integer FinishFeed_NotificationKey for Frame_Notification;
					if (State.DisplayedNotifications.existskey(FinishFeed_NotificationKey)) {
						DisplayNotification(Frame_Notification, State.DisplayedNotifications[FinishFeed_NotificationKey], FinishFeed_NotificationKey);
					}
				}
			}
		}
	}

	if (State.DisplayAnimEndTime >= 0 && State.DisplayAnimEndTime <= Now) {
		State.DisplayAnimEndTime = -1;
		State.Controls.Frame_Global.Visible = State.DisplayModule;
	}
}
***
""",
[
	UIModules::Component(),
	Ranking::Component(),
	PlayerName::ComponentV2()
],
[]
	);
}