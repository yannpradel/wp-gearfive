/**
 *	UI module: SegmentComplete client side
 */
#Const Version		"1.6.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/Modes/RoyalStars/UIModules/SegmentComplete_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Client.Script.txt" as UIModules
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModules/ZIndex.Script.txt" as ZIndex
#Include "Libs/Nadeo/Trackmania/Modes/RoyalStars/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/Modes/RoyalStars/UIModules/SegmentComplete_Common.Script.txt" as UIModules_SegmentComplete_Common

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_DisplayBonusTime False

//L16N [Royal SegmentComplete] Message displayed when the player completes a section of the race. %1 and %2 will be replaced by the color of the section. eg: "You have finished the red section"
#Const C_Text_YouComplete _("You have finished the $<%1%2$> section")
//L16N [Royal SegmentComplete] Message displayed when the player completes a loop on a section of the race. %1 and %2 will be replaced by the color of the section. %3 will be replaced by the number of the loop. eg: "You have finished the black loop #2"
#Const C_Text_YouLoop _("You have finished the $<%1%2$> loop %3")
//L16N [Royal SegmentComplete] Message displayed when the spectated player completes a section of the race. %1 will be replaced by the name of the player. %2 and %3 will be replaced by the color of the section. eg: "Alex has finished the red section"
#Const C_Text_SpectateComplete _("$<%1$> has finished the $<%2%3$> section")
//L16N [Royal SegmentComplete] Message displayed when the spectated player completes a loop on a section of the race. %1 will be replaced by the name of the player. %2 and %3 will be replaced by the color of the section. %4 will be replaced by the number of the loop. eg: "Alex has finished the black loop #2"
#Const C_Text_SpectateLoop _("$<%1$> has finished the $<%2%3$> loop %4")
//L16N [Royal SegmentComplete] Text displayed when a player complete a segment and add a given amount of bonus time to their team. %1 will be replaced by the amount of bonus time. eg: "Bonus time +2"
#Const C_Text_BonusTime _("Bonus time %1")
//L16N [Royal SegmentComplete] Text that appears when a player completes a segment and scores one point for their team.
#Const C_Text_PointForTeam _("+1 point for your team")

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the id of the UI module
Text GetId() {
	return UIModules_SegmentComplete_Common::C_Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the type of layer of the UI module
CUILayer::EUILayerType GetLayerType() {
	return UIModules_SegmentComplete_Common::C_LayerType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the module manialink
Text GetML() {
	declare Vec2 Size_MessageBg = MLHelpers::KeepRatioFromY(1692., 168., 14.);

	return MV::Create(
GetId(), 3,
"""
<stylesheet>
	<style class="text-common" halign="center" valign="center2" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame global -->
<frame id="frame-global" z-index="{{{ZIndex::C_ZIndex_SegmentComplete}}}" hidden="1">
	<frame {{{UIModules::CustomizableUIModule(UIModules_SegmentComplete_Common::C_UIModuleConfig)}}}>
		<frame id="frame-message" size="{{{Size_MessageBg.X}}} 0" halign="center" valign="center" hidden="1">
			<quad id="quad-background" size="{{{Size_MessageBg.X}}} {{{Size_MessageBg.Y}}}" halign="center" valign="center" image="{{{Const::C_ImageUrl_Message_Bg}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6"/>
			<label id="label-message" pos="{{{MLHelpers::Skew(0., 0.45*Size_MessageBg.Y, 10.)}}}" size="{{{0.9*Size_MessageBg.X}}} {{{0.5*Size_MessageBg.Y}}}" class="text-common" valign="top" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textsize="6" z-index="1"/>
			<label id="label-bonus-time" pos="{{{MLHelpers::Skew(0., -0.45*Size_MessageBg.Y, 10.)}}}" size="{{{0.9*Size_MessageBg.X}}} {{{0.5*Size_MessageBg.Y}}}" class="text-common" valign="bottom" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textsize="3" z-index="1"/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMGame/Utils/Difficulty.Script.txt" as Difficulty
#Include "Libs/Nadeo/Trackmania/Modes/Royal/UIModulesData.Script.txt" as UIModulesData
#Include "Libs/Nadeo/Trackmania/Modes/RoyalStars/UIModules/SegmentComplete_Common.Script.txt" as UIModules_SegmentComplete_Common
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "ColorLib" as CL
#Include "TextLib" as TL

#Const C_AnimDuration_Show 500
#Const C_AnimDuration_Idle 3000
#Const C_AnimDuration_Hide 500

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_Message;
	CMlLabel Label_BonusTime;
	CMlLabel Label_Message;
}
#Struct K_State {
	K_Controls Controls;
	Boolean IsVisible;
	Boolean PageIsVisible;
	Boolean DisplayModule;
	Integer LastSegmentActivationsUpdate;
	UIModules_SegmentComplete_Common::K_LastSegmentActivation[Integer] LastSegmentActivations;
	Integer TeamLastSegmentActivationUpdate;
	Ident TargetId;
}

#Const C_DisplayBonusTime {{{dump(C_DisplayBonusTime)}}}
#Const C_Text_PointForTeam {{{dump(C_Text_PointForTeam)}}}

#Const C_State_Null K_State {
	Controls = K_Controls {},
	IsVisible = False,
	PageIsVisible = False,
	DisplayModule = False,
	LastSegmentActivationsUpdate = 0,
	LastSegmentActivations = [],
	TeamLastSegmentActivationUpdate = 0,
	TargetId = NullId
}
""",
"""
/// Update the visibility of the whole manialink UI
K_State SetVisibility(K_State _State, Boolean _PageIsVisible, Boolean _DisplayModule) {
	declare K_State State = _State;
	State.PageIsVisible = _PageIsVisible;
	State.DisplayModule = _DisplayModule;
	State.IsVisible = State.PageIsVisible && State.DisplayModule;
	State.Controls.Frame_Global.Visible = State.IsVisible;
	return State;
}

/// Set the player currently followed by the camera
K_State SetTarget(K_State _State, CSmPlayer _Target) {
	declare K_State State = _State;

	if (_Target == Null) {
		State.TargetId = NullId;
	} else {
		State.TargetId = _Target.Id;
		if (State.LastSegmentActivations.existskey(_Target.CurrentClan)) {
			State.TeamLastSegmentActivationUpdate = State.LastSegmentActivations[_Target.CurrentClan].Update;
		}
	}

	return State;
}

/// Set the data of the latest completed segment and show a message on the screen
K_State SetLastSegmentActivations(
	K_State _State,
	CSmPlayer _Target,
	Integer _LastSegmentActivationsUpdate,
	UIModules_SegmentComplete_Common::K_LastSegmentActivation[Integer] _LastSegmentActivations
) {
	declare K_State State = _State;

	State.LastSegmentActivationsUpdate = _LastSegmentActivationsUpdate;
	State.LastSegmentActivations = _LastSegmentActivations;

	if (_Target != Null && State.LastSegmentActivations.existskey(_Target.CurrentClan)) {
		declare UIModules_SegmentComplete_Common::K_LastSegmentActivation TeamLastSegmentActivation = State.LastSegmentActivations[_Target.CurrentClan];
		if (State.TeamLastSegmentActivationUpdate != TeamLastSegmentActivation.Update) {
			State.TeamLastSegmentActivationUpdate = TeamLastSegmentActivation.Update;

			if (GUIPlayer != Null && GUIPlayer.User != Null && GUIPlayer.User.WebServicesUserId == TeamLastSegmentActivation.AccountId) {
				declare Text Name = Difficulty::GetRoyalSegmentName(TeamLastSegmentActivation.Segment);
				declare Text Color = "$"^Difficulty::GetRoyalSegmentColorHex3(TeamLastSegmentActivation.Segment);

				// Update bonus time or points text
				if (C_DisplayBonusTime) {
					if (TeamLastSegmentActivation.BonusTime > 0) {
						State.Controls.Label_BonusTime.SetText(TL::Compose("{{{C_Text_BonusTime}}}", "+"^TeamLastSegmentActivation.BonusTime));
					} else if (TeamLastSegmentActivation.BonusTime < 0) {
						State.Controls.Label_BonusTime.SetText(TL::Compose("{{{C_Text_BonusTime}}}", ""^TeamLastSegmentActivation.BonusTime));
					} else {
						State.Controls.Label_BonusTime.SetText("");
					}
				} else {
					State.Controls.Label_BonusTime.SetText(C_Text_PointForTeam);
				}
				Tools::FitLabelValue(State.Controls.Label_BonusTime, 3., 2., 0.25);

				// Update message text
				if (TeamLastSegmentActivation.LoopNb > 0) {
					if (InputPlayer != Null && InputPlayer.User != Null && InputPlayer.User.WebServicesUserId == TeamLastSegmentActivation.AccountId) {
						State.Controls.Label_Message.SetText(TL::Compose("{{{C_Text_YouLoop}}}", Color, Name, "#"^TeamLastSegmentActivation.LoopNb));
					} else {
						State.Controls.Label_Message.SetText(TL::Compose("{{{C_Text_SpectateLoop}}}", UserStore::GetPlayerName(GUIPlayer.User, True), Color, Name, "#"^TeamLastSegmentActivation.LoopNb));
					}
				} else {
					if (InputPlayer != Null && InputPlayer.User != Null && InputPlayer.User.WebServicesUserId == TeamLastSegmentActivation.AccountId) {
						State.Controls.Label_Message.SetText(TL::Compose("{{{C_Text_YouComplete}}}", Color, Name));
					} else {
						State.Controls.Label_Message.SetText(TL::Compose("{{{C_Text_SpectateComplete}}}", UserStore::GetPlayerName(GUIPlayer.User, True), Color, Name));
					}
				}
				Tools::FitLabelValue(State.Controls.Label_Message, 6., 4., 0.25);

				// Update message position
				if (State.Controls.Label_BonusTime.Value == "") {
					State.Controls.Label_Message.VerticalAlign = CMlControl::AlignVertical::VCenter2;
					State.Controls.Label_Message.RelativePosition_V3 = MLHelpers::SkewX(<0., {{{-0.05*Size_MessageBg.Y}}}>, 10.);
				} else {
					State.Controls.Label_Message.VerticalAlign = CMlControl::AlignVertical::Top;
					State.Controls.Label_Message.RelativePosition_V3 = MLHelpers::SkewX(<0., {{{0.45*Size_MessageBg.Y}}}>, 10.);
				}

				// Animation
				AnimMgr.Flush(State.Controls.Frame_Message);
				AnimMgr.Add(State.Controls.Frame_Message, "<anim size=\"{{{Size_MessageBg.X}}} {{{Size_MessageBg.Y}}}\" scale=\"1.02\" hidden=\"0\"/>", C_AnimDuration_Show/2, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.AddChain(State.Controls.Frame_Message, "<anim size=\"{{{Size_MessageBg.X}}} {{{Size_MessageBg.Y}}}\" scale=\"1.\"/>", C_AnimDuration_Show/2, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.AddChain(State.Controls.Frame_Message, "<anim size=\"{{{Size_MessageBg.X}}} {{{Size_MessageBg.Y}}}\"/>", C_AnimDuration_Idle, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.AddChain(State.Controls.Frame_Message, "<anim size=\"{{{Size_MessageBg.X}}} {{{Size_MessageBg.Y}}}\" scale=\"1.02\" />", C_AnimDuration_Hide/2, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.AddChain(State.Controls.Frame_Message, "<anim size=\"{{{Size_MessageBg.X}}} 0\" scale=\"1.\" hidden=\"1\"/>", C_AnimDuration_Hide/2, CAnimManager::EAnimManagerEasing::QuadOut);

				// Warn other layers that the message is beeing displayed
				UIModulesData::SetSegmentCompleteEndAnimTimestamp(This, Now + C_AnimDuration_Show + C_AnimDuration_Idle + C_AnimDuration_Hide);
			}
		}
	}

	return State;
}

***MainInit***
***
declare netread Boolean Net_RoyalStars_SegmentComplete_DisplayModule for UI = UIModules_SegmentComplete_Common::C_Default_Visibility;
declare netread Integer Net_RoyalStars_SegmentComplete_LastSegmentActivationsUpdate for Teams[0] = UIModules_SegmentComplete_Common::C_Default_UpdateCounter;
declare netread UIModules_SegmentComplete_Common::K_LastSegmentActivation[Integer] Net_RoyalStars_SegmentComplete_LastSegmentActivations for Teams[0] = UIModules_SegmentComplete_Common::C_Default_LastSegmentActivations;

declare K_State State = C_State_Null;
***

***MainStart***
***
State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_Message <=> (State.Controls.Frame_Global.GetFirstChild("frame-message") as CMlFrame);
State.Controls.Label_BonusTime <=> (State.Controls.Frame_Global.GetFirstChild("label-bonus-time") as CMlLabel);
State.Controls.Label_Message <=> (State.Controls.Frame_Global.GetFirstChild("label-message") as CMlLabel);

State = SetVisibility(State, PageIsVisible, Net_RoyalStars_SegmentComplete_DisplayModule);
State = SetTarget(State, GUIPlayer);
State = SetLastSegmentActivations(
	State,
	GUIPlayer,
	Net_RoyalStars_SegmentComplete_LastSegmentActivationsUpdate,
	Net_RoyalStars_SegmentComplete_LastSegmentActivations
);
***

***MainLoop***
***
if (State.PageIsVisible != PageIsVisible) {
	State = SetVisibility(State, PageIsVisible, State.DisplayModule);
}
if (State.PageIsVisible) {
	if (State.DisplayModule != Net_RoyalStars_SegmentComplete_DisplayModule) {
		State = SetVisibility(State, PageIsVisible, Net_RoyalStars_SegmentComplete_DisplayModule);
	}
	if (State.IsVisible) {
		if (
			(GUIPlayer == Null && State.TargetId != NullId) ||
			(GUIPlayer != Null && State.TargetId != GUIPlayer.Id)
		) {
			State = SetTarget(State, GUIPlayer);
		}
		if (State.LastSegmentActivationsUpdate != Net_RoyalStars_SegmentComplete_LastSegmentActivationsUpdate) {
			State = SetLastSegmentActivations(
				State,
				GUIPlayer,
				Net_RoyalStars_SegmentComplete_LastSegmentActivationsUpdate,
				Net_RoyalStars_SegmentComplete_LastSegmentActivations
			);
		}
	}
}
***
""",
[
	UIModules::Component()
],
[]
	);
}