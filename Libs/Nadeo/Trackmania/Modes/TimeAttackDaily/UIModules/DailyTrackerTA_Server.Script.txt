/**
 *  UI module: DailyTrackerTA server side
 */
#Const Version    "1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/TimeAttackDaily/UIModules/DailyTrackerTA_Server.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_TimeAttackDaily_DailyTrackerTA"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void SetLeaderboard(Integer[Text] _Leaderboard) {
	declare netwrite Integer[Text] Net_TimeAttackDaily_DailyTrackerTA_Leaderboard for Teams[0];
	declare netwrite Integer Net_TimeAttackDaily_DailyTrackerTA_LeaderboardUpdate for Teams[0];
	Net_TimeAttackDaily_DailyTrackerTA_Leaderboard = _Leaderboard;
	Net_TimeAttackDaily_DailyTrackerTA_LeaderboardUpdate = Now;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Triggers new record display
 *
 *	@param	_UpdateGameTime					Use any different gametime to trigger update
 */
Void Private_TriggerNewRecordAnim(CPlayer _Player, Integer _GameTime) {
	if (_Player != Null) {
		declare netwrite Integer Net_TimeAttackDaily_DailyTrackerTA_NewRecordUpdate for _Player;
		Net_TimeAttackDaily_DailyTrackerTA_NewRecordUpdate = _GameTime;
	}
}
Void TriggerNewRecordAnim(CPlayer _Player) {
	Private_TriggerNewRecordAnim(_Player, Now);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Show or hide the UI
 *
 *	@param	_Player										The player to update
 *	@param	_Display									True to show
 *																		False to hide
 */
Void SetVisibility(CPlayer _Player, Boolean _Display) {
	if (_Player == Null) return;

	declare netwrite Boolean Net_TimeAttackDaily_DailyTrackerTA_IsVisible for _Player;
	Net_TimeAttackDaily_DailyTrackerTA_IsVisible = _Display;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;

	SetVisibility(_Player, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	SetLeaderboard([]);
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
		Private_TriggerNewRecordAnim(Player, 0);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}