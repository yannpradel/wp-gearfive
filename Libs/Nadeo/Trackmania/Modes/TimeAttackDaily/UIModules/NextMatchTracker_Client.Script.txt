/**
 *  UI module: NextMatchTracker client side
 */
#Const Version		"1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/TimeAttackDaily/UIModules/NextMatchTracker_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ButtonStyles.Script.txt" as ButtonStyles
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/Trackmania/Modes/TimeAttackDaily/Constants.Script.txt" as Constants
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/ScoresTable_Client.Script.txt" as ScoresTable
#Include "Libs/Nadeo/Trackmania/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_TimeAttackDaily_NextMatchTracker"
#Const C_Type CUILayer::EUILayerType::Normal
#Const C_NavGroup_Side "navgroup-timeattack-daily-side"
#Const C_NavGroup_Center "navgroup-timeattack-daily-center"
#Const C_NavGroup_ShowInGameMenu "navgroup-timeattack-daily-showingamemenu"

#Const C_InputPriority 1

//L16N [Cup of the Day time attack] The qualification match is starting soon
#Const C_Text_BeforeMatch _("The Cup of the Day will start soon.")
//L16N [Cup of the Day time attack] The player needs to finish the track to validate their registration for the cup
#Const C_Text_MatchStarted_NoResult _("Finish the track once to register for the cup. Registrations end in")
//L16N [Cup of the Day time attack] Message displayed while player registration is being processed
#Const C_Text_MatchStarted_Registering _("Registering for the Cup of the Day...")
//L16N [Cup of the Day time attack] Waiting for your Cup of the Day match to be ready
#Const C_Text_MatchOver_WaitJoinLink _("Waiting for your match.")
//L16N [Cup of the Day time attack] Waiting for the Cup of the Day server to be ready
#Const C_Text_MatchOver_WaitServerReady _("Starting server.")
//L16N [Cup of the Day time attack] Player's Cup of the Day match is ready
#Const C_Text_MatchOver_JoinLinkReady _("Your next match is ready.")
//L16N [Cup of the Day time attack] Player's Cup of the Day match is ready and they can join it by using a button in the pause menu.
#Const C_Text_MatchOver_JoinLinkReadySideFirstParty _("Your next match is ready. Join from the pause menu.")
//L16N [Cup of the Day time attack] The player did not register for the cup
#Const C_Text_MatchOver_RegistrationsOver _("Registration for today's cup has finished, come back tomorrow!")
//L16N [Cup of the Day time attack] Matches are not joinable anymore
#Const C_Text_MatchOver_MatchNotJoinableAnymore _("Today's matches have already started, come back tomorrow!")

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [Cup of the Day time attack] Join your match button
	declare Text Text_Join = _("Join");
	//L16N [Cup of the Day time attack] Click on this button to stay on the server
	declare Text Text_Stay = _("|Verb|Stay");
	//L16N [Cup of the Day time attack] Click on this button to leave the server
	declare Text Text_Quit = _("Quit");
	//L16N [Cup of the Day time attack] Register for the cup button
	declare Text Text_Register = _("Register");
	//L16N [Cup of the Day time attack] This is the rank obtained by the player during the competition qualifier. %1 is the rank (example: "27th" or "1st").
	declare Text Text_Result = _("Qualifier rank: %1");
	//L16N [Cup of the Day time attack] %1 is the number of trophies, %2 is part of the the trophy name (ex. You earned 3 Trophy 7)
	declare Text Text_ResultTrophy = _("You earned %1 Trophy %2");
	// Content of the COTD qualification rules pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_Rules = [
		PopUpMultiChoice::CreateDescriptionPart(Constants::C_Text_Rules_Content, <130., 30.>, 2.5, Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold), "$t$i", <1., 1., 1.>, True)
	];

	/* Variables from DailyTrackerTA_Client */
	declare Vec2 Size_RulesButton = <8., 8.>;
	declare Vec2 Size_Background = <54., 63.>;
	declare Vec2 Size_SideTitle = <Size_Background.X - Size_RulesButton.X - 4., Size_RulesButton.Y>;
	declare Vec2 Pos_SideTitle = <-Size_RulesButton.X*0.5, Size_Background.Y*0.47>;
	declare Vec2 Pos_Module = <-133., 0.>;

	/* Variables */
	declare Text Img_Background = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_Popup.dds";
	declare Text Img_BackgroundButtons = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_PopupWithButtons.dds";
	declare Text Img_ButtonLeft = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup_ButtonLeft.dds";
	declare Text Img_ButtonRight = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Knockout/TM_UI_HUD_02_KnockOut_SmallPopup_ButtonRight.dds";
	declare Text Img_TrophiesBg = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/hud_royal_scoretable_team_icon_bg.dds";

	declare Vec2 ImgSize_Background = <1088., 624.>;
	declare Vec2 ImgSize_BackgroundButtons = <1072., 560.>;
	declare Vec2 ImgSize_ButtonLeft = <520., 104.>;
	declare Vec2 ImgSize_ButtonRight = <496., 104.>;
	declare Vec2 ImgSize_TrophiesBg = <188., 108.>;

	declare Real SizeX_Bg = 180.;
	declare Vec2 Size_Bg = <SizeX_Bg, SizeX_Bg * (ImgSize_Background.Y / ImgSize_Background.X)>;
	declare Vec2 Size_BgButtons = <SizeX_Bg + 2., (SizeX_Bg + 2.) * (ImgSize_Background.Y / ImgSize_Background.X)>;
	declare Vec2 Pos_Buttons = MLHelpers::SkewX(<0.85, Size_BgButtons.Y * -0.485>, 10.);
	declare Real SizeY_Button = Size_BgButtons.Y * (ImgSize_ButtonLeft.Y / ImgSize_Background.Y) * 1.01;
	declare Vec2 Size_ButtonLeft = <SizeY_Button * (ImgSize_ButtonLeft.X / ImgSize_ButtonLeft.Y), SizeY_Button>;
	declare Vec2 Size_ButtonRight = <SizeY_Button * (ImgSize_ButtonRight.X / ImgSize_ButtonRight.Y), SizeY_Button>;
	declare Vec2 Pos_Content = MLHelpers::SkewX(<0., Size_Bg.Y * 0.485>, 10.);
	declare Real SizeX_Content = SizeX_Bg * 0.85;
	declare Vec2 Pos_Title = MLHelpers::SkewX(<0., -12.>, 10.);
	declare Real TextSize_Title = 8.;
	declare Vec2 Pos_Rank = MLHelpers::SkewX(<0., -28.>, 10.);
	declare Vec2 Pos_LabelTrophies = MLHelpers::SkewX(<0., -36.>, 10.);
	declare Real SizeX_TrophiesBg = 35.;
	declare Vec2 Size_TrophiesBg = <SizeX_TrophiesBg, SizeX_TrophiesBg * (ImgSize_TrophiesBg.Y / ImgSize_TrophiesBg.X)>;
	declare Vec2 Pos_TrophiesBg = MLHelpers::SkewX(<0., -54.>, 10.);
	declare Vec2 Size_Trophies = <Size_TrophiesBg.X * 0.77, Size_TrophiesBg.Y * 0.86>;
	declare Vec2 Pos_Trophies = <0., -1.>;
	declare Vec2 Pos_Message = MLHelpers::SkewX(<0., -76.>, 10.);
	declare Vec2 Pos_Spinner = MLHelpers::SkewX(<0., -92.>, 10.);
	declare Vec2 Pos_AutoJoin = MLHelpers::SkewX(<0., -92.>, 10.);

	declare Boolean PlatformIsFromFirstParty = Platform::IsFromFirstParty(System);
	if (PlatformIsFromFirstParty) {
		Size_SideTitle.X += Size_RulesButton.X;
		Pos_SideTitle.X = 0.;
	}

	return MV::Create(
C_Id, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Pop-ups -->
<frameinstance
	id="popupmultichoice-rules" z-index="10"
	modelid="{{{PopUpMultiChoice::C_Name}}}"
	data-title="{{{Constants::C_Text_Rules_Title}}}"
	data-description="{{{TL::MLEncode(Description_Rules.tojson())}}}"
	hidden="1"
/>

<!-- Frame global -->
<frame id="frame-global" size="320 180" halign="center" valign="center" z-index="-2" hidden="1">
	<frame id="frame-content" pos="{{{Pos_Module.X}}} {{{Pos_Module.Y}}}" z-index="1">
		<frameinstance
			id="button-hide" pos="{{{-Size_Background.X*0.5}}} {{{Size_Background.Y*0.5 + 1.}}}" z-index="3"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="8 8"
			data-iconsize="8 8"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
			data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-icon="{{{Icons::C_Icon_128x128_Arrow_Left}}}"
			data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left}}}"
			data-opacityunfocus=".6"
			data-iconopacityunfocus=".3"
			data-halign="left" data-valign="bottom"
			data-nav-inputs="select;cancel"
			data-nav-targets="_;_"
			data-nav-group="{{{C_NavGroup_Side}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			hidden="1"
		/>

		<!-- Hide the content of this frame with the 'button-hide' -->
		<frame id="frame-hideable-content">
			<frame id="frame-content-side">
				<quad id="quad_bg" size="{{{Size_Background.X}}} {{{Size_Background.Y}}}" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" halign="center" valign="center" opacity="0.6" z-index="0"/>
				<label id="label-title" pos="{{{Pos_SideTitle.X}}} {{{Pos_SideTitle.Y}}}" size="{{{Size_SideTitle.X}}} {{{Size_SideTitle.Y}}}" class="text-extrabold" text="{{{Constants::C_Text_Title}}}" textsize="{{{Constants::C_TextSize_Title}}}" valign="top" z-index="3"/>
				<frameinstance
					id="button-rules" pos="{{{Size_Background.X*0.5}}} {{{Size_Background.Y*0.5}}}" z-index="4"
					modelid="{{{Button::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-opacityunfocus="0.6"
					data-size="{{{Size_RulesButton.X}}} {{{Size_RulesButton.Y}}}"
					data-labelsize="{{{Size_RulesButton.X}}} {{{Size_RulesButton.Y}}}"
					data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
					data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}"
					data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
					data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}"
					data-textopacityunfocus="0.6"
					data-textitalicslope="0.1"
					data-textypos="-0.57"
					data-textsize="5"
					data-text="?"
					data-halign="right" data-valign="top"
					data-nav-inputs="select;cancel"
					data-nav-targets="_;_"
					data-nav-group="{{{C_NavGroup_Side}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
					hidden="{{{PlatformIsFromFirstParty}}}"
				/>
				<label id="label-result" class="text-semibold" pos="0 16" size="{{{Size_Background.X*0.8}}} 5" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" textsize="2" textprefix="$i" z-index="3"/>
				<label id="label-trophies" class="text-semibold" pos="0 12" size="{{{Size_Background.X*0.8}}} 5" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" textsize="2" textprefix="$i" z-index="3"/>
				<quad id="quad-result" halign="center" valign="center" pos="0 2" size="15 15" z-index="3" autoscale="0"/>
				<label id="label-message" class="text-semibold" pos="0 -4" size="{{{Size_Background.X*0.8}}} 40" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" textsize="2" textprefix="$i" autonewline="1" maxline="4" z-index="3"/>
				<label id="label-timer" class="text-semibold" pos="0 -17" size="{{{Size_Background.X*0.5}}} 12" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" textsize="2" textprefix="$i" z-index="3"/>
				<label id="label-auto-join" class="text-semibold" pos="0 -23" size="{{{Size_Background.X*0.5}}} 12" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" textsize="2" textprefix="$i" z-index="3"/>
				<frameinstance pos="0 -23" id="frame-spinner" modelid="{{{LoadingSpinner::C_Name}}}" z-index="3" scale="0.65"/>
				<frameinstance
					id="button-join" pos="{{{-Size_Background.X}}} {{{-Size_Background.Y*0.5-1.}}}" z-index="5"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{Text_Join}}}"
					data-text-offset="2.5 -0.55"
					data-width="{{{Size_Background.X}}}" data-height="10"
					data-styles="{{{ExpendableButton::C_Style_PageNextAnimated}}} {{{ExpendableButton::C_Style_HUD}}}"
					data-background-image-right="{{{ButtonStyles::C_ImageUrl_ButtonExtraRounded_End_Vertical}}}"
					data-background-colormode-right="{{{ExpendableButton::C_ColorMode_Colorize}}}"
					data-background-size-right="128 256"
					data-icon-offset="2.5 0"
					data-halign="center" data-valign="top"
					data-nav-inputs="select;cancel"
					data-nav-targets="_;_"
					data-nav-group="{{{C_NavGroup_Side}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
				/>
			</frame>
		</frame>
	</frame>

	<!-- Join match pop-up (on consoles only) -->
	<frame
		id="frame-content-center"
		class="{{{Navigation::C_Class}}}"
		z-index="2"
		data-nav-inputs="cancel;appmenu"
		data-nav-targets="_;_"
		data-nav-group="{{{C_NavGroup_ShowInGameMenu}}}"
		data-nav-selected="1"
	>
		<quad z-index="0" {{{MLHelpers::Size(Size_Bg)}}} halign="center" valign="center" image="{{{Img_Background}}}" />
		<quad id="quad-popup-background" z-index="0" {{{MLHelpers::Size(Size_Bg)}}} halign="center" valign="center" image="{{{Img_Background}}}" />
		<quad id="quad-popup-background-buttons" z-index="0" {{{MLHelpers::Size(Size_BgButtons)}}} halign="center" valign="center" image="{{{Img_BackgroundButtons}}}" opacity="0" hidden="1" />
		<frame {{{MLHelpers::Pos(Pos_Content)}}} z-index="1">
			<label id="label-title" {{{MLHelpers::Pos(Pos_Title)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" textsize="{{{TextSize_Title}}}" text="{{{Constants::C_Text_Title}}}" class="text-extrabold" />
			<label id="label-rank" {{{MLHelpers::Pos(Pos_Rank)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" textsize="4" class="text-extrabold" />
			<label id="label-trophies" {{{MLHelpers::Pos(Pos_LabelTrophies)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" textsize="4" class="text-extrabold" />
			<frame {{{MLHelpers::Pos(Pos_TrophiesBg)}}}>
				<quad z-index="0" {{{MLHelpers::Size(Size_TrophiesBg)}}} halign="center" valign="center" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.5" image="{{{Img_TrophiesBg}}}" />
				<quad id="quad-trophies" z-index="1" {{{MLHelpers::Size(Size_Trophies)}}} halign="center" valign="center" keepratio="fit" />
			</frame>
			<label id="label-message" {{{MLHelpers::Pos(Pos_Message)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" maxline="3" class="text-extrabold" />
			<frameinstance id="frame-spinner" modelid="{{{LoadingSpinner::C_Name}}}" {{{MLHelpers::Pos(Pos_Spinner)}}} scale="0.65" />
			<label id="label-auto-join" {{{MLHelpers::Pos(Pos_AutoJoin)}}} size="{{{SizeX_Content}}} 10" halign="center" valign="center2" class="text-extrabold" />
		</frame>
		<frame {{{MLHelpers::Pos(Pos_Buttons)}}} z-index="2">
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-left"
				pos="2.3 0" z-index="3"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{Text_Stay}}}"
				data-size="{{{Size_ButtonLeft.X}}} {{{Size_ButtonLeft.Y}}}"
				data-labelsize="{{{Size_ButtonLeft.X}}} {{{Size_ButtonLeft.Y}}}"
				data-textxpos="0.5"
				data-opacityunfocus=".5"
				data-image="{{{Img_ButtonLeft}}}"
				data-imagefocus="{{{Img_ButtonLeft}}}"
				data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
				data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-icon="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-iconxpos=".15"
				data-iconypos="-.5"
				data-textsize="5"
				data-textopacityunfocus=".5"
				data-iconopacityunfocus=".5"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-textitalicslope=".2"
				data-halign="right"
				data-nav-inputs="select;right"
				data-nav-targets="_;button-right"
				data-nav-group="{{{C_NavGroup_Center}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-right"
				pos="-1.2 0" z-index="3"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{Text_Join}}}"
				data-size="{{{Size_ButtonRight.X}}} {{{Size_ButtonRight.Y}}}"
				data-labelsize="{{{Size_ButtonRight.X}}} {{{Size_ButtonRight.Y}}}"
				data-textxpos="0.5"
				data-opacityunfocus=".5"
				data-image="{{{Img_ButtonRight}}}"
				data-imagefocus="{{{Img_ButtonRight}}}"
				data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
				data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-icon="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
				data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
				data-iconxpos=".85"
				data-iconypos="-.5"
				data-textsize="5"
				data-textopacityunfocus=".5"
				data-iconopacityunfocus=".5"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-textitalicslope=".2"
				data-halign="left"
				data-nav-inputs="select;left"
				data-nav-targets="_;button-left"
				data-nav-group="{{{C_NavGroup_Center}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils

#Const C_TimeAttackDaily_CupState_None {{{Constants::C_TimeAttackDaily_CupState_None}}}
#Const C_TimeAttackDaily_CupState_NotStarted {{{Constants::C_TimeAttackDaily_CupState_NotStarted}}}
#Const C_TimeAttackDaily_CupState_Qualifications {{{Constants::C_TimeAttackDaily_CupState_Qualifications}}}
#Const C_TimeAttackDaily_CupState_RegistrationsOver {{{Constants::C_TimeAttackDaily_CupState_RegistrationsOver}}}
#Const C_TimeAttackDaily_CupState_WaitingForMatch {{{Constants::C_TimeAttackDaily_CupState_WaitingForMatch}}}
#Const C_TimeAttackDaily_CupState_MatchNotJoinableAnymore {{{Constants::C_TimeAttackDaily_CupState_MatchNotJoinableAnymore}}}
#Const C_TimeAttackDaily_CupState_ServerDutyIsOver {{{Constants::C_TimeAttackDaily_CupState_ServerDutyIsOver}}}

#Const C_Daily_Competition_Rerun {{{dump(Constants::C_Daily_Competition_Rerun)}}}

#Const C_State_Hidden 0
#Const C_State_BeforeMatch 1
#Const C_State_BeforeMatch_Registered 2
#Const C_State_MatchStarted_NoResult 4
#Const C_State_MatchStarted_Registering 5
#Const C_State_MatchOver_WaitJoinLink 8
#Const C_State_MatchOver_WaitServerReady 9
#Const C_State_MatchOver_JoinLinkReady 10
#Const C_State_MatchOver_RegistrationsOver 11
#Const C_State_MatchOver_MatchNotJoinableAnymore 12

#Const C_JoinLinkValidDelay 30000
#Const C_InputPriority {{{dump(C_InputPriority)}}}
#Const C_PlatformIsFromFirstParty {{{dump(PlatformIsFromFirstParty)}}}

#Const C_RankToTrophies_Official {{{dump(Constants::C_RankToTrophies_Official)}}}
#Const C_RankToTrophies_Rerun {{{dump(Constants::C_RankToTrophies_Rerun)}}}

#Struct K_ContentControls {
	CMlLabel Label_Result;
	CMlLabel Label_Trophies;
	CMlQuad Quad_Result;
	CMlLabel Label_Message;
	CMlFrame Frame_Spinner;
	CMlLabel Label_AutoJoin;
}

#Struct K_Controls {
	K_ContentControls ContentSide;
	K_ContentControls ContentCenter;
	CMlFrame Frame_Global;
	CMlFrame Frame_Content;
	CMlFrame Frame_ContentSide;
	CMlFrame Frame_ContentCenter;
	CMlFrame Frame_HideableContent;
	CMlFrame Frame_Rules;
	CMlLabel Label_Timer;
	CMlFrame Button_Hide;
	CMlFrame Button_Help;
	CMlFrame Button_Join;
	CMlFrame Button_Left;
	CMlFrame Button_Right;
	CMlFrame PopUpMultiChoice_Rules;
	CMlQuad Quad_PopUpBackground;
	CMlQuad Quad_PopUpBackgroundButtons;
}

#Struct K_State {
	Integer CurrentState;
	Boolean NeedStateUpdate;
	Boolean NeedOffset;
	Text JoinLink;
	Integer ServerReadyTime;
	Boolean ServerIsReady;
	Boolean FinalRanksReceived;
	Integer CurrentRank;
	Boolean CanDisplayPopUp;
	Boolean ScoresTableIsDisplayed;
	Boolean PopUpIsVisible;
	Boolean ButtonClicked;
	Boolean CanAutoJoin;
}
""",
"""
Boolean JoinLinkIsValid(K_State _State) {
	return (
		_State.JoinLink != "" &&
		_State.ServerIsReady
	);
}

Void JoinNextMatch(K_State _State, Boolean _SkipConfirm) {
	declare TmpState = _State;
	if (_SkipConfirm) {
		TmpState.JoinLink = TL::Replace(TmpState.JoinLink, "#join", "#qjoin");
	}
	if (JoinLinkIsValid(TmpState)) {
		OpenLink(TmpState.JoinLink, CMlScript::LinkType::Goto);
	}
}

Void StartHideAnimation(K_Controls _Controls) {
	if (_Controls.Frame_HideableContent != Null) {
		declare HiddenPosX = -60.;
		declare VisiblePosX = 0.;
		declare StartPos = _Controls.Frame_HideableContent.RelativePosition_V3;
		declare EndPosX = VisiblePosX;

		if (StartPos.X == HiddenPosX) {
			EndPosX = VisiblePosX;
			{{{Button::P}}}SetIcon(This, _Controls.Button_Hide, "{{{Icons::C_Icon_128x128_Arrow_Left}}}");
			{{{Button::P}}}SetIconFocus(This, _Controls.Button_Hide, "{{{Icons::C_Icon_128x128_Arrow_Left}}}");
		} else {
			EndPosX = HiddenPosX;
			{{{Button::P}}}SetIcon(This, _Controls.Button_Hide, "{{{Icons::C_Icon_128x128_Arrow_Right}}}");
			{{{Button::P}}}SetIconFocus(This, _Controls.Button_Hide, "{{{Icons::C_Icon_128x128_Arrow_Right}}}");
		}

		AnimMgr.Flush(_Controls.Frame_HideableContent);
		AnimMgr.Add(_Controls.Frame_HideableContent, "<anim pos=\"" ^EndPosX^" "^StartPos.Y^ "\" />", 250, CAnimManager::EAnimManagerEasing::Linear);
	}
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton((_From as CMlFrame))) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton((_From as CMlFrame))) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton((_To as CMlFrame))) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton((_To as CMlFrame))) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

K_ContentControls GetContentControls(K_State _State, K_Controls _Controls) {
	if (_State.PopUpIsVisible) {
		return _Controls.ContentCenter;
	}
	return _Controls.ContentSide;
}

Void UpdatePopUpButtonsVisibility(K_State _State, K_Controls _Controls) {
	declare Boolean ButtonsAreVisible = _State.PopUpIsVisible && _State.CurrentState == C_State_MatchOver_JoinLinkReady;

	AnimMgr.Flush(_Controls.Quad_PopUpBackground);
	AnimMgr.Flush(_Controls.Quad_PopUpBackgroundButtons);
	if (ButtonsAreVisible) {
		AnimMgr.Add(_Controls.Quad_PopUpBackgroundButtons, "<anim opacity=\"1\" hidden=\"0\" />", 100, CAnimManager::EAnimManagerEasing::QuadIn);
		AnimMgr.Add(_Controls.Quad_PopUpBackground, "<anim opacity=\"0\" hidden=\"1\" />", Now + 100, 100, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Controls.Quad_PopUpBackground, "<anim opacity=\"1\" hidden=\"0\" />", Now + 250, 100, CAnimManager::EAnimManagerEasing::QuadIn);
		AnimMgr.Add(_Controls.Quad_PopUpBackgroundButtons, "<anim opacity=\"0\" hidden=\"1\" />", Now + 250 + 100, 100, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	_Controls.Button_Left.Visible = ButtonsAreVisible;
	_Controls.Button_Right.Visible = ButtonsAreVisible;
	{{{Navigation::P}}}Lock(_Controls.Button_Left, !_Controls.Button_Left.Visible);
	{{{Navigation::P}}}Lock(_Controls.Button_Right, !_Controls.Button_Right.Visible);

	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Center}}}");
	if (FocusedControl == Null) {
		Focus(FocusedControl, _Controls.Button_Right);
	}
}

K_State SetPopUpVisibility(K_State _State, K_Controls _Controls, Boolean _PlatformIsFromFirstParty, Boolean _CanDisplayPopUp, Boolean _ScoresTableIsDisplayed, Integer _CurrentState) {
	declare K_State State = _State;

	State.CanDisplayPopUp = _CanDisplayPopUp;
	State.ScoresTableIsDisplayed = _ScoresTableIsDisplayed;
	State.PopUpIsVisible = (
		_PlatformIsFromFirstParty &&
		State.CanDisplayPopUp &&
		!State.ButtonClicked &&
		!State.ScoresTableIsDisplayed && (
			_CurrentState == C_State_MatchOver_WaitJoinLink ||
			_CurrentState == C_State_MatchOver_WaitServerReady ||
			_CurrentState == C_State_MatchOver_JoinLinkReady
		)
	);
	_Controls.Frame_ContentSide.Visible = !State.PopUpIsVisible;
	_Controls.Frame_ContentCenter.Visible = State.PopUpIsVisible;
	EnableMenuNavigation(State.PopUpIsVisible, False, False, Null, C_InputPriority);

	UpdatePopUpButtonsVisibility(State, _Controls);

	return State;
}
K_State SetPopUpVisibility(K_State _State, K_Controls _Controls, Boolean _CanDisplayPopUp, Boolean _ScoresTableIsDisplayed, Integer _CurrentState) {
	return SetPopUpVisibility(_State, _Controls, C_PlatformIsFromFirstParty, _CanDisplayPopUp, _ScoresTableIsDisplayed, _CurrentState);
}

Void DisplayResult(K_State _State, K_Controls _Controls, Integer _CurrentRank, Text _CompetitionType) {
	declare K_ContentControls ContentControls = GetContentControls(_State, _Controls);
	ContentControls.Label_Result.Visible = _CurrentRank > 0;
	ContentControls.Label_Trophies.Visible = _CurrentRank > 0;
	ContentControls.Quad_Result.Visible = _CurrentRank > 0;
	if (_CurrentRank > 0) {
		declare Integer[Integer] EarnedTrophies;
		declare RankToTrophies = C_RankToTrophies_Official;
		if (_CompetitionType == C_Daily_Competition_Rerun) RankToTrophies = C_RankToTrophies_Rerun;
		foreach (Rank => Rewards in RankToTrophies) {
			if (_CurrentRank <= Rank) {
				EarnedTrophies = Rewards;
			} else {
				break;
			}
		}
		declare BestTrophy = 0;
		declare BestTrophyCount = 0;
		foreach (Trophy => TrophyCount in EarnedTrophies) {
			if (Trophy > BestTrophy) {
				BestTrophy = Trophy;
				BestTrophyCount = TrophyCount;
			}
		}
		switch (BestTrophy) {
			case 7: {
				ContentControls.Quad_Result.ChangeImageUrl("{{{Const::C_ImageUrl_Trophy_128_Gold1}}}");
				ContentControls.Label_Result.Value = TL::Compose("{{{Text_Result}}}", ""^_CurrentRank);
				ContentControls.Label_Trophies.Value = TL::Compose("{{{Text_ResultTrophy}}}", ""^BestTrophyCount, ""^BestTrophy);
			}
			case 6: {
				ContentControls.Quad_Result.ChangeImageUrl("{{{Const::C_ImageUrl_Trophy_128_Silver3}}}");
				ContentControls.Label_Result.Value = TL::Compose("{{{Text_Result}}}", ""^_CurrentRank);
				ContentControls.Label_Trophies.Value = TL::Compose("{{{Text_ResultTrophy}}}", ""^BestTrophyCount, ""^BestTrophy);
			}
			case 5: {
				ContentControls.Quad_Result.ChangeImageUrl("{{{Const::C_ImageUrl_Trophy_128_Silver2}}}");
				ContentControls.Label_Result.Value = TL::Compose("{{{Text_Result}}}", ""^_CurrentRank);
				ContentControls.Label_Trophies.Value = TL::Compose("{{{Text_ResultTrophy}}}", ""^BestTrophyCount, ""^BestTrophy);
			}
			case 4: {
				ContentControls.Quad_Result.ChangeImageUrl("{{{Const::C_ImageUrl_Trophy_128_Silver1}}}");
				ContentControls.Label_Result.Value = TL::Compose("{{{Text_Result}}}", ""^_CurrentRank);
				ContentControls.Label_Trophies.Value = TL::Compose("{{{Text_ResultTrophy}}}", ""^BestTrophyCount, ""^BestTrophy);
			}
			case 3: {
				ContentControls.Quad_Result.ChangeImageUrl("{{{Const::C_ImageUrl_Trophy_128_Bronze3}}}");
				ContentControls.Label_Result.Value = TL::Compose("{{{Text_Result}}}", ""^_CurrentRank);
				ContentControls.Label_Trophies.Value = TL::Compose("{{{Text_ResultTrophy}}}", ""^BestTrophyCount, ""^BestTrophy);
			}
			default: {
				ContentControls.Quad_Result.ChangeImageUrl("");
				ContentControls.Label_Result.Value = TL::Compose("{{{Text_Result}}}", ""^_CurrentRank);
				ContentControls.Label_Trophies.Value = "";
			}
		}
	}
}

K_State DisplayState(K_State _State, K_Controls _Controls, Integer _CurrentState, Integer _CurrentRank, Text _CompetitionType) {
	declare K_State State = _State;
	State.CurrentState = _CurrentState;

	State = SetPopUpVisibility(State, _Controls, State.CanDisplayPopUp, State.ScoresTableIsDisplayed, State.CurrentState);
	declare K_ContentControls ContentControls = GetContentControls(State, _Controls);

	/* Reset display */
	_Controls.Frame_Content.Show();
	ContentControls.Frame_Spinner.Hide();
	_Controls.Label_Timer.Value = "";
	ContentControls.Label_Message.Value = "";
	_Controls.ContentSide.Label_Message.RelativePosition_V3.Y = -4.;
	_Controls.ContentSide.Label_Message.MaxLine = 4;
	DisplayResult(State, _Controls, _CurrentRank, _CompetitionType);
	_Controls.Button_Join.RelativePosition_V3 = <{{{-Size_Background.X}}}, {{{-Size_Background.Y*0.5-1.}}}>;
	{{{Button::P}}}HideAndLock(_Controls.Button_Join);

	if (
		State.CurrentState != C_State_MatchOver_WaitJoinLink &&
		State.CurrentState != C_State_MatchOver_WaitServerReady &&
		State.CurrentState != C_State_MatchStarted_Registering
	) {
		{{{LoadingSpinner::P}}}StopAnimation(This, ContentControls.Frame_Spinner);
	}

	switch (State.CurrentState) {
		case C_State_Hidden: {
			_Controls.Frame_Content.Hide();
		}
		case C_State_BeforeMatch: {
			ContentControls.Label_Message.Value = "{{{C_Text_BeforeMatch}}}";
		}
		case C_State_BeforeMatch_Registered: {
			//L16N [Cup of the Day time attack] The qualification match is starting soon
			ContentControls.Label_Message.Value = _("You are registered!\nThe Cup of the Day will start soon.");
		}
		case C_State_MatchStarted_NoResult: {
			_Controls.ContentSide.Label_Message.RelativePosition_V3.Y = 3.;
			ContentControls.Label_Message.Value = "{{{C_Text_MatchStarted_NoResult}}}";
		}
		case C_State_MatchStarted_Registering: {
			_Controls.ContentSide.Label_Message.RelativePosition_V3.Y = 0.;
			ContentControls.Label_Message.Value = "{{{C_Text_MatchStarted_Registering}}}";
			ContentControls.Frame_Spinner.Show();
			{{{LoadingSpinner::P}}}StartAnimation(This, ContentControls.Frame_Spinner);
		}
		case C_State_MatchOver_WaitJoinLink: {
			_Controls.ContentSide.Label_Message.MaxLine = 2;
			_Controls.ContentSide.Label_Message.RelativePosition_V3.Y = -9.;
			ContentControls.Label_Message.Value = "{{{C_Text_MatchOver_WaitJoinLink}}}";
			ContentControls.Frame_Spinner.Show();
			{{{LoadingSpinner::P}}}StartAnimation(This, ContentControls.Frame_Spinner);
			DisplayResult(State, _Controls, _CurrentRank, _CompetitionType);
		}
		case C_State_MatchOver_WaitServerReady: {
			_Controls.ContentSide.Label_Message.RelativePosition_V3.Y = -9.;
			_Controls.ContentSide.Label_Message.MaxLine = 2;
			ContentControls.Label_Message.Value = "{{{C_Text_MatchOver_WaitServerReady}}}";
			ContentControls.Frame_Spinner.Show();
			{{{LoadingSpinner::P}}}StartAnimation(This, ContentControls.Frame_Spinner);
			DisplayResult(State, _Controls, _CurrentRank, _CompetitionType);
		}
		case C_State_MatchOver_JoinLinkReady: {
			_Controls.ContentSide.Label_Message.RelativePosition_V3.Y = -11.;
			_Controls.ContentCenter.Label_Message.Value = "{{{C_Text_MatchOver_JoinLinkReady}}}";
			if (C_PlatformIsFromFirstParty) {
				_Controls.ContentSide.Label_Message.Value = "{{{C_Text_MatchOver_JoinLinkReadySideFirstParty}}}";
			} else {
				_Controls.ContentSide.Label_Message.Value = "{{{C_Text_MatchOver_JoinLinkReady}}}";
				{{{Button::P}}}ShowAndUnlock(_Controls.Button_Join);
				AnimMgr.Flush(_Controls.Button_Join);
				AnimMgr.Add(_Controls.Button_Join, "<anim pos=\"0 "^_Controls.Button_Join.RelativePosition_V3.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
			DisplayResult(State, _Controls, _CurrentRank, _CompetitionType);
		}
		case C_State_MatchOver_RegistrationsOver: {
			ContentControls.Label_Message.Value = "{{{C_Text_MatchOver_RegistrationsOver}}}";
		}
		case C_State_MatchOver_MatchNotJoinableAnymore: {
			ContentControls.Label_Message.Value = "{{{C_Text_MatchOver_MatchNotJoinableAnymore}}}";
		}
	}
	Tools::FitLabelValue(_Controls.ContentSide.Label_Message, 2., 1., 0.25);

	return State;
}

K_State DisplayState(K_State _State, K_Controls _Controls, Integer _CurrentState, Text _CompetitionType) {
	return DisplayState(_State, _Controls, _CurrentState, -1, _CompetitionType);
}

K_State StayOnServer(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;

	State.ButtonClicked = True;
	State.NeedStateUpdate = True;
	State = SetPopUpVisibility(State, _Controls, State.CanDisplayPopUp, State.ScoresTableIsDisplayed, State.CurrentState);

	return State;
}

K_State Select(K_State _State, K_Controls _Controls, CMlControl _SelectedControl) {
	if (_SelectedControl == Null || {{{Transition::P}}}IsInTransition(This)) return _State;

	declare K_State State = _State;

	switch (_SelectedControl.ControlId) {
		case "button-hide": StartHideAnimation(_Controls);
		case "button-join": JoinNextMatch(State, True);
		case "button-left": State = StayOnServer(State, _Controls);
		case "button-right": JoinNextMatch(State, True);
		case "button-rules": {{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Rules);
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare Integer JoinLinkUpdate;
declare Integer CupState;
declare Boolean HasResult;
declare Boolean DisplayModule;
declare Boolean PlayerIsRegistered;
declare Boolean RegistrationConfirmed;
declare Text CurrentCompetitionType;
declare Integer AutoJoinTime;

declare netread Text Net_TimeAttackDaily_NextMatchTracker_JoinLink for UI = "";
declare netread Integer Net_TimeAttackDaily_NextMatchTracker_JoinLinkUpdate for UI = -1;
declare netread Integer Net_TimeAttackDaily_NetShare_CupState for Teams[0] = -1;
declare netread Boolean Net_TimeAttackDaily_NetShare_HasResult for UI = False;
declare netread Integer Net_TimeAttackDaily_NetShare_Rank for UI = -1;
declare netread Integer Net_TimeAttackDaily_NextMatchTracker_MatchStartTime for Teams[0] = -1;
declare netread Boolean Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered for UI = False; // Also used in daily tracker UI
declare netread Boolean Net_TimeAttackDaily_NextMatchTracker_RegistrationConfirmed for UI = False;
declare netread Boolean Net_TimeAttackDaily_NextMatchTracker_FinalRanksReceived for Teams[0] = False;
declare netread Integer Net_TimeAttackDaily_NextMatchTracker_RegistrationsEndTime for Teams[0];
declare netread Integer Net_TimeAttackDaily_NextMatchTracker_AutoJoinTime for Teams[0];
declare netread Text Net_TimeAttackDaily_NextMatchTracker_CompetitionType for Teams[0];
declare netread Boolean Net_TimeAttackDaily_NextMatchTracker_CanDisplayPopUp for Teams[0];
declare netread Integer Net_TimeAttackDaily_NextMatchTracker_ResetButtonClicked for Teams[0];

declare K_Controls Controls;
declare K_State State;
declare Integer ResetButtonClicked;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	CurrentState = C_State_Hidden,
	NeedOffset = False,
	NeedStateUpdate = True,
	JoinLink = "",
	FinalRanksReceived = False,
	CurrentRank = -1,
	CanDisplayPopUp = False,
	ScoresTableIsDisplayed = False,
	PopUpIsVisible = False,
	ButtonClicked = False,
	CanAutoJoin = True
};

Controls = K_Controls {
	Frame_Global = Frame_Global,
	Frame_Content = (Frame_Global.GetFirstChild("frame-content") as CMlFrame),
	Frame_ContentSide = (Frame_Global.GetFirstChild("frame-content-side") as CMlFrame),
	Frame_ContentCenter = (Frame_Global.GetFirstChild("frame-content-center") as CMlFrame),
	Frame_HideableContent = (Frame_Global.GetFirstChild("frame-hideable-content") as CMlFrame),
	Frame_Rules = (Frame_Global.GetFirstChild("frame-rules-content") as CMlFrame),
	Label_Timer = (Frame_Global.GetFirstChild("label-timer") as CMlLabel),
	Button_Hide = (Frame_Global.GetFirstChild("button-hide") as CMlFrame),
	Button_Help = (Frame_Global.GetFirstChild("button-help") as CMlFrame),
	Button_Join = (Frame_Global.GetFirstChild("button-join") as CMlFrame),
	Button_Left = (Frame_Global.GetFirstChild("button-left") as CMlFrame),
	Button_Right = (Frame_Global.GetFirstChild("button-right") as CMlFrame),
	PopUpMultiChoice_Rules = (Page.GetFirstChild("popupmultichoice-rules") as CMlFrame),
	Quad_PopUpBackground = (Frame_Global.GetFirstChild("quad-popup-background") as CMlQuad),
	Quad_PopUpBackgroundButtons = (Frame_Global.GetFirstChild("quad-popup-background-buttons") as CMlQuad)
};
Controls.ContentSide = K_ContentControls {
	Label_Result = (Controls.Frame_ContentSide.GetFirstChild("label-result") as CMlLabel),
	Label_Trophies = (Controls.Frame_ContentSide.GetFirstChild("label-trophies") as CMlLabel),
	Quad_Result = (Controls.Frame_ContentSide.GetFirstChild("quad-result") as CMlQuad),
	Label_Message = (Controls.Frame_ContentSide.GetFirstChild("label-message") as CMlLabel),
	Frame_Spinner = (Controls.Frame_ContentSide.GetFirstChild("frame-spinner") as CMlFrame),
	Label_AutoJoin = (Controls.Frame_ContentSide.GetFirstChild("label-auto-join") as CMlLabel)
};
Controls.ContentCenter = K_ContentControls {
	Label_Result = (Controls.Frame_ContentCenter.GetFirstChild("label-rank") as CMlLabel),
	Label_Trophies = (Controls.Frame_ContentCenter.GetFirstChild("label-trophies") as CMlLabel),
	Quad_Result = (Controls.Frame_ContentCenter.GetFirstChild("quad-trophies") as CMlQuad),
	Label_Message = (Controls.Frame_ContentCenter.GetFirstChild("label-message") as CMlLabel),
	Frame_Spinner = (Controls.Frame_ContentCenter.GetFirstChild("frame-spinner") as CMlFrame),
	Label_AutoJoin = (Controls.Frame_ContentCenter.GetFirstChild("label-auto-join") as CMlLabel)
};

JoinLinkUpdate = -1;
CupState = -123;
HasResult = False;
DisplayModule = Frame_Global.Visible;

{{{Navigation::P}}}UseLocalEvents(This, True);
State = SetPopUpVisibility(State, Controls, State.CanDisplayPopUp, State.ScoresTableIsDisplayed, State.CurrentState);
Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Center}}}"), Controls.Button_Right);
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_TimeAttackDaily_NextMatchTracker_IsVisible for Owner;
		if (DisplayModule != Net_TimeAttackDaily_NextMatchTracker_IsVisible) {
			DisplayModule = Net_TimeAttackDaily_NextMatchTracker_IsVisible;
			Controls.Frame_Global.Visible = Net_TimeAttackDaily_NextMatchTracker_IsVisible;
			State.NeedStateUpdate = True;
		}

		if (JoinLinkUpdate != Net_TimeAttackDaily_NextMatchTracker_JoinLinkUpdate) {
			JoinLinkUpdate = Net_TimeAttackDaily_NextMatchTracker_JoinLinkUpdate;
			if (State.JoinLink != Net_TimeAttackDaily_NextMatchTracker_JoinLink) {
				State.JoinLink = Net_TimeAttackDaily_NextMatchTracker_JoinLink;
				State.ServerReadyTime = Now + C_JoinLinkValidDelay;
				State.ServerIsReady = False;
			}
			State.NeedStateUpdate = True;
		}
	}

	if (CurrentCompetitionType != Net_TimeAttackDaily_NextMatchTracker_CompetitionType) {
		CurrentCompetitionType = Net_TimeAttackDaily_NextMatchTracker_CompetitionType;
		State.NeedStateUpdate = True;
	}

	if (ResetButtonClicked != Net_TimeAttackDaily_NextMatchTracker_ResetButtonClicked) {
		ResetButtonClicked = Net_TimeAttackDaily_NextMatchTracker_ResetButtonClicked;
		State.ButtonClicked = False;
		State.NeedStateUpdate = True;
		State = SetPopUpVisibility(State, Controls, State.CanDisplayPopUp, State.ScoresTableIsDisplayed, State.CurrentState);
	}

	if (State.CanDisplayPopUp != Net_TimeAttackDaily_NextMatchTracker_CanDisplayPopUp) {
		State = SetPopUpVisibility(State, Controls, Net_TimeAttackDaily_NextMatchTracker_CanDisplayPopUp, State.ScoresTableIsDisplayed, State.CurrentState);
		State.NeedStateUpdate = True;
	}

	if (State.ScoresTableIsDisplayed != {{{ScoresTable::P}}}IsDisplayed()) {
		State = SetPopUpVisibility(State, Controls, State.CanDisplayPopUp, {{{ScoresTable::P}}}IsDisplayed(), State.CurrentState);
		State.NeedStateUpdate = True;
	}

	if (
		Net_TimeAttackDaily_NextMatchTracker_MatchStartTime >= GameTime &&
		(
			State.CurrentState == C_State_BeforeMatch ||
			State.CurrentState == C_State_BeforeMatch_Registered
		)
	) {
		Controls.Label_Timer.Value = TL::TimeToText(Net_TimeAttackDaily_NextMatchTracker_MatchStartTime - GameTime, False);
		if (Controls.ContentSide.Label_Message.RelativePosition_V3.Y < -2.) Controls.ContentSide.Label_Message.RelativePosition_V3.Y = -2.;
	} else if (
		Net_TimeAttackDaily_NextMatchTracker_RegistrationsEndTime > 0 &&
		Net_TimeAttackDaily_NextMatchTracker_RegistrationsEndTime - GameTime > 0 &&
		State.CurrentState == C_State_MatchStarted_NoResult
	) {
		Controls.Label_Timer.Value = TL::TimeToText(Net_TimeAttackDaily_NextMatchTracker_RegistrationsEndTime - GameTime, False);
	} else if (Controls.Label_Timer.Value != "") {
		Controls.Label_Timer.Value = "";
	}

	if (AutoJoinTime != Net_TimeAttackDaily_NextMatchTracker_AutoJoinTime) {
		AutoJoinTime = Net_TimeAttackDaily_NextMatchTracker_AutoJoinTime;
		State.CanAutoJoin = AutoJoinTime > 0;
	}

	if (
		State.CanAutoJoin &&
		AutoJoinTime > 0 &&
		AutoJoinTime <= GameTime &&
		State.CurrentState == C_State_MatchOver_JoinLinkReady
	) {
		State.CanAutoJoin = False;
		JoinNextMatch(State, True);
	}

	if (
		State.CurrentState == C_State_MatchOver_JoinLinkReady &&
		AutoJoinTime > 0 &&
		AutoJoinTime - GameTime > 0
	) {
		declare CMlLabel Label_AutoJoin = Controls.ContentSide.Label_AutoJoin;
		if (State.PopUpIsVisible) Label_AutoJoin = Controls.ContentCenter.Label_AutoJoin;
		Label_AutoJoin.Value = TL::TimeToText(AutoJoinTime - GameTime + 1000, False);
	} else {
		declare CMlLabel Label_AutoJoin = Controls.ContentSide.Label_AutoJoin;
		if (State.PopUpIsVisible) Label_AutoJoin = Controls.ContentCenter.Label_AutoJoin;
		if (Label_AutoJoin.Value != "") {
			Label_AutoJoin.Value = "";
		}
	}

	if (
		PlayerIsRegistered != Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered ||
		RegistrationConfirmed != Net_TimeAttackDaily_NextMatchTracker_RegistrationConfirmed
	) {
		PlayerIsRegistered = Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered;
		RegistrationConfirmed = Net_TimeAttackDaily_NextMatchTracker_RegistrationConfirmed;
		State.NeedStateUpdate = True;
	}

	if (
		!State.ServerIsReady &&
		State.ServerReadyTime > 0 &&
		State.ServerReadyTime <= Now
	) {
		State.ServerIsReady = True;
		State.ServerReadyTime = -1;
		State.NeedStateUpdate = True;
	}

	if (State.FinalRanksReceived != Net_TimeAttackDaily_NextMatchTracker_FinalRanksReceived) {
		State.FinalRanksReceived = Net_TimeAttackDaily_NextMatchTracker_FinalRanksReceived;
		State.NeedStateUpdate = True;
	}

	if (State.CurrentRank != Net_TimeAttackDaily_NetShare_Rank) {
		State.CurrentRank = Net_TimeAttackDaily_NetShare_Rank;
		State.NeedStateUpdate = True;
	}

	if (CupState != Net_TimeAttackDaily_NetShare_CupState) {
		CupState = Net_TimeAttackDaily_NetShare_CupState;
		State.NeedStateUpdate = True;
	}

	if (HasResult != (
		Net_TimeAttackDaily_NetShare_HasResult || (
			InputPlayer != Null &&
			InputPlayer.Score != Null &&
			InputPlayer.Score.BestRaceTimes.count > 0
	))) {
		HasResult = (
			Net_TimeAttackDaily_NetShare_HasResult || (
				InputPlayer != Null &&
				InputPlayer.Score != Null &&
				InputPlayer.Score.BestRaceTimes.count > 0
		));
		State.NeedStateUpdate = True;
	}

	if (Owner == Null && DisplayModule) {
		DisplayModule = False;
		Controls.Frame_Global.Visible = DisplayModule;
	}

	if (State.NeedStateUpdate) {
		State.NeedStateUpdate = False;
		switch (CupState) {
			case C_TimeAttackDaily_CupState_None: {
				State = DisplayState(State, Controls, C_State_Hidden, CurrentCompetitionType);
			}
			case C_TimeAttackDaily_CupState_NotStarted: {
				if (Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered) {
					State = DisplayState(State, Controls, C_State_BeforeMatch_Registered, CurrentCompetitionType);
				} else {
					State = DisplayState(State, Controls, C_State_BeforeMatch, CurrentCompetitionType);
				}
			}
			case C_TimeAttackDaily_CupState_Qualifications: {
				if (Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered) {
					if (HasResult) {
						State = DisplayState(State, Controls, C_State_Hidden, CurrentCompetitionType);
					} else {
						State = DisplayState(State, Controls, C_State_MatchStarted_NoResult, CurrentCompetitionType);
					}
				} else {
					if (HasResult) {
						State = DisplayState(State, Controls, C_State_MatchStarted_Registering, CurrentCompetitionType);
					} else {
						State = DisplayState(State, Controls, C_State_MatchStarted_NoResult, CurrentCompetitionType);
					}
				}
			}
			case C_TimeAttackDaily_CupState_RegistrationsOver: {
				if (Net_TimeAttackDaily_NextMatchTracker_PlayerIsRegistered) {
					if (HasResult) {
						State = DisplayState(State, Controls, C_State_Hidden, CurrentCompetitionType);
					} else {
						State = DisplayState(State, Controls, C_State_MatchStarted_NoResult, CurrentCompetitionType);
					}
				} else {
					State = DisplayState(State, Controls, C_State_MatchOver_RegistrationsOver, CurrentCompetitionType);
				}
			}
			case C_TimeAttackDaily_CupState_WaitingForMatch: {
				declare Integer RankToDisplay = -1;
				if (Net_TimeAttackDaily_NetShare_Rank > 0) {
					RankToDisplay = Net_TimeAttackDaily_NetShare_Rank;
				}
				if (JoinLinkIsValid(State)) {
					State = DisplayState(State, Controls, C_State_MatchOver_JoinLinkReady, RankToDisplay, CurrentCompetitionType);
				} else if (Net_TimeAttackDaily_NextMatchTracker_RegistrationConfirmed) {
					if (State.JoinLink != "") {
						State = DisplayState(State, Controls, C_State_MatchOver_WaitServerReady, RankToDisplay, CurrentCompetitionType);
					} else {
						State = DisplayState(State, Controls, C_State_MatchOver_WaitJoinLink, RankToDisplay, CurrentCompetitionType);
					}
				} else {
					State = DisplayState(State, Controls, C_State_MatchOver_RegistrationsOver, CurrentCompetitionType);
				}
			}
			case C_TimeAttackDaily_CupState_MatchNotJoinableAnymore: {
				if (Net_TimeAttackDaily_NextMatchTracker_RegistrationConfirmed) {
					State = DisplayState(State, Controls, C_State_MatchOver_MatchNotJoinableAnymore, CurrentCompetitionType);
				} else {
					State = DisplayState(State, Controls, C_State_MatchOver_RegistrationsOver, CurrentCompetitionType);
				}

			}
			case C_TimeAttackDaily_CupState_ServerDutyIsOver: {
				State = DisplayState(State, Controls, C_State_Hidden, CurrentCompetitionType);
			}
		}
	}

	/* Check for Navigation events*/
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if (
					(!State.PopUpIsVisible && {{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Side}}}")) ||
					(State.PopUpIsVisible && {{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Center}}}"))
				) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						State = Select(State, Controls, Event.To);
					} else {
						Focus(Event.From, Event.To);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_ShowInGameMenu}}}")) {
					if (
						Event.Input == CMlScriptEvent::EMenuNavAction::Cancel ||
						Event.Input == CMlScriptEvent::EMenuNavAction::AppMenu
					) {
						ShowInGameMenu();
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if (
					(!State.PopUpIsVisible && {{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Side}}}")) ||
					(State.PopUpIsVisible && {{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Center}}}"))
				) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(State, Controls, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOut) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == Controls.PopUpMultiChoice_Rules.Id) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Side}}}", !Event.PopUpMultiChoice.Visible);
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Center}}}", !Event.PopUpMultiChoice.Visible);
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_ShowInGameMenu}}}", !Event.PopUpMultiChoice.Visible);
				}
			}
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	ExpendableButton::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	Transition::ComponentV2(),
	ScoresTable::Component()
],
[]
	);
}