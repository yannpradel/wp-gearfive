/**
 *  UI module: PauseMenu client side
 */
#Const Version		"1.0.0"
#Const ScriptName "Libs/Nadeo/Trackmania/Modes/PlayMap/UIModules/PauseMenu_Client.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/Trackmania/Modes/PlayMap/Constants.Script.txt" as Consts
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as ImageConsts
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMGame/Utils/Images.Script.txt" as Images
#Include "Libs/Nadeo/Trackmania/Modes/UIModules/RaceMapInfos.Script.txt" as RaceMapInfos
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Components/MenuButtonList.Script.txt" as MenuButtonList
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/TMGame/Modes/Base/UIModules/Record_Client.Script.txt" as RecordsModule
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/Trackmania/Stores/MapStore_ML.Script.txt" as MapStore
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/Trackmania/Components/FavoriteMapsTools.Script.txt" as FavoriteMapsTools
#Include "Libs/Nadeo/Trackmania/Components/Settings.Script.txt" as Settings
#Include "Libs/Nadeo/Trackmania/Components/Credits.Script.txt" as Credits
#Include "Libs/Nadeo/Trackmania/Components/ProfilePlayerInfo.Script.txt" as ProfilePlayerInfo
#Include "Libs/Nadeo/Trackmania/Components/PopUpReportSystem.Script.txt" as PopUpReportSystem
#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as ExpendableAsset

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Id "UIModule_PlayMap_PauseMenu"
#Const C_Type CUILayer::EUILayerType::InGameMenu
#Const C_NavGroupName "navgroup-playmap-pausemenu"
#Const C_Event_Restart "PauseMenuEvent_Restart"

#Const C_Row_Resume 0
#Const C_Row_Restart 1
#Const C_Row_FavoriteMap 2
#Const C_Row_ScoresTable 3
#Const C_Row_Records 4
#Const C_Row_Settings 5
#Const C_Row_Report 6
#Const C_Row_UbiConnect 7
#Const C_Row_Margin 8
#Const C_Row_Footer 9

#Const C_SoundFadeTime_EnterMenu 150

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the module manialink
 *
 *  @return                           The module manialink
 */
Text GetML() {
	//L16N [PauseMenu] Resuming the race
	declare Text Text_Resume = _("Resume");
	//L16N [PauseMenu] Action to stop the current run and start over
	declare Text Text_Restart = _("Restart");
	//L16N [PauseMenu] Access the records interface.
	declare Text Text_AccessRecords = _("Access records");
	//L16N [PauseMenu] Button to access the Settings menu.
	declare Text Text_Settings = _("Settings");
	// Do not translate "Ubisoft Connect"
	declare Text Text_UbiConnect = "Ubisoft Connect";
	//L16N [PauseMenu] Button to exit the race.
	declare Text Text_Exit = _("Exit");
	//L16N [PauseMenu] Button to open the report system
	declare Text Text_Report = _("Report");
	//L16N [PauseMenu] Display the time driven by the ghost in the replay
	declare Text Text_Replay = _("|Ghost|Replay");

	declare Vec2 RaceMenuSize = Consts::C_RaceMenu_Size;
	declare Vec2 Size_ListButton = <RaceMenuSize.X-3., (RaceMenuSize.X-3.)*64/748>;
	declare Vec2 Size_FooterButton = <Size_ListButton.X/2 + 1.5, (Size_ListButton.X/2 + 1.5)*88/388>;
	declare Real SizeY_AdjustedListButton = Size_ListButton.Y - (4*Size_ListButton.Y/64); //< Remove the outer pixel of the asset
	declare Real Margin = 1.;

	// Automatic rearranging list of button depending on buttons visibility
	// To add a new button, simply add a new row in the grid and its frameinstance in the ML
	// After buttons visibility update, the grid needs to be updated !
	declare GridConfig = Grid::Create(0., 0., 0., Grid::C_Direction_Bottom);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Resume, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Restart, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_FavoriteMap, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Records, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Settings, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Report, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_UbiConnect, SizeY_AdjustedListButton, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Margin, Margin, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Footer, Size_FooterButton.Y, Grid::C_Align_Center);
	GridConfig = Grid::SetSize(GridConfig, SizeY_AdjustedListButton * (GridConfig.Columns.count-2) + Margin + Size_FooterButton.Y);
	declare Grid = Grid::Compile(GridConfig);
	declare Text GridConfigJson = GridConfig.tojson();

	return MV::Create(
C_Id, 3,
"""
<frame z-index="{{{Consts::C_ZIndex_PauseMenu}}}" hidden="1" id="frame-global">
	<quad bgcolor="000" size="320 180" fullscreen="1" halign="center" valign="center" z-index="-3" opacity=".3"/>
	<frameinstance modelid="{{{RaceMapInfos::C_Name}}}" pos="{{{MLHelpers::Skew(0., 42.3, 10.)}}}" z-index="-2"/>
	<frameinstance modelid="{{{MenuButtonList::C_Name}}}" id="frame-button-list-pause-play-map" z-index="1" />

	<frame id="frame-report-system" z-index="1" hidden="1">
		<frameinstance id="frame-report-system-pause-menu-campaign" modelid="{{{PopUpReportSystem::C_Name}}}" />
	</frame>

	<frame id="frame-settings" z-index="2" hidden="1">
		<frameinstance modelid="{{{Settings::C_Name}}}" />
	</frame>

	<frame id="frame-credits" z-index="3" hidden="1">
		<frameinstance modelid="{{{Credits::C_Name}}}" />
	</frame>

	<frame id="frame-profile" z-index="4" hidden="1">
		<frameinstance
			modelid="{{{ProfilePlayerInfo::C_Name}}}"
			data-enable-players-pager="0"
			data-enable-zone-selection="0"
			data-enable-my-access-info="0"
			data-enable-garage="0"
		/>
	</frame>

	<frame id="frame-buttons-container" class="{{{Grid::C_Class_Container}}}" pos="{{{MLHelpers::Skew(0.5, 10., 10.)}}}">
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-resume"
			class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
			data-grid-row="{{{C_Row_Resume}}}"
			data-text="{{{Text_Resume}}}"
			data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
			data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-opacityunfocus=".9"
			data-textitalicslope=".2"
			data-textsize="4"
			data-textopacityunfocus=".4"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel;appmenu;up;down"
			data-nav-targets="_;_;_;button-exit;button-restart"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-restart"
			class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
			data-grid-row="{{{C_Row_Restart}}}"
			data-text="{{{Text_Restart}}}"
			data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
			data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-opacityunfocus=".9"
			data-textsize="4"
			data-textopacityunfocus=".4"
			data-textitalicslope=".2"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel;appmenu;up;down"
			data-nav-targets="_;_;_;button-resume;button-favorite-map"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			z-index="2"
		/>
		<frame id="frame-favorite-map" class="{{{Grid::C_Class_Element}}}" data-grid-row="{{{C_Row_FavoriteMap}}}">
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-favorite-map"
				class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}}"
				data-text="{{{ImageConsts::C_AddFavoriteMap}}}"
				data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
				data-labelsize="{{{Size_ListButton.X-25.}}} {{{Size_ListButton.Y}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-opacityunfocus=".9"
				data-textsize="4"
				data-textopacityunfocus=".4"
				data-textitalicslope=".2"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-restart;button-records"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				z-index="2"
				data-menusounds-selectsound="IngameSelectStartRace"
			/>
			<frameinstance id="frame-loading-spinner" z-index="3" scale="0.5" pos="55 0" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" modelid="{{{LoadingSpinner::C_Name}}}"/>
		</frame>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-records"
			class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
			data-grid-row="{{{C_Row_Records}}}"
			data-text="{{{Text_AccessRecords}}}"
			data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
			data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-opacityunfocus=".9"
			data-textitalicslope=".2"
			data-textsize="4"
			data-textopacityunfocus=".4"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel;appmenu;up;down"
			data-nav-targets="_;_;_;button-favorite-map;button-settings"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-settings"
			class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
			data-grid-row="{{{C_Row_Settings}}}"
			data-text="{{{Text_Settings}}}"
			data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
			data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-opacityunfocus=".9"
			data-textsize="4"
			data-textopacityunfocus=".4"
			data-textitalicslope=".2"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel;appmenu;up;down"
			data-nav-targets="_;_;_;button-records;button-report"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			z-index="2"
		/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-report"
			class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
			data-grid-row="{{{C_Row_Report}}}"
			data-text="{{{Text_Report}}}"
			data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner}}}"
			data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Obtuse_Corner_Focus}}}"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-opacityunfocus=".9"
			data-textsize="4"
			data-textopacityunfocus=".4"
			data-textitalicslope=".2"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel;appmenu;up;down"
			data-nav-targets="_;_;_;button-settings;button-ubi-connect"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			z-index="2"
		/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-ubi-connect"
			class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
			data-grid-row="{{{C_Row_UbiConnect}}}"
			data-text="{{{Text_UbiConnect}}}"
			data-size="{{{Size_ListButton.X}}} {{{Size_ListButton.Y}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Round_Corner}}}"
			data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Round_Corner_Focus}}}"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-opacityunfocus=".9"
			data-textsize="4"
			data-textopacityunfocus=".4"
			data-textitalicslope=".2"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel;appmenu;up;down"
			data-nav-targets="_;_;_;button-report;button-exit"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			z-index="2"
		/>
		<frame id="frame-footer" class="{{{Grid::C_Class_Element}}}" data-grid-row="{{{C_Row_Footer}}}">
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-exit"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				pos="{{{-Size_FooterButton.X/2 + 1.3}}} 0."
				data-grid-row="{{{C_Row_Footer}}}"
				data-text="{{{Text_Exit}}}"
				data-size="{{{Size_FooterButton.X}}} {{{Size_FooterButton.Y}}}"
				data-labelsize="{{{Size_FooterButton.X}}} {{{Size_FooterButton.Y}}}"
				data-textxpos="0.55"
				data-opacityunfocus=".9"
				data-image="{{{Images::C_ImageUrl_ModeMenu_Button_Exit_Round}}}"
				data-imagefocus="{{{Images::C_ImageUrl_ModeMenu_Button_Exit_Round}}}"
				data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFive)}}}"
				data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
				data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-icon="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-iconxpos=".2"
				data-iconypos="-.49"
				data-textsize="4"
				data-textopacityunfocus=".25"
				data-iconopacityunfocus=".25"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-textitalicslope=".2"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down"
				data-nav-targets="_;_;_;button-ubi-connect;button-resume"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frame id="frame-error-message" pos="-3 -14">
				<frameinstance id="frame-bg-error" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_ListButton.X * 0.95}}}" data-height="{{{Size_ListButton.Y * 0.7}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextError)}}}" data-opacity="0." data-halign="center" data-valign="center2" z-index="-1"/>
				<label id="label-error" size="{{{Size_ListButton.X * 0.9}}} {{{Size_ListButton.Y}}}" halign="center" valign="center2" textprefix="$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textsize="3" textcolor="FFF"/>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/Trackmania/Structures/ReportStruct.Script.txt" as ReportStruct

#Struct K_Controls {
	CMlFrame Button_FavoriteMap;
	CMlFrame Frame_BgError;
	CMlLabel Label_Error;
	CMlFrame Frame_LoadingSpinner;
	CMlFrame Frame_Settings;
	CMlFrame Frame_Credits;
	CMlFrame Frame_Profile;
	CMlFrame Frame_Report;
	CMlFrame Frame_ReportPopUp;
}

#Struct K_State {
	K_Controls Controls;
	Boolean RecordModuleAvailable;
	Boolean SettingsAreDisplayed;
	Boolean CreditsAreDisplayed;
	Boolean ProfileIsDisplayed;
	Boolean ReportIsDisplayed;
	Task::K_Task Task_ShowUbisoftConnect;
}

#Const C_Component_Report {{{dump(PopUpReportSystem::C_Name)}}}
#Const C_Component_Settings {{{dump(Settings::C_Name)}}}
#Const C_Component_Credits {{{dump(Credits::C_Name)}}}
#Const C_Component_Profile {{{dump(ProfilePlayerInfo::C_Name)}}}
""",
"""
Void Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Boolean GroupShouldBeEnabled(K_State _State) {
	return !_State.SettingsAreDisplayed && !_State.CreditsAreDisplayed && !_State.ProfileIsDisplayed && !_State.ReportIsDisplayed;
}

K_State Private_DisplaySettings(K_State _State, Boolean _Display, Boolean _ResetSettingsCategory) {
	declare K_State State = _State;
	State.SettingsAreDisplayed = _Display;
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", GroupShouldBeEnabled(State));
	{{{Settings::P}}}Enable(State.SettingsAreDisplayed, _ResetSettingsCategory);
	State.Controls.Frame_Settings.Visible = State.SettingsAreDisplayed;
	return State;
}

K_State Private_DisplayCredits(K_State _State, Boolean _Display) {
	declare K_State State = _State;
	State.CreditsAreDisplayed = _Display;
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", GroupShouldBeEnabled(State));
	{{{Credits::P}}}Enable(State.CreditsAreDisplayed);
	State.Controls.Frame_Credits.Visible = State.CreditsAreDisplayed;
	return State;
}

K_State Private_DisplayProfile(K_State _State, Boolean _Display) {
	declare K_State State = _State;
	State.ProfileIsDisplayed = _Display;
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", GroupShouldBeEnabled(State));
	{{{ProfilePlayerInfo::P}}}Enable(State.ProfileIsDisplayed);
	if (State.ProfileIsDisplayed) {
		{{{ProfilePlayerInfo::P}}}SetUser(LocalUser);
	}
	State.Controls.Frame_Profile.Visible = State.ProfileIsDisplayed;
	return State;
}

K_State Private_DisplayReportSystem(K_State _State, Boolean _Display) {
	declare K_State State = _State;

	State.ReportIsDisplayed = _Display && Map != Null && Map.MapInfo != Null;
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", GroupShouldBeEnabled(State));

	if (State.ReportIsDisplayed) {
		// Report current map
		declare ReportStruct::LibStructuresReport_K_ReportData[Integer] Data =
		[
			ReportStruct::C_ReportTarget_Track => ReportStruct::LibStructuresReport_K_ReportData {
				Details = [Map.MapInfo.Name],
				Ids = [Map.MapInfo.MapUid],
				Contexts = [["From" => "InGame PlayMap"]]
			}
		];

		{{{PopUpReportSystem::P}}}SetReportTargetsData(This, State.Controls.Frame_ReportPopUp, Data);
		{{{PopUpReportSystem::P}}}Display(This, State.Controls.Frame_ReportPopUp, True);
	}

	State.Controls.Frame_Report.Visible = State.ReportIsDisplayed;

	return State;
}

K_State DisplayComponent(K_State _State, Text _ComponentName, Boolean _Display, Boolean _ResetSettingsCategory) {
	declare K_State State = _State;

	switch (_ComponentName) {
		case C_Component_Settings: {
			if (_Display) {
				State = Private_DisplayCredits(State, False);
				State = Private_DisplayProfile(State, False);
			}
			State = Private_DisplaySettings(State, _Display, _ResetSettingsCategory);
		}
		case C_Component_Credits: {
			if (_Display) {
				State = Private_DisplaySettings(State, False, True);
				State = Private_DisplayProfile(State, False);
			}
			State = Private_DisplayCredits(State, _Display);
		}
		case C_Component_Profile: {
			if (_Display) {
				State = Private_DisplaySettings(State, False, True);
				State = Private_DisplayCredits(State, False);
			}
			State = Private_DisplayProfile(State, _Display);
		}
		case C_Component_Report: {
			State = Private_DisplayReportSystem(State, _Display);
		}
	}

	return State;
}
K_State DisplayComponent(K_State _State, Text _ComponentName, Boolean _Display) {
	return DisplayComponent(_State, _ComponentName, _Display, True);
}

K_State Select(K_State _State, CMlControl _Control) {
	if (_Control == Null) return _State;

	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-resume": CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		case "button-favorite-map": {{{FavoriteMapsTools::P}}}SelectFavoriteButton(Map);
		case "button-records": {
			{{{RecordsModule::P}}}EnableControllerNavigation();
			CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		}
		case "button-restart": {
			(ParentApp as CManiaAppPlayground).SendCustomEvent("{{{C_Event_Restart}}}", []);
			CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		}
		case "button-settings": {
			State = DisplayComponent(State, C_Component_Settings, True);
		}
		case "button-report": {
			State = DisplayComponent(State, C_Component_Report, True);
		}
		case "button-ubi-connect": State.Task_ShowUbisoftConnect = Task::DestroyAndCreate(State.Task_ShowUbisoftConnect, UserMgr, UserMgr.UbisoftConnect_Show(MainUser::GetMainUserId()));
		case "button-exit": CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
	}

	return State;
}

Void SetErrorMessage(CMlLabel _Label, CMlFrame _Frame_BgError, Text _Message) {
	_Label.Value = _Message;
	AnimMgr.Flush(_Label);
	AnimMgr.Add(_Label, "<a opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.Add(_Label, "<a opacity=\"0.\" />", Now + 4000, 500, CAnimManager::EAnimManagerEasing::QuadOut);
	{{{ExpendableAsset::P}}}FlushAnimations(This, _Frame_BgError);
	{{{ExpendableAsset::P}}}AddOpacityAnimation(This, _Frame_BgError, 1., 250, CAnimManager::EAnimManagerEasing::QuadOut);
	{{{ExpendableAsset::P}}}AddOpacityAnimation(This, _Frame_BgError, 0., Now + 4000, 500, CAnimManager::EAnimManagerEasing::QuadOut);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_ButtonsContainer;
declare CMlFrame Button_Resume;
declare CMlFrame Button_Records;

declare K_State State;
declare Grid::K_GridConfig GridConfig;

declare netwrite Boolean Net_PlayMap_PauseMenu_IsAgainstReplay for Teams[0];

declare Boolean DisplayModule;
declare Boolean Hide321GoIsDefault;
declare Boolean PageWasHidden;
declare Boolean IsAgainstReplay;
declare Text MapUid;
declare Boolean GoBackToSettings;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_ButtonsContainer <=> (Frame_Global.GetFirstChild("frame-buttons-container") as CMlFrame);
Button_Resume <=> (Frame_Global.GetFirstChild("button-resume") as CMlFrame);
Button_Records <=> (Frame_Global.GetFirstChild("button-records") as CMlFrame);

State = K_State {
	RecordModuleAvailable = {{{RecordsModule::P}}}IsRecordsModuleAvailable(),
	Task_ShowUbisoftConnect = Task::GetEmptyTask(),
	Controls = K_Controls {
		Button_FavoriteMap = (Frame_Global.GetFirstChild("button-favorite-map") as CMlFrame),
		Frame_BgError = (Frame_Global.GetFirstChild("frame-bg-error") as CMlFrame),
		Label_Error = (Frame_Global.GetFirstChild("label-error") as CMlLabel),
		Frame_LoadingSpinner = (Frame_Global.GetFirstChild("frame-loading-spinner") as CMlFrame),
		Frame_Settings = (Frame_Global.GetFirstChild("frame-settings") as CMlFrame),
		Frame_Credits = (Frame_Global.GetFirstChild("frame-credits") as CMlFrame),
		Frame_Profile = (Frame_Global.GetFirstChild("frame-profile") as CMlFrame),
		Frame_Report = (Frame_Global.GetFirstChild("frame-report-system") as CMlFrame),
		Frame_ReportPopUp = (Frame_Global.GetFirstChild("frame-report-system-pause-menu-campaign") as CMlFrame)
	}
};

DisplayModule = Frame_Global.Visible;
Hide321GoIsDefault = True;
PageWasHidden = !PageIsVisible;
GridConfig.fromjson({{{"\"\"\""^GridConfigJson^"\"\"\""}}});
MapUid = "";
GoBackToSettings = False;

{{{Navigation::P}}}UseLocalEvents(This, True);
{{{Settings::P}}}UseLocalEvents(True);
{{{Settings::P}}}EnableCredits(True);
{{{Settings::P}}}EnableProfile(True);
{{{Credits::P}}}UseLocalEvents(True);
{{{ProfilePlayerInfo::P}}}UseLocalEvents(True);
Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Button_Resume);
{{{RaceMapInfos::P}}}SetDisplayed(Frame_Global.Visible);
{{{Button::P}}}SetVisibilityAndNavigation(Button_Records, State.RecordModuleAvailable);
Grid::Update(GridConfig, AnimMgr, Frame_ButtonsContainer, 10., False, True);
{{{RecordsModule::P}}}DisableControllerNavigation();
***

***MainLoop***
***
if (IsInGameMenuDisplayed && !EnableMenuNavigationInputs) {
	EnableMenuNavigation(True, False, False, Null, {{{Consts::C_InputPriority_PauseMenu}}});
	Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Button_Resume);
	{{{MenuSounds::P}}}SetSoundBalanceState(This, {{{MenuSounds::P}}}C_PauseMenu_State, {{{C_SoundFadeTime_EnterMenu}}});
} else if (!IsInGameMenuDisplayed && EnableMenuNavigationInputs) {
	EnableMenuNavigation(False, False, False, Null, {{{Consts::C_InputPriority_PauseMenu}}});
	{{{MenuSounds::P}}}SetSoundBalanceState(This, {{{MenuSounds::P}}}C_Playing_State, {{{C_SoundFadeTime_EnterMenu}}});
}
if (PageIsVisible) {
	if (!ClientUI.OverlayHide321Go) {
		ClientUI.OverlayHide321Go = True;
		Hide321GoIsDefault = False;
	}

	if (PageWasHidden) {
		PageWasHidden = False;

		// Check if the favorite attribute of current map updated while the menu was hidden
		{{{FavoriteMapsTools::P}}}UdpateFavoriteButton(
			State.Controls.Button_FavoriteMap,
			State.Controls.Frame_LoadingSpinner,
			State.Controls.Frame_BgError,
			State.Controls.Label_Error,
			MapUid
		);
	}

	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_PlayMap_PauseMenu_IsVisible for Owner;
		if (DisplayModule != Net_PlayMap_PauseMenu_IsVisible) {
			DisplayModule = Net_PlayMap_PauseMenu_IsVisible;
			Frame_Global.Visible = Net_PlayMap_PauseMenu_IsVisible;
			{{{RaceMapInfos::P}}}SetDisplayed(Frame_Global.Visible);
		}
	}

	if (State.RecordModuleAvailable != {{{RecordsModule::P}}}IsRecordsModuleAvailable()) {
		State.RecordModuleAvailable = {{{RecordsModule::P}}}IsRecordsModuleAvailable();
		{{{Button::P}}}SetVisibilityAndNavigation(Button_Records, State.RecordModuleAvailable);
		Grid::Update(GridConfig, AnimMgr, Frame_ButtonsContainer, 10., False, True);
	}

	// Open Ubisoft Connect Overlay task
	if (Task::IsInitialized(State.Task_ShowUbisoftConnect)) {
		State.Task_ShowUbisoftConnect = Task::Update(State.Task_ShowUbisoftConnect);
		if (!Task::IsRunning(State.Task_ShowUbisoftConnect)) {
			if (!Task::IsSuccess(State.Task_ShowUbisoftConnect)) {
				SetErrorMessage(
					State.Controls.Label_Error,
					State.Controls.Frame_BgError,
					TL::Compose(
						"%1 (%2)",
						//L16N Error while opening Ubisoft Connect overlay.
						_("Error while opening Ubisoft Connect"),
						Task::GetCustomError(State.Task_ShowUbisoftConnect).Code
					)
				);
			}
			State.Task_ShowUbisoftConnect = Task::Destroy(State.Task_ShowUbisoftConnect);
		}
	}

	if (Frame_Global.Visible) {
		if (IsAgainstReplay != Net_PlayMap_PauseMenu_IsAgainstReplay) {
			IsAgainstReplay = Net_PlayMap_PauseMenu_IsAgainstReplay;
			if (IsAgainstReplay) {
				{{{RaceMapInfos::P}}}SetTimeLegend("{{{Text_Replay}}}");
			} else {
				{{{RaceMapInfos::P}}}SetTimeLegend("");
			}
		}

		// Check if map has changed
		if (Map != Null && Map.MapInfo != Null) {
			if (MapUid != Map.MapInfo.MapUid) {
				MapUid = Map.MapInfo.MapUid;
				// Check if current map is player's favorite
				declare {{{MapStore::P}}}K_CurrentMap CurrentMap = {{{MapStore::P}}}GetCurrentMap();
				if (CurrentMap.Uid != MapUid) {
					{{{FavoriteMapsTools::P}}}UdpateFavoriteButton(
						State.Controls.Button_FavoriteMap,
						State.Controls.Frame_LoadingSpinner,
						State.Controls.Frame_BgError,
						State.Controls.Label_Error,
						MapUid
					);
					if (!{{{UserStore::P}}}IsOfflineMode()) {{{MapStore::P}}}Action_GetMap(This, MapUid);
				}
			}
		}

		foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{Navigation::P}}}C_EventType_NavigateInput: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							State = Select(State, Event.To);
						} else if (
							Event.Input == CMlScriptEvent::EMenuNavAction::Cancel ||
							Event.Input == CMlScriptEvent::EMenuNavAction::AppMenu
						) {
							CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
						} else {
							Focus(Event.From, Event.To);
						}
					}
				}
				case {{{Navigation::P}}}C_EventType_NavigateMouse: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							State = Select(State, Event.To);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							Focus(Event.From, Event.To);
						}
					}
				}
			}
		}

		foreach (Event in {{{Settings::P}}}PendingEvents) {
			switch (Event.Type) {
				case {{{Settings::P}}}C_EventType_Back: {
					State = DisplayComponent(State, C_Component_Settings, False);
				}
				case {{{Settings::P}}}C_EventType_OpenCredits: {
					GoBackToSettings = True;
					State = DisplayComponent(State, C_Component_Credits, True);
				}
				case {{{Settings::P}}}C_EventType_OpenProfile: {
					GoBackToSettings = True;
					State = DisplayComponent(State, C_Component_Profile, True);
				}
			}
		}

		foreach (Event in {{{Credits::P}}}PendingEvents) {
			switch (Event.Type) {
				case {{{Credits::P}}}C_EventType_CloseCredits: {
					if (GoBackToSettings) {
						GoBackToSettings = False;
						State = DisplayComponent(State, C_Component_Settings, True, False);
					} else {
						State = DisplayComponent(State, C_Component_Credits, False);
					}
				}
			}
		}

		foreach (Event in {{{ProfilePlayerInfo::P}}}PendingEvents) {
			switch (Event.Type) {
				case {{{ProfilePlayerInfo::P}}}C_EventType_Close: {
					if (GoBackToSettings) {
						GoBackToSettings = False;
						State = DisplayComponent(State, C_Component_Settings, True, False);
					} else {
						State = DisplayComponent(State, C_Component_Profile, False);
					}
				}
			}
		}

		foreach (Event in {{{PopUpReportSystem::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{PopUpReportSystem::P}}}C_EventType_Close: {
					State = DisplayComponent(State, C_Component_Report, False);
				}
			}
		}

		if (Owner == Null && DisplayModule) {
			DisplayModule = False;
			Frame_Global.Visible = DisplayModule;
			{{{RaceMapInfos::P}}}SetDisplayed(Frame_Global.Visible);
		}
	}

	/* Favorite map events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				if (Event.CustomEventType == {{{MapStore::P}}}C_Event_CurrentMapUpdated) {
					{{{FavoriteMapsTools::P}}}UdpateFavoriteButton(
						State.Controls.Button_FavoriteMap,
						State.Controls.Frame_LoadingSpinner,
						State.Controls.Frame_BgError,
						State.Controls.Label_Error,
						MapUid
					);
				}
			}
		}
	}
} else {
	if (!PageWasHidden) PageWasHidden = True;
	if (!Hide321GoIsDefault) {
		ClientUI.OverlayHide321Go = False;
		Hide321GoIsDefault = True;
	}
}

// The pause menu is opened and capturing inputs but not visible
// Close it to avoid being stuck
// This can happen if the `PauseMenu` UI module is hidden
// but the player is allowed to open the pause menu anymay
if (IsInGameMenuDisplayed && EnableMenuNavigationInputs && PageIsVisible && !Frame_Global.Visible) {
	CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
}
***
""",
[
	Navigation::ComponentV2(),
	RaceMapInfos::Component(),
	MapStore::ComponentV2(),
	FavoriteMapsTools::Component(),
	LoadingSpinner::ComponentV2(),
	UserStore::ComponentV2(),
	Button::ComponentV2(),
	MenuButtonList::Component(),
	MenuSounds::ComponentV2(),
	RecordsModule::Component(),
	Settings::Component(),
	Credits::Component(),
	PopUpReportSystem::ComponentV2(),
	ProfilePlayerInfo::Component()
],
[]
	);
}