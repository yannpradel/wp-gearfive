/**
 *	Overlay: Club widget
 */
#Const Version		"1.0.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Overlays/ClubWidget.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/Trackmania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/Trackmania/Components/BannerAnimation.Script.txt" as BannerAnim
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Overlay_ClubWidget"
#Const C_NavGroupName "navgroup-overlay-club-widget"
#Const C_NavGroupName_Global "navgroup-overlay-club-widget-global"

#Const C_Class_LabelClubActivity "class-label-club-activity"

#Const C_Size_LabelClubActivity 100
#Const C_Size_FrameClubActivity 58.

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [Club Overlay] If the player doesn't have a pinned club, show them the most popular clubs and suggest them to explore them
	declare Text Text_ExploreNewClubs = _("Explore new clubs");
	//L16N [Club Overlay] If the player has a pinned club, suggest it to explore it
	declare Text Text_ExploreYourClub = _("Explore your club");
	//L16N Message displayed to highlight the featured club activity. I%1 will be replaced by the activity's name. e.g "Check the new activity 'Campaign Fall 2021'!"
	declare Text Text_DefaultActivity = _("Check the new activity '$<%1$>'!");

	declare Vec2 WidgetSize = <109., 14.> * 0.84;
	declare Vec2 ClubIconSize = <32., 14.> * 0.84;

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$t$i" textcolor="FFFFFF" textsize="2"/>
</stylesheet>
<frame
	id="frame-global"
	z-index="{{{Const::C_ZIndex_ClubOverlay}}}"
	pos="104.5 73"
	data-nav-inputs="{{{Const::C_NavInput_ClubWidget}}}"
	data-nav-targets="_"
	data-nav-selected="1"
	data-nav-group="{{{C_NavGroupName_Global}}}"
	class="{{{Navigation::C_Class}}}"
>
	<frameinstance id="button-club"
		modelid="{{{Button::C_Name}}}"
		z-index="-1"
		class="{{{Navigation::C_Class}}}"
		data-size="{{{WidgetSize.X}}} {{{WidgetSize.Y}}}"
		data-labelsize="{{{WidgetSize.X * 0.64}}} {{{WidgetSize.Y}}}"
		data-textsize="3."
		data-textitalicslope="0.2"
		data-fitlabel="1."
		data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
		data-texthalign="right"
		data-textxpos="0.67"
		data-textypos="-0.35"
		data-image="{{{Const::C_ImageUrl_Overlay_Widget_BG}}}"
		data-contourimage="{{{Const::C_ImageUrl_Overlay_Widget_Contour}}}"
		data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
		data-contouropacityunfocus=".0"
		data-contouropacityfocus="1."
		data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
		data-textcolor="FFF"
		data-halign="center"
		data-valign="center"
		data-filter-profanities="{{{Tools::C_FilterProfanities_Always}}}"

		data-nav-inputs="select"
		data-nav-targets="_"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
	/>
	{{{BannerAnim::InjectML(
		"""<frameinstance modelid="{{{ControlBlockList::C_Name}}}" class="{{{C_Class_LabelClubActivity}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-text="{{{Text_ExploreNewClubs}}}" data-textsize="1" data-textsize-fitlabel-min="0.5" data-textsize-fitlabel-step="0.1" data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" data-halign="right" data-valign="center2" data-size="{{{C_Size_LabelClubActivity}}} 10" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-textprefix="$t$i" />""",
		"club-activity",
		C_Size_FrameClubActivity,
		10.,
		14.,
		-3.75,
		"center2",
		"right"
	)}}}
	<frameinstance id="control-block-list-club-icon" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" pos="{{{WidgetSize.X * 0.51}}} 0" data-size="{{{ClubIconSize.X}}} {{{ClubIconSize.Y}}}" data-keepratio="Clip" data-alphamask="{{{Const::C_ImageUrl_Overlay_Club_Icon_Mask}}}" data-halign="right" data-valign="center" />
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Privileges.Script.txt" as Privileges
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/Trackmania/ClubEdition.Script.txt" as ClubEdition

#Const C_PopularClubUpdateFrequency 600000 //10min
#Const C_PopularClubDisplayDuration 8000
#Const C_MaxClubsDisplayed {{{Const::C_ClubWidget_MaxClubsDisplayed}}}
""",
"""
declare {{{ClubStruct::P}}}K_Club G_CurrentClubDisplayed;

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void Select(CMlControl _Control, Boolean _IsPinnedClub) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return;

	if (_Control.ControlId == "button-club") {
		if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_ViewClub)) {
			ClubEdition::GoToPage(This, {{{Router::P}}}GetCurrentRoutePath(This), RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_ViewClub));
		} else if (_IsPinnedClub || !{{{ControlBlockList::P}}}IsBlocked(This, G_CurrentClubDisplayed.AuthorAccountId)) {
			{{{Router::P}}}SetParentPath(This, RoutePaths::C_Path_ClubDetails, {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, RoutePaths::C_Path_ClubDetails, [RoutePaths::C_Query_Club => G_CurrentClubDisplayed.tojson()]);
		}
	}
}

Void UpdateCurrentClub(
	CMlFrame _Button_CurrentClub,
	CMlFrame _ControlBlockList_ClubIcon,
	CMlFrame _ControlBlockList_ClubActivity1,
	CMlFrame _ControlBlockList_ClubActivity2,
	{{{ClubStruct::P}}}K_Club _Club,
	Boolean _IsPinnedClub
) {
	G_CurrentClubDisplayed = _Club;

	// Club name if pinned or most popular clubs otherwise
	if ({{{ControlBlockList::P}}}IsBlocked(This, _Club.AuthorAccountId)) {
		{{{Button::P}}}SetValue(This, _Button_CurrentClub, {{{ControlBlockList::P}}}C_DefaultTextValueBlocked);
		{{{MenuSounds::P}}}SetCustomSelectSound(_Button_CurrentClub, {{{MenuSounds::P}}}C_Sound_SelectError);
	} else {
		{{{Button::P}}}SetValue(This, _Button_CurrentClub, _Club.Name);
		{{{MenuSounds::P}}}SetCustomSelectSound(_Button_CurrentClub, {{{MenuSounds::P}}}C_Sound_Select);
	}

	// Club icon
	if (_Club.IconUrl != "") {
		{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, _ControlBlockList_ClubIcon, _Club.AuthorAccountId, _Club.IconUrl);
	} else {
		{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, _ControlBlockList_ClubIcon, "", "{{{Const::C_ImageUrl_Overlay_Club_Icon_BG}}}");
	}

	// Club activity
	if (
		_Club.Id != {{{ClubStruct::P}}}C_ClubNullId &&
		_Club.FeaturedActivity.Id != {{{ClubStruct::P}}}C_ActivityNullId
	) {
		declare Text FeaturedActivityAd = TL::Compose(
			{{{ClubStruct::P}}}C_ClubActivity_FeaturedAd.get(_Club.FeaturedActivity.Type, "{{{Text_DefaultActivity}}}"),
			FilterProfanities(_Club.FeaturedActivity.Name)
		);
		{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, _ControlBlockList_ClubActivity1, [_Club.FeaturedActivity.CreatorAccountId, _Club.FeaturedActivity.LatestEditorAccountId], FeaturedActivityAd);
		{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, _ControlBlockList_ClubActivity2, [_Club.FeaturedActivity.CreatorAccountId, _Club.FeaturedActivity.LatestEditorAccountId], FeaturedActivityAd);
	}	else if (_IsPinnedClub) {
		{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, _ControlBlockList_ClubActivity1, [], "{{{Text_ExploreYourClub}}}");
		{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, _ControlBlockList_ClubActivity2, [], "{{{Text_ExploreYourClub}}}");
	} else {
		{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, _ControlBlockList_ClubActivity1, [], "{{{Text_ExploreNewClubs}}}");
		{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, _ControlBlockList_ClubActivity2, [], "{{{Text_ExploreNewClubs}}}");
	}
	// Check if we need to anim the label to see it completely
	declare Real ActivityWidth = {{{ControlBlockList::P}}}GetLabelWidth(This, _ControlBlockList_ClubActivity2);
	{{{BannerAnim::P}}}StopAnimation(); // need to reset the animation anyway
	if (ActivityWidth > {{{C_Size_FrameClubActivity}}}) {
		{{{BannerAnim::P}}}LaunchAnimation(_ControlBlockList_ClubActivity1, _ControlBlockList_ClubActivity2, ActivityWidth + 10, {{{BannerAnim::P}}}C_AnimSpeedNormal);
		_ControlBlockList_ClubActivity2.Visible = True;
	} else {
		_ControlBlockList_ClubActivity2.Visible = False;
	}
}

Void EnableNavigation(Boolean _IsVisible, Text _CurrentRoutePath) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName_Global}}}", _IsVisible && RoutePaths::IsClubAndProfileOverlaysNavEnabled(_CurrentRoutePath));
}

Void UpdateVisibility(CMlFrame _Frame_Global, Boolean _HasPrivilege, Boolean _IsOffline, Integer _PopularClubsCount, Integer _PinnedClubId, Text _CurrentRoutePath) {
	_Frame_Global.Visible = _HasPrivilege && !_IsOffline && (_PopularClubsCount > 0 || _PinnedClubId != {{{ClubStruct::P}}}C_ClubNullId);
	EnableNavigation(_Frame_Global.Visible, _CurrentRoutePath);
}

{{{ClubStruct::P}}}K_Club[] LoadPopularClubs() {
	declare {{{ClubStruct::P}}}K_Club[Integer] Clubs = {{{ClubStore::P}}}GetAllClubs();
	declare Integer[] PopularClubsIds;
	declare {{{ClubStruct::P}}}K_Club[] PopularClubs;
	for (I, 0, C_MaxClubsDisplayed-1) {
		if (Clubs.existskey(I)) {
			if (PopularClubs.existskey(I)) {
				if (PopularClubs[I].Id == Clubs[I].Id) {
					declare {{{ClubStruct::P}}}K_Activity TmpFeaturedActivity = PopularClubs[I].FeaturedActivity;
					PopularClubs[I] = Clubs[I];
					PopularClubs[I].FeaturedActivity = TmpFeaturedActivity;
				} else {
					PopularClubs[I] = Clubs[I];
				}
			} else {
				PopularClubs.add(Clubs[I]);
			}
			PopularClubsIds.add(Clubs[I].Id);
		} else {
			break;
		}
	}
	if (PopularClubsIds.count > 0) {{{ClubStore::P}}}Action_LoadClubsFeaturedActivity(This, PopularClubsIds);
	return PopularClubs;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Button_Club;
declare CMlFrame ControlBlockList_ClubIcon;
declare CMlFrame ControlBlockList_ClubActivity1;
declare CMlFrame ControlBlockList_ClubActivity2;

declare {{{ClubStruct::P}}}K_Club PinnedClub;
declare {{{ClubStruct::P}}}K_Club[] PopularClubs;
declare Integer CurrentPopularClubIndex;
declare Integer PopularClubChangeTime;
declare Integer NextPopularClubsUpdateTime;
declare Boolean IsOfflineMode;
declare Text CurrentRoutePath;
declare Boolean IsWaitingPrivilegeCheck;
declare Boolean HasPrivilege;
declare Privileges::K_PrivilegeCheck PrivilegeCheck;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Button_Club <=> (Frame_Global.GetFirstChild("button-club") as CMlFrame);
ControlBlockList_ClubIcon <=> (Frame_Global.GetFirstChild("control-block-list-club-icon") as CMlFrame);
Page.GetClassChildren("{{{C_Class_LabelClubActivity}}}", Frame_Global, True);
if (Page.GetClassChildren_Result.count >= 2) {
	if (Page.GetClassChildren_Result[0] is CMlFrame) ControlBlockList_ClubActivity1 = Page.GetClassChildren_Result[0] as CMlFrame;
	if (Page.GetClassChildren_Result[1] is CMlFrame) ControlBlockList_ClubActivity2 = Page.GetClassChildren_Result[1] as CMlFrame;
}

IsWaitingPrivilegeCheck = True;
HasPrivilege = False;

UpdateCurrentClub(Button_Club, ControlBlockList_ClubIcon, ControlBlockList_ClubActivity1, ControlBlockList_ClubActivity2, PinnedClub, False);
UpdateVisibility(Frame_Global, HasPrivilege, IsOfflineMode, PopularClubs.count, PinnedClub.Id, {{{Router::P}}}GetCurrentRoutePath(This));
NextPopularClubsUpdateTime = Now + C_PopularClubUpdateFrequency;
PopularClubChangeTime = Now + C_PopularClubDisplayDuration;
// Force the page to always be updated otherwise we lose events
PageAlwaysUpdateScript = True;
***

***MainLoop***
***
if (PageIsVisible) {
	if (IsWaitingPrivilegeCheck) {
		IsWaitingPrivilegeCheck = False;
		PrivilegeCheck = Privileges::Check_Create(PrivilegeMgr, MainUser::GetMainUserId(), CPrivilegeMgr::EPrivilege::UseUserCreatedContent);
	}

	if (IsOfflineMode != {{{UserStore::P}}}IsOfflineMode()) {
		IsOfflineMode = {{{UserStore::P}}}IsOfflineMode();
		UpdateVisibility(Frame_Global, HasPrivilege, IsOfflineMode, PopularClubs.count, PinnedClub.Id, {{{Router::P}}}GetCurrentRoutePath(This));
	}

	if (CurrentRoutePath != {{{Router::P}}}GetCurrentRoutePath(This) && !IsOfflineMode) {
		CurrentRoutePath = {{{Router::P}}}GetCurrentRoutePath(This);
		EnableNavigation(Frame_Global.Visible, {{{Router::P}}}GetCurrentRoutePath(This));
	}

	if (!{{{Router::P}}}IsOverlayLocked(This, RoutePaths::C_Path_OverlayName_ClubWidget)) {
		foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{Navigation::P}}}C_EventType_NavigateInput: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName_Global}}}")) {
						if (Event.Input == {{{Const::C_NavAction_ClubWidget}}}) {
							Select(Button_Club, PinnedClub.Id == G_CurrentClubDisplayed.Id);
						}
					}
				}
				case {{{Navigation::P}}}C_EventType_NavigateMouse: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							// Force overlay unfocus when opening the club menu
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Null);
							Select(Event.To, PinnedClub.Id == G_CurrentClubDisplayed.Id);
						} else {
							Focus(Event.From, Event.To);
						}
					}
				}
			}
		}
	}

	// Change current popular club displayed every 5sec if no pinned club
	if (!IsOfflineMode && PinnedClub.Id == {{{ClubStruct::P}}}C_ClubNullId && PopularClubChangeTime > 0 && PopularClubChangeTime <= Now) {
		PopularClubChangeTime = Now + C_PopularClubDisplayDuration;
		UpdateVisibility(Frame_Global, HasPrivilege, IsOfflineMode, PopularClubs.count, PinnedClub.Id, {{{Router::P}}}GetCurrentRoutePath(This));
		if (PopularClubs.count > 0) {
			if (PopularClubs.existskey(CurrentPopularClubIndex)) {
				UpdateCurrentClub(
					Button_Club,
					ControlBlockList_ClubIcon,
					ControlBlockList_ClubActivity1,
					ControlBlockList_ClubActivity2,
					PopularClubs[CurrentPopularClubIndex],
					False
				);
				UpdateVisibility(Frame_Global, HasPrivilege, IsOfflineMode, PopularClubs.count, PinnedClub.Id, {{{Router::P}}}GetCurrentRoutePath(This));
			}
			if (CurrentPopularClubIndex >= C_MaxClubsDisplayed - 1) CurrentPopularClubIndex = 0;
			else CurrentPopularClubIndex += 1;
		}
	}
}

if (!IsOfflineMode && NextPopularClubsUpdateTime > 0 && NextPopularClubsUpdateTime <= Now) {
	NextPopularClubsUpdateTime = Now + C_PopularClubUpdateFrequency;
	PopularClubs = LoadPopularClubs();
}

foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch (Event.CustomEventType) {
				case {{{ClubStore::P}}}C_Event_AllClubsUpdated: {
					PopularClubs = LoadPopularClubs();
				}
				case {{{ClubStore::P}}}C_Event_ClubsFeaturedActivityListUpdated: { // Receive the clubs featured activity list
					if (PinnedClub.Id != 0 && PinnedClub.Id == TL::ToInteger(Event.CustomEventData[0])) {
						PinnedClub.FeaturedActivity = {{{ClubStore::P}}}GetClubsFeaturedActivities(PinnedClub.Id);
						UpdateCurrentClub(
							Button_Club,
							ControlBlockList_ClubIcon,
							ControlBlockList_ClubActivity1,
							ControlBlockList_ClubActivity2,
							PinnedClub,
							True
						);
						UpdateVisibility(Frame_Global, HasPrivilege, IsOfflineMode, PopularClubs.count, PinnedClub.Id, {{{Router::P}}}GetCurrentRoutePath(This));
					} else {
						declare Integer ClubId = TL::ToInteger(Event.CustomEventData[0]);
						foreach (Index => Club in PopularClubs) {
							if (Club.Id == ClubId) PopularClubs[Index].FeaturedActivity = {{{ClubStore::P}}}GetClubsFeaturedActivities(PopularClubs[Index].Id);
						}
					}
				}
				case {{{ClubStore::P}}}C_Event_ClubActivityFeaturedUpdated: { // I updated MY club featured activity
					// So if I pinned my club I load the new featured activity
					if (PinnedClub.Id != {{{ClubStruct::P}}}C_ClubNullId && PinnedClub.Id == TL::ToInteger(Event.CustomEventData[0])) {
						{{{ClubStore::P}}}Action_LoadClubsFeaturedActivity(This, [PinnedClub.Id]);
					}
				}
				default: {
					if (
						Event.CustomEventType == {{{ClubStore::P}}}C_Event_UserCurrentClubMembershipUpdated ||
						Event.CustomEventType == {{{ClubStore::P}}}C_Event_UserCurrentClubUpdated
					) {
						if (RBAC::HasClubPermission({{{ClubStore::P}}}GetUserPinnedClubMembership(), RBAC::C_ClubPermission_IsClubMember)) {
							PinnedClub = {{{ClubStore::P}}}GetUserPinnedClub();
							{{{ClubStore::P}}}Action_LoadClubsFeaturedActivity(This, [PinnedClub.Id]);
							UpdateCurrentClub(
								Button_Club,
								ControlBlockList_ClubIcon,
								ControlBlockList_ClubActivity1,
								ControlBlockList_ClubActivity2,
								PinnedClub,
								True
							);
							UpdateVisibility(Frame_Global, HasPrivilege, IsOfflineMode, PopularClubs.count, PinnedClub.Id, {{{Router::P}}}GetCurrentRoutePath(This));
						} else {
							PinnedClub = {{{ClubStruct::P}}}K_Club {};
							if (PopularClubs.existskey(CurrentPopularClubIndex)) {
								UpdateCurrentClub(
									Button_Club,
									ControlBlockList_ClubIcon,
									ControlBlockList_ClubActivity1,
									ControlBlockList_ClubActivity2,
									PopularClubs[CurrentPopularClubIndex],
									False
								);
								UpdateVisibility(Frame_Global, HasPrivilege, IsOfflineMode, PopularClubs.count, PinnedClub.Id, {{{Router::P}}}GetCurrentRoutePath(This));
							}
							NextPopularClubsUpdateTime = Now; // Update popular clubs activities
						}
					}
				}
			}
		}
	}
}

if (!Privileges::Check_IsComplete(PrivilegeCheck)) {
	PrivilegeCheck = Privileges::Check_Update(PrivilegeCheck);
	if (Privileges::Check_IsComplete(PrivilegeCheck)) {
		HasPrivilege = Privileges::Check_HasPrivilege(PrivilegeCheck);
		PrivilegeCheck = Privileges::Check_Destroy(PrivilegeCheck);
		UpdateVisibility(Frame_Global, HasPrivilege, IsOfflineMode, PopularClubs.count, PinnedClub.Id, {{{Router::P}}}GetCurrentRoutePath(This));
	}
}
***
""",
[
	Transition::ComponentV2(),
	Navigation::ComponentV2(),
	Router::ComponentV2(),
	UserStore::ComponentV2(),
	Button::ComponentV2(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	BannerAnim::Component(),
	ControlBlockList::ComponentV2(),
	MenuSounds::ComponentV2()
],
[]
	);
}