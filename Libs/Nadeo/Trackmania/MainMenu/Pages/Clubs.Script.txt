/**
 *	Page: Clubs
 */
#Const Version		"1.0.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/Clubs.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/CMGame/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/TitleBar2.Script.txt" as TitleBar
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/Trackmania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/Trackmania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_Clubs"
#Const C_NavGroup_Corpus "navgroup-page-clubs-corpus"
#Const C_NavGroup_MouseOnly "navgroup-page-clubs-mouse-only"
#Const C_NavGroup_Global "navgroup-page-clubs-global"
// This affect the number of clubs loaded by request: 3 * n
// n for the current page, n for the previous page and n for the next page
#Const C_DelayBetweenRequest 500 //< milliseconds
#Const C_EventsDelay 150

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

#Const C_MyClubs_ClubsTotal 15
#Const C_MyClubs_ClubsPerPage 6
#Const C_MyClubs_ClubsMargin 5

#Const C_Class_MyClubs_Button "class-page-clubs-my-clubs-button"
#Const C_Class_MyClubs_List "class-page-clubs-my-clubs-list"
#Const C_Class_MyClubs_Focus "class-page-clubs-my-clubs-focus"
#Const C_Class_MyClubs_Pager "class-page-clubs-my-clubs-pager"

#Const C_ScrollView_Grid "grid"
#Const C_ScrollView_List "list"

#Const C_Tab_AllClubs 0
#Const C_Tab_Campaigns 1
#Const C_Tab_Rooms 2
#Const C_Tab_Skins 3
#Const C_Tab_Items 4
#Const C_TabNames [
	//L16N [Page Clubs] Title of the section displaying all the clubs.
	0 => _("|Tab|All clubs"),
	//L16N [Page Clubs] Title of the section displaying all the club campaigns.
	1 => _("|Tab|Campaigns"),
	//L16N [Page Clubs] Title of the section displaying all the club rooms.
	2 => _("|Tab|Rooms"),
	//L16N [Page Clubs] Title of the section displaying all the club skins.
	3 => _("|Tab|Skins"),
	//L16N [Page Clubs] Title of the section displaying all the club items.
	4 => _("|Tab|Items")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_Back = _("Back");
	//L16N [Page Clubs] Title of the section displaying the clubs the player is part of
	declare Text Text_MyClubs = _("My clubs");
	//L16N [Page Clubs] Text displayed when no clubs exists.
	declare Text Text_NoClubs = _("No clubs");
	//L16N [Page Clubs] Text displayed when no club campaigns exists.
	declare Text Text_NoClubCampaigns = _("No club campaigns");
	//L16N [Page Clubs] Text displayed when no club rooms exists.
	declare Text Text_NoClubRooms = _("No club rooms");
	//L16N [Page Clubs] Text displayed when no club skins exists.
	declare Text Text_NoClubSkins = _("No club skins");
	//L16N [Page Clubs] Text displayed when no club items exists.
	declare Text Text_NoClubItems = _("No club items");
	//L16N [Page Clubs] Text displayed when a search returns no results.
	declare Text Text_NoSearchResult = _("Your search did not return any results");
	//L16N [Page Clubs] Text displayed while loading clubs.
	declare Text Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [Page Clubs] Text displayed while loading data of the selected tab.
	declare Text Text_RetrievingData = _("Retrieving data");
	//L16N [Page Clubs] Button to create a new club
	declare Text Text_CreateClub = _("Create your club");
	//L16N [Page Clubs] Display the number of track in a club campaign.
	declare Text Text_Track = _("1 track");
	//L16N [Page Clubs] Display the number of tracks in a club campaign.
	declare Text Text_Tracks = _("%1 tracks");
	//L16N [Page Clubs] Display the number of skin in a club skin.
	declare Text Text_Skin = _("1 skin");
	//L16N [Page Clubs] Display the number of skins in a club skin.
	declare Text Text_Skins = _("%1 skins");

	declare Text[Text] HeaderButtons_MLs;
	declare Real SizeX_VerticalButtonMargin = 3.2;
	declare Vec2 Size_VerticalButton = MLHelpers::KeepRatioFromY(612., 800., 67.);
	declare Vec2 Size_AdjustedVerticalButton = <Size_VerticalButton.X - MLHelpers::SkewX(Size_VerticalButton.Y, 10.),	Size_VerticalButton.Y>;
	declare Vec2 Size_MyClubsCarousel = <MLHelpers::SkewX(Size_VerticalButton.Y, 10.) + C_MyClubs_ClubsPerPage * (Size_AdjustedVerticalButton.X + SizeX_VerticalButtonMargin), Size_AdjustedVerticalButton.Y>;
	declare Vec2 Size_ClubName = <Size_AdjustedVerticalButton.X * 0.9, 10.>;
	declare Vec2 Pos_ClubName = MLHelpers::SkewX(<-Size_AdjustedVerticalButton.X/2 + 2., -Size_AdjustedVerticalButton.Y/2 + 6.>, 10.);

	/* Initializes my clubs for all scrollview layouts */
	foreach (Layout in [C_ScrollView_Grid, C_ScrollView_List]) {
		declare Text MyClubs_ML = """
			<frameinstance
				id="frame-my-clubs-title-{{{Layout}}}" pos="-121.5 46." z-index="1"
				modelid="{{{ExpendableButton::C_Name}}}"
				data-text="{{{Text_MyClubs}}}"
				data-styles="{{{ExpendableButton::C_Style_Tabs}}}"
			/>
			<frameinstance id="button-icon-create-club-{{{Layout}}}" z-index="1" pos="-65 41.5" modelid="{{{ButtonIcon::C_Name}}}" data-halign="left" data-size="8 8" data-bind="appmenu" data-hideformouse="1" />
			<frameinstance
				id="button-create-club-{{{Layout}}}" pos="-75 41.5" z-index="1"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-size="9 9"
				data-opacity="1."
				data-opacityunfocus="1."
				data-tts-text="{{{Text_CreateClub}}}"
				data-image="{{{Icons::C_Icon_128x128_Plus_Oblique}}}"
				data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-imagefocus="{{{Icons::C_Icon_128x128_Plus_Oblique}}}"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-halign="left" data-valign="center"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frame z-index="1" size="{{{Size_MyClubsCarousel.X}}} {{{Size_MyClubsCarousel.Y}}}" halign="center" valign="center">
				<frame id="frame-to-move">
		""";

		for (Key, 0, C_MyClubs_ClubsTotal-1) {
			MyClubs_ML ^= """
				<frame
					id="button-my-club-{{{Layout}}}-{{{Key}}}"
					class="{{{Navigation::C_Class}}} {{{C_Class_MyClubs_Button}}} {{{C_Class_MyClubs_Focus}}}"
					data-nav-group="{{{C_NavGroup_MouseOnly}}}"
					data-nav-inputs="select"
					data-nav-targets="_"
					data-nav-zone="quad-hitbox-club"
					data-nav-locked="1"
					data-pager-key="{{{Key}}}"
					data-is-create-button="false"
				>
					<frameinstance modelid="framemodel-myclub"/>
				</frame>
			""";
		}

		MyClubs_ML ^= """
				</frame>
			</frame>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-{{{Layout}}}-previous-club"
				class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{C_Class_MyClubs_Focus}}} {{{C_Class_MyClubs_Pager}}}"
				pos="-135 -3.5" z-index="2"
				data-size="11 11"
				data-image="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-imagefocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-bgcolor="FFF"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-halign="center" data-valign="center"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-inputs="select;cancel"
				data-nav-targets="_;_"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="ArrowSelect"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-{{{Layout}}}-next-club"
				class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{C_Class_MyClubs_Focus}}} {{{C_Class_MyClubs_Pager}}}"
				pos="131.5 -3.5" z-index="2"
				data-size="11 11"
				data-image="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
				data-imagefocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
				data-bgcolor="FFF"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-halign="center" data-valign="center"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-inputs="select;cancel"
				data-nav-targets="_;_"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="ArrowSelect"
			/>
		""";

		/* Set HeaderButtons_ML of the corresponding scrollview layout */
		HeaderButtons_MLs[Layout] = MyClubs_ML;
	}

	/* Scroll view commons */
	declare Vec2 Size_SearchBar = <40., 9.5>;
	declare Scroll::K_Config ScrollConfig = Scroll::K_Config {
		AnimEnabled = True,
		HeaderHeight = 99.,
		PreScrollEnabled = True,
		PreScrollBefore = 2,
		PreScrollAfter = 1,
		ScrollBarVisibility = Scroll::C_ScrollBarVisibility_DuringScroll,
		ScrollBarXOffset = 28.,
		ScrollGrid = <8., 8.>,
		ScrollIndicator = True,
		ScrollIndicatorColorize = <1., 1., 1.>,
		ScrollIndicatorImage = Icons::C_Icon_128x128_Arrow_Bottom_Oblique,
		ScrollIndicatorSize = 11.,
		ScrollIndicatorXOffset = -4.5,
		ScrollIndicatorYOffset = -10.,
		ScrollPadding = 27.5,
		Skew = -10.,
		SkewHeader = True,
		SkewVAlign = Scroll::C_SkewVAlign_Top,
		WindowSize = <256., 120.>
	};

	/* Grid scroll view */
	declare Integer Grid_ColumnsNb = 6;
	declare Integer Grid_RowsNb = 6;
	declare Integer Grid_ElementsPerPage = Grid_ColumnsNb * Grid_RowsNb;
	declare Vec2 Grid_Size_ElementMargin = <0., 3.>;
	declare Vec2 Grid_Size_ScrollOverflow = <(Grid_ColumnsNb-1)*Grid_Size_ElementMargin.X, (Grid_RowsNb-1)*(Grid_Size_ElementMargin.Y-1.1)>;
	declare Vec2 Grid_Size_Element = Scroll::GetElementSize(ScrollConfig.WindowSize, Grid_Size_ElementMargin, Grid_ColumnsNb, Grid_RowsNb, Grid_Size_ScrollOverflow);
	declare Integer Grid_ElementsNb = Scroll::GetRequiredElementsNb(ScrollConfig.WindowSize, Grid_Size_Element, Grid_Size_ElementMargin, Grid_ColumnsNb);

	declare Vec2 Grid_Size_ElementBg = MLHelpers::KeepRatioFromY(608., 272., Grid_Size_Element.Y);
	declare Vec2 Grid_Size_AdjustedElementBg = <Grid_Size_ElementBg.X - MLHelpers::SkewX(Grid_Size_ElementBg.Y, 10.),	Grid_Size_ElementBg.Y>;
	declare Vec2 Grid_Size_Name = <Grid_Size_AdjustedElementBg.X * 0.9, 10.>;
	declare Vec2 Grid_Pos_Name = MLHelpers::SkewX(<5., -Grid_Size_AdjustedElementBg.Y + 3.>, 10.);
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] Grid_Actions = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Icons::C_Icon_128x128_List_View, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Icons::C_Icon_128x128_Glass,  <8., 8.>, -1., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	declare Text ML_Grid_Elements = "";
	for (I, 1, Grid_ElementsNb) {
		ML_Grid_Elements ^= """
			<frameinstance
				modelid="framemodel-grid-element"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	/* List scroll view */
	declare Integer List_ColumnsNb = 1;
	declare Integer List_RowsNb = 11;
	declare Integer List_ElementsPerPage = List_ColumnsNb * List_RowsNb;
	declare Vec2 List_Size_ElementMargin = <0., 0.>;
	declare Vec2 List_Size_ScrollOverflow = <(List_ColumnsNb-1)*List_Size_ElementMargin.X, (List_RowsNb-1)*List_Size_ElementMargin.Y>;
	declare Vec2 List_Size_Element = Scroll::GetElementSize(ScrollConfig.WindowSize, List_Size_ElementMargin, List_ColumnsNb, List_RowsNb, List_Size_ScrollOverflow);
	declare Integer List_ElementsNb = Scroll::GetRequiredElementsNb(ScrollConfig.WindowSize, List_Size_Element, List_Size_ElementMargin, List_ColumnsNb);

	declare Vec2 List_Size_ElementBg = <List_Size_Element.X - MLHelpers::SkewX(Grid_Size_ElementBg.Y/2, 10.), Grid_Size_ElementBg.Y/2>;
	declare Vec2 List_Size_Image = MLHelpers::KeepRatioFromY(608., 272., List_Size_ElementBg.Y);
	declare Vec2 List_Pos_Image = <0., List_Size_ElementBg.Y * -0.5>;
	declare Vec2 List_Pos_Name = <List_Size_ElementBg.X * 0.1, List_Size_ElementBg.Y * -0.55>;
	declare Vec2 List_Pos_SecondText= <List_Size_ElementBg.X * 0.64, List_Size_ElementBg.Y * -0.55>;
	declare Vec2 List_Pos_ThirdText = <List_Size_ElementBg.X * 0.935, List_Size_ElementBg.Y * -0.55>;
	declare Vec2 List_Pos_Popularity = <List_Size_ElementBg.X * 0.965, List_Size_ElementBg.Y * -0.5>;
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] List_Actions = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Icons::C_Icon_128x128_Grid_View, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Icons::C_Icon_128x128_Glass,  <8., 8.>, -1., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	declare Text ML_List_Elements = "";
	for (I, 1, List_ElementsNb) {
		ML_List_Elements ^= """
			<frameinstance
				modelid="framemodel-list-element"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="quad-base" halign="center" valign="center"/>
	<style class="text-semibold" halign="center" valign="center2" textprefix="$t$i" textcolor="FFFFFF" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"/>
	<style class="text-extrabold" halign="center" valign="center2" textprefix="$t$i" textcolor="FFFFFF" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"/>
	<style class="text-search" textsize="2" halign="center" valign="center2" textprefix="$i" textcolor="FFFFFF" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-myclub">
	<quad id="quad-background" size="{{{Size_VerticalButton.X}}} {{{Size_VerticalButton.Y}}}" class="quad-base" image="{{{Const::C_ImageUrl_Clubs_Vertical_BG}}}" z-index="0"/>
	<frameinstance id="control-block-list-club-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Size_VerticalButton.X}}} {{{Size_VerticalButton.Y}}}" data-alphamask="{{{Const::C_ImageUrl_Clubs_Vertical_Mask}}}" data-image="{{{Const::C_ImageUrl_Clubs_Vertical_Default}}}" z-index="1" data-halign="center" data-valign="center" />
	<quad id="quad-plus-icon" size="24 24" image="{{{Icons::C_Icon_128x128_Plus_Oblique}}}" class="quad-base" hidden="1" colorize="FFF" z-index="2"/>
	<quad id="quad-gradient" size="{{{Size_VerticalButton.X}}} {{{Size_VerticalButton.Y}}}" class="quad-base" image="{{{Const::C_ImageUrl_Clubs_Vertical_Gradient}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.7" z-index="3"/>
	<frameinstance id="control-block-list-club-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-filter-profanities="OnlyIfNotTranslated" data-size="{{{Size_ClubName.X}}} {{{Size_ClubName.Y}}}" pos="{{{Pos_ClubName.X}}} {{{Pos_ClubName.Y}}}" data-halign="left" data-valign="center2" data-textsize="2." data-opacity="0.7" z-index="4" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" />
	<quad id="quad-contour" image="{{{Const::C_ImageUrl_Clubs_Vertical_Contour}}}" size="{{{Size_VerticalButton.X}}} {{{Size_VerticalButton.Y}}}" class="quad-base" colorize="FFF" z-index="5"/>
	<frame size="{{{Size_VerticalButton.X}}} {{{Size_VerticalButton.Y}}}" halign="center" valign="center" z-index="6">
		<quad id="quad-hitbox-club" size="{{{Size_AdjustedVerticalButton.X}}} {{{Size_AdjustedVerticalButton.Y*1.5}}}" scriptevents="1" class="quad-base {{{Navigation::C_Class_ActivationZone}}}" rot="10"/>
	</frame>
</framemodel>
<framemodel id="framemodel-grid-element">
	<quad id="quad-background" size="{{{Grid_Size_ElementBg.X}}} {{{Grid_Size_ElementBg.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" keepratio="clip" z-index="0"/>
	<frameinstance id="control-block-list-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Grid_Size_ElementBg.X}}} {{{Grid_Size_ElementBg.Y}}}" data-image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-keepratio="clip" z-index="1" />
	<quad id="quad-gradient" size="{{{Grid_Size_ElementBg.X}}} {{{Grid_Size_ElementBg.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity=".7" z-index="2"/>
	<frameinstance id="control-block-list-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-filter-profanities="OnlyIfNotTranslated" data-size="{{{Grid_Size_Name.X}}} {{{Grid_Size_Name.Y}}}" pos="{{{Grid_Pos_Name.X}}} {{{Grid_Pos_Name.Y}}}" data-halign="left" data-valign="center2" data-textsize="1.5" data-opacity=".7" z-index="3" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" />
	<quad id="quad-contour" size="{{{Grid_Size_ElementBg.X}}} {{{Grid_Size_ElementBg.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" opacity="0." colorize="FFF" z-index="4"/>
	<frame size="{{{Grid_Size_ElementBg.X}}} {{{Grid_Size_ElementBg.Y}}}" pos="{{{Grid_Size_ElementBg.X/2}}} {{{-Grid_Size_ElementBg.Y/2}}}" halign="center" valign="center" z-index="5">
		<quad id="quad-hitbox-club" size="{{{Grid_Size_AdjustedElementBg.X}}} {{{Grid_Size_AdjustedElementBg.Y*1.5}}}" scriptevents="1" class="quad-base {{{Scroll::C_Class_ActivationZone}}}" rot="10"/>
	</frame>
</framemodel>
<framemodel id="framemodel-list-element">
	<frameinstance id="frame-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{List_Size_ElementBg.X}}}" data-height="{{{List_Size_ElementBg.Y}}}" data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" data-opacity="0.6" data-halign="left" data-valign="top" z-index="0"/>
	<quad id="quad-background" size="{{{List_Size_Image.X}}} {{{List_Size_Image.Y}}}" pos="{{{List_Pos_Image.X}}} {{{List_Pos_Image.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" halign="left" valign="center" keepratio="clip" z-index="1"/>
	<frameinstance id="control-block-list-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{List_Size_Image.X}}} {{{List_Size_Image.Y}}}" pos="{{{List_Pos_Image.X}}} {{{List_Pos_Image.Y}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-halign="left" data-valign="center" data-keepratio="clip" z-index="2" />
	<frameinstance id="control-block-list-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-filter-profanities="OnlyIfNotTranslated" data-size="{{{List_Size_ElementBg.X * 0.35}}} {{{List_Size_ElementBg.Y}}}" pos="{{{List_Pos_Name.X}}} {{{List_Pos_Name.Y}}}" data-halign="left" data-textsize="3" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-opacity="0.6" z-index="2" data-valign="center2" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" />
	<frameinstance id="control-block-list-second-text" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-filter-profanities="OnlyIfNotTranslated" data-size="{{{List_Size_ElementBg.X * 0.3}}} {{{List_Size_ElementBg.Y}}}" pos="{{{List_Pos_SecondText.X}}} {{{List_Pos_SecondText.Y}}}" data-textsize="3" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-opacity="0.6" z-index="2" data-halign="center" data-valign="center2" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-text-blocked=" " />
	<frameinstance id="control-block-list-third-text" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{List_Size_ElementBg.X * 0.12}}} {{{List_Size_ElementBg.Y}}}" pos="{{{List_Pos_ThirdText.X}}} {{{List_Pos_ThirdText.Y}}}" data-halign="right" data-valign="center2" data-textsize="3" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-opacity="0.6" z-index="2" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-text-blocked=" " />
	<quad id="quad-popularity" size="{{{List_Size_ElementBg.Y-1.5}}} {{{List_Size_ElementBg.Y-1.5}}}" pos="{{{List_Pos_Popularity.X}}} {{{List_Pos_Popularity.Y}}}" class="quad-base" colorize="FFF" opacity="0.6" z-index="2"/>
	<quad id="quad-hitbox-club" size="{{{List_Size_ElementBg.X}}} {{{List_Size_ElementBg.Y}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}"/>
</framemodel>
<framemodel id="framemodel-search-bar">
	<frameinstance id="asset-entry-search" modelid="{{{ExpendableAsset::C_Name}}}" data-width="0." data-height="{{{Size_SearchBar.Y}}}" data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" data-halign="left" data-opacity="0." z-index="0"/>
	<frameinstance id="asset-entry-search-contour" modelid="{{{ExpendableAsset::C_Name}}}" data-width="0." data-height="{{{Size_SearchBar.Y}}}" data-styles="{{{ExpendableAsset::C_Style_ContourRounded}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" data-halign="left" data-opacity="0." z-index="1"/>
	<entry id="entry-search" class="text-search" size="{{{Size_SearchBar.X - 15.}}} {{{Size_SearchBar.Y}}}" pos="10 0" halign="left" focusareacolor1="00000000" focusareacolor2="00000000" hidden="1" z-index="2"/>
</framemodel>

<!-- Frame global -->
<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="cancel;appmenu" data-nav-targets="_;_" data-nav-group="{{{C_NavGroup_Global}}}">
	<label id="label-search-result" pos="{{{MLHelpers::Skew(0., -50., 10.)}}}" size="{{{ScrollConfig.WindowSize.X}}} 10" class="text-semibold" text="{{{Text_NoClubs}}}" textsize="4"/>

	<!-- Scrolls -->
	<frame id="frame-scrolls" pos="{{{MLHelpers::Skew(11.-MLHelpers::SkewX(ScrollConfig.HeaderHeight, 10.), 1., 10.)}}}">
		<!-- Common title bar -->
		<frame id="frame-common-header" pos="{{{MLHelpers::SkewX(ScrollConfig.HeaderHeight, 10.)}}} 55.2" hidden="1" z-index="10">
			<frameinstance id="frame-search-bar" modelid="framemodel-search-bar"/>
			<frameinstance
				id="titlebar-common" z-index="5"
				modelid="{{{TitleBar::C_Name}}}"
				data-size="{{{ScrollConfig.WindowSize.X}}} 10"
				data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}"
				data-actions="{{{TL::MLEncode(List_Actions.tojson())}}}"
				data-events-delay="{{{C_EventsDelay}}}"
				data-tabs-max-width="180"
				data-locked="true"
			/>
		</frame>

		<!-- Scroll view grid -->
		<frame id="frame-scroll-view-grid" z-index="1">
			<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-elements-grid" z-index="1" />
			<frame id="frame-clip-scroll-grid" clip="1" clipsizen="320 {{{ScrollConfig.WindowSize.Y}}}" clipposn="0 0">
				<frame
					id="scroll-elements-grid"
					pos="{{{-ScrollConfig.WindowSize.X/2 - MLHelpers::SkewX(List_Size_ElementBg.Y, 10.)}}} {{{ScrollConfig.WindowSize.Y/2}}}"
					class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
					data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
					data-pager-page-size="{{{Grid_ElementsPerPage}}}"
					data-elements-per-line="{{{Grid_ColumnsNb}}}"
					data-element-size="{{{Grid_Size_Element.X}}} {{{Grid_Size_Element.Y}}}"
					data-margin-size="{{{Grid_Size_ElementMargin.X}}} {{{Grid_Size_ElementMargin.Y}}}"
					data-scroll-indicator-x-offset="{{{ScrollConfig.ScrollIndicatorXOffset + MLHelpers::SkewX(List_Size_ElementBg.Y, 10.)}}}"
					data-scrollbar-xoffset="{{{ScrollConfig.ScrollBarXOffset + MLHelpers::SkewX(List_Size_ElementBg.Y, 10.)}}}"
					data-scroll-locked="1"
					data-nav-inputs="down"
					data-nav-targets="button-back"
					data-nav-group="{{{C_NavGroup_Corpus}}}"
				>
					<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
					<frame id="frame-header" class="{{{Scroll::C_Class_Header}}}" pos="{{{ScrollConfig.WindowSize.X/2 + MLHelpers::SkewX(List_Size_ElementBg.Y, 10.)}}} 0">
						<frame
							id="frame-myclubs-grid" z-index="1"
							pos="{{{MLHelpers::Skew(1.6, -Size_VerticalButton.Y/2 - 12.5, 10.)}}}"
							class="{{{Navigation::C_Class}}} {{{C_Class_MyClubs_List}}}"
							data-nav-inputs="down;left;right;select"
							data-nav-targets="scroll-elements-grid;_;_;_"
							data-nav-group="{{{C_NavGroup_Corpus}}}"
						>
							{{{HeaderButtons_MLs[C_ScrollView_Grid]}}}
						</frame>
						<frame id="frame-clamped-controls-grid" pos="{{{MLHelpers::Skew(0., -ScrollConfig.HeaderHeight + 8., 10.)}}}" class="{{{Scroll::C_Class_ClampedControl}}}"
							data-clamped-control-valign="{{{Scroll::C_ClampedControlVAlign_Center}}}"
							data-clamped-control-height="9.6"
						>
							<frameinstance id="frame-search-bar" modelid="framemodel-search-bar"/>
							<frameinstance
								id="titlebar-grid" z-index="5"
								modelid="{{{TitleBar::C_Name}}}"
								data-size="{{{ScrollConfig.WindowSize.X + 1.2}}} 10"
								data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}"
								data-actions="{{{TL::MLEncode(Grid_Actions.tojson())}}}"
								data-events-delay="{{{C_EventsDelay}}}"
								data-tabs-max-width="180"
								data-locked="true"
							/>
						</frame>
					</frame>
					{{{ML_Grid_Elements}}}
				</frame>
			</frame>
		</frame>

		<!-- Scroll view list -->
		<frame id="frame-scroll-view-list" z-index="1" hidden="1">
			<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-elements-list" z-index="1" />
			<frame id="frame-clip-scroll-list" clip="1" clipsizen="320 {{{ScrollConfig.WindowSize.Y}}}" clipposn="0 0">
				<frame
					id="scroll-elements-list"
					pos="{{{-ScrollConfig.WindowSize.X/2}}} {{{ScrollConfig.WindowSize.Y/2}}}"
					class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
					data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
					data-pager-page-size="{{{List_ElementsPerPage}}}"
					data-elements-per-line="{{{List_ColumnsNb}}}"
					data-element-size="{{{List_Size_Element.X}}} {{{List_Size_Element.Y}}}"
					data-margin-size="{{{List_Size_ElementMargin.X}}} {{{List_Size_ElementMargin.Y}}}"
					data-scroll-locked="1"
					data-nav-inputs="down"
					data-nav-targets="button-back"
					data-nav-group="{{{C_NavGroup_Corpus}}}"
				>
					<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
					<frame id="frame-header" class="{{{Scroll::C_Class_Header}}}" pos="{{{ScrollConfig.WindowSize.X/2}}} 0">
						<frame
							id="frame-myclubs-list" z-index="1"
							pos="{{{MLHelpers::Skew(1.6, -Size_VerticalButton.Y/2 - 12.5, 10.)}}}"
							class="{{{Navigation::C_Class}}} {{{C_Class_MyClubs_List}}}"
							data-nav-inputs="down;left;right;select"
							data-nav-targets="scroll-elements-list;_;_;_"
							data-nav-group="{{{C_NavGroup_Corpus}}}"
						>
							{{{HeaderButtons_MLs[C_ScrollView_List]}}}
						</frame>
						<frame id="frame-clamped-controls-list" pos="{{{MLHelpers::Skew(0., -ScrollConfig.HeaderHeight + 8., 10.)}}}" class="{{{Scroll::C_Class_ClampedControl}}}"
							data-clamped-control-valign="{{{Scroll::C_ClampedControlVAlign_Center}}}"
							data-clamped-control-height="9.6"
						>
							<frameinstance id="frame-search-bar" modelid="framemodel-search-bar"/>
							<frameinstance
								id="titlebar-list" z-index="5"
								modelid="{{{TitleBar::C_Name}}}"
								data-size="{{{ScrollConfig.WindowSize.X + 1.2}}} 10"
								data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}"
								data-actions="{{{TL::MLEncode(List_Actions.tojson())}}}"
								data-events-delay="{{{C_EventsDelay}}}"
								data-tabs-max-width="180"
								data-locked="true"
							/>
						</frame>
					</frame>
					{{{ML_List_Elements}}}
				</frame>
			</frame>
		</frame>
	</frame>

	<!-- Footer -->
	<frameinstance
		id="button-back"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		pos="-151.5 -73"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;up"
		data-nav-targets="_;_;scroll-elements-grid"
		data-nav-group="{{{C_NavGroup_Corpus}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/Trackmania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/Trackmania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/MenuBackground_ML.Script.txt" as MenuBackground
#Include "Libs/Nadeo/Trackmania/ClubEdition.Script.txt" as ClubEdition

#Const C_Tab_AllClubs {{{dump(C_Tab_AllClubs)}}}
#Const C_Tab_Campaigns {{{dump(C_Tab_Campaigns)}}}
#Const C_Tab_Rooms {{{dump(C_Tab_Rooms)}}}
#Const C_Tab_Skins {{{dump(C_Tab_Skins)}}}
#Const C_Tab_Items {{{dump(C_Tab_Items)}}}
#Const C_TabNames {{{dump(C_TabNames)}}}

#Const C_MyClubs_ClubsTotal {{{dump(C_MyClubs_ClubsTotal)}}}
#Const C_MyClubs_ClubsPerPage {{{dump(C_MyClubs_ClubsPerPage)}}}
#Const C_MyClubs_ClubsMargin {{{dump(C_MyClubs_ClubsMargin)}}}
#Const C_MyClubs_ButtonWithMarginX {{{dump(Size_AdjustedVerticalButton.X + SizeX_VerticalButtonMargin)}}}
#Const C_MyClubs_AlignLeftPosX {{{dump(-Size_MyClubsCarousel.X/2 + Size_VerticalButton.X/2)}}}

#Const C_DelayBetweenRequest {{{dump(C_DelayBetweenRequest)}}}

#Const C_ScrollView_Grid {{{dump(C_ScrollView_Grid)}}}
#Const C_ScrollView_List {{{dump(C_ScrollView_List)}}}

#Const C_ImageUrls_PopularityLevel {{{dump(Icons::C_Icons_128x128_PopularityLevel)}}}

#Struct K_ScrollView {
	CMlEntry Entry_Search;
	CMlFrame Asset_EntrySearch;
	CMlFrame Asset_EntrySearchContour;
	CMlFrame ButtonIcon_CreateClub_Grid;
	CMlFrame ButtonIcon_CreateClub_List;
	CMlFrame Button_CreateClub;
	CMlFrame Button_CreateClub_Grid;
	CMlFrame Button_CreateClub_List;
	CMlFrame Button_NextClub;
	CMlFrame Button_PreviousClub;
	CMlFrame Frame_ClampedControls;
	CMlFrame Frame_CommonHeader;
	CMlFrame Frame_MyClubs;
	CMlFrame Frame_MyClubsTitle;
	CMlFrame Frame_ScrollView_Grid;
	CMlFrame Frame_ScrollView_List;
	CMlFrame Frame_ToMove;
	CMlFrame Scroll_Elements;
	CMlFrame TitleBar_Common;
	CMlFrame TitleBar_Current;
	CMlFrame TitleBar_Grid;
	CMlFrame TitleBar_List;
	Text CurrentLayout;
}

#Struct K_Pager {
	Integer CurrentKey;
	Integer LeftLimitKey;
	Integer RightLimitKey;
	Integer CurrentPage;
	Integer NextPageLoadTime;
	Boolean NeedToLoadPage;
}

#Struct K_Element {
	Integer Id;
	Integer PopularityLevel;
	Text ImageUrl;
	Text Name;
	Text SecondText;
	Text ThirdText;
	Text CreatorAccountId;
	Text LatestEditorAccountId;
}

#Struct K_State {
	Integer CurrentTab;
	Integer MyClubsAnimShift;
	K_Pager MyClubsPagers;
	K_ScrollView ScrollView;
}
""",
"""
declare {{{TitleBar::P}}}K_Actions[Integer] G_Actions_Grid;
declare {{{TitleBar::P}}}K_Actions[Integer] G_Actions_List;

Integer GetMyClubsTotal() {
	return {{{ClubStore::P}}}GetMyClubsTotal() + 1; //< Add 1 to display the "+" button to create a new club
}

Integer GetMyClubsButtonKey(CMlControl _Control) {
	return TL::ToInteger(_Control.DataAttributeGet("pager-key"));
}
Void SetMyClubsButtonKey(CMlControl _Control, Integer _Key) {
	_Control.DataAttributeSet("pager-key", ""^_Key);
}

Boolean GetMyClubsButtonIsCreateButton(CMlControl _Control) {
	return Tools::TextToBoolean(_Control.DataAttributeGet("is-create-button"));
}
Void SetMyClubsButtonIsCreateButton(CMlControl _Control, Boolean _IsCreateButton) {
	_Control.DataAttributeSet("is-create-button", ""^_IsCreateButton);
}

Void Loading(K_ScrollView _ScrollView, CMlLabel _Label_SearchResult) {
	{{{Scroll::P}}}DisplayLoadingSpinner(This, _ScrollView.Scroll_Elements, "{{{Text_RetrievingData}}}", True);
	_Label_SearchResult.Hide();
}

Void LockNavigation(K_State _State, Boolean _IsLocked) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Corpus}}}", !_IsLocked);
	{{{TitleBar::P}}}LockNavigation(_State.ScrollView.TitleBar_Current, _IsLocked);
	{{{Scroll::P}}}LockNavigation(_State.ScrollView.Scroll_Elements, _IsLocked);
	foreach (Control in _State.ScrollView.Frame_ToMove.Controls) {
		if (Control.HasClass("{{{C_Class_MyClubs_Button}}}")) {
			{{{Navigation::P}}}Lock(Control, _IsLocked);
		}
	}
}

Void ShowElement(CMlFrame _Frame_Element, K_Element _Element, Text _ScrollViewLayout) {
	declare CMlFrame ControlBlockList_Name <=> (_Frame_Element.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlFrame ControlBlockList_Image <=> (_Frame_Element.GetFirstChild("control-block-list-image") as CMlFrame);

	/* Common */
	_Frame_Element.Show();
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_Name, [_Element.CreatorAccountId, _Element.LatestEditorAccountId], _Element.Name);
	if (_Element.ImageUrl != "") {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_Image, [_Element.CreatorAccountId, _Element.LatestEditorAccountId], _Element.ImageUrl);
	} else {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_Image, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");
	}
	if ({{{ControlBlockList::P}}}IsBlocked(This, [_Element.CreatorAccountId, _Element.LatestEditorAccountId])) {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_Element, {{{MenuSounds::P}}}C_Sound_SelectError);
	} else {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_Element, {{{MenuSounds::P}}}C_Sound_Select);
	}

	switch (_ScrollViewLayout) {
		case C_ScrollView_List: {
			declare CMlFrame ControlBlockList_SecondText <=> (_Frame_Element.GetFirstChild("control-block-list-second-text") as CMlFrame);
			declare CMlFrame ControlBlockList_ThirdText <=> (_Frame_Element.GetFirstChild("control-block-list-third-text") as CMlFrame);
			declare CMlQuad Quad_Popularity <=> (_Frame_Element.GetFirstChild("quad-popularity") as CMlQuad);

			Quad_Popularity.Visible = True;
			Quad_Popularity.ChangeImageUrl(C_ImageUrls_PopularityLevel.get(_Element.PopularityLevel, ""));
			if (_Element.SecondText == "") {
				{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_SecondText, [], _Element.SecondText);
			} else {
				{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_SecondText, [_Element.CreatorAccountId, _Element.LatestEditorAccountId], _Element.SecondText);
			}
			if (_Element.ThirdText == "") {
				{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_ThirdText, [], _Element.ThirdText);
			} else {
				{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_ThirdText, [_Element.CreatorAccountId, _Element.LatestEditorAccountId], _Element.ThirdText);
			}
		}
	}
}

Void ShowElementLoading(CMlFrame _Frame_Element, Text _ScrollViewLayout) {
	declare CMlFrame ControlBlockList_Name <=> (_Frame_Element.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlFrame ControlBlockList_Image <=> (_Frame_Element.GetFirstChild("control-block-list-image") as CMlFrame);

	/* Common */
	_Frame_Element.Show();
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_Name, [], "{{{Text_Retrieving}}}");
	{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_Image, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");

	switch (_ScrollViewLayout) {
		case C_ScrollView_List: {
			declare CMlFrame ControlBlockList_SecondText <=> (_Frame_Element.GetFirstChild("control-block-list-second-text") as CMlFrame);
			declare CMlFrame ControlBlockList_ThirdText <=> (_Frame_Element.GetFirstChild("control-block-list-third-text") as CMlFrame);
			declare CMlQuad Quad_Popularity <=> (_Frame_Element.GetFirstChild("quad-popularity") as CMlQuad);

			{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_SecondText, [], "");
			{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_ThirdText, [], "");
			Quad_Popularity.Visible = False;
		}
	}

	{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_Element, {{{MenuSounds::P}}}C_Sound_SelectError);
}

Void HideElement(CMlFrame _Frame_Element) {
	_Frame_Element.Visible = False;
}

Void FocusElement(CMlFrame _Frame_Element, Text _ScrollViewLayout, Boolean _Focused) {
	if (_Frame_Element == Null) return;
	declare CMlFrame ControlBlockList_Name <=> (_Frame_Element.GetFirstChild("control-block-list-name") as CMlFrame);

	switch (_ScrollViewLayout) {
		case C_ScrollView_Grid: {
			declare CMlQuad Quad_Contour <=> (_Frame_Element.GetFirstChild("quad-contour") as CMlQuad);
			declare CMlQuad Quad_Gradient <=> (_Frame_Element.GetFirstChild("quad-gradient") as CMlQuad);

			AnimMgr.Flush(Quad_Contour);
			AnimMgr.Flush(Quad_Gradient);
			if (_Focused) {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 1., 250);
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 0.7, 250);
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
		case C_ScrollView_List: {
			declare CMlFrame Frame_Background <=> (_Frame_Element.GetFirstChild("frame-background") as CMlFrame);
			declare CMlFrame ControlBlockList_SecondText <=> (_Frame_Element.GetFirstChild("control-block-list-second-text") as CMlFrame);
			declare CMlFrame ControlBlockList_ThirdText <=> (_Frame_Element.GetFirstChild("control-block-list-third-text") as CMlFrame);
			declare CMlQuad Quad_Popularity <=> (_Frame_Element.GetFirstChild("quad-popularity") as CMlQuad);

			AnimMgr.Flush(Quad_Popularity);
			if (_Focused) {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 1., 250);
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_SecondText, 1., 250);
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ThirdText, 1., 250);
				AnimMgr.Add(Quad_Popularity, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, 1.);
			} else {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 0.6, 250);
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_SecondText, 0.6, 250);
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ThirdText, 0.6, 250);
				AnimMgr.Add(Quad_Popularity, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, .6);
			}
		}
	}

	// Text to speech
	if (_Focused) {
		{{{ControlBlockList::P}}}TTS_Focus(ControlBlockList_Name);
	} else {
		{{{ControlBlockList::P}}}TTS_Unfocus(ControlBlockList_Name);
	}
}

CMlControl GetMyClubsButtonFocused(K_State _State) {
	declare Integer ControlKey = C_MyClubs_ClubsMargin + (_State.MyClubsPagers.CurrentKey - _State.MyClubsPagers.LeftLimitKey);

	if (!_State.ScrollView.Frame_ToMove.Controls.existskey(ControlKey)) return Null;
	return _State.ScrollView.Frame_ToMove.Controls[ControlKey];
}

Void FocusMyClubsButton(CMlFrame _Frame_MyClub, Boolean _Focused) {
	if (_Frame_MyClub == Null) return;

	declare CMlFrame ControlBlockList_ClubName <=> (_Frame_MyClub.GetFirstChild("control-block-list-club-name") as CMlFrame);
	declare CMlQuad Quad_Contour <=> (_Frame_MyClub.GetFirstChild("quad-contour") as CMlQuad);
	declare CMlQuad Quad_Gradient <=> (_Frame_MyClub.GetFirstChild("quad-gradient") as CMlQuad);

	AnimMgr.Flush(Quad_Contour);
	AnimMgr.Flush(Quad_Gradient);
	if (_Focused) {
		{{{ControlBlockList::P}}}TTS_Focus(ControlBlockList_ClubName);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubName, 1., 250);
		AnimMgr.Add(Quad_Contour, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubName, 0.7, 250);
		AnimMgr.Add(Quad_Contour, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}TTS_Unfocus(ControlBlockList_ClubName);
	}
}

Void UpdateMyClubsButton(CMlFrame _Frame_Button, Boolean _IsLoading, Boolean _IsCreate, {{{ClubStruct::P}}}K_Club _Club) {
	if (_Frame_Button == Null) return;

	_Frame_Button.Visible = _IsLoading || _IsCreate || _Club.Id != {{{ClubStruct::P}}}C_ClubNullId;
	if (_Frame_Button.Visible) {
		declare CMlFrame ControlBlockList_ClubName <=> (_Frame_Button.GetFirstChild("control-block-list-club-name") as CMlFrame);
		declare CMlFrame ControlBlockList_ClubImage <=> (_Frame_Button.GetFirstChild("control-block-list-club-image") as CMlFrame);
		declare CMlQuad Quad_PlusIcon <=> (_Frame_Button.GetFirstChild("quad-plus-icon") as CMlQuad);

		// Update quads
		Quad_PlusIcon.Visible = _IsCreate && !_IsLoading;
		ControlBlockList_ClubImage.Visible = !Quad_PlusIcon.Visible;
		if (_IsLoading || _Club.VerticalUrl == "") {
			{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, ControlBlockList_ClubImage, "", "{{{Const::C_ImageUrl_Clubs_Vertical_Default}}}");
		}

		// Update label
		if (_IsLoading) {
			{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlBlockList_ClubName, "", "{{{Text_Retrieving}}}");
		} else if (_IsCreate) {
			{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlBlockList_ClubName, "", "{{{Text_CreateClub}}}");
		} else {
			{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlBlockList_ClubName, _Club.AuthorAccountId, _Club.Name);
			if (_Club.VerticalUrl != "") {
				{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, ControlBlockList_ClubImage, _Club.AuthorAccountId, _Club.VerticalUrl);
			}
		}

		// Update sound
		if ({{{ControlBlockList::P}}}IsBlocked(This, _Club.AuthorAccountId)) {
			{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_Button, {{{MenuSounds::P}}}C_Sound_SelectError);
		} else {
			{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_Button, {{{MenuSounds::P}}}C_Sound_Select);
		}
	}
}

Real GetMyClubsButtonPosX(Integer _Key) {
	declare Real PosX = C_MyClubs_AlignLeftPosX + (_Key * C_MyClubs_ButtonWithMarginX);
	if (_Key < 0) {
		PosX -= {{{MLHelpers::SkewX(Size_VerticalButton.Y, 10.)}}};
	} else if (_Key > C_MyClubs_ClubsPerPage - 1) {
		PosX += {{{MLHelpers::SkewX(Size_VerticalButton.Y, 10.)}}};
	}
	return PosX;
}

Void UpdateMyClubsButtons(K_State _State) {
	declare CMlControl CurrentFocus = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Corpus}}}");
	declare Boolean MyClubsIsFocused = (CurrentFocus != Null && CurrentFocus == _State.ScrollView.Frame_MyClubs);
	declare Integer PagerCurrentKey = _State.MyClubsPagers.CurrentKey;
	declare Integer StartKey = _State.MyClubsPagers.LeftLimitKey - C_MyClubs_ClubsMargin;
	declare {{{ClubStruct::P}}}K_Club[Integer] Clubs = {{{ClubStore::P}}}GetMyClubs();
	declare Integer ClubsTotal = GetMyClubsTotal();
	declare Integer AnimDuration;
	declare Integer[] ClubIds;

	foreach (Key => Control in _State.ScrollView.Frame_ToMove.Controls) {
		declare Integer ClubKey = StartKey + Key;
		SetMyClubsButtonKey(Control, ClubKey);
		FocusMyClubsButton((Control as CMlFrame), MyClubsIsFocused && ClubKey == PagerCurrentKey);

		declare Integer LocalKey = Key - C_MyClubs_ClubsMargin;
		if (_State.MyClubsAnimShift != 0) {
			declare Integer OldKey = LocalKey + ML::Clamp(_State.MyClubsAnimShift, -C_MyClubs_ClubsMargin, C_MyClubs_ClubsMargin);
			AnimDuration = 350;
			if (ML::Abs(_State.MyClubsAnimShift) >= C_MyClubs_ClubsPerPage) AnimDuration = 700;
			AnimMgr.Flush(Control);
			Control.RelativePosition_V3.X = GetMyClubsButtonPosX(OldKey);
			declare Vec2 Pos = <
				GetMyClubsButtonPosX(LocalKey),
				Control.RelativePosition_V3.Y
			>;
			AnimMgr.Add(Control, "<anim pos=\""^Pos.X^" "^Pos.Y^"\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			Control.RelativePosition_V3.X = GetMyClubsButtonPosX(LocalKey);
		}

		// Create club button
		if (ClubKey == ClubsTotal - 1) {
			SetMyClubsButtonIsCreateButton(Control, True);
			UpdateMyClubsButton((Control as CMlFrame), False, True, {{{ClubStruct::P}}}K_Club {});
		}
		// Loaded club
		else if (Clubs.existskey(ClubKey)) {
			SetMyClubsButtonIsCreateButton(Control, False);
			declare Club = Clubs[ClubKey];
			UpdateMyClubsButton((Control as CMlFrame), False, False, Club);
			ClubIds.add(Club.Id);
		}
		// Loading club
		else if (ClubKey < ClubsTotal - 1) {
			SetMyClubsButtonIsCreateButton(Control, False);
			UpdateMyClubsButton((Control as CMlFrame), True, False, {{{ClubStruct::P}}}K_Club {});
		}
		// Empty
		else {
			SetMyClubsButtonIsCreateButton(Control, False);
			UpdateMyClubsButton((Control as CMlFrame), False, False, {{{ClubStruct::P}}}K_Club {});
		}
	}

	// Update pager buttons visibility
	AnimMgr.Flush(_State.ScrollView.Button_NextClub);
	AnimMgr.Flush(_State.ScrollView.Button_PreviousClub);
	{{{Navigation::P}}}Lock(_State.ScrollView.Button_PreviousClub, _State.MyClubsPagers.LeftLimitKey <= 0);
	{{{Navigation::P}}}Lock(_State.ScrollView.Button_NextClub, _State.MyClubsPagers.RightLimitKey >= ClubsTotal - 1);
	AnimMgr.Add(_State.ScrollView.Button_NextClub, "<anim hidden=\""^{{{Navigation::P}}}IsLocked(_State.ScrollView.Button_NextClub)^"\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.Add(_State.ScrollView.Button_PreviousClub, "<anim hidden=\""^{{{Navigation::P}}}IsLocked(_State.ScrollView.Button_PreviousClub)^"\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
}

K_State ShiftMyClubsPager(K_State _State, Integer _FocusShift, Integer _ScrollShift) {
	declare K_State State = _State;

	// Sanitize the pager in case the total changed
	declare Integer ClubsTotal = GetMyClubsTotal();
	declare Integer OldCurrentKey = State.MyClubsPagers.CurrentKey;
	declare Integer OldLeftLimitKey = State.MyClubsPagers.LeftLimitKey;
	State.MyClubsPagers.CurrentKey = ML::Clamp(State.MyClubsPagers.CurrentKey, 0, ML::Max(0, ClubsTotal - 1));
	State.MyClubsPagers.LeftLimitKey = ML::Clamp(State.MyClubsPagers.LeftLimitKey, 0, ML::Max(0, ClubsTotal - 1 - (C_MyClubs_ClubsPerPage - 1)));
	State.MyClubsPagers.RightLimitKey = State.MyClubsPagers.LeftLimitKey + (C_MyClubs_ClubsPerPage - 1);

	// Move the focus to the left or right
	if (_FocusShift != 0) {
		State.MyClubsPagers.CurrentKey = ML::Clamp(State.MyClubsPagers.CurrentKey + _FocusShift, 0, ML::Max(0, ClubsTotal - 1));
		if (State.MyClubsPagers.CurrentKey < State.MyClubsPagers.LeftLimitKey) {
			State.MyClubsPagers.LeftLimitKey = State.MyClubsPagers.CurrentKey;
			State.MyClubsPagers.RightLimitKey = State.MyClubsPagers.LeftLimitKey + (C_MyClubs_ClubsPerPage - 1);
		} else if (State.MyClubsPagers.CurrentKey > State.MyClubsPagers.RightLimitKey) {
			State.MyClubsPagers.RightLimitKey = State.MyClubsPagers.CurrentKey;
			State.MyClubsPagers.LeftLimitKey = State.MyClubsPagers.RightLimitKey - (C_MyClubs_ClubsPerPage - 1);
		}
	}

	// Move the scroll to the left or right
	if (_ScrollShift != 0) {
		State.MyClubsPagers.LeftLimitKey = ML::Clamp(State.MyClubsPagers.LeftLimitKey + _ScrollShift, 0, ML::Max(0, ClubsTotal - 1 - (C_MyClubs_ClubsPerPage - 1)));
		State.MyClubsPagers.RightLimitKey = State.MyClubsPagers.LeftLimitKey + (C_MyClubs_ClubsPerPage - 1);
		State.MyClubsPagers.CurrentKey = ML::Clamp(State.MyClubsPagers.CurrentKey, State.MyClubsPagers.LeftLimitKey, State.MyClubsPagers.RightLimitKey);
	}

	declare Integer NewPage = (State.MyClubsPagers.LeftLimitKey / C_MyClubs_ClubsPerPage) + 1;
	if (State.MyClubsPagers.CurrentPage != NewPage) {
		State.MyClubsPagers.CurrentPage = NewPage;
		State.MyClubsPagers.NeedToLoadPage = True;
		if (
			State.MyClubsPagers.NextPageLoadTime < 0 ||
			Now >= State.MyClubsPagers.NextPageLoadTime + C_DelayBetweenRequest
		) {
			State.MyClubsPagers.NextPageLoadTime = Now;
		} else {
			State.MyClubsPagers.NextPageLoadTime = Now + C_DelayBetweenRequest;
		}
	}

	if (OldCurrentKey != State.MyClubsPagers.CurrentKey) {
		{{{MenuSounds::P}}}PlayFocusSound(This, State.ScrollView.Frame_MyClubs);
	}

	State.MyClubsAnimShift = State.MyClubsPagers.LeftLimitKey - OldLeftLimitKey;

	UpdateMyClubsButtons(State);
	State.MyClubsAnimShift = 0;

	return State;
}
K_State SetMyClubsPager(K_State _State, Integer _Key) {
	return ShiftMyClubsPager(_State, _Key - _State.MyClubsPagers.CurrentKey, 0);
}

Void Focus(K_State _State, CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	declare Boolean MyClubsFocusUpdated = False;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Scroll::P}}}IsScroll(_From)) {
			{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
			if (_From.ControlId == "button-back") {
				{{{ExpendableButton::P}}}Unfocus(This, _State.ScrollView.Frame_MyClubsTitle);
			}
		} else if (_From.HasClass("{{{C_Class_MyClubs_List}}}")) {
			{{{ExpendableButton::P}}}Unfocus(This, _State.ScrollView.Frame_MyClubsTitle);
			MyClubsFocusUpdated = True;
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Scroll::P}}}IsScroll(_To)) {
			{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
			if (_To.ControlId == "button-back") {
				{{{ExpendableButton::P}}}Focus(This, _State.ScrollView.Frame_MyClubsTitle);
			}
		} else if (_To.HasClass("{{{C_Class_MyClubs_List}}}")) {
			MyClubsFocusUpdated = True;
			{{{ExpendableButton::P}}}Focus(This, _State.ScrollView.Frame_MyClubsTitle);
			if (_From != Null && _From.ControlId == "button-back" && _State.ScrollView.Scroll_Elements.ScrollOffset.Y > 0) { //< Scroll to header if offset greater than 0
				{{{Scroll::P}}}ScrollToHeader(This, _State.ScrollView.Scroll_Elements);
				{{{Scroll::P}}}SetFocusedElementKey(This, _State.ScrollView.Scroll_Elements, 0, False, False);
			}
		}
	}

	if (MyClubsFocusUpdated) UpdateMyClubsButtons(_State);
}

Void CreateClub() {
	if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CreateClub)) {
		ClubEdition::GoToPage(This, {{{Router::P}}}GetCurrentRoutePath(This), RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_CreateClub));
	} else {
		{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateClub}}}", {{{Router::P}}}GetCurrentRoutePath(This));
		{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateClub}}}");
	}
}

K_State Select(K_State _State, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	if (_Control.HasClass("{{{C_Class_MyClubs_Button}}}")) {
		declare Integer ClubKey = GetMyClubsButtonKey(_Control);
		declare {{{ClubStruct::P}}}K_Club[Integer] MyClubs = {{{ClubStore::P}}}GetMyClubs();
		if (GetMyClubsButtonIsCreateButton(_Control)) {
			CreateClub();
		} else if (MyClubs.existskey(ClubKey)) {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_ViewClub)) {
				ClubEdition::GoToPage(This, {{{Router::P}}}GetCurrentRoutePath(This), RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_ViewClub));
			} else if (!{{{ControlBlockList::P}}}IsBlocked(This, MyClubs[ClubKey].AuthorAccountId)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubDetails}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubDetails}}}", ["{{{RoutePaths::C_Query_Club}}}"=>MyClubs[ClubKey].tojson()]);
			}
		}
	} else {
		switch (_Control.ControlId) {
			case "button-create-club-"^State.ScrollView.CurrentLayout : {
				Focus(State, State.ScrollView.Button_CreateClub, Null);
				CreateClub();
			}
			case "button-"^State.ScrollView.CurrentLayout^"-previous-club": State = ShiftMyClubsPager(State, 0, -1);
			case "button-"^State.ScrollView.CurrentLayout^"-next-club": State = ShiftMyClubsPager(State, 0, 1);
			case "button-back": {
				LockNavigation(State, True);
				{{{Router::P}}}PushParent(This);
			}
		}
	}

	return State;
}

Void FocusAvailableControl(K_State _State, CMlFrame _Button_Back) {
	if (!{{{Navigation::P}}}IsLocked(_State.ScrollView.Frame_MyClubs)) {
		Focus(_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Corpus}}}"), _State.ScrollView.Frame_MyClubs);
	} else if ({{{Scroll::P}}}GetElementsTotal(_State.ScrollView.Scroll_Elements) > 0) {
		Focus(_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Corpus}}}"), _State.ScrollView.Scroll_Elements);
	} else if (!{{{Navigation::P}}}IsLocked(_Button_Back)) {
		Focus(_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Corpus}}}"), _Button_Back);
	}
}

Void FocusSearch(K_ScrollView _ScrollView, Boolean _Focused) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Corpus}}}", !_Focused);
	{{{Scroll::P}}}LockNavigation(_ScrollView.Scroll_Elements, _Focused);

	if (_Focused) {
		{{{ExpendableAsset::P}}}SetColor(This, _ScrollView.Asset_EntrySearchContour, <1., 1., 1.>);
	} else {
		{{{ExpendableAsset::P}}}SetColor(This, _ScrollView.Asset_EntrySearchContour, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}});
	}
}

Void UpdateSearchPos(CMlFrame _TitleBar_Current, CMlFrame _Frame_SearchBar, Boolean _IsAnimated) {
	declare Vec2 Pos_SearchBar = {{{TitleBar::P}}}GetActionButtonPosition(_TitleBar_Current, {{{TitleBar::P}}}C_Action_Second) - <5.5, 0.>;

	AnimMgr.Flush(_Frame_SearchBar);
	if (_IsAnimated) {
		AnimMgr.Add(_Frame_SearchBar, "<anim pos=\""^Pos_SearchBar.X^" "^Pos_SearchBar.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		_Frame_SearchBar.RelativePosition_V3 = Pos_SearchBar;
	}
}

Void DisplaySearch(K_ScrollView _ScrollView, Text _EntryText, Boolean _IsSearchButton, Boolean _Visible, Boolean _IsAnimated) {
	declare {{{TitleBar::P}}}K_Actions[Integer] Actions;
	switch (_ScrollView.CurrentLayout) {
		case C_ScrollView_List: Actions = G_Actions_List;
		case C_ScrollView_Grid: Actions = G_Actions_Grid;
	}

	// Update search background
	if (_Visible) {
		_ScrollView.Entry_Search.Size.X = {{{Size_SearchBar.X - 15.}}};
		{{{ExpendableAsset::P}}}SetWidth(This, _ScrollView.Asset_EntrySearch, {{{Size_SearchBar.X}}}, False);
		{{{ExpendableAsset::P}}}SetWidth(This, _ScrollView.Asset_EntrySearchContour, {{{Size_SearchBar.X}}}, False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _ScrollView.Asset_EntrySearch, 1., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _ScrollView.Asset_EntrySearchContour, 1., False);
		Actions[{{{TitleBar::P}}}C_Action_Second].ActionMargin = {{{Size_SearchBar.X}}} - 10.;
		Actions[{{{TitleBar::P}}}C_Action_First].IconMargin = 2.;
	} else {
		{{{ExpendableAsset::P}}}SetWidth(This, _ScrollView.Asset_EntrySearch, 0., False);
		{{{ExpendableAsset::P}}}SetWidth(This, _ScrollView.Asset_EntrySearchContour, 0., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _ScrollView.Asset_EntrySearch, 0., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _ScrollView.Asset_EntrySearchContour, 0., False);
	}
	{{{ExpendableAsset::P}}}RedrawAsset(This, _ScrollView.Asset_EntrySearch, _IsAnimated);
	{{{ExpendableAsset::P}}}RedrawAsset(This, _ScrollView.Asset_EntrySearchContour, _IsAnimated);
	{{{TitleBar::P}}}SetActions(_ScrollView.TitleBar_Current, Actions, False);
	{{{TitleBar::P}}}RedrawTitleBar(_ScrollView.TitleBar_Current, _IsAnimated);

	// Update entry
	_ScrollView.Entry_Search.Visible = _Visible;
	_ScrollView.Entry_Search.Value = _EntryText;
	if (_IsSearchButton && _ScrollView.Entry_Search.Visible) {
		_ScrollView.Entry_Search.StartEdition();
		FocusSearch(_ScrollView, _Visible);
	}
}

Void UpdateCreateClubButton(K_State _State) {
	_State.ScrollView.Button_CreateClub_Grid.RelativePosition_V3.X = _State.ScrollView.Frame_MyClubsTitle.RelativePosition_V3.X + {{{ExpendableButton::P}}}GetWidth(_State.ScrollView.Frame_MyClubsTitle) + 1.;
	_State.ScrollView.ButtonIcon_CreateClub_Grid.RelativePosition_V3.X = _State.ScrollView.Button_CreateClub_Grid.RelativePosition_V3.X + 8.5;
	_State.ScrollView.Button_CreateClub_List.RelativePosition_V3.X = _State.ScrollView.Button_CreateClub_Grid.RelativePosition_V3.X;
	_State.ScrollView.ButtonIcon_CreateClub_List.RelativePosition_V3.X = _State.ScrollView.ButtonIcon_CreateClub_Grid.RelativePosition_V3.X;
}

K_State UpdateScrollViewControls(K_State _State, CMlFrame _Frame_Global, CMlFrame _Button_Back) {
	declare K_State State = _State;

	State.ScrollView.Scroll_Elements <=> (_Frame_Global.GetFirstChild("scroll-elements-"^State.ScrollView.CurrentLayout) as CMlFrame);
	State.ScrollView.Frame_ClampedControls = (_Frame_Global.GetFirstChild("frame-clamped-controls-"^State.ScrollView.CurrentLayout) as CMlFrame);
	State.ScrollView.Frame_MyClubsTitle <=> (_Frame_Global.GetFirstChild("frame-my-clubs-title-"^State.ScrollView.CurrentLayout) as CMlFrame);
	State.ScrollView.Frame_MyClubs <=> (_Frame_Global.GetFirstChild("frame-myclubs-"^State.ScrollView.CurrentLayout) as CMlFrame);
	State.ScrollView.Frame_ToMove <=> (State.ScrollView.Frame_MyClubs.GetFirstChild("frame-to-move") as CMlFrame);
	State.ScrollView.Button_PreviousClub <=> (State.ScrollView.Frame_MyClubs.GetFirstChild("button-"^State.ScrollView.CurrentLayout^"-previous-club") as CMlFrame);
	State.ScrollView.Button_NextClub <=> (State.ScrollView.Frame_MyClubs.GetFirstChild("button-"^State.ScrollView.CurrentLayout^"-next-club") as CMlFrame);
	State.ScrollView.TitleBar_Current <=> (State.ScrollView.Scroll_Elements.GetFirstChild("titlebar-"^State.ScrollView.CurrentLayout) as CMlFrame);
	if (!State.ScrollView.TitleBar_Current.Visible) State.ScrollView.TitleBar_Current <=> State.ScrollView.TitleBar_Common;
	State.ScrollView.Entry_Search <=> (State.ScrollView.TitleBar_Current.Parent.GetFirstChild("entry-search") as CMlEntry);
	State.ScrollView.Asset_EntrySearch <=> (State.ScrollView.TitleBar_Current.Parent.GetFirstChild("asset-entry-search") as CMlFrame);
	State.ScrollView.Asset_EntrySearchContour <=> (State.ScrollView.TitleBar_Current.Parent.GetFirstChild("asset-entry-search-contour") as CMlFrame);
	State.ScrollView.Button_CreateClub <=> (_Frame_Global.GetFirstChild("button-create-club-"^State.ScrollView.CurrentLayout) as CMlFrame);

	/* Update navigation for the back Button */
	{{{Navigation::P}}}ChangeControlTargets(This, _Button_Back, ["right", "up"], [State.ScrollView.Scroll_Elements.ControlId, State.ScrollView.Frame_MyClubs.ControlId]);

	return State;
}

K_State UpdateTitleBars(K_State _State, CMlFrame _Frame_Global, CMlFrame _Button_Back, Text _EntryText, Boolean _IsSearchBarVisible, Boolean _IsCurrentTitleBarClamped) {
	declare K_State State = _State;

	State.ScrollView.Frame_CommonHeader.Visible = _IsCurrentTitleBarClamped;
	foreach (Layout in [C_ScrollView_Grid, C_ScrollView_List]) {
		declare CMlFrame Frame_ClipScroll <=> (_Frame_Global.GetFirstChild("frame-clip-scroll-"^Layout) as CMlFrame);
		declare CMlFrame TitleBar_Current <=> (_Frame_Global.GetFirstChild("titlebar-"^Layout) as CMlFrame);
		declare CMlFrame Scroll_Elements <=> (_Frame_Global.GetFirstChild("scroll-elements-"^Layout) as CMlFrame);

		if (_IsCurrentTitleBarClamped) {
			Scroll_Elements.RelativePosition_V3.Y = {{{ScrollConfig.WindowSize.Y/2 + 12.}}};
			Frame_ClipScroll.RelativePosition_V3.Y = -12.;
			TitleBar_Current.Hide();
		} else {
			Scroll_Elements.RelativePosition_V3.Y = {{{ScrollConfig.WindowSize.Y/2}}};
			Frame_ClipScroll.RelativePosition_V3.Y = 0.;
			TitleBar_Current.Show();
		}
	}

	{{{TitleBar::P}}}LockNavigation(State.ScrollView.TitleBar_Current, True); //< Lock previous title bar
	State = UpdateScrollViewControls(State, _Frame_Global, _Button_Back);
	DisplaySearch(State.ScrollView, _EntryText, False, _IsSearchBarVisible, False);
	UpdateSearchPos(State.ScrollView.TitleBar_Current, State.ScrollView.Entry_Search.Parent, False);
	{{{TitleBar::P}}}LockNavigation(State.ScrollView.TitleBar_Current, False); //< Unlock the current title bar

	return State;
}

K_State SwitchScrollViewLayout(K_State _State, CMlFrame _Frame_Global, CMlFrame _Button_Back) {
	declare K_State State = _State;

	declare Integer ScrollViewElementKey = {{{Scroll::P}}}GetFocusedElementKey(State.ScrollView.Scroll_Elements);
	declare Vec2 ScrollOffset = State.ScrollView.Scroll_Elements.ScrollOffset;
	declare Boolean IsSearchBarVisible = {{{ExpendableAsset::P}}}GetOpacity(State.ScrollView.Asset_EntrySearch) >= 1.;
	declare Text EntryText = State.ScrollView.Entry_Search.Value;

	/* Lock previous scroll view */
	LockNavigation(State, True);

	/* Switch between ScrollView layouts */
	switch (State.ScrollView.CurrentLayout) {
		case C_ScrollView_List: State.ScrollView.CurrentLayout = C_ScrollView_Grid;
		case C_ScrollView_Grid: State.ScrollView.CurrentLayout = C_ScrollView_List;
	}
	State.ScrollView.Frame_ScrollView_Grid.Visible = State.ScrollView.CurrentLayout == C_ScrollView_Grid;
	State.ScrollView.Frame_ScrollView_List.Visible = State.ScrollView.CurrentLayout == C_ScrollView_List;
	State = UpdateScrollViewControls(State, _Frame_Global, _Button_Back);
	UpdateMyClubsButtons(State);

	/* Unlock current scroll view */
	LockNavigation(State, False);

	/* Transfer FocusedControl from previous scroll to the current scroll */
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Corpus}}}");
	declare CMlControl ControlToFocus = State.ScrollView.Frame_MyClubs;
	{{{Scroll::P}}}Unfocus(This, State.ScrollView.Scroll_Elements);
	{{{Scroll::P}}}SetFocusedElementKey(This, State.ScrollView.Scroll_Elements, ScrollViewElementKey, False, False);
	{{{Scroll::P}}}ScrollToPosition(This, State.ScrollView.Scroll_Elements, ScrollOffset.Y, False);
	if (FocusedControl != Null) {
		switch (FocusedControl.Id) {
			case _Button_Back.Id: {{{Scroll::P}}}ScrollToElement(This, State.ScrollView.Scroll_Elements, ScrollViewElementKey, False);
			default: {
				if (TL::StartsWith("scroll-elements-", FocusedControl.ControlId)) {
					ControlToFocus = State.ScrollView.Scroll_Elements;
					{{{Scroll::P}}}ScrollToElement(This, State.ScrollView.Scroll_Elements, ScrollViewElementKey, True);
				}
				Focus(State, FocusedControl, ControlToFocus);
			}
		}
	}

	/* Update scroll */
	{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Scroll_Elements);
	State = UpdateTitleBars(State, _Frame_Global, _Button_Back, EntryText, IsSearchBarVisible, {{{Scroll::P}}}IsControlClamped(State.ScrollView.Scroll_Elements, State.ScrollView.Frame_ClampedControls));

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Button_Back;
declare CMlLabel Label_SearchResult;

declare persistent Text Persistent_ScrollViewLayout_Elements for UserMgr.MainUser = "grid";

declare K_State State;

declare Text SearchValue;
declare Boolean EntryWasFocused;
declare Boolean ForceClubsUpdate;
declare Real PagerButtonsOpacity;
declare Boolean IsScrollInitialized;
declare Boolean IsMouse;
declare Boolean IsScrollFocusNeeded;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame);
Label_SearchResult <=> (Frame_Global.GetFirstChild("label-search-result") as CMlLabel);

G_Actions_Grid.fromjson({{{"\"\"\""^Grid_Actions.tojson()^"\"\"\""}}});
G_Actions_List.fromjson({{{"\"\"\""^List_Actions.tojson()^"\"\"\""}}});

State = K_State {
	CurrentTab = C_Tab_AllClubs,
	MyClubsAnimShift = 0,
	MyClubsPagers = K_Pager {
		CurrentKey = 0,
		LeftLimitKey = 0,
		RightLimitKey = (C_MyClubs_ClubsPerPage - 1),
		CurrentPage = 1,
		NextPageLoadTime = -1,
		NeedToLoadPage = False
	},
	ScrollView = K_ScrollView {
		Frame_CommonHeader = (Frame_Global.GetFirstChild("frame-common-header") as CMlFrame),
		Frame_MyClubs = (Frame_Global.GetFirstChild("frame-myclubs-"^Persistent_ScrollViewLayout_Elements) as CMlFrame),
		Frame_ScrollView_Grid = (Frame_Global.GetFirstChild("frame-scroll-view-grid") as CMlFrame),
		Frame_ScrollView_List = (Frame_Global.GetFirstChild("frame-scroll-view-list") as CMlFrame),
		ButtonIcon_CreateClub_Grid = (Frame_Global.GetFirstChild("button-icon-create-club-"^C_ScrollView_Grid) as CMlFrame),
		ButtonIcon_CreateClub_List = (Frame_Global.GetFirstChild("button-icon-create-club-"^C_ScrollView_List) as CMlFrame),
		Button_CreateClub = (Frame_Global.GetFirstChild("button-create-club-"^Persistent_ScrollViewLayout_Elements) as CMlFrame),
		Button_CreateClub_Grid = (Frame_Global.GetFirstChild("button-create-club-"^C_ScrollView_Grid) as CMlFrame),
		Button_CreateClub_List = (Frame_Global.GetFirstChild("button-create-club-"^C_ScrollView_List) as CMlFrame),
		Scroll_Elements = (Frame_Global.GetFirstChild("scroll-elements-"^Persistent_ScrollViewLayout_Elements) as CMlFrame),
		TitleBar_Common = (Frame_Global.GetFirstChild("titlebar-common") as CMlFrame),
		TitleBar_Grid = (Frame_Global.GetFirstChild("titlebar-grid") as CMlFrame),
		TitleBar_List = (Frame_Global.GetFirstChild("titlebar-list") as CMlFrame),
		CurrentLayout = Persistent_ScrollViewLayout_Elements
	}
};

// Init the view depending on the saved scrollview layout
State = UpdateScrollViewControls(State, Frame_Global, Button_Back);
State.ScrollView.Frame_ScrollView_Grid.Visible = Persistent_ScrollViewLayout_Elements == C_ScrollView_Grid;
State.ScrollView.Frame_ScrollView_List.Visible = Persistent_ScrollViewLayout_Elements == C_ScrollView_List;
{{{Navigation::P}}}ChangeControlTargets(This, Button_Back, ["right", "up"], [State.ScrollView.Scroll_Elements.ControlId, State.ScrollView.Frame_MyClubs.ControlId]);

State = SetMyClubsPager(State, 0);
FocusAvailableControl(State, Button_Back);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_Clubs}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_EnteringRoute: {
				UpdateCreateClubButton(State);
				LockNavigation(State, False);
				ForceClubsUpdate = True;

				// The scroll triggers an update the first time we enter the page
				// So we display a loading spinner the first time, and the following times, we force the scroll refresh
				if (IsScrollInitialized) {
					{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Scroll_Elements);
				} else {
					Loading(State.ScrollView, Label_SearchResult);
				}

				// Update controller info
				if ({{{UserStore::P}}}IsOfflineMode()) {
					ControllerInfo::SetButtons(["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "B" => "{{{Text_Back}}}"]);
				} else {
					ControllerInfo::SetButtons(["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "{{{Const::C_NavInput_ClubWidget}}}" => "{{{Const::C_Text_ClubWidget}}}", "B" => "{{{Text_Back}}}"]);
				}
			}
		}
	}

	/* Change "Create Club" button icon opacity depending on the current controller */
	if (IsMouse != Tools::IsUsingMouse(Input)) {
		IsMouse = Tools::IsUsingMouse(Input);
		declare Real OpacityIconUnfocus = 1.;
		if (IsMouse) OpacityIconUnfocus = 0.6;
		{{{Button::P}}}SetOpacityUnfocus(This, State.ScrollView.Button_CreateClub_Grid, OpacityIconUnfocus);
		{{{Button::P}}}SetOpacityUnfocus(This, State.ScrollView.Button_CreateClub_List, OpacityIconUnfocus);
	}

	/* Stores events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{UserStore::P}}}C_Event_UserPermissionsUpdated: ForceClubsUpdate = True;
					case {{{ClubStore::P}}}C_Event_MyClubsUpdated: State = ShiftMyClubsPager(State, 0, 0);
					case {{{ClubStore::P}}}C_Event_AllClubsUpdated: {
						declare Integer AllClubsTotal = {{{ClubStore::P}}}GetAllClubsTotal();
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-elements-grid") as CMlFrame, AllClubsTotal);
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-elements-list") as CMlFrame, AllClubsTotal);
					}
					case {{{ClubStore::P}}}C_Event_ClubRoomsUpdated: {
						declare Integer ClubRoomsTotal = {{{ClubStore::P}}}GetClubRoomsTotal();
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-elements-grid") as CMlFrame, ClubRoomsTotal);
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-elements-list") as CMlFrame, ClubRoomsTotal);
					}
					case {{{CampaignStore::P}}}C_Event_AllClubCampaignListUpdated, {{{CampaignStore::P}}}C_Event_CampaignListUpdateError: {
						declare Integer AllClubCampaignsTotal = {{{CampaignStore::P}}}GetAllClubCampaignsTotal();
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-elements-grid") as CMlFrame, AllClubCampaignsTotal);
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-elements-list") as CMlFrame, AllClubCampaignsTotal);
					}
					case {{{ClubStore::P}}}C_Event_SkinUploadsUpdated, {{{ClubStore::P}}}C_Event_SkinUploadsPagingFailed: {
						declare Integer SkinUploadsTotal = {{{ClubStore::P}}}GetSkinUploadsTotal();
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-elements-grid") as CMlFrame, SkinUploadsTotal);
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-elements-list") as CMlFrame, SkinUploadsTotal);
					}
					case {{{ClubStore::P}}}C_Event_ItemUploadsUpdated, {{{ClubStore::P}}}C_Event_ItemUploadsPagingFailed: {
						declare Integer ItemUploadsTotal = {{{ClubStore::P}}}GetItemUploadsTotal();
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-elements-grid") as CMlFrame, ItemUploadsTotal);
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-elements-list") as CMlFrame, ItemUploadsTotal);
					}
				}
			}
		}
	}

	/* Scroll events */
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null && Event.Scroll.Id == State.ScrollView.Scroll_Elements.Id) {
			switch (Event.Type) {
				case {{{Scroll::P}}}C_EventType_PagerUpdate: {
					if (Event.Scroll.ControlId == State.ScrollView.Scroll_Elements.ControlId) {
						SearchValue = State.ScrollView.Entry_Search.Value;
						switch (State.CurrentTab) {
							case C_Tab_AllClubs: {
								{{{ClubStore::P}}}Action_LoadAllClubsPage(
									This,
									State.ScrollView.Entry_Search.Value,
									Event.PagerOffset,
									Event.PagerCount
								);
							}
							case C_Tab_Campaigns: {
								{{{CampaignStore::P}}}Action_LoadAllClubCampaignsPage(
									This,
									ClubAPI::C_QueryValue_Sort_Popularity,
									ClubAPI::C_QueryValue_Order_DESC,
									State.ScrollView.Entry_Search.Value,
									Event.PagerOffset,
									Event.PagerCount
								);
							}
							case C_Tab_Rooms: {
								{{{ClubStore::P}}}Action_LoadAllClubRoomsPage(
									This,
									State.ScrollView.Entry_Search.Value,
									Event.PagerOffset,
									Event.PagerCount
								);
							}
							case C_Tab_Skins: {
								{{{ClubStore::P}}}Action_LoadAllSkinUploadsPage(
									This,
									ClubAPI::C_QueryValue_Sort_Popularity,
									ClubAPI::C_QueryValue_Order_DESC,
									State.ScrollView.Entry_Search.Value,
									Event.PagerOffset,
									Event.PagerCount
								);
							}
							case C_Tab_Items: {
								{{{ClubStore::P}}}Action_LoadAllItemUploadsPage(
									This,
									ClubAPI::C_QueryValue_Sort_Popularity,
									ClubAPI::C_QueryValue_Order_DESC,
									State.ScrollView.Entry_Search.Value,
									Event.PagerOffset,
									Event.PagerCount
								);
							}
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_Update: {
					if (IsScrollInitialized) {
						declare K_Element[Integer] Elements;
						declare Integer[] ElementIds;
						declare Text SearchResult;

						// Get data associated to the selected tab
						switch (State.CurrentTab) {
							case C_Tab_AllClubs: {
								SearchResult = "{{{Text_NoClubs}}}";
								foreach (Key => Club in {{{ClubStore::P}}}GetAllClubs()) {
									Elements[Key] = K_Element {
										Id = Club.Id,
										Name = Club.Name,
										ImageUrl = Club.IconUrl,
										SecondText = Tools::FormatClubTag(Club.Tag),
										ThirdText = "",
										PopularityLevel = Club.PopularityLevel,
										CreatorAccountId = Club.AuthorAccountId,
										LatestEditorAccountId = ""
									};
								}
							}
							case C_Tab_Campaigns: {
								SearchResult = "{{{Text_NoClubCampaigns}}}";
								foreach (Key => Campaign in {{{CampaignStore::P}}}GetAllClubCampaignList()) {
									declare Text CampaignMapCount = "";
									if (Campaign.MapCount > 1) CampaignMapCount = TL::Compose("{{{Text_Tracks}}}", ""^Campaign.MapCount);
									else if (Campaign.MapCount == 1) CampaignMapCount = "{{{Text_Track}}}";
									Elements[Key] = K_Element {
										Id = Campaign.Id,
										Name = Campaign.Name,
										ImageUrl = Campaign.Media.ButtonBackgroundUrl,
										SecondText = Campaign.Club.Name,
										ThirdText = CampaignMapCount,
										PopularityLevel = Campaign.PopularityLevel,
										CreatorAccountId = Campaign.CreatorAccountId,
										LatestEditorAccountId = Campaign.LatestEditorAccountId
									};
								}
							}
							case C_Tab_Rooms: {
								SearchResult = "{{{Text_NoClubRooms}}}";
								foreach (Key => Room in {{{ClubStore::P}}}GetClubRooms()) {
									declare Text Population = "";
									if (Room.ServerInfo.PlayerCount > 0) {
										Population = ""^Room.ServerInfo.PlayerCount;
										if (!Room.IsHostedByNadeo && !Room.Scalable && Room.MaxPlayers != 0) {
											Population ^= "/"^Room.MaxPlayers;
										}
									}
									Elements[Key] = K_Element {
										Id = Room.Id,
										Name = Room.Name,
										ImageUrl = Room.MediaUrl,
										SecondText = Tools::GetScriptName(Room.ScriptName, "{{{Const::C_BaseScriptName}}}", "{{{Const::C_BaseScriptName_ToReplace}}}", {{{dump(Const::C_ModeNames_ScriptNames)}}}),
										ThirdText = Population,
										PopularityLevel = Room.PopularityLevel,
										CreatorAccountId = Room.CreatorAccountId,
										LatestEditorAccountId = Room.LatestEditorAccountId
									};
								}
							}
							case C_Tab_Skins: {
								SearchResult = "{{{Text_NoClubSkins}}}";
								foreach (Key => Skin in {{{ClubStore::P}}}GetSkinUploads()) {
									declare Text SkinCount = "";
									if (Skin.BucketItemCount > 1) SkinCount = TL::Compose("{{{Text_Skins}}}", ""^Skin.BucketItemCount);
									else if (Skin.BucketItemCount == 1) SkinCount = "{{{Text_Skin}}}";
									Elements[Key] = K_Element {
										Id = Skin.Id,
										Name = Skin.Name,
										ImageUrl = Skin.MediaUrl,
										SecondText = Skin.ClubName,
										ThirdText = SkinCount,
										PopularityLevel = Skin.PopularityLevel,
										CreatorAccountId = Skin.CreatorAccountId,
										LatestEditorAccountId = Skin.LatestEditorAccountId
									};
								}
							}
							case C_Tab_Items: {
								SearchResult = "{{{Text_NoClubItems}}}";
								foreach (Key => Item in {{{ClubStore::P}}}GetItemUploads()) {
									Elements[Key] = K_Element {
										Id = Item.Id,
										Name = Item.Name,
										ImageUrl = Item.MediaUrl,
										SecondText = Item.ClubName,
										ThirdText = "",
										PopularityLevel = Item.PopularityLevel,
										CreatorAccountId = Item.CreatorAccountId,
										LatestEditorAccountId = Item.LatestEditorAccountId
									};
								}
							}
						}

						// Show elements in the scroll with data
						foreach (Key => Frame_Element in Event.ElementsVisible) {
							if (Elements.existskey(Key)) {
								declare K_Element Element = Elements[Key];
								ShowElement(Frame_Element, Element, State.ScrollView.CurrentLayout);
								ElementIds.add(Element.Id);
							} else {
								ShowElementLoading(Frame_Element, State.ScrollView.CurrentLayout);
							}
						}
						foreach (Key => Frame_Element in Event.ElementsHidden) {
							HideElement(Frame_Element);
						}

						// Update scroll navigation
						{{{Navigation::P}}}Lock(State.ScrollView.Scroll_Elements, Event.ElementsVisible.count <= 0);
						{{{Navigation::P}}}EnableInputs(State.ScrollView.Scroll_Elements, Event.ElementsVisible.count <= 0);
						if ({{{Scroll::P}}}IsLoadingSpinnerDisplayed(State.ScrollView.Scroll_Elements)) {
							{{{Scroll::P}}}DisplayLoadingSpinner(This, State.ScrollView.Scroll_Elements, False);
							if (IsScrollFocusNeeded && Event.ElementsVisible.count > 0) {
								Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Corpus}}}"), State.ScrollView.Scroll_Elements);
							} else {
								FocusAvailableControl(State, Button_Back);
							}
							if ({{{Navigation::P}}}IsFocused(This, State.ScrollView.Scroll_Elements, "{{{C_NavGroup_Corpus}}}")) {
								{{{Scroll::P}}}ScrollToElement(This, State.ScrollView.Scroll_Elements, 0, True);
							}
							IsScrollFocusNeeded = False;
						}

						// Display a message if the scroll has no data
						Label_SearchResult.Visible = Event.ElementsVisible.count <= 0;
						if (Label_SearchResult.Visible) {
							if (State.ScrollView.Entry_Search.Value == "") {
								Label_SearchResult.Value = SearchResult;
							} else {
								Label_SearchResult.Value = "{{{Text_NoSearchResult}}}";
							}
						}
					} else {
						IsScrollInitialized = True; //< We need to skip the first update of the scroll (automatic update) because the request is not triggered yet
					}
				}
				case {{{Scroll::P}}}C_EventType_Focus: {
					if (Event.From != Null) FocusElement(Event.From, State.ScrollView.CurrentLayout, False);
					if (Event.To != Null && {{{Scroll::P}}}IsFocused(Event.Scroll)) FocusElement(Event.To, State.ScrollView.CurrentLayout, True);
					if (Event.IsMouse && Event.To != Null && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
						declare CMlControl CurrentFocus = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Corpus}}}");
						Focus(State, CurrentFocus, Event.Scroll);
					}
				}
				case {{{Scroll::P}}}C_EventType_Select: {
					switch (State.CurrentTab) {
						case C_Tab_AllClubs: {
							declare Clubs = {{{ClubStore::P}}}GetAllClubs();
							if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_ViewClub)) {
								ClubEdition::GoToPage(This, {{{Router::P}}}GetCurrentRoutePath(This), RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_ViewClub));
							} else if (!{{{ControlBlockList::P}}}IsBlocked(This, Clubs[Event.ToKey].AuthorAccountId)) {
								if (Clubs.existskey(Event.ToKey)) {
									{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubDetails}}}", {{{Router::P}}}GetCurrentRoutePath(This));
									{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubDetails}}}", ["{{{RoutePaths::C_Query_Club}}}"=>Clubs[Event.ToKey].tojson()]);
								}
							}
						}
						case C_Tab_Campaigns: {
							declare ClubCampaigns = {{{CampaignStore::P}}}GetAllClubCampaignList();
							if (ClubCampaigns.existskey(Event.ToKey)) {
								declare ClubCampaign = ClubCampaigns[Event.ToKey];
								if (!{{{ControlBlockList::P}}}IsBlocked(This, [ClubCampaign.CreatorAccountId, ClubCampaign.LatestEditorAccountId])) {
									LockNavigation(State, True);
									{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CampaignDisplay}}}", {{{Router::P}}}GetCurrentRoutePath(This));
									{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CampaignDisplay}}}",	[
										"{{{RoutePaths::C_Query_Campaign}}}" => ""^ClubCampaign.tojson(),
										"{{{RoutePaths::C_Query_CampaignEditionTimestamp}}}" => ""^ClubCampaign.EditionTimestamp,
										{{{Router::P}}}C_Query_MenuSection => "{{{RoutePaths::C_MenuSection_Clubs}}}"
									], True);
								}
							}
						}
						case C_Tab_Rooms: {
							declare ClubRooms = {{{ClubStore::P}}}GetClubRooms();
							if (ClubRooms.existskey(Event.ToKey)) {
								declare Room = ClubRooms[Event.ToKey];
								if (!{{{ControlBlockList::P}}}IsBlocked(This, [Room.CreatorAccountId, Room.LatestEditorAccountId])) {
									LockNavigation(State, True);
									if (Room.CampaignId != {{{CampaignStruct::P}}}C_Campaign_NullId) {
										{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_RoomCampaignDisplay}}}", {{{Router::P}}}GetCurrentRoutePath(This));
										{{{Router::P}}}Push(
											This,
											"{{{RoutePaths::C_Path_RoomCampaignDisplay}}}",
											[
												"{{{RoutePaths::C_Query_Room}}}" => ""^Room.tojson(),
												{{{Router::P}}}C_Query_MenuSection => "{{{RoutePaths::C_MenuSection_Clubs}}}"
											],
											True
										);
									} else {
										// The room has a list of maps or a dedicated server
										{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_RoomMapListDisplay}}}", {{{Router::P}}}GetCurrentRoutePath(This));
										{{{Router::P}}}Push(
											This,
											"{{{RoutePaths::C_Path_RoomMapListDisplay}}}",
											[
												"{{{RoutePaths::C_Query_Room}}}" => ""^Room.tojson(),
												{{{Router::P}}}C_Query_MenuSection => "{{{RoutePaths::C_MenuSection_Clubs}}}"
											],
											True
										);
									}
								}
							}
						}
						case C_Tab_Skins: {
							declare ClubSkins = {{{ClubStore::P}}}GetSkinUploads();
							if (ClubSkins.existskey(Event.ToKey)) {
								declare ClubSkin = ClubSkins[Event.ToKey];
								if (!{{{ControlBlockList::P}}}IsBlocked(This, [ClubSkin.CreatorAccountId, ClubSkin.LatestEditorAccountId])) {
									declare Activity = {{{ClubStruct::P}}}K_Activity {
										Id = ClubSkin.Id,
										ClubId = ClubSkin.ClubId,
										Name = ClubSkin.Name,
										Type = ClubSkin.Type,
										Public = True,
										Active = True,
										MediaUrl = ClubSkin.MediaUrl
									};
									LockNavigation(State, True);
									MenuBackground::SetRouteDisplayMode("{{{RoutePaths::C_Path_BucketItemUploads}}}", MenuBackground::C_DisplayMode_Null);
									{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_BucketItemUploads}}}", {{{Router::P}}}GetCurrentRoutePath(This));
									{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_BucketItemUploads}}}", ["{{{RoutePaths::C_Query_Activity}}}" => Activity.tojson()], True);
								}
							}
						}
						case C_Tab_Items: {
							declare ClubItems = {{{ClubStore::P}}}GetItemUploads();
							if (ClubItems.existskey(Event.ToKey)) {
								declare ClubItem = ClubItems[Event.ToKey];
								if (!{{{ControlBlockList::P}}}IsBlocked(This, [ClubItem.CreatorAccountId, ClubItem.LatestEditorAccountId])) {
									declare Activity = {{{ClubStruct::P}}}K_Activity {
										Id = ClubItem.Id,
										ClubId = ClubItem.ClubId,
										Name = ClubItem.Name,
										Type = ClubItem.Type,
										Public = True,
										Active = True,
										MediaUrl = ClubItem.MediaUrl
									};
									LockNavigation(State, True);
									{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubItemsActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
									{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubItemsActivity}}}", ["{{{RoutePaths::C_Query_Activity}}}" => Activity.tojson()], True);
								}
							}
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_ReachLimit: {
					declare CMlControl CurrentFocus = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Corpus}}}");
					if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Up) {
						if (CurrentFocus == State.ScrollView.Scroll_Elements && !{{{Navigation::P}}}IsLocked(State.ScrollView.Frame_MyClubs)) {
							Focus(State, CurrentFocus, State.ScrollView.Frame_MyClubs);
							{{{MenuSounds::P}}}PlayFocusSound(This, State.ScrollView.Frame_MyClubs);
						}
					} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Left || Event.NavAction == CMlScriptEvent::EMenuNavAction::Down) {
						Focus(State, CurrentFocus, Button_Back);
					}
				}
				case {{{Scroll::P}}}C_EventType_ClampUpdate: {
					State = UpdateTitleBars(
						State,
						Frame_Global,
						Button_Back,
						State.ScrollView.Entry_Search.Value,
						{{{ExpendableAsset::P}}}GetOpacity(State.ScrollView.Asset_EntrySearch) >= 1.,
						Event.ClampedControl.ClampedTop
					);
				}
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Corpus}}}")) {
					if (
						Event.From != Null &&
						Event.From.HasClass("{{{C_Class_MyClubs_List}}}") && (
							Event.Input == CMlScriptEvent::EMenuNavAction::Left ||
							Event.Input == CMlScriptEvent::EMenuNavAction::Right
						)
					) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
							State = ShiftMyClubsPager(State, -1, 0);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
							State = ShiftMyClubsPager(State, 1, 0);
						}
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						if (Event.To != Null && Event.To == State.ScrollView.Frame_MyClubs) {
							State = Select(State, GetMyClubsButtonFocused(State));
						} else {
							State = Select(State, Event.To);
						}
					} else {
						Focus(State, Event.From, Event.To);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						LockNavigation(State, True);
						{{{Router::P}}}PushParent(This);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::AppMenu) {
						CreateClub();
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_MouseOnly}}}") || {{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Corpus}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						// Focus my clubs if we focus one of its children with the mouse
						if (Event.To != Null) {
							declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Corpus}}}");
							if (Event.To.HasClass("{{{C_Class_MyClubs_Focus}}}")) {
								if (FocusedControl != Null && FocusedControl != State.ScrollView.Frame_MyClubs) {
									Focus(State, FocusedControl, State.ScrollView.Frame_MyClubs);
								}
							} else if (Event.To.ControlId == Button_Back.ControlId) {
								if (FocusedControl != Null && FocusedControl != Button_Back) {
									Focus(State, FocusedControl, Button_Back);
								}
							}
						}
						if (Event.To != Null && Event.To.HasClass("{{{C_Class_MyClubs_Button}}}")) {
							State = SetMyClubsPager(State, GetMyClubsButtonKey(Event.To));
						}
						Focus(State, Event.From, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOut) {
						if (Event.From != Null && (Event.From.HasClass("{{{C_Class_MyClubs_Pager}}}"))) {
							Focus(State, Event.From, Event.To);
						}
					}
				}
			}
		}
	}

	/* TitleBar events */
	foreach (Event in {{{TitleBar::P}}}PendingEvents) {
		if (Event.TitleBar.Id == State.ScrollView.TitleBar_Current.Id) {
			switch (Event.Type) {
				case {{{TitleBar::P}}}C_EventType_TabUpdate: {
					{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Scroll_Elements);
					{{{TitleBar::P}}}UpdateCurrentTab(State.ScrollView.TitleBar_Common, Event.CurrentTab, False);
					{{{TitleBar::P}}}UpdateCurrentTab(State.ScrollView.TitleBar_Grid, Event.CurrentTab, False);
					{{{TitleBar::P}}}UpdateCurrentTab(State.ScrollView.TitleBar_List, Event.CurrentTab, False);
					IsScrollFocusNeeded = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Corpus}}}") == State.ScrollView.Scroll_Elements;
					State.CurrentTab = Event.CurrentTab;
				}
				case {{{TitleBar::P}}}C_EventType_Update: {
					if (Event.ActionsPos.existskey({{{TitleBar::P}}}C_Action_Second)) {
						UpdateSearchPos(State.ScrollView.TitleBar_Current, State.ScrollView.Entry_Search.Parent, True);
					} else {
						Loading(State.ScrollView, Label_SearchResult);
					}
				}
				case {{{TitleBar::P}}}C_EventType_Action: {
					switch (Event.Action) {
						case {{{TitleBar::P}}}C_Action_First: {
							State = SwitchScrollViewLayout(State, Frame_Global, Button_Back);
							Persistent_ScrollViewLayout_Elements = State.ScrollView.CurrentLayout;
							UserMgr.MainUser.PersistentSave();
						}
						case {{{TitleBar::P}}}C_Action_Second: {
							if (State.ScrollView.Entry_Search.IsFocused && State.ScrollView.Entry_Search.Visible) {
								DisplaySearch(State.ScrollView, "", False, False, True);
							} else {
								DisplaySearch(State.ScrollView, State.ScrollView.Entry_Search.Value, True, True, True);
							}
						}
					}
				}
			}
		}
	}

	/* Search behaviors */
	if (EntryWasFocused != State.ScrollView.Entry_Search.IsFocused) {
		EntryWasFocused = State.ScrollView.Entry_Search.IsFocused;
		FocusSearch(State.ScrollView, State.ScrollView.Entry_Search.IsFocused);
		if (!State.ScrollView.Entry_Search.IsFocused) {
			if (SearchValue != State.ScrollView.Entry_Search.Value) {
				Loading(State.ScrollView, Label_SearchResult);
				declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Corpus}}}");
				if (FocusedControl != Null && FocusedControl.Id == State.ScrollView.Scroll_Elements.Id) {
					Focus(State, FocusedControl, Button_Back);
				}
			}
			IsScrollFocusNeeded = True;
			{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Scroll_Elements);
			if (State.ScrollView.Entry_Search.Value == "") {
				DisplaySearch(State.ScrollView, "", False, False, True);
			}
		}
	}

	/* Pager buttons opacity depending on scroll offset */
	PagerButtonsOpacity = ML::Clamp(-0.125*State.ScrollView.Scroll_Elements.ScrollOffset.Y + 3.5, 0., 1.); //< Linear function in a [20;28] scroll offset range
	if ({{{Button::P}}}GetOpacityUnfocus(State.ScrollView.Button_PreviousClub) != PagerButtonsOpacity) {
		{{{Button::P}}}SetOpacityUnfocus(This, State.ScrollView.Button_PreviousClub, PagerButtonsOpacity);
		{{{Button::P}}}SetOpacityUnfocus(This, State.ScrollView.Button_NextClub, PagerButtonsOpacity);
		{{{Navigation::P}}}Lock(State.ScrollView.Button_PreviousClub, PagerButtonsOpacity < 0.5);
		{{{Navigation::P}}}Lock(State.ScrollView.Button_NextClub, PagerButtonsOpacity < 0.5);
	}

	/* MyClubs update */
	if (ForceClubsUpdate || (State.MyClubsPagers.NeedToLoadPage && Now >= State.MyClubsPagers.NextPageLoadTime)) {
		State.MyClubsPagers.NeedToLoadPage = False;
		{{{ClubStore::P}}}Action_LoadMyClubsPage(This, ML::Max(0, (State.MyClubsPagers.CurrentPage - 2)) * C_MyClubs_ClubsPerPage, C_MyClubs_ClubsPerPage*3);
	}
	if (ForceClubsUpdate) ForceClubsUpdate = False;

} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_LeavingRoute: {
				// Updates the focus when the player is leaving the page to avoid a visible focus update when entering the page
				if ({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Corpus}}}") == Button_Back) {
					FocusAvailableControl(State, Button_Back);
				}
			}
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	ButtonIcon::ComponentV2(),
	CampaignStore::ComponentV2(),
	CampaignStruct::Component(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	ExpendableAsset::ComponentV2(),
	ExpendableButton::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	Router::ComponentV2(),
	Scroll::ComponentV2(),
	TitleBar::Component(),
	Transition::ComponentV2(),
	UserStore::ComponentV2(),
	ControlBlockList::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}