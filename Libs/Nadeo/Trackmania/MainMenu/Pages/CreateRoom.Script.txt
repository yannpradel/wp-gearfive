/**
 *	Page: CreateRoom
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/CreateRoom.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ButtonStyles.Script.txt" as ButtonStyles
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Utils/TextToSpeech.Script.txt" as TextToSpeech
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/CMGame/Components/FormSelect.Script.txt" as FormSelect
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/Trackmania/API/BrowserAPI.Script.txt" as BrowserAPI
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/Checkbox.Script.txt" as Checkbox
#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/MapRankings.Script.txt" as MapRankings
#Include "Libs/Nadeo/Trackmania/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/Trackmania/Components/PopUpClubThemes.Script.txt" as PopUpClubThemes
#Include "Libs/Nadeo/Trackmania/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/Trackmania/Components/ScriptSettingsEditor.Script.txt" as ScriptSettingsEditor
#Include "Libs/Nadeo/CMGame/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/Trackmania/Components/TrackBrowser.Script.txt" as TrackBrowser
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/Trackmania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/Trackmania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/CMGame/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "TextLib" as TL
#Include "MathLib" as ML

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_CreateRoom"
#Const C_NavGroup_Default "navgroup-create-room-default"
#Const C_NavGroup_MouseOnly "navgroup-create-room-mouseonly"
#Const C_Class_Setting "class-setting-page-create-room"
#Const C_Class_MapButton "class-button-map-page-create-room"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

#Const C_ColumnNumber 5
#Const C_RowNumber 5

#Const C_SettingShift_Previous -1
#Const C_SettingShift_Null 0
#Const C_SettingShift_Next 1

#Const C_Setting_Server 0
#Const C_Setting_MaxPlayers 1
#Const C_Setting_GameMode 2
#Const C_Setting_Scalable 3
#Const C_Setting_Password 4
#Const C_Setting_Names [
	//L16N [Create Room] The location of the server in a club room
	0 => _("|RoomSetting|Server"),
	//L16N [Create Room] Amount of players allowed in the room
	1 => _("|RoomSetting|Max players"),
	//L16N [Create Room] The game mode that will be played in the room
	2 => _("|RoomSetting|Game mode"),
	//L16N [Create Room] Activate scalable room, meaning there can be an inifite number of servers
	3 => _("|RoomSetting|Scalable room"),
	//L16N [Create Room] Activate room password, meaning the room will be private
	4 => _("|RoomSetting|Password")
]
#Const C_Setting_Descriptions [
	//L16N [Create Room] Description of the server setting
	0 => _("|RoomSetting|The region of the world where the room will be hosted"),
	//L16N [Create Room] Description of the max players setting
	1 => _("|RoomSetting|The maximum number of simultaneous players allowed per server"),
	//L16N [Create Room] Description of the game mode setting
	2 => _("|RoomSetting|The game mode that will be played on the chosen tracks"),
	//L16N [Create Room] Description of the scalable setting
	3 => _("|RoomSetting|When the room is full, a new server is automatically created for additionnal players"),
	//L16N [Create Room] Description of the password setting. This setting cannot be modified after the room has been created.
	4 => _("|RoomSetting|Generates a password that will be required to join the room (cannot be modified later)")
]

#Const C_Choice_Move 0
#Const C_Choice_Replace 1
#Const C_Choice_Delete 2
#Const C_Choices_SelectedMap [
	//L16N [Create Room] Change the track position in the room
	0 => _("|RoomMap|Move"),
	//L16N [Create Room] Open the track browser to replace the selected track
	1 => _("|RoomMap|Replace"),
	//L16N [Create Room] Delete the track from the room
	2 => _("|RoomMap|Delete")
]

#Const C_Choice_Cancel 0
#Const C_Choice_Exit 1
#Const C_Choices_Exit [
	//L16N [Create Room] Cancel and return to the room creation
	0 => _("Cancel"),
	//L16N [Create Room] Exit the room creation
	1 => _("Exit")
]

#Const C_Step_LoadingRoomDetails 0
#Const C_Step_RoomTypeSelection 1
#Const C_Step_BrowseMaps 2
#Const C_Step_SelectCampaign 3
#Const C_Step_BrowseImages 4
#Const C_Step_PlayerDedicatedServer 5
#Const C_Step_RoomMapList 6

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_Exit = _("Exit");
	declare Text Text_Back = _("Back");
	declare Text Text_Select = _("Select");
	declare Text Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [Create Room] Toggle a setting checkbox.
	declare Text Text_Toggle = _("Toggle");
	//L16N [Create Room] Select a value in a list.
	declare Text Text_SelectValue = _("Select value");
	//L16N [Create Room] Default placeholder for the room name text field. Room is an online server where players can play together.
	declare Text Text_RoomName = _("Room name");
	//L16N [Create Room] The name of the account used to create the dedicated server
	declare Text Text_ServerAccount = _("Server account");
	//L16N [Create Room] Indicates the player that the max players setting is set per server
	declare Text Text_MaxPlayersInfo = _("Per server");
	//L16N [Create Room] Title of the page to create a room.
	declare Text Text_CreateRoom = _("Create room");
	//L16N [Create Room] Title of the page to edit a room.
	declare Text Text_EditRoom = _("Edit room");
	//L16N [Create Room] Button to create a room.
	declare Text Text_Create = _("Create");
	//L16N [Create Room] Button to save an edited room.
	declare Text Text_Save = _("Save");
	//L16N [Create Room] Title of the pop-up asking for exit confirmation.
	declare Text Text_ExitRoom = _("Exit room creation");
	//L16N [Create Room] Error message displayed when the number of character for the campaign name exceeds the maximum authorised. %1 will be replaced by a number, e.g. "The room name must not exceed 20 characters"
	declare Text Text_NameLimit = _("The room name must not exceed %1 characters");
	//L16N [Create Room] Button that sends the player to a campaign selection list
	declare Text Text_SelectCampaign = _("Select a campaign");
	//L16N [Create Room] Button that sends the player to a track selection list
	declare Text Text_SelectMaps = _("Select tracks");
	//L16N [Create Room] Indicates to the player that they can swap the focused track with the previously selected track.
	declare Text Text_SwapMap = _("Swap track");
	//L16N [Create Room] Indicates to the player that they can select an other track to swap with the previously selected track. %1 will be replaced by the name of the previously selected track. e.g. "Select a track to swap with 'Awesome track'"
	declare Text Text_SelectToSwapMap = _("Select a track to swap with '$<%1$>'");
	//L16N [Create Room] Indicates to the player that they can cancel the track swapping.
	declare Text Text_AbortSwapMap = _("Abort swap");
	//L16N [Create Room] Use a non official Nadeo room
	declare Text Text_UseDedicatedServer = _("Use your dedicated server");
	//L16N [Create Room] Text indicating to the player that they can select a campaign for the creation of the room.
	declare Text Text_CampaignToUse = _("Select a campaign to use");
	//L16N [Create Room] Text indicating to the player that there is no available campaign to select.
	declare Text Text_NoCampaign = _("No available campaign");
	//L16N [Create Room] Loading message while creating the club room
	declare Text Text_CreatingClubRoom = _("Creating club room...");
	//L16N [Create Room] Loading message while editing the club room
	declare Text Text_EditingClubRoom = _("Editing club room...");
	//L16N [Create Room] Loading message while loading the club room details
	declare Text Text_RetrievingClubRoom = _("Retrieving club room");
	//L16N [Create Room] Loading message while loading the campaign
	declare Text Text_RetrievingCampaign = _("Retrieving campaign's data");
	//L16N [Create Room] Error message displayed when map types do not match.
	declare Text Text_MapType = _("Please select tracks with the same map type.");
	//L16N [Create Room] Text displayed to indicate to the player that the selected track is already existing in the track list.
	declare Text Text_ExistingTrack = _("The track '$<%1$>' is already in the track list and has not been added");
	//L16N [Create Room] Text displayed to indicate to the player that the selected tracks are already existing in the track list.
	declare Text Text_ExistingTracks = _("%1 tracks are already in the track list and have not been added");
	//L16N [Create Room] Text displayed to indicate to the player that there are already too many maps in the room. %1 will be replaced by a number, e.g. 100.
	declare Text Text_TooManyMaps = _("There are already %1 tracks in your room, you cannot add more");
	//L16N [Create Room] Text for the Public/Private room switch.
	declare Text Text_Public = _("|Privacy|Public");
	//L16N [Create Room] Text for the Public/Private room switch.
	declare Text Text_Private = _("|Privacy|Private");
	//L16N [Create Room] Title of the room privacy toggle.
	declare Text Text_PrivacyTitle = _("|Privacy|Privacy");
	//L16N [Create Room] Description of the room privacy toggle.
	declare Text Text_PrivacyDescription = _("|Privacy|Only club members can access a private activity");
	//L16N [Create Room] Error message displayed when the player tries to create a room without the requirements.
	declare Text Text_NoTracks = _("You need at least one track and a name to create a room");
	//L16N [Create Room] Error message displayed when the player tries to create a room without the requirements.
	declare Text Text_DedicatedRequirements = _("You need at least to select an available server account and a name to create a room");
	//L16N [Create Room] Error message displayed when a track upload has failed. %1 will be replaced by an error code, e.g. "Error while uploading tracks, please try again. (Error code: 500)"
	declare Text Text_UploadError = _("Error while uploading tracks, please try again. (Error code: %1)");
	//L16N [Create Room] Error displayed when there is an error while getting data with a HTTP request. %1 will be replaced with a code e.g. "Error while gathering tracks data. (Error code: 500)"
	declare Text Text_MapListError = _("Error while gathering tracks data. (Error code: %1)");
	//L16N [Create Room] Error displayed when the player is trying to create a new room with an already used server account. %1 will be replaced with the club room and %2 with the corresponding activity id.
	declare Text Text_ExistingRoom = _("This server account is already used for the club room '$<%1$>' with id %2. Please select another account.");
	//L16N [Create Room] Error displayed when the user has no server accounts.
	declare Text Text_NoAccountRegistered = _("You don't have any server accounts registered.");
	//L16N [Create Room] Error message displayed when fetching the user's accounts failed. %1 will be replaced by an error code, e.g. "(Error code: 500)"
	declare Text Text_ServerAccountError = _("An error occurred while retrieving your accounts, please try again. (Error code: %1)");
	//L16N [Create Room] Option displayed in the dropdown menu when there is no dedicated server account found.
	declare Text Text_NoAccountFound = _("No accounts found");
	//L16N [Create Room] Option displayed in the dropdown menu to indicate the player they can select a server account.
	declare Text Text_AccountSelection = _("Select an account");
	//L16N [Create Room] Option displayed in the dropdown menu when an error occurred during the fetching of dedicated server accounts.
	declare Text Text_Error = _("Error");
	//L16N [Create Room] %1 will be replaced by the name of the author of the track, e.g. "by Darrek"
	declare Text Text_AuthorName = _("By %1");
	//L16N [Create Room] Text pronounced when the player is focusing the button to add a track in the room.
	declare Text TTS_AddTracks = _("Add tracks to your room");
	//L16N [Create Room] Text pronounced when the player is focusing the button to choose a logo for the room.
	declare Text TTS_ChooseLogo = _("Choose a logo for your room");
	// Description of the save room pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_Exit = [
		//L16N [Create Room] Text displayed in the password pop-up to indicate that this room is portected with a password.
		PopUpMultiChoice::CreateDescriptionPart(_("Are you sure you want to exit the room creation?"), <140., 20.>, 3., Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold), "$t$i", <1., 1., 1.>, False)
	];

	declare Text Image_ButtonCampaign = "file://Media/Manialinks/Nadeo/Trackmania/Menus/PageCreateRoom/Menu_Clubs_CreateRoom_SelectCampaign.dds";
	declare Text Image_ButtonMaps = "file://Media/Manialinks/Nadeo/Trackmania/Menus/PageCreateRoom/Menu_Clubs_CreateRoom_SelectTracks.dds";
	declare Text Image_ButtonDedicated = "file://Media/Manialinks/Nadeo/Trackmania/Menus/PageCreateRoom/Menu_Clubs_CreateRoom_DedicatedServer.dds";
	declare Vec2 Size_ButtonRoomType = MLHelpers::KeepRatioFromY(1232., 556., 35.);
	declare Vec2 Size_Logo = MLHelpers::KeepRatioFromY(608., 272., 21.);
	declare Vec2 Size_TextField = <60., 9.>;

	/* Club campaigns scroll view */
	declare Vec2 Size_ClubCampaignScrollWindow = <240., 70.>;
	declare Integer ClubCampaignsColumnsNb = 5;
	declare Integer ClubCampaignsRowsNb = 3;
	declare Integer ClubCampaignsPerPage = ClubCampaignsColumnsNb * ClubCampaignsRowsNb;
	declare Vec2 Size_ClubCampaignMargin = <3., 3.>;
	declare Vec2 Size_ClubCampaign = Scroll::GetElementSize(Size_ClubCampaignScrollWindow, Size_ClubCampaignMargin, ClubCampaignsColumnsNb, ClubCampaignsRowsNb);
	declare Integer ClubCampaignsElementsNb = Scroll::GetRequiredElementsNb(Size_ClubCampaignScrollWindow, Size_ClubCampaign, Size_ClubCampaignMargin, ClubCampaignsColumnsNb);

	declare Vec2 Size_AdjustedClubCampaign = <Size_ClubCampaign.X - MLHelpers::SkewX(Size_ClubCampaign.Y, 10.),	Size_ClubCampaign.Y>;
	declare Vec2 Size_ClubCampaignImage = MLHelpers::KeepRatioFromY(608., 272., Size_ClubCampaign.Y);
	declare Vec2 Pos_ClubName = <Size_ClubCampaignImage.X * 0.03, Size_ClubCampaignImage.Y * -0.88>;

	declare Text ML_ClubCampaignCards = "";
	for (I, 1, ClubCampaignsElementsNb) {
		ML_ClubCampaignCards ^= """
			<frameinstance
				modelid="framemodel-club-campaign"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	/* Settings list */
	declare Text ML_Settings = "";
	declare Real Margin = 0.6;
	declare Integer SettingsNb = 5;
	declare Vec2 Size_Background = <107., 7.5>;
	declare Vec2 Pos_ButtonSettings = MLHelpers::SkewX(<Size_Background.X/2, -(Size_Background.Y+Margin)*C_Setting_GameMode>, 10.);

	foreach (SettingId => SettingName in C_Setting_Names) {
		declare Vec2 Pos_SettingName = MLHelpers::SkewX(<3., -0.5>, 10.);
		if (SettingId == C_Setting_MaxPlayers) Pos_SettingName = MLHelpers::SkewX(<3., 0.6>, 10.);

		declare Text LeftTarget = "_";
		declare Text UpTarget = "frame-setting-"^ML::Clamp(SettingId-1, 0, SettingsNb-1);
		declare Text DownTarget = "frame-setting-"^ML::Clamp(SettingId+1, 0, SettingsNb-1);
		if (SettingId == C_Setting_Scalable) LeftTarget = "textfield-name";
		if (SettingId == C_Setting_Password) LeftTarget = "checkbox-private";
		if (SettingId == C_Setting_Names.count-1) DownTarget = "button-map-0-0";
		declare Text NavInputs = "cancel;appmenu;action2;left;up;down";
		if (SettingId == C_Setting_Scalable || SettingId == C_Setting_Password) NavInputs ^= ";select";
		else NavInputs ^= ";right";
		declare Text NavTargets = "_;_;_;"^LeftTarget^";"^UpTarget^";"^DownTarget^";_";

		ML_Settings ^= """
			<frame id="frame-setting-{{{SettingId}}}"
				pos="{{{MLHelpers::Skew(-Size_Background.X/2., -SettingId*(Size_Background.Y + Margin), 10.)}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_Setting}}}"
				data-setting="{{{SettingId}}}"
				data-nav-inputs="{{{NavInputs}}}"
				data-nav-targets="{{{NavTargets}}}"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="quad-activation-setting"
			>
				<quad id="quad-activation-setting" size="{{{Size_Background.X}}} {{{Size_Background.Y}}}" class="{{{Navigation::C_Class_ActivationZone}}}" opacity="0." valign="center" scriptevents="1" z-index="10"/>
				<quad id="quad-lock" size="{{{Size_Background.Y*0.8}}} {{{Size_Background.Y*0.8}}}" halign="right" valign="center" image="{{{Icons::C_Icon_128x128_Lock_Oblique}}}" colorize="ffffff" opacity="0.4" hidden="1" />
				<label id="label-setting-name" size="{{{Size_Background.X*0.4}}} {{{Size_Background.Y}}}" pos="{{{Pos_SettingName.X}}} {{{Pos_SettingName.Y}}}" class="text-semibold" text="{{{SettingName}}}" textsize="2." opacity="0.6" halign="left" z-index="3"/>
				<frameinstance
					id="asset-left" z-index="1"
					modelid="{{{ExpendableAsset::C_Name}}}"
					data-width="{{{Size_Background.X*0.45}}}"
					data-height="{{{Size_Background.Y}}}"
					data-opacity="0.6"
					data-halign="left" data-valign="center"
					data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
					data-colormode-left="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
					data-image-left="{{{ButtonStyles::C_ImageUrl_Common_ButtonRounded_Start}}}"
					data-size-left="128 256"
				/>
				<frameinstance
					id="asset-right" z-index="2"
					modelid="{{{ExpendableAsset::C_Name}}}"
					pos="{{{Size_Background.X*0.45 - MLHelpers::SkewX(Size_Background.Y, 10.)}}} 0"
					data-width="{{{Size_Background.X*0.55}}}"
					data-height="{{{Size_Background.Y}}}"
					data-opacity="0.6"
					data-halign="left" data-valign="center"
					data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}"
					data-colormode-right="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
					data-image-right="{{{ButtonStyles::C_ImageUrl_Common_ButtonRounded_End}}}"
					data-size-right="128 256"
				/>
		""";

		switch (SettingId) {
			case C_Setting_Server, C_Setting_MaxPlayers, C_Setting_GameMode: { //< Add an horizontal selector for these settings
				if (SettingId == C_Setting_MaxPlayers) { //< Display an info about the max player setting under the setting name
					ML_Settings ^= """
						<label id="label-setting-info" size="{{{Size_Background.X*0.43}}} {{{Size_Background.Y}}}" pos="{{{MLHelpers::Skew(3., -2., 10.)}}}" class="text-semibold" text="{{{Text_MaxPlayersInfo}}}" textsize="0.3" opacity="0.6" halign="left" z-index="3"/>
					""";
				}

				ML_Settings ^= """
					<frameinstance
						id="button-previous-{{{SettingId}}}" pos="{{{Size_Background.X*0.46}}} 0" z-index="4"
						modelid="{{{Button::C_Name}}}"
						class="{{{Navigation::C_Class}}}"
						data-setting-shift="{{{C_SettingShift_Previous}}}"
						data-size="{{{Size_Background.Y*0.7}}} {{{Size_Background.Y*0.7}}}"
						data-image="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
						data-imagefocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
						data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
						data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
						data-opacity="1."
						data-opacityunfocus="0.6"
						data-halign="left" data-valign="center"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-group="{{{C_NavGroup_MouseOnly}}}"
						data-nav-zone="{{{Button::C_NavZone}}}"
					/>
					<label id="label-setting-value" size="{{{Size_Background.X*0.35}}} {{{Size_Background.Y}}}" pos="{{{Size_Background.X*0.72}}} -0.5" class="text-semibold" textsize="2." textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" opacity="0.6" translate="1" z-index="3"/>
					<frameinstance
						id="button-next-{{{SettingId}}}" pos="{{{Size_Background.X*0.97}}} 0" z-index="4"
						modelid="{{{Button::C_Name}}}"
						class="{{{Navigation::C_Class}}}"
						data-setting-shift="{{{C_SettingShift_Next}}}"
						data-size="{{{Size_Background.Y*0.7}}} {{{Size_Background.Y*0.7}}}"
						data-image="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
						data-imagefocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
						data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
						data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
						data-opacity="1."
						data-opacityunfocus="0.6"
						data-halign="right" data-valign="center"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-group="{{{C_NavGroup_MouseOnly}}}"
						data-nav-zone="{{{Button::C_NavZone}}}"
					/>
				""";
			}
			case C_Setting_Scalable, C_Setting_Password: { //< Add a checkbox for these settings
				ML_Settings ^= """
					<frameinstance
						id="checkbox-setting-{{{SettingId}}}" pos="{{{Size_Background.X*0.72}}} 0" z-index="3"
						modelid="{{{Checkbox::C_Name}}}"
						data-setting-shift="{{{C_SettingShift_Next}}}"
						data-iconsize="{{{Size_Background.Y*0.9}}} {{{Size_Background.Y*0.9}}}"
						data-iconunchecked="{{{Icons::C_Icon_128x128_Checkbox_Inactive_Square}}}"
						data-iconchecked="{{{Icons::C_Icon_128x128_Checkbox_Active_Square}}}"
						data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
						data-opacityunfocus="0.6"
						data-tts-oncheck="false"
					/>
				""";
			}
		}

		ML_Settings ^= """
			</frame>
		""";
	}

	/* Map grid */
	declare Vec2 Size_Spacing = <0.5, 2.>;
	declare Vec2 Size_MapButton = <35.5, 9.5>;
	declare Vec2 Size_Category = MLHelpers::KeepRatioFromY(320., 20., 2.13);
	declare GridConfig_Column = Grid::Create(Size_MapButton.X*C_ColumnNumber + Size_Spacing.X*(C_ColumnNumber-1), 0., Size_Spacing.X, Grid::C_Direction_Right);
	declare GridConfig_Row = Grid::Create(Size_MapButton.Y*C_RowNumber + Size_Spacing.Y*(C_RowNumber-1), 0., Size_Spacing.Y, Grid::C_Direction_Bottom);
	for (ColumnIndex, 0, C_ColumnNumber-1) GridConfig_Column = Grid::AddColumn(GridConfig_Column, ColumnIndex, 100., Grid::C_Align_Center);
	for (RowIndex, 0, C_RowNumber-1) GridConfig_Row = Grid::AddRow(GridConfig_Row, RowIndex, 100., Grid::C_Align_Center);
	declare Grid_Column = Grid::Compile(GridConfig_Column);
	declare Grid_Row = Grid::Compile(GridConfig_Row);

	declare Text ML_Maps = "";
	for (ColumnIndex, 0, C_ColumnNumber-1) {
		for (RowIndex, 0, C_RowNumber-1) {
			declare Text UpTarget = "button-map-"^ML::Clamp(ColumnIndex, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex-1, 0, C_RowNumber-1);
			declare Text DownTarget = "button-map-"^ML::Clamp(ColumnIndex, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex+1, 0, C_RowNumber-1);
			declare Text LeftTarget = "button-map-"^ML::Clamp(ColumnIndex-1, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex, 0, C_RowNumber-1);
			declare Text RightTarget = "button-map-"^ML::Clamp(ColumnIndex+1, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex, 0, C_RowNumber-1);
			if (RowIndex == 0) UpTarget = "button-logo";
			if (RowIndex == C_ColumnNumber-1) DownTarget = "button-back";

			ML_Maps ^= """
				<frameinstance
					id="button-map-{{{ColumnIndex}}}-{{{RowIndex}}}" z-index="1"
					pos="{{{MLHelpers::Skew(Grid_Column.Pos[ColumnIndex], Grid_Row.Pos[RowIndex], 10.)}}}"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}} {{{C_Class_MapButton}}}"
					data-text="{{{TL::FormatInteger(C_RowNumber*ColumnIndex + (RowIndex+1), 2)}}}"
					data-height="{{{Grid_Row.Size[RowIndex]}}}" data-width="{{{Grid_Column.Size[ColumnIndex]}}}"
					data-nav-inputs="select;cancel;up;down;left;right;appmenu;action2"
					data-nav-targets="_;_;{{{UpTarget}}};{{{DownTarget}}};{{{LeftTarget}}};{{{RightTarget}}};_;_"
					data-nav-group="{{{C_NavGroup_Default}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
					data-nav-locked="1"
					hidden="1"
				/>
			""";
		}
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-club-campaign">
	<quad id="quad-bg" size="{{{Size_ClubCampaignImage.X}}} {{{Size_ClubCampaignImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip" z-index="0"/>
	<frameinstance id="control-block-list-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Size_ClubCampaignImage.X}}} {{{Size_ClubCampaignImage.Y}}}" data-image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-keepratio="clip" z-index="1" />
	<quad id="quad-gradient" size="{{{Size_ClubCampaignImage.X}}} {{{Size_ClubCampaignImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" opacity="0.7" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" z-index="2"/>
	<frameinstance id="control-block-list-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{Size_ClubCampaignImage.X * 0.75}}} 7" pos="{{{Pos_ClubName.X}}} {{{Pos_ClubName.Y}}}" data-halign="left" data-valign="center2" data-textsize="2." data-opacity="0.7" data-filter-profanities="OnlyIfNotTranslated" z-index="3" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" />
	<quad id="quad-contour" size="{{{Size_ClubCampaignImage.X}}} {{{Size_ClubCampaignImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" opacity="0." colorize="FFF" z-index="4"/>
	<frame size="{{{Size_ClubCampaignImage.X}}} {{{Size_ClubCampaignImage.Y}}}" pos="{{{Size_ClubCampaignImage.X/2}}} {{{-Size_ClubCampaignImage.Y/2}}}" halign="center" valign="center" z-index="5">
		<quad id="quad-hitbox" size="{{{Size_AdjustedClubCampaign.X}}} {{{Size_AdjustedClubCampaign.Y*1.5}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}" halign="center" valign="center" rot="10"/>
	</frame>
</framemodel>

<!-- Page -->
<frameinstance id="frame-browser" modelid="{{{BrowserAPI::C_Name}}}" z-index="{{{Const::C_ZIndex_BrowserAPI}}}" hidden="1" />
<frameinstance id="frame-track-browser" modelid="{{{TrackBrowser::C_Name}}}" z-index="{{{Const::C_ZIndex_BrowserAPI}}}" data-multi-select="1" data-show-only-playable="1"/>
<frameinstance id="loadingspinner-create-or-edit-room" modelid="{{{LoadingSpinner::C_Name}}}" data-dimmer="true" data-opacity="0." z-index="{{{Const::C_ZIndex_Loading}}}"/>

<!-- Frame global -->
<frame id="frame-global" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" z-index="-1"/>
	<frameinstance id="frame-script-settings" modelid="{{{ScriptSettingsEditor::C_Name}}}" z-index="3" />
	<frameinstance id="loadingspinner-retrieve-info" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-120., 20., 10.)}}}" data-label="{{{Text_CreatingClubRoom}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" data-opacity="0." data-size="10 10" scale="0.7" z-index="2"/>
	<frameinstance id="popupmultichoice-exit" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_ExitRoom}}}" data-choices="{{{TL::MLEncode(C_Choices_Exit.tojson())}}}" data-description="{{{TL::MLEncode(Description_Exit.tojson())}}}" data-close-after-selection="false" z-index="3" hidden="1"/>
	<frameinstance id="popupmultichoice-track" modelid="{{{PopUpMultiChoice::C_Name}}}" data-choices="{{{TL::MLEncode(C_Choices_SelectedMap.tojson())}}}" z-index="3" hidden="1"/>
	<frameinstance id="popupclubthemes-icon" modelid="{{{PopUpClubThemes::C_Name}}}" z-index="3"/>
	<label id="label-title" pos="{{{MLHelpers::Skew(-126.5, 61.5, 10.)}}}" size="135 20" class="text-extrabold" text="{{{Text_CreateRoom}}}" textsize="13" halign="left" z-index="1"/>
	<label id="label-info" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-semibold" textsize="2.5" halign="left"/>

	<!-- Pop-up header -->
	<frame id="frame-room-info" hidden="1">
		<label id="label-info-title" pos="{{{MLHelpers::Skew(-7., -65.5, 10.)}}}" size="110 10" class="text-extrabold" textsize="3." textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" opacity="0." valign="bottom"/>
		<label id="label-info-description" pos="{{{MLHelpers::Skew(-7., -65.5, 10.)}}}" size="110 10" class="text-semibold" textsize="2." opacity="0." valign="top" autonewline="1" maxline="3"/>
		<frameinstance
			id="button-logo" pos="{{{MLHelpers::Skew(-103., 41.2, 10.)}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="{{{Size_Logo.X}}} {{{Size_Logo.Y}}}"
			data-opacityunfocus=".6"
			data-tts-text="{{{TTS_ChooseLogo}}}"
			data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-iconsize="13 13"
			data-bgkeepratio="clip"
			data-contouropacityunfocus="0."
			data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
			data-contourimage="{{{Const::C_ImageUrl_ClubActivity_Contour}}}"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel;down;right;appmenu;action2"
			data-nav-targets="_;_;form-select-dedicated;textfield-name;_;_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			id="textfield-name" pos="{{{MLHelpers::Skew(-80., 47., 10.)}}}"
			modelid="{{{TextField::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="{{{Size_TextField.X}}} {{{Size_TextField.Y}}}"
			data-placeholder="{{{Text_RoomName}}}"
			data-bgopacityunfocus="0.4"
			data-bgcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-bgcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-contourcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-contouropacityunfocus="0."
			data-contouropacityfocus="1."
			data-textsize="3."
			data-textcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;cancel;left;right;down;appmenu;action2"
			data-nav-targets="_;_;button-logo;frame-setting-{{{C_Setting_Scalable}}};checkbox-private;_;_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{TextField::C_NavZone}}}"
		/>
		<frameinstance
			id="checkbox-private" pos="{{{MLHelpers::Skew(-77., 37.6, 10.)}}}"
			modelid="{{{Checkbox::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-labelsize="{{{Size_TextField.X/2. - 8.}}} 8"
			data-text="{{{Text_Private}}}"
			data-textmirror="{{{Text_Public}}}"
			data-textxpos="0.73"
			data-texthalign="left"
			data-textitalicslope=".2"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}"
			data-textfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-textsize="2."
			data-fitlabel="1"
			data-opacityunfocus="0.6"
			data-iconsize="8 8"
			data-iconxpos="0.5"	data-iconypos="0.55"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconchecked="{{{Icons::C_Icon_128x128_SwitchOn}}}"
			data-iconunchecked="{{{Icons::C_Icon_128x128_SwitchOff}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;cancel;left;right;up;down;appmenu;action2"
			data-nav-targets="_;_;button-logo;frame-setting-{{{C_Setting_Password}}};textfield-name;form-select-dedicated;_;_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Checkbox::C_NavZone}}}"
		/>
	</frame>

	<!-- Settings -->
	<frame id="frame-settings" pos="{{{MLHelpers::Skew(71., 68., 10.)}}}">
		{{{ML_Settings}}}
		<frameinstance id="button-icon-settings" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{Pos_ButtonSettings.X + Size_Background.Y*0.85}}} {{{Pos_ButtonSettings.Y}}}" data-halign="left" data-size="8 8" data-bind="action2" data-hideformouse="1" />
		<frameinstance
			id="button-settings"
			pos="{{{Pos_ButtonSettings.X}}} {{{Pos_ButtonSettings.Y}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="{{{Size_Background.Y*0.85}}} {{{Size_Background.Y*0.85}}}"
			data-opacity="1."
			data-opacityunfocus="0.5"
			data-image="{{{Icons::C_Icon_128x128_Settings_Key}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-imagefocus="{{{Icons::C_Icon_128x128_Settings_Key}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_MouseOnly}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>

	<!-- Room type selection -->
	<frame id="frame-room-type-selection" pos="{{{MLHelpers::Skew(-127.5, -2.8, 10.)}}}" hidden="1">
		<frameinstance
			id="button-campaign"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_SelectCampaign}}}"
			data-size="{{{Size_ButtonRoomType.X}}} {{{Size_ButtonRoomType.Y}}}"
			data-labelsize="{{{Size_ButtonRoomType.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{Image_ButtonCampaign}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
			data-contouropacityunfocus="0."
			data-tilthitbox="10"
			data-textsize="3."
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"
			data-autonewline="1" data-maxline="2"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;cancel;right;down;"
			data-nav-targets="_;_;button-maps;button-back"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			id="button-maps" pos="74. 0"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_SelectMaps}}}"
			data-size="{{{Size_ButtonRoomType.X}}} {{{Size_ButtonRoomType.Y}}}"
			data-labelsize="{{{Size_ButtonRoomType.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{Image_ButtonMaps}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
			data-contouropacityunfocus="0."
			data-tilthitbox="10"
			data-textsize="3."
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"
			data-autonewline="1" data-maxline="2"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;cancel;left;right;down;"
			data-nav-targets="_;_;button-campaign;button-player-dedicated;button-back"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			id="button-player-dedicated" pos="148. 0"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_UseDedicatedServer}}}"
			data-size="{{{Size_ButtonRoomType.X}}} {{{Size_ButtonRoomType.Y}}}"
			data-labelsize="{{{Size_ButtonRoomType.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{Image_ButtonDedicated}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
			data-contouropacityunfocus="0."
			data-tilthitbox="10"
			data-textsize="3."
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"
			data-autonewline="1" data-maxline="2"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;cancel;left;down;"
			data-nav-targets="_;_;button-maps;button-back"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="{{{Platform::IsFromFirstParty(System)}}}"
			hidden="{{{Platform::IsFromFirstParty(System)}}}"
		/>
	</frame>

	<!-- Map list -->
	<frame id="frame-room-maps" hidden="1">
		<label id="label-campaign-name" pos="{{{MLHelpers::Skew(-125., 10.5, 10.)}}}" size="250 10" class="text-extrabold" textsize="3.5" halign="left"/>
		<label id="label-move-map" pos="{{{MLHelpers::Skew(-125., 10.5, 10.)}}}" size="250 10" class="text-extrabold" textsize="3.5" halign="left"/>
		<frameinstance id="frame-map-rankings" modelid="{{{MapRankings::C_Name}}}" pos="105 -25"/>

		<frame id="frame-maps-pager" pos="{{{MLHelpers::Skew(-144., 7.5, 10.)}}}">
			<frameinstance
				id="button-prev-maps" pos="6 -33"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-size="10 10"
				data-opacityunfocus="0.6"
				data-image="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-imagefocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-halign="center" data-valign="center"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				hidden="1"
			/>
			<frame id="frame-maps-grid">
				{{{ML_Maps}}}
			</frame>
			<frameinstance
				id="button-next-maps" pos="200 -33"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-size="10 10"
				data-opacityunfocus="0.6"
				data-image="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
				data-imagefocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-halign="center" data-valign="center"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				hidden="1"
			/>
		</frame>
	</frame>

	<!-- Campaign selection -->
	<frame id="frame-select-campaign" hidden="1">
		<label id="label-selection-info" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-extrabold" text="{{{Text_CampaignToUse}}}" textsize="3.5" halign="left"/>
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-campaigns" z-index="1" />
		<frame
			id="frame-scroll-campaigns" pos="{{{Size_ClubCampaignScrollWindow.X * -0.525}}} 15"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			data-pager-page-size="{{{ClubCampaignsPerPage}}}"
			data-elements-per-line="{{{ClubCampaignsColumnsNb}}}"
			data-element-size="{{{Size_ClubCampaign.X}}} {{{Size_ClubCampaign.Y}}}"
			data-margin-size="{{{Size_ClubCampaignMargin.X}}} {{{Size_ClubCampaignMargin.Y}}}"
			data-window-size="{{{Size_ClubCampaignScrollWindow.X}}} {{{Size_ClubCampaignScrollWindow.Y}}}"
			data-scroll-indicator-x-offset="-10"
			data-scroll-indicator-y-offset="-13."
			data-scroll-indicator-image="{{{Icons::C_Icon_128x128_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-colorize="FFFFFF"
			data-scroll-indicator-size="12"
			data-scrollbar-xoffset="9."
			data-scrollpadding="8.5"
			data-skew="-10"
			data-nav-group="{{{C_NavGroup_Default}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_ClubCampaignCards}}}
		</frame>
	</frame>

	<!-- Page dedicated server -->
	<frame id="frame-player-dedicated" hidden="1">
		<label id="label-error-dedicated" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-semibold" textsize="2.5" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextError)}}}" halign="left"/>
		<label id="label-dedicated-info" pos="{{{MLHelpers::Skew(-125., 10.5, 10.)}}}" size="250 10" class="text-extrabold" text="{{{Text_ServerAccount}}}" textsize="3.5" halign="left"/>
		<frameinstance
			id="form-select-dedicated" pos="{{{MLHelpers::Skew(-125., 2., 10.)}}}"
			modelid="{{{FormSelect::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="60 8"
			data-scale-options="1"
			data-fontname="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-color-background="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-color-text="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-text-center="1"
			data-custom-navigation="1"
			data-nav-inputs="select;cancel;right;up;down;appmenu;action2"
			data-nav-targets="_;_;button-create;button-logo;button-back;_;_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{FormSelect::C_NavZone}}}"
			data-nav-locked="1"
		/>
	</frame>

	<!-- Bottom buttons -->
	<frameinstance id="button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
	<frameinstance
		id="button-back" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-max-width="60."
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;up;right;appmenu;action2"
		data-nav-targets="_;_;button-map-0-0;button-create;_;_"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance id="button-icon-create" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" data-halign="left" data-size="8 8" data-bind="appmenu" data-hideformouse="1" />
	<frameinstance
		id="button-create" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_Create}}}"
		data-max-width="70."
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-halign="right"
		data-nav-inputs="select;cancel;up;left;appmenu;action2"
		data-nav-targets="_;_;form-select-dedicated;button-back;_;_"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as Http
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/Trackmania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/Trackmania/API/ServerAPI.Script.txt" as ServerAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo

#Const C_Pager_Reset 0
#Const C_Pager_Offset 5

#Const C_Name_MaxChar 20
#Const C_PlayersNb_Min 2
#Const C_PlayersNb_Min_Scalable 5 // The minimum if the room is scalable is 5 instead of 2
#Const C_PlayersNb_Max 100
#Const C_PlayersNB_Default 16
#Const C_MapsNb_Max 100

#Const C_Choice_Cancel {{{dump(C_Choice_Cancel)}}}
#Const C_Choice_Exit {{{dump(C_Choice_Exit)}}}
#Const C_Choice_Move {{{dump(C_Choice_Move)}}}
#Const C_Choice_Replace {{{dump(C_Choice_Replace)}}}
#Const C_Choice_Delete {{{dump(C_Choice_Delete)}}}

#Const C_Setting_Names {{{dump(C_Setting_Names)}}}
#Const C_Setting_Descriptions {{{dump(C_Setting_Descriptions)}}}
#Const C_Setting_Server {{{dump(C_Setting_Server)}}}
#Const C_Setting_MaxPlayers {{{dump(C_Setting_MaxPlayers)}}}
#Const C_Setting_GameMode {{{dump(C_Setting_GameMode)}}}
#Const C_Setting_Scalable {{{dump(C_Setting_Scalable)}}}
#Const C_Setting_Password {{{dump(C_Setting_Password)}}}
#Const C_SettingShift_Previous {{{dump(C_SettingShift_Previous)}}}
#Const C_SettingShift_Null {{{dump(C_SettingShift_Null)}}}
#Const C_SettingShift_Next {{{dump(C_SettingShift_Next)}}}

#Const C_Step_LoadingRoomDetails {{{dump(C_Step_LoadingRoomDetails)}}}
#Const C_Step_RoomTypeSelection {{{dump(C_Step_RoomTypeSelection)}}}
#Const C_Step_BrowseMaps {{{dump(C_Step_BrowseMaps)}}}
#Const C_Step_SelectCampaign {{{dump(C_Step_SelectCampaign)}}}
#Const C_Step_BrowseImages {{{dump(C_Step_BrowseImages)}}}
#Const C_Step_RoomMapList {{{dump(C_Step_RoomMapList)}}}
#Const C_Step_PlayerDedicatedServer {{{dump(C_Step_PlayerDedicatedServer)}}}

#Const C_ModeNames {{{dump(Const::C_ModeNames)}}}
#Const C_ModeNames_ScriptNames {{{dump(Const::C_ModeNames_ScriptNames)}}}

#Const C_DefaultRegion {{{dump(Const::C_Region_WW_EUWest)}}}
#Const C_RegionList {{{dump(Const::C_RegionList_WW)}}}
#Const C_RegionList_Translations {{{dump(Const::C_RegionList_Translations_WW)}}}

#Struct K_Controls {
	CMlFrame ButtonIcon_Back;
	CMlFrame ButtonIcon_Create;
	CMlFrame Button_Back;
	CMlFrame Button_Create;
	CMlFrame Button_DefaultMap;
	CMlFrame Button_Logo;
	CMlFrame Button_NextMaps;
	CMlFrame Button_PrevMaps;
	CMlFrame Button_Settings;
	CMlFrame Checkbox_Private;
	CMlFrame FormSelect_Dedicated;
	CMlFrame Frame_Browser;
	CMlFrame Frame_Global;
	CMlFrame Frame_MapRankings;
	CMlFrame Frame_MapsGrid;
	CMlFrame Frame_PlayerDedicated;
	CMlFrame Frame_RoomInfo;
	CMlFrame Frame_RoomMaps;
	CMlFrame Frame_RoomTypeSelection;
	CMlFrame Frame_ScrollCampaigns;
	CMlFrame Frame_SelectCampaign;
	CMlFrame Frame_Settings;
	CMlFrame LoadingSpinner_CreateOrEditRoom;
	CMlFrame LoadingSpinner_RetrieveInfo;
	CMlFrame PopUpClubThemes_Icon;
	CMlFrame PopUpMultiChoice_Exit;
	CMlFrame PopUpMultiChoice_Tracks;
	CMlFrame TextField_RoomName;
	CMlLabel Label_CampaignName;
	CMlLabel Label_ErrorDedicated;
	CMlLabel Label_Info;
	CMlLabel Label_InfoDescription;
	CMlLabel Label_InfoTitle;
	CMlLabel Label_MoveMap;
	CMlLabel Label_SelectionInfo;
	CMlLabel Label_Title;
}

#Struct K_State {
	Boolean IsEditingRoom;
	Boolean IsPrivate;
	CMlControl FocusedMap;
	CMlControl SelectedMap;
	Integer PagerOffset;
	Integer Step;
	Text ToMoveMapUid;
	Text[] ModeNames;
	{{{CampaignStruct::P}}}K_Map[Text] MapList;
	{{{ClubStruct::P}}}K_Room Room;
	Http::K_Request GetClubRoomDetailRequest;
	Http::K_Request GetPlayerServerAccountsRequest;
	ServerAPI::K_PlayerServerAccount SelectedPlayerServerAccount;
	ServerAPI::K_PlayerServerAccount[] PlayerServerAccountList;
	Task::K_Task Task_MapList;
	Task::K_Task[Text] Task_RegisterMapList;
	Boolean HasError;
}
""",
"""
declare Ident G_TTSContextIdent_Setting;

// Check if the current room is valid
Boolean IsValidRoom(K_State _State, K_Controls _Controls) {
	return {{{TextField::P}}}GetValue(_Controls.TextField_RoomName) != "" && (
		(_State.Step == C_Step_PlayerDedicatedServer && _State.SelectedPlayerServerAccount.AccountId != "" && !_State.SelectedPlayerServerAccount.AlreadyUsed) ||
		(_State.Step == C_Step_RoomMapList && _State.Room.MapUids.count > 0)
	);
}

// Enable or disable navigation groups
Void EnableNavigationGroups(Boolean _IsEnabled) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", _IsEnabled);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_MouseOnly}}}", _IsEnabled);
}

// Update text to speech context
Void Private_TTSContextUpdate(CMlFrame _Frame_Setting, Boolean _IsSettingUpdated) {
	if ({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}") == _Frame_Setting) {
		if (G_TTSContextIdent_Setting == NullId) G_TTSContextIdent_Setting = ParentApp.TTS_Context_Enter({{{TextToSpeech::C_ContextLevel_Setting}}});
		ParentApp.TTS_Context_Change(G_TTSContextIdent_Setting, _Frame_Setting.GetFirstChild("label-setting-name") as CMlLabel);
		if (!_IsSettingUpdated) ParentApp.TTS_Context_Read({{{TextToSpeech::C_ContextLevel_Setting}}});

		foreach (Control in _Frame_Setting.Controls) {
			if ({{{Checkbox::P}}}IsCheckbox(Control)) {{{Checkbox::P}}}GetLabel(Control as CMlFrame).TTS_Focus();
			if (Control.ControlId == "label-setting-value") (Control as CMlLabel).TTS_Focus();
		}
	} else {
		G_TTSContextIdent_Setting = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Setting);
	}
}

// Update an animated message
K_State DisplayInfo(K_State _State, CMlLabel _Label_Info, Text _Text, Boolean _IsError) {
	declare K_State State = _State;
	declare Vec2 Pos_Hidden = MLHelpers::SkewX(<-126., 20.>, 10.);
	declare Vec2 Pos_Visible = MLHelpers::SkewX(<-125., 20.>, 10.);
	AnimMgr.Flush(_Label_Info);

	if (_Text != "") {
		// We consider that an error occurred as soon as we have a message
		// to display. Even if `_IsError` is `False`.
		State.HasError = True;
		_Label_Info.SetText(_Text);
		_Label_Info.Opacity = 0.;
		_Label_Info.RelativePosition_V3 = Pos_Hidden;
		if (_IsError) {
			_Label_Info.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextError)}}};
		} else {
			_Label_Info.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight)}}};
		}
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Visible.X^" "^Pos_Visible.Y^"\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		State.HasError = False;
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

// Update controller hints at the bottom of the screen
Void UpdateControllerInfo(K_State _State, K_Controls _Controls) {
	declare Text[Text] ControllerInfos = [];
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
	declare Text MapUid for FocusedControl;

	if (FocusedControl != Null) {
		if ({{{Checkbox::P}}}IsCheckbox(FocusedControl)) {
			ControllerInfos["A"] = "{{{Text_Toggle}}}";
		} else if (FocusedControl.HasClass("{{{C_Class_Setting}}}")) {
			switch (TL::ToInteger(FocusedControl.DataAttributeGet("setting"))) {
				case C_Setting_Scalable, C_Setting_Password: ControllerInfos["A"] = "{{{Text_Toggle}}}";
				case C_Setting_Server, C_Setting_MaxPlayers, C_Setting_GameMode: {
					ControllerInfos["Left"] = ""; //< Empty on purpose
					ControllerInfos["Right"] = "{{{Text_SelectValue}}}";
				}
			}
		} else if (_State.ToMoveMapUid != "" && MapUid != "" && FocusedControl.HasClass("{{{C_Class_MapButton}}}")) {
			ControllerInfos["A"] = "{{{Text_SwapMap}}}";
		} else if (!(FocusedControl.HasClass("{{{C_Class_MapButton}}}") && _State.Room.CampaignId != {{{CampaignStruct::P}}}C_Campaign_NullId)) {
			ControllerInfos["A"] = "{{{Text_Select}}}";
		}
	}

	if (_State.ToMoveMapUid != "") {
		ControllerInfos["B"] = "{{{Text_AbortSwapMap}}}";
		_Controls.ButtonIcon_Back.Hide();
	} else {
		_Controls.ButtonIcon_Back.Show();
	}

	ControllerInfo::SetButtons(ControllerInfos);
}

// Update available mode names to display in the game mode setting
K_State UpdateAvailableModeNames(K_State _State, Text _MapType) {
	declare K_State State = _State;
	declare Text[Integer] ModeNames = C_ModeNames;

	switch (_MapType) {
		case "{{{Const::C_MapType_Race}}}": ModeNames.removekey({{{Const::C_ModeIndex_RoyalTimeAttack}}});
		case "{{{Const::C_MapType_Royal}}}": {
			ModeNames = [];
			ModeNames[{{{Const::C_ModeIndex_RoyalTimeAttack}}}] = C_ModeNames[{{{Const::C_ModeIndex_RoyalTimeAttack}}}];
		}
	}

	State.ModeNames = [];
	foreach (ModeIndex => ModeName in ModeNames) {
		State.ModeNames.add(ModeName);
	}

	// Update the script name of the room if the map type has changed
	if (_MapType != "" && TitleControl::GetMapTypeForScript(State.Room.ScriptName) != _MapType) {
		State.Room.ScriptName = C_ModeNames_ScriptNames.get(State.ModeNames[0], C_ModeNames_ScriptNames[C_ModeNames[0]]);
	}

	return State;
}

// Update the text and the visibility of the information paragraph
Void UpdateInfoParagraph(K_Controls _Controls, Text _Title, Text _Description, Boolean _IsFocused) {
	AnimMgr.Flush(_Controls.Label_InfoTitle);
	AnimMgr.Flush(_Controls.Label_InfoDescription);
	if (_IsFocused) {
		_Controls.Label_InfoTitle.SetText(_Title);
		_Controls.Label_InfoDescription.SetText(_Description);
		Tools::FitLabelValue(_Controls.Label_InfoDescription, 2., 0.5, 0.25);
		AnimMgr.Add(_Controls.Label_InfoTitle, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(_Controls.Label_InfoDescription, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Controls.Label_InfoTitle, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(_Controls.Label_InfoDescription, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

// Display the script settings editor pop-up
Void ShowScriptSettingsEditor(K_State _State, K_Controls _Controls) {
	if (_Controls.Frame_Settings.Visible) {
		EnableNavigationGroups(False);
		{{{ScriptSettingsEditor::P}}}Show(C_ModeNames.keyof(C_ModeNames_ScriptNames.keyof(_State.Room.ScriptName)), _State.Room.ScriptSettings);
	}
}

// Display the track browser
Void ShowTrackBrowser(K_State _State, Boolean _IsMultiSelectEnabled, Boolean _ForceNoMapTypeFilters) {
	EnableNavigationGroups(False);

	if (_ForceNoMapTypeFilters) {
		{{{TrackBrowser::P}}}SetMapTypeFilters(This, []);
	} else {
		{{{TrackBrowser::P}}}SetMapTypeFilters(This, [TitleControl::GetMapTypeForScript(_State.Room.ScriptName)]);
	}

	{{{TrackBrowser::P}}}SetMultiSelect(This, _IsMultiSelectEnabled);
	{{{TrackBrowser::P}}}Display(This, True);
}

Void ShowClubCampaign(CMlFrame _Frame_ClubCampaign, {{{CampaignStruct::P}}}K_Campaign _Campaign) {
	declare CMlFrame ControlBlockList_Name <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlFrame ControlBlockList_Image <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-image") as CMlFrame);

	/* Common */
	_Frame_ClubCampaign.Show();
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_Name, [_Campaign.CreatorAccountId, _Campaign.LatestEditorAccountId], _Campaign.Name);
	if (_Campaign.Media.ButtonBackgroundUrl != "") {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_Image, [_Campaign.CreatorAccountId, _Campaign.LatestEditorAccountId], _Campaign.Media.ButtonBackgroundUrl);
	} else {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_Image, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");
	}
	if ({{{ControlBlockList::P}}}IsBlocked(This, [_Campaign.CreatorAccountId, _Campaign.LatestEditorAccountId])) {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_ClubCampaign, {{{MenuSounds::P}}}C_Sound_SelectError);
	} else {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_ClubCampaign, {{{MenuSounds::P}}}C_Sound_Select);
	}
}

Void ShowClubCampaignLoading(CMlFrame _Frame_ClubCampaign) {
	declare CMlFrame ControlBlockList_Name <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlFrame ControlBlockList_Image <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-image") as CMlFrame);

	_Frame_ClubCampaign.Show();
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_Name, [], "{{{Text_Retrieving}}}");
	{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_Image, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");
	{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_ClubCampaign, {{{MenuSounds::P}}}C_Sound_SelectError);
}

Void HideClubCampaign(CMlFrame _Frame_ClubCampaign) {
	_Frame_ClubCampaign.Hide();
}

Void FocusClubCampaign(CMlFrame _Frame_ClubCampaign, Boolean _Focused, Boolean _IsTTSFocused) {
	declare CMlFrame ControlBlockList_Name <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlQuad Quad_Contour <=> (_Frame_ClubCampaign.GetFirstChild("quad-contour") as CMlQuad);
	declare CMlQuad Quad_Gradient <=> (_Frame_ClubCampaign.GetFirstChild("quad-gradient") as CMlQuad);

	AnimMgr.Flush(Quad_Contour);
	AnimMgr.Flush(Quad_Gradient);
	if (_Focused) {
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 1., 250);
		AnimMgr.Add(Quad_Contour, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		if (_IsTTSFocused) {{{ControlBlockList::P}}}TTS_Focus(ControlBlockList_Name);
	} else {
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 0.7, 250);
		AnimMgr.Add(Quad_Contour, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}TTS_Unfocus(ControlBlockList_Name);
	}
}

// Focus or unfocus a setting line
Void FocusSetting(K_State _State, K_Controls _Controls, CMlFrame _Frame_Setting, Boolean _IsFocused, Boolean _IsMouse) {
	declare Boolean IsSettingLocked = (_Frame_Setting.GetFirstChild("quad-lock") as CMlQuad).Visible;
	declare Integer Setting = TL::ToInteger(_Frame_Setting.DataAttributeGet("setting"));
	declare Real OpacityFocused = 1.;
	if (IsSettingLocked) OpacityFocused = 0.8;

	/* Update setting's line focus */
	if (_IsFocused) {
		foreach (Control in _Frame_Setting.Controls) {
			AnimMgr.Flush(Control);
			if ({{{ExpendableAsset::P}}}IsAsset(Control)) {{{ExpendableAsset::P}}}SetOpacity(This, Control as CMlFrame, OpacityFocused);
			if ({{{Checkbox::P}}}IsCheckbox(Control) && !IsSettingLocked) {{{Checkbox::P}}}Focus(This, Control as CMlFrame, False, True);
			if ({{{Button::P}}}IsButton(Control)) {
				if (!_IsMouse && !IsSettingLocked) {{{Button::P}}}Focus(This, Control as CMlFrame);
				_Frame_Setting.GetFirstChild("quad-activation-setting").ZIndex = -1.;
			}
			switch (Control.ControlId) {
				case "quad-lock": AnimMgr.Add(Control, "<anim opacity=\"0.6\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				case "label-setting-value": AnimMgr.Add(Control, "<anim opacity=\""^OpacityFocused^"\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				default: AnimMgr.Add(Control, "<anim opacity=\""^OpacityFocused^"\" textcolor=\"{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	} else {
		foreach (Control in _Frame_Setting.Controls) {
			AnimMgr.Flush(Control);
			if ({{{ExpendableAsset::P}}}IsAsset(Control)) {{{ExpendableAsset::P}}}SetOpacity(This, Control as CMlFrame, 0.6);
			if ({{{Checkbox::P}}}IsCheckbox(Control)) {{{Checkbox::P}}}Unfocus(This, Control as CMlFrame);
			if ({{{Button::P}}}IsButton(Control)) {{{Button::P}}}Unfocus(This, Control as CMlFrame);
			switch (Control.ControlId) {
				case "quad-activation-setting": Control.ZIndex = 10.;
				case "quad-lock": AnimMgr.Add(Control, "<anim opacity=\"0.4\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				default: AnimMgr.Add(Control, "<anim opacity=\"0.6\" textcolor=\"{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	}

	/* Update setting description */
	UpdateInfoParagraph(_Controls, C_Setting_Names.get(Setting, ""), C_Setting_Descriptions.get(Setting, ""), _IsFocused);

	/* Text to speech context */
	Private_TTSContextUpdate(_Frame_Setting, False);
}

K_State Focus(K_State _State, K_Controls _Controls, CMlControl _From, CMlControl _To, Boolean _IsMouse) {
	if ({{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{TextField::P}}}IsTextField(_From)) {
			{{{TextField::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Checkbox::P}}}IsCheckbox(_From)) {
			{{{Checkbox::P}}}Unfocus(This, (_From as CMlFrame));
			if (_From.Id == _Controls.Checkbox_Private.Id) {
				UpdateInfoParagraph(_Controls, "{{{Text_PrivacyTitle}}}", "{{{Text_PrivacyDescription}}}", False);
			}
		} else if ({{{FormSelect::P}}}IsFormSelect(This, _From)) {
			{{{FormSelect::P}}}Focus(This, _From.Id, False);
		} else if (_From.HasClass("{{{Scroll::C_Class_Window}}}")) {
			{{{Scroll::P}}}Unfocus(This, _From as CMlFrame);
		} else if (_From.HasClass("{{{C_Class_Setting}}}")) {
			FocusSetting(State, _Controls, _From as CMlFrame, False, _IsMouse);
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		{{{Button::P}}}Unfocus(This, _Controls.Button_PrevMaps);
		{{{Button::P}}}Unfocus(This, _Controls.Button_NextMaps);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{TextField::P}}}IsTextField(_To)) {
			{{{TextField::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Checkbox::P}}}IsCheckbox(_To)) {
			{{{Checkbox::P}}}Focus(This, (_To as CMlFrame));
			if (_To.Id == _Controls.Checkbox_Private.Id) {
				UpdateInfoParagraph(_Controls, "{{{Text_PrivacyTitle}}}", "{{{Text_PrivacyDescription}}}", True);
			}
		} else if ({{{FormSelect::P}}}IsFormSelect(This, _To)) {
			{{{FormSelect::P}}}Focus(This, _To.Id, True);
		} else if (_To.HasClass("{{{Scroll::C_Class_Window}}}")) {
			{{{Scroll::P}}}Focus(This, _To as CMlFrame);
		} else if (_To.HasClass("{{{C_Class_Setting}}}")) {
			FocusSetting(State, _Controls, _To as CMlFrame, True, _IsMouse);
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
			if (_To.HasClass("{{{C_Class_MapButton}}}")) {
				declare Text MapUid for _To;
				State.FocusedMap = _To;
				{{{MapRankings::P}}}UpdateMapInfoDisplayed(This, _Controls.Frame_MapRankings, State.MapList.get(MapUid, {{{CampaignStruct::P}}}K_Map {}));
				if (!_IsMouse) { //< Display pager buttons as focused for controllers only
					{{{Button::P}}}Focus(This, _Controls.Button_PrevMaps);
					{{{Button::P}}}Focus(This, _Controls.Button_NextMaps);
				}
			}
		}

		// Update navigation of the first and last row of the map grid
		if (_Controls.Frame_RoomMaps.Visible && !_To.HasClass("{{{C_Class_MapButton}}}")) {
			declare Text[] UpTargets = [_Controls.Button_Logo.ControlId, _Controls.Checkbox_Private.ControlId, "frame-setting-"^C_Setting_Names.count-1];
			declare Text[] DownTargets = [_Controls.Button_Back.ControlId, _Controls.Button_Create.ControlId];
			for (ColumnIndex, 0, {{{C_ColumnNumber-1}}}) {
				if (UpTargets.exists(_To.ControlId)) {
					declare CMlFrame Button_FirstRowMap <=> (_Controls.Frame_MapsGrid.GetFirstChild("button-map-"^ColumnIndex^"-0") as CMlFrame);
					{{{Navigation::P}}}ChangeControlTarget(This, Button_FirstRowMap, "up", _To.ControlId);
				} else if (DownTargets.exists(_To.ControlId)) {
					declare CMlFrame Button_LastRowMap <=> (_Controls.Frame_MapsGrid.GetFirstChild("button-map-"^ColumnIndex^"-"^{{{C_RowNumber-1}}}) as CMlFrame);
					{{{Navigation::P}}}ChangeControlTarget(This, Button_LastRowMap, "down", _To.ControlId);
				}
			}
		}
	}

	// Update controller info
	UpdateControllerInfo(State, _Controls);

	return State;
}

// Update the club room logo button
Void UpdateClubRoomLogo(K_State _State, K_Controls _Controls) {
	if (_State.Room.MediaUrl != "") {
		if ({{{ClubStruct::P}}}IsClubThemeName(_State.Room.MediaUrl)) {
			{{{Button::P}}}SetImage(This, _Controls.Button_Logo, {{{ClubStruct::P}}}GetClubThemeUrl(_State.Room.MediaUrl, "{{{ClubStruct::C_MediaType_Icon}}}"));
			{{{Button::P}}}SetImageFocus(This, _Controls.Button_Logo, {{{ClubStruct::P}}}GetClubThemeUrl(_State.Room.MediaUrl, "{{{ClubStruct::C_MediaType_Icon}}}"));
		} else if (Http.IsValidUrl(_State.Room.MediaUrl) || {{{ClubStruct::P}}}IsClubThemeUrl(_State.Room.MediaUrl)) {
			{{{Button::P}}}SetImage(This, _Controls.Button_Logo, _State.Room.MediaUrl);
			{{{Button::P}}}SetImageFocus(This, _Controls.Button_Logo, _State.Room.MediaUrl);
		} else {
			{{{Button::P}}}SetImage(This, _Controls.Button_Logo, {{{BrowserAPI::P}}}C_BasePath^_State.Room.MediaUrl);
			{{{Button::P}}}SetImageFocus(This, _Controls.Button_Logo, {{{BrowserAPI::P}}}C_BasePath^_State.Room.MediaUrl);
		}
		{{{Button::P}}}SetIcon(This, _Controls.Button_Logo, "");
		{{{Button::P}}}SetIconFocus(This, _Controls.Button_Logo, "");
		{{{Button::P}}}SetBgColorType(This, _Controls.Button_Logo, {{{Button::C_ColorType_None}}});
	} else {
		{{{Button::P}}}SetImage(This, _Controls.Button_Logo, "{{{Const::C_ImageUrl_ClubActivity}}}");
		{{{Button::P}}}SetImageFocus(This, _Controls.Button_Logo, "{{{Const::C_ImageUrl_ClubActivity}}}");
		{{{Button::P}}}SetIcon(This, _Controls.Button_Logo, "{{{Icons::C_Icon_128x128_Plus_Oblique}}}");
		{{{Button::P}}}SetIconFocus(This, _Controls.Button_Logo, "{{{Icons::C_Icon_128x128_Plus_Oblique}}}");
		{{{Button::P}}}SetBgColorType(This, _Controls.Button_Logo, {{{Button::C_ColorType_Colorize}}});
	}
}

// Update the list of maps from the given campaign information
K_State UpdateCampaignInfo(K_State _State, K_Controls _Controls, {{{CampaignStruct::P}}}K_Campaign _Campaign) {
	declare K_State State = _State;
	declare MapNumber = 0;

	State.MapList = [];
	State.Room.MapUids = [];
	_Controls.Label_CampaignName.Value = _Campaign.Name;
	foreach (Category in _Campaign.Categories) {
		MapNumber += Category.Playlist.count;
		foreach (Map in Category.Playlist) {
			State.Room.MapUids.add(Map.Uid);
			State.MapList[Map.Uid] = Map;
		}
	}

	return State;
}

// Update the given setting
K_State UpdateSetting(K_State _State, K_Controls _Controls, Integer _SettingId, Integer _ShiftNb) {
	declare K_State State = _State;
	declare CMlFrame Frame_Setting = (_Controls.Frame_Settings.GetFirstChild("frame-setting-"^_SettingId) as CMlFrame);

	if (_Controls.Frame_Settings.Visible) {
		declare CMlLabel Label_Value = (Frame_Setting.GetFirstChild("label-setting-value") as CMlLabel);

		switch (_SettingId) {
			case C_Setting_Server: {
				declare Integer RegionIndex = C_RegionList.keyof(State.Room.Region) + _ShiftNb;
				if (RegionIndex >= C_RegionList.count) RegionIndex = 0;
				else if (RegionIndex < 0) RegionIndex = C_RegionList.count-1;
				Label_Value.SetText(C_RegionList_Translations[RegionIndex]);
				State.Room.Region = C_RegionList[RegionIndex];
			}
			case C_Setting_MaxPlayers: {
				declare Integer PlayersMin = C_PlayersNb_Min;
				if (State.Room.Scalable) PlayersMin = C_PlayersNb_Min_Scalable;
				if (State.Room.MaxPlayers == 0) State.Room.MaxPlayers = C_PlayersNB_Default;
				else State.Room.MaxPlayers = ML::Clamp(State.Room.MaxPlayers + _ShiftNb, PlayersMin, C_PlayersNb_Max);
				{{{Button::P}}}SetVisibilityAndNavigation(Frame_Setting.GetFirstChild("button-previous-"^_SettingId) as CMlFrame, State.Room.MaxPlayers > PlayersMin);
				{{{Button::P}}}SetVisibilityAndNavigation(Frame_Setting.GetFirstChild("button-next-"^_SettingId) as CMlFrame, State.Room.MaxPlayers < C_PlayersNb_Max);
				Label_Value.SetText(""^State.Room.MaxPlayers);
			}
			case C_Setting_GameMode: {
				declare Integer ScriptNameIndex = State.ModeNames.keyof(C_ModeNames_ScriptNames.keyof(State.Room.ScriptName)) + _ShiftNb;
				declare Text OldScriptName = State.Room.ScriptName;

				if (ScriptNameIndex >= State.ModeNames.count) ScriptNameIndex = 0;
				else if (ScriptNameIndex < 0) ScriptNameIndex = State.ModeNames.count-1;

				Label_Value.SetText(State.ModeNames[ScriptNameIndex]);
				State.Room.ScriptName = C_ModeNames_ScriptNames[State.ModeNames[ScriptNameIndex]];
				if (State.Room.ScriptName != OldScriptName) {
					State.Room.ScriptSettings = [];
				}
			}
			case C_Setting_Scalable: {
				if (_ShiftNb == C_SettingShift_Null) {{{Checkbox::P}}}Check(This, Frame_Setting.GetFirstChild("checkbox-setting-"^_SettingId) as CMlFrame, State.Room.Scalable);
				else State.Room.Scalable = {{{Checkbox::P}}}Toggle(This, Frame_Setting.GetFirstChild("checkbox-setting-"^_SettingId) as CMlFrame);
				State = UpdateSetting(State, _Controls, C_Setting_MaxPlayers, C_SettingShift_Null);
			}
			case C_Setting_Password: {
				if (_ShiftNb == C_SettingShift_Null) {
					{{{Checkbox::P}}}Check(This, Frame_Setting.GetFirstChild("checkbox-setting-"^_SettingId) as CMlFrame, State.Room.HasPassword);
					if (State.IsEditingRoom) {
						(Frame_Setting.GetFirstChild("quad-lock") as CMlQuad).Show();
						{{{ExpendableAsset::P}}}SetColor(This, Frame_Setting.GetFirstChild("asset-right") as CMlFrame, {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_BGDark))}}});
					} else {
						(Frame_Setting.GetFirstChild("quad-lock") as CMlQuad).Hide();
						{{{ExpendableAsset::P}}}SetColor(This, Frame_Setting.GetFirstChild("asset-right") as CMlFrame, {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentTwo))}}});
					}
				}	else if (!State.IsEditingRoom) {
					State.Room.HasPassword = {{{Checkbox::P}}}Toggle(This, Frame_Setting.GetFirstChild("checkbox-setting-"^_SettingId) as CMlFrame);
				}
			}
		}

		Private_TTSContextUpdate(Frame_Setting, True);
	}

	/* Lock the setting if hidden */
	{{{Navigation::P}}}Lock(Frame_Setting, !_Controls.Frame_Settings.Visible);

	return State;
}

// Update the map list grid
K_State UpdateMapListGrid(K_State _State, K_Controls _Controls, Integer _PagerOffset) {
	if (_PagerOffset < 0 || _PagerOffset > C_Pager_Offset*ML::CeilingInteger(ML::Abs(_State.MapList.count+1.-25.)/C_Pager_Offset)) return _State;

	declare K_State State = _State;
	declare CMlControl LastMapButton;
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
	declare Boolean IsRoomFromCampaign = State.Room.CampaignId != {{{CampaignStruct::P}}}C_Campaign_NullId;
	declare Boolean IsPagerEnabled = !IsRoomFromCampaign && State.MapList.count >= {{{C_ColumnNumber*C_RowNumber-1}}};
	declare Integer MaximumPagerOffset = C_Pager_Offset*ML::CeilingInteger(ML::Abs(State.MapList.count+1.-25.)/C_Pager_Offset);
	State.PagerOffset = ML::Clamp(_PagerOffset, 0, MaximumPagerOffset);
	{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_PrevMaps, IsPagerEnabled && State.PagerOffset >= C_Pager_Offset);
	{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_NextMaps, IsPagerEnabled && State.PagerOffset < MaximumPagerOffset);

	/* Update maps grid */
	foreach (Index => Control in _Controls.Frame_MapsGrid.Controls) {
		declare CMlFrame Button_Map = Control as CMlFrame;
		declare Integer IndexWithOffset = Index + State.PagerOffset;
		declare Text MapUid for Button_Map;
		MapUid = "";

		if (IndexWithOffset < State.MapList.count && IndexWithOffset < State.Room.MapUids.count) {
			declare {{{CampaignStruct::P}}}K_Map Map = State.MapList.get(State.Room.MapUids[IndexWithOffset], {{{CampaignStruct::P}}}K_Map {});
			MapUid = Map.Uid;
			{{{ExpendableButton::P}}}SetIconImageUrl(This, Button_Map, "", False);
			{{{ExpendableButton::P}}}SetText(This, Button_Map, TL::FormatInteger(IndexWithOffset + 1, 2), False);
			if (Map.AuthorDisplayName == "") {{{ExpendableButton::P}}}SetTextToSpeech(Button_Map, TL::Compose("%1 %2 - %3", _("Track"), TL::FormatInteger(IndexWithOffset+1, 2), Map.Name));
			else {{{ExpendableButton::P}}}SetTextToSpeech(Button_Map, TL::Compose("%2 %3 - %4 "^TL::GetTranslatedText("{{{Text_AuthorName}}}"), Map.AuthorDisplayName, _("Track"), TL::FormatInteger(IndexWithOffset+1, 2), Map.Name));
			{{{ExpendableButton::P}}}SetStyles(This, Button_Map, [{{{ExpendableButton::P}}}Style_Stack()], False);
			if (IndexWithOffset == 0) {{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_StackTop(), False);
			if (IndexWithOffset == State.MapList.count-1 && IsRoomFromCampaign) {{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_StackBottom(), False);
			{{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_Map());
			if (State.ToMoveMapUid == MapUid) {{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_MapLive());
			{{{ExpendableButton::P}}}ShowAndUnlock(Button_Map);
		} else if (!IsRoomFromCampaign && IndexWithOffset == State.MapList.count) {
			{{{ExpendableButton::P}}}SetText(This, Button_Map, "", False);
			{{{ExpendableButton::P}}}SetTextToSpeech(Button_Map, "{{{TTS_AddTracks}}}");
			{{{ExpendableButton::P}}}SetIconImageUrl(This, Button_Map, "{{{Icons::C_Icon_128x128_Plus_Oblique}}}", False);
			{{{ExpendableButton::P}}}SetStyles(This, Button_Map, [{{{ExpendableButton::P}}}Style_Stack(), {{{ExpendableButton::P}}}Style_StackBottom()], False);
			if (IndexWithOffset == 0) {{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_StackTop(), False);
			{{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_Map());
			{{{ExpendableButton::P}}}ShowAndUnlock(Button_Map);
			LastMapButton = Button_Map;
		} else {
			{{{ExpendableButton::P}}}HideAndLock(Button_Map);
		}
	}

	/* Update focused map */
	if (FocusedControl == Null) {
		State.FocusedMap = _Controls.Button_DefaultMap;
		State = Focus(State, _Controls, FocusedControl, _Controls.Button_Create, False);
	} else if (FocusedControl.HasClass("{{{C_Class_MapButton}}}") && {{{Navigation::P}}}IsLocked(FocusedControl)) {
		if (!{{{Navigation::P}}}IsLocked(LastMapButton)) {
			State = Focus(State, _Controls ,FocusedControl, LastMapButton, False);
		} else if (!{{{Navigation::P}}}IsLocked(_Controls.Button_Create)) {
			State = Focus(State, _Controls, FocusedControl, _Controls.Button_Create, False);
		}
	}

	// Update map rankings component
	declare Text MapUid for State.FocusedMap;
	{{{MapRankings::P}}}UpdateMapInfoDisplayed(This, _Controls.Frame_MapRankings, State.MapList.get(MapUid, {{{CampaignStruct::P}}}K_Map {}));

	return State;
}

// Swap the position between two maps
K_State SwapMapPositions(K_State _State, K_Controls _Controls, CMlFrame _Button_MapTarget) {
	if (_Button_MapTarget == Null || _State.ToMoveMapUid == "") return _State;

	declare K_State State = _State;
	declare Text MapUid as MapTargetUid for _Button_MapTarget;

	if (MapTargetUid != "" && State.Room.MapUids.exists(MapTargetUid) && State.MapList.existskey(MapTargetUid)) {
		if (MapTargetUid != State.ToMoveMapUid) {
			declare Integer MapToMoveKey = State.Room.MapUids.keyof(State.ToMoveMapUid);
			declare Integer MapTargetKey = State.Room.MapUids.keyof(MapTargetUid);

			// Swap Maps
			State.Room.MapUids[MapToMoveKey] = MapTargetUid;
			State.Room.MapUids[MapTargetKey] = State.ToMoveMapUid;
		}

		State.ToMoveMapUid = "";
		State = UpdateMapListGrid(State, _Controls, State.PagerOffset);
		UpdateControllerInfo(State, _Controls);
		_Controls.Label_MoveMap.SetText("");
	}

	return State;
}

// Update the current step of the room creation
K_State UpdateStep(K_State _State, Integer _Step, K_Controls _Controls) {
	declare K_State State = _State;
	declare CMlControl DefaultControl = _Controls.Button_Back;
	State = SwapMapPositions(State, _Controls, State.SelectedMap as CMlFrame); //< Abort map swapping if needed
	State.Step = _Step;

	/* Reset controls */
	EnableNavigationGroups(True);
	{{{BrowserAPI::P}}}FocusBrowser(This, False);
	{{{TrackBrowser::P}}}Display(This, False, False);
	{{{Navigation::P}}}Lock(_Controls.FormSelect_Dedicated, True);
	{{{LoadingSpinner::P}}}StopAnimWithFade(This, _Controls.LoadingSpinner_RetrieveInfo);
	{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_Create, _Step == C_Step_PlayerDedicatedServer || _Step == C_Step_RoomMapList);
	_Controls.ButtonIcon_Create.Visible = _Controls.Button_Create.Visible;
	if (State.IsEditingRoom) {
		{{{ExpendableButton::P}}}SetText(This, _Controls.Button_Back, "{{{Text_Exit}}}");
	} else {
		{{{ExpendableButton::P}}}SetText(This, _Controls.Button_Back, "{{{Text_Back}}}");
	}

	/* Update frames visibility */
	_Controls.Frame_Browser.Visible = _Step == C_Step_BrowseImages;
	_Controls.Frame_PlayerDedicated.Visible = _Step == C_Step_PlayerDedicatedServer;
	_Controls.Frame_RoomTypeSelection.Visible = _Step == C_Step_RoomTypeSelection;
	_Controls.Frame_SelectCampaign.Visible = _Step == C_Step_SelectCampaign;
	_Controls.Frame_RoomInfo.Visible = _Step == C_Step_PlayerDedicatedServer || _Step == C_Step_RoomMapList;
	_Controls.Frame_RoomMaps.Visible = _Step == C_Step_RoomMapList || _Step == C_Step_LoadingRoomDetails;
	_Controls.Frame_Settings.Visible = _Step == C_Step_RoomMapList;

	/* Update settings */
	foreach (SettingId => SettingName in C_Setting_Names) {
		State = UpdateSetting(State, _Controls, SettingId, C_SettingShift_Null);
	}

	/* Update current step */
	switch (State.Step) {
		case C_Step_LoadingRoomDetails: {
			{{{LoadingSpinner::P}}}StartAnimWithFade(This, _Controls.LoadingSpinner_RetrieveInfo, "{{{Text_RetrievingClubRoom}}}");
			State.GetClubRoomDetailRequest = Http::DestroyAndCreate(State.GetClubRoomDetailRequest, ClubAPI::GetClubRoomDetail(State.Room.ClubId, State.Room.Id));
			State = Focus(State, _Controls, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _Controls.Button_Back, False);
		}
		case C_Step_RoomTypeSelection: {
			State.MapList = [];
			State.Room.MapUids = [];
			{{{ExpendableButton::P}}}SetText(This, _Controls.Button_Back, "{{{Text_Exit}}}");
			foreach (Control in _Controls.Frame_RoomTypeSelection.Controls) {
				if (!{{{Navigation::P}}}IsLocked(Control)) {
					State = Focus(State, _Controls, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Control, False);
					DefaultControl = Control;
					break;
				}
			}
		}
		case C_Step_BrowseMaps: {
			State.Room.IsHostedByNadeo = True;
			State.Room.CampaignId = {{{CampaignStruct::P}}}C_Campaign_NullId;
			ShowTrackBrowser(State, True, True);
		}
		case C_Step_SelectCampaign: {
			State.MapList = [];
			State.Room.MapUids = [];
			State.Room.IsHostedByNadeo = True;
			DefaultControl = _Controls.Frame_ScrollCampaigns;
			State = Focus(State, _Controls, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _Controls.Frame_ScrollCampaigns, False);
		}
		case C_Step_BrowseImages: {
			{{{BrowserAPI::P}}}FocusBrowser(This, True);
			EnableNavigationGroups(False);
		}
		case C_Step_PlayerDedicatedServer: {
			DefaultControl = _Controls.FormSelect_Dedicated;
			_Controls.Label_ErrorDedicated.SetText("");
			State.Room.IsHostedByNadeo = False;
			State.SelectedPlayerServerAccount = ServerAPI::K_PlayerServerAccount {};
			State.GetPlayerServerAccountsRequest = Http::DestroyAndCreate(State.GetPlayerServerAccountsRequest, ServerAPI::GetPlayerServerAccounts());
			State = Focus(State, _Controls, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _Controls.Button_Logo, False);
			{{{FormSelect::P}}}SetOptions(This, _Controls.FormSelect_Dedicated.Id, ["{{{Text_Retrieving}}}"]);
			{{{TextField::P}}}SetValue(This, _Controls.TextField_RoomName, State.Room.Name);
		}
		case C_Step_RoomMapList: {
			DefaultControl = _Controls.Button_DefaultMap;
			State.Room.IsHostedByNadeo = True;
			State = UpdateMapListGrid(State, _Controls, State.PagerOffset);
			State = Focus(State, _Controls, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _Controls.Button_Logo, False);
			_Controls.Label_CampaignName.Visible = State.Room.CampaignId != {{{CampaignStruct::P}}}C_Campaign_NullId;
			{{{Checkbox::P}}}Check(This, _Controls.Checkbox_Private, State.IsPrivate);
			{{{TextField::P}}}SetValue(This, _Controls.TextField_RoomName, State.Room.Name);
			if (State.Room.CampaignId != {{{CampaignStruct::P}}}C_Campaign_NullId) {
				if (!{{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId).IsLoaded) {
					{{{LoadingSpinner::P}}}StartAnimWithFade(This, _Controls.LoadingSpinner_RetrieveInfo, "{{{Text_RetrievingCampaign}}}");
				}
			}
		}
	}

	/* Update navigation targets */
	{{{Navigation::P}}}ChangeControlTarget(This, _Controls.Button_Create, "up", DefaultControl.ControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, _Controls.Button_Back, "up", DefaultControl.ControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, _Controls.Button_Logo, "down", DefaultControl.ControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, _Controls.Checkbox_Private, "down", DefaultControl.ControlId);

	return State;
}

K_State Cancel(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;
	declare Boolean IsEditingMapList = State.Step == C_Step_RoomMapList && State.Room.MapUids.count > 0 && State.Room.CampaignId == {{{CampaignStruct::P}}}C_Campaign_NullId;
	State.FocusedMap = _Controls.Button_DefaultMap;
	State.PagerOffset = C_Pager_Reset;

	State = DisplayInfo(State, _Controls.Label_Info, "", False);
	if (!_Controls.PopUpMultiChoice_Exit.Visible && !State.IsEditingRoom && (IsValidRoom(State, _Controls) || IsEditingMapList)) {
		{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Exit);
	} else {
		switch (State.Step) {
			case C_Step_LoadingRoomDetails: {{{Router::P}}}PushParent(This, ["{{{RoutePaths::C_Query_SkipPageInit}}}" => ""]);
			case C_Step_RoomTypeSelection: {{{Router::P}}}PushParent(This, ["{{{RoutePaths::C_Query_SkipPageInit}}}" => ""]);
			case C_Step_BrowseMaps: State = UpdateStep(State, C_Step_RoomTypeSelection, _Controls);
			case C_Step_BrowseImages: {
				if (State.Room.IsHostedByNadeo) {
					State = UpdateStep(State, C_Step_RoomMapList, _Controls);
				} else {
					State = UpdateStep(State, C_Step_PlayerDedicatedServer, _Controls);
				}
			}
			case C_Step_SelectCampaign: {
				if (State.IsEditingRoom) {
					if (State.Room.IsHostedByNadeo) {
						State = UpdateStep(State, C_Step_RoomMapList, _Controls);
					} else {
						State = UpdateStep(State, C_Step_PlayerDedicatedServer, _Controls);
					}
				} else {
					State = UpdateStep(State, C_Step_RoomTypeSelection, _Controls);
				}
			}
			case C_Step_PlayerDedicatedServer: {
				if (State.IsEditingRoom) {
					{{{Router::P}}}PushParent(This, ["{{{RoutePaths::C_Query_SkipPageInit}}}" => ""]);
				} else {
					State = UpdateStep(State, C_Step_RoomTypeSelection, _Controls);
				}
			}
			case C_Step_RoomMapList: {
				if (State.IsEditingRoom) {
					{{{Router::P}}}PushParent(This, ["{{{RoutePaths::C_Query_SkipPageInit}}}" => ""]);
				} else if (State.Room.CampaignId != {{{CampaignStruct::P}}}C_Campaign_NullId) {
					State = UpdateStep(State, C_Step_SelectCampaign, _Controls);
				} else {
					State = UpdateStep(State, C_Step_RoomTypeSelection, _Controls);
				}
			}
		}
	}

	return State;
}

// Create a new room or update an edited room
K_State CreateOrEditRoom(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;

	if (IsValidRoom(State, _Controls)) {
		if (State.Room.MapUids.count > 0) {
			foreach (MapUid in State.Room.MapUids) {
				if (State.MapList.existskey(MapUid) && State.MapList[MapUid].DownloadUrl == "") {
					State.Task_RegisterMapList[MapUid] = Task::DestroyAndCreate(
						State.Task_RegisterMapList.get(MapUid, Task::K_Task {}),
						DataFileMgr,
						DataFileMgr.Map_NadeoServices_Register(MainUser::GetMainUserId(), MapUid)
					);
				}
			}
		}

		/* Create or edit the room if all maps have been registered to NadeoServices */
		if (State.Task_RegisterMapList.count <= 0) {
			if (State.IsEditingRoom) {
				{{{ClubStore::P}}}Action_EditClubRoom(This, State.Room);
			} else {
				{{{ClubStore::P}}}Action_CreateClubRoom(This, State.Room);
			}
		}

		/* Display the loading spinner */
		EnableNavigationGroups(False);
		if (State.IsEditingRoom) {
			{{{LoadingSpinner::P}}}StartAnimWithFade(This, _Controls.LoadingSpinner_CreateOrEditRoom, "{{{Text_EditingClubRoom}}}");
		} else {
			{{{LoadingSpinner::P}}}StartAnimWithFade(This, _Controls.LoadingSpinner_CreateOrEditRoom, "{{{Text_CreatingClubRoom}}}");
		}
	} else {
		switch (State.Step) {
			case C_Step_RoomMapList: State = DisplayInfo(State, _Controls.Label_Info, "{{{Text_NoTracks}}}", False);
			case C_Step_PlayerDedicatedServer: {
				if (_Controls.Label_ErrorDedicated.Value == "") {
					State = DisplayInfo(State, _Controls.Label_Info, "{{{Text_DedicatedRequirements}}}", False);
				}
			}
		}
	}

	return State;
}

K_State Select(K_State _State, CMlControl _Control, K_Controls _Controls) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;
	State = DisplayInfo(State, _Controls.Label_Info, "", False);

	switch (_Control.ControlId) {
		case "button-back": State = Cancel(State, _Controls);
		case "button-campaign": State = UpdateStep(State, C_Step_SelectCampaign, _Controls);
		case "button-create": State = CreateOrEditRoom(State, _Controls);
		case "button-maps": State = UpdateStep(State, C_Step_BrowseMaps, _Controls);
		case "button-next-maps": State = UpdateMapListGrid(State, _Controls, State.PagerOffset + C_Pager_Offset);
		case "button-player-dedicated": State = UpdateStep(State, C_Step_PlayerDedicatedServer, _Controls);
		case "button-prev-maps": State = UpdateMapListGrid(State, _Controls, State.PagerOffset - C_Pager_Offset);
		case "button-settings": ShowScriptSettingsEditor(State, _Controls);
		case "checkbox-private": State.IsPrivate = {{{Checkbox::P}}}Toggle(This, _Control as CMlFrame);
		case "form-select-dedicated": {
			{{{FormSelect::P}}}DisplayOptions(This, _Control.Id, True);
			EnableNavigationGroups(False);
		}
		case "button-logo": {
			if (Platform::IsFromFirstParty(System)) {
				{{{PopUpClubThemes::P}}}Open(This);
			} else {
				declare BrowserSettings = {{{BrowserAPI::P}}}GetDefaultSettings();
				BrowserSettings.FilterByExtension = ["png", "jpg", "jpeg"];
				BrowserSettings.FilterClubThemeByMediaType = ["{{{ClubStruct::C_MediaType_Icon}}}"];
				BrowserSettings.DisplayFileNameTooltip = True;
				{{{BrowserAPI::P}}}SetCurrentBrowser(This,
					{{{BrowserAPI::C_BrowserType_PathNavigation}}},
					"{{{BrowserAPI::C_BrowserName_Image}}}",
					[{{{BrowserAPI::C_DataType_Image}}}],
					"",
					BrowserSettings
				);
				State = UpdateStep(State, C_Step_BrowseImages, _Controls);
			}
		}
		default: {
			if (_Control.HasClass("{{{C_Class_MapButton}}}") && State.Room.CampaignId == {{{CampaignStruct::P}}}C_Campaign_NullId) {
				State.SelectedMap = (_Control as CMlFrame);
				if (State.ToMoveMapUid != "") {
					State = SwapMapPositions(State, _Controls, _Control as CMlFrame);
				} else {
					declare Text MapUid for _Control;
					if (MapUid != "") {
						{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Tracks, State.MapList.get(MapUid, {{{CampaignStruct::P}}}K_Map {}).Name);
						{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Tracks);
					} else {
						if (State.Room.MapUids.count >= C_MapsNb_Max) {
							State = DisplayInfo(State, _Controls.Label_Info, TL::Compose("{{{Text_TooManyMaps}}}", ""^C_MapsNb_Max), False);
						} else {
							ShowTrackBrowser(State, True, False);
						}
					}
				}
			}
		}
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_State State;
declare K_Controls Controls;
declare Text OldServerLogin;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

Controls = K_Controls {
	Frame_Global = Frame_Global,
	Frame_Browser = (Page.GetFirstChild("frame-browser") as CMlFrame),
	Frame_MapRankings = (Frame_Global.GetFirstChild("frame-map-rankings") as CMlFrame),
	Frame_MapsGrid = (Frame_Global.GetFirstChild("frame-maps-grid") as CMlFrame),
	Frame_PlayerDedicated = (Frame_Global.GetFirstChild("frame-player-dedicated") as CMlFrame),
	Frame_RoomInfo = (Frame_Global.GetFirstChild("frame-room-info") as CMlFrame),
	Frame_RoomMaps = (Frame_Global.GetFirstChild("frame-room-maps") as CMlFrame),
	Frame_RoomTypeSelection = (Frame_Global.GetFirstChild("frame-room-type-selection") as CMlFrame),
	Frame_ScrollCampaigns = (Frame_Global.GetFirstChild("frame-scroll-campaigns") as CMlFrame),
	Frame_SelectCampaign = (Frame_Global.GetFirstChild("frame-select-campaign") as CMlFrame),
	Frame_Settings = (Frame_Global.GetFirstChild("frame-settings") as CMlFrame),
	ButtonIcon_Back = (Frame_Global.GetFirstChild("button-icon-back") as CMlFrame),
	ButtonIcon_Create = (Frame_Global.GetFirstChild("button-icon-create") as CMlFrame),
	Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
	Button_Create = (Frame_Global.GetFirstChild("button-create") as CMlFrame),
	Button_DefaultMap = (Frame_Global.GetFirstChild("button-map-0-0") as CMlFrame),
	Button_Logo = (Frame_Global.GetFirstChild("button-logo") as CMlFrame),
	Button_NextMaps = (Frame_Global.GetFirstChild("button-next-maps") as CMlFrame),
	Button_PrevMaps = (Frame_Global.GetFirstChild("button-prev-maps") as CMlFrame),
	Button_Settings = (Frame_Global.GetFirstChild("button-settings") as CMlFrame),
	Checkbox_Private = (Frame_Global.GetFirstChild("checkbox-private") as CMlFrame),
	FormSelect_Dedicated = (Frame_Global.GetFirstChild("form-select-dedicated") as CMlFrame),
	Label_CampaignName = (Frame_Global.GetFirstChild("label-campaign-name") as CMlLabel),
	Label_ErrorDedicated = (Frame_Global.GetFirstChild("label-error-dedicated") as CMlLabel),
	Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
	Label_InfoDescription = (Frame_Global.GetFirstChild("label-info-description") as CMlLabel),
	Label_InfoTitle = (Frame_Global.GetFirstChild("label-info-title") as CMlLabel),
	Label_MoveMap = (Frame_Global.GetFirstChild("label-move-map") as CMlLabel),
	Label_SelectionInfo = (Frame_Global.GetFirstChild("label-selection-info") as CMlLabel),
	Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
	LoadingSpinner_CreateOrEditRoom = (Page.GetFirstChild("loadingspinner-create-or-edit-room") as CMlFrame),
	LoadingSpinner_RetrieveInfo = (Frame_Global.GetFirstChild("loadingspinner-retrieve-info") as CMlFrame),
	PopUpClubThemes_Icon = (Frame_Global.GetFirstChild("popupclubthemes-icon") as CMlFrame),
	PopUpMultiChoice_Exit = (Frame_Global.GetFirstChild("popupmultichoice-exit") as CMlFrame),
	PopUpMultiChoice_Tracks = (Frame_Global.GetFirstChild("popupmultichoice-track") as CMlFrame),
	TextField_RoomName = (Frame_Global.GetFirstChild("textfield-name") as CMlFrame)
};

State = K_State {
	FocusedMap = Controls.Button_DefaultMap,
	GetPlayerServerAccountsRequest = Http::GetEmptyRequest(),
	GetClubRoomDetailRequest = Http::GetEmptyRequest(),
	HasError = False
};

{{{Scroll::P}}}SetElementsTotal(This, Controls.Frame_ScrollCampaigns, {{{CampaignStore::P}}}GetClubCampaignsTotal({{{ClubStore::P}}}GetUserCurrentClub().Id));
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_CreateRoom}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);
				State.IsEditingRoom = Query.existskey("{{{RoutePaths::C_Query_Activity}}}");
				State = UpdateAvailableModeNames(State, "");
				State.Room = {{{ClubStruct::P}}}K_Room {
					ClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id,
					ScriptName = C_ModeNames_ScriptNames[C_ModeNames[0]],
					Region = C_RegionList[C_DefaultRegion],
					CampaignId = {{{CampaignStruct::P}}}C_Campaign_NullId,
					Scalable = False,
					HasPassword = False
				};

				if (State.IsEditingRoom) {
					declare {{{ClubStruct::P}}}K_Activity Activity;
					Activity.fromjson(Query["{{{RoutePaths::C_Query_Activity}}}"]);
					{{{ExpendableButton::P}}}SetText(This, Controls.Button_Create, "{{{Text_Save}}}");
					Controls.Label_Title.SetText("{{{Text_EditRoom}}}");
					State.IsPrivate = !Activity.Public;
					State.Room.Name = Activity.Name;
					State.Room.Id = Activity.Id;
					State.Room.MediaUrl = Activity.MediaUrl;
					State = UpdateStep(State, C_Step_LoadingRoomDetails, Controls);
				} else {
					{{{ExpendableButton::P}}}SetText(This, Controls.Button_Create, "{{{Text_Create}}}");
					Controls.Label_Title.SetText("{{{Text_CreateRoom}}}");
					State.SelectedPlayerServerAccount = ServerAPI::K_PlayerServerAccount {};
					State.PlayerServerAccountList = [];
					State = UpdateStep(State, C_Step_RoomTypeSelection, Controls);
					{{{Scroll::P}}}TriggerPagerUpdate(Controls.Frame_ScrollCampaigns);
				}

				{{{PopUpClubThemes::P}}}SelectClubTheme(This, {{{PopUpClubThemes::P}}}C_Choice_None);
				UpdateClubRoomLogo(State, Controls);
				UpdateControllerInfo(State, Controls);
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					if (Event.To != Null && Event.To.HasClass("{{{C_Class_Setting}}}") && Event.To.Id == Event.From.Id) {
						switch (Event.Input) {
							case CMlScriptEvent::EMenuNavAction::Select: State = UpdateSetting(State, Controls, TL::ToInteger((Event.To as CMlFrame).DataAttributeGet("setting")), C_SettingShift_Next);
							case CMlScriptEvent::EMenuNavAction::Left: State = UpdateSetting(State, Controls, TL::ToInteger((Event.To as CMlFrame).DataAttributeGet("setting")), C_SettingShift_Previous);
							case CMlScriptEvent::EMenuNavAction::Right: State = UpdateSetting(State, Controls, TL::ToInteger((Event.To as CMlFrame).DataAttributeGet("setting")), C_SettingShift_Next);
							case CMlScriptEvent::EMenuNavAction::Action2: ShowScriptSettingsEditor(State, Controls);
							case CMlScriptEvent::EMenuNavAction::AppMenu: State = CreateOrEditRoom(State, Controls);
							case CMlScriptEvent::EMenuNavAction::Cancel: {
								if (State.ToMoveMapUid == "") State = Cancel(State, Controls);
								else State = SwapMapPositions(State, Controls, State.SelectedMap as CMlFrame); //< Abort map swapping
							}
							default: State = Focus(State, Controls, Event.From, Event.To, False);
						}
					} else {
						switch (Event.Input) {
							case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Event.To,	Controls);
							case CMlScriptEvent::EMenuNavAction::Action2: ShowScriptSettingsEditor(State, Controls);
							case CMlScriptEvent::EMenuNavAction::AppMenu: State = CreateOrEditRoom(State, Controls);
							case CMlScriptEvent::EMenuNavAction::Cancel: {
								if (State.ToMoveMapUid == "") State = Cancel(State, Controls);
								else State = SwapMapPositions(State, Controls, State.SelectedMap as CMlFrame); //< Abort map swapping
							}
							default: {
								if (Event.To == Event.From && Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
									State = UpdateMapListGrid(State, Controls, State.PagerOffset - C_Pager_Offset);
								} else if (Event.To == Event.From && Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
									State = UpdateMapListGrid(State, Controls, State.PagerOffset + C_Pager_Offset);
								} else if (!Event.From.HasClass("{{{C_Class_MapButton}}}") && Event.To.HasClass("{{{C_Class_MapButton}}}")) {
									State = Focus(State, Controls, Event.From, State.FocusedMap, False);
								} else {
									State = Focus(State, Controls, Event.From, Event.To, False);
								}
							}
						}
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseOver: State = Focus(State, Controls, Event.From, Event.To, True);
						case CMlScriptEvent::Type::MouseClick: {
							if (Event.To != Null && Event.To.HasClass("{{{C_Class_Setting}}}") && {{{Navigation::P}}}GetControlTarget(Event.To, CMlScriptEvent::EMenuNavAction::Select) != Null) {
								State = UpdateSetting(State, Controls, TL::ToInteger(Event.To.DataAttributeGet("setting")), C_SettingShift_Next);
							} else {
								State = Select(State, Event.To, Controls);
							}
						}
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_MouseOnly}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseOut: State = Focus(State, Controls, Event.From, Event.To, True);
						case CMlScriptEvent::Type::MouseOver: State = Focus(State, Controls, Event.From, Event.To, True);
						case CMlScriptEvent::Type::MouseClick: {
							if (Event.To != Null && Event.To.Parent.HasClass("{{{C_Class_Setting}}}")) {
								State = UpdateSetting(State, Controls, TL::ToInteger(Event.To.Parent.DataAttributeGet("setting")), TL::ToInteger(Event.To.DataAttributeGet("setting-shift")));
							} else {
								State = Select(State, Event.To, Controls);
							}
						}
					}
				}
			}
		}
	}

	/* TextField events */
	foreach (Event in {{{TextField::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TextField::P}}}C_EventType_Update: {
				if (Event.Control != Null && Event.Control.ControlId == Controls.TextField_RoomName.ControlId) {
					if (Event.Value != State.Room.Name) {
						declare Text NewName = Tools::FormatValue(Event.Value);
						if (TL::Length(TL::StripFormatting(NewName)) > C_Name_MaxChar) {
							State = DisplayInfo(State, Controls.Label_Info, TL::Compose("{{{Text_NameLimit}}}", ""^C_Name_MaxChar), False);
							NewName = TL::SubString(NewName, 0, C_Name_MaxChar);
						} else {
							State = DisplayInfo(State, Controls.Label_Info, "", False);
						}
						{{{TextField::P}}}SetValue(This, Controls.TextField_RoomName, NewName);
						State.Room.Name = NewName;
					}
				}
			}
		}
	}

	/* FormSelect events */
	foreach (Event in {{{FormSelect::P}}}GetPendingEvents(This)) {
		if (Event.Id == Controls.FormSelect_Dedicated.Id) {
			switch (Event.Type) {
				case {{{FormSelect::P}}}C_EventType_HideOptions: {
					EnableNavigationGroups(True);
				}
				case {{{FormSelect::P}}}C_EventType_RequestToggle: {
					if (Event.DisplayingOptions && !{{{Navigation::P}}}GroupIsEnabled(This, "{{{C_NavGroup_Default}}}")) {
						{{{FormSelect::P}}}DisplayOptions(This, Event.Id, False);
						EnableNavigationGroups(True);
					}
				}
				case {{{FormSelect::P}}}C_EventType_Select: {
					if (State.PlayerServerAccountList.existskey(Event.SelectedIndex - 1)) {
						State.SelectedPlayerServerAccount = State.PlayerServerAccountList[Event.SelectedIndex - 1];
						State.Room.PlayerServerLogin = State.SelectedPlayerServerAccount.Login;
						declare Boolean SamePlayerServerLogin = State.IsEditingRoom && OldServerLogin == State.SelectedPlayerServerAccount.Login;
						if (!SamePlayerServerLogin && State.SelectedPlayerServerAccount.AlreadyUsed) {
							State = DisplayInfo(State, Controls.Label_Info, TL::Compose("{{{Text_ExistingRoom}}}", "$<"^State.SelectedPlayerServerAccount.ClubRoomName^"$>", ""^State.SelectedPlayerServerAccount.ClubRoomId), False);
						}
					} else {
						State.SelectedPlayerServerAccount = ServerAPI::K_PlayerServerAccount {};
					}
				}
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background" && {{{Navigation::P}}}GroupIsEnabled(This, "{{{C_NavGroup_Default}}}")) {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: {
					declare Boolean IsEditingMapList = State.Step == C_Step_RoomMapList && State.Room.MapUids.count > 0 && State.Room.CampaignId == {{{CampaignStruct::P}}}C_Campaign_NullId;
					if ((!IsValidRoom(State, Controls) && !IsEditingMapList) || State.IsEditingRoom) {
						{{{Router::P}}}PushParent(This, ["{{{RoutePaths::C_Query_SkipPageInit}}}" => ""]);
					} else {
						State = Cancel(State, Controls);
					}
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (
			Event.PopUpMultiChoice != Null &&
			(
				Event.PopUpMultiChoice.Id == Controls.PopUpMultiChoice_Exit.Id ||
				Event.PopUpMultiChoice.Id == Controls.PopUpMultiChoice_Tracks.Id
			)
		) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					EnableNavigationGroups(!Event.PopUpMultiChoice.Visible);
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					switch (Event.PopUpMultiChoice.Id) {
						case Controls.PopUpMultiChoice_Exit.Id: {
							switch (Event.SelectedIndex) {
								case C_Choice_Exit: State = Cancel(State, Controls);
							}
							{{{PopUpMultiChoice::P}}}Close(This, Controls.PopUpMultiChoice_Exit);
						}
						case Controls.PopUpMultiChoice_Tracks.Id: {
							switch (Event.SelectedIndex) {
								case C_Choice_Replace: ShowTrackBrowser(State, False, False);
								case C_Choice_Move: {
									declare Text MapUid as MapToMoveUid for State.SelectedMap;
									{{{ExpendableButton::P}}}AddStyle(This, State.SelectedMap as CMlFrame, {{{ExpendableButton::P}}}Style_MapLive());
									Controls.Label_MoveMap.SetText(TL::Compose("{{{Text_SelectToSwapMap}}}", State.MapList.get(MapToMoveUid, {{{CampaignStruct::P}}}K_Map {}).Name));
									State.ToMoveMapUid = MapToMoveUid;
									UpdateControllerInfo(State, Controls);
								}
								case C_Choice_Delete: {
									declare Text MapUid for State.SelectedMap;
									State.Room.MapUids.remove(MapUid);
									State.MapList.removekey(MapUid);
									State = UpdateMapListGrid(State, Controls, State.PagerOffset);
									if (State.MapList.count <= 0) {
										State = UpdateAvailableModeNames(State, "");
									}
								}
							}
						}
					}
				}
			}
		}
	}

	/* Browser events */
	foreach (Event in {{{BrowserAPI::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{BrowserAPI::P}}}C_EventType_Select: {
				if (Event.DataType == {{{BrowserAPI::P}}}C_DataType_Image) {
					declare Text MediaUrl = {{{BrowserAPI::P}}}C_BasePath_Media^Event.Data;
					declare Text FullMediaUrl = {{{BrowserAPI::P}}}C_BasePath^MediaUrl;

					if ({{{ClubStruct::P}}}IsClubThemeUrl(FullMediaUrl)) {
						State.Room.MediaUrl = {{{ClubStruct::P}}}GetClubThemeName(FullMediaUrl);
					} else {
						State.Room.MediaUrl = MediaUrl;
					}

					UpdateClubRoomLogo(State, Controls);
					{{{BrowserAPI::P}}}FocusBrowser(This, False);
					if (State.Room.IsHostedByNadeo) {
						State = UpdateStep(State, C_Step_RoomMapList, Controls);
					} else {
						State = UpdateStep(State, C_Step_PlayerDedicatedServer, Controls);
					}
				}
			}
			case {{{BrowserAPI::P}}}C_EventType_Cancel: {
				State = Cancel(State, Controls);
			}
		}
	}

	/* Activity image events */
	foreach (Event in {{{PopUpClubThemes::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{PopUpClubThemes::P}}}C_EventType_Display: EnableNavigationGroups(!Event.PopUpClubThemes.Visible);
			case {{{PopUpClubThemes::P}}}C_EventType_Confirm: {
				if (Event.PopUpClubThemes != Null && Event.PopUpClubThemes.Id == Controls.PopUpClubThemes_Icon.Id) {
					if (Event.MediaUrl != "") State.Room.MediaUrl = Event.ThemeName;
					else State.Room.MediaUrl = Event.MediaUrl;
					UpdateClubRoomLogo(State, Controls);
					if (State.Room.IsHostedByNadeo) {
						State = UpdateStep(State, C_Step_RoomMapList, Controls);
					}
				}
			}
		}
	}

	/* ScriptSettingsEditor events */
	foreach (Event in {{{ScriptSettingsEditor::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{ScriptSettingsEditor::P}}}C_Event_Confirm: {
				State.Room.ScriptSettings = Event.ScriptSettingsDiff;
				EnableNavigationGroups(True);
				{{{ScriptSettingsEditor::P}}}Hide();
			}
			case {{{ScriptSettingsEditor::P}}}C_Event_Cancel: {
				EnableNavigationGroups(True);
			}
		}
	}

	/* TrackBrowser events */
	foreach (Event in {{{TrackBrowser::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TrackBrowser::P}}}C_Event_Select: {
				declare Text MapUid as MapToReplaceUid for State.SelectedMap;
				declare {{{CampaignStruct::P}}}K_Map SelectedMap = Event.Track;

				{{{TrackBrowser::P}}}Display(This, False);
				if (MapToReplaceUid != SelectedMap.Uid) {
					State.MapList[SelectedMap.Uid] = SelectedMap;
					State.MapList.removekey(MapToReplaceUid);
					if (State.Room.MapUids.exists(SelectedMap.Uid)) State.Room.MapUids.remove(SelectedMap.Uid);
					State.Room.MapUids[State.Room.MapUids.keyof(MapToReplaceUid)] = SelectedMap.Uid;
				}
			}
			case {{{TrackBrowser::P}}}C_Event_MultiSelect: {
				declare Text[] ExistingTracksUid;
				declare Text[] MapTypes;

				foreach (Map in Event.MultiTracks) MapTypes.add(Map.Type);
				if (MapTypes.containsonly(["{{{Const::C_MapType_Race}}}"]) || MapTypes.containsonly(["{{{Const::C_MapType_Royal}}}"])) {
					foreach (Map in Event.MultiTracks) {
						if (!State.Room.MapUids.exists(Map.Uid)) {
							State.Room.MapUids.add(Map.Uid);
							State.MapList[Map.Uid] = Map;
							if (State.Room.MapUids.count >= C_MapsNb_Max) break;
						} else {
							ExistingTracksUid.add(Map.Uid);
						}
					}

					State = UpdateAvailableModeNames(State, MapTypes[0]);
					if (State.Step != C_Step_RoomMapList) {
						State = UpdateStep(State, C_Step_RoomMapList, Controls);
					} else {
						{{{TrackBrowser::P}}}Display(This, False);
					}

					if (State.Room.MapUids.count >= C_MapsNb_Max) {
						State = DisplayInfo(State, Controls.Label_Info, TL::Compose("{{{Text_TooManyMaps}}}", ""^C_MapsNb_Max), False);
					} else if (ExistingTracksUid.count == 1) {
						State = DisplayInfo(State, Controls.Label_Info, TL::Compose("{{{Text_ExistingTrack}}}", Event.MultiTracks[ExistingTracksUid[0]].Name), False);
					} else if (ExistingTracksUid.count > 1) {
						State = DisplayInfo(State, Controls.Label_Info, TL::Compose("{{{Text_ExistingTracks}}}", ""^ExistingTracksUid.count), False);
					}
				} else {
					{{{TrackBrowser::P}}}ShowError(This, "{{{Text_MapType}}}");
				}
			}
			case {{{TrackBrowser::P}}}C_Event_Exit: {
				if (State.Step == C_Step_RoomMapList) {
					State = UpdateMapListGrid(State, Controls, State.PagerOffset);
					UpdateControllerInfo(State, Controls);
					EnableNavigationGroups(True);
				} else {
					State = Cancel(State, Controls);
				}
			}
		}
	}

	/* Scroll events */
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null && Event.Scroll.Id == Controls.Frame_ScrollCampaigns.Id) {
			switch (Event.Type) {
				case {{{Scroll::P}}}C_EventType_PagerUpdate: {
					{{{CampaignStore::P}}}Action_LoadClubsCampaigns(
						This,
						{{{ClubStore::P}}}GetUserCurrentClub().Id,
						Event.PagerOffset,
						Event.PagerCount
					);
				}
				case {{{Scroll::P}}}C_EventType_Update: {
					declare ClubCampaigns = {{{CampaignStore::P}}}GetClubCampaignList({{{ClubStore::P}}}GetUserCurrentClub().Id);

					foreach (Key => Frame_Element in Event.ElementsVisible) {
						if (ClubCampaigns.existskey(Key)) {
							ShowClubCampaign(Frame_Element, ClubCampaigns[Key]);
						} else {
							ShowClubCampaignLoading(Frame_Element);
						}
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						HideClubCampaign(Frame_Element);
					}

					if (Event.ElementsVisible.count > 0) {
						Controls.Label_SelectionInfo.SetText("{{{Text_CampaignToUse}}}");
					} else {
						Controls.Label_SelectionInfo.SetText("{{{Text_NoCampaign}}}");
					}
				}
				case {{{Scroll::P}}}C_EventType_Focus: {
					if (Event.From != Null) FocusClubCampaign(Event.From, False, State.Step == C_Step_SelectCampaign);
					if (Event.To != Null) FocusClubCampaign(Event.To, True, State.Step == C_Step_SelectCampaign);
					if (Event.IsMouse && Event.To != Null && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
						State = Focus(State, Controls, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Event.Scroll, False);
					}
				}
				case {{{Scroll::P}}}C_EventType_Select: {
					declare CurrentClub = {{{ClubStore::P}}}GetUserCurrentClub();
					declare ClubCampaigns = {{{CampaignStore::P}}}GetClubCampaignList(CurrentClub.Id);
					if (ClubCampaigns.existskey(Event.ToKey)) {
						declare {{{CampaignStruct::P}}}K_Campaign ClubCampaign = ClubCampaigns[Event.ToKey];
						if (!{{{ControlBlockList::P}}}IsBlocked(This, [ClubCampaign.CreatorAccountId, ClubCampaign.LatestEditorAccountId])) {
							State.Room.CampaignId = ClubCampaign.Id;
							declare {{{CampaignStruct::P}}}K_Campaign Campaign = {{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId);
							if (!Campaign.IsLoaded) {
								{{{CampaignStore::P}}}Action_LoadCampaign(This, State.Room.CampaignId, CurrentClub.Id);
							}
							State = UpdateCampaignInfo(State, Controls, Campaign);
							State = UpdateStep(State, C_Step_RoomMapList, Controls);
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_Cancel: {
					State = Cancel(State, Controls);
				}
				case {{{Scroll::P}}}C_EventType_ReachLimit: {
					if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Left || Event.NavAction == CMlScriptEvent::EMenuNavAction::Down) {
						State = Focus(State, Controls, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Controls.Button_Back, False);
						{{{MenuSounds::P}}}PlayFocusSound(This, Controls.Button_Back);
					}
				}
			}
		}
	}

	/* Stores events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{ClubStore::P}}}C_Event_ClubRoomCreatedOrEdited: {
						if (Event.CustomEventData.count > 0) State.Room.Id = TL::ToInteger(Event.CustomEventData[0]);
						{{{ClubStore::P}}}Action_ActivityUpdatePrivacy(This, {{{ClubStore::P}}}GetUserCurrentClub().Id, State.Room.Id, !State.IsPrivate);
					}
					case {{{ClubStore::P}}}C_Event_ClubRoomCreationOrEditionFailed: {
						if (Event.CustomEventData.count > 0) {
							{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_CreateOrEditRoom);
							State = DisplayInfo(State, Controls.Label_Info, Event.CustomEventData[0], True);
							EnableNavigationGroups(True);
						}
					}
					case {{{ClubStore::P}}}C_Event_ClubActivityPrivacyUpdated: {
						{{{Router::P}}}PushParent(This, ["{{{RoutePaths::C_Query_SkipPageInit}}}" => ""]);
					}
					case {{{ClubStore::P}}}C_Event_ClubActivityPrivacyUpdateFailed: {
						if (State.IsEditingRoom && Event.CustomEventData.count > 0) {
							{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_CreateOrEditRoom);
							State = DisplayInfo(State, Controls.Label_Info, Event.CustomEventData[0], True);
							EnableNavigationGroups(True);
						} else { //< Exit the pop-up when creating a room as the player can update the activity privacy later
							{{{Router::P}}}PushParent(This, ["{{{RoutePaths::C_Query_SkipPageInit}}}" => ""]);
						}
					}
					case {{{CampaignStore::P}}}C_Event_ClubsCampaignListUpdated: {
						if (Event.CustomEventData.count > 0) {
							declare CurrentClub = {{{ClubStore::P}}}GetUserCurrentClub();
							if (TL::ToInteger(Event.CustomEventData[0]) == CurrentClub.Id) {
								{{{Scroll::P}}}SetElementsTotal(This, Controls.Frame_ScrollCampaigns, {{{CampaignStore::P}}}GetClubCampaignsTotal(CurrentClub.Id));
							}
						}
					}
					case {{{CampaignStore::P}}}C_Event_CampaignLoadComplete: {
						if (Event.CustomEventData.count > 0) {
							if (TL::ToInteger(Event.CustomEventData[0]) == State.Room.CampaignId) {
								declare {{{CampaignStruct::P}}}K_Campaign Campaign = {{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId);
								{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_RetrieveInfo);
								State = UpdateCampaignInfo(State, Controls, Campaign);
								EnableNavigationGroups(True);
								if (State.IsEditingRoom) {
									State = UpdateStep(State, C_Step_RoomMapList, Controls);
								} else {
									State = UpdateMapListGrid(State, Controls, C_Pager_Reset);
								}
							}
						}
					}
				}
			}
		}
	}

	/* Register map task */
	if (State.Task_RegisterMapList.count > 0) {
		declare TmpTaskList = State.Task_RegisterMapList;
		foreach (MapUid => Task_RegisterMap in TmpTaskList) {
			if (Task::IsInitialized(Task_RegisterMap)) {
				State.Task_RegisterMapList[MapUid] = Task::Update(Task_RegisterMap);
				if (!Task::IsRunning(Task_RegisterMap)) {
					declare CTaskResult_NSMap SourceTask = Task::GetSourceTask_NSMap(Task_RegisterMap);
					if (Task::IsSuccess(Task_RegisterMap) && SourceTask != Null) {
						State.MapList[SourceTask.Map.Uid].DownloadUrl = SourceTask.Map.FileUrl;
					} else {
						State = DisplayInfo(State, Controls.Label_Info, TL::Compose("{{{Text_UploadError}}}", Task::GetSourceTaskError(Task_RegisterMap).Code), True);
					}
					State.Task_RegisterMapList[MapUid] = Task::Destroy(Task_RegisterMap);
					State.Task_RegisterMapList.removekey(MapUid);
				}
			}

			if (State.Task_RegisterMapList.count == 0) {
				if (State.HasError) {
					{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_CreateOrEditRoom);
					State = UpdateStep(State, C_Step_RoomMapList, Controls);
				} else {
					State = CreateOrEditRoom(State, Controls);
				}
			}
		}
	}

	/* Get the map list of the room */
	if (Task::IsInitialized(State.Task_MapList)) {
		State.Task_MapList = Task::Update(State.Task_MapList);
		if (!Task::IsRunning(State.Task_MapList)) {
			declare CTaskResult_NSMapList SourceTask = Task::GetSourceTask_NSMapList(State.Task_MapList);
			if (Task::IsSuccess(State.Task_MapList) && SourceTask != Null) {
				foreach (NSMap in SourceTask.MapList) {
					if (State.Room.MapUids.exists(NSMap.Uid)) {
						State.MapList[NSMap.Uid] = {{{CampaignStruct::P}}}GetMapFromNSMap({{{CampaignStruct::P}}}K_Map {}, NSMap);
					}
				}
				State = UpdateStep(State, C_Step_RoomMapList, Controls);
			} else {
				State = DisplayInfo(State, Controls.Label_Info, TL::Compose("{{{Text_MapListError}}}", Task::GetSourceTaskError(State.Task_MapList).Code), True);
			}
			State.Task_MapList = Task::Destroy(State.Task_MapList);
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_RetrieveInfo);
		}
	}

	// Get player server accounts request handle
	if (Http::IsInitialized(State.GetPlayerServerAccountsRequest)) {
		State.GetPlayerServerAccountsRequest = Http::Update(State.GetPlayerServerAccountsRequest);
		if (!Http::IsRunning(State.GetPlayerServerAccountsRequest)) {
			if (Http::IsSuccess(State.GetPlayerServerAccountsRequest)) {
				State.PlayerServerAccountList = ServerAPI::GetResponseFromGetPlayerServerAccounts(State.GetPlayerServerAccountsRequest);
				if (State.PlayerServerAccountList.count > 0) {
					declare Text[] FormPlayerAccountList = ["{{{Text_AccountSelection}}}"];
					declare Integer SelectIndex = 0;

					foreach (Index => PlayerServerAccount in State.PlayerServerAccountList) {
						if (PlayerServerAccount.Login == State.Room.PlayerServerLogin || PlayerServerAccount.Login == State.SelectedPlayerServerAccount.Login) {
							SelectIndex = Index + 1;
							State.SelectedPlayerServerAccount = PlayerServerAccount;
						}
						if (PlayerServerAccount.AlreadyUsed) {
							FormPlayerAccountList.add("$D00$<"^PlayerServerAccount.Login^"$> ✗");
						} else {
							FormPlayerAccountList.add("$0D0$<"^PlayerServerAccount.Login^"$> ✔");
						}
					}
					{{{FormSelect::P}}}SetOptions(This, Controls.FormSelect_Dedicated.Id, FormPlayerAccountList);
					{{{Navigation::P}}}Lock(Controls.FormSelect_Dedicated, False);
					if (SelectIndex > 0) {
						{{{FormSelect::P}}}Select(This, Controls.FormSelect_Dedicated.Id, SelectIndex);
					}
				} else {
					Controls.Label_ErrorDedicated.SetText("{{{Text_NoAccountRegistered}}}");
					{{{FormSelect::P}}}SetOptions(This, Controls.FormSelect_Dedicated.Id, ["{{{Text_NoAccountFound}}}"]);
					{{{Navigation::P}}}Lock(Controls.FormSelect_Dedicated, False);
				}
			} else {
				Controls.Label_ErrorDedicated.SetText(TL::Compose("{{{Text_ServerAccountError}}}", ""^Http::GetStatusCode(State.GetPlayerServerAccountsRequest)));
				{{{FormSelect::P}}}SetOptions(This, Controls.FormSelect_Dedicated.Id, ["{{{Text_Error}}}"]);
				{{{Navigation::P}}}Lock(Controls.FormSelect_Dedicated, False);
			}
			State.GetPlayerServerAccountsRequest = Http::Destroy(State.GetPlayerServerAccountsRequest);
		}
	}

	// Get club room details to edit it
	if (Http::IsInitialized(State.GetClubRoomDetailRequest)) {
		State.GetClubRoomDetailRequest = Http::Update(State.GetClubRoomDetailRequest);
		if (!Http::IsRunning(State.GetClubRoomDetailRequest)) {
			if (Http::IsSuccess(State.GetClubRoomDetailRequest)) {
				declare Text MediaUrl = State.Room.MediaUrl; //< Save media url in case it is a club theme url
				State.Room = ClubAPI::GetResponseFromGetClubRoomDetail(State.GetClubRoomDetailRequest);
				if ({{{ClubStruct::P}}}IsClubThemeUrl(MediaUrl)) {
					{{{PopUpClubThemes::P}}}SelectClubTheme(This, MediaUrl);
					State.Room.MediaUrl = MediaUrl;
				}
				State = UpdateAvailableModeNames(State, TitleControl::GetMapTypeForScript(State.Room.ScriptName));
				UpdateClubRoomLogo(State, Controls);

				if (State.Room.IsHostedByNadeo) {
					if (State.Room.CampaignId != {{{CampaignStruct::P}}}C_Campaign_NullId) {
						declare {{{CampaignStruct::P}}}K_Campaign Campaign = {{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId);
						State.Room.MapUids = [];
						if (!Campaign.IsLoaded) {
							{{{CampaignStore::P}}}Action_LoadCampaign(This, State.Room.CampaignId, State.Room.ClubId);
						} else {
							State = UpdateCampaignInfo(State, Controls, Campaign);
							State = UpdateStep(State, C_Step_RoomMapList, Controls);
							{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_RetrieveInfo);
						}
					} else {
						State.Task_MapList = Task::DestroyAndCreate(
							State.Task_MapList,
							DataFileMgr,
							DataFileMgr.Map_NadeoServices_GetListFromUid(MainUser::GetMainUserId(), State.Room.MapUids)
						);
					}
				} else {
					OldServerLogin = State.Room.PlayerServerLogin;
					State = UpdateStep(State, C_Step_PlayerDedicatedServer, Controls);
					{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_RetrieveInfo);
				}
			} else {
				//L16N [Create Room] Error message displayed when room details cannot be retrieved. %1 will be replaced by an error code, e.g. "Error while retrieving room details. (Error code: 500)"
				State = DisplayInfo(State, Controls.Label_Info, TL::Compose(_("Error while retrieving room details. (Error code: %1)"), ""^Http::GetStatusCode(State.GetClubRoomDetailRequest)), True);
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_RetrieveInfo);
			}
			State.GetClubRoomDetailRequest = Http::Destroy(State.GetClubRoomDetailRequest);
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_LeavingRoute}}}": {
				State = K_State {
					FocusedMap = Controls.Button_DefaultMap,
					Room = {{{ClubStruct::P}}}K_Room {}
				};
				G_TTSContextIdent_Setting = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Setting);
				State = UpdateMapListGrid(State, Controls, C_Pager_Reset);
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_CreateOrEditRoom);
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_RetrieveInfo);
				{{{ScriptSettingsEditor::P}}}Hide();
				EnableNavigationGroups(False);
			}
		}
	}
}
***
""",
[
	BrowserAPI::ComponentV2(),
	Button::ComponentV2(),
	ButtonIcon::ComponentV2(),
	CampaignStore::ComponentV2(),
	CampaignStruct::Component(),
	Checkbox::ComponentV2(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	ExpendableAsset::ComponentV2(),
	ExpendableButton::ComponentV2(),
	FormSelect::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MapRankings::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpBackground::ComponentV2(),
	PopUpClubThemes::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	Router::ComponentV2(),
	ScriptSettingsEditor::Component(),
	Scroll::ComponentV2(),
	TextField::ComponentV2(),
	TrackBrowser::ComponentV2(),
	Transition::ComponentV2(),
	ControlBlockList::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}