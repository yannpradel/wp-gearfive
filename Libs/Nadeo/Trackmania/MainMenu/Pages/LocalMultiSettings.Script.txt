/**
 *	Page: LocalMultiSettings
 */
#Const Version		"1.0.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/LocalMultiSettings.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/ButtonStyles.Script.txt" as ButtonStyles
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Utils/TextToSpeech.Script.txt" as TextToSpeech
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/Modes/HotSeat/Consts.Script.txt" as HotSeatConst
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/Trackmania/Components/TrackBrowser.Script.txt" as TrackBrowser
#Include "Libs/Nadeo/Trackmania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/Trackmania/Components/ScriptSettingsEditor.Script.txt" as ScriptSettingsEditor
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/NavigationTabs.Script.txt" as NavigationTabs
#Include "Libs/Nadeo/CMGame/Components/ExpendableAssetBase.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/CMGame/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/Trackmania/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_LocalMultiSettings"
#Const C_NavGroupName "navgroup-page-localmultisettings"
#Const C_NavGroupName_MouseOnly "navgroup-localmultisettings-mouse-only"
#Const C_Class_Setting "class-setting-page-localmultisettings"

#Const C_TabNames_HotSeat [
	//L16N [LocalMultiSettings] Name of the local multiplayer game where players race one after another
	0 => _("HotSeat")
]

#Const C_TabNames_SplitScreen [
	//L16N [LocalMultiSettings] Name of the local multiplayer game where the screen is divided in sub screens (one for each player)
	0 => _("SplitScreen")
]

#Const C_SettingShift_Previous -1
#Const C_SettingShift_Null 0
#Const C_SettingShift_Next 1

#Const C_Setting_NbPlayers 0
#Const C_Setting_GameMode 1

#Const C_Setting_Names [
	//L16N [LocalMultiSettings] Amount of players allowed in the local multi mode (hotseat or splitscreen)
	0 => _("|Setting|Number of players"),
	//L16N [LocalMultiSettings] The game mode that will be played in splitscreen
	1 => _("|Setting|Game mode")
]

//L16N [LocalMultiSettings] %1 MUST STAY AT THE END OF THE STRING !!! %1 will be replaced by the name of the author of the track, e.g. "by PlayerA". If your language does not permit to keep the %1 at the end of the string, do not translate "By" and just keep the text "%1"
#Const C_Text_AuthorName _("|NameOnTheRight|By %1")

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [LocalMultiSettings] Text pronouced when the button to add a track is focused.
	declare Text TTS_AddTrack = _("Add a track");
	//L16N [LocalMultiSettings] %1 will be replaced by the name of the author of the track, e.g. "by Darrek"
	declare Text Text_AuthorName = _("By %1");

	//L16N [LocalMultiSettings] Name of the local multiplayer game where the screen is divided in sub screens (one for each player)
	declare Text Text_Title_SplitScreen = _("SplitScreen");
	//L16N [LocalMultiSettings] Name of the local multiplayer game where players race one after another
	declare Text Text_Title_HotSeat = _("HotSeat");
	//L16N [LocalMultiSettings] Action to launch the game
	declare Text ButtonText_Play = _("Play");
	//L16N [LocalMultiSettings] Message displayed when loading track informations
	declare Text Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [LocalMultiSettings] Error message displayed when map types do not match with the game mode (example Royal tracks in Round mode).
	declare Text Text_MapType = _("Some tracks do not match with the selected game mode");
	//L16N [LocalMultiSettings] Text displayed while moving tracks, %1 will be replaced by the name of the selected track
	declare Text Text_MoveTracksExplanation = _("Select track to switch position with '%1'");

	//L16N [LocalMultiSettings] Description of the players number setting
	declare Text Text_PlayersNb_Description = _("The number of local players in the game");
	//L16N [LocalMultiSettings] Description of the Hotseat game mode
	declare Text Text_HotSeat_Description = _("In HotSeat mode, players take turns trying to beat the time of each others.");
	//L16N [LocalMultiSettings] Description of the Time Attack game mode
	declare Text Text_TimeAttack_Description = _("In Time Attack mode, the goal is to set the best time.");
	//L16N [LocalMultiSettings] Description of the Rounds game mode
	declare Text Text_Rounds_Description = _("In Rounds mode, the goal is to win a maximum number of points by finishing the race in first position.");
	//L16N [LocalMultiSettings] Description of the Laps game mode
	declare Text Text_Laps_Description = _("In Laps mode, the goal is to drive as far as possible by passing checkpoints.");
	//L16N [LocalMultiSettings] Description of the Cup game mode
	declare Text Text_Cup_Description = _("The cup mode consists of a series of races on multiple tracks, win points by finishing first.");
	//L16N [LocalMultiSettings] Description of the Teams game mode
	declare Text Text_Teams_Description = _("In Teams mode, the goal is to win a maximum number of points with your teammates.");
	//L16N [LocalMultiSettings] Description of the Royal Time Attack game mode
	declare Text Text_RoyalTimeAttack_Description = _("In Royal Time Attack mode, the goal is the same as in classic Time Attack but on Royal tracks.");

	declare Integer[] HotSeatPlayersNb = [];
	for (I, HotSeatConst::C_MinPlayersNb, HotSeatConst::C_MaxPlayersNb) {
		HotSeatPlayersNb.add(I);
	}
	declare Integer[] SplitScreenPlayersNb = [2,4];

	/* Settings list */
	declare Text ML_Settings = "";
	declare Real Margin = 1.5;
	declare Vec2 Size_Background = <132., 7.5>;
	declare Integer SettingsNb = 2;
	declare Vec2 Pos_ButtonSettings = MLHelpers::SkewX(<Size_Background.X/2, -(Size_Background.Y+Margin)*C_Setting_GameMode>, 10.);

	foreach (SettingId => SettingName in C_Setting_Names) {
		declare Vec2 Pos_SettingName = MLHelpers::SkewX(<3., -0.5>, 10.);

		declare Text UpTarget = "frame-setting-"^ML::Clamp(SettingId-1, 0, SettingsNb-1);
		declare Text DownTarget = "frame-setting-"^ML::Clamp(SettingId+1, 0, SettingsNb-1);
		if (SettingId == C_Setting_Names.count-1) DownTarget = "frame-scroll-tracks";

		ML_Settings ^= """
			<frame id="frame-setting-{{{SettingId}}}"
				pos="{{{MLHelpers::Skew(-Size_Background.X/2., -SettingId*(Size_Background.Y + Margin), 10.)}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_Setting}}}"
				data-setting="{{{SettingId}}}"
				data-nav-inputs="cancel;appmenu;action2;left;right;up;down"
				data-nav-targets="_;_;_;_;_;{{{UpTarget}}};{{{DownTarget}}}"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="quad-activation-setting"
			>
				<quad id="quad-activation-setting" size="{{{Size_Background.X}}} {{{Size_Background.Y}}}" class="{{{Navigation::C_Class_ActivationZone}}}" opacity="0." valign="center" scriptevents="1" z-index="10"/>
				<label id="label-setting-name" size="{{{Size_Background.X*0.43}}} {{{Size_Background.Y}}}" pos="{{{Pos_SettingName.X}}} {{{Pos_SettingName.Y}}}" class="text-semi-bold" text="{{{SettingName}}}" textsize="2." opacity="0.6" z-index="3"/>
				<frameinstance
					id="asset-left" z-index="1"
					modelid="{{{ExpendableAsset::C_Name}}}"
					data-width="{{{Size_Background.X*0.5}}}"
					data-height="{{{Size_Background.Y}}}"
					data-opacity="0.8"
					data-halign="left" data-valign="center"
					data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
					data-colormode-left="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
					data-image-left="{{{ButtonStyles::C_ImageUrl_Common_ButtonRounded_Start}}}"
					data-size-left="128 256"
				/>
				<frameinstance
					id="asset-right" z-index="2"
					modelid="{{{ExpendableAsset::C_Name}}}"
					pos="{{{Size_Background.X*0.5 - MLHelpers::SkewX(Size_Background.Y, 10.)}}} 0"
					data-width="{{{Size_Background.X*0.5}}}"
					data-height="{{{Size_Background.Y}}}"
					data-opacity="0.8"
					data-halign="left" data-valign="center"
					data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}"
					data-colormode-right="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
					data-image-right="{{{ButtonStyles::C_ImageUrl_Common_ButtonRounded_End}}}"
					data-size-right="128 256"
				/>
				<frameinstance
					id="button-previous-{{{SettingId}}}" pos="{{{Size_Background.X*0.51}}} 0" z-index="4"
					modelid="{{{Button::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-setting-shift="{{{C_SettingShift_Previous}}}"
					data-size="{{{Size_Background.Y*0.7}}} {{{Size_Background.Y*0.7}}}"
					data-image="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
					data-imagefocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
					data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
					data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
					data-opacity="1."
					data-opacityunfocus="0.8"
					data-halign="left" data-valign="center"
					data-nav-inputs="select"
					data-nav-targets="_"
					data-nav-group="{{{C_NavGroupName_MouseOnly}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
				<label id="label-setting-value" size="{{{Size_Background.X*0.37}}} {{{Size_Background.Y}}}" pos="{{{Size_Background.X*0.74}}} -0.5" class="text-semi-bold" textsize="2." halign="center" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" opacity="0.6" translate="1" z-index="3"/>
				<frameinstance
					id="button-next-{{{SettingId}}}" pos="{{{Size_Background.X*0.97}}} 0" z-index="4"
					modelid="{{{Button::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-setting-shift="{{{C_SettingShift_Next}}}"
					data-size="{{{Size_Background.Y*0.7}}} {{{Size_Background.Y*0.7}}}"
					data-image="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
					data-imagefocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
					data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
					data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
					data-opacity="1."
					data-opacityunfocus="0.8"
					data-halign="right" data-valign="center"
					data-nav-inputs="select"
					data-nav-targets="_"
					data-nav-group="{{{C_NavGroupName_MouseOnly}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
			</frame>
		""";
	}

	/* Scroll tracks */
	declare Vec2 Size_Header = <0., 0.>;
	declare Vec2 Size_Footer = <0., 0.>;
	declare Vec2 Size_TracksScrollWindow = <262., 73.>;
	declare Integer ColumnsNb_Tracks = 6;
	declare Integer RowsNb_Tracks = 2;
	declare Integer TracksPerPage = ColumnsNb_Tracks * RowsNb_Tracks;
	declare Vec2 Size_TrackMargin = <6., 3.>;
	declare Vec2 Size_Track = Scroll::GetElementSize(Size_TracksScrollWindow, Size_TrackMargin, ColumnsNb_Tracks, RowsNb_Tracks);
	declare Integer TracksElementsNb = Scroll::GetRequiredElementsNb(Size_TracksScrollWindow, Size_Track, Size_TrackMargin, ColumnsNb_Tracks);

	declare Vec2 Size_TrackImage = MLHelpers::KeepRatioFromY(544., 412., Size_Track.Y);
	declare Vec2 Size_Track_Adjusted = <Size_TrackImage.X - MLHelpers::SkewX(Size_TrackImage.Y, 10.),	Size_TrackImage.Y>;
	declare Vec2 Pos_TrackNameOneLine = <Size_TrackImage.X * 0.06, Size_TrackImage.Y * -0.78>;
	declare Vec2 Pos_TrackNameTwoLines = <Size_TrackImage.X * 0.08, Size_TrackImage.Y * -0.73>;
	declare Vec2 Pos_TrackAuthor = <Size_TrackImage.X * 0.05, Size_TrackImage.Y * -0.9>;
	declare Vec2 Pos_PlusIcon = <Size_TrackImage.X * 0.26, Size_TrackImage.Y * -0.18>;

	declare Text ML_Tracks = "";
	for (I, 1, TracksElementsNb) {
		ML_Tracks ^= """
			<frameinstance
				modelid="framemodel-track"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="quad-base" halign="center" valign="center"/>
	<style class="text-extra-bold" halign="left" valign="center2" textprefix="$t$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textsize="3" textcolor="FFF"/>
	<style class="text-semi-bold" halign="left" valign="center2" textcolor="FFFFFF" textsize="5" textprefix="$t$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"/>
	<style class="text-regular" halign="left" valign="center2" textcolor="FFF" textsize="5" textprefix="$t$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}"/>
</stylesheet>

<framemodel id="framemodel-track">
	<frame size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" pos="{{{Size_TrackImage.X/2}}} {{{-Size_TrackImage.Y/2}}}" halign="center" valign="center" z-index="1">
		<quad id="quad-hitbox" size="{{{Size_Track_Adjusted.X}}} {{{Size_Track_Adjusted.Y*1.5}}}" scriptevents="1" class="quad-base {{{Scroll::C_Class_ActivationZone}}}" rot="10"/>
	</frame>
	<frameinstance id="control-block-list-track-thumbnail" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" z-index="0" data-size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" data-alphamask="{{{Const::C_ImageUrl_Common_Track_Mask}}}" />
	<quad id="quad-gradient" z-index="1" size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" image="{{{Const::C_ImageUrl_Common_Track_Gradient_Full}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"/>
	<frameinstance id="control-block-list-track-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" z-index="2" data-textsize="2" data-textsize-fitlabel-min="0.6" data-textsize-fitlabel-step="0.2" data-maxline="2" data-size="{{{Size_TrackImage.X * 0.8}}} 7" data-opacity="0.7" pos="{{{Pos_TrackNameOneLine.X}}} {{{Pos_TrackNameOneLine.Y}}}" data-filter-profanities="Always" data-valign="center2" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" />
	<frameinstance id="playername-author" modelid="{{{PlayerName::C_Name}}}" pos="{{{Pos_TrackAuthor.X}}} {{{Pos_TrackAuthor.Y}}}" z-index="2" data-size="{{{Size_TrackImage.X * 0.75}}} 5" data-valign="center2" data-opacity="0.7" data-textsize="2" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" data-textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}" data-textcompose="{{{C_Text_AuthorName}}}" />
	<quad id="quad-plus" z-index="2" pos="{{{Pos_PlusIcon.X}}} {{{Pos_PlusIcon.Y}}}" size="22 22" image="{{{Icons::C_Icon_256x256_Plus_Oblique}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}" tts_alttext="{{{TTS_AddTrack}}}"/>
	<quad id="quad-focus" z-index="3" size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" image="{{{Const::C_ImageUrl_Common_Track_Contour}}}" opacity="0." colorize="FFF"/>
</framemodel>

<frame id="frame-global" z-index="{{{Const::C_ZIndex_LocalMultiSettings}}}">
	<!-- Track Browser pop up -->
	<frameinstance modelid="{{{TrackBrowser::C_Name}}}"
		id="frame-track-browser"
		z-index="{{{Const::C_ZIndex_BrowserAPI}}}"
		data-multi-select="1"
		data-show-only-playable="1"
		data-force-show-official-tracks="1"
	/>

	<!-- Track options pop up-->
	<frameinstance
		modelid="{{{PopUpMultiChoice::C_Name}}}"
		id="frame-multichoice"
		z-index="2"
		data-close-after-selection="0"
		data-styles-secondchoice="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_ButtonWarning}}}"
		hidden="1"
	/>

	<!-- Game mode script settings pop up -->
	<frameinstance id="frame-script-settings-pop-up" modelid="{{{ScriptSettingsEditor::C_Name}}}" z-index="5"/>

	<!-- Local mode title (Splitscreen or Hotseat) -->
	<frameinstance
		id="frame-tabs"
		pos="{{{MLHelpers::Skew(-131., 49.7, 10.)}}}"
		modelid="{{{NavigationTabs::C_Name}}}"
		data-halign="left"
		data-tabs="{{{TL::MLEncode(C_TabNames_HotSeat.tojson())}}}"
	/>
	<label id="label-moving-tracks" pos="-50 49" size="200 10" class="text-extra-bold"/>

	<!-- Settings (number of players and game mode) -->
	<frame id="frame-settings" pos="{{{MLHelpers::Skew(-65., 37., 10.)}}}">
		{{{ML_Settings}}}
		<frame id="frame-script-settings-buttons">
			<frameinstance id="button-icon-script-settings" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{Pos_ButtonSettings.X + Size_Background.Y*1.1}}} {{{Pos_ButtonSettings.Y}}}" data-halign="left" data-size="8 8" data-bind="action2" data-hideformouse="1" />
			<frameinstance
				id="button-script-settings"
				pos="{{{Pos_ButtonSettings.X}}} {{{Pos_ButtonSettings.Y}}}"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-size="{{{Size_Background.Y*1.1}}} {{{Size_Background.Y*1.1}}}"
				data-opacity="1."
				data-opacityunfocus="0.8"
				data-image="{{{Icons::C_Icon_128x128_Settings_Key}}}"
				data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-imagefocus="{{{Icons::C_Icon_128x128_Settings_Key}}}"
				data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-halign="left" data-valign="center"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="{{{C_NavGroupName_MouseOnly}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
		</frame>
	</frame>

	<!-- Tracks scroll -->
	<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-tracks" z-index="1" />
	<frame
		pos="{{{Size_TracksScrollWindow.X * -0.52}}} {{{Size_TracksScrollWindow.Y * 0.3}}}"
		data-elements-per-line="{{{ColumnsNb_Tracks}}}"
		data-pager-page-size="{{{TracksPerPage*2}}}"
		data-element-size="{{{Size_Track.X}}} {{{Size_Track.Y}}}"
		data-margin-size="{{{Size_TrackMargin.X}}} {{{Size_TrackMargin.Y}}}"
		data-window-size="{{{Size_TracksScrollWindow.X}}} {{{Size_TracksScrollWindow.Y}}}"
		data-header-height="{{{Size_Header.Y}}}"
		data-footer-height="{{{Size_Footer.Y}}}"
		data-scroll-indicator-x-offset="-4."
		data-scroll-indicator-y-offset="-17."
		data-scroll-indicator-image="{{{Icons::C_Icon_128x128_Arrow_Bottom_Oblique}}}"
		data-scroll-indicator-colorize="FFFFFF"
		data-scroll-indicator-size="12"
		data-scrollbar-xoffset="15."
		data-scrollpadding="17.5"
		data-enable-prescroll="0"
		data-skew="-10."
		data-skew-valign="{{{Scroll::C_SkewVAlign_Center}}}"
		data-nav-inputs="appmenu;action2"
		data-nav-targets="_;_"
		data-nav-group="{{{C_NavGroupName}}}"
		class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
		id="frame-scroll-tracks"
	>
		<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
		{{{ML_Tracks}}}
	</frame>

	<!-- Footer -->
	<label id="label-error" size="150 10" pos="-10 -73" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextError)}}}" class="text-regular" textsize="4" textprefix="$i" halign="center"/>
	<label id="label-info-title" pos="-10 -71" size="110 10" class="text-extra-bold" halign="center" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" opacity="0." valign="bottom"/>
	<label id="label-info-description" pos="-10 -71" size="150 30" class="text-semi-bold" halign="center" textsize="2." opacity="0." valign="top" autonewline="1" maxline="2"/>

	<frameinstance
		id="button-play"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		pos="151 -73"
		z-index="1"
		data-text="{{{ButtonText_Play}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageNextAnimated}}}"
		data-nav-inputs="select;cancel;appmenu;action2;up;left"
		data-nav-targets="_;_;_;_;frame-scroll-tracks;button-back"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance modelid="{{{ButtonIcon::C_Name}}}" id="button-icon-play" pos="151 -73" data-halign="left" data-size="8 8" data-bind="AppMenu" data-hideformouse="1" />

	<frameinstance
		id="button-back"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		pos="-151.5 -73"
		z-index="1"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;appmenu;action2;up;right"
		data-nav-targets="_;_;_;_;frame-scroll-tracks;button-play"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance modelid="{{{ButtonIcon::C_Name}}}" id="button-icon-back" pos="-151.5 -73" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
</frame>
""",
"""
#Include "ColorLib" as CL
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/Trackmania/MainMenu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as Config
#Include "Libs/Nadeo/Trackmania/RBAC.Script.txt" as RBAC

#Const C_Track_NullKey -1

#Const C_HotSeatModeName [0 => "{{{Text_Title_HotSeat}}}"]
#Const C_ModeNames {{{dump(Const::C_ModeNames)}}}
#Const C_ModeNames_ScriptNames {{{dump(Const::C_ModeNames_ScriptNames)}}}

#Const C_TabNames_HotSeat {{{dump(C_TabNames_HotSeat)}}}
#Const C_TabNames_SplitScreen {{{dump(C_TabNames_SplitScreen)}}}

#Const C_Setting_NbPlayers {{{dump(C_Setting_NbPlayers)}}}
#Const C_Setting_GameMode {{{dump(C_Setting_GameMode)}}}
#Const C_Setting_Names {{{dump(C_Setting_Names)}}}
#Const C_SettingShift_Previous {{{dump(C_SettingShift_Previous)}}}
#Const C_SettingShift_Null {{{dump(C_SettingShift_Null)}}}
#Const C_SettingShift_Next {{{dump(C_SettingShift_Next)}}}

#Const C_Buttons_Default_Online ["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "{{{Const::C_NavInput_ClubWidget}}}" => "{{{Const::C_Text_ClubWidget}}}"]
#Const C_Buttons_Default_Offline ["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}"]
#Const C_Buttons_Settings_Online ["Left" => "", "Right" => _("Select value"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "{{{Const::C_NavInput_ClubWidget}}}" => "{{{Const::C_Text_ClubWidget}}}"]
#Const C_Buttons_Settings_Offline ["Left" => "", "Right" => _("Select value"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}"]
#Const C_Buttons_NavLocked ["A" => _("Select")]
#Const C_Buttons_MovingTracks_Online ["A" => _("Swap"), "B" => _("Cancel"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "{{{Const::C_NavInput_ClubWidget}}}" => "{{{Const::C_Text_ClubWidget}}}"]
#Const C_Buttons_MovingTracks_Offline ["A" => _("Swap"), "B" => _("Cancel"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}"]

#Const C_PopUpLeaveIndex 0
#Const C_PopUpTrackOptionsIndex 1

//L16N Title of the pop-up asking a confirmation to leave the page
#Const C_LeavePopUp_Title _("Leave")
//L16N The player need to confirm they want leave the page
#Const C_LeavePopUp_Description1 _("Are you sure you want to leave this page?")
//L16N We inform the players that they will lose their settings and track list when leaving the page
#Const C_LeavePopUp_Description2 _("You will lose your track list and settings")
#Const C_LeavePopUp_Choices [0 => _("Stay"), 1 => _("Leave")]
#Const C_LeavePopUp_ChoiceIndex_Stay 0
#Const C_LeavePopUp_ChoiceIndex_Leave 1

#Const C_TrackPopUp_Choices [
	//L16N [LocalMultiSettings] Action to move a track within the tracks list. The user will be able to switch place with another track.
	0 => _("Move"),
	//L16N [LocalMultiSettings] Action to remove a track within the tracks list. The track will be deleted from the list.
	1 => _("Remove")
]
#Const C_TrackPopUp_ChoiceIndex_Move 0
#Const C_TrackPopUp_ChoiceIndex_Remove 1

#Struct K_Controls {
	CMlFrame Button_Play;
	CMlFrame Frame_Tabs;
	CMlFrame Frame_Settings;
	CMlFrame Frame_ScriptSettings;
	CMlFrame Button_ScriptSettings;
	CMlLabel Label_SettingPlayersNb;
	CMlLabel Label_SettingGameMode;
	CMlFrame Button_PreviousGameMode;
	CMlFrame Button_NextGameMode;
	CMlFrame Frame_Scroll_Tracks;
	CMlLabel Label_ErrorMessage;
	CMlFrame Frame_MultiChoice;
	CMlLabel Label_MovingTracks;
	CMlLabel Label_InfoDescription;
	CMlLabel Label_InfoTitle;
}

#Struct K_State {
	Integer LocalMultiType;
	Integer NbPlayers;
	Integer[] PlayersNbPossibilities;
	Text[] ModeNames;
	Integer[] ModeNamesIndexes;
	Integer ModeIndex;
	Text ModeScriptName;
	{{{ClubStruct::P}}}K_ScriptSetting[] ScriptSettings;
	Text ScriptSettingsXML;
	Boolean IsMovingTracks;
	CMlFrame LastSelectedTrack;
	Integer SelectedTrackKey;
	{{{CampaignStruct::P}}}K_Map[] MapList;
}
""",
"""
declare Ident G_TTSContextIdent_Setting;

Void Private_TTSContextUpdate(CMlFrame _Frame_Setting, Boolean _IsSettingUpdated) {
	if ({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}") == _Frame_Setting) {
		if (G_TTSContextIdent_Setting == NullId) G_TTSContextIdent_Setting = ParentApp.TTS_Context_Enter({{{TextToSpeech::C_ContextLevel_Setting}}});
		ParentApp.TTS_Context_Change(G_TTSContextIdent_Setting, _Frame_Setting.GetFirstChild("label-setting-name") as CMlLabel);
		(_Frame_Setting.GetFirstChild("label-setting-value") as CMlLabel).TTS_Focus();
		if (!_IsSettingUpdated) {
			ParentApp.TTS_Context_Read({{{TextToSpeech::C_ContextLevel_Setting}}});
		}
	} else {
		G_TTSContextIdent_Setting = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Setting);
	}
}

// Update the text and the visibility of the information paragraph
Void UpdateInfoParagraph(K_Controls _Controls, Text _Title, Text _Description, Boolean _IsFocused) {
	if (_Controls.Label_ErrorMessage.Value == "") {
		AnimMgr.Flush(_Controls.Label_InfoTitle);
		AnimMgr.Flush(_Controls.Label_InfoDescription);
		if (_IsFocused) {
			_Controls.Label_InfoTitle.SetText(_Title);
			_Controls.Label_InfoDescription.SetText(_Description);
			AnimMgr.Add(_Controls.Label_InfoTitle, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_Controls.Label_InfoDescription, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(_Controls.Label_InfoTitle, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_Controls.Label_InfoDescription, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}
}

Void UpdateErrorMessage(Text _Message, K_Controls _Controls) {
	if (_Message != "") UpdateInfoParagraph(_Controls, "", "", False);
	_Controls.Label_ErrorMessage.Value = _Message;
	Tools::FitLabelValue(_Controls.Label_ErrorMessage, 4., 2., .5);
}

Void ShowTrackLoading(CMlFrame _Frame_Track) {
	declare CMlFrame ControlBlockList_TrackName <=> (_Frame_Track.GetFirstChild("control-block-list-track-name") as CMlFrame);
	declare CMlFrame PlayerName_Author <=> (_Frame_Track.GetFirstChild("playername-author") as CMlFrame);
	declare CMlFrame ControlBlockList_TrackThumbnail <=> (_Frame_Track.GetFirstChild("control-block-list-track-thumbnail") as CMlFrame);
	declare CMlQuad Quad_Plus = _Frame_Track.GetFirstChild("quad-plus") as CMlQuad;

	_Frame_Track.Show();
	Quad_Plus.Hide();
	{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlBlockList_TrackName,"", "{{{Text_Retrieving}}}");
	PlayerName_Author.Visible = False;
	{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, ControlBlockList_TrackThumbnail, "", "");
	ControlBlockList_TrackThumbnail.Visible = False;
}

// Show "Add Tracks" button in tracks scroll
Void ShowPlus(CMlFrame _Frame_Track) {
	declare CMlFrame ControlBlockList_TrackName <=> (_Frame_Track.GetFirstChild("control-block-list-track-name") as CMlFrame);
	declare CMlFrame PlayerName_Author <=> (_Frame_Track.GetFirstChild("playername-author") as CMlFrame);
	declare CMlFrame ControlBlockList_TrackThumbnail <=> (_Frame_Track.GetFirstChild("control-block-list-track-thumbnail") as CMlFrame);
	declare CMlQuad Quad_Gradient = _Frame_Track.GetFirstChild("quad-gradient") as CMlQuad;
	declare CMlQuad Quad_Plus = _Frame_Track.GetFirstChild("quad-plus") as CMlQuad;

	_Frame_Track.Show();
	{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlBlockList_TrackName,"", "");
	PlayerName_Author.Visible = False;
	AnimMgr.Flush(Quad_Gradient);
	Quad_Gradient.Opacity = 0.;
	{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, ControlBlockList_TrackThumbnail, "", "{{{Const::C_ImageUrl_TrackBrowser_Track}}}", False);
	{{{ControlBlockList::P}}}SetColorize(This, ControlBlockList_TrackThumbnail, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_BGDark)}}}, False);
	{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackThumbnail, 0.8, False);
	{{{ControlBlockList::P}}}Redraw(This, ControlBlockList_TrackThumbnail);
	ControlBlockList_TrackThumbnail.Visible = True;
	Quad_Plus.Show();
}

Void ShowTrack(CMlFrame _Frame_Track, {{{CampaignStruct::P}}}K_Map _TrackInfo, Integer _SelectedTrackKey) {
	declare CMlFrame ControlBlockList_TrackName <=> (_Frame_Track.GetFirstChild("control-block-list-track-name") as CMlFrame);
	declare CMlFrame PlayerName_Author <=> (_Frame_Track.GetFirstChild("playername-author") as CMlFrame);
	declare CMlFrame ControlBlockList_TrackThumbnail <=> (_Frame_Track.GetFirstChild("control-block-list-track-thumbnail") as CMlFrame);
	declare CMlQuad Quad_Gradient = _Frame_Track.GetFirstChild("quad-gradient") as CMlQuad;
	declare CMlQuad Button_Checkbox = _Frame_Track.GetFirstChild("button-checkbox-track") as CMlQuad;
	declare CMlQuad Quad_Plus = _Frame_Track.GetFirstChild("quad-plus") as CMlQuad;
	declare CMlQuad Quad_Focus = _Frame_Track.GetFirstChild("quad-focus") as CMlQuad;

	declare Integer TrackKey for _Frame_Track;

	_Frame_Track.Show();
	Quad_Plus.Hide();
	{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlBlockList_TrackName, _TrackInfo.AuthorLogin, Tools::FormatValue(_TrackInfo.Name), False);
	if ({{{ControlBlockList::P}}}GetValueLineCount(This, ControlBlockList_TrackName) >= 2) {
		ControlBlockList_TrackName.RelativePosition_V3 = {{{Pos_TrackNameTwoLines}}};
	} else {
		ControlBlockList_TrackName.RelativePosition_V3 = {{{Pos_TrackNameOneLine}}};
	}
	if (_TrackInfo.AuthorDisplayName == "") {
		ControlBlockList_TrackName.RelativePosition_V3 = {{{Pos_TrackAuthor}}};
		{{{ControlBlockList::P}}}SetTTSAltText(This, ControlBlockList_TrackName, "", "", False);
		PlayerName_Author.Visible = False;
	} else {
		{{{ControlBlockList::P}}}SetTTSAltText(
			This,
			ControlBlockList_TrackName,
			TL::Compose("%2 "^TL::GetTranslatedText("{{{Text_AuthorName}}}"), _TrackInfo.AuthorDisplayName, {{{ControlBlockList::P}}}GetTextValue(ControlBlockList_TrackName)),
			TL::Compose("%2 "^TL::GetTranslatedText("{{{Text_AuthorName}}}"), _TrackInfo.AuthorDisplayName, {{{ControlBlockList::P}}}C_DefaultTextValueBlocked),
			False
		);
		{{{PlayerName::P}}}SetAccountId(This, PlayerName_Author, _TrackInfo.AuthorLogin, False);
		PlayerName_Author.Visible = True;
	}
	{{{ControlBlockList::P}}}Redraw(This, ControlBlockList_TrackName);

	{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, ControlBlockList_TrackThumbnail, _TrackInfo.AuthorLogin, _TrackInfo.ThumbnailUrl, False);
	{{{ControlBlockList::P}}}SetColorize(This, ControlBlockList_TrackThumbnail, {{{ControlBlockList::P}}}C_DefaultColorize, False);
	{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackThumbnail, 1., False);
	{{{ControlBlockList::P}}}Redraw(This, ControlBlockList_TrackThumbnail);
	ControlBlockList_TrackThumbnail.Visible = True;

	AnimMgr.Flush(Quad_Focus);
	AnimMgr.Flush(Quad_Gradient);
	if (_SelectedTrackKey != C_Track_NullKey && _SelectedTrackKey == TrackKey) {
		Quad_Focus.Colorize = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
		{{{ControlBlockList::P}}}SetTextColor(This, ControlBlockList_TrackName, {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}}, False);
		{{{PlayerName::P}}}SetTextColor(This, PlayerName_Author, Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne));
		{{{PlayerName::P}}}SetOpacity(This, PlayerName_Author, 1., 250);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackName, 1., 250, False);
		{{{ControlBlockList::P}}}Redraw(This, ControlBlockList_TrackName);
		AnimMgr.Add(Quad_Focus, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(Quad_Focus, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Gradient, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		Quad_Focus.Colorize = <1., 1., 1.>;
		{{{ControlBlockList::P}}}SetTextColor(This, ControlBlockList_TrackName, {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight))}}});
		{{{PlayerName::P}}}SetTextColor(This, PlayerName_Author, Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight));
	}
}

Void HideTrack(CMlFrame _Frame_Track) {
	_Frame_Track.Hide();
}

Void FocusTrack(CMlFrame _Frame_Track, Boolean _IsFocus, Integer _SelectedTrackKey) {
	declare CMlQuad Quad_Focus = _Frame_Track.GetFirstChild("quad-focus") as CMlQuad;
	declare CMlQuad Quad_Gradient = _Frame_Track.GetFirstChild("quad-gradient") as CMlQuad;
	declare CMlFrame ControlBlockList_TrackName <=> (_Frame_Track.GetFirstChild("control-block-list-track-name") as CMlFrame);
	declare CMlFrame PlayerName_Author <=> (_Frame_Track.GetFirstChild("playername-author") as CMlFrame);
	declare CMlQuad Quad_Plus = _Frame_Track.GetFirstChild("quad-plus") as CMlQuad;
	declare CMlFrame ControlBlockList_TrackThumbnail <=> (_Frame_Track.GetFirstChild("control-block-list-track-thumbnail") as CMlFrame);

	declare Integer TrackKey for _Frame_Track;

	AnimMgr.Flush(Quad_Gradient);
	AnimMgr.Flush(Quad_Focus);
	if (_IsFocus) {
		declare Real GradientOpacity = 0.6;
		if (Quad_Plus.Visible) {
			GradientOpacity = 0.;
			AnimMgr.Add(Quad_Plus, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			Quad_Plus.TTS_Focus();
		} else {
			{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackName, 1., 250);
			{{{PlayerName::P}}}SetOpacity(This, PlayerName_Author, 1., 250);
			{{{ControlBlockList::P}}}TTS_Focus(ControlBlockList_TrackName);
		}
		AnimMgr.Add(Quad_Gradient, "<anim opacity=\""^GradientOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackThumbnail, 1., 250);
		AnimMgr.Add(Quad_Focus, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		declare Real FocusOpacity = 0.;
		declare Real GradientOpacity = 1.;
		declare Real ImgOpacity = 1.;
		declare Real LabelOpacity = 0.7;

		{{{ControlBlockList::P}}}TTS_Unfocus(ControlBlockList_TrackName);
		if (Quad_Plus.Visible) {
			GradientOpacity = 0.;
			ImgOpacity = 0.8;
			AnimMgr.Add(Quad_Plus, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			Quad_Plus.TTS_Unfocus();
		} else if (_SelectedTrackKey != C_Track_NullKey && _SelectedTrackKey == TrackKey) {
			FocusOpacity = 1.;
			LabelOpacity = 1.;
			GradientOpacity = 0.6;
		}
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackThumbnail, ImgOpacity, 250);
		AnimMgr.Add(Quad_Gradient, "<anim opacity=\""^GradientOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Focus, "<anim opacity=\""^FocusOpacity^"\"  />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackName, LabelOpacity, 250);
		{{{PlayerName::P}}}SetOpacity(This, PlayerName_Author, LabelOpacity, 250);
	}
}

// Get the setting description (depending on the setting type and value)
Text GetDescription(K_State _State, Integer _SettingId) {
	declare Text Description = "";
	switch (_SettingId) {
		case C_Setting_NbPlayers: {
			Description = "{{{Text_PlayersNb_Description}}}";
		}
		case C_Setting_GameMode: {
			if (_State.LocalMultiType == {{{Const::C_LocalMultiType_HotSeat}}}) {
				Description = "{{{Text_HotSeat_Description}}}";
			} else {
				switch (_State.ModeIndex) {
					case {{{Const::C_ModeIndex_TimeAttack}}}: {
						Description = "{{{Text_TimeAttack_Description}}}";
					}
					case {{{Const::C_ModeIndex_Rounds}}}: {
						Description = "{{{Text_Rounds_Description}}}";
					}
					case {{{Const::C_ModeIndex_Laps}}}: {
						Description = "{{{Text_Laps_Description}}}";
					}
					case {{{Const::C_ModeIndex_Cup}}}-1: { //@HACK remove this when KO mode fixed in splitscreen (see /trackmania-next/tmnext/-/issues/1081)
						Description = "{{{Text_Cup_Description}}}";
					}
					/*
					case {{{Const::C_ModeIndex_Teams}}}-1: { //@HACK remove this when KO mode fixed in splitscreen (see /trackmania-next/tmnext/-/issues/1081)
						Description = "{{{Text_Teams_Description}}}";
					}
					 */
					case {{{Const::C_ModeIndex_RoyalTimeAttack}}}-2: { //@HACK remove this when KO and Teams mode fixed in splitscreen (see /trackmania-next/tmnext/-/issues/1081 and /trackmania-next/tmnext/-/issues/5219)
						Description = "{{{Text_RoyalTimeAttack_Description}}}";
					}
				}
			}
		}
	}
	return Description;
}

Void FocusSetting(K_State _State, K_Controls _Controls, CMlFrame _Frame_Setting, Boolean _IsFocused, Boolean _IsMouse) {
	declare Real OpacityFocused = 1.;

	/* Update setting's line focus */
	if (_IsFocused) {
		foreach (Control in _Frame_Setting.Controls) {
			AnimMgr.Flush(Control);
			if ({{{ExpendableAsset::P}}}IsAsset(Control)) {{{ExpendableAsset::P}}}SetOpacity(This, Control as CMlFrame, OpacityFocused);
			if ({{{Button::P}}}IsButton(Control) && !_IsMouse) {{{Button::P}}}Focus(This, Control as CMlFrame);
			switch (Control.ControlId) {
				case "quad-activation-setting": Control.ZIndex = -1.;
				case "label-setting-value": AnimMgr.Add(Control, "<anim opacity=\"1.\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				default: AnimMgr.Add(Control, "<anim opacity=\"1.\" textcolor=\"{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	} else {
		foreach (Control in _Frame_Setting.Controls) {
			AnimMgr.Flush(Control);
			if ({{{ExpendableAsset::P}}}IsAsset(Control)) {{{ExpendableAsset::P}}}SetOpacity(This, Control as CMlFrame, 0.8);
			if ({{{Button::P}}}IsButton(Control)) {{{Button::P}}}Unfocus(This, Control as CMlFrame);
			switch (Control.ControlId) {
				case "quad-activation-setting": Control.ZIndex = 10.;
				default: AnimMgr.Add(Control, "<anim opacity=\"0.6\" textcolor=\"{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	}

	/* Update setting description*/
	declare Integer Setting = TL::ToInteger(_Frame_Setting.DataAttributeGet("setting"));
	UpdateInfoParagraph(_Controls, C_Setting_Names.get(Setting, ""), GetDescription(_State, Setting), _IsFocused);

	/* Text to speech context */
	Private_TTSContextUpdate(_Frame_Setting, False);
}

// Update controller hints at the bottom of the screen
Void UpdateControllerInfo(K_Controls _Controls, Boolean _IsMovingTracks) {
	if (!{{{Navigation::P}}}GroupIsEnabled(This, "{{{C_NavGroupName}}}")) {
		ControllerInfo::SetButtons(C_Buttons_NavLocked);
	} else {
		declare FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
		if (FocusedControl != Null && FocusedControl.HasClass("{{{C_Class_Setting}}}")) {
			if ({{{UserStore::P}}}IsOfflineMode()) ControllerInfo::SetButtons(C_Buttons_Settings_Offline);
			else ControllerInfo::SetButtons(C_Buttons_Settings_Online);
		} else if (_IsMovingTracks) {
			if ({{{UserStore::P}}}IsOfflineMode()) ControllerInfo::SetButtons(C_Buttons_MovingTracks_Offline);
			else ControllerInfo::SetButtons(C_Buttons_MovingTracks_Online);
		} else {
			if ({{{UserStore::P}}}IsOfflineMode()) ControllerInfo::SetButtons(C_Buttons_Default_Offline);
			else ControllerInfo::SetButtons(C_Buttons_Default_Online);
		}
	}
}

Void Focus(K_State _State, CMlControl _From, CMlControl _To, K_Controls _Controls, Boolean _IsMouse) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}  else if ({{{Scroll::P}}}IsScroll(_From)) {
			{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
		} else if (_From.HasClass("{{{C_Class_Setting}}}")) {
			FocusSetting(_State, _Controls, _From as CMlFrame, False, _IsMouse);
			UpdateControllerInfo(_Controls, _State.IsMovingTracks);
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Scroll::P}}}IsScroll(_To)) {
			{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
		} else if (_To.HasClass("{{{C_Class_Setting}}}")) {
			FocusSetting(_State, _Controls, _To as CMlFrame, True, _IsMouse);
			UpdateControllerInfo(_Controls, _State.IsMovingTracks);
		}
	}
}

Void Focus(K_State _State, CMlControl _From, CMlControl _To, K_Controls _Controls) {
	Focus(_State, _From, _To, _Controls, False);
}

// Check if all tracks types correspond to the selected game mode (only for Splitscreen)
Boolean TrackTypeCorrespondingToGameMode(K_State _State) {
	declare Text[] MapTypes;
	foreach (Map in _State.MapList) {
		MapTypes.add(Map.Type);
	}

	if (TitleControl::IsRoyalScript(_State.ModeScriptName)) {
		return MapTypes.containsonly(["{{{Const::C_MapType_Royal}}}"]);
	}
	return MapTypes.containsonly(["{{{Const::C_MapType_Race}}}"]);
}

// Check track types and display according message (only for Splitscreen)
Void CheckTrackTypes(K_State _State, K_Controls _Controls) {
	if (!TrackTypeCorrespondingToGameMode(_State)) UpdateErrorMessage("{{{Text_MapType}}}", _Controls);
	else UpdateErrorMessage("", _Controls);
}

// Update the given setting
K_State UpdateSetting(K_State _State, K_Controls _Controls, Integer _SettingId, Integer _ShiftNb) {
	declare K_State State = _State;
	declare CMlFrame Frame_Setting = (_Controls.Frame_Settings.GetFirstChild("frame-setting-"^_SettingId) as CMlFrame);

	if (_Controls.Frame_Settings.Visible) {
		declare CMlLabel Label_Value = (Frame_Setting.GetFirstChild("label-setting-value") as CMlLabel);

		switch (_SettingId) {
			case C_Setting_NbPlayers: {
				declare Integer NbIndex = ML::Max(0, State.PlayersNbPossibilities.keyof(State.NbPlayers));
				if (_ShiftNb == C_SettingShift_Next) {
					NbIndex += 1;
				} else {
					NbIndex -= 1;
				}
				if (NbIndex < 0) {
					State.NbPlayers = State.PlayersNbPossibilities[State.PlayersNbPossibilities.count - 1];
				} else {
					State.NbPlayers = State.PlayersNbPossibilities[NbIndex % State.PlayersNbPossibilities.count];
				}
				Label_Value.SetText(TL::ToText(State.NbPlayers));
			}
			case C_Setting_GameMode: {
				if (State.ModeNames.count > 1) {
					declare Integer ModeIndex = State.ModeIndex + _ShiftNb;
					if (ModeIndex >= State.ModeNames.count) ModeIndex = 0;
					else if (ModeIndex < 0) ModeIndex = State.ModeNames.count-1;

					State.ModeIndex = ModeIndex;
					State.ModeScriptName = C_ModeNames_ScriptNames[State.ModeNames[State.ModeIndex]];
					State.ScriptSettings = {{{ScriptSettingsEditor::P}}}C_DefaultScriptSettings[State.ModeIndex];
					Label_Value.SetText(State.ModeNames[State.ModeIndex]);
					CheckTrackTypes(State, _Controls);
					UpdateInfoParagraph(_Controls, C_Setting_Names.get(_SettingId, ""), GetDescription(State, _SettingId), True);
				}
			}
		}

		Private_TTSContextUpdate(Frame_Setting, True);
	}

	/* Lock the setting if hidden */
	{{{Navigation::P}}}Lock(Frame_Setting, !_Controls.Frame_Settings.Visible);

	return State;
}

// Lock page navigation and update controller infos
Void LockNavigation(K_Controls _Controls, Boolean _Lock, Boolean _IsMovingTracks) {
	{{{Scroll::P}}}LockNavigation(_Controls.Frame_Scroll_Tracks, _Lock);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !_Lock);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName_MouseOnly}}}", !_Lock);
	{{{Router::P}}}LockOverlay(This, "{{{RoutePaths::C_Path_OverlayName_ProfileWidget}}}", _Lock);
	{{{Router::P}}}LockOverlay(This, "{{{RoutePaths::C_Path_OverlayName_ClubWidget}}}", _Lock);
	UpdateControllerInfo(_Controls, _IsMovingTracks);
}

Void LockNavigation(K_Controls _Controls, Boolean _Lock) {
	LockNavigation(_Controls, _Lock, False);
}

// Display the Track Browser pop-up
Void DisplayBrowser(Boolean _Visible, K_Controls _Controls) {
	// Block UGC tracks from starter users (see trackmania-next/tmnext/-/issues/5671)
	{{{TrackBrowser::P}}}ShowOnlyUserTracks(This, {{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CanSubscribeToStandard));
	{{{TrackBrowser::P}}}Display(This, _Visible, False);
	LockNavigation(_Controls, _Visible);
}

// Display the script settings editor pop-up
Void ShowScriptSettingsEditor(K_State _State, K_Controls _Controls) {
	if (_State.ModeNamesIndexes.existskey(_State.ModeIndex)) {
		{{{ScriptSettingsEditor::P}}}Show(_State.ModeNamesIndexes[_State.ModeIndex], _State.ScriptSettings);
		LockNavigation(_Controls, True);
	}
}

K_State SetIsMovingTracks(K_State _State, K_Controls _Controls, Boolean _IsMoving, Text _TrackName, Boolean _UpdateControllerInfo) {
	declare K_State State = _State;

	State.IsMovingTracks = _IsMoving;
	if (State.IsMovingTracks) {
		_Controls.Label_MovingTracks.Value = TL::Compose("{{{Text_MoveTracksExplanation}}}", "$<"^_TrackName^"$>");
	} else {
		_Controls.Label_MovingTracks.Value = "";
		State.SelectedTrackKey = C_Track_NullKey;
		if (State.LastSelectedTrack != Null) FocusTrack(State.LastSelectedTrack, False, C_Track_NullKey);
		State.LastSelectedTrack = Null;
	}

	if (_UpdateControllerInfo) UpdateControllerInfo(_Controls, State.IsMovingTracks);
	{{{Scroll::P}}}SetElementsTotal(This, _Controls.Frame_Scroll_Tracks, _State.MapList.count + 1);

	return State;
}
K_State SetIsMovingTracks(K_State _State, K_Controls _Controls, Boolean _IsMoving, Text _TrackName) {
	return SetIsMovingTracks(_State, _Controls, _IsMoving, _TrackName, True);
}

Void OpenTrackOptionsPopUp(K_Controls _Controls, Text _TrackName) {
	{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.Frame_MultiChoice, _TrackName, False);
	{{{PopUpMultiChoice::P}}}ResetDescription(This, _Controls.Frame_MultiChoice,False);
	{{{PopUpMultiChoice::P}}}SetChoices(This, _Controls.Frame_MultiChoice, C_TrackPopUp_Choices, False);
	{{{PopUpMultiChoice::P}}}SetForceScrollView(This, _Controls.Frame_MultiChoice, True, False);
	{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.Frame_MultiChoice, False);
	declare Integer PopUpType for _Controls.Frame_MultiChoice;
	PopUpType = C_PopUpTrackOptionsIndex;
	{{{PopUpMultiChoice::P}}}Open(This, _Controls.Frame_MultiChoice);
}

Void OpenLeaveConfirmationPopUp(K_Controls _Controls) {
	{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.Frame_MultiChoice, C_LeavePopUp_Title, False);
	{{{PopUpMultiChoice::P}}}SetDescription(This,
		_Controls.Frame_MultiChoice,
		[
			{{{PopUpMultiChoice::P}}}CreateDescriptionPart(C_LeavePopUp_Description1, <130., 15.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}", "$t$i", <1., 1., 1.>, False),
			{{{PopUpMultiChoice::P}}}CreateDescriptionPart(C_LeavePopUp_Description2, <130., 10.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$t$i",  {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}}, False)
		],
		False
	);
	{{{PopUpMultiChoice::P}}}SetChoices(This, _Controls.Frame_MultiChoice, C_LeavePopUp_Choices, False);
	{{{PopUpMultiChoice::P}}}SetForceScrollView(This, _Controls.Frame_MultiChoice, False, False);
	{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.Frame_MultiChoice, False);
	declare Integer PopUpType for _Controls.Frame_MultiChoice;
	PopUpType = C_PopUpLeaveIndex;
	{{{PopUpMultiChoice::P}}}Open(This, _Controls.Frame_MultiChoice);
}

K_State Cancel(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;
	if (State.IsMovingTracks) {
		State = SetIsMovingTracks(State, _Controls, False, "");
	} else {
		if (_State.MapList.count == 0) {
			{{{Router::P}}}PushParent(This);
		} else {
			OpenLeaveConfirmationPopUp(_Controls);
		}
	}
	return State;
}

Void Play(K_State _State, K_Controls _Controls) {
	declare Text[] MapUrls;
	foreach (Map in _State.MapList) {
		if (Map.LocalFileName != "") {
			MapUrls.add(Map.LocalFileName);
		} else if (Map.DownloadUrl != "") {
			MapUrls.add(Map.DownloadUrl);
		}
	}
	if (MapUrls.count > 0 && _State.NbPlayers > 0) {
		switch (_State.LocalMultiType) {
			case {{{Const::C_LocalMultiType_HotSeat}}}: {
				SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", ["{{{Text_Title_HotSeat}}}"]);
				declare Settings = "<script_settings><setting name=\"S_PlayersNb\" value=\"" ^ _State.NbPlayers ^ "\" type=\"integer\"/> </script_settings>";
				TitleControl::PlayMapList(TitleControl, MapUrls,"TrackMania/TM_HotSeat_Local", Settings);
				UpdateControllerInfo(_Controls, _State.IsMovingTracks);
			}
			case {{{Const::C_LocalMultiType_SplitScreen}}}: {
				if (TrackTypeCorrespondingToGameMode(_State)) {
					if (_State.ModeScriptName != "") {
						declare CTitleControl::ESplitScreenLayout SplitScreenLayout for System;
						if (_State.NbPlayers == 2) SplitScreenLayout = CTitleControl::ESplitScreenLayout::Vertical;
						else if (_State.NbPlayers == 4)	SplitScreenLayout = CTitleControl::ESplitScreenLayout::Four;
						SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", ["{{{Text_Title_SplitScreen}}}"]);
						TitleControl::PlaySplitScreen(TitleControl, SplitScreenLayout, MapUrls, _State.ModeScriptName, _State.ScriptSettingsXML);
						UpdateControllerInfo(_Controls, _State.IsMovingTracks);
					}
				} else {
					UpdateErrorMessage("{{{Text_MapType}}}", _Controls);
				}
			}
		}
	}	else {
		UpdateErrorMessage(_("You must select at least one track to play"), _Controls);
	}
}

K_State Select(K_State _State, CMlControl _Control, K_Controls _Controls) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;

	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-back": {
			State = Cancel(State, _Controls);
		}
		case "button-script-settings": {
			if (State.IsMovingTracks) State = SetIsMovingTracks(State, _Controls, False, "");
			ShowScriptSettingsEditor(State, _Controls);
		}
		case "button-play" : {
			if (State.IsMovingTracks) State = SetIsMovingTracks(State, _Controls, False, "");
			Play(State, _Controls);
		}
	}
	return State;
}

// Update available mode names to display in the game mode setting
K_State UpdateAvailableModeNames(K_State _State) {
	declare K_State State = _State;
	declare Text[Integer] ModeNames = [];

	if (State.LocalMultiType == {{{Const::C_LocalMultiType_HotSeat}}}) {
		ModeNames = C_HotSeatModeName;
	} else if (State.LocalMultiType == {{{Const::C_LocalMultiType_SplitScreen}}}) {
		ModeNames = C_ModeNames;
		//@HACK remove this when KO mode fixed in splitscreen (see /trackmania-next/tmnext/-/issues/1081 and /trackmania-next/tmnext/-/issues/5219)
		ModeNames.removekey({{{Const::C_ModeIndex_Knockout}}});
		ModeNames.removekey({{{Const::C_ModeIndex_Teams}}});
	}

	State.ModeNames = [];
	State.ModeNamesIndexes = [];
	foreach (ModeIndex => ModeName in ModeNames) {
		State.ModeNames.add(ModeName);
		State.ModeNamesIndexes.add(ModeIndex);
	}

	return State;
}

K_State InitLocalMultiType(K_State _State, K_Controls _Controls, CMlFrame _Frame_Global) {
	declare K_State State = _State;

	State = UpdateAvailableModeNames(State);
	declare Text[Integer] TabNames = [];
	switch (_State.LocalMultiType) {
		case {{{Const::C_LocalMultiType_HotSeat}}}: {
			State.PlayersNbPossibilities = {{{HotSeatPlayersNb}}};
			TabNames = C_TabNames_HotSeat;
			_Controls.Frame_ScriptSettings.Hide();
			_Controls.Button_PreviousGameMode.Hide();
			_Controls.Button_NextGameMode.Hide();
			State.ModeIndex = 0;
		}
		case {{{Const::C_LocalMultiType_SplitScreen}}}: {
			TabNames = C_TabNames_SplitScreen;
			_Controls.Frame_ScriptSettings.Show();
			_Controls.Button_PreviousGameMode.Show();
			_Controls.Button_NextGameMode.Show();
			State.ModeIndex = {{{Const::C_ModeIndex_TimeAttack}}};
			State.ModeScriptName = C_ModeNames_ScriptNames[State.ModeNames[State.ModeIndex]];
			State.ScriptSettings = {{{ScriptSettingsEditor::P}}}C_DefaultScriptSettings[State.ModeIndex];
			State.ScriptSettingsXML = "<script_settings><setting name=\"S_IsSplitScreen\" value=\"True\" type=\"boolean\"/> </script_settings>";
			State.PlayersNbPossibilities = {{{SplitScreenPlayersNb}}};
		}
	}
	_Controls.Label_SettingGameMode.SetText(State.ModeNames[State.ModeIndex]);
	{{{Navigation::P}}}Lock(_Controls.Button_PreviousGameMode, !_Controls.Button_PreviousGameMode.Visible);
	{{{Navigation::P}}}Lock(_Controls.Button_NextGameMode, !_Controls.Button_NextGameMode.Visible);
	{{{Navigation::P}}}Lock(_Controls.Button_ScriptSettings, !_Controls.Frame_ScriptSettings.Visible);
	{{{NavigationTabs::P}}}SetTabs(This, _Controls.Frame_Tabs, TabNames, False);
	{{{NavigationTabs::P}}}RedrawNavigationTabs(This, _Controls.Frame_Tabs, False);
	_Controls.Label_MovingTracks.RelativePosition_V3.X = _Controls.Frame_Tabs.RelativePosition_V3.X + {{{NavigationTabs::P}}}GetWidth(_Controls.Frame_Tabs) + 3.;
	State.NbPlayers = State.PlayersNbPossibilities[0];
	_Controls.Label_SettingPlayersNb.Value = TL::ToText(State.NbPlayers);
	State.MapList.clear();
	return State;
}

***MainInit***
***
declare K_State State;
declare K_Controls Controls;
declare CMlFrame Frame_Global;
declare CMlFrame Frame_SettingPlayersNb;
declare CMlFrame Frame_SettingGameMode;
declare CMlFrame Button_Back;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_SettingPlayersNb <=> (Frame_Global.GetFirstChild("frame-setting-"^C_Setting_NbPlayers) as CMlFrame);
Frame_SettingGameMode <=> (Frame_Global.GetFirstChild("frame-setting-"^C_Setting_GameMode) as CMlFrame);
Button_Back <=> (Frame_Global.GetFirstChild("button-back") as CMlFrame);

State = K_State {
	LocalMultiType = -1,
	NbPlayers = 2,
	PlayersNbPossibilities = [],
	ModeNames = [],
	ModeIndex = -1,
	ModeScriptName = "",
	ScriptSettings = [],
	ScriptSettingsXML = "",
	IsMovingTracks = False,
	LastSelectedTrack = Null,
	SelectedTrackKey = C_Track_NullKey,
	MapList = []
};

Controls = K_Controls {
	Button_Play = (Frame_Global.GetFirstChild("button-play") as CMlFrame),
	Frame_Tabs = (Frame_Global.GetFirstChild("frame-tabs") as CMlFrame),
	Frame_Settings = (Frame_Global.GetFirstChild("frame-settings") as CMlFrame),
	Frame_ScriptSettings = (Frame_Global.GetFirstChild("frame-script-settings-buttons") as CMlFrame),
	Button_ScriptSettings = (Frame_Global.GetFirstChild("button-script-settings") as CMlFrame),
	Label_SettingPlayersNb = (Frame_SettingPlayersNb.GetFirstChild("label-setting-value") as CMlLabel),
	Button_PreviousGameMode = (Frame_SettingGameMode.GetFirstChild("button-previous-"^C_Setting_GameMode) as CMlFrame),
	Button_NextGameMode = (Frame_SettingGameMode.GetFirstChild("button-next-"^C_Setting_GameMode) as CMlFrame),
	Label_SettingGameMode = (Frame_SettingGameMode.GetFirstChild("label-setting-value") as CMlLabel),
	Frame_Scroll_Tracks = (Frame_Global.GetFirstChild("frame-scroll-tracks") as CMlFrame),
	Label_ErrorMessage =  (Frame_Global.GetFirstChild("label-error") as CMlLabel),
	Frame_MultiChoice = (Frame_Global.GetFirstChild("frame-multichoice") as CMlFrame),
	Label_MovingTracks = (Frame_Global.GetFirstChild("label-moving-tracks") as CMlLabel),
	Label_InfoDescription = (Frame_Global.GetFirstChild("label-info-description") as CMlLabel),
	Label_InfoTitle = (Frame_Global.GetFirstChild("label-info-title") as CMlLabel)
};

{{{ScriptSettingsEditor::P}}}Hide();
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_LocalMultiSettings}}}")) {

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.To != Null && Event.To.HasClass("{{{C_Class_Setting}}}") && Event.To.Id == Event.From.Id) {
						switch (Event.Input) {
							case CMlScriptEvent::EMenuNavAction::Cancel: State = Cancel(State, Controls);
							case CMlScriptEvent::EMenuNavAction::Select: State = UpdateSetting(State, Controls, TL::ToInteger((Event.To as CMlFrame).DataAttributeGet("setting")), C_SettingShift_Next);
							case CMlScriptEvent::EMenuNavAction::Left: State = UpdateSetting(State, Controls, TL::ToInteger((Event.To as CMlFrame).DataAttributeGet("setting")), C_SettingShift_Previous);
							case CMlScriptEvent::EMenuNavAction::Right: State = UpdateSetting(State, Controls, TL::ToInteger((Event.To as CMlFrame).DataAttributeGet("setting")), C_SettingShift_Next);
							case CMlScriptEvent::EMenuNavAction::AppMenu: Play(State, Controls);
							case CMlScriptEvent::EMenuNavAction::Action2: if (State.LocalMultiType == {{{Const::C_LocalMultiType_SplitScreen}}}) ShowScriptSettingsEditor(State, Controls);
							default: Focus(State, Event.From, Event.To, Controls);
						}
					} else {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							State = Select(State, Event.To, Controls);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::AppMenu) {
							Play(State, Controls);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Action2 && State.LocalMultiType == {{{Const::C_LocalMultiType_SplitScreen}}}) {
							ShowScriptSettingsEditor(State, Controls);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							State = Cancel(State, Controls);
						} else {
							Focus(State, Event.From, Event.To, Controls);
						}
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseOver: Focus(State, Event.From, Event.To, Controls, True);
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Event.To, Controls);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName_MouseOnly}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseOut: Focus(State, Event.From, Event.To, Controls, True);
						case CMlScriptEvent::Type::MouseOver: Focus(State, Event.From, Event.To, Controls, True);
						case CMlScriptEvent::Type::MouseClick: {
							if (Event.To != Null && Event.To.Parent.HasClass("{{{C_Class_Setting}}}")) {
								State = UpdateSetting(State, Controls, TL::ToInteger(Event.To.Parent.DataAttributeGet("setting")), TL::ToInteger(Event.To.DataAttributeGet("setting-shift")));
							} else {
								State = Select(State, Event.To, Controls);
							}
						}
					}
				}
			}
		}
	}

	/* Track scroll events */
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null && Event.Scroll.Id == Controls.Frame_Scroll_Tracks.Id) {
			switch (Event.Type) {
				case {{{Scroll::P}}}C_EventType_Update: {
					foreach (Key => Frame_Element in Event.ElementsVisible) {
						declare Integer TrackKey for Frame_Element;
						if (Key == 0) {
							TrackKey = C_Track_NullKey;
							ShowPlus(Frame_Element);
						} else if (State.MapList.existskey(Key-1)) {
							TrackKey = Key-1;
							ShowTrack(Frame_Element, State.MapList[TrackKey], State.SelectedTrackKey);
						} else {
							TrackKey = Key-1;
							ShowTrackLoading(Frame_Element);
						}
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						declare Integer TrackKey for Frame_Element;
						TrackKey = C_Track_NullKey;
						HideTrack(Frame_Element);
					}
					Event.Scroll.Visible = Event.ElementsVisible.count > 0;
				}
				case {{{Scroll::P}}}C_EventType_Select: {
					if (Event.ToKey == 0 && !State.IsMovingTracks) { // Plus button
						if (
							State.LocalMultiType == {{{Const::C_LocalMultiType_SplitScreen}}} &&
							TitleControl::IsRoyalScript(State.ModeScriptName)
						) {
							{{{TrackBrowser::P}}}SetMapTypeFilters(This, ["{{{Const::C_MapType_Royal}}}"]);
						} else {
							{{{TrackBrowser::P}}}SetMapTypeFilters(This, ["{{{Const::C_MapType_Race}}}"]);
						}
						DisplayBrowser(True, Controls);
					} else {
						if (State.IsMovingTracks) { // Swap tracks
							if (State.MapList.existskey(Event.ToKey-1) && State.MapList.existskey(State.SelectedTrackKey)) {
								declare {{{CampaignStruct::P}}}K_Map TmpTrack = State.MapList[State.SelectedTrackKey];
								State.MapList[State.SelectedTrackKey] = State.MapList[Event.ToKey-1];
								State.MapList[Event.ToKey-1] = TmpTrack;
								State = SetIsMovingTracks(State, Controls, False, "");
							}
						} else { // Open track options pop up
							if (State.MapList.existskey(Event.ToKey-1)) {
								State.SelectedTrackKey = Event.ToKey-1;
								State.LastSelectedTrack = Event.To;
								OpenTrackOptionsPopUp(Controls, State.MapList[State.SelectedTrackKey].Name);
							}
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_Focus: {
					if (Event.From != Null) FocusTrack(Event.From, False, State.SelectedTrackKey);
					if (Event.To != Null) {
						if (Event.IsMouse) {
							declare CMlControl CurrentFocus = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
							if (CurrentFocus != Event.Scroll) {
								Focus(State, CurrentFocus, Event.Scroll, Controls, Event.IsMouse);
							}
						}
						if ({{{Scroll::P}}}IsFocused(Event.Scroll)) {
							FocusTrack(Event.To, True, State.SelectedTrackKey);
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_ReachLimit: {
					if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Up) {
						Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Frame_SettingGameMode, Controls, False);
					} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Down || Event.NavAction == CMlScriptEvent::EMenuNavAction::Right) {
						Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Controls.Button_Play, Controls, False);
					} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Left) {
						Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Button_Back, Controls, False);
					}
				}
				case {{{Scroll::P}}}C_EventType_Cancel: {
					State = Cancel(State, Controls);
				}
			}
		}
	}

	/* Script settings editor events */
	foreach (Event in {{{ScriptSettingsEditor::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{ScriptSettingsEditor::P}}}C_Event_Confirm: {
				State.ScriptSettings = Event.ScriptSettings;
				State.ScriptSettingsXML = TL::Replace(Event.ScriptSettingsDiffXML, "</script_settings>", "<setting name=\"S_IsSplitScreen\" value=\"True\" type=\"boolean\"/> </script_settings>");
				{{{ScriptSettingsEditor::P}}}Hide();
				LockNavigation(Controls, False);
			}
			case {{{ScriptSettingsEditor::P}}}C_Event_Cancel: {
				LockNavigation(Controls, False);
			}
		}
	}

	/* Track Browser events */
	foreach (Event in {{{TrackBrowser::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TrackBrowser::P}}}C_Event_MultiSelect: {
				// Add new tracks to the scroll
				foreach (Map in Event.MultiTracks) {
					State.MapList.add(Map);
				}
				DisplayBrowser(False, Controls);
				{{{Scroll::P}}}SetElementsTotal(This, Controls.Frame_Scroll_Tracks, State.MapList.count + 1);
				{{{Scroll::P}}}ScrollToElement(This, Controls.Frame_Scroll_Tracks, State.MapList.count, True);
				if (State.LocalMultiType == {{{Const::C_LocalMultiType_SplitScreen}}}) CheckTrackTypes(State, Controls);
			}
			case {{{TrackBrowser::P}}}C_Event_Exit: {
				DisplayBrowser(False, Controls);
			}
		}
	}


	/* Pop up multi choice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == Controls.Frame_MultiChoice.Id) {
			declare Integer PopUpType for Controls.Frame_MultiChoice;
			if (PopUpType == C_PopUpTrackOptionsIndex) {
				switch (Event.Type) {
					case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
						switch (Event.SelectedIndex) {
							case C_TrackPopUp_ChoiceIndex_Move: {
								if (State.MapList.existskey(State.SelectedTrackKey)) {
									State = SetIsMovingTracks(State, Controls, True, State.MapList[State.SelectedTrackKey].Name);
									{{{PopUpMultiChoice::P}}}Close(This, Controls.Frame_MultiChoice);
								}
							}
							case C_TrackPopUp_ChoiceIndex_Remove: {
								State.MapList.removekey(State.SelectedTrackKey);
								State.SelectedTrackKey = C_Track_NullKey;
								if (State.LocalMultiType == {{{Const::C_LocalMultiType_SplitScreen}}}) CheckTrackTypes(State, Controls);
								{{{Scroll::P}}}SetElementsTotal(This, Controls.Frame_Scroll_Tracks, State.MapList.count + 1);
								{{{PopUpMultiChoice::P}}}Close(This, Controls.Frame_MultiChoice);
							}
						}
					}
					case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
						if (!State.IsMovingTracks && !Controls.Frame_MultiChoice.Visible) State.SelectedTrackKey = C_Track_NullKey;
						LockNavigation(Controls, Controls.Frame_MultiChoice.Visible, State.IsMovingTracks);
					}
				}
			} else if (PopUpType == C_PopUpLeaveIndex) {
				switch (Event.Type) {
					case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
						if (Event.SelectedIndex == C_LeavePopUp_ChoiceIndex_Leave) {
							{{{Router::P}}}PushParent(This);
						}
						{{{PopUpMultiChoice::P}}}Close(This, Controls.Frame_MultiChoice);
					}
					case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
						LockNavigation(Controls, Controls.Frame_MultiChoice.Visible);
					}
				}
			}
		}
	}
}

/* Router events */
foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
	switch (Event.Type) {
		case "{{{Router::C_Event_EnteringRoute}}}": {
			declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);
			if (Query.existskey("{{{RoutePaths::C_Query_LocalMultiType}}}")) {
				State.LocalMultiType = TL::ToInteger(Query["{{{RoutePaths::C_Query_LocalMultiType}}}"]);
				State = InitLocalMultiType(State, Controls, Frame_Global);
			}
			if (Query.existskey("{{{RoutePaths::C_Query_Map}}}")) {
				declare {{{CampaignStruct::P}}}K_Map Track;
				Track.fromjson(Query["{{{RoutePaths::C_Query_Map}}}"]);
				State.MapList.add(Track);
			}
			{{{Scroll::P}}}SetElementsTotal(This, Controls.Frame_Scroll_Tracks, State.MapList.count + 1);
			UpdateErrorMessage("", Controls);
			LockNavigation(Controls, False);
			Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Controls.Frame_Scroll_Tracks, Controls);
			UpdateControllerInfo(Controls, State.IsMovingTracks);
		}
		case "{{{Router::C_Event_LeavingRoute}}}": {
			G_TTSContextIdent_Setting = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Setting);
			Controls.Frame_Scroll_Tracks.Hide();
			State.MapList.clear();
			State = SetIsMovingTracks(State, Controls, False, "", False);
			UpdateErrorMessage("", Controls);
		}
	}
}
***
""",
[
	Transition::ComponentV2(),
	Navigation::ComponentV2(),
	Router::ComponentV2(),
	Button::ComponentV2(),
	ExpendableButton::ComponentV2(),
	CampaignStruct::Component(),
	ClubStruct::Component(),
	ScriptSettingsEditor::Component(),
	TrackBrowser::ComponentV2(),
	UserStore::ComponentV2(),
	NavigationTabs::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	Scroll::ComponentV2(),
	ButtonIcon::ComponentV2(),
	ControlBlockList::ComponentV2(),
	PlayerName::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}