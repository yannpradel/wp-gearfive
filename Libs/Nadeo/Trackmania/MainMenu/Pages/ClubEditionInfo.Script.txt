/**
 *	Page: ClubEditionInfo
 */
#Const Version		"1.1.3"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/ClubEditionInfo.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/Trackmania/RBAC.Script.txt" as RBAC

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_ClubEditionInfo"
#Const C_NavGroupName "navgroup-page-clubeditioninfo"

#Const Const::C_ImageUrl_Profile_Background as C_BackgroundImageUrl

#Const C_Choices_ThankYou [
	0 => _("Go")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [Page ClubEditionInfo] Page title presenting the different access in the game (Starter, Club)
	declare Text Text_TrackmaniaAccess = _("Trackmania access");
	//L16N [Page ClubEditionInfo] Name of the Starter Edition
	declare Text Text_Starter = _("Starter");
	//L16N [Page ClubEditionInfo] Name of the Club Edition
	declare Text Text_Club = _("Club");

	//L16N [Page ClubEditionInfo] The Starter Edition is free (costs nothing)
	declare Text Text_StarterEditionInfo = _("Free access");
	//L16N [Page ClubEditionInfo] Infos on the Starter Edition
	declare Text Text_StarterEditionPoint1 = _("Discover the first tracks of a $<$6F9new seasonal campaign$> every quarter (solo & online)");
	//L16N [Page ClubEditionInfo] Infos on the Starter Edition
	declare Text Text_StarterEditionPoint2 = _("Play with your friends in the $<$6F9royal$> and $<$6F9ranked$> matchmaking game modes");
	//L16N [Page ClubEditionInfo] Infos on the Starter Edition
	declare Text Text_StarterEditionPoint3 = _("Unlock $<$6F9prestige skins$> and earn levels to show off your skills");
	//L16N [Page ClubEditionInfo] Infos on the Starter Edition
	declare Text Text_StarterEditionPoint4 = _("$<$6F9Cross-play$> and $<$6F9Cross-platform$> progression");
	//L16N [Page ClubEditionInfo] Infos on the Starter Edition
	declare Text Text_StarterEditionPoint5 = _("Create unique tracks with the $<$6F9track editor$>");

	declare Text[Integer] Text_Starter_Points = [
		0 => Text_StarterEditionPoint1,
		1 => Text_StarterEditionPoint2,
		2 => Text_StarterEditionPoint3,
		3 => Text_StarterEditionPoint4,
		4 => Text_StarterEditionPoint5
	];

	//L16N [Page ClubEditionInfo] Infos on the Club Edition
	declare Text Text_ClubEditionPoint1 = _("Play $<$6F9all past seasonal campaigns$> (since July 2020)");
	//L16N [Page ClubEditionInfo] Infos on the Club Edition
	declare Text Text_ClubEditionPoint2 = _("Play the $<$6F9track of the day$> featuring new content created by the players");
	//L16N [Page ClubEditionInfo] Infos on the Club Edition
	declare Text Text_ClubEditionPoint3 = _("Join $<$6F9club activities$> (campaigns, online rooms, competitions)");
	//L16N [Page ClubEditionInfo] Infos on the Club Edition
	declare Text Text_ClubEditionPoint4 = _("Use $<$6F9custom car skins$>");
	//L16N [Page ClubEditionInfo] Infos on the Club Edition
	declare Text Text_ClubEditionPoint5 = _("Play against the $<$6F9best players' times$> (ghosts)");
	//L16N [Page ClubEditionInfo] Infos on the Club Edition
	declare Text Text_ClubEditionPoint6 = _("Play $<$6F9custom tracks$> on local play");

	//L16N [Page ClubEditionInfo] Infos on the Club Edition
	declare Text Text_ClubEditionPoint7 = _("$<$6F9Create clubs$> to share content and $<$6F9organize activities$>");
	//L16N [Page ClubEditionInfo] Infos on the Club Edition
	declare Text Text_ClubEditionPoint8 = _("Submit your track of the day with the $<$6F9track review server$>");
	//L16N [Page ClubEditionInfo] Infos on the Club Edition
	declare Text Text_ClubEditionPoint9 = _("Host rooms on Ubisoft Nadeo dedicated servers");
	//L16N [Page ClubEditionInfo] Infos on the Club Edition
	declare Text Text_ClubEditionPoint10 = _("Use $<$6F9custom club tag$> in your name");
	//L16N [Page ClubEditionInfo] Infos on the Club Edition
	declare Text Text_ClubEditionPoint11 = _("Create your $<$6F9local server$>");

	declare Text[Integer] Text_Club_Points = [
		0 => Text_ClubEditionPoint1,
		1 => Text_ClubEditionPoint2,
		2 => Text_ClubEditionPoint3,
		3 => Text_ClubEditionPoint4,
		4 => Text_ClubEditionPoint5,
		5 => Text_ClubEditionPoint6,
		6 => Text_ClubEditionPoint7,
		7 => Text_ClubEditionPoint8,
		8 => Text_ClubEditionPoint9,
		9 => Text_ClubEditionPoint10,
		10 => Text_ClubEditionPoint11
	];

	//L16N [Page ClubEditionInfo] %1 will be replaced by an access name, eg "+ Everything in Starter Access"
	declare Text Text_EverythingIn = _("+ Everything in %1");
	//L16N [Page ClubEditionInfo] More features to discover in this access
	declare Text Text_AndMore = _("...and more!");

	//L16N [Page ClubEditionInfo] Button that redirects the user to a web page where they can buy the different Trackmania access
	declare Text Text_Upgrade = _("Upgrade");
	//L16N [Page ClubEditionInfo] Information about the conversion rate between standard and club
	declare Text Text_Conversion = _("Upgrading from Standard to Club access will transform half of your remaining days of Standard access into Club access");
	//L16N [Page ClubEditionInfo] Website to get more information about editions. %1 will be the link of the website
	declare Text Text_MoreInfo = _("More details at %1");
	Text_MoreInfo = TL::Compose(Text_MoreInfo, "$l[https://www.trackmania.com/detailed-offers]Trackmania.com$l");
	//L16N [Page ClubEditionInfo] Message to inform the user when the subscription will end. %1 will be the type of access (Standard or Club) and %2 will be a date. E.g. "Your Club access will end on 05/05/2025"
	declare Text Text_SubscriptionEnd = _("Your %1 will end on %2");
	//L16N [Page ClubEditionInfo] Message to inform the user that their subscription is tied to their Ubisoft+ subscription
	declare Text Text_SubscriptionUbisoftPlus = _("You own a club access through your Ubisoft+ subscription");

	//L16N [Page ClubEditionInfo] Text displayed while refreshing the current access
	declare Text Text_Refreshing = _("Updating access...\nThis may take some time. You can leave this page if you wish and your access will be automatically updated once the transaction has been validated.");
	//L16N [Page ClubEditionInfo] Title of the pop-up displayed when the user upgrades to club access
	declare Text Text_ThankYouTitle = _("Thank you! â™¥");

	declare Vec2 Size_Edition_HeaderStarter = MLHelpers::KeepRatioFromY(540., 128., 21.2);
	declare Vec2 Size_Edition_DetailsStarter = MLHelpers::KeepRatioFromY(612., 540., 90.);

	declare Vec2 Size_Edition_HeaderClub = MLHelpers::KeepRatioFromY(1044., 128., 21.1);
	declare Vec2 Size_Edition_DetailsClub = MLHelpers::KeepRatioFromY(1108., 540., 90.);

	declare PopUpMultiChoice::K_DescriptionPart[] PopUpThankYouDescription = [
		//L16N [Page ClubEditionInfo] Popup message displayed when the user upgrades to club access
		PopUpMultiChoice::CreateDescriptionPart(TL::Compose(_("Thank you for getting the $<$6FA%1$>!\n\nHave fun in Trackmania!"), RBAC::C_Text_ClubAccess), <130., 30.>, 3., Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold), "$t$i", <1., 1., 1.>, False)
	];

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="quad-base" halign="center" valign="center"/>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-regular" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-edition-point">
	<quad id="quad-icon-arrow" size="5 5" pos="0 1" valign="top" halign="right" image="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}" />
	<label id="label-edition-feature" size="{{{Size_Edition_DetailsStarter.X * 0.74}}} 15" class="text-semibold" valign="top" maxline="3" autonewline="1" textsize="2" halign="left"/>
</framemodel>

<framemodel id="framemodel-edition-starter">
	<quad id="quad-header" pos="{{{Size_Edition_DetailsStarter.X * 0.09}}} {{{Size_Edition_DetailsStarter.Y * 0.59}}}" size="{{{Size_Edition_HeaderStarter.X}}} {{{Size_Edition_HeaderStarter.Y}}}" class="quad-base" image="{{{Const::C_ImageUrl_Club_Edition_Header}}}" z-index="-1"/>
	<quad id="quad-details" size="{{{Size_Edition_DetailsStarter.X}}} {{{Size_Edition_DetailsStarter.Y}}}" class="quad-base" image="{{{Const::C_ImageUrl_Club_Edition_Details}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.8" z-index="-2"/>
	<label id="label-edition-name" pos="{{{MLHelpers::Skew(-40., 55., 10.)}}}" size="{{{Size_Edition_HeaderStarter.X * 0.75}}} 20" class="text-extrabold" textsize="8" halign="left"/>
	<label id="label-edition-subtitle" pos="{{{MLHelpers::Skew(-40., 49., 10.)}}}" size="{{{Size_Edition_HeaderStarter.X * 0.9}}} 10" class="text-semibold" textsize="2" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" halign="left"/>
	<quad id="quad-icon-my-edition" size="7 7" pos="{{{MLHelpers::Skew(35., 56., 10.)}}}" class="quad-base" image="{{{Icons::C_Icon_128x128_Role_Member}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" hidden="1"/>

	<frameinstance id="frame-point-1" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(-35., 36., 10.)}}}" />
	<frameinstance id="frame-point-2" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(-35., 23., 10.)}}}" />
	<frameinstance id="frame-point-3" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(-35., 10., 10.)}}}" />
	<frameinstance id="frame-point-4" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(-35., -3., 10.)}}}" />
	<frameinstance id="frame-point-5" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(-35., -16., 10.)}}}" />
	<label id="label-and-more" pos="{{{MLHelpers::Skew(-35., -31., 10.)}}}" size="{{{Size_Edition_DetailsStarter.X * 0.75}}} 10" class="text-semibold" textsize="2" text="{{{Text_AndMore}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" halign="left"/>
</framemodel>

<framemodel id="framemodel-edition-club">
	<quad id="quad-header" pos="{{{Size_Edition_DetailsStarter.X * 0.09}}} {{{Size_Edition_DetailsClub.Y * 0.59}}}" size="{{{Size_Edition_HeaderClub.X}}} {{{Size_Edition_HeaderClub.Y}}}" class="quad-base" image="{{{Const::C_ImageUrl_Club_Edition_HeaderDouble}}}" z-index="-1"/>
	<quad id="quad-details" size="{{{Size_Edition_DetailsClub.X}}} {{{Size_Edition_DetailsClub.Y}}}" class="quad-base" image="{{{Const::C_ImageUrl_Club_Edition_DetailsDouble}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.8" z-index="-2"/>
	<label id="label-edition-name" pos="{{{MLHelpers::Skew(-80., 55., 10.)}}}" size="{{{Size_Edition_HeaderClub.X * 0.75}}} 20" class="text-extrabold" textsize="8" halign="left"/>
	<label id="label-edition-subtitle" pos="{{{MLHelpers::Skew(-80., 49., 10.)}}}" size="{{{Size_Edition_HeaderClub.X * 0.9}}} 10" class="text-semibold" textsize="2" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" halign="left"/>
	<quad id="quad-icon-my-edition" size="7 7" pos="{{{MLHelpers::Skew(75., 56., 10.)}}}" class="quad-base" image="{{{Icons::C_Icon_128x128_Role_Member}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" hidden="1"/>

	<frameinstance id="frame-point-1" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(-75., 36., 10.)}}}" />
	<frameinstance id="frame-point-2" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(-75., 23., 10.)}}}" />
	<frameinstance id="frame-point-3" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(-75., 10., 10.)}}}" />
	<frameinstance id="frame-point-4" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(-75., -3., 10.)}}}" />
	<frameinstance id="frame-point-5" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(-75., -16., 10.)}}}" />
	<frameinstance id="frame-point-6" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(-75., -29., 10.)}}}" />

	<frameinstance id="frame-point-7" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(10., 36., 10.)}}}" />
	<frameinstance id="frame-point-8" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(10., 23., 10.)}}}" />
	<frameinstance id="frame-point-9" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(10., 10., 10.)}}}" />
	<frameinstance id="frame-point-10" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(10., -3., 10.)}}}" />
	<frameinstance id="frame-point-11" modelid="framemodel-edition-point" pos="{{{MLHelpers::Skew(10., -16., 10.)}}}" />

	<label id="label-and-more" pos="{{{MLHelpers::Skew(10., -31., 10.)}}}" size="{{{Size_Edition_DetailsClub.X * 0.75}}} 10" class="text-semibold" textsize="2" text="{{{Text_AndMore}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" halign="left"/>
</framemodel>

<!-- Frame global -->
<frame id="frame-global" z-index="{{{Const::C_ZIndex_ClubEditionInfo}}}">
	<frameinstance id="loadingspinner-refresh-access" modelid="{{{LoadingSpinner::C_Name}}}" data-label="{{{Text_Refreshing}}}" data-label-autonewline="true" data-dimmer="true" data-opacity="0." z-index="5"/>
	<quad id="quad-dimmer" size="320 180" z-index="0" halign="center" valign="center" fullscreen="1" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.4" />

	<!-- Header -->
	<label id="label-title" pos="{{{MLHelpers::Skew(-135., 65., 10.)}}}" size="250 30" class="text-extrabold" text="{{{Text_TrackmaniaAccess}}}" textsize="12.5" halign="left"/>
	<label id="label-subtitle" pos="{{{MLHelpers::Skew(-134., 57., 10.)}}}" size="250 10" halign="left" class="text-semibold" textsize="2." textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"/>

	<!-- Thank you pop up and video -->
	<frameinstance
		id="popupmultichoice-thank-you"
		modelid="{{{PopUpMultiChoice::C_Name}}}"
		data-title="{{{Text_ThankYouTitle}}}"
		data-choices="{{{TL::MLEncode(C_Choices_ThankYou.tojson())}}}"
		data-description="{{{TL::MLEncode(PopUpThankYouDescription.tojson())}}}"
		z-index="8"
		hidden="1"
	/>
	<quad id="video-confetti" size="320 180" z-index="7" halign="center" valign="center" fullscreen="1" />

	<!-- Starter and Club Access -->
	<frameinstance id="frame-edition-starter" modelid="framemodel-edition-starter" pos="-93 -11"/>
	<frameinstance id="frame-edition-club" modelid="framemodel-edition-club" pos="40 -11"/>

	<!-- Footer -->
	<frame id="frame-footer" pos="0 -73" z-index="2">
		<!-- Footer infos on subscription -->
		<label id="label-conversion" pos="0 14" size="250 10" class="text-semibold" text="{{{Text_Conversion}}}" textprefix="$i" textsize="2" hidden="1"/>
		<label id="label-subscription-end" pos="0 2" size="150 10" class="text-semibold" text="{{{Text_SubscriptionEnd}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" hidden="1"/>
		<label id="label-more-info" pos="0 -4" size="150 10" class="text-semibold" text="{{{Text_MoreInfo}}}" textprefix="$i" textsize="2.5"/>

		<!-- Upgrade button (to buy an access) -->
		<frameinstance
			id="button-upgrade"
			pos="151.5 0"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_Upgrade}}}"
			data-valign="center" data-halign="right"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}}"
			data-max-width="70"
			data-nav-inputs="select;cancel;left"
			data-nav-targets="_;_;button-back"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>

	<!-- Back button -->
	<frameinstance
		id="button-back" pos="-151.5 -73" z-index="6"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;right"
		data-nav-targets="_;_;button-upgrade"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "ColorLib" as CL
#Include "TimeLib" as TiL
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools

#Const Text_Starter_Points {{{dump(Text_Starter_Points)}}}
#Const Text_Club_Points {{{dump(Text_Club_Points)}}}

#Const C_SubscriptionName_Standard "Standard"
#Const C_SubscriptionName_Club "Club"

#Const C_Video_Confetti "file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/Royal_Champion_Results_Anim.webm"

#Struct K_Controls {
	CMlFrame Button_Back;
	CMlFrame Button_Upgrade;
	CMlLabel Label_Subtitle;
	CMlLabel Label_Conversion;
	CMlLabel Label_SubscriptionEnd;
	CMlQuad Video_Confetti;
	CMlFrame PopUpMultiChoice_ThankYou;
	CMlQuad Quad_MyStarterEdition;
	CMlQuad Quad_MyClubEdition;
	CMlFrame LoadingSpinner_RefreshAccess;
}

#Struct K_State {
	Integer CurrentGameSubscriptionPlan;
	Task::K_Task Task_ShowPrimaryStore;
}

#Const C_Starter 0
#Const C_Standard 1
#Const C_Club 3
""",
"""
Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void FocusAvailableControl(K_Controls _Controls) {
	if (!{{{Navigation::P}}}IsLocked(_Controls.Button_Upgrade)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_Upgrade);
	} else if (!{{{Navigation::P}}}IsLocked(_Controls.Button_Back)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_Back);
	}
}

// Pop up to thank the players who have bought a Trackmania access
K_State OpenThankingPopUp(K_State _State, K_Controls _Controls, CVideo _ConfettiVideo) {
	declare K_State State = _State;
	declare Integer CurrentGameSubscriptionPlan = {{{UserStore::P}}}GetGameSubscriptionPlan(PrivilegeMgr);

	if (State.CurrentGameSubscriptionPlan != CurrentGameSubscriptionPlan) {
		State.CurrentGameSubscriptionPlan = CurrentGameSubscriptionPlan;
		if (State.CurrentGameSubscriptionPlan == {{{UserStore::P}}}C_GameSubscriptionPlan_Club) {
			// Stop loading spinner
			if ({{{LoadingSpinner::P}}}IsLoading(_Controls.LoadingSpinner_RefreshAccess)) {
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, _Controls.LoadingSpinner_RefreshAccess);
			}

			// Open the pop-up
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_ThankYou);

			// Play the confetti video behind the pop-up
			if (_ConfettiVideo != Null && _ConfettiVideo.Id != NullId && Video.Videos.existskey(_ConfettiVideo.Id)) {
				Video.Videos[_ConfettiVideo.Id].Stop();
				Video.Videos[_ConfettiVideo.Id].Play();
			}
		}
	}

	return State;
}

K_State Select(K_Controls _Controls, CMlControl _Control, K_State _State) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-upgrade": {
			if (!Task::IsInitialized(State.Task_ShowPrimaryStore)) {
				State.Task_ShowPrimaryStore = Task::Create(UserMgr, UserMgr.Commerce_ShowPrimaryStore(MainUser::GetMainUserId()));
			}
		}
		case "button-back": {{{Router::P}}}PushParent(This, {{{Router::P}}}GetCurrentRoutePath(This), ["{{{RoutePaths::C_Query_LeaveClubEditioninfo}}}" => ""]);
	}

	return State;
}

// Set the colors and texts specific to the edition
Void SetEdition(CMlFrame _Frame_Edition, Integer _Edition) {
	declare CMlQuad Quad_EditionHeader = (_Frame_Edition.GetFirstChild("quad-header") as CMlQuad);
	declare CMlLabel Label_EditionName = (_Frame_Edition.GetFirstChild("label-edition-name") as CMlLabel);
	declare CMlLabel Label_EditionSubtitle = (_Frame_Edition.GetFirstChild("label-edition-subtitle") as CMlLabel);
	declare CMlFrame[] Frame_Points;

	declare Integer PointNumber = 5;
	if (_Edition == C_Club) PointNumber = 11;
	for (PointIndex, 1, PointNumber) {
		Frame_Points.add(_Frame_Edition.GetFirstChild("frame-point-"^PointIndex) as CMlFrame);
	}

	switch (_Edition) {
		case C_Starter: {
			Quad_EditionHeader.Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_MedalBronze);
			Label_EditionName.Value = "{{{Text_Starter}}}";
			Label_EditionSubtitle.Value = "{{{Text_StarterEditionInfo}}}";

			foreach (PointIndex => Frame_Point in Frame_Points) {
				declare CMlLabel Label_Feature = (Frame_Point.GetFirstChild("label-edition-feature") as CMlLabel);
				declare CMlQuad Quad_Arrow = (Frame_Point.GetFirstChild("quad-icon-arrow") as CMlQuad);

				Quad_Arrow.Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_MedalBronze);
				Label_Feature.Value = Text_Starter_Points.get(PointIndex, "");
				Tools::FitLabelValue(Label_Feature, 2., 0.5, 0.25);
			}
		}
		case C_Club: {
			Quad_EditionHeader.Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_MedalGold);
			Label_EditionName.Value = "{{{Text_Club}}}";
			Label_EditionSubtitle.Value = TL::Compose("{{{Text_EverythingIn}}}", RBAC::C_Text_StarterAccess);

			foreach (PointIndex => Frame_Point in Frame_Points) {
				declare CMlLabel Label_Feature = (Frame_Point.GetFirstChild("label-edition-feature") as CMlLabel);
				declare CMlQuad Quad_Arrow = (Frame_Point.GetFirstChild("quad-icon-arrow") as CMlQuad);

				Quad_Arrow.Colorize = Stylesheet::GetColorRGB(Stylesheet::C_Color_MedalGold);
				Label_Feature.Value = Text_Club_Points.get(PointIndex, "");
				Tools::FitLabelValue(Label_Feature, 2., 0.5, 0.25);

				// Special case for local servers, available only on PC
				Frame_Point.Visible = (PointIndex != 10 || (PointIndex == 10 && Platform::IsPC(System)));
			}
		}
	}

	Tools::FitLabelValue(Label_EditionName, 8., 4., 0.5);
	Tools::FitLabelValue(Label_EditionSubtitle, 2., 1., 0.25);
}

// Display which edition the player currently owns
Void UpdateCurrentEditionInfos(Integer _CurrentGameSubscriptionPlan, K_Controls _Controls) {
	_Controls.Quad_MyStarterEdition.Hide();
	_Controls.Quad_MyClubEdition.Hide();
	_Controls.Label_Conversion.Hide();

	declare Boolean CanBuyClubEdition = {{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CanSubscribeToClub);
	declare Boolean CanBuyStandardEdition = {{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CanSubscribeToStandard);

	switch (_CurrentGameSubscriptionPlan) {
		case {{{UserStore::P}}}C_GameSubscriptionPlan_Free: {
			_Controls.Quad_MyStarterEdition.Show();
			_Controls.Label_SubscriptionEnd.Visible = !CanBuyStandardEdition || !CanBuyClubEdition;
		}
		case {{{UserStore::P}}}C_GameSubscriptionPlan_Standard: {
			_Controls.Label_Conversion.Visible = CanBuyClubEdition;
			_Controls.Label_SubscriptionEnd.Visible = !CanBuyStandardEdition;
		}
		case {{{UserStore::P}}}C_GameSubscriptionPlan_Club: {
			_Controls.Quad_MyClubEdition.Show();
			_Controls.Label_SubscriptionEnd.Visible = !CanBuyClubEdition;
		}
	}

	// Update subscription end date
	if (_Controls.Label_SubscriptionEnd.Visible) {
		declare Text SubscriptionName = C_SubscriptionName_Club;
		if (CanBuyClubEdition) SubscriptionName = C_SubscriptionName_Standard;
		declare Integer EndTimeStamp = UserMgr.Subscription_GetEndTimeStamp(MainUser::GetMainUserId(), SubscriptionName);

		if (EndTimeStamp == 0) {
			_Controls.Label_SubscriptionEnd.Hide();
		} else if (EndTimeStamp < 0) {
			_Controls.Label_SubscriptionEnd.Value = "{{{Text_SubscriptionUbisoftPlus}}}";
		} else {
			declare Text EndDate = TiL::FormatDate(""^EndTimeStamp, TiL::EDateFormats::Date);
			declare Text AccessType = RBAC::C_Text_StandardAccess;
			if (!CanBuyClubEdition) AccessType = RBAC::C_Text_ClubAccess;
			_Controls.Label_SubscriptionEnd.Value = TL::Compose("{{{Text_SubscriptionEnd}}}", AccessType, EndDate);
		}
		Tools::FitLabelValue(_Controls.Label_SubscriptionEnd, 3., 1., 0.5);
	}

	// Display Upgrade button only if player do not have the Club access
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(_Controls.Button_Upgrade, !UserMgr.Subscription_IsRefreshingInfo(MainUser::GetMainUserId()) && _CurrentGameSubscriptionPlan != {{{UserStore::P}}}C_GameSubscriptionPlan_Club);

	// Update navigation focus
	declare FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
	if (FocusedControl == Null || {{{Navigation::P}}}IsLocked(FocusedControl)) {
		FocusAvailableControl(_Controls);
	}
}
***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_EditionStarter;
declare CMlFrame Frame_EditionClub;

declare K_Controls Controls;
declare K_State State;

declare CVideo ConfettiVideo;
declare Boolean IsRefreshingAccess;
***

***MainStart***
***
Frame_Global = (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_EditionStarter = (Frame_Global.GetFirstChild("frame-edition-starter") as CMlFrame);
Frame_EditionClub = (Frame_Global.GetFirstChild("frame-edition-club") as CMlFrame);

Controls = K_Controls {
	Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
	Button_Upgrade = (Frame_Global.GetFirstChild("button-upgrade") as CMlFrame),
	Label_Subtitle = (Frame_Global.GetFirstChild("label-subtitle") as CMlLabel),
	Label_Conversion = (Frame_Global.GetFirstChild("label-conversion") as CMlLabel),
	Label_SubscriptionEnd = (Frame_Global.GetFirstChild("label-subscription-end") as CMlLabel),
	Video_Confetti = (Frame_Global.GetFirstChild("video-confetti") as CMlQuad),
	PopUpMultiChoice_ThankYou = (Frame_Global.GetFirstChild("popupmultichoice-thank-you") as CMlFrame),
	Quad_MyStarterEdition = (Frame_EditionStarter.GetFirstChild("quad-icon-my-edition") as CMlQuad),
	Quad_MyClubEdition = (Frame_EditionClub.GetFirstChild("quad-icon-my-edition") as CMlQuad),
	LoadingSpinner_RefreshAccess = (Frame_Global.GetFirstChild("loadingspinner-refresh-access") as CMlFrame)
};

SetEdition(Frame_EditionStarter, C_Starter);
SetEdition(Frame_EditionClub, C_Club);

Tools::FitLabelValue(Controls.Label_Conversion, 2., 1., 0.25);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}")) {
	/* UserStore events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{UserStore::P}}}C_Event_UserPermissionsUpdated: {
						State = OpenThankingPopUp(State, Controls, ConfettiVideo);
						UpdateCurrentEditionInfos(State.CurrentGameSubscriptionPlan, Controls);
					}
				}
			}
		}
	}

	/* Entering page */
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				Controls.Label_Subtitle.Value = {{{Router::P}}}GetCurrentRouteQuery(This).get("{{{RoutePaths::C_Query_Message}}}", "");
				Tools::FitLabelValue(Controls.Label_Subtitle, 2., 1., 0.25);
				State.CurrentGameSubscriptionPlan = {{{UserStore::P}}}GetGameSubscriptionPlan(PrivilegeMgr);
				UpdateCurrentEditionInfos(State.CurrentGameSubscriptionPlan, Controls);
				ControllerInfo::SetButtons(["A" => _("Select"), "B" => _("Back")]);

				// Force loading spinner update
				IsRefreshingAccess = !UserMgr.Subscription_IsRefreshingInfo(MainUser::GetMainUserId());

				// Create confetti video
				ConfettiVideo <=> Video.CreateVideo(C_Video_Confetti, False, True);
				if (ConfettiVideo != Null) {
					Controls.Video_Confetti.Image = ConfettiVideo.Image;
				}
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						State = Select(Controls, Event.To, State);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						State = Select(Controls, Controls.Button_Back, State);
					} else {
						Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(Controls, Event.To, State);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == Controls.PopUpMultiChoice_ThankYou.Id) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !Event.PopUpMultiChoice.Visible);
				}
			}
		}
	}

	/* Display loading spinner while refreshing access */
	if (IsRefreshingAccess != UserMgr.Subscription_IsRefreshingInfo(MainUser::GetMainUserId())) {
		IsRefreshingAccess = UserMgr.Subscription_IsRefreshingInfo(MainUser::GetMainUserId());
		{{{ExpendableButton::P}}}SetVisibilityAndNavigation(Controls.Button_Upgrade, !IsRefreshingAccess && State.CurrentGameSubscriptionPlan != {{{UserStore::P}}}C_GameSubscriptionPlan_Club);
		if (IsRefreshingAccess && !Controls.PopUpMultiChoice_ThankYou.Visible) {
			{{{LoadingSpinner::P}}}StartAnimWithFade(This, Controls.LoadingSpinner_RefreshAccess);
			FocusAvailableControl(Controls);
		} else {
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_RefreshAccess);
		}
	}
} else {
	/* Leaving page */
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_LeavingRoute}}}": {
				if (ConfettiVideo != Null && ConfettiVideo.Id != NullId && Video.Videos.existskey(ConfettiVideo.Id)) {
					Video.DestroyVideo(ConfettiVideo);
					Controls.Video_Confetti.Image = Null;
					ConfettiVideo = Null;
				}
			}
		}
	}
}

/* Task to open the primary store to buy a Trackmania Access */
if (Task::IsInitialized(State.Task_ShowPrimaryStore)) {
	State.Task_ShowPrimaryStore = Task::Update(State.Task_ShowPrimaryStore);
	if (!Task::IsRunning(State.Task_ShowPrimaryStore)) {
		State.Task_ShowPrimaryStore = Task::Destroy(State.Task_ShowPrimaryStore);
	}
}
***
""",
[
	Transition::ComponentV2(),
	Navigation::ComponentV2(),
	Router::ComponentV2(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	UserStore::ComponentV2(),
	PopUpMultiChoice::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}