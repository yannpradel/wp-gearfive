/**
 *	Page: ClubAdministration
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/ClubAdministration.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/Error.Script.txt" as Error
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/Trackmania/Components/TitleBar2.Script.txt" as TitleBar
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_ClubAdministration"
#Const C_NavGroupName "navgroup-page-club-administration"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

#Const C_ChoiceListName_CreateActivity "CreateActivity"
#Const C_ChoiceListName_EditHomeActivity "EditHomeActivity"
#Const C_ChoiceListName_EditArchivedActivity "EditArchivedActivity"
#Const C_ChoiceListName_DefaultChoices "DefaultChoices"

#Const C_Choice_Activity_Move "move"
#Const C_Choice_Activity_Activation "activation"
#Const C_Choice_Activity_Edit "edit"
#Const C_Choice_Activity_Remove "remove"
#Const C_Choice_Activity_Privacy "privacy"
#Const C_Choice_Activity_Feature "feature"

#Const C_ChoiceLists [
	"CreateActivity" => [], //< Replaced by ClubStruct::C_ChoiceList_AddActivity in GetManialink()
	"EditHomeActivity" => [
		//L16N [Club Activity] Action to move an activity within a club in the club administration. The user will be able to switch place with another activity.
		"move" => _("Move"),
		//L16N [Club Activity] Action to feature an activity within a club in the club administration. The featured activity will be displayed in the club widget on the home page.
		"feature" => _("Feature"),
		//L16N [Club Activity] Action to edit an activity within a club in the club administration. The user will be prompted with a popup to edit the information and the data of the selected activity.
		"edit" => _("Edit"),
		//L16N [Club Activity] Action to set private an activity within a club in the club administration. The private activity will be accessible only to the club members.
		"privacy" => _("Set private"),
		//L16N [Club Activity] Action to deactivate an activity within a club in the club administration. The activity will not be displayed in the home of the club anymore, but it will be kept in club administration.
		"activation" => _("Deactivate"),
		//L16N [Club Activity] Action to remove an activity within a club in the club administration. The activity will be deleted from the club.
		"remove" => _("Remove")
	],
	"EditArchivedActivity" => [
		//L16N [Club Activity] Action to activate an activity within a club in the club administration. The activity will be displayed in the home of the club.
		"activation" => _("Activate"),
		//L16N [Club Activity] Action to edit an activity within a club in the club administration. The user will be prompt a popup to edit the information and data of the selected activity.
		"edit" => _("Edit"),
		//L16N [Club Activity] Action to remove an activity within a club in the club administration. The activity will be deleted from the club.
		"remove" => _("Remove")
	],
	"DefaultChoices" => [
		//L16N [Club Activity] Action to activate an activity within a club in the club administration. The activity will be displayed in the home of the club.
		"activation" => _("Activate"),
		//L16N [Club Activity] Action to remove an activity within a club in the club administration. The activity will be deleted from the club.
		"remove" => _("Remove")
	]
]

#Const C_ScrollView_Grid "grid"
#Const C_ScrollView_List "list"

#Const C_TabNames [
	//L16N [Club administration] List of activities displayed on the home of the club page
	0 => _("Club activities"),
	//L16N [Club administration] List of activities made by the club and not displayed on the club page
	1 => _("Inactive activities")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [Club administration] The title of the club's administration page.
	declare Text Text_Administration = _("Administration");
	//L16N [Club administration] Text displayed while retrieving club activities.
	declare Text Text_RetrievingActivities = _("Retrieving club activities");
	//L16N [Club administration] Text displayed while moving club activities.
	declare Text Text_MoveActivities = _("Moving club activities...");
	//L16N [Club administration] Text displayed while removing club's activity.
	declare Text Text_RemoveActivity = _("Removing club's activity...");
	//L16N [Club administration] Text displayed while activating club's activity.
	declare Text Text_ActivateActivity = _("Activating club's activity...");
	//L16N [Club administration] Text displayed while deactivating club's activity.
	declare Text Text_DeactivateActivity = _("Deactivating club's activity...");
	//L16N [Club administration] Text displayed when there is no inactive activities for this club.
	declare Text Text_NoInactiveActivities = _("There are no inactive activities in your club.");
	//L16N [Club administration] Text displayed when there is no home activities for this club.
	declare Text Text_NoHomeActivities = _("There are no home activities in your club.");
	//L16N [Club administration] Message displayed when there is an error while resetting the activity Id for the Item Collections. %1 will be replaced with an error code. e.g. "Failed to reset activity id for the Item Collection. (Error: 123456)"
	declare Text Text_ErrorResetCollection = _("Failed to reset activity id for the Item Collection. (Error: %1)");
	//L16N [Club administration] Tooltip of the button to edit the club in the navigation bar.
	declare Text Text_EditClub = _("|Club|Edit club");
	//L16N [Club administration] Text displayed while moving club activities, %1 will be replaced by the name of the selected activity
	declare Text Text_MoveActivitiesExplanation = _("Select activity to switch position with '%1'");

	declare Text[Text][Text] ChoiceLists = C_ChoiceLists;
	ChoiceLists[C_ChoiceListName_CreateActivity] = ClubStruct::GetChoiceListAddActivity();

	/* Scroll view commons */
	declare ScrollConfig = Scroll::K_Config {
		AnimEnabled = True,
		PreScrollEnabled = True,
		PreScrollBefore = 1,
		PreScrollAfter = 1,
		ScrollBarVisibility = Scroll::C_ScrollBarVisibility_DuringScroll,
		ScrollGrid = <8., 8.>,
		ScrollIndicator = True,
		ScrollIndicatorColorize = <1., 1., 1.>,
		ScrollIndicatorImage = Icons::C_Icon_128x128_Arrow_Bottom_Oblique,
		ScrollIndicatorSize = 12.,
		ScrollIndicatorYOffset = -15.,
		ScrollPadding = 27.5,
		Skew = -10.,
		SkewVAlign = Scroll::C_SkewVAlign_Top,
		WindowSize = <265., 88.>
	};

	/* Activity grid scroll view */
	declare Integer Grid_ColumnsNb = 5;
	declare Integer Grid_RowsNb = 4;
	declare Integer Grid_ActivitiesPerPage = Grid_ColumnsNb * Grid_RowsNb;
	declare Vec2 Grid_Size_ActivityMargin = <1., 4.>;
	declare Vec2 FakeWindowSize = <265., 98.>;
	declare Vec2 Grid_Size_Activity = Scroll::GetElementSize(FakeWindowSize, Grid_Size_ActivityMargin * 0.5, Grid_ColumnsNb, Grid_RowsNb);
	declare Integer Grid_ElementsNb = Scroll::GetRequiredElementsNb(FakeWindowSize, Grid_Size_Activity, Grid_Size_ActivityMargin * 0.5, Grid_ColumnsNb);
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] Grid_Actions = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Icons::C_Icon_128x128_List_View, <8., 8.>, 0.5, 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Icons::C_Icon_128x128_Plus_Oblique,  <8., 8.>, -0.5, 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	declare Vec2 Grid_Size_ActivityImage = MLHelpers::KeepRatioFromY(608., 272., Grid_Size_Activity.Y);
	declare Vec2 Grid_Size_AdjustedActivityImage = <Grid_Size_ActivityImage.X - MLHelpers::SkewX(Grid_Size_ActivityImage.Y, 10.),	Grid_Size_ActivityImage.Y>;
	declare Vec2 Grid_Size_ActivityName = <Grid_Size_AdjustedActivityImage.X * 0.9, 10.>;
	declare Vec2 Grid_Pos_ActivityName =  <Grid_Size_AdjustedActivityImage.X * 0.06, -Grid_Size_AdjustedActivityImage.Y * 0.73>;
	declare Vec2 Grid_Size_ActivityType = <Grid_Size_AdjustedActivityImage.X * 0.9, 10.>;
	declare Vec2 Grid_Pos_ActivityType = <Grid_Size_AdjustedActivityImage.X * 0.05, -Grid_Size_AdjustedActivityImage.Y * 0.9>;
	declare Vec2 Grid_Size_ActivityId = <Grid_Size_AdjustedActivityImage.X * 0.6, 10.>;
	declare Vec2 Grid_Pos_ActivityId = <Grid_Size_AdjustedActivityImage.X * 0.11, Grid_Size_AdjustedActivityImage.Y * -0.17>;
	declare Vec2 Grid_Pos_ActivityPrivate = <Grid_Size_AdjustedActivityImage.X * 0.88, Grid_Size_AdjustedActivityImage.Y * -0.15>;
	declare Vec2 Grid_Pos_ActivityFeatured = <Grid_Size_AdjustedActivityImage.X * 0.99, Grid_Size_AdjustedActivityImage.Y * -0.15>;

	declare Text ML_Grid_Activities = "";
	for (I, 1, Grid_ElementsNb) {
		ML_Grid_Activities ^= """
		<frameinstance
			modelid="framemodel-grid-activity"
			class="{{{Scroll::C_Class_Element}}}"
			hidden="1"
		/>
		""";
	}

	/* Activity list scroll view */
	declare Integer List_ColumnsNb = 1;
	declare Integer List_RowsNb = 8;
	declare Integer List_ActivitiesPerPage = List_ColumnsNb * List_RowsNb;
	declare Vec2 List_Size_ActivityMargin = <0., 2.>;
	FakeWindowSize = <264., 93.>;
	declare Vec2 List_Size_Activity = Scroll::GetElementSize(FakeWindowSize, List_Size_ActivityMargin, List_ColumnsNb, List_RowsNb);
	declare Integer List_ElementsNb = Scroll::GetRequiredElementsNb(FakeWindowSize, List_Size_Activity, List_Size_ActivityMargin, List_ColumnsNb);
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] List_Actions = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Icons::C_Icon_128x128_Grid_View, <8., 8.>, 0.5, 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Icons::C_Icon_128x128_Plus_Oblique,  <8., 8.>, -0.5, 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	declare Vec2 List_Size_ActivityImage = MLHelpers::KeepRatioFromY(608., 272., List_Size_Activity.Y);
	declare Vec2 List_Pos_ActivityImage = <0., List_Size_Activity.Y * -0.5>;
	declare Vec2 List_Pos_ActivityName = <List_Size_Activity.X * 0.09, List_Size_Activity.Y * -0.55>;
	declare Vec2 List_Pos_ActivityType = <List_Size_Activity.X * 0.97, List_Size_Activity.Y * -0.55>;
	declare Vec2 List_Pos_ActivityId = <List_Size_Activity.X * 0.55, List_Size_Activity.Y * -0.55>;
	declare Real Offset_OneIcon = 2.;
	declare Real Offset_TwoIcons = 8.;

	declare Text ML_List_Activities = "";
	for (I, 1, List_ElementsNb) {
		ML_List_Activities ^= """
		<frameinstance
			modelid="framemodel-list-activity"
			class="{{{Scroll::C_Class_Element}}}"
			hidden="1"
		/>
		""";
	}

	declare Vec2 Pos_ClubInfos_Default = <-149., 79.>;
	declare Vec2 Pos_ClubInfos_WithoutIcon = <-170., 79.>;
	declare Vec2 ClubIconSize = MLHelpers::KeepRatioFromY(608., 272., 23.);

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="quad-default" halign="center" valign="center"/>
	<style class="text-regular" halign="center" valign="center2" textsize="5" textcolor="FFFFFF" textprefix="$t$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}"/>
	<style class="text-semibold" textsize="3" halign="center" valign="center2" textcolor="FFFFFF" textprefix="$t$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"/>
	<style class="text-bold" textsize="3" halign="center" valign="center2" textcolor="FFFFFF" textprefix="$t$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-grid-activity">
	<quad id="quad-bg" size="{{{Grid_Size_ActivityImage.X}}} {{{Grid_Size_ActivityImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip" z-index="-1"/>
	<quad id="quad-image" size="{{{Grid_Size_ActivityImage.X}}} {{{Grid_Size_ActivityImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip" z-index="0"/>
	<quad id="quad-gradient" size="{{{Grid_Size_ActivityImage.X}}} {{{Grid_Size_ActivityImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity=".7" z-index="1"/>
	<label id="label-name" translate="1" filter-profanities="Always" size="{{{Grid_Size_ActivityName.X}}} {{{Grid_Size_ActivityName.Y}}}" pos="{{{Grid_Pos_ActivityName.X}}} {{{Grid_Pos_ActivityName.Y}}}" class="text-bold" halign="left" opacity=".6" z-index="2"/>
	<label id="label-type" size="{{{Grid_Size_ActivityType.X}}} {{{Grid_Size_ActivityType.Y}}}" pos="{{{Grid_Pos_ActivityType.X}}} {{{Grid_Pos_ActivityType.Y}}}" class="text-semibold" halign="left" textsize="2." opacity=".6" z-index="2"/>
	<label id="label-id" size="{{{Grid_Size_ActivityId.X}}} {{{Grid_Size_ActivityId.Y}}}" pos="{{{Grid_Pos_ActivityId.X}}} {{{Grid_Pos_ActivityId.Y}}}" class="text-semibold" halign="left" textsize="2." opacity=".6" z-index="2"/>
	<quad id="quad-private" pos="{{{Grid_Pos_ActivityPrivate.X}}} {{{Grid_Pos_ActivityPrivate.Y}}}" image="{{{Icons::C_Icon_128x128_Lock_Oblique}}}" colorize="FFF" size="5 5" opacity="0.6" class="quad-default" hidden="1" z-index="3"/>
	<quad id="quad-featured" class="quad-default" pos="{{{Grid_Pos_ActivityFeatured.X}}} {{{Grid_Pos_ActivityFeatured.Y}}}" image="{{{Icons::C_Icon_128x128_Settings_Star_Inc}}}" size="6 6" opacity="0.6" colorize="FFF" hidden="1" z-index="3"/>
	<quad id="quad-contour" size="{{{Grid_Size_ActivityImage.X}}} {{{Grid_Size_ActivityImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" opacity="0." colorize="FFF" z-index="4"/>
	<frame size="{{{Grid_Size_ActivityImage.X}}} {{{Grid_Size_ActivityImage.Y}}}" pos="{{{Grid_Size_ActivityImage.X/2}}} {{{-Grid_Size_ActivityImage.Y/2}}}" halign="center" valign="center" z-index="5">
		<quad id="quad-hitbox" size="{{{Grid_Size_AdjustedActivityImage.X}}} {{{Grid_Size_AdjustedActivityImage.Y*1.5}}}" scriptevents="1" class="quad-default {{{Scroll::C_Class_ActivationZone}}}" rot="10"/>
	</frame>
</framemodel>

<framemodel id="framemodel-list-activity">
	<frameinstance id="frame-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{List_Size_Activity.X}}}" data-height="{{{List_Size_Activity.Y}}}" data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" data-opacity="0.6" data-halign="left" data-valign="top" z-index="0"/>
	<frameinstance id="frame-contour" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{List_Size_Activity.X}}}" data-height="{{{List_Size_Activity.Y}}}" data-styles="{{{ExpendableAsset::C_Style_ContourRounded}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" data-opacity="0." data-halign="left" data-valign="top" z-index="3"/>
	<quad id="quad-background" size="{{{List_Size_ActivityImage.X}}} {{{List_Size_ActivityImage.Y}}}" pos="{{{List_Pos_ActivityImage.X}}} {{{List_Pos_ActivityImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" halign="left" valign="center" keepratio="clip" z-index="1"/>
	<quad id="quad-image" size="{{{List_Size_ActivityImage.X}}} {{{List_Size_ActivityImage.Y}}}" pos="{{{List_Pos_ActivityImage.X}}} {{{List_Pos_ActivityImage.Y}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" halign="left" valign="center" keepratio="clip" z-index="2"/>
	<label id="label-name" translate="1" filter-profanities="Always" size="{{{List_Size_Activity.X * 0.4}}} {{{List_Size_Activity.Y}}}" pos="{{{List_Pos_ActivityName.X}}} {{{List_Pos_ActivityName.Y}}}" class="text-bold" halign="left" opacity="0.6" z-index="2"/>
	<label id="label-type" size="{{{List_Size_Activity.X * 0.3}}} {{{List_Size_Activity.Y}}}" pos="{{{List_Pos_ActivityType.X}}} {{{List_Pos_ActivityType.Y}}}" class="text-semibold" halign="right" opacity="0.6" z-index="2"/>
	<label id="label-id" size="{{{List_Size_Activity.X * 0.1}}} {{{List_Size_Activity.Y}}}" pos="{{{List_Pos_ActivityId.X}}} {{{List_Pos_ActivityId.Y}}}" class="text-semibold" opacity=".6" z-index="2"/>
	<quad id="quad-private" size="5 5" halign="left" pos="{{{List_Pos_ActivityName.X + List_Size_Activity.X * 0.4 + Offset_TwoIcons}}} {{{-List_Size_Activity.Y*0.5}}}" image="{{{Icons::C_Icon_128x128_Lock_Oblique}}}" colorize="FFF" class="quad-default" opacity="0.6" hidden="1" z-index="2"/>
	<quad id="quad-featured" size="6 6" halign="left" pos="{{{List_Pos_ActivityName.X + List_Size_Activity.X * 0.4 + Offset_OneIcon}}} {{{-List_Size_Activity.Y*0.5}}}" image="{{{Icons::C_Icon_128x128_Settings_Star_Inc}}}" colorize="FFF" class="quad-default" opacity="0.6" hidden="1" z-index="2"/>
	<quad id="quad-hitbox-club" size="{{{List_Size_Activity.X}}} {{{List_Size_Activity.Y}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}"/>
</framemodel>

<!-- Frame global -->
<frame id="frame-global" z-index="{{{Const::C_ZIndex_ClubAdministration}}}">
	<frameinstance id="frame-loading-spinner" modelid="{{{LoadingSpinner::C_Name}}}" data-label="{{{Text_RetrievingActivities}}}" />
	<label id="label-message" pos="0 -73" size="200 10" class="text-semibold" textprefix="$i"/>
	<label id="label-scrollviews-infos" size="150 10" textsize="4" textprefix="$i" class="text-semibold" autonewline="1"/>
	<quad id="quad-page-background" image="{{{Const::C_ImageUrl_Club_Background_Default}}}" z-index="-1" size="320 180" fullscreen="1" halign="center" valign="center" scriptevents="1"/>
	<!-- Activity options pop up-->
	<frameinstance
		modelid="{{{PopUpMultiChoice::C_Name}}}"
		id="frame-multichoice"
		z-index="5"
		data-styles-secondchoice="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_ButtonWarning}}}"
		data-close-after-selection="0"
		hidden="1"
	/>

	<!-- Frame Club Infos (name, icon, edit-club button) -->
	<frame id="frame-club-infos-left-corner" pos="{{{Pos_ClubInfos_Default.X}}} {{{Pos_ClubInfos_Default.Y}}}" z-index="2">
		<quad id="quad-club-icon" pos="-2 0" size="{{{ClubIconSize.X}}} {{{ClubIconSize.Y}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip"/>
		<label id="label-club-name" pos="51.5 1.5" size="150 10" halign="left" valign="top" class="text-bold" textsize="10" italicslope=".2" filter-profanities="OnlyIfNotTranslated" />
		<label id="label-administration" pos="51.25 -12" text="{{{Text_Administration}}}" halign="left" size="70 10" class="text-bold"/>
		<frameinstance
			id="button-edit-club"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			pos="50 -19.5"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}}"
			data-halign="left"
			data-text="{{{Text_EditClub}}}"
			data-height="7"
			data-text-textsize="2"
			data-nav-inputs="down;select;cancel"
			data-nav-targets="frame-scroll-activities-grid;_;_"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
		<label id="label-moving-actis" pos="47.5 -31" size="200 10" halign="left" class="text-bold"/>
	</frame>


	<!-- Title Bar Club/Archived activities-->
	<frameinstance
		id="frame-titlebar" z-index="2"
		pos="8.75 38.5"
		modelid="{{{TitleBar::C_Name}}}"
		data-size="{{{ScrollConfig.WindowSize.X}}} 10"
		data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}"
		data-actions="{{{TL::MLEncode(Grid_Actions.tojson())}}}"
		data-tabs-max-width="210"
	/>

	<!-- Scroll view grid -->
	<frame id="frame-scroll-view-grid" z-index="1">
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-activities-grid" z-index="1" />
		<frame
			id="frame-scroll-activities-grid"
			pos="{{{- 0.485 * ScrollConfig.WindowSize.X}}} 31"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
			data-pager-page-size="{{{Grid_ActivitiesPerPage*2}}}"
			data-elements-per-line="{{{Grid_ColumnsNb}}}"
			data-element-size="{{{Grid_Size_Activity.X}}} {{{Grid_Size_Activity.Y}}}"
			data-margin-size="{{{Grid_Size_ActivityMargin.X}}} {{{Grid_Size_ActivityMargin.Y}}}"
			data-scroll-indicator-x-offset="-12.6"
			data-scrollbar-xoffset="5.3"
			data-scroll-locked="1"
			data-nav-inputs="up;down"
			data-nav-targets="button-edit-club;button-back"
			data-nav-group="{{{C_NavGroupName}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}"/>
			{{{ML_Grid_Activities}}}
		</frame>
	</frame>

	<!-- Scroll view list -->
	<frame id="frame-scroll-view-list" z-index="1" hidden="1">
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-activities-list" z-index="1" />
		<frame
			id="frame-scroll-activities-list"
			pos="{{{- 0.476 * ScrollConfig.WindowSize.X}}} 31"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
			data-pager-page-size="{{{List_ActivitiesPerPage*2}}}"
			data-elements-per-line="{{{List_ColumnsNb}}}"
			data-element-size="{{{List_Size_Activity.X}}} {{{List_Size_Activity.Y}}}"
			data-margin-size="{{{List_Size_ActivityMargin.X}}} {{{List_Size_ActivityMargin.Y}}}"
			data-scroll-indicator-x-offset="-15"
			data-scrollbar-xoffset="3"
			data-scroll-locked="1"
			data-nav-inputs="up;down"
			data-nav-targets="button-edit-club;button-back"
			data-nav-group="{{{C_NavGroupName}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_List_Activities}}}
		</frame>
	</frame>

	<!-- Footer -->
	<frameinstance
		id="button-back"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		pos="-151.5 -73"
		z-index="2"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;up;right"
		data-nav-targets="_;_;frame-scroll-activities-grid;frame-scroll-activities-grid"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as Http
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as Config
#Include "Libs/Nadeo/Trackmania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/Trackmania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo

#Const C_ScrollView_List {{{dump(C_ScrollView_List)}}}
#Const C_ScrollView_Grid {{{dump(C_ScrollView_Grid)}}}

#Const C_Activity_NullKey -1

#Const C_ChoiceListName_CreateActivity {{{dump(C_ChoiceListName_CreateActivity)}}}
#Const C_ChoiceListName_EditHomeActivity {{{dump(C_ChoiceListName_EditHomeActivity)}}}
#Const C_ChoiceListName_EditArchivedActivity {{{dump(C_ChoiceListName_EditArchivedActivity)}}}
#Const C_ChoiceListName_DefaultChoices {{{dump(C_ChoiceListName_DefaultChoices)}}}

#Const C_Choice_Activity_Move {{{dump(C_Choice_Activity_Move)}}}
#Const C_Choice_Activity_Activation {{{dump(C_Choice_Activity_Activation)}}}
#Const C_Choice_Activity_Edit {{{dump(C_Choice_Activity_Edit)}}}
#Const C_Choice_Activity_Remove {{{dump(C_Choice_Activity_Remove)}}}
#Const C_Choice_Activity_Privacy {{{dump(C_Choice_Activity_Privacy)}}}
#Const C_Choice_Activity_Feature {{{dump(C_Choice_Activity_Feature)}}}

#Const C_ChoiceLists {{{dump(ChoiceLists)}}}

#Const C_Label_SetPublic _("Set public")
#Const C_Label_Unfeature _("Unfeature")

#Const C_Tab_HomeActivities 0
#Const C_Tab_ArchivedActivities 1

//L16N Title of the pop-up to create a club activity
#Const C_CreateActiPopUp_Title _("Create activity")

//L16N [Club Activity] The admin players need to confirm they want to remove a club activity
#Const C_RemoveActiPopUp_Description _("Are you sure you want to remove this club activity?")
//L16N [Club Activity] Action to remove an activity within a club in the club administration. The activity will be deleted from the club.
#Const C_RemoveActiPopUp_Choices [0 => _("Cancel"), 1 => _("Remove")]
#Const C_DeleteActiPopUp_ChoiceIndex_Cancel 0
#Const C_RemoveActiPopUp_ChoiceIndex_Delete 1

#Const C_PopUpClubActiIndex 0
#Const C_PopUpRemoveActiIndex 1
#Const C_PopUpArchivedActiIndex 2
#Const C_PopUpCreateActiIndex 3

#Struct K_SelectedActivity {
	Integer Key;
	Integer Id;
}

#Struct K_ScrollView {
	CMlFrame Frame_ScrollActivities;
	CMlFrame Frame_ScrollView_Grid;
	CMlFrame Frame_ScrollView_List;
	CMlFrame Frame_TitleBar;
	Text CurrentLayout;
}

#Struct K_Controls {
	CMlFrame Frame_TitleBar;
	CMlFrame Button_EditClub;
	CMlFrame Button_Back;
	CMlFrame Frame_Global;
	CMlFrame Frame_LoadingSpinner;
	CMlFrame Frame_MultiChoice;
	CMlQuad Quad_ClubBackground;
	CMlFrame Frame_ClubInfos_Left;
	CMlLabel Label_ClubName;
	CMlQuad Quad_ClubIcon;
	CMlLabel Label_Message;
	CMlLabel Label_MovingActis;
	CMlLabel Label_ScrollViewInfos;
}

#Struct K_State {
	Integer Tab_Displayed;
	Http::K_Request GetBucketActivityRequest;
	Ident Task_ResetActivityIdForItemCollectionId;
	Integer ActivityIdToDelete;
	Boolean IsMovingActivities;
	Text[] PopUpActivityOptions;
	CMlFrame LastSelectedActivity;
	K_ScrollView ScrollView;
	K_Controls Controls;
}
""",
"""
Void DisplayLoading(CMlFrame _Frame_LoadingSpinner, CMlFrame _Frame_ScrollActivities, Text _Message) {
	if (_Frame_LoadingSpinner == Null || _Frame_ScrollActivities == Null) return;

	if (_Message != "") {
		_Frame_ScrollActivities.Hide();
		{{{Scroll::P}}}Unfocus(This, _Frame_ScrollActivities);
		{{{Scroll::P}}}SetElementsTotal(This, _Frame_ScrollActivities, 0, False);
		{{{Scroll::P}}}LockNavigation(_Frame_ScrollActivities, True);
		{{{LoadingSpinner::P}}}StartAnimation(This, _Frame_LoadingSpinner, _Message);
	} else if ({{{LoadingSpinner::P}}}IsLoading(_Frame_LoadingSpinner)) { // need to check this, otherwise we wight unlock the scroll when it's not wanted (see tmnext/-/issues/5722)
		_Frame_ScrollActivities.Show();
		{{{Scroll::P}}}LockNavigation(_Frame_ScrollActivities, False);
		{{{LoadingSpinner::P}}}StopAnimation(This, _Frame_LoadingSpinner);
	}
}

Void SetControllerInfos(Boolean _IsLocked, Boolean _IsMovingActivities) {
	if (!_IsLocked) {
		if (_IsMovingActivities) ControllerInfo::SetButtons(["A" => _("Swap"), "B" => _("Cancel")]);
		else ControllerInfo::SetButtons(["A" => _("Select"), "B" => _("Back"), "Action2" => C_CreateActiPopUp_Title]);
	}	else {
		ControllerInfo::SetButtons(["A" => _("Select"), "B" => _("Back")]);
	}
}

Void LockNavigation(K_State _State, Boolean _IsLocked) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !_IsLocked);
	{{{Scroll::P}}}LockNavigation(_State.ScrollView.Frame_ScrollActivities, _IsLocked);
	{{{TitleBar::P}}}LockNavigation(_State.ScrollView.Frame_TitleBar, _IsLocked || _State.IsMovingActivities);
	SetControllerInfos(_IsLocked, _State.IsMovingActivities);
}

Void FocusActivity(CMlFrame _Frame_Activity, Text _ScrollViewLayout, Integer _SelectedActivityKey, Boolean _Focused, Boolean _IsMovingActivities) {
	if (_Frame_Activity == Null) return;

	declare Integer ActivityKey for _Frame_Activity;

	switch (_ScrollViewLayout) {
		case C_ScrollView_Grid: {
			declare CMlLabel Label_Name <=> (_Frame_Activity.GetFirstChild("label-name") as CMlLabel);
			declare CMlLabel Label_Type <=> (_Frame_Activity.GetFirstChild("label-type") as CMlLabel);
			declare CMlLabel Label_Id <=> (_Frame_Activity.GetFirstChild("label-id") as CMlLabel);
			declare CMlQuad Quad_Private <=> (_Frame_Activity.GetFirstChild("quad-private") as CMlQuad);
			declare CMlQuad Quad_Featured  <=> (_Frame_Activity.GetFirstChild("quad-featured") as CMlQuad);
			declare CMlQuad Quad_Contour <=> (_Frame_Activity.GetFirstChild("quad-contour") as CMlQuad);
			declare CMlQuad Quad_Gradient <=> (_Frame_Activity.GetFirstChild("quad-gradient") as CMlQuad);

			AnimMgr.Flush(Label_Name);
			AnimMgr.Flush(Label_Type);
			AnimMgr.Flush(Label_Id);
			AnimMgr.Flush(Quad_Private);
			AnimMgr.Flush(Quad_Featured);
			AnimMgr.Flush(Quad_Contour);
			AnimMgr.Flush(Quad_Gradient);
			if (_Focused) {
				AnimMgr.Add(Label_Name, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Type, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Id, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Private, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Featured, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				declare Real LabelUnfocusOpacity = 0.7;
				declare Real GradientUnfocusOpacity = 0.7;
				if (_IsMovingActivities && _SelectedActivityKey != C_Activity_NullKey && _SelectedActivityKey == ActivityKey) {
					LabelUnfocusOpacity = 1.;
					GradientUnfocusOpacity = 0.4;
					AnimMgr.Add(Quad_Contour, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				} else {
					AnimMgr.Add(Quad_Contour, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				}
				AnimMgr.Add(Label_Name, "<anim opacity=\""^LabelUnfocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Type, "<anim opacity=\""^LabelUnfocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Id, "<anim opacity=\""^LabelUnfocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Private, "<anim opacity=\""^LabelUnfocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Featured, "<anim opacity=\""^LabelUnfocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\""^GradientUnfocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
		case C_ScrollView_List: {
			declare CMlFrame Frame_Background <=> (_Frame_Activity.GetFirstChild("frame-background") as CMlFrame);
			declare CMlFrame Frame_Contour <=> (_Frame_Activity.GetFirstChild("frame-contour") as CMlFrame);
			declare CMlLabel Label_Name <=> (_Frame_Activity.GetFirstChild("label-name") as CMlLabel);
			declare CMlLabel Label_Type <=> (_Frame_Activity.GetFirstChild("label-type") as CMlLabel);
			declare CMlLabel Label_Id <=> (_Frame_Activity.GetFirstChild("label-id") as CMlLabel);
			declare CMlQuad Quad_Private <=> (_Frame_Activity.GetFirstChild("quad-private") as CMlQuad);
			declare CMlQuad Quad_Featured  <=> (_Frame_Activity.GetFirstChild("quad-featured") as CMlQuad);

			AnimMgr.Flush(Label_Name);
			AnimMgr.Flush(Label_Type);
			AnimMgr.Flush(Label_Id);
			AnimMgr.Flush(Quad_Private);
			AnimMgr.Flush(Quad_Featured);
			if (_Focused) {
				AnimMgr.Add(Label_Name, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Type, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Id, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Private, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Featured, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, 1.);
			} else {
				declare Real UnfocusOpacity = 0.6;
				if (_IsMovingActivities && _SelectedActivityKey != C_Activity_NullKey && _SelectedActivityKey == ActivityKey) {
					UnfocusOpacity = 1.;
					{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Contour, 1.);
				} else {
					{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Contour, 0.);
				}
				AnimMgr.Add(Label_Name, "<anim opacity=\""^UnfocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Type, "<anim opacity=\""^UnfocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Id, "<anim opacity=\""^UnfocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Private, "<anim opacity=\""^UnfocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Featured, "<anim opacity=\""^UnfocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, UnfocusOpacity);
			}
		}
	}
}

Void ShowActivity(CMlFrame _Frame_Activity, {{{ClubStruct::P}}}K_Activity _Activity, Text _ScrollViewLayout, Integer _SelectedActivityKey, Boolean _IsMovingActivities) {
	declare CMlLabel Label_Name <=> (_Frame_Activity.GetFirstChild("label-name") as CMlLabel);
	declare CMlLabel Label_Type <=> (_Frame_Activity.GetFirstChild("label-type") as CMlLabel);
	declare CMlLabel Label_Id <=> (_Frame_Activity.GetFirstChild("label-id") as CMlLabel);
	declare CMlQuad Quad_Image <=> (_Frame_Activity.GetFirstChild("quad-image") as CMlQuad);
	declare CMlQuad Quad_Contour <=> (_Frame_Activity.GetFirstChild("quad-contour") as CMlQuad);
	declare CMlQuad Quad_Featured <=> (_Frame_Activity.GetFirstChild("quad-featured") as CMlQuad);
	declare CMlQuad Quad_Private <=> (_Frame_Activity.GetFirstChild("quad-private") as CMlQuad);
	declare CMlQuad Quad_Gradient <=> (_Frame_Activity.GetFirstChild("quad-gradient") as CMlQuad);
	declare Integer ActivityKey for _Frame_Activity;

	/* Common */
	_Frame_Activity.Visible = True;
	Label_Name.SetText(_Activity.Name);
	Label_Type.SetText({{{ClubStruct::P}}}GetActivityDisplayName(_Activity.Type));
	Label_Id.SetText("#"^_Activity.Id);
	Quad_Featured.Visible = _Activity.Featured;
	Quad_Private.Visible = !_Activity.Public;
	if (_Activity.MediaUrl != "" && Http.IsValidUrl(_Activity.MediaUrl)) {
		Quad_Image.ChangeImageUrl(_Activity.MediaUrl);
	} else {
		Quad_Image.ChangeImageUrl("{{{Const::C_ImageUrl_ClubActivity_Default}}}");
	}
	Tools::FitLabelValue(Label_Name, 3., 1.5, 0.25);

	switch (_ScrollViewLayout) {
		case C_ScrollView_List: {
			declare CMlFrame Frame_Background <=> (_Frame_Activity.GetFirstChild("frame-background") as CMlFrame);
			declare CMlFrame Frame_Contour <=> (_Frame_Activity.GetFirstChild("frame-contour") as CMlFrame);

			declare Real LabelWidth = ML::Min(Label_Name.ComputeWidth(Label_Name.Value, True), Label_Name.Size.X);
			if (Quad_Featured.Visible && Quad_Private.Visible) {
				Quad_Featured.RelativePosition_V3.X = LabelWidth + {{{List_Pos_ActivityName.X}}} + {{{Offset_OneIcon}}};
				Quad_Private.RelativePosition_V3.X = LabelWidth + {{{List_Pos_ActivityName.X}}} + {{{Offset_TwoIcons}}};
			} else if (Quad_Private.Visible) {
				Quad_Private.RelativePosition_V3.X = LabelWidth + {{{List_Pos_ActivityName.X}}} + {{{Offset_OneIcon}}};
			} else if (Quad_Featured.Visible) {
				Quad_Featured.RelativePosition_V3.X = LabelWidth + {{{List_Pos_ActivityName.X}}} + {{{Offset_OneIcon}}};
			}

			if (_IsMovingActivities && _SelectedActivityKey != C_Activity_NullKey && _SelectedActivityKey == ActivityKey) {
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, 1.);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Contour, 1.);
				Label_Name.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
				Label_Id.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
				Label_Type.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
				AnimMgr.Add(Label_Name, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Type, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Id, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Private, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Featured, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, 0.6);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Contour, 0.);
				Label_Name.TextColor =  <1., 1., 1.>;
				Label_Id.TextColor = <1., 1., 1.>;
				Label_Type.TextColor = <1., 1., 1.>;
			}
		}
		case C_ScrollView_Grid: {
			if (Quad_Featured.Visible && Quad_Private.Visible) {
				Quad_Featured.RelativePosition_V3.X = {{{Grid_Pos_ActivityFeatured.X}}};
				Quad_Private.RelativePosition_V3.X = {{{Grid_Pos_ActivityPrivate.X}}};
			} else if (Quad_Private.Visible) {
				Quad_Private.RelativePosition_V3.X = {{{Grid_Pos_ActivityFeatured.X}}};
			} else if (Quad_Featured.Visible) {
				Quad_Featured.RelativePosition_V3.X = {{{Grid_Pos_ActivityFeatured.X}}};
			}

			AnimMgr.Flush(Quad_Contour);
			if (_IsMovingActivities && _SelectedActivityKey != C_Activity_NullKey && _SelectedActivityKey == ActivityKey) {
				Quad_Contour.Colorize = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
				Label_Name.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
				Label_Type.TextColor = {{{dump(Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne))}}};
				AnimMgr.Add(Label_Name, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Type, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Id, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Private, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Featured, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				Quad_Contour.Colorize = <1., 1., 1.>;
				Label_Name.TextColor =  <1., 1., 1.>;
				Label_Type.TextColor = <1., 1., 1.>;
			}
		}
	}
}

Void ShowActivityLoading(CMlFrame _Frame_Activity, Text _ScrollViewLayout) {
	declare CMlLabel Label_Name <=> (_Frame_Activity.GetFirstChild("label-name") as CMlLabel);
	declare CMlLabel Label_Type <=> (_Frame_Activity.GetFirstChild("label-type") as CMlLabel);
	declare CMlLabel Label_Id <=> (_Frame_Activity.GetFirstChild("label-id") as CMlLabel);
	declare CMlQuad Quad_Image <=> (_Frame_Activity.GetFirstChild("quad-image") as CMlQuad);
	declare CMlQuad Quad_Private <=> (_Frame_Activity.GetFirstChild("quad-private") as CMlQuad);
	declare CMlQuad Quad_Featured <=> (_Frame_Activity.GetFirstChild("quad-featured") as CMlQuad);

	/* Common */
	_Frame_Activity.Visible = True;
	Label_Name.SetText("{{{Text_Retrieving}}}");
	Label_Type.SetText("");
	Label_Id.SetText("");
	Quad_Private.Hide();
	Quad_Featured.Hide();
	Quad_Image.ChangeImageUrl("");
	Tools::FitLabelValue(Label_Name, 3., 1.5, 0.25);
}

Void HideActivity(CMlFrame _Frame_Activity) {
	_Frame_Activity.Visible = False;
}

Void SelectChoiceCreate(Text _Choice) {
	if (_Choice != {{{ClubStruct::P}}}C_ClubActivity_Ad) {{{Scroll::P}}}LockNavigation(This, True);
	switch (_Choice) {
		case {{{ClubStruct::P}}}C_ClubActivity_Campaign: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateCampaign}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateCampaign}}}", True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_Room: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateRoom}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateRoom}}}", True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_SkinUpload: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateBucketActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateBucketActivity}}}", ["{{{RoutePaths::C_Query_BucketActivityType}}}" => {{{ClubStruct::P}}}C_ClubActivity_SkinUpload], True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_MapUpload: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateBucketActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateBucketActivity}}}", ["{{{RoutePaths::C_Query_BucketActivityType}}}" => {{{ClubStruct::P}}}C_ClubActivity_MapUpload], True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_ItemUpload: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateClubItemsActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateClubItemsActivity}}}", ["{{{RoutePaths::C_Query_BucketActivityType}}}" => {{{ClubStruct::P}}}C_ClubActivity_ItemUpload], True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_News: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateNews}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateNews}}}", True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_MapReview: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateMapReviewActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateMapReviewActivity}}}", True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_Competition: {
			OpenLink(Config::Get().WebsiteAdminClubUrl^{{{ClubStruct::P}}}C_CreateCompetition_Link, CMlScript::LinkType::ExternalBrowser);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_RankingClub: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateRankingsActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateRankingsActivity}}}", True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_Ad: {
			declare Text Link = TL::Replace(Config::Get().WebsitePlayersPageUrl^{{{ClubStruct::P}}}C_CreateAdvertisement_Link, {{{ClubStruct::P}}}C_ActivityLink_ToReplace_ClubId, ""^{{{ClubStore::P}}}GetUserCurrentClub().Id);
			OpenLink(Link, CMlScript::LinkType::ExternalBrowser);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_Team: {
			declare Text Link = TL::Replace(Config::Get().WebsitePlayersPageUrl^{{{ClubStruct::P}}}C_CreateTeam_Link, {{{ClubStruct::P}}}C_ActivityLink_ToReplace_ClubId, ""^{{{ClubStore::P}}}GetUserCurrentClub().Id);
			OpenLink(Link, CMlScript::LinkType::ExternalBrowser);
		}
	}
}

Void UpdateActivityPrivacy(Integer _ClubActivityKey) {
	declare Integer UserCurrentClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;
	declare ClubActivities = {{{ClubStore::P}}}GetClubActivities(UserCurrentClubId);
	if (ClubActivities.existskey(_ClubActivityKey)) {
		declare ClubActivity = ClubActivities[_ClubActivityKey];
		{{{ClubStore::P}}}Action_ActivityUpdatePrivacy(This, UserCurrentClubId, ClubActivity.Id, !ClubActivity.Public);
	}
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Scroll::P}}}IsScroll(_From)) {
			{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Scroll::P}}}IsScroll(_To)) {
			{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void FocusAvailableControl(K_State _State) {
	if ({{{Scroll::P}}}GetElementsTotal(_State.ScrollView.Frame_ScrollActivities) > 0) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _State.ScrollView.Frame_ScrollActivities);
	} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_Back)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _State.Controls.Button_Back);
	}
}

K_State UpdateTitleBarAndScrollView(K_State _State) {
	declare K_State State = _State;

	/* Update title bar */
	declare {{{TitleBar::P}}}K_Actions[Integer] Actions;
	switch (State.ScrollView.CurrentLayout) {
		case C_ScrollView_List: {
			Actions.fromjson({{{"\"\"\""^List_Actions.tojson()^"\"\"\""}}});
		}
		case C_ScrollView_Grid: {
			Actions.fromjson({{{"\"\"\""^Grid_Actions.tojson()^"\"\"\""}}});
		}
	}
	{{{TitleBar::P}}}SetActions(State.ScrollView.Frame_TitleBar, Actions);

	/* Update scrolls visibility */
	State.ScrollView.Frame_ScrollActivities <=> (State.Controls.Frame_Global.GetFirstChild("frame-scroll-activities-"^State.ScrollView.CurrentLayout) as CMlFrame);
	State.ScrollView.Frame_ScrollView_Grid.Visible = State.ScrollView.CurrentLayout == C_ScrollView_Grid;
	State.ScrollView.Frame_ScrollView_List.Visible = State.ScrollView.CurrentLayout == C_ScrollView_List;

	/* Update control targets */
	{{{Navigation::P}}}ChangeControlTargets(This, State.Controls.Button_Back, ["right", "up"], [State.ScrollView.Frame_ScrollActivities.ControlId, State.ScrollView.Frame_ScrollActivities.ControlId]);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_EditClub, "down", State.ScrollView.Frame_ScrollActivities.ControlId);

	return State;
}

K_State SwitchScrollViewLayout(K_State _State) {
	declare K_State State = _State;
	declare CMlControl TrueTarget;
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
	declare Integer ScrollViewElementKey = {{{Scroll::P}}}GetFocusedElementKey(State.ScrollView.Frame_ScrollActivities);
	declare Vec2 ScrollOffset = State.ScrollView.Frame_ScrollActivities.ScrollOffset;

	/* Lock previous scroll view */
	LockNavigation(State, True);

	/* Switch between ScrollView layouts */
	switch (State.ScrollView.CurrentLayout) {
		case C_ScrollView_List: State.ScrollView.CurrentLayout = C_ScrollView_Grid;
		case C_ScrollView_Grid: State.ScrollView.CurrentLayout = C_ScrollView_List;
	}
	State = UpdateTitleBarAndScrollView(State);

	/* Unlock current scroll view */
	LockNavigation(State, False);

	/* Transfer FocusedControl from previous scroll to the current scroll */
	{{{Scroll::P}}}Unfocus(This, State.ScrollView.Frame_ScrollActivities);
	{{{Scroll::P}}}ScrollToPosition(This, State.ScrollView.Frame_ScrollActivities, ScrollOffset.Y, False);
	if (FocusedControl != Null) {
		if (TL::StartsWith("frame-scroll-activities-", FocusedControl.ControlId)) {
			FocusedControl = State.ScrollView.Frame_ScrollActivities;
			{{{Scroll::P}}}ScrollToElement(This, State.ScrollView.Frame_ScrollActivities, ScrollViewElementKey, True);
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), FocusedControl);
		}
	}

	/* Update scroll */
	{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);

	return State;
}

K_State UpdateTabDisplayed(K_State _State, Integer _Tab_Displayed) {
	declare K_State State = _State;
	declare Integer CurrentClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;

	State.Tab_Displayed = _Tab_Displayed;
	{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
	DisplayLoading(_State.Controls.Frame_LoadingSpinner, State.ScrollView.Frame_ScrollActivities, "{{{Text_RetrievingActivities}}}");
	_State.Controls.Label_Message.Value = "";

	return State;
}

K_State SetIsMovingActivities(K_State _State, Boolean _IsMoving, Text _ActivityName) {
	declare K_State State = _State;

	State.IsMovingActivities = _IsMoving;
	if (State.IsMovingActivities) {
		State.Controls.Label_MovingActis.Value = TL::Compose("{{{Text_MoveActivitiesExplanation}}}", "$<"^FilterProfanities(TL::GetTranslatedText(_ActivityName))^"$>");
	} else {
		State.Controls.Label_MovingActis.Value = "";
		FocusActivity(State.LastSelectedActivity, State.ScrollView.CurrentLayout, C_Activity_NullKey, False, False);
	}

	LockNavigation(State, False);

	return State;
}

K_State Select(CMlControl _Control, K_State _State, CMlFrame _Frame_Global) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare State = _State;

	switch (_Control.ControlId) {
		case "button-back": {
			if (State.IsMovingActivities) {
				State = SetIsMovingActivities(State, False, "");
				{{{Scroll::P}}}SetElementsTotal(This, State.ScrollView.Frame_ScrollActivities, {{{ClubStore::P}}}GetClubActivitiesTotal({{{ClubStore::P}}}GetUserCurrentClub().Id), False);
			}	else {
				{{{Router::P}}}PushParent(This);
			}
		}
		case "button-edit-club": {
			declare ClubMembership = {{{ClubStore::P}}}GetUserCurrentClubMembership();
			if (RBAC::HasClubPermission(ClubMembership, RBAC::C_ClubPermission_Administration)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateClub}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateClub}}}", ["{{{RoutePaths::C_Query_EditMode}}}" => "1"]);
			}
		}
	}

	return State;
}

Void EditActivity({{{ClubStruct::P}}}K_Activity _Activity) {
	{{{Scroll::P}}}LockNavigation(This, True);
	if (_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_Room) {
		{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateRoom}}}", {{{Router::P}}}GetCurrentRoutePath(This));
		{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateRoom}}}", ["{{{RoutePaths::C_Query_Activity}}}" => _Activity.tojson()], True);
	} else if (_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_Campaign) {
		{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateCampaign}}}", {{{Router::P}}}GetCurrentRoutePath(This));
		{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateCampaign}}}", ["{{{RoutePaths::C_Query_Activity}}}" => _Activity.tojson()], True);
	} else if (_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_MapUpload || _Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_SkinUpload) {
		{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateBucketActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
		{{{Router::P}}}Push(This,
			"{{{RoutePaths::C_Path_CreateBucketActivity}}}",
			["{{{RoutePaths::C_Query_Activity}}}" => _Activity.tojson(), "{{{RoutePaths::C_Query_BucketActivityType}}}" => _Activity.Type],
			True
		);
	} else if (_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_ItemUpload) {
		{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateClubItemsActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
		{{{Router::P}}}Push(This,
			"{{{RoutePaths::C_Path_CreateClubItemsActivity}}}",
			["{{{RoutePaths::C_Query_Activity}}}" => _Activity.tojson(), "{{{RoutePaths::C_Query_BucketActivityType}}}" => _Activity.Type],
			True
		);
	} else if (_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_News) {
		{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateNews}}}", {{{Router::P}}}GetCurrentRoutePath(This));
		{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateNews}}}", ["{{{RoutePaths::C_Query_Activity}}}" => _Activity.tojson()], True);
	} else if (_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_MapReview) {
		{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateMapReviewActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
		{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateMapReviewActivity}}}", ["{{{RoutePaths::C_Query_Activity}}}" => _Activity.tojson()], True);
	} else if (
		_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingOfficial ||
		_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingDaily ||
		_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingClub
	) {
		{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateRankingsActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
		{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateRankingsActivity}}}", ["{{{RoutePaths::C_Query_Activity}}}" => _Activity.tojson()], True);
	}
}

// When deleting an activity, we need to reset the ActivityId for the ItemCollection stocked by CORE
// To do that we must retrieve the ItemCollectionId first
K_State ResetActivityIdForItemCollection(K_State _State, Integer _ClubId, Integer _ActivityId) {
	declare K_State State = _State;
	if (Http::IsInitialized(State.GetBucketActivityRequest)) {
		State.GetBucketActivityRequest = Http::Destroy(State.GetBucketActivityRequest);
	}
	State.ActivityIdToDelete = _ActivityId;
	State.GetBucketActivityRequest = ClubAPI::GetBucketActivity(_ClubId, State.ActivityIdToDelete, 0, 1);
	return State;
}

K_SelectedActivity SetSelectedActivity(Integer _Key, {{{ClubStruct::P}}}K_Activity _Activity) {
	return K_SelectedActivity {
		Key = _Key,
		Id = _Activity.Id
	};
}

K_SelectedActivity ResetSelectedActivity() {
	return SetSelectedActivity(C_Activity_NullKey, {{{ClubStruct::P}}}GetEmptyActivity());
}

Boolean HasSelectedActivity(K_SelectedActivity _SelectedActivity) {
	return _SelectedActivity.Key != C_Activity_NullKey;
}

Void UpdateClubInfos(K_State _State, {{{ClubStruct::P}}}K_Club _Club) {
	_State.Controls.Label_ClubName.Value = _Club.Name;
	if (Http.IsValidUrl(_Club.IconUrl)) {
		_State.Controls.Quad_ClubIcon.ChangeImageUrl(_Club.IconUrl);
		_State.Controls.Frame_ClubInfos_Left.RelativePosition_V3.X = {{{Pos_ClubInfos_Default.X}}};
	} else {
		_State.Controls.Quad_ClubIcon.ChangeImageUrl("");
		_State.Controls.Frame_ClubInfos_Left.RelativePosition_V3.X = {{{Pos_ClubInfos_WithoutIcon.X}}};
	}
	if (_Club.BgUrl != "" && Http.IsValidUrl(_Club.BgUrl)) {
		if (_State.Controls.Quad_ClubBackground.ImageUrl != _Club.BgUrl) {
			_State.Controls.Quad_ClubBackground.ChangeImageUrl(_Club.BgUrl);
		}
	} else if (_State.Controls.Quad_ClubBackground.ImageUrl != "{{{Const::C_ImageUrl_Club_Background_Default}}}") {
		_State.Controls.Quad_ClubBackground.ChangeImageUrl("{{{Const::C_ImageUrl_Club_Background_Default}}}");
	}
}

K_State OpenClubActivityPopUp(K_State _State, {{{ClubStruct::P}}}K_Activity _Activity) {
	declare K_State State = _State;

	declare Text[Text] ChoiceList = C_ChoiceLists[C_ChoiceListName_EditHomeActivity];
	if (!_Activity.Public) {
		ChoiceList[C_Choice_Activity_Privacy] = C_Label_SetPublic;
	}
	if (_Activity.Featured) {
		ChoiceList[C_Choice_Activity_Feature] = C_Label_Unfeature;
	}
	// Competitions edition not implemetend in CLUB API yet (see /trackmania-next/tmnext/-/issues/3263)
	// Advertisements edition not implemetend in LIVE API yet (see /trackmania-next/tmnext/-/issues/3621)
	// Team edition not implemetend in LIVE API yet (see /trackmania-next/tmnext/-/issues/4995)
	if (
			_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_Competition ||
			_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_Ad ||
			_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_Team ||
			!{{{ClubStruct::P}}}C_ClubActivity_DisplayNames.existskey(_Activity.Type)
	) {
		ChoiceList.removekey(C_Choice_Activity_Edit);
	}
	// Team removal not implemetend in LIVE API yet (see /trackmania-next/tmnext/-/issues/4995#note_254388)
	if (_Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_Team) {
		ChoiceList.removekey(C_Choice_Activity_Remove);
	}

	declare Text[Integer] TranslatedActivityOptions;
	State.PopUpActivityOptions.clear();
	declare Integer Index = 0;
	foreach (ActivityId => TranslatedActivity in ChoiceList) {
		TranslatedActivityOptions[Index] = TranslatedActivity;
		State.PopUpActivityOptions.add(ActivityId);
		Index += 1;
	}

	{{{PopUpMultiChoice::P}}}SetTitle(This, _State.Controls.Frame_MultiChoice, FilterProfanities(_Activity.Name), False);
	{{{PopUpMultiChoice::P}}}SetChoices(This, _State.Controls.Frame_MultiChoice, TranslatedActivityOptions, False);
	{{{PopUpMultiChoice::P}}}SetForceScrollView(This, _State.Controls.Frame_MultiChoice, True, False);
	{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _State.Controls.Frame_MultiChoice, False);
	declare Integer PopUpType for _State.Controls.Frame_MultiChoice;
	PopUpType = C_PopUpClubActiIndex;
	{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.Frame_MultiChoice);

	return State;
}

Void OpenDeleteActivityPopUp(K_State _State, Text _ActivityName) {
	{{{PopUpMultiChoice::P}}}SetTitle(This, _State.Controls.Frame_MultiChoice, FilterProfanities(_ActivityName), False);
	{{{PopUpMultiChoice::P}}}SetDescription(This,
		_State.Controls.Frame_MultiChoice,
		[
			{{{PopUpMultiChoice::P}}}CreateDescriptionPart(
				TL::Compose(C_RemoveActiPopUp_Description,
				"$<"^FilterProfanities({{{ClubStore::P}}}GetUserCurrentClub().Name)^"$>"),
				<130., 15.>,
				3.,
				"{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}",
				"$t$i",
				<1., 1., 1.>,
				False
			)
		],
		False
	);
	{{{PopUpMultiChoice::P}}}SetChoices(This, _State.Controls.Frame_MultiChoice, C_RemoveActiPopUp_Choices, False);
	{{{PopUpMultiChoice::P}}}SetForceScrollView(This, _State.Controls.Frame_MultiChoice, False, False);
	{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _State.Controls.Frame_MultiChoice, True);
	declare Integer PopUpType for _State.Controls.Frame_MultiChoice;
	PopUpType = C_PopUpRemoveActiIndex;
	{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.Frame_MultiChoice);
}

K_State OpenArchivedActivityPopUp(K_State _State, {{{ClubStruct::P}}}K_Activity _Activity) {
	declare K_State State = _State;

	declare Text[Text] ChoiceList = C_ChoiceLists[C_ChoiceListName_DefaultChoices];
	declare Text ActivityType = _Activity.Type;
	if (
		ActivityType == {{{ClubStruct::P}}}C_ClubActivity_Room ||
		ActivityType == {{{ClubStruct::P}}}C_ClubActivity_MapUpload ||
		ActivityType == {{{ClubStruct::P}}}C_ClubActivity_SkinUpload ||
		ActivityType == {{{ClubStruct::P}}}C_ClubActivity_MapReview ||
		ActivityType == {{{ClubStruct::P}}}C_ClubActivity_Campaign
	) {
		ChoiceList = C_ChoiceLists[C_ChoiceListName_EditArchivedActivity];
	}

	declare Text[Integer] TranslatedActivityOptions;
	State.PopUpActivityOptions.clear();
	declare Integer Index = 0;
	foreach (ActivityId => TranslatedActivity in ChoiceList) {
		TranslatedActivityOptions[Index] = TranslatedActivity;
		State.PopUpActivityOptions.add(ActivityId);
		Index += 1;
	}

	{{{PopUpMultiChoice::P}}}SetTitle(This, _State.Controls.Frame_MultiChoice, FilterProfanities(_Activity.Name), False);
	{{{PopUpMultiChoice::P}}}SetChoices(This, _State.Controls.Frame_MultiChoice, TranslatedActivityOptions, False);
	{{{PopUpMultiChoice::P}}}SetForceScrollView(This, _State.Controls.Frame_MultiChoice, True, False);
	{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _State.Controls.Frame_MultiChoice, False);
	declare Integer PopUpType for _State.Controls.Frame_MultiChoice;
	PopUpType = C_PopUpArchivedActiIndex;
	{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.Frame_MultiChoice);

	return State;
}

K_State OpenAddActivityPopUp(K_State _State) {
	declare K_State State = _State;

	declare ChoicesListAddActivity = C_ChoiceLists[C_ChoiceListName_CreateActivity];
	if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CreateClubCompetition)) {
		ChoicesListAddActivity.removekey({{{ClubStruct::P}}}C_ClubActivity_Competition);
	}
	if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_UseCustomCollection)) {
		ChoicesListAddActivity.removekey({{{ClubStruct::P}}}C_ClubActivity_ItemUpload);
	}

	declare Text[Integer] TranslatedActivityOptions;
	State.PopUpActivityOptions.clear();
	declare Integer Index = 0;
	foreach (ActivityId => TranslatedActivity in ChoicesListAddActivity) {
		TranslatedActivityOptions[Index] = TranslatedActivity;
		State.PopUpActivityOptions.add(ActivityId);
		Index += 1;
	}

	{{{PopUpMultiChoice::P}}}SetTitle(This, _State.Controls.Frame_MultiChoice, C_CreateActiPopUp_Title, False);
	{{{PopUpMultiChoice::P}}}SetChoices(This, _State.Controls.Frame_MultiChoice, TranslatedActivityOptions, False);
	{{{PopUpMultiChoice::P}}}SetForceScrollView(This, _State.Controls.Frame_MultiChoice, True, False);
	{{{PopUpMultiChoice::P}}}SetForceScrollView(This, _State.Controls.Frame_MultiChoice, True, False);
	{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _State.Controls.Frame_MultiChoice, False);
	declare Integer PopUpType for _State.Controls.Frame_MultiChoice;
	PopUpType = C_PopUpCreateActiIndex;
	{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.Frame_MultiChoice);

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_SelectedActivity SelectedActivity;
declare K_State State;

declare persistent Text Persistent_ScrollViewLayout_ClubActivities for UserMgr.MainUser = "grid";
declare Boolean WasEditingArchivedActivity;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	Tab_Displayed = C_Tab_HomeActivities,
	GetBucketActivityRequest = Http::GetEmptyRequest(),
	Task_ResetActivityIdForItemCollectionId = NullId,
	ActivityIdToDelete = {{{ClubStruct::P}}}C_ActivityNullId,
	IsMovingActivities = False,
	PopUpActivityOptions = [],
	ScrollView = K_ScrollView {
		Frame_ScrollView_Grid = (Frame_Global.GetFirstChild("frame-scroll-view-grid") as CMlFrame),
		Frame_ScrollView_List = (Frame_Global.GetFirstChild("frame-scroll-view-list") as CMlFrame),
		Frame_ScrollActivities = (Frame_Global.GetFirstChild("frame-scroll-activities-"^Persistent_ScrollViewLayout_ClubActivities) as CMlFrame),
		Frame_TitleBar = (Frame_Global.GetFirstChild("frame-titlebar") as CMlFrame),
		CurrentLayout = Persistent_ScrollViewLayout_ClubActivities
	},
	Controls = K_Controls {
		Frame_Global = Frame_Global,
		Button_EditClub = (Frame_Global.GetFirstChild("button-edit-club") as CMlFrame),
		Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
		Frame_LoadingSpinner = (Frame_Global.GetFirstChild("frame-loading-spinner") as CMlFrame),
		Frame_MultiChoice = (Frame_Global.GetFirstChild("frame-multichoice") as CMlFrame),
		Frame_ClubInfos_Left = (Frame_Global.GetFirstChild("frame-club-infos-left-corner") as CMlFrame),
		Quad_ClubBackground = (Frame_Global.GetFirstChild("quad-page-background") as CMlQuad),
		Label_ClubName = (Frame_Global.GetFirstChild("label-club-name") as CMlLabel),
		Quad_ClubIcon = (Frame_Global.GetFirstChild("quad-club-icon") as CMlQuad),
		Label_Message = (Frame_Global.GetFirstChild("label-message") as CMlLabel),
		Label_MovingActis = (Frame_Global.GetFirstChild("label-moving-actis") as CMlLabel),
		Label_ScrollViewInfos = (Frame_Global.GetFirstChild("label-scrollviews-infos") as CMlLabel)
	}
};
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_ClubAdministration}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				State.LastSelectedActivity = Null;
				State = SetIsMovingActivities(State, False, "");
				LockNavigation(State, False);
				SelectedActivity = ResetSelectedActivity();

				// Go back to club activities tab by default (unless we were editing an archived activity)
				if (!WasEditingArchivedActivity) {
					State.Tab_Displayed = C_Tab_HomeActivities;
				} else {
					WasEditingArchivedActivity = False;
				}
				{{{TitleBar::P}}}UpdateCurrentTab(State.ScrollView.Frame_TitleBar, State.Tab_Displayed);

				// Retrieve last persitent scroll view
				State.ScrollView.CurrentLayout = Persistent_ScrollViewLayout_ClubActivities;
				State = UpdateTitleBarAndScrollView(State);

				// Update infos
				UpdateClubInfos(State, {{{ClubStore::P}}}GetUserCurrentClub());
			}
		}
	}

	// Retrieve bucket activity infos (from LIVE) to have the ItemCollectionId
	if (Http::IsInitialized(State.GetBucketActivityRequest)) {
		State.GetBucketActivityRequest = Http::Update(State.GetBucketActivityRequest);
		if (!Http::IsRunning(State.GetBucketActivityRequest)) {
			if (Http::IsSuccess(State.GetBucketActivityRequest)) {
				declare {{{ClubStruct::P}}}K_BucketActivity BucketActivity = ClubAPI::GetResponseFromGetBucketActivity(State.GetBucketActivityRequest);
				if (BucketActivity.BucketItemList.count > 0) {
					if (State.Task_ResetActivityIdForItemCollectionId != NullId) {
						DataFileMgr.TaskResult_Release(State.Task_ResetActivityIdForItemCollectionId);
						State.Task_ResetActivityIdForItemCollectionId = NullId;
					}
					declare CTaskResult Task = DataFileMgr.ItemCollection_SetActivityId(MainUser::GetMainUserId(), BucketActivity.BucketItemList[0].ItemId, "");
					if (Task != Null)	State.Task_ResetActivityIdForItemCollectionId = Task.Id;
					else State.Controls.Label_Message.Value = TL::Compose("{{{Text_ErrorResetCollection}}}", {{{dump(Error::C_Code_CreateCampaign_LiveFailedToResetCollection)}}});
				}
			} else {
				State.Controls.Label_Message.Value = TL::Compose("{{{Text_ErrorResetCollection}}}", ""^Http::GetStatusCode(State.GetBucketActivityRequest));
			}
			State.GetBucketActivityRequest = Http::Destroy(State.GetBucketActivityRequest);
		}
	}

	// Reset Activity Id for Item Collection (from CORE)
	if (State.Task_ResetActivityIdForItemCollectionId != NullId) {
		if (DataFileMgr.TaskResults.existskey(State.Task_ResetActivityIdForItemCollectionId)) {
			declare CTaskResult Task = DataFileMgr.TaskResults[State.Task_ResetActivityIdForItemCollectionId];
			if (Task != Null && !Task.IsProcessing) {
				if (Task is CTaskResult_NSItemCollection) {
					declare CTaskResult_NSItemCollection Task_ResetActivityIdForItemCollection = (Task as CTaskResult_NSItemCollection);
					if (Task_ResetActivityIdForItemCollection.HasSucceeded) {
						{{{ClubStore::P}}}Action_DeleteActivity(This, {{{ClubStore::P}}}GetUserCurrentClub().Id, State.ActivityIdToDelete);
					} else {
						State.Controls.Label_Message.Value = TL::Compose("{{{Text_ErrorResetCollection}}}", Task_ResetActivityIdForItemCollection.ErrorCode);
					}
				}
			}
			if (Task == Null || !Task.IsProcessing) {
				DataFileMgr.TaskResult_Release(State.Task_ResetActivityIdForItemCollectionId);
				State.Task_ResetActivityIdForItemCollectionId = NullId;
			}
		} else {
			State.Controls.Label_Message.Value = TL::Compose("{{{Text_ErrorResetCollection}}}", {{{dump(Error::C_Code_CreateCampaign_CoreFailedToResetCollection)}}});
			State.Task_ResetActivityIdForItemCollectionId = NullId;
		}
	}

	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
			switch (Event.Type) {
				case {{{Navigation::P}}}C_EventType_NavigateInput: {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						State = Select(Event.To, State, Frame_Global);
						SelectedActivity = ResetSelectedActivity();
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						{{{Router::P}}}PushParent(This);
					} else {
						Focus(Event.From, Event.To);
					}
				}
				case {{{Navigation::P}}}C_EventType_NavigateMouse: {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(Event.To, State, Frame_Global);
						SelectedActivity = ResetSelectedActivity();
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* TitleBar events */
	foreach (Event in {{{TitleBar::P}}}PendingEvents) {
		if (Event.TitleBar.Id == State.ScrollView.Frame_TitleBar.Id) {
			switch (Event.Type) {
				case {{{TitleBar::P}}}C_EventType_TabUpdate: {
					State = UpdateTabDisplayed(State, Event.CurrentTab);
				}
				case {{{TitleBar::P}}}C_EventType_Action: {
					switch (Event.Action) {
						case {{{TitleBar::P}}}C_Action_First: {
							State = SwitchScrollViewLayout(State);
							Persistent_ScrollViewLayout_ClubActivities = State.ScrollView.CurrentLayout;
							UserMgr.MainUser.PersistentSave();
						}
						case {{{TitleBar::P}}}C_Action_Second: {
							State = OpenAddActivityPopUp(State);
						}
					}
				}
			}
		}
	}

	/* Pop up multi choice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == State.Controls.Frame_MultiChoice.Id) {
			declare Integer PopUpType for State.Controls.Frame_MultiChoice;
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					if (PopUpType == C_PopUpClubActiIndex && State.PopUpActivityOptions.existskey(Event.SelectedIndex)) {
						declare Integer UserCurrentClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;
						declare ClubActivities = {{{ClubStore::P}}}GetClubActivities(UserCurrentClubId);
						switch (State.PopUpActivityOptions[Event.SelectedIndex]) {
							case C_Choice_Activity_Move: {
								if (HasSelectedActivity(SelectedActivity) && ClubActivities.existskey(SelectedActivity.Key)) {
									State = SetIsMovingActivities(State, True, ClubActivities[SelectedActivity.Key].Name);
									{{{Scroll::P}}}SetElementsTotal(This, State.ScrollView.Frame_ScrollActivities, {{{ClubStore::P}}}GetClubActivitiesTotal({{{ClubStore::P}}}GetUserCurrentClub().Id), False);
									{{{PopUpMultiChoice::P}}}Close(This, State.Controls.Frame_MultiChoice);
								}
							}
							case C_Choice_Activity_Feature: {
								if (HasSelectedActivity(SelectedActivity) && ClubActivities.existskey(SelectedActivity.Key)) {
									declare ClubActivity = ClubActivities[SelectedActivity.Key];
									{{{ClubStore::P}}}Action_UpdateFeaturedActivity(This, UserCurrentClubId, ClubActivity.Id, !ClubActivity.Featured);
								}
								{{{PopUpMultiChoice::P}}}Close(This, State.Controls.Frame_MultiChoice);
							}
							case C_Choice_Activity_Edit: {
								if (HasSelectedActivity(SelectedActivity) && ClubActivities.existskey(SelectedActivity.Key)) {
									EditActivity(ClubActivities[SelectedActivity.Key]);
									{{{PopUpMultiChoice::P}}}Close(This, State.Controls.Frame_MultiChoice, False);
								}
							}
							case C_Choice_Activity_Remove: {
								if (HasSelectedActivity(SelectedActivity) && ClubActivities.existskey(SelectedActivity.Key)) {
									OpenDeleteActivityPopUp(State, ClubActivities[SelectedActivity.Key].Name);
								}
							}
							case C_Choice_Activity_Privacy: {
								UpdateActivityPrivacy(SelectedActivity.Key);
								{{{PopUpMultiChoice::P}}}Close(This, State.Controls.Frame_MultiChoice);
							}
							case C_Choice_Activity_Activation: {
								if (HasSelectedActivity(SelectedActivity)) {
									DisplayLoading(State.Controls.Frame_LoadingSpinner, State.ScrollView.Frame_ScrollActivities, "{{{Text_DeactivateActivity}}}");
									{{{ClubStore::P}}}Action_ActivateActivity(This, UserCurrentClubId, SelectedActivity.Id, False);
									{{{PopUpMultiChoice::P}}}Close(This, State.Controls.Frame_MultiChoice);
								}
							}
						}
					} else if (PopUpType == C_PopUpRemoveActiIndex) {
						if (Event.SelectedIndex == C_RemoveActiPopUp_ChoiceIndex_Delete) {
							declare Integer UserCurrentClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;
							declare ClubActivities = {{{ClubStore::P}}}GetClubActivities(UserCurrentClubId);
							DisplayLoading(State.Controls.Frame_LoadingSpinner, State.ScrollView.Frame_ScrollActivities, "{{{Text_RemoveActivity}}}");
							if (ClubActivities[SelectedActivity.Key].Type == {{{ClubStruct::P}}}C_ClubActivity_ItemUpload) {
								State = ResetActivityIdForItemCollection(State, UserCurrentClubId, SelectedActivity.Id);
							} else {
								{{{ClubStore::P}}}Action_DeleteActivity(This, UserCurrentClubId, SelectedActivity.Id);
							}
						}
						{{{PopUpMultiChoice::P}}}Close(This, State.Controls.Frame_MultiChoice);
					} else if (PopUpType == C_PopUpArchivedActiIndex && State.PopUpActivityOptions.existskey(Event.SelectedIndex)) {
						declare Integer UserCurrentClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;
						declare ClubActivities = {{{ClubStore::P}}}GetInactiveClubActivities(UserCurrentClubId);
						switch (State.PopUpActivityOptions[Event.SelectedIndex]) {
							case C_Choice_Activity_Activation: {
								if (HasSelectedActivity(SelectedActivity)) {
									DisplayLoading(State.Controls.Frame_LoadingSpinner, State.ScrollView.Frame_ScrollActivities, "{{{Text_ActivateActivity}}}");
									{{{ClubStore::P}}}Action_ActivateActivity(This, UserCurrentClubId, SelectedActivity.Id, True);
									{{{PopUpMultiChoice::P}}}Close(This, State.Controls.Frame_MultiChoice);
								}
							}
							case C_Choice_Activity_Edit: {
								if (HasSelectedActivity(SelectedActivity) && ClubActivities.existskey(SelectedActivity.Key)) {
									EditActivity(ClubActivities[SelectedActivity.Key]);
									{{{PopUpMultiChoice::P}}}Close(This, State.Controls.Frame_MultiChoice, False);
									WasEditingArchivedActivity = True;
								}
							}
							case C_Choice_Activity_Remove: {
								if (HasSelectedActivity(SelectedActivity) && ClubActivities.existskey(SelectedActivity.Key)) {
									DisplayLoading(State.Controls.Frame_LoadingSpinner, State.ScrollView.Frame_ScrollActivities, "{{{Text_RemoveActivity}}}");
									if (ClubActivities[SelectedActivity.Key].Type == {{{ClubStruct::P}}}C_ClubActivity_ItemUpload) {
										State = ResetActivityIdForItemCollection(State, UserCurrentClubId, SelectedActivity.Id);
									} else {
										{{{ClubStore::P}}}Action_DeleteActivity(This, UserCurrentClubId, SelectedActivity.Id);
									}
									{{{PopUpMultiChoice::P}}}Close(This, State.Controls.Frame_MultiChoice);
								}
							}
						}
					} else if (PopUpType == C_PopUpCreateActiIndex && State.PopUpActivityOptions.existskey(Event.SelectedIndex)) {
						SelectChoiceCreate(State.PopUpActivityOptions[Event.SelectedIndex]);
						// We send a pop up close event only if we are not opening a new page, it is the case with the ad or competition or team activity (only opening a link)
						declare Text ActivityType = State.PopUpActivityOptions[Event.SelectedIndex];
						{{{PopUpMultiChoice::P}}}Close(
							This,
							State.Controls.Frame_MultiChoice,
							(
								ActivityType == {{{ClubStruct::P}}}C_ClubActivity_Ad ||
								ActivityType == {{{ClubStruct::P}}}C_ClubActivity_Competition ||
								ActivityType == {{{ClubStruct::P}}}C_ClubActivity_Team
							)
						);
						LockNavigation(State, True);
					}
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					if (!State.Controls.Frame_MultiChoice.Visible && !State.IsMovingActivities) SelectedActivity = ResetSelectedActivity();
					LockNavigation(State, State.Controls.Frame_MultiChoice.Visible);
				}
			}
		}
	}

	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null && Event.Scroll.Id == State.ScrollView.Frame_ScrollActivities.Id) {
			switch (Event.Type) {
				case {{{Scroll::P}}}C_EventType_PagerUpdate: {
					declare ClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;

					switch (State.Tab_Displayed) {
						case C_Tab_HomeActivities: {{{ClubStore::P}}}Action_LoadClubActivitiesPage(This, ClubId, Event.PagerOffset, Event.PagerCount);
						case C_Tab_ArchivedActivities: {{{ClubStore::P}}}Action_LoadInactiveClubActivitiesPage(This, ClubId, Event.PagerOffset, Event.PagerCount);
					}
				}
				case {{{Scroll::P}}}C_EventType_Update: {
					declare {{{ClubStruct::P}}}K_Activity[Integer] ClubActivities;
					declare Integer CurrentClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;

					switch (State.Tab_Displayed) {
						case C_Tab_ArchivedActivities: ClubActivities = {{{ClubStore::P}}}GetInactiveClubActivities(CurrentClubId);
						case C_Tab_HomeActivities: ClubActivities = {{{ClubStore::P}}}GetClubActivities(CurrentClubId);
					}

					foreach (Key => Frame_Element in Event.ElementsVisible) {
						declare Integer ActivityKey for Frame_Element;
						ActivityKey = Key;
						if (ClubActivities.existskey(Key)) {
							ShowActivity(Frame_Element, ClubActivities[Key], State.ScrollView.CurrentLayout, SelectedActivity.Key, State.IsMovingActivities);
						} else {
							ShowActivityLoading(Frame_Element, State.ScrollView.CurrentLayout);
						}
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						declare Integer ActivityKey for Frame_Element;
						ActivityKey = C_Activity_NullKey;
						HideActivity(Frame_Element);
					}

					Event.Scroll.Visible = Event.ElementsVisible.count > 0;
					{{{Navigation::P}}}Lock(Event.Scroll, Event.ElementsVisible.count <= 0);
					{{{Navigation::P}}}EnableInputs(Event.Scroll, Event.ElementsVisible.count <= 0);
					if ({{{LoadingSpinner::P}}}IsLoading(State.Controls.Frame_LoadingSpinner)) {
						State.Controls.Label_ScrollViewInfos.SetText("");
					} else if (Event.ElementsVisible.count <= 0) {
						switch (State.Tab_Displayed) {
							case C_Tab_HomeActivities: State.Controls.Label_ScrollViewInfos.SetText("{{{Text_NoHomeActivities}}}");
							case C_Tab_ArchivedActivities: State.Controls.Label_ScrollViewInfos.SetText("{{{Text_NoInactiveActivities}}}");
						}
					}
					FocusAvailableControl(State);
				}
				case {{{Scroll::P}}}C_EventType_Select: {
					switch (State.Tab_Displayed) {
						case C_Tab_HomeActivities: {
							if (State.IsMovingActivities && HasSelectedActivity(SelectedActivity)) { // if the player is moving activities
								declare CurrentClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;
								declare ClubActivities = {{{ClubStore::P}}}GetClubActivities(CurrentClubId);
								if (ClubActivities.existskey(Event.ToKey)) {
									DisplayLoading(State.Controls.Frame_LoadingSpinner, State.ScrollView.Frame_ScrollActivities, "{{{Text_MoveActivities}}}");
									{{{ClubStore::P}}}Action_MoveActivity(This, CurrentClubId, SelectedActivity.Id, ClubActivities[Event.ToKey].Position);
								}
								SelectedActivity = ResetSelectedActivity();
								State = SetIsMovingActivities(State, False, "");
							} else if (Event.To != Null) { // else open club activity options pop up
								declare ClubActivities = {{{ClubStore::P}}}GetClubActivities({{{ClubStore::P}}}GetUserCurrentClub().Id);
								if (ClubActivities.existskey(Event.ToKey)) {
									declare {{{ClubStruct::P}}}K_Activity ClubActivity = ClubActivities[Event.ToKey];
									SelectedActivity = SetSelectedActivity(Event.ToKey, ClubActivity);
									State.LastSelectedActivity = Event.To;
									State = OpenClubActivityPopUp(State, ClubActivity);
								}
							}
						}
						case C_Tab_ArchivedActivities: {
							declare ClubActivities = {{{ClubStore::P}}}GetInactiveClubActivities({{{ClubStore::P}}}GetUserCurrentClub().Id);
							if (ClubActivities.existskey(Event.ToKey)) {
								declare {{{ClubStruct::P}}}K_Activity ClubActivity = ClubActivities[Event.ToKey];
								SelectedActivity = SetSelectedActivity(Event.ToKey, ClubActivity);
								State = OpenArchivedActivityPopUp(State, ClubActivity);
							}
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_Focus: {
					if (Event.From != Null) FocusActivity(Event.From, State.ScrollView.CurrentLayout, SelectedActivity.Key, False, State.IsMovingActivities);
					if (Event.To != Null) FocusActivity(Event.To, State.ScrollView.CurrentLayout, SelectedActivity.Key, True, State.IsMovingActivities);
					if (Event.IsMouse && Event.To != Null && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
						Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Event.Scroll);
					}
				}
				case {{{Scroll::P}}}C_EventType_ReachLimit: {
					if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Up) {
						Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_EditClub);
					} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Down || Event.NavAction == CMlScriptEvent::EMenuNavAction::Left) {
						Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Back);
						{{{MenuSounds::P}}}PlayFocusSound(This, State.Controls.Button_Back);
					}
				}
				case {{{Scroll::P}}}C_EventType_Cancel: {
					if (HasSelectedActivity(SelectedActivity) && State.Tab_Displayed == C_Tab_HomeActivities) {
						SelectedActivity = ResetSelectedActivity();
						State = SetIsMovingActivities(State, False, "");
						{{{Scroll::P}}}SetElementsTotal(This, State.ScrollView.Frame_ScrollActivities, {{{ClubStore::P}}}GetClubActivitiesTotal({{{ClubStore::P}}}GetUserCurrentClub().Id), False);
					} else {
						{{{Router::P}}}PushParent(This);
					}
				}
			}
		}
	}

	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{ClubStore::P}}}C_Event_ActivityActivatedOrDeactivated: {{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					case {{{ClubStore::P}}}C_Event_ClubActivitiesUpdated: {
						declare Integer CurrentClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;
						if (Event.CustomEventData.count > 0 && CurrentClubId == TL::ToInteger(Event.CustomEventData[0])) {
							switch (State.Tab_Displayed) {
								case C_Tab_HomeActivities: {{{Scroll::P}}}SetElementsTotal(This, State.ScrollView.Frame_ScrollActivities, {{{ClubStore::P}}}GetClubActivitiesTotal(CurrentClubId), False);
								case C_Tab_ArchivedActivities: {{{Scroll::P}}}SetElementsTotal(This, State.ScrollView.Frame_ScrollActivities, {{{ClubStore::P}}}GetInactiveClubActivitiesTotal(CurrentClubId), False);
							}
							DisplayLoading(State.Controls.Frame_LoadingSpinner, State.ScrollView.Frame_ScrollActivities, "");
						}
					}
					case {{{ClubStore::P}}}C_Event_ClubActivitiesUpdateError: {
						if (Event.CustomEventData.count > 0 && {{{ClubStore::P}}}GetUserCurrentClub().Id == TL::ToInteger(Event.CustomEventData[0])) {
							if (Event.CustomEventData.count > 1) State.Controls.Label_Message.SetText(Event.CustomEventData[1]);
							DisplayLoading(State.Controls.Frame_LoadingSpinner, State.ScrollView.Frame_ScrollActivities, "");
						}
					}
					case {{{ClubStore::P}}}C_Event_ClubActivityDeleted: {{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					case {{{ClubStore::P}}}C_Event_ClubActivityMoved: {{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					case {{{ClubStore::P}}}C_Event_ClubActivityNotMoved, {{{ClubStore::P}}}C_Event_ClubActivityNotDeleted: {
						if (Event.CustomEventData.count >= 1) {
							State.Controls.Label_Message.SetText(Event.CustomEventData[0]);
						}
						DisplayLoading(State.Controls.Frame_LoadingSpinner, State.ScrollView.Frame_ScrollActivities, "");
						{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					}
					case {{{ClubStore::P}}}C_Event_ClubRoomDeleted: {{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					case {{{ClubStore::P}}}C_Event_ClubCampaignCreatedOrEdited: {{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					case {{{ClubStore::P}}}C_Event_ClubActivityPrivacyUpdated: {{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					case {{{ClubStore::P}}}C_Event_ClubActivityFeaturedUpdated: {{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					case {{{ClubStore::P}}}C_Event_ClubRoomCreatedOrEdited: {{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					case {{{ClubStore::P}}}C_Event_BucketActivityCreatedOrEdited: {{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					case {{{ClubStore::P}}}C_Event_NewsActivityCreatedOrEdited: {{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					case {{{ClubStore::P}}}C_Event_MapReviewActivityCreatedOrEdited: {{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
				}
			}
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_LeavingRoute: {
				State.ScrollView.Frame_ScrollActivities.Hide();
			}
		}
	}
}
***
""",
[
	Transition::ComponentV2(),
	Navigation::ComponentV2(),
	ExpendableButton::ComponentV2(),
	Router::ComponentV2(),
	ClubStore::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	Scroll::ComponentV2(),
	ClubStruct::Component(),
	PopUpMultiChoice::ComponentV2(),
	MenuSounds::ComponentV2(),
	UserStore::ComponentV2(),
	TitleBar::Component()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}