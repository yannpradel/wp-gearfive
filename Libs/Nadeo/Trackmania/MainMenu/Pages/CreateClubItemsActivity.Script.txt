/**
 *	Page: CreateClubItemsActivity
 */
#Const Version		"1.0.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/CreateClubItemsActivity.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/Trackmania/API/BrowserAPI.Script.txt" as BrowserAPI
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/Trackmania/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/CMGame/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_CreateClubItemsActivity"
#Const C_NavGroup_Default "navgroup-page-create-club-items-activity-default"
#Const C_NavGroup_MouseOnly "navgroup-page-create-club-items-activity-mouse-only"
#Const C_NavGroup_Global "navgroup-page-create-club-items-activity-global"

#Const C_Class_Media "class-page-create-club-items-activity-media"
#Const C_Class_MediaAction "class-page-create-club-items-activity-media-action"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [Item Collection activity creation page] Title of the page to create an item collection activity.
	declare Text Text_CreateItemCollection = _("Create item collection");
	//L16N [Item Collection activity creation page] Title of the page to edit a item collection activity.
	declare Text Text_EditItemCollection = _("Edit item collection");
	//L16N [Item Collection activity creation page] [Item Collection activity creation page] Button to finalize the creation of an activity
	declare Text Text_Create = _("Create");
	//L16N [Item Collection activity creation page] Button to finalize the edition of an activity
	declare Text Text_Edit = _("Edit");
	//L16N [Item Collection activity creation page] Text displayed while creating an activity
	declare Text Text_Creating = _("Creating activity...");
	//L16N [Item Collection activity creation page] Text displayed while editing an activity
	declare Text Text_Editing = _("Editing activity...");
	//L16N [Item Collection activity creation page] Name of the Item Collection in 20 characters max
	declare Text Text_Name = _("Item collection name");
	//L16N [Item Collection activity creation page] Basic text for the description entry
	declare Text Text_DescriptionTextField = _("Item collection description");
	//L16N [Item Collection activity creation page] Button to open the browser and upload the Item Collection
	declare Text Text_Upload = _("Upload Item Collection");
	//L16N [Item Collection activity creation page] Button to open the browser and upload a new Item Collection
	declare Text Text_NewUpload = _("Update Item Collection");
	//L16N [Item Collection activity creation page] Text above the images used to illustrate the collection
	declare Text Text_Pictures = _("Image gallery");
	//L16N [Item Collection activity creation page] Button to remove the selecting image
	declare Text Text_Remove = _("Remove image");
	//L16N [Item Collection activity creation page] Text to indicate the current image position, e.g "2/10"
	declare Text Text_Pager = _("%1/%2");
	//L16N [Item Collection activity creation page] Text preceded by a button icon (i.e. "X") to inform the player that they can access the image gallery by pressing the associated button on their controller.
	declare Text Text_AccessGallery = _("Access gallery");
	//L16N [Item Collection activity creation page] Text preceded by a button icon (i.e. "X") to inform the player that they can exit the image gallery by pressing the associated button on their controller.
	declare Text Text_ExitGallery = _("Exit gallery");
	//L16N [Item Collection activity creation page] Message displayed when there is an error while getting the Item Collections to edit. %1 will be replaced with an error code. e.g. "Failed to retrieve the Item Collection to edit. (Error: 123456)"
	declare Text Text_ErrorGetCollection = _("Failed to retrieve the Item Collection to edit. (Error: %1)");
	//L16N [Item Collection activity creation page] Message displayed when there is an error while creating the Item Collections. %1 will be replaced with an error code. e.g. "Failed to create the Item Collection. (Error: 123456)"
	declare Text Text_ErrorCreateCollection = _("Failed to create the Item Collection. (Error: %1)");
	//L16N [Item Collection activity creation page] Message displayed when there is an error while updating the Item Collections. %1 will be replaced with an error code. e.g. "Failed to update the Item Collection. (Error: 123456)"
	declare Text Text_ErrorUpdateCollection = _("Failed to update the Item Collection. (Error: %1)");
	//L16N [Item Collection activity creation page] Text displayed while retrieving an item collection activity.
	declare Text Text_RetrievingActivity = _("Retrieving item collection...");
	//L16N [Item Collection activity creation page] Text pronounced when the player is focusing the button to choose a logo for the room.
	declare Text TTS_ChooseLogo = _("Choose a logo for your activity");
	// Description of the upload error pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_UploadError = [
		PopUpMultiChoice::CreateDescriptionPart(Const::C_UploadOnPlatformPopUp_Description, <120., 30.>, 3., Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold), "$t$i", <1., 1., 1.>, False)
	];

	/* Variables */
	declare Vec2 Size_Gallery = MLHelpers::KeepRatioFromY(1596., 904., 63.);
	declare Vec2 Size_Description = Size_Gallery;
	declare Vec2 Pos_Gallery = MLHelpers::SkewX(<63.3, -22.>, 10.);
	declare Vec2 Pos_Description = MLHelpers::SkewX(<-64., -22.>, 10.);

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Page -->
<frameinstance modelid="{{{BrowserAPI::C_Name}}}" id="frame-browser" z-index="{{{Const::C_ZIndex_BrowserAPI}}}" hidden="1"/>
<frameinstance id="loadingspinner-create-or-edit-collection" modelid="{{{LoadingSpinner::C_Name}}}" data-dimmer="true" data-opacity="0." z-index="{{{Const::C_ZIndex_Loading}}}"/>

<!-- Frame global -->
<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="cancel;appmenu" data-nav-targets="_;_" data-nav-group="{{{C_NavGroup_Global}}}" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" z-index="-1"/>
	<frameinstance id="popupmultichoice-upload-error" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Const::C_UploadOnPlatformPopUp_Title}}}" data-description="{{{TL::MLEncode(Description_UploadError.tojson())}}}" z-index="3" hidden="1"/>
	<frameinstance id="loadingspinner-retrieve-info" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-120., 20., 10.)}}}" data-label="{{{Text_RetrievingActivity}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" data-opacity="0." data-size="10 10" scale="0.7" z-index="2"/>
	<label id="label-title" pos="{{{MLHelpers::Skew(-127.7, 69.2, 10.)}}}" size="250 35" class="text-extrabold" text="{{{Text_Create}}}" textsize="13" halign="left" valign="top" z-index="1"/>
	<label id="label-info" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-semibold" textsize="2.5" halign="left"/>

	<frameinstance
		id="button-activity-media" pos="{{{MLHelpers::Skew(-103., 41.2, 10.)}}}"
		modelid="{{{Button::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-size="{{{MLHelpers::MLKeepRatioFromY(608., 272., 21.)}}}"
		data-opacityunfocus=".6"
		data-tts-text="{{{TTS_ChooseLogo}}}"
		data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}"
		data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
		data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
		data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
		data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
		data-iconsize="13 13"
		data-bgkeepratio="clip"
		data-contouropacityunfocus=".0"
		data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
		data-contourimage="{{{Const::C_ImageUrl_ClubActivity_Contour}}}"
		data-halign="center" data-valign="center"
		data-nav-inputs="select;down;left;right"
		data-nav-targets="_;textfield-description;button-back;textfield-name"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
	/>
	<frameinstance
		id="textfield-name" pos="{{{MLHelpers::Skew(-80., 47., 10.)}}}"
		modelid="{{{TextField::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-size="73.5 9"
		data-placeholder="{{{Text_Name}}}"
		data-bgopacityunfocus="0.4"
		data-bgcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
		data-bgcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
		data-contourcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
		data-contouropacityunfocus=".0"
		data-contouropacityfocus="1."
		data-textsize="3."
		data-textcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
		data-halign="left" data-valign="center"
		data-nav-inputs="select;left;right;down"
		data-nav-targets="_;button-activity-media;button-bucket-media;button-upload-collection"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{TextField::C_NavZone}}}"
	/>

	<frameinstance
		id="button-upload-collection" pos="{{{MLHelpers::Skew(-80., 35.4, 10.)}}}" z-index="1"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-styles="{{{ExpendableButton::C_Style_Stack}}}"
		data-width="100" data-height="9"
		data-text="{{{Text_Upload}}}"
		data-text-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"
		data-text-textsize="4."
		data-icon-size="8 8"
		data-icon-image="{{{Icons::C_Icon_128x128_Glass_Plus}}}"
		data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
		data-icon-color-focused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
		data-icon-color-unfocused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
		data-icon-align="{{{ExpendableButton::C_IconAlign_Right}}}"
		data-focus-color-unfocused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
		data-background-color-focused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
		data-background-color-unfocused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
		data-background-opacity-unfocused="0.4"
		data-valign="center" data-halign="left"
		data-nav-inputs="select;left;right;up;down"
		data-nav-targets="_;button-activity-media;button-bucket-media;textfield-name;button-bucket-media"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>

	<frameinstance
		id="textfield-description" pos="{{{Pos_Description.X}}} {{{Pos_Description.Y}}}"
		modelid="{{{TextField::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-skew="0."
		data-textsize="3."
		data-size="{{{Size_Description.X}}} {{{Size_Description.Y}}}"
		data-placeholder="{{{Text_DescriptionTextField}}}"
		data-bgopacityunfocus="0.4"
		data-bgcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
		data-bgcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
		data-contourimage="{{{Const::C_ImageUrl_PopUp_Activity_ItemCollection_Media_Contour}}}"
		data-contourcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
		data-contouropacityunfocus=".0"
		data-contouropacityfocus="1."
		data-textfieldtype="{{{TextField::C_TextFieldType_TextEdit}}}"
		data-textcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
		data-autonewline="1"
		data-halign="center" data-valign="center"
		data-nav-inputs="select;up;down;left;right"
		data-nav-targets="_;button-activity-media;button-back;button-back;button-bucket-media"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{TextField::C_NavZone}}}"
	/>

	<frame id="frame-media" pos="{{{Pos_Gallery.X}}} {{{Pos_Gallery.Y}}}">
		<frameinstance
			id="button-previous-media" pos="{{{-0.38*Size_Gallery.X}}} 0"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_MediaAction}}}"
			data-bgempty="1"
			data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-icon="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
			data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
			data-iconsize="15 15"
			data-iconopacityunfocus=".4"
			data-halign="right" data-valign="center"
			data-nav-inputs="select;left;right;down;up"
			data-nav-targets="_;textfield-description;button-bucket-media;button-create;button-upload-collection"
			data-nav-group="{{{C_NavGroup_MouseOnly}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>

		<frameinstance
			id="button-bucket-media"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_Media}}}"
			data-size="{{{Size_Gallery.X}}} {{{Size_Gallery.Y}}}"
			data-text="{{{Text_Pictures}}}"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-textsize="3.5"
			data-textitalicslope=".2"
			data-textypos="0.05"
			data-backgroundcolortype="{{{Button::C_ColorType_Colorize}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-textopacityunfocus="1."
			data-opacityunfocus=".5"
			data-contourimage="{{{Const::C_ImageUrl_PopUp_Activity_ItemCollection_Media_Contour}}}"
			data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-contouropacityunfocus=".0"
			data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-icon="{{{Icons::C_Icon_128x128_Plus_Oblique}}}"
			data-iconfocus="{{{Icons::C_Icon_128x128_Plus_Oblique}}}"
			data-iconsize="30 30"
			data-iconopacityunfocus="1."
			data-bgkeepratio="Clip"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;up;down;left;right;action2"
			data-nav-targets="_;button-upload-collection;button-create;textfield-description;button-create;_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>

		<frameinstance
			id="button-next-media" pos="{{{0.38*Size_Gallery.X}}} 0"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_MediaAction}}}"
			data-bgempty="1"
			data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-icon="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
			data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
			data-iconsize="15 15"
			data-iconopacityunfocus=".4"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;left;down;up"
			data-nav-targets="_;button-bucket-media;button-create;button-upload-collection"
			data-nav-group="{{{C_NavGroup_MouseOnly}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>

		<label id="label-media-pager" pos="0 {{{-0.5*Size_Gallery.Y - 1.5}}}" class="text-semibold" textsize="2" valign="top"/>

		<frameinstance
			id="button-remove-media" pos="{{{0.5*Size_Gallery.X}}} {{{0.5*Size_Gallery.Y + 2.}}}" z-index="2"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-styles="{{{ExpendableButton::C_Style_NoBackground}}}"
			data-icon-image="{{{Icons::C_Icon_128x128_Bin_Inc}}}"
			data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
			data-icon-color-unfocused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-icon-opacity-focused="1."
			data-icon-opacity-unfocused="0.7"
			data-halign="left" data-valign="top"
			data-nav-group="{{{C_NavGroup_MouseOnly}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>

	<!-- Bottom buttons -->
	<frameinstance id="button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
	<frameinstance
		id="button-back" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-max-width="60."
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;up;right"
		data-nav-targets="_;textfield-description;button-create"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance id="button-icon-create" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" data-halign="left" data-size="8 8" data-bind="appmenu" data-hideformouse="1" />
	<frameinstance
		id="button-create" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_Create}}}"
		data-max-width="70."
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-halign="right"
		data-nav-inputs="select;up;left"
		data-nav-targets="_;button-bucket-media;button-back"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "Libs/Nadeo/CMGame/Utils/Error.Script.txt" as Error
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as Http
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/Trackmania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "TextLib" as TL

#Const C_Name_MaxChar 20
#Const C_Desc_MaxChar 200

#Const C_AddMedia_Index -1
#Const C_MaxCollectionMedia 10

#Const C_ErrorTypeDataFileManager "DataFileManager"
#Const C_ErrorCodeActivityExists "0x000007D1"

#Struct K_Controls {
	CMlFrame Button_ActivityMedia;
	CMlFrame Button_BucketMedia;
	CMlFrame Button_Create;
	CMlFrame Button_NextMedia;
	CMlFrame Button_PreviousMedia;
	CMlFrame Button_RemoveMedia;
	CMlFrame Button_UploadCollection;
	CMlFrame Frame_Browser;
	CMlFrame LoadingSpinner_CreateOrEditCollection;
	CMlFrame LoadingSpinner_RetrieveInfo;
	CMlFrame PopUpMultiChoice_UploadError;
	CMlFrame TextField_Description;
	CMlFrame TextField_Name;
	CMlLabel Label_Info;
	CMlLabel Label_MediaPager;
	CMlLabel Label_Title;
	CMlQuad Quad_MediaGradient;
}

#Struct K_State {
	Boolean IsUsingMouse;
	Boolean IsUsingMouseUpdateRequired;
	Boolean IsBrowsingActivityMedia;
	Boolean IsBrowsingBucketMedia;
	Boolean IsBrowsingCollection;
	Boolean IsEditing;
	Boolean IsMediaControllerNavigationEnabled;
	Integer CurrentMediaIndex;
	Text CreatorDisplayName;
	Text CreatorId;
	Text FileName;
	K_Controls Controls;
	Http::K_Request GetBucketActivityRequest;
	Http::K_Request GetExistingActivityRequest;
	Task::K_Task Task_CreateItemCollection;
	Task::K_Task Task_GetItemCollection;
	Task::K_Task Task_SetActivityIdToItemCollection;
	Task::K_Task Task_UpdateItemCollection;
	Task::K_Task Task_UpdateVersionItemCollection;
	ClubStruct::LibStructuresClub_K_Activity Activity;
	ClubStruct::LibStructuresClub_K_BucketItem ItemCollection;
	ClubStruct::LibStructuresClub_K_BucketItem OldItemCollection;
}
""",
"""
/// Enable or disable navigation groups
Void EnableNavigationGroups(Boolean _IsEnabled) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", _IsEnabled);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_MouseOnly}}}", _IsEnabled);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", _IsEnabled);
}

/// Update controller hints at the bottom of the screen
Void UpdateControllerInfo(K_State _State) {
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
	declare Text[Text] ControllerInfos = ["Select" => _("Select"), "Cancel" => _("Back")];

	if (!_State.Controls.Frame_Browser.Visible) {
		if (_State.IsMediaControllerNavigationEnabled) {
			ControllerInfos["Cancel"] = "{{{Text_ExitGallery}}}";
			if (_State.CurrentMediaIndex != C_AddMedia_Index) {
				ControllerInfos["Action2"] = "{{{Text_Remove}}}";
				ControllerInfos.removekey("Select");
			}
		} else if (FocusedControl != Null && FocusedControl == _State.Controls.Button_BucketMedia) {
			if (_State.ItemCollection.MediaUrls.count > 0) {
				ControllerInfos["Select"] = "{{{Text_AccessGallery}}}";
			}
		}
	}

	ControllerInfo::SetButtons(ControllerInfos);
}

/// Display information in the form of an animated message or a loading spinner
Void DisplayInfo(K_State _State, Text _Text, Integer _InfoType) {
	declare Integer CurrentlyDisplayedInfoType for _State.Controls.Label_Info = {{{Const::C_InfoType_None}}};
	declare Vec2 Pos_Hidden = MLHelpers::SkewX(<-126., 20.>, 10.);
	declare Vec2 Pos_Visible = MLHelpers::SkewX(<-125., 20.>, 10.);

	// Update navigation
	EnableNavigationGroups(_InfoType != {{{Const::C_InfoType_FullLoading}}});

	// Update loading spinner
	switch (_InfoType) {
		case {{{Const::C_InfoType_Loading}}}: {{{LoadingSpinner::P}}}StartAnimWithFade(This, _State.Controls.LoadingSpinner_RetrieveInfo, _Text);
		case {{{Const::C_InfoType_FullLoading}}}: {{{LoadingSpinner::P}}}StartAnimWithFade(This, _State.Controls.LoadingSpinner_CreateOrEditCollection, _Text);
		default: {
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, _State.Controls.LoadingSpinner_RetrieveInfo);
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, _State.Controls.LoadingSpinner_CreateOrEditCollection);
		}
	}

	// Update label
	if (CurrentlyDisplayedInfoType != _InfoType || _Text != _State.Controls.Label_Info.Value) {
		AnimMgr.Flush(_State.Controls.Label_Info);
		if (_InfoType != {{{Const::C_InfoType_Loading}}} && _InfoType != {{{Const::C_InfoType_FullLoading}}} && _Text != "") {
			_State.Controls.Label_Info.SetText(_Text);
			_State.Controls.Label_Info.Opacity = 0.;
			_State.Controls.Label_Info.RelativePosition_V3 = Pos_Hidden;
			if (_InfoType == {{{Const::C_InfoType_Error}}}) _State.Controls.Label_Info.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextError)}}};
			else _State.Controls.Label_Info.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight)}}};
			AnimMgr.Add(_State.Controls.Label_Info, "<anim pos=\""^Pos_Visible.X^" "^Pos_Visible.Y^"\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(_State.Controls.Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	// Update current info type
	CurrentlyDisplayedInfoType = _InfoType;
}

/// Handle the display of the gallery buttons
Void DisplayGalleryButtons(K_State _State) {
	declare Boolean IsButtonDisplayed = _State.ItemCollection.MediaUrls.count > 0 && (_State.IsUsingMouse || _State.IsMediaControllerNavigationEnabled);
	{{{Button::P}}}SetVisibilityAndNavigation(_State.Controls.Button_NextMedia, IsButtonDisplayed);
	{{{Button::P}}}SetVisibilityAndNavigation(_State.Controls.Button_PreviousMedia, IsButtonDisplayed);
	{{{Button::P}}}SetVisibilityAndNavigation(_State.Controls.Button_RemoveMedia, IsButtonDisplayed && _State.CurrentMediaIndex != C_AddMedia_Index);
}

/// Handle navigation focus
Void Focus(K_State _State, CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{TextField::P}}}IsTextField(_From)) {
			{{{TextField::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, _From as CMlFrame);
			if (_From.HasClass("{{{C_Class_Media}}}")) {
				UpdateControllerInfo(_State);
			}
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{TextField::P}}}IsTextField(_To)) {
			{{{TextField::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, _To as CMlFrame);
			if (_To.HasClass("{{{C_Class_Media}}}")) {
				UpdateControllerInfo(_State);
			}
		}
	}
}

/// Enable or disable the controller navigation between gallery medias
K_State EnableMediaControllerNavigation(K_State _State, Boolean _IsEnabled) {
	declare K_State State = _State;

	State.IsMediaControllerNavigationEnabled = _IsEnabled;
	if (_IsEnabled) {
		{{{Button::P}}}SetContourColor(This, State.Controls.Button_BucketMedia, <1., 1., 1.>);
	} else {
		{{{Button::P}}}SetContourColor(This, State.Controls.Button_BucketMedia, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}});
	}
	UpdateControllerInfo(State);

	// Force refresh the button focus
	State.IsUsingMouseUpdateRequired = True;

	return State;
}

/// Set the logo of the activity
Void SetLogoButtonWithImage(CMlFrame _Button, Text _ImageUrl) {
	{{{Button::P}}}SetBgColorType(This, _Button, {{{Button::C_ColorType_None}}});
	{{{Button::P}}}SetOpacityUnfocus(This, _Button, 0.75);
	if (Http.IsValidUrl(_ImageUrl)) {
		{{{Button::P}}}SetImage(This, _Button, _ImageUrl);
		{{{Button::P}}}SetImageFocus(This, _Button, _ImageUrl);
		{{{Button::P}}}SetIcon(This, _Button, "");
		{{{Button::P}}}SetIconFocus(This, _Button, "");
	}
}

/// Reset the logo of the activity
Void ResetButton(CMlFrame _Button, Text _ImageUrl) {
	{{{Button::P}}}SetBgColorType(This, _Button, {{{Button::C_ColorType_Colorize}}});
	{{{Button::P}}}SetOpacityUnfocus(This, _Button, 0.5);
	{{{Button::P}}}SetImage(This, _Button, _ImageUrl);
	{{{Button::P}}}SetImageFocus(This, _Button, _ImageUrl);
	{{{Button::P}}}SetIcon(This, _Button, "{{{Icons::C_Icon_128x128_Plus_Oblique}}}");
	{{{Button::P}}}SetIconFocus(This, _Button, "{{{Icons::C_Icon_128x128_Plus_Oblique}}}");
}

/// Update the pop-up with all available activity information
Void UpdateActivityInfo(K_State _State) {
	{{{TextField::P}}}SetValue(This, _State.Controls.TextField_Name, _State.Activity.Name);
	{{{TextField::P}}}SetValue(This, _State.Controls.TextField_Description, _State.ItemCollection.Description);

	/* Update activity image */
	if (_State.Activity.MediaUrl != "") {
		if (ClubStruct::IsClubThemeName(_State.Activity.MediaUrl)) {
			SetLogoButtonWithImage(_State.Controls.Button_ActivityMedia, ClubStruct::GetClubThemeUrl(_State.Activity.MediaUrl, ClubStruct::C_MediaType_Icon));
		} else if (Http.IsValidUrl(_State.Activity.MediaUrl) || ClubStruct::IsClubThemeUrl(_State.Activity.MediaUrl)) {
			SetLogoButtonWithImage(_State.Controls.Button_ActivityMedia, _State.Activity.MediaUrl);
		} else {
			SetLogoButtonWithImage(_State.Controls.Button_ActivityMedia, {{{BrowserAPI::P}}}C_BasePath^_State.Activity.MediaUrl);
		}
	} else {
		ResetButton(_State.Controls.Button_ActivityMedia, "{{{Const::C_ImageUrl_ClubActivity}}}");
	}

	/* Item collection medias */
	DisplayGalleryButtons(_State);
	_State.Controls.Label_MediaPager.Visible = _State.ItemCollection.MediaUrls.count > 0;
	_State.Controls.Label_MediaPager.Value = TL::Compose("{{{Text_Pager}}}", TL::ToText(_State.CurrentMediaIndex+1), TL::ToText(_State.ItemCollection.MediaUrls.count));
	if (_State.ItemCollection.MediaUrls.count > 0 && _State.CurrentMediaIndex != C_AddMedia_Index) {
		if (_State.ItemCollection.MediaUrls.existskey(_State.CurrentMediaIndex)) {
			if (Http.IsValidUrl(_State.ItemCollection.MediaUrls[_State.CurrentMediaIndex])) {
				SetLogoButtonWithImage(_State.Controls.Button_BucketMedia, _State.ItemCollection.MediaUrls[_State.CurrentMediaIndex]);
			} else {
				SetLogoButtonWithImage(_State.Controls.Button_BucketMedia, {{{BrowserAPI::P}}}C_BasePath^_State.ItemCollection.MediaUrls[_State.CurrentMediaIndex]);
			}
		}
	} else {
		ResetButton(_State.Controls.Button_BucketMedia, "");
	}

	UpdateControllerInfo(_State);
}

/// Update the pager of the medias gallery depending on the given index
K_State MediaPager(K_State _State, Integer _MediaIndex) {
	declare K_State State = _State;

	if (_MediaIndex >= State.ItemCollection.MediaUrls.count) {
		if (State.ItemCollection.MediaUrls.count < C_MaxCollectionMedia) {
			State.CurrentMediaIndex = C_AddMedia_Index;
		} else {
			State.CurrentMediaIndex = 0;
		}
	}	else if (_MediaIndex <= C_AddMedia_Index) {
		if (_MediaIndex == C_AddMedia_Index && State.ItemCollection.MediaUrls.count < C_MaxCollectionMedia) {
			State.CurrentMediaIndex = C_AddMedia_Index;
		} else {
			State.CurrentMediaIndex = State.ItemCollection.MediaUrls.count - 1;
		}
	} else {
		State.CurrentMediaIndex = _MediaIndex;
	}

	UpdateActivityInfo(State);

	return State;
}


/// Define the browser settings
Void SetBrowser(K_State _State) {
	declare BrowserSettings = {{{BrowserAPI::P}}}GetDefaultSettings();

	if (_State.IsBrowsingBucketMedia || _State.IsBrowsingActivityMedia) {
		BrowserSettings.FilterByExtension = ["png", "jpg", "jpeg"];
		if (_State.IsBrowsingBucketMedia) BrowserSettings.FilterByExtension.add("webm");
		if (_State.IsBrowsingActivityMedia) BrowserSettings.FilterClubThemeByMediaType = [ClubStruct::C_MediaType_Icon];
		BrowserSettings.DisplayFileNameTooltip = True;
		{{{BrowserAPI::P}}}SetCurrentBrowser(This,
			{{{BrowserAPI::C_BrowserType_PathNavigation}}},
			"{{{BrowserAPI::C_BrowserName_Image}}}",
			[{{{BrowserAPI::C_DataType_Image}}}],
			"",
			BrowserSettings
		);
	} else if (_State.IsBrowsingCollection) {
		BrowserSettings.FilterByExtension = ["zip"];
		{{{BrowserAPI::P}}}SetCurrentBrowser(This,
			{{{BrowserAPI::C_BrowserType_PathNavigationSmall}}},
			"{{{BrowserAPI::C_BrowserName_ItemCollection}}}",
			[{{{BrowserAPI::C_DataType_ItemCollection}}}],
			"",
			BrowserSettings
		);
	}
}

/// Display the browser to select a media or an item collection
K_State DisplayBrowser(K_State _State, Boolean _IsVisible) {
	declare K_State State = _State;

	if (_IsVisible) {
		SetBrowser(State);
		{{{BrowserAPI::P}}}RefreshBrowserData(This);
	} else {
		if (State.IsBrowsingBucketMedia) {
			State.IsBrowsingBucketMedia = False;
			State = MediaPager(State, State.ItemCollection.MediaUrls.count-1);
		} else if (State.IsBrowsingActivityMedia) {
			State.IsBrowsingActivityMedia = False;
		} else if (State.IsBrowsingCollection) {
			State.IsBrowsingCollection = False;
		}
	}

	State.Controls.Frame_Browser.Visible = _IsVisible;
	{{{BrowserAPI::P}}}FocusBrowser(This, _IsVisible);
	EnableNavigationGroups(!_IsVisible);
	UpdateControllerInfo(State);

	return State;
}


/// Create a task to link an item collection to an activity with their ids
K_State SetActivityIdToItemCollection(K_State _State, Text _ActivityId) {
	declare K_State State = _State;

	State.Task_SetActivityIdToItemCollection = Task::DestroyAndCreate(
		State.Task_SetActivityIdToItemCollection,
		DataFileMgr,
		DataFileMgr.ItemCollection_SetActivityId(MainUser::GetMainUserId(), State.ItemCollection.ItemId, _ActivityId)
	);

	return State;
}

/// Create a task to create an item collection activity
K_State CreateItemCollection(K_State _State) {
	declare K_State State = _State;

	State.Task_CreateItemCollection = Task::DestroyAndCreate(
		State.Task_CreateItemCollection,
		DataFileMgr,
		DataFileMgr.ItemCollection_Create(
			MainUser::GetMainUserId(),
			TL::ToText(ClubStore::GetUserCurrentClub().Id),
			State.Activity.Name,
			State.FileName
		)
	);
	DisplayInfo(State, "{{{Text_Creating}}}", {{{Const::C_InfoType_FullLoading}}});

	return State;
}

/// Create a task to update an existing item collection activity
K_State UpdateItemCollection(K_State _State) {
	declare K_State State = _State;

	// Update activity only if the creator changed the item collection
	if (State.FileName == "" || State.CreatorId == LocalUser.WebServicesUserId) {
		State.Task_UpdateItemCollection = Task::DestroyAndCreate(
			State.Task_UpdateItemCollection,
			DataFileMgr,
			DataFileMgr.ItemCollection_Update(
				MainUser::GetMainUserId(),
				State.ItemCollection.ItemId,
				State.Activity.Name
			)
		);
		DisplayInfo(State, "{{{Text_Editing}}}", {{{Const::C_InfoType_FullLoading}}});
	} else {
		//L16N [Item Collection activity creation page] Message displayed when there is an error while updating the Item Collections. Only the creator of the collection can update the version. %1 will be replaced by the name of the creator. e.g. "You cannot update the version of the Item Collection. Only its creator (Apozie50) has the right to do it."
		DisplayInfo(State, TL::Compose(_("You cannot update the version of the Item Collection. Only its creator (%1) has the right to do it."), State.CreatorDisplayName), {{{Const::C_InfoType_Error}}});
	}

	return State;
}

/// Handle navigation selection
K_State Select(K_State _State, CMlControl _Control, Boolean _IsUsingMouse) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	DisplayInfo(State, "", {{{Const::C_InfoType_None}}});
	switch (_Control.ControlId) {
		case "button-back": Router::PushParent(This);
		case "button-activity-media": {
			if (Platform::IsFromFirstParty(System)) {
				{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.PopUpMultiChoice_UploadError);
			} else {
				State.IsBrowsingActivityMedia = True;
				State = DisplayBrowser(State, True);
			}
		}
		case "button-upload-collection": {
			if (Platform::IsFromFirstParty(System)) {
				{{{PopUpMultiChoice::P}}}Open(This, State.Controls.PopUpMultiChoice_UploadError);
			} else {
				State.IsBrowsingCollection = True;
				State = DisplayBrowser(State, True);
			}
		}
		case "button-bucket-media": {
			if (
				State.CurrentMediaIndex == C_AddMedia_Index &&
				State.ItemCollection.MediaUrls.count < C_MaxCollectionMedia &&
				(_IsUsingMouse || State.IsMediaControllerNavigationEnabled || State.ItemCollection.MediaUrls.count <= 0)
			) {
				if (Platform::IsFromFirstParty(System)) {
					{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.PopUpMultiChoice_UploadError);
				} else {
					State.IsBrowsingBucketMedia = True;
					State = DisplayBrowser(State, True);
				}
			} else if (!_IsUsingMouse) {
				State = EnableMediaControllerNavigation(State, True);
			}
		}
		case "button-previous-media": State = MediaPager(State, State.CurrentMediaIndex-1);
		case "button-next-media": State = MediaPager(State, State.CurrentMediaIndex+1);
		case "button-remove-media" : {
			if (State.ItemCollection.MediaUrls.removekey(State.CurrentMediaIndex)) {
				State = MediaPager(State, State.ItemCollection.MediaUrls.count);
				if (State.IsMediaControllerNavigationEnabled && State.ItemCollection.MediaUrls.count <= 0) {
					State = EnableMediaControllerNavigation(State, False);
				}
			}
		}
		case "button-create": {
			if (State.Activity.Name == "") {
				//L16N [Item Collection activity creation page] Error message displayed when the player tries to create an activity without the requirements.
				DisplayInfo(State, _("Activities must have a name."), {{{Const::C_InfoType_Standard}}});
			} else if (!State.IsEditing && State.FileName == "") {
				//L16N [Item Collection activity creation page] Message displayed when there the user forgets to upload a .zip in their collection
				DisplayInfo(State, _("You must upload a .zip to create your collection"), {{{Const::C_InfoType_Standard}}});
			} else if (State.IsEditing) {
				State = UpdateItemCollection(State);
			} else {
				State = CreateItemCollection(State);
			}
		}
	}
	return State;
}

/// Get an activity name from its id
Text GetActivityName(Integer _ActivityId) {
	declare ClubActivities = ClubStore::GetClubActivities(ClubStore::GetUserCurrentClub().Id);
	foreach (Activity in ClubActivities) {
		if (Activity.Id == _ActivityId) return Activity.Name;
	}
	return "";
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_State State;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	CurrentMediaIndex = C_AddMedia_Index,
	GetBucketActivityRequest = Http::GetEmptyRequest(),
	GetExistingActivityRequest = Http::GetEmptyRequest(),
	Controls = K_Controls {
		Frame_Browser = (Page.GetFirstChild("frame-browser") as CMlFrame),
		Button_ActivityMedia = (Frame_Global.GetFirstChild("button-activity-media") as CMlFrame),
		Button_BucketMedia = (Frame_Global.GetFirstChild("button-bucket-media") as CMlFrame),
		Button_Create = (Frame_Global.GetFirstChild("button-create") as CMlFrame),
		Button_NextMedia = (Frame_Global.GetFirstChild("button-next-media") as CMlFrame),
		Button_PreviousMedia = (Frame_Global.GetFirstChild("button-previous-media") as CMlFrame),
		Button_RemoveMedia = (Frame_Global.GetFirstChild("button-remove-media") as CMlFrame),
		Button_UploadCollection = (Frame_Global.GetFirstChild("button-upload-collection") as CMlFrame),
		Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
		Label_MediaPager = (Frame_Global.GetFirstChild("label-media-pager") as CMlLabel),
		Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
		LoadingSpinner_CreateOrEditCollection = (Page.GetFirstChild("loadingspinner-create-or-edit-collection") as CMlFrame),
		LoadingSpinner_RetrieveInfo = (Frame_Global.GetFirstChild("loadingspinner-retrieve-info") as CMlFrame),
		PopUpMultiChoice_UploadError = (Page.GetFirstChild("popupmultichoice-upload-error") as CMlFrame),
		Quad_MediaGradient = (Frame_Global.GetFirstChild("quad-gradient-media") as CMlQuad),
		TextField_Description = (Frame_Global.GetFirstChild("textfield-description") as CMlFrame),
		TextField_Name = (Frame_Global.GetFirstChild("textfield-name") as CMlFrame)
	}
};
***

***MainLoop***
***
if (Router::PageIsRunning(This, RoutePaths::C_Path_CreateClubItemsActivity)) {
	foreach (Event in Router::GetPendingEvents(This)) {
		switch (Event.Type) {
			case Router::C_Event_EnteringRoute: {
				declare Text[Text] Query = Router::GetCurrentRouteQuery(This);

				if (Query.existskey(RoutePaths::C_Query_BucketActivityType)) {
					State.IsEditing = Query.existskey(RoutePaths::C_Query_Activity);

					if (State.IsEditing) {
						State.Activity.fromjson(Query[RoutePaths::C_Query_Activity]);
						State.Controls.Label_Title.SetText("{{{Text_EditItemCollection}}}");
						State.GetBucketActivityRequest = Http::DestroyAndCreate(State.GetBucketActivityRequest, ClubAPI::GetBucketActivity(State.Activity.ClubId, State.Activity.Id, 0, 1));
						{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_UploadCollection, "{{{Text_NewUpload}}}");
						{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Create, "{{{Text_Edit}}}");
						DisplayInfo(State, "{{{Text_RetrievingActivity}}}", {{{Const::C_InfoType_Loading}}});
					} else {
						State.Activity = ClubStruct::LibStructuresClub_K_Activity { Id = ClubStruct::C_ActivityNullId };
						State.ItemCollection = ClubStruct::LibStructuresClub_K_BucketItem {};
						State.OldItemCollection = ClubStruct::LibStructuresClub_K_BucketItem {};
						State.Controls.Label_Title.SetText("{{{Text_CreateItemCollection}}}");
						{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_UploadCollection, "{{{Text_Upload}}}");
						{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Create, "{{{Text_Create}}}");
					}

					UpdateActivityInfo(State);
					EnableMediaControllerNavigation(State, False);
					Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Button_ActivityMedia);
				} else {
					Router::PushParent(This);
				}
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::AppMenu: State = Select(State, State.Controls.Button_Create, False);
						case CMlScriptEvent::EMenuNavAction::Cancel: {
							if (State.IsMediaControllerNavigationEnabled) {
								State = EnableMediaControllerNavigation(State, False);
							} else {
								Router::PushParent(This);
							}
						}
					}
				}
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					if (Event.From != Null && Event.From.Id == State.Controls.Button_BucketMedia.Id && State.IsMediaControllerNavigationEnabled) {
						switch (Event.Input) {
							case CMlScriptEvent::EMenuNavAction::Left: State = MediaPager(State, State.CurrentMediaIndex-1);
							case CMlScriptEvent::EMenuNavAction::Right: State = MediaPager(State, State.CurrentMediaIndex+1);
							case CMlScriptEvent::EMenuNavAction::Action2: State = Select(State, State.Controls.Button_RemoveMedia, False);
							case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Event.To, False);
						}
					} else {
						switch (Event.Input) {
							case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Event.To, False);
							default: Focus(State, Event.From, Event.To);
						}
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Event.To, True);
						case CMlScriptEvent::Type::MouseOver: Focus(State, Event.From, Event.To);
					}
				}
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_MouseOnly}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Event.To, True);
						case CMlScriptEvent::Type::MouseOver: Focus(State, Event.From, Event.To);
						case CMlScriptEvent::Type::MouseOut: Focus(State, Event.From, Event.To);
					}
				}
			}
		}
	}

	/* TextField events */
	foreach (Event in {{{TextField::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TextField::P}}}C_EventType_Update: {
				if (Event.Control != Null) {
					switch (Event.Control.ControlId) {
						case State.Controls.TextField_Name.ControlId: {
							if (Event.Value != State.Activity.Name) {
								declare Text NewName = Tools::FormatValue(Event.Value);
								declare Integer Length = TL::Length(TL::StripFormatting(NewName));
								if (Length > C_Name_MaxChar) {
									//L16N [Item Collection activity creation page] Error displayed when the name of the item collection activity is too long. %1 will be replaced by a number, e.g. "The name has a maximum of 20 characters".
									DisplayInfo(State, TL::Compose(_("The name has a maximum of %1 characters"), ""^C_Name_MaxChar), {{{Const::C_InfoType_Standard}}});
									NewName = TL::SubText(NewName, 0, C_Name_MaxChar);
								} else {
									DisplayInfo(State, "", {{{Const::C_InfoType_None}}});
								}
								State.Activity.Name = NewName;
								{{{TextField::P}}}SetValue(This, State.Controls.TextField_Name, State.Activity.Name);
							}
						}
						case State.Controls.TextField_Description.ControlId: {
							if (Event.Value != State.ItemCollection.Description) {
								declare Text Description = Tools::FormatValue(Event.Value);
								declare Integer Length = TL::Length(TL::StripFormatting(Description));
								if (Length > C_Desc_MaxChar) {
									//L16N [Item Collection activity creation page] %1 will be replaced by a number, e.g. "The description has a maximum of 200 characters"
									DisplayInfo(State, TL::Compose(_("The description has a maximum of %1 characters"), ""^C_Desc_MaxChar), {{{Const::C_InfoType_Standard}}});
									Description = TL::SubText(Description, 0, C_Desc_MaxChar);
								} else {
									DisplayInfo(State, "", {{{Const::C_InfoType_None}}});
								}
								State.ItemCollection.Description = Description;
								{{{TextField::P}}}SetValue(This, State.Controls.TextField_Description, Description);
							}
						}
					}
				}
			}
		}
	}

	/* Browser events */
	foreach (Event in {{{BrowserAPI::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{BrowserAPI::P}}}C_EventType_Cancel: State = DisplayBrowser(State, False);
			case {{{BrowserAPI::P}}}C_EventType_Select: {
				switch (Event.DataType) {
					case {{{BrowserAPI::P}}}C_DataType_Image: {
						declare Text MediaUrl = {{{BrowserAPI::P}}}C_BasePath_Media^Event.Data;
						declare Text FullMediaUrl = {{{BrowserAPI::P}}}C_BasePath^MediaUrl;

						if (State.IsBrowsingBucketMedia) {
							State.ItemCollection.MediaUrls.add(MediaUrl);
						} else if (State.IsBrowsingActivityMedia) {
							if (ClubStruct::IsClubThemeUrl(FullMediaUrl)) {
								State.Activity.MediaUrl = ClubStruct::GetClubThemeName(FullMediaUrl);
							} else {
								State.Activity.MediaUrl = MediaUrl;
							}
						}

						UpdateActivityInfo(State);
					}
					case {{{BrowserAPI::P}}}C_DataType_ItemCollection: {
						{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_UploadCollection, Event.Data);
						State.FileName = Event.Data;
					}
				}
				State = DisplayBrowser(State, False);
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background" && {{{Navigation::P}}}GroupIsEnabled(This, "{{{C_NavGroup_Default}}}")) {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: Router::PushParent(This);
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_UploadError.Id) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: EnableNavigationGroups(!Event.PopUpMultiChoice.Visible);
			}
		}
	}

	/* Retrieve bucket activity infos (from LIVE) */
	if (Http::IsInitialized(State.GetBucketActivityRequest)) {
		State.GetBucketActivityRequest = Http::Update(State.GetBucketActivityRequest);
		if (!Http::IsRunning(State.GetBucketActivityRequest)) {
			if (Http::IsSuccess(State.GetBucketActivityRequest)) {
				declare ClubStruct::LibStructuresClub_K_BucketActivity BucketActivity = ClubAPI::GetResponseFromGetBucketActivity(State.GetBucketActivityRequest);
				if (State.Activity.Type == ClubStruct::C_ClubActivity_ItemUpload && BucketActivity.BucketItemList.count > 0) {
					State.OldItemCollection = BucketActivity.BucketItemList[0];
					State.ItemCollection = State.OldItemCollection;
					UpdateActivityInfo(State);

					State.Task_GetItemCollection = Task::DestroyAndCreate(
						State.Task_GetItemCollection,
						DataFileMgr,
						DataFileMgr.ItemCollection_Get(MainUser::GetMainUserId(), State.ItemCollection.ItemId)
					);
				}
			} else {
				//L16N [Item Collection activity creation page] %1 will be replaced by an error, e.g. "(Error code: 500)"
				DisplayInfo(State, TL::Compose(_("Error while fetching the activity info, please try again. (Error code: %1)"), ""^Http::GetStatusCode(State.GetBucketActivityRequest)), {{{Const::C_InfoType_Error}}});
			}
			State.GetBucketActivityRequest = Http::Destroy(State.GetBucketActivityRequest);
		}
	}

	/* Retrieve item collection infos (from CORE) */
	if (Task::IsInitialized(State.Task_GetItemCollection)) {
		State.Task_GetItemCollection = Task::Update(State.Task_GetItemCollection);
		if (!Task::IsRunning(State.Task_GetItemCollection)) {
			declare CTaskResult_NSItemCollection SourceTask = Task::GetSourceTask_NSItemCollection(State.Task_GetItemCollection);
			if (Task::IsSuccess(State.Task_GetItemCollection) && SourceTask != Null) {
				State.ItemCollection.ItemId = SourceTask.ItemCollection.Id;
				State.CreatorId = SourceTask.ItemCollection.CreatorWebServicesUserId;
				State.CreatorDisplayName = UserStore::GetPlayerName(SourceTask.ItemCollection.CreatorDisplayName, SourceTask.ItemCollection.CreatorIsFirstPartyDisplayName);
				DisplayInfo(State, "", {{{Const::C_InfoType_None}}});
			} else {
				DisplayInfo(State, TL::Compose("{{{Text_ErrorGetCollection}}}", SourceTask.ErrorCode), {{{Const::C_InfoType_Error}}});
			}
			State.Task_GetItemCollection = Task::Destroy(State.Task_GetItemCollection);
		}
	}

	/* Create item collection */
	if (Task::IsInitialized(State.Task_CreateItemCollection)) {
		State.Task_CreateItemCollection = Task::Update(State.Task_CreateItemCollection);
		if (!Task::IsRunning(State.Task_CreateItemCollection)) {
			declare CTaskResult_NSItemCollection SourceTask = Task::GetSourceTask_NSItemCollection(State.Task_CreateItemCollection);
			if (Task::IsSuccess(State.Task_CreateItemCollection) && SourceTask != Null) {
				State.ItemCollection.ItemId = SourceTask.ItemCollection.Id;
				ClubStore::Action_CreateOrEditItemCollectionActivity(This, State.ItemCollection, ClubStore::GetUserCurrentClub().Id, State.Activity.Id, State.Activity.Name, State.Activity.MediaUrl, State.IsEditing, State.OldItemCollection);
			} else if (SourceTask.ErrorType == C_ErrorTypeDataFileManager && SourceTask.ErrorCode == C_ErrorCodeActivityExists) {
				declare Integer ActivityId = TL::ToInteger(SourceTask.ErrorDescription);
				declare Text ActivityName = GetActivityName(ActivityId);
				if (ActivityName == "") {
					State.GetExistingActivityRequest = Http::DestroyAndCreate(State.GetExistingActivityRequest, ClubAPI::GetBucketActivity(ClubStore::GetUserCurrentClub().Id, ActivityId, 0, 1));
				} else {
					//L16N [Item Collection activity creation page] Message displayed when there is an error while creating or updating the Item Collections. %1 will be replaced with an error code. %2 will be replaced with club activity id. e.g. "Failed to create the Item Collection. Item Collection already exists in another club activity 'My Collection'. Please update or delete the other activity."
					DisplayInfo(State, TL::Compose(_("Failed to create the Item Collection. Item Collection already exists in another club activity '%1'. Please update or delete the other activity."), "$<"^ActivityName^"$>"), {{{Const::C_InfoType_Error}}});
				}
			} else {
				DisplayInfo(State, TL::Compose("{{{Text_ErrorCreateCollection}}}", SourceTask.ErrorCode), {{{Const::C_InfoType_Error}}});
			}
			State.Task_CreateItemCollection = Task::Destroy(State.Task_CreateItemCollection);
		}
	}

	/* Retrieve bucket activity infos (from LIVE) only if the item collection already exists in another club activity */
	if (Http::IsInitialized(State.GetExistingActivityRequest)) {
		State.GetExistingActivityRequest = Http::Update(State.GetExistingActivityRequest);
		if (!Http::IsRunning(State.GetExistingActivityRequest)) {
			if (Http::IsSuccess(State.GetExistingActivityRequest)) {
				declare ClubStruct::LibStructuresClub_K_BucketActivity BucketActivity = ClubAPI::GetResponseFromGetBucketActivity(State.GetExistingActivityRequest);
				//L16N [Item Collection activity creation page] Message displayed when there is an error while creating or updating the Item Collections. %1 will be replaced with an error code. %2 will be replaced with club activity id. e.g. "Failed to create the Item Collection. Item Collection already exists in another club activity 'My Collection'. Please update or delete the other activity."
				DisplayInfo(State, TL::Compose(_("Failed to create the Item Collection. Item Collection already exists in another club activity '%1'. Please update or delete the other activity."), "$<"^BucketActivity.Name^"$>"), {{{Const::C_InfoType_Error}}});
			}
			State.GetExistingActivityRequest = Http::Destroy(State.GetExistingActivityRequest);
		}
	}

	/* Set activity Id (from LIVE) to Item Collection (to CORE) */
	if (Task::IsInitialized(State.Task_SetActivityIdToItemCollection)) {
		State.Task_SetActivityIdToItemCollection = Task::Update(State.Task_SetActivityIdToItemCollection);
		if (!Task::IsRunning(State.Task_SetActivityIdToItemCollection)) {
			declare CTaskResult_NSItemCollection SourceTask = Task::GetSourceTask_NSItemCollection(State.Task_SetActivityIdToItemCollection);
			if (Task::IsSuccess(State.Task_SetActivityIdToItemCollection) && SourceTask != Null) {
				if (SourceTask.ItemCollection.ActivityId != "") Router::PushParent(This);
				else DisplayInfo(State, "", {{{Const::C_InfoType_None}}});
			} else {
				ClubStore::Action_DeleteActivity(This, ClubStore::GetUserCurrentClub().Id, State.Activity.Id);
				DisplayInfo(State, TL::Compose("{{{Text_ErrorCreateCollection}}}", SourceTask.ErrorCode), {{{Const::C_InfoType_Error}}});
			}
			State.Task_SetActivityIdToItemCollection = Task::Destroy(State.Task_SetActivityIdToItemCollection);
		}
	}

	/* Update Item Collection */
	if (Task::IsInitialized(State.Task_UpdateItemCollection)) {
		State.Task_UpdateItemCollection = Task::Update(State.Task_UpdateItemCollection);
		if (!Task::IsRunning(State.Task_UpdateItemCollection)) {
			declare CTaskResult_NSItemCollection SourceTask = Task::GetSourceTask_NSItemCollection(State.Task_UpdateItemCollection);
			if (Task::IsSuccess(State.Task_UpdateItemCollection) && SourceTask != Null) {
				ClubStore::Action_CreateOrEditItemCollectionActivity(This, State.ItemCollection, ClubStore::GetUserCurrentClub().Id, State.Activity.Id, State.Activity.Name, State.Activity.MediaUrl, State.IsEditing, State.OldItemCollection);
			} else {
				DisplayInfo(State, TL::Compose("{{{Text_ErrorUpdateCollection}}}", SourceTask.ErrorDescription), {{{Const::C_InfoType_Error}}});
			}
			State.Task_UpdateItemCollection = Task::Destroy(State.Task_UpdateItemCollection);
		}
	}

	/* Update Item Collection version */
	if (Task::IsInitialized(State.Task_UpdateVersionItemCollection)) {
		State.Task_UpdateVersionItemCollection = Task::Update(State.Task_UpdateVersionItemCollection);
		if (!Task::IsRunning(State.Task_UpdateVersionItemCollection)) {
			declare CTaskResult_NSItemCollection SourceTask = Task::GetSourceTask_NSItemCollection(State.Task_UpdateVersionItemCollection);
			if (Task::IsSuccess(State.Task_UpdateVersionItemCollection) && SourceTask != Null) {
				Router::PushParent(This);
			} else {
				DisplayInfo(State, TL::Compose("{{{Text_ErrorUpdateCollection}}}", SourceTask.ErrorDescription), {{{Const::C_InfoType_Error}}});
			}
			State.Task_UpdateVersionItemCollection = Task::Destroy(State.Task_UpdateVersionItemCollection);
		}
	}

	/* ClubStore events */
	foreach (Event in PendingEvents) {
		if (Event.Type == CMlScriptEvent::Type::PluginCustomEvent) {
			switch (Event.CustomEventType) {
				case ClubStore::C_Event_ItemCollectionActivityCreatedOrEdited: {
					if (Event.CustomEventData.count > 0) {
						if (State.Activity.Id == ClubStruct::C_ActivityNullId) {
							State.Activity.Id = TL::ToInteger(Event.CustomEventData[0]);
							State = SetActivityIdToItemCollection(State, Event.CustomEventData[0]);
						} else if (State.IsEditing && State.FileName != "") {
							State.Task_UpdateVersionItemCollection = Task::DestroyAndCreate(
								State.Task_SetActivityIdToItemCollection,
								DataFileMgr,
								DataFileMgr.ItemCollection_CreateVersion(
									MainUser::GetMainUserId(),
									State.ItemCollection.ItemId,
									State.FileName
								)
							);
						} else if (State.IsEditing) {
							Router::PushParent(This);
						}
					} else {
						DisplayInfo(State, TL::Compose("{{{Text_ErrorCreateCollection}}}", Error::C_Code_CreateClubItemsActivity_CollectionCreatedOrEdited), {{{Const::C_InfoType_Error}}});
					}
				}
				case ClubStore::C_Event_ItemCollectionActivityCreationOrEditionFailed: {
					if (State.IsEditing && Event.CustomEventData.count > 0) {
						DisplayInfo(State, Event.CustomEventData[0], {{{Const::C_InfoType_Error}}});
					} else if (!State.IsEditing) {
						State = SetActivityIdToItemCollection(State, ""); //< Reset Activity Id for Item Collection (from CORE) if activity creation failed (from LIVE)
					}
				}
			}
		}
	}

	/* Mouse detection */
	if (State.IsUsingMouse != Tools::IsUsingMouse(Input) || State.IsUsingMouseUpdateRequired) {
		State.IsUsingMouse = Tools::IsUsingMouse(Input);
		State.IsUsingMouseUpdateRequired = False;
		DisplayGalleryButtons(State);
		if (State.IsUsingMouse) {
			if (State.IsMediaControllerNavigationEnabled) State = EnableMediaControllerNavigation(State, False);
			{{{ExpendableButton::P}}}Unfocus(This, State.Controls.Button_RemoveMedia);
			{{{Button::P}}}Unfocus(This, State.Controls.Button_PreviousMedia);
			{{{Button::P}}}Unfocus(This, State.Controls.Button_NextMedia);
		} else if (State.IsMediaControllerNavigationEnabled) {
			{{{ExpendableButton::P}}}Focus(This, State.Controls.Button_RemoveMedia);
			{{{Button::P}}}Focus(This, State.Controls.Button_PreviousMedia);
			{{{Button::P}}}Focus(This, State.Controls.Button_NextMedia);
		}
	}
} else {
	foreach (Event in Router::GetPendingEvents(This)) {
		switch (Event.Type) {
			case Router::C_Event_LeavingRoute: {
				State.Controls.Label_Info.SetText("");
				State = K_State {
					CurrentMediaIndex = C_AddMedia_Index,
					Controls = State.Controls
				};
				DisplayInfo(State, "", {{{Const::C_InfoType_None}}});
				EnableNavigationGroups(True);
				UpdateActivityInfo(State);
			}
		}
	}
}
***
""",
[
	BrowserAPI::ComponentV2(),
	Button::ComponentV2(),
	ButtonIcon::ComponentV2(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpBackground::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	TextField::ComponentV2(),
	Transition::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}