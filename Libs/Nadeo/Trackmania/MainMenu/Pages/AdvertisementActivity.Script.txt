/**
 *	Page: AdvertisementActivity
 */
#Const Version		"1.2.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/AdvertisementActivity.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/CMGame/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_AdvertisementActivity"
#Const C_NavGroup_Default "navgroup-page-advertisement-activity-default"
#Const C_NavGroup_Global "navgroup-page-advertisement-activity-global"

#Const Const::C_ImageUrl_Ads_Contour as C_ImageUrl_Ads_Contour

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [AdvertisementActivity] Text of the button to open the advertisement link.
	declare Text Text_OpenLink = _("Open link");
	//L16N [AdvertisementActivity] The type of the club activity.
	declare Text Text_Advertisement = _("|ActivityType|Advertisement");
	//L16N [AdvertisementActivity] Text for the loading spinner displayed while retrieving activity info.
	declare Text Text_FetchActivity = _("Fetching activity...");

	/* Variables */
	declare Real AdsMargin = 2.5;
	declare Vec2 Size_AdvertisementFrame = <195., 77.5>;
	declare Vec2 Size_Ads_2x3 = MLHelpers::KeepRatioFromY(2., 3., Size_AdvertisementFrame.Y);
	declare Vec2 Size_Ads_64x41 = MLHelpers::KeepRatioFromX(64., 41., MLHelpers::KeepRatioFromY(64., 41+(64*10/64.), Size_AdvertisementFrame.Y - AdsMargin).X); //< y1+(x1*y2/x2)
	declare Vec2 Size_Ads_64x10 = MLHelpers::KeepRatioFromX(64., 10., Size_Ads_64x41.X);

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame global -->
<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="cancel;appmenu" data-nav-targets="_;_" data-nav-group="{{{C_NavGroup_Global}}}" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" z-index="-1"/>
	<frameinstance id="loadingspinner-retrieve-info" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-125., 20., 10.)}}}" data-label="{{{Text_FetchActivity}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" data-opacity="0." data-size="10 10" scale="0.7" z-index="2"/>
	<label id="label-title" pos="{{{MLHelpers::Skew(-126.5, 61.5, 10.)}}}" size="200 10" class="text-extrabold" textsize="13" halign="left" translate="1" filter-profanities="Always" z-index="1"/>
	<label id="label-advertisement" pos="{{{MLHelpers::Skew(-126., 51.5, 10.)}}}" size="200 10" class="text-semibold" text="{{{Text_Advertisement}}}" textsize="4.5" halign="left" z-index="1"/>
	<label id="label-info" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-semibold" textsize="2.5" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextError)}}}" halign="left"/>

	<!-- Advertisements -->
	<frame id="frame-advertisements" pos="{{{MLHelpers::Skew(0., -17., 10.)}}}">
		<frame id="frame-ad-{{{Const::C_InfoPanels_64x10}}}" hidden="1">
			<frameinstance id="control-block-list-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Size_Ads_64x10.X}}} {{{Size_Ads_64x10.Y}}}" data-halign="center" data-valign="center" data-opacity="0" z-index="1"/>
			<quad id="quad-contour" image="{{{C_ImageUrl_Ads_Contour[Const::C_InfoPanels_64x10]}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentThree)}}}" halign="center" valign="center" opacity="0" z-index="2"/>
		</frame>
		<frame id="frame-ad-{{{Const::C_InfoPanels_2x3}}}" hidden="1">
			<frameinstance id="control-block-list-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Size_Ads_2x3.X}}} {{{Size_Ads_2x3.Y}}}" data-halign="center" data-valign="center" data-opacity="0" z-index="1"/>
			<quad id="quad-contour" image="{{{C_ImageUrl_Ads_Contour[Const::C_InfoPanels_2x3]}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentThree)}}}" halign="center" valign="center" opacity="0" z-index="2"/>
		</frame>
		<frame id="frame-ad-{{{Const::C_InfoPanels_64x41}}}" hidden="1">
			<frameinstance id="control-block-list-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Size_Ads_64x41.X}}} {{{Size_Ads_64x41.Y}}}" data-halign="center" data-valign="center" data-opacity="0" z-index="1"/>
			<quad id="quad-contour" image="{{{C_ImageUrl_Ads_Contour[Const::C_InfoPanels_64x41]}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentThree)}}}" halign="center" valign="center" opacity="0" z-index="2"/>
		</frame>
	</frame>

	<!-- Bottom buttons -->
	<frameinstance id="button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
	<frameinstance
		id="button-back" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;right"
		data-nav-targets="_;button-open-link"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frame id="frame-open-link" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" hidden="1">
		<frameinstance id="button-icon-open-link" modelid="{{{ButtonIcon::C_Name}}}" data-halign="left" data-size="8 8" data-bind="appmenu" data-hideformouse="1" />
		<frameinstance
			id="button-open-link" z-index="2"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_OpenLink}}}"
			data-halign="right"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
			data-nav-inputs="select;left"
			data-nav-targets="_;button-back"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			data-nav-locked="1"
			hidden="1"
		/>
	</frame>
</frame>
""",
"""
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as Http
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/Trackmania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "TextLib" as TL

#Const C_InfoPanels_2x3 {{{dump(Const::C_InfoPanels_2x3)}}}
#Const C_InfoPanels_64x10 {{{dump(Const::C_InfoPanels_64x10)}}}
#Const C_InfoPanels_64x41 {{{dump(Const::C_InfoPanels_64x41)}}}

#Struct K_Controls {
	CMlFrame Button_Back;
	CMlFrame Button_OpenLink;
	CMlFrame Frame_Ad_64x41;
	CMlFrame Frame_Ad_2x3;
	CMlFrame Frame_Ad_64x10;
	CMlFrame Frame_Advertisements;
	CMlFrame Frame_OpenLink;
	CMlFrame LoadingSpinner_RetrieveInfo;
	CMlLabel Label_Info;
	CMlLabel Label_Title;
}

#Struct K_State {
	K_Controls Controls;
	Http::K_Request GetAdvertisementActivityRequest;
	{{{ClubStruct::P}}}K_Advertisement Advertisement;
}
""",
"""
Void DisplayInfo(K_State _State, Text _Text, Integer _InfoType) {
	declare Integer CurrentlyDisplayedInfoType for _State.Controls.Label_Info = {{{Const::C_InfoType_None}}};
	declare Vec2 Pos_Hidden = MLHelpers::SkewX(<-126., 20.>, 10.);
	declare Vec2 Pos_Visible = MLHelpers::SkewX(<-125., 20.>, 10.);

	// Update loading spinner
	if (_InfoType == {{{Const::C_InfoType_Loading}}}) {
		{{{LoadingSpinner::P}}}StartAnimWithFade(This, _State.Controls.LoadingSpinner_RetrieveInfo, _Text);
	} else if ({{{LoadingSpinner::P}}}IsLoading(_State.Controls.LoadingSpinner_RetrieveInfo)) {
		{{{LoadingSpinner::P}}}StopAnimWithFade(This, _State.Controls.LoadingSpinner_RetrieveInfo);
	}

	// Update label
	if (CurrentlyDisplayedInfoType != _InfoType || _Text != _State.Controls.Label_Info.Value) {
		AnimMgr.Flush(_State.Controls.Label_Info);
		if (_InfoType != {{{Const::C_InfoType_Loading}}} && _Text != "") {
			_State.Controls.Label_Info.SetText(_Text);
			_State.Controls.Label_Info.Opacity = 0.;
			_State.Controls.Label_Info.RelativePosition_V3 = Pos_Hidden;
			if (_InfoType == {{{Const::C_InfoType_Error}}}) _State.Controls.Label_Info.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextError)}}};
			else _State.Controls.Label_Info.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight)}}};
			AnimMgr.Add(_State.Controls.Label_Info, "<anim pos=\""^Pos_Visible.X^" "^Pos_Visible.Y^"\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(_State.Controls.Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	// Update current info type
	CurrentlyDisplayedInfoType = _InfoType;
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, _From as CMlFrame);
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, _To as CMlFrame);
		}
	}
}

Void FocusAvailableControl(K_State _State) {
	if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_OpenLink)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _State.Controls.Button_OpenLink);
	} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_Back)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _State.Controls.Button_Back);
	}
}

Void Select(K_State _State, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return;

	switch (_Control.ControlId) {
		case "button-back": {{{Router::P}}}PushParent(This);
		case "button-open-link": {
			if (Http.IsValidUrl(_State.Advertisement.ExternalUrl)) {
				OpenLink(_State.Advertisement.ExternalUrl, CMlScript::LinkType::ExternalBrowser);
			}
		}
	}

	return;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Update the layout
Void UpdateLayout(K_State _State) {
	declare Vec2 Size_Ads_2x3 = {{{Size_Ads_2x3}}};
	declare Vec2 Size_Ads_64x41 = {{{Size_Ads_64x41}}};
	declare Vec2 Size_Ads_64x10 = {{{Size_Ads_64x10}}};

	// Update ads visibility
	foreach (Ratio in {{{dump(Const::C_InfoPanels_Sizes)}}}) {
		declare CMlFrame Frame_Ad <=> (_State.Controls.Frame_Advertisements.GetFirstChild("frame-ad-"^Ratio) as CMlFrame);
		Frame_Ad.Visible = _State.Advertisement.MediaUrl.existskey(Ratio);
		foreach (Control in Frame_Ad.Controls) {
			if ({{{ControlBlockList::P}}}IsControlBlockList(Control)) {
				if (Frame_Ad.Visible) {
					{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, Control as CMlFrame, [_State.Advertisement.CreatorAccountId, _State.Advertisement.LatestEditorAccountId], _State.Advertisement.MediaUrl[Ratio], False);
					{{{ControlBlockList::P}}}SetOpacity(This, Control as CMlFrame, 1., 250, False);
				} else {
					{{{ControlBlockList::P}}}SetOpacity(This, Control as CMlFrame, 0., False);
				}
			} else if (Control is CMlQuad) {
				declare CMlQuad Quad = (Control as CMlQuad);
				AnimMgr.Flush(Control);
				if (Frame_Ad.Visible) {
					AnimMgr.Add(Quad, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				} else {
					Quad.Opacity = 0.;
				}
			}
		}
	}

	// Update ads size
	switch (_State.Advertisement.MediaUrl.count) {
		case 1: {
			if (_State.Advertisement.MediaUrl.existskey(C_InfoPanels_64x41)) {
				Size_Ads_64x41 = MLHelpers::KeepRatioFromY(16., 9., {{{Size_AdvertisementFrame.Y}}});
			} else if (_State.Advertisement.MediaUrl.existskey(C_InfoPanels_64x10)) {
				Size_Ads_64x10 = MLHelpers::KeepRatioFromX(64., 10., {{{Size_AdvertisementFrame.X}}});
			}
		}
		case 2: {
			if (_State.Advertisement.MediaUrl.existskey(C_InfoPanels_2x3) && _State.Advertisement.MediaUrl.existskey(C_InfoPanels_64x41)) {
				Size_Ads_64x41 = MLHelpers::KeepRatioFromY(16., 9., {{{Size_AdvertisementFrame.Y}}});
			} else if (_State.Advertisement.MediaUrl.existskey(C_InfoPanels_2x3) && _State.Advertisement.MediaUrl.existskey(C_InfoPanels_64x10)) {
				Size_Ads_2x3 = MLHelpers::KeepRatioFromY(2., 3., Size_Ads_2x3.Y - (Size_Ads_2x3.Y / ({{{Size_AdvertisementFrame.Y - AdsMargin}}}) * (Size_Ads_2x3.Y + Size_Ads_64x10.Y + {{{AdsMargin}}} - {{{Size_AdvertisementFrame.Y}}})));
				Size_Ads_64x10 = MLHelpers::KeepRatioFromY(64., 10., {{{Size_AdvertisementFrame.Y - AdsMargin}}} - Size_Ads_2x3.Y);
			}
		}
	}
	{{{ControlBlockList::P}}}SetSize(This, _State.Controls.Frame_Ad_64x41.GetFirstChild("control-block-list-image") as CMlFrame, Size_Ads_64x41 - <(20./1080.)*Size_Ads_64x41.X, (20./692.)*Size_Ads_64x41.Y>); //< Remove the thickness of the contour to have the image inside the contour
	{{{ControlBlockList::P}}}SetSize(This, _State.Controls.Frame_Ad_2x3.GetFirstChild("control-block-list-image") as CMlFrame, Size_Ads_2x3 - <(20./512.)*Size_Ads_2x3.X, (20./760.)*Size_Ads_2x3.Y>); //< Remove the thickness of the contour to have the image inside the contour
	{{{ControlBlockList::P}}}SetSize(This, _State.Controls.Frame_Ad_64x10.GetFirstChild("control-block-list-image") as CMlFrame, Size_Ads_64x10 - <(20./992.)*Size_Ads_64x10.X, (20./176.)*Size_Ads_64x10.Y>); //< Remove the thickness of the contour to have the image inside the contour
	(_State.Controls.Frame_Ad_64x41.GetFirstChild("quad-contour") as CMlQuad).Size = Size_Ads_64x41;
	(_State.Controls.Frame_Ad_2x3.GetFirstChild("quad-contour") as CMlQuad).Size = Size_Ads_2x3;
	(_State.Controls.Frame_Ad_64x10.GetFirstChild("quad-contour") as CMlQuad).Size = Size_Ads_64x10;

	// Update ads layout
	switch (_State.Advertisement.MediaUrl.count) {
		case 1: {
			_State.Controls.Frame_Ad_2x3.RelativePosition_V3 = <0., 0.>;
			_State.Controls.Frame_Ad_64x41.RelativePosition_V3 = <0., 0.>;
			_State.Controls.Frame_Ad_64x10.RelativePosition_V3 = <0., 0.>;
		}
		case 2: {
			if (_State.Advertisement.MediaUrl.existskey(C_InfoPanels_2x3) && _State.Advertisement.MediaUrl.existskey(C_InfoPanels_64x41)) {
				_State.Controls.Frame_Ad_2x3.RelativePosition_V3 = <Size_Ads_64x41.X*0.5 + {{{AdsMargin*0.5}}}, 0.>;
				_State.Controls.Frame_Ad_64x41.RelativePosition_V3 = <-Size_Ads_2x3.X*0.5 - {{{AdsMargin*0.5}}}, 0.>;
			} else if (_State.Advertisement.MediaUrl.existskey(C_InfoPanels_2x3) && _State.Advertisement.MediaUrl.existskey(C_InfoPanels_64x10)) {
				_State.Controls.Frame_Ad_2x3.RelativePosition_V3 = <0., Size_Ads_64x10.Y*0.5 + {{{AdsMargin*0.5}}}>;
				_State.Controls.Frame_Ad_64x10.RelativePosition_V3 = <0., -Size_Ads_2x3.Y*0.5 - {{{AdsMargin*0.5}}}>;
			} else if (_State.Advertisement.MediaUrl.existskey(C_InfoPanels_64x41) && _State.Advertisement.MediaUrl.existskey(C_InfoPanels_64x10)) {
				_State.Controls.Frame_Ad_64x41.RelativePosition_V3 = <0., -Size_Ads_64x10.Y*0.5 - {{{AdsMargin*0.5}}}>;
				_State.Controls.Frame_Ad_64x10.RelativePosition_V3 = <0., Size_Ads_64x41.Y*0.5 + {{{AdsMargin*0.5}}}>;
			}
		}
		case 3: {
			_State.Controls.Frame_Ad_64x41.RelativePosition_V3 = <-Size_Ads_2x3.X*0.5 - {{{AdsMargin*0.5}}}, -Size_Ads_64x10.Y*0.5 - {{{AdsMargin*0.5}}}>;
			_State.Controls.Frame_Ad_2x3.RelativePosition_V3 = <Size_Ads_64x41.X*0.5 + {{{AdsMargin*0.5}}}, 0.>;
			_State.Controls.Frame_Ad_64x10.RelativePosition_V3 = <-Size_Ads_2x3.X*0.5 - {{{AdsMargin*0.5}}}, Size_Ads_64x41.Y*0.5 + {{{AdsMargin*0.5}}}>;
		}
	}

	// Update navigation
	_State.Controls.Frame_OpenLink.Visible = !Platform::IsAmazon(System) && _State.Advertisement.MediaUrl.count > 0 && Http.IsValidUrl(_State.Advertisement.ExternalUrl);
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(_State.Controls.Button_OpenLink, _State.Controls.Frame_OpenLink.Visible);
	FocusAvailableControl(_State);
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_State State;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	GetAdvertisementActivityRequest = Http::GetEmptyRequest(),
	Controls = K_Controls {
		Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
		Button_OpenLink = (Frame_Global.GetFirstChild("button-open-link") as CMlFrame),
		Frame_Ad_64x41 = (Frame_Global.GetFirstChild("frame-ad-64x41") as CMlFrame),
		Frame_Ad_2x3 = (Frame_Global.GetFirstChild("frame-ad-2x3") as CMlFrame),
		Frame_Ad_64x10 = (Frame_Global.GetFirstChild("frame-ad-64x10") as CMlFrame),
		Frame_Advertisements = (Frame_Global.GetFirstChild("frame-advertisements") as CMlFrame),
		Frame_OpenLink = (Frame_Global.GetFirstChild("frame-open-link") as CMlFrame),
		Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
		Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
		LoadingSpinner_RetrieveInfo = (Frame_Global.GetFirstChild("loadingspinner-retrieve-info") as CMlFrame)
	}
};
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_AdvertisementActivity}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);
				if (Query.existskey("{{{RoutePaths::C_Query_Activity}}}")) {
					declare {{{ClubStruct::P}}}K_Activity Activity;
					Activity.fromjson(Query["{{{RoutePaths::C_Query_Activity}}}"]);
					State.Controls.Label_Title.SetText(Activity.Name);
					State.GetAdvertisementActivityRequest = Http::DestroyAndCreate(State.GetAdvertisementActivityRequest, ClubAPI::GetAdvertisementActivity(Activity.ClubId, Activity.Id));
					DisplayInfo(State, "{{{Text_FetchActivity}}}", {{{Const::C_InfoType_Loading}}});
					ControllerInfo::SetButtons(["A" => _("Select")]);
				} else {
					{{{Router::P}}}PushParent(This);
				}
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background") {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: {{{Router::P}}}PushParent(This);
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::AppMenu: Select(State, State.Controls.Button_OpenLink);
						case CMlScriptEvent::EMenuNavAction::Cancel: {{{Router::P}}}PushParent(This);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: Select(State, Event.To);
						default: Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: Select(State, Event.To);
						case CMlScriptEvent::Type::MouseOver: Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* Get news activity request */
	if (Http::IsInitialized(State.GetAdvertisementActivityRequest)) {
		State.GetAdvertisementActivityRequest = Http::Update(State.GetAdvertisementActivityRequest);
		if (!Http::IsRunning(State.GetAdvertisementActivityRequest)) {
			if (Http::IsSuccess(State.GetAdvertisementActivityRequest)) {
				State.Advertisement = ClubAPI::GetResponseFromGetAdvertisementActivity(State.GetAdvertisementActivityRequest);
				if (State.Controls.Label_Title.Value == "") State.Controls.Label_Title.SetText(State.Advertisement.Name);
				if (State.Advertisement.MediaUrl.count > 0) {
					DisplayInfo(State, "", {{{Const::C_InfoType_None}}});
				} else {
					//L16N [AdvertisementActivity] Error displayed when there is no images in the advertising campaign.
					DisplayInfo(State, _("There are no images in this advertising campaign."), {{{Const::C_InfoType_Standard}}});
				}
			} else {
				//L16N [AdvertisementActivity] Error displayed when fetching news activity failed. %1 will be replaced by an error, e.g. "(Error code: 500)"
				DisplayInfo(State, TL::Compose(_("Error while fetching the activity info, please try again. (Error code: %1)"), ""^Http::GetStatusCode(State.GetAdvertisementActivityRequest)), {{{Const::C_InfoType_Error}}});
			}
			State.GetAdvertisementActivityRequest = Http::Destroy(State.GetAdvertisementActivityRequest);
			UpdateLayout(State);
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_LeavingRoute}}}": {
				State.Advertisement = {{{ClubStruct::P}}}K_Advertisement {};
				DisplayInfo(State, "", {{{Const::C_InfoType_None}}});
				UpdateLayout(State);
			}
		}
	}
}
***
""",
[
	ButtonIcon::ComponentV2(),
	ClubStruct::Component(),
	ControlBlockList::ComponentV2(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpBackground::ComponentV2(),
	Router::ComponentV2(),
	Transition::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}