/**
 *	Page: ClubItemsActivity
 */
#Const Version		"1.1.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/ClubItemsActivity.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/CMGame/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_ClubItemsActivity"
#Const C_NavGroup_Default "navgroup-page-clubitemsactivity-default"
#Const C_NavGroup_MouseOnly "navgroup-page-clubitemsactivity-mouse-only"
#Const C_NavGroup_Global "navgroup-page-clubitemsactivity-global"

#Const C_Class_Media "class-page-clubitemsactivity-media"
#Const C_Class_MediaAction "class-page-clubitemsactivity-media-action"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [Item Collection activity page] Text displayed while retrieving the items collection
	declare Text Text_RetrievingActivity = _("Retrieving items collection");
	//L16N [Item Collection activity page] Information on the club
	declare Text Text_Club = _("Club $<%1$>");
	//L16N [Item Collection activity page] Text to indicate the current image position, e.g "2/10"
	declare Text Text_Pager = _("%1/%2");
	//L16N [Item Collection activity page] When there is no description or medias int the collection
	declare Text Text_NoInfo = _("No info about this collection");
	//L16N [Item Collection activity page] Button allowing the user to add a collection to their favorites
	declare Text Text_Add = _("Add collection");
	//L16N [Item Collection activity page] Loading text dislpayed while adding the collection to the track editor.
	declare Text Text_Adding = _("Adding the items collection to your favorites...");
	//L16N [Item Collection activity page] Button allowing the user to remove a collection from their favorites
	declare Text Text_Remove = _("Remove collection");
	//L16N [Item Collection activity page] Loading text dislpayed while removing the collection to the track editor.
	declare Text Text_Removing = _("Removing the items collection from your favorites...");
	//L16N [Item Collection activity page] Text above the images used to illustrate the collection
	declare Text Text_Pictures = _("Image gallery");
	//L16N [Item Collection activity page] Text preceded by a button icon (i.e. "X") to inform the player that they can access the image gallery by pressing the associated button on their controller.
	declare Text Text_AccessGallery = _("Access gallery");
	//L16N [Item Collection activity page] Text preceded by a button icon (i.e. "X") to inform the player that they can exit the image gallery by pressing the associated button on their controller.
	declare Text Text_ExitGallery = _("Exit gallery");
	//L16N [Item Collection activity page] Message displayed when there is an error while adding an Item Collection to the user's favorites. %1 will be replaced by an error code. e.g. "Failed to add the Item Collection to your favorites. (Error: 123456)"
	declare Text Text_ErrorAddFavorite = _("Failed to add the Item Collection to your favorites. (Error: %1)");
	//L16N [Item Collection activity page] Message displayed when there is an error while removing an Item Collection from the user's favorites. %1 will be replaced by an error code. e.g. "Failed to remove the Item Collection from your favorites. (Error: 123456)"
	declare Text Text_ErrorRemoveFavorite = _("Failed to remove the Item Collection from your favorites. (Error: %1)");
	//L16N [Item Collection activity page] Message displayed when there is an error while getting the user's favorite Item Collections. %1 will be replaced with an error code. e.g. "Failed to retrieve your favorite Item Collections. (Error: 123456)"
	declare Text Text_ErrorGetFavorite = _("Failed to retrieve your favorite Item Collections. (Error: %1)");
	//L16N [Item Collection activity page] Message displayed on console to warn the user that item collections are not usable on the console, but only on PC
	declare Text Text_WarnConsole = _("Item collections are not usable on this platform's track editor, but you can add them for other platforms.");

	/* Variables */
	declare Vec2 Size_Gallery = MLHelpers::KeepRatioFromY(1596., 904., 63.);
	declare Vec2 Size_Description = Size_Gallery;
	declare Vec2 Pos_Gallery = MLHelpers::SkewX(<63.3, -22.>, 10.);
	declare Vec2 Pos_Description = MLHelpers::SkewX(<-64., -22.>, 10.);

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame global -->
<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="cancel" data-nav-targets="_" data-nav-group="{{{C_NavGroup_Global}}}" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" z-index="-1"/>
	<frameinstance id="loadingspinner-retrieve-info" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-120., 20., 10.)}}}" data-label="{{{Text_RetrievingActivity}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" data-opacity="0." data-size="10 10" scale="0.7" z-index="2"/>
	<label id="label-title" pos="{{{MLHelpers::Skew(-126.5, 61.5, 10.)}}}" size="150 20" class="text-extrabold" textsize="13" halign="left" filter-profanities="OnlyIfNotTranslated" z-index="1"/>
	<label id="label-warn-console" pos="{{{MLHelpers::Skew(-125., 30., 10.)}}}" size="250 10" class="text-semibold" text="{{{Text_WarnConsole}}}" textsize="2." valign="bottom" halign="left" hidden="{{{Platform::IsPC(System)}}}"/>
	<label id="label-info" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-semibold" textsize="2.5" halign="left" hidden="1"/>
	<frameinstance
		id="button-club" z-index="2"
		pos="{{{MLHelpers::Skew(-125.5, 53., 10.)}}}"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-styles="{{{ExpendableButton::C_Style_NoBackground}}}"
		data-valign="center"
		data-icon-image="{{{Icons::C_Icon_128x128_Link}}}"
		data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
		data-icon-color-unfocused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
		data-icon-color-focused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
		data-text-textcolor-unfocused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}"
		data-text-textcolor-focused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
		data-nav-inputs="select;down;left;right"
		data-nav-targets="_;button-bucket-media;button-back;button-add-or-remove"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		data-nav-locked="1"
		data-filter-profanities="{{{Tools::C_FilterProfanities_Always}}}"
		hidden="1"
	/>

	<!-- Pop-up content -->
	<frame id="frame-content" z-index="1">
		<frameinstance
			id="textfield-description" pos="{{{Pos_Description.X}}} {{{Pos_Description.Y}}}"
			modelid="{{{TextField::C_Name}}}"
			data-size="{{{Size_Description.X}}} {{{Size_Description.Y}}}"
			data-textsize="3." data-autonewline="1"
			data-bgopacityunfocus="0.5"
			data-bgcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-bgcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-textfieldtype="{{{TextField::C_TextFieldType_TextEdit}}}"
			data-textcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}"
			data-halign="center" data-valign="center"
			data-skew="0."
		/>

		<frame id="frame-media" pos="{{{Pos_Gallery.X}}} {{{Pos_Gallery.Y}}}">
			<frameinstance
				id="button-previous-media" pos="{{{-0.38*Size_Gallery.X}}} 0"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_MediaAction}}}"
				data-bgempty="1"
				data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
				data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-icon="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
				data-iconsize="15 15"
				data-iconopacityunfocus=".4"
				data-halign="right" data-valign="center"
				data-nav-inputs="select;left;right;down;up"
				data-nav-targets="_;button-back;button-bucket-media;button-add-or-remove;button-upload-collection"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				id="button-bucket-media"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_Media}}}"
				data-size="{{{Size_Gallery.X}}} {{{Size_Gallery.Y}}}"
				data-text="{{{Text_Pictures}}}"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-textsize="3.5"
				data-textitalicslope=".2"
				data-textypos="0.05"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-textopacityunfocus="1."
				data-opacityunfocus="0.75"
				data-contourimage="{{{Const::C_ImageUrl_PopUp_Activity_ItemCollection_Media_Contour}}}"
				data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-contouropacityunfocus=".0"
				data-bgkeepratio="Clip"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;up;down;left;right"
				data-nav-targets="_;button-club;button-back;_;_"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frameinstance
				id="button-next-media" pos="{{{0.38*Size_Gallery.X}}} 0"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_MediaAction}}}"
				data-bgempty="1"
				data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
				data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-icon="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
				data-iconfocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
				data-iconsize="15 15"
				data-iconopacityunfocus=".4"
				data-halign="left" data-valign="center"
				data-nav-inputs="select;left;down;up"
				data-nav-targets="_;button-bucket-media;button-add-or-remove;button-upload-collection"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<label id="label-media-pager" pos="0 {{{-0.5*Size_Gallery.Y - 1.5}}}" class="text-semibold" textsize="2" valign="top"/>
		</frame>
		<label id="label-no-info" pos="{{{MLHelpers::Skew(0., -10., 10.)}}}" size="180 10" class="text-semibold" text="{{{Text_NoInfo}}}" textsize="4" hidden="1"/>
	</frame>

	<!-- Bottom buttons -->
	<frameinstance id="button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
	<frameinstance
		id="button-back" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-max-width="60."
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;up;right"
		data-nav-targets="_;button-bucket-media;button-add-or-remove"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance
		id="button-add-or-remove" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_Add}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-halign="right"
		data-nav-inputs="select;up;left"
		data-nav-targets="_;button-bucket-media;button-back"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		data-nav-locked="1"
		hidden="1"
	/>
</frame>
""",
"""
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as Http
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/Trackmania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ReportSystem.Script.txt" as ReportSystem
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/Trackmania/Structures/ReportStruct.Script.txt" as ReportStruct
#Include "Libs/Nadeo/Trackmania/ClubEdition.Script.txt" as ClubEdition
#Include "TextLib" as TL

#Struct K_Controls {
	CMlFrame Button_AddOrRemoveCollection;
	CMlFrame Button_Back;
	CMlFrame Button_BucketMedia;
	CMlFrame Button_Club;
	CMlFrame Button_NextMedia;
	CMlFrame Button_PreviousMedia;
	CMlFrame Frame_Media;
	CMlFrame LoadingSpinner_RetrieveInfo;
	CMlFrame TextField_Description;
	CMlLabel Label_Info;
	CMlLabel Label_MediaPager;
	CMlLabel Label_NoInfo;
	CMlLabel Label_Title;
}

#Struct K_State {
	Boolean IsMediaControllerNavigationEnabled;
	Boolean IsUsingMouse;
	Integer CurrentMediaIndex;
	Text[] FavoriteListIds;
	K_Controls Controls;
	Http::K_Request GetBucketActivityRequest;
	Http::K_Request GetClubDetailRequest;
	Task::K_Task Task_ItemCollection_AddFavorite;
	Task::K_Task Task_ItemCollection_GetFavoriteList;
	Task::K_Task Task_ItemCollection_RemoveFavorite;
	ClubStruct::LibStructuresClub_K_Activity Activity;
	ClubStruct::LibStructuresClub_K_BucketItem ItemCollection;
	ClubStruct::LibStructuresClub_K_Club Club;
}

""",
"""
/// Enable or disable navigation groups
Void EnableNavigationGroups(Boolean _IsEnabled) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", _IsEnabled);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_MouseOnly}}}", _IsEnabled);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", _IsEnabled);
}

/// Update controller hints at the bottom of the screen
Void UpdateControllerInfo(K_State _State) {
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
	declare Text[Text] ControllerInfos = ["Select" => _("Select"), "Cancel" => _("Back"), "{{{Const::C_NavInput_ReportSystem}}}" => "{{{Const::C_Text_Report}}}"];

	if (_State.IsMediaControllerNavigationEnabled) {
		ControllerInfos["Cancel"] = "{{{Text_ExitGallery}}}";
	} else if (FocusedControl != Null && FocusedControl == _State.Controls.Button_BucketMedia) {
		if (_State.ItemCollection.MediaUrls.count > 0) {
			ControllerInfos["Select"] = "{{{Text_AccessGallery}}}";
		}
	}

	ControllerInfo::SetButtons(ControllerInfos);
}
/// Display information in the form of an animated message or a loading spinner
Void DisplayInfo(K_State _State, Text _Text, Integer _InfoType) {
	declare Integer CurrentlyDisplayedInfoType for _State.Controls.Label_Info = {{{Const::C_InfoType_None}}};
	declare Vec2 Pos_Hidden = MLHelpers::SkewX(<-126., 20.>, 10.);
	declare Vec2 Pos_Visible = MLHelpers::SkewX(<-125., 20.>, 10.);

	// Update loading spinner
	if (_InfoType == {{{Const::C_InfoType_Loading}}}) {
		{{{LoadingSpinner::P}}}StartAnimWithFade(This, _State.Controls.LoadingSpinner_RetrieveInfo, _Text);
	} else {
		{{{LoadingSpinner::P}}}StopAnimWithFade(This, _State.Controls.LoadingSpinner_RetrieveInfo);
	}

	// Update label
	if (CurrentlyDisplayedInfoType != _InfoType || _Text != _State.Controls.Label_Info.Value) {
		AnimMgr.Flush(_State.Controls.Label_Info);
		if (_InfoType != {{{Const::C_InfoType_Loading}}} && _Text != "") {
			_State.Controls.Label_Info.SetText(_Text);
			_State.Controls.Label_Info.Opacity = 0.;
			_State.Controls.Label_Info.RelativePosition_V3 = Pos_Hidden;
			if (_InfoType == {{{Const::C_InfoType_Error}}}) _State.Controls.Label_Info.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextError)}}};
			else _State.Controls.Label_Info.TextColor = <1., 1., 1.>;
			AnimMgr.Add(_State.Controls.Label_Info, "<anim pos=\""^Pos_Visible.X^" "^Pos_Visible.Y^"\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(_State.Controls.Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	// Update current info type
	CurrentlyDisplayedInfoType = _InfoType;
}

/// Handle the display of the gallery buttons
Void DisplayGalleryButtons(K_State _State) {
	declare Boolean IsButtonDisplayed = _State.ItemCollection.MediaUrls.count > 1 && (_State.IsUsingMouse || _State.IsMediaControllerNavigationEnabled);
	{{{Button::P}}}SetVisibilityAndNavigation(_State.Controls.Button_NextMedia, IsButtonDisplayed);
	{{{Button::P}}}SetVisibilityAndNavigation(_State.Controls.Button_PreviousMedia, IsButtonDisplayed);
}

/// Handle navigation focus
Void Focus(K_State _State, CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, _From as CMlFrame);
			if (_From.HasClass("{{{C_Class_Media}}}")) {
				UpdateControllerInfo(_State);
			}
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, _To as CMlFrame);
			if (_To.HasClass("{{{C_Class_Media}}}")) {
				UpdateControllerInfo(_State);
			}
		}
	}
}

/// Focus the first available control
Void FocusAvailableControl(K_State _State) {
	if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_AddOrRemoveCollection)) {
		Focus(_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _State.Controls.Button_AddOrRemoveCollection);
	} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_Club)) {
		Focus(_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _State.Controls.Button_Club);
	} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_Back)) {
		Focus(_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _State.Controls.Button_Back);
	}
}

/// Enable or disable the controller navigation between gallery medias
K_State EnableMediaControllerNavigation(K_State _State, Boolean _IsEnabled) {
	declare K_State State = _State;

	State.IsMediaControllerNavigationEnabled = _IsEnabled;
	if (_IsEnabled) {
		{{{Button::P}}}SetContourColor(This, State.Controls.Button_BucketMedia, <1., 1., 1.>);
	} else {
		{{{Button::P}}}SetContourColor(This, State.Controls.Button_BucketMedia, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}});
	}
	UpdateControllerInfo(State);

	// Force refresh the button focus
	State.IsUsingMouse = !Tools::IsUsingMouse(Input);

	return State;
}

/// Update the pop-up with all available activity information
Void UpdateActivityInfo(K_State _State) {
	declare Boolean HasImages = _State.ItemCollection.MediaUrls.count > 0;
	declare Boolean HasDescription = _State.ItemCollection.Description != "";

	// Activity title
	if (_State.Controls.Label_Title.Value != _State.Activity.Name) {
		_State.Controls.Label_Title.Value = _State.Activity.Name;
	}

	// Item Collection medias
	DisplayGalleryButtons(_State);
	_State.Controls.Frame_Media.Visible = HasImages;
	_State.Controls.Label_MediaPager.Value = TL::Compose("{{{Text_Pager}}}", TL::ToText(_State.CurrentMediaIndex+1), TL::ToText(_State.ItemCollection.MediaUrls.count));
	_State.Controls.Button_BucketMedia.Visible = HasImages;
	{{{Navigation::P}}}Lock(_State.Controls.Button_BucketMedia, _State.ItemCollection.MediaUrls.count <= 1);
	if (_State.ItemCollection.MediaUrls.count > 1) {
		{{{Button::P}}}SetOpacityUnfocus(This, _State.Controls.Button_BucketMedia, 0.75);
	} else {
		{{{Button::P}}}SetOpacityUnfocus(This, _State.Controls.Button_BucketMedia, 1.);
	}
	if (HasImages && _State.ItemCollection.MediaUrls.existskey(_State.CurrentMediaIndex)) {
		if (Http.IsValidUrl(_State.ItemCollection.MediaUrls[_State.CurrentMediaIndex])) {
			{{{Button::P}}}SetImage(This, _State.Controls.Button_BucketMedia, _State.ItemCollection.MediaUrls[_State.CurrentMediaIndex]);
			{{{Button::P}}}SetImageFocus(This, _State.Controls.Button_BucketMedia, _State.ItemCollection.MediaUrls[_State.CurrentMediaIndex]);
		}
	}

	// Item Collection description
	_State.Controls.TextField_Description.Visible = HasDescription;
	{{{TextField::P}}}SetValue(This, _State.Controls.TextField_Description, _State.ItemCollection.Description);

	// Adapt frames positions
	if (!HasImages && HasDescription) _State.Controls.TextField_Description.RelativePosition_V3.X = 0.;
	if (HasImages && !HasDescription) _State.Controls.Frame_Media.RelativePosition_V3.X = 0.;
	if (HasImages && HasDescription) {
		_State.Controls.TextField_Description.RelativePosition_V3 = {{{Pos_Description}}};
		_State.Controls.Frame_Media.RelativePosition_V3 = {{{Pos_Gallery}}};
	}

	// Update navigation
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
	if (FocusedControl == Null || {{{Navigation::P}}}IsLocked(FocusedControl)) {
		FocusAvailableControl(_State);
	}

	// Update controller infos
	UpdateControllerInfo(_State);
}

/// Update the pager of the medias gallery depending on the given index
K_State MediaPager(K_State _State, Integer _MediaIndex) {
	declare K_State State = _State;

	if (_MediaIndex >= State.ItemCollection.MediaUrls.count) {
		State.CurrentMediaIndex = 0;
	}	else if (_MediaIndex < 0) {
		State.CurrentMediaIndex = State.ItemCollection.MediaUrls.count - 1;
	} else {
		State.CurrentMediaIndex = _MediaIndex;
	}

	UpdateActivityInfo(State);
	return State;
}

/// Create a task to get the player's favorite item collections
K_State GetFavoriteList(K_State _State) {
	declare K_State State = _State;

	State.Task_ItemCollection_GetFavoriteList = Task::DestroyAndCreate(
		State.Task_ItemCollection_GetFavoriteList,
		DataFileMgr,
		DataFileMgr.ItemCollection_GetFavoriteList(MainUser::GetMainUserId())
	);

	return State;
}

/// Create a task to add the items collection to favorites
K_State AddToFavorite(K_State _State) {
	declare K_State State = _State;

	if (!_State.FavoriteListIds.exists(_State.ItemCollection.ItemId)) {
		DisplayInfo(State, "{{{Text_Adding}}}", {{{Const::C_InfoType_Loading}}});
		State.Task_ItemCollection_AddFavorite = Task::DestroyAndCreate(
			State.Task_ItemCollection_AddFavorite,
			DataFileMgr,
			DataFileMgr.ItemCollection_AddFavorite(MainUser::GetMainUserId(), State.ItemCollection.ItemId)
		);
	} else {
		//L16N [Item Collection activity page] Message displayed when the Item Collection is already in the favorite list
		DisplayInfo(State, _("Item Collection already in your favorites list"), {{{Const::C_InfoType_Error}}});
	}

	return State;
}

/// Create a task to remove the items collection from favorites
K_State RemoveFromFavorite(K_State _State) {
	declare K_State State = _State;

	if (_State.FavoriteListIds.exists(_State.ItemCollection.ItemId)) {
		DisplayInfo(State, "{{{Text_Removing}}}", {{{Const::C_InfoType_Loading}}});
		State.Task_ItemCollection_RemoveFavorite = Task::DestroyAndCreate(
			State.Task_ItemCollection_RemoveFavorite,
			DataFileMgr,
			DataFileMgr.ItemCollection_RemoveFavorite(MainUser::GetMainUserId(), State.ItemCollection.ItemId)
		);
	} else {
		//L16N [Item Collection activity page] Message displayed when the Item Collection is not in the user's favorites list
		DisplayInfo(State, _("This Item Collection is not in your favorites list. Cannot remove it."), {{{Const::C_InfoType_Error}}});
	}

	return State;
}

/// Handle navigation selection\
K_State Select(K_State _State, CMlControl _Control, Boolean _IsUsingMouse) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-back" : Router::PushParent(This);
		case "button-club": {
			if (State.Club.Id != ClubStruct::C_ClubNullId) {
				Router::SetParentPath(This, RoutePaths::C_Path_ClubDetails, Router::GetCurrentParentPath(This));
				Router::Push(This, RoutePaths::C_Path_ClubDetails, [RoutePaths::C_Query_Club => State.Club.tojson()]);
			}
		}
		case "button-previous-media": State = MediaPager(State, State.CurrentMediaIndex-1);
		case "button-next-media": State = MediaPager(State, State.CurrentMediaIndex+1);
		case "button-add-or-remove": {
			if (UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_UseCustomCollection)) {
				if (!{{{LoadingSpinner::P}}}IsLoading(State.Controls.LoadingSpinner_RetrieveInfo)) {
					if (State.FavoriteListIds.exists(State.ItemCollection.ItemId)) {
						State = RemoveFromFavorite(State);
					} else {
						State = AddToFavorite(State);
					}
				}
			} else {
				ClubEdition::GoToPage(This, Router::GetCurrentRoutePath(This), RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_AddFavoriteItemCollections));
			}
		}
		case "button-bucket-media": {
			if (!_IsUsingMouse) {
				State = EnableMediaControllerNavigation(State, True);
			}
		}
	}
	return State;
}

/// Update the button of the activity's club
Void UpdateClubButton(K_State _State) {
	{{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Club, TL::Compose("{{{Text_Club}}}", _State.Club.Name));
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(_State.Controls.Button_Club, _State.Club.Name != "");
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_State State;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	FavoriteListIds = [],
	GetBucketActivityRequest = Http::GetEmptyRequest(),
	GetClubDetailRequest = Http::GetEmptyRequest(),
	Controls = K_Controls {
		Button_AddOrRemoveCollection = (Frame_Global.GetFirstChild("button-add-or-remove") as CMlFrame),
		Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
		Button_BucketMedia = (Frame_Global.GetFirstChild("button-bucket-media") as CMlFrame),
		Button_Club = (Frame_Global.GetFirstChild("button-club") as CMlFrame),
		Frame_Media = (Frame_Global.GetFirstChild("frame-media") as CMlFrame),
		Button_NextMedia = (Frame_Global.GetFirstChild("button-next-media") as CMlFrame),
		Button_PreviousMedia = (Frame_Global.GetFirstChild("button-previous-media") as CMlFrame),
		Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
		Label_MediaPager = (Frame_Global.GetFirstChild("label-media-pager") as CMlLabel),
		Label_NoInfo = (Frame_Global.GetFirstChild("label-no-info") as CMlLabel),
		Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
		LoadingSpinner_RetrieveInfo = (Frame_Global.GetFirstChild("loadingspinner-retrieve-info") as CMlFrame),
		TextField_Description = (Frame_Global.GetFirstChild("textfield-description") as CMlFrame)
	}
};

***

***MainLoop***
***
if (Router::PageIsRunning(This, RoutePaths::C_Path_ClubItemsActivity)) {
	foreach (Event in Router::GetPendingEvents(This)) {
		switch (Event.Type) {
			case Router::C_Event_EnteringRoute: {
				ReportSystem::AddUsingId("{{{C_Name}}}");

				declare Text[Text] Query = Router::GetCurrentRouteQuery(This);
				if (Query.existskey(RoutePaths::C_Query_Activity)) {
					State.Activity.fromjson(Query[RoutePaths::C_Query_Activity]);

					// Requests
					DisplayInfo(State, "{{{Text_RetrievingActivity}}}", {{{Const::C_InfoType_Loading}}});
					State.GetBucketActivityRequest = Http::DestroyAndCreate(State.GetBucketActivityRequest, ClubAPI::GetBucketActivity(State.Activity.ClubId, State.Activity.Id, 0, 1));
					if (Router::GetCurrentParentPath(This) != RoutePaths::C_Path_ClubDetails && State.Activity.ClubId != ClubStruct::C_ClubNullId) {
						State.GetClubDetailRequest = Http::DestroyAndCreate(State.GetClubDetailRequest, ClubAPI::GetClub(State.Activity.ClubId));
					} else {
						UpdateClubButton(State);
					}

					// Report system
					if (State.Activity.Id != ClubStruct::C_ActivityNullId) {
						ReportSystem::AddData(
							ReportStruct::C_ReportTarget_Activity,
							ReportStruct::LibStructuresReport_K_ReportData {
								Details = [State.Activity.Name],
								Ids = [TL::ToText(State.Activity.Id)],
								Contexts = [["From" => "Menu ClubItemsActivity"]]
							}
						);
					}

					UpdateActivityInfo(State);
					EnableMediaControllerNavigation(State, False);
				} else {
					Router::PushParent(This);
				}
			}
		}
	}

	/* Bucket activity request */
	if (Http::IsInitialized(State.GetBucketActivityRequest)) {
		State.GetBucketActivityRequest = Http::Update(State.GetBucketActivityRequest);
		if (!Http::IsRunning(State.GetBucketActivityRequest)) {
			if (Http::IsSuccess(State.GetBucketActivityRequest)) {
				declare ClubStruct::LibStructuresClub_K_BucketActivity BucketActivity = ClubAPI::GetResponseFromGetBucketActivity(State.GetBucketActivityRequest);
				if (State.Activity.Type == ClubStruct::C_ClubActivity_ItemUpload && BucketActivity.BucketItemList.count > 0) {
					if (State.Activity.Name == "") State.Activity.Name = BucketActivity.Name;
					State.ItemCollection = BucketActivity.BucketItemList[0];
					State.Controls.Label_NoInfo.Visible = State.ItemCollection.MediaUrls.count <= 0 && State.ItemCollection.Description == "";
					State = GetFavoriteList(State);
					UpdateActivityInfo(State);
				}
			} else {
				//L16N [Item Collection activity page] %1 will be replaced by an error, e.g. "(Error code: 500)"
				DisplayInfo(State, TL::Compose(_("Error while fetching the activity info, please try again. (Error code: %1)"), ""^Http::GetStatusCode(State.GetBucketActivityRequest)), {{{Const::C_InfoType_Error}}});
			}
			State.GetBucketActivityRequest = Http::Destroy(State.GetBucketActivityRequest);
		}
	}

	/* Club details request */
	if (Http::IsInitialized(State.GetClubDetailRequest)) {
		State.GetClubDetailRequest = Http::Update(State.GetClubDetailRequest);
		if (!Http::IsRunning(State.GetClubDetailRequest)) {
			if (Http::IsSuccess(State.GetClubDetailRequest)) {
				State.Club = ClubAPI::GetResponseFromGetClub(State.GetClubDetailRequest);
				UpdateClubButton(State);

				if (State.Club.Id != ClubStruct::C_ClubNullId) {
					ReportSystem::AddData(
						ReportStruct::C_ReportTarget_Club,
						ReportStruct::LibStructuresReport_K_ReportData {
							Details = [State.Club.Name],
							Ids = [TL::ToText(State.Club.Id)],
							Contexts = [["From" => "Menu ClubItemsActivity"]]
						}
					);
				}
			}
			State.GetClubDetailRequest = Http::Destroy(State.GetClubDetailRequest);
		}
	}

	/* Add item collection to favorites */
	if (Task::IsInitialized(State.Task_ItemCollection_AddFavorite)) {
		State.Task_ItemCollection_AddFavorite = Task::Update(State.Task_ItemCollection_AddFavorite);
		if (!Task::IsRunning(State.Task_ItemCollection_AddFavorite)) {
			declare CTaskResult SourceTask = Task::GetSourceTask(State.Task_ItemCollection_AddFavorite);
			if (Task::IsSuccess(State.Task_ItemCollection_AddFavorite) && SourceTask != Null) {
				State = GetFavoriteList(State);
			} else {
				DisplayInfo(State, TL::Compose("{{{Text_ErrorAddFavorite}}}", SourceTask.ErrorCode), {{{Const::C_InfoType_Error}}});
			}
			State.Task_ItemCollection_AddFavorite = Task::Destroy(State.Task_ItemCollection_AddFavorite);
		}
	}

	/* Remove item collection from favorites */
	if (Task::IsInitialized(State.Task_ItemCollection_RemoveFavorite)) {
		State.Task_ItemCollection_RemoveFavorite = Task::Update(State.Task_ItemCollection_RemoveFavorite);
		if (!Task::IsRunning(State.Task_ItemCollection_RemoveFavorite)) {
			declare CTaskResult SourceTask = Task::GetSourceTask(State.Task_ItemCollection_RemoveFavorite);
			if (Task::IsSuccess(State.Task_ItemCollection_RemoveFavorite) && SourceTask != Null) {
				State = GetFavoriteList(State);
			} else {
				DisplayInfo(State, TL::Compose("{{{Text_ErrorRemoveFavorite}}}", SourceTask.ErrorCode), {{{Const::C_InfoType_Error}}});
			}
			State.Task_ItemCollection_RemoveFavorite = Task::Destroy(State.Task_ItemCollection_RemoveFavorite);
		}
	}

	/* Add item collection to favorites */
	if (Task::IsInitialized(State.Task_ItemCollection_GetFavoriteList)) {
		State.Task_ItemCollection_GetFavoriteList = Task::Update(State.Task_ItemCollection_GetFavoriteList);
		if (!Task::IsRunning(State.Task_ItemCollection_GetFavoriteList)) {
			declare CTaskResult_NSItemCollectionList SourceTask = Task::GetSourceTask_NSItemCollectionList(State.Task_ItemCollection_GetFavoriteList);
			if (Task::IsSuccess(State.Task_ItemCollection_GetFavoriteList) && SourceTask != Null) {
				State.FavoriteListIds.clear();
				foreach (ItemCollection in SourceTask.ItemCollectionList) State.FavoriteListIds.add(ItemCollection.Id);
				if (State.ItemCollection.ItemId != "") {
					if (State.FavoriteListIds.exists(State.ItemCollection.ItemId)) {
						{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_AddOrRemoveCollection, "{{{Text_Remove}}}");
					} else {
						{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_AddOrRemoveCollection, "{{{Text_Add}}}");
					}
					{{{ExpendableButton::P}}}ShowAndUnlock(State.Controls.Button_AddOrRemoveCollection);
					{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_BucketMedia, "down", State.Controls.Button_AddOrRemoveCollection.ControlId);
				}
				DisplayInfo(State, "", {{{Const::C_InfoType_None}}});
			} else {
				DisplayInfo(State, TL::Compose("{{{Text_ErrorGetFavorite}}}", SourceTask.ErrorCode), {{{Const::C_InfoType_Error}}});
			}
			State.Task_ItemCollection_GetFavoriteList = Task::Destroy(State.Task_ItemCollection_GetFavoriteList);
		}
	}

	/* Report system events */
	foreach (Event in ReportSystem::GetPendingEvents()) {
		if (Event.LastUsingId == "{{{C_Name}}}") {
			switch (Event.Type) {
				case ReportSystem::C_EventType_Open: EnableNavigationGroups(False);
				case ReportSystem::C_EventType_Close: {
					EnableNavigationGroups(True);
					UpdateControllerInfo(State);
				}
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Cancel: {
							if (State.IsMediaControllerNavigationEnabled) State = EnableMediaControllerNavigation(State, False);
							else Router::PushParent(This);
						}
					}
				}
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					if (Event.From != Null && Event.From.Id == State.Controls.Button_BucketMedia.Id) {
						switch (Event.Input) {
							case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Event.To, False);
							case CMlScriptEvent::EMenuNavAction::Left: {
								if (State.IsMediaControllerNavigationEnabled) State = MediaPager(State, State.CurrentMediaIndex-1);
								else Focus(State, Event.From, State.Controls.Button_Back);
							}
							case CMlScriptEvent::EMenuNavAction::Right: {
								if (State.IsMediaControllerNavigationEnabled) State = MediaPager(State, State.CurrentMediaIndex+1);
								else Focus(State, Event.From, State.Controls.Button_AddOrRemoveCollection);
							}
							default: Focus(State, Event.From, Event.To);
						}
					} else {
						switch (Event.Input) {
							case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Event.To, False);
							default: Focus(State, Event.From, Event.To);
						}
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Event.To, True);
						case CMlScriptEvent::Type::MouseOver: Focus(State, Event.From, Event.To);
					}
				}
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_MouseOnly}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Event.To, True);
						case CMlScriptEvent::Type::MouseOver: Focus(State, Event.From, Event.To);
						case CMlScriptEvent::Type::MouseOut: Focus(State, Event.From, Event.To);
					}
				}
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background") {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: Router::PushParent(This);
			}
		}
	}

	/* Mouse detection */
	if (State.IsUsingMouse != Tools::IsUsingMouse(Input)) {
		State.IsUsingMouse = Tools::IsUsingMouse(Input);
		DisplayGalleryButtons(State);
		if (State.IsUsingMouse) {
			if (State.IsMediaControllerNavigationEnabled) State = EnableMediaControllerNavigation(State, False);
			{{{Button::P}}}Unfocus(This, State.Controls.Button_PreviousMedia);
			{{{Button::P}}}Unfocus(This, State.Controls.Button_NextMedia);
		} else if (State.IsMediaControllerNavigationEnabled) {
			{{{Button::P}}}Focus(This, State.Controls.Button_PreviousMedia);
			{{{Button::P}}}Focus(This, State.Controls.Button_NextMedia);
		}
	}
} else {
	foreach (Event in Router::GetPendingEvents(This)) {
		switch (Event.Type) {
			case Router::C_Event_LeavingRoute: {
				State = K_State { Controls = State.Controls };
				ReportSystem::RemoveUsingId("{{{C_Name}}}");
				State.Controls.Label_NoInfo.Hide();
				State.Controls.Label_Info.SetText("");
				{{{Button::P}}}HideAndLock(State.Controls.Button_AddOrRemoveCollection);
				{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_BucketMedia, "down", State.Controls.Button_Back.ControlId);
				DisplayInfo(State, "", {{{Const::C_InfoType_None}}});
				EnableNavigationGroups(True);
				UpdateActivityInfo(State);
				UpdateClubButton(State);
			}
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	ButtonIcon::ComponentV2(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpBackground::ComponentV2(),
	Router::ComponentV2(),
	TextField::ComponentV2(),
	Transition::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}