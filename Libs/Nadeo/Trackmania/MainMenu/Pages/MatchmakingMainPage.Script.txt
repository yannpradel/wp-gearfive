/**
 *	Page: MatchmakingMainPage
 */
#Const Version		"1.2.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/MatchmakingMainPage.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/Trackmania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct
#Include "Libs/Nadeo/Trackmania/Components/MatchmakingQueueMgr.Script.txt" as QueueMgr
#Include "Libs/Nadeo/Trackmania/Components/MainBackground.Script.txt" as MainBackground
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Components/ProgressBar.Script.txt" as ProgressBar
#Include "Libs/Nadeo/Trackmania/Components/PlayerRank.Script.txt" as PlayerRank
#Include "Libs/Nadeo/Trackmania/Components/PlayerRoyalVictories.Script.txt" as PlayerRoyalVictories
#Include "Libs/Nadeo/Trackmania/Components/ServerStatus.Script.txt" as ServerStatus
#Include "Libs/Nadeo/Trackmania/Components/SocialManager.Script.txt" as SocialManager
#Include "Libs/Nadeo/Trackmania/Structures/SquaddingStruct.Script.txt" as SquaddingStruct
#Include "Libs/Nadeo/Trackmania/Components/PartyCode.Script.txt" as PartyCode
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/LoadingScreen.Script.txt" as LoadingScreen
#Include "Libs/Nadeo/Trackmania/Components/ProfilePlayerInfo.Script.txt" as ProfilePlayerInfo
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/Trackmania/Components/ZoneSelection.Script.txt" as ZoneSelection
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "TextLib" as TL
#Include "MathLib" as ML

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_MatchmakingMainPage"
#Const C_NavGroupName "navgroup-page-matchmaking"
#Const C_NavGroupName_MouseOnly "navgroup-page-matchmaking-mouseonly"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::PlayMultiplayerModeWithUGC
]

#Const C_Class_Squad "class-matchmaking-page-squad"
#Const C_Class_LabelTTS "class-matchmaking-page-label-tts"
#Const C_Class_Score "class-matchmaking-page-score"

#Const C_PlayerNameMaxWidth 45.
#Const C_PlayerNameMargin 5.
#Const C_SpeakerMargin 9.

#Const C_Col_Rank 0
#Const C_Col_Level 1
#Const C_Col_Name 2
#Const C_Col_Points 3
#Const C_Col_RSpace 4

#Const C_Choice_Leave 0
#Const C_Choice_Stay 1
#Const C_Choices_LeaveSquad [
	//L16N [Matchmaking] Button used to leave the matchmaking page
	0 => _("Leave"),
	//L16N [Matchmaking] Button used to stay in the matchmaking page
	1 => _("Stay")
]

#Const C_Choice_Disable 0
#Const C_Choice_Keep 1
#Const C_Choices_PartyCode [
	//L16N [Matchmaking] Button used to disable your party code
	0 => _("|PartyCode|Disable"),
	//L16N [Matchmaking] Button used to keep your party code
	1 => _("|PartyCode|Keep")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [Matchmaking] Button used to join matchmaking queue
	declare Text Text_Ready = _("Ready");
	//L16N [Matchmaking] Button used to accept a matchmaking match
	declare Text Text_Accept = _("Accept");
	//L16N [Matchmaking] Button used to cancel my participation to the matchmaking
	declare Text Text_Cancel = _("Cancel");
	//L16N [Matchmaking] Button used to join my match
	declare Text Text_Join = _("Join");
	declare Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [Matchmaking] Searching for a match, %1 is the time passed in queue
	declare Text_InQueue = _("Searching... %1");
	//L16N [Matchmaking] Waiting for the other squad members to join the queue to begin the match search
	declare Text_Pending = _("Waiting for all squad members...");
	//L16N [Matchmaking] Searching for a match after being sent back to queue because a player did not accept the previous match
	declare Text_CanceledByPickUp = _("A player has declined, back to queue...");
	//L16N [Matchmaking] A match has been found using the matchmaking
	declare Text_MatchFound = _("Your match will start soon...");
	//L16N [Matchmaking] A match has been found using the matchmaking and the server is being created
	declare Text_MatchReadyNoJoinLink = _("Creating server...");
	//L16N [Matchmaking] A match has been found using the matchmaking and the match server is starting
	declare Text_MatchReadyStartingServer = _("Starting server...");
	//L16N [Matchmaking] A match has been found using the matchmaking it is ready to join
	declare Text_MatchReadyTryToJoin = _("Joining your match...");
	//L16N [Matchmaking] A match has been found using the matchmaking, it is currently in progress and the player should join it
	declare Text_MatchInProgress = _("Your match is in progress, please join in");
	//L16N [Matchmaking] A match has been found but canceled by the user
	declare Text_MatchCanceledByMe = _("You have declined the match. Declining too many times can lead to a temporary ban.");
	//L16N [Matchmaking] The player is banned and can't start a match. This is followed by a timer e.g. "05:00".
	declare Text_Banned = _("You left a match in progress. You will be allowed to play in");
	//L16N [Matchmaking] The player was banned but the ban has expired
	declare Text_BanIsOver = _("Your ban is over, you are allowed to play.");
	//L16N [Matchmaking] Title of the pop up informing the player that his match could not start
	declare Text_Title_MatchCanceled = _("Your match can't start");
	//L16N [Matchmaking] Title of the pop up informing the player that they are banned
	declare Text_Title_Banned = _("Banned from Matchmaking");
	//L16N [Matchmaking] Title of the pop up informing the player that his match is ready to start
	declare Text_Title_MatchReady = _("Your match is ready");
	//L16N [Matchmaking] The player is banned and can't start a match. %1 is replaced by a timer e.g. "05:00".
	declare Text_BanReminder = _("Your ban ends in %1");
	//L16N [Matchmaking] Title of the pop up informing the player that they have received a penalty
	declare Text_Title_Penalty = _("You received a penalty");
	//L16N [Matchmaking] The player received a penalty because they left a match in progress. The sanction make them lose points. %1 is the number of points lost. e.g. "You left a match in progress. You lose 50 points.".
	declare Text_Penalty = _("You left a match in progress. You lose %1 points.");
	//L16N [Matchmaking] The players will receive a daily penalty because they are inactive in Ranked. The sanction make them lose points. %1 is the number of points lost. e.g. "You are inactive in Ranked. You will lose 50 points each day of inactivity".
	declare Text_PenaltyInactivity = _("You are inactive in Ranked. You will lose %1 points for each day of inactivity.");
	//L16N [Matchmaking] Title of the pop up informing the player that they will soon become inactive in Ranked
	declare Text_Title_Inactive = _("Inactive notification");
	//L16N [Matchmaking] The players dit not play in the last days or weeks and need to be active to keep their ranks. %1 is the number of days left before inactivity starts. e.g. "You have 3 days left before the inactivity leads to penalties"
	declare Text_Inactive = _("You are close to becoming inactive in Ranked. You have %1 day(s) left before the inactivity leads to penalties.");
	//L16N [Matchmaking] Text informing the player that they will soon become inactive in Ranked, %1 is the number of days left before inactivity starts. e.g. "3 inactivity immunity days"
	declare Text_Inactive_ImmunityDays = _("%1 inactivity immunity day(s)");
	//L16N [Matchmaking] Text informing the player that they will receive a daily penalty because they are inactive in Ranked, %1 is the number of points lost. e.g. "100 points lost due to inactivity today"
	declare Text_Inactive_Penalty = _("%1 points lost due to inactivity today");
	//L16N [Matchmaking] Button used to add a friend to your squad and play with them
	declare Text_Invite_Friend = _("Invite friend");
	//L16N [Matchmaking] Text displayed before invite buttons like Ubisoft Connect or First Party social systems
	declare Text_Invite_From = _("Invite players from");
	// [Matchmaking] Do not translate "Ubisoft Connect"
	declare Text Text_UbiConnect = "Ubisoft Connect";
	//L16N [Matchmaking] Do not translate "Ubisoft Connect"
	declare Text_UbiConnectInvites = _("See Ubisoft Connect invites");
	//L16N [Matchmaking] Message to explain that the social features are not available when you are in queue for searching a match
	declare Text_SocialNotAvailable = _("Social features unavailable when you are in queue");
	//L16N [Matchmaking] Message to explain that the switch mode feature is not available when you are in queue for searching a match
	declare Text_SwitchModeNotAvailable = _("Switch mode feature unavailable when you are in queue");
	//L16N [Matchmaking] Message to explain that the private party is not available when you are in queue for searching a match
	declare Text_PartyCodeNotAvailable = _("Private party unavailable when you are in queue");
	//L16N [Matchmaking] Title of the pop up informing the player that they are currently in a squad
	declare Text_Title_Squad = _("You are in a squad");
	//L16N [Matchmaking] Title of the pop up informing the player that they are currently in the matchmaking queue
	declare Text_Title_Queue = _("You are in the queue");
	//L16N [Matchmaking] Title of the pop up informing the player that his search was canceled
	declare Text_Title_SearchCanceled = _("Your search was canceled");
	//L16N [Matchmaking] Waiting for all squad members for the search because a squad member has left the queue
	declare Text_CanceledBySquadMember = _("A squad member has left the queue...");
	//L16N [Matchmaking] A maintenance has canceled the queue, the player must come back later
	declare Text_CanceledByMaintenance = _("A maintenance is ongoing. Come back later...");
	//L16N [Matchmaking] A squad member has left the squad, %1 will be replaced by the player name. e.g "PlayerA has left the squad"
	declare Text_SquadMemberRemoved = _("$<%1$> has left the squad");
	//L16N [Matchmaking] Title of the pop up informing the player that their squad is not valid
	declare Text_Title_SquadInvalid = _("Your squad is not valid");
	//L16N [Matchmaking] The squad is not valid because the skill gap between players is too important. %1 will be replaced by a number of points always superior to 1. eg: "The skill gap between players is too important. It must be inferior to 1000 points."
	declare Text_SkillGap = _("The skill gap between squad players is too important. It must be inferior to %1 points");
	//L16N [Matchmaking] Button to use a party code (to be in a private match)
	declare Text Text_PartyCode = _("Private party");
	//L16N [Matchmaking] Message to inform you that you have activated a party code, if you launch a match you will be in a private party.
	declare Text Text_PartyCodeActivated = _("Private party activated");
	//L16N [Matchmaking] The squad is not valid because squad members are not using the same party code.
	declare Text_DifferentPartyCode = _("Your private party code is different than the one used by your squad members.");
	//L16N [Matchmaking] Joining a Royal match, %1 is the time left before joining the match
	declare Text_JoinRoyal = _("Joining in less than... %1");
	//L16N [Matchmaking] Message to inform the player that there might be some delay in the match search
	declare Text Text_MatchDelay = _("There is a huge demand of matchmaking right now, matches might be delayed for a few minutes.");
	//L16N [Matchmaking] Message to inform the player that the servers are under maintenance so they can't play right now
	declare Text Text_ServerMaintenance = _("Servers are under maintenance but you will be able to play soon. Sorry for the inconvenience.");
	//L16N [Matchmaking] Message to inform the player that they are on an old game version so they cant access the matchmaking
	declare Text Text_OldGameVersion = _("You are on an old game version. Please update your game to access the matchmaking.");
	//L16N [Matchmaking] Title of the pop up informing the player that the matchmaking is unavailable right now
	declare Text_Title_MatchmakingUnavailable = _("Matchmaking unavailable");
	//L16N [Matchmaking] Super Royal mode name. Try to keep "Super Royal" as it is as much as possible.
	declare Text Text_SuperRoyal = _("Super Royal");
	//L16N [Matchmaking] Button to play Super Royal mode. Try to keep "Super Royal" as it is as much as possible.
	declare Text Text_PlaySuperRoyal = _("Play Super Royal");
	//L16N [Matchmaking] Button to join the Super Royal mode if you have a match in progress. Try to keep "Super Royal" as it is as much as possible.
	declare Text Text_JoinSuperRoyal = _("Join Super Royal");
	//L16N [Matchmaking] Button to tell when the Super Royal mode will be available, %1 will be replaced by a timer, e.g "Super Royal in 33:21"
	declare Text Text_SuperRoyalIn = _("Super Royal in %1");
	//L16N [Matchmaking] Message displayed to tell when the Super Royal mode will be available, %1 will be replaced by a timer, e.g "Next Super Royal in 33:21"
	declare Text Text_NextSuperRoyal = _("Next Super Royal in %1");
	//L16N [Matchmaking] Message to explain the Super Royal functionnality
	declare Text_SuperRoyalPopUp = _("Play the Super Royal competition every day at 8pm/4am/12pm CEST to compete on a new track unveiled at 8pm CEST. This competition confronts the top 3 winners of each match until a Super Royal Champion emerges!");
	//L16N [Matchmaking] Message to inform the player that they are in the waiting queue of the Super Royal, the next match will be in Super Royal competiton. Try to keep "Super Royal" as it is as much as possible.
	declare Text Text_SuperRoyalQueue = _("In Super Royal queue");
	//L16N [Matchmaking] Message to inform the player that they are not qualified from the current Super Royal and need to wait for the next Super Royal to play it. Try to keep "Super Royal" as it is as much as possible.
	declare Text Text_SuperRoyalEliminated = _("You are not qualified for this Super Royal");
	//L16N [Matchmaking] Message to inform the player that the current Super Royal is over and need to wait for the next Super Royal to play it. Try to keep "Super Royal" as it is as much as possible.
	declare Text Text_SuperRoyalOver = _("The current Super Royal is over");
	//L16N [Matchmaking] Message to inform the player that the Super Royal is not available right now. Try to keep "Super Royal" as it is as much as possible.
	declare Text Text_SuperRoyal404 = _("Super Royal not available");
	//L16N [Matchmaking] Message to inform the player that they are not registered for the current Super Royal and need to wait for the next Super Royal to play it. Try to keep "Super Royal" as it is as much as possible.
	declare Text Text_SuperRoyalNotRegistered = _("You are not registered for this Super Royal");
	//L16N [Matchmaking] Message to inform the player that they are qualified for the next Super Royal match. Try to keep "Super Royal" as it is as much as possible.
	declare Text Text_SuperRoyalQualified = _("You are qualified !");
	//L16N [Matchmaking] Message to explain to the player that they are qualified for the next Super Royal match and that their match will be ready soon. Try to keep "Super Royal" as it is as much as possible.
	declare Text_SuperRoyalPopUpQualifSoon = _("You are qualified for the next match of the current Super Royal. Your next match will be ready soon...");
	//L16N [Matchmaking] Message to explain to the player that they are qualified for the next Super Royal match and that their match is ready and they can join it. Try to keep "Super Royal" as it is as much as possible.
	declare Text_SuperRoyalPopUpQualifReady = _("You are qualified for the next match of the current Super Royal. Join your match!");
	//L16N [Matchmaking] Message to inform the player that they are not qualified for the current Super Royal and need to wait for the next Super Royal to play it. Try to keep "Super Royal" as it is as much as possible.
	declare Text_SuperRoyalEliminatedMessage = _("You are not qualified for the current Super Royal. A new Super Royal will start in a few hours.");
	//L16N [Matchmaking] Message to inform the player that the current Super Royal has already started and need to wait for the next Super Royal to play it. Try to keep "Super Royal" as it is as much as possible.
	declare Text Text_SuperRoyalQualifStarted = _("Qualifications have already started");
	//L16N [Matchmaking] Title of the pop up informing the player that they have an activated PartyCode while trying to play Super Royal mode
	declare Text_Title_SuperRoyalWithPartyCode = _("A private party code is enabled");
	//L16N [Matchmaking] Title of the Super Royal preload screen. Try to keep "Super Royal" as it is as much as possible.
	declare Text Text_WelcomeSR = _("Welcome to the Super Royal!");
	//L16N [Matchmaking] Explanation message in the Super Royal preload screen.
	declare Text Text_SR_Rules = _("You will start with a qualification match.\nDepending on your position, you will end up playing a competition in one of the following divisions:");
	//L16N [Matchmaking] In Super Royal qualifications, needed positions of the teams to access the Bronze division
	declare Text Text_Teams_Bronze = _("Teams 12 to 10 - Bronze");
	//L16N [Matchmaking] In Super Royal qualifications, needed positions of the teams to access the Silver division
	declare Text Text_Teams_Silver = _("Teams 9 to 7 - Silver");
	//L16N [Matchmaking] In Super Royal qualifications, needed positions of the teams to access the Gold division
	declare Text Text_Teams_Gold = _("Teams 6 to 4 - Gold");
	//L16N [Matchmaking] In Super Royal qualifications, needed positions of the teams to access the Master division
	declare Text Text_Teams_Master = _("Teams 3 to 1 - Master");
	//L16N [Matchmaking] Number of royal victories won in this specific division
	declare Text Text_SR_Wins_Bronze = _("Winners get 3 royal wins");
	//L16N [Matchmaking] Number of royal victories won in this specific division
	declare Text Text_SR_Wins_Silver = _("Winners get 4 royal wins");
	//L16N [Matchmaking] Number of royal victories won in this specific division
	declare Text Text_SR_Wins_Gold = _("Winners get 5 royal wins");
	//L16N [Matchmaking] Number of royal victories won in this specific division
	declare Text Text_SR_Wins_Master = _("Winners get 10 royal wins");
	//L16N [Matchmaking] Super Royal starting in... Will be followed by a countdown
	declare Text Text_Starting = _("Starting in...");
	//L16N [Matchmaking] Show the leaderboard of the ranked mode when available
	declare Text Text_ShowRankedLeaderboard = _("Show leaderboard");
	//L16N [Matchmaking] Hide the leaderboard of the ranked mode when available
	declare Text Text_HideRankedLeaderboard = _("Hide leaderboard");
	//L16N [Matchmaking] The squad is not valid because squad members are not using the same crossplay settings. (for example one player wants to play with Xbox players only and the other with PC, PlayStation and Xbox players)
	declare Text_CrossplaySettings = _("Your crossplay settings are different than the ones used by your squad members.");
	//L16N [Matchmaking] Title of the pop up informing the player that their squad is not valid
	declare Text_Title_CrossplaySettingsUpdate = _("Crossplay setting update");
	//L16N [Matchmaking] The players update their crossplay setting (in their console setttings) and it was not compatible with their preivous squad so we force them to leave the squad
	declare Text_LeaveDueToCrossplaySettings = _("You have been kicked out of your squad because your crossplay setting has been updated.");
	//L16N [Matchmaking] The player did not received a ranking yet
	declare Text Text_Unranked = _("Unranked");
	//L16N [Matchmaking] Displayed when the players have 0 royal victories
	declare Text Text_RoyalVictories0 = _("No Royal victories yet");
	//L16N [Matchmaking] Displayed the number of royal victories of the player, in this case 1 so "victory" is singular
	declare Text Text_RoyalVictory = _("1 Royal victory");
	//L16N [Matchmaking] Displayed the number of royal victories of the player, in this case more than 1 so "victory" is plural, e.g "52 Royal victories"
	declare Text Text_RoyalVictories = _("%1 Royal victories");
	//L16N [Matchmaking] Text displayed when switching between game modes
	declare Text Text_SwitchingMode = _("Switching game mode...");
	//L16N [Matchmaking] The player is currently in a squad, so if they try to leave the menu, they will abandon their squad
	declare Text Text_LeaveSquad = _("If you leave the page, you will leave your squad too.");
	//L16N [Matchmaking] The player is currently in the queue, so if they try to leave the menu, they will abandon their place in the queue
	declare Text Text_LeaveQueueSolo = _("If you leave the page, you will lose your place in the matchmaking queue.");
	//L16N [Matchmaking] The player is currently in the queue, so if they try to leave the menu, they will abandon their squad and their place in the queue
	declare Text Text_LeaveQueueSquad = _("If you leave the page, you will lose your squad and your place in the matchmaking queue.");
	// Description of the party code pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_PartyCode = [
		//L16N [Matchmaking] Message to inform the players that they must disable their PartyCode to play Super Royal mode
		PopUpMultiChoice::CreateDescriptionPart(_("You cannot use a Party Code in Super Royal, disable it to play the Super Royal."), <120., 30.>, 3., Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold), "$i", <1., 1., 1.>, False)
	];

	// Adapt Ubisoft Connect button style and size depending on platform
	declare Text Button_UbiConnectFriends_Styles = ExpendableButton::C_Style_VerticalBottomRoundedEdges;
	declare Real Button_UbiConnectFriends_Width = 60.;
	if (Platform::IsConsole(System)) {
		Button_UbiConnectFriends_Styles = ExpendableButton::C_Style_VerticalStartBottomRoundedEdges;
		Button_UbiConnectFriends_Width = 37.;
	}

	/* Variables */
	declare QueueInfo_Ranked_Pos = <-26., 11.>;
	declare QueueInfo_Royal_Pos = <-23.5 , 22.>;

	declare MatchmakingStatus_Ranked_PosY = -56.;
	declare MatchmakingStatus_Royal_PosY = -73.;

	/* Scores list */
	declare Integer DisplayedScores = 10;
	declare Vec2 Size_ButtonLeaderboard = <13., 13.>;
	declare Vec2 Size_ScoreRow = <68., 5.>;
	declare Vec2 Size_OwnerScoreRow = <Size_ScoreRow.X, 8.>;
	declare Vec2 Size_Header = <Size_ScoreRow.X, 12.>;
	declare Vec2 Size_Background = <Size_ScoreRow.X, Size_Header.Y + Size_ScoreRow.Y * DisplayedScores + Size_OwnerScoreRow.Y + 4.>;
	declare Real TextSize_ScoreLabels = 1.7;
	declare GridConfig_Scores = Grid::Create(Size_ScoreRow.X, 1., 1., Grid::C_Direction_Right);
	GridConfig_Scores = Grid::AddColumn(GridConfig_Scores, C_Col_Rank, 0.13, Grid::C_Align_Right);
	GridConfig_Scores = Grid::AddColumn(GridConfig_Scores, C_Col_Level, 0.11, Grid::C_Align_Right);
	GridConfig_Scores = Grid::AddColumn(GridConfig_Scores, C_Col_Name, 0.56, Grid::C_Align_Left);
	GridConfig_Scores = Grid::AddColumn(GridConfig_Scores, C_Col_Points, 0.16, Grid::C_Align_Right);
	GridConfig_Scores = Grid::AddColumn(GridConfig_Scores, C_Col_RSpace, 0.05, Grid::C_Align_Center);
	declare Grid_Scores = Grid::Compile(GridConfig_Scores);

	declare Text ML_Scores ="";
	for (Index, 0, DisplayedScores - 1) {
		declare Text UpTarget = "button-score-"^ML::Clamp(Index-1, 0, DisplayedScores - 1);
		declare Text DownTarget = "button-score-"^ML::Clamp(Index+1, 0, DisplayedScores - 1);
		ML_Scores ^= """
			<frameinstance
				id="button-score-{{{Index}}}" pos="{{{-Size_ScoreRow.X*0.5}}} {{{-Index * Size_ScoreRow.Y}}}"
				modelid="framemodel-score-row"
				class="{{{Navigation::C_Class}}} {{{C_Class_Score}}}"
				data-nav-inputs="select;cancel;action2;up;down"
				data-nav-targets="_;_;_;{{{UpTarget}}};{{{DownTarget}}}"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="quad-activation"
			/>
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="quad-base" halign="center" valign="center"/>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-player-card">
	<label id="label-player-rank" class="text-semibold {{{C_Class_LabelTTS}}}" pos="10.25 -5.5" size="63 8" halign="left" textsize="1.25"/>
	<frameinstance id="squad-playername" modelid="{{{PlayerName::C_Name}}}" pos="11.25 6." data-size="95 8" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" data-textsize="4" />
	<frameinstance modelid="{{{PlayerRank::C_Name}}}" id="frame-player-rank" pos="1. 0" z-index="2"/>
	<frameinstance modelid="{{{PlayerRoyalVictories::C_Name}}}" id="frame-player-crown" scale="0.5" pos="0.5 1." data-imagetype="{{{PlayerRoyalVictories::C_ImageType_Lion_Without_Count}}}" z-index="2"/>
</framemodel>
<framemodel id="framemodel-player-marker">
	<frameinstance id="marker-playername" modelid="{{{PlayerName::C_Name}}}" z-index="2" pos="0 -0.5" data-size="{{{C_PlayerNameMaxWidth}}} 7" data-halign="center" data-valign="center" data-textprefix="$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-textsize="3" />
	<frameinstance id="frame-background" modelid="{{{ExpendableAsset::C_Name}}}" data-height="8" data-halign="center" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" data-opacity="0.6" z-index="0"/>
</framemodel>
<framemodel id="framemodel-score-row">
	<quad id="quad-activation" size="{{{Size_ScoreRow.X}}} {{{Size_ScoreRow.Y}}}" class="{{{Navigation::C_Class_ActivationZone}}}" opacity="0" scriptevents="1" z-index="10"/>
	<quad id="quad-bg" size="{{{Size_ScoreRow.X}}} {{{Size_ScoreRow.Y}}}" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" opacity="0." z-index="0"/>
	<quad id="quad-level" pos="{{{Grid_Scores.Pos[C_Col_Level]}}} {{{-Size_ScoreRow.Y * 0.5}}}" size="{{{Size_ScoreRow.Y}}} {{{Size_ScoreRow.Y}}}" halign="right" valign="center" z-index="5" />
	<label id="label-rank" class="text-extrabold" pos="{{{Grid_Scores.Pos[C_Col_Rank]}}} {{{-Size_ScoreRow.Y * 0.55}}}" size="{{{Grid_Scores.Size[C_Col_Rank]}}} {{{Size_ScoreRow.Y*0.95}}}" textsize="{{{TextSize_ScoreLabels}}}" halign="right" z-index="5" />
	<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" pos="{{{Grid_Scores.Pos[C_Col_Name]}}} {{{-Size_ScoreRow.Y * 0.55}}}" z-index="5" data-size="{{{Grid_Scores.Size[C_Col_Name]}}} {{{Size_ScoreRow.Y*0.8}}}" data-valign="center" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-textsize="{{{TextSize_ScoreLabels}}}" />
	<label id="label-points" class="text-semibold" pos="{{{Grid_Scores.Pos[C_Col_Points]}}} {{{-Size_ScoreRow.Y * 0.55}}}" size="{{{Grid_Scores.Size[C_Col_Points]}}} {{{Size_ScoreRow.Y*0.95}}}" textprefix="$i" textsize="{{{TextSize_ScoreLabels}}}" halign="right" z-index="5" />
</framemodel>

<!-- Frame global -->
<frame id="frame-global">
	<!-- Background (matchmaking screens and squad vehicles) -->
	<frameinstance modelid="{{{MainBackground::C_Name}}}" z-index="-3" />
	<frame pos="0 -15" z-index="-2">
		<quad id="quad-rank-neon" size="320 180" halign="center" valign="center" keepratio="fit" />
		<quad id="quad-rank-neon-anim" size="320 180" halign="center" valign="center" keepratio="fit" opacity="0."/>
	</frame>

	<!-- Camera -->
	<camera id="camera-vehicles" halign="center" valign="center" size="320 180" fullscreen="1" z-index="-1"/>

	<!-- Loading spinner dimmer -->
	<frameinstance id="loadingspinner-switch-mode" modelid="{{{LoadingSpinner::C_Name}}}" data-dimmer="true" data-opacity="0." data-label="{{{Text_SwitchingMode}}}" z-index="{{{Const::C_ZIndex_Loading}}}"/>

	<!-- Leaderboard -->
	<frame id="frame-clip-leaderboard" size="{{{Size_Background.X}}} 180" pos="{{{160-Size_Background.X*0.5}}} 23.4" halign="center" valign="center">
		<frameinstance
			id="button-leaderboard" pos="{{{Size_Background.X*0.5}}} {{{Size_Background.Y*0.5 + Size_ButtonLeaderboard.Y + 1}}}" z-index="6"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="{{{Size_ButtonLeaderboard.X}}} {{{Size_ButtonLeaderboard.Y}}}"
			data-iconsize="{{{Size_ButtonLeaderboard.X*0.85}}} {{{Size_ButtonLeaderboard.Y*0.85}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-image="{{{Const::C_ImageUrl_Matchmaking_Ranked_Leaderboard}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Matchmaking_Ranked_Leaderboard}}}"
			data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-icon="{{{Icons::C_Icon_256x256_Chrono}}}"
			data-iconfocus="{{{Icons::C_Icon_256x256_Chrono}}}"
			data-opacityunfocus="0.6"
			data-iconopacityunfocus="0.6"
			data-halign="right" data-valign="top"
			data-nav-inputs="select;cancel"
			data-nav-targets="_;_"
			data-nav-group="{{{C_NavGroupName_MouseOnly}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frame id="frame-leaderboard" pos="{{{Size_Background.X+5.}}} 0" z-index="5">
			<quad id="quad_bg" size="{{{Size_Background.X}}} {{{Size_Background.Y}}}" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentThree)}}}" halign="center" valign="center" opacity="0.6" z-index="0"/>
			<frameinstance id="frame-zone-selection" modelid="{{{ZoneSelection::C_Name}}}" pos="0 {{{Size_Background.Y*0.5 - Size_Header.Y*0.5}}}" data-width="{{{Size_Header.X*0.59}}}" data-height="{{{Size_Header.Y*0.55}}}" z-index="3"/>
			<frameinstance id="loading-spinner-leaderboard" modelid="{{{LoadingSpinner::C_Name}}}" z-index="5" />
			<frame id="frame-scores" pos="0. {{{Size_Background.Y*0.5 - Size_Header.Y}}}" z-index="3">
				{{{ML_Scores}}}
			</frame>
			<frame id="frame-score-owner" pos="{{{-Size_OwnerScoreRow.X*0.5}}} {{{-Size_Background.Y*0.5 + Size_OwnerScoreRow.Y}}}" z-index="3">
				<quad id="quad-bg" size="{{{Size_OwnerScoreRow.X}}} {{{Size_OwnerScoreRow.Y}}}" bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" opacity="0.6" z-index="0"/>
				<quad id="quad-level" pos="{{{Grid_Scores.Pos[C_Col_Level]}}} {{{-Size_OwnerScoreRow.Y * 0.5}}}" size="{{{Size_ScoreRow.Y}}} {{{Size_ScoreRow.Y}}}" halign="right" valign="center" z-index="5" />
				<label id="label-rank" class="text-extrabold" pos="{{{Grid_Scores.Pos[C_Col_Rank]}}} {{{-Size_OwnerScoreRow.Y * 0.55}}}" size="{{{Grid_Scores.Size[C_Col_Rank]}}} {{{Size_ScoreRow.Y*0.9}}}" textsize="{{{TextSize_ScoreLabels}}}" halign="right" z-index="5" />
				<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" pos="{{{Grid_Scores.Pos[C_Col_Name]}}} {{{-Size_OwnerScoreRow.Y * 0.55}}}" z-index="5" data-size="{{{Grid_Scores.Size[C_Col_Name]}}} {{{Size_ScoreRow.Y*0.8}}}" data-valign="center" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-textsize="{{{TextSize_ScoreLabels}}}" />
				<label id="label-points" class="text-semibold" pos="{{{Grid_Scores.Pos[C_Col_Points]}}} {{{-Size_OwnerScoreRow.Y * 0.55}}}" size="{{{Grid_Scores.Size[C_Col_Points]}}} {{{Size_ScoreRow.Y*0.9}}}" textprefix="$i" textsize="{{{TextSize_ScoreLabels}}}" halign="right" z-index="5" />
				<frameinstance id="loading-spinner-rank" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{Grid_Scores.Pos[C_Col_Rank]-2}}} {{{-Size_ScoreRow.Y * 0.8}}}" scale="0.25" z-index="5" />
			</frame>
		</frame>
	</frame>

	<!-- Player markers (names and voice chat speaker icons) -->
	<frame id="frame-player-marker" pos="-2 3" hidden="1">
		<frameinstance id="player-marker" modelid="framemodel-player-marker" />
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-mute-player"
			class="{{{Navigation::C_Class}}}"
			data-opacity="1."
			data-opacityunfocus="0.6"
			data-halign="right"
			data-valign="center"
			data-bgcolor="FFF"
			data-focuscolor="FFF"
			data-image="{{{Icons::C_Icon_128x128_Speaker_Off}}}"
			data-imagefocus="{{{Icons::C_Icon_128x128_Speaker_Off}}}"
			data-size="8 8"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroupName_MouseOnly}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance id="loading-spinner-speaker-player" modelid="{{{LoadingSpinner::C_Name}}}" halign="left" valign="center" scale="0.22" z-index="2"/>
	</frame>

	<frame id="frame-friend-marker-1" pos="-80 2" hidden="1">
		<frameinstance id="friend-marker-1" modelid="framemodel-player-marker"/>
		<frameinstance modelid="{{{Button::C_Name}}}" id="button-mute-friend-1"
			class="{{{Navigation::C_Class}}}"
			data-opacity="1."
			data-opacityunfocus="0.6"
			data-halign="right"
			data-valign="center"
			data-bgcolor="FFF"
			data-focuscolor="FFF"
			data-image="{{{Icons::C_Icon_128x128_Speaker_Off}}}"
			data-imagefocus="{{{Icons::C_Icon_128x128_Speaker_Off}}}"
			data-size="8 8"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroupName_MouseOnly}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance id="loading-spinner-speaker-1" modelid="{{{LoadingSpinner::C_Name}}}" halign="left" valign="center" scale="0.22" z-index="2"/>
	</frame>

	<frame id="frame-friend-marker-2" pos="57 8" hidden="1">
		<frameinstance id="friend-marker-2" modelid="framemodel-player-marker"/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="button-mute-friend-2"
			class="{{{Navigation::C_Class}}}"
			data-opacity="1."
			data-opacityunfocus="0.6"
			data-halign="right"
			data-valign="center"
			data-bgcolor="FFF"
			data-focuscolor="FFF"
			data-image="{{{Icons::C_Icon_128x128_Speaker_Off}}}"
			data-imagefocus="{{{Icons::C_Icon_128x128_Speaker_Off}}}"
			data-size="8 8"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroupName_MouseOnly}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance id="loading-spinner-speaker-2" modelid="{{{LoadingSpinner::C_Name}}}" halign="left" valign="center" scale="0.22" z-index="2"/>
	</frame>

	<!-- Pop Up Multichoice -->
	<frame id="frame-pop-up-multi-choice" z-index="4">
		<frameinstance id="popupmultichoice-ok" modelid="{{{PopUpMultiChoice::C_Name}}}" data-close-after-selection="false" z-index="0" hidden="1"/>
		<frameinstance id="popupmultichoice-leave" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_Title_Squad}}}" data-choices="{{{TL::MLEncode(C_Choices_LeaveSquad.tojson())}}}" data-styles-firstchoice="{{{PopUpMultiChoice::C_ChoiceStyle_Default}}} {{{ExpendableButton::C_Style_ButtonWarning}}}" data-close-after-selection="false" z-index="0" hidden="1"/>
		<frameinstance id="popupmultichoice-party-code" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_Title_SuperRoyalWithPartyCode}}}" data-description="{{{TL::MLEncode(Description_PartyCode.tojson())}}}" data-choices="{{{TL::MLEncode(C_Choices_PartyCode.tojson())}}}" data-close-after-selection="false" z-index="0" hidden="1"/>
		<frameinstance id="frame-pop-up-loading-spinner" pos="{{{MLHelpers::Skew(0., -7., 10.)}}}" modelid="{{{LoadingSpinner::C_Name}}}" scale="0.9" z-index="1"/>
		<label id="label-pop-up-timer" pos="{{{MLHelpers::Skew(0., -7., 10.)}}}" size="60 20" class="text-semibold" textsize="8." z-index="1" />
	</frame>

	<!-- Left upper (social side) -->
	<frame id="frame-clip-left-upper" pos="-55. 25" size="210 130" class="quad-base" >
		<frame id="frame-left-upper" pos="-89 42">
			<!-- Squad members indicator -->
			<frame id="frame-squad-members-indicator" pos="6.5 12" >
				<frameinstance z-index="1" modelid="{{{ExpendableAsset::C_Name}}}" data-height="5" data-width="13" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentTwo)}}}" data-styles="{{{ExpendableAsset::C_Style_BothRoundedEdgesVertical}}}" />
				<quad id="quad-squad-member-icon-1" image="{{{Icons::C_Icon_128x128_Profil}}}" pos="-4 0" size="4 4" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" class="quad-base" z-index="2"/>
				<quad id="quad-squad-member-icon-2" image="{{{Icons::C_Icon_128x128_Profil}}}" pos="0 0" size="4 4" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentThree)}}}" class="quad-base" z-index="2"/>
				<quad id="quad-squad-member-icon-3" image="{{{Icons::C_Icon_128x128_Profil}}}" pos="4 0" size="4 4" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentThree)}}}" class="quad-base" z-index="2"/>
			</frame>

			<!-- Switch game mode button -->
			<frameinstance
				id="button-switch-mode"
				pos="15 12"
				z-index="1"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-styles="{{{ExpendableButton::C_Style_VerticalBothRoundedEdges}}}"
				data-text-textprefix="$t$i"
				data-height="5"
				data-width="30"
				data-halign="left"
				data-valign="center"
				data-nav-inputs="select;cancel;down;action2;appmenu"
				data-nav-targets="_;_;button-local-player;_;_"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			/>

			<!-- Error message of the squad or the social features -->
			<label id="label-social-error" opacity="0." pos="15 11.75" size="140 8" class="text-semibold" textsize="1.5" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextError)}}}" halign="left"/>

			<!-- Local player -->
			<frame id="frame-local-player">
				<frameinstance
					id="button-local-player"
					z-index="1"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}} {{{C_Class_Squad}}}"
					data-styles="{{{ExpendableButton::C_Style_PlayerCard}}}"
					data-text-textcolor-focused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-text-textcolor-unfocused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
					data-halign="left"
					data-valign="center"
					data-nav-inputs="select;cancel;up;down;action1;action2;appmenu"
					data-nav-targets="_;_;button-switch-mode;button-player-1;_;_;_"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
					data-ismuted="0"
				/>
				<frameinstance id="frame-local-player-card" modelid="framemodel-player-card" z-index="2"/>
			</frame>

			<!-- First squad player -->
			<frame id="frame-player-1" pos="0. -17.5" scale="0.8" hidden="1">
				<frameinstance
					id="button-player-1"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}} {{{C_Class_Squad}}}"
					z-index="1"
					data-styles="{{{ExpendableButton::C_Style_PlayerCard}}}"
					data-halign="left"
					data-valign="center"
					data-nav-inputs="select;cancel;up;down;action1;action2;appmenu"
					data-nav-targets="_;_;button-local-player;button-player-2;_;_;_"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
					data-nav-locked="1"
					data-ismuted="0"
				/>
				<frameinstance id="frame-player-card-1" modelid="framemodel-player-card" z-index="2"/>
			</frame>

			<!-- Second squad player -->
			<frame id="frame-player-2" pos="0. -33.5" scale="0.8" hidden="1">
				<frameinstance
					id="button-player-2"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}} {{{C_Class_Squad}}}"
					z-index="1"
					data-styles="{{{ExpendableButton::C_Style_PlayerCard}}}"
					data-halign="left"
					data-valign="center"
					data-nav-inputs="select;cancel;up;down;action1;action2;appmenu"
					data-nav-targets="_;_;button-player-1;button-ubi-connect-friends;_;_;_"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
					data-nav-locked="1"
					data-ismuted="0"
				/>
				<frameinstance id="frame-player-card-2" modelid="framemodel-player-card" z-index="2"/>
			</frame>

			<!-- Social buttons -->
			<frame id="frame-social-buttons" pos="0 -15">
				<!-- Text displayed before Social buttons -->
				<frame id="frame-invite-from" pos="30 0" >
					<frameinstance z-index="1" modelid="{{{ExpendableAsset::C_Name}}}" halign="center" data-height="5" data-width="60" data-color="000" data-styles="{{{ExpendableAsset::C_Style_TopEdgesRoundedVertical}}}" />
					<label id="label-invite-from" z-index="2" pos="0 -0.25" size="60 5" halign="center" class="text-semibold" textprefix="$t" textsize="1" text="{{{Text_Invite_From}}}"/>
				</frame>

				<!-- Ubisoft Connect Friends list button (open Ubisoft Connect Friends overlay) -->
				<frameinstance
					id="button-ubi-connect-friends"
					pos="0 -6.25"
					z-index="1"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{Text_UbiConnect}}}"
					data-styles="{{{Button_UbiConnectFriends_Styles}}}"
					data-width="{{{Button_UbiConnectFriends_Width}}}"
					data-halign="left"
					data-valign="center"
					data-nav-inputs="select;cancel;down;up;right;action2;appmenu"
					data-nav-targets="_;_;button-ubi-connect-invites;button-player-2;button-first-party-invite;_;_"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
				/>

				<!-- First party invite button (open First party invite overlay) -->
				<frameinstance
					id="button-first-party-invite"
					hidden="{{{!Platform::IsConsole(System)}}}"
					pos="60 -6.25"
					z-index="1"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{Platform::GetSmallNetworkName(System)}}}"
					data-styles="{{{ExpendableButton::C_Style_VerticalEndBottomRoundedEdges}}}"
					data-width="22"
					data-halign="right"
					data-valign="center"
					data-nav-inputs="select;cancel;down;up;left;action2;appmenu"
					data-nav-targets="_;_;button-ubi-connect-invites;button-player-2;button-ubi-connect-friends;_;_"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
					data-nav-locked="{{{!Platform::IsConsole(System)}}}"
				/>

				<!-- Ubisoft Connect Invites button (display invitations number and open Ubisoft Connect Invites overlay) -->
				<frameinstance
					id="button-ubi-connect-invites"
					pos="0 -14"
					z-index="1"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{Text_UbiConnectInvites}}}"
					data-styles="{{{ExpendableButton::C_Style_VerticalBothRoundedEdges}}}"
					data-halign="left"
					data-valign="center"
					data-nav-inputs="select;cancel;down;up;action2;appmenu"
					data-nav-targets="_;_;button-party-code;button-ubi-connect-friends;_;_"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
				/>

				<!-- Party Code button -->
				<frameinstance
					id="button-party-code"
					pos="0 -21.75"
					z-index="1"
					hidden="1"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-text="{{{Text_PartyCode}}}"
					data-styles="{{{ExpendableButton::C_Style_VerticalBothRoundedEdges}}}"
					data-halign="left"
					data-valign="center"
					data-icon-image="{{{Icons::C_Icon_256x256_Lock}}}"
					data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
					data-icon-align="{{{ExpendableButton::C_IconAlign_TextLeft}}}"
					data-nav-inputs="select;cancel;down;up;appmenu"
					data-nav-targets="_;_;button-back;button-ubi-connect-invites;_"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
					data-nav-locked="1"
				/>
			</frame>
		</frame>
	</frame>

	<!-- Party Code pop up (to have a private match) -->
	<frameinstance id="frame-party-code" modelid="{{{PartyCode::C_Name}}}" z-index="5"/>

	<!-- Ranked player division -->
	<frameinstance id="frame-progress-bar" pos="-10 -73" modelid="{{{ProgressBar::C_Name}}}" hidden="1"/>

	<!-- Royal player division -->
	<frameinstance modelid="{{{PlayerRoyalVictories::C_Name}}}" id="frame-royal-victory" pos="118 58" data-imagetype="{{{PlayerRoyalVictories::C_ImageType_Lion_Victories_Count}}}"/>

	<!-- Preload screen Super Royal -->
	<frame id="frame-preload-super-royal" hidden="1">
		<quad pos="-110 50" size="70 70" image="file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Qualifications.dds" class="quad-base"/>
		<frame id="frame-rules" pos="50 50">
			<quad size="255 41.4" pos="20 0" z-index="-1" image="{{{Const::C_ImageUrl_Matchmaking_SuperRoyal_Preload_Rules_Bg}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity="0.6" class="quad-base"/>
			<label text="{{{Text_WelcomeSR}}}" pos="0 15" size="150 10" class="text-semibold" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" textsize="3"/>
			<label id="label-super-royal-rules" text="{{{Text_SR_Rules}}}" pos="0 8" size="200 20" class="text-semibold" textprefix="$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textsize="1.8" autonewline="1" maxline="2"/>

			<frame id="frame-bronze" pos="-75 -13">
				<quad pos="0 10" size="18 18" image="file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Bronze.dds" class="quad-base"/>
				<label text="{{{Text_Teams_Bronze}}}" size="48 10" class="text-semibold" textprefix="$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="FFA027" textsize="1.8"/>
				<label text="{{{Text_SR_Wins_Bronze}}}" pos="0 -4" size="48 10" class="text-semibold" textprefix="$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textsize="1.8"/>
			</frame>

			<frame id="frame-silver" pos="-25 -13">
				<quad pos="0 10" size="18 18" image="file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Silver.dds" class="quad-base"/>
				<label text="{{{Text_Teams_Silver}}}" size="48 10" class="text-semibold" textprefix="$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="EFEFEF" textsize="1.8"/>
				<label text="{{{Text_SR_Wins_Silver}}}" pos="0 -4" size="48 10" class="text-semibold" textprefix="$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textsize="1.8"/>
			</frame>

			<frame id="frame-gold" pos="25 -13">
				<quad pos="0 10" size="18 18" image="file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Gold.dds" class="quad-base"/>
				<label text="{{{Text_Teams_Gold}}}" size="48 10" class="text-semibold" textprefix="$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="FFDF00" textsize="1.8"/>
				<label text="{{{Text_SR_Wins_Gold}}}" pos="0 -4" size="48 10" class="text-semibold" textprefix="$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textsize="1.8"/>
			</frame>

			<frame id="frame-master" pos="75 -13">
				<quad pos="0 10" size="18 18" image="file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Master.dds" class="quad-base"/>
				<label text="{{{Text_Teams_Master}}}" size="48 10" class="text-semibold" textprefix="$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textcolor="92EF08" textsize="1.8"/>
				<label text="{{{Text_SR_Wins_Master}}}" pos="0 -4" size="48 10" class="text-semibold" textprefix="$i" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_Regular)}}}" textsize="1.8"/>
			</frame>
		</frame>

		<frame id="frame-countdown" pos="130 -68">
			<label text="{{{Text_Starting}}}" pos="0 9" halign="right" size="70 10" class="text-semibold" textsize="3" opacity="0.8"/>
			<label id="label-super-royal-countdown" halign="right" size="50 10" class="text-semibold" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textsize="10" opacity="0.8"/>
			<frameinstance id="frame-countdown-loading-spinner" modelid="{{{LoadingSpinner::C_Name}}}" halign="left" pos="10 2" scale="0.85"/>
		</frame>
	</frame>

	<!-- Right Footer (Play, Join, Cancel buttons and matchmaking queue infos) -->
	<frame z-index="1" pos="145 -71.5">
		<frameinstance
			id="button-ready"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			z-index="1"
			data-text="{{{Text_Ready}}}"
			data-text-textsize="7"
			data-text-fitlabel-enabled="1"
			data-styles="{{{ExpendableButton::C_Style_PageNextAnimated}}}"
			data-halign="right"
			data-valign="center"
			data-height="15"
			data-width="55"
			data-nav-inputs="select;cancel;left;up;action2;appmenu"
			data-nav-targets="_;_;button-back;button-super-royal;_;_"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>

		<frameinstance
			id="button-join"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			z-index="2"
			data-text="{{{Text_Join}}}"
			data-text-textsize="7"
			data-text-fitlabel-enabled="1"
			data-styles="{{{ExpendableButton::C_Style_PageNextAnimated}}}"
			data-halign="right"
			data-valign="center"
			data-height="15"
			data-width="55"
			data-nav-inputs="select;cancel;left;up;action2;appmenu"
			data-nav-targets="_;_;button-back;button-ubi-connect-invites;_;_"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>

		<frameinstance
			id="button-cancel"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			z-index="2"
			data-text="{{{Text_Cancel}}}"
			data-text-textsize="6"
			data-text-fitlabel-enabled="1"
			data-styles="{{{ExpendableButton::C_Style_ButtonWarning}}} {{{ExpendableButton::C_Style_ButtonLoading}}}"
			data-halign="right"
			data-valign="center"
			data-height="15"
			data-width="55"
			data-nav-inputs="select;cancel;left;up;action2;appmenu"
			data-nav-targets="_;_;button-back;button-ubi-connect-invites;_;_"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
		<frame id="frame-queue-info" >
			<label hidden="1" id="label-super-royal-queue" pos="1 5" size="55 10" textsize="2." class="text-semibold" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" text="{{{Text_SuperRoyalQueue}}}"/>
			<label hidden="1" id="label-super-royal-timer" size="55 10" textsize="2." class="text-semibold" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" />
			<label id="label-queue-info" size="55 10" class="text-semibold" textsize="2." />
			<label id="label-error" pos="0 -1" size="60 40" maxline="3" valign="bottom" class="text-extrabold" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextError)}}}" textsize="2."/>
		</frame>

		<!-- Super Royal button above the right footer -->
		<frameinstance
			id="button-super-royal"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			pos="{{{MLHelpers::Skew(0., 15., 10.)}}}"
			z-index="1"
			data-text="{{{Text_PlaySuperRoyal}}}"
			data-halign="right"
			data-valign="center"
			data-height="8"
			data-width="55"
			data-nav-inputs="select;cancel;down;up;left;appmenu"
			data-nav-targets="_;_;button-ready;button-party-code;button-back;_"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>

	<label id="label-matchmaking-status" hidden="1" pos="-6 -70" size="160 10" class="text-semibold" textprefix="$i" textsize="2.5"/>

	<!-- Debug button to use a special queue in Ranked mode -->
	<frame id="frame-debug-queue" z-index="3" hidden="1">
		<label id="label-debug-queue" class="text-semibold" pos="-128 -50" textcolor="f90"/>
		<frameinstance id="button-debug-queue"
			modelid="{{{Button::C_Name}}}"
			pos="-131 -60"
			class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}}"

			data-text="Debug queue"
			data-size="42 8"
			data-labelsize="40 8"
			data-textxpos="0.55"
			data-opacityunfocus=".5"
			data-bgempty="1"
			data-textcolor="FFF"
			data-textfocuscolor="FFF"
			data-textsize="4"
			data-textopacityunfocus=".5"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-textitalicslope=".2"
			data-halign="center"
			data-valign="bottom"

			data-nav-inputs="select;cancel"
			data-nav-targets="_;_"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"

			data-menusounds-selectsound="BackButtonSelect"
		/>
	</frame>

	<!-- Left footer -->
	<frameinstance
		id="button-back"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		pos="-151.5 -73"
		z-index="1"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;right;up;action2;appmenu"
		data-nav-targets="_;_;button-ready;button-party-code;_;_"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>

	<!-- Players profile-->
	<frame id="frame-profile" hidden="1" z-index="5">
		<frameinstance
			modelid="{{{ProfilePlayerInfo::C_Name}}}"
			data-enable-players-pager="0"
			data-enable-zone-selection="0"
			data-enable-my-access-info="0"
		/>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "TimeLib" as TimeLib
#Include "AnimLib" as AL
#Include "Libs/Nadeo/CMGame/Utils/Privileges.Script.txt" as Privileges
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as Http
#Include "Libs/Nadeo/CMGame/Utils/HttpAuthorizationHeader.Script.txt" as HttpAuthorizationHeader
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Menus/Music.Script.txt" as MenuMusic
#Include "Libs/Nadeo/CMGame/Utils/MenuSceneManager.Script.txt" as MenuSceneManager
#Include "Libs/Nadeo/Trackmania/API/LeaderboardAPI.Script.txt" as LeaderboardAPI
#Include "Libs/Nadeo/Trackmania/API/MatchmakingAPI.Script.txt" as MatchmakingAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/DirectLink.Script.txt" as DirectLink
#Include "Libs/Nadeo/Trackmania/MainMenu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/Trackmania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as Config
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Utils/Log.Script.txt" as Log
#Include "Libs/Nadeo/TMGame/Utils/Tracking.Script.txt" as Tracking
#Include "Libs/Nadeo/CMGame/Utils/CommunicationRestriction.Script.txt" as CommunicationRestriction

#Const C_HeartbeatFrequency 5000
#Const C_CanceledPopUpTimeout 7000
#Const C_StatusCheck_Frequency 30000
#Const C_StatusCheck_FrequencyWhenUnavailable 1500
#Const C_ServerStartDelay 45000
#Const C_JoinMatch_MaxFrequency 5000
#Const C_TryToJoinDelay 3000
#Const C_UnavailableStateTimeOut 5000
#Const C_SkillGapLimit 1000
#Const C_Message_TimeDuration 3000
#Const C_Message_FadeTime 750
#Const C_RoyalQueueTimer 61000
#Const C_DelayToEnterSuperRoyal 900000 //15min
#Const C_DelaySuperRoyalPreload 300000 //5min
#Const C_SuperRoyalCheck_Frequency 5000
#Const C_SwitchModeCooldown 5000
#Const C_PlayerFrameAnimDuration 500
#Const C_VehicleAnimDuration 2000

#Const C_Display_MatchmakingQueueState_None 0
#Const C_Display_MatchmakingQueueState_Unavailable 1
#Const C_Display_MatchmakingQueueState_Available 2
#Const C_Display_MatchmakingQueueState_Loading 3
#Const C_Display_MatchmakingQueueState_Pending 4
#Const C_Display_MatchmakingQueueState_SkillGapCanceled 5
#Const C_Display_MatchmakingQueueState_Queued 6
#Const C_Display_MatchmakingQueueState_Queued_CanceledByPickUp 7 //NB "pick up" means "a player in matchmaking that is neither the current user nor one of their squad mate"
#Const C_Display_MatchmakingQueueState_MatchAccepted 8
#Const C_Display_MatchmakingQueueState_MatchReady_WaitingForJoinLink 9
#Const C_Display_MatchmakingQueueState_MatchReady_StartingServer 10
#Const C_Display_MatchmakingQueueState_MatchReady_TryToJoin 11
#Const C_Display_MatchmakingQueueState_MatchReady_DisplayJoinButton 12
#Const C_Display_MatchmakingQueueState_Canceled_ByMe 13
#Const C_Display_MatchmakingQueueState_SearchCanceled_BySquadMate 14
#Const C_Display_MatchmakingQueueState_Banned_PopUp 15
#Const C_Display_MatchmakingQueueState_Banned_MainPage 16
#Const C_Display_MatchmakingQueueState_BanIsOver 17
#Const C_Display_MatchmakingQueueState_Penalty_PopUp 18
#Const C_Display_MatchmakingQueueState_InSquad_PopUp 20
#Const C_Display_MatchmakingQueueState_InQueueSolo_PopUp 21
#Const C_Display_MatchmakingQueueState_InQueueSquad_PopUp 22
#Const C_Display_MatchmakingQueueState_DifferentCodeCanceled 23
#Const C_Display_MatchmakingQueueState_MatchmakingStatus_PopUp 24
#Const C_Display_MatchmakingQueueState_SuperRoyal_PopUp 25
#Const C_Display_MatchmakingQueueState_PartyCodeImpossible_PopUp 26
#Const C_Display_MatchmakingQueueState_SuperRoyal_WaitingScreen 27
#Const C_Display_MatchmakingQueueState_CrossplayCanceled 28
#Const C_Display_MatchmakingQueueState_OldGameVersion_PopUp 29
#Const C_Display_MatchmakingQueueState_MaintenanceCanceled 30
#Const C_Display_MatchmakingQueueState_ForcedToLeaveSquadDueToCrossplaySetting 31
#Const C_Display_MatchmakingQueueState_Inactivity_PopUp 32

#Const C_LocalPlayerMatchmakingScore_Unknown -123
#Const C_Sound_MatchFound "MatchFound"
#Const C_CarModel {{{dump(Const::C_CameraSkinModel)}}}
#Const C_PilotModel {{{dump(Const::C_CameraPilotModel)}}}
#Const C_MaxFriends 2
#Const C_Rank_Icons {{{dump(Const::C_Rank_Icons)}}}
#Const C_Rank_Animals {{{dump(Const::C_Rank_Animals)}}}
#Const C_Rank_Names {{{dump(Const::C_Rank_Names)}}}
#Const C_ImageUrl_Menu_Matchmaking_BG_Bronze {{{dump(Const::C_ImageUrl_Menu_Matchmaking_BG_Bronze)}}}
#Const C_ImageUrl_Menu_Matchmaking_BG_Silver {{{dump(Const::C_ImageUrl_Menu_Matchmaking_BG_Silver)}}}
#Const C_ImageUrl_Menu_Matchmaking_BG_Gold {{{dump(Const::C_ImageUrl_Menu_Matchmaking_BG_Gold)}}}
#Const C_ImageUrl_Menu_Matchmaking_BG_Master {{{dump(Const::C_ImageUrl_Menu_Matchmaking_BG_Master)}}}
#Const C_ImageUrl_Menu_Matchmaking_BG_Royal {{{dump(Const::C_ImageUrl_Menu_Matchmaking_BG_Royal)}}}
#Const C_ImageUrl_Menu_Matchmaking_CubeMap_Bronze {{{dump(Const::C_ImageUrl_Menu_Matchmaking_CubeMap_Bronze)}}}
#Const C_ImageUrl_Menu_Matchmaking_CubeMap_Silver {{{dump(Const::C_ImageUrl_Menu_Matchmaking_CubeMap_Silver)}}}
#Const C_ImageUrl_Menu_Matchmaking_CubeMap_Gold {{{dump(Const::C_ImageUrl_Menu_Matchmaking_CubeMap_Gold)}}}
#Const C_ImageUrl_Menu_Matchmaking_CubeMap_Master {{{dump(Const::C_ImageUrl_Menu_Matchmaking_CubeMap_Master)}}}
#Const C_ImageUrl_Menu_Matchmaking_CubeMap_Royal {{{dump(Const::C_ImageUrl_Menu_Matchmaking_CubeMap_Royal)}}}

#Const C_BackgroundMood_Morning {{{Const::C_BackgroundMood_Morning}}}
#Const C_BackgroundMood_Day {{{Const::C_BackgroundMood_Day}}}
#Const C_BackgroundMood_Evening {{{Const::C_BackgroundMood_Evening}}}
#Const C_BackgroundMood_Night {{{Const::C_BackgroundMood_Night}}}

#Const C_PlayerNameMargin {{{dump(C_PlayerNameMargin)}}}
#Const C_SpeakerMargin {{{dump(C_SpeakerMargin)}}}

#Const C_FirstFriendIndex 0
#Const C_SecondFriendIndex 1
#Const C_VehicleAnimationsEnabled True

#Struct K_Vehicle {
	Ident Id;
	Text Name;
	Text Path;
	Text PrestigeOptions;
	Vec3 LightColor;
	Ident PilotId;
	Text PilotName;
	Text PilotUrl;
	Text PilotOptions;
	Vec3 StartPos;
	Vec3 EndPos;
	Real Rotation;
	Boolean TriggerAnimation;
	Integer TriggerAnimationDelay;
	Boolean BouncingEasterEgg; // TIGROU
	Boolean JustLaunchedAnimation;
}

#Struct K_Scene {
	Ident SceneId;
	K_Vehicle[] Vehicles;
}

#Struct K_SquadMember {
	Text DisplayName;
	Boolean IsFirstPartyDisplayName;
	Boolean IsCommunicationRestricted;
	Text ClubTag;
	Text ZoneUrl;
	Text DivisionId;
	Text SkinName;
	Text SkinUrl;
	Text SkinPrestigeOptions;
	Integer Progression;
}

#Struct K_Squad {
	Text Id;
	Text LeaderId;
	Boolean InSquad;
	Boolean WantToLeave;
	K_SquadMember[Text] Members;
	Text[] MembersIds;
}

#Struct K_SuperRoyalState {
	Boolean InSuperRoyalQueue;
	Integer NextSuperRoyalTime;
	Text Status;
	Text MatchId;
}

#Struct K_PlayPrivilegeCheck {
	Text Target;
	Privileges::K_PrivilegeCheck PrivilegeCheck;
}

#Struct K_State {
	{{{MatchmakingStruct::P}}}K_Queue MatchmakingQueue;
	Text PreviousMatchmakingQueueState_API;
	Integer MatchmakingQueueState_Display;
	Integer Previous_MatchmakingQueueState_Display;
	Text JoinLink;
	Integer NextHeartbeatTime;
	Integer StateEnteringTime;
	Integer QueueEnteringTime;
	Integer RoyalQueueEnteringTime;
	Integer AcceptMatchEnteringTime;
	{{{MatchmakingStruct::P}}}K_Heartbeat LastestHeartbeat;
	{{{MatchmakingStruct::P}}}K_Penalty LastestPenalty;
	{{{MatchmakingStruct::P}}}K_Inactivity LastestInactivity;
	Boolean HasSeenInactivityNotif;
	{{{MatchmakingStruct::P}}}K_Mode Mode;
	Text ForcedMode;
	Text SelectedMode;
	Integer JoinMatchCooldown;
	{{{MatchmakingStruct::P}}}K_Queue OfficialQueue;
	{{{MatchmakingStruct::P}}}K_Queue SecondaryQueue;
	K_Scene Scene;
	Integer BanEndDate;
	Integer NextStatusCheckTime;
	Boolean NeedPlayerRankUpdate;
	Boolean NeedSceneUpdate;
	Boolean DivisionsUpdated;
	Text LocalPlayerPreviousDivisionId;
	Text LocalPlayerCurrentDivisionId;
	Integer LocalPlayerCurrentScore;
	K_Squad Squad;
	Text CurrentPartyCode;
	Boolean MenuIsOpen;
	Text CurrentMatchmakingStatus;
	K_SuperRoyalState SuperRoyalState;
	Integer NextSuperRoyalCheckTime;
	Boolean NeedSuperRoyalUpdate;
	Boolean IsRetrievingSuperRoyalJoinLink;
	Boolean NeedToJoinSuperRoyal;
	Boolean HasCheckSuperRoyalQualif;
	Http::K_Request GetSuperRoyalVictories;
	Http::K_Request GetTopPlayersInRankedLeaderboard;
	Http::K_Request GetPlayerRankInRankedLeaderboard;
	Integer SuperRoyalVictories;
	Http::K_Request GetMatchmakingLeaderboard;
	{{{MatchmakingStruct::P}}}K_PlayerLeaderboard[] Top10;
	K_PlayPrivilegeCheck PlayPrivilegeCheck;
	CampaignStruct::LibCampaignStruct_K_TopScore[Integer] OwnerScoreInRankedLeaderboard;
	CampaignStruct::LibCampaignStruct_K_TopScore[][Integer] TopPlayersInRankedLeaderboard;
	Boolean WasForcedToLeaveDueToCrossPlaySetting;
	Integer LastSwitchModeTime;
}

#Struct K_Controls {
	CMlFrame Button_Ready;
	CMlFrame Button_Cancel;
	CMlFrame Button_Join;
	CMlFrame Button_Back;
	CMlFrame Button_LocalPlayer;
	CMlFrame Frame_SuperRoyalLoadingSpinner;
	CMlFrame Frame_PopUpLoadingSpinner;
	CMlFrame PopUpMultiChoice_Ok;
	CMlFrame PopUpMultiChoice_Leave;
	CMlFrame PopUpMultiChoice_PartyCode;
	CMlFrame Frame_ProgressBar;
	CMlFrame Frame_LocalPlayer;
	CMlFrame Frame_PlayerRank;
	CMlFrame Frame_PlayerName;
	CMlLabel Label_PlayerRank;
	CMlLabel Label_QueueInfo;
	CMlLabel Label_SuperRoyalQueue;
	CMlLabel Label_SuperRoyalTimer;
	CMlLabel Label_Error;
	CMlLabel Label_PopUpTimer;
	CMlFrame Frame_PlayerMarker;
	CMlFrame Frame_FriendMarker1;
	CMlFrame Frame_FriendMarker2;
	CMlFrame Frame_SocialButtons;
	CMlFrame Frame_SquadPlayer1;
	CMlFrame Frame_SquadPlayer2;
	CMlFrame LoadingSpinner_SwitchMode;
	CMlFrame Button_SwitchMode;
	CMlFrame Frame_InviteFrom;
	CMlFrame Button_UbiConnectFriends;
	CMlFrame Button_FirstPartyInvite;
	CMlFrame Button_UbiConnectInvites;
	CMlQuad Quad_IconSquadPlayer2;
	CMlQuad Quad_IconSquadPlayer3;
	CMlFrame Button_SquadPlayer1;
	CMlFrame Button_SquadPlayer2;
	CMlLabel Label_SocialErrorMessage;
	CMlFrame Button_PartyCode;
	CMlQuad Quad_RankNeon;
	CMlQuad Quad_RankNeonAnim;
	CMlFrame Frame_RoyalVictory;
	CMlLabel Label_MatchmakingStatus;
	CMlFrame Frame_Crown;
	CMlFrame Frame_Profile;
	CMlCamera Camera_Vehicles;
	CMlFrame Frame_QueueInfo;
	CMlFrame Button_SuperRoyal;
	CMlFrame Frame_LeftUpper;
	CMlFrame Frame_Preload_SuperRoyal;
	CMlLabel Label_SuperRoyalCountdown;
	CMlLabel Label_SuperRoyalRules;
	CMlFrame Button_MutePlayer;
	CMlFrame Button_MuteFriend1;
	CMlFrame Button_MuteFriend2;
	CMlFrame LoadingSpinner_MutePlayer;
	CMlFrame LoadingSpinner_Mute1;
	CMlFrame LoadingSpinner_Mute2;
	CMlFrame Button_Leaderboard;
	CMlFrame Frame_ClipLeaderboard;
	CMlFrame Frame_Leaderboard;
	CMlFrame Frame_ScoreOwner;
	CMlFrame Frame_Scores;
	CMlFrame LoadingSpinner_Leaderboard;
	CMlFrame LoadingSpinner_OwnerRank;
	CMlFrame Button_DebugQueue;
}
""",
"""
Void UpdateControllerInfos(K_Controls _Controls, Boolean _PlayerInVoiceChat, Boolean _PlayerMuted, Boolean _IsJoiningMatch) {
	declare Text[Text] ControllerInfoButtons = ["A" => _("Select"), "B" => _("Back")];

	if (_IsJoiningMatch) {
		ControllerInfoButtons = [];
	} else {
		if (_PlayerInVoiceChat) {
			if (_PlayerMuted) ControllerInfoButtons["Action1"] = _("|Voice chat|Unmute player");
			else ControllerInfoButtons["Action1"] = _("|Voice chat|Mute player");
		}
		if (_Controls.Frame_ClipLeaderboard.Visible) {
			if ({{{Button::P}}}GetIcon(_Controls.Button_Leaderboard) == "{{{Icons::C_Icon_256x256_Chrono}}}") {
				ControllerInfoButtons["action2"] = "{{{Text_ShowRankedLeaderboard}}}";
			} else {
				ControllerInfoButtons["action2"] = "{{{Text_HideRankedLeaderboard}}}";
			}
		}
	}

	if (!{{{Navigation::P}}}IsLocked(_Controls.Button_DebugQueue)) {
		ControllerInfoButtons["appmenu"] = "Debug Queue";
	}

	ControllerInfo::SetButtons(ControllerInfoButtons);
}

Vec3 EaseOut(Vec3 _StartPos, Vec3 _EndPos, Integer _StartTime, Integer _Duration, Boolean _BouncingEasterEgg) {
	if (_BouncingEasterEgg) {
		return <
			AL::EaseOutBounce(Now - _StartTime, _StartPos.X, _EndPos.X - _StartPos.X, _Duration),
			AL::EaseOutBounce(Now - _StartTime, _StartPos.Y, _EndPos.Y - _StartPos.Y, _Duration),
			AL::EaseOutBounce(Now - _StartTime, _StartPos.Z, _EndPos.Z - _StartPos.Z, _Duration)
		>;
	}

	return <
		AL::EaseOutQuad(Now - _StartTime, _StartPos.X, _EndPos.X - _StartPos.X, _Duration),
		AL::EaseOutQuad(Now - _StartTime, _StartPos.Y, _EndPos.Y - _StartPos.Y, _Duration),
		AL::EaseOutQuad(Now - _StartTime, _StartPos.Z, _EndPos.Z - _StartPos.Z, _Duration)
	>;
}

Void FocusScore(CMlFrame _Frame_Score, Boolean _IsFocused) {
	if (_Frame_Score == Null) return;
	declare CMlQuad Quad_Bg = (_Frame_Score.GetFirstChild("quad-bg") as CMlQuad);

	AnimMgr.Flush(Quad_Bg);
	if (!_IsFocused) {
		AnimMgr.Add(Quad_Bg, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(Quad_Bg, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void Focus(CMlControl _From, CMlControl _To, K_Controls _Controls, Integer _SquadMembersCount) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	declare Boolean PlayerInVoiceChat = False;
	declare Boolean IsMuted = False;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		} else if (_From.HasClass("{{{C_Class_Score}}}")) {
			FocusScore(_From as CMlFrame, False);
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		} else if (_To.HasClass("{{{C_Class_Score}}}")) {
			FocusScore(_To as CMlFrame, True);
		}

		if (_To.HasClass("{{{C_Class_Squad}}}")) {
			if (_SquadMembersCount >= 1 && _To.DataAttributeExists("ismuted")) {
				IsMuted = Tools::TextToBoolean(_To.DataAttributeGet("ismuted"));
				switch (_To.Id) {
					case _Controls.Button_LocalPlayer.Id: {
						PlayerInVoiceChat = _Controls.Button_MutePlayer.Visible;
					}
					case _Controls.Button_SquadPlayer1.Id: {
						PlayerInVoiceChat = _Controls.Button_MuteFriend1.Visible;
					}
					case _Controls.Button_SquadPlayer2.Id: {
						PlayerInVoiceChat = _Controls.Button_MuteFriend2.Visible;
					}
				}
			}
		}
	}

	UpdateControllerInfos(_Controls, PlayerInVoiceChat, IsMuted, False);
}

Void Focus(CMlControl _From, CMlControl _To, K_Controls _Controls) {
	Focus(_From, _To, _Controls, 0);
}

Void ChangeRankNeon(K_Controls _Controls, Text _ModeId, Integer _Rank, Boolean _Animation) {
	AnimMgr.Flush(_Controls.Quad_RankNeon);
	AnimMgr.Flush(_Controls.Quad_RankNeonAnim);

	if (_ModeId == {{{MatchmakingStruct::P}}}C_Mode_Royal) {
		_Controls.Quad_RankNeonAnim.Opacity = 0.;
		_Controls.Quad_RankNeon.Opacity = 0.;
	} else if (_Animation) {
		_Controls.Quad_RankNeonAnim.Opacity = 1.;
		_Controls.Quad_RankNeon.Opacity = 0.;
		_Controls.Quad_RankNeonAnim.ChangeImageUrl(_Controls.Quad_RankNeon.ImageUrl);
		_Controls.Quad_RankNeon.ChangeImageUrl(C_Rank_Animals.get(_Rank, C_Rank_Animals.get(1)));
		AnimMgr.Add(_Controls.Quad_RankNeonAnim, "<a opacity=\"0.\" />", C_Message_FadeTime, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(_Controls.Quad_RankNeon, "<a opacity=\"1.\" />", Now+C_Message_FadeTime, C_Message_FadeTime, CAnimManager::EAnimManagerEasing::BounceIn);
	} else {
		_Controls.Quad_RankNeonAnim.Opacity = 0.;
		_Controls.Quad_RankNeon.Opacity = 1.;
		_Controls.Quad_RankNeon.ChangeImageUrl(C_Rank_Animals.get(_Rank, C_Rank_Animals.get(1)));
	}
}

K_State UpdateBackground(K_State _State, K_Controls _Controls) {
	declare State = _State;
	declare Integer Rank = {{{PlayerRank::P}}}GetRankNumberFromDivisionId(State.LocalPlayerCurrentDivisionId);
	declare Integer PreviousRank = {{{PlayerRank::P}}}GetRankNumberFromDivisionId(State.LocalPlayerPreviousDivisionId);

	if (State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Royal) {
		{{{MainBackground::P}}}ChangeBackgroundImages(C_ImageUrl_Menu_Matchmaking_BG_Royal, False);
		ChangeRankNeon(_Controls, State.Mode.Id, Rank, False);

		if (State.Scene.SceneId != NullId && !MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)) {
			// Order same as background: Night, Day, Morning, Evening
			MenuSceneMgr.CubeMapSetImage2ds(
				State.Scene.SceneId,
				C_ImageUrl_Menu_Matchmaking_CubeMap_Royal[C_BackgroundMood_Night],
				C_ImageUrl_Menu_Matchmaking_CubeMap_Royal[C_BackgroundMood_Day],
				C_ImageUrl_Menu_Matchmaking_CubeMap_Royal[C_BackgroundMood_Morning],
				C_ImageUrl_Menu_Matchmaking_CubeMap_Royal[C_BackgroundMood_Evening]
			);
			MenuSceneMgr.PlaneReflectRefresh();
		}

		State.LocalPlayerPreviousDivisionId = State.LocalPlayerCurrentDivisionId;
	} else if (Rank != C_LocalPlayerMatchmakingScore_Unknown) {
		declare Text[Integer] BackgroundsUrls = [];
		declare Text[Integer] CubeMapsUrls = [];
		if (Rank <= 3) {
			BackgroundsUrls = C_ImageUrl_Menu_Matchmaking_BG_Bronze;
			CubeMapsUrls = C_ImageUrl_Menu_Matchmaking_CubeMap_Bronze;
		} else if (Rank >= 4 && Rank <= 6) {
			BackgroundsUrls = C_ImageUrl_Menu_Matchmaking_BG_Silver;
			CubeMapsUrls = C_ImageUrl_Menu_Matchmaking_CubeMap_Silver;
		} else if (Rank >= 7 && Rank <= 9) {
			BackgroundsUrls = C_ImageUrl_Menu_Matchmaking_BG_Gold;
			CubeMapsUrls = C_ImageUrl_Menu_Matchmaking_CubeMap_Gold;
		} else if (Rank >= 10) {
			BackgroundsUrls = C_ImageUrl_Menu_Matchmaking_BG_Master;
			CubeMapsUrls = C_ImageUrl_Menu_Matchmaking_CubeMap_Master;
		}

		// We make an animation where there is a division gap (Bronze to Silver for example)
		declare Boolean NeedToAnim = (PreviousRank <= 3 && Rank >= 4) || (PreviousRank <= 6 && Rank >= 7) || (PreviousRank <= 9 && Rank >= 10);
		{{{MainBackground::P}}}ChangeBackgroundImages(BackgroundsUrls, NeedToAnim);
		ChangeRankNeon(_Controls, State.Mode.Id, Rank, NeedToAnim);

		if (State.Scene.SceneId != NullId && !MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)) {
			// Order same as background: Night, Day, Morning, Evening
			MenuSceneMgr.CubeMapSetImage2ds(
				State.Scene.SceneId,
				CubeMapsUrls[C_BackgroundMood_Night],
				CubeMapsUrls[C_BackgroundMood_Day],
				CubeMapsUrls[C_BackgroundMood_Morning],
				CubeMapsUrls[C_BackgroundMood_Evening]
			);
			MenuSceneMgr.PlaneReflectRefresh();
		}
		State.LocalPlayerPreviousDivisionId = State.LocalPlayerCurrentDivisionId;
	}

	return State;
}

Integer CheckPlayerTopPosition(K_State _State) {
	declare PlayerTopPosition = -1;
	if (_State.LocalPlayerCurrentScore >= {{{ProgressBar::P}}}GetTop10MinPoints()) {
		foreach (Top in _State.Top10) {
			if (Top.AccountId == LocalUser.WebServicesUserId) {
				PlayerTopPosition = Top.Rank;
				break;
			}
		}
	}
	return PlayerTopPosition;
}

K_State UpdatePlayerMatchmakingScore(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;

	if (State.Mode.Id == "{{{MatchmakingStruct::C_Mode_Royal}}}") {
		_Controls.Frame_ProgressBar.Hide();
		_Controls.Frame_PlayerRank.Hide();
		if (State.LocalPlayerCurrentDivisionId == "" && State.LocalPlayerCurrentScore != C_LocalPlayerMatchmakingScore_Unknown) { // New Royal player unranked
			_Controls.Frame_RoyalVictory.Show();
			_Controls.Frame_Crown.Show();
			{{{PlayerRoyalVictories::P}}}UpdatePlayerRoyalVictories(This, _Controls.Frame_RoyalVictory, "", 0);
			{{{PlayerRoyalVictories::P}}}UpdatePlayerRoyalVictories(This, _Controls.Frame_Crown, "", 0);
			_Controls.Label_PlayerRank.Value = "{{{Text_RoyalVictories0}}}";
		} else if (State.LocalPlayerCurrentDivisionId != "" && State.LocalPlayerCurrentScore >= 0) { // Update lion and crown
			_Controls.Frame_RoyalVictory.Show();
			_Controls.Frame_Crown.Show();
			{{{PlayerRoyalVictories::P}}}UpdatePlayerRoyalVictories(This, _Controls.Frame_RoyalVictory, State.LocalPlayerCurrentDivisionId, State.LocalPlayerCurrentScore, State.SuperRoyalVictories);
			{{{PlayerRoyalVictories::P}}}UpdatePlayerRoyalVictories(This, _Controls.Frame_Crown, State.LocalPlayerCurrentDivisionId, State.LocalPlayerCurrentScore);
			if (State.LocalPlayerCurrentScore <= 0) {
				_Controls.Label_PlayerRank.Value = "{{{Text_RoyalVictories0}}}";
			} else if (State.LocalPlayerCurrentScore == 1) {
				_Controls.Label_PlayerRank.Value = "{{{Text_RoyalVictory}}}";
			} else {
				_Controls.Label_PlayerRank.Value = TL::Compose("{{{Text_RoyalVictories}}}", ""^State.LocalPlayerCurrentScore);
			}
		} else {
			_Controls.Frame_RoyalVictory.Hide();
			_Controls.Frame_Crown.Hide();
			_Controls.Label_PlayerRank.Value = "";
		}
	} else {
		_Controls.Frame_Crown.Hide();
		_Controls.Frame_RoyalVictory.Hide();
		if (State.LocalPlayerCurrentDivisionId == "" && State.LocalPlayerCurrentScore != C_LocalPlayerMatchmakingScore_Unknown) { // New MM player unranked
			_Controls.Frame_ProgressBar.Show();
			_Controls.Frame_PlayerRank.Show();
			{{{ProgressBar::P}}}SetProgressBarValue(_Controls.Frame_ProgressBar, 0);
			{{{PlayerRank::P}}}UpdatePlayerRank(_Controls.Frame_PlayerRank, 1);
			_Controls.Label_PlayerRank.Value = "{{{Text_Unranked}}}";
			State = UpdateBackground(State, _Controls);
		} else if (State.LocalPlayerCurrentScore >= 0 && State.LocalPlayerCurrentDivisionId != "") { // Update bar and rank
			_Controls.Frame_ProgressBar.Show();
			_Controls.Frame_PlayerRank.Show();
			{{{PlayerRank::P}}}UpdatePlayerRank(_Controls.Frame_PlayerRank, State.LocalPlayerCurrentDivisionId);
			{{{ProgressBar::P}}}SetProgressBarValue(_Controls.Frame_ProgressBar, State.LocalPlayerCurrentScore, State.LocalPlayerCurrentDivisionId, CheckPlayerTopPosition(State));
			declare Integer CurrentRank = {{{PlayerRank::P}}}GetRankNumberFromDivisionId(State.LocalPlayerCurrentDivisionId);
			_Controls.Label_PlayerRank.Value = C_Rank_Names.get(CurrentRank, "{{{Text_Unranked}}}");
			State = UpdateBackground(State, _Controls);
		} else { // Hide bar and rank
			_Controls.Frame_ProgressBar.Hide();
			_Controls.Frame_PlayerRank.Hide();
			_Controls.Label_PlayerRank.Value = "";
		}
	}

	return State;
}

Void SetMarkerSizeAndPos(CMlFrame _Frame_Marker, CMlFrame _Button_Mute, CMlFrame _LoadingSpinner_Mute) {
	declare CMlFrame Frame_PlayerName <=> (_Frame_Marker.GetFirstChild("marker-playername") as CMlFrame);
	declare CMlFrame Frame_Background <=> (_Frame_Marker.GetFirstChild("frame-background") as CMlFrame);

	declare Real BgWidth = {{{PlayerName::P}}}GetWidth(Frame_PlayerName) + C_PlayerNameMargin;
	if (_Button_Mute.Visible) {
		Frame_PlayerName.RelativePosition_V3.X = Frame_Background.RelativePosition_V3.X - C_PlayerNameMargin;
		BgWidth = {{{PlayerName::P}}}GetWidth(Frame_PlayerName) + C_PlayerNameMargin + C_SpeakerMargin;
		_Button_Mute.RelativePosition_V3.X = Frame_PlayerName.RelativePosition_V3.X + ({{{PlayerName::P}}}GetWidth(Frame_PlayerName) * 0.51) + C_SpeakerMargin;
		if (_LoadingSpinner_Mute != Null) _LoadingSpinner_Mute.RelativePosition_V3.X = _Button_Mute.RelativePosition_V3.X - 1.8;
	} else {
		Frame_PlayerName.RelativePosition_V3.X = Frame_Background.RelativePosition_V3.X;
	}

	{{{ExpendableAsset::P}}}SetWidth(This, Frame_Background, BgWidth, False);
	{{{ExpendableAsset::P}}}RedrawAsset(This, Frame_Background, False);
}

Void SetMarker(CMlFrame _Frame_Marker, CMlFrame _Button_Mute, CMlFrame _LoadingSpinner_Mute, K_SquadMember _Member) {
	declare CMlFrame Frame_PlayerName <=> (_Frame_Marker.GetFirstChild("marker-playername") as CMlFrame);

	{{{PlayerName::P}}}SetName(This, Frame_PlayerName, _Member.DisplayName, _Member.ClubTag, _Member.IsFirstPartyDisplayName, True);
	SetMarkerSizeAndPos(_Frame_Marker, _Button_Mute, _LoadingSpinner_Mute);
}

Void SetMyMarker(CMlFrame _Frame_Marker, CMlFrame _Button_Mute, CMlFrame _LoadingSpinner_Mute) {
	declare CMlFrame Frame_PlayerName <=> (_Frame_Marker.GetFirstChild("marker-playername") as CMlFrame);

	{{{PlayerName::P}}}SetUser(This, Frame_PlayerName, LocalUser, True);
	SetMarkerSizeAndPos(_Frame_Marker, _Button_Mute, _LoadingSpinner_Mute);
}

Void SetUserInfo(K_Controls _Controls) {
	{{{PlayerName::P}}}SetUser(This, _Controls.Frame_PlayerName, LocalUser, True);
	{{{ExpendableButton::P}}}SetWidth(This, _Controls.Button_LocalPlayer, {{{PlayerName::P}}}GetWidth(_Controls.Frame_PlayerName) + 15.);
	SetMyMarker(_Controls.Frame_PlayerMarker, _Controls.Button_MutePlayer, Null);
}

K_State PlayMusic(K_State _State, Boolean _PlayMusic) {
	declare K_State State = _State;

	if (_PlayMusic) {
		MenuMusic::SetSection(State.Mode.MusicSection);
	} else {
		MenuMusic::SetSection(MenuMusic::C_Section_Menu);
	}

	return State;
}

K_State DestroyVehiclesScene(K_State _State) {
	declare State = _State;

	if (State.Scene.SceneId != NullId) {
		foreach (Index => VehicleReadOnly in State.Scene.Vehicles) {
			if (VehicleReadOnly.Id != NullId) MenuSceneMgr.ItemDestroy(State.Scene.SceneId, VehicleReadOnly.Id);
			if (VehicleReadOnly.PilotId != NullId) MenuSceneMgr.ItemDestroy(State.Scene.SceneId, VehicleReadOnly.PilotId);
		}
		MenuSceneMgr.SceneDestroy(State.Scene.SceneId);
		State.Scene.SceneId = NullId;
	}
	State.Scene.Vehicles = [];

	return State;
}

K_State InitVehiclesScene(K_State _State) {
	declare State = DestroyVehiclesScene(_State);
	State.Scene.SceneId = MenuSceneMgr.SceneCreate("Empty");
	MenuSceneManager::PageSynchronizeScene(Page, LocalUser);

	if (State.Scene.SceneId != NullId) {
		MenuSceneMgr.CameraSetLocation(State.Scene.SceneId, <1.6, 2.3, -4.1>, 7.8, 38.5);
		MenuSceneMgr.PlaneReflectEnable(
			State.Scene.SceneId,
			0.63,
			// Same order as quads in MainBackground
			{{{MainBackground::P}}}GetQuadNight(),
			{{{MainBackground::P}}}GetQuadDay(),
			{{{MainBackground::P}}}GetQuadMorning(),
			{{{MainBackground::P}}}GetQuadEvening(),
			-2.1
		);
	}
	return State;
}

K_State UpdateDisplayedVehicles(K_State _State, K_Vehicle[] _VehiclesToDisplay) {
	declare K_State State = _State;

	if (State.Scene.SceneId != NullId && !MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)) {
		while (_VehiclesToDisplay.count < State.Scene.Vehicles.count) {
			declare VehicleToDestroy = State.Scene.Vehicles[State.Scene.Vehicles.count-1];
			if (VehicleToDestroy.Id != NullId) MenuSceneMgr.ItemDestroy(State.Scene.SceneId, VehicleToDestroy.Id);
			if (VehicleToDestroy.PilotId != NullId) MenuSceneMgr.ItemDestroy(State.Scene.SceneId, VehicleToDestroy.PilotId);
			State.Scene.Vehicles.removekey(State.Scene.Vehicles.count-1);
		}

		declare Integer BoostLevel = 0;
		foreach (Index => VehicleToDisplay in _VehiclesToDisplay) {
			if (!State.Scene.Vehicles.existskey(Index)) State.Scene.Vehicles.add(K_Vehicle {});

			if (
				State.Scene.Vehicles[Index].Id == NullId ||
				State.Scene.Vehicles[Index].Name != VehicleToDisplay.Name ||
				State.Scene.Vehicles[Index].Path != VehicleToDisplay.Path
			) {
				if (State.Scene.Vehicles[Index].Id != NullId) {
					MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.Vehicles[Index].Id);
				}
				if (State.Scene.Vehicles[Index].PilotId != NullId) {
					MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.Vehicles[Index].PilotId);
				}

				declare K_Vehicle NewVehicle = VehicleToDisplay;
				// Create car item
				if (Index == 0 || NewVehicle.PrestigeOptions == "") {
					NewVehicle.Id = MenuSceneMgr.ItemCreate(State.Scene.SceneId, C_CarModel, NewVehicle.Name, NewVehicle.Path, NewVehicle.PrestigeOptions);
				} else {
					NewVehicle.Id = MenuSceneMgr.ItemCreate(State.Scene.SceneId, C_CarModel, "", "", NewVehicle.PrestigeOptions);
				}
				if (NewVehicle.Id != NullId) {
					NewVehicle.EndPos = <0., 0., 0.>;
					NewVehicle.Rotation = -180.;
					switch (Index) {
						case 0: {
							NewVehicle.EndPos = <1.4, 0., 4.5>;
							NewVehicle.Rotation = -165.;
						}
						case 1: {
							NewVehicle.EndPos = <4.1, 0., 4.3>;
							NewVehicle.Rotation = -155.;
						}
						case 2: {
							NewVehicle.EndPos = <-1., 0., 6.>;
							NewVehicle.Rotation = -170.;
						}
					}
					if (C_VehicleAnimationsEnabled && NewVehicle.TriggerAnimation && NewVehicle.TriggerAnimationDelay == -1) {
						NewVehicle.JustLaunchedAnimation = True;
						NewVehicle.TriggerAnimationDelay = Now;
						NewVehicle.StartPos = NewVehicle.EndPos + <0., 5., 0.>;
						if (NewVehicle.BouncingEasterEgg) BoostLevel = 1;
						else BoostLevel = 2;
					} else {
						NewVehicle.JustLaunchedAnimation = False;
						NewVehicle.StartPos = NewVehicle.EndPos;
						BoostLevel = 0;
					}
					MenuSceneMgr.ItemSetPlayerState(State.Scene.SceneId, NewVehicle.Id, NewVehicle.LightColor, <0., 0., 0.>,	"",	"");
					MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, NewVehicle.Id, NewVehicle.StartPos, NewVehicle.Rotation, False);
					MenuSceneMgr.ItemSetVehicleState(
						State.Scene.SceneId,
						NewVehicle.Id,
						0.7,
						False,
						False,
						0,
						BoostLevel,
						False
					);

					// Create pilot item
					NewVehicle.PilotId = MenuSceneMgr.ItemCreate(
						State.Scene.SceneId,
						C_PilotModel,
						NewVehicle.PilotName,
						NewVehicle.PilotUrl,
						NewVehicle.PilotOptions
					);

					if (NewVehicle.PilotId != NullId) {
						MenuSceneMgr.ItemAttachTo(State.Scene.SceneId, NewVehicle.PilotId, NewVehicle.Id);
						MenuSceneMgr.ItemSetPlayerState(State.Scene.SceneId, NewVehicle.PilotId, NewVehicle.LightColor, <0., 0., 0.>,	"",	"");
					}
				}

				State.Scene.Vehicles[Index] = NewVehicle; // Do not remove empty structs so that other vehicles will not randomly change their positions in scene due to index change.
			} else {
				State.Scene.Vehicles[Index].JustLaunchedAnimation = False;
			}
		}
		if (_VehiclesToDisplay.count > 0) MenuSceneMgr.PlaneReflectRefresh();
	}

	return State;
}

Void UpdatePlayerSpeakerDisplay(Text _AccountId, CMlFrame _Button_Mute, CMlFrame _LoadingSpinner_Mute) {
	declare CGameUserVoiceChat VoiceChatUser = UserMgr.VoiceChat_FindUserFromWebServicesUserId(_AccountId);
	if (VoiceChatUser != Null && VoiceChatUser.IsConnected && UserMgr.VoiceChat_Users_Remote.count > 0) { // If players are not connected, do not show their speaker, it means they are not in the channel (because player disabled voice chat in setting for example)
		_Button_Mute.Visible = True;
		declare Text ImageUrl = "{{{Icons::C_Icon_128x128_Speaker_Off}}}";
		if (!VoiceChatUser.MuteChangePending) {
			if (VoiceChatUser.IsMuted) {
				if (_AccountId == LocalUser.WebServicesUserId) {
					ImageUrl = "{{{Icons::C_Icon_128x128_Micro_Off}}}";
				} else {
					ImageUrl = "{{{Icons::C_Icon_128x128_Speaker_Mute}}}";
				}
			} else if (VoiceChatUser.IsSpeaking) {
				ImageUrl = "{{{Icons::C_Icon_128x128_Speaker_On}}}";
			}
		}

		// Update button image only if necessary
		if ({{{Button::P}}}GetImage(_Button_Mute) != ImageUrl) {
			{{{Button::P}}}SetImage(This, _Button_Mute, ImageUrl);
			{{{Button::P}}}SetImageFocus(This, _Button_Mute, ImageUrl);

			if (ImageUrl == "{{{Icons::C_Icon_128x128_Micro_Off}}}") {{{Button::P}}}SetSize(This, _Button_Mute, <6., 6.>);
			else {{{Button::P}}}SetSize(This, _Button_Mute, <8., 8.>);
		}

		// Start or stop mute loading spinner if necessary
		_LoadingSpinner_Mute.Visible = VoiceChatUser.MuteChangePending;
		if (_LoadingSpinner_Mute.Visible && !{{{LoadingSpinner::P}}}IsLoading(_LoadingSpinner_Mute)) {{{LoadingSpinner::P}}}StartAnimation(This, _LoadingSpinner_Mute);
		else if (!_LoadingSpinner_Mute.Visible && {{{LoadingSpinner::P}}}IsLoading(_LoadingSpinner_Mute)) {{{LoadingSpinner::P}}}StopAnimation(This, _LoadingSpinner_Mute);
	} else {
		_Button_Mute.Visible = False;
	}
}

Void UpdateFriendInfos(
	CMlFrame _ButtonFriend,
	CMlFrame _FrameFriend,
	CMlFrame _FrameMarker,
	K_SquadMember _Member,
	Boolean _IsRankedMode,
	CMlFrame _Button_Mute,
	CMlFrame _LoadingSpinner_Mute,
	Text _MemberAccountId
) {
	declare CMlFrame Frame_FriendName = (_FrameFriend.GetFirstChild("squad-playername") as CMlFrame);
	declare CMlLabel Label_FriendRank = (_FrameFriend.GetFirstChild("label-player-rank") as CMlLabel);
	declare CMlFrame Frame_FriendRank = (_FrameFriend.GetFirstChild("frame-player-rank") as CMlFrame);
	declare CMlFrame Frame_FriendCrown = (_FrameFriend.GetFirstChild("frame-player-crown") as CMlFrame);

	_FrameFriend.Visible = True;

	Frame_FriendRank.Visible = _IsRankedMode;
	Frame_FriendCrown.Visible = !_IsRankedMode;
	if (_IsRankedMode) {
		if (_Member.DivisionId != "") {
			{{{PlayerRank::P}}}UpdatePlayerRank(Frame_FriendRank, _Member.DivisionId);
			declare Integer CurrentRank = {{{PlayerRank::P}}}GetRankNumberFromDivisionId(_Member.DivisionId);
			Label_FriendRank.Value = C_Rank_Names.get(CurrentRank, "{{{Text_Unranked}}}");
		} else {
			{{{PlayerRank::P}}}UpdatePlayerRank(Frame_FriendRank, 1); //< Set to B1 by default
			Label_FriendRank.Value = "{{{Text_Unranked}}}";
		}
	} else {
		{{{PlayerRoyalVictories::P}}}UpdatePlayerRoyalVictories(This, Frame_FriendCrown, _Member.DivisionId, _Member.Progression);
		if (_Member.Progression <= 0) {
			Label_FriendRank.Value = "{{{Text_RoyalVictories0}}}";
		} else if (_Member.Progression == 1) {
			Label_FriendRank.Value = "{{{Text_RoyalVictory}}}";
		} else {
			Label_FriendRank.Value = TL::Compose("{{{Text_RoyalVictories}}}", ""^_Member.Progression);
		}
	}
	{{{PlayerName::P}}}SetName(This, Frame_FriendName, _Member.DisplayName, _Member.ClubTag, _Member.IsFirstPartyDisplayName, True);
	{{{ExpendableButton::P}}}SetWidth(This, _ButtonFriend, {{{PlayerName::P}}}GetWidth(Frame_FriendName) + 15.);
	_FrameMarker.Visible = True;
	UpdatePlayerSpeakerDisplay(_MemberAccountId, _Button_Mute, _LoadingSpinner_Mute);
	SetMarker(_FrameMarker, _Button_Mute, _LoadingSpinner_Mute, _Member);
}

Void UpdateInviteButton(CMlFrame _ButtonInvite, Real _ButtonPosY, CMlFrame _FrameInvite, CMlFrame _FrameMarker, CMlFrame _Button_Mute) {
	declare CMlLabel LabelName = (_FrameInvite.GetFirstChild("label-friend-name") as CMlLabel);
	declare CMlQuad QuadFlag = (_FrameInvite.GetFirstChild("quad-friend-flag") as CMlQuad);
	declare CMlQuad QuadIcon = (_FrameInvite.GetFirstChild("quad-icon-plus") as CMlQuad);
	declare CMlQuad QuadBgIcon = (_FrameInvite.GetFirstChild("quad-bg-icon-plus") as CMlQuad);
	declare CMlFrame Frame_FriendRank = (_FrameInvite.GetFirstChild("frame-member-rank") as CMlFrame);
	declare CMlFrame Frame_FriendCrown = (_FrameInvite.GetFirstChild("frame-member-crown") as CMlFrame);

	_ButtonInvite.RelativePosition_V3.Y = _ButtonPosY;
	QuadIcon.Visible = True;
	QuadBgIcon.Visible = True;
	QuadFlag.Visible = False;
	Frame_FriendRank.Visible = False;
	Frame_FriendCrown.Visible = False;
	LabelName.RelativePosition_V3.X = 2.;
	LabelName.TextFont = "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}";
	LabelName.TextPrefix = "$i";
	LabelName.SetText("{{{Text_Invite_Friend}}}");
	Tools::FitLabelValue(LabelName, 2.5, 0.1, 0.25);
	_FrameMarker.Visible = False;
	_Button_Mute.Visible = False;
}

Void UpdateSquadMembersIndicator(K_Controls _Controls, Integer _SquadMembersDisplayed) {
	switch (_SquadMembersDisplayed) {
		case 0: { //< No friends in the squad
			_Controls.Quad_IconSquadPlayer2.Colorize = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentThree)}}};
			_Controls.Quad_IconSquadPlayer3.Colorize = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentThree)}}};
		}
		case 1: { //< One friend in the squad
			_Controls.Quad_IconSquadPlayer2.Colorize = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}};
			_Controls.Quad_IconSquadPlayer3.Colorize = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentThree)}}};
		}
		case 2: { //< Two friends in the squad
			_Controls.Quad_IconSquadPlayer2.Colorize = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}};
			_Controls.Quad_IconSquadPlayer3.Colorize = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}};
		}
	}
}

K_State UpdateSquadFriendsDisplay(K_State _State, K_Controls _Controls, Boolean _IsPlayersAnimated) {
	declare K_State State = _State;
	declare CMlFrame[] PlayersButtons = [_Controls.Button_SquadPlayer1, _Controls.Button_SquadPlayer2];
	declare CMlFrame[] Frames = [_Controls.Frame_SquadPlayer1, _Controls.Frame_SquadPlayer2];
	declare CMlFrame[] FramesMarkers = [_Controls.Frame_FriendMarker1, _Controls.Frame_FriendMarker2];
	declare CMlFrame[] Buttons_Mute = [_Controls.Button_MuteFriend1, _Controls.Button_MuteFriend2];
	declare CMlFrame[] LoadingSpinner_Mute = [_Controls.LoadingSpinner_Mute1, _Controls.LoadingSpinner_Mute2];
	declare Integer FriendIndex = 0;
	declare K_Vehicle[] VehiclesToDisplay = [
		K_Vehicle {
			Id = NullId,
			Name = LocalUser.Model_CarSport_SkinName,
			Path = LocalUser.Model_CarSport_SkinUrl,
			PrestigeOptions = LocalUser.Prestige_SkinOptions,
			LightColor = LocalUser.Color,
			PilotId = NullId,
			PilotName = LocalUser.Model_CharacterPilot_SkinName,
			PilotUrl = LocalUser.Model_CharacterPilot_SkinUrl,
			PilotOptions = LocalUser.Character_SkinOptions,
			TriggerAnimation = (_IsPlayersAnimated && State.Squad.Members.count == 0),
			TriggerAnimationDelay = -1,
			BouncingEasterEgg = (ML::Rand(1, 100) == 14)
		}
	];

	declare Boolean IsRankedMode = (State.Mode.Id != "{{{MatchmakingStruct::C_Mode_Royal}}}");

	// Update friends infos
	Frames[C_FirstFriendIndex].Visible = False;
	Frames[C_SecondFriendIndex].Visible = False;
	FramesMarkers[C_FirstFriendIndex].Visible = False;
	FramesMarkers[C_SecondFriendIndex].Visible = False;
	foreach (Member in State.Squad.Members) {
		if (FriendIndex < C_MaxFriends) {
			UpdateFriendInfos(PlayersButtons[FriendIndex], Frames[FriendIndex], FramesMarkers[FriendIndex], Member, IsRankedMode, Buttons_Mute[FriendIndex], LoadingSpinner_Mute[FriendIndex], State.Squad.MembersIds[FriendIndex]);
			VehiclesToDisplay.add(K_Vehicle {
				Id = NullId,
				Name = Member.SkinName,
				Path = Member.SkinUrl,
				PrestigeOptions = Member.SkinPrestigeOptions,
				LightColor = <0., 0., 0.>,
				PilotId = NullId,
				PilotName = "", // @TODO retrieve this when info added in CNotification_SquadMemberAdded
				PilotUrl = "", // @TODO retrieve this when info added in CNotification_SquadMemberAdded
				PilotOptions = "", // @TODO retrieve this when info added in CNotification_SquadMemberAdded,
				TriggerAnimation = (_IsPlayersAnimated && FriendIndex == State.Squad.Members.count-1),
				TriggerAnimationDelay = -1,
				BouncingEasterEgg = (ML::Rand(1, 8092) == 1996)
			});
		}
		FriendIndex+=1;
	}

	// Update squad members indicator
	UpdateSquadMembersIndicator(_Controls, FriendIndex);

	// Update local player marker for voice chat
	UpdatePlayerSpeakerDisplay(LocalUser.WebServicesUserId, _Controls.Button_MutePlayer, _Controls.LoadingSpinner_MutePlayer);
	SetMarkerSizeAndPos(_Controls.Frame_PlayerMarker, _Controls.Button_MutePlayer, Null);

	// Update vehicles display
	State = UpdateDisplayedVehicles(State, VehiclesToDisplay);
	_Controls.Frame_PlayerMarker.Visible = (FriendIndex > 0);

	// Update social buttons navigation and positions
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(PlayersButtons[C_FirstFriendIndex], (FriendIndex >= 1));
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(PlayersButtons[C_SecondFriendIndex], (FriendIndex == C_MaxFriends));
	if (FriendIndex > 0 && FriendIndex <= C_MaxFriends) {
		if (_IsPlayersAnimated) {
			// Do not re launch the frames animation if the vehicle animation has already begun
			if (!C_VehicleAnimationsEnabled || (State.Scene.Vehicles.existskey(FriendIndex) && State.Scene.Vehicles[FriendIndex].JustLaunchedAnimation)) {
				AnimMgr.Flush(_Controls.Frame_SocialButtons);
				if (FriendIndex == C_MaxFriends) {
					Frames[C_SecondFriendIndex].RelativePosition_V3.X = -2 * {{{ExpendableButton::P}}}GetWidth(PlayersButtons[C_SecondFriendIndex]);
					AnimMgr.Flush(Frames[C_SecondFriendIndex]);
					AnimMgr.Add(Frames[C_SecondFriendIndex], "<anim pos=\"0 "^Frames[C_SecondFriendIndex].RelativePosition_V3.Y^"\" />", C_PlayerFrameAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(_Controls.Frame_SocialButtons, "<anim pos=\"0 "^PlayersButtons[C_SecondFriendIndex].RelativePosition_V3.Y - 33^"\" />", C_PlayerFrameAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);

					// Animate player marker
					if (C_VehicleAnimationsEnabled) {
						FramesMarkers[C_SecondFriendIndex].RelativePosition_V3.Y = 100.;
						AnimMgr.Flush(FramesMarkers[C_SecondFriendIndex]);
						if (VehiclesToDisplay.existskey(FriendIndex) && VehiclesToDisplay[FriendIndex].BouncingEasterEgg) {
							AnimMgr.Add(FramesMarkers[C_SecondFriendIndex], "<anim pos=\""^FramesMarkers[C_SecondFriendIndex].RelativePosition_V3.X^ " 8.\" />", Now, C_VehicleAnimDuration, CAnimManager::EAnimManagerEasing::BounceOut);
						} else {
							AnimMgr.Add(FramesMarkers[C_SecondFriendIndex], "<anim pos=\""^FramesMarkers[C_SecondFriendIndex].RelativePosition_V3.X^ " 8.\" />", Now + 300, C_VehicleAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
						}
					}
				} else {
					Frames[C_FirstFriendIndex].RelativePosition_V3.X = -2 * {{{ExpendableButton::P}}}GetWidth(PlayersButtons[C_FirstFriendIndex]);
					AnimMgr.Flush(Frames[C_FirstFriendIndex]);
					AnimMgr.Add(Frames[C_FirstFriendIndex], "<anim pos=\"0 "^Frames[C_FirstFriendIndex].RelativePosition_V3.Y^"\" />", C_PlayerFrameAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(_Controls.Frame_SocialButtons, "<anim pos=\"0 "^PlayersButtons[C_FirstFriendIndex].RelativePosition_V3.Y - 31^"\" />", C_PlayerFrameAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);

					// Animate player marker
					if (C_VehicleAnimationsEnabled) {
						FramesMarkers[C_FirstFriendIndex].RelativePosition_V3.Y = 100.;
						AnimMgr.Flush(FramesMarkers[C_FirstFriendIndex]);
						if (VehiclesToDisplay.existskey(FriendIndex) && VehiclesToDisplay[FriendIndex].BouncingEasterEgg) {
							AnimMgr.Add(FramesMarkers[C_FirstFriendIndex], "<anim pos=\""^FramesMarkers[C_FirstFriendIndex].RelativePosition_V3.X^ " 2.\" />", Now, C_VehicleAnimDuration, CAnimManager::EAnimManagerEasing::BounceOut);
						} else {
							AnimMgr.Add(FramesMarkers[C_FirstFriendIndex], "<anim pos=\""^FramesMarkers[C_FirstFriendIndex].RelativePosition_V3.X^ " 2.\" />", Now + 300, C_VehicleAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
						}
					}
				}
			}
		} else {
			AnimMgr.Flush(_Controls.Frame_SocialButtons);
			if (FriendIndex == C_MaxFriends) {
				_Controls.Frame_SocialButtons.RelativePosition_V3.Y = PlayersButtons[C_SecondFriendIndex].RelativePosition_V3.Y - 33.;
			} else {
				_Controls.Frame_SocialButtons.RelativePosition_V3.Y = PlayersButtons[C_FirstFriendIndex].RelativePosition_V3.Y - 31.;
			}
		}
	} else {
		AnimMgr.Flush(_Controls.Frame_SocialButtons);
		AnimMgr.Add(_Controls.Frame_SocialButtons, "<anim pos=\"0 "^_Controls.Button_LocalPlayer.RelativePosition_V3.Y - 15^"\" />", C_PlayerFrameAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	}
	_Controls.Frame_InviteFrom.Visible = FriendIndex < C_MaxFriends;
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(_Controls.Button_UbiConnectFriends, FriendIndex < C_MaxFriends);
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(_Controls.Button_FirstPartyInvite, Platform::IsConsole(System) && FriendIndex < C_MaxFriends);


	// Update focus if previous focused control is now locked
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
	if (FocusedControl == Null || {{{Navigation::P}}}IsLocked(FocusedControl)) {
		if (!{{{Navigation::P}}}IsLocked(_Controls.Button_UbiConnectFriends)) {
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_UbiConnectFriends, _Controls);
		} else {
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_UbiConnectInvites, _Controls);
		}
	}

	return State;
}

K_State UpdateSquadFriendsDisplay(K_State _State, K_Controls _Controls) {
	return UpdateSquadFriendsDisplay(_State, _Controls, False);
}

K_State DisplayProfile(K_State _State, K_Controls _Controls, Text _AccountId, Boolean _Display, Boolean _UpdateVehiclesScene) {
	declare State = _State;
	_Controls.Frame_Profile.Visible = _Display;
	_Controls.Camera_Vehicles.Visible = !_Display;
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !_Display);
	if (_Display) {
		if (_UpdateVehiclesScene) {
			State = DestroyVehiclesScene(State);
		}
		if (_AccountId == "") {
			{{{ProfilePlayerInfo::P}}}SetUser(LocalUser);
		} else {
			{{{ProfilePlayerInfo::P}}}SetUserAccountId(_AccountId);
		}

		{{{ProfilePlayerInfo::P}}}Enable(True);
		{{{ProfilePlayerInfo::P}}}EnableGarageButton(False);
	} else {
		{{{ProfilePlayerInfo::P}}}Enable(False);
		if (_UpdateVehiclesScene) {
			State = InitVehiclesScene(State);
			State = UpdateBackground(State, _Controls);
			State = UpdateSquadFriendsDisplay(State, _Controls);
		}
	}
	return State;
}
K_State DisplayProfile(K_State _State, K_Controls _Controls, Boolean _Display, Boolean _UpdateVehiclesScene) {
	return DisplayProfile(_State, _Controls, "", _Display, _UpdateVehiclesScene);
}
K_State DisplayProfile(K_State _State, K_Controls _Controls, Boolean _Display) {
	return DisplayProfile(_State, _Controls, _Display, True);
}

K_State CancelSuperRoyalQueue(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;
	State.SuperRoyalState.InSuperRoyalQueue = False;
	State.MatchmakingQueue = State.OfficialQueue;
	State.NextStatusCheckTime = Now;
	_Controls.Label_SuperRoyalQueue.Hide();
	return State;
}

K_State JoinMatch(K_State _State, K_Controls _Controls) {
	declare State = _State;
	if (PageIsVisible && State.JoinLink != "" && State.JoinMatchCooldown <= Now) {
		declare JoinLink = Tools::ParseJoinLink(State.JoinLink);
		if (JoinLink.Type == "join") JoinLink.Type = "qjoin";
		State.JoinMatchCooldown = Now + C_JoinMatch_MaxFrequency;

		// Update loading screen
		if (State.Mode.Id == "{{{MatchmakingStruct::C_Mode_Royal}}}") {
			declare Text ModeName = State.Mode.Name;
			if (State.SuperRoyalState.InSuperRoyalQueue || State.SuperRoyalState.Status == {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Qualified) {
				ModeName = "{{{Text_SuperRoyal}}}";
				// To update the super royal status when coming back from the match
				State.NeedSuperRoyalUpdate = True;
			}
			SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", [ModeName, "{{{LoadingScreen::C_Background_Royal}}}"]);
		} else {
			SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", [State.Mode.Name]);
		}

		// Destroy scene cleanly before leaving for the match
		// Otherwise the C++ we'll do it for us and we'll lose track of the scene and items id
		State = DestroyVehiclesScene(State);

		TitleControl::OpenLinkAndWait(This, TitleControl, Tools::GenerateJoinLink(JoinLink), CMlScript::LinkType::ManialinkBrowser);
		// To update the user rank when coming back from the match
		State.NeedPlayerRankUpdate = True;
		// Recreate the scene when coming back from the match
		State.NeedSceneUpdate = True;
		// To update the heartbeat when coming back from the match
		State.LastestHeartbeat = {{{MatchmakingStruct::P}}}K_Heartbeat {};
	}
	return State;
}

Void SetErrorMessage(CMlLabel _LabelErrorMessage, Text _ErrorMessage) {
	_LabelErrorMessage.Value = _ErrorMessage;
	AnimMgr.Flush(_LabelErrorMessage);
	AnimMgr.Add(_LabelErrorMessage, "<a opacity=\"1.\" />", 50, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.Add(_LabelErrorMessage, "<a opacity=\"0.\" />", Now+C_Message_TimeDuration, C_Message_FadeTime, CAnimManager::EAnimManagerEasing::QuadOut);
}

// Update the displayed score of the owner in the ranked mode leaderboard
Void UpdateOwnerScore(K_State _State, K_Controls _Controls, CampaignStruct::LibCampaignStruct_K_TopScore _PlayerScore) {
	declare CMlLabel Label_OwnerRank <=> (_Controls.Frame_ScoreOwner.GetFirstChild("label-rank") as CMlLabel);
	declare CMlFrame PlayerName_OwnerName <=> (_Controls.Frame_ScoreOwner.GetFirstChild("playername-name") as CMlFrame);
	declare CMlLabel Label_OwnerPoints <=> (_Controls.Frame_ScoreOwner.GetFirstChild("label-points") as CMlLabel);
	declare CMlQuad Quad_Level <=> (_Controls.Frame_ScoreOwner.GetFirstChild("quad-level") as CMlQuad);

	{{{PlayerName::P}}}SetUser(This, PlayerName_OwnerName, LocalUser, False);
	if (_PlayerScore.Position > 0) {
		Label_OwnerRank.SetText(Tools::FormatTop(_PlayerScore.Position, False, 10000));
	} else {
		Label_OwnerRank.SetText("-");
	}
	if (_PlayerScore.AccountId == LocalUser.WebServicesUserId) {
		Label_OwnerPoints.SetText(""^_PlayerScore.Score);
		Quad_Level.ChangeImageUrl(C_Rank_Icons.get({{{ProgressBar::P}}}FindSurroundingLevels(_PlayerScore.Score).CurrentRank, ""));
	} else {
		Label_OwnerPoints.SetText(""^_State.LocalPlayerCurrentScore);
		Quad_Level.ChangeImageUrl(C_Rank_Icons.get({{{ProgressBar::P}}}FindSurroundingLevels(_State.LocalPlayerCurrentScore).CurrentRank, ""));
	}

	Tools::FitLabelValue(Label_OwnerRank, {{{TextSize_ScoreLabels}}}, 0.1, {{{TextSize_ScoreLabels}}}/Tools::C_FitLabelMaxSteps);
	Tools::FitLabelValue(Label_OwnerPoints, {{{TextSize_ScoreLabels}}}, 0.1, {{{TextSize_ScoreLabels}}}/Tools::C_FitLabelMaxSteps);
}

// Update the displayed scores of the top players in the ranked mode leaderboard
Void UpdateTopScores(K_State _State, K_Controls _Controls, CampaignStruct::LibCampaignStruct_K_TopScore[] _TopPlayersInRankedLeaderboard) {
	declare CampaignStruct::LibCampaignStruct_K_TopScore[] TopPlayersInRankedLeaderboard = _TopPlayersInRankedLeaderboard;
	if (_TopPlayersInRankedLeaderboard.count <= 0) {
		TopPlayersInRankedLeaderboard = [CampaignStruct::LibCampaignStruct_K_TopScore {
			AccountId = LocalUser.WebServicesUserId,
			Score = _State.LocalPlayerCurrentScore
		}];
	}

	foreach (Index => Control_Score in _Controls.Frame_Scores.Controls) {
		declare CMlFrame Frame_Score = (Control_Score as CMlFrame);
		declare Text DailyTrackerTA_PlayerAccountId for Frame_Score;

		/* Update frame visibility */
		Frame_Score.Visible = TopPlayersInRankedLeaderboard.existskey(Index);
		{{{Navigation::P}}}Lock(Frame_Score, !Frame_Score.Visible);

		/* Update frame content */
		if (TopPlayersInRankedLeaderboard.existskey(Index)) {
			declare CampaignStruct::LibCampaignStruct_K_TopScore TopPlayer = TopPlayersInRankedLeaderboard[Index];
			declare CMlLabel Label_Rank <=> (Frame_Score.GetFirstChild("label-rank") as CMlLabel);
			declare CMlFrame PlayerName_Name <=> (Frame_Score.GetFirstChild("playername-name") as CMlFrame);
			declare CMlLabel Label_Points <=> (Frame_Score.GetFirstChild("label-points") as CMlLabel);
			declare CMlQuad Quad_Level <=> (Frame_Score.GetFirstChild("quad-level") as CMlQuad);
			DailyTrackerTA_PlayerAccountId = TopPlayer.AccountId;

			Label_Points.SetText(""^TopPlayer.Score);
			{{{PlayerName::P}}}SetAccountId(This, PlayerName_Name, TopPlayer.AccountId, False);
			if (TopPlayer.Position <= 0) Label_Rank.SetText("-");
			else Label_Rank.SetText(Tools::FormatTop(TopPlayer.Position, False, 100));
			Quad_Level.ChangeImageUrl(C_Rank_Icons.get({{{ProgressBar::P}}}FindSurroundingLevels(TopPlayer.Score).CurrentRank, ""));

			Tools::FitLabelValue(Label_Rank, {{{TextSize_ScoreLabels}}}, 0.1, {{{TextSize_ScoreLabels}}}/Tools::C_FitLabelMaxSteps);
			Tools::FitLabelValue(Label_Points, {{{TextSize_ScoreLabels}}}, 0.1, {{{TextSize_ScoreLabels}}}/Tools::C_FitLabelMaxSteps);
		} else {
			DailyTrackerTA_PlayerAccountId = "";
		}
	}
}

// Try to focus the best button by default
Void FocusAvailableControl(K_Controls _Controls) {
	if (_Controls.Button_Ready.Visible && !{{{Navigation::P}}}IsLocked(_Controls.Button_Ready)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_Ready, _Controls);
	} else if (_Controls.Button_Cancel.Visible && !{{{Navigation::P}}}IsLocked(_Controls.Button_Cancel)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_Cancel, _Controls);
	} else if (_Controls.Button_Join.Visible && !{{{Navigation::P}}}IsLocked(_Controls.Button_Join)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_Join, _Controls);
	} else {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_Back, _Controls);
	}
}

// Show or hide the ranked mode leaderboard depending on its current display state
Void UpdateRankedLeaderboardDisplayState(K_Controls _Controls, Boolean _IsMouse) {
	if (_Controls.Frame_ClipLeaderboard.Visible) {
		declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");

		AnimMgr.Flush(_Controls.Frame_Leaderboard);
		if ({{{Button::P}}}GetIcon(_Controls.Button_Leaderboard) == "{{{Icons::C_Icon_256x256_Chrono}}}") {
			AnimMgr.Add(_Controls.Frame_Leaderboard, "<anim pos=\"0 "^_Controls.Frame_Leaderboard.RelativePosition_V3.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			{{{Button::P}}}SetIcon(This, _Controls.Button_Leaderboard, "{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}");
			{{{Button::P}}}SetIconFocus(This, _Controls.Button_Leaderboard, "{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}");
			Focus(FocusedControl, _Controls.Frame_Scores.Controls[0], _Controls);
		} else if (!_IsMouse && !FocusedControl.HasClass("{{{C_Class_Score}}}")) {
			Focus(FocusedControl, _Controls.Frame_Scores.Controls[0], _Controls);
		} else {
			AnimMgr.Add(_Controls.Frame_Leaderboard, "<anim pos=\""^{{{Size_Background.X+5.}}}^" "^_Controls.Frame_Leaderboard.RelativePosition_V3.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			{{{Button::P}}}SetIcon(This, _Controls.Button_Leaderboard, "{{{Icons::C_Icon_256x256_Chrono}}}");
			{{{Button::P}}}SetIconFocus(This, _Controls.Button_Leaderboard, "{{{Icons::C_Icon_256x256_Chrono}}}");
			FocusAvailableControl(_Controls);
		}
	}
}

Void DisplaySuperRoyalPreloadScreen(Boolean _DisplayPreload, K_Controls _Controls) {
	_Controls.Frame_LeftUpper.Visible = !_DisplayPreload;
	_Controls.Frame_RoyalVictory.Visible = !_DisplayPreload;
	_Controls.Button_SuperRoyal.Visible = !_DisplayPreload;

	_Controls.Frame_Preload_SuperRoyal.Visible = _DisplayPreload;

	if (_DisplayPreload) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_Back, _Controls);
	}
}

// Check if all the squad members are currently in queue for a match
Boolean IsAllSquadMembersInQueue(Integer _MatchmakingQueueState) {
	return (
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_Queued ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_Queued_CanceledByPickUp ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_MatchAccepted ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_MatchReady_WaitingForJoinLink ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_MatchReady_StartingServer ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_MatchReady_TryToJoin ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_MatchReady_DisplayJoinButton ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_SuperRoyal_WaitingScreen
	);
}

// Check if the user is currently in queue for a match
Boolean IsInQueue(Integer _MatchmakingQueueState) {
	return (
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_Loading ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_Pending ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_Queued ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_Queued_CanceledByPickUp ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_MatchAccepted ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_MatchReady_WaitingForJoinLink ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_MatchReady_StartingServer ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_MatchReady_TryToJoin ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_MatchReady_DisplayJoinButton ||
		_MatchmakingQueueState == C_Display_MatchmakingQueueState_SuperRoyal_WaitingScreen
	);
}

/* Main funtion to commande what to display on the page.
 * To display errors use C_Display_MatchmakingQueueState_Available state.
 */
K_State DisplayMatchmakingQueueState(K_State _State, K_Controls _Controls, Integer _TargetDisplayState, Text _ErrorMessage) {
	declare State = _State;
	State.Previous_MatchmakingQueueState_Display = State.MatchmakingQueueState_Display;
	State.MatchmakingQueueState_Display = _TargetDisplayState;
	State.StateEnteringTime = Now;
	State.NextStatusCheckTime = 0;
	if (State.Squad.LeaderId == LocalUser.WebServicesUserId) {
		UserMgr.Squad_SetLocked(MainUser::GetMainUserId(), State.Squad.Id, IsAllSquadMembersInQueue(State.MatchmakingQueueState_Display));
	}
	DirectLink::SetMatchmakingStatus(LocalUser, IsInQueue(State.MatchmakingQueueState_Display), State.MatchmakingQueue.Id);

	_Controls.Button_Ready.Hide();
	_Controls.Button_Cancel.Hide();
	_Controls.Button_Join.Hide();
	_Controls.Label_QueueInfo.Value = "";
	_Controls.Label_Error.Value = "";
	_Controls.Label_PopUpTimer.Value = "";
	{{{PopUpMultiChoice::P}}}SetSelectionIsRequired(This, _Controls.PopUpMultiChoice_Ok, False);
	{{{PopUpMultiChoice::P}}}ResetForceHideChoices(This, _Controls.PopUpMultiChoice_Ok, False);
	{{{PopUpMultiChoice::P}}}Close(This, _Controls.PopUpMultiChoice_Ok, False);
	{{{PopUpMultiChoice::P}}}Close(This, _Controls.PopUpMultiChoice_Leave, False);
	{{{PopUpMultiChoice::P}}}Close(This, _Controls.PopUpMultiChoice_PartyCode, False);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !{{{PartyCode::P}}}IsDisplayed());
	if (State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Royal) {
		DisplaySuperRoyalPreloadScreen(False, _Controls);
	}

	declare CMlFrame Button_VisibleButton;

	declare Boolean PopUpLoadingSpinnerVisible = False;
	declare Boolean SuperRoyalLoadingSpinnerVisible = False;
	declare Boolean IsJoiningMatch = False;
	switch (State.MatchmakingQueueState_Display) {
		case C_Display_MatchmakingQueueState_Unavailable: {
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextStatusCheckTime = Now;
		}
		case C_Display_MatchmakingQueueState_Available: {
			_Controls.Button_Ready.Show();
			Button_VisibleButton <=> _Controls.Button_Ready;
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			_Controls.Label_Error.Value = _ErrorMessage;
		}
		case C_Display_MatchmakingQueueState_Loading: {
			_Controls.Button_Cancel.Show();
			Button_VisibleButton <=> _Controls.Button_Cancel;
			_Controls.Label_QueueInfo.Value = "{{{Text_Retrieving}}}";
		}
		case C_Display_MatchmakingQueueState_Pending: {
			_Controls.Button_Cancel.Show();
			Button_VisibleButton <=> _Controls.Button_Cancel;
			_Controls.Label_QueueInfo.Value = "{{{Text_Pending}}}";
		}
		case C_Display_MatchmakingQueueState_SkillGapCanceled: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_SquadInvalid}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart(TL::Compose("{{{Text_SkillGap}}}", ""^C_SkillGapLimit), <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_DifferentCodeCanceled: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_SquadInvalid}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_DifferentPartyCode}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_CrossplayCanceled: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_SquadInvalid}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_CrossplaySettings}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_MaintenanceCanceled: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_SearchCanceled}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_CanceledByMaintenance}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_Queued: {
			_Controls.Button_Cancel.Show();
			Button_VisibleButton <=> _Controls.Button_Cancel;
			_Controls.Label_QueueInfo.Value = TL::Compose("{{{Text_InQueue}}}", "");
			if (State.QueueEnteringTime == 0) State.QueueEnteringTime = Now;
			State.AcceptMatchEnteringTime = 0;
			if (State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Royal) {
				_Controls.Label_QueueInfo.Value = TL::Compose("{{{Text_JoinRoyal}}}", "");
				if (State.RoyalQueueEnteringTime == 0) State.RoyalQueueEnteringTime = Now + C_RoyalQueueTimer;
				if (State.SuperRoyalState.InSuperRoyalQueue) {
					State.RoyalQueueEnteringTime = State.SuperRoyalState.NextSuperRoyalTime;
				}
			}
		}
		case C_Display_MatchmakingQueueState_Queued_CanceledByPickUp: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_MatchCanceled}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_CanceledByPickUp}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.AcceptMatchEnteringTime = 0;
		}
		case C_Display_MatchmakingQueueState_SearchCanceled_BySquadMate: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_SearchCanceled}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_CanceledBySquadMember}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
		}
		case C_Display_MatchmakingQueueState_MatchAccepted: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_MatchReady}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_MatchFound}}}", <120., 10.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}SetForceHideChoices(This, _Controls.PopUpMultiChoice_Ok, True, False);
			{{{PopUpMultiChoice::P}}}SetSelectionIsRequired(This, _Controls.PopUpMultiChoice_Ok, True);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			PopUpLoadingSpinnerVisible = True;
			IsJoiningMatch = True;
		}
		case C_Display_MatchmakingQueueState_MatchReady_WaitingForJoinLink: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_MatchReady}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_MatchReadyNoJoinLink}}}", <120., 10.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}SetForceHideChoices(This, _Controls.PopUpMultiChoice_Ok, True, False);
			{{{PopUpMultiChoice::P}}}SetSelectionIsRequired(This, _Controls.PopUpMultiChoice_Ok, True);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			PopUpLoadingSpinnerVisible = True;
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			System.FlashWindow();
			{{{MenuSounds::P}}}PlaySound(This, C_Sound_MatchFound);
			IsJoiningMatch = True;
			// Close Profile if opened
			if ({{{ProfilePlayerInfo::P}}}IsEnabled()) {
				State = DisplayProfile(State, _Controls, False);
			}
			if (State.SuperRoyalState.InSuperRoyalQueue) DisplaySuperRoyalPreloadScreen(True, _Controls);
		}
		case C_Display_MatchmakingQueueState_MatchReady_StartingServer: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_MatchReady}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_MatchReadyStartingServer}}}", <120., 10.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}SetForceHideChoices(This, _Controls.PopUpMultiChoice_Ok, True, False);
			{{{PopUpMultiChoice::P}}}SetSelectionIsRequired(This, _Controls.PopUpMultiChoice_Ok, True);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			PopUpLoadingSpinnerVisible = True;
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			{{{ServerStatus::P}}}GetServerStatus(Tools::ParseJoinLink(State.JoinLink).ServerLoginOrIp);
			IsJoiningMatch = True;
			if (State.SuperRoyalState.InSuperRoyalQueue) DisplaySuperRoyalPreloadScreen(True, _Controls);
		}
		case C_Display_MatchmakingQueueState_MatchReady_TryToJoin: {
			State = JoinMatch(State, _Controls);
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_MatchReady}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_MatchReadyTryToJoin}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}SetForceHideChoices(This, _Controls.PopUpMultiChoice_Ok, True, False);
			{{{PopUpMultiChoice::P}}}SetSelectionIsRequired(This, _Controls.PopUpMultiChoice_Ok, True);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextStatusCheckTime = Now + C_StatusCheck_Frequency;
			IsJoiningMatch = True;
			if (State.SuperRoyalState.InSuperRoyalQueue) DisplaySuperRoyalPreloadScreen(True, _Controls);
		}
		case C_Display_MatchmakingQueueState_MatchReady_DisplayJoinButton: {
			_Controls.Button_Join.Show();
			Button_VisibleButton <=> _Controls.Button_Join;
			_Controls.Label_Error.Value = "{{{Text_MatchInProgress}}}";
		}
		case C_Display_MatchmakingQueueState_Canceled_ByMe: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_MatchCanceled}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_MatchCanceledByMe}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
		}
		case C_Display_MatchmakingQueueState_Banned_PopUp: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_Banned}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_Banned}}}", <120., 10.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_Banned_MainPage: {
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_BanIsOver: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_Banned}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_BanIsOver}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_Penalty_PopUp: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_Penalty}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart(TL::Compose("{{{Text_Penalty}}}", ""^State.LastestPenalty.Points), <120., 10.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_InSquad_PopUp: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Leave, "{{{Text_Title_Squad}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Leave, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_LeaveSquad}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Leave);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Leave);
		}
		case C_Display_MatchmakingQueueState_InQueueSolo_PopUp: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Leave, "{{{Text_Title_Queue}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Leave, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_LeaveQueueSolo}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Leave);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Leave);
		}
		case C_Display_MatchmakingQueueState_InQueueSquad_PopUp: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Leave, "{{{Text_Title_Queue}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Leave, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_LeaveQueueSquad}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Leave);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Leave);
		}
		case C_Display_MatchmakingQueueState_MatchmakingStatus_PopUp: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_MatchmakingUnavailable}}}", False);
			if (State.CurrentMatchmakingStatus == {{{MatchmakingStruct::P}}}C_Matchmaking_Status_Under_Maintenance) {
				{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_ServerMaintenance}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			} else if (State.CurrentMatchmakingStatus == {{{MatchmakingStruct::P}}}C_Matchmaking_Status_Too_Many_Matches) {
				{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_MatchDelay}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			}
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_SuperRoyal_PopUp: {
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_SuperRoyalPopUp}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			switch (_State.SuperRoyalState.Status) {
				case {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Pending: {
					declare Timer = State.SuperRoyalState.NextSuperRoyalTime - Now;
					if (Timer > 0) {
						declare TimerInSec = Timer / 1000;
						declare Text TimerText = TimeLib::FormatDelta("0", ""^TimerInSec, TimeLib::EDurationFormats::Abbreviated);
						{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, TL::Compose("{{{Text_NextSuperRoyal}}}", TimerText), False);
					} else {
						{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_SuperRoyalQualifStarted}}}", False);
					}
				}
				case {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Qualified: {
					{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_SuperRoyalQualified}}}", False);
					{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_SuperRoyalPopUpQualifSoon}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
				}
				case {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Eliminated: {
					{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_SuperRoyalEliminated}}}", False);
				}
				case {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Over: {
					{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_SuperRoyalOver}}}", False);
				}
				case {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_NotRegistered: {
					{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_SuperRoyalNotRegistered}}}", False);
				}
				default: {
					{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_SuperRoyal404}}}", False);
				}
			}
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_PartyCodeImpossible_PopUp: {
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_PartyCode);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_SuperRoyal_WaitingScreen: {
			DisplaySuperRoyalPreloadScreen(True, _Controls);
			_Controls.Label_SuperRoyalQueue.Visible = False;
			SuperRoyalLoadingSpinnerVisible = True;
		}
		case C_Display_MatchmakingQueueState_OldGameVersion_PopUp: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_MatchmakingUnavailable}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_OldGameVersion}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_ForcedToLeaveSquadDueToCrossplaySetting: {
			{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_CrossplaySettingsUpdate}}}", False);
			{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_LeaveDueToCrossplaySettings}}}", <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
		case C_Display_MatchmakingQueueState_Inactivity_PopUp: {
			if (State.LastestInactivity.ImmunityDays > 0) {
				{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_Inactive}}}", False);
				{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart(TL::Compose("{{{Text_Inactive}}}", ""^ML::FloorInteger(State.LastestInactivity.ImmunityDays)), <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			} else {
				{{{PopUpMultiChoice::P}}}SetTitle(This, _Controls.PopUpMultiChoice_Ok, "{{{Text_Title_Penalty}}}", False);
				{{{PopUpMultiChoice::P}}}SetDescription(This, _Controls.PopUpMultiChoice_Ok, [{{{PopUpMultiChoice::P}}}CreateDescriptionPart(TL::Compose("{{{Text_PenaltyInactivity}}}", ""^State.LastestInactivity.Penalty), <120., 30.>, 3., "{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}", "$i", <1., 1., 1.>, False)], False);
			}
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _Controls.PopUpMultiChoice_Ok);
			{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Ok);
			State.QueueEnteringTime = 0;
			State.RoyalQueueEnteringTime = 0;
			State.AcceptMatchEnteringTime = 0;
			State.NextHeartbeatTime = 0;
		}
	}
	Tools::FitLabelValue(_Controls.Label_QueueInfo, 2., 1., 0.25);
	Tools::FitLabelValue(_Controls.Label_Error, 2., 1., 0.25);
	if (!PopUpLoadingSpinnerVisible) {
		{{{LoadingSpinner::P}}}StopAnimation(This, _Controls.Frame_PopUpLoadingSpinner);
		_Controls.Frame_PopUpLoadingSpinner.Hide();
	} else if (!{{{LoadingSpinner::P}}}IsLoading(_Controls.Frame_PopUpLoadingSpinner)) { // This condition avoids a reset of the spinner if it was already visible and spinning
		{{{LoadingSpinner::P}}}StartAnimation(This, _Controls.Frame_PopUpLoadingSpinner);
		_Controls.Frame_PopUpLoadingSpinner.Show();
	}
	if (!SuperRoyalLoadingSpinnerVisible) {
		{{{LoadingSpinner::P}}}StopAnimation(This, _Controls.Frame_SuperRoyalLoadingSpinner);
		_Controls.Frame_SuperRoyalLoadingSpinner.Hide();
	} else if (!{{{LoadingSpinner::P}}}IsLoading(_Controls.Frame_SuperRoyalLoadingSpinner)) { // This condition avoids a reset of the spinner if it was already visible and spinning
		{{{LoadingSpinner::P}}}StartAnimation(This, _Controls.Frame_SuperRoyalLoadingSpinner);
		_Controls.Frame_SuperRoyalLoadingSpinner.Show();
	}
	if (Button_VisibleButton != Null) {
		{{{Navigation::P}}}ChangeControlTarget(This, _Controls.Button_Back, "right", Button_VisibleButton.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, _Controls.Button_SuperRoyal, "down", Button_VisibleButton.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, Button_VisibleButton, "up", _Controls.Button_SuperRoyal.ControlId);
	}
	{{{Navigation::P}}}Lock(_Controls.Button_Ready, !_Controls.Button_Ready.Visible);
	{{{Navigation::P}}}Lock(_Controls.Button_Cancel, !_Controls.Button_Cancel.Visible);
	{{{Navigation::P}}}Lock(_Controls.Button_Join, !_Controls.Button_Join.Visible);
	if (State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Royal) {{{Navigation::P}}}Lock(_Controls.Button_SuperRoyal, _Controls.Button_Cancel.Visible);

	declare FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
	if ({{{Navigation::P}}}GroupIsEnabled(This, "{{{C_NavGroupName}}}") && (FocusedControl == Null || {{{Navigation::P}}}IsLocked(FocusedControl) || FocusedControl.Id ==_Controls.Button_Back.Id )) {
		FocusAvailableControl(_Controls);
	}

	UpdateControllerInfos(_Controls, False, False, IsJoiningMatch);

	return State;
}

K_State DisplayMatchmakingQueueState(K_State _State, K_Controls _Controls, Integer _TargetDisplayState) {
	return DisplayMatchmakingQueueState(_State, _Controls, _TargetDisplayState, "");
}

K_State Cancel(K_State _State, K_Controls _Controls, Integer _TargetDisplayState) {
	declare State = _State;
	if (
		State.LastestHeartbeat.Status == {{{MatchmakingStruct::P}}}C_Status_Pending ||
		State.LastestHeartbeat.Status == {{{MatchmakingStruct::P}}}C_Status_SkillGapCanceled ||
		State.LastestHeartbeat.Status == {{{MatchmakingStruct::P}}}C_Status_DifferentCodeCanceled ||
		State.LastestHeartbeat.Status == {{{MatchmakingStruct::P}}}C_Status_CrossplayCanceled ||
		State.LastestHeartbeat.Status == {{{MatchmakingStruct::P}}}C_Status_MaintenanceCanceled ||
		State.LastestHeartbeat.Status == {{{MatchmakingStruct::P}}}C_Status_Queued ||
		State.LastestHeartbeat.Status == {{{MatchmakingStruct::P}}}C_Status_MatchFound ||
		State.LastestHeartbeat.Status == {{{MatchmakingStruct::P}}}C_Status_Canceled
	) {
		{{{QueueMgr::P}}}Cancel(State.MatchmakingQueue.Id);
	}
	if (State.SuperRoyalState.InSuperRoyalQueue) State = CancelSuperRoyalQueue(State, _Controls);
	State.NextHeartbeatTime = 0;
	State.LastestHeartbeat = {{{MatchmakingStruct::P}}}K_Heartbeat {};
	State.LastestPenalty = {{{MatchmakingStruct::P}}}K_Penalty {};
	if (_TargetDisplayState != C_Display_MatchmakingQueueState_None) {
		State = DisplayMatchmakingQueueState(State, _Controls, _TargetDisplayState);
	}
	return State;
}

K_State QuitPage(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;
	// Check if the player is in the queue
	if (IsInQueue(State.MatchmakingQueueState_Display) && State.MatchmakingQueueState_Display != C_Display_MatchmakingQueueState_MatchReady_DisplayJoinButton) {
		if (State.Squad.MembersIds.count > 0) {
			State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_InQueueSquad_PopUp);
		} else {
			State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_InQueueSolo_PopUp);
		}
	} else if (State.Squad.InSquad) { // or just in a squad
		if (State.Squad.MembersIds.count > 0) {
			State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_InSquad_PopUp);
		} else { // if alone in the squad, leave automatically the squad
			{{{SocialManager::P}}}LeaveSquad(State.Squad.Id);
			State.Squad.WantToLeave = True;
		}
	} else { // otherwise leave the page
		State = Cancel(State, _Controls, C_Display_MatchmakingQueueState_Available);
		{{{Router::P}}}PushParent(This);
	}
	return State;
}

Void OpenPartyCodeMenu() {
	{{{PartyCode::P}}}Show();
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", False);
}

K_State CheckPlayPrivilege(K_State _State, Text _Target) {
	declare K_State State = _State;

	State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_DestroyAndCreate(
		State.PlayPrivilegeCheck.PrivilegeCheck,
		PrivilegeMgr,
		MainUser::GetMainUserId(),
		CPrivilegeMgr::EPrivilege::PlayMultiplayerSession
	);
	State.PlayPrivilegeCheck.Target = _Target;

	return State;
}

K_State PlayMatchmaking(K_State _State, K_Controls _Controls, Text _Target) {
	declare K_State State = _State;

	switch (_Target) {
		case "button-ready": {
			if (State.CurrentMatchmakingStatus == {{{MatchmakingStruct::P}}}C_Matchmaking_Status_Enabled) {
				State.NextHeartbeatTime = Now;
				State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_Loading);
			} else {
				if (
					State.CurrentMatchmakingStatus == {{{MatchmakingStruct::P}}}C_Matchmaking_Status_Under_Maintenance ||
					State.CurrentMatchmakingStatus == {{{MatchmakingStruct::P}}}C_Matchmaking_Status_Too_Many_Matches
				) {
					State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_MatchmakingStatus_PopUp);
				}
				State.NextStatusCheckTime = Now;
			}
		}
		case "button-join": {
			State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_MatchReady_TryToJoin);
		}
		case "button-super-royal": {
			if (State.CurrentPartyCode == "") {
				if (
					State.SuperRoyalState.Status == {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Pending &&
					State.SuperRoyalState.NextSuperRoyalTime <= (Now + C_DelayToEnterSuperRoyal) &&
					State.SuperRoyalState.NextSuperRoyalTime >= Now
				) {
					if (
						State.SecondaryQueue.Id != {{{MatchmakingStruct::P}}}C_MatchmakingQueue_None.Id &&
						State.CurrentMatchmakingStatus == {{{MatchmakingStruct::P}}}C_Matchmaking_Status_Enabled
					) {
						State.SuperRoyalState.InSuperRoyalQueue = True;
						_Controls.Label_SuperRoyalQueue.Show();
						State.MatchmakingQueue = State.SecondaryQueue;
						State.NextHeartbeatTime = Now;
						State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_Loading);
					} else {
						if (State.CurrentMatchmakingStatus != "") State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_MatchmakingStatus_PopUp);
						State.NextStatusCheckTime = Now;
					}
				} else if (State.NeedToJoinSuperRoyal) {
					State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_MatchReady_TryToJoin);
				} else {
					State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_SuperRoyal_PopUp);
				}
			} else {
				State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_PartyCodeImpossible_PopUp);
			}
		}
	}

	return State;
}

Void MuteMyself(K_Controls _Controls) {
	UserMgr.VoiceChat_Mute_Myself = !UserMgr.VoiceChat_Mute_Myself;
	if (_Controls.Button_LocalPlayer.DataAttributeExists("ismuted")) {
		declare Text IsMuted = "0";
		if (UserMgr.VoiceChat_Mute_Myself) IsMuted = "1";
		_Controls.Button_LocalPlayer.DataAttributeSet("ismuted", IsMuted);
		UpdateControllerInfos(_Controls, True, UserMgr.VoiceChat_Mute_Myself, False);
	}
}

Void Mute(K_Controls _Controls, Text _AccountId, CMlFrame _Button_Player) {
	declare CGameUserVoiceChat VoiceChatUser = UserMgr.VoiceChat_FindUserFromWebServicesUserId(_AccountId);
	if (VoiceChatUser != Null) {
		if (VoiceChatUser.MuteSetting == CGameUserVoiceChat::EMuteSetting::Muted) {
			VoiceChatUser.MuteSetting = CGameUserVoiceChat::EMuteSetting::NotMuted;
		} else {
			VoiceChatUser.MuteSetting = CGameUserVoiceChat::EMuteSetting::Muted;
		}
		if (_Button_Player.DataAttributeExists("ismuted")) {
			declare Text IsMuted = "0";
			if (VoiceChatUser.IsMuted) IsMuted = "1";
			_Button_Player.DataAttributeSet("ismuted", IsMuted);
			UpdateControllerInfos(_Controls, True, VoiceChatUser.IsMuted, False);
		}
	}
}

K_State Select(K_State _State, K_Controls _Controls, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare State = _State;

	switch (_Control.ControlId) {
		case "button-ready": {
			State = CheckPlayPrivilege(State, _Control.ControlId);
		}
		case "button-cancel": {
			State = Cancel(State, _Controls, C_Display_MatchmakingQueueState_Available);
		}
		case "button-join": {
			State = CheckPlayPrivilege(State, _Control.ControlId);
		}
		case "button-back": {
			State = QuitPage(State, _Controls);
		}
		case "button-debug-queue": {
			if (State.OfficialQueue.Id != {{{MatchmakingStruct::P}}}C_MatchmakingQueueId_Debug) {
				State = Cancel(State, _Controls, C_Display_MatchmakingQueueState_Available);
				State.BanEndDate = 0;

				declare DebugMessage = "";
				if (State.MatchmakingQueue.Id != {{{MatchmakingStruct::P}}}C_MatchmakingQueueId_Debug) {
					State.MatchmakingQueue = {{{MatchmakingStruct::P}}}C_MatchmakingQueue_Debug;
					DebugMessage = "Debug queue ON";
				} else {
					State.MatchmakingQueue = State.OfficialQueue;
					DebugMessage = "Debug queue OFF";
				}
				if (_Control.Parent != Null) {
					declare Label_DebugQueue <=> (_Control.Parent.GetFirstChild("label-debug-queue") as CMlLabel);
					if (Label_DebugQueue != Null) Label_DebugQueue.Value = DebugMessage;
				}

				State.LocalPlayerCurrentScore = C_LocalPlayerMatchmakingScore_Unknown;
				{{{QueueMgr::P}}}GetPlayerStatus(State.MatchmakingQueue.Id);
			}
		}
		case "button-switch-mode": {
			if (State.MatchmakingQueueState_Display != C_Display_MatchmakingQueueState_Available) {
				SetErrorMessage(_Controls.Label_SocialErrorMessage, "{{{Text_SwitchModeNotAvailable}}}");
			} else {
				State.LastSwitchModeTime = Now;
				// Need to lock the squad while switching mode, to avoid accepting squad members from the old mode while switching to the new one /!\ (see trackmania-next/tmnext/-/issues/5820)
				// Example: PlayerA is in a Royal squad and invites PlayerB. PlayerB accepts when PlayerA is switching to the Ranked mode
				// PlayerB needs to join in the Ranked squad, not the Royal, so we lock the squad to let the time to update the squad type
				UserMgr.Squad_SetLocked(MainUser::GetMainUserId(), State.Squad.Id, True);
				{{{LoadingSpinner::P}}}StartAnimWithFade(This, _Controls.LoadingSpinner_SwitchMode);
				{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", False);
				if (State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Royal) {
					{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_MatchmakingMainPage}}}", ["{{{RoutePaths::C_Query_ForceMode}}}" => {{{MatchmakingStruct::P}}}C_Mode_Teams3v3]);
				} else {
					{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_MatchmakingMainPage}}}", ["{{{RoutePaths::C_Query_ForceMode}}}" => {{{MatchmakingStruct::P}}}C_Mode_Royal]);
				}
			}
		}
		case "button-local-player": {
			State = DisplayProfile(State, _Controls, True);
		}
		case "button-player-1": {
			if (State.Squad.MembersIds.count > 0) {
				State = DisplayProfile(State, _Controls, State.Squad.MembersIds[0], True, True);
			}
		}
		case "button-player-2": {
			if (State.Squad.MembersIds.count > 1) {
				State = DisplayProfile(State, _Controls, State.Squad.MembersIds[1], True, True);
			}
		}
		case "button-ubi-connect-friends": {
			if (State.MatchmakingQueueState_Display != C_Display_MatchmakingQueueState_Available) SetErrorMessage(_Controls.Label_SocialErrorMessage, "{{{Text_SocialNotAvailable}}}");
			else {{{SocialManager::P}}}Open({{{SocialManager::P}}}C_Open_UbiConnectFriendsList);
		}
		case "button-first-party-invite": {
			if (State.MatchmakingQueueState_Display != C_Display_MatchmakingQueueState_Available) SetErrorMessage(_Controls.Label_SocialErrorMessage, "{{{Text_SocialNotAvailable}}}");
			else {{{SocialManager::P}}}Open({{{SocialManager::P}}}C_Open_FirstPartyFriendsList);
		}
		case "button-ubi-connect-invites": {
			if (State.MatchmakingQueueState_Display != C_Display_MatchmakingQueueState_Available) SetErrorMessage(_Controls.Label_SocialErrorMessage, "{{{Text_SocialNotAvailable}}}");
			else {{{SocialManager::P}}}Open({{{SocialManager::P}}}C_Open_UbiConnectInvitesList);
		}
		case "button-mute-player": {
			MuteMyself(_Controls);
		}
		case "button-mute-friend-1": {
			if (State.Squad.MembersIds.count >= 1) Mute(_Controls, State.Squad.MembersIds[0], _Controls.Button_SquadPlayer1);
		}
		case "button-mute-friend-2": {
			if (State.Squad.MembersIds.count >= 2) Mute(_Controls, State.Squad.MembersIds[1], _Controls.Button_SquadPlayer2);
		}
		case "button-party-code": {
			if (State.MatchmakingQueueState_Display != C_Display_MatchmakingQueueState_Available) SetErrorMessage(_Controls.Label_SocialErrorMessage, "{{{Text_PartyCodeNotAvailable}}}");
			else OpenPartyCodeMenu();
		}
		case "button-super-royal": {
			State = CheckPlayPrivilege(State, _Control.ControlId);
		}
		case "button-leaderboard": {
			UpdateRankedLeaderboardDisplayState(_Controls, True);
		}
		default: {
			if (_Control.HasClass("{{{C_Class_Score}}}")) {
				declare Text DailyTrackerTA_PlayerAccountId for _Control;
				State = DisplayProfile(State, _Controls, DailyTrackerTA_PlayerAccountId, True, True);
			}
		}
	}

	return State;
}

Void SetSwitchModeButtonVisibility(K_State _State, K_Controls _Controls) {
	_Controls.Button_SwitchMode.Visible = _State.Squad.LeaderId == LocalUser.WebServicesUserId && Now > _State.LastSwitchModeTime + C_SwitchModeCooldown;
	if (_Controls.Button_SwitchMode.Visible) {
		_Controls.Label_SocialErrorMessage.RelativePosition_V3.X = 47.;
	} else {
		_Controls.Label_SocialErrorMessage.RelativePosition_V3.X = 15.;
	}
	{{{Navigation::P}}}Lock(_Controls.Button_SwitchMode, !_Controls.Button_SwitchMode.Visible);
}

Void UpdateModeDisplay(K_State _State, K_Controls _Controls) {
	declare Boolean IsRoyalMode = (_State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Royal);
	_Controls.Frame_RoyalVictory.Visible = IsRoyalMode;
	_Controls.Button_PartyCode.Visible = IsRoyalMode;
	_Controls.Button_SuperRoyal.Visible = IsRoyalMode;
	{{{Navigation::P}}}Lock(_Controls.Button_PartyCode, !_Controls.Button_PartyCode.Visible);
	{{{Navigation::P}}}Lock(_Controls.Button_SuperRoyal, !_Controls.Button_SuperRoyal.Visible);
	if (IsRoyalMode) {
		//L16N [Matchmaking] Button to move the squad to the Ranked mode
		{{{ExpendableButton::P}}}SetText(This, _Controls.Button_SwitchMode, _("Go to Ranked"));
		_Controls.Frame_QueueInfo.RelativePosition_V3 = {{{QueueInfo_Royal_Pos}}};
		_Controls.Label_MatchmakingStatus.RelativePosition_V3.Y = {{{MatchmakingStatus_Royal_PosY}}};
	} else {
		//L16N [Matchmaking] Button to move the squad to the Royal mode
		{{{ExpendableButton::P}}}SetText(This, _Controls.Button_SwitchMode, _("Go to Royal"));
		_Controls.Frame_QueueInfo.RelativePosition_V3 = {{{QueueInfo_Ranked_Pos}}};
		_Controls.Label_MatchmakingStatus.RelativePosition_V3.Y = {{{MatchmakingStatus_Ranked_PosY}}};
	}
	SetSwitchModeButtonVisibility(_State, _Controls);
}

Text GetMode(K_State _State) {
	if (_State.ForcedMode != "") return _State.ForcedMode;
	return _State.SelectedMode;
}

K_State SetMode(K_State _State, K_Controls _Controls, Text _ForcedMode, Text _SelectedMode) {
	declare K_State State = _State;

	declare Text PreviousMode = GetMode(State);
	State.ForcedMode = _ForcedMode;
	State.SelectedMode = _SelectedMode;
	declare Text NewMode = GetMode(State);

	if (NewMode != PreviousMode) {
		State = Cancel(State, _Controls, C_Display_MatchmakingQueueState_Available);
		State.Mode = {{{MatchmakingStruct::P}}}GetMode(NewMode);
		assert(State.Mode.Name != "" && State.Mode.QueueName != "", "The mode '"^NewMode^"' must have a `Name` and `QueueName`");
		State.MatchmakingQueue = {{{MatchmakingStruct::P}}}C_MatchmakingQueue_None;
		State.OfficialQueue = {{{MatchmakingStruct::P}}}C_MatchmakingQueue_None;
		State.SecondaryQueue = {{{MatchmakingStruct::P}}}C_MatchmakingQueue_None;
		State.DivisionsUpdated = False;
		UpdateModeDisplay(State, _Controls);
		State = UpdateBackground(State, _Controls);
		State = PlayMusic(State, True);

		declare CMlLabel Label_DebugQueue <=> (Page.GetFirstChild("label-debug-queue") as CMlLabel);
		if (Label_DebugQueue != Null) Label_DebugQueue.Value = "";
		_Controls.Label_SuperRoyalTimer.Hide();
	}

	return State;
}

K_State RemoveSquadFriend(K_State _State, K_Controls _Controls, Text _OldMemberId, Text _OldMemberName) {
	declare K_State State = _State;

	State.Squad.Members.removekey(_OldMemberId);
	State.Squad.MembersIds.remove(_OldMemberId);
	State = UpdateSquadFriendsDisplay(State, _Controls);

	SetErrorMessage(_Controls.Label_SocialErrorMessage, TL::Compose("{{{Text_SquadMemberRemoved}}}", _OldMemberName));
	{{{SocialManager::P}}}SetVoiceChatFromSquadMembers(State.Squad.MembersIds);

	return State;
}

K_State AddSquadFriends(K_State _State, K_Controls _Controls, {{{SquaddingStruct::P}}}K_SquadMember[] _Members) {
	declare K_State State = _State;

	foreach (Member in _Members) {
		if (Member.AccountId != LocalUser.WebServicesUserId) {
			State.Squad.Members[Member.AccountId] = K_SquadMember {
				DisplayName = Member.DisplayName,
				IsFirstPartyDisplayName = Member.IsFirstPartyDisplayName,
				ZoneUrl = Member.ZoneUrl,
				DivisionId = "",
				SkinName = Member.SkinName,
				SkinUrl = Member.SkinUrl,
				SkinPrestigeOptions = Member.SkinPrestigeOptions,
				Progression = 0
			};
			State.Squad.MembersIds.add(Member.AccountId);

			// Check Ubisoft Family Settings privileges
			if (Member.IsCommunicationRestricted) {
				SetErrorMessage(_Controls.Label_SocialErrorMessage, CommunicationRestriction::GetTeammateChatRestrictedMessage(Member.DisplayName));
			}
		}
	}

	{{{SocialManager::P}}}SetVoiceChatFromSquadMembers(State.Squad.MembersIds);
	{{{QueueMgr::P}}}GetSquadMembersDivisions(State.MatchmakingQueue.Id, State.Squad.MembersIds);
	return State;
}

K_State ResetPartyCode(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;
	State.CurrentPartyCode = "";
	{{{ExpendableButton::P}}}SetText(This, _Controls.Button_PartyCode, "{{{Text_PartyCode}}}");
	{{{PartyCode::P}}}ResetPartyCode();
	return State;
}

K_State StoreMatchmakingInfos(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;

	declare {{{UserStore::P}}}K_MatchmakingInfo MatchmakingInfo = {{{UserStore::P}}}GetMatchmakingInfos(GetMode(State));
	if (MatchmakingInfo.QueueId == "") {
		{{{UserStore::P}}}Action_LoadMatchmakingInfos(This, LocalUser.WebServicesUserId);
	} else if (State.MatchmakingQueue.Id != {{{MatchmakingStruct::P}}}C_MatchmakingQueueId_Debug) {
		State.OfficialQueue.Id = MatchmakingInfo.QueueId;
		State.MatchmakingQueue.Id = MatchmakingInfo.QueueId;
	}

	if (MatchmakingInfo.Divisions.count > 0) {
		if (!State.DivisionsUpdated) {
			State.DivisionsUpdated = True;
			if (State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Royal) {
				{{{PlayerRoyalVictories::P}}}SetDivisions(This, MatchmakingInfo.Divisions);
				declare {{{UserStore::P}}}K_MatchmakingInfo SuperRoyalInfos = {{{UserStore::P}}}GetMatchmakingInfos({{{MatchmakingStruct::P}}}C_Mode_SuperRoyal);
				State.SecondaryQueue.Id = SuperRoyalInfos.QueueId;
				if (Http::IsInitialized(State.GetSuperRoyalVictories)) {
					Http::Destroy(State.GetSuperRoyalVictories);
				}
				State.GetSuperRoyalVictories = MatchmakingAPI::GetMySuperRoyalStats();
			} else {
				State.GetMatchmakingLeaderboard = Http::DestroyAndCreate(State.GetMatchmakingLeaderboard, MatchmakingAPI::GetMatchmakingLeaderboard(State.OfficialQueue.Id));
				{{{ProgressBar::P}}}SetDivisions(MatchmakingInfo.Divisions);
				{{{PlayerRank::P}}}SetDivisions(MatchmakingInfo.Divisions);
			}
		}
		State.LocalPlayerCurrentDivisionId = MatchmakingInfo.PlayerProgression.CurrentDivision;
		State.LocalPlayerPreviousDivisionId = State.LocalPlayerCurrentDivisionId; //to avoid animation when entering page
		State.LocalPlayerCurrentScore = MatchmakingInfo.PlayerProgression.CurrentProgression;
		State = UpdatePlayerMatchmakingScore(State, _Controls);
	} else {
		State.LocalPlayerCurrentScore = C_LocalPlayerMatchmakingScore_Unknown;
	}

	return State;
}

K_State UpdateSuperRoyalUI(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;
	_Controls.Label_SuperRoyalTimer.Hide();
	_Controls.Label_MatchmakingStatus.Hide();
	switch (State.SuperRoyalState.Status) {
		case {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Pending: {
			declare Timer = State.SuperRoyalState.NextSuperRoyalTime - Now;
			if (State.NeedToJoinSuperRoyal) {
				if ({{{ExpendableButton::P}}}GetLabel(_Controls.Button_SuperRoyal).Value != "{{{Text_JoinSuperRoyal}}}") {
					{{{ExpendableButton::P}}}SetText(This, _Controls.Button_SuperRoyal, "{{{Text_JoinSuperRoyal}}}");
				}
			} else if (
				State.SuperRoyalState.NextSuperRoyalTime >= Now &&
				State.SuperRoyalState.NextSuperRoyalTime <= (Now + C_DelaySuperRoyalPreload) &&
				State.SuperRoyalState.InSuperRoyalQueue
			) {
				if (
					State.MatchmakingQueueState_Display != C_Display_MatchmakingQueueState_SuperRoyal_WaitingScreen &&
					(!State.Squad.InSquad || (State.Squad.Members.count > 0 && State.PreviousMatchmakingQueueState_API == {{{MatchmakingStruct::P}}}C_Status_Queued))
				) {
					State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_SuperRoyal_WaitingScreen);
				}
				_Controls.Label_SuperRoyalCountdown.Visible = (_Controls.Label_QueueInfo.Value == "" && _Controls.Label_Error.Value == "" && Timer >= 0);
				_Controls.Label_SuperRoyalCountdown.Value = TL::TimeToText(Timer);
			} else if (State.SuperRoyalState.NextSuperRoyalTime <= (Now + C_DelayToEnterSuperRoyal)) {
				if ({{{ExpendableButton::P}}}GetLabel(_Controls.Button_SuperRoyal).Value != "{{{Text_PlaySuperRoyal}}}") {
					{{{ExpendableButton::P}}}SetText(This, _Controls.Button_SuperRoyal, "{{{Text_PlaySuperRoyal}}}");
				}
				_Controls.Label_SuperRoyalTimer.Visible = (_Controls.Label_QueueInfo.Value == "" && _Controls.Label_Error.Value == "" && Timer >= 0);
				if (_Controls.Label_SuperRoyalTimer.Visible) {
					_Controls.Label_SuperRoyalTimer.Value = TL::Compose("{{{Text_NextSuperRoyal}}}", TL::TimeToText(Timer));
					Tools::FitLabelValue(_Controls.Label_SuperRoyalTimer, 2., 1., 0.25);
				}
			} else {
				declare TimerInSec = Timer / 1000;
				declare Text TimerText = TimeLib::FormatDelta("0", ""^TimerInSec, TimeLib::EDurationFormats::Abbreviated);
				if ({{{ExpendableButton::P}}}GetLabel(_Controls.Button_SuperRoyal).Value != TL::Compose("{{{Text_SuperRoyalIn}}}", TimerText)) {
					{{{ExpendableButton::P}}}SetText(This, _Controls.Button_SuperRoyal, TL::Compose("{{{Text_SuperRoyalIn}}}", TimerText));
				}
			}
		}
		case {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Qualified: {
			if (State.SuperRoyalState.MatchId == "") {
				if ({{{ExpendableButton::P}}}GetLabel(_Controls.Button_SuperRoyal).Value != "{{{Text_PlaySuperRoyal}}}") {
					{{{ExpendableButton::P}}}SetText(This, _Controls.Button_SuperRoyal, "{{{Text_PlaySuperRoyal}}}");
				}
				_Controls.Label_MatchmakingStatus.Value = "{{{Text_SuperRoyalPopUpQualifSoon}}}";
			} else if (State.NeedToJoinSuperRoyal) {
				if ({{{ExpendableButton::P}}}GetLabel(_Controls.Button_SuperRoyal).Value != "{{{Text_JoinSuperRoyal}}}") {
					{{{ExpendableButton::P}}}SetText(This, _Controls.Button_SuperRoyal, "{{{Text_JoinSuperRoyal}}}");
				}
				_Controls.Label_MatchmakingStatus.Value = "{{{Text_SuperRoyalPopUpQualifReady}}}";
			}
			_Controls.Label_MatchmakingStatus.Show();
		}
		case {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Eliminated: {
			if ({{{ExpendableButton::P}}}GetLabel(_Controls.Button_SuperRoyal).Value != "{{{Text_PlaySuperRoyal}}}") {
				{{{ExpendableButton::P}}}SetText(This, _Controls.Button_SuperRoyal, "{{{Text_PlaySuperRoyal}}}");
			}
			_Controls.Label_MatchmakingStatus.Value = "{{{Text_SuperRoyalEliminatedMessage}}}";
			_Controls.Label_MatchmakingStatus.Show();
		}
		case {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Over: {
			if ({{{ExpendableButton::P}}}GetLabel(_Controls.Button_SuperRoyal).Value != "{{{Text_PlaySuperRoyal}}}") {
				{{{ExpendableButton::P}}}SetText(This, _Controls.Button_SuperRoyal, "{{{Text_PlaySuperRoyal}}}");
			}
		}
	}
	return State;
}

Void InitMuteButtons(K_Controls _Controls) {
	_Controls.Button_MutePlayer.Visible = False;
	_Controls.LoadingSpinner_Mute1.Visible = False;
	_Controls.LoadingSpinner_Mute2.Visible = False;
	declare CMlFrame[] Buttons = [_Controls.Button_MutePlayer, _Controls.Button_MuteFriend1, _Controls.Button_MuteFriend2];
	foreach (Button in Buttons) {
		if (Tools::IsUsingMouse(Input)) {{{Button::P}}}SetOpacityUnfocus(This, Button, 0.6);
		else {{{Button::P}}}SetOpacityUnfocus(This, Button, 1.);
	}
}

Void UpdateVoiceChatDisplay(K_State _State, K_Controls _Controls, Boolean _SetMarkerPos) {
	UpdatePlayerSpeakerDisplay(LocalUser.WebServicesUserId, _Controls.Button_MutePlayer, _Controls.LoadingSpinner_MutePlayer);
	if (_SetMarkerPos) SetMarkerSizeAndPos(_Controls.Frame_PlayerMarker, _Controls.Button_MutePlayer, _Controls.LoadingSpinner_MutePlayer);

	declare CMlFrame[] Frames_Marker = [_Controls.Frame_FriendMarker1, _Controls.Frame_FriendMarker2];
	declare CMlFrame[] Buttons_Mute = [_Controls.Button_MuteFriend1, _Controls.Button_MuteFriend2];
	declare CMlFrame[] LoadingSpinner_Mute = [_Controls.LoadingSpinner_Mute1, _Controls.LoadingSpinner_Mute2];
	foreach (MemberIndex => MemberId in _State.Squad.MembersIds) {
		UpdatePlayerSpeakerDisplay(MemberId, Buttons_Mute[MemberIndex], LoadingSpinner_Mute[MemberIndex]);
		if (_SetMarkerPos) SetMarkerSizeAndPos(Frames_Marker[MemberIndex], Buttons_Mute[MemberIndex], LoadingSpinner_Mute[MemberIndex]);
	}
}

K_State HandlePopUpOKEvents(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;

	switch (State.MatchmakingQueueState_Display) {
		case C_Display_MatchmakingQueueState_Banned_PopUp: State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_Banned_MainPage);
		case C_Display_MatchmakingQueueState_Queued_CanceledByPickUp: State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_Queued);
		case C_Display_MatchmakingQueueState_SearchCanceled_BySquadMate: State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_Pending);
		case C_Display_MatchmakingQueueState_Penalty_PopUp: {
			if (State.BanEndDate > 0 && TimeLib::Compare(""^State.BanEndDate, TimeLib::GetCurrent()) > 0) {
				State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_Banned_PopUp);
			} else {
				State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_Available);
			}
		}
		case C_Display_MatchmakingQueueState_ForcedToLeaveSquadDueToCrossplaySetting: {
			State.WasForcedToLeaveDueToCrossPlaySetting = False;
			State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_Available);
		}
		default: State = DisplayMatchmakingQueueState(State, _Controls, C_Display_MatchmakingQueueState_Available);
	}

	return State;
}

***MainInit***
***
declare K_State State;
declare K_Controls Controls;

declare Integer CampaignDisplay_SelectedRegion for LocalUser = {{{ZoneSelection::P}}}C_ZoneLevel_Null;

declare CMlFrame Frame_Global;
declare CMlFrame Frame_DebugQueue;
declare Task::K_Task Task_GetClubTagList;
declare Integer DirectLinkMatchmakingPageQueueCancel;
declare Boolean IsMouse;
***

***MainStart***
***
State = K_State {
	MatchmakingQueue = {{{MatchmakingStruct::P}}}C_MatchmakingQueue_None,
	NextHeartbeatTime = 0,
	LocalPlayerCurrentScore = C_LocalPlayerMatchmakingScore_Unknown,
	OfficialQueue = {{{MatchmakingStruct::P}}}C_MatchmakingQueue_None,
	SecondaryQueue = {{{MatchmakingStruct::P}}}C_MatchmakingQueue_None,
	Scene = K_Scene {
		SceneId = NullId,
		Vehicles = []
	},
	NeedPlayerRankUpdate = False,
	NeedSceneUpdate = False,
	DivisionsUpdated = False,
	Squad = K_Squad {
		InSquad = False,
		WantToLeave = False,
		Members = [],
		MembersIds = []
	},
	CurrentPartyCode = "",
	HasSeenInactivityNotif = False,
	MenuIsOpen = False,
	SuperRoyalState = K_SuperRoyalState {
		InSuperRoyalQueue = False,
		NextSuperRoyalTime = -1,
		Status = "",
		MatchId = ""
	},
	NeedSuperRoyalUpdate = False,
	IsRetrievingSuperRoyalJoinLink = False,
	NeedToJoinSuperRoyal = False,
	HasCheckSuperRoyalQualif = False,
	LastSwitchModeTime = -1
};

Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_DebugQueue <=> (Frame_Global.GetFirstChild("frame-debug-queue") as CMlFrame);

Controls = K_Controls {
	Button_Ready = (Frame_Global.GetFirstChild("button-ready") as CMlFrame),
	Button_Cancel = (Frame_Global.GetFirstChild("button-cancel") as CMlFrame),
	Button_Join = (Frame_Global.GetFirstChild("button-join") as CMlFrame),
	Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
	Button_LocalPlayer = (Frame_Global.GetFirstChild("button-local-player") as CMlFrame),
	Frame_SuperRoyalLoadingSpinner = (Frame_Global.GetFirstChild("frame-countdown-loading-spinner") as CMlFrame),
	Frame_PopUpLoadingSpinner = (Frame_Global.GetFirstChild("frame-pop-up-loading-spinner") as CMlFrame),
	PopUpMultiChoice_Ok = (Frame_Global.GetFirstChild("popupmultichoice-ok") as CMlFrame),
	PopUpMultiChoice_Leave = (Frame_Global.GetFirstChild("popupmultichoice-leave") as CMlFrame),
	PopUpMultiChoice_PartyCode = (Frame_Global.GetFirstChild("popupmultichoice-party-code") as CMlFrame),
	Frame_ProgressBar = (Frame_Global.GetFirstChild("frame-progress-bar") as CMlFrame),
	Label_QueueInfo = (Frame_Global.GetFirstChild("label-queue-info") as CMlLabel),
	Label_SuperRoyalQueue = (Frame_Global.GetFirstChild("label-super-royal-queue") as CMlLabel),
	Label_SuperRoyalTimer = (Frame_Global.GetFirstChild("label-super-royal-timer") as CMlLabel),
	Label_Error = (Frame_Global.GetFirstChild("label-error") as CMlLabel),
	Label_PopUpTimer = (Frame_Global.GetFirstChild("label-pop-up-timer") as CMlLabel),
	Frame_PlayerMarker = (Frame_Global.GetFirstChild("frame-player-marker") as CMlFrame),
	Frame_FriendMarker1 = (Frame_Global.GetFirstChild("frame-friend-marker-1") as CMlFrame),
	Frame_FriendMarker2 = (Frame_Global.GetFirstChild("frame-friend-marker-2") as CMlFrame),
	Frame_SocialButtons = (Frame_Global.GetFirstChild("frame-social-buttons") as CMlFrame),
	Frame_SquadPlayer1 = (Frame_Global.GetFirstChild("frame-player-1") as CMlFrame),
	Frame_SquadPlayer2 = (Frame_Global.GetFirstChild("frame-player-2") as CMlFrame),
	LoadingSpinner_SwitchMode = (Frame_Global.GetFirstChild("loadingspinner-switch-mode") as CMlFrame),
	Button_SwitchMode = (Frame_Global.GetFirstChild("button-switch-mode") as CMlFrame),
	Frame_InviteFrom = (Frame_Global.GetFirstChild("frame-invite-from") as CMlFrame),
	Button_UbiConnectFriends = (Frame_Global.GetFirstChild("button-ubi-connect-friends") as CMlFrame),
	Button_FirstPartyInvite = (Frame_Global.GetFirstChild("button-first-party-invite") as CMlFrame),
	Button_UbiConnectInvites = (Frame_Global.GetFirstChild("button-ubi-connect-invites") as CMlFrame),
	Quad_IconSquadPlayer2 = (Frame_Global.GetFirstChild("quad-squad-member-icon-2") as CMlQuad),
	Quad_IconSquadPlayer3 = (Frame_Global.GetFirstChild("quad-squad-member-icon-3") as CMlQuad),
	Button_SquadPlayer1 = (Frame_Global.GetFirstChild("button-player-1") as CMlFrame),
	Button_SquadPlayer2 = (Frame_Global.GetFirstChild("button-player-2") as CMlFrame),
	Label_SocialErrorMessage = (Frame_Global.GetFirstChild("label-social-error") as CMlLabel),
	Button_PartyCode = (Frame_Global.GetFirstChild("button-party-code") as CMlFrame),
	Quad_RankNeon = (Frame_Global.GetFirstChild("quad-rank-neon") as CMlQuad),
	Quad_RankNeonAnim = (Frame_Global.GetFirstChild("quad-rank-neon-anim") as CMlQuad),
	Frame_RoyalVictory = (Frame_Global.GetFirstChild("frame-royal-victory") as CMlFrame),
	Label_MatchmakingStatus = (Frame_Global.GetFirstChild("label-matchmaking-status") as CMlLabel),
	Frame_Profile = (Frame_Global.GetFirstChild("frame-profile") as CMlFrame),
	Camera_Vehicles = (Frame_Global.GetFirstChild("camera-vehicles") as CMlCamera),
	Frame_QueueInfo = (Frame_Global.GetFirstChild("frame-queue-info") as CMlFrame),
	Button_SuperRoyal = (Frame_Global.GetFirstChild("button-super-royal") as CMlFrame),
	Frame_LeftUpper = (Frame_Global.GetFirstChild("frame-left-upper") as CMlFrame),
	Frame_LocalPlayer = (Frame_Global.GetFirstChild("frame-local-player") as CMlFrame),
	Frame_Preload_SuperRoyal =  (Frame_Global.GetFirstChild("frame-preload-super-royal") as CMlFrame),
	Label_SuperRoyalCountdown = (Frame_Global.GetFirstChild("label-super-royal-countdown") as CMlLabel),
	Label_SuperRoyalRules = (Frame_Global.GetFirstChild("label-super-royal-rules") as CMlLabel),
	Button_MutePlayer = (Frame_Global.GetFirstChild("button-mute-player") as CMlFrame),
	Button_MuteFriend1 = (Frame_Global.GetFirstChild("button-mute-friend-1") as CMlFrame),
	Button_MuteFriend2 = (Frame_Global.GetFirstChild("button-mute-friend-2") as CMlFrame),
	LoadingSpinner_MutePlayer = (Frame_Global.GetFirstChild("loading-spinner-speaker-player") as CMlFrame),
	LoadingSpinner_Mute1 = (Frame_Global.GetFirstChild("loading-spinner-speaker-1") as CMlFrame),
	LoadingSpinner_Mute2 = (Frame_Global.GetFirstChild("loading-spinner-speaker-2") as CMlFrame),
	Button_Leaderboard = (Frame_Global.GetFirstChild("button-leaderboard") as CMlFrame),
	Frame_ClipLeaderboard = (Frame_Global.GetFirstChild("frame-clip-leaderboard") as CMlFrame),
	Frame_Leaderboard = (Frame_Global.GetFirstChild("frame-leaderboard") as CMlFrame),
	Frame_ScoreOwner = (Frame_Global.GetFirstChild("frame-score-owner") as CMlFrame),
	Frame_Scores = (Frame_Global.GetFirstChild("frame-scores") as CMlFrame),
	LoadingSpinner_Leaderboard = (Frame_Global.GetFirstChild("loading-spinner-leaderboard") as CMlFrame),
	LoadingSpinner_OwnerRank = (Frame_Global.GetFirstChild("loading-spinner-rank") as CMlFrame),
	Button_DebugQueue = (Frame_DebugQueue.GetFirstChild("button-debug-queue") as CMlFrame)
};
Controls.Frame_PlayerRank = (Controls.Frame_LocalPlayer.GetFirstChild("frame-player-rank") as CMlFrame);
Controls.Frame_Crown = (Controls.Frame_LocalPlayer.GetFirstChild("frame-player-crown") as CMlFrame);
Controls.Frame_PlayerName = (Controls.Frame_LocalPlayer.GetFirstChild("squad-playername") as CMlFrame);
Controls.Label_PlayerRank = (Controls.Frame_LocalPlayer.GetFirstChild("label-player-rank") as CMlLabel);
{{{PlayerName::P}}}SetTextColor(This, Controls.Frame_PlayerName, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}}, False);
Controls.Label_PlayerRank.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}};

Task_GetClubTagList = Task::GetEmptyTask();
DirectLinkMatchmakingPageQueueCancel = DirectLink::GetMatchmakingPageQueueCancel(LocalUser);
State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Available);
State = SetMode(State, Controls, {{{MatchmakingStruct::P}}}C_Mode_Null, {{{MatchmakingStruct::P}}}C_Mode_Teams3v3);
Tools::FitLabelValue(Controls.Label_SuperRoyalQueue, 2., 1., 0.25);
Tools::FitLabelValue(Controls.Label_SuperRoyalRules, 1.8, 0.6, 0.2);
***

***MainLoop***
***
if (PageIsVisible) {
	if (
		State.Scene.SceneId != NullId &&
		MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)
	) {
		State.NeedSceneUpdate = True;
	}

	// It does not cost much to do it every frame and it fixes the loading time of the background
	MenuSceneMgr.PlaneReflectRefresh();

	/* Voice chat events */
	foreach (Event in UserMgr.VoiceChat_Events) {
		switchtype (Event) {
			case CVoiceChatEvent_SpeakingUsersChanged, CVoiceChatEvent_User_IsMuted: {
				UpdateVoiceChatDisplay(State, Controls, False);
			}
			case CVoiceChatEvent_User_IsConnected: {
				UpdateVoiceChatDisplay(State, Controls, True);
			}
		}
	}

	if (Controls.Label_MatchmakingStatus.Visible) {
		Controls.Label_MatchmakingStatus.Opacity = 0.4 + (0.6 * ML::Abs(ML::Cos(Now * 0.10 * (ML::PI() / 180.))));
	}

	if (State.NeedToJoinSuperRoyal) {
		declare Real Opacity = 0.5 + (0.5 * ML::Abs(ML::Cos(Now * 0.20 * (ML::PI() / 180.))));
		{{{ExpendableButton::P}}}SetBackgroundOpacityUnfocused(This, Controls.Button_SuperRoyal, Opacity);
	}

	if (State.NeedSuperRoyalUpdate) {
		State.NeedSuperRoyalUpdate = False;
		State.IsRetrievingSuperRoyalJoinLink = False;
		State.NeedToJoinSuperRoyal = False;
		{{{ExpendableButton::P}}}SetBackgroundOpacityUnfocused(This, Controls.Button_SuperRoyal, 0.5);
		TitleControl::WaitIsReady(TitleControl);
		// Reset SuperRoyal match id to avoid request an old join link
		State.SuperRoyalState.MatchId = "";
		{{{QueueMgr::P}}}GetCurrentSuperRoyal();
	} else if (State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Royal) {
		// Check SuperRoyal queue
		if (State.SuperRoyalState.Status != {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Pending && State.SuperRoyalState.InSuperRoyalQueue) {
			State = CancelSuperRoyalQueue(State, Controls);
		}
		// Check SuperRoyal state
		if (
			State.SuperRoyalState.Status != {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Pending ||
			State.SuperRoyalState.Status == {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Pending && (State.SuperRoyalState.NextSuperRoyalTime - Now <= 0)
		) {
			if (State.NextSuperRoyalCheckTime > 0 && State.NextSuperRoyalCheckTime <= Now) {
				State.NextSuperRoyalCheckTime = Now + C_SuperRoyalCheck_Frequency;
				{{{QueueMgr::P}}}GetCurrentSuperRoyal();
			}
		}
		// Check player status if qualifications have begun but player is not in the SuperRoyal queue anymore (maybe they have a match in progress)
		if (
			!State.SuperRoyalState.InSuperRoyalQueue &&
			State.SuperRoyalState.Status == {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Pending &&
			(State.SuperRoyalState.NextSuperRoyalTime - Now <= 0)
		) {
			if (!State.HasCheckSuperRoyalQualif) {
				State.HasCheckSuperRoyalQualif = True;
				{{{QueueMgr::P}}}GetPlayerStatus(State.SecondaryQueue.Id);
			}
		}
		// Check qualification match joinlink
		if (State.SuperRoyalState.Status == {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Qualified && State.SuperRoyalState.MatchId != "" && !State.IsRetrievingSuperRoyalJoinLink) {
			State.JoinLink = "";
			{{{QueueMgr::P}}}RequestJoinLink(State.SuperRoyalState.MatchId, 5);
			State.IsRetrievingSuperRoyalJoinLink = True;
		}
		if (State.CurrentMatchmakingStatus == {{{MatchmakingStruct::P}}}C_Matchmaking_Status_Enabled) State = UpdateSuperRoyalUI(State, Controls);
	}

	if (!State.WasForcedToLeaveDueToCrossPlaySetting) {
		if (State.PreviousMatchmakingQueueState_API != State.LastestHeartbeat.Status) {
			switch (State.LastestHeartbeat.Status) {
				case {{{MatchmakingStruct::P}}}C_Status_NotInQueue: {
					if (State.MatchmakingQueueState_Display != C_Display_MatchmakingQueueState_Canceled_ByMe && State.MatchmakingQueueState_Display != C_Display_MatchmakingQueueState_MatchReady_TryToJoin) {
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Available);
					}
				}
				case {{{MatchmakingStruct::P}}}C_Status_Pending: {
					State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Pending);
				}
				case {{{MatchmakingStruct::P}}}C_Status_SkillGapCanceled: {
					State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_SkillGapCanceled);
				}
				case {{{MatchmakingStruct::P}}}C_Status_DifferentCodeCanceled: {
					State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_DifferentCodeCanceled);
				}
				case {{{MatchmakingStruct::P}}}C_Status_CrossplayCanceled: {
					State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_CrossplayCanceled);
				}
				case {{{MatchmakingStruct::P}}}C_Status_MaintenanceCanceled: {
					State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_MaintenanceCanceled);
				}
				case {{{MatchmakingStruct::P}}}C_Status_Queued: {
					if (State.MatchmakingQueueState_Display != C_Display_MatchmakingQueueState_SuperRoyal_WaitingScreen) {
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Queued);
					}
				}
				case {{{MatchmakingStruct::P}}}C_Status_MatchFound: {
					State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_MatchAccepted);
					{{{QueueMgr::P}}}Accept(State.MatchmakingQueue.Id);
				}
				case {{{MatchmakingStruct::P}}}C_Status_MatchReady: {
					// If CLUB auto accept is enabled we were in Queued or Pending state
					// Otherwise we were in MatchAccepted state
					if (
						State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_Queued ||
						State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_Pending ||
						State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_MatchAccepted ||
						State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_SuperRoyal_WaitingScreen
					) {
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_MatchReady_WaitingForJoinLink);
					} else { // The player has a SuperRoyal qualification match in progress
						State.NeedToJoinSuperRoyal = (State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Royal && State.MatchmakingQueue.Id == State.SecondaryQueue.Id);
					}
					State.JoinLink = "";
					log(Now^" : [Matchmaking] MatchLiveId = " ^ State.LastestHeartbeat.MatchLiveId); // [LOG for CLUB] MatchLiveId
					{{{QueueMgr::P}}}RequestJoinLink(State.LastestHeartbeat.MatchLiveId, 5);
					State.NextHeartbeatTime = 0;
				}
				case {{{MatchmakingStruct::P}}}C_Status_Canceled: {
					if (
						State.PreviousMatchmakingQueueState_API == {{{MatchmakingStruct::P}}}C_Status_MatchFound ||
						State.PreviousMatchmakingQueueState_API == {{{MatchmakingStruct::P}}}C_Status_MatchAccepted
					) {
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Queued_CanceledByPickUp);
					} else if (State.PreviousMatchmakingQueueState_API == {{{MatchmakingStruct::P}}}C_Status_Queued) {
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_SearchCanceled_BySquadMate);
					}
				}
				case {{{MatchmakingStruct::P}}}C_Status_Banned: {
					State.BanEndDate = State.LastestHeartbeat.BanEndDate;
					if (State.MatchmakingQueueState_Display != C_Display_MatchmakingQueueState_Penalty_PopUp) {
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Banned_PopUp);
					}
				}
				case {{{MatchmakingStruct::P}}}C_Status_UnderMaintenance: {
					State.CurrentMatchmakingStatus = {{{MatchmakingStruct::P}}}C_Matchmaking_Status_Under_Maintenance;
					Controls.Label_MatchmakingStatus.Value = "{{{Text_ServerMaintenance}}}";
					Controls.Label_MatchmakingStatus.Show();
					State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_MatchmakingStatus_PopUp);
				}
				case {{{MatchmakingStruct::P}}}C_Status_OldGameVersion: {
					State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_OldGameVersion_PopUp);
				}
			}
			State.PreviousMatchmakingQueueState_API = State.LastestHeartbeat.Status;
		}
	}

	if (State.NextHeartbeatTime > 0 && State.NextHeartbeatTime <= Now) {
		State.NextHeartbeatTime = Now + C_HeartbeatFrequency;
		if (State.OfficialQueue.Id == {{{MatchmakingStruct::P}}}C_MatchmakingQueueId_Debug) {{{QueueMgr::P}}}Heartbeat(State.MatchmakingQueue.Id, [], "");
		else {{{QueueMgr::P}}}Heartbeat(State.MatchmakingQueue.Id, State.Squad.MembersIds, State.CurrentPartyCode);
	}

	if (State.NeedPlayerRankUpdate) {
		State.NeedPlayerRankUpdate = False;
		TitleControl::WaitIsReady(TitleControl);
		{{{QueueMgr::P}}}GetPlayerStatus(State.MatchmakingQueue.Id);
		if (Http::IsInitialized(State.GetSuperRoyalVictories)) {
			Http::Destroy(State.GetSuperRoyalVictories);
		}
		State.GetSuperRoyalVictories = MatchmakingAPI::GetMySuperRoyalStats();
		if (State.Squad.InSquad) {{{QueueMgr::P}}}GetSquadMembersDivisions(State.MatchmakingQueue.Id, State.Squad.MembersIds);
	}

	if (State.NeedSceneUpdate) {
		State.NeedSceneUpdate = False;
		State = InitVehiclesScene(State);
		State = UpdateBackground(State, Controls);
		State = UpdateSquadFriendsDisplay(State, Controls);
	}

	if (State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_Queued && State.QueueEnteringTime > 0 && Now - State.QueueEnteringTime > 0) {
		if (State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Royal) {
			declare Timer = State.RoyalQueueEnteringTime - Now;
			if (Timer <= 0) Timer = 0;
			Controls.Label_QueueInfo.Value = TL::Compose("{{{Text_JoinRoyal}}}", ""^TL::TimeToText(Timer));
		} else {
			Controls.Label_QueueInfo.Value = TL::Compose("{{{Text_InQueue}}}", ""^TL::TimeToText(Now - State.QueueEnteringTime));
		}
		Tools::FitLabelValue(Controls.Label_QueueInfo, 2., 1., 0.25);
	}
	if (State.LastestInactivity.InactivityPenaltyEnabled && State.LastestInactivity.ImmunityDays <= 7 && Controls.Label_QueueInfo.Value == "") {
		if (State.LastestInactivity.ImmunityDays > 0) {
				Controls.Label_QueueInfo.Value = TL::Compose("{{{Text_Inactive_ImmunityDays}}}", ""^ML::FloorInteger(State.LastestInactivity.ImmunityDays));
			} else {
				Controls.Label_QueueInfo.Value = TL::Compose("{{{Text_Inactive_Penalty}}}", ""^State.LastestInactivity.Penalty);
			}
	}
	if (State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_Banned_PopUp) {
		if (State.BanEndDate > 0 && TimeLib::Compare(""^State.BanEndDate, TimeLib::GetCurrent()) > 0) {
			Controls.Label_PopUpTimer.Value = TimeLib::FormatDelta(""^State.BanEndDate, TimeLib::GetCurrent(), TimeLib::EDurationFormats::Chrono);
		} else {
			State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_BanIsOver);
		}
	} else if (State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_Banned_MainPage) {
		if (State.BanEndDate > 0 && TimeLib::Compare(""^State.BanEndDate, TimeLib::GetCurrent()) > 0) {
			Controls.Label_QueueInfo.Value = TL::Compose("{{{Text_BanReminder}}}", TimeLib::FormatDelta(""^State.BanEndDate, TimeLib::GetCurrent(), TimeLib::EDurationFormats::Chrono));
			Tools::FitLabelValue(Controls.Label_QueueInfo, 2., 1., 0.25);
		} else {
			State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Available);
		}
	}
	if (State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_Canceled_ByMe && State.StateEnteringTime > 0 && Now > State.StateEnteringTime + C_CanceledPopUpTimeout) {
		State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Available);
	}
	if (State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_Queued_CanceledByPickUp && State.StateEnteringTime > 0 && Now > State.StateEnteringTime + C_CanceledPopUpTimeout) {
		State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Queued);
	}
	if (State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_MatchReady_StartingServer && State.StateEnteringTime > 0 && Now > State.StateEnteringTime + C_ServerStartDelay) {
		State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_MatchReady_TryToJoin);
	}
	if (State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_MatchReady_TryToJoin && State.StateEnteringTime > 0 && Now > State.StateEnteringTime + C_TryToJoinDelay) {
		State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Unavailable);
	}
	if (State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_Unavailable) {
		if (State.StateEnteringTime > 0 && Now > State.StateEnteringTime + C_UnavailableStateTimeOut) {
			State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Available);
			State.NextStatusCheckTime = Now;
		} else if (State.NextStatusCheckTime < 0 || State.NextStatusCheckTime > Now + C_StatusCheck_FrequencyWhenUnavailable) {
			State.NextStatusCheckTime = Now + C_StatusCheck_FrequencyWhenUnavailable;
		}
	}
	if (State.NextStatusCheckTime > 0 && State.NextStatusCheckTime <= Now) {
		State.NextStatusCheckTime = Now + C_StatusCheck_Frequency;
		{{{QueueMgr::P}}}GetPlayerStatus(State.MatchmakingQueue.Id);
		if (Http::IsInitialized(State.GetSuperRoyalVictories)) {
			Http::Destroy(State.GetSuperRoyalVictories);
		}
		State.GetSuperRoyalVictories = MatchmakingAPI::GetMySuperRoyalStats();
	}

	if (State.Squad.LeaderId == LocalUser.WebServicesUserId && !Controls.Button_SwitchMode.Visible && Now > State.LastSwitchModeTime + C_SwitchModeCooldown) {
		SetSwitchModeButtonVisibility(State, Controls);
	}

	foreach (Event in {{{MainBackground::P}}}PendingEvents) {
		if (Event.Type == {{{MainBackground::P}}}C_EventType_UpdateOpacities) {
			if (State.Scene.SceneId != NullId && !MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)) {
				MenuSceneMgr.PlaneReflectRefresh();
				if (
					Event.DayPart == {{{MainBackground::P}}}C_DayPart_SunsetNight ||
					Event.DayPart == {{{MainBackground::P}}}C_DayPart_Night
				) {
					MenuSceneMgr.LightDir0Set(State.Scene.SceneId, <0.75, 0.75, 0.75>, 0.5);
				} else {
					MenuSceneMgr.LightDir0Set(State.Scene.SceneId, <0.75, 0.75, 0.75>, 1.5);
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (
			Event.PopUpMultiChoice != Null &&
			(
				Event.PopUpMultiChoice.Id == Controls.PopUpMultiChoice_Ok.Id ||
				Event.PopUpMultiChoice.Id == Controls.PopUpMultiChoice_Leave.Id ||
				Event.PopUpMultiChoice.Id == Controls.PopUpMultiChoice_PartyCode.Id
			)
			) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !Event.PopUpMultiChoice.Visible);
					if (!Event.PopUpMultiChoice.Visible) {
						switch (Event.PopUpMultiChoice.Id) {
							case Controls.PopUpMultiChoice_Ok.Id: State = HandlePopUpOKEvents(State, Controls);
							case Controls.PopUpMultiChoice_Leave.Id: State = DisplayMatchmakingQueueState(State, Controls, State.Previous_MatchmakingQueueState_Display);
							default: State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Available);
						}
					}
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					switch (Event.PopUpMultiChoice.Id) {
						case Controls.PopUpMultiChoice_Ok.Id: {
							State = HandlePopUpOKEvents(State, Controls);
						}
						case Controls.PopUpMultiChoice_Leave.Id: {
							switch (Event.SelectedIndex) {
								case {{{C_Choice_Stay}}}: {
									State = DisplayMatchmakingQueueState(State, Controls, State.Previous_MatchmakingQueueState_Display);
								}
								case {{{C_Choice_Leave}}}: {
									State = Cancel(State, Controls, C_Display_MatchmakingQueueState_None);
									{{{SocialManager::P}}}LeaveSquad(State.Squad.Id);
									State.Squad.WantToLeave = True;
								}
							}
						}
						case Controls.PopUpMultiChoice_PartyCode.Id: {
							switch (Event.SelectedIndex) {
								case {{{C_Choice_Keep}}}: State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Available);
								case {{{C_Choice_Disable}}}: {
									State.CurrentPartyCode = "";
									{{{ExpendableButton::P}}}SetText(This, Controls.Button_PartyCode, "{{{Text_PartyCode}}}");
									State = Select(State, Controls, Controls.Button_SuperRoyal);
								}
							}
						}
					}
				}
			}
		}
	}

	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Controls, Event.To);
						case CMlScriptEvent::EMenuNavAction::AppMenu: {
							if (!{{{Navigation::P}}}IsLocked(Controls.Button_DebugQueue)) {
								State = Select(State, Controls, Controls.Button_DebugQueue);
							}
						}
						case CMlScriptEvent::EMenuNavAction::Action2: if (!Event.IsActionAutoRepeat) UpdateRankedLeaderboardDisplayState(Controls, False);
						case CMlScriptEvent::EMenuNavAction::Action1: {
							switch (Event.To.Id) {
								case Controls.Button_LocalPlayer.Id: State = Select(State, Controls, Controls.Button_MutePlayer);
								case Controls.Button_SquadPlayer1.Id: State = Select(State, Controls, Controls.Button_MuteFriend1);
								case Controls.Button_SquadPlayer2.Id: State = Select(State, Controls, Controls.Button_MuteFriend2);
							}
						}
						case CMlScriptEvent::EMenuNavAction::Cancel: {
							if (!Event.IsActionAutoRepeat) {
								if ({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}").HasClass("{{{C_Class_Score}}}")) {
									UpdateRankedLeaderboardDisplayState(Controls, False);
								} else {
									State = QuitPage(State, Controls);
								}
							}
						}
						default: {
							if (!Controls.Frame_Preload_SuperRoyal.Visible) { // Stay on Back button focus when in SuperRoyal waiting screen
								Focus(Event.From, Event.To, Controls, State.Squad.Members.count);
							}
						}
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(State, Controls, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To, Controls, State.Squad.Members.count);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName_MouseOnly}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(State, Controls, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver || Event.Mouse == CMlScriptEvent::Type::MouseOut) {
						Focus(Event.From, Event.To, Controls, State.Squad.Members.count);
					}
				}
			}
		}
	}

	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_EnteringRoute: {
				State.LastestInactivity = {{{MatchmakingStruct::P}}}K_Inactivity {};
				State.MenuIsOpen = True;
				TitleControl.GetServerInfo_Abort();
				SetUserInfo(Controls);
				State = SetMode(State, Controls, {{{Router::P}}}GetCurrentRouteQuery(This).get("{{{RoutePaths::C_Query_ForceMode}}}", ""), State.SelectedMode);
				State = StoreMatchmakingInfos(State, Controls);
				Controls.Frame_ClipLeaderboard.Visible = State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Teams3v3;
				switch (State.Mode.Id) {
					case {{{MatchmakingStruct::P}}}C_Mode_Teams3v3: {
						{{{ZoneSelection::P}}}SetCurrentZone(This, CampaignDisplay_SelectedRegion);
						{{{LoadingSpinner::P}}}SetIsLoading(This, Controls.LoadingSpinner_OwnerRank, State.OwnerScoreInRankedLeaderboard.count <= 0);
						{{{LoadingSpinner::P}}}SetIsLoading(This, Controls.LoadingSpinner_Leaderboard, State.TopPlayersInRankedLeaderboard.count <= 0);
						State.GetTopPlayersInRankedLeaderboard = Http::DestroyAndCreate(State.GetTopPlayersInRankedLeaderboard, LeaderboardAPI::GetTopPlayersInRankedLeaderboard());
						State.GetPlayerRankInRankedLeaderboard = Http::DestroyAndCreate(State.GetPlayerRankInRankedLeaderboard, LeaderboardAPI::GetPlayerRankInRankedLeaderboard());
						Tracking::StartActivity(ParentApp.TrackingMgr, System, Tracking::C_ActivityId_Ranked);
					}
					case {{{MatchmakingStruct::P}}}C_Mode_Royal: {
						State.NextSuperRoyalCheckTime = Now;
						State.HasCheckSuperRoyalQualif = False;
					}
				}
				if (State.MatchmakingQueue.Id != "") {{{QueueMgr::P}}}GetPlayerStatus(State.MatchmakingQueue.Id);
				State = DisplayProfile(State, Controls, False, False);

				declare Boolean WasSwitchingMode = {{{LoadingSpinner::P}}}IsLoading(Controls.LoadingSpinner_SwitchMode);
				if (WasSwitchingMode) {
					{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_SwitchMode);
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", True);
					State.NeedPlayerRankUpdate = True; // To update the local player and members ranks after switching mode
				}
				// If we already know the squad leader and we were switching modes, we can directly set the new squad type
				if (WasSwitchingMode && State.Squad.LeaderId == LocalUser.WebServicesUserId) {
					{{{SocialManager::P}}}SetCurrentSquadTypeByLeader(State.Mode.Id, State.Squad.Id);
				} else { // otherwise it's the first time we are entering the page, (so we stock the squad type and the SocialManager will set it when it knows the squad leader)
					{{{SocialManager::P}}}StoreCurrentSquadTypeInSocialManager(State.Mode.Id);
				}

				State = ResetPartyCode(State, Controls);

				Frame_DebugQueue.Visible = Config::HasFeature(Config::C_Feature_MatchmakingDebugQueue);
				{{{Navigation::P}}}Lock(Controls.Button_DebugQueue, !Frame_DebugQueue.Visible);

				// Try to focus the best button by default
				FocusAvailableControl(Controls);

				State = InitVehiclesScene(State);
				State = UpdateBackground(State, Controls);
				State = UpdateSquadFriendsDisplay(State, Controls, (State.Squad.LeaderId == "")); // condition to check if it's the first entrance of the player on the page
				State = PlayMusic(State, True);
				InitMuteButtons(Controls);
				UpdateControllerInfos(Controls, False, False, False);
			}
		}
	}

	/* Zone selection events */
	foreach (Event in {{{ZoneSelection::P}}}GetPendingEvents(This)) {
		if (Event.Type == {{{ZoneSelection::P}}}C_Event_ZoneUpdate) {
			CampaignDisplay_SelectedRegion = Event.Zone;
			UpdateTopScores(State, Controls, State.TopPlayersInRankedLeaderboard.get(Event.Zone, []));
			UpdateOwnerScore(State, Controls, State.OwnerScoreInRankedLeaderboard.get(Event.Zone, CampaignStruct::LibCampaignStruct_K_TopScore {}));

			declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
			if (FocusedControl.HasClass("{{{C_Class_Score}}}") && {{{Navigation::P}}}IsLocked(FocusedControl)) {
				for (Control in reverse Controls.Frame_Scores.Controls) {
					if (!{{{Navigation::P}}}IsLocked(Control)) {
						Focus(FocusedControl, Control, Controls);
						break;
					}
				}

			}
		}
	}

	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{UserStore::P}}}C_Event_MatchmakingInfosUpdated: {
						State = StoreMatchmakingInfos(State, Controls);
					}
				}
			}
		}
	}

	foreach (Event in {{{ProgressBar::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{ProgressBar::P}}}C_Event_PlayNewRankAnim: {
				{{{PlayerRank::P}}}UpdatePlayerRank(Controls.Frame_PlayerRank, Event.NewRank, Event.InitialRank);
			}
		}
	}

	foreach (Event in {{{ServerStatus::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{ServerStatus::P}}}C_EventType_ServerReady: {
				// Always try to join: if there's an error, a dialog box will inform the player
				State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_MatchReady_TryToJoin);
			}
		}
	}

	/* Social events */
	foreach (Event in {{{SocialManager::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{SocialManager::P}}}C_Event_SquadLeft: {
				State = Cancel(State, Controls, C_Display_MatchmakingQueueState_Available);
				State.Squad.InSquad = False;
				if (State.Squad.WantToLeave && !State.Squad.InSquad) {
					State.Squad.WantToLeave = False;
					State = QuitPage(State, Controls);
				}
				State.Squad.Id = "";
				State.Squad.LeaderId = "";
				State.Squad.Members.clear();
				State.Squad.MembersIds.clear();
				State = UpdateSquadFriendsDisplay(State, Controls);
				// Reset voice chat channel when leaving squad
				{{{SocialManager::P}}}ResetVoiceChatFromSquadId(State.Squad.Id);
			}
			case {{{SocialManager::P}}}C_Event_SquadUpdated: {
				if (State.Squad.Id != Event.SquadId) { // New squad
					State.Squad.Id = Event.SquadId;
					State.Squad.LeaderId = Event.SquadLeaderId;
					State.Squad.Members.clear();
					State.Squad.MembersIds.clear();
					State = UpdateSquadFriendsDisplay(State, Controls);
					if (State.Squad.Id != "") State.Squad.InSquad = True;
					if (Event.WasForcedToLeaveDueToCrossPlaySetting) {
						State.WasForcedToLeaveDueToCrossPlaySetting = True;
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_ForcedToLeaveSquadDueToCrossplaySetting);
					}
					// Update voice chat channel with squad id
					{{{SocialManager::P}}}ResetVoiceChatFromSquadId(State.Squad.Id);
					{{{SocialManager::P}}}SetVoiceChatFromSquadMembers(State.Squad.MembersIds);
					// Check Ubisoft Family Settings privileges
					declare CPrivilegeMgr::ECommunicationRestrictionLevel LocalPlayerChatRestrictionLevel = PrivilegeMgr.Communication_GetRestrictionLevel(MainUser::GetMainUserId());
					if (CommunicationRestriction::ChatIsRestricted(LocalPlayerChatRestrictionLevel)) {
						SetErrorMessage(Controls.Label_SocialErrorMessage, CommunicationRestriction::GetOwnChatRestrictedMessage(LocalPlayerChatRestrictionLevel));
					}
				} else {
					// Same squad but leader might have changed
					if (State.Squad.LeaderId != Event.SquadLeaderId) {
						State.Squad.LeaderId = Event.SquadLeaderId;
					}

					// If we rejoin the same squad (via the switch mode feature or a FirstParty invite), voice chat was reset by JoinLink so we need to set the voice chat members again
					if (State.Squad.MembersIds.count != UserMgr.VoiceChat_Users_Remote.count) {
						{{{SocialManager::P}}}ResetVoiceChatFromSquadId(State.Squad.Id);
						{{{SocialManager::P}}}SetVoiceChatFromSquadMembers(State.Squad.MembersIds);
						UpdateVoiceChatDisplay(State, Controls, True);
					}
				}

				SetSwitchModeButtonVisibility(State, Controls);

				// Check if we need to lock the squad when receiving the information on the squad leader (player might have joined the queue before having this information)
				if (IsAllSquadMembersInQueue(State.MatchmakingQueueState_Display) && State.Squad.LeaderId == LocalUser.WebServicesUserId) {
					UserMgr.Squad_SetLocked(MainUser::GetMainUserId(), State.Squad.Id, True);
				}
			}
			case {{{SocialManager::P}}}C_Event_MemberAdded: {
				if (State.Squad.Id == Event.SquadId) { // to avoid squad member pop in the menu when returning from a server with friends (see trackmania-next/tmnext/-/issues/5299)
					State = Cancel(State, Controls, C_Display_MatchmakingQueueState_Available);
					if (!State.Squad.Members.existskey(Event.Friend.AccountId)) {
						declare {{{SquaddingStruct::P}}}K_SquadMember NewMember = {{{SquaddingStruct::P}}}K_SquadMember {
							AccountId = Event.Friend.AccountId,
							DisplayName = Event.Friend.DisplayName,
							IsFirstPartyDisplayName = Event.Friend.IsFirstPartyDisplayName,
							IsCommunicationRestricted = Event.Friend.IsCommunicationRestricted,
							ZoneUrl = Event.Friend.ZoneUrl,
							SkinName = Event.Friend.SkinName,
							SkinUrl = Event.Friend.SkinUrl,
							SkinPrestigeOptions = Event.Friend.SkinPrestigeOptions
						};

						State = AddSquadFriends(State, Controls, [NewMember]);
						Task_GetClubTagList = Task::DestroyAndCreate(Task_GetClubTagList, UserMgr, UserMgr.Tag_GetClubTagList(MainUser::GetMainUserId(), State.Squad.MembersIds));
					}
				}
			}
			case {{{SocialManager::P}}}C_Event_MemberRemoved: {
				State = Cancel(State, Controls, C_Display_MatchmakingQueueState_Available);
				State = RemoveSquadFriend(State, Controls, Event.Friend.AccountId, Event.Friend.DisplayName);
			}
			case {{{SocialManager::P}}}C_Event_UbiConnectError: {
				SetErrorMessage(Controls.Label_SocialErrorMessage, Event.ErrorMessage);
			}
		}
	}

	foreach (Event in {{{PartyCode::P}}}PendingEvents) {
		switch(Event.Type) {
			case {{{PartyCode::P}}}C_Event_NewPartyCode: {
				State.CurrentPartyCode = Event.PartyCode;
				if (State.CurrentPartyCode != "") {
					{{{ExpendableButton::P}}}SetText(This, Controls.Button_PartyCode, "{{{Text_PartyCodeActivated}}}");
				} else {
					{{{ExpendableButton::P}}}SetText(This, Controls.Button_PartyCode, "{{{Text_PartyCode}}}");
				}
			}
			case {{{PartyCode::P}}}C_Event_LeavePopUp: {
				{{{PartyCode::P}}}Hide();
				{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", True);
			}
		}
	}

	foreach (Event in {{{ProfilePlayerInfo::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{ProfilePlayerInfo::P}}}C_EventType_Close: {
				State = DisplayProfile(State, Controls, False);
			}
		}
	}

	foreach (Event in {{{QueueMgr::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{QueueMgr::P}}}C_Type_Heartbeat: {
				if (Event.IsSuccess) {
					if (State.MatchmakingQueue.Id == Event.ForQueueId) {
						State.LastestHeartbeat = Event.Heartbeat;
						if (State.LocalPlayerCurrentDivisionId == "") {
							{{{QueueMgr::P}}}GetPlayerStatus(State.MatchmakingQueue.Id);
						}
					}
				} else {
					// @TOREMOVE Temporary fix for trackmania-next/tmnext/-/issues/5486
					if (Event.Error.ErrorCode == 401) {
						HttpAuthorizationHeader::RefreshTokens();
						Log::SendCustomLog("[Matchmaking Page] REFRESH THE TOKENS");
					} else {
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Available, TL::Compose(_("Error while entering the matchmaking (%1). Please try again."), ""^Event.Error.ErrorCode));
					}
				}
			}
			case {{{QueueMgr::P}}}C_Type_PlayerStatus: {
				if (Event.IsSuccess) {
					if (State.MatchmakingQueue.Id == Event.ForQueueId) {
						State.LastestHeartbeat = Event.Heartbeat;
						State.LastestPenalty = Event.Penalty;
						if (
							Event.Inactivity.InactivityPenaltyEnabled &&
							((Event.Inactivity.ImmunityDays != State.LastestInactivity.ImmunityDays) || (Event.Inactivity.Penalty != State.LastestInactivity.Penalty))
						) {
							State.HasSeenInactivityNotif = False;
						}
						State.LastestInactivity = Event.Inactivity;
						// Do not update score if the SuperRoyal queue is enabled
						if (Event.ForQueueId != State.SecondaryQueue.Id) {
							State.LocalPlayerCurrentDivisionId = Event.CurrentDivision;
							State.LocalPlayerCurrentScore = Event.CurrentProgression;
							State.CurrentMatchmakingStatus = Event.MatchmakingStatus;
							declare PlayerProgression = {{{MatchmakingStruct::P}}}K_PlayerProgression {
								AccountId = LocalUser.WebServicesUserId,
								CurrentDivision = Event.CurrentDivision,
								CurrentProgression = Event.CurrentProgression
							};
							{{{UserStore::P}}}Action_UpdatePlayerProgression(This, GetMode(State), PlayerProgression);
							if (State.DivisionsUpdated) State = UpdatePlayerMatchmakingScore(State, Controls);
						}
						if (State.LastestPenalty.CreationDate > 0) {
							State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Penalty_PopUp);
						} else if (State.LastestInactivity.InactivityPenaltyEnabled && State.LastestInactivity.ImmunityDays <= 7 && !State.HasSeenInactivityNotif) {
							State.HasSeenInactivityNotif = True;
							State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Inactivity_PopUp);
						}
						switch (State.CurrentMatchmakingStatus) {
							case {{{MatchmakingStruct::P}}}C_Matchmaking_Status_Enabled: {
								Controls.Label_MatchmakingStatus.Hide();
							}
							case {{{MatchmakingStruct::P}}}C_Matchmaking_Status_Under_Maintenance: {
								Controls.Label_MatchmakingStatus.Value = "{{{Text_ServerMaintenance}}}";
								Controls.Label_MatchmakingStatus.Show();
							}
							case {{{MatchmakingStruct::P}}}C_Matchmaking_Status_Too_Many_Matches: {
								Controls.Label_MatchmakingStatus.Value = "{{{Text_MatchDelay}}}";
								Controls.Label_MatchmakingStatus.Show();
							}
						}
						if (State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_Unavailable) {
							State.PreviousMatchmakingQueueState_API = {{{MatchmakingStruct::P}}}C_Status_Unknown; // Forces state update on the next frame to exit Unavailable state
						}
					} else if (State.SecondaryQueue.Id == Event.ForQueueId) {
						if ((State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Royal) && State.HasCheckSuperRoyalQualif) {
							if (Event.Heartbeat.Status == {{{MatchmakingStruct::P}}}C_Status_MatchReady) {
								// The player has a SuperRoyal qualification match in progress
								State.NeedToJoinSuperRoyal = True;
								State.JoinLink = "";
								log(Now^" : [SuperRoyal] MatchLiveId = " ^ State.LastestHeartbeat.MatchLiveId); // [LOG for CLUB] MatchLiveId
								{{{QueueMgr::P}}}RequestJoinLink(Event.Heartbeat.MatchLiveId, 5);
							}
						}
					}
				} else {
					// @TOREMOVE Temporary fix for trackmania-next/tmnext/-/issues/5486
					if (Event.Error.ErrorCode == 401) {
						HttpAuthorizationHeader::RefreshTokens();
						Log::SendCustomLog("[Matchmaking Page] REFRESH THE TOKENS");
					} else {
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Available, TL::Compose(_("Error while entering the matchmaking (%1). Please try again."), ""^Event.Error.ErrorCode));
					}
				}
			}
			case {{{QueueMgr::P}}}C_Type_Accept: {
				if (!Event.IsSuccess) {
					State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Available, TL::Compose(_("Error while accepting the match (%1)."), ""^Event.Error.ErrorCode));
				}
			}
			case {{{QueueMgr::P}}}C_Type_JoinLink: {
				if (Event.IsSuccess && Event.JoinLink != "") {
					State.JoinLink = Event.JoinLink;
					if (State.MatchmakingQueueState_Display == C_Display_MatchmakingQueueState_MatchReady_WaitingForJoinLink) {
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_MatchReady_StartingServer);
					} else if (State.IsRetrievingSuperRoyalJoinLink || State.NeedToJoinSuperRoyal) {
						if (State.IsRetrievingSuperRoyalJoinLink) State.NeedToJoinSuperRoyal = True;
						if (State.SuperRoyalState.Status == {{{MatchmakingStruct::P}}}C_SuperRoyal_Status_Qualified) {
							System.FlashWindow();
							{{{MenuSounds::P}}}PlaySound(This, C_Sound_MatchFound);
						}
					}	else {
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_MatchReady_DisplayJoinButton);
					}
				} else {
					if (Event.Error.CustomErrorType == {{{QueueMgr::P}}}C_CustomErrorType_NoJoinLink) {
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Available, _("Error: The server could not be retrieved or is not online. Please try again"));
					} else if (Event.Error.CustomErrorType == "") {
						State = DisplayMatchmakingQueueState(State, Controls, C_Display_MatchmakingQueueState_Available, TL::Compose(_("Error while joining the server (%1). Please try again"), ""^Event.Error.ErrorCode));
					}
				}
			}
			case {{{QueueMgr::P}}}C_Type_Divisions: {
				if (State.MatchmakingQueue.Id == Event.ForQueueId) {
					if (Event.IsSuccess) {
						State.DivisionsUpdated = True;
						if (State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Royal) {
							{{{PlayerRoyalVictories::P}}}SetDivisions(This, Event.Divisions);
						} else {
							{{{ProgressBar::P}}}SetDivisions(Event.Divisions);
							{{{PlayerRank::P}}}SetDivisions(Event.Divisions);
						}
						{{{UserStore::P}}}Action_UpdateDivisions(This, GetMode(State), Event.Divisions);
						State = UpdatePlayerMatchmakingScore(State, Controls);
					}
				}
			}
			case {{{QueueMgr::P}}}C_Type_SquadMembersProgressions: {
				if (State.MatchmakingQueue.Id == Event.ForQueueId) {
					if (Event.IsSuccess) {
						foreach (Id => PlayerProgression in Event.SquadMembersProgressions) {
							if (State.Squad.Members.existskey(Id)) {
								State.Squad.Members[Id].DivisionId = PlayerProgression.CurrentDivision;
								State.Squad.Members[Id].Progression = PlayerProgression.CurrentProgression;
							}
						}
						if (State.DivisionsUpdated) {
							// We need to animate the players cars if this event arrives before the Task_GetClubTagList result (to animate the cars in the scene when they are created for the first time)
							State = UpdateSquadFriendsDisplay(State, Controls, Task::IsRunning(Task_GetClubTagList));
						}
					}
				}
			}
			case {{{QueueMgr::P}}}C_Type_SuperRoyal: {
				if (Event.IsSuccess) {
					State.SuperRoyalState.NextSuperRoyalTime = Now + (Event.CurrentSuperRoyal.StartsIn * 1000); //convert StartsIn in ms
					State.SuperRoyalState.Status = Event.CurrentSuperRoyal.Status;
					State.SuperRoyalState.MatchId = Event.CurrentSuperRoyal.MatchLiveId;
				}
			}
		}
	}

	// Process super royal stats request
	if (Http::IsInitialized(State.GetSuperRoyalVictories)) {
		State.GetSuperRoyalVictories = Http::Update(State.GetSuperRoyalVictories);
		if (!Http::IsRunning(State.GetSuperRoyalVictories)) {
			if (Http::IsSuccess(State.GetSuperRoyalVictories)) {
				State.SuperRoyalVictories = MatchmakingAPI::GetResponseFromSuperRoyalStats(State.GetSuperRoyalVictories).MasterVictories;
				State = UpdatePlayerMatchmakingScore(State, Controls);
			}
			State.GetSuperRoyalVictories = Http::Destroy(State.GetSuperRoyalVictories);
		}
	}

	// Process matchmaking leaderboard (Top 10) request
	if (Http::IsInitialized(State.GetMatchmakingLeaderboard)) {
		State.GetMatchmakingLeaderboard = Http::Update(State.GetMatchmakingLeaderboard);
		if (!Http::IsRunning(State.GetMatchmakingLeaderboard)) {
			if (Http::IsSuccess(State.GetMatchmakingLeaderboard)) {
				State.Top10 = MatchmakingAPI::GetResponseFromGetMatchmakingLeaderboard(State.GetMatchmakingLeaderboard);
				declare {{{UserStore::P}}}K_MatchmakingInfo MatchmakingInfo = {{{UserStore::P}}}GetMatchmakingInfos(GetMode(State));
				declare Int2 Top10Scores = <0, 0>;
				if (State.Top10.existskey(9) && State.Top10.existskey(0)) {
					Top10Scores.X = State.Top10[9].Score;
					Top10Scores.Y = State.Top10[0].Score;
				}
				{{{ProgressBar::P}}}SetDivisions(MatchmakingInfo.Divisions, Top10Scores.X, Top10Scores.Y);
				State = UpdatePlayerMatchmakingScore(State, Controls);
			} else {
				//L16N Error in ranked mode when the server doesn't return the divisions. %1 will be replaces by an http error, e.g. "(Error code: 500)"
				Controls.Label_Error.Value = TL::Compose(_("Error while retrieving ranked divisions. (Error code: %1)"), ""^Http::GetStatusCode(State.GetMatchmakingLeaderboard));
				Tools::FitLabelValue(Controls.Label_Error, 2., 1., 0.25);
			}
			State.GetMatchmakingLeaderboard = Http::Destroy(State.GetMatchmakingLeaderboard);
		}
	}

	// Process player rank request
	if (Http::IsInitialized(State.GetPlayerRankInRankedLeaderboard)) {
		State.GetPlayerRankInRankedLeaderboard = Http::Update(State.GetPlayerRankInRankedLeaderboard);
		if (!Http::IsRunning(State.GetPlayerRankInRankedLeaderboard)) {
			if (Http::IsSuccess(State.GetPlayerRankInRankedLeaderboard)) {
				State.OwnerScoreInRankedLeaderboard.clear();
				foreach (Zone => PlayerScore in LeaderboardAPI::GetResponseFromGetPlayerRankInRankedLeaderboard(State.GetPlayerRankInRankedLeaderboard)) {
					State.OwnerScoreInRankedLeaderboard[{{{ZoneSelection::P}}}GetZoneLevel(This, Zone)] = PlayerScore;
				}
				UpdateOwnerScore(State, Controls, State.OwnerScoreInRankedLeaderboard.get({{{ZoneSelection::P}}}GetCurrentZone(This), CampaignStruct::LibCampaignStruct_K_TopScore {}));
			}
			State.GetPlayerRankInRankedLeaderboard = Http::Destroy(State.GetPlayerRankInRankedLeaderboard);
			{{{LoadingSpinner::P}}}StopAnimation(This, Controls.LoadingSpinner_OwnerRank);
		}
	}

	// Process ranked leaderboard request
	if (Http::IsInitialized(State.GetTopPlayersInRankedLeaderboard)) {
		State.GetTopPlayersInRankedLeaderboard = Http::Update(State.GetTopPlayersInRankedLeaderboard);
		if (!Http::IsRunning(State.GetTopPlayersInRankedLeaderboard)) {
			if (Http::IsSuccess(State.GetTopPlayersInRankedLeaderboard)) {
				declare Text[] AccountIdList;
				State.TopPlayersInRankedLeaderboard.clear();
				foreach (Zone => TopPlayers in LeaderboardAPI::GetResponseFromGetTopPlayersInRankedLeaderboard(State.GetTopPlayersInRankedLeaderboard)) {
					State.TopPlayersInRankedLeaderboard[{{{ZoneSelection::P}}}GetZoneLevel(This, Zone)] = TopPlayers;
					foreach (TopPlayer in TopPlayers) {
						AccountIdList.add(TopPlayer.AccountId);
					}
				}
			}
			UpdateTopScores(State, Controls, State.TopPlayersInRankedLeaderboard.get({{{ZoneSelection::P}}}GetCurrentZone(This), []));
			{{{LoadingSpinner::P}}}StopAnimation(This, Controls.LoadingSpinner_Leaderboard);
			State.GetTopPlayersInRankedLeaderboard = Http::Destroy(State.GetTopPlayersInRankedLeaderboard);
		}
	}

	// Club's tag task
	if (Task::IsInitialized(Task_GetClubTagList)) {
		Task_GetClubTagList = Task::Update(Task_GetClubTagList);
		if (!Task::IsRunning(Task_GetClubTagList)) {
			declare CTaskResult_ClubTagList SourceTask = Task::GetSourceTask_ClubTagList(Task_GetClubTagList);
			if (Task::IsSuccess(Task_GetClubTagList) && SourceTask != Null) {
				foreach (Key => Member in State.Squad.Members) {
					State.Squad.Members[Key].ClubTag = SourceTask.GetClubTag(Key);
				}
				State = UpdateSquadFriendsDisplay(State, Controls, True);
			}
			Task_GetClubTagList = Task::Destroy(Task_GetClubTagList);
		}
	}

	// Play privilege check
	if (!Privileges::Check_IsComplete(State.PlayPrivilegeCheck.PrivilegeCheck)) {
		State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_Update(State.PlayPrivilegeCheck.PrivilegeCheck);
		if (Privileges::Check_IsComplete(State.PlayPrivilegeCheck.PrivilegeCheck)) {
			if (Privileges::Check_HasPrivilege(State.PlayPrivilegeCheck.PrivilegeCheck)) {
				State = PlayMatchmaking(State, Controls, State.PlayPrivilegeCheck.Target);
			}
			State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlayPrivilegeCheck.PrivilegeCheck);
		}
	}

	/* Behaviors depending on the current controller */
	if (IsMouse != Tools::IsUsingMouse(Input)) {
		IsMouse = Tools::IsUsingMouse(Input);
		if (IsMouse) {
			{{{Button::P}}}Unfocus(This, Controls.Button_Leaderboard);
		} else {
			{{{Button::P}}}Focus(This, Controls.Button_Leaderboard);
		}
	}

	// Check if a `DirectLink` requests a cancel of the matchmaking queue
	if (DirectLinkMatchmakingPageQueueCancel != DirectLink::GetMatchmakingPageQueueCancel(LocalUser)) {
		DirectLinkMatchmakingPageQueueCancel = DirectLink::GetMatchmakingPageQueueCancel(LocalUser);
		State = Cancel(State, Controls, C_Display_MatchmakingQueueState_Available);
	}

	/* Vehicles animation */
	if (Controls.Camera_Vehicles.Visible && State.Scene.SceneId != NullId) {
		foreach (Index => Vehicle in State.Scene.Vehicles) {
			if (Vehicle.Id != NullId && Vehicle.TriggerAnimationDelay > 0 && Vehicle.TriggerAnimationDelay < Now) {
				if (Vehicle.TriggerAnimationDelay + C_VehicleAnimDuration >= Now) {
					MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, Vehicle.Id, EaseOut(Vehicle.StartPos, Vehicle.EndPos, Vehicle.TriggerAnimationDelay, C_VehicleAnimDuration, Vehicle.BouncingEasterEgg), Vehicle.Rotation, False);
					if (Vehicle.TriggerAnimationDelay + (C_VehicleAnimDuration * 0.8) <= Now) {
						MenuSceneMgr.ItemSetVehicleState(State.Scene.SceneId, Vehicle.Id, 0.7, False, False, 0, 0, False);
					}
				} else {
					State.Scene.Vehicles[Index].TriggerAnimationDelay = -1;
				}
			}
		}
	}
}

foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
	switch (Event.Type) {
		case {{{Router::P}}}C_Event_LeavingRoute: {
			TitleControl.GetServerInfo_Abort();
			State.MenuIsOpen = False;
			State = PlayMusic(State, False);
			State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlayPrivilegeCheck.PrivilegeCheck);

			// We already know the new route path at this point because route variables are updated before events are dispatched
			// We don't want the scene to be destroyed if we just switch between Royal and Ranked
			if ({{{Router::P}}}GetCurrentRoutePath(This) != "{{{RoutePaths::C_Path_MatchmakingMainPage}}}") {
				State = DestroyVehiclesScene(State);
			}
			if (State.Mode.Id == {{{MatchmakingStruct::P}}}C_Mode_Teams3v3) {
				Tracking::StopActivity(ParentApp.TrackingMgr, System);
			}
		}
	}
}
***
""",
[
	Transition::ComponentV2(),
	Navigation::ComponentV2(),
	MenuSounds::ComponentV2(),
	ExpendableButton::ComponentV2(),
	Button::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MatchmakingStruct::Component(),
	QueueMgr::Component(),
	MainBackground::Component(),
	Router::ComponentV2(),
	ProgressBar::Component(),
	PlayerRank::Component(),
	PlayerRoyalVictories::ComponentV2(),
	ServerStatus::Component(),
	SocialManager::Component(),
	PartyCode::Component(),
	SquaddingStruct::Component(),
	UserStore::ComponentV2(),
	ProfilePlayerInfo::Component(),
	PopUpMultiChoice::ComponentV2(),
	ExpendableAsset::ComponentV2(),
	ZoneSelection::ComponentV2(),
	PlayerName::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}