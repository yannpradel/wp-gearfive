/**
 *	Page: LocalMulti
 */
#Const Version		"1.0.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/LocalMulti.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_LocalMulti"
#Const C_NavGroupName "navgroup-page-local-multi"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_HotSeat = _("Hotseat");
	declare Text Text_SplitScreen = _("Splitscreen");

	declare Vec2 Size_Button = MLHelpers::KeepRatioFromY(1232., 556., 47.);

	return MV::Create(
C_Name, 3,
"""
<frame id="frame-global">
	<frameinstance
		id="button-hotseat" pos="-49 0"
		modelid="{{{Button::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_HotSeat}}}"
		data-size="{{{Size_Button.X}}} {{{Size_Button.Y}}}"
		data-labelsize="{{{Size_Button.X*0.8}}} 10"
		data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
		data-image="{{{Const::C_ImageUrl_LocalMulti_HotSeat}}}"
		data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
		data-gradientimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
		data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
		data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
		data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
		data-contouropacityunfocus=".0"
		data-isblink="1"
		data-textsize="5"
		data-textitalicslope="0.2"
		data-textopacityunfocus="0.8"
		data-textxpos="0.13" data-textypos="-0.13"
		data-texthalign="left" data-textvalign="top"
		data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
		data-valign="center" data-halign="center"
		data-tilthitbox="10"
		data-nav-inputs="select;cancel;right;down"
		data-nav-targets="_;_;button-splitscreen;button-back"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
	/>

	<frameinstance
		id="button-splitscreen" pos="50 0"
		modelid="{{{Button::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_SplitScreen}}}"
		data-size="{{{Size_Button.X}}} {{{Size_Button.Y}}}"
		data-labelsize="{{{Size_Button.X*0.8}}} 10"
		data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
		data-image="{{{Const::C_ImageUrl_LocalMulti_SplitScreen}}}"
		data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
		data-gradientimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
		data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
		data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
		data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
		data-contouropacityunfocus=".0"
		data-isblink="1"
		data-textsize="5"
		data-textitalicslope="0.2"
		data-textopacityunfocus="0.8"
		data-textxpos="0.13" data-textypos="-0.13"
		data-texthalign="left" data-textvalign="top"
		data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
		data-valign="center" data-halign="center"
		data-tilthitbox="10"
		data-nav-inputs="select;cancel;left;down"
		data-nav-targets="_;_;button-hotseat;button-back"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
	/>

	<frameinstance
		id="button-back" pos="-151.5 -73" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;up"
		data-nav-targets="_;_;button-hotseat"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "Libs/Nadeo/Trackmania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/Trackmania/ClubEdition.Script.txt" as ClubEdition
""",
"""
Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void Select(CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return;

	switch(_Control.ControlId) {
		case "button-hotseat": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayHotSeat)) {
				ClubEdition::GoToPage(This, {{{Router::P}}}GetCurrentRoutePath(This), RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayHotSeat));
			} else {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_LocalMultiSettings}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_LocalMultiSettings}}}", ["{{{RoutePaths::C_Query_LocalMultiType}}}" => "{{{Const::C_LocalMultiType_HotSeat}}}"]);
			}
		}
		case "button-splitscreen": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlaySplitscreen)) {
				ClubEdition::GoToPage(This, {{{Router::P}}}GetCurrentRoutePath(This), RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlaySplitscreen));
			} else {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_LocalMultiSettings}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_LocalMultiSettings}}}", ["{{{RoutePaths::C_Query_LocalMultiType}}}" => "{{{Const::C_LocalMultiType_SplitScreen}}}"]);
			}
		}
		case "button-back": {
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Local}}}");
		}
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Frame_Global.GetFirstChild("button-hotseat"));
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_LocalMulti}}}")) {
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						Select(Event.To);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Local}}}");
					} else {
						Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						Select(Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_EnteringRoute: {
				declare Text[Text] ControllerInfos = ["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "{{{Const::C_NavInput_ClubWidget}}}" => "{{{Const::C_Text_ClubWidget}}}", "B" => _("Back")];
				if ({{{UserStore::P}}}IsOfflineMode()) {
					ControllerInfos.removekey("{{{Const::C_NavInput_ClubWidget}}}");
					ControllerInfo::SetButtons(ControllerInfos);
				} else {
					ControllerInfo::SetButtons(ControllerInfos);
				}
				Focus(Null, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"));
			}
		}
	}
}
***
""",
[
	Transition::ComponentV2(),
	Navigation::ComponentV2(),
	Router::ComponentV2(),
	UserStore::ComponentV2(),
	Button::ComponentV2(),
	ExpendableButton::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}