/**
 *	Page: AdsPreferences
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/AdsPreferences.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/CMGame/Components/Checkbox.Script.txt" as Checkbox
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_AdsPreferences"
#Const C_NavGroupName "navgroup-page-ads-preferences"
#Const C_NavGroupNameList [
	0 => "navgroup-page-ads-preferences-policy",
	1 => "navgroup-page-ads-preferences-prefences"
]

#Const C_Step_Policy 0
#Const C_Step_Preferences 1

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [AdsPreference] Button to accept and agree to the privacy policy
	declare Text Text_Accept = _("|Agree|Accept");
	//L16N [AdsPreference] Button to confirm the preferences of the privacy policy
	declare Text Text_Confirm = _("Confirm");
	//L16N [AdsPreference] Button to update the policy preferences of the user
	declare Text Text_Preferences = _("Preferences");
	//L16N [AdsPreference] Do NOT translate this. An official translation will be added manually
	declare Text Text_Headline_Policy = _("|Legalese|Privacy policy");
	//L16N [AdsPreference] Preferences for the privacy policy
	declare Text Text_Headline_Preferences = _("|Legalese|Privacy preferences");
	//L16N [AdsPreference] Do NOT translate this. An official translation will be added manually
	declare Text Text_Corpus = _("|Legalese|By clicking 'Accept', you authorise for your data to be shared with third parties in order to display personalised adverts in the game world. If you wish to do so, you can modify your preferences.");
	//L16N [AdsPreference] Do NOT translate this. An official translation will be added manually
	declare Text Text_ShareData = _("|Legalese|I accept that my data will be shared with third parties to enable personalised adverts to be displayed in the game world, depending on my country and my interests.");
	//L16N [AdsPreference] Do NOT translate this. An official translation will be added manually
	declare Text Text_ShareData_Subtitle = _("|Legalese|If this option is deactivated, you'll still see advertisements in the game, but they won't match your areas of interest as well.");

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame global -->
<frame id="frame-global">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" data-button-leave-enabled="false" z-index="-1"/>

	<!-- Frame policy -->
	<frame id="frame-policy">
		<label id="label-title" pos="{{{MLHelpers::Skew(-127.7, 69.2, 10.)}}}" size="250 20" class="text-extrabold" text="{{{Text_Headline_Policy}}}" textsize="13" halign="left" valign="top" maxline="2"/>
		<label id="label-description" pos="{{{MLHelpers::Skew(0., 11., 10.)}}}" size="230 110" class="text-semibold" text="{{{Text_Corpus}}}" textsize="3.5" valign="top" autonewline="1" maxline="10"/>
		<frameinstance
			id="button-accept" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_Accept}}}"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
			data-halign="right" data-valign="center"
			data-nav-inputs="select;cancel;left"
			data-nav-targets="_;_;button-preferences"
			data-nav-group="{{{C_NavGroupNameList[C_Step_Policy]}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
		<frameinstance
			id="button-preferences" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_Preferences}}}"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;cancel;right"
			data-nav-targets="_;_;button-accept"
			data-nav-group="{{{C_NavGroupNameList[C_Step_Policy]}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>

	<!-- Frame preferences -->
	<frame id="frame-preferences" hidden="1">
		<label id="label-title" pos="{{{MLHelpers::Skew(-127.7, 69.2, 10.)}}}" size="250 20" class="text-extrabold" text="{{{Text_Headline_Preferences}}}" textsize="13" halign="left" valign="top" maxline="2"/>
		<label id="label-description" pos="{{{MLHelpers::Skew(0., -48., 10.)}}}" size="230 110" class="text-semibold" text="{{{Text_ShareData_Subtitle}}}" textsize="3.5" autonewline="1" maxline="3"/>
		<frameinstance
			modelid="{{{Checkbox::C_Name}}}" id="checkbox-share-data"
			class="{{{Navigation::C_Class}}}"
			pos="{{{MLHelpers::Skew(-127.7, 12.5, 10.)}}}" z-index="10"
			data-labelsize="230 50"
			data-text="{{{Text_ShareData}}}"
			data-textsize="3.5"
			data-iconsize="8 8"
			data-iconxpos="0." data-iconypos="0.45"
			data-textxpos="0.025"
			data-textprefix=""
			data-texthalign="left" data-textvalign="top"
			data-autonewline="1" data-maxline="5"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-opacityunfocus="0.6"
			data-iconchecked="{{{Icons::C_Icon_128x128_Checkbox_Active_Square}}}"
			data-iconunchecked="{{{Icons::C_Icon_128x128_Checkbox_Inactive_Square}}}"
			data-halign="left" data-valign="top"
			data-nav-inputs="select;cancel;down"
			data-nav-targets="_;_;button-confirm"
			data-nav-group="{{{C_NavGroupNameList[C_Step_Preferences]}}}"
			data-nav-zone="{{{Checkbox::C_NavZone}}}"
		/>
		<frameinstance
			id="button-confirm" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_Confirm}}}"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
			data-halign="right" data-valign="center"
			data-nav-inputs="select;cancel;up"
			data-nav-targets="_;_;checkbox-share-data"
			data-nav-group="{{{C_NavGroupNameList[C_Step_Preferences]}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>
</frame>
""",
"""
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as Config

#Const C_Step_Policy {{{dump(C_Step_Policy)}}}
#Const C_Step_Preferences {{{dump(C_Step_Preferences)}}}
#Const C_NavGroupName {{{dump(C_NavGroupName)}}}
#Const C_NavGroupNameList {{{dump(C_NavGroupNameList)}}}

#Struct K_Controls {
	CMlFrame Checkbox_ShareData;
	CMlFrame Frame_Global;
	CMlFrame Frame_Policy;
	CMlFrame Frame_Preferences;
}

#Struct K_State {
	Integer CurrentStep;
	K_Controls Controls;
}
""",
"""
Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{Checkbox::P}}}IsCheckbox(_From)) {
			{{{Checkbox::P}}}Unfocus(This, _From as CMlFrame);
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{Checkbox::P}}}IsCheckbox(_To)) {
			{{{Checkbox::P}}}Focus(This, _To as CMlFrame);
		}
	}
}

K_State SetCurrentStep(K_State _State, Integer _Step) {
	declare K_State State = _State;
	State.CurrentStep = _Step;

	State.Controls.Frame_Policy.Hide();
	State.Controls.Frame_Preferences.Hide();

	foreach (Step => NavGroupName in C_NavGroupNameList) {
		{{{Navigation::P}}}EnableGroup(This, NavGroupName, Step == State.CurrentStep);
	}

	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, C_NavGroupName);
	switch (State.CurrentStep) {
		case C_Step_Policy: {
			State.Controls.Frame_Policy.Show();
			Focus(FocusedControl, State.Controls.Frame_Policy.GetFirstChild("button-accept"));
		}
		case C_Step_Preferences: {
			State.Controls.Frame_Preferences.Show();
			Focus(FocusedControl, State.Controls.Frame_Preferences.GetFirstChild("button-confirm"));
			{{{Checkbox::P}}}Check(This, State.Controls.Checkbox_ShareData, ParentApp.Adverts_UsePersonnalData);
		}
	}

	return State;
}

Void ConfirmPreference(K_State _State) {
	{{{UserStore::P}}}SetUserHasSetAdvertsPreferences(True);
	if (LocalUser.ZonePath == "" || LocalUser.ZonePath == Config::Get().DefaultMasterZone) {
		{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_WelcomeChangeZone}}}");
	} else {
		{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Home}}}");
	}
}

K_State Select(K_State _State, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-confirm": ConfirmPreference(State);
		case "button-preferences": State = SetCurrentStep(State, C_Step_Preferences);
		case "checkbox-share-data": ParentApp.Adverts_UsePersonnalData = {{{Checkbox::P}}}Toggle(This, State.Controls.Checkbox_ShareData);
		case "button-accept": ConfirmPreference(State);
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Policy;
declare CMlFrame Frame_Preferences;

declare K_State State;
***

***MainStart***
***
Frame_Global = (Page.GetFirstChild("frame-global") as CMlFrame);

State.Controls = K_Controls {
	Frame_Global = Frame_Global,
	Frame_Policy = (Frame_Global.GetFirstChild("frame-policy") as CMlFrame),
	Frame_Preferences = (Frame_Global.GetFirstChild("frame-preferences") as CMlFrame),
	Checkbox_ShareData = (Frame_Global.GetFirstChild("checkbox-share-data") as CMlFrame)
};

State = SetCurrentStep(State, C_Step_Policy);

foreach (NavGroupChild in C_NavGroupNameList) {
	{{{Navigation::P}}}SetGroupParent(This, NavGroupChild, C_NavGroupName);
}

if (!{{{UserStore::P}}}GetUserHasSetAdvertsPreferences()) {
	ParentApp.Adverts_UsePersonnalData = True;
}
***

***MainLoop***
***
if (PageIsVisible) {
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, C_NavGroupName)) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						State = Select(State, Event.To);
					} else {
						Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, C_NavGroupName)) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}
}
***
""",
[
	Checkbox::ComponentV2(),
	ExpendableButton::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpBackground::ComponentV2(),
	Router::ComponentV2(),
	Transition::ComponentV2(),
	UserStore::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
}