/**
 *	Page: Library_ClubTrackReviews
 */
#Const Version		"1.0.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/Library_ClubTrackReviews.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/Trackmania/Components/TitleBar2.Script.txt" as TitleBar
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_Library_ClubTrackReviews"
#Const C_NavGroupName "navgroup-page-library_clubtrackreviews"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

#Const C_ScrollView_Grid "grid"
#Const C_ScrollView_List "list"

#Const C_Tab_AllClubs 0
#Const C_TabNames [
	//L16N [Library ClubTrackReviews] Title followed by all the track reviews created by clubs.
	0 => _("Club track reviews")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [Library ClubTrackReviews] Loading text for club track reviews.
	declare Text Text_RetrievingClubTrackReviews = _("Retrieving club track reviews");
	//L16N [Library ClubTrackReviews] Text displayed when no club track reviews exists.
	declare Text Text_NoClubTrackReviews = _("No club track reviews");
	//L16N [Library ClubTrackReviews] Text displayed when a search returns no results.
	declare Text Text_NoSearchResult = _("Your search did not return any results");
	//L16N [Library ClubTrackReviews] Display the number of track in a track review club activity.
	declare Text Text_Track = _("1 track");
	//L16N [Library ClubTrackReviews] Display the number of tracks in a track review club activity.
	declare Text Text_Tracks = _("%1 tracks");

	/* Scroll view commons */
	declare Vec2 Size_SearchBar = <60., 9.5>;
	declare Scroll::K_Config ScrollConfig = Scroll::K_Config {
		AnimEnabled = True,
		PreScrollEnabled = True,
		PreScrollBefore = 1,
		PreScrollAfter = 1,
		ScrollBarVisibility = Scroll::C_ScrollBarVisibility_DuringScroll,
		ScrollBarXOffset = 23.,
		ScrollGrid = <8., 8.>,
		ScrollIndicator = True,
		ScrollIndicatorColorize = <1., 1., 1.>,
		ScrollIndicatorImage = Icons::C_Icon_128x128_Arrow_Bottom_Oblique,
		ScrollIndicatorSize = 11.,
		ScrollIndicatorXOffset = -9.5,
		ScrollIndicatorYOffset = -10.,
		ScrollPadding = 22.5,
		Skew = -10.,
		SkewVAlign = Scroll::C_SkewVAlign_Top,
		WindowSize = <266., 94.>
	};
	declare Vec2 Overflow = <0., 5.>;

	/* Grid scroll view */
	declare Integer Grid_ColumnsNb = 6;
	declare Integer Grid_RowsNb = 5;
	declare Integer Grid_TrackReviewsPerPage = Grid_ColumnsNb * Grid_RowsNb;
	declare Vec2 Grid_Size_TrackReviewMargin = <0., 3.>;
	declare Vec2 Grid_Size_TrackReview = Scroll::GetElementSize(ScrollConfig.WindowSize, Grid_Size_TrackReviewMargin * 0.5, Grid_ColumnsNb, Grid_RowsNb, Overflow);
	declare Integer Grid_ElementsNb = Scroll::GetRequiredElementsNb(ScrollConfig.WindowSize, Grid_Size_TrackReview, Grid_Size_TrackReviewMargin * 0.5, Grid_ColumnsNb);

	declare Vec2 Grid_Size_TrackReviewBg = MLHelpers::KeepRatioFromY(608., 272., Grid_Size_TrackReview.Y);
	declare Vec2 Grid_Size_AdjustedTrackReviewBg = <Grid_Size_TrackReviewBg.X - MLHelpers::SkewX(Grid_Size_TrackReviewBg.Y, 10.),	Grid_Size_TrackReviewBg.Y>;
	declare Vec2 Grid_Size_TrackReviewName = <Grid_Size_AdjustedTrackReviewBg.X * 0.9, 10.>;
	declare Vec2 Grid_Pos_TrackReviewName = MLHelpers::SkewX(<5., -Grid_Size_AdjustedTrackReviewBg.Y + 3.>, 10.);
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] Grid_Actions = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Icons::C_Icon_128x128_List_View, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Icons::C_Icon_128x128_Glass,  <8., 8.>, -1., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	declare Text ML_Grid_TrackReviews = "";
	for (I, 1, Grid_ElementsNb) {
		ML_Grid_TrackReviews ^= """
			<frameinstance
				modelid="framemodel-grid-club-track-review"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	/* List scroll view */
	declare Integer List_ColumnsNb = 1;
	declare Integer List_RowsNb = 9;
	declare Integer List_TrackReviewsPerPage = List_ColumnsNb * List_RowsNb;
	declare Vec2 List_Size_TrackReviewMargin = <0., 2.>;
	declare Vec2 List_Size_TrackReview = Scroll::GetElementSize(ScrollConfig.WindowSize, List_Size_TrackReviewMargin, List_ColumnsNb, List_RowsNb, Overflow);
	declare Integer List_ElementsNb = Scroll::GetRequiredElementsNb(ScrollConfig.WindowSize, List_Size_TrackReview, List_Size_TrackReviewMargin, List_ColumnsNb);

	declare Vec2 List_Size_TrackReviewBg = <List_Size_TrackReview.X - MLHelpers::SkewX(Grid_Size_TrackReviewBg.Y/2, 10.), Grid_Size_TrackReviewBg.Y/2>;
	declare Vec2 List_Size_TrackReviewImage = MLHelpers::KeepRatioFromY(608., 272., List_Size_TrackReviewBg.Y);
	declare Vec2 List_Pos_TrackReviewImage = <0., List_Size_TrackReviewBg.Y * -0.5>;
	declare Vec2 List_Pos_TrackReviewName = <List_Size_TrackReviewBg.X * 0.1, List_Size_TrackReviewBg.Y * -0.55>;
	declare Vec2 List_Pos_ClubName = <List_Size_TrackReviewBg.X * 0.43, List_Size_TrackReviewBg.Y * -0.55>;
	declare Vec2 List_Pos_TracksCount = <List_Size_TrackReviewBg.X * 0.92, List_Size_TrackReviewBg.Y * -0.55>;
	declare Vec2 List_Pos_Popularity = <List_Size_TrackReviewBg.X * 0.965, List_Size_TrackReviewBg.Y * -0.5>;
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] List_Actions = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Icons::C_Icon_128x128_Grid_View, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Icons::C_Icon_128x128_Glass,  <8., 8.>, -1., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	declare Text ML_List_TrackReviews = "";
	for (I, 1, List_ElementsNb) {
		ML_List_TrackReviews ^= """
			<frameinstance
				modelid="framemodel-list-club-track-review"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="quad-default" halign="center" valign="center"/>
	<style class="text-semibold" halign="center" valign="center2" textprefix="$t$i" textcolor="FFFFFF" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"/>
	<style class="text-extrabold" halign="center" valign="center2" textprefix="$t$i" textcolor="FFFFFF" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"/>
	<style class="text-search" textsize="2" halign="center" valign="center2" textprefix="$i" textcolor="FFFFFF" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-grid-club-track-review">
	<quad id="quad-background" size="{{{Grid_Size_TrackReviewBg.X}}} {{{Grid_Size_TrackReviewBg.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" keepratio="clip" z-index="0"/>
	<frameinstance id="control-block-list-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Grid_Size_TrackReviewBg.X}}} {{{Grid_Size_TrackReviewBg.Y}}}" data-image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-keepratio="clip" z-index="1" />
	<quad id="quad-gradient" size="{{{Grid_Size_TrackReviewBg.X}}} {{{Grid_Size_TrackReviewBg.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity=".7" z-index="2"/>
	<frameinstance id="control-block-list-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{Grid_Size_TrackReviewName.X}}} {{{Grid_Size_TrackReviewName.Y}}}" pos="{{{Grid_Pos_TrackReviewName.X}}} {{{Grid_Pos_TrackReviewName.Y}}}" data-halign="left" data-valign="center2" data-textsize="1.5" data-opacity="0.7" data-filter-profanities="OnlyIfNotTranslated" z-index="3" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" />
	<quad id="quad-contour" size="{{{Grid_Size_TrackReviewBg.X}}} {{{Grid_Size_TrackReviewBg.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" opacity="0." colorize="FFF" z-index="4"/>
	<frame size="{{{Grid_Size_TrackReviewBg.X}}} {{{Grid_Size_TrackReviewBg.Y}}}" pos="{{{Grid_Size_TrackReviewBg.X/2}}} {{{-Grid_Size_TrackReviewBg.Y/2}}}" halign="center" valign="center" z-index="5">
		<quad id="quad-hitbox-club" size="{{{Grid_Size_AdjustedTrackReviewBg.X}}} {{{Grid_Size_AdjustedTrackReviewBg.Y*1.5}}}" scriptevents="1" class="quad-default {{{Scroll::C_Class_ActivationZone}}}" rot="10"/>
	</frame>
</framemodel>
<framemodel id="framemodel-list-club-track-review">
	<frameinstance id="frame-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{List_Size_TrackReviewBg.X}}}" data-height="{{{List_Size_TrackReviewBg.Y}}}" data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" data-opacity="0.6" data-halign="left" data-valign="top" z-index="0"/>
	<quad id="quad-background" size="{{{List_Size_TrackReviewImage.X}}} {{{List_Size_TrackReviewImage.Y}}}" pos="{{{List_Pos_TrackReviewImage.X}}} {{{List_Pos_TrackReviewImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" halign="left" valign="center" keepratio="clip" z-index="1"/>
	<frameinstance id="control-block-list-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{List_Size_TrackReviewImage.X}}} {{{List_Size_TrackReviewImage.Y}}}" pos="{{{List_Pos_TrackReviewImage.X}}} {{{List_Pos_TrackReviewImage.Y}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-halign="left" data-valign="center" data-keepratio="clip" z-index="2" />
	<frameinstance id="control-block-list-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="70 {{{List_Size_TrackReviewBg.Y}}}" pos="{{{List_Pos_TrackReviewName.X}}} {{{List_Pos_TrackReviewName.Y}}}" data-halign="left" data-valign="center2" data-textsize="3" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-opacity="0.6" data-filter-profanities="OnlyIfNotTranslated" z-index="2" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" />
	<frameinstance id="control-block-list-club-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="60 {{{List_Size_TrackReviewBg.Y}}}" pos="{{{List_Pos_ClubName.X}}} {{{List_Pos_ClubName.Y}}}" data-halign="left" data-textsize="3" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-opacity="0.6" data-filter-profanities="OnlyIfNotTranslated" z-index="2" data-valign="center2" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" data-text-blocked=" " />
	<label id="label-tracks-count" size="40 {{{List_Size_TrackReviewBg.Y}}}" pos="{{{List_Pos_TracksCount.X}}} {{{List_Pos_TracksCount.Y}}}" class="text-semibold" halign="right" textsize="3" opacity="0.6" z-index="2"/>
	<quad id="quad-popularity" size="{{{List_Size_TrackReviewBg.Y-1.5}}} {{{List_Size_TrackReviewBg.Y-1.5}}}" pos="{{{List_Pos_Popularity.X}}} {{{List_Pos_Popularity.Y}}}" class="quad-default" colorize="FFF" opacity="0.6" z-index="2"/>
	<quad id="quad-hitbox-club" size="{{{List_Size_TrackReviewBg.X}}} {{{List_Size_TrackReviewBg.Y}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}"/>
</framemodel>
<framemodel id="framemodel-search-bar">
	<frameinstance id="asset-entry-search" modelid="{{{ExpendableAsset::C_Name}}}" data-width="0." data-height="{{{Size_SearchBar.Y}}}" data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" data-halign="left" data-opacity="0." z-index="0"/>
	<frameinstance id="asset-entry-search-contour" modelid="{{{ExpendableAsset::C_Name}}}" data-width="0." data-height="{{{Size_SearchBar.Y}}}" data-styles="{{{ExpendableAsset::C_Style_ContourRounded}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" data-halign="left" data-opacity="0." z-index="1"/>
	<entry id="entry-search" class="text-search" size="{{{Size_SearchBar.X - 15.}}} {{{Size_SearchBar.Y}}}" pos="10 0" halign="left" focusareacolor1="00000000" focusareacolor2="00000000" hidden="1" z-index="2"/>
</framemodel>

<!-- Frame global -->
<frame id="frame-global">
	<frameinstance id="frame-loading-spinner" modelid="{{{LoadingSpinner::C_Name}}}" data-label="{{{Text_RetrievingClubTrackReviews}}}" z-index="3"/>
	<label id="label-search-result" size="{{{ScrollConfig.WindowSize.X}}} 10" class="text-semibold" text="{{{Text_NoClubTrackReviews}}}" textsize="4"/>

	<!-- Header : title and search bar -->
	<frame id="frame-header" pos="10 49.7" z-index="10">
		<frameinstance
			id="frame-titlebar" z-index="2"
			modelid="{{{TitleBar::C_Name}}}"
			data-size="{{{ScrollConfig.WindowSize.X}}} 10"
			data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}"
			data-actions="{{{TL::MLEncode(Grid_Actions.tojson())}}}"
			data-tabs-max-width="160"
		/>
		<frameinstance id="frame-search-bar" modelid="framemodel-search-bar"/>
	</frame>

	<!-- Scroll view grid -->
	<frame id="frame-scroll-view-grid" z-index="1">
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-track-reviews-grid" z-index="1" />
		<frame
			id="frame-scroll-track-reviews-grid"
			pos="{{{-ScrollConfig.WindowSize.X * 0.478}}} {{{ScrollConfig.WindowSize.Y * 0.43}}}"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
			data-pager-page-size="{{{Grid_TrackReviewsPerPage*2}}}"
			data-elements-per-line="{{{Grid_ColumnsNb}}}"
			data-element-size="{{{Grid_Size_TrackReview.X}}} {{{Grid_Size_TrackReview.Y}}}"
			data-margin-size="{{{Grid_Size_TrackReviewMargin.X}}} {{{Grid_Size_TrackReviewMargin.Y}}}"
			data-scroll-indicator-x-offset="-12.6"
			data-scrollbar-xoffset="5.3"
			data-scroll-locked="1"
			data-nav-inputs="down"
			data-nav-targets="button-back"
			data-nav-group="{{{C_NavGroupName}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}"/>
			{{{ML_Grid_TrackReviews}}}
		</frame>
	</frame>

	<!-- Scroll view list -->
	<frame id="frame-scroll-view-list" z-index="1" hidden="1">
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-track-reviews-list" z-index="1" />
		<frame
			id="frame-scroll-track-reviews-list"
			pos="{{{-ScrollConfig.WindowSize.X * 0.472}}} {{{ScrollConfig.WindowSize.Y * 0.43}}}"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
			data-pager-page-size="{{{List_TrackReviewsPerPage*2}}}"
			data-elements-per-line="{{{List_ColumnsNb}}}"
			data-element-size="{{{List_Size_TrackReview.X}}} {{{List_Size_TrackReview.Y}}}"
			data-margin-size="{{{List_Size_TrackReviewMargin.X}}} {{{List_Size_TrackReviewMargin.Y}}}"
			data-scroll-indicator-x-offset="-15"
			data-scrollbar-xoffset="3"
			data-scroll-locked="1"
			data-nav-inputs="down"
			data-nav-targets="button-back"
			data-nav-group="{{{C_NavGroupName}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_List_TrackReviews}}}
		</frame>
	</frame>

	<!-- Footer -->
	<frameinstance
		id="button-back"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		pos="-151.5 -73"
		z-index="2"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;up;right"
		data-nav-targets="_;_;frame-scroll-track-reviews-grid;frame-scroll-track-reviews-grid"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/Trackmania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/Trackmania/ClubEdition.Script.txt" as ClubEdition

#Struct K_ScrollView {
	CMlFrame Frame_ScrollView_Grid;
	CMlFrame Frame_ScrollView_List;
	CMlFrame Frame_ScrollClubTrackReviews;
	CMlFrame Frame_TitleBar;
	CMlEntry Entry_Search;
	CMlFrame Asset_EntrySearch;
	CMlFrame Asset_EntrySearchContour;
	Text CurrentLayout;
	Integer SelectedTrackReviewKey;
}

#Const C_ImageUrls_PopularityLevel {{{dump(Icons::C_Icons_128x128_PopularityLevel)}}}

#Const C_ScrollView_Grid {{{dump(C_ScrollView_Grid)}}}
#Const C_ScrollView_List {{{dump(C_ScrollView_List)}}}

#Const C_Buttons_Default_Online ["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "{{{Const::C_NavInput_ClubWidget}}}" => "{{{Const::C_Text_ClubWidget}}}", "B" => _("Back")]
#Const C_Buttons_Default_Offline ["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "B" => _("Back")]
""",
"""
Void Loading(K_ScrollView _ScrollView, CMlFrame _Frame_LoadingSpinner, CMlLabel _Label_SearchResult) {
	_Label_SearchResult.Hide();
	{{{LoadingSpinner::P}}}StartAnimation(This, _Frame_LoadingSpinner);
	{{{Scroll::P}}}SetElementsTotal(This, _ScrollView.Frame_ScrollClubTrackReviews, 0);
}

Void ShowTrackReview(CMlFrame _Frame_TrackReview, {{{ClubStruct::P}}}K_MapReview _TrackReview, Text _ScrollViewLayout) {
	declare CMlFrame ControlBlockList_TrackReviewName <=> (_Frame_TrackReview.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlFrame ControlBlockList_TrackReviewImage <=> (_Frame_TrackReview.GetFirstChild("control-block-list-image") as CMlFrame);

	/* Common */
	_Frame_TrackReview.Visible = True;
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_TrackReviewName, [_TrackReview.Activity.CreatorAccountId, _TrackReview.Activity.LatestEditorAccountId], _TrackReview.Activity.Name);
	if (_TrackReview.Activity.MediaUrl != "") {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_TrackReviewImage, [_TrackReview.Activity.CreatorAccountId, _TrackReview.Activity.LatestEditorAccountId], _TrackReview.Activity.MediaUrl);
	} else {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_TrackReviewImage, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");
	}
	if ({{{ControlBlockList::P}}}IsBlocked(This, [_TrackReview.Activity.CreatorAccountId, _TrackReview.Activity.LatestEditorAccountId])) {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_TrackReview, {{{MenuSounds::P}}}C_Sound_SelectError);
	} else {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_TrackReview, {{{MenuSounds::P}}}C_Sound_Select);
	}

	switch (_ScrollViewLayout) {
		case C_ScrollView_List: {
			declare CMlQuad Quad_Popularity <=> (_Frame_TrackReview.GetFirstChild("quad-popularity") as CMlQuad);
			declare CMlFrame ControlBlockList_TrackReviewClubName <=> (_Frame_TrackReview.GetFirstChild("control-block-list-club-name") as CMlFrame);
			declare CMlLabel Label_TracksCount <=> (_Frame_TrackReview.GetFirstChild("label-tracks-count") as CMlLabel);

			{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_TrackReviewClubName, [_TrackReview.Activity.CreatorAccountId, _TrackReview.Activity.LatestEditorAccountId], _TrackReview.ClubName);

			if (_TrackReview.SubmittedMapCount > 1) {
				Label_TracksCount.SetText(TL::Compose("{{{Text_Tracks}}}", ""^_TrackReview.SubmittedMapCount));
			} else if (_TrackReview.SubmittedMapCount == 1) {
				Label_TracksCount.SetText("{{{Text_Track}}}");
			} else {
				Label_TracksCount.SetText("");
			}

			Quad_Popularity.Show();
			Quad_Popularity.ChangeImageUrl(C_ImageUrls_PopularityLevel.get(_TrackReview.PopularityLevel, ""));
			Tools::FitLabelValue(Label_TracksCount, 3., 1., 0.25);
		}
	}
}

Void ShowTrackReviewLoading(CMlFrame _Frame_TrackReview, Text _ScrollViewLayout) {
	declare CMlFrame ControlBlockList_TrackReviewName <=> (_Frame_TrackReview.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlFrame ControlBlockList_TrackReviewImage <=> (_Frame_TrackReview.GetFirstChild("control-block-list-image") as CMlFrame);

	/* Common */
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_TrackReviewName, [], "{{{Text_Retrieving}}}");
	{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_TrackReviewImage, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");
	{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_TrackReview, {{{MenuSounds::P}}}C_Sound_SelectError);

	switch (_ScrollViewLayout) {
		case C_ScrollView_List: {
			declare CMlQuad Quad_Popularity <=> (_Frame_TrackReview.GetFirstChild("quad-popularity") as CMlQuad);
			declare CMlFrame ControlBlockList_TrackReviewClubName <=> (_Frame_TrackReview.GetFirstChild("control-block-list-club-name") as CMlFrame);
			declare CMlLabel Label_TracksCount <=> (_Frame_TrackReview.GetFirstChild("label-tracks-count") as CMlLabel);
			{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_TrackReviewClubName, [], "");
			Label_TracksCount.SetText("");
			Quad_Popularity.Visible = False;
		}
	}
}

Void HideTrackReview(CMlFrame _Frame_TrackReview) {
	_Frame_TrackReview.Visible = False;
}

Void FocusTrackReview(CMlFrame _Frame_TrackReview, Text _ScrollViewLayout, Boolean _Focused) {
	if (_Frame_TrackReview == Null) return;
	declare CMlFrame ControlBlockList_TrackReviewName <=> (_Frame_TrackReview.GetFirstChild("control-block-list-name") as CMlFrame);

	switch (_ScrollViewLayout) {
		case C_ScrollView_Grid: {
			declare CMlQuad Quad_Contour <=> (_Frame_TrackReview.GetFirstChild("quad-contour") as CMlQuad);
			declare CMlQuad Quad_Gradient <=> (_Frame_TrackReview.GetFirstChild("quad-gradient") as CMlQuad);

			AnimMgr.Flush(Quad_Contour);
			AnimMgr.Flush(Quad_Gradient);
			if (_Focused) {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackReviewName, 1., 250);
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackReviewName, 0.7, 250);
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
		case C_ScrollView_List: {
			declare CMlFrame Frame_Background <=> (_Frame_TrackReview.GetFirstChild("frame-background") as CMlFrame);
			declare CMlQuad Quad_Popularity <=> (_Frame_TrackReview.GetFirstChild("quad-popularity") as CMlQuad);
			declare CMlFrame ControlBlockList_TrackReviewClubName <=> (_Frame_TrackReview.GetFirstChild("control-block-list-club-name") as CMlFrame);
			declare CMlLabel Label_TracksCount <=> (_Frame_TrackReview.GetFirstChild("label-tracks-count") as CMlLabel);

			AnimMgr.Flush(Label_TracksCount);
			AnimMgr.Flush(Quad_Popularity);
			if (_Focused) {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackReviewClubName, 1., 250);
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackReviewName, 1., 250);
				AnimMgr.Add(Label_TracksCount, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Popularity, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, 1.);
			} else {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackReviewClubName, 0.6, 250);
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackReviewName, 0.6, 250);
				AnimMgr.Add(Label_TracksCount, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Popularity, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, .6);
			}
		}
	}

	// Text to speech
	if (_Focused) {
		{{{ControlBlockList::P}}}TTS_Focus(ControlBlockList_TrackReviewName);
	} else {
		{{{ControlBlockList::P}}}TTS_Unfocus(ControlBlockList_TrackReviewName);
	}
}

Void UnfocusTrackReview(CMlFrame _Frame_TrackReview, Text _ScrollViewLayout) {
	FocusTrackReview(_Frame_TrackReview, _ScrollViewLayout, False);
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Scroll::P}}}IsScroll(_From)) {
			{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Scroll::P}}}IsScroll(_To)) {
			{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void FocusAvailableControl(K_ScrollView _ScrollView, CMlFrame _Button_Back) {
	if ({{{Scroll::P}}}GetElementsTotal(_ScrollView.Frame_ScrollClubTrackReviews) > 0) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _ScrollView.Frame_ScrollClubTrackReviews);
	} else if (!{{{Navigation::P}}}IsLocked(_Button_Back)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Button_Back);
	}
}

Void LockNavigation(K_ScrollView _ScrollView, Boolean _IsLocked) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !_IsLocked);
	{{{TitleBar::P}}}LockNavigation(_ScrollView.Frame_TitleBar, _IsLocked);
	{{{Scroll::P}}}LockNavigation(_ScrollView.Frame_ScrollClubTrackReviews, _IsLocked);
}

Void FocusSearch(K_ScrollView _ScrollView, Boolean _Focused) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !_Focused);
	{{{Scroll::P}}}LockNavigation(_ScrollView.Frame_ScrollClubTrackReviews, _Focused);

	if (_Focused) {
		{{{ExpendableAsset::P}}}SetColor(This, _ScrollView.Asset_EntrySearchContour, <1., 1., 1.>);
	} else {
		{{{ExpendableAsset::P}}}SetColor(This, _ScrollView.Asset_EntrySearchContour, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}});
	}
}

K_ScrollView QuitPage(K_ScrollView _ScrollView) {
	declare K_ScrollView ScrollView = _ScrollView;
	ScrollView.SelectedTrackReviewKey = -1;
	{{{Router::P}}}PushParent(This);
	return ScrollView;
}

K_ScrollView Select(CMlControl _Control, K_ScrollView _ScrollView) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _ScrollView;
	declare K_ScrollView ScrollView = _ScrollView;

	switch (_Control.ControlId) {
		case "button-back": ScrollView = QuitPage(ScrollView);
	}

	return ScrollView;
}

Void DisplaySearch(K_ScrollView _ScrollView, Text _EntryText, Boolean _IsSearchButton, Boolean _Visible, Boolean _IsAnimated) {
	declare {{{TitleBar::P}}}K_Actions[Integer] Actions;
	switch (_ScrollView.CurrentLayout) {
		case C_ScrollView_List: Actions.fromjson({{{"\"\"\""^List_Actions.tojson()^"\"\"\""}}});
		case C_ScrollView_Grid: Actions.fromjson({{{"\"\"\""^Grid_Actions.tojson()^"\"\"\""}}});
	}

	// Update search background
	if (_Visible) {
		{{{ExpendableAsset::P}}}SetWidth(This, _ScrollView.Asset_EntrySearch, {{{Size_SearchBar.X}}}, False);
		{{{ExpendableAsset::P}}}SetWidth(This, _ScrollView.Asset_EntrySearchContour, {{{Size_SearchBar.X}}}, False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _ScrollView.Asset_EntrySearch, 1., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _ScrollView.Asset_EntrySearchContour, 1., False);
		Actions[{{{TitleBar::P}}}C_Action_Second].ActionMargin = {{{Size_SearchBar.X}}} - 10.;
		Actions[{{{TitleBar::P}}}C_Action_First].IconMargin = 2.;
	} else {
		{{{ExpendableAsset::P}}}SetWidth(This, _ScrollView.Asset_EntrySearch, 0., False);
		{{{ExpendableAsset::P}}}SetWidth(This, _ScrollView.Asset_EntrySearchContour, 0., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _ScrollView.Asset_EntrySearch, 0., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _ScrollView.Asset_EntrySearchContour, 0., False);
	}
	{{{ExpendableAsset::P}}}RedrawAsset(This, _ScrollView.Asset_EntrySearch, _IsAnimated);
	{{{ExpendableAsset::P}}}RedrawAsset(This, _ScrollView.Asset_EntrySearchContour, _IsAnimated);
	{{{TitleBar::P}}}SetActions(_ScrollView.Frame_TitleBar, Actions, False);
	{{{TitleBar::P}}}RedrawTitleBar(_ScrollView.Frame_TitleBar, _IsAnimated);

	// Update entry
	_ScrollView.Entry_Search.Visible = _Visible;
	_ScrollView.Entry_Search.Value = _EntryText;
	if (_IsSearchButton && _ScrollView.Entry_Search.Visible) {
		_ScrollView.Entry_Search.StartEdition();
		FocusSearch(_ScrollView, _Visible);
	}
}

K_ScrollView UpdateTitleBarAndScrollView(K_ScrollView _ScrollView, CMlFrame _Frame_Global, CMlFrame _Button_Back) {
	declare K_ScrollView ScrollView = _ScrollView;

	/* Update title bar */
	declare {{{TitleBar::P}}}K_Actions[Integer] Actions;
	switch (ScrollView.CurrentLayout) {
		case C_ScrollView_List: {
			Actions.fromjson({{{"\"\"\""^List_Actions.tojson()^"\"\"\""}}});
		}
		case C_ScrollView_Grid: {
			Actions.fromjson({{{"\"\"\""^Grid_Actions.tojson()^"\"\"\""}}});
		}
	}
	{{{TitleBar::P}}}SetActions(ScrollView.Frame_TitleBar, Actions);

	/* Update scrolls visibility */
	ScrollView.Frame_ScrollClubTrackReviews <=> (_Frame_Global.GetFirstChild("frame-scroll-track-reviews-"^ScrollView.CurrentLayout) as CMlFrame);
	ScrollView.Frame_ScrollView_Grid.Visible = ScrollView.CurrentLayout == C_ScrollView_Grid;
	ScrollView.Frame_ScrollView_List.Visible = ScrollView.CurrentLayout == C_ScrollView_List;

	/* Update control targets */
	{{{Navigation::P}}}ChangeControlTargets(This, _Button_Back, ["right", "up"], [ScrollView.Frame_ScrollClubTrackReviews.ControlId, ScrollView.Frame_ScrollClubTrackReviews.ControlId]);

	return ScrollView;
}

K_ScrollView SwitchScrollViewLayout(K_ScrollView _ScrollView, CMlFrame _Frame_Global, CMlFrame _Button_Back) {
	declare K_ScrollView ScrollView = _ScrollView;
	declare CMlControl TrueTarget;
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
	declare Integer ScrollViewElementKey = {{{Scroll::P}}}GetFocusedElementKey(ScrollView.Frame_ScrollClubTrackReviews);
	declare Vec2 ScrollOffset = ScrollView.Frame_ScrollClubTrackReviews.ScrollOffset;

	/* Lock previous scroll view */
	LockNavigation(ScrollView, True);

	/* Switch between ScrollView layouts */
	switch (ScrollView.CurrentLayout) {
		case C_ScrollView_List: ScrollView.CurrentLayout = C_ScrollView_Grid;
		case C_ScrollView_Grid: ScrollView.CurrentLayout = C_ScrollView_List;
	}
	ScrollView = UpdateTitleBarAndScrollView(ScrollView, _Frame_Global, _Button_Back);

	/* Unlock current scroll view */
	LockNavigation(ScrollView, False);

	/* Transfer FocusedControl from previous scroll to the current scroll */
	{{{Scroll::P}}}Unfocus(This, ScrollView.Frame_ScrollClubTrackReviews);
	{{{Scroll::P}}}ScrollToPosition(This, ScrollView.Frame_ScrollClubTrackReviews, ScrollOffset.Y, False);
	if (FocusedControl != Null) {
		if (TL::StartsWith("frame-scroll-track-reviews-", FocusedControl.ControlId)) {
			FocusedControl = ScrollView.Frame_ScrollClubTrackReviews;
			{{{Scroll::P}}}ScrollToElement(This, ScrollView.Frame_ScrollClubTrackReviews, ScrollViewElementKey, True);
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), FocusedControl);
		}
	}

	/* Update scroll */
	{{{Scroll::P}}}TriggerPagerUpdate(ScrollView.Frame_ScrollClubTrackReviews);

	return ScrollView;
}

***MainInit***
***
declare CMlFrame Button_Back;
declare CMlFrame Frame_Global;
declare CMlFrame Frame_LoadingSpinner;
declare CMlLabel Label_SearchResult;

declare K_ScrollView ScrollView;

declare persistent Text Persistent_ScrollViewLayout_ClubTrackReviews for UserMgr.MainUser = "grid";
declare Boolean EntryWasFocused;
declare Text SearchValue;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_LoadingSpinner <=> (Frame_Global.GetFirstChild("frame-loading-spinner") as CMlFrame);
Button_Back <=> (Frame_Global.GetFirstChild("button-back") as CMlFrame);
Label_SearchResult <=> (Frame_Global.GetFirstChild("label-search-result") as CMlLabel);

ScrollView = K_ScrollView {
	Frame_ScrollClubTrackReviews = (Frame_Global.GetFirstChild("frame-scroll-track-reviews-"^Persistent_ScrollViewLayout_ClubTrackReviews) as CMlFrame),
	Frame_ScrollView_Grid = (Frame_Global.GetFirstChild("frame-scroll-view-grid") as CMlFrame),
	Frame_ScrollView_List = (Frame_Global.GetFirstChild("frame-scroll-view-list") as CMlFrame),
	Frame_TitleBar = (Frame_Global.GetFirstChild("frame-titlebar") as CMlFrame),
	Entry_Search = (Frame_Global.GetFirstChild("entry-search") as CMlEntry),
	Asset_EntrySearch = (Frame_Global.GetFirstChild("asset-entry-search") as CMlFrame),
	Asset_EntrySearchContour = (Frame_Global.GetFirstChild("asset-entry-search-contour") as CMlFrame),
	CurrentLayout = Persistent_ScrollViewLayout_ClubTrackReviews,
	SelectedTrackReviewKey = -1
};

/* Init the view depending on the saved scrollview layout */
ScrollView = UpdateTitleBarAndScrollView(ScrollView, Frame_Global, Button_Back);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_LibraryClubTrackReviews}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_EnteringRoute: {
				if ({{{UserStore::P}}}IsOfflineMode()) ControllerInfo::SetButtons(C_Buttons_Default_Offline);
				else ControllerInfo::SetButtons(C_Buttons_Default_Online);
				LockNavigation(ScrollView, False);

				// Update scroll
				Loading(ScrollView, Frame_LoadingSpinner, Label_SearchResult);
				{{{Scroll::P}}}TriggerPagerUpdate(ScrollView.Frame_ScrollClubTrackReviews);
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: ScrollView = Select(Event.To, ScrollView);
						case CMlScriptEvent::EMenuNavAction::Cancel: ScrollView = QuitPage(ScrollView);
						default: {
							if (Event.To != Null) {
								Focus(Event.From, Event.To);
							} else {
								FocusAvailableControl(ScrollView, Button_Back);
							}
						}
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: ScrollView = Select(Event.To, ScrollView);
						case CMlScriptEvent::Type::MouseOver: Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* TitleBar events */
	foreach (Event in {{{TitleBar::P}}}PendingEvents) {
		if (Event.TitleBar.Id == ScrollView.Frame_TitleBar.Id) {
			switch (Event.Type) {
				case {{{TitleBar::P}}}C_EventType_Update: {
					if (Event.ActionsPos.existskey({{{TitleBar::P}}}C_Action_Second)) {
						declare Vec2 Pos_SearchBar = Event.ActionsPos[{{{TitleBar::P}}}C_Action_Second] - <5.5, 0.>;
						AnimMgr.Flush(ScrollView.Entry_Search.Parent);
						AnimMgr.Add(ScrollView.Entry_Search.Parent, "<anim pos=\""^Pos_SearchBar.X^" "^Pos_SearchBar.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
					}
				}
				case {{{TitleBar::P}}}C_EventType_Action: {
					switch (Event.Action) {
						case {{{TitleBar::P}}}C_Action_First: {
							ScrollView = SwitchScrollViewLayout(ScrollView, Frame_Global, Button_Back);
							Persistent_ScrollViewLayout_ClubTrackReviews = ScrollView.CurrentLayout;
							UserMgr.MainUser.PersistentSave();
						}
						case {{{TitleBar::P}}}C_Action_Second: {
							if (ScrollView.Entry_Search.IsFocused && ScrollView.Entry_Search.Visible) {
								DisplaySearch(ScrollView, "", False, False, True);
							} else {
								DisplaySearch(ScrollView, ScrollView.Entry_Search.Value, True, True, True);
							}
						}
					}
				}
			}
		}
	}

	/* Search behaviors */
	if (EntryWasFocused != ScrollView.Entry_Search.IsFocused) {
		EntryWasFocused = ScrollView.Entry_Search.IsFocused;
		FocusSearch(ScrollView, ScrollView.Entry_Search.IsFocused);
		if (!ScrollView.Entry_Search.IsFocused) {
			if (SearchValue != ScrollView.Entry_Search.Value) {
				Loading(ScrollView, Frame_LoadingSpinner, Label_SearchResult);
				declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
				if (FocusedControl != Null && FocusedControl.Id == ScrollView.Frame_ScrollClubTrackReviews.Id) {
					FocusAvailableControl(ScrollView, Button_Back);
				}
			}
			{{{Scroll::P}}}TriggerPagerUpdate(ScrollView.Frame_ScrollClubTrackReviews);
			if (ScrollView.Entry_Search.Value == "") {
				DisplaySearch(ScrollView, "", False, False, True);
			}
		}
	}

	/* Scroll events */
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null && Event.Scroll.Id == ScrollView.Frame_ScrollClubTrackReviews.Id) {
			switch (Event.Type) {
				case {{{Scroll::P}}}C_EventType_PagerUpdate: {
					{{{ClubStore::P}}}Action_LoadMapReviewActivities(
						This,
						Event.PagerOffset,
						Event.PagerCount,
						ScrollView.Entry_Search.Value
					);
				}
				case {{{Scroll::P}}}C_EventType_Update: {
					declare ClubTrackReviews = {{{ClubStore::P}}}GetMapReviewActivities();

					foreach (Key => Frame_Element in Event.ElementsVisible) {
						if (ClubTrackReviews.existskey(Key)) {
							ShowTrackReview(Frame_Element, ClubTrackReviews[Key], ScrollView.CurrentLayout);
						} else {
							ShowTrackReviewLoading(Frame_Element, ScrollView.CurrentLayout);
						}
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						HideTrackReview(Frame_Element);
					}

					Event.Scroll.Visible = Event.ElementsVisible.count > 0;
					{{{Navigation::P}}}Lock(Event.Scroll, Event.ElementsVisible.count <= 0);
					{{{Navigation::P}}}EnableInputs(Event.Scroll, Event.ElementsVisible.count <= 0);
					if (!{{{LoadingSpinner::P}}}IsLoading(Frame_LoadingSpinner)) {
						Label_SearchResult.Visible = Event.ElementsVisible.count <= 0;
						if (Label_SearchResult.Visible) {
							if (ScrollView.Entry_Search.Value == "") {
								Label_SearchResult.Value = "{{{Text_NoClubTrackReviews}}}";
							} else {
								Label_SearchResult.Value = "{{{Text_NoSearchResult}}}";
							}
						}
					}
					FocusAvailableControl(ScrollView, Button_Back);
				}
				case {{{Scroll::P}}}C_EventType_Select: {
					declare ClubTrackReviews = {{{ClubStore::P}}}GetMapReviewActivities();
					if (ClubTrackReviews.existskey(Event.ToKey)) {
						declare TrackReview = ClubTrackReviews[Event.ToKey];
						if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_AccessServerReview)) {
							ClubEdition::GoToPage(This, {{{Router::P}}}GetCurrentRoutePath(This), RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayMapReviewActivity));
						} else if (!{{{ControlBlockList::P}}}IsBlocked(This, [TrackReview.Activity.CreatorAccountId, TrackReview.Activity.LatestEditorAccountId])) {
							ScrollView.SelectedTrackReviewKey = Event.ToKey;
							LockNavigation(ScrollView, True);
							{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_MapReviewActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
							{{{Router::P}}}Push(This,
								"{{{RoutePaths::C_Path_MapReviewActivity}}}",
								[
									"{{{RoutePaths::C_Query_MapReviewActivity}}}" => TrackReview.tojson(),
									{{{Router::P}}}C_Query_MenuSection => "{{{RoutePaths::C_MenuSection_Create}}}"
								],
								True
							);
						}
					}
				}

				case {{{Scroll::P}}}C_EventType_Focus: {
					if (Event.From != Null) FocusTrackReview(Event.From, ScrollView.CurrentLayout, False);
					if (Event.To != Null) FocusTrackReview(Event.To, ScrollView.CurrentLayout, True);
					if (Event.IsMouse && Event.To != Null && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
						Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Event.Scroll);
					}
				}
				case {{{Scroll::P}}}C_EventType_ReachLimit: {
					if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Down || Event.NavAction == CMlScriptEvent::EMenuNavAction::Left) {
						Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Button_Back);
						{{{MenuSounds::P}}}PlayFocusSound(This, Button_Back);
					}
				}
				case {{{Scroll::P}}}C_EventType_Cancel: {
					ScrollView = QuitPage(ScrollView);
				}
			}
		}
	}

	/* Store events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{ClubStore::P}}}C_Event_MapReviewsUpdated: {
						declare MapReviewsTotal = {{{ClubStore::P}}}GetMapReviewActivitiesTotal();
						{{{Scroll::P}}}SetElementsTotal(This, (Frame_Global.GetFirstChild("frame-scroll-track-reviews-grid") as CMlFrame), MapReviewsTotal);
						{{{Scroll::P}}}SetElementsTotal(This, (Frame_Global.GetFirstChild("frame-scroll-track-reviews-list") as CMlFrame), MapReviewsTotal);
						{{{LoadingSpinner::P}}}StopAnimation(This, Frame_LoadingSpinner);
						if (ScrollView.SelectedTrackReviewKey != -1) {
							{{{Scroll::P}}}ScrollToElement(This, ScrollView.Frame_ScrollClubTrackReviews, ScrollView.SelectedTrackReviewKey, True);
							ScrollView.SelectedTrackReviewKey = -1;
						}
					}
				}
			}
		}
	}
}
***
""",
[
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	ExpendableButton::ComponentV2(),
	Router::ComponentV2(),
	Scroll::ComponentV2(),
	TitleBar::Component(),
	UserStore::ComponentV2(),
	Transition::ComponentV2(),
	ControlBlockList::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}