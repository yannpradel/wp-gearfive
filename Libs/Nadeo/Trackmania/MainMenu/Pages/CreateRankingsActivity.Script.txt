/**
 *	Page: CreateRankingsActivity
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/CreateRankingsActivity.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/CMGame/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/Trackmania/API/BrowserAPI.Script.txt" as BrowserAPI
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/Trackmania/Components/PopUpClubThemes.Script.txt" as PopUpClubThemes
#Include "Libs/Nadeo/CMGame/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/Trackmania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/Trackmania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_CreateRankingsActivity"
#Const C_NavGroup_Default "navgroup-create-rankings-activity-default"
#Const C_NavGroup_Global "navgroup-create-rankings-activity-global"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [RankingsActivity] Default placeholder for the ranking name text field.
	declare Text Text_Name = _("Ranking name");
	//L16N [RankingsActivity] Button to create a rankings activity
	declare Text Text_Create = _("Create");
	//L16N [RankingsActivity] Button to edit a rankings activity
	declare Text Text_Save = _("Save");
	//L16N [RankingsActivity] Title when editing a rankings activity.
	declare Text Text_EditRankings = _("Edit rankings activity");
	//L16N [RankingsActivity] Button that sends the player to a campaign selection list
	declare Text Text_SelectCampaign = _("Select a campaign");
	//L16N [RankingsActivity] Subtitle with the name of the selected campaign, %1 will be replace by the name of the campaign
	declare Text Text_Campaign = _("Campaign '$<%1$>'");
	//L16N [RankingsActivity] Title of the page where the player can select a campaign in a list
	declare Text Text_CampaignToUse = _("Choose a campaign to use");
	//L16N [RankingsActivity] Loading message while creating the club activity
	declare Text Text_CreatingClubActivity = _("Creating club activity...");
	//L16N [RankingsActivity] Loading message while editing the club activity
	declare Text Text_EditingClubActivity = _("Editing club activity...");
	//L16N [RankingsActivity] Loading message while loading the rankings activity
	declare Text Text_RetrievingActivity = _("Retrieving rankings activity...");
	//L16N [RankingsActivity] Title of the rankings activity creation page
	declare Text Text_CreateRankings = _("Create rankings activity");
	//L16N [RankingsActivity] Button to select the current quarterly campaign for the rankings activity
	declare Text Text_QuarteryCampaign = _("Current quarterly campaign");
	//L16N [RankingsActivity] Button to select the daily track for the rankings activity
	declare Text Text_DailyMap = _("Daily track");
	//L16N [RankingsActivity] Error message displayed when the player don't enter a name
	declare Text Text_NoName = _("You need to set a name to the activity.");
	//L16N [RankingsActivity] Text indicating to the player that there is no available campaign to select.
	declare Text Text_NoCampaign = _("No available campaign");
	//L16N [RankingsActivity] Text pronounced when the player is focusing the button to choose a logo for the room.
	declare Text TTS_ChooseLogo = _("Choose a logo for your activity");

	/* Variables */
	declare Text Image_ButtonCampaign = "file://Media/Manialinks/Nadeo/Trackmania/Menus/PageCreateRoom/Menu_Clubs_CreateRoom_SelectCampaign.dds";
	declare Text Image_ButtonMaps = "file://Media/Manialinks/Nadeo/Trackmania/Menus/PageCreateRoom/Menu_Clubs_CreateRoom_SelectTracks.dds";
	declare Vec2 Size_ButtonRoomType = MLHelpers::KeepRatioFromY(1232., 556., 35.);

	/* Club campaigns scroll view */
	declare Vec2 Size_ClubCampaignScrollWindow = <240., 70.>;
	declare Integer ClubCampaignsColumnsNb = 5;
	declare Integer ClubCampaignsRowsNb = 3;
	declare Integer ClubCampaignsPerPage = ClubCampaignsColumnsNb * ClubCampaignsRowsNb;
	declare Vec2 Size_ClubCampaignMargin = <3., 3.>;
	declare Vec2 Size_ClubCampaign = Scroll::GetElementSize(Size_ClubCampaignScrollWindow, Size_ClubCampaignMargin, ClubCampaignsColumnsNb, ClubCampaignsRowsNb);
	declare Integer ClubCampaignsElementsNb = Scroll::GetRequiredElementsNb(Size_ClubCampaignScrollWindow, Size_ClubCampaign, Size_ClubCampaignMargin, ClubCampaignsColumnsNb);

	declare Vec2 Size_AdjustedClubCampaign = <Size_ClubCampaign.X - MLHelpers::SkewX(Size_ClubCampaign.Y, 10.),	Size_ClubCampaign.Y>;
	declare Vec2 Size_ClubCampaignImage = MLHelpers::KeepRatioFromY(608., 272., Size_ClubCampaign.Y);
	declare Vec2 Pos_ClubName = <Size_ClubCampaignImage.X * 0.03, Size_ClubCampaignImage.Y * -0.88>;

	declare Text ML_ClubCampaignCards = "";
	for (I, 1, ClubCampaignsElementsNb) {
		ML_ClubCampaignCards ^= """
			<frameinstance
				modelid="framemodel-club-campaign"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-club-campaign">
	<quad id="quad-bg" size="{{{Size_ClubCampaignImage.X}}} {{{Size_ClubCampaignImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip" z-index="0"/>
	<frameinstance id="control-block-list-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Size_ClubCampaignImage.X}}} {{{Size_ClubCampaignImage.Y}}}" data-image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-keepratio="clip" z-index="1" />
	<quad id="quad-gradient" size="{{{Size_ClubCampaignImage.X}}} {{{Size_ClubCampaignImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" opacity="0.7" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" z-index="2"/>
	<frameinstance id="control-block-list-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{Size_ClubCampaignImage.X * 0.75}}} 7" pos="{{{Pos_ClubName.X}}} {{{Pos_ClubName.Y}}}" data-opacity="0.7" data-halign="left" data-valign="center2" data-textsize="2" data-filter-profanities="OnlyIfNotTranslated" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" z-index="3" />
	<quad id="quad-contour" size="{{{Size_ClubCampaignImage.X}}} {{{Size_ClubCampaignImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" opacity="0." colorize="FFF" z-index="4"/>
	<frame size="{{{Size_ClubCampaignImage.X}}} {{{Size_ClubCampaignImage.Y}}}" pos="{{{Size_ClubCampaignImage.X/2}}} {{{-Size_ClubCampaignImage.Y/2}}}" halign="center" valign="center" z-index="5">
		<quad id="quad-hitbox" size="{{{Size_AdjustedClubCampaign.X}}} {{{Size_AdjustedClubCampaign.Y*1.5}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}" halign="center" valign="center" rot="10"/>
	</frame>
</framemodel>

<!-- Page -->
<frameinstance modelid="{{{BrowserAPI::C_Name}}}" id="frame-browser" z-index="{{{Const::C_ZIndex_BrowserAPI}}}" hidden="1"/>
<frameinstance id="loadingspinner-create-or-edit-rankings" modelid="{{{LoadingSpinner::C_Name}}}" data-dimmer="true" data-opacity="0." z-index="{{{Const::C_ZIndex_Loading}}}"/>

<!-- Frame global -->
<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="cancel;appmenu" data-nav-targets="_;_" data-nav-group="{{{C_NavGroup_Global}}}" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" z-index="-1"/>
	<frameinstance id="popupclubthemes-icon" modelid="{{{PopUpClubThemes::C_Name}}}" z-index="3"/>
	<frameinstance id="loadingspinner-retrieve-info" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-120., 20., 10.)}}}" data-label="{{{Text_RetrievingActivity}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" data-opacity="0." data-size="10 10" scale="0.7" z-index="2"/>
	<label id="label-title" pos="{{{MLHelpers::Skew(-127.7, 69.2, 10.)}}}" size="250 35" class="text-extrabold" textsize="13" halign="left" valign="top" z-index="1"/>
	<label id="label-info" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-semibold" textsize="2.5" halign="left"/>

	<!-- Step : RankingTypeSelection -->
	<frame id="frame-ranking-type-selection" pos="{{{MLHelpers::Skew(-127.5, -2.8, 10.)}}}" hidden="1">
		<frameinstance
			id="button-quarterly"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_QuarteryCampaign}}}"
			data-size="{{{Size_ButtonRoomType.X}}} {{{Size_ButtonRoomType.Y}}}"
			data-labelsize="{{{Size_ButtonRoomType.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{Const::C_ImageUrl_MapReview_YourMap}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
			data-contouropacityunfocus="0."
			data-tilthitbox="10"
			data-textsize="3."
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"
			data-autonewline="1" data-maxline="2"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;right;down;"
			data-nav-targets="_;button-daily;button-back"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			id="button-daily" pos="74. 0"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_DailyMap}}}"
			data-size="{{{Size_ButtonRoomType.X}}} {{{Size_ButtonRoomType.Y}}}"
			data-labelsize="{{{Size_ButtonRoomType.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{Image_ButtonMaps}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
			data-contouropacityunfocus="0."
			data-tilthitbox="10"
			data-textsize="3."
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"
			data-autonewline="1" data-maxline="2"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;left;right;down;"
			data-nav-targets="_;button-quarterly;button-campaign;button-back"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			id="button-campaign" pos="148. 0"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_SelectCampaign}}}"
			data-size="{{{Size_ButtonRoomType.X}}} {{{Size_ButtonRoomType.Y}}}"
			data-labelsize="{{{Size_ButtonRoomType.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{Image_ButtonCampaign}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
			data-contouropacityunfocus="0."
			data-tilthitbox="10"
			data-textsize="3."
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"
			data-autonewline="1" data-maxline="2"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;left;down;"
			data-nav-targets="_;button-daily;button-back"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>

	<!-- Campaign selection -->
	<frame id="frame-select-campaign" hidden="1">
		<label id="label-selection-info" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-extrabold" text="{{{Text_CampaignToUse}}}" textsize="3.5" halign="left"/>
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-campaigns" z-index="1" />
		<frame
			id="scroll-campaigns" pos="{{{Size_ClubCampaignScrollWindow.X * -0.525}}} 15"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			data-pager-page-size="{{{ClubCampaignsPerPage}}}"
			data-elements-per-line="{{{ClubCampaignsColumnsNb}}}"
			data-element-size="{{{Size_ClubCampaign.X}}} {{{Size_ClubCampaign.Y}}}"
			data-margin-size="{{{Size_ClubCampaignMargin.X}}} {{{Size_ClubCampaignMargin.Y}}}"
			data-window-size="{{{Size_ClubCampaignScrollWindow.X}}} {{{Size_ClubCampaignScrollWindow.Y}}}"
			data-scroll-indicator-x-offset="-10"
			data-scroll-indicator-y-offset="-13."
			data-scroll-indicator-image="{{{Icons::C_Icon_128x128_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-colorize="FFFFFF"
			data-scroll-indicator-size="12"
			data-scrollbar-xoffset="9."
			data-scrollpadding="8.5"
			data-skew="-10"
			data-nav-group="{{{C_NavGroup_Default}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_ClubCampaignCards}}}
		</frame>
	</frame>

	<!-- Step : SelectCampaign -->
	<frame id="frame-validate-creation" hidden="1">
		<label id="label-campaign-type" pos="{{{MLHelpers::Skew(-125., 51., 10.)}}}" size="200 10" class="text-extrabold" textsize="4." textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" halign="left"/>
		<frameinstance
			id="textfield-activity-name" pos="{{{MLHelpers::Skew(-125.3, 9., 10.)}}}"
			modelid="{{{TextField::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="73.5 9"
			data-placeholder="{{{Text_Name}}}"
			data-bgopacityunfocus="0.4"
			data-bgcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-bgcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-contourcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-contouropacityunfocus="0."
			data-contouropacityfocus="1."
			data-textsize="3."
			data-textcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;down;right"
			data-nav-targets="_;button-activity-logo;button-create"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{TextField::C_NavZone}}}"
		/>
		<frameinstance
			id="button-activity-logo" pos="{{{MLHelpers::Skew(-127.5, -15., 10.)}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="{{{MLHelpers::MLKeepRatioFromY(608., 272., 35.)}}}"
			data-opacityunfocus=".6"
			data-tts-text="{{{TTS_ChooseLogo}}}"
			data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-iconsize="13 13"
			data-bgkeepratio="clip"
			data-contouropacityunfocus="0."
			data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
			data-contourimage="{{{Const::C_ImageUrl_ClubActivity_Contour}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;up;down;right"
			data-nav-targets="_;textfield-activity-name;button-back;button-create"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>

	<!-- Bottom buttons -->
	<frameinstance id="button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
	<frameinstance
		id="button-back" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-max-width="60."
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;up;right"
		data-nav-targets="_;button-activity-logo;button-create"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance id="button-icon-create" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" data-halign="left" data-size="8 8" data-bind="appmenu" data-hideformouse="1" />
	<frameinstance
		id="button-create" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2" hidden="1"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_Create}}}"
		data-max-width="70."
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-halign="right"
		data-nav-inputs="select;up;left"
		data-nav-targets="_;button-activity-logo;button-back"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		data-nav-locked="1"
	/>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform

#Const C_DelayBetweenRequest 500
#Const C_Name_MaxChar 20

#Const C_Step_RankingTypeSelection 0
#Const C_Step_SelectCampaign 1
#Const C_Step_ValidateCreation 2

#Struct K_Controls {
	CMlFrame ButtonIcon_Create;
	CMlFrame Button_Back;
	CMlFrame Button_Create;
	CMlFrame Button_Logo;
	CMlFrame Button_Quarterly;
	CMlFrame Frame_Browser;
	CMlFrame Frame_Global;
	CMlFrame Frame_PopUpBackground;
	CMlFrame Frame_RankingTypeSelection;
	CMlFrame Frame_SelectCampaign;
	CMlFrame Frame_ValidateCreation;
	CMlFrame LoadingSpinner_CreateOrEditRankings;
	CMlFrame LoadingSpinner_RetrieveInfo;
	CMlFrame PopUpClubThemes_Icon;
	CMlFrame Scroll_Campaigns;
	CMlFrame TextField_ActivityName;
	CMlLabel Label_CampaignType;
	CMlLabel Label_Info;
	CMlLabel Label_SelectionInfo;
	CMlLabel Label_Title;
}

#Struct K_State {
	Integer Step;
	{{{ClubStruct::P}}}K_Activity Activity;
	Text CampaignName;
	Boolean IsEditing;
	K_Controls Controls;
}
""",
"""
// Enable or disable navigation groups
Void EnableNavigationGroups(Boolean _IsEnabled) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", _IsEnabled);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", _IsEnabled);
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{TextField::P}}}IsTextField(_From)) {
			{{{TextField::P}}}Unfocus(This, (_From as CMlFrame));
		} else if (_From.HasClass("{{{Scroll::C_Class_Window}}}")) {
			{{{Scroll::P}}}Unfocus(This, _From as CMlFrame);
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{TextField::P}}}IsTextField(_To)) {
			{{{TextField::P}}}Focus(This, (_To as CMlFrame));
		} else if (_To.HasClass("{{{Scroll::C_Class_Window}}}")) {
			{{{Scroll::P}}}Focus(This, _To as CMlFrame);
		}
	}
}

Void DisplayInfo(CMlLabel _Label_Info, Text _Text, Boolean _IsError) {
	declare Vec2 Pos_Hidden = MLHelpers::SkewX(<-126., 20.>, 10.);
	declare Vec2 Pos_Visible = MLHelpers::SkewX(<-125., 20.>, 10.);
	AnimMgr.Flush(_Label_Info);

	if (_Text != "") {
		_Label_Info.SetText(_Text);
		_Label_Info.Opacity = 0.;
		_Label_Info.RelativePosition_V3 = Pos_Hidden;
		if (_IsError) {
			_Label_Info.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextError)}}};
		} else {
			_Label_Info.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight)}}};
		}
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Visible.X^" "^Pos_Visible.Y^"\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void DisplayBrowser(Boolean _IsVisible, CMlFrame _Frame_Browser) {
	_Frame_Browser.Visible = _IsVisible;
	EnableNavigationGroups(!_IsVisible);
	{{{BrowserAPI::P}}}FocusBrowser(This, _IsVisible);
	if (_IsVisible) {
		declare BrowserSettings = {{{BrowserAPI::P}}}GetDefaultSettings();
		BrowserSettings.FilterByExtension = ["png", "jpg", "jpeg"];
		BrowserSettings.FilterClubThemeByMediaType = ["{{{ClubStruct::C_MediaType_Icon}}}"];
		BrowserSettings.DisplayFileNameTooltip = True;
		{{{BrowserAPI::P}}}SetCurrentBrowser(This,
			{{{BrowserAPI::C_BrowserType_PathNavigation}}},
			"{{{BrowserAPI::C_BrowserName_Image}}}",
			[{{{BrowserAPI::C_DataType_Image}}}],
			"",
			BrowserSettings
		);
		{{{BrowserAPI::P}}}RefreshBrowserData(This);
	} else {
		ControllerInfo::SetButtons(["A" => _("Select")]);
	}
}

Void ShowClubCampaign(CMlFrame _Frame_ClubCampaign, {{{CampaignStruct::P}}}K_Campaign _Campaign) {
	declare CMlFrame ControlBlockList_Name <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlFrame ControlBlockList_Image <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-image") as CMlFrame);

	/* Common */
	_Frame_ClubCampaign.Show();
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_Name, [_Campaign.CreatorAccountId, _Campaign.LatestEditorAccountId], _Campaign.Name);
	if (_Campaign.Media.ButtonBackgroundUrl != "") {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_Image, [_Campaign.CreatorAccountId, _Campaign.LatestEditorAccountId], _Campaign.Media.ButtonBackgroundUrl);
	} else {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_Image, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");
	}
	if ({{{ControlBlockList::P}}}IsBlocked(This, [_Campaign.CreatorAccountId, _Campaign.LatestEditorAccountId])) {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_ClubCampaign, {{{MenuSounds::P}}}C_Sound_SelectError);
	} else {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_ClubCampaign, {{{MenuSounds::P}}}C_Sound_Select);
	}
}

Void ShowClubCampaignLoading(CMlFrame _Frame_ClubCampaign) {
	declare CMlFrame ControlBlockList_Name <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlFrame ControlBlockList_Image <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-image") as CMlFrame);

	_Frame_ClubCampaign.Show();
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_Name, [], "{{{Text_Retrieving}}}");
	{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_Image, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");
}

Void HideClubCampaign(CMlFrame _Frame_ClubCampaign) {
	_Frame_ClubCampaign.Hide();
}

Void FocusClubCampaign(CMlFrame _Frame_ClubCampaign, Boolean _Focused, Boolean _IsTTSFocused) {
	declare CMlFrame ControlBlockList_Name <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlQuad Quad_Contour <=> (_Frame_ClubCampaign.GetFirstChild("quad-contour") as CMlQuad);
	declare CMlQuad Quad_Gradient <=> (_Frame_ClubCampaign.GetFirstChild("quad-gradient") as CMlQuad);

	AnimMgr.Flush(Quad_Contour);
	AnimMgr.Flush(Quad_Gradient);
	if (_Focused) {
		AnimMgr.Add(Quad_Contour, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 1., 250);
		if (_IsTTSFocused) {{{ControlBlockList::P}}}TTS_Focus(ControlBlockList_Name);
	} else {
		AnimMgr.Add(Quad_Contour, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 0.7, 250);
		{{{ControlBlockList::P}}}TTS_Unfocus(ControlBlockList_Name);
	}
}

K_State UpdateStep(K_State _State, Integer _Step) {
	declare K_State State = _State;
	State.Step = _Step;

	DisplayInfo(State.Controls.Label_Info, "", False);
	State.Controls.Frame_RankingTypeSelection.Visible = State.Step == C_Step_RankingTypeSelection;
	State.Controls.Frame_SelectCampaign.Visible = State.Step == C_Step_SelectCampaign;
	State.Controls.Frame_ValidateCreation.Visible = State.Step == C_Step_ValidateCreation;
	State.Controls.ButtonIcon_Create.Visible = State.Controls.Frame_ValidateCreation.Visible;
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_Create, State.Controls.Frame_ValidateCreation.Visible);

	switch (State.Step) {
		case C_Step_RankingTypeSelection: {
			{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Back, "up", State.Controls.Button_Quarterly.ControlId);
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Button_Quarterly);
		}
		case C_Step_SelectCampaign: {
			State.Activity.ExternalId = {{{CampaignStruct::P}}}C_Campaign_NullId;
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Scroll_Campaigns);
			{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Back, "up", State.Controls.Scroll_Campaigns.ControlId);
		}
		case C_Step_ValidateCreation: {
			if (State.Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingClub) {
				State.Controls.Label_CampaignType.SetText(TL::Compose("{{{Text_Campaign}}}", State.CampaignName));
			} else {
				State.Controls.Label_CampaignType.SetText({{{ClubStruct::P}}}C_ClubActivity_DisplayNames.get(State.Activity.Type, ""));
			}
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.TextField_ActivityName);
			{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Back, "up", State.Controls.Button_Logo.ControlId);
		}
	}

	return State;
}

K_State Cancel(K_State _State) {
	declare K_State State = _State;

	switch (State.Step) {
		case C_Step_RankingTypeSelection: {{{Router::P}}}PushParent(This);
		case C_Step_SelectCampaign: State = UpdateStep(State, C_Step_RankingTypeSelection);
		case C_Step_ValidateCreation: {
			if (State.IsEditing) {
				{{{Router::P}}}PushParent(This);
			} else {
				if (State.Activity.ExternalId != {{{CampaignStruct::P}}}C_Campaign_NullId) {
					State = UpdateStep(State, C_Step_SelectCampaign);
				} else {
					State = UpdateStep(State, C_Step_RankingTypeSelection);
				}
			}
		}
	}

	return State;
}

K_State Select(K_State _State, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-back": State = Cancel(State);
		case "button-quarterly": {
			State.Activity.Type = {{{ClubStruct::P}}}C_ClubActivity_RankingOfficial;
			State = UpdateStep(State, C_Step_ValidateCreation);
		}
		case "button-daily": {
			State.Activity.Type = {{{ClubStruct::P}}}C_ClubActivity_RankingDaily;
			State = UpdateStep(State, C_Step_ValidateCreation);
		}
		case "button-campaign": {
			State.Activity.Type = {{{ClubStruct::P}}}C_ClubActivity_RankingClub;
			State = UpdateStep(State, C_Step_SelectCampaign);
		}
		case "button-activity-logo": {
			if (Platform::IsFromFirstParty(System)) {
				{{{PopUpClubThemes::P}}}Open(This);
			} else {
				DisplayBrowser(True, State.Controls.Frame_Browser);
			}
		}
		case "button-create": {
			if (State.Step == C_Step_ValidateCreation) {
				if (State.Activity.Name == "") {
					DisplayInfo(State.Controls.Label_Info, "{{{Text_NoName}}}", False);
				} else {
					EnableNavigationGroups(False);
					{{{ClubStore::P}}}Action_CreateOrEditRankingsActivity(This, State.Activity, State.IsEditing);
					if (State.IsEditing) {
						{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditRankings, "{{{Text_EditingClubActivity}}}");
					} else {
						{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditRankings, "{{{Text_CreatingClubActivity}}}");
					}
				}
			}
		}
	}

	return State;
}

Void UpdateActivityLogo(K_State _State) {
	if (_State.Activity.MediaUrl != "") {
		if ({{{ClubStruct::P}}}IsClubThemeName(_State.Activity.MediaUrl)) {
			{{{Button::P}}}SetImage(This, _State.Controls.Button_Logo, {{{ClubStruct::P}}}GetClubThemeUrl(_State.Activity.MediaUrl, "{{{ClubStruct::C_MediaType_Icon}}}"));
			{{{Button::P}}}SetImageFocus(This, _State.Controls.Button_Logo, {{{ClubStruct::P}}}GetClubThemeUrl(_State.Activity.MediaUrl, "{{{ClubStruct::C_MediaType_Icon}}}"));
		} else if (Http.IsValidUrl(_State.Activity.MediaUrl) || {{{ClubStruct::P}}}IsClubThemeUrl(_State.Activity.MediaUrl)) {
			{{{Button::P}}}SetImage(This, _State.Controls.Button_Logo, _State.Activity.MediaUrl);
			{{{Button::P}}}SetImageFocus(This, _State.Controls.Button_Logo, _State.Activity.MediaUrl);
		} else {
			{{{Button::P}}}SetImage(This, _State.Controls.Button_Logo, {{{BrowserAPI::P}}}C_BasePath^_State.Activity.MediaUrl);
			{{{Button::P}}}SetImageFocus(This, _State.Controls.Button_Logo, {{{BrowserAPI::P}}}C_BasePath^_State.Activity.MediaUrl);
		}
		{{{Button::P}}}SetOpacityUnfocus(This, _State.Controls.Button_Logo, 0.75);
		{{{Button::P}}}SetIcon(This, _State.Controls.Button_Logo, "");
		{{{Button::P}}}SetIconFocus(This, _State.Controls.Button_Logo, "");
		{{{Button::P}}}SetBgColorType(This, _State.Controls.Button_Logo, {{{Button::C_ColorType_None}}});
	} else {
		{{{Button::P}}}SetOpacityUnfocus(This, _State.Controls.Button_Logo, 0.5);
		{{{Button::P}}}SetImage(This, _State.Controls.Button_Logo, "{{{Const::C_ImageUrl_ClubActivity}}}");
		{{{Button::P}}}SetImageFocus(This, _State.Controls.Button_Logo, "{{{Const::C_ImageUrl_ClubActivity}}}");
		{{{Button::P}}}SetIcon(This, _State.Controls.Button_Logo, "{{{Icons::C_Icon_128x128_Plus_Oblique}}}");
		{{{Button::P}}}SetIconFocus(This, _State.Controls.Button_Logo, "{{{Icons::C_Icon_128x128_Plus_Oblique}}}");
		{{{Button::P}}}SetBgColorType(This, _State.Controls.Button_Logo, {{{Button::C_ColorType_Colorize}}});
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_State State;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	Controls = K_Controls {
		Frame_Global = Frame_Global,
		Frame_Browser = (Page.GetFirstChild("frame-browser") as CMlFrame),
		Frame_PopUpBackground = (Frame_Global.GetFirstChild("frame-popup-background") as CMlFrame),
		Frame_RankingTypeSelection = (Frame_Global.GetFirstChild("frame-ranking-type-selection") as CMlFrame),
		Frame_SelectCampaign = (Frame_Global.GetFirstChild("frame-select-campaign") as CMlFrame),
		Frame_ValidateCreation = (Frame_Global.GetFirstChild("frame-validate-creation") as CMlFrame),
		ButtonIcon_Create = (Frame_Global.GetFirstChild("button-icon-create") as CMlFrame),
		Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
		Button_Create = (Frame_Global.GetFirstChild("button-create") as CMlFrame),
		Button_Logo = (Frame_Global.GetFirstChild("button-activity-logo") as CMlFrame),
		Button_Quarterly = (Frame_Global.GetFirstChild("button-quarterly") as CMlFrame),
		Label_CampaignType = (Frame_Global.GetFirstChild("label-campaign-type") as CMlLabel),
		Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
		Label_SelectionInfo = (Frame_Global.GetFirstChild("label-selection-info") as CMlLabel),
		Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
		LoadingSpinner_CreateOrEditRankings = (Page.GetFirstChild("loadingspinner-create-or-edit-rankings") as CMlFrame),
		LoadingSpinner_RetrieveInfo = (Frame_Global.GetFirstChild("loadingspinner-retrieve-info") as CMlFrame),
		PopUpClubThemes_Icon = (Frame_Global.GetFirstChild("popupclubthemes-icon") as CMlFrame),
		Scroll_Campaigns = (Frame_Global.GetFirstChild("scroll-campaigns") as CMlFrame),
		TextField_ActivityName = (Frame_Global.GetFirstChild("textfield-activity-name") as CMlFrame)
	}
};
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_CreateRankingsActivity}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				declare Integer CurrentClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;
				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);

				State.IsEditing = Query.existskey("{{{RoutePaths::C_Query_Activity}}}");
				if (State.IsEditing) {
					State.Activity.fromjson(Query["{{{RoutePaths::C_Query_Activity}}}"]);
					State.Controls.Label_Title.SetText("{{{Text_EditRankings}}}");
					{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Create, "{{{Text_Save}}}");
					if ({{{ClubStruct::P}}}IsClubThemeUrl(State.Activity.MediaUrl)) {{{PopUpClubThemes::P}}}SelectClubTheme(This, State.Activity.MediaUrl);
					else {{{PopUpClubThemes::P}}}SelectClubTheme(This, {{{PopUpClubThemes::P}}}C_Choice_None);
					State = UpdateStep(State, C_Step_ValidateCreation);
					// We need to load the details of the campaign if it's using one
					if (State.Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingClub && State.Activity.ExternalId != {{{CampaignStruct::P}}}C_Campaign_NullId) {
						{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
						{{{CampaignStore::P}}}Action_LoadCampaign(This, State.Activity.ExternalId, State.Activity.ClubId);
					}
				} else {
					State = UpdateStep(State, C_Step_RankingTypeSelection);
					{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Create, "{{{Text_Create}}}");
					{{{PopUpClubThemes::P}}}SelectClubTheme(This, {{{PopUpClubThemes::P}}}C_Choice_None);
					State.Controls.Label_Title.SetText("{{{Text_CreateRankings}}}");
					State.Activity = {{{ClubStruct::P}}}K_Activity {
						ClubId = CurrentClubId,
						ExternalId = {{{CampaignStruct::P}}}C_Campaign_NullId
					};
				}

				UpdateActivityLogo(State);
				{{{Scroll::P}}}TriggerPagerUpdate(State.Controls.Scroll_Campaigns);
				{{{TextField::P}}}SetValue(This, State.Controls.TextField_ActivityName, State.Activity.Name);
				ControllerInfo::SetButtons(["A" => _("Select")]);
			}
		}
	}

	/* Browser events */
	foreach (Event in {{{BrowserAPI::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{BrowserAPI::P}}}C_EventType_Select: {
				DisplayBrowser(False, State.Controls.Frame_Browser);
				if (Event.DataType == {{{BrowserAPI::P}}}C_DataType_Image) {
					declare Text MediaUrl = {{{BrowserAPI::P}}}C_BasePath_Media^Event.Data;
					declare Text FullMediaUrl = {{{BrowserAPI::P}}}C_BasePath^MediaUrl;

					if ({{{ClubStruct::P}}}IsClubThemeUrl(FullMediaUrl)) {
						State.Activity.MediaUrl = {{{ClubStruct::P}}}GetClubThemeName(FullMediaUrl);
					} else {
						State.Activity.MediaUrl = MediaUrl;
					}

					UpdateActivityLogo(State);
				}
			}
			case {{{BrowserAPI::P}}}C_EventType_Cancel: {
				DisplayBrowser(False, State.Controls.Frame_Browser);
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}") || {{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Event.To);
						case CMlScriptEvent::EMenuNavAction::AppMenu: State = Select(State, State.Controls.Button_Create);
						case CMlScriptEvent::EMenuNavAction::Cancel: State = Cancel(State);
						default: Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Event.To);
						case CMlScriptEvent::Type::MouseOver: Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* Activity image events */
	foreach (Event in {{{PopUpClubThemes::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{PopUpClubThemes::P}}}C_EventType_Display: EnableNavigationGroups(!Event.PopUpClubThemes.Visible);
			case {{{PopUpClubThemes::P}}}C_EventType_Confirm: {
				if (Event.PopUpClubThemes != Null && Event.PopUpClubThemes.Id == State.Controls.PopUpClubThemes_Icon.Id) {
					if (Event.MediaUrl != "") State.Activity.MediaUrl = Event.ThemeName;
					else State.Activity.MediaUrl = Event.MediaUrl;
					ControllerInfo::SetButtons(["A" => _("Select")]);
					UpdateActivityLogo(State);
				}
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background" && {{{Navigation::P}}}GroupIsEnabled(This, "{{{C_NavGroup_Default}}}")) {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: {{{Router::P}}}PushParent(This);
			}
		}
	}

	/* CampaignStore events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{CampaignStore::P}}}C_Event_CampaignUpdated: {
						{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
						if (Event.CustomEventData.count > 0 && Event.CustomEventData[0] == ""^State.Activity.ExternalId) {
							State.CampaignName = {{{CampaignStore::P}}}GetCampaignFromId(State.Activity.ExternalId).Name;
							State = UpdateStep(State, C_Step_ValidateCreation);
						}
					}
					case {{{CampaignStore::P}}}C_Event_CampaignUpdateFailed: {
						{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
						if (Event.CustomEventData.count > 1 && Event.CustomEventData[0] == ""^State.Activity.ExternalId) {
							DisplayInfo(State.Controls.Label_Info, Event.CustomEventData[1], True);
						}
					}
					case {{{ClubStore::P}}}C_Event_RankingsActivityCreatedOrEdited: {
						{{{Router::P}}}PushParent(This);
					}
					case {{{ClubStore::P}}}C_Event_RankingsActivityCreationOrEditionFailed: {
						{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditRankings);
						EnableNavigationGroups(True);
						if (Event.CustomEventData.count > 0) {
							DisplayInfo(State.Controls.Label_Info, Event.CustomEventData[0], True);
						}
					}
					case {{{CampaignStore::P}}}C_Event_ClubsCampaignListUpdated: {
						if (Event.CustomEventData.count > 0) {
							declare Integer CurrentClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;
							if (TL::ToInteger(Event.CustomEventData[0]) == CurrentClubId) {
								{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Campaigns, {{{CampaignStore::P}}}GetClubCampaignsTotal(CurrentClubId));
							}
						}
					}
				}
			}
		}
	}

	/* TextField events */
	foreach (Event in {{{TextField::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TextField::P}}}C_EventType_Update: {
				if (Event.Control != Null && Event.Control.ControlId == State.Controls.TextField_ActivityName.ControlId) {
					if (Event.Value != State.Activity.Name) {
						declare Text NewName = Tools::FormatValue(Event.Value);
						declare Integer Length = TL::Length(TL::StripFormatting(NewName));
						if (Length > C_Name_MaxChar) {
							//L16N [CreateBucketActivity] Message displayed when the activity name exceeds the maximum number of characters. %1 will be replaced by a number, e.g. "The activity name has a maximum of 20 characters"
							DisplayInfo(State.Controls.Label_Info, TL::Compose(_("The name activity has a maximum of %1 characters"), ""^C_Name_MaxChar), False);
							NewName = TL::SubText(NewName, 0, C_Name_MaxChar);
						} else {
							DisplayInfo(State.Controls.Label_Info, "", False);
						}
						State.Activity.Name = NewName;
						{{{TextField::P}}}SetValue(This, State.Controls.TextField_ActivityName, NewName);
					}
				}
			}
		}
	}

	/* Scroll events */
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null) {
			switch (Event.Scroll.Id) {
				case State.Controls.Scroll_Campaigns.Id: {
					switch (Event.Type) {
						case {{{Scroll::P}}}C_EventType_PagerUpdate: {
							{{{CampaignStore::P}}}Action_LoadClubsCampaigns(
								This,
								{{{ClubStore::P}}}GetUserCurrentClub().Id,
								Event.PagerOffset,
								Event.PagerCount
							);
						}
						case {{{Scroll::P}}}C_EventType_Update: {
							declare {{{CampaignStruct::P}}}K_Campaign[Integer] ClubCampaigns = {{{CampaignStore::P}}}GetClubCampaignList({{{ClubStore::P}}}GetUserCurrentClub().Id);

							foreach (Key => Frame_Element in Event.ElementsVisible) {
								if (ClubCampaigns.existskey(Key)) {
									ShowClubCampaign(Frame_Element, ClubCampaigns[Key]);
								} else {
									ShowClubCampaignLoading(Frame_Element);
								}
							}
							foreach (Key => Frame_Element in Event.ElementsHidden) {
								HideClubCampaign(Frame_Element);
							}

							if (Event.ElementsVisible.count > 0) {
								State.Controls.Label_SelectionInfo.SetText("{{{Text_CampaignToUse}}}");
							} else {
								State.Controls.Label_SelectionInfo.SetText("{{{Text_NoCampaign}}}");
							}
						}
						case {{{Scroll::P}}}C_EventType_Focus: {
							if (Event.From != Null) FocusClubCampaign(Event.From, False, State.Step == C_Step_SelectCampaign);
							if (Event.To != Null) FocusClubCampaign(Event.To, True, State.Step == C_Step_SelectCampaign);
							if (Event.IsMouse && Event.To != Null && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
								Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Event.Scroll);
							}
						}
						case {{{Scroll::P}}}C_EventType_Select: {
							declare {{{CampaignStruct::P}}}K_Campaign[Integer] ClubCampaigns = {{{CampaignStore::P}}}GetClubCampaignList({{{ClubStore::P}}}GetUserCurrentClub().Id);
							if (ClubCampaigns.existskey(Event.ToKey)) {
								declare {{{CampaignStruct::P}}}K_Campaign ClubCampaign = ClubCampaigns[Event.ToKey];
								if (!{{{ControlBlockList::P}}}IsBlocked(This, [ClubCampaign.CreatorAccountId, ClubCampaign.LatestEditorAccountId])) {
									State.Activity.ExternalId = ClubCampaign.Id;
									State.CampaignName = ClubCampaign.Name;
									State = UpdateStep(State, C_Step_ValidateCreation);
								}
							}
						}
						case {{{Scroll::P}}}C_EventType_ReachLimit: {
							if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Left || Event.NavAction == CMlScriptEvent::EMenuNavAction::Down) {
								Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Button_Back);
								{{{MenuSounds::P}}}PlayFocusSound(This, State.Controls.Button_Back);
							}
						}
					}
				}
			}
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_LeavingRoute}}}": {
				State = K_State { Controls = State.Controls };
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditRankings);
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
				EnableNavigationGroups(True);
			}
		}
	}
}
***
""",
[
	BrowserAPI::ComponentV2(),
	Button::ComponentV2(),
	ButtonIcon::ComponentV2(),
	CampaignStore::ComponentV2(),
	CampaignStruct::Component(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	ControlBlockList::ComponentV2(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpBackground::ComponentV2(),
	PopUpClubThemes::ComponentV2(),
	Router::ComponentV2(),
	Scroll::ComponentV2(),
	TextField::ComponentV2(),
	Transition::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}