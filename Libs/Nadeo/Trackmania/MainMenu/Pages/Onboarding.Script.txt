/**
 *	Page: Onboarding
 */
#Const Version		"1.1.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/Onboarding.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/Trackmania/Components/Settings.Script.txt" as Settings
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_Onboarding"
#Const C_NavGroupName "navgroup-page-onboarding"
#Const C_MenuBackground_DimmerOpacity 0.4

// Settings
#Const C_SettingCategory_General 1
#Const C_SettingId_AccessibilitySection 1
#Const C_SettingId_SystemSection 2

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [Onboarding] Title of the onboarding page
	declare Text Text_Title = _("Customize your experience");
	//L16N [Onboarding] Subtitle of the onboarding page
	declare Text Text_SubTitle = _("You will be able to modify these features later in the settings page.");

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<frame id="frame-global">
	<frameinstance modelid="{{{Settings::C_Name}}}" />
	<label id="label-title" pos="{{{MLHelpers::Skew(-132., 55.2, 10.)}}}" size="250 10" class="text-extrabold" text="{{{Text_Title}}}" textsize="8" halign="left" valign="bottom" z-index="1"/>
	<label id="label-subtitle" pos="{{{MLHelpers::Skew(-132., 54.8, 10.)}}}" size="250 5" class="text-semibold" text="{{{Text_SubTitle}}}" textsize="2.8" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" halign="left" valign="top" z-index="1"/>
</frame>
""",
"""
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as Config
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform

#Const C_SettingCategory_General {{{dump(C_SettingCategory_General)}}}
#Const C_SettingId_AccessibilitySection {{{dump(C_SettingId_AccessibilitySection)}}}
#Const C_SettingId_SystemSection {{{dump(C_SettingId_SystemSection)}}}
""",
"""

***MainStart***
***
{{{Settings::P}}}Initialize([
	{{{Settings::P}}}K_Setting {
		Id = C_SettingId_AccessibilitySection,
		Category = C_SettingCategory_General,
		//L16N [Settings] Section grouping accessibility settings
		Name = _("Accessibility"),
		Type = {{{Settings::P}}}C_SettingType_Section
	},
	{{{Settings::P}}}K_Setting {
		Id = {{{Settings::P}}}C_SettingId_SystemColorblindMode,
		Category = C_SettingCategory_General,
		//L16N [Settings] Mode to change the colors on some elements to improve visibility for colorblind players
		Name = _("Colorblind mode"),
		Type = {{{Settings::P}}}C_SettingType_Checkbox,
		//L16N [Settings] Description of the "Colorblind mode" setting
		InfoDescription = _("Improve visibility and colors for colorblind users")
	},
	{{{Settings::P}}}K_Setting {
		Id = {{{Settings::P}}}C_SettingId_SoundTextToSpeech,
		Category = C_SettingCategory_General,
		//L16N [Settings] Enable the narration of the navigation in menus and text messages (English only)
		Name = _("Text to speech"),
		Type = {{{Settings::P}}}C_SettingType_Checkbox,
		//L16N [Settings] Description of the "Text to speech" setting
		InfoDescription = _("Enable the narration of the navigation in menus and text messages (English only)")
	},
	{{{Settings::P}}}K_Setting {
		Id = C_SettingId_SystemSection,
		Category = C_SettingCategory_General,
		//L16N [Settings] Section grouping system settings
		Name = _("System"),
		Type = {{{Settings::P}}}C_SettingType_Section
	},
	{{{Settings::P}}}K_Setting {
		Id = {{{Settings::P}}}C_SettingId_VideoPerformanceQuality,
		Category = C_SettingCategory_General,
		//L16N [Settings] Select between performance (higher frame rates) or quality (higher grahic quality) mode
		Name = _("Performance or quality mode"),
		Type = {{{Settings::P}}}C_SettingType_List,
		List = {{{Settings::P}}}K_List {
			Labels = [
				_("Performance"),
				//L16N [Settings] Same as performance but with 120 frames per second
				_("Performance 120FPS")
			],
			ValuesConsoleResolution = [
				CDisplaySettings::EConsoleResolution::Performance,
				CDisplaySettings::EConsoleResolution::UltraPerformance
			]
		},
		PlatformFamily = [Platform::C_Family_Console, Platform::C_Family_Streaming],
		//L16N [Settings] Description of the "Performance or quality mode" setting
		InfoDescription = _("Prioritize performance or image quality. Select performance for higher frame rates or quality for higher graphic quality.")
	},
	{{{Settings::P}}}K_Setting {
		Id = {{{Settings::P}}}C_SettingId_ControlLatencyTest,
		Category = C_SettingCategory_General,
		//L16N [Settings] Calculate the input lag by pressing the button when it appears
		Name = _("Latency test"),
		Type = {{{Settings::P}}}C_SettingType_Button,
		//L16N [Settings] Description of the "Latency test" setting. %1 will be replaced by the average input latency of players in milliseconds. e.g. "Average players latency is 15ms"
		InfoDescription = _("Calculate the input lag by pressing the button when it appears\nYou can reduce your latency by setting your TV to « Gaming » mode\nAverage players latency is $<$6FA%1$>ms"),
		//L16N [Settings] Clicking on this button starts the latency test
		ButtonText = _("|Latency test|Start test")
	},
	{{{Settings::P}}}K_Setting {
		Id = {{{Settings::P}}}C_SettingId_VideoOutputScale,
		Category = C_SettingCategory_General,
		//L16N [Settings] Resizes the display area to fit the screen while maintaining the aspect ratio
		Name = _("Display area calibration"),
		Type = {{{Settings::P}}}C_SettingType_Slider,
		Slider = {{{Settings::P}}}K_Slider {
			Type = {{{Settings::P}}}C_SliderType_Real,
			RangeReal = <0.25, 1.>
		},
		//L16N [Settings] Description of the "Display area calibration" setting
		InfoDescription = _("Resizes the display area to fit the screen while maintaining the aspect ratio"),
		Platforms = [CSystemPlatform::ESystemPlatform::XBoxOne, CSystemPlatform::ESystemPlatform::XBoxSeries]
	}
]);
{{{Settings::P}}}EnableLatencyTest(True);
{{{Settings::P}}}EnableControllerInfo(True);
{{{Settings::P}}}EnableOnboardingMode(True);
{{{Settings::P}}}SetBackgroundVisibility(False);
{{{Settings::P}}}SetPlayerCardVisibility(False);
{{{Settings::P}}}SetNavigationTabsVisibility(False);
***

***MainLoop***
***
foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
	switch (Event.Type) {
		case "{{{Router::C_Event_EnteringRoute}}}": {{{Settings::P}}}Enable(True);
		case "{{{Router::C_Event_LeavingRoute}}}": {{{Settings::P}}}Enable(False);
	}
}

if (PageIsVisible) {
	foreach (Event in {{{Settings::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{Settings::P}}}C_EventType_Continue: {
				Page.GetFirstChild("frame-global").Hide();
				{{{UserStore::P}}}SetUserHasSeenOnboardingOptions(True);
				if ({{{UserStore::P}}}IsOfflineMode()) {
					{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Home}}}");
					{{{UserStore::P}}}SetCurrentPlayTabIndex({{{Const::C_TabIndex_Solo}}});
				} else if ((Platform::IsPC(System) || Platform::IsSony(System)) && !{{{UserStore::P}}}GetUserHasSetAdvertsPreferences()) {
					{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_AdsPreferences}}}");
				} else if (LocalUser.ZonePath == "" || LocalUser.ZonePath == Config::Get().DefaultMasterZone) {
					{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_WelcomeChangeZone}}}");
				} else {
					{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Home}}}");
				}
			}
		}
	}
}
***
""",
[
	Router::ComponentV2(),
	Settings::Component(),
	UserStore::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}