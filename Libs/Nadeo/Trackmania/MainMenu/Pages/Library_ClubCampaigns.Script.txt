/**
 *	Page: Library_ClubCampaigns
 */
#Const Version		"1.1.3"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/Library_ClubCampaigns.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/Trackmania/Components/TitleBar2.Script.txt" as TitleBar
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/Trackmania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "MathLib" as ML
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_Library_ClubCampaigns"
#Const C_NavGroup_Default "navgroup-page-library_clubcampaigns"
#Const C_Class_Featured "class-page-library_clubcampaigns-featured"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

#Const C_ScrollView_Grid "grid"
#Const C_ScrollView_List "list"

#Const C_Tab_ClubCampaigns 0
#Const C_TabNames [
	//L16N [Library ClubCampaigns] Title of the section displaying the club campaigns
	0 => _("Club campaigns")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [Library ClubCampaigns] Retrieving club campaigns data.
	declare Text Text_RetrievingClubCampaigns = _("Retrieving club campaigns");
	//L16N [Library ClubCampaigns] Text displayed when no club campaigns exists.
	declare Text Text_NoClubCampaigns = _("No club campaigns");
	//L16N [Library ClubCampaigns] Text displayed when a search returns no results.
	declare Text Text_NoSearchResult = _("Your search did not return any results");
	//L16N [Library ClubCampaigns] Display the number of track in a club campaign.
	declare Text Text_Track = _("1 track");
	//L16N [Library ClubCampaigns] Display the number of tracks in a club campaign.
	declare Text Text_Tracks = _("%1 tracks");
	//L16N [Library ClubCampaigns] Title of the featured campaign section.
	declare Text Text_Featured = _("Featured club campaigns");

	/* Scroll view commons */
	declare Vec2 Size_SearchBar = <60., 9.5>;
	declare Scroll::K_Config ScrollConfig = Scroll::K_Config {
		AnimEnabled = True,
		HeaderHeight = 70.5,
		PreScrollEnabled = True,
		PreScrollBefore = 2,
		PreScrollAfter = 1,
		ScrollBarVisibility = Scroll::C_ScrollBarVisibility_DuringScroll,
		ScrollBarXOffset = 23.,
		ScrollGrid = <8., 8.>,
		ScrollIndicator = True,
		ScrollIndicatorColorize = <1., 1., 1.>,
		ScrollIndicatorImage = Icons::C_Icon_128x128_Arrow_Bottom_Oblique,
		ScrollIndicatorSize = 11.,
		ScrollIndicatorXOffset = -9.5,
		ScrollIndicatorYOffset = -10.,
		ScrollPadding = 22.5,
		Skew = -10.,
		SkewHeader = True,
		SkewVAlign = Scroll::C_SkewVAlign_Top,
		WindowSize = <256., 120.>
	};

	/* Headers */
	declare Text[Text] HeaderButtons_MLs;
	declare Real SizeX_HeaderButtonMargin = 3.;
	declare Vec2 Size_HeaderButton = MLHelpers::KeepRatioFromY(608., 272., 40.);
	declare Vec2 Size_AdjustedHeaderButton = <Size_HeaderButton.X - MLHelpers::SkewX(Size_HeaderButton.Y, 10.),	Size_HeaderButton.Y>;

	foreach (Layout in [C_ScrollView_Grid, C_ScrollView_List]) {
		declare Text Featured_ML = """
			<frameinstance
				id="frame-featured-campaigns-title-{{{Layout}}}" z-index="1"
				pos="{{{MLHelpers::Skew(0.5, 0., 10.)}}}"
				modelid="{{{ExpendableButton::C_Name}}}"
				data-text="{{{Text_Featured}}}"
				data-styles="{{{ExpendableButton::C_Style_Tabs}}}"
			/>
			<frame id="frame-featured-campaigns-{{{Layout}}}">
		""";

		for (Key, 0, 2) {
			declare Text LeftTarget = "button-featured-campaign-"^Layout^"-"^ML::Clamp(Key-1, 0, 2);
			declare Text RightTarget = "button-featured-campaign-"^Layout^"-"^ML::Clamp(Key+1, 0, 2);
			if (Key == 0) LeftTarget = "button-back";
			Featured_ML ^= """
				<frame
					id="button-featured-campaign-{{{Layout}}}-{{{Key}}}"
					pos="{{{-MLHelpers::SkewX(Size_HeaderButton.Y, 10.) + Key * (Size_AdjustedHeaderButton.X + SizeX_HeaderButtonMargin)}}} -12.5"
					class="{{{Navigation::C_Class}}} {{{C_Class_Featured}}}"
					data-campaign-key="{{{Key}}}"
					data-nav-inputs="select;cancel;left;right;down"
					data-nav-targets="_;_;{{{LeftTarget}}};{{{RightTarget}}};scroll-club-campaigns-{{{Layout}}}"
					data-nav-group="{{{C_NavGroup_Default}}}"
					data-nav-zone="quad-hitbox-activity"
				>
					<quad id="quad-background" size="{{{Size_HeaderButton.X}}} {{{Size_HeaderButton.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" keepratio="clip" z-index="0"/>
					<frameinstance id="control-block-list-club-campaign-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Size_HeaderButton.X}}} {{{Size_HeaderButton.Y}}}" data-image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-keepratio="clip" z-index="1" />
					<quad id="quad-gradient" size="{{{Size_HeaderButton.X}}} {{{Size_HeaderButton.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity=".7" z-index="2"/>
					<frameinstance id="control-block-list-club-campaign-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{Size_HeaderButton.X*0.9}}} 10" pos="{{{MLHelpers::Skew(10., -Size_HeaderButton.Y + 4., 10.)}}}" data-halign="left" data-valign="center2" data-textsize="3.5" data-opacity="0.7" data-filter-profanities="OnlyIfNotTranslated" z-index="3" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" />
					<quad id="quad-contour" size="{{{Size_HeaderButton.X}}} {{{Size_HeaderButton.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" opacity="0." colorize="FFF" z-index="4"/>
					<frame size="{{{Size_HeaderButton.X}}} {{{Size_HeaderButton.Y}}}" pos="{{{Size_HeaderButton.X/2}}} {{{-Size_HeaderButton.Y/2}}}" halign="center" valign="center" z-index="5">
						<quad id="quad-hitbox-activity" size="{{{Size_AdjustedHeaderButton.X}}} {{{Size_AdjustedHeaderButton.Y*1.5}}}" scriptevents="1" class="{{{Navigation::C_Class_ActivationZone}}}" halign="center" valign="center" rot="10"/>
					</frame>
				</frame>
			""";
		}

		Featured_ML ^= """</frame>""";

		/* Set HeaderButtons_ML of the corresponding scrollview layout */
		HeaderButtons_MLs[Layout] = Featured_ML;
	}

	/* Grid scroll view */
	declare Integer Grid_ColumnsNb = 6;
	declare Integer Grid_RowsNb = 6;
	declare Integer Grid_ClubCampaignsPerPage = Grid_ColumnsNb * Grid_RowsNb;
	declare Vec2 Grid_Size_ClubCampaignMargin = <0., 2.>;
	declare Vec2 Grid_Size_ScrollOverflow = <(Grid_ColumnsNb-1)*Grid_Size_ClubCampaignMargin.X, (Grid_RowsNb-1)*(Grid_Size_ClubCampaignMargin.Y-1.)>;
	declare Vec2 Grid_Size_ClubCampaign = Scroll::GetElementSize(ScrollConfig.WindowSize, Grid_Size_ClubCampaignMargin, Grid_ColumnsNb, Grid_RowsNb, Grid_Size_ScrollOverflow);
	declare Integer Grid_ElementsNb = Scroll::GetRequiredElementsNb(ScrollConfig.WindowSize, Grid_Size_ClubCampaign, Grid_Size_ClubCampaignMargin, Grid_ColumnsNb);

	declare Vec2 Grid_Size_ClubCampaignBg = MLHelpers::KeepRatioFromY(608., 272., Grid_Size_ClubCampaign.Y);
	declare Vec2 Grid_Size_AdjustedClubCampaignBg = <Grid_Size_ClubCampaignBg.X - MLHelpers::SkewX(Grid_Size_ClubCampaignBg.Y, 10.),	Grid_Size_ClubCampaignBg.Y>;
	declare Vec2 Grid_Size_ClubCampaignName = <Grid_Size_AdjustedClubCampaignBg.X * 0.9, 10.>;
	declare Vec2 Grid_Pos_ClubCampaignName = MLHelpers::SkewX(<5., -Grid_Size_AdjustedClubCampaignBg.Y + 3.>, 10.);
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] Grid_Actions = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Icons::C_Icon_128x128_List_View, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Icons::C_Icon_128x128_Glass, <8., 8.>, -1., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	declare Text ML_Grid_ClubCampaigns = "";
	for (I, 1, Grid_ElementsNb) {
		ML_Grid_ClubCampaigns ^= """
			<frameinstance
				modelid="framemodel-grid-club-campaign"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	/* List scroll view */
	declare Integer List_ColumnsNb = 1;
	declare Integer List_RowsNb = 11;
	declare Integer List_ClubCampaignsPerPage = List_ColumnsNb * List_RowsNb;
	declare Vec2 List_Size_ClubCampaignMargin = <0., 1.>;
	declare Vec2 List_Size_ClubCampaign = Scroll::GetElementSize(ScrollConfig.WindowSize, List_Size_ClubCampaignMargin, List_ColumnsNb, List_RowsNb);
	declare Integer List_ElementsNb = Scroll::GetRequiredElementsNb(ScrollConfig.WindowSize, List_Size_ClubCampaign, List_Size_ClubCampaignMargin, List_ColumnsNb);

	declare Vec2 List_Size_ClubCampaignBg = <List_Size_ClubCampaign.X - MLHelpers::SkewX(Grid_Size_ClubCampaignBg.Y/2, 10.), Grid_Size_ClubCampaignBg.Y/2>;
	declare Vec2 List_Size_ClubCampaignImage = MLHelpers::KeepRatioFromY(608., 272., List_Size_ClubCampaignBg.Y);
	declare Vec2 List_Pos_ClubCampaignImage = <0., List_Size_ClubCampaignBg.Y * -0.5>;
	declare Vec2 List_Pos_ClubCampaignName = <List_Size_ClubCampaignBg.X * 0.1, List_Size_ClubCampaignBg.Y * -0.55>;
	declare Vec2 List_Pos_ClubName = <List_Size_ClubCampaignBg.X * 0.64, List_Size_ClubCampaignBg.Y * -0.55>;
	declare Vec2 List_Pos_ClubCampaignCount = <List_Size_ClubCampaignBg.X * 0.935, List_Size_ClubCampaignBg.Y * -0.55>;
	declare Vec2 List_Pos_ClubCampaignPopularity = <List_Size_ClubCampaignBg.X * 0.965, List_Size_ClubCampaignBg.Y * -0.5>;
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] List_Actions = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Icons::C_Icon_128x128_Grid_View, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Icons::C_Icon_128x128_Glass, <8., 8.>, -1., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	declare Text ML_List_ClubCampaigns = "";
	for (I, 1, List_ElementsNb) {
		ML_List_ClubCampaigns ^= """
			<frameinstance
				modelid="framemodel-list-club-campaign"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textprefix="$t$i" textcolor="FFFFFF" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"/>
	<style class="text-extrabold" halign="center" valign="center2" textprefix="$t$i" textcolor="FFFFFF" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"/>
	<style class="text-search" textsize="2" halign="center" valign="center2" textprefix="$i" textcolor="FFFFFF" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-grid-club-campaign">
	<quad id="quad-background" size="{{{Grid_Size_ClubCampaignBg.X}}} {{{Grid_Size_ClubCampaignBg.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" keepratio="clip" z-index="0"/>
	<frameinstance id="control-block-list-club-campaign-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Grid_Size_ClubCampaignBg.X}}} {{{Grid_Size_ClubCampaignBg.Y}}}" data-image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-keepratio="clip" z-index="1" />
	<quad id="quad-gradient" size="{{{Grid_Size_ClubCampaignBg.X}}} {{{Grid_Size_ClubCampaignBg.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" opacity=".7" z-index="2"/>
	<frameinstance id="control-block-list-club-campaign-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{Grid_Size_ClubCampaignName.X}}} {{{Grid_Size_ClubCampaignName.Y}}}" pos="{{{Grid_Pos_ClubCampaignName.X}}} {{{Grid_Pos_ClubCampaignName.Y}}}" data-halign="left" data-valign="center2" data-textsize="1.5" data-opacity="0.7" data-filter-profanities="OnlyIfNotTranslated" z-index="3" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" />
	<quad id="quad-contour" size="{{{Grid_Size_ClubCampaignBg.X}}} {{{Grid_Size_ClubCampaignBg.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" opacity="0." colorize="FFF" z-index="4"/>
	<frame size="{{{Grid_Size_ClubCampaignBg.X}}} {{{Grid_Size_ClubCampaignBg.Y}}}" pos="{{{Grid_Size_ClubCampaignBg.X/2}}} {{{-Grid_Size_ClubCampaignBg.Y/2}}}" halign="center" valign="center" z-index="5">
		<quad id="quad-hitbox-activity" size="{{{Grid_Size_AdjustedClubCampaignBg.X}}} {{{Grid_Size_AdjustedClubCampaignBg.Y*1.5}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}" halign="center" valign="center" rot="10"/>
	</frame>
</framemodel>
<framemodel id="framemodel-list-club-campaign">
	<frameinstance id="frame-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{List_Size_ClubCampaignBg.X}}}" data-height="{{{List_Size_ClubCampaignBg.Y}}}" data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" data-opacity="0.6" data-halign="left" data-valign="top" z-index="0"/>
	<quad id="quad-background" size="{{{List_Size_ClubCampaignImage.X}}} {{{List_Size_ClubCampaignImage.Y}}}" pos="{{{List_Pos_ClubCampaignImage.X}}} {{{List_Pos_ClubCampaignImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" halign="left" valign="center" keepratio="clip" z-index="1"/>
	<frameinstance id="control-block-list-club-campaign-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{List_Size_ClubCampaignImage.X}}} {{{List_Size_ClubCampaignImage.Y}}}" pos="{{{List_Pos_ClubCampaignImage.X}}} {{{List_Pos_ClubCampaignImage.Y}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-halign="left" data-valign="center" data-keepratio="clip" z-index="2" />
	<frameinstance id="control-block-list-club-campaign-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{List_Size_ClubCampaignBg.X * 0.35}}} {{{List_Size_ClubCampaignBg.Y}}}" pos="{{{List_Pos_ClubCampaignName.X}}} {{{List_Pos_ClubCampaignName.Y}}}" data-halign="left" data-valign="center2" data-textsize="3" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-opacity="0.6" data-filter-profanities="OnlyIfNotTranslated" z-index="2" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" />
	<frameinstance id="control-block-list-club-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{List_Size_ClubCampaignBg.X * 0.3}}} {{{List_Size_ClubCampaignBg.Y}}}" pos="{{{List_Pos_ClubName.X}}} {{{List_Pos_ClubName.Y}}}" data-textsize="3" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-opacity="0.6" data-filter-profanities="OnlyIfNotTranslated" z-index="2" data-halign="center" data-valign="center2" data-textprefix="$t$i" data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" data-text-blocked=" " />
	<label id="label-tracks-count" size="{{{List_Size_ClubCampaignBg.X * 0.12}}} {{{List_Size_ClubCampaignBg.Y}}}" pos="{{{List_Pos_ClubCampaignCount.X}}} {{{List_Pos_ClubCampaignCount.Y}}}" class="text-semibold" halign="right" textsize="3" opacity="0.6" z-index="2"/>
	<quad id="quad-club-campaign-popularity" size="{{{List_Size_ClubCampaignBg.Y-1.5}}} {{{List_Size_ClubCampaignBg.Y-1.5}}}" pos="{{{List_Pos_ClubCampaignPopularity.X}}} {{{List_Pos_ClubCampaignPopularity.Y}}}" class="quad-base" halign="center" valign="center" colorize="FFF" opacity="0.6" z-index="2"/>
	<quad id="quad-hitbox-activity" size="{{{List_Size_ClubCampaignBg.X}}} {{{List_Size_ClubCampaignBg.Y}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}"/>
</framemodel>
	<framemodel id="framemodel-search-bar">
	<frameinstance id="asset-entry-search" modelid="{{{ExpendableAsset::C_Name}}}" data-width="0." data-height="{{{Size_SearchBar.Y}}}" data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_BGDark)}}}" data-halign="left" data-opacity="0." z-index="0"/>
	<frameinstance id="asset-entry-search-contour" modelid="{{{ExpendableAsset::C_Name}}}" data-width="0." data-height="{{{Size_SearchBar.Y}}}" data-styles="{{{ExpendableAsset::C_Style_ContourRounded}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" data-halign="left" data-opacity="0." z-index="1"/>
	<entry id="entry-search" class="text-search" size="{{{Size_SearchBar.X - 15.}}} {{{Size_SearchBar.Y}}}" pos="10 0" halign="left" focusareacolor1="00000000" focusareacolor2="00000000" hidden="1" z-index="2"/>
</framemodel>

<!-- Frame global -->
<frame id="frame-global">
	<label id="label-search-result" pos="{{{MLHelpers::Skew(0., -30., 10.)}}}" size="{{{ScrollConfig.WindowSize.X}}} 10" class="text-semibold" text="{{{Text_NoClubCampaigns}}}" textsize="4" textprefix="$i"/>

	<!-- Scrolls -->
	<frame id="frame-scrolls" pos="{{{MLHelpers::Skew(11.-MLHelpers::SkewX(ScrollConfig.HeaderHeight, 10.), 1., 10.)}}}" z-index="1">
		<!-- Header: title and search bar -->
		<frame id="frame-common-header" pos="{{{MLHelpers::SkewX(ScrollConfig.HeaderHeight, 10.)}}} 55.2" hidden="1" z-index="10">
			<frameinstance id="frame-search-bar" modelid="framemodel-search-bar"/>
			<frameinstance
				id="titlebar-common" z-index="5"
				modelid="{{{TitleBar::C_Name}}}"
				data-size="{{{ScrollConfig.WindowSize.X}}} 10"
				data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}"
				data-actions="{{{TL::MLEncode(List_Actions.tojson())}}}"
				data-tabs-max-width="160"
			/>
		</frame>

		<!-- Grid view -->
		<frame id="frame-scroll-view-grid">
			<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-club-campaigns-grid" z-index="1" />
			<frame id="frame-clip-scroll-grid" clip="1" clipsizen="320 {{{ScrollConfig.WindowSize.Y}}}" clipposn="0 0">
				<frame
					id="scroll-club-campaigns-grid"
					pos="{{{-ScrollConfig.WindowSize.X/2 - MLHelpers::SkewX(List_Size_ClubCampaignBg.Y, 10.)}}} {{{ScrollConfig.WindowSize.Y/2}}}"
					class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
					data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
					data-pager-page-size="{{{Grid_ClubCampaignsPerPage}}}"
					data-elements-per-line="{{{Grid_ColumnsNb}}}"
					data-element-size="{{{Grid_Size_ClubCampaign.X}}} {{{Grid_Size_ClubCampaign.Y}}}"
					data-margin-size="{{{Grid_Size_ClubCampaignMargin.X}}} {{{Grid_Size_ClubCampaignMargin.Y}}}"
					data-scroll-indicator-x-offset="{{{ScrollConfig.ScrollIndicatorXOffset + MLHelpers::SkewX(List_Size_ClubCampaignBg.Y, 10.)}}}"
					data-scrollbar-xoffset="{{{ScrollConfig.ScrollBarXOffset + MLHelpers::SkewX(List_Size_ClubCampaignBg.Y, 10.)}}}"
					data-scroll-locked="1"
					data-nav-inputs="down"
					data-nav-targets="button-back"
					data-nav-group="{{{C_NavGroup_Default}}}"
				>
					<quad class="{{{Scroll::C_Class_ScrollEvent}}}" scriptevents="1" z-index="-1" />
					<frame id="frame-header" class="{{{Scroll::C_Class_Header}}}" pos="{{{ScrollConfig.WindowSize.X/2 + 1.18}}} 0">
						<frame id="frame-featured-campaigns" pos="{{{-ScrollConfig.WindowSize.X/2}}} 0">
							{{{HeaderButtons_MLs[C_ScrollView_Grid]}}}
						</frame>
						<frame id="frame-clamped-controls-grid" pos="{{{MLHelpers::Skew(0., -ScrollConfig.HeaderHeight + 8., 10.)}}}" class="{{{Scroll::C_Class_ClampedControl}}}"
							data-clamped-control-valign="{{{Scroll::C_ClampedControlVAlign_Center}}}"
							data-clamped-control-height="9.6"
						>
							<frameinstance id="frame-search-bar" modelid="framemodel-search-bar"/>
							<frameinstance
								id="titlebar-grid" z-index="5"
								modelid="{{{TitleBar::C_Name}}}"
								data-size="{{{ScrollConfig.WindowSize.X}}} 10"
								data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}"
								data-actions="{{{TL::MLEncode(Grid_Actions.tojson())}}}"
								data-tabs-max-width="160"
							/>
						</frame>
					</frame>
					{{{ML_Grid_ClubCampaigns}}}
				</frame>
			</frame>
		</frame>

		<!-- List view -->
		<frame id="frame-scroll-view-list" hidden="1">
			<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-club-campaigns-list" z-index="1" />
			<frame id="frame-clip-scroll-list" clip="1" clipsizen="320 {{{ScrollConfig.WindowSize.Y}}}" clipposn="0 0">
				<frame
					id="scroll-club-campaigns-list"
					pos="{{{-ScrollConfig.WindowSize.X/2}}} {{{ScrollConfig.WindowSize.Y/2}}}"
					class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
					data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
					data-pager-page-size="{{{List_ClubCampaignsPerPage}}}"
					data-elements-per-line="{{{List_ColumnsNb}}}"
					data-element-size="{{{List_Size_ClubCampaign.X}}} {{{List_Size_ClubCampaign.Y}}}"
					data-margin-size="{{{List_Size_ClubCampaignMargin.X}}} {{{List_Size_ClubCampaignMargin.Y}}}"
					data-scroll-locked="1"
					data-nav-inputs="down"
					data-nav-targets="button-back"
					data-nav-group="{{{C_NavGroup_Default}}}"
				>
					<quad class="{{{Scroll::C_Class_ScrollEvent}}}" scriptevents="1" z-index="-1" />
					<frame id="frame-header" class="{{{Scroll::C_Class_Header}}}" pos="{{{ScrollConfig.WindowSize.X/2 - 0.5}}} 0">
						<frame id="frame-featured-campaigns" pos="{{{-ScrollConfig.WindowSize.X/2}}} 0">
							{{{HeaderButtons_MLs[C_ScrollView_List]}}}
						</frame>
						<frame id="frame-clamped-controls-list" pos="{{{MLHelpers::Skew(0., -ScrollConfig.HeaderHeight + 8., 10.)}}}" class="{{{Scroll::C_Class_ClampedControl}}}"
							data-clamped-control-valign="{{{Scroll::C_ClampedControlVAlign_Center}}}"
							data-clamped-control-height="9.6"
						>
							<frameinstance id="frame-search-bar" modelid="framemodel-search-bar"/>
							<frameinstance
								id="titlebar-list" z-index="5"
								modelid="{{{TitleBar::C_Name}}}"
								data-size="{{{ScrollConfig.WindowSize.X}}} 10"
								data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}"
								data-actions="{{{TL::MLEncode(List_Actions.tojson())}}}"
								data-tabs-max-width="160"
							/>
						</frame>
					</frame>
					{{{ML_List_ClubCampaigns}}}
				</frame>
			</frame>
		</frame>
	</frame>

	<!-- Footer -->
	<frameinstance
		id="button-back" pos="-151.5 -73" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;up;right"
		data-nav-targets="_;_;scroll-club-campaigns-grid;scroll-club-campaigns-grid"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/Trackmania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo

#Struct K_ScrollView {
	CMlEntry Entry_Search;
	CMlFrame Asset_EntrySearch;
	CMlFrame Asset_EntrySearchContour;
	CMlFrame Frame_ClampedControls;
	CMlFrame Frame_CommonHeader;
	CMlFrame Frame_FeaturedCampaigns;
	CMlFrame Frame_FeaturedCampaignsTitle;
	CMlFrame Frame_FeaturedCampaigns_Grid;
	CMlFrame Frame_FeaturedCampaigns_List;
	CMlFrame Frame_ScrollView_Grid;
	CMlFrame Frame_ScrollView_List;
	CMlFrame Scroll_ClubCampaigns;
	CMlFrame TitleBar_Common;
	CMlFrame TitleBar_Current;
	CMlFrame TitleBar_Grid;
	CMlFrame TitleBar_List;
	Text CurrentLayout;
}

#Const C_ImageUrls_PopularityLevel {{{dump(Icons::C_Icons_128x128_PopularityLevel)}}}

#Const C_ScrollView_Grid {{{dump(C_ScrollView_Grid)}}}
#Const C_ScrollView_List {{{dump(C_ScrollView_List)}}}
""",
"""
Void Loading(K_ScrollView _ScrollView, CMlLabel _Label_SearchResult) {
	{{{Scroll::P}}}DisplayLoadingSpinner(This, _ScrollView.Scroll_ClubCampaigns, "{{{Text_RetrievingClubCampaigns}}}", True);
	_Label_SearchResult.Hide();
}

Void LockNavigation(K_ScrollView _ScrollView, Boolean _IsLocked) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", !_IsLocked);
	{{{TitleBar::P}}}LockNavigation(_ScrollView.TitleBar_Current, _IsLocked);
	{{{Scroll::P}}}LockNavigation(_ScrollView.Scroll_ClubCampaigns, _IsLocked);
	foreach (Control in _ScrollView.Frame_FeaturedCampaigns.Controls) {
		{{{Navigation::P}}}Lock(Control, _IsLocked);
	}
}

Void ShowClubCampaign(CMlFrame _Frame_ClubCampaign, {{{CampaignStruct::P}}}K_Campaign _Campaign, Text _ScrollViewLayout) {
	declare CMlFrame ControlBlockList_ClubCampaignName <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-club-campaign-name") as CMlFrame);
	declare CMlFrame ControlBlockList_ClubCampaignImage <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-club-campaign-image") as CMlFrame);

	/* Common */
	_Frame_ClubCampaign.Visible = True;
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_ClubCampaignName, [_Campaign.CreatorAccountId, _Campaign.LatestEditorAccountId], _Campaign.Name);
	if (_Campaign.Media.ButtonBackgroundUrl != "") {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_ClubCampaignImage, [_Campaign.CreatorAccountId, _Campaign.LatestEditorAccountId], _Campaign.Media.ButtonBackgroundUrl);
	} else {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_ClubCampaignImage, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");
	}
	if ({{{ControlBlockList::P}}}IsBlocked(This, [_Campaign.CreatorAccountId, _Campaign.LatestEditorAccountId])) {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_ClubCampaign, {{{MenuSounds::P}}}C_Sound_SelectError);
	} else {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_ClubCampaign, {{{MenuSounds::P}}}C_Sound_Select);
	}

	if (_ScrollViewLayout == C_ScrollView_List) {
		declare CMlFrame ControlBlockList_ClubName <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-club-name") as CMlFrame);
		declare CMlLabel Label_TracksCount <=> (_Frame_ClubCampaign.GetFirstChild("label-tracks-count") as CMlLabel);
		declare CMlQuad Quad_ClubCampaignPopularity <=> (_Frame_ClubCampaign.GetFirstChild("quad-club-campaign-popularity") as CMlQuad);

		Quad_ClubCampaignPopularity.Visible = True;
		Quad_ClubCampaignPopularity.ChangeImageUrl(C_ImageUrls_PopularityLevel.get(_Campaign.PopularityLevel, ""));
		{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_ClubName, [_Campaign.CreatorAccountId, _Campaign.LatestEditorAccountId], _Campaign.Club.Name);
		if (_Campaign.MapCount > 1) Label_TracksCount.SetText(TL::Compose("{{{Text_Tracks}}}", ""^_Campaign.MapCount));
		else if (_Campaign.MapCount == 1) Label_TracksCount.SetText("{{{Text_Track}}}");
		else Label_TracksCount.SetText("");

		Tools::FitLabelValue(Label_TracksCount, 3., 1.5, 0.25);
	}
}
Void HideClubCampaign(CMlFrame _Frame_ClubCampaign) {
	_Frame_ClubCampaign.Visible = False;
}

Void ShowClubCampaignLoading(CMlFrame _Frame_ClubCampaign, Text _ScrollViewLayout) {
	declare CMlFrame ControlBlockList_ClubCampaignName <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-club-campaign-name") as CMlFrame);
	declare CMlFrame ControlBlockList_ClubCampaignImage <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-club-campaign-image") as CMlFrame);

	/* Common */
	_Frame_ClubCampaign.Visible = True;
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_ClubCampaignName, [], "{{{Text_Retrieving}}}");
	{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_ClubCampaignImage, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");
	{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_ClubCampaign, {{{MenuSounds::P}}}C_Sound_SelectError);

	if (_ScrollViewLayout == C_ScrollView_List) {
		declare CMlFrame ControlBlockList_ClubName <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-club-name") as CMlFrame);
		declare CMlLabel Label_TracksCount <=> (_Frame_ClubCampaign.GetFirstChild("label-tracks-count") as CMlLabel);
		declare CMlQuad Quad_ClubCampaignPopularity <=> (_Frame_ClubCampaign.GetFirstChild("quad-club-campaign-popularity") as CMlQuad);

		{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_ClubName, [], "");
		Label_TracksCount.SetText("");
		Quad_ClubCampaignPopularity.Visible = False;
	}
}

Void UpdateFeaturedCampaigns(K_ScrollView _ScrollView, {{{CampaignStruct::P}}}K_Campaign[Integer] _FeaturedCampaigns) {
	foreach (Frame_FeaturedCampaigns in [_ScrollView.Frame_FeaturedCampaigns_Grid, _ScrollView.Frame_FeaturedCampaigns_List]) {
		foreach (Key => Control in Frame_FeaturedCampaigns.Controls) {
			if (Control.HasClass("{{{C_Class_Featured}}}")) {
				ShowClubCampaign(Control as CMlFrame, _FeaturedCampaigns.get(Key, {{{CampaignStruct::P}}}K_Campaign {}), C_ScrollView_Grid);
			}
		}
	}
}

Void FocusClubCampaign(CMlFrame _Frame_ClubCampaign, Text _ScrollViewLayout, Boolean _IsFocused, Boolean _IsAnimated) {
	if (_Frame_ClubCampaign == Null) return;
	declare CMlFrame ControlBlockList_ClubCampaignName <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-club-campaign-name") as CMlFrame);
	declare Integer AnimDuration = Tools::Ternary(_IsAnimated, 250, 0);

	switch (_ScrollViewLayout) {
		case C_ScrollView_Grid: {
			declare CMlQuad Quad_Contour <=> (_Frame_ClubCampaign.GetFirstChild("quad-contour") as CMlQuad);
			declare CMlQuad Quad_Gradient <=> (_Frame_ClubCampaign.GetFirstChild("quad-gradient") as CMlQuad);

			AnimMgr.Flush(Quad_Contour);
			AnimMgr.Flush(Quad_Gradient);
			if (_IsFocused) {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubCampaignName, 1., AnimDuration);
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"1.\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.4\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubCampaignName, 0.7, AnimDuration);
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"0.\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.7\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
		case C_ScrollView_List: {
			declare CMlFrame Frame_Background <=> (_Frame_ClubCampaign.GetFirstChild("frame-background") as CMlFrame);
			declare CMlFrame ControlBlockList_ClubName <=> (_Frame_ClubCampaign.GetFirstChild("control-block-list-club-name") as CMlFrame);
			declare CMlLabel Label_TracksCount <=> (_Frame_ClubCampaign.GetFirstChild("label-tracks-count") as CMlLabel);
			declare CMlQuad Quad_ClubCampaignPopularity <=> (_Frame_ClubCampaign.GetFirstChild("quad-club-campaign-popularity") as CMlQuad);

			AnimMgr.Flush(Label_TracksCount);
			AnimMgr.Flush(Quad_ClubCampaignPopularity);
			if (_IsFocused) {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubCampaignName, 1., AnimDuration);
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubName, 1., AnimDuration);
				AnimMgr.Add(Label_TracksCount, "<anim opacity=\"1.\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_ClubCampaignPopularity, "<anim opacity=\"1.\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, 1., False);
				{{{ExpendableAsset::P}}}RedrawAsset(This, Frame_Background, _IsAnimated);
			} else {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubCampaignName, 0.6, AnimDuration);
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubName, 0.6, AnimDuration);
				AnimMgr.Add(Label_TracksCount, "<anim opacity=\"0.6\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_ClubCampaignPopularity, "<anim opacity=\"0.6\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, .6, False);
				{{{ExpendableAsset::P}}}RedrawAsset(This, Frame_Background, _IsAnimated);
			}
		}
	}

	// Text to speech
	if (_IsFocused) {
		{{{ControlBlockList::P}}}TTS_Focus(ControlBlockList_ClubCampaignName);
	} else {
		{{{ControlBlockList::P}}}TTS_Unfocus(ControlBlockList_ClubCampaignName);
	}
}
Void UnfocusClubCampaign(CMlFrame _Frame_ClubCampaign, Text _ScrollViewLayout, Boolean _IsAnimated) {
	FocusClubCampaign(_Frame_ClubCampaign, _ScrollViewLayout, False, _IsAnimated);
}

Void Focus(K_ScrollView _ScrollView, CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	declare Boolean IsFeaturedCampaignFocused = _To != Null && ({{{Scroll::P}}}IsScroll(_To) || _To.ControlId == "button-back");

	if ({{{TitleBar::P}}}IsFocused(_ScrollView.TitleBar_Common) != IsFeaturedCampaignFocused) {
		{{{TitleBar::P}}}Focus(_ScrollView.TitleBar_Common, IsFeaturedCampaignFocused);
		{{{TitleBar::P}}}Focus(_ScrollView.TitleBar_Grid, IsFeaturedCampaignFocused);
		{{{TitleBar::P}}}Focus(_ScrollView.TitleBar_List, IsFeaturedCampaignFocused);
	}

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Scroll::P}}}IsScroll(_From)) {
			{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
			if (_From.ControlId == "button-back") {
				{{{ExpendableButton::P}}}Unfocus(This, _ScrollView.Frame_FeaturedCampaignsTitle);
			}
		} else if (_From.HasClass("{{{C_Class_Featured}}}")) {
			UnfocusClubCampaign(_From as CMlFrame, C_ScrollView_Grid, True);
			{{{ExpendableButton::P}}}Unfocus(This, _ScrollView.Frame_FeaturedCampaignsTitle);
			if (_To != Null && {{{Scroll::P}}}IsScroll(_To) && !{{{Scroll::P}}}IsScroll(_From)) {
				declare CMlControl ControlToFocus for _To;
				ControlToFocus = _From;
			}
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Scroll::P}}}IsScroll(_To)) {
			{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
			if (_To.ControlId == "button-back") {
				{{{ExpendableButton::P}}}Focus(This, _ScrollView.Frame_FeaturedCampaignsTitle);
			}
		} else if (_To.HasClass("{{{C_Class_Featured}}}")) {
			FocusClubCampaign(_To as CMlFrame, C_ScrollView_Grid, True, True);
			{{{ExpendableButton::P}}}Focus(This, _ScrollView.Frame_FeaturedCampaignsTitle);
			if (_From != Null && _From.ControlId == "button-back" && _ScrollView.Scroll_ClubCampaigns.ScrollOffset.Y > 0) { //< Scroll to header if offset greater than 0
				{{{Scroll::P}}}ScrollToHeader(This, _ScrollView.Scroll_ClubCampaigns);
				{{{Scroll::P}}}SetFocusedElementKey(This, _ScrollView.Scroll_ClubCampaigns, 0, False, False);
			}
		}
	}
}

Void FocusAvailableControl(K_ScrollView _ScrollView, CMlFrame _Button_Back) {
	if (!{{{Navigation::P}}}IsLocked(_ScrollView.Frame_FeaturedCampaigns.Controls[0])) {
		Focus(_ScrollView, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _ScrollView.Frame_FeaturedCampaigns.Controls[0]);
	} else if ({{{Scroll::P}}}GetElementsTotal(_ScrollView.Scroll_ClubCampaigns) > 0) {
		Focus(_ScrollView, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _ScrollView.Scroll_ClubCampaigns);
	} else if (!{{{Navigation::P}}}IsLocked(_Button_Back)) {
		Focus(_ScrollView, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _Button_Back);
	}
}

Void FocusSearch(K_ScrollView _ScrollView, Boolean _IsFocused) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", !_IsFocused);
	{{{Scroll::P}}}LockNavigation(_ScrollView.Scroll_ClubCampaigns, _IsFocused);

	if (_IsFocused) {
		{{{ExpendableAsset::P}}}SetColor(This, _ScrollView.Asset_EntrySearchContour, <1., 1., 1.>);
	} else {
		{{{ExpendableAsset::P}}}SetColor(This, _ScrollView.Asset_EntrySearchContour, {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_AccentOne)}}});
	}
}

Void DisplaySearch(K_ScrollView _ScrollView, Text _EntryText, Boolean _IsSearchButton, Boolean _Visible, Boolean _IsAnimated) {
	declare {{{TitleBar::P}}}K_Actions[Integer] Actions;
	switch (_ScrollView.CurrentLayout) {
		case C_ScrollView_List: Actions.fromjson({{{"\"\"\""^List_Actions.tojson()^"\"\"\""}}});
		case C_ScrollView_Grid: Actions.fromjson({{{"\"\"\""^Grid_Actions.tojson()^"\"\"\""}}});
	}

	// Update search background
	if (_Visible) {
		{{{ExpendableAsset::P}}}SetWidth(This, _ScrollView.Asset_EntrySearch, {{{Size_SearchBar.X}}}, False);
		{{{ExpendableAsset::P}}}SetWidth(This, _ScrollView.Asset_EntrySearchContour, {{{Size_SearchBar.X}}}, False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _ScrollView.Asset_EntrySearch, 1., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _ScrollView.Asset_EntrySearchContour, 1., False);
		Actions[{{{TitleBar::P}}}C_Action_Second].ActionMargin = {{{Size_SearchBar.X}}} - 10.;
		Actions[{{{TitleBar::P}}}C_Action_First].IconMargin = 2.;
	} else {
		{{{ExpendableAsset::P}}}SetWidth(This, _ScrollView.Asset_EntrySearch, 0., False);
		{{{ExpendableAsset::P}}}SetWidth(This, _ScrollView.Asset_EntrySearchContour, 0., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _ScrollView.Asset_EntrySearch, 0., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _ScrollView.Asset_EntrySearchContour, 0., False);
	}
	{{{ExpendableAsset::P}}}RedrawAsset(This, _ScrollView.Asset_EntrySearch, _IsAnimated);
	{{{ExpendableAsset::P}}}RedrawAsset(This, _ScrollView.Asset_EntrySearchContour, _IsAnimated);
	{{{TitleBar::P}}}SetActions(_ScrollView.TitleBar_Current, Actions, False);
	{{{TitleBar::P}}}RedrawTitleBar(_ScrollView.TitleBar_Current, _IsAnimated);

	// Update entry
	_ScrollView.Entry_Search.Visible = _Visible;
	_ScrollView.Entry_Search.Value = _EntryText;
	if (_IsSearchButton && _ScrollView.Entry_Search.Visible) {
		_ScrollView.Entry_Search.StartEdition();
		FocusSearch(_ScrollView, _Visible);
	}
}

Void Select(CMlControl _Control, {{{CampaignStruct::P}}}K_Campaign[Integer] _FeaturedCampaigns) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return;

	switch (_Control.ControlId) {
		case "button-back": {{{Router::P}}}PushParent(This);
		default: {
			if (_Control.DataAttributeExists("campaign-key")) {
				declare Integer CampaignKey = TL::ToInteger(_Control.DataAttributeGet("campaign-key"));
				if (_FeaturedCampaigns.existskey(CampaignKey)) {
					declare {{{CampaignStruct::P}}}K_Campaign FeaturedCampaign = _FeaturedCampaigns[CampaignKey];
					if (!{{{ControlBlockList::P}}}IsBlocked(This, [FeaturedCampaign.CreatorAccountId, FeaturedCampaign.LatestEditorAccountId])) {
						{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CampaignDisplay}}}", {{{Router::P}}}GetCurrentRoutePath(This));
						{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CampaignDisplay}}}",	[
							"{{{RoutePaths::C_Query_Campaign}}}" => ""^FeaturedCampaign.tojson(),
							"{{{RoutePaths::C_Query_CampaignEditionTimestamp}}}" => ""^FeaturedCampaign.EditionTimestamp
						], True);
					}
				}
			}
		}
	}
}

Void UpdateSearchPos(CMlFrame _TitleBar_Current, CMlFrame _Frame_SearchBar, Boolean _IsAnimated) {
	declare Vec2 Pos_SearchBar = {{{TitleBar::P}}}GetActionButtonPosition(_TitleBar_Current, {{{TitleBar::P}}}C_Action_Second) - <5.5, 0.>;

	AnimMgr.Flush(_Frame_SearchBar);
	if (_IsAnimated) {
		AnimMgr.Add(_Frame_SearchBar, "<anim pos=\""^Pos_SearchBar.X^" "^Pos_SearchBar.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		_Frame_SearchBar.RelativePosition_V3 = Pos_SearchBar;
	}
}

K_ScrollView UpdateScrollViewControls(K_ScrollView _ScrollView, CMlFrame _Frame_Global, CMlFrame _Button_Back) {
	declare K_ScrollView ScrollView = _ScrollView;

	ScrollView.Scroll_ClubCampaigns <=> (_Frame_Global.GetFirstChild("scroll-club-campaigns-"^ScrollView.CurrentLayout) as CMlFrame);
	ScrollView.Frame_FeaturedCampaigns <=> (_Frame_Global.GetFirstChild("frame-featured-campaigns-"^ScrollView.CurrentLayout) as CMlFrame);
	ScrollView.Frame_FeaturedCampaignsTitle <=> (_Frame_Global.GetFirstChild("frame-featured-campaigns-title-"^ScrollView.CurrentLayout) as CMlFrame);
	ScrollView.Frame_ClampedControls = (_Frame_Global.GetFirstChild("frame-clamped-controls-"^ScrollView.CurrentLayout) as CMlFrame);
	ScrollView.TitleBar_Current <=> (ScrollView.Scroll_ClubCampaigns.GetFirstChild("titlebar-"^ScrollView.CurrentLayout) as CMlFrame);
	if (!ScrollView.TitleBar_Current.Visible) ScrollView.TitleBar_Current <=> ScrollView.TitleBar_Common;
	ScrollView.Entry_Search <=> (ScrollView.TitleBar_Current.Parent.GetFirstChild("entry-search") as CMlEntry);
	ScrollView.Asset_EntrySearch <=> (ScrollView.TitleBar_Current.Parent.GetFirstChild("asset-entry-search") as CMlFrame);
	ScrollView.Asset_EntrySearchContour <=> (ScrollView.TitleBar_Current.Parent.GetFirstChild("asset-entry-search-contour") as CMlFrame);

	/* Update navigation for the back Button */
	{{{Navigation::P}}}ChangeControlTargets(This, _Button_Back, ["up", "right"], [ScrollView.Frame_FeaturedCampaigns.Controls[0].ControlId, ScrollView.Scroll_ClubCampaigns.ControlId]);

	return ScrollView;
}

K_ScrollView UpdateTitleBars(K_ScrollView _ScrollView, CMlFrame _Frame_Global, CMlFrame _Button_Back, Text _EntryText, Boolean _IsSearchBarVisible, Boolean _IsCurrentTitleBarClamped) {
	declare K_ScrollView ScrollView = _ScrollView;

	ScrollView.Frame_CommonHeader.Visible = _IsCurrentTitleBarClamped;
	foreach (Layout in [C_ScrollView_Grid, C_ScrollView_List]) {
		declare CMlFrame Frame_ClipScroll <=> (_Frame_Global.GetFirstChild("frame-clip-scroll-"^Layout) as CMlFrame);
		declare CMlFrame TitleBar_Current <=> (_Frame_Global.GetFirstChild("titlebar-"^Layout) as CMlFrame);
		declare CMlFrame Scroll_ClubCampaigns <=> (_Frame_Global.GetFirstChild("scroll-club-campaigns-"^Layout) as CMlFrame);

		if (_IsCurrentTitleBarClamped) {
			Scroll_ClubCampaigns.RelativePosition_V3.Y = {{{ScrollConfig.WindowSize.Y/2 + 12.}}};
			Frame_ClipScroll.RelativePosition_V3.Y = -12.;
			TitleBar_Current.Hide();
		} else {
			Scroll_ClubCampaigns.RelativePosition_V3.Y = {{{ScrollConfig.WindowSize.Y/2}}};
			Frame_ClipScroll.RelativePosition_V3.Y = 0.;
			TitleBar_Current.Show();
		}
	}

	{{{TitleBar::P}}}LockNavigation(ScrollView.TitleBar_Current, True); //< Lock previous title bar
	ScrollView = UpdateScrollViewControls(ScrollView, _Frame_Global, _Button_Back);
	DisplaySearch(ScrollView, _EntryText, False, _IsSearchBarVisible, False);
	UpdateSearchPos(ScrollView.TitleBar_Current, ScrollView.Entry_Search.Parent, False);
	{{{TitleBar::P}}}LockNavigation(ScrollView.TitleBar_Current, False); //< Unlock the current title bar

	return ScrollView;
}

K_ScrollView SwitchScrollViewLayout(K_ScrollView _ScrollView, CMlFrame _Frame_Global, CMlFrame _Button_Back){
	declare K_ScrollView ScrollView = _ScrollView;
	declare CMlControl ControlToFocus for ScrollView.Scroll_ClubCampaigns;
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
	declare Integer ScrollViewElementKey = {{{Scroll::P}}}GetFocusedElementKey(ScrollView.Scroll_ClubCampaigns);
	declare Boolean IsSearchBarVisible = {{{ExpendableAsset::P}}}GetOpacity(ScrollView.Asset_EntrySearch) >= 1.;
	declare Vec2 ScrollOffset = ScrollView.Scroll_ClubCampaigns.ScrollOffset;
	declare Text EntryText = ScrollView.Entry_Search.Value;

	/* Lock previous scroll view */
	LockNavigation(ScrollView, True);

	/* Switch between ScrollView layouts */
	switch (ScrollView.CurrentLayout) {
		case C_ScrollView_List: ScrollView.CurrentLayout = C_ScrollView_Grid;
		case C_ScrollView_Grid: ScrollView.CurrentLayout = C_ScrollView_List;
	}
	ScrollView.Frame_ScrollView_Grid.Visible = ScrollView.CurrentLayout == C_ScrollView_Grid;
	ScrollView.Frame_ScrollView_List.Visible = ScrollView.CurrentLayout == C_ScrollView_List;
	ScrollView = UpdateScrollViewControls(ScrollView, _Frame_Global, _Button_Back);

	/* Unlock current scroll view */
	LockNavigation(ScrollView, False);

	/* Transfer FocusedControl from previous scroll to the current scroll */
	{{{Scroll::P}}}Unfocus(This, ScrollView.Scroll_ClubCampaigns);
	{{{Scroll::P}}}SetFocusedElementKey(This, ScrollView.Scroll_ClubCampaigns, ScrollViewElementKey, False, False);
	{{{Scroll::P}}}ScrollToPosition(This, ScrollView.Scroll_ClubCampaigns, ScrollOffset.Y, False);
	if (FocusedControl != Null) {
		if (FocusedControl.Id == _Button_Back.Id) {
			{{{Scroll::P}}}ScrollToElement(This, ScrollView.Scroll_ClubCampaigns, ScrollViewElementKey, False);
		} else if (TL::StartsWith("scroll-club-campaigns-", FocusedControl.ControlId)) {
			{{{Scroll::P}}}ScrollToElement(This, ScrollView.Scroll_ClubCampaigns, ScrollViewElementKey, True);
			FocusedControl = ScrollView.Scroll_ClubCampaigns;
		} else if (FocusedControl.HasClass("{{{C_Class_Featured}}}") && FocusedControl.DataAttributeExists("campaign-key")) {
			FocusedControl = ScrollView.Frame_FeaturedCampaigns.Controls[TL::ToInteger(FocusedControl.DataAttributeGet("campaign-key"))];
		}
	}
	Focus(_ScrollView, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), FocusedControl);

	/* Transfert ControlToFocus from previous scroll to the current scroll */
	if (ControlToFocus != Null && ControlToFocus.HasClass("{{{C_Class_Featured}}}") && ControlToFocus.DataAttributeExists("campaign-key")) {
		declare Integer FeaturedCampaignKeyToFocus = TL::ToInteger(ControlToFocus.DataAttributeGet("campaign-key"));
		declare CMlControl ControlToFocus for ScrollView.Scroll_ClubCampaigns;
		ControlToFocus = ScrollView.Frame_FeaturedCampaigns.Controls[FeaturedCampaignKeyToFocus];
	}

	/* Update scroll */
	{{{Scroll::P}}}TriggerPagerUpdate(ScrollView.Scroll_ClubCampaigns);
	ScrollView = UpdateTitleBars(ScrollView, _Frame_Global, _Button_Back, EntryText, IsSearchBarVisible, {{{Scroll::P}}}IsControlClamped(ScrollView.Scroll_ClubCampaigns, ScrollView.Frame_ClampedControls));

	return ScrollView;
}

***MainInit***
***
declare CMlFrame Button_Back;
declare CMlFrame Frame_Global;
declare CMlLabel Label_SearchResult;

declare {{{CampaignStruct::P}}}K_Campaign[Integer] FeaturedCampaigns;
declare K_ScrollView ScrollView;
declare Boolean EntryWasFocused;
declare Boolean PageIsInitialized;
declare Boolean IsScrollInitialized;
declare Text SearchValue;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Button_Back <=> (Frame_Global.GetFirstChild("button-back") as CMlFrame);
Label_SearchResult <=> (Frame_Global.GetFirstChild("label-search-result") as CMlLabel);

declare persistent Text Persistent_ScrollViewLayout_ClubCampaigns_V2 for UserMgr.MainUser = C_ScrollView_Grid;

ScrollView = K_ScrollView {
	CurrentLayout = Persistent_ScrollViewLayout_ClubCampaigns_V2,
	Asset_EntrySearch = (Frame_Global.GetFirstChild("asset-entry-search") as CMlFrame),
	Asset_EntrySearchContour = (Frame_Global.GetFirstChild("asset-entry-search-contour") as CMlFrame),
	Entry_Search = (Frame_Global.GetFirstChild("entry-search") as CMlEntry),
	Frame_CommonHeader = (Frame_Global.GetFirstChild("frame-common-header") as CMlFrame),
	Frame_ScrollView_Grid = (Frame_Global.GetFirstChild("frame-scroll-view-grid") as CMlFrame),
	Frame_ScrollView_List = (Frame_Global.GetFirstChild("frame-scroll-view-list") as CMlFrame),
	Frame_FeaturedCampaigns_Grid = (Frame_Global.GetFirstChild("frame-featured-campaigns-grid") as CMlFrame),
	Frame_FeaturedCampaigns_List = (Frame_Global.GetFirstChild("frame-featured-campaigns-list") as CMlFrame),
	Scroll_ClubCampaigns = (Frame_Global.GetFirstChild("scroll-club-campaigns-"^Persistent_ScrollViewLayout_ClubCampaigns_V2) as CMlFrame),
	TitleBar_Common = (Frame_Global.GetFirstChild("titlebar-common") as CMlFrame),
	TitleBar_Grid = (Frame_Global.GetFirstChild("titlebar-grid") as CMlFrame),
	TitleBar_List = (Frame_Global.GetFirstChild("titlebar-list") as CMlFrame)
};

/* Init the view depending on the saved scrollview layout */
ScrollView = UpdateScrollViewControls(ScrollView, Frame_Global, Button_Back);
ScrollView.Frame_ScrollView_Grid.Visible = Persistent_ScrollViewLayout_ClubCampaigns_V2 == C_ScrollView_Grid;
ScrollView.Frame_ScrollView_List.Visible = Persistent_ScrollViewLayout_ClubCampaigns_V2 == C_ScrollView_List;

FocusAvailableControl(ScrollView, Button_Back);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_LibraryClubCampaigns}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				LockNavigation(ScrollView, False);

				// The scroll triggers an update the first time we enter the page
				// So we display a loading spinner the first time, and the following times, we force the scroll refresh
				if (IsScrollInitialized) {
					{{{Scroll::P}}}TriggerPagerUpdate(ScrollView.Scroll_ClubCampaigns);
				} else {
					Loading(ScrollView, Label_SearchResult);
					foreach (Control in ScrollView.Frame_FeaturedCampaigns.Controls) {
						ShowClubCampaignLoading(Control as CMlFrame, C_ScrollView_Grid);
					}
				}

				// Update controller info
				if ({{{UserStore::P}}}IsOfflineMode()) {
					ControllerInfo::SetButtons(["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "B" => _("Back")]);
				} else {
					ControllerInfo::SetButtons(["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "{{{Const::C_NavInput_ClubWidget}}}" => "{{{Const::C_Text_ClubWidget}}}", "B" => _("Back")]);
				}
			}
		}
	}

	/* Store events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{CampaignStore::P}}}C_Event_AllClubCampaignListUpdated: {
						if (SearchValue == "") {
							declare {{{CampaignStruct::P}}}K_Campaign[Integer] ClubCampaigns = {{{CampaignStore::P}}}GetAllClubCampaignList();
							for (Key, 0, 2) if (!FeaturedCampaigns.existskey(Key) && ClubCampaigns.existskey(Key)) FeaturedCampaigns[Key] = ClubCampaigns[Key];
						}

						declare Integer Offset = Tools::Ternary(FeaturedCampaigns.count > 0 && SearchValue == "", 3, 0);
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-club-campaigns-grid") as CMlFrame, {{{CampaignStore::P}}}GetAllClubCampaignsTotal() - Offset);
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-club-campaigns-list") as CMlFrame, {{{CampaignStore::P}}}GetAllClubCampaignsTotal() - Offset);
						UpdateFeaturedCampaigns(ScrollView, FeaturedCampaigns);
					}
				}
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: Select(Event.To, FeaturedCampaigns);
						case CMlScriptEvent::EMenuNavAction::Cancel: {{{Router::P}}}PushParent(This);
						default: {
							if (Event.To != Null) {
								Focus(ScrollView, Event.From, Event.To);
							} else {
								FocusAvailableControl(ScrollView, Button_Back);
							}
						}
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: Select(Event.To, FeaturedCampaigns);
						case CMlScriptEvent::Type::MouseOver: Focus(ScrollView, Event.From, Event.To);
					}
				}
			}
		}
	}

	/* Scroll events */
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null && Event.Scroll.Id == ScrollView.Scroll_ClubCampaigns.Id) {
			switch (Event.Type) {
				case {{{Scroll::P}}}C_EventType_Cancel: {{{Router::P}}}PushParent(This);
				case {{{Scroll::P}}}C_EventType_Select: {
					declare {{{CampaignStruct::P}}}K_Campaign[Integer] ClubCampaigns = {{{CampaignStore::P}}}GetAllClubCampaignList();
					declare Integer Offset = Tools::Ternary(FeaturedCampaigns.count > 0 && SearchValue == "", 3, 0);

					if (ClubCampaigns.existskey(Event.ToKey + Offset)) {
						declare {{{CampaignStruct::P}}}K_Campaign ClubCampaign = ClubCampaigns[Event.ToKey + Offset];
						if (!{{{ControlBlockList::P}}}IsBlocked(This, [ClubCampaign.CreatorAccountId, ClubCampaign.LatestEditorAccountId])) {
							{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CampaignDisplay}}}", {{{Router::P}}}GetCurrentRoutePath(This));
							{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CampaignDisplay}}}",	[
								"{{{RoutePaths::C_Query_Campaign}}}" => ""^ClubCampaign.tojson(),
								"{{{RoutePaths::C_Query_CampaignEditionTimestamp}}}" => ""^ClubCampaign.EditionTimestamp
							], True);
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_PagerUpdate: {
					SearchValue = ScrollView.Entry_Search.Value;
					{{{CampaignStore::P}}}Action_LoadAllClubCampaignsPage(
						This,
						ClubAPI::C_QueryValue_Sort_Popularity,
						ClubAPI::C_QueryValue_Order_DESC,
						ScrollView.Entry_Search.Value,
						Event.PagerOffset,
						Event.PagerCount + Tools::Ternary(FeaturedCampaigns.count > 0 && SearchValue == "", 3, 0)
					);
				}
				case {{{Scroll::P}}}C_EventType_Update: {
					if (IsScrollInitialized) {
						declare {{{CampaignStruct::P}}}K_Campaign[Integer] ClubCampaigns = {{{CampaignStore::P}}}GetAllClubCampaignList();
						declare Integer Offset = Tools::Ternary(FeaturedCampaigns.count > 0 && SearchValue == "", 3, 0);
						declare Integer[] ClubCampaignIds;

						foreach (Key => Frame_Element in Event.ElementsVisible) {
							if (ClubCampaigns.existskey(Key + Offset)) {
								declare ClubCampaign = ClubCampaigns[Key + Offset];
								ShowClubCampaign(Frame_Element, ClubCampaign, ScrollView.CurrentLayout);
								ClubCampaignIds.add(ClubCampaign.Id);
							} else {
								ShowClubCampaignLoading(Frame_Element, ScrollView.CurrentLayout);
							}
						}
						foreach (Key => Frame_Element in Event.ElementsHidden) {
							HideClubCampaign(Frame_Element);
						}

						{{{Navigation::P}}}Lock(ScrollView.Scroll_ClubCampaigns, Event.ElementsVisible.count <= 0);
						{{{Navigation::P}}}EnableInputs(ScrollView.Scroll_ClubCampaigns, Event.ElementsVisible.count <= 0);
						if ({{{Scroll::P}}}IsLoadingSpinnerDisplayed(ScrollView.Scroll_ClubCampaigns)) {
							{{{Scroll::P}}}DisplayLoadingSpinner(This, ScrollView.Scroll_ClubCampaigns, False);
							Label_SearchResult.Visible = Event.ElementsVisible.count <= 0;
							FocusAvailableControl(ScrollView, Button_Back);
							if (Label_SearchResult.Visible) {
								if (ScrollView.Entry_Search.Value == "") Label_SearchResult.Value = "{{{Text_NoClubCampaigns}}}";
								else Label_SearchResult.Value = "{{{Text_NoSearchResult}}}";
							}
						}
					} else {
						IsScrollInitialized = True; //< We need to skip the first update of the scroll (automatic update) because the request is not triggered yet
					}
				}
				case {{{Scroll::P}}}C_EventType_Focus: {
					if (Event.From != Null) UnfocusClubCampaign(Event.From, ScrollView.CurrentLayout, Event.PlayFocusAnimation);
					if (Event.To != Null) {
						if (Event.IsMouse && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
							Focus(ScrollView, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Event.Scroll);
						}
						if ({{{Scroll::P}}}IsFocused(ScrollView.Scroll_ClubCampaigns)) {
							FocusClubCampaign(Event.To, ScrollView.CurrentLayout, True, Event.PlayFocusAnimation);
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_ReachLimit: {
					if ({{{Navigation::P}}}IsFocused(This, ScrollView.Scroll_ClubCampaigns, "{{{C_NavGroup_Default}}}")) {
						switch (Event.NavAction) {
							case CMlScriptEvent::EMenuNavAction::Up: {
								declare CMlControl ControlToFocus for ScrollView.Scroll_ClubCampaigns;
								{{{MenuSounds::P}}}PlayFocusSound(This, ControlToFocus);
								if (ControlToFocus != Null && !{{{Navigation::P}}}IsLocked(ControlToFocus)) {
									Focus(ScrollView, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), ControlToFocus);
								} else {
									FocusAvailableControl(ScrollView, Button_Back);
								}
							}
							case CMlScriptEvent::EMenuNavAction::Left, CMlScriptEvent::EMenuNavAction::Down: {
								Focus(ScrollView, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Button_Back);
								{{{MenuSounds::P}}}PlayFocusSound(This, Button_Back);
							}
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_ClampUpdate: {
					ScrollView = UpdateTitleBars(
						ScrollView,
						Frame_Global,
						Button_Back,
						ScrollView.Entry_Search.Value,
						{{{ExpendableAsset::P}}}GetOpacity(ScrollView.Asset_EntrySearch) >= 1.,
						Event.ClampedControl.ClampedTop
					);
				}
			}
		}
	}

	/* TitleBar events */
	foreach (Event in {{{TitleBar::P}}}PendingEvents) {
		if (Event.TitleBar.Id == ScrollView.TitleBar_Current.Id) {
			switch (Event.Type) {
				case {{{TitleBar::P}}}C_EventType_TabUpdate: {
					Focus(ScrollView, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), ScrollView.Scroll_ClubCampaigns);
				}
				case {{{TitleBar::P}}}C_EventType_Update: {
					if (Event.ActionsPos.existskey({{{TitleBar::P}}}C_Action_Second)) {
						UpdateSearchPos(ScrollView.TitleBar_Current, ScrollView.Entry_Search.Parent, True);
					}
				}
				case {{{TitleBar::P}}}C_EventType_Action: {
					switch (Event.Action) {
						case {{{TitleBar::P}}}C_Action_First: {
							ScrollView = SwitchScrollViewLayout(ScrollView, Frame_Global, Button_Back);
							Persistent_ScrollViewLayout_ClubCampaigns_V2 = ScrollView.CurrentLayout;
							UserMgr.MainUser.PersistentSave();
						}
						case {{{TitleBar::P}}}C_Action_Second: {
							if (ScrollView.Entry_Search.IsFocused && ScrollView.Entry_Search.Visible) {
								DisplaySearch(ScrollView, "", False, False, True);
							} else {
								DisplaySearch(ScrollView, ScrollView.Entry_Search.Value, True, True, True);
							}
						}
					}
				}
			}
		}
	}

	/* Search behaviors */
	if (EntryWasFocused != ScrollView.Entry_Search.IsFocused) {
		EntryWasFocused = ScrollView.Entry_Search.IsFocused;
		FocusSearch(ScrollView, ScrollView.Entry_Search.IsFocused);
		if (!ScrollView.Entry_Search.IsFocused) {
			if (SearchValue != ScrollView.Entry_Search.Value) {
				Loading(ScrollView, Label_SearchResult);
				declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
				if (FocusedControl != Null && FocusedControl.Id == ScrollView.Scroll_ClubCampaigns.Id) {
					FocusAvailableControl(ScrollView, Button_Back);
				}
			}
			{{{Scroll::P}}}TriggerPagerUpdate(ScrollView.Scroll_ClubCampaigns);
			if (ScrollView.Entry_Search.Value == "") {
				DisplaySearch(ScrollView, "", False, False, True);
			}
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_LeavingRoute: {
				// Updates the focus when the player is leaving the page to avoid a visible focus update when entering the page
				if ({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}") == Button_Back) {
					FocusAvailableControl(ScrollView, Button_Back);
				}
				LockNavigation(ScrollView, True);
			}
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	CampaignStore::ComponentV2(),
	CampaignStruct::Component(),
	ExpendableAsset::ComponentV2(),
	ExpendableButton::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	Router::ComponentV2(),
	Scroll::ComponentV2(),
	TitleBar::Component(),
	Transition::ComponentV2(),
	ControlBlockList::ComponentV2(),
	UserStore::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}