/**
 *	Page: RoomMapListDisplay
 */
#Const Version		"1.2.3"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/RoomMapListDisplay.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/CMGame/Components/MedalStack.Script.txt" as MedalStack
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/Checkbox.Script.txt" as Checkbox
#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/MapRankings.Script.txt" as MapRankings
#Include "Libs/Nadeo/Trackmania/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/Trackmania/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/Trackmania/Components/ProfilePlayerInfo.Script.txt" as ProfilePlayerInfo
#Include "Libs/Nadeo/Trackmania/Components/ServerStatus.Script.txt" as ServerStatus
#Include "Libs/Nadeo/CMGame/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/Trackmania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "MathLib" as ML
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_RoomMapListDisplay"
#Const C_NavGroup_Global "navgroup-page-room-map-list-display-global"
#Const C_NavGroup_Default "navgroup-page-room-map-list-display-default"
#Const C_NavGroup_MouseOnly "navgroup-page-room-map-list-display-mouse-only"
#Const C_Class_MapButton "class-button-map-page-room-display"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::PlayMultiplayerModeWithUGC
]

#Const C_ColumnNumber 5
#Const C_RowNumber 5

#Const C_Choice_Cancel 0
#Const C_Choice_Join 1
#Const C_Choices [
	0 => _("Cancel"),
	1 => _("Join")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [RoomCampaignDisplay] Text displayed when the room is a live room.
	declare Text Text_Live = _("|Room|Live");
	//L16N [RoomCampaignDisplay] Text of the Loading spinner informing the player that the selected room is currently loading.
	declare Text Text_Retrieving = _("Retrieving room's data");
	//L16N [RoomCampaignDisplay] Text of the club button. %1 will be replaced by the name of the club. e.g. "Club Nadeo"
	declare Text Text_Club = _("Club $<%1$>");
	//L16N [RoomCampaignDisplay] Message displayed when there is no tracks in the room.
	declare Text Text_NoMaps = _("There is no tracks in this room.");
	//L16N [RoomCampaignDisplay] Text of the button to join the room as a spectator.
	declare Text Text_Spectate = _("Spectate");
	//L16N [RoomCampaignDisplay] Text of the button to join the room as a player.
	declare Text Text_JoinRoom = _("Join room");
	//L16N [RoomCampaignDisplay] Text of the join button when joining the server of the room.
	declare Text Text_Joining = _("Joining...");
	//L16N [RoomCampaignDisplay] Title of the pop-up showing online players in a dedicated server.
	declare Text Text_OnlinePlayers = _("Online players");
	//L16N [RoomCampaignDisplay] Message displayed when there is no joinlink to join a server.
	declare Text Text_OfflineServer = _("Servers are offline or in maintenance, please try again later.");
	//L16N [RoomCampaignDisplay] Message displayed when the player couldn't connect to the server. %1 goes for the type of error.
	declare Text Text_JoinError = _("An error occurred while joining, please try again. (Error code: %1)");
	//L16N [RoomCampaignDisplay] Message displayed when the room cannot be loaded properly. %1 goes for the type of error.
	declare Text Text_FetchError = _("An error occurred while fetching the room, please try again. (Error code: %1)");
	//L16N [RoomCampaignDisplay] Title of the password pop-up.
	declare Text Text_RoomPassword = _("Room password");
	//L16N [RoomCampaignDisplay] Text displayed next to the password of the room.
	declare Text Text_Password = _("Password");
	//L16N [RoomCampaignDisplay] Message to explain that the room password is copied to the system clipboard
	declare Text Text_PasswordCopied = _("Room password copied to the clipboard");
	//L16N [RoomCampaignDisplay] Message displayed when the room password was regenerated
	declare Text Text_PasswordGenerated = _("New room password generated");
	//L16N [RoomCampaignDisplay] Message displayed when the room password can't be regenerated. %1 goes for the type of Error.
	declare Text Text_PasswordGenerationError = _("Error while generating a new room password, please try again. (Error code: %1)");
	//L16N [RoomCampaignDisplay] Error displayed when there is an error while getting data with a HTTP request. %1 will be replace with a code e.g. "Error code: 500"
	declare Text Text_MapListError = _("Error while gathering tracks data. (Error code: %1)");
	//L16N [RoomMapListDisplay] Message displayed to indicate that the room is hosted by a player and not by Nadeo.
	declare Text Text_Dedicated = _("This is a dedicated server hosted by a player. It might be offline.");
	//L16N [RoomCampaignDisplay] Message displayed when the player enter an empty room password.
	declare Text Text_EmptyPassword = _("A password is required to join the room.");
	//L16N [RoomCampaignDisplay] %1 will be replaced by the name of the author of the track, e.g. "by Darrek"
	declare Text Text_AuthorName = _("By %1");
	//L16N [RoomCampaignDisplay] Text preceded by a button icon (i.e. "X") to inform the player that they can access the author profile for the selected track by pressing the associated button on their controller.
	declare Text Text_ShowAuthorProfile = _("Show author profile");
	// Description of the room password pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description = [
		//L16N [RoomCampaignDisplay] Text displayed in the password pop-up to indicate that this room is portected with a password.
		PopUpMultiChoice::CreateDescriptionPart(_("This room is protected with a password."), <140., 5.>, 3., Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold), "$t$i", <1., 1., 1.>, False)
	];

	/* Map grid */
	declare Vec2 Size_Spacing = <0.5, 2.>;
	declare Vec2 Size_MapButton = <35.5, 9.5>;
	declare Vec2 Size_Category = MLHelpers::KeepRatioFromY(320., 20., 2.13);
	declare GridConfig_Column = Grid::Create(Size_MapButton.X*C_ColumnNumber + Size_Spacing.X*(C_ColumnNumber-1), 0., Size_Spacing.X, Grid::C_Direction_Right);
	declare GridConfig_Row = Grid::Create(Size_MapButton.Y*C_RowNumber + Size_Spacing.Y*(C_RowNumber-1), 0., Size_Spacing.Y, Grid::C_Direction_Bottom);
	for (ColumnIndex, 0, C_ColumnNumber-1) GridConfig_Column = Grid::AddColumn(GridConfig_Column, ColumnIndex, 100., Grid::C_Align_Center);
	for (RowIndex, 0, C_RowNumber-1) GridConfig_Row = Grid::AddRow(GridConfig_Row, RowIndex, 100., Grid::C_Align_Center);
	declare Grid_Column = Grid::Compile(GridConfig_Column);
	declare Grid_Row = Grid::Compile(GridConfig_Row);

	declare Text ML_Maps = "";
	declare Text ML_Categories = "";
	for (ColumnIndex, 0, C_ColumnNumber-1) {
		for (RowIndex, 0, C_RowNumber-1) {
			declare Text UpTarget = "button-map-"^ML::Clamp(ColumnIndex, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex-1, 0, C_RowNumber-1);
			declare Text DownTarget = "button-map-"^ML::Clamp(ColumnIndex, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex+1, 0, C_RowNumber-1);
			declare Text LeftTarget = "button-map-"^ML::Clamp(ColumnIndex-1, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex, 0, C_RowNumber-1);
			declare Text RightTarget = "button-map-"^ML::Clamp(ColumnIndex+1, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex, 0, C_RowNumber-1);
			if (RowIndex == 0) UpTarget = "button-club";
			if (RowIndex == C_ColumnNumber-1) DownTarget = "button-join";

			ML_Maps ^= """
				<frame id="frame-map-{{{ColumnIndex}}}-{{{RowIndex}}}" pos="{{{MLHelpers::Skew(Grid_Column.Pos[ColumnIndex], Grid_Row.Pos[RowIndex], 10.)}}}">
					<frameinstance
						id="button-map-{{{ColumnIndex}}}-{{{RowIndex}}}" z-index="1"
						modelid="{{{ExpendableButton::C_Name}}}"
						class="{{{Navigation::C_Class}}} {{{C_Class_MapButton}}}"
						data-height="{{{Grid_Row.Size[RowIndex]}}}" data-width="{{{Grid_Column.Size[ColumnIndex]}}}"
						data-nav-inputs="select;up;down;left;right;action2"
						data-nav-targets="_;{{{UpTarget}}};{{{DownTarget}}};{{{LeftTarget}}};{{{RightTarget}}};_"
						data-nav-group="{{{C_NavGroup_Default}}}"
						data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
					/>
					<frameinstance
						id="frame-medalstack" scale=".8" z-index="2"
						pos="{{{Grid_Column.Size[ColumnIndex]*0.25}}} {{{-Grid_Row.Size[RowIndex]*0.42}}}"
						modelid="{{{MedalStack::C_Name}}}"
						data-bigmedaldirection="{{{MedalStack::C_BigMedal_None}}}"
						data-medaloffset="9.5"
						data-iscolorize="0"
					/>
				</frame>
			""";
		}
	}

	/* Players scroll view */
	declare Integer PlayersColumnsNb = 2;
	declare Integer PlayersRowsNb = 5;
	declare Integer PlayersPerPage = PlayersColumnsNb * PlayersRowsNb;
	declare Vec2 Size_PlayerMargin = <6., 1.>;
	declare Vec2 Size_PlayerScrollWindow = <134., 48.>;
	declare Vec2 Size_Player = Scroll::GetElementSize(Size_PlayerScrollWindow, Size_PlayerMargin, PlayersColumnsNb, PlayersRowsNb);
	declare Integer PlayersElementsNb = Scroll::GetRequiredElementsNb(Size_PlayerScrollWindow, Size_Player, Size_PlayerMargin, PlayersColumnsNb);
	declare Vec2 Size_AdjustedPlayer = <Size_Player.X - MLHelpers::SkewX(Size_Player.Y, 10.), Size_Player.Y>;

	declare Text ML_Players = "";
	for (I, 1, PlayersElementsNb) {
		ML_Players ^= """
			<frame class="{{{Scroll::C_Class_Element}}}">
				<frameinstance id="frame-background-player" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_Player.X}}}" data-height="{{{Size_Player.Y}}}" data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}" data-color="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}" data-opacity="0.8" data-halign="left" data-valign="top" z-index="0"/>
				<label id="label-name" size="{{{Size_Player.X-5.}}} {{{Size_Player.Y-2.}}}" pos="{{{Size_Player.X*0.5}}} {{{-Size_Player.Y*0.6}}}" class="text-extrabold" textsize="3.5" z-index="1"/>
				<frame size="{{{Size_Player.X}}} {{{Size_Player.Y}}}" pos="{{{Size_Player.X/2}}} {{{-Size_Player.Y/2}}}" halign="center" valign="center" z-index="5">
					<quad id="quad-hitbox-player" size="{{{Size_AdjustedPlayer.X}}} {{{Size_AdjustedPlayer.Y*2.5}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}" halign="center" valign="center" rot="10"/>
				</frame>
			</frame>
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="cancel;action1" data-nav-targets="_;_" data-nav-group="{{{C_NavGroup_Global}}}" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" z-index="-1"/>
	<frameinstance id="loadingspinner-retrieve-info" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-120., 20., 10.)}}}" data-label="{{{Text_Retrieving}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" data-size="10 10" scale="0.7" z-index="2"/>
	<frame id="frame-profile" hidden="1" z-index="10">
		<frameinstance modelid="{{{ProfilePlayerInfo::C_Name}}}" data-enable-players-pager="0" data-enable-zone-selection="0" data-enable-my-access-info="0" data-enable-garage="0"/>
	</frame>

	<!-- Pop-up header -->
	<label id="label-title" pos="{{{MLHelpers::Skew(-126.5, 61.5, 10.)}}}" size="150 20" class="text-extrabold" textsize="13" halign="left" filter-profanities="OnlyIfNotTranslated" z-index="1"/>
	<label id="label-script-name" pos="{{{MLHelpers::Skew(-125.5, 45.5, 10.)}}}" size="150 20" class="text-semibold" textsize="4.5" halign="left" z-index="1"/>
	<frame id="frame-live-indicator" pos="{{{MLHelpers::Skew(-124.5, 72., 10.)}}}" z-index="2">
		<quad id="quad-live-indicator" pos="0 0.5" size="3 3" halign="left" valign="center" image="{{{Icons::C_Icon_128x128_Radio_Button_On}}}" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" z-index="5"/>
		<label id="label-live-indicator" pos="4 0" size="50 1" class="text-extrabold" text="{{{Text_Live}}}" textsize="3.5" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" halign="left" z-index="5"/>
	</frame>
	<frame id="frame-popularity" pos="{{{MLHelpers::Skew(129., 46.5, 10.)}}}" z-index="1">
		<frameinstance id="button-icon-popularity" modelid="{{{ButtonIcon::C_Name}}}" pos="1 0" data-halign="left" data-valign="center" data-size="8 8" data-bind="action2" data-hideformouse="1" />
		<frameinstance
			id="button-popularity"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_Spectate}}}"
			data-text-textsize="5.5"
			data-icon-size="15 15"
			data-icon-align="{{{ExpendableButton::C_IconAlign_TextRight}}}"
			data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
			data-icon-color-focused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-icon-color-unfocused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_NoBackground}}}"
			data-halign="right" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_MouseOnly}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>
	<frameinstance
		id="button-club" z-index="2"
		pos="{{{MLHelpers::Skew(-126., 53., 10.)}}}"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-styles="{{{ExpendableButton::C_Style_NoBackground}}}"
		data-valign="center"
		data-icon-image="{{{Icons::C_Icon_128x128_Link}}}"
		data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
		data-icon-color-unfocused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
		data-icon-color-focused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
		data-text-textcolor-unfocused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}"
		data-text-textcolor-focused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
		data-nav-inputs="select;down;action2"
		data-nav-targets="_;button-map-0-0;_"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		data-nav-locked="1"
		data-filter-profanities="{{{Tools::C_FilterProfanities_Always}}}"
		hidden="1"
	/>

	<!-- Pop-up body -->
	<frameinstance id="frame-map-rankings" modelid="{{{MapRankings::C_Name}}}" pos="105 -25" z-index="1"/>
	<label id="label-info" pos="{{{MLHelpers::Skew(-125.5, 19., 10.)}}}" size="200 1" class="text-semibold" textsize="2.5" halign="left" z-index="1"/>
	<label id="label-room-id" pos="{{{MLHelpers::Skew(137., 22., 10.)}}}" size="20 10" class="text-semibold" textsize="2" halign="right" textcolor="FFF" z-index="1"/>

	<frame id="frame-room" pos="{{{MLHelpers::Skew(-144., 7.5, 10.)}}}" z-index="1">
		<frameinstance
			id="button-prev-maps" pos="6 -33"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="10 10"
			data-opacityunfocus="0.6"
			data-image="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
			data-imagefocus="{{{Icons::C_Icon_128x128_Arrow_Left_Oblique}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-halign="center" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_MouseOnly}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			hidden="0"
		/>
		<frame id="frame-maps">
			{{{ML_Maps}}}
		</frame>
		<frameinstance
			id="button-next-maps" pos="200 -33"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="10 10"
			data-opacityunfocus="0.6"
			data-image="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
			data-imagefocus="{{{Icons::C_Icon_128x128_Arrow_Right_Oblique}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-halign="center" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_MouseOnly}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			hidden="0"
		/>
	</frame>

	<!-- Bottom buttons -->
	<frameinstance
		id="button-join" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_JoinRoom}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageNextAnimated}}}"
		data-halign="left" data-valign="center"
		data-nav-inputs="select;up;right;action2"
		data-nav-targets="_;button-map-0-0;button-spectate;_"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance
		id="button-spectate" pos="{{{MLHelpers::Skew(-80., -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_Spectate}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-halign="left" data-valign="center"
		data-nav-inputs="select;up;left;right;action2"
		data-nav-targets="_;button-map-0-0;button-join;button-show-password;_"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<quad id="quad-locked-room" pos="{{{MLHelpers::Skew(-60., -67., 10.)}}}" size="10 10" image="{{{Icons::C_Icon_128x128_Lock_Oblique}}}" halign="left" valign="center" colorize="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" hidden="1"/>

	<!-- Room admin password -->
	<frame id="frame-password-admin" pos="{{{MLHelpers::Skew(130., -67., 10.)}}}" hidden="1" z-index="2">
		<label id="label-password-title" pos="{{{MLHelpers::Skew(0., 0., 10.)}}}" size="80 10" class="text-extrabold" text="{{{Text_Password}}}" textsize="3" textcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}" halign="right"/>
		<label id="label-admin-password" pos="{{{MLHelpers::Skew(0., -5., 10.)}}}" size="20 10" class="text-semibold" textsize="3" halign="right" hidden="1"/>
		<label id="label-admin-password-hidden" pos="{{{MLHelpers::Skew(0., -6., 10.)}}}" size="20 10" class="text-semibold" text="* * * * *" textsize="3" halign="right"/>
		<frameinstance
			id="button-show-password"
			modelid="{{{Checkbox::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-opacityunfocus="0.6"
			data-iconsize="7 7"
			data-iconchecked="{{{Icons::C_Icon_128x128_Cam_Follow_Inc}}}"
			data-iconunchecked="{{{Icons::C_Icon_128x128_Cam_Unfollow_Inc}}}"
			data-nav-inputs="select;left;right;action2"
			data-nav-targets="_;button-spectate;button-copy-password;_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Checkbox::C_NavZone}}}"
			data-nav-locked="1"
		/>
		<frameinstance
			id="button-copy-password"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="4 4"
			data-opacityunfocus="0.6"
			data-image="{{{Icons::C_Icon_128x128_Copy_Inc}}}"
			data-imagefocus="{{{Icons::C_Icon_128x128_Copy_Inc}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;left;right;action2"
			data-nav-targets="_;button-show-password;button-regenerate-password;_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
		/>
		<frameinstance
			id="button-regenerate-password"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="7 7"
			data-opacityunfocus="0.6"
			data-image="{{{Icons::C_Icon_128x128_Refresh}}}"
			data-imagefocus="{{{Icons::C_Icon_128x128_Refresh}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;left;action2"
			data-nav-targets="_;button-copy-password;_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
		/>
	</frame>

	<!-- Password pop-up -->
	<frame id="frame-popupmultichoice-password" z-index="10">
		<frameinstance
			id="popupmultichoice-password"
			modelid="{{{PopUpMultiChoice::C_Name}}}"
			data-title="{{{Text_RoomPassword}}}"
			data-choices="{{{TL::MLEncode(C_Choices.tojson())}}}"
			data-description="{{{TL::MLEncode(Description.tojson())}}}"
			data-custom-content-frame="frame-multichoice-custom-content"
			data-close-after-selection="0"
			data-nav-inputs="up"
			data-nav-targets="textfield-password"
			hidden="1"
		/>
		<frame id="frame-multichoice-custom-content" z-index="11">
			<frameinstance
				id="textfield-password"
				modelid="{{{TextField::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{PopUpMultiChoice::C_Class_Navigation}}}"
				data-size="70 10"
				data-placeholder="{{{Text_RoomPassword}}}"
				data-bgopacityunfocus="0.4"
				data-bgcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-bgcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
				data-contourcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-contouropacityunfocus=".0"
				data-contouropacityfocus="1."
				data-textprefix="$i"
				data-textsize="2.5"
				data-textformat="password"
				data-textcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
				data-nav-inputs="select;down;right"
				data-nav-targets="_;{{{PopUpMultiChoice::C_SecondChoice}}};button-show-textfield-password"
				data-nav-group="{{{PopUpMultiChoice::C_NavGroup}}}"
				data-nav-container="{{{PopUpMultiChoice::C_NavContainer}}}"
				data-nav-zone="{{{TextField::C_NavZone}}}"
			/>
			<frameinstance
				id="button-show-textfield-password" pos="40 0"
				modelid="{{{Checkbox::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{PopUpMultiChoice::C_Class_Navigation}}}"
				data-opacityunfocus="0.6"
				data-iconsize="9 9"
				data-iconchecked="{{{Icons::C_Icon_128x128_Cam_Follow_Inc}}}"
				data-iconunchecked="{{{Icons::C_Icon_128x128_Cam_Unfollow_Inc}}}"
				data-nav-inputs="select;left;down"
				data-nav-targets="_;textfield-password;{{{PopUpMultiChoice::C_SecondChoice}}}"
				data-nav-group="{{{PopUpMultiChoice::C_NavGroup}}}"
				data-nav-zone="{{{Checkbox::C_NavZone}}}"
			/>
		</frame>
	</frame>

	<!-- Player list -->
	<frame id="frame-player-list" z-index="10" hidden="1">
		<frameinstance id="frame-background-player-list" modelid="{{{PopUpBackground::C_Name}}}" data-styles="{{{PopUpBackground::C_Style_SecondaryPopUp_WithHeader}}}" z-index="-1"/>
		<label id="label-title" pos="{{{MLHelpers::Skew(0., 30., 10.)}}}" size="150 10" text="{{{Text_OnlinePlayers}}}" class="text-extrabold" textsize="8" z-index="1"/>
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-players" z-index="1" />
		<frame
			id="frame-scroll-players" pos="{{{Size_PlayerScrollWindow.X * -0.5 - 3.5}}} 20"
			class="{{{Scroll::C_Class_Window}}}"
			data-elements-per-line="{{{PlayersColumnsNb}}}"
			data-elements-per-page="{{{PlayersPerPage}}}"
			data-element-size="{{{Size_Player.X}}} {{{Size_Player.Y}}}"
			data-margin-size="{{{Size_PlayerMargin.X}}} {{{Size_PlayerMargin.Y}}}"
			data-window-size="{{{Size_PlayerScrollWindow.X}}} {{{Size_PlayerScrollWindow.Y}}}"
			data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_Always}}}"
			data-scroll-indicator-x-offset="-10." data-scroll-indicator-y-offset="-11."
			data-scroll-indicator-image="{{{Icons::C_Icon_128x128_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-colorize="FFFFFF"
			data-scroll-indicator-size="11"
			data-scrollbar-xoffset="2."
			data-scrollpadding="24.5"
			data-skew="-10."
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_Players}}}
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/Privileges.Script.txt" as Privileges
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as Http
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/Trackmania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/Trackmania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ReportSystem.Script.txt" as ReportSystem
#Include "Libs/Nadeo/Trackmania/Structures/ReportStruct.Script.txt" as ReportStruct
#Include "Libs/Nadeo/Trackmania/ClubEdition.Script.txt" as ClubEdition

#Const C_Retry_Timer 2000 //< 2 seconds

#Const C_Pager_Reset 0
#Const C_Pager_Offset 5

#Struct K_ServerInfo {
	Boolean IsFetched;
	Boolean IsPrivate;
	Boolean Spectate;
	Text[] MapNames;
	Text[] MapUids;
	Text[] PlayerNames;
}

#Struct K_Controls {
	CMlFrame ButtonIcon_Popularity;
	CMlFrame Button_Club;
	CMlFrame Button_CopyPassword;
	CMlFrame Button_Join;
	CMlFrame Button_NextMaps;
	CMlFrame Button_Popularity;
	CMlFrame Button_PrevMaps;
	CMlFrame Button_RegeneratePassword;
	CMlFrame Button_ShowPassword;
	CMlFrame Button_Spectate;
	CMlFrame Frame_AdminPassword;
	CMlFrame Frame_MapRankings;
	CMlFrame Frame_Maps;
	CMlFrame Frame_PlayerList;
	CMlFrame Frame_Popularity;
	CMlFrame Frame_Profile;
	CMlFrame LoadingSpinner_RetrieveInfo;
	CMlFrame PopUpMultiChoice_Password;
	CMlFrame Scroll_Players;
	CMlFrame TextField_Password;
	CMlLabel Label_AdminPassword;
	CMlLabel Label_AdminPasswordHidden;
	CMlLabel Label_Info;
	CMlLabel Label_RoomId;
	CMlLabel Label_ScriptName;
	CMlLabel Label_Title;
	CMlLabel Label_TitlePassword;
	CMlQuad Quad_LockedRoom;
}
#Struct K_PlayPrivilegeCheck {
	Text JoinLink;
	Text ServerLogin;
	Boolean IsSpectator;
	Privileges::K_PrivilegeCheck PrivilegeCheck;
}

#Struct K_State {
	Boolean IsClubActivity;
	Boolean IsJoiningAsSpectator;
	Boolean IsJoiningServer;
	CMlControl FocusedMap;
	Integer PagerOffset;
	Text RoomPassword;
	K_Controls Controls;
	K_ServerInfo ServerInfo;
	{{{CampaignStruct::P}}}K_Map[Text] MapList;
	{{{ClubStruct::P}}}K_Club Club;
	{{{ClubStruct::P}}}K_Room Room;
	Http::K_Request ClubDetailRequest;
	Http::K_Request ClubMemberRequest;
	Http::K_Request ClubRoomDetailRequest;
	Http::K_Request ClubRoomGeneratePasswordRequest;
	Http::K_Request ClubRoomPasswordRequest;
	Http::K_Request JoinRoomRequest;
	Task::K_Task Task_RoomMapList;
	K_PlayPrivilegeCheck PlayPrivilegeCheck;
	ReportStruct::LibStructuresReport_K_ReportData[Integer] CurrentReportData;
}
""",
"""
// Update controller hints at the bottom of the screen
Void UpdateControllerInfo(K_State _State) {
	declare Text[Text] ControllerInfos;

	if (_State.Controls.Frame_PlayerList.Visible) {
		ControllerInfos["Action2"] = "";
		ControllerInfos["B"] = _("Back");
	} else {
		if (!{{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}").HasClass("{{{C_Class_MapButton}}}")) {
			ControllerInfos["A"] = _("Select");
		}
		ControllerInfos["B"] = _("Back");
		if ({{{MapRankings::P}}}IsMapAuthorNameDisplayed(_State.Controls.Frame_MapRankings)) {
			ControllerInfos["Action1"] = "{{{Text_ShowAuthorProfile}}}";
		}
		if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_Popularity) && _State.Controls.Frame_Popularity.Visible) {
			ControllerInfos["Action2"] = "{{{Text_OnlinePlayers}}}";
		}
		if (!_State.Controls.PopUpMultiChoice_Password.Visible) {
			ControllerInfos["{{{Const::C_NavInput_ReportSystem}}}"] = "{{{Const::C_Text_Report}}}";
		}
	}


	ControllerInfo::SetButtons(ControllerInfos);
}

// Display or hide the admin password
Void DisplayAdminPassword(K_State _State, {{{ClubStruct::P}}}K_Member _ClubMember) {
	declare Boolean IsVisible = (_State.Room.HasPassword && _State.Room.RoomId != {{{ClubStruct::P}}}C_RoomNullId && RBAC::HasClubPermission(_ClubMember, RBAC::C_ClubPermission_Administration));

	_State.Controls.Frame_AdminPassword.Visible = IsVisible;
	{{{Navigation::P}}}Lock(_State.Controls.Button_CopyPassword, !IsVisible);
	{{{Navigation::P}}}Lock(_State.Controls.Button_RegeneratePassword, !IsVisible);
	{{{Navigation::P}}}Lock(_State.Controls.Button_ShowPassword, !IsVisible);
}

Void LockPage(Boolean _Lock) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", !_Lock);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", !_Lock);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_MouseOnly}}}", !_Lock);
}

// Display the player's profile associated to the given account id
K_State DisplayProfile(K_State _State, Text _AccountId, Boolean _Display) {
	declare K_State State = _State;

	State.Controls.Frame_Profile.Visible = _Display && _AccountId != "";
	LockPage(State.Controls.Frame_Profile.Visible);
	{{{ProfilePlayerInfo::P}}}Enable(State.Controls.Frame_Profile.Visible);
	if (State.Controls.Frame_Profile.Visible) {
		State.CurrentReportData = ReportSystem::GetDataList();
		{{{ProfilePlayerInfo::P}}}SetUserAccountId(_AccountId);
	} else if (PageIsVisible) {
		ReportSystem::AddUsingId("{{{C_Name}}}");
		ReportSystem::SetDataList(State.CurrentReportData);
		UpdateControllerInfo(State);
	}

	return State;
}

// Display or hide the player list
K_State DisplayPlayerList(K_State _State, Boolean _IsVisible) {
	declare K_State State = _State;
	if (!_IsVisible || (State.Controls.Frame_Popularity.Visible && !State.Room.IsHostedByNadeo)) {
		State.Controls.Frame_PlayerList.Visible = _IsVisible;
		LockPage(_IsVisible);
		{{{Scroll::P}}}LockNavigation(This, !_IsVisible);
		UpdateControllerInfo(State);

		if (_IsVisible) {
			// Disable ReportSystem when PlayerList visible
			State.CurrentReportData = ReportSystem::GetDataList();
			ReportSystem::RemoveUsingId("{{{C_Name}}}");
			{{{Scroll::P}}}Focus(This, State.Controls.Scroll_Players);
		} else {
			{{{Scroll::P}}}Unfocus(This, State.Controls.Scroll_Players);
			if (PageIsVisible) {
				ReportSystem::AddUsingId("{{{C_Name}}}");
				ReportSystem::SetDataList(State.CurrentReportData);
			}
		}
	}
	return State;
}

// Update the focus state of the given map button
Void UpdateMapButtonFocus(K_State _State, CMlFrame _Button_Map, Boolean _IsFocused, Boolean _IsRedrawNeeded) {
	if (!_Button_Map.HasClass("{{{C_Class_MapButton}}}")) return;
	declare Text MapUid for _Button_Map;

	if (_State.Room.ServerInfo.CurrentMapUid != "" && MapUid == _State.Room.ServerInfo.CurrentMapUid) {
		{{{ExpendableButton::P}}}AddStyle(This, _Button_Map, {{{ExpendableButton::P}}}Style_MapLive(), _IsRedrawNeeded);
	}	else {
		{{{ExpendableButton::P}}}RemoveStyle(This, _Button_Map, {{{ExpendableButton::P}}}Style_MapLive(), _IsRedrawNeeded);
	}

	/* Update report context */
	if (_IsFocused) {
		declare Text MapUid for _Button_Map;
		declare {{{CampaignStruct::P}}}K_Map MapData = _State.MapList.get(MapUid, {{{CampaignStruct::P}}}K_Map {});

		if (MapData.Uid != "") {
			ReportSystem::AddData(
				ReportStruct::C_ReportTarget_Track,
				ReportStruct::LibStructuresReport_K_ReportData {
					Details = [MapData.Name],
					Ids = [MapData.Uid],
					Contexts = [["From" => "Menu RoomMapListDisplay"]]
				}
			);
		} else {
			ReportSystem::RemoveData(ReportStruct::C_ReportTarget_Track);
		}
	}
}

// Update the MapRankings component
Void UpdateMapRankingsComponent(K_State _State) {
	declare Text MapUid for _State.FocusedMap;

	{{{MapRankings::P}}}UpdateMapRanking(
		This,
		_State.Controls.Frame_MapRankings,
		{{{ClubStore::P}}}GetUserPinnedClub().Id,
		{{{CampaignStruct::P}}}C_Campaign_NullId, "",
		_State.MapList.get(MapUid, {{{CampaignStruct::P}}}K_Map {}),
		0, 0, False, True
	);

	{{{MapRankings::P}}}ShowRankingAndMedals(_State.Controls.Frame_MapRankings, False, True);
}

// Handle the focus on the given control
K_State Focus(K_State _State, CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
			UpdateMapButtonFocus(State, _From as CMlFrame, False, True);
		} else if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}  else if ({{{Checkbox::P}}}IsCheckbox(_From)) {
			{{{Checkbox::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
			switch (_To.ControlId) {
				case "button-club": {{{Navigation::P}}}ChangeControlTarget(This, _To, "down", State.FocusedMap.ControlId);
				case "button-join": {{{Navigation::P}}}ChangeControlTarget(This, _To, "up", State.FocusedMap.ControlId);
				case "button-spectate": {{{Navigation::P}}}ChangeControlTarget(This, _To, "up", State.FocusedMap.ControlId);
				default: {
					if (_To.HasClass("{{{C_Class_MapButton}}}")) {
						State.FocusedMap = _To;
						UpdateMapRankingsComponent(State);
						UpdateMapButtonFocus(State, _To as CMlFrame, True, True);
					}
				}
			}
		} else if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Checkbox::P}}}IsCheckbox(_To)) {
			{{{Checkbox::P}}}Focus(This, (_To as CMlFrame));
		}
	}

	UpdateControllerInfo(State);

	return State;
}

// Update the map list grid
K_State UpdateMapListGrid(K_State _State, Integer _PagerOffset) {
	if (_PagerOffset < 0 || _PagerOffset > C_Pager_Offset*ML::CeilingInteger(ML::Abs(_State.MapList.count-25.1)/C_Pager_Offset)) return _State;

	declare K_State State = _State;
	declare CMlControl LastMapButton;
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
	State.PagerOffset = ML::Clamp(_PagerOffset, 0, C_Pager_Offset*ML::CeilingInteger(ML::Abs(_State.MapList.count-25.1)/C_Pager_Offset));

	/* Update maps grid */
	foreach (Index => Control in State.Controls.Frame_Maps.Controls) {
		declare CMlFrame Frame_Map = Control as CMlFrame;
		declare CMlFrame Button_Map = Frame_Map.Controls[0] as CMlFrame;
		declare Integer IndexWithOffset = Index + State.PagerOffset;
		declare Text MapUid for Button_Map;

		if (IndexWithOffset < State.MapList.count && IndexWithOffset < State.Room.MapUids.count) {
			declare {{{CampaignStruct::P}}}K_Map MapData = State.MapList.get(State.Room.MapUids[IndexWithOffset], {{{CampaignStruct::P}}}K_Map {});
			declare CMlFrame Frame_MedalStack = Frame_Map.Controls[1] as CMlFrame;

			MapUid = MapData.Uid;
			LastMapButton = Button_Map;
			{{{MedalStack::P}}}SetMedalsNumber(Frame_MedalStack, MapData.Medal);
			if (State.Room.ServerInfo.CurrentMapUid == "") {
				State.Room.ServerInfo.CurrentMapUid = MapData.Uid;
			}

			{{{ExpendableButton::P}}}SetText(This, Button_Map, TL::FormatInteger(IndexWithOffset + 1, 2), False);
			if (MapData.AuthorDisplayName == "") {{{ExpendableButton::P}}}SetTextToSpeech(Button_Map, TL::Compose("%1 %2 - %3", _("Track"), TL::FormatInteger(IndexWithOffset+1, 2), MapData.Name));
			else {{{ExpendableButton::P}}}SetTextToSpeech(Button_Map, TL::Compose("%2 %3 - %4 "^TL::GetTranslatedText("{{{Text_AuthorName}}}"), MapData.AuthorDisplayName, _("Track"), TL::FormatInteger(IndexWithOffset+1, 2), MapData.Name));
			{{{ExpendableButton::P}}}SetStyles(This, Button_Map, [{{{ExpendableButton::P}}}Style_Stack()], False);
			if (IndexWithOffset == 0) {{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_StackTop(), False);
			if (IndexWithOffset == State.MapList.count-1) {{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_StackBottom(), False);
			{{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_Map(), False);
			if (MapData.Score > 0) {{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_MapRaced(), False);
			UpdateMapButtonFocus(State, Button_Map, FocusedControl != Null && Button_Map.Id == FocusedControl.Id, False);
			{{{ExpendableButton::P}}}RedrawButton(This, Button_Map, False);
			{{{ExpendableButton::P}}}ShowAndUnlock(Button_Map);
			Frame_Map.Show();
		} else {
			{{{ExpendableButton::P}}}HideAndLock(Button_Map);
			Frame_Map.Hide();
			MapUid = "";
		}
	}

	/* Update focused map */
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_PrevMaps, State.MapList.count > 25 && State.PagerOffset > C_Pager_Reset);
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_NextMaps, State.MapList.count > 25 && State.PagerOffset < State.MapList.count-25.);
	if (FocusedControl == Null || LastMapButton == Null) {
		State.FocusedMap = State.Controls.Frame_Maps.GetFirstChild("button-map-0-0");
		State = Focus(State, FocusedControl, State.Controls.Button_Join);
	} else if (FocusedControl.HasClass("{{{C_Class_MapButton}}}") && {{{Navigation::P}}}IsLocked(FocusedControl)) {
		if (!{{{Navigation::P}}}IsLocked(LastMapButton)) {
			State = Focus(State, FocusedControl, LastMapButton);
		} else if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Join)) {
			State = Focus(State, FocusedControl, State.Controls.Button_Join);
		} else if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Club)) {
			State = Focus(State, FocusedControl, State.Controls.Button_Club);
		}
	}

	/* Display info if the room has no maps or is on a dedicated server */
	State.Controls.Label_Info.SetText("");
	if (!{{{LoadingSpinner::P}}}IsLoading(State.Controls.LoadingSpinner_RetrieveInfo)) {
		if (!State.Room.IsHostedByNadeo) {
			State.Controls.Label_Info.SetText("{{{Text_Dedicated}}}");
		} else if (State.MapList.count <= 0 && State.Room.Id != {{{ClubStruct::P}}}C_RoomNullId) {
			State.Controls.Label_Info.SetText("{{{Text_NoMaps}}}");
		}
	}

	// Update map rankings component
	UpdateMapRankingsComponent(State);
	UpdateControllerInfo(_State);

	return State;
}

// Update the room scores and medals
K_State UpdateMapListScoresAndMedals(K_State _State, {{{CampaignStruct::P}}}K_Map[Text] _MapList) {
	declare K_State State = _State;
	declare Integer Index = 0;

	/* Update maps grid */
	foreach (Uid => Map in _MapList) {
		if (State.Controls.Frame_Maps.Controls.existskey(Index)) {
			declare CMlFrame Frame_Map = State.Controls.Frame_Maps.Controls[Index] as CMlFrame;
			declare CMlFrame Button_Map = Frame_Map.Controls[0] as CMlFrame;
			declare {{{CampaignStruct::P}}}K_Map MapData = State.MapList.get(Uid, {{{CampaignStruct::P}}}K_Map {});
			declare Text MapUid for Button_Map;
			MapUid = Uid;
			Index += 1;

			// Update map scores and medals
			MapData.Medal = ScoreMgr.Map_GetMedal(MainUser::GetMainUserId(), Uid, "{{{Const::C_ScopeType_PersonalBest}}}", "", "{{{Const::C_GameMode_TimeAttack}}}", "");
			MapData.Score = ScoreMgr.Map_GetRecord_v2(MainUser::GetMainUserId(), Uid, "{{{Const::C_ScopeType_PersonalBest}}}", "", "{{{Const::C_GameMode_TimeAttack}}}", "");

			// Update the map list with scores and medals
			State.MapList[Uid] = MapData;
		}
	}

	/* Refresh maps grid */
	State = UpdateMapListGrid(State, State.PagerOffset);

	return State;
}

// Handle the joining state
K_State SetJoiningState(K_State _State, Text _Message, Boolean _IsJoining) {
	declare K_State State = _State;

	State.IsJoiningServer = _IsJoining;
	State.Controls.Label_Info.SetText(_Message);
	if (State.IsJoiningServer) {
		{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo, "{{{Text_Joining}}}");
		{{{ExpendableButton::P}}}RemoveStyle(This, State.Controls.Button_Join, {{{ExpendableButton::P}}}Style_PageNextAnimated(), False);
		{{{ExpendableButton::P}}}AddStyle(This, State.Controls.Button_Join, {{{ExpendableButton::P}}}Style_ButtonLoading());
	} else {
		{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.LoadingSpinner_RetrieveInfo);
		{{{ExpendableButton::P}}}RemoveStyle(This, State.Controls.Button_Join, {{{ExpendableButton::P}}}Style_ButtonLoading(), False);
		{{{ExpendableButton::P}}}AddStyle(This, State.Controls.Button_Join, {{{ExpendableButton::P}}}Style_PageNextAnimated());
	}

	// Update footer
	declare Vec2 Pos_ButtonSpectate;
	if (State.Controls.Button_Spectate.Visible) {
		Pos_ButtonSpectate = <State.Controls.Button_Join.RelativePosition_V3.X + {{{ExpendableButton::P}}}GetWidth(State.Controls.Button_Join), State.Controls.Button_Spectate.RelativePosition_V3.Y>;
		AnimMgr.Flush(State.Controls.Button_Spectate);
		AnimMgr.Add(State.Controls.Button_Spectate, "<anim pos=\""^Pos_ButtonSpectate.X^" "^Pos_ButtonSpectate.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
	if (State.Controls.Quad_LockedRoom.Visible) {
		declare Vec2 Pos_QuadLockedRoom = <Pos_ButtonSpectate.X + {{{ExpendableButton::P}}}GetWidth(State.Controls.Button_Spectate), State.Controls.Quad_LockedRoom.RelativePosition_V3.Y>;
		AnimMgr.Flush(State.Controls.Quad_LockedRoom);
		AnimMgr.Add(State.Controls.Quad_LockedRoom, "<anim pos=\""^Pos_QuadLockedRoom.X^" "^Pos_QuadLockedRoom.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

K_State RequestClubRoomDetail(K_State _State) {
	declare K_State State = _State;

	if (State.Room.ClubId != {{{ClubStruct::P}}}C_ClubNullId && State.Room.Id != {{{ClubStruct::P}}}C_RoomNullId) {
		State.ClubRoomDetailRequest = Http::DestroyAndCreate(State.ClubRoomDetailRequest, ClubAPI::GetClubRoomDetail(State.Room.ClubId, State.Room.Id));
	}

	return State;
}

// Join the room
K_State JoinRoom(K_State _State, Text _JoinLink, Text _ServerLogin, Boolean _IsSpectator, Boolean _CheckPrivilege) {
	declare K_State State = _State;

	if (TitleControl.IsReady) {
		State.IsJoiningAsSpectator = _IsSpectator;
		if ({{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayPublicClubRoom)) {
			if (_CheckPrivilege) {
				State = SetJoiningState(State, "", True);
				State.PlayPrivilegeCheck = K_PlayPrivilegeCheck {
					JoinLink = _JoinLink,
					ServerLogin = _ServerLogin,
					IsSpectator = _IsSpectator,
					PrivilegeCheck = Privileges::Check_DestroyAndCreate(
						State.PlayPrivilegeCheck.PrivilegeCheck,
						PrivilegeMgr,
						MainUser::GetMainUserId(),
						CPrivilegeMgr::EPrivilege::PlayMultiplayerSessionWithUGC
					)
				};
			} else if (State.Room.HasPassword && !State.Controls.PopUpMultiChoice_Password.Visible && !State.IsJoiningServer) {
				{{{PopUpMultiChoice::P}}}Open(This, State.Controls.PopUpMultiChoice_Password);
			} else if (_State.Room.MapUids.count > 0) {
				if (_JoinLink == "" && _ServerLogin == "" && (!State.Room.HasPassword || (State.Room.HasPassword && {{{TextField::P}}}GetValue(State.Controls.TextField_Password) != ""))) {
					State.RoomPassword = {{{TextField::P}}}GetValue(State.Controls.TextField_Password);
					State = SetJoiningState(State, "", True);

					if (TitleControl.GetServerInfo_Result != Null && State.ServerInfo.IsFetched) {
						State = SetJoiningState(State, "", False);
						TitleControl::Join_GetServerInfo_Result(TitleControl, State.IsJoiningAsSpectator, State.RoomPassword);
					} else {
						State.JoinRoomRequest = Http::DestroyAndCreate(State.JoinRoomRequest, ClubAPI::GetJoinLink(State.Room.ClubId, State.Room.Id));
					}
				} else if (_JoinLink != "" || _ServerLogin != "") {
					declare Tools::K_JoinLink DetailedJoinLink;
					State = SetJoiningState(State, "", False);

					if (_JoinLink != "") {
						DetailedJoinLink = Tools::ParseJoinLink(_JoinLink);
					} else {
						DetailedJoinLink.ServerLoginOrIp = _ServerLogin;
					}
					if (State.IsJoiningAsSpectator) {
						DetailedJoinLink.Type = "qspectate";
					} else {
						DetailedJoinLink.Type = "qjoin";
					}

					DetailedJoinLink.Password = State.RoomPassword;
					TitleControl::OpenLinkAndWait(This, TitleControl, Tools::GenerateJoinLink(DetailedJoinLink), CMlScript::LinkType::ManialinkBrowser);
				} else if (State.Room.HasPassword && {{{TextField::P}}}GetValue(State.Controls.TextField_Password) == "") {
					State.Controls.Label_Info.SetText("{{{Text_EmptyPassword}}}");
				} else {
					State = SetJoiningState(State, "{{{Text_OfflineServer}}}", False);
				}

				// Close password pop-up when joining
				{{{PopUpMultiChoice::P}}}Close(This, State.Controls.PopUpMultiChoice_Password, True);
			}
		} else {
			// Cannot use GetCurrentRoutePath function because we lose the background behind the pop-up
			ClubEdition::GoToPage(This, {{{Router::P}}}GetCurrentParentPath(This), RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayPublicClubRoom));
		}
	}

	return State;
}

// Handle the selection on the given control
K_State Select(K_State _State, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-popularity": State = DisplayPlayerList(State, True);
		case "button-prev-maps": State = UpdateMapListGrid(State, State.PagerOffset - C_Pager_Offset);
		case "button-next-maps": State = UpdateMapListGrid(State, State.PagerOffset + C_Pager_Offset);
		case "button-spectate": if (!Http::IsInitialized(State.JoinRoomRequest)) State = JoinRoom(State, "", "", True, True);
		case "button-join": if (!Http::IsInitialized(State.JoinRoomRequest)) State = JoinRoom(State, "", "", False, True);
		case "button-club": {
			if (State.IsClubActivity) {
				{{{Router::P}}}PushParent(This);
			} else if (State.Club.Id != {{{ClubStruct::P}}}C_ClubNullId) {
				// Cannot use GetCurrentRoutePath function because we lose the background behind the pop-up
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubDetails}}}", {{{Router::P}}}GetCurrentParentPath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubDetails}}}", ["{{{RoutePaths::C_Query_Club}}}" => State.Club.tojson()]);
			}
		}
		case "button-show-password": {
			{{{Checkbox::P}}}Toggle(This, _Control as CMlFrame);
			State.Controls.Label_AdminPassword.Visible = {{{Checkbox::P}}}IsChecked(_Control as CMlFrame);
			State.Controls.Label_AdminPasswordHidden.Visible = !State.Controls.Label_AdminPassword.Visible;
		}
		case "button-regenerate-password": {
			State.ClubRoomGeneratePasswordRequest = Http::DestroyAndCreate(
				State.ClubRoomGeneratePasswordRequest,
				ClubAPI::PostClubRoomPasswordGenerate(State.Room.ClubId, State.Room.Id)
			);
		}
		case "button-copy-password": {
			if (State.Controls.Label_AdminPassword.Value != "") {
				State.Controls.Label_Info.SetText("{{{Text_PasswordCopied}}}");
				System.ClipboardSet(State.Controls.Label_AdminPassword.Value);
			}
		}
	}

	return State;
}

// Update the popularity frame
Void UpdatePopularity(K_State _State) {
	_State.Controls.Frame_Popularity.Visible = (_State.Room.IsHostedByNadeo || _State.ServerInfo.IsFetched) && _State.Room.ServerInfo.PlayerCount > 0;
	_State.Controls.ButtonIcon_Popularity.Visible = _State.Controls.Frame_Popularity.Visible && !_State.Room.IsHostedByNadeo;
	{{{Navigation::P}}}Lock(_State.Controls.Button_Popularity, !(_State.Controls.Frame_Popularity.Visible && !_State.Room.IsHostedByNadeo));
	UpdateControllerInfo(_State);

	if (_State.Controls.Frame_Popularity.Visible) {
		declare Text[Integer] PopularityImageList = {{{dump(Icons::C_Icons_128x128_PopularityLevel_Oblique)}}};
		declare Text PlayerCountText = ""^_State.Room.ServerInfo.PlayerCount;
		if (!_State.Room.IsHostedByNadeo && _State.Room.MaxPlayers > 0) PlayerCountText ^= "/"^_State.Room.MaxPlayers;

		{{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Popularity, PlayerCountText, False);
		{{{ExpendableButton::P}}}SetIconImageUrl(This, _State.Controls.Button_Popularity, PopularityImageList.get(_State.Room.PopularityLevel, ""), False);
		{{{ExpendableButton::P}}}RedrawButton(This, _State.Controls.Button_Popularity, False);
	}
}

// Set the given room in the pop-up
K_State SetRoomMapList(K_State _State, {{{CampaignStruct::P}}}K_Map[Text] _MapList) {
	declare K_State State = _State;
	State.MapList = _MapList;
	State.PagerOffset = C_Pager_Reset;

	/* Set room infos */
	State.Controls.Label_Title.SetText(State.Room.Name);
	State.Controls.Label_RoomId.SetText("");
	if (State.Room.RoomId != {{{ClubStruct::P}}}C_RoomNullId) {
		State.Controls.Label_RoomId.SetText("#"^State.Room.RoomId);
	}
	State.Controls.Quad_LockedRoom.Visible = State.Room.HasPassword;
	State.Controls.Label_ScriptName.SetText(Tools::GetScriptName(State.Room.ScriptName, "{{{Const::C_BaseScriptName}}}", "{{{Const::C_BaseScriptName_ToReplace}}}", {{{dump(Const::C_ModeNames_ScriptNames)}}}));
	State.Controls.Button_Spectate.RelativePosition_V3.X = State.Controls.Button_Join.RelativePosition_V3.X + {{{ExpendableButton::P}}}GetWidth(State.Controls.Button_Join);
	State.Controls.Quad_LockedRoom.RelativePosition_V3.X = State.Controls.Button_Spectate.RelativePosition_V3.X + {{{ExpendableButton::P}}}GetWidth(State.Controls.Button_Spectate);
	State.Controls.Button_RegeneratePassword.RelativePosition_V3.X = - State.Controls.Label_TitlePassword.ComputeWidth(State.Controls.Label_TitlePassword.Value, True) - 4.5;
	State.Controls.Button_CopyPassword.RelativePosition_V3.X = State.Controls.Button_RegeneratePassword.RelativePosition_V3.X - 6.5;
	State.Controls.Button_ShowPassword.RelativePosition_V3.X = State.Controls.Button_CopyPassword.RelativePosition_V3.X - 7.;
	{{{MapRankings::P}}}ShowAuthorDisplayName(State.Controls.Frame_MapRankings, State.Room.RoomId != {{{ClubStruct::P}}}C_RoomNullId && _MapList.count > 0);
	{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Club, TL::Compose("{{{Text_Club}}}", State.Room.ClubName));
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_Club, State.Room.ClubName != "");
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_PrevMaps, _MapList.count > 25 && State.PagerOffset > C_Pager_Reset);
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_NextMaps, _MapList.count > 25 && State.PagerOffset < ML::Abs(_State.MapList.count-25.));
	{{{TextField::P}}}SetValue(This, State.Controls.TextField_Password, "");
	Tools::FitLabelValue(State.Controls.Label_Title, 13., 8., 0.5);
	SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", [State.Room.Name]);

	/* Update the room grid */
	State = UpdateMapListScoresAndMedals(State, _MapList);

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_State State;
declare Boolean IsGettingServerInfo;
declare Boolean IsTitleControlReady;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	IsClubActivity = False,
	IsJoiningServer = False,
	FocusedMap = (Frame_Global.GetFirstChild("button-map-0-0") as CMlFrame),
	Controls = K_Controls {
		ButtonIcon_Popularity = (Frame_Global.GetFirstChild("button-icon-popularity") as CMlFrame),
		Button_Club = (Frame_Global.GetFirstChild("button-club") as CMlFrame),
		Button_CopyPassword = (Frame_Global.GetFirstChild("button-copy-password") as CMlFrame),
		Button_Join = (Frame_Global.GetFirstChild("button-join") as CMlFrame),
		Button_NextMaps = (Frame_Global.GetFirstChild("button-next-maps") as CMlFrame),
		Button_Popularity = (Frame_Global.GetFirstChild("button-popularity") as CMlFrame),
		Button_PrevMaps = (Frame_Global.GetFirstChild("button-prev-maps") as CMlFrame),
		Button_RegeneratePassword = (Frame_Global.GetFirstChild("button-regenerate-password") as CMlFrame),
		Button_ShowPassword = (Frame_Global.GetFirstChild("button-show-password") as CMlFrame),
		Button_Spectate = (Frame_Global.GetFirstChild("button-spectate") as CMlFrame),
		Frame_AdminPassword = (Frame_Global.GetFirstChild("frame-password-admin") as CMlFrame),
		Frame_MapRankings = (Frame_Global.GetFirstChild("frame-map-rankings") as CMlFrame),
		Frame_Maps = (Frame_Global.GetFirstChild("frame-maps") as CMlFrame),
		Frame_PlayerList = (Frame_Global.GetFirstChild("frame-player-list") as CMlFrame),
		Frame_Popularity = (Frame_Global.GetFirstChild("frame-popularity") as CMlFrame),
		Frame_Profile = (Frame_Global.GetFirstChild("frame-profile") as CMlFrame),
		Label_AdminPassword = (Frame_Global.GetFirstChild("label-admin-password") as CMlLabel),
		Label_AdminPasswordHidden = (Frame_Global.GetFirstChild("label-admin-password-hidden") as CMlLabel),
		Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
		Label_RoomId = (Frame_Global.GetFirstChild("label-room-id") as CMlLabel),
		Label_ScriptName = (Frame_Global.GetFirstChild("label-script-name") as CMlLabel),
		Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
		Label_TitlePassword = (Frame_Global.GetFirstChild("label-password-title") as CMlLabel),
		LoadingSpinner_RetrieveInfo = (Frame_Global.GetFirstChild("loadingspinner-retrieve-info") as CMlFrame),
		PopUpMultiChoice_Password = (Frame_Global.GetFirstChild("popupmultichoice-password") as CMlFrame),
		Quad_LockedRoom = (Frame_Global.GetFirstChild("quad-locked-room") as CMlQuad),
		Scroll_Players = (Frame_Global.GetFirstChild("frame-scroll-players") as CMlFrame),
		TextField_Password = (Frame_Global.GetFirstChild("textfield-password") as CMlFrame)
	}
};

IsTitleControlReady = True;

Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Button_Join);
***

***MainLoop***
***
if (PageIsVisible) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				ReportSystem::AddUsingId("{{{C_Name}}}");
				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);
				State.IsClubActivity = Query.existskey("{{{RoutePaths::C_Query_IsClubActivity}}}");
				State = DisplayProfile(State, "", False);
				TitleControl.GetServerInfo_Abort();
				UpdatePopularity(State);

				// Set the current room
				if (Query.existskey("{{{RoutePaths::C_Query_Room}}}")) {
					State.Room.fromjson(Query["{{{RoutePaths::C_Query_Room}}}"]);
					State.ClubRoomDetailRequest = Http::DestroyAndCreate(State.ClubRoomDetailRequest, ClubAPI::GetClubRoomDetail(State.Room.ClubId, State.Room.Id));
					{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo, "{{{Text_Retrieving}}}");
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_MouseOnly}}}", False);
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", False);
				}

				// Update room pop-up
				State = SetRoomMapList(State, State.MapList);
			}
		}
	}

	/* Report system events */
	foreach (Event in ReportSystem::GetPendingEvents()) {
		if (Event.LastUsingId == "{{{C_Name}}}") {
			switch (Event.Type) {
				case ReportSystem::C_EventType_Open: {
					LockPage(True);
				}
				case ReportSystem::C_EventType_Close: {
					LockPage(False);
					UpdateControllerInfo(State);
				}
			}
		}
	}

	/* Check leaderboard privilege */
	if (!Privileges::Check_IsComplete(State.PlayPrivilegeCheck.PrivilegeCheck)) {
		State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_Update(State.PlayPrivilegeCheck.PrivilegeCheck);
		if (Privileges::Check_IsComplete(State.PlayPrivilegeCheck.PrivilegeCheck)) {
			State = SetJoiningState(State, "", False); //< Must be done before calling JoinRoom() otherwise password checking won't work
			if (Privileges::Check_HasPrivilege(State.PlayPrivilegeCheck.PrivilegeCheck)) {
				State = JoinRoom(State, State.PlayPrivilegeCheck.JoinLink, State.PlayPrivilegeCheck.ServerLogin, State.PlayPrivilegeCheck.IsSpectator, False);
			}
			State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlayPrivilegeCheck.PrivilegeCheck);
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Cancel: {{{Router::P}}}PushParent(This);
						case CMlScriptEvent::EMenuNavAction::Action1: {
							if ({{{MapRankings::P}}}IsMapAuthorNameDisplayed(State.Controls.Frame_MapRankings)) {
								declare Text MapUid for State.FocusedMap;
								State = DisplayProfile(State, State.MapList.get(MapUid, {{{CampaignStruct::P}}}K_Map {}).AuthorLogin, True);
							}
						}
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: if (!Event.IsActionAutoRepeat) State = Select(State, Event.To);
						case CMlScriptEvent::EMenuNavAction::Action2: State = DisplayPlayerList(State, True);
						default: {
							if (Event.To == Event.From && Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
								State = UpdateMapListGrid(State, State.PagerOffset - C_Pager_Offset);
							} else if (Event.To == Event.From && Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
								State = UpdateMapListGrid(State, State.PagerOffset + C_Pager_Offset);
							} else {
								State = Focus(State, Event.From, Event.To);
							}
						}
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Event.To);
						case CMlScriptEvent::Type::MouseOver: State = Focus(State, Event.From, Event.To);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_MouseOnly}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Event.To);
						case CMlScriptEvent::Type::MouseOver: State = Focus(State, Event.From, Event.To);
						case CMlScriptEvent::Type::MouseOut: State = Focus(State, Event.From, Event.To);
					}
				}
			}
		}
	}

	/* Scroll events */
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Scroll::P}}}C_EventType_NavAction: {
				switch (Event.NavAction) {
					case CMlScriptEvent::EMenuNavAction::Cancel: State = DisplayPlayerList(State, False);
					case CMlScriptEvent::EMenuNavAction::Action2: State = DisplayPlayerList(State, False);
				}
			}
			case {{{Scroll::P}}}C_EventType_Update: {
				if (Event.Scroll != Null && Event.Scroll.ControlId == State.Controls.Scroll_Players.ControlId) {
					foreach (Key => Frame_Element in Event.ElementsVisible) {
						if (State.ServerInfo.PlayerNames.existskey(Key)) {
							(Frame_Element.GetFirstChild("label-name") as CMlLabel).SetText(State.ServerInfo.PlayerNames[Key]);
							Frame_Element.Show();
						} else {
							Frame_Element.Hide();
						}
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						Frame_Element.Hide();
					}
				}
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{PopUpBackground::P}}}C_EventType_Close: {
				if (Event.PopUpBackground != Null) {
					switch (Event.PopUpBackground.ControlId) {
						case "frame-background": {{{Router::P}}}PushParent(This);
						case "frame-background-player-list": State = DisplayPlayerList(State, False);
					}
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_Password.Id) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					switch (Event.SelectedIndex) {
						case {{{C_Choice_Cancel}}}: {{{PopUpMultiChoice::P}}}Close(This, State.Controls.PopUpMultiChoice_Password, True);
						case {{{C_Choice_Join}}}: State = JoinRoom(State, "", "", State.IsJoiningAsSpectator, False);
						default: {
							if ({{{Checkbox::P}}}IsCheckbox(Event.SelectedControl)) {
								if ({{{Checkbox::P}}}Toggle(This, Event.SelectedControl as CMlFrame)) {
									{{{TextField::P}}}SetTextFormatEntry(This, State.Controls.TextField_Password, CMlEntry::ETextFormat::Basic);
								} else {
									{{{TextField::P}}}SetTextFormatEntry(This, State.Controls.TextField_Password, CMlEntry::ETextFormat::Password);
								}
							}
						}
					}
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					// Disable ReportSystem when the PopUpMultiChoice is visible
					if (State.Controls.PopUpMultiChoice_Password.Visible) {
						State.CurrentReportData = ReportSystem::GetDataList();
						ReportSystem::RemoveUsingId("{{{C_Name}}}");
					} else {
						ReportSystem::AddUsingId("{{{C_Name}}}");
						ReportSystem::SetDataList(State.CurrentReportData);
					}
					UpdateControllerInfo(State);
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", !State.Controls.PopUpMultiChoice_Password.Visible);
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", !State.Controls.PopUpMultiChoice_Password.Visible);
				}
			}
		}
	}

	/* Profile player info events */
	foreach (Event in {{{ProfilePlayerInfo::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{ProfilePlayerInfo::P}}}C_EventType_Close: {
				State = DisplayProfile(State, "", False);
			}
		}
	}

	/* Fetch room details */
	if (Http::IsInitialized(State.ClubRoomDetailRequest)) {
		State.ClubRoomDetailRequest = Http::Update(State.ClubRoomDetailRequest);
		if (!Http::IsRunning(State.ClubRoomDetailRequest)) {
			if (Http::IsSuccess(State.ClubRoomDetailRequest)) {
				State.Room = ClubAPI::GetResponseFromGetClubRoomDetail(State.ClubRoomDetailRequest);

				// Redirect to the corresponding if it's a campaign room
				// For example with the splashscreen, we don't know in advance if it's a campaign room or not
				if (State.Room.CampaignId != {{{CampaignStruct::C_Campaign_NullId}}}) {
					{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_RoomCampaignDisplay}}}", "{{{RoutePaths::C_Path_ClubDetails}}}");
					{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_RoomCampaignDisplay}}}", [
						"{{{RoutePaths::C_Query_Room}}}" => ""^State.Room.tojson(),
						"{{{RoutePaths::C_Query_IsClubActivity}}}" => "",
						{{{Router::P}}}C_Query_MenuSection => "{{{RoutePaths::C_MenuSection_Clubs}}}"
					], False, False, True);
				} else {
					UpdatePopularity(State);

					State.ClubDetailRequest = Http::DestroyAndCreate(State.ClubDetailRequest, ClubAPI::GetClub(State.Room.ClubId));
					if (State.Room.HasPassword) {
						State.ClubRoomPasswordRequest = Http::DestroyAndCreate(State.ClubRoomPasswordRequest, ClubAPI::GetClubRoomPassword(State.Room.ClubId, State.Room.Id));
					}
					if (State.Room.MapUids.count > 0) {
						State.Task_RoomMapList = Task::DestroyAndCreate(State.Task_RoomMapList, DataFileMgr, DataFileMgr.Map_NadeoServices_GetListFromUid(MainUser::GetMainUserId(), State.Room.MapUids));
					} else if (!State.Room.IsHostedByNadeo) {
						if (State.Room.ServerAccountId != "") {
							TitleControl::WaitIsReady(TitleControl);
							TitleControl.GetServerInfo(State.Room.ServerAccountId);
							IsGettingServerInfo = True;
						} else {
							State.Controls.Label_Info.SetText("{{{Text_Dedicated}}}");
							{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.LoadingSpinner_RetrieveInfo);
							{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_MouseOnly}}}", True);
							{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", True);
						}
					}

					if (State.Room.ActivityId != {{{ClubStruct::P}}}C_ActivityNullId) {
						ReportSystem::AddData(
							ReportStruct::C_ReportTarget_Activity,
							ReportStruct::LibStructuresReport_K_ReportData {
								Details = [State.Room.Name],
								Ids = [TL::ToText(State.Room.ActivityId)],
								Contexts = [["From" => "Menu RoomMapListDisplay"]]
							}
						);
					}

					if (State.Room.ClubId != {{{ClubStruct::P}}}C_ClubNullId) {
						ReportSystem::AddData(
							ReportStruct::C_ReportTarget_Club,
							ReportStruct::LibStructuresReport_K_ReportData {
								Details = [State.Room.ClubName],
								Ids = [TL::ToText(State.Room.ClubId)],
								Contexts = [["From" => "Menu RoomMapListDisplay"]]
							}
						);
					}
				}
			} else {
				State.Controls.Label_Info.SetText(TL::Compose("{{{Text_FetchError}}}", ""^Http::GetStatusCode(State.ClubRoomDetailRequest)));
				{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.LoadingSpinner_RetrieveInfo);
				{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_MouseOnly}}}", True);
				{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", True);
			}
			State.ClubRoomDetailRequest = Http::Destroy(State.ClubRoomDetailRequest);
			UpdateControllerInfo(State);
		}
	}

	/* Get the map list of the room */
	if (Task::IsInitialized(State.Task_RoomMapList)) {
		State.Task_RoomMapList = Task::Update(State.Task_RoomMapList);
		if (!Task::IsRunning(State.Task_RoomMapList)) {
			{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.LoadingSpinner_RetrieveInfo);
			declare CTaskResult_NSMapList SourceTask = Task::GetSourceTask_NSMapList(State.Task_RoomMapList);
			if (Task::IsSuccess(State.Task_RoomMapList) && SourceTask != Null) {
				declare {{{CampaignStruct::P}}}K_Map[Text] MapList;
				foreach (NSMap in SourceTask.MapList) {
					MapList[NSMap.Uid] = {{{CampaignStruct::P}}}GetMapFromNSMap({{{CampaignStruct::P}}}K_Map {}, NSMap);
				}

				// Check if all maps are registered in NadeoServices (otherwise add non-registered maps to the list)
				if (!State.Room.IsHostedByNadeo && MapList.count != State.ServerInfo.MapUids.count) {
					foreach (Index => MapUid in State.ServerInfo.MapUids) {
						if (!MapList.existskey(MapUid)) {
							MapList[MapUid] = {{{CampaignStruct::P}}}K_Map {
								Name = State.ServerInfo.MapNames[Index],
								Uid = MapUid
							};
						}
					}
				}

				State = SetRoomMapList(State, MapList);
			} else {
				State.Controls.Label_Info.SetText(TL::Compose("{{{Text_MapListError}}}", Task::GetSourceTaskError(State.Task_RoomMapList).Code));
			}
			State.Task_RoomMapList = Task::Destroy(State.Task_RoomMapList);
			{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_MouseOnly}}}", True);
			{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", True);
		}
	}

	/* Get dedicated server info */
	if (IsGettingServerInfo && TitleControl.IsReady) {
		declare CServerInfo ServerInfo <=> TitleControl.GetServerInfo_Result;
		IsGettingServerInfo = False;

		if (ServerInfo == Null) {
			State.Controls.Label_Info.SetText("{{{Text_Dedicated}}}");
			{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.LoadingSpinner_RetrieveInfo);
			{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_MouseOnly}}}", True);
			{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", True);
		} else {
			State.Room.ScriptName = ServerInfo.ModeName;
			State.Room.MaxPlayers = ServerInfo.MaxPlayerCount;
			State.Room.ServerInfo.PlayerCount = ServerInfo.PlayerCount;
			State.Room.HasPassword = ServerInfo.IsPrivateForSpectator || ServerInfo.IsPrivate;
			State.ServerInfo = K_ServerInfo {
				IsFetched = True,
				IsPrivate = State.Room.HasPassword
			};

			foreach (PlayerName in ServerInfo.PlayerNames) {
				State.ServerInfo.PlayerNames.add(PlayerName);
			}
			foreach (ChallengeName in ServerInfo.ChallengeNames) {
				State.ServerInfo.MapNames.add(ChallengeName);
			}
			foreach (ChallengeId in ServerInfo.ChallengeIds) {
				State.ServerInfo.MapUids.add(ChallengeId);
				State.Room.MapUids.add(ChallengeId);
			}

			UpdatePopularity(State);
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Players, ServerInfo.PlayerCount);
			if (State.ServerInfo.MapUids.count > 0) {
				State.Task_RoomMapList = Task::DestroyAndCreate(State.Task_RoomMapList, DataFileMgr, DataFileMgr.Map_NadeoServices_GetListFromUid(MainUser::GetMainUserId(), State.ServerInfo.MapUids));
			}
		}
	}

	/* Get club details */
	if (Http::IsInitialized(State.ClubDetailRequest)) {
		State.ClubDetailRequest = Http::Update(State.ClubDetailRequest);
		if (!Http::IsRunning(State.ClubDetailRequest)) {
			if (Http::IsSuccess(State.ClubDetailRequest)) {
				State.Club = ClubAPI::GetResponseFromGetClub(State.ClubDetailRequest);
			}
			State.ClubDetailRequest = Http::Destroy(State.ClubDetailRequest);
		}
	}

	/* Fetch room password */
	if (Http::IsInitialized(State.ClubRoomPasswordRequest)) {
		State.ClubRoomPasswordRequest = Http::Update(State.ClubRoomPasswordRequest);
		if (!Http::IsRunning(State.ClubRoomPasswordRequest)) {
			if (Http::IsSuccess(State.ClubRoomPasswordRequest)) {
				State.Controls.Label_AdminPassword.SetText(ClubAPI::GetResponseFromGetClubRoomPassword(State.ClubRoomPasswordRequest));
				if (!State.IsClubActivity) {
					State.ClubMemberRequest = Http::DestroyAndCreate(State.ClubMemberRequest, ClubAPI::GetClubMemberWithId(State.Room.ClubId, LocalUser.WebServicesUserId));
				} else {
					DisplayAdminPassword(State, {{{ClubStore::P}}}GetUserCurrentClubMembership());
				}
			}
			State.ClubRoomPasswordRequest = Http::Destroy(State.ClubRoomPasswordRequest);
		}
	}

	/* Password generation */
	if (Http::IsInitialized(State.ClubRoomGeneratePasswordRequest)) {
		State.ClubRoomGeneratePasswordRequest = Http::Update(State.ClubRoomGeneratePasswordRequest);
		if (!Http::IsRunning(State.ClubRoomGeneratePasswordRequest)) {
			if (Http::IsSuccess(State.ClubRoomGeneratePasswordRequest)) {
				State.Controls.Label_AdminPassword.SetText(ClubAPI::GetResponseFromGetClubRoomPassword(State.ClubRoomGeneratePasswordRequest));
				State.Controls.Label_Info.SetText("{{{Text_PasswordGenerated}}}");
			} else {
				State.Controls.Label_Info.SetText(TL::Compose("{{{Text_PasswordGenerationError}}}", ""^Http::GetStatusCode(State.ClubRoomGeneratePasswordRequest)));
			}
			State.ClubRoomGeneratePasswordRequest = Http::Destroy(State.ClubRoomGeneratePasswordRequest);
		}
	}

	/* Get player club membership */
	if (Http::IsInitialized(State.ClubMemberRequest)) {
		State.ClubMemberRequest = Http::Update(State.ClubMemberRequest);
		if (!Http::IsRunning(State.ClubMemberRequest)) {
			if (Http::IsSuccess(State.ClubMemberRequest)) {
				DisplayAdminPassword(State, ClubAPI::GetResponseFromGetClubMemberWithId(State.ClubMemberRequest));
			}
			State.ClubMemberRequest = Http::Destroy(State.ClubMemberRequest);
		}
	}

	/* Join server request */
	if (Http::IsInitialized(State.JoinRoomRequest)) {
		State.JoinRoomRequest = Http::Update(State.JoinRoomRequest);
		if (!Http::IsRunning(State.JoinRoomRequest)) {
			if (Http::IsSuccess(State.JoinRoomRequest)) {
				declare ClubAPI::K_JoinLink JoinLinkStruct = ClubAPI::GetResponseFromGetJoinLink(State.JoinRoomRequest);
				if (!JoinLinkStruct.IsStarting) {
					State = JoinRoom(State, JoinLinkStruct.JoinLink, "", State.IsJoiningAsSpectator, False);
				} else {
					if (JoinLinkStruct.JoinLink != "") {
						{{{ServerStatus::P}}}GetServerStatus(Tools::ParseJoinLink(JoinLinkStruct.JoinLink).ServerLoginOrIp);
					} else {
						State.JoinRoomRequest = Http::RetryWithDelay(State.JoinRoomRequest, Now + C_Retry_Timer);
					}
				}
			} else {
				State = SetJoiningState(State, TL::Compose("{{{Text_JoinError}}}", ""^Http::GetStatusCode(State.JoinRoomRequest)), False);
			}
			if (!Http::IsWaitingRetry(State.JoinRoomRequest)) {
				State.JoinRoomRequest = Http::Destroy(State.JoinRoomRequest);
			}
		}
	}

	/* Handle server exit */
	if (!IsGettingServerInfo && IsTitleControlReady != TitleControl.IsReady) {
		IsTitleControlReady = TitleControl.IsReady;
		if (IsTitleControlReady && !State.IsJoiningServer) {
			State = UpdateMapListScoresAndMedals(State, State.MapList);
			State = RequestClubRoomDetail(State); //< Update the currently played track
		}
	}

	/* ServerStatus events */
	foreach (Event in {{{ServerStatus::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{ServerStatus::P}}}C_EventType_ServerReady: {
				if (Event.IsSuccess) {
					State = JoinRoom(State, "", Event.ServerLogin, State.IsJoiningAsSpectator, False);
				} else {
					State = SetJoiningState(State, "{{{Text_OfflineServer}}}", False);
				}
			}
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_LeavingRoute}}}": {
				State = K_State {
					FocusedMap = State.FocusedMap,
					Controls = State.Controls
				};
				State = SetRoomMapList(State, []);
				UpdateMapRankingsComponent(State);
				State = DisplayPlayerList(State, False);
				DisplayAdminPassword(State, {{{ClubStruct::P}}}K_Member {});
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Players, 0);
				{{{ServerStatus::P}}}CancelRequest();
				TitleControl.GetServerInfo_Abort();
				State = SetJoiningState(State, "", False);
				State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlayPrivilegeCheck.PrivilegeCheck);
				ReportSystem::RemoveUsingId("{{{C_Name}}}");
			}
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	ButtonIcon::ComponentV2(),
	CampaignStruct::Component(),
	Checkbox::ComponentV2(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	ExpendableAsset::ComponentV2(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MapRankings::ComponentV2(),
	MedalStack::Component(),
	Navigation::ComponentV2(),
	PopUpBackground::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	ProfilePlayerInfo::Component(),
	Router::ComponentV2(),
	Scroll::ComponentV2(),
	ServerStatus::Component(),
	TextField::ComponentV2(),
	Transition::ComponentV2(),
	UserStore::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}