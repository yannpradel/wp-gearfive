/**
 *	Page: CreateMapReviewActivity
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Pages/CreateMapReviewActivity.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/Trackmania/API/BrowserAPI.Script.txt" as BrowserAPI
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/Checkbox.Script.txt" as Checkbox
#Include "Libs/Nadeo/CMGame/Components/Counter.Script.txt" as Counter
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/Trackmania/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/Trackmania/Components/PopUpClubThemes.Script.txt" as PopUpClubThemes
#Include "Libs/Nadeo/CMGame/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/Trackmania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/CMGame/Structures/ClubStruct.Script.txt" as ClubStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_CreateMapReviewActivity"
#Const C_NavGroup_Default "navgroup-page-create-map-review-activity-default"
#Const C_NavGroup_Global "navgroup-page-create-map-review-activity-global"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [TrackReviewCreation] Title of the page to create the activity track review
	declare Text Text_CreateMapReview = _("Create track review");
	//L16N [TrackReviewCreation] Title of the page to edit a track review activity.
	declare Text Text_EditMapReview = _("Edit track review");
	//L16N [TrackReviewCreation] Button to finalize the creation of an activity
	declare Text Text_Create = _("Create");
	//L16N [TrackReviewCreation] Button to finalize the edition of an activity
	declare Text Text_Save = _("Save");
	//L16N [TrackReviewCreation] Checkbox to enable or disable server's scalability
	declare Text Text_Scalable = _("Scalable servers");
	//L16N [TrackReviewCreation] Checkbox to enable or disable the skip vote of the currently reviewed track
	declare Text Text_Skip = _("Allow vote to skip track");
	//L16N [TrackReviewCreation] Checkbox to enable or disable the track submition limitation per hour
	declare Text Text_Limitation = _("Limit to 1 track upload per hour");
	//L16N [TrackReviewCreation] Maximum number of simultaneous players on the track review server
	declare Text Text_MaxPlayers = _("Max players");
	//L16N [TrackReviewCreation] The duration of test for a track
	declare Text Text_TimeLimit = _("Time per track (sec)");
	//L16N [TrackReviewCreation] Text displayed while creating an activity
	declare Text Text_Creating = _("Creating activity...");
	//L16N [TrackReviewCreation] Text displayed while editing an activity
	declare Text Text_Editing = _("Editing activity...");
	//L16N [TrackReviewCreation] Default placeholder for the track review name text field.
	declare Text Text_Name = _("Track review name");
	//L16N [TrackReviewCreation] Error message displayed when the player tries to create an activity without the requirements.
	declare Text Text_NoName = _("A title is required in order to create this track review activity.");
	//L16N [TrackReviewCreation] Text displayed while retrieving an activity.
	declare Text Text_RetrievingActivity = _("Retrieving track review activity...");
	//L16N [TrackReviewCreation] Text pronounced when the player is focusing the button to choose a logo for the room.
	declare Text TTS_ChooseLogo = _("Choose a logo for your activity");

	declare Boolean PlaformIsFromFirstParty = Platform::IsFromFirstParty(System);
	declare Vec2 Size_TextField = <98., 14.> * 0.84;
	declare Real PosNameX = -60.;

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Page -->
<frameinstance modelid="{{{BrowserAPI::C_Name}}}" id="frame-browser" z-index="{{{Const::C_ZIndex_BrowserAPI}}}" hidden="1"/>
<frameinstance id="loadingspinner-create-or-edit-track-review" modelid="{{{LoadingSpinner::C_Name}}}" data-dimmer="true" data-opacity="0." z-index="{{{Const::C_ZIndex_Loading}}}"/>

<!-- Frame global -->
<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="cancel;appmenu" data-nav-targets="_;_" data-nav-group="{{{C_NavGroup_Global}}}" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" z-index="-1"/>
	<frameinstance id="popupclubthemes-icon" modelid="{{{PopUpClubThemes::C_Name}}}" z-index="3"/>
	<frameinstance id="loadingspinner-retrieve-info" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-120., 20., 10.)}}}" data-label="{{{Text_RetrievingActivity}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" data-opacity="0." data-size="10 10" scale="0.7" z-index="2"/>
	<label id="label-title" pos="{{{MLHelpers::Skew(-127.7, 69.2, 10.)}}}" size="250 35" class="text-extrabold" textsize="13" halign="left" valign="top" z-index="1"/>
	<label id="label-info" pos="{{{MLHelpers::Skew(-125., 20., 10.)}}}" size="250 10" class="text-semibold" textsize="2.5" halign="left"/>

	<frame id="frame-content">
		<frameinstance
			id="button-logo" pos="{{{MLHelpers::Skew(-103., 41.2, 10.)}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="{{{MLHelpers::MLKeepRatioFromY(608., 272., 21.)}}}"
			data-opacityunfocus=".6"
			data-tts-text="{{{TTS_ChooseLogo}}}"
			data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-iconfocuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-iconsize="13 13"
			data-bgkeepratio="clip"
			data-contouropacityunfocus=".0"
			data-contourimagecolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_ComponentButtonOutlineFocus)}}}"
			data-contourimage="{{{Const::C_ImageUrl_ClubActivity_Contour}}}"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;down;left;right"
			data-nav-targets="_;counter-max-players;button-back;textfield-name"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			id="textfield-name" pos="{{{MLHelpers::Skew(-80., 47., 10.)}}}"
			modelid="{{{TextField::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="73.5 9"
			data-placeholder="{{{Text_Name}}}"
			data-bgopacityunfocus="0.4"
			data-bgcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-bgcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-contourcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-contouropacityunfocus=".0"
			data-contouropacityfocus="1."
			data-textsize="3."
			data-textcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;left;right;down"
			data-nav-targets="_;button-logo;button-create;counter-max-players"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{TextField::C_NavZone}}}"
		/>

		<frame id="frame-options" pos="{{{MLHelpers::Skew(-124., 8., 10.)}}}">
			<label id="label-options" text="{{{_("Options")}}}" class="text-extrabold" textsize="8" halign="left"/>

			<frame id="frame-counter-max-players" pos="{{{MLHelpers::Skew(0., -11., 10.)}}}">
				<label id="label-max-players" text="{{{Text_MaxPlayers}}}" size="60 10" class="text-extrabold" halign="left" opacity=".5"/>
				<frameinstance
					modelid="{{{Counter::C_Name}}}" id="counter-max-players"
					class="{{{Navigation::C_Class}}}"
					pos="80 0" z-index="10"
					data-value="64"
					data-minvalue="5"
					data-maxvalue="100"
					data-iconsize="6 6"
					data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
					data-opacityunfocus="0.5"
					data-nav-inputs="select;cancel;up;down"
					data-nav-targets="_;_;button-logo;counter-time-limit"
					data-nav-group="{{{C_NavGroup_Default}}}"
					data-nav-zone="{{{Counter::C_NavZone}}}"
				/>
			</frame>

			<frame id="frame-counter-time-limit" pos="{{{MLHelpers::Skew(0., -21., 10.)}}}">
				<label id="label-time-limit" text="{{{Text_TimeLimit}}}" size="60 10" class="text-extrabold" halign="left" opacity=".5"/>
				<frameinstance
					modelid="{{{Counter::C_Name}}}" id="counter-time-limit"
					class="{{{Navigation::C_Class}}}"
					pos="80 0" z-index="10"
					data-value="180"
					data-minvalue="60"
					data-maxvalue="3600"
					data-step="10"
					data-iconsize="6 6"
					data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
					data-opacityunfocus="0.5"
					data-nav-inputs="select;cancel;up;down"
					data-nav-targets="_;_;counter-max-players;checkbox-scalable"
					data-nav-group="{{{C_NavGroup_Default}}}"
					data-nav-zone="{{{Counter::C_NavZone}}}"
				/>
			</frame>

			<frameinstance
				modelid="{{{Checkbox::C_Name}}}" id="checkbox-scalable"
				class="{{{Navigation::C_Class}}}"
				pos="{{{MLHelpers::Skew(0., -31., 10.)}}}" z-index="10"
				data-labelsize="90 10"
				data-text="{{{Text_Scalable}}}"
				data-iconsize="10 10"
				data-iconxpos="0."
				data-textxpos="0.06"
				data-texthalign="left"
				data-textitalicslope=".2"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-opacityunfocus="0.5"
				data-iconchecked="{{{Icons::C_Icon_128x128_Checkbox_Active_Square}}}"
				data-iconunchecked="{{{Icons::C_Icon_128x128_Checkbox_Inactive_Square}}}"
				data-halign="left" data-valign="center"
				data-nav-inputs="select;cancel;up;down;left;right"
				data-nav-targets="_;_;counter-time-limit;checkbox-skip;button-back;button-create"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="{{{Checkbox::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Checkbox::C_Name}}}" id="checkbox-skip"
				class="{{{Navigation::C_Class}}}"
				pos="{{{MLHelpers::Skew(0., -41., 10.)}}}" z-index="10"
				data-labelsize="90 10"
				data-text="{{{Text_Skip}}}"
				data-iconsize="10 10"
				data-iconxpos="0."
				data-textxpos="0.06"
				data-texthalign="left"
				data-textitalicslope=".2"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-opacityunfocus="0.5"
				data-iconchecked="{{{Icons::C_Icon_128x128_Checkbox_Active_Square}}}"
				data-iconunchecked="{{{Icons::C_Icon_128x128_Checkbox_Inactive_Square}}}"
				data-halign="left" data-valign="center"
				data-nav-inputs="select;cancel;up;down;left;right"
				data-nav-targets="_;_;checkbox-scalable;checkbox-limitation;button-back;button-create"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="{{{Checkbox::C_NavZone}}}"
			/>

			<frameinstance
				modelid="{{{Checkbox::C_Name}}}" id="checkbox-limitation"
				class="{{{Navigation::C_Class}}}"
				pos="{{{MLHelpers::Skew(0., -51., 10.)}}}" z-index="10"
				data-labelsize="90 10"
				data-text="{{{Text_Limitation}}}"
				data-iconsize="10 10"
				data-iconxpos="0."
				data-textxpos="0.06"
				data-texthalign="left"
				data-textitalicslope=".2"
				data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
				data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
				data-opacityunfocus="0.5"
				data-iconchecked="{{{Icons::C_Icon_128x128_Checkbox_Active_Square}}}"
				data-iconunchecked="{{{Icons::C_Icon_128x128_Checkbox_Inactive_Square}}}"
				data-halign="left" data-valign="center"
				data-nav-inputs="select;cancel;up;down;left;right"
				data-nav-targets="_;_;checkbox-skip;button-back;button-back;button-create"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="{{{Checkbox::C_NavZone}}}"
			/>
		</frame>
	</frame>

	<!-- Bottom buttons -->
	<frameinstance id="button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
	<frameinstance
		id="button-back" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-max-width="60."
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;up;right"
		data-nav-targets="_;checkbox-limitation;button-create"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance id="button-icon-create" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" data-halign="left" data-size="8 8" data-bind="appmenu" data-hideformouse="1" />
	<frameinstance
		id="button-create" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_Create}}}"
		data-max-width="70."
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-halign="right"
		data-nav-inputs="select;up;left"
		data-nav-targets="_;checkbox-limitation;button-back"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as Http
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/Trackmania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "TextLib" as TL

#Const C_Name_MaxChar 20

#Const C_PlayersNb_Default 64
#Const C_TimeLimit_Default 180

#Struct K_Controls {
	CMlFrame Button_Back;
	CMlFrame Button_Create;
	CMlFrame Button_Logo;
	CMlFrame Checkbox_AllowVoteSkipMap;
	CMlFrame Checkbox_Scalable;
	CMlFrame Checkbox_SubmissionLimitation;
	CMlFrame Counter_MaxPlayers;
	CMlFrame Counter_TimeLimit;
	CMlFrame Frame_Browser;
	CMlFrame Frame_Footer;
	CMlFrame Frame_Global;
	CMlFrame LoadingSpinner_RetrieveInfo;
	CMlFrame LoadingSpinner_CreateOrEditTrackReview;
	CMlFrame PopUpClubThemes_Icon;
	CMlFrame TextField_Name;
	CMlLabel Label_Info;
	CMlLabel Label_Title;
}

#Struct K_State {
	{{{ClubStruct::P}}}K_MapReview MapReview;
	Boolean IsEditing;
}
""",
"""
// Enable or disable navigation groups
Void EnableNavigationGroups(Boolean _IsEnabled) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", _IsEnabled);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", _IsEnabled);
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{Checkbox::P}}}IsCheckbox(_From)) {
			{{{Checkbox::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{Counter::P}}}IsCounter(_From)) {
			{{{Counter::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{TextField::P}}}IsTextField(_From)) {
			{{{TextField::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{Checkbox::P}}}IsCheckbox(_To)) {
			{{{Checkbox::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{Counter::P}}}IsCounter(_To)) {
			{{{Counter::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{TextField::P}}}IsTextField(_To)) {
			{{{TextField::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void DisplayInfo(CMlLabel _Label_Info, Text _Text, Boolean _IsError) {
	declare Vec2 Pos_Hidden = MLHelpers::SkewX(<-126., 20.>, 10.);
	declare Vec2 Pos_Visible = MLHelpers::SkewX(<-125., 20.>, 10.);
	AnimMgr.Flush(_Label_Info);

	if (_Text != "") {
		_Label_Info.SetText(_Text);
		_Label_Info.Opacity = 0.;
		_Label_Info.RelativePosition_V3 = Pos_Hidden;
		if (_IsError) {
			_Label_Info.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextError)}}};
		} else {
			_Label_Info.TextColor = {{{Stylesheet::GetColorRGB(Stylesheet::C_Color_TextLight)}}};
		}
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Visible.X^" "^Pos_Visible.Y^"\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void DisplayBrowser(Boolean _IsVisible, CMlFrame _Frame_Browser) {
	_Frame_Browser.Visible = _IsVisible;
	EnableNavigationGroups(!_IsVisible);
	{{{BrowserAPI::P}}}FocusBrowser(This, _IsVisible);
	if (_IsVisible) {
		declare BrowserSettings = {{{BrowserAPI::P}}}GetDefaultSettings();
		BrowserSettings.FilterByExtension = ["png", "jpg", "jpeg"];
		BrowserSettings.FilterClubThemeByMediaType = ["{{{ClubStruct::C_MediaType_Icon}}}"];
		BrowserSettings.DisplayFileNameTooltip = True;
		{{{BrowserAPI::P}}}SetCurrentBrowser(This,
			{{{BrowserAPI::C_BrowserType_PathNavigation}}},
			"{{{BrowserAPI::C_BrowserName_Image}}}",
			[{{{BrowserAPI::C_DataType_Image}}}],
			"",
			BrowserSettings
		);
		{{{BrowserAPI::P}}}RefreshBrowserData(This);
	} else {
		ControllerInfo::SetButtons(["A" => _("Select")]);
	}
}

K_State Select(K_State _State, K_Controls _Controls, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	DisplayInfo(_Controls.Label_Info, "", False);
	switch (_Control.ControlId) {
		case "button-back": {{{Router::P}}}PushParent(This);
		case "button-logo": {
			if (Platform::IsFromFirstParty(System)) {
				{{{PopUpClubThemes::P}}}Open(This);
			} else {
				DisplayBrowser(True, _Controls.Frame_Browser);
			}
		}
		case "checkbox-scalable": {
			{{{Checkbox::P}}}Toggle(This, _Control as CMlFrame);
			State.MapReview.Scalable = {{{Checkbox::P}}}IsChecked(_Control as CMlFrame);
		}
		case "checkbox-skip": {
			{{{Checkbox::P}}}Toggle(This, _Control as CMlFrame);
			State.MapReview.AllowVoteSkipMap = {{{Checkbox::P}}}IsChecked(_Control as CMlFrame);
		}
		case "checkbox-limitation": {
			{{{Checkbox::P}}}Toggle(This, _Control as CMlFrame);
			State.MapReview.SubmissionLimitation = {{{Checkbox::P}}}IsChecked(_Control as CMlFrame);
		}
		case "button-create": {
			if ({{{TextField::P}}}GetValue(_Controls.TextField_Name) == "") {
				DisplayInfo(_Controls.Label_Info, "{{{Text_NoName}}}", False);
			} else {
				EnableNavigationGroups(False);
				State.MapReview.MaxPlayer = {{{Counter::P}}}GetValue(_Controls.Counter_MaxPlayers);
				State.MapReview.TimeLimit = {{{Counter::P}}}GetValue(_Controls.Counter_TimeLimit);
				{{{ClubStore::P}}}Action_CreateOrEditMapReviewActivity(This, State.MapReview, State.IsEditing);
				if (State.IsEditing) {
					{{{LoadingSpinner::P}}}StartAnimWithFade(This, _Controls.LoadingSpinner_CreateOrEditTrackReview, "{{{Text_Editing}}}");
				} else {
					{{{LoadingSpinner::P}}}StartAnimWithFade(This, _Controls.LoadingSpinner_CreateOrEditTrackReview, "{{{Text_Creating}}}");
				}
			}
		}
	}

	return State;
}

Void SetLogoButtonWithImage(CMlFrame _Button, Text _ImageUrl) {
	{{{Button::P}}}SetBgColorType(This, _Button, {{{Button::C_ColorType_None}}});
	{{{Button::P}}}SetOpacityUnfocus(This, _Button, 0.75);
	if (Http.IsValidUrl(_ImageUrl)) {
		{{{Button::P}}}SetImage(This, _Button, _ImageUrl);
		{{{Button::P}}}SetImageFocus(This, _Button, _ImageUrl);
		{{{Button::P}}}SetIcon(This, _Button, "");
		{{{Button::P}}}SetIconFocus(This, _Button, "");
	}
}

Void ResetButton(CMlFrame _Button, Text _ImageUrl) {
	{{{Button::P}}}SetBgColorType(This, _Button, {{{Button::C_ColorType_Colorize}}});
	{{{Button::P}}}SetOpacityUnfocus(This, _Button, 0.5);
	{{{Button::P}}}SetImage(This, _Button, _ImageUrl);
	{{{Button::P}}}SetImageFocus(This, _Button, _ImageUrl);
	{{{Button::P}}}SetIcon(This, _Button, "{{{Icons::C_Icon_128x128_Plus_Oblique}}}");
	{{{Button::P}}}SetIconFocus(This, _Button, "{{{Icons::C_Icon_128x128_Plus_Oblique}}}");
}

Void UpdateActivityInfo(K_State _State, K_Controls _Controls) {
	{{{TextField::P}}}SetValue(This, _Controls.TextField_Name, _State.MapReview.Activity.Name);
	{{{Counter::P}}}SetValue(This, _Controls.Counter_MaxPlayers, _State.MapReview.MaxPlayer);
	{{{Counter::P}}}SetValue(This, _Controls.Counter_TimeLimit, _State.MapReview.TimeLimit);
	{{{Checkbox::P}}}Check(This, _Controls.Checkbox_Scalable, _State.MapReview.Scalable);
	{{{Checkbox::P}}}Check(This, _Controls.Checkbox_AllowVoteSkipMap, _State.MapReview.AllowVoteSkipMap);
	{{{Checkbox::P}}}Check(This, _Controls.Checkbox_SubmissionLimitation, _State.MapReview.SubmissionLimitation);

	/* Update activity image */
	if (_State.MapReview.Activity.MediaUrl != "") {
		if ({{{ClubStruct::P}}}IsClubThemeName(_State.MapReview.Activity.MediaUrl)) {
			SetLogoButtonWithImage(_Controls.Button_Logo, {{{ClubStruct::P}}}GetClubThemeUrl(_State.MapReview.Activity.MediaUrl, "{{{ClubStruct::C_MediaType_Icon}}}"));
		} else if (Http.IsValidUrl(_State.MapReview.Activity.MediaUrl) || {{{ClubStruct::P}}}IsClubThemeUrl(_State.MapReview.Activity.MediaUrl)) {
			SetLogoButtonWithImage(_Controls.Button_Logo, _State.MapReview.Activity.MediaUrl);
		} else {
			SetLogoButtonWithImage(_Controls.Button_Logo, {{{BrowserAPI::P}}}C_BasePath^_State.MapReview.Activity.MediaUrl);
		}
	} else {
		ResetButton(_Controls.Button_Logo, "{{{Const::C_ImageUrl_ClubActivity}}}");
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlLabel Label_MaxPlayers;
declare CMlLabel Label_TimeLimit;

declare K_Controls Controls;
declare K_State State;

declare Http::K_Request GetMapReviewActivityRequest;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Label_MaxPlayers <=> (Frame_Global.GetFirstChild("label-max-players") as CMlLabel);
Label_TimeLimit <=> (Frame_Global.GetFirstChild("label-time-limit") as CMlLabel);

Controls = K_Controls {
	Frame_Global = Frame_Global,
	Frame_Browser = (Page.GetFirstChild("frame-browser") as CMlFrame),
	Frame_Footer = (Frame_Global.GetFirstChild("frame-footer") as CMlFrame),
	Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
	Button_Create = (Frame_Global.GetFirstChild("button-create") as CMlFrame),
	Button_Logo = (Frame_Global.GetFirstChild("button-logo") as CMlFrame),
	Checkbox_AllowVoteSkipMap = (Frame_Global.GetFirstChild("checkbox-skip") as CMlFrame),
	Checkbox_Scalable = (Frame_Global.GetFirstChild("checkbox-scalable") as CMlFrame),
	Checkbox_SubmissionLimitation = (Frame_Global.GetFirstChild("checkbox-limitation") as CMlFrame),
	Counter_MaxPlayers = (Frame_Global.GetFirstChild("counter-max-players") as CMlFrame),
	Counter_TimeLimit = (Frame_Global.GetFirstChild("counter-time-limit") as CMlFrame),
	Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
	Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
	LoadingSpinner_CreateOrEditTrackReview = (Page.GetFirstChild("loadingspinner-create-or-edit-track-review") as CMlFrame),
	LoadingSpinner_RetrieveInfo = (Frame_Global.GetFirstChild("loadingspinner-retrieve-info") as CMlFrame),
	PopUpClubThemes_Icon = (Frame_Global.GetFirstChild("popupclubthemes-icon") as CMlFrame),
	TextField_Name = (Frame_Global.GetFirstChild("textfield-name") as CMlFrame)
};

GetMapReviewActivityRequest = Http::GetEmptyRequest();
***

***MainLoop***
***
if (PageIsVisible) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);

				State.IsEditing = Query.existskey("{{{RoutePaths::C_Query_Activity}}}");
				if (State.IsEditing) {
					State.MapReview.Activity.fromjson(Query["{{{RoutePaths::C_Query_Activity}}}"]);
					State.MapReview.Activity.ClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;
					GetMapReviewActivityRequest = Http::DestroyAndCreate(GetMapReviewActivityRequest, ClubAPI::GetMapReviewActivity(State.MapReview.Activity.ClubId, State.MapReview.Activity.Id));
					Controls.Label_Title.SetText("{{{Text_EditMapReview}}}");
					{{{LoadingSpinner::P}}}StartAnimWithFade(This, Controls.LoadingSpinner_RetrieveInfo);
					{{{ExpendableButton::P}}}SetText(This, Controls.Button_Create, "{{{Text_Save}}}");
					if ({{{ClubStruct::P}}}IsClubThemeUrl(State.MapReview.Activity.MediaUrl)) {{{PopUpClubThemes::P}}}SelectClubTheme(This, State.MapReview.Activity.MediaUrl);
					else {{{PopUpClubThemes::P}}}SelectClubTheme(This, {{{PopUpClubThemes::P}}}C_Choice_None);
				} else {
					State.MapReview.Activity = {{{ClubStruct::P}}}K_Activity {};
					State.MapReview.Activity.ClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;
					State.MapReview.MaxPlayer = C_PlayersNb_Default;
					State.MapReview.TimeLimit = C_TimeLimit_Default;
					State.MapReview.Scalable = True;
					Controls.Label_Title.SetText("{{{Text_CreateMapReview}}}");
					{{{ExpendableButton::P}}}SetText(This, Controls.Button_Create, "{{{Text_Create}}}");
					{{{PopUpClubThemes::P}}}SelectClubTheme(This, {{{PopUpClubThemes::P}}}C_Choice_None);
				}

				UpdateActivityInfo(State, Controls);
				DisplayBrowser(False, Controls.Frame_Browser);
				Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Controls.Button_Logo);
				ControllerInfo::SetButtons(["A" => _("Select")]);
			}
		}
	}

	/* TextField events */
	foreach (Event in {{{TextField::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TextField::P}}}C_EventType_Update: {
				if (Event.Control != Null && Event.Control.ControlId == Controls.TextField_Name.ControlId) {
					if (Event.Value != State.MapReview.Activity.Name) {
						declare Text NewName = Tools::FormatValue(Event.Value);
						declare Integer Length = TL::Length(TL::StripFormatting(NewName));
						if (Length > C_Name_MaxChar) {
							//L16N [TrackReviewCreation] %1 will be replaced by a number, e.g. "The activity name has a maximum of 20 characters"
							DisplayInfo(Controls.Label_Info, TL::Compose(_("The activity name has a maximum of %1 characters"), ""^C_Name_MaxChar), False);
							NewName = TL::SubText(NewName, 0, C_Name_MaxChar);
						} else {
							DisplayInfo(Controls.Label_Info, "", False);
						}
						State.MapReview.Activity.Name = NewName;
						{{{TextField::P}}}SetValue(This, Controls.TextField_Name, NewName);
					}
				}
			}
		}
	}

	/* Retrieve the map review activity */
	if (Http::IsInitialized(GetMapReviewActivityRequest)) {
		GetMapReviewActivityRequest = Http::Update(GetMapReviewActivityRequest);
		if (!Http::IsRunning(GetMapReviewActivityRequest)) {
			if (Http::IsSuccess(GetMapReviewActivityRequest)) {
				declare Text MediaUrl = State.MapReview.Activity.MediaUrl; //< Save media url in case it is a club theme url
				State.MapReview = ClubAPI::GetResponseFromGetMapReviewActivity(GetMapReviewActivityRequest);
				if ({{{ClubStruct::P}}}IsClubThemeUrl(MediaUrl)) State.MapReview.Activity.MediaUrl = MediaUrl;
				UpdateActivityInfo(State, Controls);
			} else {
				//L16N [TrackReviewCreation] Message displayed when the fetching of the activity fails. %1 will be replaced by an error, e.g. ""Error while fetching activity options, please try again. (Error code: 500)"
				DisplayInfo(Controls.Label_Info, TL::Compose(_("Error while fetching activity options, please try again. (Error code: %1)"), ""^Http::GetStatusCode(GetMapReviewActivityRequest)), True);
			}
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_RetrieveInfo);
			GetMapReviewActivityRequest = Http::Destroy(GetMapReviewActivityRequest);
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::AppMenu: State = Select(State, Controls, Controls.Button_Create);
						case CMlScriptEvent::EMenuNavAction::Cancel: {{{Router::P}}}PushParent(This);
					}
				}
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Controls, Event.To);
						default: Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Controls, Event.To);
						case CMlScriptEvent::Type::MouseOver: Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* Counter events */
	foreach (Event in {{{Counter::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Counter::P}}}C_EventType_FocusUpdated: {
				declare Real Opacity = {{{Counter::P}}}GetOpacityUnfocus(Event.Counter);
				if ({{{Counter::P}}}IsFocused(Event.Counter)) Opacity = 1.;
				switch (Event.Counter.ControlId) {
					case "counter-max-players": {
						AnimMgr.Flush(Label_MaxPlayers);
						AnimMgr.Add(Label_MaxPlayers, "<anim opacity=\""^Opacity^"\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
					}
					case "counter-time-limit": {
						AnimMgr.Flush(Label_TimeLimit);
						AnimMgr.Add(Label_TimeLimit, "<anim opacity=\""^Opacity^"\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
					}
				}
			}
		}
	}

	/* ClubStore events */
	foreach (Event in PendingEvents) {
		if (Event.Type == CMlScriptEvent::Type::PluginCustomEvent) {
			switch (Event.CustomEventType) {
				case {{{ClubStore::P}}}C_Event_MapReviewActivityCreatedOrEdited: {{{Router::P}}}PushParent(This);
				case {{{ClubStore::P}}}C_Event_MapReviewActivityCreationOrEditionFailed: {
					EnableNavigationGroups(True);
					{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_CreateOrEditTrackReview);
					if (Event.CustomEventData.count > 0) {
						DisplayInfo(Controls.Label_Info, Event.CustomEventData[0], True);
					}
				}
			}
		}
	}

	/* BrowserAPI events */
	foreach (Event in {{{BrowserAPI::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{BrowserAPI::P}}}C_EventType_Cancel: DisplayBrowser(False, Controls.Frame_Browser);
			case {{{BrowserAPI::P}}}C_EventType_Select: {
				if (Event.DataType == {{{BrowserAPI::P}}}C_DataType_Image) {
					declare Text MediaUrl = {{{BrowserAPI::P}}}C_BasePath_Media^Event.Data;
					declare Text FullMediaUrl = {{{BrowserAPI::P}}}C_BasePath^MediaUrl;

					if ({{{ClubStruct::P}}}IsClubThemeUrl(FullMediaUrl)) {
						State.MapReview.Activity.MediaUrl = {{{ClubStruct::P}}}GetClubThemeName(FullMediaUrl);
					} else {
						State.MapReview.Activity.MediaUrl = MediaUrl;
					}

					UpdateActivityInfo(State, Controls);
				}
				DisplayBrowser(False, Controls.Frame_Browser);
			}
		}
	}

	/* Activity image events */
	foreach (Event in {{{PopUpClubThemes::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{PopUpClubThemes::P}}}C_EventType_Display: EnableNavigationGroups(!Event.PopUpClubThemes.Visible);
			case {{{PopUpClubThemes::P}}}C_EventType_Confirm: {
				if (Event.PopUpClubThemes != Null && Event.PopUpClubThemes.Id == Controls.PopUpClubThemes_Icon.Id) {
					if (Event.MediaUrl != "") State.MapReview.Activity.MediaUrl = Event.ThemeName;
					else State.MapReview.Activity.MediaUrl = Event.MediaUrl;
					ControllerInfo::SetButtons(["A" => _("Select")]);
					UpdateActivityInfo(State, Controls);
				}
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background" && {{{Navigation::P}}}GroupIsEnabled(This, "{{{C_NavGroup_Default}}}")) {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: {{{Router::P}}}PushParent(This);
			}
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_LeavingRoute}}}": {
				State = K_State {};
				EnableNavigationGroups(True);
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_CreateOrEditTrackReview);
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.LoadingSpinner_RetrieveInfo);
				DisplayInfo(Controls.Label_Info, "", False);
			}
		}
	}
}
***
""",
[
	BrowserAPI::ComponentV2(),
	Button::ComponentV2(),
	ButtonIcon::ComponentV2(),
	Checkbox::ComponentV2(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	Counter::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpBackground::ComponentV2(),
	PopUpClubThemes::ComponentV2(),
	Router::ComponentV2(),
	TextField::ComponentV2(),
	Transition::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {

}