/**
 *	Routes for the menu
 */
#Const Version		"1.1.0"
#Const ScriptName	"Libs/Nadeo/Trackmania/MainMenu/Routes.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CMGame/Menus/Router_MA.Script.txt" as Router
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/Trackmania/MainMenu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as Config
//Overlays
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ToolBox.Script.txt" as ToolBox
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ClubWidget.Script.txt" as ClubWidget
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ProfileWidget.Script.txt" as ProfileWidget
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/PlayNavigationTabs.Script.txt" as PlayNavigationTabs
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_MA.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/DisplayVersion.Script.txt" as DisplayVersion
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/DirectLink.Script.txt" as DirectLink
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/PluginEvents.Script.txt" as PluginEvents
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/MenuBackground_MA.Script.txt" as MenuBackground
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ReportSystem.Script.txt" as ReportSystem
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/SpeechToText.Script.txt" as SpeechToText
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/Splashscreen.Script.txt" as Splashscreen
//Pages
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/HomePage.Script.txt" as Home
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Solo.Script.txt" as Solo
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Create.Script.txt" as Create
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Local.Script.txt" as Local
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Clubs.Script.txt" as Clubs
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Events.Script.txt" as Events
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/EventDetails.Script.txt" as EventDetails
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Live.Script.txt" as Live
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/ClubDetails.Script.txt" as ClubDetails
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Debug.Script.txt" as Debug
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/ClubEditionInfo.Script.txt" as ClubEditionInfo
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/ClubEditionInfoDeprecated.Script.txt" as ClubEditionInfoDeprecated
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/LoadingScreen.Script.txt" as LoadingScreen
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/WelcomeChangeZone.Script.txt" as WelcomeChangeZone
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/ServerReview.Script.txt" as ServerReview
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/LocalServer.Script.txt" as LocalServer
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/LocalMulti.Script.txt" as LocalMulti
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/LocalMultiSettings.Script.txt" as LocalMultiSettings
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/CampaignDisplay.Script.txt" as CampaignDisplay
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/MonthlyCampaignDisplay.Script.txt" as MonthlyCampaignDisplay
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/ArcadeChannel.Script.txt" as ArcadeChannel
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/CreateCampaign.Script.txt" as CreateCampaign
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/MapEditorSettings.Script.txt" as MapEditorSettings
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Garage.Script.txt" as Garage
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/CreateClub.Script.txt" as CreateClub
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/TOTDChannelDisplay.Script.txt" as TOTDChannelDisplay
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/CreateRoom.Script.txt" as CreateRoom
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/PlayMap.Script.txt" as PlayMap
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/AgainstReplay.Script.txt" as AgainstReplay
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/EditReplay.Script.txt" as EditReplay
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/RoomMapListDisplay.Script.txt" as RoomMapListDisplay
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/ClubAdministration.Script.txt" as ClubAdministration
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/ClubMembers.Script.txt" as ClubMembers
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/ConnectionError.Script.txt" as ConnectionError
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/CreateBucketActivity.Script.txt" as CreateBucketActivity
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/CreateClubItemsActivity.Script.txt" as CreateClubItemsActivity
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/BucketItemUploads.Script.txt" as BucketItemUploads
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/ClubItemsActivity.Script.txt" as ClubItemsActivity
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Profile.Script.txt" as Profile
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/AdsPreferences.Script.txt" as AdsPreferences
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/CreateNews.Script.txt" as CreateNews
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/NewsActivity.Script.txt" as NewsActivity
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/RankingsActivity.Script.txt" as RankingsActivity
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/CreateRankingsActivity.Script.txt" as CreateRankingsActivity
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Credits.Script.txt" as Credits
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Settings.Script.txt" as Settings
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/SubmittedMaps.Script.txt" as SubmittedMaps
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/CreateMapReviewActivity.Script.txt" as CreateMapReviewActivity
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/MapReviewActivity.Script.txt" as MapReviewActivity
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/MatchmakingMainPage.Script.txt" as MatchmakingMainPage
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Arcade.Script.txt" as Arcade
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Library_ClubCampaigns.Script.txt" as Library_ClubCampaigns
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Library_ClubItems.Script.txt" as Library_ClubItems
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Library_ClubTrackReviews.Script.txt" as Library_ClubTrackReviews
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/PressStart.Script.txt" as PressStart
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Initialization.Script.txt" as Initialization
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/TrainingDisplay.Script.txt" as TrainingDisplay
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/RoomCampaignDisplay.Script.txt" as RoomCampaignDisplay
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/Onboarding.Script.txt" as Onboarding
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/JoinSession.Script.txt" as JoinSession
#Include "Libs/Nadeo/Trackmania/MainMenu/Pages/AdvertisementActivity.Script.txt" as AdvertisementActivity

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_Loading {
	Text[] PagesToLoad;
	Ident LoadingLayerId;
	Integer PagesTotalNb;
	Boolean DisplayPreloadProgression;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_NumberOfPagesToLoadPerYield 1
#Const C_LoadingLayer_ZIndex 1000.
#Const C_LoadingLayer_Name "Routes_LoadingLayer"
#Const C_EventType_PageLoaded "Routes_PageLoaded"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Boolean G_IsFromFirstParty;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the routes
Void Yield() {
	Solo::Yield();
	PlayNavigationTabs::Yield();
	ControllerInfo::Yield();
	CreateRoom::Yield();
	Solo::Yield();
	Clubs::Yield();
	Events::Yield();
	EventDetails::Yield();
	Create::Yield();
	Live::Yield();
	ClubDetails::Yield();
	Debug::Yield();
	ClubEditionInfo::Yield();
	ClubEditionInfoDeprecated::Yield();
	LoadingScreen::Yield();
	WelcomeChangeZone::Yield();
	ServerReview::Yield();
	LocalServer::Yield();
	LocalMulti::Yield();
	LocalMultiSettings::Yield();
	CampaignDisplay::Yield();
	MonthlyCampaignDisplay::Yield();
	ArcadeChannel::Yield();
	CreateCampaign::Yield();
	CreateClub::Yield();
	MapEditorSettings::Yield();
	Garage::Yield();
	TOTDChannelDisplay::Yield();
	PlayMap::Yield();
	AgainstReplay::Yield();
	EditReplay::Yield();
	RoomMapListDisplay::Yield();
	ClubAdministration::Yield();
	ClubMembers::Yield();
	ConnectionError::Yield();
	CreateBucketActivity::Yield();
	CreateClubItemsActivity::Yield();
	BucketItemUploads::Yield();
	ClubItemsActivity::Yield();
	Profile::Yield();
	AdsPreferences::Yield();
	DirectLink::Yield();
	CreateNews::Yield();
	NewsActivity::Yield();
	RankingsActivity::Yield();
	CreateRankingsActivity::Yield();
	PluginEvents::Yield();
	Credits::Yield();
	Settings::Yield();
	SubmittedMaps::Yield();
	CreateMapReviewActivity::Yield();
	MapReviewActivity::Yield();
	MatchmakingMainPage::Yield();
	Arcade::Yield();
	Library_ClubCampaigns::Yield();
	Library_ClubItems::Yield();
	Library_ClubTrackReviews::Yield();
	PressStart::Yield();
	Initialization::Yield();
	TrainingDisplay::Yield();
	RoomCampaignDisplay::Yield();
	Onboarding::Yield();
	AdvertisementActivity::Yield();

	// Force display of controller buttons on first party platforms
	if (G_IsFromFirstParty != Platform::IsFromFirstParty(System)) {
		G_IsFromFirstParty = Platform::IsFromFirstParty(System);
		ControllerInfo::HideForMouse(!G_IsFromFirstParty);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the routes
Void Unload() {

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the manialink to display during the preload
Text Private_GetLoadingLayerML(Real _ZIndex) {
	return MV::Create(
		C_LoadingLayer_Name, 3,
		"""
<frame z-index="{{{_ZIndex}}}">
	<quad z-index="0" size="320 180" fullscreen="1" halign="center" valign="center" bgcolor="000000" scriptevents="1" />
	<frameinstance id="loading-spinner-preload" pos="145 -75" z-index="1" modelid="{{{LoadingSpinner::C_Name}}}"  data-label-side="{{{LoadingSpinner::C_LabelSide_Left}}}" />
</frame>
		""",
		"""
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as Config

#Const C_EventType_PageLoaded {{{dump(C_EventType_PageLoaded)}}}
		""",
		"""
***MainInit***
***
declare CMlFrame LoadingSpinner_Preload;
declare Boolean DisplayPreloadProgression;
***

***MainStart***
***
LoadingSpinner_Preload <=> (Page.GetFirstChild("loading-spinner-preload") as CMlFrame);

{{{LoadingSpinner::P}}}StartAnimation(This, LoadingSpinner_Preload);
{{{LoadingSpinner::P}}}SetLabel(LoadingSpinner_Preload, "");

DisplayPreloadProgression = Config::HasFeature(Config::C_Feature_DisplayMenuPagesCreationProgress);
***

***MainLoop***
***
if (DisplayPreloadProgression) {
	foreach (Event in PendingEvents) {
		if (
			Event.CustomEventType == C_EventType_PageLoaded &&
			Event.CustomEventData.count >= 1
		) {
			{{{LoadingSpinner::P}}}SetLabel(LoadingSpinner_Preload, Event.CustomEventData[0]);
		}
	}
}
***
		""",
		[LoadingSpinner::ComponentV2()],
		[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Merge two arrays of pages to load
Text[] Private_MergePagesToLoad(Text[] _PagesA, Text[] _PagesB) {
	declare Text[] PagesToLoad = _PagesA;
	foreach (PageToLoad in _PagesB) {
		PagesToLoad.add(PageToLoad);
	}
	return PagesToLoad;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Setup the creation of the routes
K_Loading StartLoading() {
	Unload();

	LoadingScreen::Load();
	ConnectionError::Load();

	// Force display of controller buttons on first party platforms
	G_IsFromFirstParty = Platform::IsFromFirstParty(System);
	ControllerInfo::HideForMouse(!G_IsFromFirstParty);

	Router::SetSquadEnabledPages([
		RoutePaths::C_Path_MatchmakingMainPage
	]);

	declare Text[] PagesToLoad = [
		RoutePaths::C_Path_OverlayName_ClubWidget,
		RoutePaths::C_Path_OverlayName_ProfileWidget,
		RoutePaths::C_Path_OverlayName_PlayNavigationTabs,
		RoutePaths::C_Path_OverlayName_ReportSystem,
		RoutePaths::C_Path_OverlayName_ControllerInfo,
		RoutePaths::C_Path_OverlayName_DisplayVersion,
		RoutePaths::C_Path_OverlayName_DirectLink,
		RoutePaths::C_Path_OverlayName_PluginEvents,
		RoutePaths::C_Path_OverlayName_MenuBackground,
		RoutePaths::C_Path_OverlayName_SpeechToText,
		RoutePaths::C_Path_OverlayName_Splashscreen,
		RoutePaths::C_Path_Solo,
		RoutePaths::C_Path_Live,
		RoutePaths::C_Path_Local,
		RoutePaths::C_Path_Home,
		RoutePaths::C_Path_Clubs,
		RoutePaths::C_Path_Create,
		RoutePaths::C_Path_ServerReview,
		RoutePaths::C_Path_LocalServer,
		RoutePaths::C_Path_LocalMulti,
		RoutePaths::C_Path_LocalMultiSettings,
		RoutePaths::C_Path_MapEditorSettings,
		RoutePaths::C_Path_TOTDChannelDisplay,
		RoutePaths::C_Path_Events,
		RoutePaths::C_Path_EventDetails,
		RoutePaths::C_Path_CampaignDisplay,
		RoutePaths::C_Path_MonthlyCampaignDisplay,
		RoutePaths::C_Path_ArcadeChannel,
		RoutePaths::C_Path_PlayMap,
		RoutePaths::C_Path_AgainstReplay,
		RoutePaths::C_Path_EditReplay,
		RoutePaths::C_Path_RoomMapListDisplay,
		RoutePaths::C_Path_ClubItemsActivity,
		RoutePaths::C_Path_SubmittedMaps,
		RoutePaths::C_Path_MapReviewActivity,
		RoutePaths::C_Path_Arcade,
		RoutePaths::C_Path_Trainingdisplay,
		RoutePaths::C_Path_RoomCampaignDisplay,
		RoutePaths::C_Path_MatchmakingMainPage,
		RoutePaths::C_Path_WelcomeChangeZone,
		RoutePaths::C_Path_AdsPreferences,
		RoutePaths::C_Path_Onboarding,
		RoutePaths::C_Path_Initialization,
		RoutePaths::C_Path_Garage,
		RoutePaths::C_Path_ClubDetails,
		RoutePaths::C_Path_Debug,
		RoutePaths::C_Path_ClubEditionInfo,
		RoutePaths::C_Path_ClubEditionInfoDeprecated,
		RoutePaths::C_Path_CreateCampaign,
		RoutePaths::C_Path_CreateClub,
		RoutePaths::C_Path_CreateRoom,
		RoutePaths::C_Path_ClubAdministration,
		RoutePaths::C_Path_ClubMembers,
		RoutePaths::C_Path_ConnectionError,
		RoutePaths::C_Path_CreateBucketActivity,
		RoutePaths::C_Path_CreateClubItemsActivity,
		RoutePaths::C_Path_BucketItemUploads,
		RoutePaths::C_Path_Profile,
		RoutePaths::C_Path_CreateNews,
		RoutePaths::C_Path_NewsActivity,
		RoutePaths::C_Path_RankingsActivity,
		RoutePaths::C_Path_CreateRankingsActivity,
		RoutePaths::C_Path_Credits,
		RoutePaths::C_Path_Settings,
		RoutePaths::C_Path_CreateMapReviewActivity,
		RoutePaths::C_Path_LibraryClubCampaigns,
		RoutePaths::C_Path_LibraryClubItems,
		RoutePaths::C_Path_LibraryClubTrackReviews,
		RoutePaths::C_Path_PressStart,
		RoutePaths::C_Path_JoinSession,
		RoutePaths::C_Path_AdvertisementActivity
	];

	declare Boolean Toolbox_FastLoad_IsEnabled for System = False;
	if (Config::HasFeature(Config::C_Feature_DebugFastBoot) && Toolbox_FastLoad_IsEnabled) {
		PagesToLoad = [
			RoutePaths::C_Path_OverlayName_ClubWidget,
			RoutePaths::C_Path_OverlayName_ProfileWidget,
			RoutePaths::C_Path_OverlayName_PlayNavigationTabs,
			RoutePaths::C_Path_OverlayName_ControllerInfo,
			RoutePaths::C_Path_OverlayName_DisplayVersion,
			RoutePaths::C_Path_OverlayName_ReportSystem,
			RoutePaths::C_Path_OverlayName_DirectLink,
			RoutePaths::C_Path_OverlayName_PluginEvents,
			RoutePaths::C_Path_OverlayName_MenuBackground,
			RoutePaths::C_Path_OverlayName_SpeechToText,
			RoutePaths::C_Path_OverlayName_Splashscreen,
			RoutePaths::C_Path_Home,
			RoutePaths::C_Path_WelcomeChangeZone,
			RoutePaths::C_Path_AdsPreferences,
			RoutePaths::C_Path_Onboarding,
			RoutePaths::C_Path_Initialization,
			RoutePaths::C_Path_ClubEditionInfo,
			RoutePaths::C_Path_ConnectionError,
			RoutePaths::C_Path_PressStart,
			RoutePaths::C_Path_JoinSession
		];
	}

	if (Config::HasFeature(Config::C_Feature_DebugToolBox)) {
		PagesToLoad.add(RoutePaths::C_Path_OverlayName_ToolBox);
	}

	declare K_Loading Loading = K_Loading {
		PagesToLoad = PagesToLoad,
		LoadingLayerId = NullId,
		DisplayPreloadProgression = Config::HasFeature(Config::C_Feature_DisplayMenuPagesCreationProgress)
	};

	Loading.PagesTotalNb = Loading.PagesToLoad.count;

	// Create a layer to show the loading progress
	declare CUILayer LoadingLayer <=> UILayerCreate();
	if (LoadingLayer != Null) {
		Loading.LoadingLayerId = LoadingLayer.Id;
		LoadingLayer.ManialinkPage = Private_GetLoadingLayerML(C_LoadingLayer_ZIndex);
		LoadingLayer.Type = CUILayer::EUILayerType::Normal;
		LoadingLayer.IsVisible = True;
	}

	return Loading;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the route creation process is ongoing
Boolean IsLoading(K_Loading _Loading) {
	return _Loading.PagesToLoad.count > 0;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Incrementally create the routes instead of doing all at once
 *	Check: /trackmania-next/tmnext/-/issues/4092
 */
K_Loading Load(K_Loading _Loading) {
	declare K_Loading Loading = _Loading;
	declare Integer PagesLoadedNb = 0;

	declare Text[] PlayMenuOverlays = [
		RoutePaths::C_Path_OverlayName_ClubWidget,
		RoutePaths::C_Path_OverlayName_ProfileWidget,
		RoutePaths::C_Path_OverlayName_PlayNavigationTabs
	];
	declare Text[] HomeMenuOverlays = [
		RoutePaths::C_Path_OverlayName_ClubWidget,
		RoutePaths::C_Path_OverlayName_ProfileWidget,
		RoutePaths::C_Path_OverlayName_DisplayVersion
	];
	declare Text[] ClubAndProfileOverlays = [
		RoutePaths::C_Path_OverlayName_ClubWidget,
		RoutePaths::C_Path_OverlayName_ProfileWidget
	];
	declare Text[] MatchmakingExcludedOverlays = [
		RoutePaths::C_Path_OverlayName_PluginEvents
	];
	declare Text[] OverlaysExcludedFromGameStart = [
		RoutePaths::C_Path_OverlayName_DirectLink,
		RoutePaths::C_Path_OverlayName_PluginEvents
	];
	declare Text[] OverlaysExcludedFromInitialization = OverlaysExcludedFromGameStart;
	declare Text[] OverlaysExcludedFromPressStart = [
		RoutePaths::C_Path_OverlayName_DirectLink
	];

	while (Loading.PagesToLoad.count > 0 && PagesLoadedNb < C_NumberOfPagesToLoadPerYield) {
		switch (Loading.PagesToLoad[0]) {
			case RoutePaths::C_Path_OverlayName_ReportSystem: Router::CreateOverlay(RoutePaths::C_Path_OverlayName_ReportSystem, ReportSystem::GetManialink(), True);
			case RoutePaths::C_Path_OverlayName_ToolBox: Router::CreateOverlay(RoutePaths::C_Path_OverlayName_ToolBox, ToolBox::GetManialink(), True);
			case RoutePaths::C_Path_OverlayName_ClubWidget: Router::CreateOverlay(RoutePaths::C_Path_OverlayName_ClubWidget, ClubWidget::GetManialink(), False);
			case RoutePaths::C_Path_OverlayName_ProfileWidget: Router::CreateOverlay(RoutePaths::C_Path_OverlayName_ProfileWidget, ProfileWidget::GetManialink(), False);
			case RoutePaths::C_Path_OverlayName_PlayNavigationTabs: Router::CreateOverlay(RoutePaths::C_Path_OverlayName_PlayNavigationTabs, PlayNavigationTabs::GetManialink(), False);
			case RoutePaths::C_Path_OverlayName_ControllerInfo: Router::CreateOverlay(RoutePaths::C_Path_OverlayName_ControllerInfo, ControllerInfo::GetManialink(), True);
			case RoutePaths::C_Path_OverlayName_DisplayVersion: Router::CreateOverlay(RoutePaths::C_Path_OverlayName_DisplayVersion, DisplayVersion::GetManialink(), False);
			case RoutePaths::C_Path_OverlayName_DirectLink: Router::CreateOverlay(RoutePaths::C_Path_OverlayName_DirectLink, DirectLink::GetManialink(), True);
			case RoutePaths::C_Path_OverlayName_PluginEvents: Router::CreateOverlay(RoutePaths::C_Path_OverlayName_PluginEvents, PluginEvents::GetManialink(), True);
			case RoutePaths::C_Path_OverlayName_MenuBackground: Router::CreateOverlay(RoutePaths::C_Path_OverlayName_MenuBackground, MenuBackground::GetManialink(), True);
			case RoutePaths::C_Path_OverlayName_SpeechToText: Router::CreateOverlay(RoutePaths::C_Path_OverlayName_SpeechToText, SpeechToText::GetManialink(), True);
			case RoutePaths::C_Path_OverlayName_Splashscreen: Router::CreateOverlay(RoutePaths::C_Path_OverlayName_Splashscreen, Splashscreen::GetManialink(), True);
			case RoutePaths::C_Path_Solo: Router::CreateRoute(RoutePaths::C_Path_Solo, RoutePaths::C_Path_Home, Solo::GetManialink(), PlayMenuOverlays, 0, 0);
			case RoutePaths::C_Path_Live: Router::CreateRoute(RoutePaths::C_Path_Live, RoutePaths::C_Path_Home, Live::GetManialink(), PlayMenuOverlays, 0, 0);
			case RoutePaths::C_Path_Local: Router::CreateRoute(RoutePaths::C_Path_Local, RoutePaths::C_Path_Home, Local::GetManialink(), PlayMenuOverlays, 0, 0);
			case RoutePaths::C_Path_Home: Router::CreateRoute(RoutePaths::C_Path_Home, Home::GetManialink(), HomeMenuOverlays, 0, 0);
			case RoutePaths::C_Path_Clubs: Router::CreateRoute(RoutePaths::C_Path_Clubs, RoutePaths::C_Path_Home, Clubs::GetManialink(), ClubAndProfileOverlays, 0, 0, Clubs::C_Privileges);
			case RoutePaths::C_Path_Create: Router::CreateRoute(RoutePaths::C_Path_Create, RoutePaths::C_Path_Home, Create::GetManialink(), ClubAndProfileOverlays, 0, 0);
			case RoutePaths::C_Path_ServerReview: Router::CreateRoute(RoutePaths::C_Path_ServerReview, RoutePaths::C_Path_Create, ServerReview::GetManialink(), ClubAndProfileOverlays, 0, 0);
			case RoutePaths::C_Path_LocalServer: Router::CreateRoute(RoutePaths::C_Path_LocalServer, LocalServer::GetManialink(), ClubAndProfileOverlays, 0, 0);
			case RoutePaths::C_Path_LocalMulti: Router::CreateRoute(RoutePaths::C_Path_LocalMulti, LocalMulti::GetManialink(), ClubAndProfileOverlays, 0, 0);
			case RoutePaths::C_Path_LocalMultiSettings: Router::CreateRoute(RoutePaths::C_Path_LocalMultiSettings, RoutePaths::C_Path_LocalMulti, LocalMultiSettings::GetManialink(), ClubAndProfileOverlays, 0, 0);
			case RoutePaths::C_Path_MapEditorSettings: Router::CreateRoute(RoutePaths::C_Path_MapEditorSettings, RoutePaths::C_Path_Create, MapEditorSettings::GetManialink(), ClubAndProfileOverlays, 0, 0);
			case RoutePaths::C_Path_TOTDChannelDisplay: Router::CreateRoute(RoutePaths::C_Path_TOTDChannelDisplay, RoutePaths::C_Path_Live, TOTDChannelDisplay::GetManialink(), ClubAndProfileOverlays, 0, 0, TOTDChannelDisplay::C_Privileges);
			case RoutePaths::C_Path_Events: Router::CreateRoute(RoutePaths::C_Path_Events, RoutePaths::C_Path_Live, Events::GetManialink(), ClubAndProfileOverlays, 0, 0, Events::C_Privileges);
			case RoutePaths::C_Path_EventDetails: Router::CreateRoute(RoutePaths::C_Path_EventDetails, RoutePaths::C_Path_Events, EventDetails::GetManialink(), ClubAndProfileOverlays, 0, 0, EventDetails::C_Privileges);
			case RoutePaths::C_Path_CampaignDisplay: Router::CreateRoute(RoutePaths::C_Path_CampaignDisplay, CampaignDisplay::GetManialink(), ClubAndProfileOverlays, 0, 0, CampaignDisplay::C_Privileges);
			case RoutePaths::C_Path_MonthlyCampaignDisplay: Router::CreateRoute(RoutePaths::C_Path_MonthlyCampaignDisplay, RoutePaths::C_Path_Solo, MonthlyCampaignDisplay::GetManialink(), ClubAndProfileOverlays, 0, 0, MonthlyCampaignDisplay::C_Privileges);
			case RoutePaths::C_Path_ArcadeChannel: Router::CreateRoute(RoutePaths::C_Path_ArcadeChannel, RoutePaths::C_Path_Arcade, ArcadeChannel::GetManialink(), ClubAndProfileOverlays, 0, 0, ArcadeChannel::C_Privileges);
			case RoutePaths::C_Path_PlayMap: Router::CreateRoute(RoutePaths::C_Path_PlayMap, RoutePaths::C_Path_Local, PlayMap::GetManialink(), ClubAndProfileOverlays, 0, 0);
			case RoutePaths::C_Path_AgainstReplay: Router::CreateRoute(RoutePaths::C_Path_AgainstReplay, RoutePaths::C_Path_Local, AgainstReplay::GetManialink(), ClubAndProfileOverlays, 0, 0);
			case RoutePaths::C_Path_EditReplay: Router::CreateRoute(RoutePaths::C_Path_EditReplay, RoutePaths::C_Path_Create, EditReplay::GetManialink(), ClubAndProfileOverlays, 0, 0);
			case RoutePaths::C_Path_RoomMapListDisplay: Router::CreateRoute(RoutePaths::C_Path_RoomMapListDisplay, RoomMapListDisplay::GetManialink(), ClubAndProfileOverlays, 0, 0, RoomMapListDisplay::C_Privileges);
			case RoutePaths::C_Path_ClubItemsActivity: Router::CreateRoute(RoutePaths::C_Path_ClubItemsActivity, RoutePaths::C_Path_ClubDetails, ClubItemsActivity::GetManialink(), ClubAndProfileOverlays, 0, 0, ClubItemsActivity::C_Privileges);
			case RoutePaths::C_Path_SubmittedMaps: Router::CreateRoute(RoutePaths::C_Path_SubmittedMaps, RoutePaths::C_Path_ServerReview, SubmittedMaps::GetManialink(), ClubAndProfileOverlays, 0, 0);
			case RoutePaths::C_Path_MapReviewActivity: Router::CreateRoute(RoutePaths::C_Path_MapReviewActivity, RoutePaths::C_Path_ClubDetails, MapReviewActivity::GetManialink(), ClubAndProfileOverlays, 0, 0, MapReviewActivity::C_Privileges);
			case RoutePaths::C_Path_Arcade: Router::CreateRoute(RoutePaths::C_Path_Arcade, RoutePaths::C_Path_Live, Arcade::GetManialink(), ClubAndProfileOverlays, 0, 0, Arcade::C_Privileges);
			case RoutePaths::C_Path_Trainingdisplay: Router::CreateRoute(RoutePaths::C_Path_Trainingdisplay, TrainingDisplay::GetManialink(), ClubAndProfileOverlays, 0, 0);
			case RoutePaths::C_Path_RoomCampaignDisplay: Router::CreateRoute(RoutePaths::C_Path_RoomCampaignDisplay, RoomCampaignDisplay::GetManialink(), ClubAndProfileOverlays, 0, 0, RoomCampaignDisplay::C_Privileges);
			case RoutePaths::C_Path_MatchmakingMainPage: Router::CreateRoute(RoutePaths::C_Path_MatchmakingMainPage, RoutePaths::C_Path_Live, MatchmakingMainPage::GetManialink(), [], MatchmakingExcludedOverlays, 0, 0, MatchmakingMainPage::C_Privileges);
			case RoutePaths::C_Path_WelcomeChangeZone: Router::CreateRoute(RoutePaths::C_Path_WelcomeChangeZone, RoutePaths::C_Path_Home, WelcomeChangeZone::GetManialink(), [], 0, 0);
			case RoutePaths::C_Path_AdsPreferences: Router::CreateRoute(RoutePaths::C_Path_AdsPreferences, AdsPreferences::GetManialink(), [], OverlaysExcludedFromGameStart, 0, 0);
			case RoutePaths::C_Path_Onboarding: Router::CreateRoute(RoutePaths::C_Path_Onboarding, Onboarding::GetManialink(), [], OverlaysExcludedFromGameStart, 0, 0);
			case RoutePaths::C_Path_Initialization: Router::CreateRoute(RoutePaths::C_Path_Initialization, Initialization::GetManialink(), [], OverlaysExcludedFromInitialization, 0, 0);
			case RoutePaths::C_Path_Garage: Router::CreateRoute(RoutePaths::C_Path_Garage, RoutePaths::C_Path_Create, Garage::GetManialink(), [], 0, 0);
			case RoutePaths::C_Path_ClubDetails: Router::CreateRoute(RoutePaths::C_Path_ClubDetails, ClubDetails::GetManialink(), [], 0, 0, ClubDetails::C_Privileges);
			case RoutePaths::C_Path_Debug: Router::CreateRoute(RoutePaths::C_Path_Debug, Debug::GetManialink(), [], 0, 0);
			case RoutePaths::C_Path_ClubEditionInfo: Router::CreateRoute(RoutePaths::C_Path_ClubEditionInfo, RoutePaths::C_Path_Home, ClubEditionInfo::GetManialink(), [], 0, 0);
			case RoutePaths::C_Path_ClubEditionInfoDeprecated: Router::CreateRoute(RoutePaths::C_Path_ClubEditionInfoDeprecated, RoutePaths::C_Path_Home, ClubEditionInfoDeprecated::GetManialink(), [], 0, 0);
			case RoutePaths::C_Path_CreateCampaign: Router::CreateRoute(RoutePaths::C_Path_CreateCampaign, RoutePaths::C_Path_ClubDetails, CreateCampaign::GetManialink(), [], 0, 0, CreateCampaign::C_Privileges);
			case RoutePaths::C_Path_CreateClub: Router::CreateRoute(RoutePaths::C_Path_CreateClub, CreateClub::GetManialink(), [], 0, 0, CreateClub::C_Privileges);
			case RoutePaths::C_Path_CreateRoom: Router::CreateRoute(RoutePaths::C_Path_CreateRoom, RoutePaths::C_Path_ClubDetails, CreateRoom::GetManialink(), [], 0, 0, CreateRoom::C_Privileges);
			case RoutePaths::C_Path_ClubAdministration: Router::CreateRoute(RoutePaths::C_Path_ClubAdministration, RoutePaths::C_Path_ClubDetails, ClubAdministration::GetManialink(), [], 0, 0, ClubAdministration::C_Privileges);
			case RoutePaths::C_Path_ClubMembers: Router::CreateRoute(RoutePaths::C_Path_ClubMembers, RoutePaths::C_Path_ClubDetails, ClubMembers::GetManialink(), [], 0, 0);
			case RoutePaths::C_Path_ConnectionError: Router::CreateRoute(RoutePaths::C_Path_ConnectionError, ConnectionError::GetManialink(), [], 0, 0);
			case RoutePaths::C_Path_CreateBucketActivity: Router::CreateRoute(RoutePaths::C_Path_CreateBucketActivity, RoutePaths::C_Path_ClubDetails, CreateBucketActivity::GetManialink(), [], 0, 0, CreateBucketActivity::C_Privileges);
			case RoutePaths::C_Path_CreateClubItemsActivity: Router::CreateRoute(RoutePaths::C_Path_CreateClubItemsActivity, RoutePaths::C_Path_ClubDetails, CreateClubItemsActivity::GetManialink(), [], 0, 0, CreateClubItemsActivity::C_Privileges);
			case RoutePaths::C_Path_BucketItemUploads: Router::CreateRoute(RoutePaths::C_Path_BucketItemUploads, RoutePaths::C_Path_ClubDetails, BucketItemUploads::GetManialink(), ClubAndProfileOverlays, 0, 0, BucketItemUploads::C_Privileges);
			case RoutePaths::C_Path_Profile: Router::CreateRoute(RoutePaths::C_Path_Profile, RoutePaths::C_Path_Solo, Profile::GetManialink(), [], 0, 0);
			case RoutePaths::C_Path_CreateNews: Router::CreateRoute(RoutePaths::C_Path_CreateNews, RoutePaths::C_Path_ClubDetails, CreateNews::GetManialink(), [], 0, 0, CreateNews::C_Privileges);
			case RoutePaths::C_Path_NewsActivity: Router::CreateRoute(RoutePaths::C_Path_NewsActivity, RoutePaths::C_Path_ClubDetails, NewsActivity::GetManialink(), [], 0, 0, NewsActivity::C_Privileges);
			case RoutePaths::C_Path_RankingsActivity: Router::CreateRoute(RoutePaths::C_Path_RankingsActivity, RoutePaths::C_Path_ClubDetails, RankingsActivity::GetManialink(), [], 0, 0, RankingsActivity::C_Privileges);
			case RoutePaths::C_Path_CreateRankingsActivity: Router::CreateRoute(RoutePaths::C_Path_CreateRankingsActivity, RoutePaths::C_Path_ClubDetails, CreateRankingsActivity::GetManialink(), [], 0, 0, CreateRankingsActivity::C_Privileges);
			case RoutePaths::C_Path_Credits: Router::CreateRoute(RoutePaths::C_Path_Credits, RoutePaths::C_Path_Home, Credits::GetManialink(), [], 0, 0);
			case RoutePaths::C_Path_Settings: Router::CreateRoute(RoutePaths::C_Path_Settings, RoutePaths::C_Path_Home, Settings::GetManialink(), [], 0, 0);
			case RoutePaths::C_Path_CreateMapReviewActivity: Router::CreateRoute(RoutePaths::C_Path_CreateMapReviewActivity, RoutePaths::C_Path_ClubDetails, CreateMapReviewActivity::GetManialink(), [], 0, 0, CreateMapReviewActivity::C_Privileges);
			case RoutePaths::C_Path_LibraryClubCampaigns: Router::CreateRoute(RoutePaths::C_Path_LibraryClubCampaigns, RoutePaths::C_Path_Solo, Library_ClubCampaigns::GetManialink(), ClubAndProfileOverlays, 0, 0, Library_ClubCampaigns::C_Privileges);
			case RoutePaths::C_Path_LibraryClubItems: Router::CreateRoute(RoutePaths::C_Path_LibraryClubItems, RoutePaths::C_Path_MapEditorSettings, Library_ClubItems::GetManialink(), ClubAndProfileOverlays, 0, 0, Library_ClubItems::C_Privileges);
			case RoutePaths::C_Path_LibraryClubTrackReviews: Router::CreateRoute(RoutePaths::C_Path_LibraryClubTrackReviews, RoutePaths::C_Path_ServerReview, Library_ClubTrackReviews::GetManialink(), ClubAndProfileOverlays, 0, 0, Library_ClubTrackReviews::C_Privileges);
			case RoutePaths::C_Path_PressStart: Router::CreateRoute(RoutePaths::C_Path_PressStart, PressStart::GetManialink(), [RoutePaths::C_Path_OverlayName_DisplayVersion], OverlaysExcludedFromPressStart, 0, 0);
			case RoutePaths::C_Path_JoinSession: Router::CreateRoute(RoutePaths::C_Path_JoinSession, JoinSession::GetManialink(), [], 0, 0);
			case RoutePaths::C_Path_AdvertisementActivity: Router::CreateRoute(RoutePaths::C_Path_AdvertisementActivity, AdvertisementActivity::GetManialink(), [], 0, 0);
		}

		PagesLoadedNb += 1;
		declare Boolean Removed = Loading.PagesToLoad.removekey(0);
		assert(Removed, "Failed to load page: '"^Loading.PagesToLoad[0]^"'");
	}

	if (
		Loading.DisplayPreloadProgression &&
		Loading.LoadingLayerId != NullId &&
		UILayers.existskey(Loading.LoadingLayerId)
	) {
		LayerCustomEvent(UILayers[Loading.LoadingLayerId], C_EventType_PageLoaded, [(Loading.PagesTotalNb - Loading.PagesToLoad.count)^" / "^Loading.PagesTotalNb]);
	}

	return Loading;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// End the loading process
K_Loading StopLoading(K_Loading _Loading) {
	declare K_Loading Loading = _Loading;

	if (Loading.LoadingLayerId != NullId && UILayers.existskey(Loading.LoadingLayerId)) {
		UILayerDestroy(UILayers[Loading.LoadingLayerId]);
	}
	Loading.LoadingLayerId = NullId;

	MenuBackground::ResetRoutesDimmerOpacities();
	MenuBackground::SetRoutesDimmerOpacities([
		RoutePaths::C_Path_PressStart => PressStart::C_MenuBackground_DimmerOpacity,
		RoutePaths::C_Path_Onboarding => Onboarding::C_MenuBackground_DimmerOpacity
	]);

	MenuBackground::ResetRoutesDisplayModes();
	MenuBackground::SetRoutesDisplayModes([
		RoutePaths::C_Path_Initialization => MenuBackground::C_DisplayMode_BlackBackground,
		RoutePaths::C_Path_WelcomeChangeZone => MenuBackground::C_DisplayMode_ProfileBackground,
		RoutePaths::C_Path_Onboarding => MenuBackground::C_DisplayMode_SettingsBackground,
		RoutePaths::C_Path_Settings => MenuBackground::C_DisplayMode_SettingsBackground,
		RoutePaths::C_Path_Profile => MenuBackground::C_DisplayMode_ProfileBackground,
		RoutePaths::C_Path_Garage => MenuBackground::C_DisplayMode_GarageBackground,
		RoutePaths::C_Path_ClubEditionInfo => MenuBackground::C_DisplayMode_ClubEditionBackground,
		RoutePaths::C_Path_ClubEditionInfoDeprecated => MenuBackground::C_DisplayMode_ClubEditionBackground,
		RoutePaths::C_Path_Home => MenuBackground::C_DisplayMode_HomeBackground
	]);

	return Loading;
}