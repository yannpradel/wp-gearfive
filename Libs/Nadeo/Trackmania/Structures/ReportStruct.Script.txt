/**
 *	Structures for Report system
 */
#Const Version		"1.0.1"
#Const ScriptName	"Libs/Nadeo/Trackmania/Structures/ReportStruct.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

/*  /!\ Details, Ids and Contexts must be indexed in the same order /!\
Example : if there is two players to report and Details is [PlayerA, PlayerB] the Ids must be [IdOfPlayerA, IdOfPlayerB] and Contexts [[Context on PlayerA], [Context on PlayerB]]

The Details will be displayed in second choices list
The Ids will be sent to API, if there is more than one id (for player record) they must follow this order and separators "PlayerAccountId:SeasonUid:MapUid"
The Contexts will be sent to API, they are an array of text indexed by text (to be converted in json)

See examples in the documentation header */
#Struct LibStructuresReport_K_ReportData {
	Text[] Details;
	Text[] Ids;
	Text[Text][] Contexts;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ComponentName "structures-report"
#Const P "LibStructuresReport_"

#Const C_PB "Personal_Best" //!\\ This value must be the same in the API from LIVE //!\\

/* Report targets */

// /!\ These values must correspond to the indexes of the array C_ReportTargets, C_ReportTargetsDisplayNames and C_ReportTargetDetailsQuestion
#Const C_ReportTarget_PlayerName 0
#Const C_ReportTarget_Player 1
#Const C_ReportTarget_ClubTag 2
#Const C_ReportTarget_Skin 3
#Const C_ReportTarget_SkinFromActivity 4 // special case for skin report in an activity (see trackmania-next/tmnext/-/issues/5479)
#Const C_ReportTarget_Record 5
#Const C_ReportTarget_Club 6
#Const C_ReportTarget_Activity 7
#Const C_ReportTarget_Room 8
#Const C_ReportTarget_Track 9

//!\\ These values must be the same in the API from LIVE //!\\
#Const C_ReportTargets [
	0 => "display-name",
	1 => "player",
	2 => "club-tag",
	3 => "skin",
	4 => "activity",
	5 => "record",
	6 => "club",
	7 => "activity",
	8 => "room",
	9 => "map"
]

#Const C_ReportTargets_DisplayNames [
	//L16N [Report System] Players can report other player names (for trolling or personal threats for example)
	0 => _("|Report target|Player name"),
	//L16N [Report System] Players can report other players (for trolling or personal threats for example)
	1 => _("|Report target|Player behavior"),
	//L16N [Report System] Players can report other player club tags (for trolling or personal threats for example)
	2 => _("|Report target|Club tag"),
	//L16N [Report System] Players can report other player skins (for trolling or personal threats for example)
	3 => _("|Report target|Skin"),
	//L16N [Report System] Players can report other player skins (for trolling or personal threats for example)
	4 => _("|Report target|Skin"),
	//L16N [Report System] Players can report records (for hacking or bot use for example)
	5 => _("|Report target|Record"),
	//L16N [Report System] Players can report clubs (for discrimination content for example)
	6 => _("|Report target|Club"),
	//L16N [Report System] Players can report club activities (for discrimination content for example)
	7 => _("|Report target|Activity"),
	//L16N [Report System] Players can report club rooms (for discrimination content for example)
	8 => _("|Report target|Room"),
	//L16N [Report System] Players can report tracks (for discrimination content for example)
	9 => _("|Report target|Track")
]

#Const C_ReportTargets_DetailsQuestions [
	//L16N [Report System] Second choice of the report pop up, to determine which player name to report
	0 => _("|Report target|Which name do you want to report?"),
	//L16N [Report System] Second choice of the report pop up, to determine which player to report
	1 => _("|Report target|Who do you want to report?"),
	//L16N [Report System] Second choice of the report pop up, to determine which club tag to report
	2 => _("|Report target|Which club tag do you want to report?"),
	//L16N [Report System] Second choice of the report pop up, to determine which skin to report
	3  => _("|Report target|Which skin do you want to report?"),
	//L16N [Report System] Second choice of the report pop up, to determine which skin to report
	4 => _("|Report target|Which skin do you want to report?"),
	//L16N [Report System] Second choice of the report pop up, to determine which player time to report from the records
	5 => _("|Report target|Who do you want to report in the records?"),
	//L16N [Report System] Second choice of the report pop up, to determine which club to report
	6 => _("|Report target|Which club do you want to report?"),
	//L16N [Report System] Second choice of the report pop up to determine which activity to report
	7 => _("|Report target|Which activity do you want to report?"),
	//L16N [Report System] Second choice of the report pop up to determine which room to report
	8 => _("|Report target|Which room do you want to report?"),
	//L16N [Report System] Second choice of the report pop up, to determine which track to report
	9 => _("|Report target|Which track do you want to report?")
]

/* Report types for PLAYER */

// /!\ These values must correspond to the indexes of the array C_ReportTypes_Player, C_ReportTypes_Player_DisplayNames, C_ReportTypes_PlayerAttributes_DisplayNames and C_ReportTypes_Record_DisplayNames
#Const C_ReportType_CopyrightInfringement 0
#Const C_ReportType_Flaming 1
#Const C_ReportType_Spamming 2
#Const C_ReportType_Trolling 3
#Const C_ReportType_PersonalThreat 4
#Const C_ReportType_TerroristThreat 5
#Const C_ReportType_SexualHarassment 6
#Const C_ReportType_Hacking 7
#Const C_ReportType_BotUse 8
#Const C_ReportType_CompetitionSmurfing 9
#Const C_ReportType_BugAdvertising 10

//!\\ These values must be the same in the API from LIVE //!\\
#Const C_ReportTypes_Player [
	0 => "copyright_infringement",
	1 => "flaming",
	2 => "spamming",
	3 => "trolling",
	4 => "personal_threat",
	5 => "terrorist_threat",
	6 => "sexual_harassment",
	7 => "hacking",
	8 => "bot_use",
	9 => "competition_smurfing",
	10 => "bug_advertising"
]

#Const C_ReportTypes_Player_DisplayNames [
	//L16N [Report System] Possible reason to report a player, in this case if their login contains a copyright infringement
	0 => _("|Report reason|Copyright infringement"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is doing inflammatory talk
	1 => _("|Report reason|Flaming"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is spamming
	2 => _("|Report reason|Spamming"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is trolling
	3 => _("|Report reason|Trolling"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is expressing personal threat
	4 => _("|Report reason|Personal threat"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is expressing terrorist threat
	5 => _("|Report reason|Terrorist threat"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is harassing sexually other players
	6 => _("|Report reason|Sexual harassment"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is hacking to have a special leaderboard result
	7 => _("|Report reason|Hacking"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is using a bot to have a special leaderboard result
	8 => _("|Report reason|Bot use"),
	//L16N [Report System] Possible reason to report a player, in this case if a skilled player is using a false beginner account
	9 => _("|Report reason|Competition smurfing"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is adverting about a cheating bug
	10 => _("|Report reason|Bug advertising")
]


/* Report types for DISPLAY NAME, CLUB TAG or SKIN (player attributes) */

#Const C_ReportTypes_PlayerAttributes_DisplayNames [
	//L16N [Report System] Possible reason to report a player, in this case if their login contains a copyright infringement
	0 => _("|Report reason|Copyright infringement"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is doing inflammatory talk
	1 => _("|Report reason|Flaming"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is spamming
	2 => _("|Report reason|Spamming"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is trolling
	3 => _("|Report reason|Trolling"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is expressing personal threat
	4 => _("|Report reason|Personal threat"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is expressing terrorist threat
	5 => _("|Report reason|Terrorist threat"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is harassing sexually other players
	6 => _("|Report reason|Sexual harassment"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is adverting about a cheating bug
	10 => _("|Report reason|Bug advertising")
]

/* Report types for RECORD */

#Const C_ReportTypes_Record_DisplayNames [
	//L16N [Report System] Possible reason to report a player, in this case if the player is hacking to have a special leaderboard result
	7 => _("|Report reason|Hacking"),
	//L16N [Report System] Possible reason to report a player, in this case if the player is using a bot to have a special leaderboard result
	8 => _("|Report reason|Bot use"),
	//L16N [Report System] Possible reason to report a player, in this case if a skilled player is using a false beginner account
	9 => _("|Report reason|Competition smurfing")
]

/* Report types for UGC */

// /!\ These values must correspond to the indexes of the array C_ReportTypes_UGC and C_ReportTypes_UGC_DisplayNames
#Const C_ReportType_UGC_CopyrightInfringement 0
#Const C_ReportType_UGC_HatredIncitement 1
#Const C_ReportType_UGC_DiscriminationContent 2
#Const C_ReportType_UGC_SexualContent 3

//!\\ These values must be the same in the API from LIVE //!\\
#Const C_ReportTypes_UGC [
	0 => "ugc_copyright_infringement",
	1 => "ugc_hatred_incitement",
	2 => "ugc_discrimination_content",
	3 => "ugc_sexual_content"
]

#Const C_ReportTypes_UGC_DisplayNames [
	//L16N [Report System] Possible reason to report a User Generated Content, in this case if the UGC contains a copyright infringement
	0 => _("|Report reason|UGC copyright infringement"),
	//L16N [Report System] Possible reason to report a User Generated Content, in this case if the UGC contains a hatred incitement
	1 => _("|Report reason|UGC hatred incitement"),
	//L16N [Report System] Possible reason to report a User Generated Content, in this case if the UGC contains discrimation content
	2 => _("|Report reason|UGC discrimation content"),
	//L16N [Report System] Possible reason to report a User Generated Content, in this case if the UGC contains sexual content
	3 => _("|Report reason|UGC sexual content")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Format the record player name and score for the detail question of the report pop up
 *
 *	@param	_PlayerName									The name of the player who establish the record
 *					_PlayerScore								The score of the player (in time)
 *
 *	@return															A text with this format "PlayerName - 00:21:474"
 */
Text FormatRecordDetail(Text _PlayerName, Integer _PlayerScore) {
	return (_PlayerName ^ " - " ^ TL::TimeToText(_PlayerScore, True, True));
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Format the record ids for the report API
 *
 *	@param	_PlayerAccountId								The account id of the player who establish the record
 *					_SeasonId												The Season Id of the specified record (if empty, will be replaced by "Personal_Best")
 *					_MapUid													The Map Uid of the specified record
 *
 *	@return																	A text with this format "PlayerAccountId::SeasonId::MapUid"
 */
Text FormatRecordId(Text _PlayerAccountId, Text _SeasonId, Text _MapUid) {
	declare Text SeasonId = C_PB;
	if (_SeasonId != "") SeasonId = _SeasonId;
	return (_PlayerAccountId^":"^SeasonId^":"^_MapUid);
}