/**
 *	Component: Counter
 *	===========================
 *
 *	The `Counter` component was designed to be used with the `Navigation` class.
 *	With this component, the player will be able to add and remove a certain amount to the last value, or manually set a value.
 *	If the new value exceeds the defined limits, a correction will be applied automatically to respect these limits.
 *
 *	Events
 *	----------
 *	- C_EventType_Update
 *	- C_EventType_FocusUpdated
 *
 *	Parameters
 *	----------
 *	- data-halign
 *	- data-valign
 *	- data-opacityunfocus
 *	- data-iconsize
 *	- data-iconcolor
 *	- data-value
 *	- data-minvalue
 *	- data-maxvalue
 *	- data-step
 *	- data-textfieldtextsize
 *	- data-textfieldcolor
 *	- data-textfieldsize
 */
#Const Version		"1.0.2"
#Const ScriptName	"Libs/Nadeo/CMGame/Components/Counter.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "ColorLib" as CL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_TextFieldProperties {
	Integer Value;
	Real TextSize;
	Vec3 Color;
	Vec2 Size;
	Integer MinValue;
	Integer MaxValue;
	Integer Step;
}

#Struct K_ImageProperties {
	Vec2 Size;
	Vec3 Color;
}

#Struct K_Counter {
	Text HAlign;
	Text VAlign;
	Boolean IsCounter;
	Boolean IsLocked;
	Boolean IsFocused;
	Boolean IsEntryFocused;
	Real OpacityUnfocus;
	CMlControl LastControlFocused;
	K_TextFieldProperties TextField;
	K_ImageProperties Icon;
}

#Struct K_Event {
	Integer Type;
	CMlFrame Counter;
}

#Struct K_State {
	K_Event[] PendingEvents;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Counter_Null K_Counter {
	HAlign = "",
	VAlign = "",
	IsCounter = False,
	IsLocked = False,
	IsFocused = False,
	IsEntryFocused = False,
	OpacityUnfocus = 1.,
	LastControlFocused = Null,
	TextField = K_TextFieldProperties {},
	Icon = K_ImageProperties {}
}
#Const C_State_Null K_State {
	PendingEvents = []
}

#Const C_Name "component-cmgame-counter" //< Component name
#Const P "CMGame_Counter::" //< Prefix used to differentiate functions/variables in the script
#Const Q "CMGame_Counter"

#Const C_NavZone "CMGame_Counter_quad-activation"
#Const C_NavGroupName "CMGame_Counter_NavGroup"

#Const C_EventType_Update 0
#Const C_EventType_FocusUpdated 1

#Const C_Class_FrameContainerCounter "cmgame-counter_class_frame-container-counter"
#Const C_Class_LeaveCounter "cmgame-counter_class-leave-counter"
#Const C_Id_FrameCounterAlign "cmgame-counter_frame-counter-align"
#Const C_Id_FrameNavigationContainer "cmgame-counter_frame-navigation-container"
#Const C_Id_ButtonLess "cmgame-counter_button-less"
#Const C_Id_ButtonMore "cmgame-counter_button-more"
#Const C_Id_TextFieldCounter "cmgame-counter_textfield-counter"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text GetManialink() {

	declare Vec2 Size_ButtonIcon = <6., 6.>;
	declare Vec2 Size_TextField = <15., 6.>;

	return """
<frame id="{{{C_Id_FrameCounterAlign}}}" class="{{{C_Class_FrameContainerCounter}}}">
	<frame z-index="1" id="{{{C_Id_FrameNavigationContainer}}}" class="{{{Navigation::C_Class_Container}}}">
		<quad id="{{{C_NavZone}}}" class="{{{Navigation::C_Class_ActivationZone}}}" halign="center" valign="center" z-index="10" opacity="0." scriptevents="1"/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="{{{C_Id_ButtonLess}}}" z-index="2"
			class="{{{Navigation::C_Class}}} {{{C_Class_LeaveCounter}}}"
			data-image="{{{Icons::C_Icon_128x128_Minus_Oblique}}}"
			data-size="{{{Size_ButtonIcon.X}}} {{{Size_ButtonIcon.Y}}}"
			data-bgcolor="fff"
			data-opacity="1."
			data-imagefocus="{{{Icons::C_Icon_128x128_Minus_Oblique}}}"
			data-focuscolor="fff"
			data-opacityunfocus="0.5"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;cancel;right"
			data-nav-targets="_;_;{{{C_Id_TextFieldCounter}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			modelid="{{{TextField::C_Name}}}" id="{{{C_Id_TextFieldCounter}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_LeaveCounter}}}"
			data-size="{{{Size_TextField.X}}} {{{Size_TextField.Y}}}"
			data-bgempty="1"
			data-textsize="3."
			data-textvaluetype="Ml_Integer"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel;left;right"
			data-nav-targets="_;_;{{{C_Id_ButtonLess}}};{{{P}}}button-more"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{TextField::C_NavZone}}}"
		/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="{{{C_Id_ButtonMore}}}" z-index="2"
			class="{{{Navigation::C_Class}}} {{{C_Class_LeaveCounter}}}"
			data-image="{{{Icons::C_Icon_128x128_Plus_Oblique}}}"
			data-size="{{{Size_ButtonIcon.X}}} {{{Size_ButtonIcon.Y}}}"
			data-bgcolor="fff"
			data-opacity="1."
			data-imagefocus="{{{Icons::C_Icon_128x128_Plus_Oblique}}}"
			data-focuscolor="fff"
			data-opacityunfocus="0.5"
			data-halign="right" data-valign="center"
			data-nav-inputs="select;cancel;left"
			data-nav-targets="_;_;{{{C_Id_TextFieldCounter}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>
</frame>
""";
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Handle the focus inside the component
Void InnerFocus(CMlScript _This, CMlFrame _Frame_Counter, CMlControl _From, CMlControl _To) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	assert(CMGame_Counter_Counter.IsCounter, "Control '"^_Frame_Counter.ControlId^"' is not a counter");
	if (CMGame_Counter_Counter.IsLocked) return;

	if (_From != Null) {
		Navigation::Unfocus(_This, _From);
		if (Button::IsButton(_From)) {
			Button::Unfocus(_This, _From as CMlFrame);
		} else if (TextField::IsTextField(_From)) {
			TextField::Unfocus(_This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		Navigation::Focus(_This, _To);
		if (Button::IsButton(_To)) {
			Button::Focus(_This, _To as CMlFrame);
		} else if (TextField::IsTextField(_To)) {
			TextField::Focus(_This, (_To as CMlFrame));
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	The component is focused by the Navigation component
Void Focus(CMlScript _This, CMlFrame _Frame_Counter) {
	declare K_State CMGame_Counter_State for _This.Page = C_State_Null;
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	assert(CMGame_Counter_Counter.IsCounter, "Control '"^_Frame_Counter.ControlId^"' is not a counter");
	if (CMGame_Counter_Counter.IsLocked) return;

	if (CMGame_Counter_Counter.IsFocused == False) {
		declare CMlQuad Quad_NavZone <=> (_Frame_Counter.GetFirstChild(C_NavZone) as CMlQuad);
		declare CMlFrame Button_Less <=> (_Frame_Counter.GetFirstChild(C_Id_ButtonLess) as CMlFrame);
		declare CMlFrame Button_More <=> (_Frame_Counter.GetFirstChild(C_Id_ButtonMore) as CMlFrame);
		declare CMlFrame TextField_Counter <=> (_Frame_Counter.GetFirstChild(C_Id_TextFieldCounter) as CMlFrame);
		declare CMlFrame Frame_NavigationContainer <=> (_Frame_Counter.GetFirstChild(C_Id_FrameNavigationContainer) as CMlFrame);

		// Enable navigation
		CMGame_Counter_Counter.IsFocused = True;
		Quad_NavZone.Visible = !CMGame_Counter_Counter.IsFocused;
		Navigation::EnableContainer(_This, Frame_NavigationContainer, CMGame_Counter_Counter.IsFocused);

		// Entering counter component - focus the default button if possible
		if (CMGame_Counter_Counter.LastControlFocused != Null && !Navigation::IsLocked(CMGame_Counter_Counter.LastControlFocused)) {
			InnerFocus(_This, _Frame_Counter, Navigation::GetFocusedControl(_This, C_NavGroupName), CMGame_Counter_Counter.LastControlFocused);
		} else if (!Navigation::IsLocked(TextField_Counter)) {
			InnerFocus(_This, _Frame_Counter, Navigation::GetFocusedControl(_This, C_NavGroupName), TextField_Counter);
		} else if (!Navigation::IsLocked(Button_Less)) {
			InnerFocus(_This, _Frame_Counter, Navigation::GetFocusedControl(_This, C_NavGroupName), Button_Less);
		} else if (!Navigation::IsLocked(Button_More)) {
			InnerFocus(_This, _Frame_Counter, Navigation::GetFocusedControl(_This, C_NavGroupName), Button_More);
		}

		// Send Focus event
		CMGame_Counter_State.PendingEvents.add(K_Event {
			Type = C_EventType_FocusUpdated,
			Counter = _Frame_Counter
		});
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	The component is unfocused by the Navigation component
Void Unfocus(CMlScript _This, CMlFrame _Frame_Counter) {
	declare K_State CMGame_Counter_State for _This.Page = C_State_Null;
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	assert(CMGame_Counter_Counter.IsCounter, "Control '"^_Frame_Counter.ControlId^"' is not a counter");
	if (CMGame_Counter_Counter.IsLocked) return;

	if (CMGame_Counter_Counter.IsFocused == True) {
		declare CMlQuad Quad_NavZone <=> (_Frame_Counter.GetFirstChild(C_NavZone) as CMlQuad);
		declare CMlFrame Frame_NavigationContainer <=> (_Frame_Counter.GetFirstChild(C_Id_FrameNavigationContainer) as CMlFrame);

		// Disable navigation
		CMGame_Counter_Counter.IsFocused = False;
		CMGame_Counter_Counter.LastControlFocused = Navigation::GetFocusedControl(_This, C_NavGroupName);
		Quad_NavZone.Visible = !CMGame_Counter_Counter.IsFocused;
		Navigation::EnableContainer(_This, Frame_NavigationContainer, CMGame_Counter_Counter.IsFocused);

		// Leaving counter component - unfocus buttons
		InnerFocus(_This, _Frame_Counter, 	CMGame_Counter_Counter.LastControlFocused, Null);

		// Send Focus event
		CMGame_Counter_State.PendingEvents.add(K_Event {
			Type = C_EventType_FocusUpdated,
			Counter = _Frame_Counter
		});
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Update the component with the
Void UpdateCounter(CMlScript _This, CMlFrame _Frame_Counter) {
	declare K_State CMGame_Counter_State for _This.Page = C_State_Null;
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	declare CMlFrame Button_Less <=> (_Frame_Counter.GetFirstChild(C_Id_ButtonLess) as CMlFrame);
	declare CMlFrame Button_More <=> (_Frame_Counter.GetFirstChild(C_Id_ButtonMore) as CMlFrame);
	declare CMlFrame Frame_NavigationContainer <=> (_Frame_Counter.GetFirstChild(C_Id_FrameNavigationContainer) as CMlFrame);
	declare CMlFrame TextField_Counter <=> (_Frame_Counter.GetFirstChild(C_Id_TextFieldCounter) as CMlFrame);

	/* Out of bound correction */
	CMGame_Counter_Counter.TextField.Value = ML::Clamp(CMGame_Counter_Counter.TextField.Value, CMGame_Counter_Counter.TextField.MinValue, CMGame_Counter_Counter.TextField.MaxValue);

	/* TextField settings */
	TextField::SetValue(_This, TextField_Counter, TL::ToText(CMGame_Counter_Counter.TextField.Value));
	TextField::SetTextColorFocus(_This, TextField_Counter, CMGame_Counter_Counter.TextField.Color);
	TextField::SetTextSize(_This, TextField_Counter, CMGame_Counter_Counter.TextField.TextSize);

	/* Button visibility */
	Button::SetVisibilityAndNavigation(Button_Less, CMGame_Counter_Counter.TextField.Value > CMGame_Counter_Counter.TextField.MinValue);
	Button::SetVisibilityAndNavigation(Button_More, CMGame_Counter_Counter.TextField.Value < CMGame_Counter_Counter.TextField.MaxValue);
	if (CMGame_Counter_Counter.IsFocused) {
		if (!Button_Less.Visible) InnerFocus(_This, _Frame_Counter, Navigation::GetFocusedControl(_This, C_NavGroupName), Button_More);
		if (!Button_More.Visible) InnerFocus(_This, _Frame_Counter, Navigation::GetFocusedControl(_This, C_NavGroupName), Button_Less);
	}

	/* Navigation*/
	if (Navigation::IsLocked(Button_Less)) Navigation::ChangeControlTarget(_This, Frame_NavigationContainer, TextField_Counter, "left", "_");
	else Navigation::ChangeControlTarget(_This, Frame_NavigationContainer, TextField_Counter, "left", Button_Less.ControlId);
	if (Navigation::IsLocked(Button_More)) Navigation::ChangeControlTarget(_This, Frame_NavigationContainer, TextField_Counter, "right", "_");
	else Navigation::ChangeControlTarget(_This, Frame_NavigationContainer, TextField_Counter, "right", Button_More.ControlId);

	/* Send Update event*/
	CMGame_Counter_State.PendingEvents.add(K_Event {
		Type = C_EventType_Update,
		Counter = _Frame_Counter
	});
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Apply all the properties to the component
Void ApplyProperties(CMlScript _This, CMlFrame _Frame_Counter, K_Counter _Properties) {
	declare CMlFrame Button_Less <=> (_Frame_Counter.GetFirstChild(C_Id_ButtonLess) as CMlFrame);
	declare CMlFrame Button_More <=> (_Frame_Counter.GetFirstChild(C_Id_ButtonMore) as CMlFrame);
	declare CMlFrame Frame_Align <=> (_Frame_Counter.GetFirstChild(C_Id_FrameCounterAlign) as CMlFrame);
	declare CMlFrame TextField_Counter <=> (_Frame_Counter.GetFirstChild(C_Id_TextFieldCounter) as CMlFrame);
	declare CMlQuad Quad_NavZone <=> (_Frame_Counter.GetFirstChild(C_NavZone) as CMlQuad);
	declare CMlFrame Frame_NavigationContainer <=> (_Frame_Counter.GetFirstChild(C_Id_FrameNavigationContainer) as CMlFrame);

	TextField::SetSize(_This, TextField_Counter, _Properties.TextField.Size);
	TextField::SetTextOpacityUnfocus(_This, TextField_Counter, _Properties.OpacityUnfocus);
	Button::SetIconColor(_This, Button_Less, _Properties.Icon.Color);
	Button::SetIconColor(_This, Button_More, _Properties.Icon.Color);
	Button::SetOpacityUnfocus(_This, Button_Less, _Properties.OpacityUnfocus);
	Button::SetOpacityUnfocus(_This, Button_More, _Properties.OpacityUnfocus);
	Button::SetIconSize(_This, Button_Less, _Properties.Icon.Size);
	Button::SetIconSize(_This, Button_More, _Properties.Icon.Size);

	UpdateCounter(_This, _Frame_Counter);
	Navigation::EnableContainer(_This, Frame_NavigationContainer, _Properties.IsFocused);

	/* Activation zone */
	Quad_NavZone.Size = TextField::GetSize(TextField_Counter) + <2 * Button::GetIconSize(Button_Less).X, 0.>;
	if (Quad_NavZone.Size.Y < Button::GetIconSize(Button_Less).Y) {
		Quad_NavZone.Size.Y = Button::GetIconSize(Button_Less).Y;
	}

	/* Position */
	TextField_Counter.RelativePosition_V3 = <0., 0.>;
	Quad_NavZone.RelativePosition_V3 = <0., 0.>;
	Button_Less.RelativePosition_V3 = <-Quad_NavZone.Size.X/2., 0.>;
	Button_More.RelativePosition_V3 = <Quad_NavZone.Size.X/2., 0.>;

	/* Align */
	Tools::Align(Frame_Align, Quad_NavZone.Size, _Properties.HAlign, _Properties.VAlign);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Special component actions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void Add(CMlScript _This, CMlFrame _Frame_Counter, Integer _ShiftNb) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	if (!CMGame_Counter_Counter.IsCounter || CMGame_Counter_Counter.IsLocked) return;

	CMGame_Counter_Counter.TextField.Value += _ShiftNb;
	UpdateCounter(_This, _Frame_Counter);
}
Void Add(CMlScript _This, CMlFrame _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	Add(_This, _Frame_Counter, CMGame_Counter_Counter.TextField.Step);
}

Void Remove(CMlScript _This, CMlFrame _Frame_Counter, Integer _ShiftNb) {
	Add(_This, _Frame_Counter, -_ShiftNb);
}
Void Remove(CMlScript _This, CMlFrame _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	Remove(_This, _Frame_Counter, CMGame_Counter_Counter.TextField.Step);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Setters
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void SetValue(CMlScript _This, CMlFrame _Frame_Counter, Integer _Value) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter.TextField.Value = _Value;
	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}
Void SetMinValue(CMlScript _This, CMlFrame _Frame_Counter, Integer _MinValue) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter.TextField.MinValue = _MinValue;
	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}
Void SetMaxValue(CMlScript _This, CMlFrame _Frame_Counter, Integer _MaxValue) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter.TextField.MaxValue = _MaxValue;
	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}
Void SetStep(CMlScript _This, CMlFrame _Frame_Counter, Integer _Step) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter.TextField.Step = _Step;
	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}
Void SetTextSize(CMlScript _This, CMlFrame _Frame_Counter, Real _TextSize) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter.TextField.TextSize = _TextSize;
	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}
Void SetTextColor(CMlScript _This, CMlFrame _Frame_Counter, Vec3 _TextColor) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter.TextField.Color = _TextColor;
	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}
Void SetLabelSize(CMlScript _This, CMlFrame _Frame_Counter, Vec2 _LabelSize) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter.TextField.Size = _LabelSize;
	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}
Void SetIconSize(CMlScript _This, CMlFrame _Frame_Counter, Vec2 _Size) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter.Icon.Size = _Size;
	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}
Void SetIconColor(CMlScript _This, CMlFrame _Frame_Counter, Vec3 _Color) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter.Icon.Color = _Color;
	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}
Void SetHAlign(CMlScript _This, CMlFrame _Frame_Counter, Text _HAlign) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter.HAlign = _HAlign;
	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}
Void SetVAlign(CMlScript _This, CMlFrame _Frame_Counter, Text _VAlign) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter.VAlign = _VAlign;
	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}
Void SetOpacityUnfocus(CMlScript _This, CMlFrame _Frame_Counter, Real _Opacity) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter.OpacityUnfocus = _Opacity;
	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Getters
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean IsCounter(CMlControl _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.IsCounter;
}

Boolean IsFocused(CMlControl _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.IsFocused;
}

Integer GetValue(CMlControl _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.TextField.Value;
}
Integer GetMinValue(CMlControl _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.TextField.MinValue;
}
Integer GetMaxValue(CMlControl _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.TextField.MaxValue;
}
Integer GetStep(CMlControl _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.TextField.Step;
}
Real GetTextSize(CMlControl _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.TextField.TextSize;
}
Vec3 GetTextColor(CMlControl _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.TextField.Color;
}
Vec2 GetLabelSize(CMlControl _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.TextField.Size;
}
Vec2 GetIconSize(CMlFrame _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.Icon.Size;
}
Vec3 GetIconColor(CMlFrame _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.Icon.Color;
}
Text GetHAlign(CMlControl _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.HAlign;
}
Text GetVAlign(CMlControl _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.VAlign;
}
Real GetOpacityUnfocus(CMlControl _Frame_Counter) {
	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	return CMGame_Counter_Counter.OpacityUnfocus;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Initialize the component
Void InitCounter(CMlScript _This, CMlFrame _Frame_Counter)	{
	if (_Frame_Counter == Null) return;

	declare CMlFrame TextField_Counter <=> (_Frame_Counter.GetFirstChild(C_Id_TextFieldCounter) as CMlFrame);
	declare CMlFrame Button_Less <=> (_Frame_Counter.GetFirstChild(C_Id_ButtonLess) as CMlFrame);
	declare CMlFrame Button_More <=> (_Frame_Counter.GetFirstChild(C_Id_ButtonMore) as CMlFrame);

	declare K_Counter CMGame_Counter_Counter for _Frame_Counter = C_Counter_Null;
	CMGame_Counter_Counter = K_Counter {
		IsCounter = True,
		IsLocked = False,
		IsFocused = False,
		IsEntryFocused = False,
		OpacityUnfocus = 1.,
		LastControlFocused = Button_Less,
		HAlign = Tools::C_HAlign_Center,
		VAlign = Tools::C_VAlign_Center,
		TextField = K_TextFieldProperties {
			Value = 0,
			MinValue = -32768,
			MaxValue = 32767,
			Step = 1,
			TextSize = TextField::GetTextSize(TextField_Counter),
			Color = TextField::GetTextColorFocus(TextField_Counter),
			Size = TextField::GetSize(TextField_Counter)
		},
		Icon = K_ImageProperties {
			Size = Button::GetSize(Button_Less),
			Color = Button::GetIconColor(Button_Less)
		}
	};

	/* Nav inputs */
	declare CMlFrame Frame_NavigationContainer <=> (_Frame_Counter.GetFirstChild(C_Id_FrameNavigationContainer) as CMlFrame);
	if (Navigation::GetControlTarget(_Frame_Counter, CMlScriptEvent::EMenuNavAction::Left) != Null) {
		Navigation::ChangeControlTarget(_This, Frame_NavigationContainer, Button_Less, "left", "_");
	}
	if (Navigation::GetControlTarget(_Frame_Counter, CMlScriptEvent::EMenuNavAction::Right) != Null) {
		Navigation::ChangeControlTarget(_This, Frame_NavigationContainer, Button_More, "right", "_");
	}
	if (Navigation::GetControlTarget(_Frame_Counter, CMlScriptEvent::EMenuNavAction::Up) != Null) {
		Navigation::ChangeControlTarget(_This, Frame_NavigationContainer, Button_Less, "up", "_");
		Navigation::ChangeControlTarget(_This, Frame_NavigationContainer, TextField_Counter, "up", "_");
		Navigation::ChangeControlTarget(_This, Frame_NavigationContainer, Button_More, "up", "_");
	}
	if (Navigation::GetControlTarget(_Frame_Counter, CMlScriptEvent::EMenuNavAction::Down) != Null) {
		Navigation::ChangeControlTarget(_This, Frame_NavigationContainer, Button_Less, "down", "_");
		Navigation::ChangeControlTarget(_This, Frame_NavigationContainer, TextField_Counter, "down", "_");
		Navigation::ChangeControlTarget(_This, Frame_NavigationContainer, Button_More, "down", "_");
	}
	Navigation::EnableInputs(_Frame_Counter, False);

	// Initialize the Counter state
	if (_Frame_Counter.DataAttributeExists("halign")) {
		CMGame_Counter_Counter.HAlign = _Frame_Counter.DataAttributeGet("halign");
	}
	if (_Frame_Counter.DataAttributeExists("valign")) {
		CMGame_Counter_Counter.VAlign = _Frame_Counter.DataAttributeGet("valign");
	}
	if (_Frame_Counter.DataAttributeExists("opacityunfocus")) {
		CMGame_Counter_Counter.OpacityUnfocus = TL::ToReal(_Frame_Counter.DataAttributeGet("opacityunfocus"));
	}
	if (_Frame_Counter.DataAttributeExists("value")) {
		CMGame_Counter_Counter.TextField.Value = TL::ToInteger(_Frame_Counter.DataAttributeGet("value"));
	}
	if (_Frame_Counter.DataAttributeExists("minvalue")) {
		CMGame_Counter_Counter.TextField.MinValue = TL::ToInteger(_Frame_Counter.DataAttributeGet("minvalue"));
	}
	if (_Frame_Counter.DataAttributeExists("maxvalue")) {
		CMGame_Counter_Counter.TextField.MaxValue = TL::ToInteger(_Frame_Counter.DataAttributeGet("maxvalue"));
	}
	if (_Frame_Counter.DataAttributeExists("step")) {
		CMGame_Counter_Counter.TextField.Step = TL::ToInteger(_Frame_Counter.DataAttributeGet("step"));
	}
	if (_Frame_Counter.DataAttributeExists("textfieldtextsize ")) {
		CMGame_Counter_Counter.TextField.TextSize = TL::ToReal(_Frame_Counter.DataAttributeGet("textfieldtextsize "));
	}
	if (_Frame_Counter.DataAttributeExists("textfieldcolor")) {
		CMGame_Counter_Counter.TextField.Color = CL::HexToRgb(_Frame_Counter.DataAttributeGet("textfieldcolor"));
	}
	if (_Frame_Counter.DataAttributeExists("textfieldsize")) {
		CMGame_Counter_Counter.TextField.Size = Tools::TextToVec2(_Frame_Counter.DataAttributeGet("textfieldsize"));
	}
	if (_Frame_Counter.DataAttributeExists("iconcolor")) {
		CMGame_Counter_Counter.Icon.Color = CL::HexToRgb(_Frame_Counter.DataAttributeGet("iconcolor"));
	}
	if (_Frame_Counter.DataAttributeExists("iconsize")) {
		CMGame_Counter_Counter.Icon.Size = Tools::TextToVec2(_Frame_Counter.DataAttributeGet("iconsize"));
	}

	ApplyProperties(_This, _Frame_Counter, CMGame_Counter_Counter);
}

Void InitializeCounters(CMlScript _This) {
	_This.Page.GetClassChildren(C_Class_FrameContainerCounter, _This.Page.MainFrame, True);
	foreach (Control in _This.Page.GetClassChildren_Result) {
		declare CMlFrame Frame_CounterContainer = (Control as CMlFrame);
		InitCounter(_This, Frame_CounterContainer.Parent);
	}
}

K_Event[] GetPendingEvents(CMlScript _This) {
	declare K_State CMGame_Counter_State for _This.Page = C_State_Null;
	return CMGame_Counter_State.PendingEvents;
}

Void MainInit(CMlScript _This) {
	declare K_State CMGame_Counter_State for _This.Page = C_State_Null;
	CMGame_Counter_State = C_State_Null;
}

Void MainStart(CMlScript _This) {
	InitializeCounters(_This);
}

Void MainLoop(CMlScript _This) {
	declare K_State CMGame_Counter_State for _This.Page = C_State_Null;
	CMGame_Counter_State.PendingEvents = [];

	/* TextField events */
	foreach (Event in TextField::GetPendingEvents(_This)) {
		switch (Event.Type) {
			case TextField::C_EventType_Update: {
				if (Event.Control != Null && Event.Control.ControlId == C_Id_TextFieldCounter) {
					assert(Event.Control.Parent.Parent.Parent != Null && IsCounter(Event.Control.Parent.Parent.Parent), "The manialink has been modified, we do not point to the right frame anymore");
					declare K_Counter CMGame_Counter_Counter for Event.Control.Parent.Parent.Parent = C_Counter_Null;
					CMGame_Counter_Counter.TextField.Value = TL::ToInteger(Event.Value);
					UpdateCounter(_This, Event.Control.Parent.Parent.Parent);
				}
			}
		}
	}

	/* Navigation events */
	foreach (Event in Navigation::GetPendingEvents(_This)) {
		switch (Event.Type) {
			case Navigation::C_EventType_NavigateInput: {
				if (Navigation::IsEventFromNestedContainer(_This, Event.Container) && Event.Container.ControlId == C_Id_FrameNavigationContainer) {
					assert(IsCounter(Event.Container.Parent.Parent), "The manialink has been modified, we do not point to the right frame anymore");
					declare CMlFrame Frame_Counter = Event.Container.Parent.Parent;
					if (IsFocused(Frame_Counter)) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							switch (Event.To.ControlId) {
								case C_Id_ButtonLess: Remove(_This, Frame_Counter);
								case C_Id_ButtonMore: Add(_This, Frame_Counter);
							}
						} else if (
								Event.From != Null &&
								Event.From == Event.To &&
								Event.From.HasClass(C_Class_LeaveCounter)
							) {
								Navigation::EnableInputs(Frame_Counter, True);
								Navigation::ApplyInput(_This, Frame_Counter, Event.Input, Event.UserIndex, []);
								Navigation::EnableInputs(Frame_Counter, False);
						} else {
							InnerFocus(_This, Frame_Counter, Event.From, Event.To);
						}
					}
				}
			}
			case Navigation::C_EventType_NavigateMouse: {
				if (Navigation::IsEventFromNestedContainer(_This, Event.Container) && Event.Container.ControlId == C_Id_FrameNavigationContainer) {
					assert(IsCounter(Event.Container.Parent.Parent), "The manialink has been modified, we do not point to the right frame anymore");
					declare CMlFrame Frame_Counter = Event.Container.Parent.Parent;
					if (IsFocused(Frame_Counter)) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							switch (Event.To.ControlId) {
								case C_Id_ButtonLess: Remove(_This, Frame_Counter);
								case C_Id_ButtonMore: Add(_This, Frame_Counter);
							}
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							InnerFocus(_This, Frame_Counter, Event.From, Event.To);
						}
					}
				}
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the component
Text ComponentV2() {
	return MV::ComponentV2(
		C_Name,
		GetManialink(),
		"""
#Include "Libs/Nadeo/CMGame/Components/Counter.Script.txt" as {{{Q}}}
		""",
		"""
***MainInit***
***
{{{P}}}MainInit(This);
***

***MainStart***
***
{{{P}}}MainStart(This);
***

***MainLoop***
***
{{{P}}}MainLoop(This);
***
		""",
		[
			Button::ComponentV2(),
			Navigation::ComponentV2(),
			TextField::ComponentV2()
		],
		[]
	);
}