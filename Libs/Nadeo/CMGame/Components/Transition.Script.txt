/**
 *	Component: Simple transition animations
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/CMGame/Components/Transition.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constant
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-transition" //< Component name
#Const P "CMGame_Transition::" //< Prefix use to differentiate functions/variables in the script
#Const Q "CMGame_Transition"
#Const C_Class "component-transition-container"

// Transition states
#Const C_In 0
#Const C_Out 1
#Const C_Start 0
#Const C_End 1

#Const C_Event_Transition "ComponentTransition_ActiveTransition"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_ControlProperties {
	Boolean UsePosition;
	Vec2 Position;
	Boolean UseZIndex;
	Real ZIndex;
	Boolean UseSize;
	Vec2 Size;
	Boolean UseScale;
	Real Scale;
	Boolean UseRotation;
	Real Rotation;
	Boolean UseVisible;
	Boolean Visible;
}
#Struct K_TransitionProperties {
	Boolean UseTransition;
	K_ControlProperties TransitionIn;
	K_ControlProperties TransitionOut;
}
#Struct K_State {
	CMlControl[] TransitionControls;
	Boolean IsInTransition;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_TransitionProperties_Null K_TransitionProperties {
	UseTransition = False,
	TransitionIn = K_ControlProperties {},
	TransitionOut = K_ControlProperties {}
}
#Const C_State_Null K_State {
	TransitionControls = [],
	IsInTransition = False
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void Private_InitTransitionControl(CMlControl _Control) {
	declare K_TransitionProperties TransitionProperties for _Control = C_TransitionProperties_Null;

	if (_Control.DataAttributeExists("transition-in")) {
		TransitionProperties.UseTransition = True;
		TransitionProperties.TransitionIn.fromjson(_Control.DataAttributeGet("transition-in"));
	}

	if (_Control.DataAttributeExists("transition-out")) {
		TransitionProperties.UseTransition = True;
		TransitionProperties.TransitionOut.fromjson(_Control.DataAttributeGet("transition-out"));
	}
}

Text CreateTransitionAnim(K_ControlProperties _Transition) {
	declare Text Pos = "";
	if (_Transition.UsePosition) {
		Pos = " pos=\""^_Transition.Position.X^" "^_Transition.Position.Y^"\" ";
	}
	declare Text ZIndex = "";
	if (_Transition.UseZIndex) {
		ZIndex = " z-index=\""^_Transition.ZIndex^"\" ";
	}
	declare Text Size = "";
	if (_Transition.UseSize) {
		Size = " size=\""^_Transition.Size.X^" "^_Transition.Size.Y^"\" ";
	}
	declare Text Scale = "";
	if (_Transition.UseScale) {
		Scale = " scale=\""^_Transition.Scale^"\" ";
	}
	declare Text Rotation = "";
	if (_Transition.UseRotation) {
		Rotation = " rot=\""^_Transition.Rotation^"\" ";
	}
	declare Text Visible = "";
	if (_Transition.UseVisible) {
		declare Integer Hidden = 0;
		if (!_Transition.Visible) Hidden = 1;
		Visible = " hidden=\""^Hidden^"\" ";
	}
	return "<transition"^Pos^""^ZIndex^""^Size^""^Scale^""^Rotation^""^Visible^"/>";
}

Void ApplyTransition(CMlControl _Control, K_ControlProperties _Transition) {
	if (_Transition.UsePosition) {
		_Control.RelativePosition_V3 = _Transition.Position;
	}
	if (_Transition.UseZIndex) {
		_Control.ZIndex = _Transition.ZIndex;
	}
	if (_Transition.UseSize) {
		_Control.Size = _Transition.Size;
	}
	if (_Transition.UseScale) {
		_Control.RelativeScale = _Transition.Scale;
	}
	if (_Transition.UseRotation) {
		_Control.RelativeRotation = _Transition.Rotation;
	}
	if (_Transition.UseVisible) {
		_Control.Visible = _Transition.Visible;
	}
}

Void PlayTransitions(CMlScript _This, Integer _StartOrEnd, Integer _InOrOut, Integer _EndTime) {
	declare K_State CMGame_Transition_State for _This.Page = C_State_Null;
	foreach (Control in CMGame_Transition_State.TransitionControls) {
		declare K_TransitionProperties TransitionProperties for Control = C_TransitionProperties_Null;
		if (TransitionProperties.UseTransition) {
			if (_StartOrEnd == C_Start) {
				declare Integer Duration = _EndTime - Now;
				if (_InOrOut == C_In) {
					ApplyTransition(Control, TransitionProperties.TransitionOut);
					declare Text Anim = CreateTransitionAnim(TransitionProperties.TransitionIn);
					_This.AnimMgr.Add(Control, Anim, Duration, CAnimManager::EAnimManagerEasing::QuadOut);
				} else if (_InOrOut == C_Out) {
					ApplyTransition(Control, TransitionProperties.TransitionIn);
					declare Text Anim = CreateTransitionAnim(TransitionProperties.TransitionOut);
					_This.AnimMgr.Add(Control, Anim, Duration, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			} else if (_StartOrEnd == C_End) {
				if (_InOrOut == C_In) {
					ApplyTransition(Control, TransitionProperties.TransitionIn);
				} else if (_InOrOut == C_Out) {
					ApplyTransition(Control, TransitionProperties.TransitionOut);
				}
			}
		}
	}

	if (_StartOrEnd == C_Start) {
		CMGame_Transition_State.IsInTransition = True;
	} else if (_StartOrEnd == C_End) {
		CMGame_Transition_State.IsInTransition = False;
	}
}

Boolean IsInTransition(CMlScript _This) {
	declare K_State CMGame_Transition_State for _This.Page = C_State_Null;
	return CMGame_Transition_State.IsInTransition;
}

Void MainInit(CMlScript _This) {
	declare K_State CMGame_Transition_State for _This.Page = C_State_Null;
	CMGame_Transition_State = C_State_Null;
	_This.Page.GetClassChildren(C_Class, _This.Page.MainFrame, True);
	foreach (Control in _This.Page.GetClassChildren_Result) {
		declare CMlControl TrueControlHandle = Control;
		CMGame_Transition_State.TransitionControls.add(TrueControlHandle);
		Private_InitTransitionControl(TrueControlHandle);
	}
	CMGame_Transition_State.IsInTransition = False;
}

Void MainLoop(CMlScript _This) {
	foreach (Event in _This.PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case C_Event_Transition: {
						if (Event.CustomEventData.count >= 3) {
							PlayTransitions(
								_This,
								TL::ToInteger(Event.CustomEventData[0]),
								TL::ToInteger(Event.CustomEventData[1]),
								TL::ToInteger(Event.CustomEventData[2])
							);
						}
					}
				}
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text ComponentV2() {
	return MV::ComponentV2(
		C_Name,
		"""
		""",
		"""
#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as {{{Q}}}
		""",
		"""
***MainInit***
***
{{{P}}}MainInit(This);
***

***MainLoop***
***
{{{P}}}MainLoop(This);
***
		""",
		[],
		[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Send a transition event to a layer
 *
 *	@param	_Layer										The layer that will receive the event
 *	@param	_StartOrEnd								Is this the start or the end of the transition
 *	@param	_InOrOut									Is this an in or out transition
 *	@param	_EndTime									At which time the transition must end
 */
Void SendLayerEvent(CManiaApp _This, CUILayer _Layer, Integer _StartOrEnd, Integer _InOrOut, Integer _EndTime) {
	_This.LayerCustomEvent(_Layer, C_Event_Transition, [TL::ToText(_StartOrEnd), TL::ToText(_InOrOut), TL::ToText(_EndTime)]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Create and setup a transition
 * that can be sent in the
 *	manialink xml
 */
K_ControlProperties Create() {
	declare K_ControlProperties Transition;
	return Transition;
}
K_ControlProperties SetTransitionPosition(K_ControlProperties _Transition, Vec2 _Position) {
	declare K_ControlProperties Transition = _Transition;
	Transition.UsePosition = True;
	Transition.Position = _Position;
	return Transition;
}
K_ControlProperties SetTransitionZIndex(K_ControlProperties _Transition, Real _ZIndex) {
	declare K_ControlProperties Transition = _Transition;
	Transition.UseZIndex = True;
	Transition.ZIndex = _ZIndex;
	return Transition;
}
K_ControlProperties SetTransitionSize(K_ControlProperties _Transition, Vec2 _Size) {
	declare K_ControlProperties Transition = _Transition;
	Transition.UseSize = True;
	Transition.Size = _Size;
	return Transition;
}
K_ControlProperties SetTransitionScale(K_ControlProperties _Transition, Real _Scale) {
	declare K_ControlProperties Transition = _Transition;
	Transition.UseScale = True;
	Transition.Scale = _Scale;
	return Transition;
}
K_ControlProperties SetTransitionRotation(K_ControlProperties _Transition, Real _Rotation) {
	declare K_ControlProperties Transition = _Transition;
	Transition.UseRotation = True;
	Transition.Rotation = _Rotation;
	return Transition;
}
K_ControlProperties SetTransitionVisible(K_ControlProperties _Transition, Boolean _Visible) {
	declare K_ControlProperties Transition = _Transition;
	Transition.UseVisible = True;
	Transition.Visible = _Visible;
	return Transition;
}

Text Encode(K_ControlProperties _Transition) {
	return TL::MLEncode(_Transition.tojson());
}