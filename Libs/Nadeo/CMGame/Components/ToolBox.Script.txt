/**
 *	Component: ToolBox
 */
#Const Version		"1.1.2"
#Const ScriptName	"Libs/Nadeo/CMGame/Components/ToolBox.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/CMGame/Components/Checkbox.Script.txt" as Checkbox
#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/CMGame/Components/ExpendableButtonBase.Script.txt" as ExpendableButton_Base
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/CMGame/Menus/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/CMGame/Utils/Icons.Script.txt" as Icons
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "MathLib" as ML
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_Controls {
	CMlFrame Checkbox_HitboxesVisibility;
	CMlFrame Checkbox_MousePos;
	CMlFrame Checkbox_Moveable;
	CMlFrame Frame_Global;
	CMlFrame Frame_MousePosDisplay;
	CMlFrame Frame_MouseRulerDisplay;
	CMlFrame TextField_Guide;
	CMlFrame TextField_Opacity;
	CMlLabel Label_MousePos;
	CMlLabel Label_MouseRuler;
	CMlQuad Quad_Guide;
	CMlQuad Quad_MouseRuler;
	CMlQuad Quad_SafeArea;
}

#Struct K_State {
	Boolean IsTitleControlReady;
	Boolean HaveHitboxesBeenDisplayedOnce;
	CMlControl Control_Moveable;
	CMlControl Control_Parent;
	CMlPage Page_CurrentRoute;
	Integer Keeper;
	Text CurrentRoutePath;
	Vec2 Pos_FrameCurrentRoute;
	Vec2 Pos_MouseRulerOrigin;
	K_Controls Controls;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-toolbox" //< Component name
#Const P "CMGame_ToolBox::" //< Prefix use to differentiate functions/variables in the script
#Const Q "CMGame_ToolBox"
#Const C_NavGroup_Default "navgroup-toolbox-default"
#Const C_Class_TextSemiBold "cmgame-toolbox_class-text-semibold"
#Const C_Class_TextExtraBold "cmgame-toolbox_class-text-extrabold"

// Default toolbox values
#Const C_State_Null K_State {}
#Const C_Path_Guide "file://Media/.debug/UI_Grid.png"
#Const C_Opacity_Default 1.

// ZIndex for Controls on Page level
#Const C_ZIndex_Guide 0.
#Const C_ZIndex_SafeArea 1.
#Const C_ZIndex_PopUp 2.
#Const C_ZIndex_MousePos 3.

// Text
#Const C_Text_DescriptionMoveable "Maintain 'Right Click' to move control\nAdd 'Y' key to move the control's parent"
#Const C_Text_DescriptionMousePos "Display the current mouse position.\n'Right Click' to draw a line & 'TAB' for 10Â° steps"
#Const C_Text_DescriptionHitboxesVisibility "Show Navigation class or Scroll class hitboxes\n(May create strange behaviors when activated)"
#Const C_Text_DescriptionSafeArea "Show an overlay to see the 90% safe area on screen"
#Const C_Text_DescriptionFastBoot "Load the game with the minimum required pages"

// Control ids
#Const C_Id_ButtonClose "cmgame-toolbox_buton-close"
#Const C_Id_ButtonResetGuide "cmgame-toolbox_button-reset-guide"
#Const C_Id_ButtonReturn "cmgame-toolbox_button-return"
#Const C_Id_CheckboxFastLoad "cmgame-toolbox_checkbox-fast-load"
#Const C_Id_CheckboxGuide "cmgame-toolbox_checkbox-guide"
#Const C_Id_CheckboxHitboxesVisibility "cmgame-toolbox_checkbox-hitboxes-visibility"
#Const C_Id_CheckboxMousePos "cmgame-toolbox_checkbox-mouse-pos"
#Const C_Id_CheckboxMoveable "cmgame-toolbox_checkbox-moveable"
#Const C_Id_CheckboxSafeArea "cmgame-toolbox_checkbox-safe-area"
#Const C_Id_FrameFastLoad "cmgame-toolbox_frame-fast-load"
#Const C_Id_FrameGlobal "cmgame-toolbox_frame-global"
#Const C_Id_FrameGuide "cmgame-toolbox_frame-guide"
#Const C_Id_FrameHitboxesVisibility "cmgame-toolbox_frame-hitboxes-visibility"
#Const C_Id_FrameMousePos "cmgame-toolbox_frame-mouse-pos"
#Const C_Id_FrameMousePosDisplay "cmgame-toolbox_frame-mouse-pos-display"
#Const C_Id_FrameMouseRulerDisplay "cmgame-toolbox_frame-mouse-ruler-display"
#Const C_Id_FrameMouseRulerHint "cmgame-toolbox_frame-mouse-ruler-hint"
#Const C_Id_FrameMoveable "cmgame-toolbox_frame-moveable"
#Const C_Id_FramePushParent "cmgame-toolbox_frame-push-parent"
#Const C_Id_FrameSafeArea "cmgame-toolbox_frame-safe-area"
#Const C_Id_LabelFastLoadInfo "cmgame-toolbox_label-fast-load-info"
#Const C_Id_LabelHitboxesVisibilityInfo "cmgame-toolbox_label-hitboxes-visibility-info"
#Const C_Id_LabelMousePos "cmgame-toolbox_label-mouse-pos"
#Const C_Id_LabelMousePosInfo "cmgame-toolbox_label-mouse-pos-info"
#Const C_Id_LabelMouseRuler "cmgame-toolbox_label-mouse-ruler"
#Const C_Id_LabelMoveableInfo "cmgame-toolbox_label-moveable-info"
#Const C_Id_LabelPushParentInfo "cmgame-toolbox_label-push-parent-info"
#Const C_Id_LabelSafeAreaInfo "cmgame-toolbox_label-safe-area-info"
#Const C_Id_LabelTitle "cmgame-toolbox_label-title"
#Const C_Id_QuadDimmer "cmgame-toolbox_quad-dimmer"
#Const C_Id_QuadGuide "cmgame-toolbox_quad-guide"
#Const C_Id_QuadHintBg "cmgame-toolbox_quad-hint-bg"
#Const C_Id_QuadMousePos "cmgame-toolbox_quad-mouse-pos"
#Const C_Id_QuadMouseRuler "cmgame-toolbox_quad-mouse-ruler"
#Const C_Id_QuadSafeArea "cmgame-toolbox_quad-safe-area"
#Const C_Id_TextfieldGuide "cmgame-toolbox_textfield-guide"
#Const C_Id_TextfieldOpacity "cmgame-toolbox_textfield-opacity"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Private functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**
 * Get the component manialink
 * @return The component manialink
 */
Text Private_GetManialink() {
	return """
<stylesheet>
	<style class="{{{C_Class_TextSemiBold}}}" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_SemiBold)}}}" textprefix="$t" textcolor="FFFFFF"/>
	<style class="{{{C_Class_TextExtraBold}}}" halign="center" valign="center2" textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}" textprefix="$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Guide -->
<quad id="{{{C_Id_QuadGuide}}}" size="320 180" pos="0 0" image="{{{C_Path_Guide}}}" halign="center" valign="center" z-index="{{{C_ZIndex_Guide}}}" opacity="{{{C_Opacity_Default}}}" hidden="1"/>

<!-- Mouse Pos & Ruler-->
<frame id="{{{C_Id_FrameMousePosDisplay}}}" z-index="{{{C_ZIndex_MousePos}}}" hidden="1">
	<quad id="{{{C_Id_QuadMousePos}}}" size="15 3" bgcolor="000514" opacity="0.6" halign="left" valign="bottom"/>
	<label id="{{{C_Id_LabelMousePos}}}" size="15 3" class="{{{C_Class_TextSemiBold}}}" textsize="1" halign="left" valign="bottom"/>
</frame>
<frame id="{{{C_Id_FrameMouseRulerDisplay}}}" z-index="{{{C_ZIndex_MousePos}}}" hidden="1">
	<quad id="{{{C_Id_QuadMouseRuler}}}" size="0 0.5" halign="left" valign="bottom" bgcolor="FF0000"/>
	<frame id="{{{C_Id_FrameMouseRulerHint}}}">
		<quad id="{{{C_Id_QuadHintBg}}}" size="15 3" bgcolor="000514" opacity="0.6" halign="center" valign="bottom"/>
		<label id="{{{C_Id_LabelMouseRuler}}}" size="15 3" class="{{{C_Class_TextSemiBold}}}" textsize="1" halign="center" valign="bottom"/>
	</frame>
</frame>

<!-- Safe area -->
<quad id="{{{C_Id_QuadSafeArea}}}" size="288 162" halign="center" valign="center" opacity="0.3" bgcolor="FF0000" fullscreen="1" z-index="{{{C_ZIndex_SafeArea}}}" hidden="1"/>

<!-- Frame global  -->
<frame id="{{{C_Id_FrameGlobal}}}" z-index="{{{C_ZIndex_PopUp}}}" hidden="1">
	<quad id="{{{C_Id_QuadDimmer}}}" size="320 180" halign="center" valign="center" bgcolor="{{{Stylesheet::C_ColorHex6_RichBlack}}}" opacity="0.9" fullscreen="1" scriptevents="1" z-index="0"/>
	<label id="{{{C_Id_LabelTitle}}}" pos="0 80." size="150 10" text="Super Secret ToolBox" class="{{{C_Class_TextExtraBold}}}" textsize="10"/>

	<!-- Close button -->
	<frameinstance
		id="{{{C_Id_ButtonClose}}}" pos="150 80."
		modelid="{{{Button::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-size="8 8"
		data-opacityunfocus="0.6"
		data-image="{{{Icons::C_Icon_256x256_Cross}}}"
		data-imagefocus="{{{Icons::C_Icon_256x256_Cross}}}"
		data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
		data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
		data-halign="center" data-valign="center"
		data-nav-inputs="select"
		data-nav-targets="_"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
	/>

	<!-- Moveable -->
	<frame id="{{{C_Id_FrameMoveable}}}" pos="0 60">
		<label id="{{{C_Id_LabelMoveableInfo}}}" size="120 10" class="{{{C_Class_TextSemiBold}}}" text="{{{C_Text_DescriptionMoveable}}}" textsize="1" halign="left" opacity="0.6" autonewline="1" maxline="2"/>
		<frameinstance
			id="{{{C_Id_CheckboxMoveable}}}" pos="-65 0"
			modelid="{{{Checkbox::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-labelsize="40 10"
			data-text="Moveable"
			data-iconsize="6 6"
			data-iconxpos="0."
			data-textxpos="0.2"
			data-texthalign="left"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-opacityunfocus="0.5"
			data-iconchecked="{{{Icons::C_Icon_128x128_Radio_Button_On}}}"
			data-iconunchecked="{{{Icons::C_Icon_128x128_Radio_Button_Off}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Checkbox::C_NavZone}}}"
		/>
	</frame>

	<!-- Mouse Pos -->
	<frame id="{{{C_Id_FrameMousePos}}}" pos="0 50">
		<label id="{{{C_Id_LabelMousePosInfo}}}" size="120 10" class="{{{C_Class_TextSemiBold}}}" text="{{{C_Text_DescriptionMousePos}}}" textsize="1" halign="left" opacity="0.6" autonewline="1" maxline="2"/>
		<frameinstance
			id="{{{C_Id_CheckboxMousePos}}}" pos="-65 0"
			modelid="{{{Checkbox::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-labelsize="40 10"
			data-text="Mouse pos"
			data-iconsize="6 6"
			data-iconxpos="0."
			data-textxpos="0.2"
			data-texthalign="left"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-opacityunfocus="0.5"
			data-iconchecked="{{{Icons::C_Icon_128x128_Radio_Button_On}}}"
			data-iconunchecked="{{{Icons::C_Icon_128x128_Radio_Button_Off}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Checkbox::C_NavZone}}}"
		/>
	</frame>

	<!-- Hitboxes visibility -->
	<frame id="{{{C_Id_FrameHitboxesVisibility}}}" pos="0 40">
		<label id="{{{C_Id_LabelHitboxesVisibilityInfo}}}" size="120 10" class="{{{C_Class_TextSemiBold}}}" text="{{{C_Text_DescriptionHitboxesVisibility}}}" textsize="1" halign="left" opacity="0.6" autonewline="1" maxline="2"/>
		<frameinstance
			id="{{{C_Id_CheckboxHitboxesVisibility}}}" pos="-65 0"
			modelid="{{{Checkbox::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-labelsize="40 10"
			data-text="Show hitboxes"
			data-iconsize="6 6"
			data-iconxpos="0."
			data-textxpos="0.2"
			data-texthalign="left"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-opacityunfocus="0.5"
			data-iconchecked="{{{Icons::C_Icon_128x128_Radio_Button_On}}}"
			data-iconunchecked="{{{Icons::C_Icon_128x128_Radio_Button_Off}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Checkbox::C_NavZone}}}"
		/>
	</frame>

	<!-- Safe area guide -->
	<frame id="{{{C_Id_FrameSafeArea}}}" pos="0 30.">
		<label id="{{{C_Id_LabelSafeAreaInfo}}}" size="120 10" class="{{{C_Class_TextSemiBold}}}" text="{{{C_Text_DescriptionSafeArea}}}" textsize="1" halign="left" opacity="0.6" autonewline="1" maxline="2"/>
		<frameinstance
			id="{{{C_Id_CheckboxSafeArea}}}" pos="-65 0"
			modelid="{{{Checkbox::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-labelsize="40 10"
			data-text="Show safe area"
			data-iconsize="6 6"
			data-iconxpos="0."
			data-textxpos="0.2"
			data-texthalign="left"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-opacityunfocus="0.5"
			data-iconchecked="{{{Icons::C_Icon_128x128_Radio_Button_On}}}"
			data-iconunchecked="{{{Icons::C_Icon_128x128_Radio_Button_Off}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Checkbox::C_NavZone}}}"
		/>
	</frame>

	<!-- Fast load -->
	<frame id="{{{C_Id_FrameFastLoad}}}" pos="0 20">
		<label id="{{{C_Id_LabelFastLoadInfo}}}" size="120 10" class="{{{C_Class_TextSemiBold}}}" text="{{{C_Text_DescriptionFastBoot}}}" textsize="1" halign="left" opacity="0.6" autonewline="1" maxline="2"/>
		<frameinstance
			id="{{{C_Id_CheckboxFastLoad}}}" pos="-65 0"
			modelid="{{{Checkbox::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-labelsize="40 10"
			data-text="Fast load"
			data-iconsize="6 6"
			data-iconxpos="0."
			data-textxpos="0.2"
			data-texthalign="left"
			data-textfont="{{{Stylesheet::GetFont(Stylesheet::C_Font_Weight_ExtraBold)}}}"
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-opacityunfocus="0.5"
			data-iconchecked="{{{Icons::C_Icon_128x128_Radio_Button_On}}}"
			data-iconunchecked="{{{Icons::C_Icon_128x128_Radio_Button_Off}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Checkbox::C_NavZone}}}"
		/>
	</frame>

	<!-- Guide  -->
	<frame id="{{{C_Id_FrameGuide}}}" pos="0 10">
		<frameinstance
			id="{{{C_Id_CheckboxGuide}}}" pos="-65 0"
			modelid="{{{Checkbox::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-iconsize="6 6"
			data-iconxpos="0."
			data-iconcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-opacityunfocus="0.5"
			data-iconchecked="{{{Icons::C_Icon_128x128_Radio_Button_On}}}"
			data-iconunchecked="{{{Icons::C_Icon_128x128_Radio_Button_Off}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Checkbox::C_NavZone}}}"
		/>
		<frameinstance
			id="{{{C_Id_TextfieldGuide}}}" pos="-25 0"
			modelid="{{{TextField::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="60 6.5"
			data-skew="0"
			data-textsize="1."
			data-textvalue="{{{C_Path_Guide}}}"
			data-textcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-bgcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-bgcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-bgopacityunfocus="0.4"
			data-contouropacityfocus="0."
			data-contouropacityedit="0."
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{TextField::C_NavZone}}}"
		/>
		<frameinstance
			id="{{{C_Id_ButtonResetGuide}}}" pos="9 0"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="8 8"
			data-opacityunfocus="0.6"
			data-image="{{{Icons::C_Icon_128x128_Refresh}}}"
			data-imagefocus="{{{Icons::C_Icon_128x128_Refresh}}}"
			data-focuscolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-bgcolor="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-halign="center" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			id="{{{C_Id_TextfieldOpacity}}}" pos="30 0"
			modelid="{{{TextField::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="14 6.5"
			data-skew="0"
			data-textsize="1.5"
			data-textvalue="{{{C_Opacity_Default}}}"
			data-textcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentOne)}}}"
			data-bgcolorfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-bgcolorunfocus="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_AccentFour)}}}"
			data-bgopacityunfocus="0.4"
			data-contouropacityfocus="0."
			data-contouropacityedit="0."
			data-halign="right" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{TextField::C_NavZone}}}"
		/>
	</frame>

	<!-- Push parent -->
	<frame id="{{{C_Id_FramePushParent}}}" pos="0 -20">
		<frameinstance
			id="{{{C_Id_ButtonReturn}}}" pos="-65 0"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-styles="{{{ExpendableButton::C_Style_NoBackground}}}"
			data-text="Push parent"
			data-text-offset="4 0"
			data-text-opacity-unfocused="0.6"
			data-text-textsize="3" data-text-textprefix="$t"
			data-text-textcolor-unfocused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}"
			data-text-textcolor-focused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_TextLight)}}}"
			data-icon-opacity-unfocused="0.6"
			data-icon-size="6 6"
			data-icon-image="{{{Icons::C_Icon_128x128_Arrow_Left_Encircled}}}"
			data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
			data-icon-color-unfocused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-icon-color-focused="{{{Stylesheet::GetColorHex6(Stylesheet::C_Color_IconLight)}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>
</frame>
	""";
}

/// Open or close the component depending on its current visible state
Void Private_OpenClose(CMlScript _This) {
	declare K_State CMGame_ToolBox_State for _This.Page = C_State_Null;
	CMGame_ToolBox_State.Controls.Frame_Global.Visible = !CMGame_ToolBox_State.Controls.Frame_Global.Visible;
	Navigation::EnableGroup(_This, C_NavGroup_Default, CMGame_ToolBox_State.Controls.Frame_Global.Visible);
}

/// Update the opacity and the color of the hitbox quad
Void Private_UpdateHitboxQuadStyle(CMlQuad _Quad_Hitbox, Boolean _IsVisible) {
	if (_IsVisible) {
		_Quad_Hitbox.Opacity = 0.4;
		_Quad_Hitbox.BgColor = <1., 0., 0.>;
	} else {
		_Quad_Hitbox.Opacity = 0.;
		_Quad_Hitbox.BgColor = <-1., -1., -1.>;
	}
}

/// Get Scroll and Navigation navigation zone and show or hide their hitboxes
Void Private_ShowHitboxes(CMlPage _Page, Boolean _IsVisible) {
	if (_Page == Null) return;

	// Get CMlQuad with an activation zone of the Navigation component
	_Page.GetClassChildren("component-navigation-item-zone", _Page.MainFrame, True);
	foreach (Control in _Page.GetClassChildren_Result) {
		if (Control is CMlQuad) Private_UpdateHitboxQuadStyle(Control as CMlQuad, _IsVisible);
	}

	// Get CMlQuad with an activation zone of the Scroll component
	_Page.GetClassChildren("menu-libs-scroll-activation-zone", _Page.MainFrame, True);
	foreach (Control in _Page.GetClassChildren_Result) {
		if (Control is CMlQuad) Private_UpdateHitboxQuadStyle(Control as CMlQuad, _IsVisible);
	}
}

/// Handle navigtion focus
Void Private_Focus(CMlScript _This, CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		Navigation::Unfocus(_This, _From);
		if (Button::IsButton(_From)) {
			Button::Unfocus(_This, _From as CMlFrame);
		} else if (ExpendableButton_Base::IsButton(_From)) {
			ExpendableButton_Base::Unfocus(_This, _From as CMlFrame);
		} else if (Checkbox::IsCheckbox(_From)) {
			Checkbox::Unfocus(_This, _From as CMlFrame);
		} else if (TextField::IsTextField(_From)) {
			TextField::Unfocus(_This, _From as CMlFrame);
		}
	}

	if (_To != Null) {
		Navigation::Focus(_This, _To);
		if (Button::IsButton(_To)) {
			Button::Focus(_This, _To as CMlFrame);
		} else if (ExpendableButton_Base::IsButton(_To)) {
			ExpendableButton_Base::Focus(_This, _To as CMlFrame);
		} else if (Checkbox::IsCheckbox(_To)) {
			Checkbox::Focus(_This, _To as CMlFrame);
		} else if (TextField::IsTextField(_To)) {
			TextField::Focus(_This, _To as CMlFrame);
		}
	}
}

/// Handle navigation selection
Void Private_Select(CMlScript _This, CMlControl _Control) {
	if (_Control == Null) return;
	declare K_State CMGame_ToolBox_State for _This.Page = C_State_Null;

	switch (_Control.ControlId) {
		case C_Id_ButtonClose: Private_OpenClose(_This);
		case C_Id_ButtonReturn: Router::PushParent(_This);
		case C_Id_CheckboxMoveable: Checkbox::Toggle(_This, _Control as CMlFrame);
		case C_Id_CheckboxMousePos: CMGame_ToolBox_State.Controls.Frame_MousePosDisplay.Visible = Checkbox::Toggle(_This, _Control as CMlFrame);
		case C_Id_CheckboxHitboxesVisibility: Private_ShowHitboxes(CMGame_ToolBox_State.Page_CurrentRoute, Checkbox::Toggle(_This, _Control as CMlFrame));
		case C_Id_CheckboxSafeArea: CMGame_ToolBox_State.Controls.Quad_SafeArea.Visible = Checkbox::Toggle(_This, _Control as CMlFrame);
		case C_Id_CheckboxGuide: {
			declare Text ImageUrl = TextField::GetValue(CMGame_ToolBox_State.Controls.TextField_Guide);
			CMGame_ToolBox_State.Controls.Quad_Guide.Visible = Checkbox::Toggle(_This, _Control as CMlFrame);
			if (Http.IsValidUrl(ImageUrl)) CMGame_ToolBox_State.Controls.Quad_Guide.ChangeImageUrl(ImageUrl);
		}
		case C_Id_CheckboxFastLoad: {
			declare Boolean Toolbox_FastLoad_IsEnabled for System = False;
			Toolbox_FastLoad_IsEnabled = Checkbox::Toggle(_This, _Control as CMlFrame);
		}
		case C_Id_ButtonResetGuide: {
			TextField::SetValue(_This, CMGame_ToolBox_State.Controls.TextField_Guide, C_Path_Guide, True);
			TextField::SetValue(_This, CMGame_ToolBox_State.Controls.TextField_Opacity, ""^C_Opacity_Default, True);
		}
	}

	// Save toolbox config
	if (Checkbox::IsCheckbox(_Control) && UserMgr != Null && UserMgr.MainUser != Null) {
		declare persistent Boolean[Text] Persistent_Toolbox_ActivationStateList for UserMgr.MainUser = [];
		Persistent_Toolbox_ActivationStateList[_Control.ControlId] = Checkbox::IsChecked(_Control);
		UserMgr.MainUser.PersistentSave();
	}
}

/// Refresh all checkboxes and their corresponding tool
Void Private_RefreshTools(CMlScript _This) {
	if (UserMgr == Null || UserMgr.MainUser == Null) return;
	declare K_State CMGame_ToolBox_State for _This.Page = C_State_Null;
	declare persistent Boolean[Text] Persistent_Toolbox_ActivationStateList for UserMgr.MainUser = [];
	declare persistent Real Persistent_Toolbox_GuideOpacity for UserMgr.MainUser = C_Opacity_Default;
	declare persistent Text Persistent_Toolbox_GuideUrl for UserMgr.MainUser = C_Path_Guide;

	TextField::SetValue(_This, CMGame_ToolBox_State.Controls.TextField_Guide, Persistent_Toolbox_GuideUrl, True);
	TextField::SetValue(_This, CMGame_ToolBox_State.Controls.TextField_Opacity, TL::FormatReal(Persistent_Toolbox_GuideOpacity, 2, False, False), True);
	foreach (ControlId => IsActivated in Persistent_Toolbox_ActivationStateList) {
		declare CMlFrame Checkbox = (CMGame_ToolBox_State.Controls.Frame_Global.GetFirstChild(ControlId) as CMlFrame);
		if (Checkbox::IsCheckbox(Checkbox) && IsActivated != Checkbox::IsChecked(Checkbox)) {
			Private_Select(_This, Checkbox);
		} else if (Checkbox == Null) {
			Persistent_Toolbox_ActivationStateList.removekey(ControlId);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Initialize the component script
Void Private_MainInit(CMlScript _This) {
	declare K_State CMGame_ToolBox_State for _This.Page = C_State_Null;

	CMGame_ToolBox_State = K_State {
		Controls = K_Controls {
			Frame_Global = (_This.Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame),
			Frame_MousePosDisplay = (_This.Page.GetFirstChild(C_Id_FrameMousePosDisplay) as CMlFrame),
			Frame_MouseRulerDisplay = (_This.Page.GetFirstChild(C_Id_FrameMouseRulerDisplay) as CMlFrame),
			Checkbox_MousePos = (_This.Page.GetFirstChild(C_Id_CheckboxMousePos) as CMlFrame),
			Checkbox_HitboxesVisibility = (_This.Page.GetFirstChild(C_Id_CheckboxHitboxesVisibility) as CMlFrame),
			Checkbox_Moveable = (_This.Page.GetFirstChild(C_Id_CheckboxMoveable) as CMlFrame),
			TextField_Guide = (_This.Page.GetFirstChild(C_Id_TextfieldGuide) as CMlFrame),
			TextField_Opacity = (_This.Page.GetFirstChild(C_Id_TextfieldOpacity) as CMlFrame),
			Label_MousePos = (_This.Page.GetFirstChild(C_Id_LabelMousePos) as CMlLabel),
			Label_MouseRuler = (_This.Page.GetFirstChild(C_Id_LabelMouseRuler) as CMlLabel),
			Quad_Guide = (_This.Page.GetFirstChild(C_Id_QuadGuide) as CMlQuad),
			Quad_MouseRuler = (_This.Page.GetFirstChild(C_Id_QuadMouseRuler) as CMlQuad),
			Quad_SafeArea = (_This.Page.GetFirstChild(C_Id_QuadSafeArea) as CMlQuad)
		}
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Start the component script
Void Private_MainStart(CMlScript _This) {
	while (UserMgr == Null || UserMgr.MainUser == Null) yield;
	Private_RefreshTools(_This);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Loop of the component
Void Private_MainLoop(CMlScript _This) {
	declare K_State CMGame_ToolBox_State for _This.Page = C_State_Null;

	/* Refresh tools when returning to menus */
	switchtype (This as Context) {
		case CManiaAppTitleLayer: {
			if (CMGame_ToolBox_State.IsTitleControlReady != Context.TitleControl.IsReady) {
				CMGame_ToolBox_State.IsTitleControlReady = Context.TitleControl.IsReady;
				if (CMGame_ToolBox_State.IsTitleControlReady) {
					Private_RefreshTools(_This);
				}
			}
		}
	}

	/* Navigation events */
	foreach (Event in Navigation::GetPendingEvents(_This)) {
		switch (Event.Type) {
			case Navigation::C_EventType_NavigateMouse: {
				if (Navigation::IsEventFromGroup(_This, Event, C_NavGroup_Default)) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseOver: Private_Focus(_This, Event.From, Event.To);
						case CMlScriptEvent::Type::MouseClick: Private_Select(_This, Event.To);
					}
				}
			}
		}
	}

	/* Update the local page */
	if (Router::GetCurrentRoutePath(_This) != CMGame_ToolBox_State.CurrentRoutePath) {
		CMGame_ToolBox_State.CurrentRoutePath = Router::GetCurrentRoutePath(_This);
		CMGame_ToolBox_State.Page_CurrentRoute = Null;
		switchtype (This as Context) {
			case CManiaAppTitleLayer: { //< Only works in menus for now
				foreach (Layer in Context.ParentApp.UILayers) {
					if (Layer.IsVisible && Layer.Type == CUILayer::EUILayerType::Normal && Layer.IsLocalPageScriptRunning) {
						if (Router::GetCurrentRoute(_This).LayerId == Layer.Id) {
							CMGame_ToolBox_State.Page_CurrentRoute <=> Layer.LocalPage;
							if (CMGame_ToolBox_State.HaveHitboxesBeenDisplayedOnce) { //< Update hitboxes visibility if the tool has been manually activated once
								Private_ShowHitboxes(Layer.LocalPage, Checkbox::IsChecked(CMGame_ToolBox_State.Controls.Checkbox_HitboxesVisibility));
							}
							break;
						}
					}
				}
			}
		}
	}

	/* TextField events */
	foreach (Event in TextField::GetPendingEvents(_This)) {
		switch (Event.Type) {
			case TextField::C_EventType_Update: {
				if (Event.Control != Null) {
					switch (Event.Control.ControlId) {
						case CMGame_ToolBox_State.Controls.TextField_Guide.ControlId: {
							if (Http.IsValidUrl(Event.Value) && UserMgr != Null && UserMgr.MainUser != Null) {
								declare persistent Text Persistent_Toolbox_GuideUrl for UserMgr.MainUser = C_Path_Guide;
								CMGame_ToolBox_State.Controls.Quad_Guide.ChangeImageUrl(Event.Value);
								Persistent_Toolbox_GuideUrl = Event.Value;
								UserMgr.MainUser.PersistentSave();
							}
						}
						case CMGame_ToolBox_State.Controls.TextField_Opacity.ControlId: {
							if (UserMgr != Null && UserMgr.MainUser != Null) {
								declare persistent Real Persistent_Toolbox_GuideOpacity for UserMgr.MainUser = C_Opacity_Default;
								CMGame_ToolBox_State.Controls.Quad_Guide.Opacity = TL::ToReal(Event.Value);
								Persistent_Toolbox_GuideOpacity = TL::ToReal(Event.Value);
								UserMgr.MainUser.PersistentSave();
							}
						}
					}
				}
			}
		}
	}

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
	// [MOVEABLE] Move scriptevents controls with "component-navigation-item" or "moveable" class
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
	if (Checkbox::IsChecked(CMGame_ToolBox_State.Controls.Checkbox_Moveable)) {
		if (CMGame_ToolBox_State.Control_Moveable != Null && CMGame_ToolBox_State.Control_Moveable.Id != NullId) {
			if (Input.MouseRightButton && Input.IsKeyPressed(142)) { //< Y (keycode 142)
				CMGame_ToolBox_State.Control_Moveable.Parent.RelativePosition_V3 = <_This.MouseX, _This.MouseY> - CMGame_ToolBox_State.Pos_FrameCurrentRoute - CMGame_ToolBox_State.Control_Moveable.RelativePosition_V3;
			} else if (Input.MouseRightButton) {
				CMGame_ToolBox_State.Control_Moveable.RelativePosition_V3 = <_This.MouseX, _This.MouseY> - CMGame_ToolBox_State.Pos_FrameCurrentRoute;
			} else if (!CMGame_ToolBox_State.Control_Moveable.IsFocused) {
				System.ClipboardSet(""^CMGame_ToolBox_State.Control_Moveable.RelativePosition_V3);
				log("[TOOLBOX] "^Now^"> " ^ CMGame_ToolBox_State.Control_Moveable.ControlId ^" : "^ CMGame_ToolBox_State.Control_Moveable.RelativePosition_V3);
				CMGame_ToolBox_State.Control_Moveable = Null;
			}
		} else if (CMGame_ToolBox_State.Page_CurrentRoute != Null && CMGame_ToolBox_State.Page_CurrentRoute.FocusedControl != Null && CMGame_ToolBox_State.Page_CurrentRoute.FocusedControl.Id != NullId) {
			CMGame_ToolBox_State.Control_Moveable = CMGame_ToolBox_State.Page_CurrentRoute.FocusedControl;
			CMGame_ToolBox_State.Keeper = 0;

			while (CMGame_ToolBox_State.Control_Moveable.Parent != Null && CMGame_ToolBox_State.Keeper < 20) {
				if (CMGame_ToolBox_State.Control_Moveable.HasClass("component-navigation-item") || CMGame_ToolBox_State.Control_Moveable.HasClass("moveable")) break;
				CMGame_ToolBox_State.Control_Moveable = CMGame_ToolBox_State.Control_Moveable.Parent;
				CMGame_ToolBox_State.Keeper += 1;
			}

			if (CMGame_ToolBox_State.Control_Moveable.Parent != Null) {
				CMGame_ToolBox_State.Keeper = 0;
				CMGame_ToolBox_State.Control_Parent = CMGame_ToolBox_State.Control_Moveable.Parent;
				CMGame_ToolBox_State.Pos_FrameCurrentRoute = CMGame_ToolBox_State.Control_Moveable.Parent.RelativePosition_V3;
				while (CMGame_ToolBox_State.Control_Parent != Null && CMGame_ToolBox_State.Control_Parent.Parent != Null && CMGame_ToolBox_State.Keeper < 20) {
					if (CMGame_ToolBox_State.Control_Parent == CMGame_ToolBox_State.Page_CurrentRoute.MainFrame) break;
					CMGame_ToolBox_State.Pos_FrameCurrentRoute += CMGame_ToolBox_State.Control_Parent.Parent.RelativePosition_V3;
					CMGame_ToolBox_State.Control_Parent = CMGame_ToolBox_State.Control_Parent.Parent;
					CMGame_ToolBox_State.Keeper += 1;
				}
			}
		}
	}

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
	// [HITBOXES] Show Navigation class or Scroll class hitboxes
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
	if (!CMGame_ToolBox_State.HaveHitboxesBeenDisplayedOnce && Checkbox::IsChecked(CMGame_ToolBox_State.Controls.Checkbox_HitboxesVisibility)) {
		CMGame_ToolBox_State.HaveHitboxesBeenDisplayedOnce = True;
	}

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
	// [MOUSE POS] Display the mouse position nearby the mouse cursor
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
	if (CMGame_ToolBox_State.Controls.Frame_MousePosDisplay.Visible) {
		CMGame_ToolBox_State.Controls.Frame_MousePosDisplay.RelativePosition_V3 = <_This.MouseX, _This.MouseY> + <3., - 3.>;
		CMGame_ToolBox_State.Controls.Label_MousePos.SetText(""^TL::FormatReal(_This.MouseX, 2, False, False)^", "^TL::FormatReal(_This.MouseY, 2, False, False));
		CMGame_ToolBox_State.Controls.Frame_MouseRulerDisplay.Visible = Input.MouseRightButton;
		if (Input.MouseRightButton && CMGame_ToolBox_State.Pos_MouseRulerOrigin == <-1000., -1000.>) {
			CMGame_ToolBox_State.Pos_MouseRulerOrigin = <_This.MouseX, _This.MouseY>;
			CMGame_ToolBox_State.Controls.Quad_MouseRuler.RelativePosition_V3 = CMGame_ToolBox_State.Pos_MouseRulerOrigin;
		} else if (Input.MouseRightButton) {
			CMGame_ToolBox_State.Controls.Quad_MouseRuler.Size.X = ML::Distance(<_This.MouseX, _This.MouseY>, CMGame_ToolBox_State.Pos_MouseRulerOrigin);
			CMGame_ToolBox_State.Controls.Quad_MouseRuler.RelativeRotation = -ML::RadToDeg(ML::OrientedAngle(<1., 0.>, <_This.MouseX, _This.MouseY> - <CMGame_ToolBox_State.Controls.Quad_MouseRuler.RelativePosition_V3.X, CMGame_ToolBox_State.Controls.Quad_MouseRuler.RelativePosition_V3.Y>));
			CMGame_ToolBox_State.Controls.Label_MouseRuler.SetText(""^TL::FormatReal(CMGame_ToolBox_State.Controls.Quad_MouseRuler.Size.X, 2, False, False));
			CMGame_ToolBox_State.Controls.Label_MouseRuler.Parent.RelativePosition_V3 = CMGame_ToolBox_State.Pos_MouseRulerOrigin + 0.5 * (<_This.MouseX, _This.MouseY> - <CMGame_ToolBox_State.Controls.Quad_MouseRuler.RelativePosition_V3.X, CMGame_ToolBox_State.Controls.Quad_MouseRuler.RelativePosition_V3.Y>);
			if (Input.MouseRightButton && Input.IsKeyPressed(54)) { //< Â² (keycode 54)
				CMGame_ToolBox_State.Controls.Quad_MouseRuler.RelativeRotation = ML::NearestInteger(CMGame_ToolBox_State.Controls.Quad_MouseRuler.RelativeRotation / 10.) * 10.;
			}
		} else if (CMGame_ToolBox_State.Pos_MouseRulerOrigin != <-1000., -1000.>) {
			CMGame_ToolBox_State.Pos_MouseRulerOrigin = <-1000., -1000.>;
			CMGame_ToolBox_State.Controls.Quad_MouseRuler.Size.X = 0.;
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**
 * Get the code of the component
 * @return The code of the component
 */
Text ComponentV2() {
	return MV::ComponentV2(C_Name, Private_GetManialink(),
		"""
#Include "Libs/Nadeo/CMGame/Components/ToolBox.Script.txt" as {{{Q}}}
		""",
		"""
***MainInit***
***
{{{P}}}Private_MainInit(This);
***

***MainStart***
***
{{{P}}}Private_MainStart(This);
***

***MainLoop***
***
{{{P}}}Private_MainLoop(This);
***
		""",
		[
			Button::ComponentV2(),
			Checkbox::ComponentV2(),
			Navigation::ComponentV2(),
			Router::ComponentV2(),
			TextField::ComponentV2()
		],
		[]
	);
}

/// Open or close the component depending on its current visible state
Void OpenClose(CMlScript _This) {
	Private_OpenClose(_This);
}