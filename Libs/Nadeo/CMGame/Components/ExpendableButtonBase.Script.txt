/**
 *	Component: ExpendableButton
 *	===========================
 *
 *	Confluence : https://confluence.ubisoft.com/display/Nadeo/ExpendableButton
 *	GitLab : https://gitlab.nadeo.org/utils/script-documentation/-/wikis/ExpendableButton
 *
 *	Info
 *	----
 *
 *	You should not use this component directly in your manialink.
 *	Instead use it as a base to extends with the style and tone of your application.
 *	Use `SetButtonsDefaultProperties()` to define the base properties of all your buttons.
 *	Then you can create styles with `CreateStyle()` for more specific use cases.
 *	For example you can set a blue background for all your application buttons with `SetButtonsDefaultProperties()`
 *	and create a "warning" style that will apply a red background instead to the buttons that would trigger a sensitive
 *	operation.
 *
 *	The `SetButtonsDefaultProperties()` and `CreateStyle()` functions take a `K_Properties` structure as
 *	an argument. This structure contains an `Enabled` array in which you must add the id of all the properties
 *	customized by this structure. If you forget to add a property into this array, the corresponding value
 *	in the structure won't be applied to the button afterward.
 *
 *	```
 *	SetButtonsDefaultProperties(K_Properties {
 *		Enabled = [
 *			C_Property_Height,
 *			C_Property_TextFontSize
 *		],
 *		Height = 12.,
 *		TextFontSize = 4.,
 *		TextPrefix = "$t$i"
 *	});
 *	```
 *
 *	In this example we can see that `Enabled` contains the `Height` and `TextFontSize` properties,
 *	so they will be applied to the button. On the other hand, the `TextPrefix` property
 *	is not listed in the `Enabled` array and so won't be applied to the button.
 *
 *	Parameters
 *	----------
 *
 *	- `data-height` (`Real`): height of the button
 *	- `data-min-width` (`Real`): minimum width of the button
 *			Even if the button text is shorter, the button won't be narrower than this width.
 *	- `data-max-width` (`Real`): maximum width of the button
 *			Even if the button text is longer, it will be reduced or cut so the button does not exceed this width.
 *	- `data-width` (`Real`): forced width of the button
 *			This width will still be constrained by the minimum and maximum width.
 *			If the minimum width is 10, the maximum width 100, then if you set the width
 *			to 5 will be clamped to 10. Same thing if you set the width to 200, it will be
 *		clamped to 100.
 *	- `data-halign` (`Text`): horizontal alignment of the button
 *			Can be `left`, `center` or `right`.
 *	- `data-valign` (`Text`): vertical alignment of the button
 *			Can be `top`, `center` or `bottom`.
 *	- `data-text` (`Text`): text displayed in the button
 *			By default the button width will be adapted to the text length. To constrain the length
 *			of the button, you have to use the `data-width`, `data-min-width` and `data-max-width` attributes.
 *	- `data-text-offset` (`Vec2`): offset the text displayed in the button
 *	- `data-text-size` (`Real`): size of the label displaying the text in the button
 *			Override the size (width/height) of the label computed automatically by the button.
 *	- `data-text-fitlabel-enabled` (`Boolean`): fit the text in the button when it exceeds its width
 *	- `data-text-autonewline-enabled` (`Boolean`): enable text with multiple lines and better handle text containing '\n' characters
 *			Works best with a fixed height and width as this will center the text in the button
 *	- `data-text-maxlines` (`Integer`): sets the maximum line of text in the button
 *	- `data-text-textfont` (`Text`): font of the text displayed in the button
 *	- `data-text-textsize` (`Real`): size of the font of the text displayed in the button
 *	- `data-text-textprefix` (`Text`): prefix of the text displayed in the button
 *	- `data-text-halign` (`Text`): horizontal alignment of the text displayed in the button
 *			Can be `left`, `center` or `right`.
 *	- `data-text-valign` (`Text`): vertical alignment of the text displayed in the button
 *			Can be `top`, `center`, `center2` or `bottom`.
 *	- `data-text-textcolor-focused` (`Text`): color of the text when the button is focused
 *			Hexadecimal format, eg: `ff0000` for red.
 *	- `data-text-textcolor-unfocused` (`Text`): color of the text when the button is unfocused
 *			Hexadecimal format, eg: `ff0000` for red.
 *	- `data-text-opacity-focused` (`Real`): opacity of the text when the button is focused
 *	- `data-text-opacity-unfocused` (`Real`): opacity of the text when the button is unfocused
 *	- `data-background-image-left` (`Text`): url to the image used for the left part of the button background
 *	- `data-background-image-middle` (`Text`): url to the image used for the middle part of the button background
 *	- `data-background-image-right` (`Text`): url to the image used for the right part of the button background
 *	- `data-background-size-left` (`Vec2`): size of the image used for the left part of the button background
 *			This size is only used to know the ratio of the image. The real image size in the button will be computed
 *			from this ratio and the button height.
 *	- `data-background-size-middle` (`Vec2`): size of the image used for the middle part of the button background
 *			Not used. The middle image will be stretch horizontally to match the text size and
 *			its height will be the same as the button.
 *	- `data-background-size-right` (`Vec2`): size of the image used for the right part of the button background
 *			This size is only used to know the ratio of the image. The real image size in the button will be computed
 *			from this ratio and the button height.
 *	- `data-background-colormode-left` (`Integer`): color mode of the image used for the left part of the button background
 *			Can be `C_ColorMode_None` for no color,
 *			`C_ColorMode_Colorize` to use the `colorize` property of the quad,
 *			`C_ColorMode_Modulate` to use the `modulatecolor` property of the quad or
 *			`C_ColorMode_Background` to use the `bgcolor` property of the quad.
 *	- `data-background-colormode-middle` (`Integer`): color mode of the image used for the middle part of the button background
 *			Can be `C_ColorMode_None` for no color,
 *			`C_ColorMode_Colorize` to use the `colorize` property of the quad,
 *			`C_ColorMode_Modulate` to use the `modulatecolor` property of the quad or
 *			`C_ColorMode_Background` to use the `bgcolor` property of the quad.
 *	- `data-background-colormode-right` (`Integer`): color mode of the image used for the right part of the button background
 *			Can be `C_ColorMode_None` for no color,
 *			`C_ColorMode_Colorize` to use the `colorize` property of the quad,
 *			`C_ColorMode_Modulate` to use the `modulatecolor` property of the quad or
 *			`C_ColorMode_Background` to use the `bgcolor` property of the quad.
 *	- `data-background-color-focused` (`Text`): color of the background images when the button is focused
 *			Hexadecimal format, eg: `ff0000` for red.
 *	- `data-background-color-unfocused` (`Text`): color of the background images when the button is unfocused
 *			Hexadecimal format, eg: `ff0000` for red.
 *	- `data-background-opacity-focused` (`Real`): opacity of the background images when the button is focused
 *	- `data-background-opacity-unfocused` (`Real`): opacity of the background images when the button is unfocused
 *	- `data-focus-image-left` (`Text`): url to the image used for the left part of the button focus
 *	- `data-focus-image-middle` (`Text`): url to the image used for the middle part of the button focus
 *	- `data-focus-image-right` (`Text`): url to the image used for the right part of the button focus
 *	- `data-focus-size-left` (`Vec2`): size of the image used for the left part of the button focus
 *			This size is only used to know the ratio of the image. The real image size in the button will be computed
 *			from this ratio and the button height.
 *	- `data-focus-size-middle` (`Vec2`): size of the image used for the middle part of the button focus
 *			Not used. The middle image will be stretch horizontally to match the text size and
 *			its height will be the same as the button.
 *	- `data-focus-size-right` (`Vec2`): size of the image used for the right part of the button focus
 *			This size is only used to know the ratio of the image. The real image size in the button will be computed
 *			from this ratio and the button height.
 *	- `data-focus-colormode-left` (`Integer`): color mode of the image used for the left part of the button focus
 *			Can be `C_ColorMode_None` for no color,
 *			`C_ColorMode_Colorize` to use the `colorize` property of the quad,
 *			`C_ColorMode_Modulate` to use the `modulatecolor` property of the quad or
 *			`C_ColorMode_Background` to use the `bgcolor` property of the quad.
 *	- `data-focus-colormode-middle` (`Integer`): color mode of the image used for the middle part of the button focus
 *			Can be `C_ColorMode_None` for no color,
 *			`C_ColorMode_Colorize` to use the `colorize` property of the quad,
 *			`C_ColorMode_Modulate` to use the `modulatecolor` property of the quad or
 *			`C_ColorMode_Background` to use the `bgcolor` property of the quad.
 *	- `data-focus-colormode-right` (`Integer`): color mode of the image used for the right part of the button focus
 *			Can be `C_ColorMode_None` for no color,
 *			`C_ColorMode_Colorize` to use the `colorize` property of the quad,
 *			`C_ColorMode_Modulate` to use the `modulatecolor` property of the quad or
 *			`C_ColorMode_Background` to use the `bgcolor` property of the quad.
 *	- `data-focus-color-focused` (`Text`): color of the focus images when the button is focused
 *			Hexadecimal format, eg: `ff0000` for red.
 *	- `data-focus-color-unfocused` (`Text`): color of the focus images when the button is unfocused
 *			Hexadecimal format, eg: `ff0000` for red.
 *	- `data-focus-opacity-focused` (`Real`): opacity of the focus images when the button is focused
 *	- `data-focus-opacity-unfocused` (`Real`): opacity of the focus images when the button is unfocused
 *	- `data-icon-image` (`Text`): url to the image used for the button icon
 *	- `data-icon-size` (`Vec2`): size of the button icon
 *			If no size is given, the icon size will be computed from the button height.
 *	- `data-icon-colormode` (`Integer`): color mode used for the button icon
 *			Can be `C_ColorMode_None` for no color,
 *			`C_ColorMode_Colorize` to use the `colorize` property of the quad,
 *			`C_ColorMode_Modulate` to use the `modulatecolor` property of the quad or
 *			`C_ColorMode_Background` to use the `bgcolor` property of the quad.
 *	- `data-icon-color-focused` (`Text`): color of the button icon when the button is focused
 *			Hexadecimal format, eg: `ff0000` for red.
 *	- `data-icon-color-unfocused` (`Text`): color of the button icon when the button is unfocused
 *			Hexadecimal format, eg: `ff0000` for red.
 *	- `data-icon-opacity-focused` (`Real`): opacity of the button icon when the button is focused
 *	- `data-icon-opacity-unfocused` (`Real`): opacity of the button icon when the button is unfocused
 *	- `data-icon-align` (`Integer`): alignment of the icon in the button
 *			Use the `C_IconAlign_XXX` constants to set how the icon will be placed in the button
 *			`C_IconAlign_Left` display the icon on the left of the button
 *			`C_IconAlign_Right` display the icon on the right of the button
 *			`C_IconAlign_Center` display the icon in the middle of the button, it will overlap the button text if it has one
 *			`C_IconAlign_TextLeft` display the icon at the left of the button's text
 *			`C_IconAlign_TextRight` display the icon at the right of the button's text
 *	- `data-icon-offset` (`Vec2`): apply an offset to the aligned position of the icon
 *	- `data-hitbox-rot` (`Real`): rotation of the button hitbox
 *	- `data-hitbox-width-scale` (`Real`): scale the width of the button hitbox
 *	- `data-hitbox-height-scale` (`Real`): scale the height of the button hitbox
 *	- `data-hitbox-debug` (`Boolean`): display the button hitbox for debug purpose
 *	- `data-padding` (`Vec2`): padding of the button : space between the content and the border of the button.
 *				Example : `data-padding = <5., 1.>`
 *				Add 5 pixels space at the right AND left sides of the button and 1 pixel space at the top AND bottom sides
 *	- `data-supersample`: enable super sample on the images that use `colorized` to reduce aliasing
 *	- `data-tts-text`: a custom text for the text to speech accessibility feature. If empty, the text of the button is used for this feature.
 *	- `data-tts-translate`: define if the text must be translated to the game langage or not. If false, the text will be tranlated to english by default.
 *	- `data-styles` (`Text`): styles to apply to the button, new styles can be created with the `CreateStyle()` function
 *			When several styles are applied to a button, the styles are merged together with the properties
 *			of the latest style overriding the properties of the earlier ones.
 *			For example if "style-a" is `{ A = 1, B = 2, C = 3 }`, "style-b" is `{ A = 11 , C = 33}` and
 *			"style-c" is `{ A = 111 }` and we set the button style to `"style-a style-b style-c"`
 *			then the applied properties will be `{ A = 111, B = 2, C = 33 }`.
 *	- `data-filter-profanities` (`Text`): apply the filter for profanities to the text
 *			Use the `Tools::C_FilterProfanities__XXX` constants to set the filter for profanities
 *			`Tools::C_FilterProfanities_Never` the filter for profanities is never applied
 *			`Tools::C_FilterProfanities_OnlyIfNotTranslated` the filter for profanities is applied only for untranslated text
 *			`Tools::C_FilterProfanities_Always` the filter for profanities is always applied
 */
#Const Version		"1.1.1"
#Const ScriptName	"Libs/Nadeo/CMGame/Components/ExpendableButtonBase.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CMGame/Utils/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CMGame/Utils/RequestRedraw.Script.txt" as RequestRedraw

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_Image {
	Text Url;
	Vec2 Size;
	Integer ColorMode;
}
#Struct K_Controls {
	CMlFrame Frame_ButtonAlign;
	CMlFrame Frame_Background;
	CMlQuad[Integer] Quads_Background;
	CMlFrame Frame_Focus;
	CMlQuad[Integer] Quads_Focus;
	CMlFrame Frame_HitboxClip;
	CMlQuad Quad_NavZone;
	CMlQuad Quad_ButtonIcon;
	CMlFrame Frame_ButtonTextAlign;
	CMlLabel Label_ButtonText;
}
#Struct K_Properties {
	Integer[] Enabled;
	Text TextValue;
	Boolean TextFitLabelEnabled;
	Boolean TextAutoNewLineEnabled;
	Integer TextMaxLines;
	Text TextFont;
	Real TextFontSize;
	Text TextPrefix;
	CMlControl::AlignHorizontal TextHAlign;
	CMlControl::AlignVertical TextVAlign;
	Vec2 TextOffset;
	Vec2 TextSize;
	Vec3 TextColorFocused;
	Vec3 TextColorUnfocused;
	Real TextOpacityFocused;
	Real TextOpacityUnfocused;
	Real Height;
	Real MinWidth;
	Real MaxWidth;
	Real Width;
	CMlControl::AlignHorizontal HAlign;
	CMlControl::AlignVertical VAlign;
	K_Image[Integer] BackgroundImages; //< Three images for the left, middle and right part of the button background
	K_Image[Integer] FocusImages; //< Three images for the left, middle and right part of the button focus
	Vec3 BackgroundColorFocused;
	Vec3 BackgroundColorUnfocused;
	Real BackgroundOpacityFocused;
	Real BackgroundOpacityUnfocused;
	Vec3 FocusColorFocused;
	Vec3 FocusColorUnfocused;
	Real FocusOpacityFocused;
	Real FocusOpacityUnfocused;
	K_Image IconImage;
	Vec3 IconColorFocused;
	Vec3 IconColorUnfocused;
	Real IconOpacityFocused;
	Real IconOpacityUnfocused;
	Integer IconAlign;
	Vec2 IconOffset;
	Real HitboxRot;
	Real HitboxWidthScale;
	Real HitboxHeightScale;
	Boolean HitboxDebug;
	Vec2 Padding;
	Boolean SuperSample;
}
#Struct K_ExpendableButton {
	K_Controls Controls;
	K_Properties CustomizedProperties;
	K_Properties MergedProperties;
	Text[] Styles;
	Boolean IsButton;
	Boolean IsFocused;
}
#Struct K_State {
	Integer RedrawRequested;
	K_Properties[Text] Styles;
	K_Properties DefaultProperties;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ExpendableButton_Null K_ExpendableButton {
	Controls = K_Controls {},
	CustomizedProperties = K_Properties {
		Enabled = []
	},
	MergedProperties = K_Properties {
		Enabled = []
	},
	Styles = [],
	IsButton = False,
	IsFocused = False
}
#Const C_State_Null K_State {
	RedrawRequested = 0,
	Styles = [],
	DefaultProperties = K_Properties {
		Enabled = []
	}
}

#Const C_Name "component-cmgame-expendable-button" // Component name
#Const P "CMGame_ExpendableButton::" // Prefix use to differentiate functions/variables in the script
#Const Q "CMGame_ExpendableButton"
#Const C_NavZone "CMGame_ExpendableButton_quad-nav-zone" // Id of the quad used to trigger mouse event for the navigation

#Const C_ColorMode_None 0
#Const C_ColorMode_Colorize 1
#Const C_ColorMode_Modulate 2
#Const C_ColorMode_Background 3

#Const C_IconAlign_Left 0 // Display the icon on the left of the button
#Const C_IconAlign_Right 1 // Display the icon on the right of the button
#Const C_IconAlign_Center 2 // Display the icon in the middle of the button
#Const C_IconAlign_TextLeft 3 // Display the icon at the left of the button's text
#Const C_IconAlign_TextRight 4 // Display the icon at the right of the button's text

// The properties indexing must be a continuous sequence starting from 0
// 0,1,2,3,... not 0,1,3,... for example
#Const C_Property_TextValue 0
#Const C_Property_TextFitLabelEnabled 1
#Const C_Property_TextAutoNewLineEnabled 2
#Const C_Property_TextMaxLines 3
#Const C_Property_TextFont 4
#Const C_Property_TextFontSize 5
#Const C_Property_TextPrefix 6
#Const C_Property_TextHAlign 7
#Const C_Property_TextVAlign 8
#Const C_Property_TextOffset 9
#Const C_Property_TextSize 10
#Const C_Property_TextColorFocused 11
#Const C_Property_TextColorUnfocused 12
#Const C_Property_TextOpacityFocused 13
#Const C_Property_TextOpacityUnfocused 14
#Const C_Property_Height 15
#Const C_Property_MinWidth 16
#Const C_Property_MaxWidth 17
#Const C_Property_Width 18
#Const C_Property_HAlign 19
#Const C_Property_VAlign 20
#Const C_Property_BackgroundImages 21
#Const C_Property_FocusImages 22
#Const C_Property_BackgroundColorFocused 23
#Const C_Property_BackgroundColorUnfocused 24
#Const C_Property_BackgroundOpacityFocused 25
#Const C_Property_BackgroundOpacityUnfocused 26
#Const C_Property_FocusColorFocused 27
#Const C_Property_FocusColorUnfocused 28
#Const C_Property_FocusOpacityFocused 29
#Const C_Property_FocusOpacityUnfocused 30
#Const C_Property_IconImageUrl 31
#Const C_Property_IconSize 32
#Const C_Property_IconColorMode 33
#Const C_Property_IconColorFocused 34
#Const C_Property_IconColorUnfocused 35
#Const C_Property_IconOpacityFocused 36
#Const C_Property_IconOpacityUnfocused 37
#Const C_Property_IconAlign 38
#Const C_Property_IconOffset 39
#Const C_Property_HitboxRot 40
#Const C_Property_HitboxWidthScale 41
#Const C_Property_HitboxHeightScale 42
#Const C_Property_HitboxDebug 43
#Const C_Property_Padding 44
#Const C_Property_SuperSample 45

#Const C_Position_Left 0
#Const C_Position_Middle 1
#Const C_Position_Right 2
#Const C_Positions [0, 1, 2]

#Const C_Default_Colorize <-1., -1., -1.>
#Const C_Default_ModulateColor <1., 1., 1.>
#Const C_Default_BgColor <0., 0., 0.>

#Const C_FocusFadeInDuration 200
#Const C_FocusFadeOutDuration 200

#Const C_IconTextMargin 1.

#Const C_Class_ExpendableButton "menu-libs-expendable-button_expendable-button"
#Const C_Id_FrameButtonAlign "menu-libs-expendable-button_frame-button-align"
#Const C_Id_FrameBackground "menu-libs-expendable-button_frame-button-align"
#Const C_Id_QuadBgLeft "menu-libs-expendable-button_quad-bg-left"
#Const C_Id_QuadBgCenter "menu-libs-expendable-button_quad-bg-center"
#Const C_Id_QuadBgRight "menu-libs-expendable-button_quad-bg-right"
#Const C_Id_FrameFocus "menu-libs-expendable-button_frame-focus"
#Const C_Id_QuadFocusLeft "menu-libs-expendable-button_quad-focus-left"
#Const C_Id_QuadFocusCenter "menu-libs-expendable-button_quad-focus-center"
#Const C_Id_QuadFocusRight "menu-libs-expendable-button_quad-focus-right"
#Const C_Id_QuadButtonIcon "menu-libs-expendable-button_quad-button-icon"
#Const C_Id_FrameButtonTextAlign "menu-libs-expendable-button_frame-button-text-align"
#Const C_Id_LabelButtonText "menu-libs-expendable-button_label-button-text"
#Const C_Id_FrameHitboxCLip "menu-libs-expendable-button_frame-hitbox-clip"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text GetManialink() {
	return """
<frame id="{{{C_Id_FrameButtonAlign}}}" class="{{{C_Class_ExpendableButton}}}">
	<frame id="{{{C_Id_FrameBackground}}}" z-index="0">
		<quad id="{{{C_Id_QuadBgLeft}}}" />
		<quad id="{{{C_Id_QuadBgCenter}}}" />
		<quad id="{{{C_Id_QuadBgRight}}}" />
	</frame>
	<frame id="{{{C_Id_FrameFocus}}}" z-index="1">
		<quad id="{{{C_Id_QuadFocusLeft}}}" opacity="0" />
		<quad id="{{{C_Id_QuadFocusCenter}}}" opacity="0" />
		<quad id="{{{C_Id_QuadFocusRight}}}" opacity="0" />
	</frame>
	<quad id="{{{C_Id_QuadButtonIcon}}}" z-index="2" valign="center" />
	<frame id="{{{C_Id_FrameButtonTextAlign}}}" z-index="3">
		<!--
		We MUST initialize the label with a textprefix value.
		Otherwise the `TextPrefix` property initialization in the
		script will be bugged. The latest `TextPrefix` applied
		will also be applied to all other labels that had their
		`TextPrefix` updated.
		-->
		<label id="{{{C_Id_LabelButtonText}}}" valign="center2" textprefix="$z" />
	</frame>

	<frame id="{{{C_Id_FrameHitboxCLip}}}" z-index="4" >
		<quad id="{{{C_NavZone}}}" class="{{{Navigation::C_Class_ActivationZone}}}" z-index="4" halign="center" valign="center" bgcolor="ff0000" scriptevents="1" />
	</frame>
</frame>
	""";
}

// Check if the control is a button
Boolean IsButton(CMlControl _Control) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Control = C_ExpendableButton_Null;
	return CMGame_ExpendableButton_ExpendableButton.IsButton;
}

Text Private_GetColorAnim(K_Image _Image, Vec3 _Color) {
	declare Text ColorAnim = "";

	switch (_Image.ColorMode) {
		case C_ColorMode_Colorize: {
			ColorAnim = """colorize="{{{CL::RgbToHex6(_Color)}}}" """;
		}
		case C_ColorMode_Modulate: {
			ColorAnim = """modulatecolor="{{{CL::RgbToHex6(_Color)}}}" """;
		}
		case C_ColorMode_Background: {
			ColorAnim = """bgcolor="{{{CL::RgbToHex6(_Color)}}}" """;
		}
	}

	return ColorAnim;
}

Void Private_SetColor(CMlQuad _Quad, K_Image _Image, Vec3 _Color) {
	// Initialize all properties properly here first
	// Modifying one of them afterward can also have an effect on the others.
	// eg: modifying `ModulateColor` will also change the value of `Colorize`.
	_Quad.Colorize = C_Default_Colorize;
	_Quad.ModulateColor = C_Default_ModulateColor;
	_Quad.BgColor = C_Default_BgColor;

	switch (_Image.ColorMode) {
		case C_ColorMode_Colorize: {
			_Quad.Colorize = _Color;
		}
		case C_ColorMode_Modulate: {
			_Quad.ModulateColor = _Color;
		}
		case C_ColorMode_Background: {
			_Quad.BgColor = _Color;
		}
	}
}

// Read the text of the button if the TTS feature is enabled
Void TTS_Focus(CMlFrame _Frame_ExpendableButton, Boolean _IsFocused) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	if (_IsFocused) CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.TTS_Focus();
	else CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.TTS_Unfocus();
}
Void TTS_Focus(CMlFrame _Frame_ExpendableButton) {
	TTS_Focus(_Frame_ExpendableButton, True);
}
Void TTS_Unfocus(CMlFrame _Frame_ExpendableButton) {
	TTS_Focus(_Frame_ExpendableButton, False);
}

// Focus or unfocus the button
Void Private_Focus(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _IsFocused, Boolean _IsAnimated) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	CMGame_ExpendableButton_ExpendableButton.IsFocused = _IsFocused;

	if (CMGame_ExpendableButton_ExpendableButton.IsFocused) {
		// Background images animation
		foreach (Position => Quad_Background in CMGame_ExpendableButton_ExpendableButton.Controls.Quads_Background) {
			_This.AnimMgr.Flush(Quad_Background);
			if (_IsAnimated) {
				declare Text ColorAnim = "";
				if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundImages.existskey(Position)) {
					ColorAnim = Private_GetColorAnim(
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundImages[Position],
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundColorFocused
					);
				}
				_This.AnimMgr.Add(Quad_Background, """<anim {{{ColorAnim}}} opacity="{{{CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundOpacityFocused}}}"/>""", C_FocusFadeInDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundImages.existskey(Position)) {
					Private_SetColor(
						Quad_Background,
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundImages[Position],
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundColorFocused
					);
				}
				Quad_Background.Opacity = CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundOpacityFocused;
			}
		}

		// Focus images animation
		foreach (Position => Quad_Focus in CMGame_ExpendableButton_ExpendableButton.Controls.Quads_Focus) {
			_This.AnimMgr.Flush(Quad_Focus);
			if (_IsAnimated) {
				declare Text ColorAnim = "";
				if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusImages.existskey(Position)) {
					ColorAnim = Private_GetColorAnim(
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusImages[Position],
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusColorFocused
					);
				}
				_This.AnimMgr.Add(Quad_Focus, """<anim {{{ColorAnim}}} opacity="{{{CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusOpacityFocused}}}"/>""", C_FocusFadeInDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusImages.existskey(Position)) {
					Private_SetColor(
						Quad_Focus,
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusImages[Position],
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusColorFocused
					);
				}
				Quad_Focus.Opacity = CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusOpacityFocused;
			}
		}

		// Icon image animation
		{
			_This.AnimMgr.Flush(CMGame_ExpendableButton_ExpendableButton.Controls.Quad_ButtonIcon);
			if (_IsAnimated) {
				declare Text ColorAnim = "";
				if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.Enabled.exists(C_Property_IconColorMode)) {
					ColorAnim = Private_GetColorAnim(
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconImage,
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconColorFocused
					);
				}
				_This.AnimMgr.Add(CMGame_ExpendableButton_ExpendableButton.Controls.Quad_ButtonIcon, """<anim {{{ColorAnim}}} opacity="{{{CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconOpacityFocused}}}"/>""", C_FocusFadeInDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.Enabled.exists(C_Property_IconColorMode)) {
					Private_SetColor(
						CMGame_ExpendableButton_ExpendableButton.Controls.Quad_ButtonIcon,
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconImage,
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconColorFocused
					);
				}
				CMGame_ExpendableButton_ExpendableButton.Controls.Quad_ButtonIcon.Opacity = CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconOpacityFocused;
			}
		}

		// Text animation
		_This.AnimMgr.Flush(CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText);
		if (_IsAnimated) {
			_This.AnimMgr.Add(CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText, """<anim textcolor="{{{CL::RgbToHex6(CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextColorFocused)}}}" opacity="{{{CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextOpacityFocused}}}"/>""", C_FocusFadeInDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.TextColor = CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextColorFocused;
			CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.Opacity = CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextOpacityFocused;
		}
	} else {
		// Background images animation
		foreach (Position => Quad_Background in CMGame_ExpendableButton_ExpendableButton.Controls.Quads_Background) {
			_This.AnimMgr.Flush(Quad_Background);
			if (_IsAnimated) {
				declare Text ColorAnim = "";
				if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundImages.existskey(Position)) {
					ColorAnim = Private_GetColorAnim(
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundImages[Position],
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundColorUnfocused
					);
				}
				_This.AnimMgr.Add(Quad_Background, """<anim {{{ColorAnim}}} opacity="{{{CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundOpacityUnfocused}}}"/>""", C_FocusFadeOutDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundImages.existskey(Position)) {
					Private_SetColor(
						Quad_Background,
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundImages[Position],
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundColorUnfocused
					);
				}
				Quad_Background.Opacity = CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundOpacityUnfocused;
			}
		}

		// Focus images animation
		foreach (Position => Quad_Focus in CMGame_ExpendableButton_ExpendableButton.Controls.Quads_Focus) {
			_This.AnimMgr.Flush(Quad_Focus);
			if (_IsAnimated) {
				declare Text ColorAnim = "";
				if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusImages.existskey(Position)) {
					ColorAnim = Private_GetColorAnim(
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusImages[Position],
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusColorUnfocused
					);
				}
				_This.AnimMgr.Add(Quad_Focus, """<anim {{{ColorAnim}}} opacity="{{{CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusOpacityUnfocused}}}"/>""", C_FocusFadeOutDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusImages.existskey(Position)) {
					Private_SetColor(
						Quad_Focus,
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusImages[Position],
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusColorUnfocused
					);
				}
				Quad_Focus.Opacity = CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusOpacityUnfocused;
			}
		}

		// Icon image animation
		{
			_This.AnimMgr.Flush(CMGame_ExpendableButton_ExpendableButton.Controls.Quad_ButtonIcon);
			if (_IsAnimated) {
				declare Text ColorAnim = "";
				if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.Enabled.exists(C_Property_IconColorMode)) {
					ColorAnim = Private_GetColorAnim(
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconImage,
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconColorUnfocused
					);
				}
				_This.AnimMgr.Add(CMGame_ExpendableButton_ExpendableButton.Controls.Quad_ButtonIcon, """<anim {{{ColorAnim}}} opacity="{{{CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconOpacityUnfocused}}}"/>""", C_FocusFadeOutDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.Enabled.exists(C_Property_IconColorMode)) {
					Private_SetColor(
						CMGame_ExpendableButton_ExpendableButton.Controls.Quad_ButtonIcon,
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconImage,
						CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconColorUnfocused
					);
				}
				CMGame_ExpendableButton_ExpendableButton.Controls.Quad_ButtonIcon.Opacity = CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconOpacityUnfocused;
			}
		}

		// Text animation
		_This.AnimMgr.Flush(CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText);
		if (_IsAnimated) {
			_This.AnimMgr.Add(CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText, """<anim textcolor="{{{CL::RgbToHex6(CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextColorUnfocused)}}}" opacity="{{{CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextOpacityUnfocused}}}"/>""", C_FocusFadeOutDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.TextColor = CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextColorUnfocused;
			CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.Opacity = CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextOpacityUnfocused;
		}
	}
}
Void Focus(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _IsFocused, Boolean _IsAnimated) {
	Private_Focus(_This, _Frame_ExpendableButton, _IsFocused, _IsAnimated);
	TTS_Focus(_Frame_ExpendableButton, _IsFocused);
}
Void Focus(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _IsFocused) {
	Focus(_This, _Frame_ExpendableButton, _IsFocused, True);
}
Void Focus(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	Focus(_This, _Frame_ExpendableButton, True);
}
Void Unfocus(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _IsAnimated) {
	Focus(_This, _Frame_ExpendableButton, False, _IsAnimated);
}
Void Unfocus(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	Focus(_This, _Frame_ExpendableButton, False);
}

Integer[] Private_EnableProperty(Integer[] _EnabledProperties, Integer _Property, Boolean _Enabled) {
	declare Integer[] EnabledProperties = _EnabledProperties;

	if (_Enabled) {
		if (!EnabledProperties.exists(_Property)) {
			EnabledProperties.add(_Property);
		}
	} else {
		EnabledProperties.remove(_Property);
	}

	return EnabledProperties;
}

Void Private_ApplyImage(CMlQuad _Quad, K_Image _Image, Real _Height, Boolean _SuperSample) {
	if (_Image.Url != "" || _Image.ColorMode == C_ColorMode_Background) {
		_Quad.ImageUrl = _Image.Url;
		if (_Image.Size.Y == 0.) {
			_Quad.Size = <_Height, _Height>;
		} else {
			_Quad.Size = <_Height * _Image.Size.X / _Image.Size.Y, _Height>;
		}
		_Quad.SuperSample = (_SuperSample && _Image.Url != "" && _Image.ColorMode == C_ColorMode_Colorize);
		_Quad.Visible = True;
	} else {
		_Quad.ImageUrl = "";
		_Quad.Size = <0., _Height>;
		_Quad.SuperSample = False;
		_Quad.Visible = False;
	}
}

Void Private_ApplyImages(CMlQuad[Integer] _Quads, K_Image[Integer] _Images, Real _Height, Boolean _SuperSample) {
	foreach (Position in C_Positions) {
		if (_Quads.existskey(Position))	{
			declare CMlQuad Quad = _Quads[Position];
			declare K_Image Image = _Images.get(Position, K_Image {});
			Private_ApplyImage(Quad, Image, _Height, _SuperSample);
		}
	}
}

// Set and enable a property
K_Properties Private_SetProperty(K_Properties _TargetProperties, Integer _PropertyId, K_Properties _SourceProperties) {
	declare K_Properties Properties = _TargetProperties;

	Properties.Enabled = Private_EnableProperty(Properties.Enabled, _PropertyId, True);

	switch (_PropertyId) {
		case C_Property_TextValue: Properties.TextValue = _SourceProperties.TextValue;
		case C_Property_TextFitLabelEnabled: Properties.TextFitLabelEnabled = _SourceProperties.TextFitLabelEnabled;
		case C_Property_TextAutoNewLineEnabled: Properties.TextAutoNewLineEnabled = _SourceProperties.TextAutoNewLineEnabled;
		case C_Property_TextMaxLines: Properties.TextMaxLines = _SourceProperties.TextMaxLines;
		case C_Property_TextFont: Properties.TextFont = _SourceProperties.TextFont;
		case C_Property_TextFontSize: Properties.TextFontSize = _SourceProperties.TextFontSize;
		case C_Property_TextPrefix: Properties.TextPrefix = _SourceProperties.TextPrefix;
		case C_Property_TextHAlign: Properties.TextHAlign = _SourceProperties.TextHAlign;
		case C_Property_TextVAlign: Properties.TextVAlign = _SourceProperties.TextVAlign;
		case C_Property_TextOffset: Properties.TextOffset = _SourceProperties.TextOffset;
		case C_Property_TextSize: Properties.TextSize = _SourceProperties.TextSize;
		case C_Property_TextColorFocused: Properties.TextColorFocused = _SourceProperties.TextColorFocused;
		case C_Property_TextColorUnfocused: Properties.TextColorUnfocused = _SourceProperties.TextColorUnfocused;
		case C_Property_TextOpacityFocused: Properties.TextOpacityFocused = _SourceProperties.TextOpacityFocused;
		case C_Property_TextOpacityUnfocused: Properties.TextOpacityUnfocused = _SourceProperties.TextOpacityUnfocused;
		case C_Property_Height: Properties.Height = _SourceProperties.Height;
		case C_Property_MinWidth: Properties.MinWidth = _SourceProperties.MinWidth;
		case C_Property_MaxWidth: Properties.MaxWidth = _SourceProperties.MaxWidth;
		case C_Property_Width: Properties.Width = _SourceProperties.Width;
		case C_Property_HAlign: Properties.HAlign = _SourceProperties.HAlign;
		case C_Property_VAlign: Properties.VAlign = _SourceProperties.VAlign;
		case C_Property_BackgroundImages: {
			foreach (Position => BackgroundImage in _SourceProperties.BackgroundImages) {
				Properties.BackgroundImages[Position] = BackgroundImage;
			}
		}
		case C_Property_FocusImages: {
			foreach (Position => FocusImage in _SourceProperties.FocusImages) {
				Properties.FocusImages[Position] = FocusImage;
			}
		}
		case C_Property_BackgroundColorFocused: Properties.BackgroundColorFocused = _SourceProperties.BackgroundColorFocused;
		case C_Property_BackgroundColorUnfocused: Properties.BackgroundColorUnfocused = _SourceProperties.BackgroundColorUnfocused;
		case C_Property_BackgroundOpacityFocused: Properties.BackgroundOpacityFocused = _SourceProperties.BackgroundOpacityFocused;
		case C_Property_BackgroundOpacityUnfocused: Properties.BackgroundOpacityUnfocused = _SourceProperties.BackgroundOpacityUnfocused;
		case C_Property_FocusColorFocused: Properties.FocusColorFocused = _SourceProperties.FocusColorFocused;
		case C_Property_FocusColorUnfocused: Properties.FocusColorUnfocused = _SourceProperties.FocusColorUnfocused;
		case C_Property_FocusOpacityFocused: Properties.FocusOpacityFocused = _SourceProperties.FocusOpacityFocused;
		case C_Property_FocusOpacityUnfocused: Properties.FocusOpacityUnfocused = _SourceProperties.FocusOpacityUnfocused;
		case C_Property_IconImageUrl: Properties.IconImage.Url = _SourceProperties.IconImage.Url;
		case C_Property_IconSize: Properties.IconImage.Size = _SourceProperties.IconImage.Size;
		case C_Property_IconColorMode: Properties.IconImage.ColorMode = _SourceProperties.IconImage.ColorMode;
		case C_Property_IconColorFocused: Properties.IconColorFocused = _SourceProperties.IconColorFocused;
		case C_Property_IconColorUnfocused: Properties.IconColorUnfocused = _SourceProperties.IconColorUnfocused;
		case C_Property_IconOpacityFocused: Properties.IconOpacityFocused = _SourceProperties.IconOpacityFocused;
		case C_Property_IconOpacityUnfocused: Properties.IconOpacityUnfocused = _SourceProperties.IconOpacityUnfocused;
		case C_Property_IconAlign: Properties.IconAlign = _SourceProperties.IconAlign;
		case C_Property_IconOffset: Properties.IconOffset = _SourceProperties.IconOffset;
		case C_Property_HitboxRot: Properties.HitboxRot = _SourceProperties.HitboxRot;
		case C_Property_HitboxWidthScale: Properties.HitboxWidthScale = _SourceProperties.HitboxWidthScale;
		case C_Property_HitboxHeightScale: Properties.HitboxHeightScale = _SourceProperties.HitboxHeightScale;
		case C_Property_HitboxDebug: Properties.HitboxDebug = _SourceProperties.HitboxDebug;
		case C_Property_Padding: Properties.Padding = _SourceProperties.Padding;
		case C_Property_SuperSample: Properties.SuperSample = _SourceProperties.SuperSample;
	}

	return Properties;
}

// Merge a base properties struct with other enabled properties
K_Properties Private_MergeProperties(K_Properties _Base, K_Properties[] _PropertiesToMerge) {
	declare K_Properties MergedProperties = _Base;

	foreach (Properties in _PropertiesToMerge) {
		foreach (PropertyId in Properties.Enabled) {
			MergedProperties = Private_SetProperty(MergedProperties, PropertyId, Properties);
		}
	}

	return MergedProperties;
}

K_ExpendableButton Private_RedrawButtonProperties(K_ExpendableButton _ExpendableButton) {
	declare K_ExpendableButton ExpendableButton = _ExpendableButton;

	// Compute width of the three button parts
	declare Real LeftWidth = 0.;
	if (
		ExpendableButton.Controls.Quads_Background[C_Position_Left].Visible ||
		ExpendableButton.Controls.Quads_Focus[C_Position_Left].Visible
	) {
		LeftWidth = ML::Max(
			ExpendableButton.Controls.Quads_Background[C_Position_Left].Size.X,
			ExpendableButton.Controls.Quads_Focus[C_Position_Left].Size.X
		);
	}
	declare Real RightWidth = 0.;
	if (
		ExpendableButton.Controls.Quads_Background[C_Position_Right].Visible ||
		ExpendableButton.Controls.Quads_Focus[C_Position_Right].Visible
	) {
		RightWidth = ML::Max(
			ExpendableButton.Controls.Quads_Background[C_Position_Right].Size.X,
			ExpendableButton.Controls.Quads_Focus[C_Position_Right].Size.X
		);
	}
	// Force the use of the translated text even if the value does not use `_()`, the label would translate it anyway
	declare Real LabelWidth = ExpendableButton.Controls.Label_ButtonText.ComputeWidth(TL::GetTranslatedText(ExpendableButton.Controls.Label_ButtonText.Value), False);
	declare Real MiddleWidth = LabelWidth;
	if (ExpendableButton.Controls.Quad_ButtonIcon.Visible) {
		MiddleWidth += ExpendableButton.Controls.Quad_ButtonIcon.Size.X;
		if (LabelWidth > 0.) {
			MiddleWidth += C_IconTextMargin;
		}
	}

	// Apply the minimum, maximum and forced width
	if (ExpendableButton.MergedProperties.Enabled.exists(C_Property_Width)) {
		MiddleWidth = ML::Max(0., ExpendableButton.MergedProperties.Width - LeftWidth - RightWidth);
	}
	if (
		ExpendableButton.MergedProperties.Enabled.exists(C_Property_MinWidth) &&
		LeftWidth + MiddleWidth + RightWidth < ExpendableButton.MergedProperties.MinWidth
	) {
		MiddleWidth = ExpendableButton.MergedProperties.MinWidth - LeftWidth - RightWidth;
	}
	if (
		ExpendableButton.MergedProperties.Enabled.exists(C_Property_MaxWidth) &&
		LeftWidth + MiddleWidth + RightWidth > ExpendableButton.MergedProperties.MaxWidth
	) {
		MiddleWidth = ML::Max(0., ExpendableButton.MergedProperties.MaxWidth - LeftWidth - RightWidth);
	}
	// Apply the padding in X
	declare Real MaxWidthExceed = 0.;
	if (ExpendableButton.MergedProperties.Enabled.exists(C_Property_Padding)) {
		if (ExpendableButton.MergedProperties.Enabled.exists(C_Property_MaxWidth)) {
			// If the (total width + padding) do not exceed the MaxWidth, apply the padding
			if (LeftWidth + MiddleWidth + (ExpendableButton.MergedProperties.Padding.X * 2) + RightWidth <= ExpendableButton.MergedProperties.MaxWidth) {
				MiddleWidth += (ExpendableButton.MergedProperties.Padding.X * 2);
			} else { // otherwise we will substract the exceed to the TextSize later
				MaxWidthExceed = (LeftWidth + MiddleWidth + (ExpendableButton.MergedProperties.Padding.X * 2) + RightWidth) - ExpendableButton.MergedProperties.MaxWidth;
			}
		} else {
			MiddleWidth += (ExpendableButton.MergedProperties.Padding.X * 2);
		}
	}

	// Update button's parts position
	ExpendableButton.Controls.Quads_Background[C_Position_Middle].RelativePosition_V3.X = LeftWidth;
	ExpendableButton.Controls.Quads_Focus[C_Position_Middle].RelativePosition_V3.X = LeftWidth;
	ExpendableButton.Controls.Quads_Background[C_Position_Right].RelativePosition_V3.X = LeftWidth + MiddleWidth;
	ExpendableButton.Controls.Quads_Focus[C_Position_Right].RelativePosition_V3.X = LeftWidth + MiddleWidth;
	ExpendableButton.Controls.Label_ButtonText.RelativePosition_V3 = ExpendableButton.MergedProperties.TextOffset;

	// Update button's parts size
	ExpendableButton.Controls.Quads_Background[C_Position_Middle].Size.X = MiddleWidth;
	ExpendableButton.Controls.Quads_Focus[C_Position_Middle].Size.X = MiddleWidth;

	// Update the hitbox
	ExpendableButton.Controls.Quad_NavZone.RelativePosition_V3 = <
		(LeftWidth + MiddleWidth + RightWidth) * 0.5,
		ExpendableButton.MergedProperties.Height * -0.5
	>;
	ExpendableButton.Controls.Quad_NavZone.RelativeRotation = ExpendableButton.MergedProperties.HitboxRot;
	if (ExpendableButton.Controls.Quad_NavZone.RelativeRotation == 0.) {
		ExpendableButton.Controls.Quad_NavZone.Size = <
			(LeftWidth + MiddleWidth + RightWidth) * ExpendableButton.MergedProperties.HitboxWidthScale,
			ExpendableButton.MergedProperties.Height * ExpendableButton.MergedProperties.HitboxHeightScale
		>;
		ExpendableButton.Controls.Frame_HitboxClip.Size = <0., 0.>; //< This default value disable the clipping
	} else {
		declare Real ButtonVisibleWidth = ((LeftWidth * ExpendableButton.MergedProperties.HitboxWidthScale) + MiddleWidth + (RightWidth * ExpendableButton.MergedProperties.HitboxWidthScale)); //< Hypothenuse
		declare Real ButtonSkewRad = ML::DegToRad(ExpendableButton.Controls.Quad_NavZone.RelativeRotation);
		ExpendableButton.Controls.Quad_NavZone.Size.X = ButtonVisibleWidth * ML::Cos(ButtonSkewRad);
		if (ML::Cos(ButtonSkewRad) == 0.) {
			ExpendableButton.Controls.Quad_NavZone.Size.Y = 0.;
		} else {
			ExpendableButton.Controls.Quad_NavZone.Size.Y = (ButtonVisibleWidth * ML::Sin(ButtonSkewRad)) + ((ExpendableButton.MergedProperties.Height * ExpendableButton.MergedProperties.HitboxHeightScale) / ML::Cos(ButtonSkewRad));
		}
		ExpendableButton.Controls.Frame_HitboxClip.Size = <(LeftWidth + MiddleWidth + RightWidth), ExpendableButton.MergedProperties.Height>;
	}
	if (ExpendableButton.MergedProperties.HitboxDebug) {
		ExpendableButton.Controls.Quad_NavZone.Opacity = 0.5;
	} else {
		ExpendableButton.Controls.Quad_NavZone.Opacity = 0.;
	}

	// Update the button text and icon position and size
	ExpendableButton.Controls.Quad_ButtonIcon.RelativePosition_V3 = <0., ExpendableButton.MergedProperties.Height * -0.5>;
	ExpendableButton.Controls.Frame_ButtonTextAlign.RelativePosition_V3 = <0., 0.>;

	declare Real IconWidth;
	declare Real TextWidth;
	declare Real MarginWidth;
	if (ExpendableButton.Controls.Quad_ButtonIcon.Visible) {
		IconWidth = ExpendableButton.Controls.Quad_ButtonIcon.Size.X;
		MarginWidth = C_IconTextMargin;
		TextWidth = ML::Max(0., MiddleWidth - IconWidth - MarginWidth - MaxWidthExceed);
	} else {
		TextWidth = ML::Max(0., MiddleWidth - MaxWidthExceed);
	}

	if (ExpendableButton.MergedProperties.Enabled.exists(C_Property_TextSize)) {
		TextWidth = ExpendableButton.MergedProperties.TextSize.X;
		ExpendableButton.Controls.Label_ButtonText.Size = ExpendableButton.MergedProperties.TextSize;
	} else {
		ExpendableButton.Controls.Label_ButtonText.Size = <TextWidth, ExpendableButton.MergedProperties.Height>;
	}

	if (ExpendableButton.MergedProperties.TextFitLabelEnabled && LabelWidth > ExpendableButton.Controls.Label_ButtonText.Size.X) {
		Tools::FitLabelValue(
			ExpendableButton.Controls.Label_ButtonText,
			ExpendableButton.Controls.Label_ButtonText.TextSizeReal,
			ExpendableButton.Controls.Label_ButtonText.TextSizeReal / 10.,
			ExpendableButton.Controls.Label_ButtonText.TextSizeReal / 10.
		);
		// Force the use of the translated text even if the value does not use `_()`, the label would translate it anyway
		LabelWidth = ExpendableButton.Controls.Label_ButtonText.ComputeWidth(TL::GetTranslatedText(ExpendableButton.Controls.Label_ButtonText.Value), False);
	}

	ExpendableButton.Controls.Label_ButtonText.Visible = ExpendableButton.Controls.Label_ButtonText.Size.X > 0.;
	Tools::AlignFrameContent(
		ExpendableButton.Controls.Frame_ButtonTextAlign,
		<TextWidth, ExpendableButton.MergedProperties.Height>,
		ExpendableButton.MergedProperties.TextHAlign,
		ExpendableButton.MergedProperties.TextVAlign
	);
	ExpendableButton.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X += LeftWidth;

	ExpendableButton.Controls.Quad_ButtonIcon.RelativePosition_V3.X += LeftWidth;
	declare Integer IconAlign = ExpendableButton.MergedProperties.IconAlign;
	if (
		IconAlign == C_IconAlign_TextLeft &&
		ExpendableButton.MergedProperties.TextHAlign == CMlControl::AlignHorizontal::Left
	) {
		IconAlign = C_IconAlign_Left;
	} else if (
		IconAlign == C_IconAlign_TextRight &&
		ExpendableButton.MergedProperties.TextHAlign == CMlControl::AlignHorizontal::Right
	) {
		IconAlign = C_IconAlign_Right;
	}
	switch (IconAlign) {
		case C_IconAlign_Left: {
			ExpendableButton.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X += IconWidth + MarginWidth;
			ExpendableButton.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::Left;
		}
		case C_IconAlign_Right: {
			ExpendableButton.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::Right;
			ExpendableButton.Controls.Quad_ButtonIcon.RelativePosition_V3.X += TextWidth + MarginWidth + IconWidth;
		}
		case C_IconAlign_Center: {
			ExpendableButton.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X += (IconWidth * 0.5) + (MarginWidth * 0.5);
			ExpendableButton.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::HCenter;
			ExpendableButton.Controls.Quad_ButtonIcon.RelativePosition_V3.X += (MiddleWidth * 0.5);
		}
		case C_IconAlign_TextLeft: {
			switch (ExpendableButton.MergedProperties.TextHAlign) {
				case CMlControl::AlignHorizontal::HCenter: {
					ExpendableButton.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X += IconWidth + MarginWidth;
					ExpendableButton.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::Right;
					ExpendableButton.Controls.Quad_ButtonIcon.RelativePosition_V3.X = ExpendableButton.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X - (ML::Min(TextWidth, LabelWidth) * 0.5) - MarginWidth;
				}
				case CMlControl::AlignHorizontal::Right: {
					ExpendableButton.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X += IconWidth + MarginWidth;
					ExpendableButton.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::Right;
					ExpendableButton.Controls.Quad_ButtonIcon.RelativePosition_V3.X = ExpendableButton.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X - ML::Min(TextWidth, LabelWidth) - MarginWidth;
				}
			}
		}
		case C_IconAlign_TextRight: {
			switch (ExpendableButton.MergedProperties.TextHAlign) {
				case CMlControl::AlignHorizontal::Left: {
					ExpendableButton.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::Left;
					ExpendableButton.Controls.Quad_ButtonIcon.RelativePosition_V3.X = ExpendableButton.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X + ML::Min(TextWidth, LabelWidth) + MarginWidth;
				}
				case CMlControl::AlignHorizontal::HCenter: {
					ExpendableButton.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::Left;
					ExpendableButton.Controls.Quad_ButtonIcon.RelativePosition_V3.X = ExpendableButton.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X + (ML::Min(TextWidth, LabelWidth) * 0.5) + MarginWidth;
				}
			}
		}
	}

	// Apply an offset to the aligned position of the icon
	ExpendableButton.Controls.Quad_ButtonIcon.RelativePosition_V3 += ExpendableButton.MergedProperties.IconOffset;

	// Align the button
	Tools::AlignFrame(
		ExpendableButton.Controls.Frame_ButtonAlign,
		<LeftWidth + MiddleWidth + RightWidth, ExpendableButton.MergedProperties.Height>,
		ExpendableButton.MergedProperties.HAlign,
		ExpendableButton.MergedProperties.VAlign
	);

	return ExpendableButton;
}

// Redraw the button (apply style, size, ...)
Void RedrawButton(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _IsAnimated) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;

	declare K_State CMGame_ExpendableButton_State for _This.Page = C_State_Null;
	declare K_Properties[] PropertiesToMerge = [CMGame_ExpendableButton_State.DefaultProperties];
	foreach (Style in CMGame_ExpendableButton_ExpendableButton.Styles) {
		PropertiesToMerge.add(CMGame_ExpendableButton_State.Styles.get(Style, K_Properties {}));
	}
	PropertiesToMerge.add(CMGame_ExpendableButton_ExpendableButton.CustomizedProperties);

	CMGame_ExpendableButton_ExpendableButton.MergedProperties = Private_MergeProperties(
		K_Properties {
			TextValue = "",
			TextFitLabelEnabled = True,
			TextAutoNewLineEnabled = False,
			TextMaxLines = -1,
			TextFont = "",
			TextFontSize = 3.,
			TextPrefix = "",
			TextHAlign = CMlControl::AlignHorizontal::HCenter,
			TextVAlign = CMlControl::AlignVertical::VCenter2,
			TextOffset = <0., 0.>,
			TextSize = <10., 10.>,
			TextColorFocused = <1., 1., 1.>,
			TextColorUnfocused = <1., 1., 1.>,
			TextOpacityFocused = 1.,
			TextOpacityUnfocused = 1.,
			Height = 10.,
			MinWidth = 0.,
			MaxWidth = 0.,
			Width = 0.,
			HAlign = CMlControl::AlignHorizontal::Left,
			VAlign = CMlControl::AlignVertical::Top,
			BackgroundImages = [
				C_Position_Middle => K_Image { ColorMode = C_ColorMode_Background }
			],
			FocusImages = [
				C_Position_Middle => K_Image { ColorMode = C_ColorMode_Background }
			],
			BackgroundColorFocused = <1., 0., 0.>,
			BackgroundColorUnfocused = <0., 0., 1.>,
			BackgroundOpacityFocused = 1.,
			BackgroundOpacityUnfocused = 1.,
			FocusColorFocused = <0., 0., 1.>,
			FocusColorUnfocused = <1., 0., 0.>,
			FocusOpacityFocused = 1.,
			FocusOpacityUnfocused = 0.,
			IconImage = K_Image {},
			IconColorFocused = <1., 1., 1.>,
			IconColorUnfocused = <1., 1., 1.>,
			IconOpacityFocused = 1.,
			IconOpacityUnfocused = 1.,
			IconAlign = C_IconAlign_Left,
			IconOffset = <0., 0.>,
			HitboxRot = 0.,
			HitboxWidthScale = 1.,
			HitboxHeightScale = 1.,
			HitboxDebug = False,
			Padding = <0., 0.>,
			SuperSample = False
		},
		PropertiesToMerge
	);

	// Apply the padding in Y
	if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.Enabled.exists(C_Property_Padding)) {
		CMGame_ExpendableButton_ExpendableButton.MergedProperties.Height += (CMGame_ExpendableButton_ExpendableButton.MergedProperties.Padding.Y * 2);
	}
	// Update the button background and focus images
	Private_ApplyImages(CMGame_ExpendableButton_ExpendableButton.Controls.Quads_Background, CMGame_ExpendableButton_ExpendableButton.MergedProperties.BackgroundImages, CMGame_ExpendableButton_ExpendableButton.MergedProperties.Height, CMGame_ExpendableButton_ExpendableButton.MergedProperties.SuperSample);
	Private_ApplyImages(CMGame_ExpendableButton_ExpendableButton.Controls.Quads_Focus, CMGame_ExpendableButton_ExpendableButton.MergedProperties.FocusImages, CMGame_ExpendableButton_ExpendableButton.MergedProperties.Height, CMGame_ExpendableButton_ExpendableButton.MergedProperties.SuperSample);

	// Update the button icon
	if (CMGame_ExpendableButton_ExpendableButton.MergedProperties.Enabled.exists(C_Property_IconSize)) {
		Private_ApplyImage(CMGame_ExpendableButton_ExpendableButton.Controls.Quad_ButtonIcon, CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconImage, CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconImage.Size.Y, False);
	} else {
		Private_ApplyImage(CMGame_ExpendableButton_ExpendableButton.Controls.Quad_ButtonIcon, CMGame_ExpendableButton_ExpendableButton.MergedProperties.IconImage, CMGame_ExpendableButton_ExpendableButton.MergedProperties.Height * 0.8, False);
	}

	// Update button text
	CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.Value = CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextValue;
	CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.TextFont = CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextFont;
	CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.TextSizeReal = CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextFontSize;
	CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.TextPrefix = CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextPrefix;
	CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.HorizontalAlign = CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextHAlign;
	CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.VerticalAlign = CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextVAlign;
	CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.AutoNewLine = CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextAutoNewLineEnabled;
	CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.MaxLine = CMGame_ExpendableButton_ExpendableButton.MergedProperties.TextMaxLines;

	// Update other button properties
	CMGame_ExpendableButton_ExpendableButton = Private_RedrawButtonProperties(CMGame_ExpendableButton_ExpendableButton);

	// Update focus
	Private_Focus(_This, _Frame_ExpendableButton, CMGame_ExpendableButton_ExpendableButton.IsFocused, _IsAnimated);
}
Void RedrawButton(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	RedrawButton(_This, _Frame_ExpendableButton, True);
}

// Redraw all buttons
Void RedrawButtons(CMlScript _This) {
	_This.Page.GetClassChildren(C_Class_ExpendableButton, _This.Page.MainFrame, True);
	foreach (Control in _This.Page.GetClassChildren_Result) {
		declare CMlFrame Frame_ExpendableButton = (Control as CMlFrame).Parent;
		if (IsButton(Frame_ExpendableButton)) {
			RedrawButton(_This, Frame_ExpendableButton, False);
		}
	}
}

// Customize a property
Void Private_SetCustomizedProperty(CMlScript _This, CMlFrame _Frame_ExpendableButton, Integer _PropertyId, K_Properties _Properties, Boolean _Redraw) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	CMGame_ExpendableButton_ExpendableButton.CustomizedProperties = Private_SetProperty(CMGame_ExpendableButton_ExpendableButton.CustomizedProperties, _PropertyId, _Properties);
	if (_Redraw) RedrawButton(_This, _Frame_ExpendableButton);
}

// Reset a customized property
Void Private_ResetCustomizedProperty(CMlScript _This, CMlFrame _Frame_ExpendableButton, Integer _PropertyId, Boolean _Redraw) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	CMGame_ExpendableButton_ExpendableButton.CustomizedProperties.Enabled = Private_EnableProperty(CMGame_ExpendableButton_ExpendableButton.CustomizedProperties.Enabled, _PropertyId, False);
	if (_Redraw) RedrawButton(_This, _Frame_ExpendableButton);
}

// Update button visibility
Void ShowAndUnlock(CMlFrame _Frame_ExpendableButton) {
	Navigation::Lock(_Frame_ExpendableButton, False);
	_Frame_ExpendableButton.Show();
}
Void HideAndLock(CMlFrame _Frame_ExpendableButton) {
	Navigation::Lock(_Frame_ExpendableButton, True);
	_Frame_ExpendableButton.Hide();
}
Void SetVisibilityAndNavigation(CMlFrame _Frame_ExpendableButton, Boolean _IsVisible) {
	Navigation::Lock(_Frame_ExpendableButton, !_IsVisible);
	_Frame_ExpendableButton.Visible = _IsVisible;
}

// Update the text displayed in the button
Void SetText(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Value, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextValue, K_Properties { TextValue = _Value }, _Redraw);
}
Void SetText(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Value) {
	SetText(_This, _Frame_ExpendableButton, _Value, True);
}
Void ResetText(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextValue, _Redraw);
}
Void ResetText(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetText(_This, _Frame_ExpendableButton, True);
}
// Enable or disable the fit label on the button text
Void SetTextFitLabelEnabled(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Enabled, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextFitLabelEnabled, K_Properties { TextFitLabelEnabled = _Enabled }, _Redraw);
}
Void SetTextFitLabelEnabled(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Enabled) {
	SetTextFitLabelEnabled(_This, _Frame_ExpendableButton, _Enabled, True);
}
Void ResetTextFitLabelEnabled(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextFitLabelEnabled, _Redraw);
}
Void ResetTextFitLabelEnabled(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextFitLabelEnabled(_This, _Frame_ExpendableButton, True);
}

// Enable or disable the auto new line on the button text
Void SetTextAutoNewLineEnabled(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _AutoNewLine, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextAutoNewLineEnabled, K_Properties { TextAutoNewLineEnabled = _AutoNewLine }, _Redraw);
}
Void SetTextAutoNewLineEnabled(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _AutoNewLine) {
	SetTextAutoNewLineEnabled(_This, _Frame_ExpendableButton, _AutoNewLine, True);
}
Void ResetTextAutoNewLineEnabled(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextAutoNewLineEnabled, _Redraw);
}
Void ResetTextAutoNewLineEnabled(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextAutoNewLineEnabled(_This, _Frame_ExpendableButton, True);
}

// Update the maximum number of lines for the text in the button
Void SetTextMaxLines(CMlScript _This, CMlFrame _Frame_ExpendableButton, Integer _MaxLines, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextMaxLines, K_Properties { TextMaxLines = _MaxLines }, _Redraw);
}
Void SetTextMaxLines(CMlScript _This, CMlFrame _Frame_ExpendableButton, Integer _MaxLines) {
	SetTextMaxLines(_This, _Frame_ExpendableButton, _MaxLines, True);
}
Void ResetTextMaxLines(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextMaxLines, _Redraw);
}
Void ResetTextMaxLines(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextMaxLines(_This, _Frame_ExpendableButton, True);
}

// Update the font of the text displayed in the button
Void SetTextFont(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Font, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextFont, K_Properties { TextFont = _Font }, _Redraw);
}
Void SetTextFont(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Font) {
	SetTextFont(_This, _Frame_ExpendableButton, _Font, True);
}
Void ResetTextFont(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextFont, _Redraw);
}
Void ResetTextFont(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextFont(_This, _Frame_ExpendableButton, True);
}

// Update the size of the text displayed in the button
Void SetTextFontSize(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Size, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextFontSize, K_Properties { TextFontSize = _Size }, _Redraw);
}
Void SetTextFontSize(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Size) {
	SetTextFontSize(_This, _Frame_ExpendableButton, _Size, True);
}
Void ResetTextFontSize(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextFontSize, _Redraw);
}
Void ResetTextFontSize(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextFontSize(_This, _Frame_ExpendableButton, True);
}

// Update the prefix of the text displayed in the button
Void SetTextPrefix(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Prefix, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextPrefix, K_Properties { TextPrefix = _Prefix }, _Redraw);
}
Void SetTextPrefix(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Prefix) {
	SetTextPrefix(_This, _Frame_ExpendableButton, _Prefix, True);
}
Void ResetTextPrefix(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextPrefix, _Redraw);
}
Void ResetTextPrefix(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextPrefix(_This, _Frame_ExpendableButton, True);
}

// Update the horizontal alignment of the text displayed in the button
Void SetTextHAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, CMlControl::AlignHorizontal _HAlign, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextHAlign, K_Properties { TextHAlign = _HAlign }, _Redraw);
}
Void SetTextHAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, CMlControl::AlignHorizontal _HAlign) {
	SetTextHAlign(_This, _Frame_ExpendableButton, _HAlign, True);
}
Void ResetTextHAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextHAlign, _Redraw);
}
Void ResetTextHAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextHAlign(_This, _Frame_ExpendableButton, True);
}

// Update the vertical alignment of the text displayed in the button
Void SetTextVAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, CMlControl::AlignVertical _VAlign, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextVAlign, K_Properties { TextVAlign = _VAlign }, _Redraw);
}
Void SetTextVAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, CMlControl::AlignVertical _VAlign) {
	SetTextVAlign(_This, _Frame_ExpendableButton, _VAlign, True);
}
Void ResetTextVAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextVAlign, _Redraw);
}
Void ResetTextVAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextVAlign(_This, _Frame_ExpendableButton, True);
}

// Update the offset of the text displayed in the button
Void SetTextOffset(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec2 _Offset, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextOffset, K_Properties { TextOffset = _Offset }, _Redraw);
}
Void SetTextOffset(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec2 _Offset) {
	SetTextOffset(_This, _Frame_ExpendableButton, _Offset, True);
}
Void ResetTextOffset(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextOffset, _Redraw);
}
Void ResetTextOffset(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextOffset(_This, _Frame_ExpendableButton, True);
}

// Update the size of the label for the text displayed in the button
Void SetTextSize(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec2 _Size, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextSize, K_Properties { TextSize = _Size }, _Redraw);
}
Void SetTextSize(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec2 _Size) {
	SetTextSize(_This, _Frame_ExpendableButton, _Size, True);
}
Void ResetTextSize(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextSize, _Redraw);
}
Void ResetTextSize(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextSize(_This, _Frame_ExpendableButton, True);
}

// Update the text color of the focused button
Void SetTextColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextColorFocused, K_Properties { TextColorFocused = _Color }, _Redraw);
}
Void SetTextColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	SetTextColorFocused(_This, _Frame_ExpendableButton, _Color, True);
}
Void SetTextColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	SetTextColorFocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color), _Redraw);
}
Void SetTextColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color) {
	SetTextColorFocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color));
}
Void ResetTextColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextColorFocused, _Redraw);
}
Void ResetTextColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextColorFocused(_This, _Frame_ExpendableButton, True);
}

// Update the text color of the unfocused button
Void SetTextColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextColorUnfocused, K_Properties { TextColorUnfocused = _Color }, _Redraw);
}
Void SetTextColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	SetTextColorUnfocused(_This, _Frame_ExpendableButton, _Color, True);
}
Void SetTextColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	SetTextColorUnfocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color), _Redraw);
}
Void SetTextColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color) {
	SetTextColorUnfocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color));
}
Void ResetTextColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextColorUnfocused, _Redraw);
}
Void ResetTextColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextColorUnfocused(_This, _Frame_ExpendableButton, True);
}

// Update the text opacity of the focused button
Void SetTextOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextOpacityFocused, K_Properties { TextOpacityFocused = _Opacity }, _Redraw);
}
Void SetTextOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	SetTextOpacityFocused(_This, _Frame_ExpendableButton, _Opacity, True);
}
Void ResetTextOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextOpacityFocused, _Redraw);
}
Void ResetTextOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextOpacityFocused(_This, _Frame_ExpendableButton, True);
}

// Update the text opacity of the unfocused button
Void SetTextOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextOpacityUnfocused, K_Properties { TextOpacityUnfocused = _Opacity }, _Redraw);
}
Void SetTextOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	SetTextOpacityUnfocused(_This, _Frame_ExpendableButton, _Opacity, True);
}
Void ResetTextOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_TextOpacityUnfocused, _Redraw);
}
Void ResetTextOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetTextOpacityUnfocused(_This, _Frame_ExpendableButton, True);
}

// Update the height of the button
Void SetHeight(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Height, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_Height, K_Properties { Height = _Height }, _Redraw);
}
Void SetHeight(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Height) {
	SetHeight(_This, _Frame_ExpendableButton, _Height, True);
}
Void ResetHeight(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_Height, _Redraw);
}
Void ResetHeight(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetHeight(_This, _Frame_ExpendableButton, True);
}

// Update the minimum width of the button
Void SetMinWidth(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _MinWidth, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_MinWidth, K_Properties { MinWidth = _MinWidth }, _Redraw);
}
Void SetMinWidth(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _MinWidth) {
	SetMinWidth(_This, _Frame_ExpendableButton, _MinWidth, True);
}
Void ResetMinWidth(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_MinWidth, _Redraw);
}
Void ResetMinWidth(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetMinWidth(_This, _Frame_ExpendableButton, True);
}

// Update the maximum width of the button
Void SetMaxWidth(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _MaxWidth, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_MaxWidth, K_Properties { MaxWidth = _MaxWidth }, _Redraw);
}
Void SetMaxWidth(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _MaxWidth) {
	SetMaxWidth(_This, _Frame_ExpendableButton, _MaxWidth, True);
}
Void ResetMaxWidth(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_MaxWidth, _Redraw);
}
Void ResetMaxWidth(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetMaxWidth(_This, _Frame_ExpendableButton, True);
}

// Force the width of the button
Void SetWidth(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Width, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_Width, K_Properties { Width = _Width }, _Redraw);
}
Void SetWidth(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Width) {
	SetWidth(_This, _Frame_ExpendableButton, _Width, True);
}
Void ResetWidth(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_Width, _Redraw);
}
Void ResetWidth(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetWidth(_This, _Frame_ExpendableButton, True);
}

// Update the horizontal alignment of the button
Void SetHAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, CMlControl::AlignHorizontal _HAlign, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_HAlign, K_Properties { HAlign = _HAlign }, _Redraw);
}
Void SetHAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, CMlControl::AlignHorizontal _HAlign) {
	SetHAlign(_This, _Frame_ExpendableButton, _HAlign, True);
}
Void ResetHAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_HAlign, _Redraw);
}
Void ResetHAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetHAlign(_This, _Frame_ExpendableButton, True);
}

// Update the vertical alignment of the button
Void SetVAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, CMlControl::AlignVertical _VAlign, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_VAlign, K_Properties { VAlign = _VAlign }, _Redraw);
}
Void SetVAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, CMlControl::AlignVertical _VAlign) {
	SetVAlign(_This, _Frame_ExpendableButton, _VAlign, True);
}
Void ResetVAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_VAlign, _Redraw);
}
Void ResetVAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetVAlign(_This, _Frame_ExpendableButton, True);
}

// Update the background images of the button
Void SetBackgroundImages(CMlScript _This, CMlFrame _Frame_ExpendableButton, K_Image[Integer] _BackgroundImages, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_BackgroundImages, K_Properties { BackgroundImages = _BackgroundImages }, _Redraw);
}
Void SetBackgroundImages(CMlScript _This, CMlFrame _Frame_ExpendableButton, K_Image[Integer] _BackgroundImages) {
	SetBackgroundImages(_This, _Frame_ExpendableButton, _BackgroundImages, True);
}
Void ResetBackgroundImages(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_BackgroundImages, _Redraw);
}
Void ResetBackgroundImages(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetBackgroundImages(_This, _Frame_ExpendableButton, True);
}

// Update the background color of the focused button
Void SetBackgroundColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_BackgroundColorFocused, K_Properties { BackgroundColorFocused = _Color }, _Redraw);
}
Void SetBackgroundColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	SetBackgroundColorFocused(_This, _Frame_ExpendableButton, _Color, True);
}
Void SetBackgroundColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	SetBackgroundColorFocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color), _Redraw);
}
Void SetBackgroundColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color) {
	SetBackgroundColorFocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color));
}
Void ResetBackgroundColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_BackgroundColorFocused, _Redraw);
}
Void ResetBackgroundColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetBackgroundColorFocused(_This, _Frame_ExpendableButton, True);
}

// Update the background color of the unfocused button
Void SetBackgroundColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_BackgroundColorUnfocused, K_Properties { BackgroundColorUnfocused = _Color }, _Redraw);
}
Void SetBackgroundColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	SetBackgroundColorUnfocused(_This, _Frame_ExpendableButton, _Color, True);
}
Void SetBackgroundColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	SetBackgroundColorUnfocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color), _Redraw);
}
Void SetBackgroundColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color) {
	SetBackgroundColorUnfocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color));
}
Void ResetBackgroundColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_BackgroundColorUnfocused, _Redraw);
}
Void ResetBackgroundColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetBackgroundColorUnfocused(_This, _Frame_ExpendableButton, True);
}

// Update the background opacity of the focused button
Void SetBackgroundOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_BackgroundOpacityFocused, K_Properties { BackgroundOpacityFocused = _Opacity }, _Redraw);
}
Void SetBackgroundOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	SetBackgroundOpacityFocused(_This, _Frame_ExpendableButton, _Opacity, True);
}
Void ResetBackgroundOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_BackgroundOpacityFocused, _Redraw);
}
Void ResetBackgroundOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetBackgroundOpacityFocused(_This, _Frame_ExpendableButton, True);
}

// Update the background opacity of the unfocused button
Void SetBackgroundOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_BackgroundOpacityUnfocused, K_Properties { BackgroundOpacityUnfocused = _Opacity }, _Redraw);
}
Void SetBackgroundOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	SetBackgroundOpacityUnfocused(_This, _Frame_ExpendableButton, _Opacity, True);
}
Void ResetBackgroundOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_BackgroundOpacityUnfocused, _Redraw);
}
Void ResetBackgroundOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetBackgroundOpacityUnfocused(_This, _Frame_ExpendableButton, True);
}

// Update the focus color of the focused button
Void SetFocusColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_FocusColorFocused, K_Properties { FocusColorFocused = _Color }, _Redraw);
}
Void SetFocusColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	SetFocusColorFocused(_This, _Frame_ExpendableButton, _Color, True);
}
Void SetFocusColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	SetFocusColorFocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color), _Redraw);
}
Void SetFocusColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color) {
	SetFocusColorFocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color));
}
Void ResetFocusColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_FocusColorFocused, _Redraw);
}
Void ResetFocusColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetFocusColorFocused(_This, _Frame_ExpendableButton, True);
}

// Update the focus color of the unfocused button
Void SetFocusColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_FocusColorUnfocused, K_Properties { FocusColorUnfocused = _Color }, _Redraw);
}
Void SetFocusColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	SetFocusColorUnfocused(_This, _Frame_ExpendableButton, _Color, True);
}
Void SetFocusColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	SetFocusColorUnfocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color), _Redraw);
}
Void SetFocusColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color) {
	SetFocusColorUnfocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color));
}
Void ResetFocusColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_FocusColorUnfocused, _Redraw);
}
Void ResetFocusColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetFocusColorUnfocused(_This, _Frame_ExpendableButton, True);
}

// Update the focus opacity of the focused button
Void SetFocusOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_FocusOpacityFocused, K_Properties { FocusOpacityFocused = _Opacity }, _Redraw);
}
Void SetFocusOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	SetFocusOpacityFocused(_This, _Frame_ExpendableButton, _Opacity, True);
}
Void ResetFocusOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_FocusOpacityFocused, _Redraw);
}
Void ResetFocusOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetFocusOpacityFocused(_This, _Frame_ExpendableButton, True);
}

// Update the focus opacity of the unfocused button
Void SetFocusOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_FocusOpacityUnfocused, K_Properties { FocusOpacityUnfocused = _Opacity }, _Redraw);
}
Void SetFocusOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	SetFocusOpacityUnfocused(_This, _Frame_ExpendableButton, _Opacity, True);
}
Void ResetFocusOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_FocusOpacityUnfocused, _Redraw);
}
Void ResetFocusOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetFocusOpacityUnfocused(_This, _Frame_ExpendableButton, True);
}

// Update the focus images of the button
Void SetFocusImages(CMlScript _This, CMlFrame _Frame_ExpendableButton, K_Image[Integer] _FocusImages, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_FocusImages, K_Properties { FocusImages = _FocusImages }, _Redraw);
}
Void SetFocusImages(CMlScript _This, CMlFrame _Frame_ExpendableButton, K_Image[Integer] _FocusImages) {
	SetFocusImages(_This, _Frame_ExpendableButton, _FocusImages, True);
}
Void ResetFocusImages(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_FocusImages, _Redraw);
}
Void ResetFocusImages(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetFocusImages(_This, _Frame_ExpendableButton, True);
}

// Update the image of the button icon
Void SetIconImageUrl(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Url, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconImageUrl, K_Properties { IconImage = K_Image { Url = _Url } }, _Redraw);
}
Void SetIconImageUrl(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Url) {
	SetIconImageUrl(_This, _Frame_ExpendableButton, _Url, True);
}
Void ResetIconImageUrl(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconImageUrl, _Redraw);
}
Void ResetIconImageUrl(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetIconImageUrl(_This, _Frame_ExpendableButton, True);
}

// Update the size of the button icon
Void SetIconSize(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec2 _Size, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconSize, K_Properties { IconImage = K_Image { Size = _Size } }, _Redraw);
}
Void SetIconSize(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec2 _Size) {
	SetIconSize(_This, _Frame_ExpendableButton, _Size, True);
}
Void ResetIconSize(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconSize, _Redraw);
}
Void ResetIconSize(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetIconSize(_This, _Frame_ExpendableButton, True);
}

// Update the color mode of the button icon
Void SetIconColorMode(CMlScript _This, CMlFrame _Frame_ExpendableButton, Integer _ColorMode, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconColorMode, K_Properties { IconImage = K_Image { ColorMode = _ColorMode } }, _Redraw);
}
Void SetIconColorMode(CMlScript _This, CMlFrame _Frame_ExpendableButton, Integer _ColorMode) {
	SetIconColorMode(_This, _Frame_ExpendableButton, _ColorMode, True);
}
Void ResetIconColorMode(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconColorMode, _Redraw);
}
Void ResetIconColorMode(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetIconColorMode(_This, _Frame_ExpendableButton, True);
}

// Update the icon color of the focused button
Void SetIconColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconColorFocused, K_Properties { IconColorFocused = _Color }, _Redraw);
}
Void SetIconColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	SetIconColorFocused(_This, _Frame_ExpendableButton, _Color, True);
}
Void SetIconColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	SetIconColorFocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color), _Redraw);
}
Void SetIconColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color) {
	SetIconColorFocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color));
}
Void ResetIconColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconColorFocused, _Redraw);
}
Void ResetIconColorFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetIconColorFocused(_This, _Frame_ExpendableButton, True);
}

// Update the icon color of the unfocused button
Void SetIconColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconColorUnfocused, K_Properties { IconColorUnfocused = _Color }, _Redraw);
}
Void SetIconColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	SetIconColorUnfocused(_This, _Frame_ExpendableButton, _Color, True);
}
Void SetIconColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	SetIconColorUnfocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color), _Redraw);
}
Void SetIconColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _Color) {
	SetIconColorUnfocused(_This, _Frame_ExpendableButton, CL::HexToRgb(_Color));
}
Void ResetIconColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconColorUnfocused, _Redraw);
}
Void ResetIconColorUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetIconColorUnfocused(_This, _Frame_ExpendableButton, True);
}

// Update the icon opacity of the focused button
Void SetIconOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconOpacityFocused, K_Properties { IconOpacityFocused = _Opacity }, _Redraw);
}
Void SetIconOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	SetIconOpacityFocused(_This, _Frame_ExpendableButton, _Opacity, True);
}
Void ResetIconOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconOpacityFocused, _Redraw);
}
Void ResetIconOpacityFocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetIconOpacityFocused(_This, _Frame_ExpendableButton, True);
}

// Update the icon opacity of the unfocused button
Void SetIconOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconOpacityUnfocused, K_Properties { IconOpacityUnfocused = _Opacity }, _Redraw);
}
Void SetIconOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	SetIconOpacityUnfocused(_This, _Frame_ExpendableButton, _Opacity, True);
}
Void ResetIconOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconOpacityUnfocused, _Redraw);
}
Void ResetIconOpacityUnfocused(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetIconOpacityUnfocused(_This, _Frame_ExpendableButton, True);
}

// Update the icon alignment of the unfocused button
Void SetIconAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, Integer _IconAlign, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconAlign, K_Properties { IconAlign = _IconAlign }, _Redraw);
}
Void SetIconAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, Integer _IconAlign) {
	SetIconAlign(_This, _Frame_ExpendableButton, _IconAlign, True);
}
Void ResetIconAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconAlign, _Redraw);
}
Void ResetIconAlign(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetIconAlign(_This, _Frame_ExpendableButton, True);
}

// Update the icon alignment of the unfocused button
Void SetIconOffset(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec2 _IconOffset, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconOffset, K_Properties { IconOffset = _IconOffset }, _Redraw);
}
Void SetIconOffset(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec2 _IconOffset) {
	SetIconOffset(_This, _Frame_ExpendableButton, _IconOffset, True);
}
Void ResetIconOffset(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_IconOffset, _Redraw);
}
Void ResetIconOffset(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetIconOffset(_This, _Frame_ExpendableButton, True);
}

// Update the hitbox rotation of the button
Void SetHitboxRotation(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Rotation, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_HitboxRot, K_Properties { HitboxRot = _Rotation }, _Redraw);
}
Void SetHitboxRotation(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Rotation) {
	SetHitboxRotation(_This, _Frame_ExpendableButton, _Rotation, True);
}
Void ResetHitboxRotation(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_HitboxRot, _Redraw);
}
Void ResetHitboxRotation(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetHitboxRotation(_This, _Frame_ExpendableButton, True);
}

// Update the hitbox width scale of the button
Void SetHitboxWidthScale(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Scale, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_HitboxWidthScale, K_Properties { HitboxWidthScale = _Scale }, _Redraw);
}
Void SetHitboxWidthScale(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Scale) {
	SetHitboxWidthScale(_This, _Frame_ExpendableButton, _Scale, True);
}
Void ResetHitboxWidthScale(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_HitboxWidthScale, _Redraw);
}
Void ResetHitboxWidthScale(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetHitboxWidthScale(_This, _Frame_ExpendableButton, True);
}

// Update the hitbox Height scale of the button
Void SetHitboxHeightScale(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Scale, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_HitboxHeightScale, K_Properties { HitboxHeightScale = _Scale }, _Redraw);
}
Void SetHitboxHeightScale(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Scale) {
	SetHitboxHeightScale(_This, _Frame_ExpendableButton, _Scale, True);
}
Void ResetHitboxHeightScale(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_HitboxHeightScale, _Redraw);
}
Void ResetHitboxHeightScale(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetHitboxHeightScale(_This, _Frame_ExpendableButton, True);
}

// Enable hitbox debug
Void SetHitboxDebug(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Enabled, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_HitboxDebug, K_Properties { HitboxDebug = _Enabled }, _Redraw);
}
Void SetHitboxDebug(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Enabled) {
	SetHitboxDebug(_This, _Frame_ExpendableButton, _Enabled, True);
}
Void ResetHitboxDebug(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_HitboxDebug, _Redraw);
}
Void ResetHitboxDebug(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetHitboxDebug(_This, _Frame_ExpendableButton, True);
}

// Update the padding of the button
Void SetPadding(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec2 _Padding, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_Padding, K_Properties { Padding = _Padding }, _Redraw);
}
Void SetPadding(CMlScript _This, CMlFrame _Frame_ExpendableButton, Vec2 _Padding) {
	SetPadding(_This, _Frame_ExpendableButton, _Padding, True);
}
Void ResetPadding(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_Padding, _Redraw);
}
Void ResetPadding(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetPadding(_This, _Frame_ExpendableButton, True);
}

// Enable supersample
Void SetSuperSample(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Enabled, Boolean _Redraw) {
	Private_SetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_SuperSample, K_Properties { SuperSample = _Enabled }, _Redraw);
}
Void SetSuperSample(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Enabled) {
	SetSuperSample(_This, _Frame_ExpendableButton, _Enabled, True);
}
Void ResetSuperSample(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	Private_ResetCustomizedProperty(_This, _Frame_ExpendableButton, C_Property_SuperSample, _Redraw);
}
Void ResetSuperSample(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	ResetSuperSample(_This, _Frame_ExpendableButton, True);
}

// Set a custom text for the text to speech accessibility feature
Void SetTextToSpeech(CMlFrame _Frame_ExpendableButton, Text _Text, Boolean _IsTranslated) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.TTS_AltText = _Text;
	CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.TTS_AltText_Translate = _IsTranslated;
}
Void SetTextToSpeech(CMlFrame _Frame_ExpendableButton, Text _Text) {
	SetTextToSpeech(_Frame_ExpendableButton, _Text, True);
}
Void ResetTextToSpeech(CMlFrame _Frame_ExpendableButton) {
	SetTextToSpeech(_Frame_ExpendableButton, "", False);
}

// Set a custom text for the text to speech accessibility feature
Void SetFilterProfanities(CMlFrame _Frame_ExpendableButton, CMlLabel::EFilterProfanities _FilterProfanities) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText.FilterProfanities = _FilterProfanities;
}
Void ResetFilterProfanities(CMlFrame _Frame_ExpendableButton) {
	SetFilterProfanities(_Frame_ExpendableButton, CMlLabel::EFilterProfanities::Never);
}

// Update the styles of the button
Void SetStyles(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text[] _StyleIds, Boolean _Redraw) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	CMGame_ExpendableButton_ExpendableButton.Styles = _StyleIds;
	if (_Redraw) RedrawButton(_This, _Frame_ExpendableButton);
}
Void SetStyles(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text[] _StyleIds) {
	SetStyles(_This, _Frame_ExpendableButton, _StyleIds, True);
}
Void ResetStyles(CMlScript _This, CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	SetStyles(_This, _Frame_ExpendableButton, [], _Redraw);
}
Void ResetStyles(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	SetStyles(_This, _Frame_ExpendableButton, []);
}
Boolean HasStyle(CMlFrame _Frame_ExpendableButton, Text _StyleId) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	return CMGame_ExpendableButton_ExpendableButton.Styles.exists(_StyleId);
}
Void AddStyle(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _StyleId, Boolean _Redraw) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	if (!CMGame_ExpendableButton_ExpendableButton.Styles.exists(_StyleId)) {
		CMGame_ExpendableButton_ExpendableButton.Styles.add(_StyleId);
	}
	if (_Redraw) RedrawButton(_This, _Frame_ExpendableButton);
}
Void AddStyle(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _StyleId) {
	AddStyle(_This, _Frame_ExpendableButton, _StyleId, True);
}
Void RemoveStyle(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _StyleId, Boolean _Redraw) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	CMGame_ExpendableButton_ExpendableButton.Styles.remove(_StyleId);
	if (_Redraw) RedrawButton(_This, _Frame_ExpendableButton);
}
Void RemoveStyle(CMlScript _This, CMlFrame _Frame_ExpendableButton, Text _StyleId) {
	RemoveStyle(_This, _Frame_ExpendableButton, _StyleId, True);
}

// Set the default properties of all buttons
Void SetButtonsDefaultProperties(CMlScript _This, K_Properties _DefaultProperties, Boolean _Redraw) {
	declare K_State CMGame_ExpendableButton_State for _This.Page = C_State_Null;
	CMGame_ExpendableButton_State.DefaultProperties = _DefaultProperties;
	if (_Redraw) RedrawButtons(_This);
}
Void SetButtonsDefaultProperties(CMlScript _This, K_Properties _DefaultProperties) {
	SetButtonsDefaultProperties(_This, _DefaultProperties, True);
}

// Create a new button style
Void CreateStyle(CMlScript _This, Text _StyleId, K_Properties _Style) {
	declare K_State CMGame_ExpendableButton_State for _This.Page = C_State_Null;
	CMGame_ExpendableButton_State.Styles[_StyleId] = _Style;
}

// Create a new button style from existing styles
Void CreateStyle(CMlScript _This, Text _StyleId, Text[] _ExistingStyleIds) {
	declare K_State CMGame_ExpendableButton_State for _This.Page = C_State_Null;
	declare K_Properties[] PropertiesToMerge = [];

	foreach (StyleId in _ExistingStyleIds) {
		PropertiesToMerge.add(CMGame_ExpendableButton_State.Styles.get(StyleId, K_Properties {}));
	}

	CMGame_ExpendableButton_State.Styles[_StyleId] = Private_MergeProperties(CMGame_ExpendableButton_State.DefaultProperties, PropertiesToMerge);
}

// Initialize the data attributes related to the button's text
Void Private_InitializeTextDataAttributes(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	if (_Frame_ExpendableButton.DataAttributeExists("text")) {
		SetText(_This, _Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("text"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-fitlabel-enabled")) {
		SetTextFitLabelEnabled(_This, _Frame_ExpendableButton, Tools::TextToBoolean(_Frame_ExpendableButton.DataAttributeGet("text-fitlabel-enabled")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-autonewline-enabled")) {
		SetTextAutoNewLineEnabled(_This, _Frame_ExpendableButton, Tools::TextToBoolean(_Frame_ExpendableButton.DataAttributeGet("text-autonewline-enabled")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-maxlines")) {
		SetTextMaxLines(_This, _Frame_ExpendableButton, TL::ToInteger(_Frame_ExpendableButton.DataAttributeGet("text-maxlines")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-textfont")) {
		SetTextFont(_This, _Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("text-textfont"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-textsize")) {
		SetTextFontSize(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("text-textsize")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-textprefix")) {
		SetTextPrefix(_This, _Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("text-textprefix"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-halign")) {
		SetTextHAlign(_This, _Frame_ExpendableButton, Tools::TextToHAlign2(_Frame_ExpendableButton.DataAttributeGet("text-halign")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-valign")) {
		SetTextVAlign(_This, _Frame_ExpendableButton, Tools::TextToVAlign2(_Frame_ExpendableButton.DataAttributeGet("text-valign")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-offset")) {
		SetTextOffset(_This, _Frame_ExpendableButton, Tools::TextToVec2(_Frame_ExpendableButton.DataAttributeGet("text-offset")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-size")) {
		SetTextSize(_This, _Frame_ExpendableButton, Tools::TextToVec2(_Frame_ExpendableButton.DataAttributeGet("text-size")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-textcolor-focused")) {
		SetTextColorFocused(_This, _Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("text-textcolor-focused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-textcolor-unfocused")) {
		SetTextColorUnfocused(_This, _Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("text-textcolor-unfocused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-opacity-focused")) {
		SetTextOpacityFocused(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("text-opacity-focused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-opacity-unfocused")) {
		SetTextOpacityUnfocused(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("text-opacity-unfocused")), False);
	}
}

// Initialize the data attributes related to the button's dimension
Void Private_InitializeDimensionDataAttributes(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	if (_Frame_ExpendableButton.DataAttributeExists("height")) {
		SetHeight(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("height")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("min-width")) {
		SetMinWidth(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("min-width")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("max-width")) {
		SetMaxWidth(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("max-width")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("width")) {
		SetWidth(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("width")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("halign")) {
		SetHAlign(_This, _Frame_ExpendableButton, Tools::TextToHAlign2(_Frame_ExpendableButton.DataAttributeGet("halign")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("valign")) {
		SetVAlign(_This, _Frame_ExpendableButton, Tools::TextToVAlign2(_Frame_ExpendableButton.DataAttributeGet("valign")), False);
	}
}

// Initialize the data attributes related to the button's background and focus
Void Private_InitializeBackgroundFocusDataAttributes(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	if (_Frame_ExpendableButton.DataAttributeExists("background-color-focused")) {
		SetBackgroundColorFocused(_This, _Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("background-color-focused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("background-color-unfocused")) {
		SetBackgroundColorUnfocused(_This, _Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("background-color-unfocused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("background-opacity-focused")) {
		SetBackgroundOpacityFocused(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("background-opacity-focused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("background-opacity-unfocused")) {
		SetBackgroundOpacityUnfocused(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("background-opacity-unfocused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("focus-color-focused")) {
		SetFocusColorFocused(_This, _Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("focus-color-focused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("focus-color-unfocused")) {
		SetFocusColorUnfocused(_This, _Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("focus-color-unfocused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("focus-opacity-focused")) {
		SetFocusOpacityFocused(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("focus-opacity-focused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("focus-opacity-unfocused")) {
		SetFocusOpacityUnfocused(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("focus-opacity-unfocused")), False);
	}

	declare Text[] Types = ["background", "focus"];
	foreach (Type in Types) {
		declare K_Image[Integer] Images;
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-image-left")) {
			if (!Images.existskey(C_Position_Left)) Images[C_Position_Left] = K_Image {};
			Images[C_Position_Left].Url = _Frame_ExpendableButton.DataAttributeGet(Type^"-image-left");
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-image-middle")) {
			if (!Images.existskey(C_Position_Middle)) Images[C_Position_Middle] = K_Image {};
			Images[C_Position_Middle].Url = _Frame_ExpendableButton.DataAttributeGet(Type^"-image-middle");
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-image-right")) {
			if (!Images.existskey(C_Position_Right)) Images[C_Position_Right] = K_Image {};
			Images[C_Position_Right].Url = _Frame_ExpendableButton.DataAttributeGet(Type^"-image-right");
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-size-left")) {
			if (!Images.existskey(C_Position_Left)) Images[C_Position_Left] = K_Image {};
			Images[C_Position_Left].Size = Tools::TextToVec2(_Frame_ExpendableButton.DataAttributeGet(Type^"-size-left"));
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-size-middle")) {
			if (!Images.existskey(C_Position_Middle)) Images[C_Position_Middle] = K_Image {};
			Images[C_Position_Middle].Size = Tools::TextToVec2(_Frame_ExpendableButton.DataAttributeGet(Type^"-size-middle"));
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-size-right")) {
			if (!Images.existskey(C_Position_Right)) Images[C_Position_Right] = K_Image {};
			Images[C_Position_Right].Size = Tools::TextToVec2(_Frame_ExpendableButton.DataAttributeGet(Type^"-size-right"));
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-colormode-left")) {
			if (!Images.existskey(C_Position_Left)) Images[C_Position_Left] = K_Image {};
			Images[C_Position_Left].ColorMode = TL::ToInteger(_Frame_ExpendableButton.DataAttributeGet(Type^"-colormode-left"));
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-colormode-middle")) {
			if (!Images.existskey(C_Position_Middle)) Images[C_Position_Middle] = K_Image {};
			Images[C_Position_Middle].ColorMode = TL::ToInteger(_Frame_ExpendableButton.DataAttributeGet(Type^"-colormode-middle"));
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-colormode-right")) {
			if (!Images.existskey(C_Position_Right)) Images[C_Position_Right] = K_Image {};
			Images[C_Position_Right].ColorMode = TL::ToInteger(_Frame_ExpendableButton.DataAttributeGet(Type^"-colormode-right"));
		}
		if (Images.count > 0) {
			if (Type == "background") {
				SetBackgroundImages(_This, _Frame_ExpendableButton, Images, False);
			} else if (Type == "focus") {
				SetFocusImages(_This, _Frame_ExpendableButton, Images, False);
			}
		}
	}
}

// Initialize the data attributes related to the button's icon
Void Private_InitializeIconDataAttributes(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	if (_Frame_ExpendableButton.DataAttributeExists("icon-image")) {
		SetIconImageUrl(_This, _Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("icon-image"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-size")) {
		SetIconSize(_This, _Frame_ExpendableButton, Tools::TextToVec2(_Frame_ExpendableButton.DataAttributeGet("icon-size")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-colormode")) {
		SetIconColorMode(_This, _Frame_ExpendableButton, TL::ToInteger(_Frame_ExpendableButton.DataAttributeGet("icon-colormode")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-color-focused")) {
		SetIconColorFocused(_This, _Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("icon-color-focused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-color-unfocused")) {
		SetIconColorUnfocused(_This, _Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("icon-color-unfocused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-opacity-focused")) {
		SetIconOpacityFocused(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("icon-opacity-focused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-opacity-unfocused")) {
		SetIconOpacityUnfocused(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("icon-opacity-unfocused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-align")) {
		SetIconAlign(_This, _Frame_ExpendableButton, TL::ToInteger(_Frame_ExpendableButton.DataAttributeGet("icon-align")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-offset")) {
		SetIconOffset(_This, _Frame_ExpendableButton, Tools::TextToVec2(_Frame_ExpendableButton.DataAttributeGet("icon-offset")), False);
	}
}

// Initialize the data attributes related to the button's hitbox
Void Private_InitializeHitboxDataAttributes(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	if (_Frame_ExpendableButton.DataAttributeExists("hitbox-rot")) {
		SetHitboxRotation(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("hitbox-rot")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("hitbox-width-scale")) {
		SetHitboxWidthScale(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("hitbox-width-scale")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("hitbox-height-scale")) {
		SetHitboxHeightScale(_This, _Frame_ExpendableButton, TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("hitbox-height-scale")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("hitbox-debug")) {
		SetHitboxDebug(_This, _Frame_ExpendableButton, Tools::TextToBoolean(_Frame_ExpendableButton.DataAttributeGet("hitbox-debug")), False);
	}
}

// Initialize miscellaneous data attributes of the button
Void Private_InitializeMiscDataAttributes(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	if (_Frame_ExpendableButton.DataAttributeExists("styles")) {
		SetStyles(_This, _Frame_ExpendableButton, TL::Split(" ", TL::Trim(_Frame_ExpendableButton.DataAttributeGet("styles"))), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("padding")) {
		SetPadding(_This, _Frame_ExpendableButton, Tools::TextToVec2(_Frame_ExpendableButton.DataAttributeGet("padding")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("supersample")) {
		SetSuperSample(_This, _Frame_ExpendableButton, Tools::TextToBoolean(_Frame_ExpendableButton.DataAttributeGet("supersample")), False);
	}

	// Text to speech
	declare Text TTS_Text = "";
	declare Boolean TTS_Translate = True;
	if (_Frame_ExpendableButton.DataAttributeExists("tts-text")) TTS_Text = _Frame_ExpendableButton.DataAttributeGet("tts-text");
	if (_Frame_ExpendableButton.DataAttributeExists("tts-translate")) TTS_Translate = Tools::TextToBoolean(_Frame_ExpendableButton.DataAttributeGet("tts-translate"));
	SetTextToSpeech(_Frame_ExpendableButton, TTS_Text, TTS_Translate);

	declare CMlLabel::EFilterProfanities FilterProfanities;
	if (_Frame_ExpendableButton.DataAttributeExists("filter-profanities")) FilterProfanities = Tools::TextToFilterProfanities(_Frame_ExpendableButton.DataAttributeGet("filter-profanities"));
	SetFilterProfanities(_Frame_ExpendableButton, FilterProfanities);
}

// Initialize a button
Void InitializeButton(CMlScript _This, CMlFrame _Frame_ExpendableButton) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	CMGame_ExpendableButton_ExpendableButton = K_ExpendableButton {};

	CMGame_ExpendableButton_ExpendableButton.IsButton = True;
	CMGame_ExpendableButton_ExpendableButton.IsFocused = False;

	declare CMlFrame Frame_ButtonAlign <=> (_Frame_ExpendableButton.GetFirstChild(C_Id_FrameButtonAlign) as CMlFrame);
	declare CMlFrame Frame_Background <=> (Frame_ButtonAlign.GetFirstChild(C_Id_FrameBackground) as CMlFrame);
	declare CMlFrame Frame_Focus <=> (Frame_ButtonAlign.GetFirstChild(C_Id_FrameFocus) as CMlFrame);
	declare CMlFrame Frame_HitboxClip <=> (Frame_ButtonAlign.GetFirstChild(C_Id_FrameHitboxCLip) as CMlFrame);
	declare CMlFrame Frame_ButtonTextAlign <=> (Frame_ButtonAlign.GetFirstChild(C_Id_FrameButtonTextAlign) as CMlFrame);
	CMGame_ExpendableButton_ExpendableButton.Controls = K_Controls {
		Frame_ButtonAlign = Frame_ButtonAlign,
		Frame_Background = Frame_Background,
		Quads_Background = [
			C_Position_Left => (Frame_Background.GetFirstChild(C_Id_QuadBgLeft) as CMlQuad),
			C_Position_Middle => (Frame_Background.GetFirstChild(C_Id_QuadBgCenter) as CMlQuad),
			C_Position_Right => (Frame_Background.GetFirstChild(C_Id_QuadBgRight) as CMlQuad)
		],
		Frame_Focus = Frame_Focus,
		Quads_Focus = [
			C_Position_Left => (Frame_Focus.GetFirstChild(C_Id_QuadFocusLeft) as CMlQuad),
			C_Position_Middle => (Frame_Focus.GetFirstChild(C_Id_QuadFocusCenter) as CMlQuad),
			C_Position_Right => (Frame_Focus.GetFirstChild(C_Id_QuadFocusRight) as CMlQuad)
		],
		Frame_HitboxClip = Frame_HitboxClip,
		Quad_NavZone = (Frame_HitboxClip.GetFirstChild(C_NavZone) as CMlQuad),
		Quad_ButtonIcon = (Frame_ButtonAlign.GetFirstChild(C_Id_QuadButtonIcon) as CMlQuad),
		Frame_ButtonTextAlign = Frame_ButtonTextAlign,
		Label_ButtonText = (Frame_ButtonTextAlign.GetFirstChild(C_Id_LabelButtonText) as CMlLabel)
	};

	CMGame_ExpendableButton_ExpendableButton.CustomizedProperties = K_Properties {};
	CMGame_ExpendableButton_ExpendableButton.MergedProperties = K_Properties {};
	CMGame_ExpendableButton_ExpendableButton.Styles = [];

	Private_InitializeTextDataAttributes(_This, _Frame_ExpendableButton);
	Private_InitializeDimensionDataAttributes(_This, _Frame_ExpendableButton);
	Private_InitializeBackgroundFocusDataAttributes(_This, _Frame_ExpendableButton);
	Private_InitializeIconDataAttributes(_This, _Frame_ExpendableButton);
	Private_InitializeHitboxDataAttributes(_This, _Frame_ExpendableButton);
	Private_InitializeMiscDataAttributes(_This, _Frame_ExpendableButton);
	RedrawButton(_This, _Frame_ExpendableButton, False);
}

// Initialize all buttons in the manialink
Void InitializeButtons(CMlScript _This) {
	_This.Page.GetClassChildren(C_Class_ExpendableButton, _This.Page.MainFrame, True);
	foreach (Control in _This.Page.GetClassChildren_Result) {
		declare CMlFrame Frame_ExpendableButton = (Control as CMlFrame).Parent;
		InitializeButton(_This, Frame_ExpendableButton);
	}
}

// Get the width of the background
Real GetWidth(CMlFrame _Frame_ExpendableButton) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	return (
		CMGame_ExpendableButton_ExpendableButton.Controls.Quads_Background[C_Position_Left].Size.X +
		CMGame_ExpendableButton_ExpendableButton.Controls.Quads_Background[C_Position_Middle].Size.X +
		CMGame_ExpendableButton_ExpendableButton.Controls.Quads_Background[C_Position_Right].Size.X
	);
}

// Get the height of the background
Real GetHeight(CMlFrame _Frame_ExpendableButton) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	return CMGame_ExpendableButton_ExpendableButton.MergedProperties.Height;
}

// Get the CMlLabel of the button
CMlLabel GetLabel(CMlFrame _Frame_ExpendableButton) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	return CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText;
}

// Animate opacity
Void AddOpacityAnimation(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity, Integer _StartTime, Integer _Duration, CAnimManager::EAnimManagerEasing _EasingFunc) {
	declare K_ExpendableButton CMGame_ExpendableButton_ExpendableButton for _Frame_ExpendableButton = C_ExpendableButton_Null;
	assert(CMGame_ExpendableButton_ExpendableButton.IsButton, "Control '"^_Frame_ExpendableButton.ControlId^"' is not an expendanble button");

	// Animations
	foreach (Quad_Background in CMGame_ExpendableButton_ExpendableButton.Controls.Quads_Background) {
		_This.AnimMgr.Add(Quad_Background, """<anim opacity="{{{_Opacity}}}"/>""", _StartTime, _Duration, _EasingFunc);
	}
	if (CMGame_ExpendableButton_ExpendableButton.IsFocused) {
		foreach (Quad_Focus in CMGame_ExpendableButton_ExpendableButton.Controls.Quads_Focus) {
			_This.AnimMgr.Add(Quad_Focus, """<anim opacity="{{{_Opacity}}}"/>""", _StartTime, _Duration, _EasingFunc);
		}
	}
	_This.AnimMgr.Add(CMGame_ExpendableButton_ExpendableButton.Controls.Quad_ButtonIcon, """<anim opacity="{{{_Opacity}}}"/>""", _StartTime, _Duration, _EasingFunc);
	_This.AnimMgr.Add(CMGame_ExpendableButton_ExpendableButton.Controls.Label_ButtonText, """<anim opacity="{{{_Opacity}}}"/>""", _StartTime, _Duration, _EasingFunc);
}
Void AddOpacityAnimation(CMlScript _This, CMlFrame _Frame_ExpendableButton, Real _Opacity, Integer _Duration, CAnimManager::EAnimManagerEasing _EasingFunc) {
	AddOpacityAnimation(_This, _Frame_ExpendableButton, _Opacity, Now, _Duration, _EasingFunc);
}

Void MainInit(CMlScript _This) {
	declare K_State CMGame_ExpendableButton_State for _This.Page = C_State_Null;
	CMGame_ExpendableButton_State = C_State_Null;
}

Void MainStart(CMlScript _This) {
	InitializeButtons(_This);
}

Void MainLoop(CMlScript _This) {
	declare K_State CMGame_ExpendableButton_State for _This.Page = C_State_Null;

	/* Force redraw component instances */
	if (CMGame_ExpendableButton_State.RedrawRequested != RequestRedraw::GetComponentsRedrawCounter()) {
		CMGame_ExpendableButton_State.RedrawRequested = RequestRedraw::GetComponentsRedrawCounter();
		RedrawButtons(_This);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text ComponentV2() {
	return MV::ComponentV2(
		C_Name,
		GetManialink(),
		"""
#Include "Libs/Nadeo/CMGame/Components/ExpendableButtonBase.Script.txt" as {{{Q}}}
		""",
		"""
***MainInit***
***
{{{P}}}MainInit(This);
***

***MainStart***
***
{{{P}}}MainStart(This);
***

***MainLoop***
***
{{{P}}}MainLoop(This);
***
		""",
		[Navigation::ComponentV2()],
		[]
	);
}