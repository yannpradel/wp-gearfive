/**
 *	Squad notification observer for Social Menu
 */
#Const Version		"1.1.0"
#Const ScriptName	"Libs/Nadeo/CMGame/Utils/SquadNotificationObserver_Social_Menu.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/SquadNotificationObserver_Common.Script.txt" as Common
#Include "Libs/Nadeo/CMGame/Utils/Log.Script.txt" as Log
#Include "Libs/Nadeo/CMGame/Utils/EnvironmentInfo.Script.txt" as EnvironmentInfo
#Include "TimeLib" as TiL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// Add new notification to our state array and check if we can remove old ones
Void AddNotification(Common::K_Notification _Notification) {
	declare Common::K_State LibCommonSquadNotificationObserver_SocialMenu_State for System = Common::C_State_Null;
	// Check to remove old notifications if array contains more than 10 elements
	declare Integer[] ToRemove = [];
	if (LibCommonSquadNotificationObserver_SocialMenu_State.SquadNotifications.count > 10) {
		foreach (Key => Notif in LibCommonSquadNotificationObserver_SocialMenu_State.SquadNotifications) {
			if (TiL::GetDelta(TiL::GetCurrent(), ""^Notif.TimeStamp) > Common::C_NotificationLifeTime) ToRemove.add(Key);
		}
		foreach (Key in ToRemove) {
			LibCommonSquadNotificationObserver_SocialMenu_State.SquadNotifications.removekey(Key);
		}
	}
	// Then add new notification
	LibCommonSquadNotificationObserver_SocialMenu_State.SquadNotifications.add(_Notification);
}

// Get the oldest notification and remove it from our state array
Common::K_Notification GetNextNotification() {
	declare Common::K_State LibCommonSquadNotificationObserver_SocialMenu_State for System = Common::C_State_Null;
	declare Common::K_Notification Notif;
	if (LibCommonSquadNotificationObserver_SocialMenu_State.SquadNotifications.count > 0) {
		Notif = LibCommonSquadNotificationObserver_SocialMenu_State.SquadNotifications[0];
		LibCommonSquadNotificationObserver_SocialMenu_State.SquadNotifications.removekey(0);
	}
	return Notif;
}

// Check if squad notifications are available
Boolean IsNotificationAvailable() {
	declare Common::K_State LibCommonSquadNotificationObserver_SocialMenu_State for System = Common::C_State_Null;
	return (LibCommonSquadNotificationObserver_SocialMenu_State.SquadNotifications.count > 0);
}

// Function used in NotificationManager to parse the notification and stock it in our state array
Void OnEvent(CTaskResult_WSNotification _NotificationTask) {
	declare Text AccountId;
	declare Text DisplayName;
	declare Boolean IsFirstPartyDisplayName;
	declare Boolean IsCommunicationRestricted;
	declare Text ZoneUrl;
	declare Text SkinName;
	declare Text SkinUrl;
	declare Text SkinPrestigeOptions;
	declare Text SquadId;
	declare Text SquadLeaderId;
	declare Text SquadType;
	declare Boolean IsLocked;
	declare Boolean WasForcedToLeaveDueToCrossPlaySetting;
	declare Integer TimeStamp;
	switchtype (_NotificationTask.Notification) {
		case CNotification_SquadMemberRemoved: {
			declare CNotification_SquadMemberRemoved Notification_SquadMemberRemoved <=> (_NotificationTask.Notification as CNotification_SquadMemberRemoved);
			AccountId = Notification_SquadMemberRemoved.MemberAccountId;
			DisplayName = Notification_SquadMemberRemoved.MemberDisplayName;
			IsFirstPartyDisplayName = Notification_SquadMemberRemoved.MemberIsFirstPartyDisplayName;
			ZoneUrl = Notification_SquadMemberRemoved.MemberCountryFlagUrl;
			SquadId = Notification_SquadMemberRemoved.SquadId;
			TimeStamp = Notification_SquadMemberRemoved.TimeStamp;
			SquadType = Notification_SquadMemberRemoved.SquadType;
		}
		case CNotification_SquadMemberAdded: {
			declare CNotification_SquadMemberAdded Notification_SquadMemberAdded <=> (_NotificationTask.Notification as CNotification_SquadMemberAdded);
			AccountId = Notification_SquadMemberAdded.MemberAccountId;
			DisplayName = Notification_SquadMemberAdded.MemberDisplayName;
			IsFirstPartyDisplayName = Notification_SquadMemberAdded.MemberIsFirstPartyDisplayName;
			IsCommunicationRestricted = Notification_SquadMemberAdded.MemberIsCommunicationRestricted;
			ZoneUrl = Notification_SquadMemberAdded.MemberCountryFlagUrl;
			SquadId = Notification_SquadMemberAdded.SquadId;
			TimeStamp = Notification_SquadMemberAdded.TimeStamp;
			SkinPrestigeOptions = Notification_SquadMemberAdded.MemberSkinOptions;
			foreach (Skin in Notification_SquadMemberAdded.MemberSkinList) {
				if (Skin.Type == EnvironmentInfo::C_SkinType_CarSport) {
					SkinName = Skin.Name;
					SkinUrl = Skin.Url;
					break;
				}
			}
			SquadType = Notification_SquadMemberAdded.SquadType;
		}
		case CNotification_SquadDeleted: {
			declare CNotification_SquadDeleted Notification_SquadDeleted <=> (_NotificationTask.Notification as CNotification_SquadDeleted);
			SquadId = Notification_SquadDeleted.SquadId;
			TimeStamp = Notification_SquadDeleted.TimeStamp;
			SquadType = Notification_SquadDeleted.SquadType;
		}
		case CNotification_SquadUpdated: {
			declare CNotification_SquadUpdated Notification_SquadUpdated <=> (_NotificationTask.Notification as CNotification_SquadUpdated);
			SquadId = Notification_SquadUpdated.SquadId;
			TimeStamp = Notification_SquadUpdated.TimeStamp;
			SquadType = Notification_SquadUpdated.SquadType;
			SquadLeaderId = Notification_SquadUpdated.LeaderWebServicesUserId;
			WasForcedToLeaveDueToCrossPlaySetting = Notification_SquadUpdated.WasForcedToLeaveDueToCrossPlaySetting;
		}
		case CNotification_SquadLockStateUpdated: {
			declare CNotification_SquadLockStateUpdated Notification_SquadLockUpdated <=> (_NotificationTask.Notification as CNotification_SquadLockStateUpdated);
			SquadId = Notification_SquadLockUpdated.SquadId;
			TimeStamp = Notification_SquadLockUpdated.TimeStamp;
			SquadType = Notification_SquadLockUpdated.SquadType;
			IsLocked = Notification_SquadLockUpdated.IsLocked;
		}
		default: {
			Log::Log("Unknown notification class for type : " ^ _NotificationTask.Notification.Type);
		}
	}
	if (SquadId != "") {
		declare Common::K_Notification NewNotif = Common::K_Notification {
			Type = _NotificationTask.Notification.Type,
			AccountId = AccountId,
			DisplayName = DisplayName,
			IsFirstPartyDisplayName = IsFirstPartyDisplayName,
			IsCommunicationRestricted = IsCommunicationRestricted,
			ZoneUrl = ZoneUrl,
			SkinName = SkinName,
			SkinUrl = SkinUrl,
			SkinPrestigeOptions = SkinPrestigeOptions,
			SquadId = SquadId,
			SquadLeaderId = SquadLeaderId,
			SquadType = SquadType,
			IsLocked = IsLocked,
			WasForcedToLeaveDueToCrossPlaySetting = WasForcedToLeaveDueToCrossPlaySetting,
			TimeStamp = TimeStamp
		};
		AddNotification(NewNotif);
	}
}