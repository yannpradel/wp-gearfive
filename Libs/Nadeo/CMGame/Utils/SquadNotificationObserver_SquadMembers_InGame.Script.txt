/**
 *	Squad notification observer for Squad Members UI in game
 */
#Const Version		"1.0.1"
#Const ScriptName	"Libs/Nadeo/CMGame/Utils/SquadNotificationObserver_SquadMembers_InGame.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Utils/SquadNotificationObserver_Common.Script.txt" as Common
#Include "TimeLib" as TiL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// Add new notification to our state array and check if we can remove old ones
Void AddNotification(Common::K_Notification _Notification) {
	declare Common::K_State LibCommonSquadNotificationObserver_SquadMembers_InGame_State for System = Common::C_State_Null;
	// Check to remove old notifications if array contains more than 10 elements
	declare Integer[] ToRemove = [];
	if (LibCommonSquadNotificationObserver_SquadMembers_InGame_State.SquadNotifications.count > 10) {
		foreach (Key => Notif in LibCommonSquadNotificationObserver_SquadMembers_InGame_State.SquadNotifications) {
			if (TiL::GetDelta(TiL::GetCurrent(), ""^Notif.TimeStamp) > Common::C_NotificationLifeTime) ToRemove.add(Key);
		}
		foreach (Key in ToRemove) {
			LibCommonSquadNotificationObserver_SquadMembers_InGame_State.SquadNotifications.removekey(Key);
		}
	}
	// Then add new notification
	LibCommonSquadNotificationObserver_SquadMembers_InGame_State.SquadNotifications.add(_Notification);
}

// Get the oldest notification and remove it from our state array
Common::K_Notification GetNextNotification() {
	declare Common::K_State LibCommonSquadNotificationObserver_SquadMembers_InGame_State for System = Common::C_State_Null;
	declare Common::K_Notification Notif;
	if (LibCommonSquadNotificationObserver_SquadMembers_InGame_State.SquadNotifications.count > 0) {
		Notif = LibCommonSquadNotificationObserver_SquadMembers_InGame_State.SquadNotifications[0];
		LibCommonSquadNotificationObserver_SquadMembers_InGame_State.SquadNotifications.removekey(0);
	}
	return Notif;
}

// Check if squad notifications are available
Boolean IsNotificationAvailable() {
	declare Common::K_State LibCommonSquadNotificationObserver_SquadMembers_InGame_State for System = Common::C_State_Null;
	return (LibCommonSquadNotificationObserver_SquadMembers_InGame_State.SquadNotifications.count > 0);
}

// Function used in NotificationManager to parse the notification and stock it in our state array
Void OnEvent(CTaskResult_WSNotification _NotificationTask) {
	declare Text AccountId;
	declare Text DisplayName;
	declare Boolean IsFirstPartyDisplayName;
	declare Text ZoneUrl;
	declare Text SkinName;
	declare Text SkinUrl;
	declare Text SkinPrestigeOptions;
	declare Text SquadId;
	declare Text SquadType;
	declare Integer TimeStamp;
	switchtype (_NotificationTask.Notification) {
		case CNotification_SquadMemberRemoved: {
			declare CNotification_SquadMemberRemoved Notification_SquadMemberRemoved <=> (_NotificationTask.Notification as CNotification_SquadMemberRemoved);
			AccountId = Notification_SquadMemberRemoved.MemberAccountId;
			DisplayName = Notification_SquadMemberRemoved.MemberDisplayName;
			IsFirstPartyDisplayName = Notification_SquadMemberRemoved.MemberIsFirstPartyDisplayName;
			ZoneUrl = Notification_SquadMemberRemoved.MemberCountryFlagUrl;
			SquadId = Notification_SquadMemberRemoved.SquadId;
			TimeStamp = Notification_SquadMemberRemoved.TimeStamp;
			SquadType = Notification_SquadMemberRemoved.SquadType;
		}
	}
	if (SquadId != "") {
		declare Common::K_Notification NewNotif = Common::K_Notification {
			Type = _NotificationTask.Notification.Type,
			AccountId = AccountId,
			DisplayName = DisplayName,
			IsFirstPartyDisplayName = IsFirstPartyDisplayName,
			ZoneUrl = ZoneUrl,
			SkinName = SkinName,
			SkinUrl = SkinUrl,
			SkinPrestigeOptions = SkinPrestigeOptions,
			SquadId = SquadId,
			SquadType = SquadType,
			TimeStamp = TimeStamp
		};
		AddNotification(NewNotif);
	}
}