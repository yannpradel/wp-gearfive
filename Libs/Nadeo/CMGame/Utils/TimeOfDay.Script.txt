/**
 *	Component: TimeOfDay
 *	Get the current time of day (sunrise, day, sunset, night)
 */
#Const Version "1.0.0"
#Const ScriptName "Libs/Nadeo/CMGame/Utils/TimeOfDay.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TimeLib" as TiL
#Include "MathLib" as ML

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_DayPart_Null -1
#Const C_DayPart_NightSunrise 0
#Const C_DayPart_Sunrise 1
#Const C_DayPart_SunriseDay 2
#Const C_DayPart_Day 3
#Const C_DayPart_DaySunset 4
#Const C_DayPart_Sunset 5
#Const C_DayPart_SunsetNight 6
#Const C_DayPart_Night 7

#Const C_TimeRange_Null 0.
#Const C_TimeRange_NightSunrise 0.166 //< 04:00
#Const C_TimeRange_Sunrise 0.25 //< 06:00
#Const C_TimeRange_SunriseDay 0.333 //< 08:00
#Const C_TimeRange_Day 0.375 //< 09:00
#Const C_TimeRange_DaySunset 0.708 //< 17:00
#Const C_TimeRange_Sunset 0.75 //< 18:00
#Const C_TimeRange_SunsetNight 0.833 //< 20:00
#Const C_TimeRange_Night 0.875 //< 21:00

#Const C_Default_ForcedDayProgressionEnabled False
#Const C_Default_ForcedDayProgression 0.5

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Real GetDayProgression(Real _SpeedMultiplier) {
	declare Boolean LibTimeOfDay_ForcedDayProgressionEnabled for System = C_Default_ForcedDayProgressionEnabled;
	if (LibTimeOfDay_ForcedDayProgressionEnabled) {
		declare Real LibTimeOfDay_ForcedDayProgression for System = C_Default_ForcedDayProgression;
		return LibTimeOfDay_ForcedDayProgression;
	}
	return ML::Mod(TiL::Clamp01TZDay(TiL::GetCurrent()) * _SpeedMultiplier, 0., 1.);
}
Real GetDayProgression() {
	declare Boolean LibTimeOfDay_ForcedDayProgressionEnabled for System = C_Default_ForcedDayProgressionEnabled;
	if (LibTimeOfDay_ForcedDayProgressionEnabled) {
		declare Real LibTimeOfDay_ForcedDayProgression for System = C_Default_ForcedDayProgression;
		return LibTimeOfDay_ForcedDayProgression;
	}
	return TiL::Clamp01TZDay(TiL::GetCurrent());
}

Void SetForcedDayProgression(Real _DayProgression) {
	declare Boolean LibTimeOfDay_ForcedDayProgressionEnabled for System = C_Default_ForcedDayProgressionEnabled;
	declare Real LibTimeOfDay_ForcedDayProgression for System = C_Default_ForcedDayProgression;
	LibTimeOfDay_ForcedDayProgressionEnabled = True;
	LibTimeOfDay_ForcedDayProgression = ML::Clamp(_DayProgression, 0., 1.);
}
Void ResetForcedDayProgression() {
	declare Boolean LibTimeOfDay_ForcedDayProgressionEnabled for System = C_Default_ForcedDayProgressionEnabled;
	LibTimeOfDay_ForcedDayProgressionEnabled = False;
}

Integer GetDayPart(Real _DayProgression, Boolean _UseTransitionPart) {
	if (_UseTransitionPart && _DayProgression >= C_TimeRange_NightSunrise && _DayProgression < C_TimeRange_Sunrise) {
		return C_DayPart_NightSunrise;
	} else if (_DayProgression >= C_TimeRange_Sunrise && _DayProgression < C_TimeRange_Day) {
		if (_UseTransitionPart && _DayProgression >= C_TimeRange_SunriseDay) {
			return C_DayPart_SunriseDay;
		} else {
			return C_DayPart_Sunrise;
		}
	} else if (_DayProgression >= C_TimeRange_Day && _DayProgression < C_TimeRange_Sunset) {
		if (_UseTransitionPart && _DayProgression >= C_TimeRange_DaySunset) {
			return C_DayPart_DaySunset;
		} else {
			return C_DayPart_Day;
		}
	} else if (_DayProgression >= C_TimeRange_Sunset && _DayProgression < C_TimeRange_Night) {
		if (_UseTransitionPart && _DayProgression >= C_TimeRange_SunsetNight) {
			return C_DayPart_SunsetNight;
		} else {
			return C_DayPart_Sunset;
		}
	}
	return C_DayPart_Night;
}

Real GetTimeRange(Integer _DayPart) {
	switch (_DayPart) {
		case C_DayPart_NightSunrise: return C_TimeRange_NightSunrise;
		case C_DayPart_Sunrise: return C_TimeRange_Sunrise;
		case C_DayPart_SunriseDay: return C_TimeRange_SunriseDay;
		case C_DayPart_Day: return C_TimeRange_Day;
		case C_DayPart_DaySunset: return C_TimeRange_DaySunset;
		case C_DayPart_Sunset: return C_TimeRange_Sunset;
		case C_DayPart_SunsetNight: return C_TimeRange_SunsetNight;
		case C_DayPart_Night: return C_TimeRange_Night;
	}
	return C_TimeRange_Null;
}