/**
 *	AudioManager: manialink functions
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/CMGame/Utils/AudioManager_ML.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Event_PlaySound "Event_PlaySound"
#Const C_Event_PlaySoundWithDelay "Event_PlaySoundWithDelay"
#Const C_Event_RemoveDelayedSounds "Event_RemoveDelayedSounds"
#Const C_Event_DestroyDuplicatedSources "Event_DestroyDuplicatedSources"
#Const C_Event_StopSound "Event_StopSound"
#Const C_Event_StopAllSounds "Event_StopAllSounds"
#Const C_Event_SetNewSoundBalance "Event_SetNewSoundBalance"
#Const C_Event_SetFadeDuration "Event_SetFadeDuration"

#Const C_True "True"
#Const C_False "False"

#Const C_Playing_State 0
#Const C_InMenu_State 1
#Const C_PauseMenu_State 2
#Const C_Preload_State 3
#Const C_Mute_State 4
#Const C_Default_State 5

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Play sound according to its name
 *
 *	@param														The name of the sound
 */
Void PlaySound(CMlScript _This, Text _SoundName, Real _PanRadiusLfeX, Real _Pitch) {
	_This.SendCustomEvent(C_Event_PlaySound, [_SoundName, ""^_PanRadiusLfeX, ""^_Pitch]);
}
Void PlaySound(CMlScript _This, Text _SoundName, Real _PanRadiusLfeX) {
	PlaySound(_This, _SoundName, _PanRadiusLfeX, -1.);
}
Void PlaySound(CMlScript _This, Text _SoundName) {
	PlaySound(_This, _SoundName, 0.);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Play sound according to its name with a specified play time
 *
 *	@param _SoundName										The name of the sound
 *	@param _PlayTime										The playing time of the sound
 */
Void PlaySoundWithDelay(CMlScript _This, Text _UIId, Text _SoundName, Integer _PlayTime) {
	_This.SendCustomEvent(C_Event_PlaySoundWithDelay, [_UIId, _SoundName, ""^_PlayTime]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Remove all sounds in the waiting list
 *
 *	@param _UIId											The id of the UI asking to remove delayed sounds
 */
Void RemoveDelayedSounds(CMlScript _This, Text _UIId) {
	_This.SendCustomEvent(C_Event_RemoveDelayedSounds, [_UIId]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Destroy all duplicated audio sources
Void DestroyDuplicatedSources(CMlScript _This) {
	_This.SendCustomEvent(C_Event_DestroyDuplicatedSources, []);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Stop sound according to its name
 *
 *	@param														The name of the sound
 */
Void StopSound(CMlScript _This, Text _SoundName) {
	_This.SendCustomEvent(C_Event_StopSound, [_SoundName]);
}
Void StopSound(CMlScript _This, Text _SoundName, Boolean _RestartSound) {
	declare Text RestartSound = C_False;
	if (_RestartSound) RestartSound = C_True;
	_This.SendCustomEvent(C_Event_StopSound, [_SoundName, RestartSound]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Stop all sounds
Void StopAllSounds(CMlScript _This) {
	_This.SendCustomEvent(C_Event_StopAllSounds, []);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Change sound balance for scene, UI and music
Void SetNewSoundBalance(CMlScript _This, Integer _NewState, Integer _FadeTime) {
	_This.SendCustomEvent(C_Event_SetNewSoundBalance, [""^_NewState, ""^ _FadeTime]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update sound fade duration
Void SetFadeDuration(CMlScript _This, Text _SoundName, Real _FadeDuration) {
	_This.SendCustomEvent(C_Event_SetFadeDuration, [_SoundName, ""^_FadeDuration]);
}