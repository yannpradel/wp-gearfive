/**
 *	Communication restriction utilities
 */
#Const Version "1.0.0"
#Const ScriptName "Libs/Nadeo/CMGame/Utils/CommunicationRestriction.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_CommunicationRestrictionLevel_Unknown 0
#Const C_CommunicationRestrictionLevel_Public 1
#Const C_CommunicationRestrictionLevel_Private 2
#Const C_CommunicationRestrictionLevel_FriendsOnly 3
#Const C_CommunicationRestrictionLevel_FriendsOfFriends 4

//L16N [CommunicationRestriction] Chat consent is set on Private in Ubisoft Family Settings for the local player. Official translation will be added, please do NOT translate this yourself.
#Const C_Text_CommunicationRestrictionLevel_Private _("Chat is disabled. Please visit the Ubisoft Account website for chat settings.")
//L16N [CommunicationRestriction] Chat consent is set on Friends Only in Ubisoft Family Settings for the local player. Official translation will be added, please do NOT translate this yourself.
#Const C_Text_CommunicationRestrictionLevel_FriendsOnly _("Chat is limited to friends. Please visit the Ubisoft Account website for chat settings.")
//L16N [CommunicationRestriction] Chat consent is set on Friends of Friends Only in Ubisoft Family Settings for the local player. Official translation will be added, please do NOT translate this yourself.
#Const C_Text_CommunicationRestrictionLevel_FriendsOfFriends _("Chat is limited to friends of friends. Please visit the Ubisoft Account website for chat settings.")

//L16N [CommunicationRestriction] There is a chat Ubisoft Family Setting set for a squad member. This player cannot speak to everyone in the squad. %1 will be replaced by the player name. e.g "PlayerA's chat is disabled or limited."  Official translation will be added, please do NOT translate this yourself.
#Const C_Text_CommunicationRestriction_SquadMember _("$<%1$>'s chat is disabled or limited.")

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Convert a `CPrivilegeMgr::ECommunicationRestrictionLevel` enum value to an `Integer`
Integer CommunicationRestrictionLevelToInteger(CPrivilegeMgr::ECommunicationRestrictionLevel _CommunicationRestrictionLevel) {
	switch (_CommunicationRestrictionLevel) {
		case CPrivilegeMgr::ECommunicationRestrictionLevel::Public: {
			return C_CommunicationRestrictionLevel_Public;
		}
		case CPrivilegeMgr::ECommunicationRestrictionLevel::Private: {
			return C_CommunicationRestrictionLevel_Private;
		}
		case CPrivilegeMgr::ECommunicationRestrictionLevel::FriendsOnly: {
			return C_CommunicationRestrictionLevel_FriendsOnly;
		}
		case CPrivilegeMgr::ECommunicationRestrictionLevel::FriendsOfFriends: {
			return C_CommunicationRestrictionLevel_FriendsOfFriends;
		}
	}
	return C_CommunicationRestrictionLevel_Unknown;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Convert an `Integer` to a `CPrivilegeMgr::ECommunicationRestrictionLevel` enum value
CPrivilegeMgr::ECommunicationRestrictionLevel IntegerToCommunicationRestrictionLevel(Integer _CommunicationRestrictionLevel) {
	switch (_CommunicationRestrictionLevel) {
		case C_CommunicationRestrictionLevel_Public: {
			return CPrivilegeMgr::ECommunicationRestrictionLevel::Public;
		}
		case C_CommunicationRestrictionLevel_Private: {
			return CPrivilegeMgr::ECommunicationRestrictionLevel::Private;
		}
		case C_CommunicationRestrictionLevel_FriendsOnly: {
			return CPrivilegeMgr::ECommunicationRestrictionLevel::FriendsOnly;
		}
		case C_CommunicationRestrictionLevel_FriendsOfFriends: {
			return CPrivilegeMgr::ECommunicationRestrictionLevel::FriendsOfFriends;
		}
	}
	return CPrivilegeMgr::ECommunicationRestrictionLevel::Unknown;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the player's chat is restricted
Boolean ChatIsRestricted(CPrivilegeMgr::ECommunicationRestrictionLevel _CommunicationRestrictionLevel) {
	return (
		_CommunicationRestrictionLevel == CPrivilegeMgr::ECommunicationRestrictionLevel::Private ||
		_CommunicationRestrictionLevel == CPrivilegeMgr::ECommunicationRestrictionLevel::FriendsOnly ||
		_CommunicationRestrictionLevel == CPrivilegeMgr::ECommunicationRestrictionLevel::FriendsOfFriends
	);
}
Boolean ChatIsRestricted(Integer _CommunicationRestrictionLevel) {
	return ChatIsRestricted(IntegerToCommunicationRestrictionLevel(_CommunicationRestrictionLevel));
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the message to display when a teammate's chat is restricted
Text GetTeammateChatRestrictedMessage(Text _TeammateName) {
	return TL::Compose(C_Text_CommunicationRestriction_SquadMember, _TeammateName);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the message to display when the local player's chat is restricted
Text GetOwnChatRestrictedMessage(CPrivilegeMgr::ECommunicationRestrictionLevel _CommunicationRestrictionLevel) {
	switch (_CommunicationRestrictionLevel) {
		case CPrivilegeMgr::ECommunicationRestrictionLevel::Private: {
			return C_Text_CommunicationRestrictionLevel_Private;
		}
		case CPrivilegeMgr::ECommunicationRestrictionLevel::FriendsOnly: {
			return C_Text_CommunicationRestrictionLevel_FriendsOnly;
		}
		case CPrivilegeMgr::ECommunicationRestrictionLevel::FriendsOfFriends: {
			return C_Text_CommunicationRestrictionLevel_FriendsOfFriends;
		}
	}
	return "";
}
Text GetOwnChatRestrictedMessage(Integer _CommunicationRestrictionLevel) {
	return GetOwnChatRestrictedMessage(IntegerToCommunicationRestrictionLevel(_CommunicationRestrictionLevel));
}