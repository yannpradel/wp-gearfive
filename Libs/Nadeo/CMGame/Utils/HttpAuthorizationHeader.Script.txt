/**
 *	Http authorization header
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/CMGame/Utils/HttpAuthorizationHeader.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get a CManiaPlanet instance
CManiaPlanet Private_GetManiaPlanet(CNod _This) {
	switchtype (_This as Context) {
		case CManiaApp: return Context.ManiaPlanet;
		case CMlManiaPlanet: return Context.ManiaPlanet;
		case CMlStation: return Context.ManiaPlanet;
		case CMlBrowser: return Context.ManiaPlanet;
		case CManiaAppTitleLayer: return Context.ParentApp.ManiaPlanet;
		case CMapEditorPluginLayer: return Context.Editor.ManiaPlanet;
		case CMlScriptIngame: return Context.ParentApp.ManiaPlanet;
		default: {
			// `CMode` is a special case where we manage the token with the `ServerAuth` library on the server
			// So we don't need to get a `CManiaPlanet` instance
			// In every other cases throw a runtime error
			assert((This is CMode), "Context not supported");
		}
	}
	return Null;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the authorization header for the HTTP API
 *
 *	In the development build, `ManiaPlanet` is available everywhere.
 *	In the production build, its access will be limited to the scripts
 *	included in the title pack. Preventing outsiders from gaining
 *	access to the player's tokens.
 */
Text GetLive() {
	declare Text HttpHeader = "";
	declare CManiaPlanet ManiaPlanetInstance <=> Private_GetManiaPlanet(This);
	if (ManiaPlanetInstance != Null) {
		declare Text LibCommonHttpAuthorizationHeader_OverrideHeaderLive for ManiaPlanetInstance = "";
		HttpHeader = LibCommonHttpAuthorizationHeader_OverrideHeaderLive;
		if (HttpHeader == "") {
			declare Text ManiaPlanet_Auth_HttpHeaderLive for ManiaPlanetInstance = "";
			HttpHeader = ManiaPlanet_Auth_HttpHeaderLive;
		}
	}
	return HttpHeader;
}
Text GetClub() {
	declare Text HttpHeader = "";
	declare CManiaPlanet ManiaPlanetInstance <=> Private_GetManiaPlanet(This);
	if (ManiaPlanetInstance != Null) {
		declare Text LibCommonHttpAuthorizationHeader_OverrideHeaderClub for ManiaPlanetInstance = "";
		HttpHeader = LibCommonHttpAuthorizationHeader_OverrideHeaderClub;
		if (HttpHeader == "") {
			declare Text ManiaPlanet_Auth_HttpHeaderClub for ManiaPlanetInstance = "";
			HttpHeader = ManiaPlanet_Auth_HttpHeaderClub;
		}
	}
	return HttpHeader;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the authorization value for the HTTP API
Text Private_ExtractAuthorizationValue(Text _AuthorizationHeader) {
	declare Text[] Matches = TL::RegexMatch("""Authorization\s*:\s*(.+)""", _AuthorizationHeader, "i");
	if (Matches.count > 1) {
		return Matches[1];
	}
	return "";
}
Text GetLiveAuthorizationValue() {
	return Private_ExtractAuthorizationValue(GetLive());
}
Text GetClubAuthorizationValue() {
	return Private_ExtractAuthorizationValue(GetClub());
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Override the automatic authorization header
Void OverrideLive(Text _AuthorizationHeader) {
	declare CManiaPlanet ManiaPlanetInstance <=> Private_GetManiaPlanet(This);
	if (ManiaPlanetInstance != Null) {
		declare Text LibCommonHttpAuthorizationHeader_OverrideHeaderLive for ManiaPlanetInstance = "";
		LibCommonHttpAuthorizationHeader_OverrideHeaderLive = _AuthorizationHeader;
	}
}
Void OverrideClub(Text _AuthorizationHeader) {
	declare CManiaPlanet ManiaPlanetInstance <=> Private_GetManiaPlanet(This);
	if (ManiaPlanetInstance != Null) {
		declare Text LibCommonHttpAuthorizationHeader_OverrideHeaderClub for ManiaPlanetInstance = "";
		LibCommonHttpAuthorizationHeader_OverrideHeaderClub = _AuthorizationHeader;
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if an authentication header is set
Boolean IsSetLive() {
	return (GetLive() != "");
}
Boolean IsSetClub() {
	return (GetClub() != "");
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Reset the authentication headers set by the ManiaPlanet plugin when starting the offline mode
Void ResetForOfflineMode() {
	declare CManiaPlanet ManiaPlanetInstance <=> Private_GetManiaPlanet(This);
	if (ManiaPlanetInstance != Null) {
		declare Text ManiaPlanet_Auth_HttpHeaderLive for ManiaPlanetInstance = "";
		declare Text ManiaPlanet_Auth_HttpHeaderClub for ManiaPlanetInstance = "";
		declare Boolean ManiaPlanet_Auth_TokensRefreshRequested for ManiaPlanetInstance = False;
		ManiaPlanet_Auth_HttpHeaderLive = "";
		ManiaPlanet_Auth_HttpHeaderClub = "";
		ManiaPlanet_Auth_TokensRefreshRequested = True;
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Request a refresh of the tokens
Void RefreshTokens() {
	declare CManiaPlanet ManiaPlanetInstance <=> Private_GetManiaPlanet(This);
	if (ManiaPlanetInstance != Null) {
		declare Boolean ManiaPlanet_Auth_TokensRefreshRequested for ManiaPlanetInstance = False;
		ManiaPlanet_Auth_TokensRefreshRequested = True;
	}
}