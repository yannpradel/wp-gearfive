/**
 *	Task helpers
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/CMGame/Utils/Task.Script.txt"

#Include "Libs/Nadeo/CMGame/Utils/Error.Script.txt" as Error

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_TaskOwner {
	Integer Type;
	CDataFileMgr DataFileMgr;
	CScoreMgr ScoreMgr;
	CTrackingMgr TrackingMgr;
	CUserV2Manager UserMgr;
	CPresenceMgr PresenceMgr;
	/* Not available on the dedicated server
	CManiaPlanet ManiaPlanet;
	CAchievementsManager AchievementsMgr;
	 */
	CRankingsZoneMgr ZoneMgr;
	CWSNotificationManager WSNotificationMgr;
	CMode Mode;
	CPrivilegeMgr PrivilegeMgr;
}

#Struct K_SourceTaskError {
	Text Type;
	Text Code;
	Text Description;
}

#Struct K_Task {
	Ident SourceTaskId;
	K_TaskOwner Owner;
	Ident SystemDialogTaskId;
	CUserV2Manager SystemDialogManager;
	Boolean IsInitialized;
	Boolean IsProcessing;
	Boolean IsSuccess;
	Boolean IsCanceled;
	K_SourceTaskError SourceTaskError;
	Error::K_Error CustomError;
	Text[Text] Metadata;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Owner_Null 0
#Const C_Owner_DataFileMgr 1
#Const C_Owner_ScoreMgr 2
#Const C_Owner_TrackingMgr 3
#Const C_Owner_UserMgr 4
#Const C_Owner_PresenceMgr 5
/* Not available on the dedicated server
#Const C_Owner_ManiaPlanet 6
#Const C_Owner_AchievementsMgr 7
 */
#Const C_Owner_ZoneMgr 8
#Const C_Owner_NotificationMgr 9
#Const C_Owner_Mode 10
#Const C_Owner_PrivilegeMgr 11

#Const C_FirstPartyErrorTypes ["SCE", "GDK"]
#Const C_UbiServicesErrorType "UbiServices"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty task (useful to initialize variables)
K_Task GetEmptyTask() {
	return K_Task {
		SourceTaskId = NullId,
		Owner = K_TaskOwner {
			Type = C_Owner_Null,
			DataFileMgr = Null,
			ScoreMgr = Null,
			TrackingMgr = Null,
			UserMgr = Null,
			PresenceMgr = Null,
			/*
			ManiaPlanet = Null,
			AchievementsMgr = Null,
			 */
			ZoneMgr = Null,
			WSNotificationMgr = Null,
			Mode = Null,
			PrivilegeMgr = Null
		},
		SystemDialogTaskId = NullId,
		SystemDialogManager = Null,
		IsInitialized = False,
		IsProcessing = False,
		IsSuccess = False,
		IsCanceled = False,
		SourceTaskError = K_SourceTaskError {
			Type = "",
			Code = "",
			Description = ""
		},
		CustomError = Error::GetDefaultError(),
		Metadata = []
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Destroy the given task
K_Task Destroy(K_Task _Task) {
	declare K_Task Task = _Task;

	switch (Task.Owner.Type) {
		case C_Owner_DataFileMgr: {
			if (Task.Owner.DataFileMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.DataFileMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case C_Owner_ScoreMgr: {
			if (Task.Owner.ScoreMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.ScoreMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case C_Owner_TrackingMgr: {
			if (Task.Owner.TrackingMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.TrackingMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case C_Owner_UserMgr: {
			if (Task.Owner.UserMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.UserMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case C_Owner_PresenceMgr: {
			if (Task.Owner.PresenceMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.PresenceMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		/*
		case C_Owner_ManiaPlanet: {
			if (Task.Owner.ManiaPlanet.MasterServer_MSTaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.ManiaPlanet.MasterServer_ReleaseMSTaskResult(Task.SourceTaskId);
			}
		}
		case C_Owner_AchievementsMgr: {
			if (Task.Owner.AchievementsMgr.MasterServer_MSTaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.AchievementsMgr.MasterServer_ReleaseMSTaskResult(Task.SourceTaskId);
			}
		}
		 */
		case C_Owner_ZoneMgr: {
			if (Task.Owner.ZoneMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.ZoneMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case C_Owner_NotificationMgr: {
			if (Task.Owner.WSNotificationMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.WSNotificationMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case C_Owner_Mode: {
			if (Task.Owner.Mode.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.Mode.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case C_Owner_PrivilegeMgr: {
			if (Task.Owner.PrivilegeMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.PrivilegeMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
	}

	if (
		Task.SystemDialogTaskId != NullId &&
		Task.SystemDialogManager != Null &&
		Task.SystemDialogManager.TaskResults.existskey(Task.SystemDialogTaskId)
	) {
		Task.SystemDialogManager.TaskResult_Release(Task.SystemDialogTaskId);
	}

	Task.SourceTaskId = NullId;
	Task.SystemDialogTaskId = NullId;
	Task.IsInitialized = False;
	Task.IsProcessing = False;

	return Task;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the `UserMgr` of a nod if it exists
CUserV2Manager GetUserMgr(CNod _Nod) {
	switchtype (_Nod) {
		case CMode: return (_Nod as CMode).UserMgr;
		case CMlScript: return (_Nod as CMlScript).UserMgr;
		case CManiaApp: return (_Nod as CManiaApp).UserMgr;
	}
	return Null;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Create a new task
 *
 *	@param	_Owner										The object that created the task and where it can be retrieved
 *	@param	_SourceTask								The task created by the C++
 *	@param	_SystemDialogManager			Pass a `UserMgr` to enable first party error system dialog
 */
K_Task Create(CNod _Owner, CTaskResult _SourceTask, CUserV2Manager _SystemDialogManager) {
	declare K_Task Task = GetEmptyTask();

	if (_SourceTask != Null) {
		assert(_Owner != Null, "Owner cannot be Null.");

		switchtype (_Owner) {
			case CDataFileMgr: {
				declare CDataFileMgr Owner <=> (_Owner as CDataFileMgr);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in DataFileMgr.");
				Task.Owner.Type = C_Owner_DataFileMgr;
				Task.Owner.DataFileMgr <=> Owner;
			}
			case CScoreMgr: {
				declare CScoreMgr Owner <=> (_Owner as CScoreMgr);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in ScoreMgr.");
				Task.Owner.Type = C_Owner_ScoreMgr;
				Task.Owner.ScoreMgr <=> Owner;
			}
			case CTrackingMgr: {
				declare CTrackingMgr Owner <=> (_Owner as CTrackingMgr);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in TrackingMgr.");
				Task.Owner.Type = C_Owner_TrackingMgr;
				Task.Owner.TrackingMgr <=> Owner;
			}
			case CUserV2Manager: {
				declare CUserV2Manager Owner <=> (_Owner as CUserV2Manager);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in UserMgr.");
				Task.Owner.Type = C_Owner_UserMgr;
				Task.Owner.UserMgr <=> Owner;
			}
			case CPresenceMgr: {
				declare CPresenceMgr Owner <=> (_Owner as CPresenceMgr);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in PresenceMgr.");
				Task.Owner.Type = C_Owner_PresenceMgr;
				Task.Owner.PresenceMgr <=> Owner;
			}
			/*
			case CManiaPlanet: {
				declare CManiaPlanet Owner <=> (_Owner as CManiaPlanet);
				assert(Owner.MasterServer_MSTaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in ManiaPlanet.");
				Task.Owner.Type = C_Owner_ManiaPlanet;
				Task.Owner.ManiaPlanet <=> Owner;
			}
			case CAchievementsManager: {
				declare CAchievementsManager Owner <=> (_Owner as CAchievementsManager);
				assert(Owner.MasterServer_MSTaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in AchievementsMgr.");
				Task.Owner.Type = C_Owner_AchievementsMgr;
				Task.Owner.AchievementsMgr <=> Owner;
			}
			 */
			case CRankingsZoneMgr: {
				declare CRankingsZoneMgr Owner <=> (_Owner as CRankingsZoneMgr);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in ZoneMgr.");
				Task.Owner.Type = C_Owner_ZoneMgr;
				Task.Owner.ZoneMgr <=> Owner;
			}
			case CWSNotificationManager: {
				declare CWSNotificationManager Owner <=> (_Owner as CWSNotificationManager);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in WSNotificationMgr.");
				Task.Owner.Type = C_Owner_NotificationMgr;
				Task.Owner.WSNotificationMgr <=> Owner;
			}
			case CMode: {
				declare CMode Owner <=> (_Owner as CMode);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in CMode.");
				Task.Owner.Type = C_Owner_Mode;
				Task.Owner.Mode <=> Owner;
			}
			case CPrivilegeMgr: {
				declare CPrivilegeMgr Owner <=> (_Owner as CPrivilegeMgr);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in CPrivilegeMgr.");
				Task.Owner.Type = C_Owner_PrivilegeMgr;
				Task.Owner.PrivilegeMgr <=> Owner;
			}
			default: {
				assert(False, "Unknown owner type.");
			}
		}

		Task.SourceTaskId = _SourceTask.Id;
		Task.SystemDialogTaskId = NullId;
		Task.SystemDialogManager <=> _SystemDialogManager;
		Task.IsInitialized = True;
		Task.IsProcessing = _SourceTask.IsProcessing;
		Task.IsSuccess = _SourceTask.HasSucceeded && !_SourceTask.HasFailed && !_SourceTask.IsCanceled;
		Task.IsCanceled = _SourceTask.IsCanceled;
		Task.SourceTaskError.Type = _SourceTask.ErrorType;
		Task.SourceTaskError.Code = _SourceTask.ErrorCode;
		Task.SourceTaskError.Description = _SourceTask.ErrorDescription;
		if (!_SourceTask.IsProcessing && !_SourceTask.HasSucceeded) {
			Task.CustomError = Error::GetError(Task.SourceTaskError.Type, Task.SourceTaskError.Code);
		}
	} else {
		Task.SourceTaskId = NullId;
		Task.Owner.Type = C_Owner_Null;
		Task.SystemDialogTaskId = NullId;
		Task.SystemDialogManager = Null;
		Task.IsInitialized = True;
		Task.IsProcessing = False;
		Task.IsSuccess = False;
		Task.IsCanceled = False;
		Task.SourceTaskError.Type = Error::C_Type_ManiaScript;
		Task.SourceTaskError.Code = Error::C_Code_ManiaScript_TaskCreationFailed;
		Task.CustomError = Error::GetError(Task.SourceTaskError.Type, Task.SourceTaskError.Code);
	}

	return Task;
}
K_Task Create(CNod _Owner, CTaskResult _SourceTask) {
	return Create(_Owner, _SourceTask, GetUserMgr(This));
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// The task has been initialized
Boolean IsInitialized(K_Task _Task) {
	return _Task.IsInitialized;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the task is ongoing
Boolean IsRunning(K_Task _Task) {
	return _Task.IsProcessing;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the task completed successfully
Boolean IsSuccess(K_Task _Task) {
	return _Task.IsSuccess;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the task has been canceled
Boolean IsCanceled(K_Task _Task) {
	return _Task.IsCanceled;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Destroy the previous task and create a new one
K_Task DestroyAndCreate(K_Task _PreviousTask, CNod _Owner, CTaskResult _SourceTask, CUserV2Manager _SystemDialogManager) {
	if (IsInitialized(_PreviousTask)) {
		Destroy(_PreviousTask);
	}
	return Create(_Owner, _SourceTask, _SystemDialogManager);
}
K_Task DestroyAndCreate(K_Task _PreviousTask, CNod _Owner, CTaskResult _SourceTask) {
	return DestroyAndCreate(_PreviousTask, _Owner, _SourceTask, GetUserMgr(This));
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Destroy the task if it is initialized
K_Task DestroyIfInitialized(K_Task _Task) {
	if (IsInitialized(_Task)) return Destroy(_Task);
	return _Task;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get C++ source task
CTaskResult GetSourceTask(K_Task _Task) {
	switch (_Task.Owner.Type) {
		case C_Owner_DataFileMgr: {
			if (_Task.Owner.DataFileMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.DataFileMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		case C_Owner_ScoreMgr: {
			if (_Task.Owner.ScoreMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.ScoreMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		case C_Owner_TrackingMgr: {
			if (_Task.Owner.TrackingMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.TrackingMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		case C_Owner_UserMgr: {
			if (_Task.Owner.UserMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.UserMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		case C_Owner_PresenceMgr: {
			if (_Task.Owner.PresenceMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.PresenceMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		/*
		case C_Owner_ManiaPlanet: {
			if (_Task.Owner.ManiaPlanet.MasterServer_MSTaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.ManiaPlanet.MasterServer_MSTaskResults[_Task.SourceTaskId];
			}
		}
		case C_Owner_AchievementsMgr: {
			if (_Task.Owner.AchievementsMgr.MasterServer_MSTaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.AchievementsMgr.MasterServer_MSTaskResults[_Task.SourceTaskId];
			}
		}
		 */
		case C_Owner_ZoneMgr: {
			if (_Task.Owner.ZoneMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.ZoneMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		case C_Owner_NotificationMgr: {
			if (_Task.Owner.WSNotificationMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.WSNotificationMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		case C_Owner_Mode: {
			if (_Task.Owner.Mode.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.Mode.TaskResults[_Task.SourceTaskId];
			}
		}
		case C_Owner_PrivilegeMgr: {
			if (_Task.Owner.PrivilegeMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.PrivilegeMgr.TaskResults[_Task.SourceTaskId];
			}
		}
	}

	return Null;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get C++ source task and cast it to a given type
CTaskResult_AccountTrophyGainHistory GetSourceTask_AccountTrophyGainHistory(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_AccountTrophyGainHistory);
	return Null;
}
CTaskResult_AccountTrophyGainList GetSourceTask_AccountTrophyGainList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_AccountTrophyGainList);
	return Null;
}
CTaskResult_AccountTrophyLastYearSummary GetSourceTask_AccountTrophyLastYearSummary(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_AccountTrophyLastYearSummary);
	return Null;
}
CTaskResult_Connect GetSourceTask_Connect(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_Connect);
	return Null;
}
CTaskResult_FileList GetSourceTask_FileList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_FileList);
	return Null;
}
CTaskResult_GameModeList GetSourceTask_GameModeList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_GameModeList);
	return Null;
}
CTaskResult_GetDisplayNameResult GetSourceTask_GetDisplayNameResult(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_GetDisplayNameResult);
	return Null;
}
CTaskResult_Ghost GetSourceTask_Ghost(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_Ghost);
	return Null;
}
CTaskResult_GhostList GetSourceTask_GhostList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_GhostList);
	return Null;
}
CTaskResult_MapList GetSourceTask_MapList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_MapList);
	return Null;
}
CTaskResult_MapRecordList GetSourceTask_MapRecordList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_MapRecordList);
	return Null;
}
CTaskResult_NSItemCollection GetSourceTask_NSItemCollection(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_NSItemCollection);
	return Null;
}
CTaskResult_NSItemCollectionList GetSourceTask_NSItemCollectionList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_NSItemCollectionList);
	return Null;
}
CTaskResult_NSMap GetSourceTask_NSMap(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_NSMap);
	return Null;
}
CTaskResult_NSMapList GetSourceTask_NSMapList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_NSMapList);
	return Null;
}
CTaskResult_NSSkin GetSourceTask_NSSkin(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_NSSkin);
	return Null;
}
CTaskResult_NSSkinList GetSourceTask_NSSkinList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_NSSkinList);
	return Null;
}
CTaskResult_ReplayList GetSourceTask_ReplayList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_ReplayList);
	return Null;
}
CTaskResult_Season GetSourceTask_Season(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_Season);
	return Null;
}
CTaskResult_SeasonList GetSourceTask_SeasonList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_SeasonList);
	return Null;
}
CTaskResult_ClubTagList GetSourceTask_ClubTagList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_ClubTagList);
	return Null;
}
CTaskResult_TrophySoloMedalAchievementSettings GetSourceTask_TrophySoloMedalAchievementSettings(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_TrophySoloMedalAchievementSettings);
	return Null;
}
CTaskResult_ZoneList GetSourceTask_ZoneList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_ZoneList);
	return Null;
}
CTaskResult_FriendList GetSourceTask_FriendList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_FriendList);
	return Null;
}
CTaskResult_Squad GetSourceTask_Squad(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_Squad);
	return Null;
}
CTaskResult_WSNotification GetSourceTask_WSNotification(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_WSNotification);
	return Null;
}
CWebServicesTaskResult_GhostDriver_Download GetSourceTask_GhostDriver_Download(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CWebServicesTaskResult_GhostDriver_Download);
	return Null;
}
CTaskResult_UserZoneList GetSourceTask_UserZoneList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_UserZoneList);
	return Null;
}
CTaskResult_Bool GetSourceTask_Bool(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_Bool);
	return Null;
}
CTaskResult_UserNewsList GetSourceTask_UserNewsList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_UserNewsList);
	return Null;
}
CTaskResult_UserPrestige GetSourceTask_UserPrestige(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_UserPrestige);
	return Null;
}
CTaskResult_UserPrestigeList GetSourceTask_UserPrestigeList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_UserPrestigeList);
	return Null;
}
CTaskResult_PrestigeList GetSourceTask_PrestigeList(K_Task _Task) {
	declare CTaskResult Task = GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_PrestigeList);
	return Null;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the source task error object
K_SourceTaskError GetSourceTaskError(K_Task _Task) {
	return _Task.SourceTaskError;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the task custom error object
Error::K_Error GetCustomError(K_Task _Task) {
	return _Task.CustomError;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the task failed because of a first party error
Boolean IsFirstPartyError(K_Task _Task) {
	return C_FirstPartyErrorTypes.exists(_Task.SourceTaskError.Type);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the task failed because of a UbiServices error
Boolean IsUbiServicesError(K_Task _Task) {
	return _Task.SourceTaskError.Type == C_UbiServicesErrorType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update on ongoing task
K_Task Update(K_Task _Task) {
	if (!_Task.IsProcessing) return _Task;

	declare K_Task Task = _Task;

	// We are displaying the error system dialog
	if (Task.SystemDialogTaskId != NullId) {
		if (
			!Task.SystemDialogManager.TaskResults.existskey(Task.SystemDialogTaskId) ||
			!Task.SystemDialogManager.TaskResults[Task.SystemDialogTaskId].IsProcessing
		) {
			Task.IsProcessing = False;
		}
	}
	// The task is processing
	else {
		declare CTaskResult SourceTask = GetSourceTask(Task);

		if (SourceTask != Null) {
			if (!SourceTask.IsProcessing) {
				Task.IsSuccess = SourceTask.HasSucceeded && !SourceTask.HasFailed && !SourceTask.IsCanceled;
				Task.IsCanceled = SourceTask.IsCanceled;
				Task.SourceTaskError.Type = SourceTask.ErrorType;
				Task.SourceTaskError.Code = SourceTask.ErrorCode;
				Task.SourceTaskError.Description = SourceTask.ErrorDescription;
				if (!SourceTask.HasSucceeded) {
					Task.CustomError = Error::GetError(Task.SourceTaskError.Type, Task.SourceTaskError.Code);
				}

				// Display the error system dialog
				if (
					Task.SystemDialogManager != Null &&
					!Task.IsSuccess &&
					IsFirstPartyError(Task)
				) {
					declare CTaskResult ShowSystemDialogTask <=> Task.SystemDialogManager.TaskError_ShowSystemDialog(Task.SystemDialogManager.MainUser.Id, Task.SourceTaskError.Code);
					if (ShowSystemDialogTask != Null) {
						Task.SystemDialogTaskId = ShowSystemDialogTask.Id;
					} else {
						Task.IsProcessing = False;
					}

					// We cannot display first party error code
					// see: /trackmania-next/tmnext/-/issues/4306
					// Replace error description and code by something generic
					//L16N [LibTask] Generic error message displayed when something goes wrong but we cannot give details about it
					Task.SourceTaskError.Description = _("An error occurred");
					Task.SourceTaskError.Code = "";
				} else {
					Task.IsProcessing = False;
				}
			}
		} else {
			Task.IsProcessing = False;
			Task.IsSuccess = False;
			Task.IsCanceled = False;
			Task.SourceTaskError.Type = Error::C_Type_ManiaScript;
			Task.SourceTaskError.Code = Error::C_Code_ManiaScript_TaskNotFound;
			Task.CustomError = Error::GetError(Task.SourceTaskError.Type, Task.SourceTaskError.Code);
		}
	}

	return Task;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Cancel on ongoing task
Void Cancel(K_Task _Task) {
	declare CTaskResult SourceTask = GetSourceTask(_Task);
	if (SourceTask != Null) {
		SourceTask.Cancel();
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Add metadata on a task
K_Task SetMetadata(K_Task _Task, Text[Text] _Metadata) {
	declare K_Task Task = _Task;
	foreach (Key => Value in _Metadata) {
		Task.Metadata[Key] = Value;
	}
	return Task;
}
K_Task SetMetadata(K_Task _Task, Text _Key, Text _Value) {
	declare K_Task Task = _Task;
	Task.Metadata[_Key] = _Value;
	return Task;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Remove all metadata from a task
K_Task ResetMetadata(K_Task _Task) {
	declare K_Task Task = _Task;
	Task.Metadata = [];
	return Task;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get metadata from a task
Text[Text] GetMetadata(K_Task _Task) {
	return _Task.Metadata;
}
Text GetMetadata(K_Task _Task, Text _Key) {
	return _Task.Metadata.get(_Key, "");
}