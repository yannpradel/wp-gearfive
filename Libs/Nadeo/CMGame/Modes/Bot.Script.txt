/**
 *	Bots management
 */
#Const Version		"1.0.0"
#Const ScriptName	"Libs/Nadeo/CMGame/Modes/Bot.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "MathLib" as ML

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_NameStyle_Default 1
#Const C_NameStyle_All -1
#Const C_NameStyle_Name 0
#Const C_NameStyle_Nickname 1

#Const C_Names [
	// Name => 0
	["James", "Robert", "John", "Michael", "William", "David", "Richard", "Joseph", "Thomas", "Charles", "Christopher", "Daniel", "Matthew", "Anthony", "Mark", "Donald", "Steven", "Paul", "Andrew", "Joshua", "Kenneth", "Kevin", "Brian", "George", "Edward", "Ronald", "Timothy", "Jason", "Jeffrey", "Ryan", "Jacob", "Gary", "Nicholas", "Eric", "Jonathan", "Stephen", "Larry", "Justin", "Scott", "Brandon", "Benjamin", "Samuel", "Gregory", "Frank", "Alexander", "Raymond", "Patrick", "Jack", "Dennis", "Jerry", "Tyler", "Aaron", "Jose", "Adam", "Henry", "Nathan", "Douglas", "Zachary", "Peter", "Kyle", "Walter", "Ethan", "Jeremy", "Harold", "Keith", "Christian", "Roger", "Noah", "Gerald", "Carl", "Terry", "Sean", "Austin", "Arthur", "Lawrence", "Jesse", "Dylan", "Bryan", "Joe", "Jordan", "Billy", "Bruce", "Albert", "Willie", "Gabriel", "Logan", "Alan", "Juan", "Wayne", "Roy", "Ralph", "Randy", "Eugene", "Vincent", "Russell", "Elijah", "Louis", "Bobby", "Philip", "Johnny Mary", "Patricia", "Jennifer", "Linda", "Elizabeth", "Barbara", "Susan", "Jessica", "Sarah", "Karen", "Nancy", "Lisa", "Betty", "Margaret", "Sandra", "Ashley", "Kimberly", "Emily", "Donna", "Michelle", "Dorothy", "Carol", "Amanda", "Melissa", "Deborah", "Stephanie", "Rebecca", "Sharon", "Laura", "Cynthia", "Kathleen", "Amy", "Shirley", "Angela", "Helen", "Anna", "Brenda", "Pamela", "Nicole", "Emma", "Samantha", "Katherine", "Christine", "Debra", "Rachel", "Catherine", "Carolyn", "Janet", "Ruth", "Maria", "Heather", "Diane", "Virginia", "Julie", "Joyce", "Victoria", "Olivia", "Kelly", "Christina", "Lauren", "Joan", "Evelyn", "Judith", "Megan", "Cheryl", "Andrea", "Hannah", "Martha", "Jacqueline", "Frances", "Gloria", "Ann", "Teresa", "Kathryn", "Sara", "Janice", "Jean", "Alice", "Madison", "Doris", "Abigail", "Julia", "Judy", "Grace", "Denise", "Amber", "Marilyn", "Beverly", "Danielle", "Theresa", "Sophia", "Marie", "Diana", "Brittany", "Natalie", "Isabella", "Charlotte", "Rose", "Alexis", "Kayla"],
	// Nickname => 1
	["FredoElDinguo", "MikeRoupachere85", "Lolforever", "SamLowry13", "JohnDifool", "AlphaStars", "[RR] Alex", "[RR] Ed", "Roanokay", "Pharos11", "Moonlighter", "CitarNosis", "Cothurnal", "ImpPlant10", "Pelfox", "KookSpook", "Picaresque78", "Robotik", "Fascro112", "JosuneEsGaizka", "[GZK] Pedro_Nieto", "DeliciaRodriGAZ", "josu153", "Enterrancia", "ByIbox", "Nieto_Ibon9", "GabrielThePulpo", "ManuMonzon", "[TY] C_SanGabriel12", "segundo6alas", "Bazkaria", "Binefar_Bl4ck", "Dvanjo", "ProstaSnoozy", "B3tsy", "Pakspa", "Kraady", "Kom_", "Rikenso", "Sulus", "Zies", "TeeKay", "Ezerka", "Kewi", "Narioka", "Tuddy", "WhiteLotus", "Kander", "Sync", "pauris", "yepssa", "rich_e", "kuustik", "Syber-Chot", "DragonsDontExist", "Syans", "Lorantez", "MrCopper", "PenguinLeader", "OldschoolDriver", "ImaginaryPilot", "FastNotFurious", "ElBulio", "x_sami_x", "Randalf0", "ramdstein", "Severin", "goudastic", "TheKev", "[M2] TrackMeisterr", "SETHgolden", "A08-is-valid", "NandOil", "AIM.set.off", "Supress_z", "PlanetsHarvester", "Waaer", "M.Rossi", "AeroSputnik", "BonkMaster", "LamaLeak", "PigeonFall", "LoveNEO", "GAMEDaBestTM", "icespark", "ionic_", "[SEAL] DarthSealius", "Neo.Jumper", "Tezla", "Lani", "Kadden", "Deezel", "Markye", "Mitch", "Taro", "Tork", "Nolo", "Karma", "Kurt", "Shirako", "Tone", "Vert", "CarlSenior", "A08Lover08", "TheBronzeMedalDriver", "NinthPlaceAndy", "FischmaulMarkus", "Mr.BluRay", "Glass_Pilot", "GrayMan", "InvalidReplay", "Trackmaster", "OneZero", "PaperMedal", "Sophia", "Atlas", "NoMind", "NandoMinion", "Random.Imputs", "Noob_Cheater", "GigVariant", "WithoutSkill", "JustForFun", "MagnusDoe", "AlottefSlide", "MantleESCape", "Foxwort", "Outtafuel", "OrionthreeTM", "Dancefun", "Goatspeare", "Fanoftastic", "Mikeowets_Grass", "FastElane_Only", "Hol_DeGeer", "GripeskeyTM", "Simon_Coeur", "refridgzerator", "Chlorophylis", "Brenoufzor", "Carlibou", "Moskito", "AidenDrill", "PersianPrince", "EzioOfTheRoofs", "RavenLaurie", "HannoTheDog", "StinkyFerretBoy", "DressUpQueen", "AlpacaSupremacy", "AxolotlRights", "StarStarSpace", "ChonkNoises", "ChickenBlock", "MayorLewis", "PamRacerBus", "SadCannibal", "RaccoonHands", "TPShortage", "ChatNoir", "ActualMothman", "BobBelcher", "Villaneve", "HappySnail", "SquishyBlue", "OGTomNook", "FuriousPikachu", "WendigoApocalypse", "IronmanDeficiency", "TrackmaniaFanfics", "EatMyShorts", "FinnTheHuman", "DeatheaterSquad", "LukesLostHand", "SmapiSmartmi", "ElectricTopsy", "MerlinsBeard", "Preciousssssss", "AlexaPlayDespacito", "ItsWednesdayMyDudes", "ROADWorkAhead", "FalafelLove", "NoTomatoNoOnion"]
]
#Const C_CountriesPaths [
	// Africa
	"World|Africa|Algeria", "World|Africa|Angola", "World|Africa|Benin", "World|Africa|Botswana", "World|Africa|Burkina Faso", "World|Africa|Burundi", "World|Africa|Cameroon", "World|Africa|Cabo Verde", "World|Africa|Central African Republic", "World|Africa|Chad", "World|Africa|Comoros", "World|Africa|Congo", "World|Africa|Djibouti", "World|Africa|DR Congo", "World|Africa|Equatorial Guinea", "World|Africa|Eritrea", "World|Africa|Ethiopia", "World|Africa|Gabon", "World|Africa|Ghana", "World|Africa|Guinea", "World|Africa|Guinea-Bissau", "World|Africa|Ivory Coast", "World|Africa|Kenya", "World|Africa|Lesotho", "World|Africa|Liberia", "World|Africa|Libya", "World|Africa|Madagascar", "World|Africa|Malawi", "World|Africa|Mali", "World|Africa|Mauritania", "World|Africa|Mauritius", "World|Africa|Morocco", "World|Africa|Mozambique", "World|Africa|Namibia", "World|Africa|Niger", "World|Africa|Nigeria", "World|Africa|Rwanda", "World|Africa|São Tomé and Príncipe", "World|Africa|Senegal", "World|Africa|Seychelles", "World|Africa|Sierra Leone", "World|Africa|Somalia", "World|Africa|South Africa", "World|Africa|South Sudan", "World|Africa|Sudan", "World|Africa|Tanzania", "World|Africa|The Gambia", "World|Africa|Togo", "World|Africa|Tunisia", "World|Africa|Uganda", "World|Africa|Zambia", "World|Africa|Zimbabwe",
	// Asia
	"World|Asia|Afghanistan", "World|Asia|Armenia", "World|Asia|Azerbaijan", "World|Asia|Bangladesh", "World|Asia|Bhutan", "World|Asia|Brunei", "World|Asia|Cambodia", "World|Asia|Mainland China", "World|Asia|Georgia", "World|Asia|Hong Kong", "World|Asia|India", "World|Asia|Indonesia", "World|Asia|Japan", "World|Asia|Kazakhstan", "World|Asia|Kyrgyzstan", "World|Asia|Laos", "World|Asia|Malaysia", "World|Asia|Maldives", "World|Asia|Mongolia", "World|Asia|Myanmar", "World|Asia|Nepal", "World|Asia|North Korea", "World|Asia|Pakistan", "World|Asia|Philippines", "World|Asia|Singapore", "World|Asia|South Korea", "World|Asia|Sri Lanka", "World|Asia|Taïwan", "World|Asia|Tajikistan", "World|Asia|Thailand", "World|Asia|Timor-Leste", "World|Asia|Turkmenistan", "World|Asia|Uzbekistan", "World|Asia|Vietnam",
	// Europe
	"World|Europe|Albania", "World|Europe|Andorra", "World|Europe|Austria", "World|Europe|Belarus", "World|Europe|Belgium", "World|Europe|Bosnia and Herzegovina", "World|Europe|Bulgaria", "World|Europe|Croatia", "World|Europe|Cyprus", "World|Europe|Czechia", "World|Europe|Denmark", "World|Europe|Estonia", "World|Europe|Finland", "World|Europe|France", "World|Europe|Germany", "World|Europe|Greece", "World|Europe|Hungary", "World|Europe|Iceland", "World|Europe|Ireland", "World|Europe|Italy", "World|Europe|Latvia", "World|Europe|Liechtenstein", "World|Europe|Lithuania", "World|Europe|Luxembourg", "World|Europe|North Macedonia", "World|Europe|Malta", "World|Europe|Moldova", "World|Europe|Monaco", "World|Europe|Montenegro", "World|Europe|Netherlands", "World|Europe|Norway", "World|Europe|Poland", "World|Europe|Portugal", "World|Europe|Romania", "World|Europe|Russia", "World|Europe|San Marino", "World|Europe|Serbia", "World|Europe|Slovakia", "World|Europe|Slovenia", "World|Europe|Spain", "World|Europe|Sweden", "World|Europe|Switzerland", "World|Europe|Türkiye", "World|Europe|Ukraine", "World|Europe|United Kingdom",
	// Middle East
	"World|Middle East|Bahrain", "World|Middle East|Egypt", "World|Middle East|Iran", "World|Middle East|Iraq", "World|Middle East|Israel", "World|Middle East|Jordan", "World|Middle East|Kuwait", "World|Middle East|Lebanon", "World|Middle East|Oman", "World|Middle East|Qatar", "World|Middle East|Saudi Arabia", "World|Middle East|Syria", "World|Middle East|United Arab Emirates", "World|Middle East|Yemen",
	// North America
	"World|North America|Antigua and Barbuda", "World|North America|Bahamas", "World|North America|Barbados", "World|North America|Belize", "World|North America|Canada", "World|North America|Costa Rica", "World|North America|Cuba", "World|North America|Dominica", "World|North America|Dominican Republic", "World|North America|El Salvador", "World|North America|Grenada", "World|North America|Haiti", "World|North America|Honduras", "World|North America|Jamaica", "World|North America|Mexico", "World|North America|Nicaragua", "World|North America|Saint Kitts and Nevis", "World|North America|Saint Lucia", "World|North America|Saint Vincent and the Grenadines", "World|North America|Trinidad and Tobago", "World|North America|United States",
	// Oceania
	"World|Oceania|Australia", "World|Oceania|Fiji", "World|Oceania|Marshall Islands", "World|Oceania|Micronesia", "World|Oceania|Nauru", "World|Oceania|New Zealand", "World|Oceania|Palau", "World|Oceania|Papua New Guinea", "World|Oceania|Samoa", "World|Oceania|Solomon Islands", "World|Oceania|Tonga", "World|Oceania|Tuvalu", "World|Oceania|Vanuatu",
	// South America
	"World|South America|Argentina", "World|South America|Bolivia", "World|South America|Brazil", "World|South America|Chile", "World|South America|Colombia", "World|South America|Ecuador", "World|South America|Guatemala", "World|South America|Guyana", "World|South America|Panama", "World|South America|Paraguay", "World|South America|Peru", "World|South America|Suriname", "World|South America|Uruguay", "World|South America|Venezuela"
]
#Const C_LetterToNumber ["A" => 0, "B" => 1, "C" => 2, "D" => 3, "E" => 4, "F" => 5, "G" => 6, "H" => 7, "I" => 8, "J" => 9, "K" => 10, "L" => 11, "M" => 12, "N" => 13, "O" => 14, "P" => 15, "Q" => 16, "R" => 17, "S" => 18, "T" => 19, "U" => 20, "V" => 21, "W" => 22, "X" => 23, "Y" => 24, "Z" => 25]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Text[][Integer] G_Names;
declare Text[] G_AllNames;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get all available names of a given style
Text[] GetNames(Integer _Style) {
	if (_Style == C_NameStyle_All) {
		if (G_AllNames.count <= 0) {
			foreach (Names in C_Names) {
				if (G_AllNames.count <= 0) {
					G_AllNames = Names;
				} else {
					foreach (Name in Names) {
						G_AllNames.add(Name);
					}
				}
			}
		}
		return G_AllNames;
	} else if (C_Names.existskey(_Style)) {
		return C_Names[_Style];
	} else {
		log("WARNING [Bot] GetNames() > The style you requested ("^_Style^") is not valid.");
	}

	return [];
}
Text[] GetNames() {
	return GetNames(C_NameStyle_Default);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get a random bot name
Text GetRandomName(Integer _Style) {
	declare Text[] Names = GetNames(_Style);
	if (Names.count <= 0) return "";
	return Names[ML::Rand(0, Names.count - 1)];
}
Text GetRandomName() {
	return GetRandomName(C_NameStyle_Default);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get a unique bot name
Text GetUniqueName(Integer _Style) {
	if (!G_Names.existskey(_Style) || G_Names[_Style].count <= 0) {
		G_Names[_Style] = GetNames(_Style);
	}
	if (G_Names[_Style].count <= 0) return "";

	declare Integer Key = ML::Rand(0, G_Names[_Style].count - 1);
	declare Text Name = G_Names[_Style][Key];
	G_Names[_Style].removekey(Key);
	return Name;
}
Text GetUniqueName() {
	return GetUniqueName(C_NameStyle_Default);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// From a bot name get a constant country path
Text GetCountryPath(Text _BotName) {
	declare Text FirstLetter = "";
	declare Text SecondLetter = "";
	if (TL::Length(_BotName) > 0) {
		FirstLetter = TL::ToUpperCase(TL::SubText(_BotName, 0, 1));
		if (TL::Length(_BotName) > 1) {
			SecondLetter = TL::ToUpperCase(TL::SubText(_BotName, 1, 1));
		}
	}
	declare Integer Key = C_LetterToNumber.get(FirstLetter, 0) + (C_LetterToNumber.get(SecondLetter, 0) * C_LetterToNumber.count);
	return C_CountriesPaths[Key % C_CountriesPaths.count];
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the country flag url of a bot
Text GetCountryFlagUrl(Text _BotName) {
	return "file://ZoneFlags/Path/"^GetCountryPath(_BotName);
}