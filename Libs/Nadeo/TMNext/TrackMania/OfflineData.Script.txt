/** 
 *	Lib to load offline data
 */
#Const Version		"2022-05-05"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/OfflineData.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/HttpStruct.Script.txt" as HttpStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ComponentName "lib-tmnext-offline-data"
#Const P "LibTMNextOfflineData_"

#Const C_OfflineCampaignFolderPath "file://Media/Json/Nadeo/TMNext/OfflineData/"
#Const C_OfflineNadeoCampaignId "Trackmania"
#Const C_TrainingCampaignId "Trackmania#1"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare CampaignStruct::LibCampaignStruct_K_Campaign G_OfflineCampaign;
declare CampaignStruct::LibCampaignStruct_K_Campaign G_TrainingCampaign;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the offline data from a file
CHttpRequest StartLoadFile() {
	return Http.CreateGet(C_OfflineCampaignFolderPath^Config::Get().OfflineCampaignJsonName, False);
}
Boolean IsLoadingFile(CHttpRequest _Request) {
	if (_Request == Null) return False;

	if (_Request.IsCompleted && _Request.Result != "") {
		declare HttpStruct::LibHttpStruct_K_HttpCampaign OfflineHttpCampaign;
		OfflineHttpCampaign.fromjson(_Request.Result);
		G_OfflineCampaign = CampaignStruct::GetCampaignFromHttpCampaign(OfflineHttpCampaign);

		declare CCampaign OfflineNadeoCampaign = DataFileMgr.Campaign_Get(C_OfflineNadeoCampaignId);
		declare CMapInfo[Text] MapInfosFromUid;
		if (OfflineNadeoCampaign != Null) {
			foreach (MapGroup in OfflineNadeoCampaign.MapGroups) {
				foreach (MapInfo in MapGroup.MapInfos) {
					MapInfosFromUid[MapInfo.MapUid] <=> MapInfo;
				}
			}
		}

		foreach (CatIndex => Category in G_OfflineCampaign.Categories) {
			// We construct a new playlist for each category
			declare CampaignStruct::LibCampaignStruct_K_Map[] Playlist;
			foreach (Map in Category.Playlist) {
				if (MapInfosFromUid.existskey(Map.Uid)) {
					declare CMapInfo MapInfo <=> MapInfosFromUid[Map.Uid];
					Playlist.add(
						CampaignStruct::LibCampaignStruct_K_Map {
							Position = Playlist.count,
							Uid = MapInfo.MapUid,
							Name = MapInfo.Name,
							AuthorLogin = MapInfo.AuthorLogin,
							AuthorTime = MapInfo.TMObjective_AuthorTime,
							GoldTime = MapInfo.TMObjective_GoldTime,
							SilverTime = MapInfo.TMObjective_SilverTime,
							BronzeTime = MapInfo.TMObjective_BronzeTime,
							NbLaps = MapInfo.TMObjective_NbLaps,
							LocalFileName = TL::Replace(MapInfo.FileName, "\\", "/"),
							ThumbnailUrl = "file://Thumbnails/MapUid/"^TL::Replace(MapInfo.MapUid, "\\", "/"),
							IsPlayable = MapInfo.IsPlayable
						}
					);
				}
			}
			G_OfflineCampaign.Categories[CatIndex].Playlist = Playlist;
		}
		G_OfflineCampaign.IsSeasonLive = True; //< Only one campaign
		G_OfflineCampaign.IsFetched = True;
		G_OfflineCampaign.IsLoaded = True;
	}
	return !_Request.IsCompleted;
}
Void StopLoadFile(CHttpRequest _Request) {
	Http.Destroy(_Request);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the offline campaign
CampaignStruct::LibCampaignStruct_K_Campaign GetOfflineCampaign() {
	return G_OfflineCampaign;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the training campaign
Void LoadTrainingCampaign() {
	G_TrainingCampaign = CampaignStruct::LibCampaignStruct_K_Campaign {};
	declare CCampaign TrainingNadeoCampaign = DataFileMgr.Campaign_Get(C_TrainingCampaignId);
	if (TrainingNadeoCampaign != Null) {
		G_TrainingCampaign.Id = CampaignStruct::C_TrainingCampaign_Id;
		G_TrainingCampaign.Name = _("Training");
		G_TrainingCampaign.Type = CampaignStruct::C_CampaignType_Training;
		G_TrainingCampaign.Categories = [CampaignStruct::LibCampaignStruct_K_Category {}];
		foreach (MapGroup in TrainingNadeoCampaign.MapGroups) {
			foreach (Index => MapInfo in MapGroup.MapInfos) {
				declare CampaignStruct::LibCampaignStruct_K_Map NewMap;
				NewMap.Position = Index;
				NewMap.Uid = MapInfo.MapUid;
				NewMap.Name = MapInfo.Name;
				NewMap.AuthorLogin = MapInfo.AuthorLogin;
				NewMap.AuthorDisplayName = MapInfo.AuthorNickName;
				NewMap.AuthorTime = MapInfo.TMObjective_AuthorTime;
				NewMap.GoldTime = MapInfo.TMObjective_GoldTime;
				NewMap.SilverTime = MapInfo.TMObjective_SilverTime;
				NewMap.BronzeTime = MapInfo.TMObjective_BronzeTime;
				NewMap.LocalFileName = MapInfo.FileName;
				NewMap.ThumbnailUrl = "file://Thumbnails/MapUid/"^MapInfo.MapUid;
				NewMap.IsPlayable = MapInfo.IsPlayable;
				G_TrainingCampaign.Categories[0].Playlist.add(NewMap);
			}
		}
		G_TrainingCampaign.IsFetched = True;
		G_TrainingCampaign.IsLoaded = True;
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the training campaign
CampaignStruct::LibCampaignStruct_K_Campaign GetTrainingCampaign() {
	return G_TrainingCampaign;
}