/**
 *	Store for Clubs
 */
#Const Version		"2023-03-24"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_MA.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CommonLibs/Common/Store_MA.Script.txt" as Store
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/Task.Script.txt" as Task
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/TMNext/TrackMania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_MA.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct ClubStore::K_ClubsPager as K_ClubsPager
#Struct ClubStore::K_MembersPager as K_MembersPager
#Struct ClubStore::K_ClubRoomsPager as K_ClubRoomsPager
#Struct ClubStore::K_ClubActivitiesPager as K_ClubActivitiesPager
#Struct ClubStore::K_BucketActivitiesPager as K_BucketActivitiesPager
#Struct ClubStore::K_MapReviewsPager as K_MapReviewsPager
#Struct ClubStore::K_ClubDetails as K_ClubDetails
#Struct ClubStore::K_State as K_State

#Struct K_GetMembersRequest {
	Http::K_Request Request;
	Task::K_Task Task_GetDisplayName;
}
#Struct K_CreateOrEditCampaignRequest {
	CampaignStruct::LibCampaignStruct_K_Campaign Campaign;
	Task::K_Task[Text] Task_RegisterMapList;
	Http::K_Request Request;
	Http::K_Request UploadOrUpdateMediaActivityRequest;
	Http::K_Request UpdatePrivacyActivityRequest;
	Boolean IsEditingCampaign;
}
#Struct K_CreateClubRequest {
	ClubStruct::LibStructuresClub_K_Club Club;
	Http::K_Request CreateClubRequest;
	Http::K_Request[Text] UploadClubMediaRequests;
	Http::K_Request DeleteClubRequest;
	Text ErrorMessage;
}
#Struct K_EditClubRequest {
	ClubStruct::LibStructuresClub_K_Club Club;
	Http::K_Request[Text] UploadClubMediaRequests;
	Http::K_Request EditClubRequest;
	Text ErrorMessage;
}
#Struct K_GetVIPListOnMapRequest {
	Integer ClubId;
	Text MapUid;
	Text SeasonUid;
	Http::K_Request GetVIPListOnMap;
	Http::K_Request GetGlobalVIPListOnMap;
	Http::K_Request GetFollowersListOnMap;
	Task::K_Task Task_GetDisplayName;
	Task::K_Task Task_GetDisplayNameGlobal;
	Task::K_Task Task_GetDisplayNameFollowers;
}
#Struct K_CreateOrEditRoomRequest {
	ClubStruct::LibStructuresClub_K_Room Room;
	Http::K_Request Request;
	Http::K_Request UploadOrUpdateMediaActivityRequest;
	Boolean EditingRoom;
}
#Struct K_CreateBucketActivityRequest {
	Http::K_Request Request;
	Http::K_Request UploadOrUpdateMediaActivityRequest;
	Integer ClubId;
	Integer ActivityId;
	Text MediaUrl;
	Boolean IsEditing;
}
#Struct K_MapReviewActivityRequest {
	Http::K_Request Request;
	Http::K_Request UploadOrUpdateMediaActivityRequest;
	ClubStruct::LibStructuresClub_K_MapReview MapReview;
	Boolean IsEditing;
	Integer SubmissionLimitation;
}
#Struct K_CreateItemCollectionActivityRequest {
	Http::K_Request Request;
	Http::K_Request UploadMediaActivityRequest;
	Http::K_Request PostAddBucketItemRequest;
	Http::K_Request EditBucketItemRequest;
	Http::K_Request UpdateCollectionMediaRequest;
	ClubStruct::LibStructuresClub_K_BucketItem ItemCollection;
	ClubStruct::LibStructuresClub_K_BucketItem OldItemCollection;
	Integer ClubId;
	Integer ActivityId;
	Text MediaUrl;
	Boolean IsEditing;
	Integer CurrentMediaIndex;
	Integer[] DeleteMediaPositions;
	Boolean ErrorHasOccurred;
}
#Struct K_CreateOrEditNewsActivityRequest {
	Http::K_Request Request;
	Http::K_Request UploadOrUpdateMediaActivityRequest;
	Http::K_Request UploadNewsMediaRequest;
	ClubStruct::LibStructuresClub_K_News News;
	Text ActivityMediaUrl;
	Boolean IsEditing;
}
#Struct K_CreateOrEditRankingsActivityRequest {
	Http::K_Request Request;
	Http::K_Request UploadOrUpdateMediaActivityRequest;
	ClubStruct::LibStructuresClub_K_Activity Activity;
	Boolean IsEditing;
}
#Struct K_PinOrUnpinClubRequest {
	ClubStruct::LibStructuresClub_K_Club Club;
	ClubStruct::LibStructuresClub_K_Member Membership;
	Http::K_Request Request;
}
#Struct K_LoadPinAndTagClubRequest {
	Http::K_Request Request_GetMyClubInfo;
	Http::K_Request Request_GetPinnedClub;
	Http::K_Request Request_GetPinnedClubMemberWithId;
	Task::K_Task Task_SetPlayerClubTag;
	Boolean IsLoading;
	K_ClubDetails PinnedClub;
	Integer TaggedClubId;
	Text TaggedClubTag;
	Text CurrentClubTag;
}
#Struct K_ApplyOrRemoveClubTagRequest {
	Http::K_Request Request_ApplyOrRemoveClubTag;
	Task::K_Task Task_SetPlayerClubTag;
	ClubStruct::LibStructuresClub_K_Club Club;
	Boolean IsUpdating;
	Boolean IsSuccess;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const ClubStore::C_State_Null as C_State_Null
#Const ClubStore::C_StoreId as C_StoreId

#Const ClubStore::C_Section_AllClubs as C_Section_AllClubs
#Const ClubStore::C_Section_MyClubs as C_Section_MyClubs

#Const ClubStore::C_PinnedClubStatus_OK as C_PinnedClubStatus_OK
#Const ClubStore::C_PinnedClubStatus_Updating as C_PinnedClubStatus_Updating
#Const ClubStore::C_PinnedClubStatus_Error as C_PinnedClubStatus_Error

#Const ClubStore::C_ClubTagStatus_OK as C_ClubTagStatus_OK
#Const ClubStore::C_ClubTagStatus_Updating as C_ClubTagStatus_Updating
#Const ClubStore::C_ClubTagStatus_Error as C_ClubTagStatus_Error

#Const ClubStore::C_Action_LoadClubsPage as C_Action_LoadClubsPage
#Const ClubStore::C_Action_LoadBrowserClubs as C_Action_LoadBrowserClubs
#Const ClubStore::C_Action_LoadUserClubs as C_Action_LoadUserClubs
#Const ClubStore::C_Action_LoadCreatedClub as C_Action_LoadCreatedClub
#Const ClubStore::C_Action_SetUserCurrentClub as C_Action_SetUserCurrentClub
#Const ClubStore::C_Action_LoadPinAndTagClub as C_Action_LoadPinAndTagClub
#Const ClubStore::C_Action_PinClub as C_Action_PinClub
#Const ClubStore::C_Action_PinCurrentClub as C_Action_PinCurrentClub
#Const ClubStore::C_Action_UnpinClub as C_Action_UnpinClub
#Const ClubStore::C_Action_ApplyClubTag as C_Action_ApplyClubTag
#Const ClubStore::C_Action_RemoveClubTag as C_Action_RemoveClubTag
#Const ClubStore::C_Action_LoadUserCurrentClubMembersPage as C_Action_LoadUserCurrentClubMembersPage
#Const ClubStore::C_Action_LoadUserCurrentClubMemberRequestsPage as C_Action_LoadUserCurrentClubMemberRequestsPage
#Const ClubStore::C_Action_GetClubMemberFromLogin as C_Action_GetClubMemberFromLogin
#Const ClubStore::C_Action_CreateClub as C_Action_CreateClub
#Const ClubStore::C_Action_DeleteClubMember as C_Action_DeleteClubMember
#Const ClubStore::C_Action_EditClubMember as C_Action_EditClubMember
#Const ClubStore::C_Action_CreateClubMember as C_Action_CreateClubMember
#Const ClubStore::C_Action_LoadAllClubRoomsPage as C_Action_LoadAllClubRoomsPage
#Const ClubStore::C_Action_LoadClubActivitiesPage as C_Action_LoadClubActivitiesPage
#Const ClubStore::C_Action_LoadInactiveClubActivitiesPage as C_Action_LoadInactiveClubActivitiesPage
#Const ClubStore::C_Action_LoadClubsFeaturedActivity as C_Action_LoadClubsFeaturedActivity
#Const ClubStore::C_Action_MoveActivity as C_Action_MoveActivity
#Const ClubStore::C_Action_DeleteActivity as C_Action_DeleteActivity
#Const ClubStore::C_Action_CreateCampaign as C_Action_CreateCampaign
#Const ClubStore::C_Action_EditCampaign as C_Action_EditCampaign
#Const ClubStore::C_Action_ActivateActivity as C_Action_ActivateActivity
#Const ClubStore::C_Action_ActivityUpdatePrivacy as C_Action_ActivityUpdatePrivacy
#Const ClubStore::C_Action_UpdateFeaturedActivity as C_Action_UpdateFeaturedActivity
#Const ClubStore::C_Action_CreateClubRoom as C_Action_CreateClubRoom
#Const ClubStore::C_Action_EditClubRoom as C_Action_EditClubRoom
#Const ClubStore::C_Action_UpdateUserCurrentClubMembership as C_Action_UpdateUserCurrentClubMembership
#Const ClubStore::C_Action_EditClub as C_Action_EditClub
#Const ClubStore::C_Action_DeleteClub as C_Action_DeleteClub
#Const ClubStore::C_Action_UpdateClubVIP as C_Action_UpdateClubVIP
#Const ClubStore::C_Action_GetVIPListOnMap as C_Action_GetVIPListOnMap
#Const ClubStore::C_Action_CreateBucketActivity as C_Action_CreateBucketActivity
#Const ClubStore::C_Action_EditBucketActivity as C_Action_EditBucketActivity
#Const ClubStore::C_Action_CreateOrEditMapReviewActivity as C_Action_CreateOrEditMapReviewActivity
#Const ClubStore::C_Action_CreateOrEditNewsActivity as C_Action_CreateOrEditNewsActivity
#Const ClubStore::C_Action_CreateOrEditItemCollectionActivity as C_Action_CreateOrEditItemCollectionActivity
#Const ClubStore::C_Action_CreateOrEditRankingsActivity as C_Action_CreateOrEditRankingsActivity
#Const ClubStore::C_Action_LoadAllSkinUploadsPage as C_Action_LoadAllSkinUploadsPage
#Const ClubStore::C_Action_LoadAllItemUploadsPage as C_Action_LoadAllItemUploadsPage
#Const ClubStore::C_Action_SetUnsetFeaturedClub as C_Action_SetUnsetFeaturedClub
#Const ClubStore::C_Action_LoadMapReviewActivities as C_Action_LoadMapReviewActivities

#Const ClubStore::C_Event_MyClubsUpdated as C_Event_MyClubsUpdated
#Const ClubStore::C_Event_BrowserClubsUpdated as C_Event_BrowserClubsUpdated
#Const ClubStore::C_Event_BrowserClubsError as C_Event_BrowserClubsError
#Const ClubStore::C_Event_AllClubsUpdated as C_Event_AllClubsUpdated
#Const ClubStore::C_Event_ClubTagUpdated as C_Event_ClubTagUpdated
#Const ClubStore::C_Event_ClubTagStatusUpdated as C_Event_ClubTagStatusUpdated
#Const ClubStore::C_Event_UserClubsUpdated as C_Event_UserClubsUpdated
#Const ClubStore::C_Event_UserClubsUpdateError as C_Event_UserClubsUpdateError
#Const ClubStore::C_Event_UserCurrentClubUpdated as C_Event_UserCurrentClubUpdated
#Const ClubStore::C_Event_UserCurrentClubMembershipUpdated as C_Event_UserCurrentClubMembershipUpdated
#Const ClubStore::C_Event_UserCurrentClubMembershipUpdateFailed as C_Event_UserCurrentClubMembershipUpdateFailed
#Const ClubStore::C_Event_UserCurrentClubMembersUpdated as C_Event_UserCurrentClubMembersUpdated
#Const ClubStore::C_Event_UserCurrentClubMembersUpdateFailed as C_Event_UserCurrentClubMembersUpdateFailed
#Const ClubStore::C_Event_UserCurrentClubMemberRequestsUpdated as C_Event_UserCurrentClubMemberRequestsUpdated
#Const ClubStore::C_Event_UserCurrentClubMemberRequestsUpdateFailed as C_Event_UserCurrentClubMemberRequestsUpdateFailed
#Const ClubStore::C_Event_ClubCreated as C_Event_ClubCreated
#Const ClubStore::C_Event_ClubCreationFailed as C_Event_ClubCreationFailed
#Const ClubStore::C_Event_CreatedClubUpdateError as C_Event_CreatedClubUpdateError
#Const ClubStore::C_Event_ClubMemberUpdated as C_Event_ClubMemberUpdated
#Const ClubStore::C_Event_ClubMemberUpdateFailed as C_Event_ClubMemberUpdateFailed
#Const ClubStore::C_Event_ClubRoomsUpdated as C_Event_ClubRoomsUpdated
#Const ClubStore::C_Event_ClubActivitiesUpdated as C_Event_ClubActivitiesUpdated
#Const ClubStore::C_Event_ClubActivitiesUpdateError as C_Event_ClubActivitiesUpdateError
#Const ClubStore::C_Event_ClubsFeaturedActivityListUpdated as C_Event_ClubsFeaturedActivityListUpdated
#Const ClubStore::C_Event_ClubsFeaturedActivityUpdateError as C_Event_ClubsFeaturedActivityUpdateError
#Const ClubStore::C_Event_ClubActivityMoved as C_Event_ClubActivityMoved
#Const ClubStore::C_Event_ClubActivityNotMoved as C_Event_ClubActivityNotMoved
#Const ClubStore::C_Event_ClubActivityDeleted as C_Event_ClubActivityDeleted
#Const ClubStore::C_Event_ClubActivityNotDeleted as C_Event_ClubActivityNotDeleted
#Const ClubStore::C_Event_ActivityActivatedOrDeactivated as C_Event_ActivityActivatedOrDeactivated
#Const ClubStore::C_Event_ActivityValidationFailed as C_Event_ActivityValidationFailed
#Const ClubStore::C_Event_ClubCampaignCreatedOrEdited as C_Event_ClubCampaignCreatedOrEdited
#Const ClubStore::C_Event_ClubCampaignCreationOrEditionFailed as C_Event_ClubCampaignCreationOrEditionFailed
#Const ClubStore::C_Event_ClubMediaActivityUploaded as C_Event_ClubMediaActivityUploaded
#Const ClubStore::C_Event_ClubActivityPrivacyUpdated as C_Event_ClubActivityPrivacyUpdated
#Const ClubStore::C_Event_ClubActivityPrivacyUpdateFailed as C_Event_ClubActivityPrivacyUpdateFailed
#Const ClubStore::C_Event_ClubActivityFeaturedUpdated as C_Event_ClubActivityFeaturedUpdated
#Const ClubStore::C_Event_ClubActivityFeaturedUpdateFailed as C_Event_ClubActivityFeaturedUpdateFailed
#Const ClubStore::C_Event_ClubRoomCreatedOrEdited as C_Event_ClubRoomCreatedOrEdited
#Const ClubStore::C_Event_ClubRoomCreationOrEditionFailed as C_Event_ClubRoomCreationOrEditionFailed
#Const ClubStore::C_Event_ClubRoomDeleted as C_Event_ClubRoomDeleted
#Const ClubStore::C_Event_ClubRoomDeletionFailed as C_Event_ClubRoomDeletionFailed
#Const ClubStore::C_Event_ClubUpdated as C_Event_ClubUpdated
#Const ClubStore::C_Event_ClubUpdateFailed as C_Event_ClubUpdateFailed
#Const ClubStore::C_Event_ClubDeleted as C_Event_ClubDeleted
#Const ClubStore::C_Event_ClubDeleteFailed as C_Event_ClubDeleteFailed
#Const ClubStore::C_Event_ClubVIPUpdated as C_Event_ClubVIPUpdated
#Const ClubStore::C_Event_ClubVIPListOnMapUpdated as C_Event_ClubVIPListOnMapUpdated
#Const ClubStore::C_Event_ClubVIPListOnMapFailed as C_Event_ClubVIPListOnMapFailed
#Const ClubStore::C_Event_GlobalVIPListOnMapUpdated as C_Event_GlobalVIPListOnMapUpdated
#Const ClubStore::C_Event_GlobalVIPListOnMapFailed as C_Event_GlobalVIPListOnMapFailed
#Const ClubStore::C_Event_FollowersListOnMapUpdated as C_Event_FollowersListOnMapUpdated
#Const ClubStore::C_Event_FollowersListOnMapFailed as C_Event_FollowersListOnMapFailed
#Const ClubStore::C_Event_BucketActivityCreatedOrEdited as C_Event_BucketActivityCreatedOrEdited
#Const ClubStore::C_Event_BucketActivityCreationOrEditionFailed as C_Event_BucketActivityCreationOrEditionFailed
#Const ClubStore::C_Event_MapReviewActivityCreatedOrEdited as C_Event_MapReviewActivityCreatedOrEdited
#Const ClubStore::C_Event_MapReviewActivityCreationOrEditionFailed as C_Event_MapReviewActivityCreationOrEditionFailed
#Const ClubStore::C_Event_ItemCollectionActivityCreatedOrEdited as C_Event_ItemCollectionActivityCreatedOrEdited
#Const ClubStore::C_Event_ItemCollectionActivityCreationOrEditionFailed as C_Event_ItemCollectionActivityCreationOrEditionFailed
#Const ClubStore::C_Event_NewsActivityCreatedOrEdited as C_Event_NewsActivityCreatedOrEdited
#Const ClubStore::C_Event_NewsActivityCreationOrEditionFailed as C_Event_NewsActivityCreationOrEditionFailed
#Const ClubStore::C_Event_RankingsActivityCreatedOrEdited as C_Event_RankingsActivityCreatedOrEdited
#Const ClubStore::C_Event_RankingsActivityCreationOrEditionFailed as C_Event_RankingsActivityCreationOrEditionFailed
#Const ClubStore::C_Event_SkinUploadsUpdated as C_Event_SkinUploadsUpdated
#Const ClubStore::C_Event_SkinUploadsPagingFailed as C_Event_SkinUploadsPagingFailed
#Const ClubStore::C_Event_ItemUploadsUpdated as C_Event_ItemUploadsUpdated
#Const ClubStore::C_Event_ItemUploadsPagingFailed as C_Event_ItemUploadsPagingFailed
#Const ClubStore::C_Event_SetUnsetFeaturedClubSucceeded as C_Event_SetUnsetFeaturedClubSucceeded
#Const ClubStore::C_Event_SetUnsetFeaturedClubFailed as C_Event_SetUnsetFeaturedClubFailed
#Const ClubStore::C_Event_MapReviewsUpdated as C_Event_MapReviewsUpdated
#Const ClubStore::C_Event_LoadAllClubsPageComplete as C_Event_LoadAllClubsPageComplete
#Const ClubStore::C_Event_LoadMyClubsPageComplete as C_Event_LoadMyClubsPageComplete
#Const ClubStore::C_Event_PinnedClubUpdate as C_Event_PinnedClubUpdate
#Const ClubStore::C_Event_PinnedClubError as C_Event_PinnedClubError
#Const ClubStore::C_Event_PinnedClubStatusUpdated as C_Event_PinnedClubStatusUpdated
#Const ClubStore::C_Event_LoadPinAndTagClubUpdate as C_Event_LoadPinAndTagClubUpdate

#Const ClubStruct::C_MediaType_Icon as C_MediaType_Icon
#Const ClubStruct::C_MediaType_Decal as C_MediaType_Decal
#Const ClubStruct::C_MediaType_Bg as C_MediaType_Bg
#Const ClubStruct::C_MediaType_Vertical as C_MediaType_Vertical
#Const ClubStruct::C_MediaType_DecalSponsor as C_MediaType_DecalSponsor
#Const ClubStruct::C_MediaType_Screen16x9 as C_MediaType_Screen16x9
#Const ClubStruct::C_MediaType_Screen8x1 as C_MediaType_Screen8x1
#Const ClubStruct::C_MediaType_Screen16x1 as C_MediaType_Screen16x1
#Const ClubStruct::C_MediaType_Translations as C_MediaType_Translations
#Const ClubStruct::C_ClubThemes_Folders as C_ClubThemes_Folders

#Const C_Metadata_ClubId "ClubId"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Http::K_Request[Integer] G_Request_ClubsPaging;
declare Http::K_Request G_Request_BrowserClubsPaging;
declare Http::K_Request G_Request_UserClubs;
declare Http::K_Request G_Request_CreatedClubUpdate;
declare K_GetMembersRequest G_Request_UserCurrentClubMembership;
declare K_GetMembersRequest G_Request_ClubMembersPaging;
declare K_GetMembersRequest G_Request_ClubMemberRequestsPaging;
declare K_GetMembersRequest G_Request_GetClubMemberFromLogin;
declare K_CreateClubRequest G_Request_CreateClub;
declare Http::K_Request G_Request_DeleteClubMember;
declare Http::K_Request G_Request_EditClubMember;
declare Http::K_Request G_Request_CreateClubMember;
declare Http::K_Request G_Request_AllClubRoomsPaging;
declare Http::K_Request[Integer] G_Request_ClubRoomsPagingList; //< Key is the Id of the club
declare Http::K_Request[Integer] G_Request_ClubActivitiesPagingList; //< Key is the Id of the club
declare Http::K_Request[Integer] G_Request_InactiveClubActivitiesPagingList; //< Key is the Id of the club
declare Http::K_Request G_Request_ClubsFeaturedActivity;
declare Http::K_Request G_Request_MoveActivity;
declare Http::K_Request G_Request_DeleteActivity;
declare K_CreateOrEditCampaignRequest[Integer] G_CreateOrEditCampaignRequestList; //< Key is the CampaignId
declare Http::K_Request[Integer] G_Request_ActivateActivityList; //< Key is the ActivityId
declare Http::K_Request[Integer] G_Request_ActivityUpdatePrivacyList; //< Key is the ActivityId
declare Http::K_Request[Integer] G_Request_UpdateFeaturedActivityList; //< Key is the ActivityId
declare K_CreateOrEditRoomRequest G_Request_CreateOrEditClubRoom;
declare K_EditClubRequest G_Request_EditClub;
declare Http::K_Request G_Request_DeleteClub;
declare Http::K_Request G_Request_UpdateClubVIP;
declare K_GetVIPListOnMapRequest G_Request_GetVIPListOnMap;
declare K_CreateBucketActivityRequest G_Request_CreateOrEditBucketActivity;
declare K_MapReviewActivityRequest G_Request_MapReviewActivity;
declare K_CreateItemCollectionActivityRequest G_Request_CreateOrEditItemCollectionActivity;
declare K_CreateOrEditNewsActivityRequest G_Request_CreateOrEditNewsActivityRequest;
declare K_CreateOrEditRankingsActivityRequest G_Request_CreateOrEditRankingsActivityRequest;
declare Http::K_Request G_Request_SkinUploadsPaging;
declare Http::K_Request G_Request_ItemUploadsPaging;
declare Http::K_Request G_Request_SetUnsetFeaturedClub;
declare Http::K_Request G_Request_GetMapReviewActivities;
declare K_LoadPinAndTagClubRequest G_Request_LoadPinAndTagClub;
declare K_PinOrUnpinClubRequest G_Request_PinOrUnpinClub;
declare K_ApplyOrRemoveClubTagRequest G_Request_ApplyOrRemoveClubTag;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the clubs array
 *
 *	@param	_State										The current state
 *	@param	_Section									The pager section (all clubs or my clubs)
 *	@param	_Offset										The club list starting offset
 *	@param	_ClubsTotal								The total number of clubs in the database
 *	@param	_Clubs										The clubs to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetClubs(
	K_State _State,
	Integer _Section,
	Integer _Offset,
	Integer _ClubsTotal,
	ClubStruct::LibStructuresClub_K_Club[] _Clubs
) {
	declare K_State State = _State;
	
	State.ClubsPager[_Section].Clubs = [];
	foreach (Key => Club in _Clubs) {
		State.ClubsPager[_Section].Clubs[_Offset + Key] = Club;
	}
	State.ClubsPager[_Section].Total = _ClubsTotal;
	
	if (_Section == C_Section_MyClubs) {
		Store::SendEvent(C_StoreId, C_Event_MyClubsUpdated);
	} else if (_Section == C_Section_AllClubs) {
		Store::SendEvent(C_StoreId, C_Event_AllClubsUpdated);
	}
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the clubs array for the browser
 *
 *	@param	_State										The current state
 *	@param	_Offset										The club list starting offset
 *	@param	_ClubsTotal								The total number of clubs in the database
 *	@param	_Clubs										The clubs to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetBrowserClubs(
	K_State _State,
	Integer _Offset,
	Integer _ClubsTotal,
	ClubStruct::LibStructuresClub_K_Club[] _Clubs
) {
	declare K_State State = _State;
	
	State.BrowserClubsPager.Clubs = [];
	foreach (Key => Club in _Clubs) {
		State.BrowserClubsPager.Clubs[_Offset + Key] = Club;
	}
	State.BrowserClubsPager.Total = _ClubsTotal;
	
	Store::SendEvent(C_StoreId, C_Event_BrowserClubsUpdated);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the clubs offset
K_State Mutation_SetClubsOffset(K_State _State, Integer _Section, Integer _Offset) {
	declare K_State State = _State;
	State.ClubsPager[_Section].Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the clubs offset
K_State Mutation_SetBrowserClubsOffset(K_State _State, Integer _Offset) {
	declare K_State State = _State;
	State.BrowserClubsPager.Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the clubs array
 *
 *	@param	_State										The current state
 *	@param	_Clubs										The clubs to add
 *
 *	@return														The updated state
 */
K_State Mutation_AddUserClubs(K_State _State, ClubStruct::LibStructuresClub_K_Club[] _Clubs) {
	declare K_State State = _State;
	
	foreach (Club in _Clubs) {
		State.UserClubs[Club.Id] = Club;
	}
	
	Store::SendEvent(C_StoreId, C_Event_UserClubsUpdated);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the user current club
 *
 *	@param	_State										The current state
 *	@param	_Club											The user new current club
 *
 *	@return														The updated state
 */
K_State Mutation_SetUserCurrentClub(K_State _State, ClubStruct::LibStructuresClub_K_Club _Club) {
	declare K_State State = _State;
	
	State.CurrentClub.Club = _Club;
	
	Store::SendEvent(C_StoreId, C_Event_UserCurrentClubUpdated);
	
	return State;
}

ClubStruct::LibStructuresClub_K_Club GetUserCurrentClub() {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	return TMNext_ClubStore_State.CurrentClub.Club;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the user pinned club
K_State Mutation_SetUserPinnedClub(K_State _State, ClubStruct::LibStructuresClub_K_Club _Club, ClubStruct::LibStructuresClub_K_Member _Membership) {
	declare K_State State = _State;
	State.PinnedClub.Club = _Club;
	State.PinnedClub.Membership = _Membership;

	Store::SendEvent(C_StoreId, C_Event_UserCurrentClubUpdated);
	Store::SendEvent(C_StoreId, C_Event_PinnedClubUpdate);

	return State;
}

K_State Mutation_UpdatePinnedClubStatus(K_State _State, Integer _PinnedClubStatus) {
	declare K_State State = _State;

	State.PinnedClubStatus = _PinnedClubStatus;
	Store::SendEvent(C_StoreId, C_Event_PinnedClubStatusUpdated);

	return State;
}

ClubStruct::LibStructuresClub_K_Club GetUserPinnedClub() {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	return TMNext_ClubStore_State.PinnedClub.Club;
}

Integer GetUserPinnedClubStatus() {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	return TMNext_ClubStore_State.PinnedClubStatus;
}

K_State Mutation_SetUserClubTag(K_State _State, Integer _ClubId, Text _ClubTag) {
	declare K_State State = _State;

	State.TaggedClubId = _ClubId;
	State.TaggedClubTag = _ClubTag;
	Store::SendEvent(C_StoreId, C_Event_ClubTagUpdated);

	return State;
}

K_State Mutation_UpdateClubTagStatus(K_State _State, Integer _ClubTagStatus) {
	declare K_State State = _State;

	State.ClubTagStatus = _ClubTagStatus;
	Store::SendEvent(C_StoreId, C_Event_ClubTagStatusUpdated);

	return State;
}

Integer GetUserTaggedClubId() {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	return TMNext_ClubStore_State.TaggedClubId;
}

Integer GetUserClubTagStatus() {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	return TMNext_ClubStore_State.ClubTagStatus;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the user membership in the current club
K_State Mutation_SetUserCurrentClubMembership(K_State _State, ClubStruct::LibStructuresClub_K_Member _Membership) {
	declare K_State State = _State;
	State.CurrentClub.Membership = _Membership;

	if (State.CurrentClub.Membership.AccountId == ClubStruct::C_AccountNullId) {
		Store::SendEvent(C_StoreId, C_Event_UserCurrentClubMembershipUpdated);
	}
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the display name of user membership in the current club
K_State Mutation_UpdateUserCurrentClubMembershipDisplayName(K_State _State) {
	declare K_State State = _State;
	declare Boolean IsFirstPartyDisplayName;
	declare Text DisplayName = UserMgr.FindDisplayName(State.CurrentClub.Membership.AccountId, IsFirstPartyDisplayName);

	State.CurrentClub.Membership.DisplayName = UserStore::GetPlayerName(DisplayName, IsFirstPartyDisplayName);
	if (State.CurrentClub.Club.Id == State.PinnedClub.Club.Id) {
		State.PinnedClub.Membership.DisplayName = State.CurrentClub.Membership.DisplayName;
	}
	
	Store::SendEvent(C_StoreId, C_Event_UserCurrentClubMembershipUpdated);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the user current club members
K_State Mutation_SetUserCurrentClubMembers(
	K_State _State,
	Integer _Offset,
	Integer _MembersTotal,
	ClubStruct::LibStructuresClub_K_Member[] _Members
) {
	declare K_State State = _State;
	
	State.CurrentClub.MembersPager.Members = [];
	foreach (Key => Member in _Members) {
		State.CurrentClub.MembersPager.Members[_Offset + Key] = Member;
	}
	State.CurrentClub.MembersPager.Total = _MembersTotal;
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the display names of user current club members
K_State Mutation_UpdateUserCurrentClubMembersDisplayNames(K_State _State) {
	declare K_State State = _State;

	foreach (MemberIndex => Member in State.CurrentClub.MembersPager.Members) {
		State.CurrentClub.MembersPager.Members[MemberIndex].DisplayName = UserStore::GetUserMgrPlayerName(Member.AccountId);
	}
	
	Store::SendEvent(C_StoreId, C_Event_UserCurrentClubMembersUpdated);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the club members offset
K_State Mutation_SetUserCurrentClubMembersOffset(K_State _State, Integer _Offset) {
	declare K_State State = _State;
	State.CurrentClub.MembersPager.Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the user current club member requests
K_State Mutation_SetUserCurrentClubMemberRequests(
	K_State _State,
	Integer _Offset,
	Integer _MemberRequestsTotal,
	ClubStruct::LibStructuresClub_K_Member[] _MemberRequests
) {
	declare K_State State = _State;
	
	State.CurrentClub.MemberRequestsPager.Members = [];
	foreach (Key => Member in _MemberRequests) {
		State.CurrentClub.MemberRequestsPager.Members[_Offset + Key] = Member;
	}
	State.CurrentClub.MemberRequestsPager.Total = _MemberRequestsTotal;
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the display names of user current club members
K_State Mutation_UpdateUserCurrentClubMemberRequestsDisplayNames(K_State _State) {
	declare K_State State = _State;

	foreach (MemberIndex => Member in State.CurrentClub.MemberRequestsPager.Members) {
		State.CurrentClub.MemberRequestsPager.Members[MemberIndex].DisplayName = UserStore::GetUserMgrPlayerName(Member.AccountId);
	}
	
	Store::SendEvent(C_StoreId, C_Event_UserCurrentClubMemberRequestsUpdated);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the club member requests offset
K_State Mutation_SetUserCurrentClubMemberRequestsOffset(K_State _State, Integer _Offset) {
	declare K_State State = _State;
	State.CurrentClub.MemberRequestsPager.Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the all club rooms array
 *
 *	@param	_State										The current state
 *	@param	_Offset										The room list starting offset
 *	@param	_RoomsTotal								The total number of rooms in the database
 *	@param	_Rooms										The rooms to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetAllClubRooms(
	K_State _State,
	Integer _Offset,
	Integer _ClubRoomsTotal,
	ClubStruct::LibStructuresClub_K_Room[] _Rooms
) {
	declare K_State State = _State;
	
	State.AllClubRoomsPager.Rooms = [];
	foreach (Key => Room in _Rooms) {
		State.AllClubRoomsPager.Rooms[_Offset + Key] = Room;
	}
	State.AllClubRoomsPager.Total = _ClubRoomsTotal;
	
	Store::SendEvent(C_StoreId, C_Event_ClubRoomsUpdated);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the rooms array of a specific club
 *
 *	@param	_State										The current state
 *	@param	_ClubId										The id of the club to update
 *	@param	_RoomsTotal								The total number of rooms in the database
 *	@param	_Rooms										The rooms to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetClubRooms(
	K_State _State,
	Integer _ClubId,
	Integer _ClubRoomsTotal,
	ClubStruct::LibStructuresClub_K_Room[] _Rooms
) {
	declare K_State State = _State;

	if (!State.ClubRoomsPager.existskey(_ClubId)) {
		State.ClubRoomsPager[_ClubId] = K_ClubRoomsPager {};
	}
	declare Integer Offset = State.ClubRoomsPager[_ClubId].Offset;

	State.ClubRoomsPager[_ClubId].Rooms = [];
	foreach (Key => Room in _Rooms) {
		State.ClubRoomsPager[_ClubId].Rooms[Offset + Key] = Room;
	}
	State.ClubRoomsPager[_ClubId].Total = _ClubRoomsTotal;
	
	Store::SendEvent(C_StoreId, C_Event_ClubRoomsUpdated, [""^_ClubId]);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the activities array of a specific club
 *
 *	@param	_State										The current state
 *	@param	_ClubId										The id of the club to update
 *	@param	_ActivitiesTotal					The total number of activities in the database
 *	@param	_Activities								The activities to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetClubActivities(
	K_State _State,
	Integer _ClubId,
	Integer _ActivitiesTotal,
	ClubStruct::LibStructuresClub_K_Activity[] _Activities
) {
	declare K_State State = _State;

	if (!State.ClubActivitiesPagers.existskey(_ClubId)) {
		State.ClubActivitiesPagers[_ClubId] = K_ClubActivitiesPager {};
	}
	declare Integer Offset = State.ClubActivitiesPagers[_ClubId].Offset;

	State.ClubActivitiesPagers[_ClubId].Activities = [];
	foreach (Key => Activity in _Activities) {
		State.ClubActivitiesPagers[_ClubId].Activities[Offset + Key] = Activity;
		State.ClubActivitiesPagers[_ClubId].Activities[Offset + Key].ClubId = _ClubId;
	}
	State.ClubActivitiesPagers[_ClubId].Total = _ActivitiesTotal;
	
	Store::SendEvent(C_StoreId, C_Event_ClubActivitiesUpdated, [""^_ClubId]);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the inactive activities array of a specific club
 *
 *	@param	_State										The current state
 *	@param	_ClubId										The id of the club to update
 *	@param	_ActivitiesTotal					The total number of activities in the database
 *	@param	_Activities								The activities to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetInactiveClubActivities(
	K_State _State,
	Integer _ClubId,
	Integer _ActivitiesTotal,
	ClubStruct::LibStructuresClub_K_Activity[] _Activities
) {
	declare K_State State = _State;

	if (!State.InactiveClubActivitiesPagers.existskey(_ClubId)) {
		State.InactiveClubActivitiesPagers[_ClubId] = K_ClubActivitiesPager {};
	}
	declare Integer Offset = State.InactiveClubActivitiesPagers[_ClubId].Offset;

	State.InactiveClubActivitiesPagers[_ClubId].Activities = [];
	foreach (Key => Activity in _Activities) {
		State.InactiveClubActivitiesPagers[_ClubId].Activities[Offset + Key] = Activity;
	}
	State.InactiveClubActivitiesPagers[_ClubId].Total = _ActivitiesTotal;
	
	Store::SendEvent(C_StoreId, C_Event_ClubActivitiesUpdated, [""^_ClubId]);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the featured activity of a specific club
 *
 *	@param	_State										The current state
 *	@param	_ClubId										The id of the club to update
 *	@param	_Activity									The featured activity to set
 *
 *	@return														The updated state
 */
K_State Mutation_SetClubsFeaturedActivity(
	K_State _State,
	Integer _ClubId,
	ClubStruct::LibStructuresClub_K_Activity _Activity
) {
	declare K_State State = _State;
	State.ClubsFeaturedActivity[_ClubId] = _Activity;	
	Store::SendEvent(C_StoreId, C_Event_ClubsFeaturedActivityListUpdated, [""^_ClubId]);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the all club rooms offset
K_State Mutation_SetAllClubRoomsOffset(K_State _State, Integer _Offset) {
	declare K_State State = _State;
	State.AllClubRoomsPager.Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the club rooms offset
K_State Mutation_SetClubRoomsOffset(K_State _State, Integer _ClubId, Integer _Offset) {
	declare K_State State = _State;
	if (!State.ClubRoomsPager.existskey(_ClubId)) {
		State.ClubRoomsPager[_ClubId] = K_ClubRoomsPager {};
	}

	State.ClubRoomsPager[_ClubId].Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the active club activities offset
K_State Mutation_SetClubActivitiesOffset(K_State _State, Integer _ClubId, Integer _Offset) {
	declare K_State State = _State;
	if (!State.ClubActivitiesPagers.existskey(_ClubId)) {
		State.ClubActivitiesPagers[_ClubId] = K_ClubActivitiesPager {};
	}

	State.ClubActivitiesPagers[_ClubId].Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the inactive club activities offset
K_State Mutation_SetInactiveClubActivitiesOffset(K_State _State, Integer _ClubId, Integer _Offset) {
	declare K_State State = _State;
	if (!State.InactiveClubActivitiesPagers.existskey(_ClubId)) {
		State.InactiveClubActivitiesPagers[_ClubId] = K_ClubActivitiesPager {};
	}

	State.InactiveClubActivitiesPagers[_ClubId].Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the vip list on a map for a club
K_State Mutation_SetClubVIPListOnMap(K_State _State, Integer _ClubId, Text _SeasonUid, Text _MapUid, Text[] _VIPAccountIdList) {
	declare K_State State = _State;

	declare ClubStruct::LibStructuresClub_K_Member[] VIPMemberList;
	foreach (VIPAccountId in _VIPAccountIdList) {
		VIPMemberList.add(ClubStruct::LibStructuresClub_K_Member {
			AccountId = VIPAccountId,
			VIP = True
		});
	}

	foreach (ClubIndex => Club in State.ClubsPager[C_Section_AllClubs].Clubs) {
		if (Club.Id == _ClubId) {
			if (!Club.VIPListOnMap.existskey(_SeasonUid)) {
				State.ClubsPager[C_Section_AllClubs].Clubs[ClubIndex].VIPListOnMap[_SeasonUid] = [];
			}
			State.ClubsPager[C_Section_AllClubs].Clubs[ClubIndex].VIPListOnMap[_SeasonUid][_MapUid] = VIPMemberList;
			break;
		}
	}

	if (State.PinnedClub.Club.Id == _ClubId) {
		if (!State.PinnedClub.Club.VIPListOnMap.existskey(_SeasonUid)) {
			State.PinnedClub.Club.VIPListOnMap[_SeasonUid] = [];
		}
		State.PinnedClub.Club.VIPListOnMap[_SeasonUid][_MapUid] = VIPMemberList;
	}

	return State;
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the vip list on a map for a club with their display names
K_State Mutation_UpdateClubVIPListOnMapDisplayNames(K_State _State, Integer _ClubId, Text _SeasonUid, Text _MapUid) {
	declare K_State State = _State;

	foreach (ClubIndex => Club in State.ClubsPager[C_Section_AllClubs].Clubs) {
		if (Club.Id == _ClubId && Club.VIPListOnMap.existskey(_SeasonUid) && Club.VIPListOnMap[_SeasonUid].existskey(_MapUid)) {
			foreach (MemberIndex => VIPMember in Club.VIPListOnMap[_SeasonUid][_MapUid]) {
				State.ClubsPager[C_Section_AllClubs].Clubs[ClubIndex].VIPListOnMap[_SeasonUid][_MapUid][MemberIndex].DisplayName = UserStore::GetUserMgrPlayerName(VIPMember.AccountId);
			}
			break;
		}
	}

	if (State.PinnedClub.Club.Id == _ClubId && State.PinnedClub.Club.VIPListOnMap.existskey(_SeasonUid) && State.PinnedClub.Club.VIPListOnMap[_SeasonUid].existskey(_MapUid)) {
		foreach (MemberIndex => VIPMember in State.PinnedClub.Club.VIPListOnMap[_SeasonUid][_MapUid]) {
			State.PinnedClub.Club.VIPListOnMap[_SeasonUid][_MapUid][MemberIndex].DisplayName = UserStore::GetUserMgrPlayerName(VIPMember.AccountId);
		}
	}

	Store::SendEvent(C_StoreId, C_Event_ClubVIPListOnMapUpdated, [""^_ClubId, _MapUid, _SeasonUid]);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the vip list on a map
K_State Mutation_SetGlobalVIPListOnMap(K_State _State, Text _MapUid, Text _SeasonUid, Text[] _VIPAccountIdList) {
	declare K_State State = _State;

	declare ClubStruct::LibStructuresClub_K_Member[] VIPMemberList;
	foreach (VIPAccountId in _VIPAccountIdList) {
		VIPMemberList.add(ClubStruct::LibStructuresClub_K_Member {
			AccountId = VIPAccountId,
			VIP = True
		});
	}
	if (!State.GlobalVIPList.existskey(_SeasonUid)) {
		State.GlobalVIPList[_SeasonUid] = [];
	}
	State.GlobalVIPList[_SeasonUid][_MapUid] = VIPMemberList;

	return State;
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the vip list on a map for a club with their display names
K_State Mutation_UpdateGlobalVIPListOnMapDisplayNames(K_State _State, Text _MapUid, Text _SeasonUid) {
	declare K_State State = _State;

	if (State.GlobalVIPList.existskey(_SeasonUid) && State.GlobalVIPList[_SeasonUid].existskey(_MapUid)) {
		foreach (Index => VIPMember in State.GlobalVIPList[_SeasonUid][_MapUid]) {
			State.GlobalVIPList[_SeasonUid][_MapUid][Index].DisplayName = UserStore::GetUserMgrPlayerName(VIPMember.AccountId);
		}
	}

	Store::SendEvent(C_StoreId, C_Event_GlobalVIPListOnMapUpdated, [_MapUid]);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the vip list on a map
K_State Mutation_SetFollowersListOnMap(K_State _State, Text _MapUid, Text _SeasonUid, Text[] _AccountIdList) {
	declare K_State State = _State;

	if (!State.FollowersList.existskey(_SeasonUid)) {
		State.FollowersList[_SeasonUid] = [];
	}
	State.FollowersList[_SeasonUid][_MapUid] = [];
	foreach (VIPAccountId in _AccountIdList) {
		State.FollowersList[_SeasonUid][_MapUid].add(ClubStruct::LibStructuresClub_K_Member {
			AccountId = VIPAccountId
		});
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the vip list on a map for a club with their display names
K_State Mutation_UpdateFollowersListOnMapDisplayNames(K_State _State, Text _MapUid, Text _SeasonUid) {
	declare K_State State = _State;

	if (State.FollowersList.existskey(_SeasonUid) && State.FollowersList[_SeasonUid].existskey(_MapUid)) {
		foreach (Index => Follower in State.FollowersList[_SeasonUid][_MapUid]) {
			State.FollowersList[_SeasonUid][_MapUid][Index].DisplayName = UserStore::GetUserMgrPlayerName(Follower.AccountId);
		}
	}

	Store::SendEvent(C_StoreId, C_Event_FollowersListOnMapUpdated, [_MapUid]);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the skin uploads array
 *
 *	@param	_State										The current state
 *	@param	_Offset										The skin upload list starting offset
 *	@param	_SkinUploadsTotal					The total number of skin uploads in the database
 *	@param	_SkinUploads							The skin uploads to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetSkinUploads(
	K_State _State,
	Integer _Offset,
	Integer _SkinUploadsTotal,
	ClubStruct::LibStructuresClub_K_BucketActivity[] _SkinUploads
) {
	declare K_State State = _State;
	
	State.SkinUploadsPager.BucketActivities = [];
	foreach (Key => SkinUpload in _SkinUploads) {
		State.SkinUploadsPager.BucketActivities[_Offset + Key] = SkinUpload;
	}
	State.SkinUploadsPager.Total = _SkinUploadsTotal;
	
	Store::SendEvent(C_StoreId, C_Event_SkinUploadsUpdated);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the skin uploads offset
K_State Mutation_SetSkinUploadsOffset(K_State _State, Integer _Offset) {
	declare K_State State = _State;
	State.SkinUploadsPager.Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the item uploads array
 *
 *	@param	_State										The current state
 *	@param	_Offset										The item upload list starting offset
 *	@param	_ItemUploadsTotal					The total number of item uploads in the database
 *	@param	_ItemUploads							The item uploads to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetItemUploads(
	K_State _State,
	Integer _Offset,
	Integer _ItemUploadsTotal,
	ClubStruct::LibStructuresClub_K_BucketActivity[] _ItemUploads
) {
	declare K_State State = _State;
	
	State.ItemUploadsPager.BucketActivities = [];
	foreach (Key => ItemUpload in _ItemUploads) {
		State.ItemUploadsPager.BucketActivities[_Offset + Key] = ItemUpload;
	}
	State.ItemUploadsPager.Total = _ItemUploadsTotal;
	
	Store::SendEvent(C_StoreId, C_Event_ItemUploadsUpdated);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the item uploads offset
K_State Mutation_SetItemUploadsOffset(K_State _State, Integer _Offset) {
	declare K_State State = _State;
	State.ItemUploadsPager.Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the map reviews pager array
 *
 *	@param	_State										The current state
 *	@param	_Offset										The room list starting offset
 *	@param	_ClubMapReviewsTotal			The total number of map reviews in the database
 *	@param	_MapReviews								The map reviews to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetMapReviewsPager(
	K_State _State,
	Integer _Offset,
	Integer _ClubMapReviewsTotal,
	ClubStruct::LibStructuresClub_K_MapReview[] _MapReviews
) {
	declare K_State State = _State;
	
	State.MapReviewsPager.MapReviews = [];
	foreach (Key => MapReview in _MapReviews) {
		State.MapReviewsPager.MapReviews[_Offset + Key] = MapReview;
	}
	State.MapReviewsPager.Total = _ClubMapReviewsTotal;
	
	Store::SendEvent(C_StoreId, C_Event_MapReviewsUpdated);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the map reviews pager offset
K_State Mutation_SetMapReviewsOffset(K_State _State, Integer _Offset) {
	declare K_State State = _State;
	State.MapReviewsPager.Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Request new clubs
 *	The previous and next page will be
 *	requested at the same time
 */
Void Action_LoadClubsPage(Text _FilterName, Integer _Section, Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (G_Request_ClubsPaging.existskey(_Section) && Http::IsInitialized(G_Request_ClubsPaging[_Section])) {
		G_Request_ClubsPaging[_Section] = Http::Destroy(G_Request_ClubsPaging[_Section]);
	}
	// Create new request
	G_Request_ClubsPaging[_Section] = ClubAPI::GetClubs(_FilterName, _Section == C_Section_MyClubs, _Offset, _Length);
	
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	TMNext_ClubStore_State = Mutation_SetClubsOffset(TMNext_ClubStore_State, _Section, _Offset);
}
Void Action_LoadAllClubsPage(Text _FilterName, Integer _Offset, Integer _Length) {
	Action_LoadClubsPage(_FilterName, C_Section_AllClubs, _Offset, _Length);
}
Void Action_LoadMyClubsPage(Integer _Offset, Integer _Length) {
	Action_LoadClubsPage("", C_Section_MyClubs, _Offset, _Length);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Request new clubs for the browser
 *	The previous and next page will be
 *	requested at the same time
 */
Void Action_LoadClubsBrowser(Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_BrowserClubsPaging)) {
		G_Request_BrowserClubsPaging = Http::Destroy(G_Request_BrowserClubsPaging);
	}
	// Create new request
	G_Request_BrowserClubsPaging = ClubAPI::GetClubs(True, _Offset, _Length);
	
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	TMNext_ClubStore_State = Mutation_SetBrowserClubsOffset(TMNext_ClubStore_State, _Offset);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Request new clubs of the user
Void Action_LoadUserClubs(Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_UserClubs)) {
		G_Request_UserClubs = Http::Destroy(G_Request_UserClubs);
	}
	// Create new request
	G_Request_UserClubs = ClubAPI::GetClubs(True, _Offset, _Length);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Request created club of the user
Void Action_LoadCreatedClub(Integer _ClubId) {
	G_Request_CreatedClubUpdate = Http::DestroyAndCreate(
		G_Request_CreatedClubUpdate,
		ClubAPI::GetClub(_ClubId)
	);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the user current club membership
Void Action_UpdateUserCurrentClubMembership(Integer _ClubId) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_UserCurrentClubMembership.Request)) {
		G_Request_UserCurrentClubMembership.Request = Http::Destroy(G_Request_UserCurrentClubMembership.Request);
	}
	// Create new request
	if (_ClubId != ClubStruct::C_ClubNullId) {
		G_Request_UserCurrentClubMembership.Request = ClubAPI::GetClubMemberWithId(_ClubId, LocalUser.WebServicesUserId);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Edit the club
Void Action_EditClub(ClubStruct::LibStructuresClub_K_Club _EditedClub) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_EditClub.EditClubRequest)) {
		Http::Destroy(G_Request_EditClub.EditClubRequest);
	}
	G_Request_EditClub.Club = _EditedClub;
	if (G_Request_EditClub.Club.Description == "") {
		// @HACK Because the API does not accept an empty desciption...
		G_Request_EditClub.Club.Description = " ";
	}

	// Club decal
	if (G_Request_EditClub.Club.DecalUrl != "" && !Http.IsValidUrl(G_Request_EditClub.Club.DecalUrl) && !TL::StartsWith("http", G_Request_EditClub.Club.DecalUrl, True, False) && !C_ClubThemes_Folders.existskey(G_Request_EditClub.Club.DecalUrl)) {
		G_Request_EditClub.UploadClubMediaRequests[C_MediaType_Decal] = ClubAPI::PostUploadClubMedia(G_Request_EditClub.Club.Id, C_MediaType_Decal, G_Request_EditClub.Club.DecalUrl);
	}

	// Club icon
	if (G_Request_EditClub.Club.IconUrl != "" && !Http.IsValidUrl(G_Request_EditClub.Club.IconUrl) && !TL::StartsWith("http", G_Request_EditClub.Club.IconUrl, True, False) && !C_ClubThemes_Folders.existskey(G_Request_EditClub.Club.IconUrl)) {
		G_Request_EditClub.UploadClubMediaRequests[C_MediaType_Icon] = ClubAPI::PostUploadClubMedia(G_Request_EditClub.Club.Id, C_MediaType_Icon, G_Request_EditClub.Club.IconUrl);
	}

	// Club background
	if (G_Request_EditClub.Club.BgUrl != "" && !Http.IsValidUrl(G_Request_EditClub.Club.BgUrl) && !TL::StartsWith("http", G_Request_EditClub.Club.BgUrl, True, False) && !C_ClubThemes_Folders.existskey(G_Request_EditClub.Club.BgUrl)) {
		G_Request_EditClub.UploadClubMediaRequests[C_MediaType_Bg] = ClubAPI::PostUploadClubMedia(G_Request_EditClub.Club.Id, C_MediaType_Bg, G_Request_EditClub.Club.BgUrl);
	}

	// Club vertical
	if (G_Request_EditClub.Club.VerticalUrl != "" && !Http.IsValidUrl(G_Request_EditClub.Club.VerticalUrl) && !TL::StartsWith("http", G_Request_EditClub.Club.VerticalUrl, True, False) && !C_ClubThemes_Folders.existskey(G_Request_EditClub.Club.VerticalUrl)) {
		G_Request_EditClub.UploadClubMediaRequests[C_MediaType_Vertical] = ClubAPI::PostUploadClubMedia(G_Request_EditClub.Club.Id, C_MediaType_Vertical, G_Request_EditClub.Club.VerticalUrl);
	}

	// Club decal sponsor
	if (G_Request_EditClub.Club.DecoImageUrl_DecalSponsor4x1 != "" && !Http.IsValidUrl(G_Request_EditClub.Club.DecoImageUrl_DecalSponsor4x1) && !TL::StartsWith("http", G_Request_EditClub.Club.DecoImageUrl_DecalSponsor4x1, True, False) && !C_ClubThemes_Folders.existskey(G_Request_EditClub.Club.DecoImageUrl_DecalSponsor4x1)) {
		G_Request_EditClub.UploadClubMediaRequests[C_MediaType_DecalSponsor] = ClubAPI::PostUploadClubMedia(G_Request_EditClub.Club.Id, C_MediaType_DecalSponsor, G_Request_EditClub.Club.DecoImageUrl_DecalSponsor4x1);
	}

	// Club screen 2
	if (G_Request_EditClub.Club.DecoImageUrl_Screen16x9 != "" && !Http.IsValidUrl(G_Request_EditClub.Club.DecoImageUrl_Screen16x9) && !TL::StartsWith("http", G_Request_EditClub.Club.DecoImageUrl_Screen16x9, True, False) && !C_ClubThemes_Folders.existskey(G_Request_EditClub.Club.DecoImageUrl_Screen16x9)) {
		G_Request_EditClub.UploadClubMediaRequests[C_MediaType_Screen16x9] = ClubAPI::PostUploadClubMedia(G_Request_EditClub.Club.Id, C_MediaType_Screen16x9, G_Request_EditClub.Club.DecoImageUrl_Screen16x9);
	}

	// Club screen 8
	if (G_Request_EditClub.Club.DecoImageUrl_Screen8x1 != "" && !Http.IsValidUrl(G_Request_EditClub.Club.DecoImageUrl_Screen8x1) && !TL::StartsWith("http", G_Request_EditClub.Club.DecoImageUrl_Screen8x1, True, False) && !C_ClubThemes_Folders.existskey(G_Request_EditClub.Club.DecoImageUrl_Screen8x1)) {
		G_Request_EditClub.UploadClubMediaRequests[C_MediaType_Screen8x1] = ClubAPI::PostUploadClubMedia(G_Request_EditClub.Club.Id, C_MediaType_Screen8x1, G_Request_EditClub.Club.DecoImageUrl_Screen8x1);
	}

	// Club screen 16
	if (G_Request_EditClub.Club.DecoImageUrl_Screen16x1 != "" && !Http.IsValidUrl(G_Request_EditClub.Club.DecoImageUrl_Screen16x1) && !TL::StartsWith("http", G_Request_EditClub.Club.DecoImageUrl_Screen16x1, True, False) && !C_ClubThemes_Folders.existskey(G_Request_EditClub.Club.DecoImageUrl_Screen16x1)) {
		G_Request_EditClub.UploadClubMediaRequests[C_MediaType_Screen16x1] = ClubAPI::PostUploadClubMedia(G_Request_EditClub.Club.Id, C_MediaType_Screen16x1, G_Request_EditClub.Club.DecoImageUrl_Screen16x1);
	}

	if (G_Request_EditClub.UploadClubMediaRequests.count == 0) {
		G_Request_EditClub.EditClubRequest = ClubAPI::PostEditClub(G_Request_EditClub.Club);
	}
	G_Request_EditClub.ErrorMessage = "";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Delete the club
Void Action_DeleteClub(Integer _ClubId) {
	G_Request_DeleteClub = Http::DestroyAndCreate(
		G_Request_DeleteClub,
		Http::SetMetadata(
			ClubAPI::PostDeleteClub(_ClubId),
			[C_Metadata_ClubId => ""^_ClubId]
		)
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the user current club
Void Action_SetUserCurrentClub(ClubStruct::LibStructuresClub_K_Club _Club) {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	TMNext_ClubStore_State = Mutation_SetUserCurrentClub(TMNext_ClubStore_State, _Club);
	TMNext_ClubStore_State = Mutation_SetUserCurrentClubMembership(TMNext_ClubStore_State, ClubStruct::GetEmptyMember());
	TMNext_ClubStore_State = Mutation_SetUserCurrentClubMembers(TMNext_ClubStore_State, 0, 0, []);
	TMNext_ClubStore_State = Mutation_SetUserCurrentClubMembersOffset(TMNext_ClubStore_State, 0);
	TMNext_ClubStore_State = Mutation_SetUserCurrentClubMemberRequestsOffset(TMNext_ClubStore_State, 0);
	
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_ClubMembersPaging.Request)) {
		G_Request_ClubMembersPaging.Request = Http::Destroy(G_Request_ClubMembersPaging.Request);
	}
	
	Action_UpdateUserCurrentClubMembership(_Club.Id);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the store is loading the pinned club and club's tag
Boolean IsLoadingPinAndTagClub() {
	return G_Request_LoadPinAndTagClub.IsLoading;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the loading status of the pinned club and club's tag
K_LoadPinAndTagClubRequest Private_UpdateIsLoadingPinAndTagClub(K_LoadPinAndTagClubRequest _LoadPinAndTagClubRequest) {
	declare K_LoadPinAndTagClubRequest LoadPinAndTagClubRequest = _LoadPinAndTagClubRequest;
	LoadPinAndTagClubRequest.IsLoading = (
		(
			Http::IsInitialized(LoadPinAndTagClubRequest.Request_GetMyClubInfo) &&
			Http::IsRunning(LoadPinAndTagClubRequest.Request_GetMyClubInfo)
		) || (
			Http::IsInitialized(LoadPinAndTagClubRequest.Request_GetPinnedClub) &&
			Http::IsRunning(LoadPinAndTagClubRequest.Request_GetPinnedClub)
		) || (
			Http::IsInitialized(LoadPinAndTagClubRequest.Request_GetPinnedClubMemberWithId) &&
			Http::IsRunning(LoadPinAndTagClubRequest.Request_GetPinnedClubMemberWithId)
		) || (
			Task::IsInitialized(G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag) &&
			Task::IsRunning(G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag)
		)
	);
	return LoadPinAndTagClubRequest;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the pinned club and club's tag
Void Action_LoadPinAndTagClub(Text _CurrentClubTag) {
	if (Http::IsInitialized(G_Request_LoadPinAndTagClub.Request_GetPinnedClub)) {
		G_Request_LoadPinAndTagClub.Request_GetPinnedClub = Http::Destroy(G_Request_LoadPinAndTagClub.Request_GetPinnedClub);
	}
	if (Http::IsInitialized(G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId)) {
		G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId = Http::Destroy(G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId);
	}
	if (Task::IsInitialized(G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag)) {
		G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag = Task::Destroy(G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag);
	}
	G_Request_LoadPinAndTagClub.Request_GetMyClubInfo = Http::DestroyAndCreate(
		G_Request_LoadPinAndTagClub.Request_GetMyClubInfo,
		ClubAPI::GetMyClubInfo()
	);
	G_Request_LoadPinAndTagClub.PinnedClub = K_ClubDetails {
		Club = ClubStruct::GetEmptyClub(),
		Membership = ClubStruct::GetEmptyMember()
	};
	G_Request_LoadPinAndTagClub.TaggedClubId = ClubStruct::C_ClubNullId;
	G_Request_LoadPinAndTagClub.TaggedClubTag = "";
	G_Request_LoadPinAndTagClub.CurrentClubTag = _CurrentClubTag;
	G_Request_LoadPinAndTagClub = Private_UpdateIsLoadingPinAndTagClub(G_Request_LoadPinAndTagClub);
	Store::SendEvent(C_StoreId, C_Event_LoadPinAndTagClubUpdate, [""^G_Request_LoadPinAndTagClub.IsLoading]);
}
Void Action_LoadPinAndTagClub() {
	if (LocalUser == Null) {
		Action_LoadPinAndTagClub("");
	} else {
		Action_LoadPinAndTagClub(LocalUser.ClubTag);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the user pinned club
Void Action_PinClub(ClubStruct::LibStructuresClub_K_Club _Club, ClubStruct::LibStructuresClub_K_Member _Membership) {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	if (_Club.Id != ClubStruct::C_ClubNullId && TMNext_ClubStore_State.PinnedClub.Club.Id != _Club.Id) {
		G_Request_PinOrUnpinClub.Request = Http::DestroyAndCreate(
			G_Request_PinOrUnpinClub.Request,
			ClubAPI::PostPinOrUnpinClub(_Club.Id)
		);
		G_Request_PinOrUnpinClub.Club = _Club;
		G_Request_PinOrUnpinClub.Membership = _Membership;

		if (Http::IsInitialized(G_Request_PinOrUnpinClub.Request)) {
			TMNext_ClubStore_State = Mutation_UpdatePinnedClubStatus(TMNext_ClubStore_State, C_PinnedClubStatus_Updating);
		} else {
			TMNext_ClubStore_State = Mutation_UpdatePinnedClubStatus(TMNext_ClubStore_State, C_PinnedClubStatus_OK);
		}
	} else if (_Club.Id != ClubStruct::C_ClubNullId && TMNext_ClubStore_State.PinnedClub.Club.Id == _Club.Id) {
		TMNext_ClubStore_State = Mutation_SetUserPinnedClub(TMNext_ClubStore_State, TMNext_ClubStore_State.PinnedClub.Club, _Membership);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the user pinned club with an empty club
Void Action_UnpinClub() {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	if (TMNext_ClubStore_State.PinnedClub.Club.Id != ClubStruct::C_ClubNullId) {
		G_Request_PinOrUnpinClub.Request = Http::DestroyAndCreate(
			G_Request_PinOrUnpinClub.Request,
			ClubAPI::PostPinOrUnpinClub(TMNext_ClubStore_State.PinnedClub.Club.Id)
		);
		G_Request_PinOrUnpinClub.Club = ClubStruct::GetEmptyClub();
		G_Request_PinOrUnpinClub.Membership = ClubStruct::GetEmptyMember();

		if (Http::IsInitialized(G_Request_PinOrUnpinClub.Request)) {
			TMNext_ClubStore_State = Mutation_UpdatePinnedClubStatus(TMNext_ClubStore_State, C_PinnedClubStatus_Updating);
		} else {
			TMNext_ClubStore_State = Mutation_UpdatePinnedClubStatus(TMNext_ClubStore_State, C_PinnedClubStatus_OK);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the user pinned club with the user current club
Void Action_PinCurrentClub() {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	Action_PinClub(TMNext_ClubStore_State.CurrentClub.Club, TMNext_ClubStore_State.CurrentClub.Membership);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the update status of the club tag
K_ApplyOrRemoveClubTagRequest Private_UpdateIsUpdatingClubTag(K_ApplyOrRemoveClubTagRequest _ApplyOrRemoveClubTagRequest) {
	declare K_ApplyOrRemoveClubTagRequest ApplyOrRemoveClubTagRequest = _ApplyOrRemoveClubTagRequest;
	ApplyOrRemoveClubTagRequest.IsUpdating = (
		(
			Http::IsInitialized(ApplyOrRemoveClubTagRequest.Request_ApplyOrRemoveClubTag) &&
			Http::IsRunning(ApplyOrRemoveClubTagRequest.Request_ApplyOrRemoveClubTag)
		) || (
			Task::IsInitialized(ApplyOrRemoveClubTagRequest.Task_SetPlayerClubTag) &&
			Task::IsRunning(ApplyOrRemoveClubTagRequest.Task_SetPlayerClubTag)
		)
	);
	return ApplyOrRemoveClubTagRequest;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the user club tag
Void Action_ApplyClubTag(ClubStruct::LibStructuresClub_K_Club _Club) {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	if (_Club.Id != ClubStruct::C_ClubNullId) {
		if (TMNext_ClubStore_State.TaggedClubId != _Club.Id) {
			G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag = Http::DestroyAndCreate(
				G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag,
				ClubAPI::PostApplyOrRemoveClubTag(_Club.Id)
			);
		}
		if (TMNext_ClubStore_State.TaggedClubTag != _Club.Tag) {
			G_Request_ApplyOrRemoveClubTag.Task_SetPlayerClubTag = Task::DestroyAndCreate(
				G_Request_ApplyOrRemoveClubTag.Task_SetPlayerClubTag,
				UserMgr, UserMgr.Tag_SetClubTag(MainUser::GetMainUserId(), _Club.Tag)
			);
		}

		G_Request_ApplyOrRemoveClubTag.Club = _Club;
		// We consider the Live API as the source of truth for the club tag
		// The core services task is only a helper updated with the Live API values
		// So the update is considered an instant success if no requests were made to the Live API
		G_Request_ApplyOrRemoveClubTag.IsSuccess = !Http::IsInitialized(G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag);
		G_Request_ApplyOrRemoveClubTag = Private_UpdateIsUpdatingClubTag(G_Request_ApplyOrRemoveClubTag);
	
		if (G_Request_ApplyOrRemoveClubTag.IsUpdating) {
			TMNext_ClubStore_State = Mutation_UpdateClubTagStatus(TMNext_ClubStore_State, C_ClubTagStatus_Updating);
		} else {
			TMNext_ClubStore_State = Mutation_UpdateClubTagStatus(TMNext_ClubStore_State, C_ClubTagStatus_OK);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Remove the user club tag
Void Action_RemoveClubTag() {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	if (TMNext_ClubStore_State.TaggedClubId != ClubStruct::C_ClubNullId) {
		G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag = Http::DestroyAndCreate(
			G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag,
			ClubAPI::PostApplyOrRemoveClubTag(TMNext_ClubStore_State.TaggedClubId)
		);
		G_Request_ApplyOrRemoveClubTag.Task_SetPlayerClubTag = Task::DestroyAndCreate(
			G_Request_ApplyOrRemoveClubTag.Task_SetPlayerClubTag,
			UserMgr, UserMgr.Tag_SetClubTag(MainUser::GetMainUserId(), "")
		);
		G_Request_ApplyOrRemoveClubTag.Club = ClubStruct::GetEmptyClub();
		// We consider the Live API as the source of truth for the club tag
		// The core services task is only a helper updated with the Live API values
		// So the update is considered an instant success if no requests were made to the Live API
		G_Request_ApplyOrRemoveClubTag.IsSuccess = !Http::IsInitialized(G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag);
		G_Request_ApplyOrRemoveClubTag = Private_UpdateIsUpdatingClubTag(G_Request_ApplyOrRemoveClubTag);

		if (G_Request_ApplyOrRemoveClubTag.IsUpdating) {
			TMNext_ClubStore_State = Mutation_UpdateClubTagStatus(TMNext_ClubStore_State, C_ClubTagStatus_Updating);
		} else {
			TMNext_ClubStore_State = Mutation_UpdateClubTagStatus(TMNext_ClubStore_State, C_ClubTagStatus_OK);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Request club members
Void Action_LoadUserCurrentClubMembersPage(Integer _ClubId, Integer _Offset, Integer _Length, Text _Login) {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;

	// Abort previous requests if any
	if (Http::IsInitialized(G_Request_ClubMembersPaging.Request)) {
		G_Request_ClubMembersPaging.Request = Http::Destroy(G_Request_ClubMembersPaging.Request);
	}
	if (Http::IsInitialized(G_Request_GetClubMemberFromLogin.Request)) {
		G_Request_GetClubMemberFromLogin.Request = Http::Destroy(G_Request_GetClubMemberFromLogin.Request);
	}

	// Create new request
	if (_ClubId != ClubStruct::C_ClubNullId) {
		if (_Login == "") {
			G_Request_ClubMembersPaging.Request = ClubAPI::GetClubMembers(_ClubId, _Offset, _Length);
		} else {
			G_Request_GetClubMemberFromLogin.Request = ClubAPI::GetClubMemberFromLogin(_ClubId, _Login);
		}
		TMNext_ClubStore_State = Mutation_SetUserCurrentClubMembersOffset(TMNext_ClubStore_State, _Offset);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Request new club member requests
 *	The previous and next page will be
 *	requested at the same time
 */
Void Action_LoadUserCurrentClubMemberRequestsPage(Integer _ClubId, Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_ClubMemberRequestsPaging.Request)) {
		G_Request_ClubMemberRequestsPaging.Request = Http::Destroy(G_Request_ClubMemberRequestsPaging.Request);
	}
	// Create new request
	G_Request_ClubMemberRequestsPaging.Request = ClubAPI::GetClubMemberRequests(_ClubId, _Offset, _Length);
	
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	TMNext_ClubStore_State = Mutation_SetUserCurrentClubMemberRequestsOffset(TMNext_ClubStore_State, _Offset);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Create the given club
Void Action_CreateClub(ClubStruct::LibStructuresClub_K_Club _Club) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_CreateClub.CreateClubRequest)) {
		G_Request_CreateClub.CreateClubRequest = Http::Destroy(G_Request_CreateClub.CreateClubRequest);
	}
	// Create new request
	G_Request_CreateClub.CreateClubRequest = ClubAPI::PostClubCreate(_Club);
	G_Request_CreateClub.Club = _Club;
	G_Request_CreateClub.ErrorMessage = "";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Delete the given member from the club
Void Action_DeleteClubMember(Integer _ClubId, Text _AccountId) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_DeleteClubMember)) {
		G_Request_DeleteClubMember = Http::Destroy(G_Request_DeleteClubMember);
	}
	// Create new request
	G_Request_DeleteClubMember = ClubAPI::DeleteClubMemberWithId(_ClubId, _AccountId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Change the role of the given member from the club
Void Action_EditClubMember(Integer _ClubId, Text _AccountId, Text _Role) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_EditClubMember)) {
		G_Request_EditClubMember = Http::Destroy(G_Request_EditClubMember);
	}
	// Create new request
	G_Request_EditClubMember = ClubAPI::EditClubMemberWithId(_ClubId, _AccountId, _Role);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Create a member with the current user to the given club
Void Action_CreateClubMember(Integer _ClubId) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_CreateClubMember)) {
		G_Request_CreateClubMember = Http::Destroy(G_Request_CreateClubMember);
	}
	// Create new request
	G_Request_CreateClubMember = ClubAPI::PostCreateClubMember(_ClubId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update a member as VIP or not in the club
Void Action_UpdateClubVIP(Integer _ClubId, Text _AccountId, Boolean _SetVIP) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_UpdateClubVIP)) {
		G_Request_UpdateClubVIP = Http::Destroy(G_Request_UpdateClubVIP);
	}
	// Create new request
	if (_SetVIP) {
		G_Request_UpdateClubVIP = ClubAPI::PostSetVIP(_ClubId, _AccountId);
	} else {
		G_Request_UpdateClubVIP = ClubAPI::PostUnsetVIP(_ClubId, _AccountId);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Request new club rooms
 *	The previous and next page will be
 *	requested at the same time
 */
Void Action_LoadAllClubRoomsPage(Text _FilterName, Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_AllClubRoomsPaging)) {
		G_Request_AllClubRoomsPaging = Http::Destroy(G_Request_AllClubRoomsPaging);
	}
	// Create new request
	G_Request_AllClubRoomsPaging = ClubAPI::GetAllClubRooms(_FilterName, _Offset, _Length);
	
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	TMNext_ClubStore_State = Mutation_SetAllClubRoomsOffset(TMNext_ClubStore_State, _Offset);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Request new active activities of a specific club
 *	The previous and next page will be
 *	requested at the same time
 */
Void Action_LoadClubActivitiesPage(Integer _ClubId, Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (G_Request_ClubActivitiesPagingList.existskey(_ClubId) && Http::IsInitialized(G_Request_ClubActivitiesPagingList[_ClubId])) {
		G_Request_ClubActivitiesPagingList[_ClubId] = Http::Destroy(G_Request_ClubActivitiesPagingList[_ClubId]);
	}
	// Create new request
	G_Request_ClubActivitiesPagingList[_ClubId] = ClubAPI::GetClubActivities(_ClubId, _Offset, _Length, True);
	
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	TMNext_ClubStore_State = Mutation_SetClubActivitiesOffset(TMNext_ClubStore_State, _ClubId, _Offset);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Request new Inactive activities of a specific club
 *	The previous and next page will be
 *	requested at the same time
 */
Void Action_LoadInactiveClubActivitiesPage(Integer _ClubId, Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (G_Request_InactiveClubActivitiesPagingList.existskey(_ClubId) && Http::IsInitialized(G_Request_InactiveClubActivitiesPagingList[_ClubId])) {
		G_Request_InactiveClubActivitiesPagingList[_ClubId] = Http::Destroy(G_Request_InactiveClubActivitiesPagingList[_ClubId]);
	}
	// Create new request
	G_Request_InactiveClubActivitiesPagingList[_ClubId] = ClubAPI::GetClubActivities(_ClubId, _Offset, _Length, False);
	
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	TMNext_ClubStore_State = Mutation_SetInactiveClubActivitiesOffset(TMNext_ClubStore_State, _ClubId, _Offset);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to load clubs featured activity
Void Action_LoadClubsFeaturedActivity(Integer[] _ClubIds) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_ClubsFeaturedActivity)) {
		G_Request_ClubsFeaturedActivity = Http::Destroy(G_Request_ClubsFeaturedActivity);
	}
	// Create new request
	G_Request_ClubsFeaturedActivity = ClubAPI::GetClubsFeaturedActivity(_ClubIds);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to move an activity
Void Action_MoveActivity(Integer _ClubId, Integer _ActivityId, Integer _Position) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_MoveActivity)) {
		G_Request_MoveActivity = Http::Destroy(G_Request_MoveActivity);
	}
	// Create new request
	G_Request_MoveActivity = ClubAPI::PostMoveActivity(_ClubId, _ActivityId, _Position);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to delete an activity
Void Action_DeleteActivity(Integer _ClubId, Integer _ActivityId) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_DeleteActivity)) {
		G_Request_DeleteActivity = Http::Destroy(G_Request_DeleteActivity);
	}
	// Create new request
	G_Request_DeleteActivity = ClubAPI::PostDeleteActivity(_ClubId, _ActivityId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Register maps of a campaign to the NadeoServices
Void Action_CreateCampaign(CampaignStruct::LibCampaignStruct_K_Campaign _Campaign) {
	if (!G_CreateOrEditCampaignRequestList.existskey(_Campaign.Id)) {
		G_CreateOrEditCampaignRequestList[_Campaign.Id] = K_CreateOrEditCampaignRequest {};
	}
	G_CreateOrEditCampaignRequestList[_Campaign.Id].Campaign = _Campaign;
	G_CreateOrEditCampaignRequestList[_Campaign.Id].IsEditingCampaign = False;

	foreach (Category in _Campaign.Categories) {
		foreach (Map in Category.Playlist) {
			// Abort previous request if any
			if (
				G_CreateOrEditCampaignRequestList[_Campaign.Id].Task_RegisterMapList.existskey(Map.Uid) &&
				Task::IsInitialized(G_CreateOrEditCampaignRequestList[_Campaign.Id].Task_RegisterMapList[Map.Uid])
			) {
				Task::Destroy(G_CreateOrEditCampaignRequestList[_Campaign.Id].Task_RegisterMapList[Map.Uid]);
				G_CreateOrEditCampaignRequestList[_Campaign.Id].Task_RegisterMapList.removekey(Map.Uid);
			}
			if (Map.Uid != "" && Map.DownloadUrl == "") { //< Do not register map already registered
				G_CreateOrEditCampaignRequestList[_Campaign.Id].Task_RegisterMapList[Map.Uid] = Task::Create(DataFileMgr, DataFileMgr.Map_NadeoServices_Register(MainUser::GetMainUserId(), Map.Uid));
			}
		}
	}

	if (G_CreateOrEditCampaignRequestList[_Campaign.Id].Task_RegisterMapList.count == 0) {
		G_CreateOrEditCampaignRequestList[_Campaign.Id].Request = Http::DestroyAndCreate(
			G_CreateOrEditCampaignRequestList[_Campaign.Id].Request, 
			ClubAPI::PostCreateCampaign(_Campaign)
		);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Start request to edit a campaign
Void Action_EditCampaign(CampaignStruct::LibCampaignStruct_K_Campaign _Campaign) {
	if (!G_CreateOrEditCampaignRequestList.existskey(_Campaign.Id)) {
		G_CreateOrEditCampaignRequestList[_Campaign.Id] = K_CreateOrEditCampaignRequest {};
	}
	G_CreateOrEditCampaignRequestList[_Campaign.Id].Campaign = _Campaign;
	G_CreateOrEditCampaignRequestList[_Campaign.Id].IsEditingCampaign = True;

	foreach (Category in _Campaign.Categories) {
		foreach (Map in Category.Playlist) {
			// Abort previous request if any
			if (
				G_CreateOrEditCampaignRequestList[_Campaign.Id].Task_RegisterMapList.existskey(Map.Uid) &&
				Task::IsInitialized(G_CreateOrEditCampaignRequestList[_Campaign.Id].Task_RegisterMapList[Map.Uid])
			) {
				Task::Destroy(G_CreateOrEditCampaignRequestList[_Campaign.Id].Task_RegisterMapList[Map.Uid]);
				G_CreateOrEditCampaignRequestList[_Campaign.Id].Task_RegisterMapList.removekey(Map.Uid);
			}
			if (Map.Uid != "" && Map.DownloadUrl == "") { //< Do not register map already registered
				G_CreateOrEditCampaignRequestList[_Campaign.Id].Task_RegisterMapList[Map.Uid] = Task::Create(DataFileMgr, DataFileMgr.Map_NadeoServices_Register(MainUser::GetMainUserId(), Map.Uid));
			}
		}
	}

	if (G_CreateOrEditCampaignRequestList[_Campaign.Id].Task_RegisterMapList.count == 0) {
		G_CreateOrEditCampaignRequestList[_Campaign.Id].Request = Http::DestroyAndCreate(
			G_CreateOrEditCampaignRequestList[_Campaign.Id].Request, 
			ClubAPI::PostEditCampaign(_Campaign)
		);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to validate an activity
Void Action_ActivateActivity(Integer _ClubId, Integer _ActivityId, Boolean _Active) {
	// Abort previous request if any
	if (G_Request_ActivateActivityList.existskey(_ActivityId) && Http::IsInitialized(G_Request_ActivateActivityList[_ActivityId])) {
		G_Request_ActivateActivityList[_ActivityId] = Http::Destroy(G_Request_ActivateActivityList[_ActivityId]);
	}
	// Create new request
	G_Request_ActivateActivityList[_ActivityId] = ClubAPI::PostActivateActivity(_ClubId, _ActivityId, _Active);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to update the privacy of an activity
Void Action_ActivityUpdatePrivacy(Integer _ClubId, Integer _ActivityId, Boolean _Public) {
	// Abort previous request if any
	if (G_Request_ActivityUpdatePrivacyList.existskey(_ActivityId) && Http::IsInitialized(G_Request_ActivityUpdatePrivacyList[_ActivityId])) {
		G_Request_ActivityUpdatePrivacyList[_ActivityId] = Http::Destroy(G_Request_ActivityUpdatePrivacyList[_ActivityId]);
	}
	// Create new request
	G_Request_ActivityUpdatePrivacyList[_ActivityId] = ClubAPI::PostUpdatePrivacyActivity(_ClubId, _ActivityId, _Public);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to update the featured activity
Void Action_UpdateFeaturedActivity(Integer _ClubId, Integer _ActivityId, Boolean _Featured) {
	// Abort previous request if any
	if (G_Request_UpdateFeaturedActivityList.existskey(_ActivityId) && Http::IsInitialized(G_Request_UpdateFeaturedActivityList[_ActivityId])) {
		G_Request_UpdateFeaturedActivityList[_ActivityId] = Http::Destroy(G_Request_UpdateFeaturedActivityList[_ActivityId]);
	}
	// Create new request
	G_Request_UpdateFeaturedActivityList[_ActivityId] = ClubAPI::PostUpdateFeaturedActivity(_ClubId, _ActivityId, _Featured);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to create a club room
Void Action_CreateClubRoom(ClubStruct::LibStructuresClub_K_Room _Room) {
	G_Request_CreateOrEditClubRoom.Room = _Room;
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_CreateOrEditClubRoom.Request)) {
		G_Request_CreateOrEditClubRoom.Request = Http::Destroy(G_Request_CreateOrEditClubRoom.Request);
	}
	// Create new request
	if (_Room.IsHostedByNadeo) {
		G_Request_CreateOrEditClubRoom.Request = ClubAPI::PostClubRoomCreate(_Room);
	} else {
		G_Request_CreateOrEditClubRoom.Request = ClubAPI::PostClubRoomCreateFromServer(_Room.ClubId, _Room.Name, _Room.PlayerServerLogin);
	}
	G_Request_CreateOrEditClubRoom.EditingRoom = False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to edit a club room
Void Action_EditClubRoom(ClubStruct::LibStructuresClub_K_Room _Room) {
	G_Request_CreateOrEditClubRoom.Room = _Room;
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_CreateOrEditClubRoom.Request)) {
		G_Request_CreateOrEditClubRoom.Request = Http::Destroy(G_Request_CreateOrEditClubRoom.Request);
	}
	// Create new request
	if (_Room.IsHostedByNadeo) {
		G_Request_CreateOrEditClubRoom.Request = ClubAPI::PostClubRoomEdit(_Room);
	} else {
		G_Request_CreateOrEditClubRoom.Request = ClubAPI::PostClubRoomEditFromServer(_Room.ClubId, _Room.Id, _Room.Name, _Room.PlayerServerLogin);
	}

	G_Request_CreateOrEditClubRoom.EditingRoom = True;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to get the list of VIP on a map
Void Action_GetVIPListOnMap(Integer _ClubId, Text _MapUid, Text _SeasonUid) {
	declare Boolean TMNext_ClubStore_IsGettingVIPListOnMap for System = False;
	TMNext_ClubStore_IsGettingVIPListOnMap = True;

	// Abort previous request if any
	if (Http::IsInitialized(G_Request_GetVIPListOnMap.GetVIPListOnMap)) {
		G_Request_GetVIPListOnMap.GetVIPListOnMap = Http::Destroy(G_Request_GetVIPListOnMap.GetVIPListOnMap);
	}
	// Create new request
	if (_ClubId != ClubStruct::C_ClubNullId) {
		G_Request_GetVIPListOnMap.GetVIPListOnMap = ClubAPI::GetVIPListOnMap(_ClubId, _MapUid, _SeasonUid);
	}
	if (Http::IsInitialized(G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap)) {
		Http::Destroy(G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap);
	}
	G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap = ClubAPI::GetGlobalVIPListOnMap(_MapUid, _SeasonUid);
	if (Http::IsInitialized(G_Request_GetVIPListOnMap.GetFollowersListOnMap)) {
		Http::Destroy(G_Request_GetVIPListOnMap.GetFollowersListOnMap);
	}
	G_Request_GetVIPListOnMap.GetFollowersListOnMap = ClubAPI::GetFollowersListOnMap(_MapUid, _SeasonUid);
	G_Request_GetVIPListOnMap.ClubId = _ClubId;
	G_Request_GetVIPListOnMap.MapUid = _MapUid;
	G_Request_GetVIPListOnMap.SeasonUid = _SeasonUid;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to create a bucket activity
Void Action_EditBucketActivity(Integer _ClubId, Integer _ActivityId, Text _Name, Text _MediaUrl) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_CreateOrEditBucketActivity.Request)) {
		G_Request_CreateOrEditBucketActivity.Request = Http::Destroy(G_Request_CreateOrEditBucketActivity.Request);
	}
	// Create new request
	G_Request_CreateOrEditBucketActivity.Request = ClubAPI::PostEditBucket(_ClubId, _ActivityId, _Name);
	G_Request_CreateOrEditBucketActivity.ClubId = _ClubId;
	G_Request_CreateOrEditBucketActivity.ActivityId = _ActivityId;
	G_Request_CreateOrEditBucketActivity.MediaUrl = _MediaUrl;
	G_Request_CreateOrEditBucketActivity.IsEditing = True;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to create a bucket activity
Void Action_CreateBucketActivity(Integer _ClubId, Text _Name, Text _MediaUrl, Text _BucketType) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_CreateOrEditBucketActivity.Request)) {
		G_Request_CreateOrEditBucketActivity.Request = Http::Destroy(G_Request_CreateOrEditBucketActivity.Request);
	}
	// Create new request
	G_Request_CreateOrEditBucketActivity.Request = ClubAPI::PostCreateBucket(_ClubId, _Name, _BucketType);
	G_Request_CreateOrEditBucketActivity.ClubId = _ClubId;
	G_Request_CreateOrEditBucketActivity.MediaUrl = _MediaUrl;
	G_Request_CreateOrEditBucketActivity.IsEditing = False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to create a MapReview activity
Void Action_CreateOrEditMapReviewActivity(ClubStruct::LibStructuresClub_K_MapReview _MapReview, Boolean _IsEditing) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_MapReviewActivity.Request)) {
		G_Request_MapReviewActivity.Request = Http::Destroy(G_Request_MapReviewActivity.Request);
	}

	// Create new request
	if (_IsEditing) {
		G_Request_MapReviewActivity.Request = ClubAPI::PostEditMapReviewActivity(_MapReview);
	} else {
		G_Request_MapReviewActivity.Request = ClubAPI::PostCreateMapReviewActivity(_MapReview);
	}
	G_Request_MapReviewActivity.MapReview = _MapReview;
	G_Request_MapReviewActivity.IsEditing = _IsEditing;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to create or edit an item collection activity
Void Action_CreateOrEditItemCollectionActivity(ClubStruct::LibStructuresClub_K_BucketItem _ItemCollection, Integer _ClubId, Integer _ActivityId, Text _Name, Text _MediaUrl, Boolean _IsEditing, ClubStruct::LibStructuresClub_K_BucketItem _OldItemCollection) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.Request)) {
		G_Request_CreateOrEditItemCollectionActivity.Request = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.Request);
	}
	// Create new request
	if (_IsEditing) {
		G_Request_CreateOrEditItemCollectionActivity.Request = ClubAPI::PostEditBucket(_ClubId, _ActivityId, _Name);
	} else {
		G_Request_CreateOrEditItemCollectionActivity.Request = ClubAPI::PostCreateBucket(_ClubId, _Name, ClubStruct::C_ClubActivity_ItemUpload);
	}
	G_Request_CreateOrEditItemCollectionActivity.ItemCollection = _ItemCollection;
	G_Request_CreateOrEditItemCollectionActivity.OldItemCollection = _OldItemCollection;
	G_Request_CreateOrEditItemCollectionActivity.ClubId = _ClubId;
	G_Request_CreateOrEditItemCollectionActivity.ActivityId = _ActivityId;
	G_Request_CreateOrEditItemCollectionActivity.MediaUrl = _MediaUrl;
	G_Request_CreateOrEditItemCollectionActivity.IsEditing = _IsEditing;
	G_Request_CreateOrEditItemCollectionActivity.CurrentMediaIndex = -1;
	G_Request_CreateOrEditItemCollectionActivity.DeleteMediaPositions = [];
	G_Request_CreateOrEditItemCollectionActivity.ErrorHasOccurred = False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to create a news activity
Void Action_CreateOrEditNewsActivity(ClubStruct::LibStructuresClub_K_News _News, Text _ActivityMediaUrl, Boolean _IsEditing) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_CreateOrEditNewsActivityRequest.Request)) {
		G_Request_CreateOrEditNewsActivityRequest.Request = Http::Destroy(G_Request_CreateOrEditNewsActivityRequest.Request);
	}
	// Create new request
	if (_IsEditing) {
		G_Request_CreateOrEditNewsActivityRequest.Request = ClubAPI::PostEditNews(_News);
	} else {
		G_Request_CreateOrEditNewsActivityRequest.Request = ClubAPI::PostCreateNews(_News);
	}
	G_Request_CreateOrEditNewsActivityRequest.News = _News;
	G_Request_CreateOrEditNewsActivityRequest.ActivityMediaUrl = _ActivityMediaUrl;
	G_Request_CreateOrEditNewsActivityRequest.IsEditing = _IsEditing;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Request new skin uploads
 *	The previous and next page will be
 *	requested at the same time
 */
Void Action_LoadAllSkinUploadsPage(Text _Sort, Text _Order, Text _FilterName, Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_SkinUploadsPaging)) {
		G_Request_SkinUploadsPaging = Http::Destroy(G_Request_SkinUploadsPaging);
	}
	// Create new request
	G_Request_SkinUploadsPaging = ClubAPI::GetAllBucketActivites(_Sort, _Order, _FilterName, _Offset, _Length, ClubStruct::C_ClubActivity_SkinUpload);
	
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	TMNext_ClubStore_State = Mutation_SetSkinUploadsOffset(TMNext_ClubStore_State, _Offset);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Request new item uploads
 *	The previous and next page will be
 *	requested at the same time
 */
Void Action_LoadAllItemUploadsPage(Text _Sort, Text _Order, Text _FilterName, Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_ItemUploadsPaging)) {
		G_Request_ItemUploadsPaging = Http::Destroy(G_Request_ItemUploadsPaging);
	}
	// Create new request
	G_Request_ItemUploadsPaging = ClubAPI::GetAllBucketActivites(_Sort, _Order, _FilterName, _Offset, _Length, ClubStruct::C_ClubActivity_ItemUpload);
	
	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	TMNext_ClubStore_State = Mutation_SetItemUploadsOffset(TMNext_ClubStore_State, _Offset);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to create a rankings activity
Void Action_CreateOrEditRankingsActivity(ClubStruct::LibStructuresClub_K_Activity _Activity, Boolean _IsEditing) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_CreateOrEditRankingsActivityRequest.Request)) {
		G_Request_CreateOrEditRankingsActivityRequest.Request = Http::Destroy(G_Request_CreateOrEditRankingsActivityRequest.Request);
	}
	// Create new request
	if (_IsEditing) {
		G_Request_CreateOrEditRankingsActivityRequest.Request = ClubAPI::PostUpdateActivityName(_Activity.ClubId, _Activity.Id, _Activity.Name);
	} else {
		G_Request_CreateOrEditRankingsActivityRequest.Request = ClubAPI:: PostCreateRanking(_Activity.ClubId, _Activity.Name, _Activity.Type, _Activity.ExternalId);
	}
	G_Request_CreateOrEditRankingsActivityRequest.Activity = _Activity;
	G_Request_CreateOrEditRankingsActivityRequest.IsEditing = _IsEditing;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Request to set or unset a club as featured
Void Action_SetUnsetFeaturedClub(Integer _ClubId, Boolean _Feature) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_SetUnsetFeaturedClub)) {
		G_Request_SetUnsetFeaturedClub = Http::Destroy(G_Request_SetUnsetFeaturedClub);
	}
	// Create new request
	if (_Feature) {
		G_Request_SetUnsetFeaturedClub = ClubAPI::PostSetFeatured(_ClubId);
	} else {
		G_Request_SetUnsetFeaturedClub = ClubAPI::PostUnsetFeatured(_ClubId);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Request to set or unset a club as featured
Void Action_LoadMapReviewActivities(Integer _Offset, Integer _Length, Text _FilterName) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_GetMapReviewActivities)) {
		G_Request_GetMapReviewActivities = Http::Destroy(G_Request_GetMapReviewActivities);
	}
	// Create new request
	G_Request_GetMapReviewActivities = ClubAPI::GetMapReviewActivities(_Offset, _Length, _FilterName);

	declare K_State TMNext_ClubStore_State for System = C_State_Null;
	TMNext_ClubStore_State = Mutation_SetMapReviewsOffset(TMNext_ClubStore_State, _Offset);
}

Void Private_InitializeRequest_ClubsPaging() {
	declare Integer[] Sections = [C_Section_AllClubs, C_Section_MyClubs];
	foreach (Section in Sections) {
		if (G_Request_ClubsPaging.existskey(Section) && Http::IsInitialized(G_Request_ClubsPaging[Section])) {
			Http::Destroy(G_Request_ClubsPaging[Section]);
		}
		G_Request_ClubsPaging[Section] = Http::GetEmptyRequest();
	}
	if (Http::IsInitialized(G_Request_BrowserClubsPaging)) {
		Http::Destroy(G_Request_BrowserClubsPaging);
	}
	G_Request_BrowserClubsPaging = Http::GetEmptyRequest();
}

Void Private_InitializeRequest_UserClubs() {
	if (Http::IsInitialized(G_Request_UserClubs)) {
		G_Request_UserClubs = Http::Destroy(G_Request_UserClubs);
	}
	G_Request_UserClubs = Http::GetEmptyRequest();
}

Void Private_InitializeRequest_CreateClub() {
	if (Http::IsInitialized(G_Request_CreatedClubUpdate)) {
		G_Request_CreatedClubUpdate = Http::Destroy(G_Request_CreatedClubUpdate);
	}
	G_Request_CreatedClubUpdate = Http::GetEmptyRequest();

	if (Http::IsInitialized(G_Request_CreateClub.CreateClubRequest)) {
		Http::Destroy(G_Request_CreateClub.CreateClubRequest);
	}
	foreach (UploadClubMediaRequest in G_Request_CreateClub.UploadClubMediaRequests) {
		Http::Destroy(UploadClubMediaRequest);
	}
	if (Http::IsInitialized(G_Request_CreateClub.DeleteClubRequest)) {
		Http::Destroy(G_Request_CreateClub.DeleteClubRequest);
	}
	G_Request_CreateClub = K_CreateClubRequest {
		Club = ClubStruct::LibStructuresClub_K_Club {},
		CreateClubRequest = Http::GetEmptyRequest(),
		UploadClubMediaRequests = [],
		DeleteClubRequest = Http::GetEmptyRequest()
	};
}

Void Private_InitializeRequest_UserCurrentClubMembership() {
	if (Http::IsInitialized(G_Request_UserCurrentClubMembership.Request)) {
		G_Request_UserCurrentClubMembership.Request = Http::Destroy(G_Request_UserCurrentClubMembership.Request);
	}
	G_Request_UserCurrentClubMembership.Request = Http::GetEmptyRequest();
}

Void Private_InitializeRequest_ClubMembers() {
	if (Http::IsInitialized(G_Request_ClubMembersPaging.Request)) {
		G_Request_ClubMembersPaging.Request = Http::Destroy(G_Request_ClubMembersPaging.Request);
	}
	if (Task::IsInitialized(G_Request_ClubMembersPaging.Task_GetDisplayName)) {
		G_Request_ClubMembersPaging.Task_GetDisplayName = Task::Destroy(G_Request_ClubMembersPaging.Task_GetDisplayName);
	}
	G_Request_ClubMembersPaging = K_GetMembersRequest {
		Request = Http::GetEmptyRequest(),
		Task_GetDisplayName = Task::GetEmptyTask()
	};

	if (Http::IsInitialized(G_Request_ClubMemberRequestsPaging.Request)) {
		G_Request_ClubMemberRequestsPaging.Request = Http::Destroy(G_Request_ClubMemberRequestsPaging.Request);
	}
	if (Task::IsInitialized(G_Request_ClubMemberRequestsPaging.Task_GetDisplayName)) {
		G_Request_ClubMemberRequestsPaging.Task_GetDisplayName = Task::Destroy(G_Request_ClubMemberRequestsPaging.Task_GetDisplayName);
	}
	G_Request_ClubMemberRequestsPaging = K_GetMembersRequest {
		Request = Http::GetEmptyRequest(),
		Task_GetDisplayName = Task::GetEmptyTask()
	};

	if (Http::IsInitialized(G_Request_GetClubMemberFromLogin.Request)) {
		G_Request_GetClubMemberFromLogin.Request = Http::Destroy(G_Request_GetClubMemberFromLogin.Request);
	}
	if (Task::IsInitialized(G_Request_GetClubMemberFromLogin.Task_GetDisplayName)) {
		G_Request_GetClubMemberFromLogin.Task_GetDisplayName = Task::Destroy(G_Request_GetClubMemberFromLogin.Task_GetDisplayName);
	}
	G_Request_GetClubMemberFromLogin = K_GetMembersRequest {
		Request = Http::GetEmptyRequest(),
		Task_GetDisplayName = Task::GetEmptyTask()
	};

	if (Http::IsInitialized(G_Request_DeleteClubMember)) {
		G_Request_DeleteClubMember = Http::Destroy(G_Request_DeleteClubMember);
	}
	G_Request_DeleteClubMember = Http::GetEmptyRequest();

	if (Http::IsInitialized(G_Request_EditClubMember)) {
		G_Request_EditClubMember = Http::Destroy(G_Request_EditClubMember);
	}
	G_Request_EditClubMember = Http::GetEmptyRequest();

	if (Http::IsInitialized(G_Request_CreateClubMember)) {
		G_Request_CreateClubMember = Http::Destroy(G_Request_CreateClubMember);
	}
	G_Request_CreateClubMember = Http::GetEmptyRequest();
}

Void Private_InitializeRequest_ClubRooms() {
	if (Http::IsInitialized(G_Request_AllClubRoomsPaging)) {
		G_Request_AllClubRoomsPaging = Http::Destroy(G_Request_AllClubRoomsPaging);
	}
	G_Request_AllClubRoomsPaging = Http::GetEmptyRequest();

	foreach (Request_ClubRoomsPaging in G_Request_ClubRoomsPagingList) {
		if (Http::IsInitialized(Request_ClubRoomsPaging)) {
			Http::Destroy(Request_ClubRoomsPaging);
		}
	}
	G_Request_ClubRoomsPagingList = [];

	if (Http::IsInitialized(G_Request_CreateOrEditClubRoom.Request)) {
		Http::Destroy(G_Request_CreateOrEditClubRoom.Request);
	}
	if (Http::IsInitialized(G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest)) {
		Http::Destroy(G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest);
	}
	G_Request_CreateOrEditClubRoom = K_CreateOrEditRoomRequest {
		Room = ClubStruct::LibStructuresClub_K_Room {},
		Request = Http::GetEmptyRequest(),
		UploadOrUpdateMediaActivityRequest = Http::GetEmptyRequest(),
		EditingRoom = False
	};
}

Void Private_InitializeRequest_ClubActivities() {
	foreach (Request_ClubActivitiesPaging in G_Request_ClubActivitiesPagingList) {
		if (Http::IsInitialized(Request_ClubActivitiesPaging)) {
			Http::Destroy(Request_ClubActivitiesPaging);
		}
	}
	G_Request_ClubActivitiesPagingList = [];

	foreach (Request_InactiveClubActivitiesPaging in G_Request_InactiveClubActivitiesPagingList) {
		if (Http::IsInitialized(Request_InactiveClubActivitiesPaging)) {
			Http::Destroy(Request_InactiveClubActivitiesPaging);
		}
	}
	G_Request_InactiveClubActivitiesPagingList = [];

	if (Http::IsInitialized(G_Request_ClubsFeaturedActivity)) {
		Http::Destroy(G_Request_ClubsFeaturedActivity);
	}
	G_Request_ClubsFeaturedActivity = Http::GetEmptyRequest();

	if (Http::IsInitialized(G_Request_MoveActivity)) {
		Http::Destroy(G_Request_MoveActivity);
	}
	G_Request_MoveActivity = Http::GetEmptyRequest();

	if (Http::IsInitialized(G_Request_DeleteActivity)) {
		Http::Destroy(G_Request_DeleteActivity);
	}
	G_Request_DeleteActivity = Http::GetEmptyRequest();

	foreach (Request_ActivateActivity in G_Request_ActivateActivityList) {
		if (Http::IsInitialized(Request_ActivateActivity)) {
			Http::Destroy(Request_ActivateActivity);
		}
	}
	G_Request_ActivateActivityList = [];

	foreach (Request_ActivityUpdatePrivacy in G_Request_ActivityUpdatePrivacyList) {
		if (Http::IsInitialized(Request_ActivityUpdatePrivacy)) {
			Http::Destroy(Request_ActivityUpdatePrivacy);
		}
	}
	G_Request_ActivityUpdatePrivacyList = [];

	foreach (Request_UpdateFeaturedActivity in G_Request_UpdateFeaturedActivityList) {
		if (Http::IsInitialized(Request_UpdateFeaturedActivity)) {
			Http::Destroy(Request_UpdateFeaturedActivity);
		}
	}
	G_Request_UpdateFeaturedActivityList = [];
	if (Http::IsInitialized(G_Request_CreateOrEditBucketActivity.Request)) {
		Http::Destroy(G_Request_CreateOrEditBucketActivity.Request);
	}
	if (Http::IsInitialized(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest)) {
		Http::Destroy(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest);
	}
	G_Request_CreateOrEditBucketActivity = K_CreateBucketActivityRequest {
		Request = Http::GetEmptyRequest(),
		UploadOrUpdateMediaActivityRequest = Http::GetEmptyRequest(),
		ClubId = ClubStruct::C_ClubNullId,
		ActivityId = ClubStruct::C_ActivityNullId,
		MediaUrl = "",
		IsEditing = False
	};

	if (Http::IsInitialized(G_Request_MapReviewActivity.Request)) {
		Http::Destroy(G_Request_MapReviewActivity.Request);
	}
	if (Http::IsInitialized(G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest)) {
		Http::Destroy(G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest);
	}
	G_Request_MapReviewActivity = K_MapReviewActivityRequest {
		Request = Http::GetEmptyRequest(),
		UploadOrUpdateMediaActivityRequest = Http::GetEmptyRequest(),
		MapReview = ClubStruct::LibStructuresClub_K_MapReview {},
		IsEditing = False,
		SubmissionLimitation = 0
	};

	if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.Request)) {
		Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.Request);
	}
	if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest)) {
		Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest);
	}
	if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest)) {
		Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest);
	}	
	if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest)) {
		Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest);
	}
	if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest)) {
		Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest);
	}
	G_Request_CreateOrEditItemCollectionActivity = K_CreateItemCollectionActivityRequest {
		Request = Http::GetEmptyRequest(),
		UploadMediaActivityRequest = Http::GetEmptyRequest(),
		PostAddBucketItemRequest = Http::GetEmptyRequest(),
		EditBucketItemRequest = Http::GetEmptyRequest(),
		UpdateCollectionMediaRequest = Http::GetEmptyRequest(),
		ItemCollection = ClubStruct::LibStructuresClub_K_BucketItem {},
		OldItemCollection = ClubStruct::LibStructuresClub_K_BucketItem {},
		ClubId = ClubStruct::C_ClubNullId,
		ActivityId = ClubStruct::C_ActivityNullId,
		MediaUrl = "",
		IsEditing = False,
		CurrentMediaIndex = -1,
		DeleteMediaPositions = [],
		ErrorHasOccurred = False
	};

	if (Http::IsInitialized(G_Request_CreateOrEditNewsActivityRequest.Request)) {
		Http::Destroy(G_Request_CreateOrEditNewsActivityRequest.Request);
	}
	if (Http::IsInitialized(G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest)) {
		Http::Destroy(G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest);
	}
	if (Http::IsInitialized(G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest)) {
		Http::Destroy(G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest);
	}
	G_Request_CreateOrEditNewsActivityRequest = K_CreateOrEditNewsActivityRequest {
		Request = Http::GetEmptyRequest(),
		UploadNewsMediaRequest = Http::GetEmptyRequest(),
		UploadOrUpdateMediaActivityRequest = Http::GetEmptyRequest(),
		News = ClubStruct::LibStructuresClub_K_News {},
		ActivityMediaUrl = ""
	};

	if (Http::IsInitialized(G_Request_CreateOrEditRankingsActivityRequest.Request)) {
		Http::Destroy(G_Request_CreateOrEditRankingsActivityRequest.Request);
	}
	if (Http::IsInitialized(G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest)) {
		Http::Destroy(G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest);
	}
	G_Request_CreateOrEditRankingsActivityRequest = K_CreateOrEditRankingsActivityRequest {
		Request = Http::GetEmptyRequest(),
		UploadOrUpdateMediaActivityRequest = Http::GetEmptyRequest(),
		Activity = ClubStruct::LibStructuresClub_K_Activity {}
	};

	if (Http::IsInitialized(G_Request_GetMapReviewActivities)) {
		G_Request_GetMapReviewActivities = Http::Destroy(G_Request_GetMapReviewActivities);
	}
	G_Request_GetMapReviewActivities = Http::GetEmptyRequest();
}

Void Private_InitializeRequest_ClubCampaigns() {
	foreach (CampaignId => CreateCampaignRequest in G_CreateOrEditCampaignRequestList) {
		foreach (Task_RegisterMap in CreateCampaignRequest.Task_RegisterMapList) {
			if (Task::IsInitialized(Task_RegisterMap)) {
				Task::Destroy(Task_RegisterMap);
			}
		}

		declare Http::K_Request Request_CreateCampaign = G_CreateOrEditCampaignRequestList[CampaignId].Request;
		if (Http::IsInitialized(Request_CreateCampaign)) {
			Http::Destroy(Request_CreateCampaign);
		}
	}
	G_CreateOrEditCampaignRequestList = [];
}

Void Private_InitializeRequest_EditClub() {
	foreach (UploadClubMediaRequest in G_Request_EditClub.UploadClubMediaRequests) {
		Http::Destroy(UploadClubMediaRequest);
	}
	if (Http::IsInitialized(G_Request_EditClub.EditClubRequest)) {
		Http::Destroy(G_Request_EditClub.EditClubRequest);
	}
	G_Request_EditClub = K_EditClubRequest {
		Club = ClubStruct::LibStructuresClub_K_Club {},
		UploadClubMediaRequests = [],
		EditClubRequest = Http::GetEmptyRequest(),
		ErrorMessage = ""
	};
}

Void Private_InitializeRequest_DeleteClub() {
	if (Http::IsInitialized(G_Request_DeleteClub)) {
		Http::Destroy(G_Request_DeleteClub);
	}
	G_Request_DeleteClub = Http::GetEmptyRequest();
}

Void Private_InitializeRequest_FeatureClub() {
	if (Http::IsInitialized(G_Request_SetUnsetFeaturedClub)) {
		G_Request_SetUnsetFeaturedClub = Http::Destroy(G_Request_SetUnsetFeaturedClub);
	}
	G_Request_SetUnsetFeaturedClub = Http::GetEmptyRequest();
}

Void Private_InitializeRequest_ClubVIP() {
	if (Http::IsInitialized(G_Request_UpdateClubVIP)) {
		G_Request_UpdateClubVIP = Http::Destroy(G_Request_UpdateClubVIP);
	}
	G_Request_UpdateClubVIP = Http::GetEmptyRequest();

	if (Http::IsInitialized(G_Request_GetVIPListOnMap.GetVIPListOnMap)) {
		Http::Destroy(G_Request_GetVIPListOnMap.GetVIPListOnMap);
	}
	if (Http::IsInitialized(G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap)) {
		Http::Destroy(G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap);
	}
	if (Http::IsInitialized(G_Request_GetVIPListOnMap.GetFollowersListOnMap)) {
		Http::Destroy(G_Request_GetVIPListOnMap.GetFollowersListOnMap);
	}
	if (Task::IsInitialized(G_Request_GetVIPListOnMap.Task_GetDisplayName)) {
		G_Request_GetVIPListOnMap.Task_GetDisplayName = Task::Destroy(G_Request_GetVIPListOnMap.Task_GetDisplayName);
	}
	if (Task::IsInitialized(G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal)) {
		G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal = Task::Destroy(G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal);
	}
	if (Task::IsInitialized(G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers)) {
		G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers = Task::Destroy(G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers);
	}
	G_Request_GetVIPListOnMap = K_GetVIPListOnMapRequest {
		ClubId = ClubStruct::C_ClubNullId,
		MapUid = "",
		SeasonUid = "",
		GetVIPListOnMap = Http::GetEmptyRequest(),
		GetGlobalVIPListOnMap = Http::GetEmptyRequest(),
		GetFollowersListOnMap = Http::GetEmptyRequest(),
		Task_GetDisplayName = Task::GetEmptyTask(),
		Task_GetDisplayNameGlobal = Task::GetEmptyTask(),
		Task_GetDisplayNameFollowers = Task::GetEmptyTask()
	};
}

Void Private_InitializeRequest_ClubSkins() {
	if (Http::IsInitialized(G_Request_SkinUploadsPaging)) {
		Http::Destroy(G_Request_SkinUploadsPaging);
	}
	G_Request_SkinUploadsPaging = Http::GetEmptyRequest();
}

Void Private_InitializeRequest_ClubItems() {
	if (Http::IsInitialized(G_Request_ItemUploadsPaging)) {
		Http::Destroy(G_Request_ItemUploadsPaging);
	}
	G_Request_ItemUploadsPaging = Http::GetEmptyRequest();
}

Void Private_InitializeRequest_ClubPinTag() {
	if (Http::IsInitialized(G_Request_LoadPinAndTagClub.Request_GetMyClubInfo)) {
		G_Request_LoadPinAndTagClub.Request_GetMyClubInfo = Http::Destroy(G_Request_LoadPinAndTagClub.Request_GetMyClubInfo);
	}
	if (Http::IsInitialized(G_Request_LoadPinAndTagClub.Request_GetPinnedClub)) {
		G_Request_LoadPinAndTagClub.Request_GetPinnedClub = Http::Destroy(G_Request_LoadPinAndTagClub.Request_GetPinnedClub);
	}
	if (Http::IsInitialized(G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId)) {
		G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId = Http::Destroy(G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId);
	}
	if (Task::IsInitialized(G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag)) {
		G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag = Task::Destroy(G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag);
	}
	G_Request_LoadPinAndTagClub.Request_GetMyClubInfo = Http::GetEmptyRequest();
	G_Request_LoadPinAndTagClub.Request_GetPinnedClub = Http::GetEmptyRequest();
	G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId = Http::GetEmptyRequest();
	G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag = Task::GetEmptyTask();
	G_Request_LoadPinAndTagClub = Private_UpdateIsLoadingPinAndTagClub(G_Request_LoadPinAndTagClub);

	if (Http::IsInitialized(G_Request_PinOrUnpinClub.Request)) {
		G_Request_PinOrUnpinClub.Request = Http::Destroy(G_Request_PinOrUnpinClub.Request);
	}
	G_Request_PinOrUnpinClub.Request = Http::GetEmptyRequest();
	G_Request_PinOrUnpinClub.Club = ClubStruct::GetEmptyClub();
	G_Request_PinOrUnpinClub.Membership = ClubStruct::GetEmptyMember();

	if (Http::IsInitialized(G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag)) {
		G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag = Http::Destroy(G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag);
	}
	G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag = Http::GetEmptyRequest();
	G_Request_ApplyOrRemoveClubTag.Task_SetPlayerClubTag = Task::Destroy(G_Request_ApplyOrRemoveClubTag.Task_SetPlayerClubTag);
	G_Request_ApplyOrRemoveClubTag.Club = ClubStruct::GetEmptyClub();
	G_Request_ApplyOrRemoveClubTag.IsSuccess = False;
	G_Request_ApplyOrRemoveClubTag = Private_UpdateIsUpdatingClubTag(G_Request_ApplyOrRemoveClubTag);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Initialize the Club store
Void Initialize(Boolean _ResetData) {
	declare K_State TMNext_ClubStore_State for System = C_State_Null;

	Private_InitializeRequest_ClubsPaging();
	Private_InitializeRequest_UserClubs();
	Private_InitializeRequest_CreateClub();
	Private_InitializeRequest_EditClub();
	Private_InitializeRequest_DeleteClub();
	Private_InitializeRequest_FeatureClub();
	Private_InitializeRequest_UserCurrentClubMembership();
	Private_InitializeRequest_ClubMembers();
	Private_InitializeRequest_ClubRooms();
	Private_InitializeRequest_ClubActivities();
	Private_InitializeRequest_ClubCampaigns();
	Private_InitializeRequest_ClubVIP();
	Private_InitializeRequest_ClubSkins();
	Private_InitializeRequest_ClubItems();
	Private_InitializeRequest_ClubPinTag();

	if (_ResetData) {
		TMNext_ClubStore_State = K_State {
			ClubsPager = [
				C_Section_MyClubs => K_ClubsPager {
					Clubs = [],
					Offset = 0,
					Total = 0
				},
				C_Section_AllClubs => K_ClubsPager {
					Clubs = [],
					Offset = 0,
					Total = 0
				}
			],
			UserClubs = [],
			CurrentClub = K_ClubDetails {},
			PinnedClub = K_ClubDetails {},
			PinnedClubStatus = C_PinnedClubStatus_OK,
			TaggedClubId = ClubStruct::C_ClubNullId,
			TaggedClubTag = "",
			ClubTagStatus = C_ClubTagStatus_OK,
			AllClubRoomsPager = K_ClubRoomsPager {
				Rooms = [],
				Offset = 0,
				Total = 0
			},
			MapReviewsPager = K_MapReviewsPager {
				MapReviews = [],
				Offset = 0,
				Total = 0
			}
		};
	}
}

Void Private_ProcessEvent_LoadClubsPage(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 4) {
		Action_LoadClubsPage(
			_Event.CustomEventData[0],
			TL::ToInteger(_Event.CustomEventData[1]),
			TL::ToInteger(_Event.CustomEventData[2]),
			TL::ToInteger(_Event.CustomEventData[3])
		);
	}
}

Void Private_ProcessEvent_LoadBrowserClubs(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 2) {
		Action_LoadClubsBrowser(
			TL::ToInteger(_Event.CustomEventData[0]),
			TL::ToInteger(_Event.CustomEventData[1])
		);
	}
}

Void Private_ProcessEvent_LoadUserClubs(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 2) {
		Action_LoadUserClubs(
			TL::ToInteger(_Event.CustomEventData[0]),
			TL::ToInteger(_Event.CustomEventData[1])
		);
	}
}

Void Private_ProcessEvent_LoadCreatedClub(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		Action_LoadCreatedClub(TL::ToInteger(_Event.CustomEventData[0]));
	}
}

Void Private_ProcessEvent_LoadUserCurrentClubMembersPage(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 4) {
		Action_LoadUserCurrentClubMembersPage(
			TL::ToInteger(_Event.CustomEventData[0]),
			TL::ToInteger(_Event.CustomEventData[1]),
			TL::ToInteger(_Event.CustomEventData[2]),
			_Event.CustomEventData[3]
		);
	}
}

Void Private_ProcessEvent_LoadUserCurrentClubMemberRequestsPage(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		Action_LoadUserCurrentClubMemberRequestsPage(
			TL::ToInteger(_Event.CustomEventData[0]),
			TL::ToInteger(_Event.CustomEventData[1]),
			TL::ToInteger(_Event.CustomEventData[2])
		);
	}
}

Void Private_ProcessEvent_GetClubMemberFromLogin(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 2) {
		Action_LoadUserCurrentClubMembersPage(TL::ToInteger(_Event.CustomEventData[0]), 0, 0, _Event.CustomEventData[1]);
	}
}

Void Private_ProcessEvent_SetUserCurrentClub(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		declare ClubStruct::LibStructuresClub_K_Club Club;
		Club.fromjson(_Event.CustomEventData[0]);
		Action_SetUserCurrentClub(Club);
	}
}

Void Private_ProcessEvent_LoadPinAndTagClub(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		Action_LoadPinAndTagClub(_Event.CustomEventData[0]);
	} else {
		Action_LoadPinAndTagClub();
	}
}

Void Private_ProcessEvent_PinClub(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 2) {
		declare ClubStruct::LibStructuresClub_K_Club Club;
		Club.fromjson(_Event.CustomEventData[0]);
		declare ClubStruct::LibStructuresClub_K_Member Membership;
		Membership.fromjson(_Event.CustomEventData[1]);
		Action_PinClub(Club, Membership);
	}
}

Void Private_ProcessEvent_ApplyClubTag(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		declare ClubStruct::LibStructuresClub_K_Club Club;
		Club.fromjson(_Event.CustomEventData[0]);
		Action_ApplyClubTag(Club);
	}
}

Void Private_ProcessEvent_CreateClub(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		declare ClubStruct::LibStructuresClub_K_Club Club;
		Club.fromjson(_Event.CustomEventData[0]);
		Action_CreateClub(Club);
	}
}

Void Private_ProcessEvent_DeleteClubMember(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 2) {
		Action_DeleteClubMember(
			TL::ToInteger(_Event.CustomEventData[0]),
			_Event.CustomEventData[1]
		);
	}
}

Void Private_ProcessEvent_EditClubMember(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		Action_EditClubMember(
			TL::ToInteger(_Event.CustomEventData[0]),
			_Event.CustomEventData[1],
			_Event.CustomEventData[2]
		);
	}
}

Void Private_ProcessEvent_CreateClubMember(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		Action_CreateClubMember(TL::ToInteger(_Event.CustomEventData[0]));
	}
}

Void Private_ProcessEvent_LoadAllClubRoomsPage(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		Action_LoadAllClubRoomsPage(
			_Event.CustomEventData[0],
			TL::ToInteger(_Event.CustomEventData[1]),
			TL::ToInteger(_Event.CustomEventData[2])
		);
	}
}

Void Private_ProcessEvent_LoadClubActivitiesPage(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		Action_LoadClubActivitiesPage(
			TL::ToInteger(_Event.CustomEventData[0]),
			TL::ToInteger(_Event.CustomEventData[1]),
			TL::ToInteger(_Event.CustomEventData[2])
		);
	}
}

Void Private_ProcessEvent_LoadInactiveClubActivitiesPage(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		Action_LoadInactiveClubActivitiesPage(TL::ToInteger(_Event.CustomEventData[0]), TL::ToInteger(_Event.CustomEventData[1]), TL::ToInteger(_Event.CustomEventData[2]));
	}
}

Void Private_ProcessEvent_LoadClubsFeaturedActivity(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		declare Integer[] ClubsIds;
		ClubsIds.fromjson(_Event.CustomEventData[0]);
		Action_LoadClubsFeaturedActivity(ClubsIds);
	}
}

Void Private_ProcessEvent_MoveActivity(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		Action_MoveActivity(
			TL::ToInteger(_Event.CustomEventData[0]),
			TL::ToInteger(_Event.CustomEventData[1]),
			TL::ToInteger(_Event.CustomEventData[2])
		);
	}
}

Void Private_ProcessEvent_DeleteActivity(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 2) {
		Action_DeleteActivity(
			TL::ToInteger(_Event.CustomEventData[0]),
			TL::ToInteger(_Event.CustomEventData[1])
		);
	}
}

Void Private_ProcessEvent_CreateCampaign(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign;
		Campaign.fromjson(_Event.CustomEventData[0]);
		Action_CreateCampaign(Campaign);
	}
}

Void Private_ProcessEvent_EditCampaign(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign;
		Campaign.fromjson(_Event.CustomEventData[0]);
		Action_EditCampaign(Campaign);
	}
}

Void Private_ProcessEvent_ActivateActivity(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		Action_ActivateActivity(
			TL::ToInteger(_Event.CustomEventData[0]),
			TL::ToInteger(_Event.CustomEventData[1]),
			_Event.CustomEventData[2] == "1"
		);
	}
}

Void Private_ProcessEvent_ActivityUpdatePrivacy(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		Action_ActivityUpdatePrivacy(
			TL::ToInteger(_Event.CustomEventData[0]),
			TL::ToInteger(_Event.CustomEventData[1]),
			_Event.CustomEventData[2] == "1"
		);
	}
}

Void Private_ProcessEvent_UpdateFeaturedActivity(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		Action_UpdateFeaturedActivity(
			TL::ToInteger(_Event.CustomEventData[0]),
			TL::ToInteger(_Event.CustomEventData[1]),
			_Event.CustomEventData[2] == "1"
		);
	}
}

Void Private_ProcessEvent_CreateClubRoom(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		declare ClubStruct::LibStructuresClub_K_Room Room;
		Room.fromjson(_Event.CustomEventData[0]);
		Action_CreateClubRoom(Room);
	}
}

Void Private_ProcessEvent_EditClubRoom(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		declare ClubStruct::LibStructuresClub_K_Room Room;
		Room.fromjson(_Event.CustomEventData[0]);
		Action_EditClubRoom(Room);
	}
}

Void Private_ProcessEvent_UpdateUserCurrentClubMembership(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		Action_UpdateUserCurrentClubMembership(TL::ToInteger(_Event.CustomEventData[0]));
	}
}

Void Private_ProcessEvent_EditClub(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count > 0) {
		declare ClubStruct::LibStructuresClub_K_Club Club;
		Club.fromjson(_Event.CustomEventData[0]);
		Action_EditClub(Club);
	}
}

Void Private_ProcessEvent_DeleteClub(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 1) {
		Action_DeleteClub(TL::ToInteger(_Event.CustomEventData[0]));
	}
}

Void Private_ProcessEvent_UpdateClubVIP(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		Action_UpdateClubVIP(
			TL::ToInteger(_Event.CustomEventData[0]),
			_Event.CustomEventData[1],
			_Event.CustomEventData[2] == "1"
		);
	}
}

Void Private_ProcessEvent_GetVIPListOnMap(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		Action_GetVIPListOnMap(
			TL::ToInteger(_Event.CustomEventData[0]),
			_Event.CustomEventData[1],
			_Event.CustomEventData[2]
		);
	}
}

Void Private_ProcessEvent_CreateBucketActivity(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 4) {
		Action_CreateBucketActivity(
			TL::ToInteger(_Event.CustomEventData[0]),
			_Event.CustomEventData[1],
			_Event.CustomEventData[2],
			_Event.CustomEventData[3]
		);
	}
}

Void Private_ProcessEvent_EditBucketActivity(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 4) {
		Action_EditBucketActivity(
			TL::ToInteger(_Event.CustomEventData[0]),
			TL::ToInteger(_Event.CustomEventData[1]),
			_Event.CustomEventData[2],
			_Event.CustomEventData[3]
		);
	}
}

Void Private_ProcessEvent_CreateOrEditMapReviewActivity(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 2) {
		declare ClubStruct::LibStructuresClub_K_MapReview MapReview;
		MapReview.fromjson(_Event.CustomEventData[0]);
		Action_CreateOrEditMapReviewActivity(MapReview, _Event.CustomEventData[1] == "1");
	}
}

Void Private_ProcessEvent_CreateOrEditItemCollectionActivity(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 7) {
		declare	ClubStruct::LibStructuresClub_K_BucketItem ItemCollection;
		ItemCollection.fromjson(_Event.CustomEventData[0]);
		declare	ClubStruct::LibStructuresClub_K_BucketItem OldItemCollection;
		OldItemCollection.fromjson(_Event.CustomEventData[6]);
		Action_CreateOrEditItemCollectionActivity(
			ItemCollection,
			TL::ToInteger(_Event.CustomEventData[1]),
			TL::ToInteger(_Event.CustomEventData[2]),
			_Event.CustomEventData[3],
			_Event.CustomEventData[4],
			_Event.CustomEventData[5] == "1",
			OldItemCollection
		);
	}
}

Void Private_ProcessEvent_CreateOrEditNewsActivity(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		declare ClubStruct::LibStructuresClub_K_News News;
		News.fromjson(_Event.CustomEventData[0]);
		Action_CreateOrEditNewsActivity(News, _Event.CustomEventData[1], _Event.CustomEventData[2] == "1");
	}
}

Void Private_ProcessEvent_CreateOrEditRankingsActivity(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 2) {
		declare ClubStruct::LibStructuresClub_K_Activity Activity;
		Activity.fromjson(_Event.CustomEventData[0]);
		Action_CreateOrEditRankingsActivity(Activity, _Event.CustomEventData[1] == "1");
	}
}

Void Private_ProcessEvent_LoadAllSkinUploadsPage(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 5) {
		Action_LoadAllSkinUploadsPage(
			_Event.CustomEventData[0],
			_Event.CustomEventData[1],
			_Event.CustomEventData[2],
			TL::ToInteger(_Event.CustomEventData[3]),
			TL::ToInteger(_Event.CustomEventData[4])
		);
	}
}

Void Private_ProcessEvent_LoadAllItemUploadsPage(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 5) {
		Action_LoadAllItemUploadsPage(
			_Event.CustomEventData[0],
			_Event.CustomEventData[1],
			_Event.CustomEventData[2],
			TL::ToInteger(_Event.CustomEventData[3]),
			TL::ToInteger(_Event.CustomEventData[4])
		);
	}
}

Void Private_ProcessEvent_SetUnsetFeaturedClub(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 2) {
		Action_SetUnsetFeaturedClub(
			TL::ToInteger(_Event.CustomEventData[0]),
			_Event.CustomEventData[1] == "1"
		);
	}
}

Void Private_ProcessEvent_LoadMapReviewActivities(CManiaAppEvent _Event) {
	if (_Event.CustomEventData.count >= 3) {
		Action_LoadMapReviewActivities(
			TL::ToInteger(_Event.CustomEventData[0]),
			TL::ToInteger(_Event.CustomEventData[1]),
			_Event.CustomEventData[2]
		);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Process event
Void ProcessEvent(CManiaAppEvent _Event) {
	switch (_Event.Type) {
		case CManiaAppEvent::EType::LayerCustomEvent: {
			switch(_Event.CustomEventType) {
				case C_Action_LoadClubsPage: Private_ProcessEvent_LoadClubsPage(_Event);
				case C_Action_LoadBrowserClubs: Private_ProcessEvent_LoadBrowserClubs(_Event);
				case C_Action_LoadUserClubs: Private_ProcessEvent_LoadUserClubs(_Event);
				case C_Action_LoadCreatedClub: Private_ProcessEvent_LoadCreatedClub(_Event);
				case C_Action_LoadUserCurrentClubMembersPage: Private_ProcessEvent_LoadUserCurrentClubMembersPage(_Event);
				case C_Action_LoadUserCurrentClubMemberRequestsPage: Private_ProcessEvent_LoadUserCurrentClubMemberRequestsPage(_Event);
				case C_Action_GetClubMemberFromLogin: Private_ProcessEvent_GetClubMemberFromLogin(_Event);
				case C_Action_SetUserCurrentClub: Private_ProcessEvent_SetUserCurrentClub(_Event);
				case C_Action_LoadPinAndTagClub: Private_ProcessEvent_LoadPinAndTagClub(_Event);
				case C_Action_PinClub: Private_ProcessEvent_PinClub(_Event);
				case C_Action_PinCurrentClub: Action_PinCurrentClub();
				case C_Action_UnpinClub: Action_UnpinClub();
				case C_Action_ApplyClubTag: Private_ProcessEvent_ApplyClubTag(_Event);
				case C_Action_RemoveClubTag: Action_RemoveClubTag();
				case C_Action_CreateClub: Private_ProcessEvent_CreateClub(_Event);
				case C_Action_DeleteClubMember: Private_ProcessEvent_DeleteClubMember(_Event);
				case C_Action_EditClubMember: Private_ProcessEvent_EditClubMember(_Event);
				case C_Action_CreateClubMember: Private_ProcessEvent_CreateClubMember(_Event);
				case C_Action_LoadAllClubRoomsPage: Private_ProcessEvent_LoadAllClubRoomsPage(_Event);
				case C_Action_LoadClubActivitiesPage: Private_ProcessEvent_LoadClubActivitiesPage(_Event);
				case C_Action_LoadInactiveClubActivitiesPage: Private_ProcessEvent_LoadInactiveClubActivitiesPage(_Event);
				case C_Action_LoadClubsFeaturedActivity: Private_ProcessEvent_LoadClubsFeaturedActivity(_Event);
				case C_Action_MoveActivity: Private_ProcessEvent_MoveActivity(_Event);
				case C_Action_DeleteActivity: Private_ProcessEvent_DeleteActivity(_Event);
				case C_Action_CreateCampaign: Private_ProcessEvent_CreateCampaign(_Event);
				case C_Action_EditCampaign: Private_ProcessEvent_EditCampaign(_Event);
				case C_Action_ActivateActivity: Private_ProcessEvent_ActivateActivity(_Event);
				case C_Action_ActivityUpdatePrivacy: Private_ProcessEvent_ActivityUpdatePrivacy(_Event);
				case C_Action_UpdateFeaturedActivity: Private_ProcessEvent_UpdateFeaturedActivity(_Event);
				case C_Action_CreateClubRoom: Private_ProcessEvent_CreateClubRoom(_Event);
				case C_Action_EditClubRoom: Private_ProcessEvent_EditClubRoom(_Event);
				case C_Action_UpdateUserCurrentClubMembership: Private_ProcessEvent_UpdateUserCurrentClubMembership(_Event);
				case C_Action_EditClub: Private_ProcessEvent_EditClub(_Event);
				case C_Action_DeleteClub: Private_ProcessEvent_DeleteClub(_Event);
				case C_Action_UpdateClubVIP: Private_ProcessEvent_UpdateClubVIP(_Event);
				case C_Action_GetVIPListOnMap: Private_ProcessEvent_GetVIPListOnMap(_Event);
				case C_Action_CreateBucketActivity: Private_ProcessEvent_CreateBucketActivity(_Event);
				case C_Action_EditBucketActivity: Private_ProcessEvent_EditBucketActivity(_Event);
				case C_Action_CreateOrEditMapReviewActivity: Private_ProcessEvent_CreateOrEditMapReviewActivity(_Event);
				case C_Action_CreateOrEditItemCollectionActivity: Private_ProcessEvent_CreateOrEditItemCollectionActivity(_Event);
				case C_Action_CreateOrEditNewsActivity: Private_ProcessEvent_CreateOrEditNewsActivity(_Event);
				case C_Action_CreateOrEditRankingsActivity: Private_ProcessEvent_CreateOrEditRankingsActivity(_Event);
				case C_Action_LoadAllSkinUploadsPage: Private_ProcessEvent_LoadAllSkinUploadsPage(_Event);
				case C_Action_LoadAllItemUploadsPage: Private_ProcessEvent_LoadAllItemUploadsPage(_Event);
				case C_Action_SetUnsetFeaturedClub: Private_ProcessEvent_SetUnsetFeaturedClub(_Event);
				case C_Action_LoadMapReviewActivities: Private_ProcessEvent_LoadMapReviewActivities(_Event);
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Process events
Void ProcessEvents(CNod _Context) {
	switchtype (_Context as Context) {
		case CManiaAppTitle: {
			foreach (Event in Context.PendingEvents) {
				ProcessEvent(Event);
			}
		}
		case CManiaAppPlayground: {
			foreach (Event in Context.PendingEvents) {
				ProcessEvent(Event);
			}
		}
	}
}

Void Private_Yield_RequestClubsPaging() {
	declare Http::K_Request[Integer] TmpClubsPagingRequests = G_Request_ClubsPaging;
	foreach (Section => Request_ReadOnly in TmpClubsPagingRequests) {
		if (Http::IsInitialized(G_Request_ClubsPaging[Section])) {
			declare Http::K_Request Request = Http::Update(G_Request_ClubsPaging[Section]);
			if (!Http::IsRunning(Request)) {
				if (Http::IsSuccess(Request)) {
					declare ClubAPI::K_ResponseGetClubs Response = ClubAPI::GetResponseFromGetClubs(Request);

					declare K_State TMNext_ClubStore_State for System = C_State_Null;
					TMNext_ClubStore_State = Mutation_SetClubs(
						TMNext_ClubStore_State,
						Section,
						TMNext_ClubStore_State.ClubsPager[Section].Offset,
						Response.ClubsTotal,
						Response.Clubs
					);
				}
				Request = Http::Destroy(Request);
				if (Section == C_Section_MyClubs) {
					Store::SendEvent(C_StoreId, C_Event_LoadMyClubsPageComplete);
				} else if (Section == C_Section_AllClubs) {
					Store::SendEvent(C_StoreId, C_Event_LoadAllClubsPageComplete);
				}
			}
			G_Request_ClubsPaging[Section] = Request;
		}
	}
}

Void Private_Yield_RequestBrowserClubsPaging() {
	if (Http::IsInitialized(G_Request_BrowserClubsPaging)) {
		declare Http::K_Request Request = Http::Update(G_Request_BrowserClubsPaging);
		if (!Http::IsRunning(Request)) {
			if (Http::IsSuccess(Request)) {
				declare ClubAPI::K_ResponseGetClubs Response = ClubAPI::GetResponseFromGetClubs(Request);
				
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_SetBrowserClubs(
					TMNext_ClubStore_State,
					TMNext_ClubStore_State.BrowserClubsPager.Offset,
					Response.ClubsTotal,
					Response.Clubs
				);
			} else {
				Store::SendEvent(C_StoreId, C_Event_BrowserClubsError);
			}
			Request = Http::Destroy(Request);
		}
		G_Request_BrowserClubsPaging = Request;
	}
}

Void Private_Yield_RequestCreatedClubUpdate() {
	if (Http::IsInitialized(G_Request_CreatedClubUpdate)) {
		G_Request_CreatedClubUpdate = Http::Update(G_Request_CreatedClubUpdate);
		if (!Http::IsRunning(G_Request_CreatedClubUpdate)) {
			if (Http::IsSuccess(G_Request_CreatedClubUpdate)) {
				declare ClubStruct::LibStructuresClub_K_Club Club = ClubAPI::GetResponseFromGetClub(G_Request_CreatedClubUpdate);				
				// Created club is automatically set to user current club
				Action_SetUserCurrentClub(Club);
			} else {
				Store::SendEvent(C_StoreId, C_Event_CreatedClubUpdateError);
			}
			G_Request_CreatedClubUpdate = Http::Destroy(G_Request_CreatedClubUpdate);
		}
	}
}

Void Private_Yield_RequestUserClubs() {
	if (Http::IsInitialized(G_Request_UserClubs)) {
		G_Request_UserClubs = Http::Update(G_Request_UserClubs);
		if (!Http::IsRunning(G_Request_UserClubs)) {
			if (Http::IsSuccess(G_Request_UserClubs)) {
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				declare ClubAPI::K_ResponseGetClubs Response = ClubAPI::GetResponseFromGetClubs(G_Request_UserClubs);
				
				TMNext_ClubStore_State = Mutation_AddUserClubs(TMNext_ClubStore_State, Response.Clubs);
			} else {
				Store::SendEvent(C_StoreId, C_Event_UserClubsUpdateError);
			}
			G_Request_UserClubs = Http::Destroy(G_Request_UserClubs);
		}
	}
}

Void Private_Yield_RequestUserCurrentClubMembership() {
	if (Http::IsInitialized(G_Request_UserCurrentClubMembership.Request)) {
		G_Request_UserCurrentClubMembership.Request = Http::Update(G_Request_UserCurrentClubMembership.Request);
		if (!Http::IsRunning(G_Request_UserCurrentClubMembership.Request)) {
			declare K_State TMNext_ClubStore_State for System = C_State_Null;
			if (Http::IsSuccess(G_Request_UserCurrentClubMembership.Request)) {
				declare ClubStruct::LibStructuresClub_K_Member ResponseMember = ClubAPI::GetResponseFromGetClubMemberWithId(G_Request_UserCurrentClubMembership.Request);
				TMNext_ClubStore_State = Mutation_SetUserCurrentClubMembership(TMNext_ClubStore_State, ResponseMember);
				if (Task::IsInitialized(G_Request_UserCurrentClubMembership.Task_GetDisplayName)) {
					G_Request_UserCurrentClubMembership.Task_GetDisplayName = Task::Destroy(G_Request_UserCurrentClubMembership.Task_GetDisplayName);
				}
				G_Request_UserCurrentClubMembership.Task_GetDisplayName = Task::Create(UserMgr, UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), [ResponseMember.AccountId]));

				// If the current club is pinned, update the pinned club
				if (TMNext_ClubStore_State.PinnedClub.Club.Id == TMNext_ClubStore_State.CurrentClub.Club.Id) {
					// We are still a member, update our membership
					if (RBAC::HasClubPermission(TMNext_ClubStore_State.CurrentClub.Membership, RBAC::C_ClubPermission_IsClubMember)) {
						Action_PinClub(TMNext_ClubStore_State.CurrentClub.Club, ResponseMember);
					}
					// We are no longer a member, unpin the club
					else if (TMNext_ClubStore_State.CurrentClub.Membership.AccountId != ClubStruct::C_AccountNullId) {
						Action_UnpinClub();
					}
				}

				// If the club tag used is the one from the current club, update the club tag
				if (TMNext_ClubStore_State.TaggedClubId == TMNext_ClubStore_State.CurrentClub.Club.Id) {
					// We are still a member, update club tag
					if (RBAC::HasClubPermission(TMNext_ClubStore_State.CurrentClub.Membership, RBAC::C_ClubPermission_IsClubMember)) {
						Action_ApplyClubTag(TMNext_ClubStore_State.CurrentClub.Club);
					}
					// We are no longer a member, remove club tag
					else if (TMNext_ClubStore_State.CurrentClub.Membership.AccountId != ClubStruct::C_AccountNullId) {
						Action_RemoveClubTag();
					}
				}
			} else {
				TMNext_ClubStore_State = Mutation_SetUserCurrentClubMembership(TMNext_ClubStore_State, ClubStruct::GetEmptyMember());
				Store::SendEvent(C_StoreId, C_Event_UserCurrentClubMembershipUpdateFailed);
			}
			G_Request_UserCurrentClubMembership.Request = Http::Destroy(G_Request_UserCurrentClubMembership.Request);
		}
	}
	if (Task::IsInitialized(G_Request_UserCurrentClubMembership.Task_GetDisplayName)) {
		G_Request_UserCurrentClubMembership.Task_GetDisplayName = Task::Update(G_Request_UserCurrentClubMembership.Task_GetDisplayName);
		if (!Task::IsRunning(G_Request_UserCurrentClubMembership.Task_GetDisplayName)) {
			if (Task::IsSuccess(G_Request_UserCurrentClubMembership.Task_GetDisplayName)) {
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_UpdateUserCurrentClubMembershipDisplayName(TMNext_ClubStore_State);
			} else {
				Store::SendEvent(C_StoreId, C_Event_UserCurrentClubMembershipUpdateFailed);
			}
			G_Request_UserCurrentClubMembership.Task_GetDisplayName = Task::Destroy(G_Request_UserCurrentClubMembership.Task_GetDisplayName);
		}
	}
}

Void Private_Yield_RequestClubMembersPaging() {
	if (Http::IsInitialized(G_Request_ClubMembersPaging.Request)) {
		G_Request_ClubMembersPaging.Request = Http::Update(G_Request_ClubMembersPaging.Request);
		if (!Http::IsRunning(G_Request_ClubMembersPaging.Request)) {
			if (Http::IsSuccess(G_Request_ClubMembersPaging.Request)) {
				declare ClubAPI::K_ResponseGetClubMembers Response = ClubAPI::GetResponseFromGetClubMembers(G_Request_ClubMembersPaging.Request);

				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_SetUserCurrentClubMembers(
					TMNext_ClubStore_State,
					TMNext_ClubStore_State.CurrentClub.MembersPager.Offset,
					Response.MembersTotal,
					Response.Members
				);

				declare Text[] WebServicesUserIdList;
				foreach (Member in Response.Members) {
					WebServicesUserIdList.add(Member.AccountId);
				}
				if (Task::IsInitialized(G_Request_ClubMembersPaging.Task_GetDisplayName)) {
					G_Request_ClubMembersPaging.Task_GetDisplayName = Task::Destroy(G_Request_ClubMembersPaging.Task_GetDisplayName);
				}
				G_Request_ClubMembersPaging.Task_GetDisplayName = Task::Create(UserMgr, UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), WebServicesUserIdList));
			} else {
				Store::SendEvent(C_StoreId, C_Event_UserCurrentClubMembersUpdateFailed);
			}
			G_Request_ClubMembersPaging.Request = Http::Destroy(G_Request_ClubMembersPaging.Request);
		}
	}
	if (Task::IsInitialized(G_Request_ClubMembersPaging.Task_GetDisplayName)) {
		G_Request_ClubMembersPaging.Task_GetDisplayName = Task::Update(G_Request_ClubMembersPaging.Task_GetDisplayName);
		if (!Task::IsRunning(G_Request_ClubMembersPaging.Task_GetDisplayName)) {
			if (Task::IsSuccess(G_Request_ClubMembersPaging.Task_GetDisplayName)) {
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_UpdateUserCurrentClubMembersDisplayNames(TMNext_ClubStore_State);
			} else {
				Store::SendEvent(C_StoreId, C_Event_UserCurrentClubMembersUpdateFailed);
			}
			G_Request_ClubMembersPaging.Task_GetDisplayName = Task::Destroy(G_Request_ClubMembersPaging.Task_GetDisplayName);
		}
	}
}

Void Private_Yield_RequestClubMemberRequestsPaging() {
	if (Http::IsInitialized(G_Request_ClubMemberRequestsPaging.Request)) {
		G_Request_ClubMemberRequestsPaging.Request = Http::Update(G_Request_ClubMemberRequestsPaging.Request);
		if (!Http::IsRunning(G_Request_ClubMemberRequestsPaging.Request)) {
			if (Http::IsSuccess(G_Request_ClubMemberRequestsPaging.Request)) {
				declare ClubAPI::K_ResponseGetClubMembers Response = ClubAPI::GetResponseFromGetClubMemberRequests(G_Request_ClubMemberRequestsPaging.Request);

				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_SetUserCurrentClubMemberRequests(
					TMNext_ClubStore_State,
					TMNext_ClubStore_State.CurrentClub.MemberRequestsPager.Offset,
					Response.MembersTotal,
					Response.Members
				);

				declare Text[] WebServicesUserIdList;
				foreach (Member in Response.Members) {
					WebServicesUserIdList.add(Member.AccountId);
				}
				G_Request_ClubMemberRequestsPaging.Task_GetDisplayName = Task::DestroyAndCreate(
					G_Request_ClubMemberRequestsPaging.Task_GetDisplayName,
					UserMgr,
					UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), WebServicesUserIdList)
				);
			} else {
				Store::SendEvent(C_StoreId, C_Event_UserCurrentClubMemberRequestsUpdateFailed);
			}
			G_Request_ClubMemberRequestsPaging.Request = Http::Destroy(G_Request_ClubMemberRequestsPaging.Request);
		}
	}
	if (Task::IsInitialized(G_Request_ClubMemberRequestsPaging.Task_GetDisplayName)) {
		G_Request_ClubMemberRequestsPaging.Task_GetDisplayName = Task::Update(G_Request_ClubMemberRequestsPaging.Task_GetDisplayName);
		if (!Task::IsRunning(G_Request_ClubMemberRequestsPaging.Task_GetDisplayName)) {
			if (Task::IsSuccess(G_Request_ClubMemberRequestsPaging.Task_GetDisplayName)) {
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_UpdateUserCurrentClubMemberRequestsDisplayNames(TMNext_ClubStore_State);
			} else {
				Store::SendEvent(C_StoreId, C_Event_UserCurrentClubMemberRequestsUpdateFailed);
			}
			G_Request_ClubMemberRequestsPaging.Task_GetDisplayName = Task::Destroy(G_Request_ClubMemberRequestsPaging.Task_GetDisplayName);
		}
	}
}

Void Private_Yield_RequestGetClubMemberFromLogin() {
	if (Http::IsInitialized(G_Request_GetClubMemberFromLogin.Request)) {
		G_Request_GetClubMemberFromLogin.Request = Http::Update(G_Request_GetClubMemberFromLogin.Request);
		if (!Http::IsRunning(G_Request_GetClubMemberFromLogin.Request)) {
			if (Http::IsSuccess(G_Request_GetClubMemberFromLogin.Request)) {
				declare ClubStruct::LibStructuresClub_K_Member Member = ClubAPI::GetResponseFromGetClubMemberFromLogin(G_Request_GetClubMemberFromLogin.Request);
				declare ClubStruct::LibStructuresClub_K_Member[] Members = [];
				declare Integer MembersTotal = 0;

				if (Member.Role != "") { //< Add member to the pager only if the member as a role
					Members.add(Member);
					MembersTotal = 1;
				}

				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_SetUserCurrentClubMembers(
					TMNext_ClubStore_State,
					TMNext_ClubStore_State.CurrentClub.MembersPager.Offset,
					MembersTotal,
					Members
				);

				G_Request_GetClubMemberFromLogin.Task_GetDisplayName = Task::DestroyAndCreate(G_Request_GetClubMemberFromLogin.Task_GetDisplayName, UserMgr, UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), [Member.AccountId]));
			} else {
				Store::SendEvent(C_StoreId, C_Event_UserCurrentClubMembersUpdateFailed);
			}
			G_Request_GetClubMemberFromLogin.Request = Http::Destroy(G_Request_GetClubMemberFromLogin.Request);
		}
	}
	if (Task::IsInitialized(G_Request_GetClubMemberFromLogin.Task_GetDisplayName)) {
		G_Request_GetClubMemberFromLogin.Task_GetDisplayName = Task::Update(G_Request_GetClubMemberFromLogin.Task_GetDisplayName);
		if (!Task::IsRunning(G_Request_GetClubMemberFromLogin.Task_GetDisplayName)) {
			if (Task::IsSuccess(G_Request_GetClubMemberFromLogin.Task_GetDisplayName)) {
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_UpdateUserCurrentClubMembersDisplayNames(TMNext_ClubStore_State);
			} else {
				Store::SendEvent(C_StoreId, C_Event_UserCurrentClubMembersUpdateFailed);
			}
			G_Request_GetClubMemberFromLogin.Task_GetDisplayName = Task::Destroy(G_Request_GetClubMemberFromLogin.Task_GetDisplayName);
		}
	}
}

Void Private_Yield_RequestCreateClub() {
	if (Http::IsInitialized(G_Request_CreateClub.CreateClubRequest)) {
		G_Request_CreateClub.CreateClubRequest = Http::Update(G_Request_CreateClub.CreateClubRequest);
		if (!Http::IsRunning(G_Request_CreateClub.CreateClubRequest)) {
			if (Http::IsSuccess(G_Request_CreateClub.CreateClubRequest)) {
				declare ClubStruct::LibStructuresClub_K_Club CreatedClub = ClubAPI::GetResponseFromPostClubCreate(G_Request_CreateClub.CreateClubRequest);
				
				// Set selected club themes if any
				if (ClubStruct::IsAnyThemeSelected(G_Request_CreateClub.Club)) {
					G_Request_EditClub.Club = G_Request_CreateClub.Club;
					G_Request_EditClub.Club.Id = CreatedClub.Id;
					G_Request_EditClub.EditClubRequest = Http::DestroyAndCreate(
						G_Request_EditClub.EditClubRequest, 
						ClubAPI::PostEditClub(G_Request_EditClub.Club)
					);
				}

				// Send a request if there is no media to upload or theme to apply
				if (ClubStruct::IsAnyAssetSelected(G_Request_CreateClub.Club) || ClubStruct::IsAnyThemeSelected(G_Request_CreateClub.Club)) {
					// Do not erase the media urls
					G_Request_CreateClub.Club.Id = CreatedClub.Id;
					G_Request_CreateClub.Club.Name = CreatedClub.Name;
					G_Request_CreateClub.Club.Tag = CreatedClub.Tag;
					G_Request_CreateClub.Club.Description = CreatedClub.Description;
					G_Request_CreateClub.Club.PrivacyState = CreatedClub.PrivacyState;
				} else {
					Store::SendEvent(C_StoreId, C_Event_ClubCreated, [CreatedClub.tojson()]);
				}

				// Upload custom media if any
				if (G_Request_CreateClub.Club.IconUrl != "" && !C_ClubThemes_Folders.existskey(G_Request_CreateClub.Club.IconUrl)) {
					if (G_Request_CreateClub.UploadClubMediaRequests.existskey(C_MediaType_Icon) && Http::IsInitialized(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Icon])) {
						Http::Destroy(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Icon]);
					}
					G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Icon] = ClubAPI::PostUploadClubMedia(CreatedClub.Id, C_MediaType_Icon, G_Request_CreateClub.Club.IconUrl);
				}
				if (G_Request_CreateClub.Club.BgUrl != "" && !C_ClubThemes_Folders.existskey(G_Request_CreateClub.Club.BgUrl)) {
					if (G_Request_CreateClub.UploadClubMediaRequests.existskey(C_MediaType_Bg) && Http::IsInitialized(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Bg])) {
						Http::Destroy(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Bg]);
					}
					G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Bg] = ClubAPI::PostUploadClubMedia(CreatedClub.Id, C_MediaType_Bg, G_Request_CreateClub.Club.BgUrl);
				}
				if (G_Request_CreateClub.Club.VerticalUrl != "" && !C_ClubThemes_Folders.existskey(G_Request_CreateClub.Club.VerticalUrl)) {
					if (G_Request_CreateClub.UploadClubMediaRequests.existskey(C_MediaType_Vertical) && Http::IsInitialized(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Vertical])) {
						Http::Destroy(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Vertical]);
					}
					G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Vertical] = ClubAPI::PostUploadClubMedia(CreatedClub.Id, C_MediaType_Vertical, G_Request_CreateClub.Club.VerticalUrl);
				}
				if (G_Request_CreateClub.Club.DecalUrl != "" && !C_ClubThemes_Folders.existskey(G_Request_CreateClub.Club.DecalUrl)) {
					if (G_Request_CreateClub.UploadClubMediaRequests.existskey(C_MediaType_Decal) && Http::IsInitialized(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Decal])) {
						Http::Destroy(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Decal]);
					}
					G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Decal] = ClubAPI::PostUploadClubMedia(CreatedClub.Id, C_MediaType_Decal, G_Request_CreateClub.Club.DecalUrl);
				}
				if (G_Request_CreateClub.Club.DecoImageUrl_DecalSponsor4x1 != "" && !C_ClubThemes_Folders.existskey(G_Request_CreateClub.Club.DecoImageUrl_DecalSponsor4x1)) {
					if (G_Request_CreateClub.UploadClubMediaRequests.existskey(C_MediaType_DecalSponsor) && Http::IsInitialized(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_DecalSponsor])) {
						Http::Destroy(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_DecalSponsor]);
					}
					G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_DecalSponsor] = ClubAPI::PostUploadClubMedia(CreatedClub.Id, C_MediaType_DecalSponsor, G_Request_CreateClub.Club.DecoImageUrl_DecalSponsor4x1);
				}
				if (G_Request_CreateClub.Club.DecoImageUrl_Screen16x9 != "" && !C_ClubThemes_Folders.existskey(G_Request_CreateClub.Club.DecoImageUrl_Screen16x9)) {
					if (G_Request_CreateClub.UploadClubMediaRequests.existskey(C_MediaType_Screen16x9) && Http::IsInitialized(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Screen16x9])) {
						Http::Destroy(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Screen16x9]);
					}
					G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Screen16x9] = ClubAPI::PostUploadClubMedia(CreatedClub.Id, C_MediaType_Screen16x9, G_Request_CreateClub.Club.DecoImageUrl_Screen16x9);
				}
				if (G_Request_CreateClub.Club.DecoImageUrl_Screen16x1 != "" && !C_ClubThemes_Folders.existskey(G_Request_CreateClub.Club.DecoImageUrl_Screen16x1)) {
					if (G_Request_CreateClub.UploadClubMediaRequests.existskey(C_MediaType_Screen16x1) && Http::IsInitialized(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Screen16x1])) {
						Http::Destroy(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Screen16x1]);
					}
					G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Screen16x1] = ClubAPI::PostUploadClubMedia(CreatedClub.Id, C_MediaType_Screen16x1, G_Request_CreateClub.Club.DecoImageUrl_Screen16x1);
				}
				if (G_Request_CreateClub.Club.DecoImageUrl_Screen8x1 != "" && !C_ClubThemes_Folders.existskey(G_Request_CreateClub.Club.DecoImageUrl_Screen8x1)) {
					if (G_Request_CreateClub.UploadClubMediaRequests.existskey(C_MediaType_Screen8x1) && Http::IsInitialized(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Screen8x1])) {
						Http::Destroy(G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Screen8x1]);
					}
					G_Request_CreateClub.UploadClubMediaRequests[C_MediaType_Screen8x1] = ClubAPI::PostUploadClubMedia(CreatedClub.Id, C_MediaType_Screen8x1, G_Request_CreateClub.Club.DecoImageUrl_Screen8x1);
				}
			} else {
				//L16N %1 references to an http status code, e.g. "Club creation failed. Please try again. (Error 500)"
				declare Text Error = TL::Compose(_("Club creation failed. Please try again. (Error %1)"), ""^Http::GetStatusCode(G_Request_CreateClub.CreateClubRequest));
				Store::SendEvent(C_StoreId, C_Event_ClubCreationFailed, [Error]);
			}
			G_Request_CreateClub.CreateClubRequest = Http::Destroy(G_Request_CreateClub.CreateClubRequest);
		}
	}
	declare Http::K_Request[Text] TmpMediaRequests = G_Request_CreateClub.UploadClubMediaRequests;
	foreach (MediaType => UploadClubMediaRequest in TmpMediaRequests) {
		if (Http::IsInitialized(UploadClubMediaRequest)) {
			G_Request_CreateClub.UploadClubMediaRequests[MediaType] = Http::Update(UploadClubMediaRequest);
			if (!Http::IsRunning(G_Request_CreateClub.UploadClubMediaRequests[MediaType])) {
				if (Http::IsSuccess(G_Request_CreateClub.UploadClubMediaRequests[MediaType])) {
					declare ClubStruct::LibStructuresClub_K_Club EditedClub = ClubAPI::GetResponseFromPostUploadClubMedia(G_Request_CreateClub.UploadClubMediaRequests[MediaType]);
					
					switch (MediaType) {
						case C_MediaType_Icon: G_Request_CreateClub.Club.IconUrl = EditedClub.IconUrl;
						case C_MediaType_Bg: G_Request_CreateClub.Club.BgUrl = EditedClub.BgUrl;
						case C_MediaType_Vertical: G_Request_CreateClub.Club.VerticalUrl = EditedClub.VerticalUrl;
						case C_MediaType_Decal: G_Request_CreateClub.Club.DecalUrl = EditedClub.DecalUrl;
						case C_MediaType_DecalSponsor: G_Request_CreateClub.Club.DecoImageUrl_DecalSponsor4x1 = EditedClub.DecoImageUrl_DecalSponsor4x1;
						case C_MediaType_Screen16x9: G_Request_CreateClub.Club.DecoImageUrl_Screen16x9 = EditedClub.DecoImageUrl_Screen16x9;
						case C_MediaType_Screen16x1: G_Request_CreateClub.Club.DecoImageUrl_Screen16x1 = EditedClub.DecoImageUrl_Screen16x1;
						case C_MediaType_Screen8x1: G_Request_CreateClub.Club.DecoImageUrl_Screen8x1 = EditedClub.DecoImageUrl_Screen8x1;
					}
					
					Http::Destroy(G_Request_CreateClub.UploadClubMediaRequests[MediaType]);
					G_Request_CreateClub.UploadClubMediaRequests.removekey(MediaType);
					if (G_Request_CreateClub.UploadClubMediaRequests.count == 0 && G_Request_CreateClub.ErrorMessage == "") {
						Store::SendEvent(C_StoreId, C_Event_ClubCreated, [G_Request_CreateClub.Club.tojson()]);
					}
				} else {
					//L16N %1 references to an http status code, "Upload of image with type '%1' failed. Please try again. (Error %2)", e.g "Upload of image with type 'logo' failed. Please try again. (Error 500)"
					G_Request_CreateClub.ErrorMessage = TL::Compose(_("Upload of image with type '%1' failed. Please try again. (Error %2)"), C_MediaType_Translations.get(MediaType, _("|ImageType|Unknown")), ""^Http::GetStatusCode(G_Request_CreateClub.UploadClubMediaRequests[MediaType]));
	
					// If the media upload fails, we need to delete the club and stop other uploads
					if (Http::IsInitialized(G_Request_CreateClub.DeleteClubRequest)) {
						Http::Destroy(G_Request_CreateClub.DeleteClubRequest);
					}
					G_Request_CreateClub.DeleteClubRequest = ClubAPI::PostClubDelete(G_Request_CreateClub.Club.Id);
					foreach (UploadClubMediaRequest in G_Request_CreateClub.UploadClubMediaRequests) {
						Http::Destroy(UploadClubMediaRequest);
					}
					G_Request_CreateClub.UploadClubMediaRequests = [];
					break;
				}
			}
		}
	}
	if (Http::IsInitialized(G_Request_CreateClub.DeleteClubRequest)) {
		G_Request_CreateClub.DeleteClubRequest = Http::Update(G_Request_CreateClub.DeleteClubRequest);
		if (!Http::IsRunning(G_Request_CreateClub.DeleteClubRequest)) {
			if (Http::IsSuccess(G_Request_CreateClub.DeleteClubRequest)) {
				// We deleted the club, we can show an error
				Store::SendEvent(C_StoreId, C_Event_ClubCreationFailed, [G_Request_CreateClub.ErrorMessage]);
			} else {
				// Otherwise we consider the club was created and move on without the media
				Store::SendEvent(C_StoreId, C_Event_ClubCreated, [G_Request_CreateClub.Club.tojson()]);
			}
			G_Request_CreateClub.DeleteClubRequest = Http::Destroy(G_Request_CreateClub.DeleteClubRequest);
		}
	}
}

Void Private_Yield_RequestDeleteClubMember() {
	if (Http::IsInitialized(G_Request_DeleteClubMember)) {
		G_Request_DeleteClubMember = Http::Update(G_Request_DeleteClubMember);
		if (!Http::IsRunning(G_Request_DeleteClubMember)) {
			if (Http::IsSuccess(G_Request_DeleteClubMember)) {
				Store::SendEvent(C_StoreId, C_Event_ClubMemberUpdated);
			} else {
				Store::SendEvent(C_StoreId, C_Event_ClubMemberUpdateFailed);
			}
			G_Request_DeleteClubMember = Http::Destroy(G_Request_DeleteClubMember);
		}
	}
}

Void Private_Yield_RequestEditClubMember() {
	if (Http::IsInitialized(G_Request_EditClubMember)) {
		G_Request_EditClubMember = Http::Update(G_Request_EditClubMember);
		if (!Http::IsRunning(G_Request_EditClubMember)) {
			if (Http::IsSuccess(G_Request_EditClubMember)) {
				Store::SendEvent(C_StoreId, C_Event_ClubMemberUpdated);
			} else {
				Store::SendEvent(C_StoreId, C_Event_ClubMemberUpdateFailed);
			}
			G_Request_EditClubMember = Http::Destroy(G_Request_EditClubMember);
		}
	}
}

Void Private_Yield_RequestCreateClubMember() {
	if (Http::IsInitialized(G_Request_CreateClubMember)) {
		G_Request_CreateClubMember = Http::Update(G_Request_CreateClubMember);
		if (!Http::IsRunning(G_Request_CreateClubMember)) {
			if (Http::IsSuccess(G_Request_CreateClubMember)) {
				// Update current club membership
				declare ClubStruct::LibStructuresClub_K_Club CurrentUserClub = GetUserCurrentClub();
				Action_UpdateUserCurrentClubMembership(CurrentUserClub.Id);
			}
			G_Request_CreateClubMember = Http::Destroy(G_Request_CreateClubMember);
		}
	}
}

Void Private_Yield_RequestAllClubRoomsPaging() {
	if (Http::IsInitialized(G_Request_AllClubRoomsPaging)) {
		G_Request_AllClubRoomsPaging = Http::Update(G_Request_AllClubRoomsPaging);
		if (!Http::IsRunning(G_Request_AllClubRoomsPaging)) {
			if (Http::IsSuccess(G_Request_AllClubRoomsPaging)) {
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				declare ClubAPI::K_ResponseGetClubRooms Response = ClubAPI::GetResponseFromGetClubRooms(G_Request_AllClubRoomsPaging);
				
				TMNext_ClubStore_State = Mutation_SetAllClubRooms(
					TMNext_ClubStore_State,
					TMNext_ClubStore_State.AllClubRoomsPager.Offset,
					Response.ClubsRoomsTotal,
					Response.Rooms
				);
			}
			G_Request_AllClubRoomsPaging = Http::Destroy(G_Request_AllClubRoomsPaging);
		}
	}
}

Void Private_Yield_RequestClubRoomsPagingList() {
	declare Http::K_Request[Integer] TmpReqList = G_Request_ClubRoomsPagingList;
	foreach (ClubId => Request_ClubRoomsPaging in TmpReqList) {
		if (Http::IsInitialized(G_Request_ClubRoomsPagingList[ClubId])) {
			G_Request_ClubRoomsPagingList[ClubId] = Http::Update(G_Request_ClubRoomsPagingList[ClubId]);
			if (!Http::IsRunning(G_Request_ClubRoomsPagingList[ClubId])) {
				if (Http::IsSuccess(G_Request_ClubRoomsPagingList[ClubId])) {
					declare ClubAPI::K_ResponseGetClubRooms Response = ClubAPI::GetResponseFromGetClubRooms(G_Request_ClubRoomsPagingList[ClubId]);

					declare K_State TMNext_ClubStore_State for System = C_State_Null;
					TMNext_ClubStore_State = Mutation_SetClubRooms(
						TMNext_ClubStore_State,
						ClubId,
						Response.ClubsRoomsTotal,
						Response.Rooms
					);
				}
				G_Request_ClubRoomsPagingList[ClubId] = Http::Destroy(G_Request_ClubRoomsPagingList[ClubId]);
				G_Request_ClubRoomsPagingList.removekey(ClubId);
			}
		}
	}
}

Void Private_Yield_RequestClubActivitiesPagingList() {
	declare Http::K_Request[Integer] TmpReqList = G_Request_ClubActivitiesPagingList;
	foreach (ClubId => Request_ClubActivitiesPaging in TmpReqList) {
		if (Http::IsInitialized(G_Request_ClubActivitiesPagingList[ClubId])) {
			G_Request_ClubActivitiesPagingList[ClubId] = Http::Update(G_Request_ClubActivitiesPagingList[ClubId]);
			if (!Http::IsRunning(G_Request_ClubActivitiesPagingList[ClubId])) {
				if (Http::IsSuccess(G_Request_ClubActivitiesPagingList[ClubId])) {
					declare ClubAPI::K_ResponseGetClubActivities Response = ClubAPI::GetResponseFromGetClubActivities(G_Request_ClubActivitiesPagingList[ClubId]);
					
					declare K_State TMNext_ClubStore_State for System = C_State_Null;
					TMNext_ClubStore_State = Mutation_SetClubActivities(
						TMNext_ClubStore_State,
						ClubId,
						Response.ActivitiesTotal,
						Response.Activities
					);
				} else {
					//L16N [ClubAdministration] Error displayed when club activities cannot be updated. %1 will be replaced by an error code e.g. "(Error code: 500)"
					declare Text ErrorMessage = TL::Compose(
						_("Error while updating club activities. Please try again. (Error code: %1)"),
						""^Http::GetStatusCode(G_Request_ClubActivitiesPagingList[ClubId])
					);
					Store::SendEvent(C_StoreId, C_Event_ClubActivitiesUpdateError, [""^ClubId, ErrorMessage]);
				}
				G_Request_ClubActivitiesPagingList[ClubId] = Http::Destroy(G_Request_ClubActivitiesPagingList[ClubId]);
				G_Request_ClubActivitiesPagingList.removekey(ClubId);
			}
		}
	}
}

Void Private_Yield_RequestInactiveClubActivitiesPagingList() {
	declare Http::K_Request[Integer] TmpReqList = G_Request_InactiveClubActivitiesPagingList;
	foreach (ClubId => Request_InactiveClubActivitiesPaging in TmpReqList) {
		if (Http::IsInitialized(G_Request_InactiveClubActivitiesPagingList[ClubId])) {
			G_Request_InactiveClubActivitiesPagingList[ClubId] = Http::Update(G_Request_InactiveClubActivitiesPagingList[ClubId]);
			if (!Http::IsRunning(G_Request_InactiveClubActivitiesPagingList[ClubId])) {
				if (Http::IsSuccess(G_Request_InactiveClubActivitiesPagingList[ClubId])) {
					declare ClubAPI::K_ResponseGetClubActivities Response = ClubAPI::GetResponseFromGetClubActivities(G_Request_InactiveClubActivitiesPagingList[ClubId]);
					
					declare K_State TMNext_ClubStore_State for System = C_State_Null;
					TMNext_ClubStore_State = Mutation_SetInactiveClubActivities(
						TMNext_ClubStore_State,
						ClubId,
						Response.ActivitiesTotal,
						Response.Activities
					);
				} else {
					//L16N [ClubAdministration] %1 goes for the type of error
					declare Text ErrorMessage = TL::Compose(
						_("Error while updating club activities. Please try again. (Error code: %1)"),
						""^Http::GetStatusCode(G_Request_InactiveClubActivitiesPagingList[ClubId])
					);
					Store::SendEvent(C_StoreId, C_Event_ClubActivitiesUpdateError, [""^ClubId, ErrorMessage]);
				}
				G_Request_InactiveClubActivitiesPagingList[ClubId] = Http::Destroy(G_Request_InactiveClubActivitiesPagingList[ClubId]);
				G_Request_InactiveClubActivitiesPagingList.removekey(ClubId);
			}
		}
	}
}

Void Private_Yield_RequestClubsFeaturedActivity() {
	if (Http::IsInitialized(G_Request_ClubsFeaturedActivity)) {
		G_Request_ClubsFeaturedActivity = Http::Update(G_Request_ClubsFeaturedActivity);
		if (!Http::IsRunning(G_Request_ClubsFeaturedActivity)) {
			if (Http::IsSuccess(G_Request_ClubsFeaturedActivity)) {
				declare ClubStruct::LibStructuresClub_K_Activity[Integer] Response = ClubAPI::GetResponseFromGetClubsFeaturedActivity(G_Request_ClubsFeaturedActivity);
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				foreach (ClubId => FeaturedActivity in Response) {
					TMNext_ClubStore_State = Mutation_SetClubsFeaturedActivity(
						TMNext_ClubStore_State,
						ClubId,
						FeaturedActivity
					);
				}
			} else {
				declare Text ErrorMessage = TL::Compose(
					//L16N [ClubAdministration] %1 goes for the type of error
					_("Error while updating clubs featured activities. Please try again. (Error code: %1)"),
					""^Http::GetStatusCode(G_Request_ClubsFeaturedActivity)
				);
				Store::SendEvent(C_StoreId, C_Event_ClubsFeaturedActivityUpdateError, [ErrorMessage]);
			}
			G_Request_ClubsFeaturedActivity = Http::Destroy(G_Request_ClubsFeaturedActivity);
		}
	}
}

Void Private_Yield_RequestMoveActivity() {
	if (Http::IsInitialized(G_Request_MoveActivity)) {
		G_Request_MoveActivity = Http::Update(G_Request_MoveActivity);
		if (!Http::IsRunning(G_Request_MoveActivity)) {
			if (Http::IsSuccess(G_Request_MoveActivity)) {
				Store::SendEvent(C_StoreId, C_Event_ClubActivityMoved);
			} else {
				declare Text ErrorMessage = TL::Compose(
					//L16N [ClubAdministration] Failed to move the club activity to another position in the grid. %1 will be replaced by an error code. eg: "Failed to move activity. (Error code: 500)"
					_("Failed to move activity. (Error code: %1)"),
					""^Http::GetStatusCode(G_Request_MoveActivity)
				);
				Store::SendEvent(C_StoreId, C_Event_ClubActivityNotMoved, [ErrorMessage]);
			}
			G_Request_MoveActivity = Http::Destroy(G_Request_MoveActivity);
		}
	}
}

Void Private_Yield_RequestDeleteActivity() {
	if (Http::IsInitialized(G_Request_DeleteActivity)) {
		G_Request_DeleteActivity = Http::Update(G_Request_DeleteActivity);
		if (!Http::IsRunning(G_Request_DeleteActivity)) {
			if (Http::IsSuccess(G_Request_DeleteActivity)) {
				Store::SendEvent(C_StoreId, C_Event_ClubActivityDeleted);
			} else {
				declare Text ErrorMessage = TL::Compose(
					//L16N [ClubAdministration] Failed to delete the club activity. %1 will be replaced by an error code. eg: "Failed to remove activity. (Error code: 500)"
					_("Failed to remove activity. (Error code: %1)"),
					""^Http::GetStatusCode(G_Request_DeleteActivity)
				);
				Store::SendEvent(C_StoreId, C_Event_ClubActivityNotDeleted, [ErrorMessage]);
			}
			G_Request_DeleteActivity = Http::Destroy(G_Request_DeleteActivity);
		}
	}
}

Void Private_Yield_RequestActivateActivityList() {
	declare Http::K_Request[Integer] TmpActivateActivityList = G_Request_ActivateActivityList;
	foreach (ActivityId => Request_ReadOnly in TmpActivateActivityList) {
		if (Http::IsInitialized(G_Request_ActivateActivityList[ActivityId])) {
			declare Http::K_Request Request = Http::Update(G_Request_ActivateActivityList[ActivityId]);
			if (Http::IsRunning(Request)) {
				G_Request_ActivateActivityList[ActivityId] = Request;
			} else {
				if (Http::IsSuccess(Request)) {
					Store::SendEvent(C_StoreId, C_Event_ActivityActivatedOrDeactivated);
				} else {
					//L16N [ClubAdministration] %1 goes for the type of error
					declare Text ErrorMessage = TL::Compose(
						_("Error while validating activity. Please try again. (Error code: %1)"),
						""^Http::GetStatusCode(Request)
					);
					Store::SendEvent(C_StoreId, C_Event_ActivityValidationFailed, [ErrorMessage]);
				}
				Request = Http::Destroy(Request);
				G_Request_ActivateActivityList.removekey(ActivityId);
			}
		}
	}
}

Void Private_Yield_RequestActivityUpdatePrivacyList() {
	declare Http::K_Request[Integer] TmpActivityUpdatePrivacyList = G_Request_ActivityUpdatePrivacyList;
	foreach (ActivityId => Request_ReadOnly in TmpActivityUpdatePrivacyList) {
		if (Http::IsInitialized(G_Request_ActivityUpdatePrivacyList[ActivityId])) {
			declare Http::K_Request Request = Http::Update(G_Request_ActivityUpdatePrivacyList[ActivityId]);
			if (Http::IsRunning(Request)) {
				G_Request_ActivityUpdatePrivacyList[ActivityId] = Request;
			} else {
				if (Http::IsSuccess(Request)) {
					Store::SendEvent(C_StoreId, C_Event_ClubActivityPrivacyUpdated);
				} else {
					//L16N [ClubAdministration] Message displayed when the administrator tries to change the privacy of an activity (Public/Private) %1 goes for the type of error
					declare Text ErrorMessage = TL::Compose(
						_("Error while updating the privacy of the activity. Please try again. (Error code: %1)"),
						""^Http::GetStatusCode(Request)
					);
					Store::SendEvent(C_StoreId, C_Event_ClubActivityPrivacyUpdateFailed, [ErrorMessage]);
				}
				Request = Http::Destroy(Request);
				G_Request_ActivityUpdatePrivacyList.removekey(ActivityId);
			}
		}
	}
}

Void Private_Yield_RequestUpdateFeaturedActivityList() {
	declare Http::K_Request[Integer] TmpUpdateFeaturedActivityList = G_Request_UpdateFeaturedActivityList;
	foreach (ActivityId => Request_ReadOnly in TmpUpdateFeaturedActivityList) {
		if (Http::IsInitialized(G_Request_UpdateFeaturedActivityList[ActivityId])) {
			declare Http::K_Request Request = Http::Update(G_Request_UpdateFeaturedActivityList[ActivityId]);
			if (Http::IsRunning(Request)) {
				G_Request_UpdateFeaturedActivityList[ActivityId] = Request;
			} else {
				if (Http::IsSuccess(Request)) {
					declare ClubAPI::K_HttpActivity Activity;
					Activity.fromjson(Request.Result);
					Store::SendEvent(C_StoreId, C_Event_ClubActivityFeaturedUpdated, [""^Activity.clubId]);
				} else {
					//L16N [ClubAdministration] Message displayed when the administrator tries to feature/unfeature an activity. %1 goes for the type of error
					declare Text ErrorMessage = TL::Compose(
						_("Error while updating the featured activity. Please try again. (Error code: %1)"),
						""^Http::GetStatusCode(Request)
					);
					Store::SendEvent(C_StoreId, C_Event_ClubActivityFeaturedUpdateFailed, [ErrorMessage]);
				}
				Request = Http::Destroy(Request);
				G_Request_UpdateFeaturedActivityList.removekey(ActivityId);
			}
		}
	}
}

Void Private_Yield_RequestCreateOrEditCampaignRequestList() {
	declare K_CreateOrEditCampaignRequest[Integer] TmpCreateRequestList = G_CreateOrEditCampaignRequestList;
	foreach (CampaignId => CreateCampaignRequest in TmpCreateRequestList) {
		// Register map tasks
		foreach (MapUid => Task_ReadOnly in CreateCampaignRequest.Task_RegisterMapList) {
			if (Task::IsInitialized(G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList[MapUid])) {
				G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList[MapUid] = Task::Update(G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList[MapUid]);
				if (!Task::IsRunning(G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList[MapUid])) {
					if (Task::IsSuccess(G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList[MapUid])) {
						Task::Destroy(G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList[MapUid]);
						G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList.removekey(MapUid);

						if (G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList.count == 0) {
							if (Http::IsInitialized(G_CreateOrEditCampaignRequestList[CampaignId].Request)) {
								Http::Destroy(G_CreateOrEditCampaignRequestList[CampaignId].Request);
							}
							if (G_CreateOrEditCampaignRequestList[CampaignId].IsEditingCampaign) {
								G_CreateOrEditCampaignRequestList[CampaignId].Request = ClubAPI::PostEditCampaign(G_CreateOrEditCampaignRequestList[CampaignId].Campaign);
							} else {
								G_CreateOrEditCampaignRequestList[CampaignId].Request = ClubAPI::PostCreateCampaign(G_CreateOrEditCampaignRequestList[CampaignId].Campaign);
							}
						}
					} else {
						Store::SendEvent(C_StoreId, C_Event_ClubCampaignCreationOrEditionFailed, [
							//L16N [ClubAdministration] Message displayed when the upload of campaign tracks fails. %1 will be replaced by an error code. eg: "Error while uploading tracks. Please try again. (Error code: 500)"
							TL::Compose(_("Error while uploading tracks. Please try again. (Error code: %1)"), Task::GetSourceTaskError(G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList[MapUid]).Code)
						]);

						// An error occurred so we cancel the tasks
						declare Task::K_Task[Text] TmpTaskList = G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList;
						foreach (MapUid => TaskRelease_ReadOnly in TmpTaskList) {
							if (Task::IsInitialized(G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList[MapUid])) {
								Task::Destroy(G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList[MapUid]);
							}
							G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList.removekey(MapUid);
						}
						break;
					}
				}
			} else {
				G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList.removekey(MapUid);

				if (G_CreateOrEditCampaignRequestList[CampaignId].Task_RegisterMapList.count == 0) {
					if (Http::IsInitialized(G_CreateOrEditCampaignRequestList[CampaignId].Request)) {
						Http::Destroy(G_CreateOrEditCampaignRequestList[CampaignId].Request);
					}
					if (G_CreateOrEditCampaignRequestList[CampaignId].IsEditingCampaign) {
						G_CreateOrEditCampaignRequestList[CampaignId].Request = ClubAPI::PostEditCampaign(G_CreateOrEditCampaignRequestList[CampaignId].Campaign);
					} else {
						G_CreateOrEditCampaignRequestList[CampaignId].Request = ClubAPI::PostCreateCampaign(G_CreateOrEditCampaignRequestList[CampaignId].Campaign);
					}
				}
			}
		}

		// Create or edit campaign request
		declare Http::K_Request Request_CreateOrEditCampaign = G_CreateOrEditCampaignRequestList[CampaignId].Request;
		if (Http::IsInitialized(Request_CreateOrEditCampaign)) {
			Request_CreateOrEditCampaign = Http::Update(Request_CreateOrEditCampaign);
			if (!Http::IsRunning(Request_CreateOrEditCampaign)) {
				if (Http::IsSuccess(Request_CreateOrEditCampaign)) {
					declare ClubAPI::K_ResponseFromPostCreateCampaign Response = ClubAPI::GetResponseFromPostCreateOrEditCampaign(Request_CreateOrEditCampaign);
					G_CreateOrEditCampaignRequestList[CampaignId].Campaign.Id = Response.Campaign.Id;
					G_CreateOrEditCampaignRequestList[CampaignId].Campaign.ActivityId = Response.ActivityId;

					// Update theme asset or upload custom asset
					if (ClubStruct::IsClubThemeName(G_CreateOrEditCampaignRequestList[CampaignId].Campaign.Media.ButtonBackgroundUrl) || G_CreateOrEditCampaignRequestList[CampaignId].Campaign.Media.ButtonBackgroundUrl == "") {
						G_CreateOrEditCampaignRequestList[CampaignId].UploadOrUpdateMediaActivityRequest = Http::DestroyAndCreate(
							G_CreateOrEditCampaignRequestList[CampaignId].UploadOrUpdateMediaActivityRequest, 
							ClubAPI::PostUpdateActivityMediaTheme(G_CreateOrEditCampaignRequestList[CampaignId].Campaign.Club.Id, Response.ActivityId, G_CreateOrEditCampaignRequestList[CampaignId].Campaign.Media.ButtonBackgroundUrl)
						);
					} else if (G_CreateOrEditCampaignRequestList[CampaignId].Campaign.Media.ButtonBackgroundUrl != "" && !Http.IsValidUrl(G_CreateOrEditCampaignRequestList[CampaignId].Campaign.Media.ButtonBackgroundUrl)) {
						G_CreateOrEditCampaignRequestList[CampaignId].UploadOrUpdateMediaActivityRequest = Http::DestroyAndCreate(
							G_CreateOrEditCampaignRequestList[CampaignId].UploadOrUpdateMediaActivityRequest, 
							ClubAPI::PostUploadMediaActivity(G_CreateOrEditCampaignRequestList[CampaignId].Campaign.Club.Id, Response.ActivityId, G_CreateOrEditCampaignRequestList[CampaignId].Campaign.Media.ButtonBackgroundUrl)
						);
					} else {
						Store::SendEvent(C_StoreId, C_Event_ClubCampaignCreatedOrEdited, [G_CreateOrEditCampaignRequestList[CampaignId].Campaign.tojson(), ""^Response.ActivityId]);
					}

					// Update activity privacy
					G_CreateOrEditCampaignRequestList[CampaignId].UpdatePrivacyActivityRequest = Http::DestroyAndCreate(
						G_CreateOrEditCampaignRequestList[CampaignId].UpdatePrivacyActivityRequest, 
						ClubAPI::PostUpdatePrivacyActivity(G_CreateOrEditCampaignRequestList[CampaignId].Campaign.Club.Id, Response.ActivityId, !G_CreateOrEditCampaignRequestList[CampaignId].Campaign.IsPrivate)
					);
				} else {
					declare Text ErrorMessage;
					if (G_CreateOrEditCampaignRequestList[CampaignId].IsEditingCampaign) {
						//L16N [ClubAdministration] Message displayed when the edition of the campaign fails. %1 will be replaced by an error code. eg: "Error while editing the campaign. Please try again. (Error code: 500)"
						ErrorMessage = TL::Compose(_("Error while editing the campaign. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(Request_CreateOrEditCampaign));
					} else {
						//L16N [ClubAdministration] Message displayed when the creation of the campaign fails. %1 will be replaced by an error code. eg: "Error while creating the campaign. Please try again. (Error code: 500)"
						ErrorMessage = TL::Compose(_("Error while creating the campaign. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(Request_CreateOrEditCampaign));
					}
					Store::SendEvent(C_StoreId, C_Event_ClubCampaignCreationOrEditionFailed, [ErrorMessage]);
				}
				Request_CreateOrEditCampaign = Http::Destroy(Request_CreateOrEditCampaign);
			}
			G_CreateOrEditCampaignRequestList[CampaignId].Request = Request_CreateOrEditCampaign;
		}

		declare Http::K_Request Request_UploadMediaActivity = G_CreateOrEditCampaignRequestList[CampaignId].UploadOrUpdateMediaActivityRequest;
		if (Http::IsInitialized(Request_UploadMediaActivity)) {
			Request_UploadMediaActivity = Http::Update(Request_UploadMediaActivity);
			if (!Http::IsRunning(Request_UploadMediaActivity)) {
				if (Http::IsSuccess(Request_UploadMediaActivity)) {
					Store::SendEvent(C_StoreId, C_Event_ClubCampaignCreatedOrEdited, [G_CreateOrEditCampaignRequestList[CampaignId].Campaign.tojson(), ""^G_CreateOrEditCampaignRequestList[CampaignId].Campaign.ActivityId]);
				} else {
					//L16N [ClubAdministration] Message displayed when the upload of a campaign media has failed. %1 will be replaced by an error code. eg: "Error while uploading the campaign media. Please try again. (Error code: 500)"
					declare Text ErrorMessage = TL::Compose(_("Error while uploading your media. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(Request_UploadMediaActivity));
					if (ClubStruct::IsClubThemeName(G_CreateOrEditCampaignRequestList[CampaignId].Campaign.Media.ButtonBackgroundUrl)) {
						if (G_CreateOrEditCampaignRequestList[CampaignId].IsEditingCampaign) {
							//L16N [ClubAdministration] Message displayed when the edition of the campaign fails. %1 will be replaced by an error code. eg: "Error while editing the campaign. Please try again. (Error code: 500)"
							ErrorMessage = TL::Compose(_("Error while editing the campaign. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(Request_UploadMediaActivity));
						} else {
							//L16N [ClubAdministration] Message displayed when the creation of the campaign fails. %1 will be replaced by an error code. eg: "Error while creating the campaign. Please try again. (Error code: 500)"
							ErrorMessage = TL::Compose(_("Error while creating the campaign. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(Request_UploadMediaActivity));
						}
					}
					Store::SendEvent(C_StoreId, C_Event_ClubCampaignCreationOrEditionFailed, [ErrorMessage]);
				}
				Request_UploadMediaActivity = Http::Destroy(Request_UploadMediaActivity);
			}
			G_CreateOrEditCampaignRequestList[CampaignId].UploadOrUpdateMediaActivityRequest = Request_UploadMediaActivity;
		}

		declare Http::K_Request Request_UpdatePrivacyActivity = G_CreateOrEditCampaignRequestList[CampaignId].UpdatePrivacyActivityRequest;
		if (Http::IsInitialized(Request_UpdatePrivacyActivity)) {
			Request_UpdatePrivacyActivity = Http::Update(Request_UpdatePrivacyActivity);
			if (!Http::IsRunning(Request_UpdatePrivacyActivity)) {
				if (Http::IsSuccess(Request_UpdatePrivacyActivity)) {
					Store::SendEvent(C_StoreId, C_Event_ClubActivityPrivacyUpdated, []);
				} else {
					declare Text ErrorMessage = TL::Compose(
						//L16N [ClubAdministration] Message displayed when the administrator tries to change the privacy of a campaign (Public/Private). %1 will be replaced by an error code. eg: "Error while updating the privacy of the activity. Please try again. (Error code: 500)"
						_("Error while updating the privacy of the activity. Please try again. (Error code: %1)"),
						""^Http::GetStatusCode(Request_UpdatePrivacyActivity)
					);
					Store::SendEvent(C_StoreId, C_Event_ClubCampaignCreationOrEditionFailed, [ErrorMessage]);
				}
				Request_UpdatePrivacyActivity = Http::Destroy(Request_UpdatePrivacyActivity);
			}
			G_CreateOrEditCampaignRequestList[CampaignId].UpdatePrivacyActivityRequest = Request_UpdatePrivacyActivity;
		}

		if (
			CreateCampaignRequest.Task_RegisterMapList.count == 0 &&
			!Http::IsInitialized(Request_CreateOrEditCampaign) &&
			!Http::IsInitialized(Request_UploadMediaActivity) &&
			!Http::IsInitialized(Request_UpdatePrivacyActivity)
		) {
			// All tasks are done
			G_CreateOrEditCampaignRequestList.removekey(CampaignId);
		}
	}
}

Void Private_Yield_RequestCreateOrEditClubRoom() {
	if (Http::IsInitialized(G_Request_CreateOrEditClubRoom.Request)) {
		G_Request_CreateOrEditClubRoom.Request = Http::Update(G_Request_CreateOrEditClubRoom.Request);
		if (!Http::IsRunning(G_Request_CreateOrEditClubRoom.Request)) {
			if (Http::IsSuccess(G_Request_CreateOrEditClubRoom.Request)) {
				// Do not erase the club room logo
				declare Text MediaUrl = G_Request_CreateOrEditClubRoom.Room.MediaUrl;
				G_Request_CreateOrEditClubRoom.Room = ClubAPI::GetResponseFromPostClubRoomCreateOrEdit(G_Request_CreateOrEditClubRoom.Request);
				G_Request_CreateOrEditClubRoom.Room.MediaUrl = MediaUrl;

				if (ClubStruct::IsClubThemeName(G_Request_CreateOrEditClubRoom.Room.MediaUrl) || G_Request_CreateOrEditClubRoom.Room.MediaUrl == "") {
					G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest = Http::DestroyAndCreate(
						G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest, 
						ClubAPI::PostUpdateActivityMediaTheme(G_Request_CreateOrEditClubRoom.Room.ClubId, G_Request_CreateOrEditClubRoom.Room.ActivityId, G_Request_CreateOrEditClubRoom.Room.MediaUrl)
					);
				} else if (!Http.IsValidUrl(G_Request_CreateOrEditClubRoom.Room.MediaUrl) && G_Request_CreateOrEditClubRoom.Room.MediaUrl != "") {
					G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest = Http::DestroyAndCreate(
						G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest, 
						ClubAPI::PostUploadMediaActivity(G_Request_CreateOrEditClubRoom.Room.ClubId, G_Request_CreateOrEditClubRoom.Room.ActivityId, G_Request_CreateOrEditClubRoom.Room.MediaUrl)
					);
				} else {
					Store::SendEvent(C_StoreId, C_Event_ClubRoomCreatedOrEdited, [""^G_Request_CreateOrEditClubRoom.Room.ActivityId]);
				}
			} else {
				declare Text ErrorMessage;
				if (G_Request_CreateOrEditClubRoom.EditingRoom) {
					//L16N [ClubAdministration] Message displayed when the edition of the room fails. %1 will be replaced by an error code. eg: "Error while editing the room. Please try again. (Error code: 500)"
					ErrorMessage = TL::Compose(_("Error while editing the room. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditClubRoom.Request));
				} else {
					//L16N [ClubAdministration] Message displayed when the creation of the room fails. %1 will be replaced by an error code. eg: "Error while creating the room. Please try again. (Error code: 500)"
					ErrorMessage = TL::Compose(_("Error while creating the room. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditClubRoom.Request));
				}
				Store::SendEvent(C_StoreId, C_Event_ClubRoomCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_CreateOrEditClubRoom.Request = Http::Destroy(G_Request_CreateOrEditClubRoom.Request);
		}
	}
	if (Http::IsInitialized(G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest)) {
		G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest = Http::Update(G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest);
		if (!Http::IsRunning(G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest)) {
			if (Http::IsSuccess(G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest)) {
				Store::SendEvent(C_StoreId, C_Event_ClubRoomCreatedOrEdited, [""^G_Request_CreateOrEditClubRoom.Room.ActivityId]);
			} else {
				//L16N [ClubAdministration] Message displayed when the upload of a room media has failed. %1 will be replaced by an error code. eg: "Error while uploading the room media. Please try again. (Error code: 500)"
				declare Text ErrorMessage = TL::Compose(_("Error while uploading the room media. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest));
				if (ClubStruct::IsClubThemeName(G_Request_CreateOrEditClubRoom.Room.MediaUrl)) {
					if (G_Request_CreateOrEditClubRoom.EditingRoom) {
						//L16N [ClubAdministration] Message displayed when the edition of the room fails. %1 will be replaced by an error code. eg: "Error while editing the room. Please try again. (Error code: 500)"
						ErrorMessage = TL::Compose(_("Error while editing the room. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest));
					} else {
						//L16N [ClubAdministration] Message displayed when the creation of the room fails. %1 will be replaced by an error code. eg: "Error while creating the room. Please try again. (Error code: 500)"
						ErrorMessage = TL::Compose(_("Error while creating the room. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditClubRoom.UploadOrUpdateMediaActivityRequest));
					}
				}

				// Delete the activity if the media upload or the activity theme update has failed
				if (!G_Request_CreateOrEditClubRoom.EditingRoom) {
					Action_DeleteActivity(G_Request_CreateOrEditClubRoom.Room.ClubId, G_Request_CreateOrEditClubRoom.Room.ActivityId);
				}

				Store::SendEvent(C_StoreId, C_Event_ClubRoomCreationOrEditionFailed, [ErrorMessage]);
			}
		}
	}
}

Void Private_Yield_RequestEditClub() {
	declare Http::K_Request[Text] TmpMediaRequests = G_Request_EditClub.UploadClubMediaRequests;
	foreach (MediaType => UploadClubMediaRequest in TmpMediaRequests) {
		if (Http::IsInitialized(UploadClubMediaRequest)) {
			G_Request_EditClub.UploadClubMediaRequests[MediaType] = Http::Update(UploadClubMediaRequest);
			if (!Http::IsRunning(G_Request_EditClub.UploadClubMediaRequests[MediaType])) {
				if (Http::IsSuccess(G_Request_EditClub.UploadClubMediaRequests[MediaType])) {
					declare ClubStruct::LibStructuresClub_K_Club EditedClub = ClubAPI::GetResponseFromPostUploadClubMedia(G_Request_EditClub.UploadClubMediaRequests[MediaType]);

					switch (MediaType) {
						case C_MediaType_Icon: G_Request_EditClub.Club.IconUrl = EditedClub.IconUrl;
						case C_MediaType_Decal: G_Request_EditClub.Club.DecalUrl = EditedClub.DecalUrl;
						case C_MediaType_Bg: G_Request_EditClub.Club.BgUrl = EditedClub.BgUrl;
						case C_MediaType_Vertical: G_Request_EditClub.Club.VerticalUrl = EditedClub.VerticalUrl;
						case C_MediaType_DecalSponsor: G_Request_EditClub.Club.DecoImageUrl_DecalSponsor4x1 = EditedClub.DecoImageUrl_DecalSponsor4x1;
						case C_MediaType_Screen16x9: G_Request_EditClub.Club.DecoImageUrl_Screen16x9 = EditedClub.DecoImageUrl_Screen16x9;
						case C_MediaType_Screen8x1: G_Request_EditClub.Club.DecoImageUrl_Screen8x1 = EditedClub.DecoImageUrl_Screen8x1;
						case C_MediaType_Screen16x1: G_Request_EditClub.Club.DecoImageUrl_Screen16x1 = EditedClub.DecoImageUrl_Screen16x1;
					}
					
					Http::Destroy(G_Request_EditClub.UploadClubMediaRequests[MediaType]);
					G_Request_EditClub.UploadClubMediaRequests.removekey(MediaType);
					if (G_Request_EditClub.UploadClubMediaRequests.count == 0 && G_Request_EditClub.ErrorMessage == "") {
						G_Request_EditClub.EditClubRequest = Http::DestroyAndCreate(G_Request_EditClub.EditClubRequest, ClubAPI::PostEditClub(G_Request_EditClub.Club));
					}
				} else {
					declare Text Error;
					//L16N %1 references to an http status code, "Edition of image with type '%1' failed. Please try again. (Error %2)", e.g "Edition of image with type 'logo' failed. Please try again. (Error 500)"
					Error = TL::Compose(_("Edition of image with type '%1' failed. Please try again. (Error %2)"), C_MediaType_Translations.get(MediaType, _("|ImageType|Unknown")),""^Http::GetStatusCode(G_Request_EditClub.UploadClubMediaRequests[MediaType]));
					Store::SendEvent(C_StoreId, C_Event_ClubUpdateFailed, [Error]);
	
					foreach (UploadClubMediaRequest in G_Request_EditClub.UploadClubMediaRequests) {
						Http::Destroy(UploadClubMediaRequest);
					}
					G_Request_EditClub.UploadClubMediaRequests = [];
					break;
				}
			}
		}
	}
	if (Http::IsInitialized(G_Request_EditClub.EditClubRequest)) {
		G_Request_EditClub.EditClubRequest = Http::Update(G_Request_EditClub.EditClubRequest);
		if (!Http::IsRunning(G_Request_EditClub.EditClubRequest)) {
			if (Http::IsSuccess(G_Request_EditClub.EditClubRequest)) {
				declare ClubStruct::LibStructuresClub_K_Club EditedClub = ClubAPI::GetResponseFromPostEditClub(G_Request_EditClub.EditClubRequest);
				G_Request_EditClub.Club = EditedClub;
				Store::SendEvent(C_StoreId, C_Event_ClubUpdated, [G_Request_EditClub.Club.tojson()]);
			} else {
				//L16N %1 references to an http status code, e.g. "Club update failed. Please try again. (Error 500)"
				declare Text Error = TL::Compose(_("Club update failed. Please try again. (Error %1)"), ""^Http::GetStatusCode(G_Request_EditClub.EditClubRequest));
				Store::SendEvent(C_StoreId, C_Event_ClubUpdateFailed, [Error]);
			}
			G_Request_EditClub.EditClubRequest = Http::Destroy(G_Request_EditClub.EditClubRequest);
		}
	}
}

Void Private_Yield_RequestDeleteClub() {
	if (Http::IsInitialized(G_Request_DeleteClub)) {
		G_Request_DeleteClub = Http::Update(G_Request_DeleteClub);
		if (!Http::IsRunning(G_Request_DeleteClub)) {
			if (Http::IsSuccess(G_Request_DeleteClub)) {
				Store::SendEvent(C_StoreId, C_Event_ClubDeleted, [Http::GetMetadata(G_Request_DeleteClub, C_Metadata_ClubId)]);
			} else {
				//L16N %1 references to an http status code, e.g. "Club deletion failed. Please try again. (Error 500)"
				declare Text Error = TL::Compose(_("Club deletion failed. Please try again. (Error %1)"), ""^Http::GetStatusCode(G_Request_DeleteClub));
				Store::SendEvent(C_StoreId, C_Event_ClubDeleteFailed, [Error]);
			}
			G_Request_DeleteClub = Http::Destroy(G_Request_DeleteClub);
		}
	}
}

Void Private_Yield_RequestUpdateClubVIP() {
	if (Http::IsInitialized(G_Request_UpdateClubVIP)) {
		G_Request_UpdateClubVIP = Http::Update(G_Request_UpdateClubVIP);
		if (!Http::IsRunning(G_Request_UpdateClubVIP)) {
			Store::SendEvent(C_StoreId, C_Event_ClubVIPUpdated, []);
			G_Request_UpdateClubVIP = Http::Destroy(G_Request_UpdateClubVIP);
		}
	}
}

Void Private_Yield_RequestGetVIPListOnMap() {
	declare Boolean TMNext_ClubStore_IsGettingVIPListOnMap for System = False;

	if (Http::IsInitialized(G_Request_GetVIPListOnMap.GetVIPListOnMap)) {
		G_Request_GetVIPListOnMap.GetVIPListOnMap = Http::Update(G_Request_GetVIPListOnMap.GetVIPListOnMap);
		if (!Http::IsRunning(G_Request_GetVIPListOnMap.GetVIPListOnMap)) {
			if (Http::IsSuccess(G_Request_GetVIPListOnMap.GetVIPListOnMap)) {
				declare Text[] VIPAccountIdList = ClubAPI::GetResponseFromGetVIPListOnMap(G_Request_GetVIPListOnMap.GetVIPListOnMap);
	
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_SetClubVIPListOnMap(
					TMNext_ClubStore_State,
					G_Request_GetVIPListOnMap.ClubId,
					G_Request_GetVIPListOnMap.SeasonUid,
					G_Request_GetVIPListOnMap.MapUid,
					VIPAccountIdList
				);

				G_Request_GetVIPListOnMap.Task_GetDisplayName = Task::DestroyAndCreate(
					G_Request_GetVIPListOnMap.Task_GetDisplayName,
					UserMgr,
					UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), VIPAccountIdList)
				);
			} else {
				Store::SendEvent(C_StoreId, C_Event_ClubVIPListOnMapFailed, []);
			}
			G_Request_GetVIPListOnMap.GetVIPListOnMap = Http::Destroy(G_Request_GetVIPListOnMap.GetVIPListOnMap);
		}
	}
	if (Task::IsInitialized(G_Request_GetVIPListOnMap.Task_GetDisplayName)) {
		G_Request_GetVIPListOnMap.Task_GetDisplayName = Task::Update(G_Request_GetVIPListOnMap.Task_GetDisplayName);
		if (!Task::IsRunning(G_Request_GetVIPListOnMap.Task_GetDisplayName)) {
			if (Task::IsSuccess(G_Request_GetVIPListOnMap.Task_GetDisplayName)) {
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_UpdateClubVIPListOnMapDisplayNames(
					TMNext_ClubStore_State,
					G_Request_GetVIPListOnMap.ClubId,
					G_Request_GetVIPListOnMap.SeasonUid,
					G_Request_GetVIPListOnMap.MapUid
				);
			} else {
				Store::SendEvent(C_StoreId, C_Event_ClubVIPListOnMapFailed, []);
			}
			G_Request_GetVIPListOnMap.Task_GetDisplayName = Task::Destroy(G_Request_GetVIPListOnMap.Task_GetDisplayName);
		}
	}
	if (Http::IsInitialized(G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap)) {
		G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap = Http::Update(G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap);
		if (!Http::IsRunning(G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap)) {
			if (Http::IsSuccess(G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap)) {
				declare Text[] VIPAccountIdList = ClubAPI::GetResponseFromGetVIPListOnMap(G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap);
	
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_SetGlobalVIPListOnMap(
					TMNext_ClubStore_State,
					G_Request_GetVIPListOnMap.MapUid,
					G_Request_GetVIPListOnMap.SeasonUid,
					VIPAccountIdList
				);

				G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal = Task::DestroyAndCreate(
					G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal,
					UserMgr,
					UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), VIPAccountIdList)
				);
			} else {
				Store::SendEvent(C_StoreId, C_Event_GlobalVIPListOnMapFailed, []);
			}
			G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap = Http::Destroy(G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap);
		}
	}
	if (Task::IsInitialized(G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal)) {
		G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal = Task::Update(G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal);
		if (!Task::IsRunning(G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal)) {
			if (Task::IsSuccess(G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal)) {
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_UpdateGlobalVIPListOnMapDisplayNames(
					TMNext_ClubStore_State,
					G_Request_GetVIPListOnMap.MapUid,
					G_Request_GetVIPListOnMap.SeasonUid
				);
			} else {
				Store::SendEvent(C_StoreId, C_Event_GlobalVIPListOnMapFailed, []);
			}
			G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal = Task::Destroy(G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal);
		}
	}
	if (Http::IsInitialized(G_Request_GetVIPListOnMap.GetFollowersListOnMap)) {
		G_Request_GetVIPListOnMap.GetFollowersListOnMap = Http::Update(G_Request_GetVIPListOnMap.GetFollowersListOnMap);
		if (!Http::IsRunning(G_Request_GetVIPListOnMap.GetFollowersListOnMap)) {
			if (Http::IsSuccess(G_Request_GetVIPListOnMap.GetFollowersListOnMap)) {
				declare Text[] VIPAccountIdList = ClubAPI::GetResponseFromGetFollowersListOnMap(G_Request_GetVIPListOnMap.GetFollowersListOnMap);
	
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_SetFollowersListOnMap(
					TMNext_ClubStore_State,
					G_Request_GetVIPListOnMap.MapUid,
					G_Request_GetVIPListOnMap.SeasonUid,
					VIPAccountIdList
				);

				G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers = Task::DestroyAndCreate(
					G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers,
					UserMgr,
					UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), VIPAccountIdList)
				);
			} else {
				Store::SendEvent(C_StoreId, C_Event_FollowersListOnMapFailed, []);
			}
			G_Request_GetVIPListOnMap.GetFollowersListOnMap = Http::Destroy(G_Request_GetVIPListOnMap.GetFollowersListOnMap);
		}
	}
	if (Task::IsInitialized(G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers)) {
		G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers = Task::Update(G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers);
		if (!Task::IsRunning(G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers)) {
			if (Task::IsSuccess(G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers)) {
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_UpdateFollowersListOnMapDisplayNames(
					TMNext_ClubStore_State,
					G_Request_GetVIPListOnMap.MapUid,
					G_Request_GetVIPListOnMap.SeasonUid
				);
			} else {
				Store::SendEvent(C_StoreId, C_Event_FollowersListOnMapFailed, []);
			}
			G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers = Task::Destroy(G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers);
		}
	}

	TMNext_ClubStore_IsGettingVIPListOnMap = (
		Http::IsRunning(G_Request_GetVIPListOnMap.GetVIPListOnMap) ||
		Task::IsRunning(G_Request_GetVIPListOnMap.Task_GetDisplayName) ||
		Http::IsRunning(G_Request_GetVIPListOnMap.GetGlobalVIPListOnMap) ||
		Task::IsRunning(G_Request_GetVIPListOnMap.Task_GetDisplayNameGlobal) ||
		Http::IsRunning(G_Request_GetVIPListOnMap.GetFollowersListOnMap) ||
		Task::IsRunning(G_Request_GetVIPListOnMap.Task_GetDisplayNameFollowers)
	);
}

Void Private_Yield_RequestCreateOrEditBucketActivity() {
	if (Http::IsInitialized(G_Request_CreateOrEditBucketActivity.Request)) {
		G_Request_CreateOrEditBucketActivity.Request = Http::Update(G_Request_CreateOrEditBucketActivity.Request);
		if (!Http::IsRunning(G_Request_CreateOrEditBucketActivity.Request)) {
			if (Http::IsSuccess(G_Request_CreateOrEditBucketActivity.Request)) {
				declare ClubStruct::LibStructuresClub_K_Activity ActivityResponse = ClubAPI::GetResponseFromPostCreateOrEditBucket(G_Request_CreateOrEditBucketActivity.Request);
				G_Request_CreateOrEditBucketActivity.ActivityId = ActivityResponse.Id;

				// Update theme asset or upload custom asset
				if (ClubStruct::IsClubThemeName(G_Request_CreateOrEditBucketActivity.MediaUrl) || G_Request_CreateOrEditBucketActivity.MediaUrl == "") {
					G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest = Http::DestroyAndCreate(
						G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest, 
						ClubAPI::PostUpdateActivityMediaTheme(G_Request_CreateOrEditBucketActivity.ClubId, ActivityResponse.Id, G_Request_CreateOrEditBucketActivity.MediaUrl)
					);
				} else if (G_Request_CreateOrEditBucketActivity.MediaUrl != "" && !Http.IsValidUrl(G_Request_CreateOrEditBucketActivity.MediaUrl)) {
					G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest = Http::DestroyAndCreate(
						G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest, 
						ClubAPI::PostUploadMediaActivity(G_Request_CreateOrEditBucketActivity.ClubId, ActivityResponse.Id, G_Request_CreateOrEditBucketActivity.MediaUrl)
					);
				} else {
					Store::SendEvent(C_StoreId, C_Event_BucketActivityCreatedOrEdited, []);
				}
			} else {
				declare Text ErrorMessage;
				if (G_Request_CreateOrEditBucketActivity.IsEditing) {
					//L16N [ClubAdministration] Message displayed when the edition of the activity fails. %1 will be replaced by an error code. eg: "Error while editing the activity. Please try again. (Error code: 500)"
					ErrorMessage = TL::Compose(_("Error while editing the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditBucketActivity.Request));
				} else {
					//L16N [ClubAdministration] Message displayed when the creation of the activity fails. %1 will be replaced by an error code. eg: "Error while creating the activity. Please try again. (Error code: 500)"
					ErrorMessage = TL::Compose(_("Error while creating the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditBucketActivity.Request));
				}
				Store::SendEvent(C_StoreId, C_Event_BucketActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_CreateOrEditBucketActivity.Request = Http::Destroy(G_Request_CreateOrEditBucketActivity.Request);
		}
	}
	if (Http::IsInitialized(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest)) {
		G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest = Http::Update(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest);
		if (!Http::IsRunning(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest)) {
			if (Http::IsSuccess(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest)) {
				Store::SendEvent(C_StoreId, C_Event_BucketActivityCreatedOrEdited, []);
			} else {
				//L16N [ClubAdministration] Message displayed when the upload of a activity media has failed. %1 will be replaced by an error code. eg: "Error while uploading the activity media. Please try again. (Error code: 500)"
				declare Text ErrorMessage = TL::Compose(_("Error while uploading the activity media. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest));
				if (ClubStruct::IsClubThemeName(G_Request_CreateOrEditBucketActivity.MediaUrl)) {
					if (G_Request_CreateOrEditBucketActivity.IsEditing) {
						//L16N [ClubAdministration] Message displayed when the edition of the activity fails. %1 will be replaced by an error code. eg: "Error while editing the activity. Please try again. (Error code: 500)"
						ErrorMessage = TL::Compose(_("Error while editing the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest));
					} else {
						//L16N [ClubAdministration] Message displayed when the creation of the activity fails. %1 will be replaced by an error code. eg: "Error while creating the activity. Please try again. (Error code: 500)"
						ErrorMessage = TL::Compose(_("Error while creating the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest));
					}
				}

				// Delete the activity if the media upload or the activity theme update has failed
				if (!G_Request_CreateOrEditBucketActivity.IsEditing) {
					Action_DeleteActivity(G_Request_CreateOrEditBucketActivity.ClubId, G_Request_CreateOrEditBucketActivity.ActivityId);
				}

				Store::SendEvent(C_StoreId, C_Event_BucketActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest = Http::Destroy(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest);
		}
	}
}

Void Private_Yield_RequestMapReviewActivity() {
	if (Http::IsInitialized(G_Request_MapReviewActivity.Request)) {
		G_Request_MapReviewActivity.Request = Http::Update(G_Request_MapReviewActivity.Request);
		if (!Http::IsRunning(G_Request_MapReviewActivity.Request)) {
			if (Http::IsSuccess(G_Request_MapReviewActivity.Request)) {
				declare ClubStruct::LibStructuresClub_K_MapReview ActivityResponse = ClubAPI::GetResponseFromPostCreateOrEditMapReviewActivity(G_Request_MapReviewActivity.Request);
				ActivityResponse.Activity.MediaUrl = G_Request_MapReviewActivity.MapReview.Activity.MediaUrl;
				G_Request_MapReviewActivity.MapReview = ActivityResponse;

				// Update theme asset or upload custom asset
				if (ClubStruct::IsClubThemeName(G_Request_MapReviewActivity.MapReview.Activity.MediaUrl) || G_Request_MapReviewActivity.MapReview.Activity.MediaUrl == "") {
					G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest = Http::DestroyAndCreate(
						G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest, 
						ClubAPI::PostUpdateActivityMediaTheme(G_Request_MapReviewActivity.MapReview.Activity.ClubId, G_Request_MapReviewActivity.MapReview.Activity.Id, G_Request_MapReviewActivity.MapReview.Activity.MediaUrl)
					);
				} else if (G_Request_MapReviewActivity.MapReview.Activity.MediaUrl != "" && !Http.IsValidUrl(G_Request_MapReviewActivity.MapReview.Activity.MediaUrl)) {
					G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest = Http::DestroyAndCreate(
						G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest, 
						ClubAPI::PostUploadMediaActivity(G_Request_MapReviewActivity.MapReview.Activity.ClubId, G_Request_MapReviewActivity.MapReview.Activity.Id, G_Request_MapReviewActivity.MapReview.Activity.MediaUrl)
					);
				} else {
					Store::SendEvent(C_StoreId, C_Event_MapReviewActivityCreatedOrEdited, []);
				}
			} else {
				declare Text ErrorMessage;
				if (G_Request_CreateOrEditBucketActivity.IsEditing) {
					//L16N [ClubAdministration] Message displayed when the edition of the activity fails. %1 will be replaced by an error code. eg: "Error while editing the activity. Please try again. (Error code: 500)"
					ErrorMessage = TL::Compose(_("Error while editing the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditBucketActivity.Request));
				} else {
					//L16N [ClubAdministration] Message displayed when the creation of the activity fails. %1 will be replaced by an error code. eg: "Error while creating the activity. Please try again. (Error code: 500)"
					ErrorMessage = TL::Compose(_("Error while creating the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditBucketActivity.Request));
				}
				Store::SendEvent(C_StoreId, C_Event_MapReviewActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_MapReviewActivity.Request = Http::Destroy(G_Request_MapReviewActivity.Request);
		}
	}
	if (Http::IsInitialized(G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest)) {
		G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest = Http::Update(G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest);
		if (!Http::IsRunning(G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest)) {
			if (Http::IsSuccess(G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest)) {
				Store::SendEvent(C_StoreId, C_Event_MapReviewActivityCreatedOrEdited, []);
			} else {
				//L16N [ClubAdministration] Message displayed when the upload of a activity media has failed. %1 will be replaced by an error code. eg: "Error while uploading the activity media. Please try again. (Error code: 500)"
				declare Text ErrorMessage = TL::Compose(_("Error while uploading the activity media. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest));
				if (ClubStruct::IsClubThemeName(G_Request_CreateOrEditBucketActivity.MediaUrl)) {
					if (G_Request_CreateOrEditBucketActivity.IsEditing) {
						//L16N [ClubAdministration] Message displayed when the edition of the activity fails. %1 will be replaced by an error code. eg: "Error while editing the activity. Please try again. (Error code: 500)"
						ErrorMessage = TL::Compose(_("Error while editing the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest));
					} else {
						//L16N [ClubAdministration] Message displayed when the creation of the activity fails. %1 will be replaced by an error code. eg: "Error while creating the activity. Please try again. (Error code: 500)"
						ErrorMessage = TL::Compose(_("Error while creating the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest));
					}
				}

				// Delete the activity if the media upload or the activity theme update has failed
				if (!G_Request_MapReviewActivity.IsEditing) {
					Action_DeleteActivity(G_Request_MapReviewActivity.MapReview.Activity.ClubId, G_Request_MapReviewActivity.MapReview.Activity.Id);
				}
				
				Store::SendEvent(C_StoreId, C_Event_MapReviewActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest = Http::Destroy(G_Request_MapReviewActivity.UploadOrUpdateMediaActivityRequest);
		}
	}
}

Void Private_RequestCreateOrEditItemCollectionActivityRequest() {
	if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.Request)) {
		G_Request_CreateOrEditItemCollectionActivity.Request = Http::Update(G_Request_CreateOrEditItemCollectionActivity.Request);
		if (!Http::IsRunning(G_Request_CreateOrEditItemCollectionActivity.Request)) {
			if (Http::IsSuccess(G_Request_CreateOrEditItemCollectionActivity.Request)) {
				declare ClubStruct::LibStructuresClub_K_Activity ActivityResponse = ClubAPI::GetResponseFromPostCreateOrEditBucket(G_Request_CreateOrEditItemCollectionActivity.Request);
				G_Request_CreateOrEditItemCollectionActivity.ActivityId = ActivityResponse.Id;

				// Upload media activity
				if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest)) {
					G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest);
				}
				if (!Http.IsValidUrl(G_Request_CreateOrEditItemCollectionActivity.MediaUrl) && G_Request_CreateOrEditItemCollectionActivity.MediaUrl != "") {
					G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest = ClubAPI::PostUploadMediaActivity(
						G_Request_CreateOrEditItemCollectionActivity.ClubId,
						G_Request_CreateOrEditItemCollectionActivity.ActivityId,
						G_Request_CreateOrEditItemCollectionActivity.MediaUrl
					);
				}

				if (G_Request_CreateOrEditItemCollectionActivity.IsEditing) {
					// Edit item collection description
					if (G_Request_CreateOrEditItemCollectionActivity.OldItemCollection.Description != G_Request_CreateOrEditItemCollectionActivity.ItemCollection.Description) {
						if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest)) {
							G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest);
						}
						G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest = ClubAPI::PostEditBucketItem(
							G_Request_CreateOrEditItemCollectionActivity.ClubId, 
							G_Request_CreateOrEditItemCollectionActivity.ActivityId, 
							G_Request_CreateOrEditItemCollectionActivity.ItemCollection.ItemId, 
							G_Request_CreateOrEditItemCollectionActivity.ItemCollection.Position, 
							G_Request_CreateOrEditItemCollectionActivity.ItemCollection.Description
						);
					}
					// Delete media of the collection
					declare Boolean DeleteMedias = False;
					if (G_Request_CreateOrEditItemCollectionActivity.OldItemCollection.MediaUrls.count > 0) {
						if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest)) {
							G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest);
						}

						declare Integer Offset = 0;
						foreach (Index => OldMediaUrl in G_Request_CreateOrEditItemCollectionActivity.OldItemCollection.MediaUrls) {
							if (!G_Request_CreateOrEditItemCollectionActivity.ItemCollection.MediaUrls.exists(OldMediaUrl)) {
								G_Request_CreateOrEditItemCollectionActivity.DeleteMediaPositions.add(Index - Offset);
								Offset += 1;
							}
						}
						
						if (G_Request_CreateOrEditItemCollectionActivity.DeleteMediaPositions.count > 0) {
							DeleteMedias = True;
							G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest = ClubAPI::PostBucketItemDeleteMedia(
								G_Request_CreateOrEditItemCollectionActivity.ClubId,
								G_Request_CreateOrEditItemCollectionActivity.ActivityId,
								G_Request_CreateOrEditItemCollectionActivity.ItemCollection.ItemId, 
								G_Request_CreateOrEditItemCollectionActivity.DeleteMediaPositions[0]
							);
							G_Request_CreateOrEditItemCollectionActivity.DeleteMediaPositions.removekey(0);
						}
					}
					// Upload new media of the collection
					if (!DeleteMedias && G_Request_CreateOrEditItemCollectionActivity.ItemCollection.MediaUrls.count > 0) {
						if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest)) {
							G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest);
						}
						foreach (Index => MediaUrl in G_Request_CreateOrEditItemCollectionActivity.ItemCollection.MediaUrls) {
							if (!Http.IsValidUrl(MediaUrl) && MediaUrl != "") {
								G_Request_CreateOrEditItemCollectionActivity.CurrentMediaIndex = Index;
								break;
							}
						}
						if (G_Request_CreateOrEditItemCollectionActivity.ItemCollection.MediaUrls.existskey(G_Request_CreateOrEditItemCollectionActivity.CurrentMediaIndex)) {
							declare Text MediaUrl = G_Request_CreateOrEditItemCollectionActivity.ItemCollection.MediaUrls[G_Request_CreateOrEditItemCollectionActivity.CurrentMediaIndex];
							if (!Http.IsValidUrl(MediaUrl) && MediaUrl != "") {
								G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest = ClubAPI::PostBucketItemAddMedia(
									G_Request_CreateOrEditItemCollectionActivity.ClubId,
									G_Request_CreateOrEditItemCollectionActivity.ActivityId,
									G_Request_CreateOrEditItemCollectionActivity.ItemCollection.ItemId, 
									MediaUrl
								);
							}
						}
					}
				} else {
					// Add item collection to the bucket
					if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest)) {
						G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest);
					}
					G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest = ClubAPI::PostAddBucketItems(
						G_Request_CreateOrEditItemCollectionActivity.ClubId,
						G_Request_CreateOrEditItemCollectionActivity.ActivityId,
						[G_Request_CreateOrEditItemCollectionActivity.ItemCollection.ItemId]
					);
				}

				if (
					!Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest) &&
					!Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest) &&
					!Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest) &&
					!Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest)
				) {
					Store::SendEvent(C_StoreId, C_Event_ItemCollectionActivityCreatedOrEdited, [""^G_Request_CreateOrEditItemCollectionActivity.ActivityId]);
				}
			} else {
				declare Text ErrorMessage;
				if (G_Request_CreateOrEditItemCollectionActivity.IsEditing) {
					ErrorMessage = TL::Compose(
						//L16N [ClubAdministration] %1 goes for the type of error
						_("Error while editing the item collection. Please try again. (Error code: %1)"),
						""^Http::GetStatusCode(G_Request_CreateOrEditItemCollectionActivity.Request)
					);
				} else {
					ErrorMessage = TL::Compose(
						//L16N [ClubAdministration] %1 goes for the type of error
						_("Error while creating the item collection. Please try again. (Error code: %1)"),
						""^Http::GetStatusCode(G_Request_CreateOrEditItemCollectionActivity.Request)
					);
				}
				G_Request_CreateOrEditItemCollectionActivity.ErrorHasOccurred = True;
				Store::SendEvent(C_StoreId, C_Event_ItemCollectionActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_CreateOrEditItemCollectionActivity.Request = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.Request);
		}
	}
}
Void Private_RequestUploadMediaActivityRequest() {
	if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest)) {
		G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest = Http::Update(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest);
		if (!Http::IsRunning(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest)) {
			if (Http::IsSuccess(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest)) {
				if (
					!G_Request_CreateOrEditItemCollectionActivity.ErrorHasOccurred &&
					!Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest) &&
					!Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest) &&
					!Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest)
				) {
					Store::SendEvent(C_StoreId, C_Event_ItemCollectionActivityCreatedOrEdited, [""^G_Request_CreateOrEditItemCollectionActivity.ActivityId]);
				}
			} else {
				if (!G_Request_CreateOrEditItemCollectionActivity.IsEditing) {
					Action_DeleteActivity(G_Request_CreateOrEditItemCollectionActivity.ClubId, G_Request_CreateOrEditItemCollectionActivity.ActivityId);
				}
				declare Text ErrorMessage = TL::Compose(
					//L16N [ClubAdministration] %1 goes for the type of error
					_("Error while uploading the activity logo. Please try again. (Error code: %1)"),
					""^Http::GetStatusCode(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest)
				);
				G_Request_CreateOrEditItemCollectionActivity.ErrorHasOccurred = True;
				Store::SendEvent(C_StoreId, C_Event_ItemCollectionActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest);
		}
	}
}
Void Private_RequestPostAddBucketItemRequest() {
	if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest)) {
		G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest = Http::Update(G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest);
		if (!Http::IsRunning(G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest)) {
			if (Http::IsSuccess(G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest)) {
				declare Boolean HasDescription = False;
				declare Boolean HasMedias = False;
				// Edit item collection description
				if (G_Request_CreateOrEditItemCollectionActivity.ItemCollection.Description != "") {
					HasDescription = True;
					if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest)) {
						G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest);
					}
					G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest = ClubAPI::PostEditBucketItem(
						G_Request_CreateOrEditItemCollectionActivity.ClubId, 
						G_Request_CreateOrEditItemCollectionActivity.ActivityId, 
						G_Request_CreateOrEditItemCollectionActivity.ItemCollection.ItemId, 
						G_Request_CreateOrEditItemCollectionActivity.ItemCollection.Position, 
						G_Request_CreateOrEditItemCollectionActivity.ItemCollection.Description
					);			
				}
				// Upload media of the collection
				if (G_Request_CreateOrEditItemCollectionActivity.ItemCollection.MediaUrls.count > 0) {
					HasMedias = True;			
					if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest)) {
						G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest);
					}
					foreach (Index => MediaUrl in G_Request_CreateOrEditItemCollectionActivity.ItemCollection.MediaUrls) {
						if (!Http.IsValidUrl(MediaUrl) && MediaUrl != "") {
							G_Request_CreateOrEditItemCollectionActivity.CurrentMediaIndex = Index;
							break;
						}
					}
					if (G_Request_CreateOrEditItemCollectionActivity.ItemCollection.MediaUrls.existskey(G_Request_CreateOrEditItemCollectionActivity.CurrentMediaIndex)) {
						declare Text MediaUrl = G_Request_CreateOrEditItemCollectionActivity.ItemCollection.MediaUrls[G_Request_CreateOrEditItemCollectionActivity.CurrentMediaIndex];
						if (!Http.IsValidUrl(MediaUrl) && MediaUrl != "") {
							G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest = ClubAPI::PostBucketItemAddMedia(
								G_Request_CreateOrEditItemCollectionActivity.ClubId,
								G_Request_CreateOrEditItemCollectionActivity.ActivityId,
								G_Request_CreateOrEditItemCollectionActivity.ItemCollection.ItemId, 
								MediaUrl
							);
						}
					}
				}
				if (
					!G_Request_CreateOrEditItemCollectionActivity.ErrorHasOccurred &&
					!HasDescription && 
					!HasMedias &&
					!Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest)
				)	{
						Store::SendEvent(C_StoreId, C_Event_ItemCollectionActivityCreatedOrEdited, [""^G_Request_CreateOrEditItemCollectionActivity.ActivityId]);
				}
			} else {
				if (!G_Request_CreateOrEditItemCollectionActivity.IsEditing) {
					Action_DeleteActivity(G_Request_CreateOrEditItemCollectionActivity.ClubId, G_Request_CreateOrEditItemCollectionActivity.ActivityId);
				}
				declare Text ErrorMessage = TL::Compose(
					//L16N [ClubAdministration] %1 goes for the type of error
					_("Error while adding the item collection. Please try again. (Error code: %1)"),
					""^Http::GetStatusCode(G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest)
				);
				G_Request_CreateOrEditItemCollectionActivity.ErrorHasOccurred = True;
				Store::SendEvent(C_StoreId, C_Event_ItemCollectionActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.PostAddBucketItemRequest);
		}
	}
}
Void Private_RequestEditBucketItemRequest() {
	if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest)) {
		G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest = Http::Update(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest);
		if (!Http::IsRunning(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest)) {
			if (Http::IsSuccess(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest)) {
				if (
					!G_Request_CreateOrEditItemCollectionActivity.ErrorHasOccurred &&
					!Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest) &&
					!Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest)
				) {
					Store::SendEvent(C_StoreId, C_Event_ItemCollectionActivityCreatedOrEdited, [""^G_Request_CreateOrEditItemCollectionActivity.ActivityId]);
				}
			} else {
				if (!G_Request_CreateOrEditItemCollectionActivity.IsEditing) {
					Action_DeleteActivity(G_Request_CreateOrEditItemCollectionActivity.ClubId, G_Request_CreateOrEditItemCollectionActivity.ActivityId);
				}
				declare Text ErrorMessage = TL::Compose(
					//L16N [ClubAdministration] %1 goes for the type of error
					_("Error while editing the item collection description. Please try again. (Error code: %1)"),
					""^Http::GetStatusCode(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest)
				);
				G_Request_CreateOrEditItemCollectionActivity.ErrorHasOccurred = True;
				Store::SendEvent(C_StoreId, C_Event_ItemCollectionActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest);
		}
	}
}
Void Private_RequestUpdateCollectionMediaRequest() {
	if (Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest)) {
		G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest = Http::Update(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest);
		if (!Http::IsRunning(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest)) {
			if (Http::IsSuccess(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest)) {
				declare Boolean DeleteMedias = False;
				declare Boolean UploadMedias = False;
				// Delete old media if needed
				if (G_Request_CreateOrEditItemCollectionActivity.DeleteMediaPositions.count > 0) {
					DeleteMedias = True;
					G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest = ClubAPI::PostBucketItemDeleteMedia(
						G_Request_CreateOrEditItemCollectionActivity.ClubId,
						G_Request_CreateOrEditItemCollectionActivity.ActivityId,
						G_Request_CreateOrEditItemCollectionActivity.ItemCollection.ItemId, 
						G_Request_CreateOrEditItemCollectionActivity.DeleteMediaPositions[0]
					);
					G_Request_CreateOrEditItemCollectionActivity.DeleteMediaPositions.removekey(0);
				}
				// Launch new media upload request if needed 		
				if (!DeleteMedias) {
					if (G_Request_CreateOrEditItemCollectionActivity.CurrentMediaIndex == -1) {
						foreach (Index => MediaUrl in G_Request_CreateOrEditItemCollectionActivity.ItemCollection.MediaUrls) {
							if (!Http.IsValidUrl(MediaUrl) && MediaUrl != "") {
								G_Request_CreateOrEditItemCollectionActivity.CurrentMediaIndex = Index-1;
								break;
							}
						}
					}
					if (G_Request_CreateOrEditItemCollectionActivity.ItemCollection.MediaUrls.existskey(G_Request_CreateOrEditItemCollectionActivity.CurrentMediaIndex + 1)) {
						G_Request_CreateOrEditItemCollectionActivity.CurrentMediaIndex += 1;
						declare Text MediaUrl = G_Request_CreateOrEditItemCollectionActivity.ItemCollection.MediaUrls[G_Request_CreateOrEditItemCollectionActivity.CurrentMediaIndex];
						if (!Http.IsValidUrl(MediaUrl) && MediaUrl != "") {
							UploadMedias = True;
							G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest = ClubAPI::PostBucketItemAddMedia(
								G_Request_CreateOrEditItemCollectionActivity.ClubId,
								G_Request_CreateOrEditItemCollectionActivity.ActivityId,
								G_Request_CreateOrEditItemCollectionActivity.ItemCollection.ItemId, 
								MediaUrl
							);
						}
					}
				}
				if (
					!G_Request_CreateOrEditItemCollectionActivity.ErrorHasOccurred &&
					!DeleteMedias && 
					!UploadMedias &&
					!Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.UploadMediaActivityRequest) &&
					!Http::IsInitialized(G_Request_CreateOrEditItemCollectionActivity.EditBucketItemRequest)
				) {
					Store::SendEvent(C_StoreId, C_Event_ItemCollectionActivityCreatedOrEdited, [""^G_Request_CreateOrEditItemCollectionActivity.ActivityId]);
					G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest);
				}
			} else {
				if (!G_Request_CreateOrEditItemCollectionActivity.IsEditing) {
					Action_DeleteActivity(G_Request_CreateOrEditItemCollectionActivity.ClubId, G_Request_CreateOrEditItemCollectionActivity.ActivityId);
				}
				declare Text ErrorMessage = TL::Compose(
					//L16N [ClubAdministration] %1 goes for the type of error
					_("Error while uploading the collection media. Please try again. (Error code: %1)"),
					""^Http::GetStatusCode(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest)
				);
				G_Request_CreateOrEditItemCollectionActivity.ErrorHasOccurred = True;
				Store::SendEvent(C_StoreId, C_Event_ItemCollectionActivityCreationOrEditionFailed, [ErrorMessage]);
				G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest = Http::Destroy(G_Request_CreateOrEditItemCollectionActivity.UpdateCollectionMediaRequest);
			}
		}
	}
}
Void Private_Yield_RequestCreateOrEditItemCollectionActivity() {
	Private_RequestCreateOrEditItemCollectionActivityRequest();
	Private_RequestUploadMediaActivityRequest();
	Private_RequestPostAddBucketItemRequest();
	Private_RequestEditBucketItemRequest();
	Private_RequestUpdateCollectionMediaRequest();
}

Void Private_Yield_RequestCreateOrEditNewsActivityRequest() {
	if (Http::IsInitialized(G_Request_CreateOrEditNewsActivityRequest.Request)) {
		G_Request_CreateOrEditNewsActivityRequest.Request = Http::Update(G_Request_CreateOrEditNewsActivityRequest.Request);
		if (!Http::IsRunning(G_Request_CreateOrEditNewsActivityRequest.Request)) {
			if (Http::IsSuccess(G_Request_CreateOrEditNewsActivityRequest.Request)) {
				declare ClubStruct::LibStructuresClub_K_News NewsResponse = ClubAPI::GetResponseFromPostCreateOrEditNews(G_Request_CreateOrEditNewsActivityRequest.Request);
				declare Boolean DeleteNewsMedia = NewsResponse.MediaUrl == "" && G_Request_CreateOrEditNewsActivityRequest.News.MediaUrl == "";
				NewsResponse.MediaUrl = G_Request_CreateOrEditNewsActivityRequest.News.MediaUrl;
				G_Request_CreateOrEditNewsActivityRequest.News = NewsResponse;

				// Upload or delete news media
				if (Http::IsInitialized(G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest)) {
					G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest = Http::Destroy(G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest);
				}
				if (!Http.IsValidUrl(G_Request_CreateOrEditNewsActivityRequest.News.MediaUrl) && G_Request_CreateOrEditNewsActivityRequest.News.MediaUrl != "") {
					G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest = ClubAPI::PostUploadNewsMedia(
						G_Request_CreateOrEditNewsActivityRequest.News.ClubId,
						G_Request_CreateOrEditNewsActivityRequest.News.Id,
						G_Request_CreateOrEditNewsActivityRequest.News.MediaUrl
					);
				} else if (DeleteNewsMedia) {
					G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest = ClubAPI::PostDeleteNewsMedia(
						G_Request_CreateOrEditNewsActivityRequest.News.ClubId,
						G_Request_CreateOrEditNewsActivityRequest.News.Id
					);
				}

				// Update theme asset or upload custom asset
				if (ClubStruct::IsClubThemeName(G_Request_CreateOrEditNewsActivityRequest.ActivityMediaUrl) || G_Request_CreateOrEditNewsActivityRequest.ActivityMediaUrl == "") {
					G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest = Http::DestroyAndCreate(
						G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest, 
						ClubAPI::PostUpdateActivityMediaTheme(G_Request_CreateOrEditNewsActivityRequest.News.ClubId, G_Request_CreateOrEditNewsActivityRequest.News.Id, G_Request_CreateOrEditNewsActivityRequest.ActivityMediaUrl)
					);
				} else if (G_Request_CreateOrEditNewsActivityRequest.ActivityMediaUrl != "" && !Http.IsValidUrl(G_Request_CreateOrEditNewsActivityRequest.ActivityMediaUrl)) {
					G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest = Http::DestroyAndCreate(
						G_Request_CreateOrEditBucketActivity.UploadOrUpdateMediaActivityRequest, 
						ClubAPI::PostUploadMediaActivity(G_Request_CreateOrEditNewsActivityRequest.News.ClubId, G_Request_CreateOrEditNewsActivityRequest.News.Id, G_Request_CreateOrEditNewsActivityRequest.ActivityMediaUrl)
					);
				}

				if (
					!Http::IsInitialized(G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest) &&
					!Http::IsInitialized(G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest)
				) {
					Store::SendEvent(C_StoreId, C_Event_NewsActivityCreatedOrEdited, []);
				}
			} else {
				declare Text ErrorMessage;
				if (G_Request_CreateOrEditNewsActivityRequest.IsEditing) {
					//L16N [ClubAdministration] Message displayed when the edition of the activity fails. %1 will be replaced by an error code. eg: "Error while editing the activity. Please try again. (Error code: 500)"
					ErrorMessage = TL::Compose(_("Error while editing the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditNewsActivityRequest.Request));
				} else {
					//L16N [ClubAdministration] Message displayed when the creation of the activity fails. %1 will be replaced by an error code. eg: "Error while creating the activity. Please try again. (Error code: 500)"
					ErrorMessage = TL::Compose(_("Error while creating the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditNewsActivityRequest.Request));
				}
				Store::SendEvent(C_StoreId, C_Event_NewsActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_CreateOrEditNewsActivityRequest.Request = Http::Destroy(G_Request_CreateOrEditNewsActivityRequest.Request);
		}
	}
	if (Http::IsInitialized(G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest)) {
		G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest = Http::Update(G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest);
		if (!Http::IsRunning(G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest)) {
			if (Http::IsSuccess(G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest)) {
				if (!Http::IsInitialized(G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest)) {
					Store::SendEvent(C_StoreId, C_Event_NewsActivityCreatedOrEdited, []);
				}
			} else {
				//L16N [ClubAdministration] Message displayed when the upload of a activity media has failed. %1 will be replaced by an error code. eg: "Error while uploading the activity media. Please try again. (Error code: 500)"
				declare Text ErrorMessage = TL::Compose(_("Error while uploading the activity media. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest));
				if (ClubStruct::IsClubThemeName(G_Request_CreateOrEditNewsActivityRequest.ActivityMediaUrl)) {
					if (G_Request_CreateOrEditNewsActivityRequest.IsEditing) {
						//L16N [ClubAdministration] Message displayed when the edition of the activity fails. %1 will be replaced by an error code. eg: "Error while editing the activity. Please try again. (Error code: 500)"
						ErrorMessage = TL::Compose(_("Error while editing the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest));
					} else {
						//L16N [ClubAdministration] Message displayed when the creation of the activity fails. %1 will be replaced by an error code. eg: "Error while creating the activity. Please try again. (Error code: 500)"
						ErrorMessage = TL::Compose(_("Error while creating the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest));
					}
				}

				// Delete the activity if the media upload or the activity theme update has failed
				if (!G_Request_CreateOrEditNewsActivityRequest.IsEditing) {
					Action_DeleteActivity(G_Request_CreateOrEditNewsActivityRequest.News.ClubId, G_Request_CreateOrEditNewsActivityRequest.News.Id);
				}

				Store::SendEvent(C_StoreId, C_Event_NewsActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest = Http::Destroy(G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest);
		}
	}
	if (Http::IsInitialized(G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest)) {
		G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest = Http::Update(G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest);
		if (!Http::IsRunning(G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest)) {
			if (Http::IsSuccess(G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest)) {
				if (!Http::IsInitialized(G_Request_CreateOrEditNewsActivityRequest.UploadOrUpdateMediaActivityRequest)) {
					Store::SendEvent(C_StoreId, C_Event_NewsActivityCreatedOrEdited, []);
				}
			} else {
				if (!G_Request_CreateOrEditNewsActivityRequest.IsEditing) {
					Action_DeleteActivity(G_Request_CreateOrEditNewsActivityRequest.News.ClubId, G_Request_CreateOrEditNewsActivityRequest.News.Id);
				}
				declare Text ErrorMessage = TL::Compose(
					//L16N [ClubAdministration] %1 goes for the type of error
					_("Error while updating the news media logo. Please try again. (Error code: %1)"),
					""^Http::GetStatusCode(G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest)
				);
				Store::SendEvent(C_StoreId, C_Event_NewsActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest = Http::Destroy(G_Request_CreateOrEditNewsActivityRequest.UploadNewsMediaRequest);
		}
	}
}

Void Private_Yield_RequestCreateOrEditRankingsActivityRequest() {
	if (Http::IsInitialized(G_Request_CreateOrEditRankingsActivityRequest.Request)) {
		G_Request_CreateOrEditRankingsActivityRequest.Request = Http::Update(G_Request_CreateOrEditRankingsActivityRequest.Request);
		if (!Http::IsRunning(G_Request_CreateOrEditRankingsActivityRequest.Request)) {
			if (Http::IsSuccess(G_Request_CreateOrEditRankingsActivityRequest.Request)) {
				if (!G_Request_CreateOrEditRankingsActivityRequest.IsEditing) {
					declare ClubStruct::LibStructuresClub_K_Activity ActivityResponse = ClubAPI::GetResponseFromPostCreateRanking(G_Request_CreateOrEditRankingsActivityRequest.Request);
					ActivityResponse.MediaUrl = G_Request_CreateOrEditRankingsActivityRequest.Activity.MediaUrl;
					G_Request_CreateOrEditRankingsActivityRequest.Activity = ActivityResponse;
				}

				// Update theme asset or upload custom asset
				if (ClubStruct::IsClubThemeName(G_Request_CreateOrEditRankingsActivityRequest.Activity.MediaUrl) || G_Request_CreateOrEditRankingsActivityRequest.Activity.MediaUrl == "") {
					G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest = Http::DestroyAndCreate(
						G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest, 
						ClubAPI::PostUpdateActivityMediaTheme(G_Request_CreateOrEditRankingsActivityRequest.Activity.ClubId, G_Request_CreateOrEditRankingsActivityRequest.Activity.Id, G_Request_CreateOrEditRankingsActivityRequest.Activity.MediaUrl)
					);
				} else if (G_Request_CreateOrEditRankingsActivityRequest.Activity.MediaUrl != "" && !Http.IsValidUrl(G_Request_CreateOrEditRankingsActivityRequest.Activity.MediaUrl)) {
					G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest = Http::DestroyAndCreate(
						G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest, 
						ClubAPI::PostUploadMediaActivity(G_Request_CreateOrEditRankingsActivityRequest.Activity.ClubId, G_Request_CreateOrEditRankingsActivityRequest.Activity.Id, G_Request_CreateOrEditRankingsActivityRequest.Activity.MediaUrl)
					);
				} else {
					Store::SendEvent(C_StoreId, C_Event_RankingsActivityCreatedOrEdited, []);
				}
			} else {
				declare Text ErrorMessage;
				if (G_Request_CreateOrEditRankingsActivityRequest.IsEditing) {
					//L16N [ClubAdministration] Message displayed when the edition of the activity fails. %1 will be replaced by an error code. eg: "Error while editing the activity. Please try again. (Error code: 500)"
					ErrorMessage = TL::Compose(_("Error while editing the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditRankingsActivityRequest.Request));
				} else {
					//L16N [ClubAdministration] Message displayed when the creation of the activity fails. %1 will be replaced by an error code. eg: "Error while creating the activity. Please try again. (Error code: 500)"
					ErrorMessage = TL::Compose(_("Error while creating the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditRankingsActivityRequest.Request));
				}
				Store::SendEvent(C_StoreId, C_Event_RankingsActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_CreateOrEditRankingsActivityRequest.Request = Http::Destroy(G_Request_CreateOrEditRankingsActivityRequest.Request);
		}
	}
	if (Http::IsInitialized(G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest)) {
		G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest = Http::Update(G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest);
		if (!Http::IsRunning(G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest)) {
			if (Http::IsSuccess(G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest)) {
				Store::SendEvent(C_StoreId, C_Event_RankingsActivityCreatedOrEdited, []);
			} else {
				//L16N [ClubAdministration] Message displayed when the upload of a activity media has failed. %1 will be replaced by an error code. eg: "Error while uploading the activity media. Please try again. (Error code: 500)"
				declare Text ErrorMessage = TL::Compose(_("Error while uploading the activity media. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest));
				if (ClubStruct::IsClubThemeName(G_Request_CreateOrEditRankingsActivityRequest.Activity.MediaUrl)) {
					if (G_Request_CreateOrEditRankingsActivityRequest.IsEditing) {
						//L16N [ClubAdministration] Message displayed when the edition of the activity fails. %1 will be replaced by an error code. eg: "Error while editing the activity. Please try again. (Error code: 500)"
						ErrorMessage = TL::Compose(_("Error while editing the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest));
					} else {
						//L16N [ClubAdministration] Message displayed when the creation of the activity fails. %1 will be replaced by an error code. eg: "Error while creating the activity. Please try again. (Error code: 500)"
						ErrorMessage = TL::Compose(_("Error while creating the activity. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest));
					}
				}

				// Delete the activity if the media upload or the activity theme update has failed
				if (!G_Request_CreateOrEditRankingsActivityRequest.IsEditing) {
					Action_DeleteActivity(G_Request_CreateOrEditRankingsActivityRequest.Activity.ClubId, G_Request_CreateOrEditRankingsActivityRequest.Activity.Id);
				}
				
				Store::SendEvent(C_StoreId, C_Event_RankingsActivityCreationOrEditionFailed, [ErrorMessage]);
			}
			G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest = Http::Destroy(G_Request_CreateOrEditRankingsActivityRequest.UploadOrUpdateMediaActivityRequest);
		}
	}
}

Void Private_Yield_RequestSkinUploadsPaging() {
	if (Http::IsInitialized(G_Request_SkinUploadsPaging)) {
		declare Http::K_Request Request = Http::Update(G_Request_SkinUploadsPaging);
		if (!Http::IsRunning(Request)) {
			if (Http::IsSuccess(Request)) {
				declare ClubAPI::K_ResponseFromGetBucketActivities Response = ClubAPI::GetResponseFromGetAllBucketActivites(Request);
				
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_SetSkinUploads(
					TMNext_ClubStore_State,
					TMNext_ClubStore_State.SkinUploadsPager.Offset,
					Response.BucketActivitiesTotal,
					Response.BucketActivities
				);
			} else {
				Store::SendEvent(C_StoreId, C_Event_SkinUploadsPagingFailed, []);
			}
			Request = Http::Destroy(Request);
		}
		G_Request_SkinUploadsPaging = Request;
	}
}

Void Private_Yield_RequestItemUploadsPaging() {
	if (Http::IsInitialized(G_Request_ItemUploadsPaging)) {
		declare Http::K_Request Request = Http::Update(G_Request_ItemUploadsPaging);
		if (!Http::IsRunning(Request)) {
			if (Http::IsSuccess(Request)) {
				declare ClubAPI::K_ResponseFromGetBucketActivities Response = ClubAPI::GetResponseFromGetAllBucketActivites(Request);
				
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				TMNext_ClubStore_State = Mutation_SetItemUploads(
					TMNext_ClubStore_State,
					TMNext_ClubStore_State.ItemUploadsPager.Offset,
					Response.BucketActivitiesTotal,
					Response.BucketActivities
				);
			} else {
				Store::SendEvent(C_StoreId, C_Event_ItemUploadsPagingFailed, []);
			}
			Request = Http::Destroy(Request);
		}
		G_Request_ItemUploadsPaging = Request;
	}
}

Void Private_Yield_RequestSetUnsetFeaturedClub() {
	if (Http::IsInitialized(G_Request_SetUnsetFeaturedClub)) {
		G_Request_SetUnsetFeaturedClub = Http::Update(G_Request_SetUnsetFeaturedClub);
		if (!Http::IsRunning(G_Request_SetUnsetFeaturedClub)) {
			if (Http::IsSuccess(G_Request_SetUnsetFeaturedClub)) {
				Store::SendEvent(C_StoreId, C_Event_SetUnsetFeaturedClubSucceeded, []);
			} else {
				Store::SendEvent(C_StoreId, C_Event_SetUnsetFeaturedClubFailed, []);
			}
			G_Request_SetUnsetFeaturedClub = Http::Destroy(G_Request_SetUnsetFeaturedClub);
		}
	}
}

Void Private_Yield_RequestGetMapReviewActivities() {
	if (Http::IsInitialized(G_Request_GetMapReviewActivities)) {
		G_Request_GetMapReviewActivities = Http::Update(G_Request_GetMapReviewActivities);
		if (!Http::IsRunning(G_Request_GetMapReviewActivities)) {
			if (Http::IsSuccess(G_Request_GetMapReviewActivities)) {
				declare K_State TMNext_ClubStore_State for System = C_State_Null;
				declare ClubAPI::K_ResponseGetMapReviews Response = ClubAPI::GetResponseFromGetMapReviewActivities(G_Request_GetMapReviewActivities);

				TMNext_ClubStore_State = Mutation_SetMapReviewsPager(
					TMNext_ClubStore_State,
					TMNext_ClubStore_State.MapReviewsPager.Offset,
					Response.ClubMapReviewsTotal,
					Response.ClubMapReviews
				);
			}
			G_Request_GetMapReviewActivities = Http::Destroy(G_Request_GetMapReviewActivities);
		}
	}
}

Void Private_Yield_RequestLoadPinAndTagClub() {
	if (G_Request_LoadPinAndTagClub.IsLoading) {
		if (Http::IsInitialized(G_Request_LoadPinAndTagClub.Request_GetMyClubInfo)) {
			G_Request_LoadPinAndTagClub.Request_GetMyClubInfo = Http::Update(G_Request_LoadPinAndTagClub.Request_GetMyClubInfo);
			if (!Http::IsRunning(G_Request_LoadPinAndTagClub.Request_GetMyClubInfo)) {
				if (Http::IsSuccess(G_Request_LoadPinAndTagClub.Request_GetMyClubInfo)) {
					declare ClubAPI::K_ResponseFromGetMyClubInfo Response = ClubAPI::GetResponseFromGetMyClubInfo(G_Request_LoadPinAndTagClub.Request_GetMyClubInfo);
					if (Response.PinnedClubId != ClubStruct::C_ClubNullId && LocalUser != Null) {
						G_Request_LoadPinAndTagClub.Request_GetPinnedClub = Http::DestroyAndCreate(
							G_Request_LoadPinAndTagClub.Request_GetPinnedClub,
							ClubAPI::GetClub(Response.PinnedClubId)
						);
						G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId = Http::DestroyAndCreate(
							G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId,
							ClubAPI::GetClubMemberWithId(Response.PinnedClubId, LocalUser.WebServicesUserId)
						);
					}
					G_Request_LoadPinAndTagClub.TaggedClubId = Response.TagClubId;
					G_Request_LoadPinAndTagClub.TaggedClubTag = Response.TagClubTag;

					// If the club tag changed since the last time the player was connected, update it
					if (G_Request_LoadPinAndTagClub.CurrentClubTag != G_Request_LoadPinAndTagClub.TaggedClubTag) {
						G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag = Task::DestroyAndCreate(
							G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag,
							UserMgr, UserMgr.Tag_SetClubTag(MainUser::GetMainUserId(), G_Request_LoadPinAndTagClub.TaggedClubTag)
						);
					}
				}
				G_Request_LoadPinAndTagClub.Request_GetMyClubInfo = Http::Destroy(G_Request_LoadPinAndTagClub.Request_GetMyClubInfo);
				G_Request_LoadPinAndTagClub = Private_UpdateIsLoadingPinAndTagClub(G_Request_LoadPinAndTagClub);
			}
		}
		if (Http::IsInitialized(G_Request_LoadPinAndTagClub.Request_GetPinnedClub)) {
			G_Request_LoadPinAndTagClub.Request_GetPinnedClub = Http::Update(G_Request_LoadPinAndTagClub.Request_GetPinnedClub);
			if (!Http::IsRunning(G_Request_LoadPinAndTagClub.Request_GetPinnedClub)) {
				if (Http::IsSuccess(G_Request_LoadPinAndTagClub.Request_GetPinnedClub)) {
					G_Request_LoadPinAndTagClub.PinnedClub.Club = ClubAPI::GetResponseFromGetClub(G_Request_LoadPinAndTagClub.Request_GetPinnedClub);
				}
				G_Request_LoadPinAndTagClub.Request_GetPinnedClub = Http::Destroy(G_Request_LoadPinAndTagClub.Request_GetPinnedClub);
				G_Request_LoadPinAndTagClub = Private_UpdateIsLoadingPinAndTagClub(G_Request_LoadPinAndTagClub);
			}
		}
		if (Http::IsInitialized(G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId)) {
			G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId = Http::Update(G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId);
			if (!Http::IsRunning(G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId)) {
				if (Http::IsSuccess(G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId)) {
					G_Request_LoadPinAndTagClub.PinnedClub.Membership = ClubAPI::GetResponseFromGetClubMemberWithId(G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId);
				}
				G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId = Http::Destroy(G_Request_LoadPinAndTagClub.Request_GetPinnedClubMemberWithId);
				G_Request_LoadPinAndTagClub = Private_UpdateIsLoadingPinAndTagClub(G_Request_LoadPinAndTagClub);
			}
		}
		if (Task::IsInitialized(G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag)) {
			G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag = Task::Update(G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag);
			if (!Task::IsRunning(G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag)) {
				G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag = Task::Destroy(G_Request_LoadPinAndTagClub.Task_SetPlayerClubTag);
				G_Request_LoadPinAndTagClub = Private_UpdateIsLoadingPinAndTagClub(G_Request_LoadPinAndTagClub);
			}
		}
		// Loading complete
		if (!G_Request_LoadPinAndTagClub.IsLoading) {
			declare K_State TMNext_ClubStore_State for System = C_State_Null;
			TMNext_ClubStore_State = Mutation_SetUserPinnedClub(TMNext_ClubStore_State, G_Request_LoadPinAndTagClub.PinnedClub.Club, G_Request_LoadPinAndTagClub.PinnedClub.Membership);
			TMNext_ClubStore_State = Mutation_SetUserClubTag(TMNext_ClubStore_State, G_Request_LoadPinAndTagClub.TaggedClubId, G_Request_LoadPinAndTagClub.TaggedClubTag);
			Store::SendEvent(C_StoreId, C_Event_LoadPinAndTagClubUpdate, [""^G_Request_LoadPinAndTagClub.IsLoading]);
		}
	}
}

Void Private_Yield_RequestPinOrUnpinClub() {
	if (Http::IsInitialized(G_Request_PinOrUnpinClub.Request)) {
		G_Request_PinOrUnpinClub.Request = Http::Update(G_Request_PinOrUnpinClub.Request);
		if (!Http::IsRunning(G_Request_PinOrUnpinClub.Request)) {
			declare K_State TMNext_ClubStore_State for System = C_State_Null;
			if (Http::IsSuccess(G_Request_PinOrUnpinClub.Request)) {
				declare ClubAPI::K_ResponseFromPostPinOrUnpinClub Response = ClubAPI::GetResponseFromPostPinOrUnpinClub(G_Request_PinOrUnpinClub.Request);
				if (Response.PinnedClubId == G_Request_PinOrUnpinClub.Club.Id) {
					TMNext_ClubStore_State = Mutation_SetUserPinnedClub(TMNext_ClubStore_State, G_Request_PinOrUnpinClub.Club, G_Request_PinOrUnpinClub.Membership);
					TMNext_ClubStore_State = Mutation_UpdatePinnedClubStatus(TMNext_ClubStore_State, C_PinnedClubStatus_OK);
				} else {
					Store::SendEvent(C_StoreId, C_Event_PinnedClubError);
					TMNext_ClubStore_State = Mutation_UpdatePinnedClubStatus(TMNext_ClubStore_State, C_PinnedClubStatus_Error);
				}
			} else {
				Store::SendEvent(C_StoreId, C_Event_PinnedClubError);
				TMNext_ClubStore_State = Mutation_UpdatePinnedClubStatus(TMNext_ClubStore_State, C_PinnedClubStatus_Error);
			}
			G_Request_PinOrUnpinClub.Request = Http::Destroy(G_Request_PinOrUnpinClub.Request);
			G_Request_PinOrUnpinClub.Club = ClubStruct::GetEmptyClub();
			G_Request_PinOrUnpinClub.Membership = ClubStruct::GetEmptyMember();
		}
	}
}

Void Private_Yield_RequestApplyOrRemoveClubTag() {
	if (G_Request_ApplyOrRemoveClubTag.IsUpdating) {
		if (Http::IsInitialized(G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag)) {
			G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag = Http::Update(G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag);
			if (!Http::IsRunning(G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag)) {
				if (Http::IsSuccess(G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag)) {
					declare ClubAPI::K_ResponseFromPostApplyOrRemoveClubTag Response = ClubAPI::GetResponseFromPostApplyOrRemoveClubTag(G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag);
					G_Request_ApplyOrRemoveClubTag.IsSuccess = (G_Request_ApplyOrRemoveClubTag.Club.Id == Response.TagClubId);
				}
				G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag = Http::Destroy(G_Request_ApplyOrRemoveClubTag.Request_ApplyOrRemoveClubTag);
				G_Request_ApplyOrRemoveClubTag = Private_UpdateIsUpdatingClubTag(G_Request_ApplyOrRemoveClubTag);
			}
		}
		if (Task::IsInitialized(G_Request_ApplyOrRemoveClubTag.Task_SetPlayerClubTag)) {
			G_Request_ApplyOrRemoveClubTag.Task_SetPlayerClubTag = Task::Update(G_Request_ApplyOrRemoveClubTag.Task_SetPlayerClubTag);
			if (!Task::IsRunning(G_Request_ApplyOrRemoveClubTag.Task_SetPlayerClubTag)) {
				G_Request_ApplyOrRemoveClubTag.Task_SetPlayerClubTag = Task::Destroy(G_Request_ApplyOrRemoveClubTag.Task_SetPlayerClubTag);
				G_Request_ApplyOrRemoveClubTag = Private_UpdateIsUpdatingClubTag(G_Request_ApplyOrRemoveClubTag);
			}
		}

		// Club tag update complete
		if (!G_Request_ApplyOrRemoveClubTag.IsUpdating) {
			declare K_State TMNext_ClubStore_State for System = C_State_Null;
			if (G_Request_ApplyOrRemoveClubTag.IsSuccess) {
				TMNext_ClubStore_State = Mutation_SetUserClubTag(TMNext_ClubStore_State, G_Request_ApplyOrRemoveClubTag.Club.Id, G_Request_ApplyOrRemoveClubTag.Club.Tag);
			}
			
			if (G_Request_ApplyOrRemoveClubTag.IsSuccess) {
				TMNext_ClubStore_State = Mutation_UpdateClubTagStatus(TMNext_ClubStore_State, C_ClubTagStatus_OK);
			} else {
				TMNext_ClubStore_State = Mutation_UpdateClubTagStatus(TMNext_ClubStore_State, C_ClubTagStatus_Error);
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the Club store
Void Yield() {
	Private_Yield_RequestClubsPaging();
	Private_Yield_RequestBrowserClubsPaging();
	Private_Yield_RequestCreatedClubUpdate();
	Private_Yield_RequestUserClubs();
	Private_Yield_RequestUserCurrentClubMembership();
	Private_Yield_RequestClubMembersPaging();
	Private_Yield_RequestClubMemberRequestsPaging();
	Private_Yield_RequestGetClubMemberFromLogin();
	Private_Yield_RequestCreateClub();
	Private_Yield_RequestDeleteClubMember();
	Private_Yield_RequestEditClubMember();
	Private_Yield_RequestCreateClubMember();
	Private_Yield_RequestAllClubRoomsPaging();
	Private_Yield_RequestClubRoomsPagingList();
	Private_Yield_RequestClubActivitiesPagingList();
	Private_Yield_RequestInactiveClubActivitiesPagingList();
	Private_Yield_RequestClubsFeaturedActivity();
	Private_Yield_RequestMoveActivity();
	Private_Yield_RequestDeleteActivity();
	Private_Yield_RequestActivateActivityList();
	Private_Yield_RequestActivityUpdatePrivacyList();
	Private_Yield_RequestUpdateFeaturedActivityList();
	Private_Yield_RequestCreateOrEditCampaignRequestList();
	Private_Yield_RequestCreateOrEditClubRoom();
	Private_Yield_RequestEditClub();
	Private_Yield_RequestDeleteClub();
	Private_Yield_RequestUpdateClubVIP();
	Private_Yield_RequestGetVIPListOnMap();
	Private_Yield_RequestCreateOrEditBucketActivity();
	Private_Yield_RequestMapReviewActivity();
	Private_Yield_RequestCreateOrEditItemCollectionActivity();
	Private_Yield_RequestCreateOrEditNewsActivityRequest();
	Private_Yield_RequestCreateOrEditRankingsActivityRequest();
	Private_Yield_RequestSkinUploadsPaging();
	Private_Yield_RequestItemUploadsPaging();
	Private_Yield_RequestSetUnsetFeaturedClub();
	Private_Yield_RequestGetMapReviewActivities();
	Private_Yield_RequestLoadPinAndTagClub();
	Private_Yield_RequestPinOrUnpinClub();
	Private_Yield_RequestApplyOrRemoveClubTag();

	ProcessEvents(This);
}