/**
 *	Store for Ubiservices News
 */
#Const Version		"2022-11-04"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Stores/NewsStore_ML.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/CommonLibs/Common/Store_ML.Script.txt" as Store
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/NewsStruct.Script.txt" as NewsStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_State {
	NewsStruct::LibNewsStruct_K_News[] News;
	Integer NewsLoadingState;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_State_Null K_State {
	News = [],
	NewsLoadingState = 0
}

#Const C_ComponentName "lib-store-news"
#Const P "TMNext_NewsStore::"
#Const Q "TMNext_NewsStore"
#Const C_StoreId "news"

#Const C_Action_LoadNews "TMNext_NewsStore_Action_LoadNews"

#Const C_Event_NewsLoadingUpdate "TMNext_NewsStore_Event_NewsLoadingUpdate"

#Const C_NewsLoadingState_Unloaded 0
#Const C_NewsLoadingState_Loading 1
#Const C_NewsLoadingState_Loaded 2
#Const C_NewsLoadingState_Error 3

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void Action_LoadNews(CMlScript _This) {
	_This.SendCustomEvent(C_Action_LoadNews, []);
}

NewsStruct::LibNewsStruct_K_News[] GetNews(Text _Placement, Integer _Amount) {
	declare K_State TMNext_NewsStore_State for System = C_State_Null;
	
	// Return all news if we are using the default filter values
	if (_Placement == NewsStruct::C_Placement_Null && _Amount <= 0) return TMNext_NewsStore_State.News;

	declare NewsStruct::LibNewsStruct_K_News[] FilteredNews;
	foreach (News in TMNext_NewsStore_State.News) {
		if (_Placement == NewsStruct::C_Placement_Null || News.Placement == _Placement) {
			FilteredNews.add(News);
			if (_Amount > 0 && FilteredNews.count >= _Amount) break;
		}
	}

	return FilteredNews;
}
NewsStruct::LibNewsStruct_K_News[] GetNews(Text _Placement) {
	return GetNews(_Placement, -1);
}
NewsStruct::LibNewsStruct_K_News[] GetNews() {
	return GetNews(NewsStruct::C_Placement_Null);
}

Void PreloadNewsMedia(CMlScript _This) {
	declare K_State TMNext_NewsStore_State for System = C_State_Null;
	foreach (Key => News in TMNext_NewsStore_State.News) {
		if (News.MediaUrl != "" && News.MediaType == NewsStruct::C_MediaType_Image && !News.MediaPreloaded) {
			_This.PreloadImage(News.MediaUrl);
			TMNext_NewsStore_State.News[Key].MediaPreloaded = True;
		}
	}
}

Void MainInit(CMlScript _This) {
	Store::Subscribe(_This, C_StoreId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the store manialink component
Text ComponentV2() {
	return MV::ComponentV2(
		C_ComponentName,
		"""
		""",
		"""
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/NewsStore_ML.Script.txt" as {{{Q}}}
		""",
		"""

***MainInit***
***
{{{P}}}MainInit(This);
***
		""",
		[
			NewsStruct::Component()
		],
		[]
	);
}