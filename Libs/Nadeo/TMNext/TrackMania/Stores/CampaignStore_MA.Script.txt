/** 
 *	Store for Campaigns
 *	
 *	The campaigns in CampaignsPagers, MonthlyCampaignsPager, RoyalCampaignsPager, AllClubCampaignsPager and ClubsCampaignsPagers
 *	are only used to display basic informations in the menu and to fetch more advanced data
 *	If you want to fully use a campaign, you need to load it first with Action_LoadCampaign()
 *	Then you can use LoadedCampaigns to fetch or retrieve what you need
 */
#Const Version		"2023-05-15"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_MA.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CommonLibs/Common/Store_MA.Script.txt" as Store
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/Task.Script.txt" as Task
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CommonLibs/Common/Tracking.Script.txt" as Tracking
#Include "Libs/Nadeo/TMNext/TrackMania/API/LeaderboardAPI.Script.txt" as LeaderboardAPI
#Include "Libs/Nadeo/TMNext/TrackMania/API/CampaignAPI.Script.txt" as CampaignAPI
#Include "Libs/Nadeo/TMNext/TrackMania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_MA.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/OfflineData.Script.txt" as OfflineData
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct CampaignStore::K_CampaignsPager as K_CampaignsPager
#Struct CampaignStore::K_MonthlyCampaignsPager as K_MonthlyCampaignsPager
#Struct CampaignStore::K_LiveQuarterlyCampaign as K_LiveQuarterlyCampaign
#Struct CampaignStore::K_LiveMonthlyCampaign as K_LiveMonthlyCampaign
#Struct CampaignStore::K_MyQuarterlyCampaignsRankingsPager as K_MyQuarterlyCampaignsRankingsPager
#Struct CampaignStore::K_State as K_State
#Struct CampaignStore::K_CampaignInfo as K_CampaignInfo

#Struct K_LoadingCampaignRequest {
	Task::K_Task Task_MapList;
	Task::K_Task Task_LoadScore;
	Http::K_Request GetClubRequest;
}
#Struct K_LoadingMonthlyCampaignRequest {
	Task::K_Task Task_MapList;
	Task::K_Task Task_LoadScoreList;
	Text[] LoadedMapUids;
	Boolean MapsLoadingSucceed;
}
#Struct K_GetCampaignTopRankingsRequest {
	Http::K_Request Request;
	Task::K_Task Task_GetDisplayName;
}
#Struct K_GetRankingsRequest {
	Http::K_Request Request;
	Task::K_Task Task_GetDisplayName;
	Text LeaderboardGroupUid;
}
#Struct K_GetTopRankingsRequest {
	Http::K_Request TopRankingsRequest;
	Http::K_Request PlayerRankingRequest;
	Task::K_Task Task_GetDisplayName;
	Text LeaderboardGroupUid;
	Integer ClubId;
}
#Struct K_CampaignRequest {
	Http::K_Request Request;
	Integer ClubId;
}
#Struct K_MapGroupListRankingsRequest {
	Http::K_Request Request;
	Text[Text] MapGroupList;
}
#Struct K_LoadMyQuarterlyCampaignsRankings {
	Boolean IsLoading;
	Text AccountId;
	Integer Offset;
	Integer Total;
	CampaignStruct::LibCampaignStruct_K_CampaignRanking[Integer] CampaignsRankings;
	Text[Integer] CampaignsNames;
	Http::K_Request Request_GetCampaignList;
	Http::K_Request[Integer] Requests_GetPlayerRankings;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const CampaignStore::C_State_Null as C_State_Null
#Const CampaignStore::C_StoreId as C_StoreId

#Const CampaignStore::C_LiveCampaignStatus_Null as C_LiveCampaignStatus_Null
#Const CampaignStore::C_LiveCampaignStatus_Loading as C_LiveCampaignStatus_Loading
#Const CampaignStore::C_LiveCampaignStatus_Loaded as C_LiveCampaignStatus_Loaded
#Const CampaignStore::C_LiveCampaignStatus_NoCampaigns as C_LiveCampaignStatus_NoCampaigns
#Const CampaignStore::C_LiveCampaignStatus_Error as C_LiveCampaignStatus_Error

#Const CampaignStore::C_Action_LoadCampaigns as C_Action_LoadCampaigns
#Const CampaignStore::C_Action_LoadCampaign as C_Action_LoadCampaign
#Const CampaignStore::C_Action_LoadMonthlyCampaignsList as C_Action_LoadMonthlyCampaignsList
#Const CampaignStore::C_Action_LoadMonthlyCampaignsPage as C_Action_LoadMonthlyCampaignsPage
#Const CampaignStore::C_Action_LoadMonthlyCampaign as C_Action_LoadMonthlyCampaign
#Const CampaignStore::C_Action_LoadRoyalCampaignsList as C_Action_LoadRoyalCampaignsList
#Const CampaignStore::C_Action_LoadRoyalCampaign as C_Action_LoadRoyalCampaign
#Const CampaignStore::C_Action_LoadAllClubCampaignsPage as C_Action_LoadAllClubCampaignsPage
#Const CampaignStore::C_Action_LoadClubsCampaigns as C_Action_LoadClubsCampaigns
#Const CampaignStore::C_Action_LoadMapPlayerGlobalRankings as C_Action_LoadMapPlayerGlobalRankings
#Const CampaignStore::C_Action_LoadMapPlayerClubRankings as C_Action_LoadMapPlayerClubRankings
#Const CampaignStore::C_Action_LoadMapTopGlobalRankings as C_Action_LoadMapTopGlobalRankings
#Const CampaignStore::C_Action_LoadMapTopClubRankings as C_Action_LoadMapTopClubRankings
#Const CampaignStore::C_Action_LoadCampaignPlayerGlobalRankings as C_Action_LoadCampaignPlayerGlobalRankings
#Const CampaignStore::C_Action_LoadCampaignTopGlobalRankings as C_Action_LoadCampaignTopGlobalRankings
#Const CampaignStore::C_Action_LoadCampaignTopClubRankings as C_Action_LoadCampaignTopClubRankings
#Const CampaignStore::C_Action_GetMapLevels as C_Action_GetMapLevels
#Const CampaignStore::C_Action_LoadOfflineCampaign as C_Action_LoadOfflineCampaign
#Const CampaignStore::C_Action_LoadLiveQuarterlyCampaign as C_Action_LoadLiveQuarterlyCampaign
#Const CampaignStore::C_Action_LoadLiveMonthlyCampaign as C_Action_LoadLiveMonthlyCampaign
#Const CampaignStore::C_Action_LoadMyQuarterlyCampaignsRankings as C_Action_LoadMyQuarterlyCampaignsRankings
#Const CampaignStore::C_Action_BustCache_MapPlayerGlobalRankings as C_Action_BustCache_MapPlayerGlobalRankings
#Const CampaignStore::C_Action_BustCache_MapPlayerClubRankings as C_Action_BustCache_MapPlayerClubRankings
#Const CampaignStore::C_Action_BustCache_MapTopGlobalRankings as C_Action_BustCache_MapTopGlobalRankings
#Const CampaignStore::C_Action_BustCache_MapTopClubRankings as C_Action_BustCache_MapTopClubRankings

#Const CampaignStore::C_Event_CampaignListUpdated as C_Event_CampaignListUpdated
#Const CampaignStore::C_Event_CampaignListUpdateError as C_Event_CampaignListUpdateError
#Const CampaignStore::C_Event_AllClubCampaignListUpdated as C_Event_AllClubCampaignListUpdated
#Const CampaignStore::C_Event_ClubsCampaignListUpdated as C_Event_ClubsCampaignListUpdated
#Const CampaignStore::C_Event_ClubsCampaignListError as C_Event_ClubsCampaignListError
#Const CampaignStore::C_Event_MapRecordsUpdated as C_Event_MapRecordsUpdated
#Const CampaignStore::C_Event_MapPlayerGlobalRankingsUpdated as C_Event_MapPlayerGlobalRankingsUpdated
#Const CampaignStore::C_Event_MapPlayerGlobalRankingsUpdateError as C_Event_MapPlayerGlobalRankingsUpdateError
#Const CampaignStore::C_Event_MapClubRankingsUpdated as C_Event_MapClubRankingsUpdated
#Const CampaignStore::C_Event_MapPlayerClubRankingsUpdated as C_Event_MapPlayerClubRankingsUpdated
#Const CampaignStore::C_Event_MapPlayerClubRankingsUpdateError as C_Event_MapPlayerClubRankingsUpdateError
#Const CampaignStore::C_Event_MapTopGlobalRankingsUpdate as C_Event_MapTopGlobalRankingsUpdate
#Const CampaignStore::C_Event_MapTopClubRankingsUpdate as C_Event_MapTopClubRankingsUpdate
#Const CampaignStore::C_Event_CampaignPlayerGlobalRankingsUpdated as C_Event_CampaignPlayerGlobalRankingsUpdated
#Const CampaignStore::C_Event_CampaignTopGlobalRankingsUpdated as C_Event_CampaignTopGlobalRankingsUpdated
#Const CampaignStore::C_Event_CampaignTopClubRankingsUpdated as C_Event_CampaignTopClubRankingsUpdated
#Const CampaignStore::C_Event_MapRankingLevelsUpdated as C_Event_MapRankingLevelsUpdated
#Const CampaignStore::C_Event_MapRankingLevelsUpdateFailed as C_Event_MapRankingLevelsUpdateFailed
#Const CampaignStore::C_Event_CampaignLoadComplete as C_Event_CampaignLoadComplete
#Const CampaignStore::C_Event_MonthlyCampaignLoadComplete as C_Event_MonthlyCampaignLoadComplete
#Const CampaignStore::C_Event_MonthlyCampaignUpdated as C_Event_MonthlyCampaignUpdated
#Const CampaignStore::C_Event_RoyalCampaignLoadComplete as C_Event_RoyalCampaignLoadComplete
#Const CampaignStore::C_Event_RoyalCampaignUpdated as C_Event_RoyalCampaignUpdated
#Const CampaignStore::C_Event_AllCampaignsLoadComplete as C_Event_AllCampaignsLoadComplete
#Const CampaignStore::C_Event_CampaignUpdated as C_Event_CampaignUpdated
#Const CampaignStore::C_Event_CampaignUpdateFailed as C_Event_CampaignUpdateFailed
#Const CampaignStore::C_Event_CampaignListEmpty as C_Event_CampaignListEmpty
#Const CampaignStore::C_Event_OfflineCampaignLoaded as C_Event_OfflineCampaignLoaded
#Const CampaignStore::C_Event_PreloadImages as C_Event_PreloadImages
#Const CampaignStore::C_Event_LiveQuarterlyCampaignUpdated as C_Event_LiveQuarterlyCampaignUpdated
#Const CampaignStore::C_Event_LiveMonthlyCampaignUpdated as C_Event_LiveMonthlyCampaignUpdated
#Const CampaignStore::C_Event_MyQuarterlyCampaignsRankingsUpdated as C_Event_MyQuarterlyCampaignsRankingsUpdated
#Const CampaignStore::C_Event_CacheBusted_MapPlayerGlobalRankings as C_Event_CacheBusted_MapPlayerGlobalRankings
#Const CampaignStore::C_Event_CacheBusted_MapPlayerClubRankings as C_Event_CacheBusted_MapPlayerClubRankings
#Const CampaignStore::C_Event_CacheBusted_MapTopGlobalRankings as C_Event_CacheBusted_MapTopGlobalRankings
#Const CampaignStore::C_Event_CacheBusted_MapTopClubRankings as C_Event_CacheBusted_MapTopClubRankings

#Const CampaignStore::C_ErrorType_ScoresNotLoaded as C_ErrorType_ScoresNotLoaded

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Http::K_Request[Integer] G_Request_CampaignsPagingList; //< Key is the campaign type
declare K_CampaignRequest[Integer] G_Request_CampaignList;
declare Http::K_Request G_Request_AllClubCampaignsPaging;
declare Http::K_Request[Integer] G_Request_ClubsCampaignsPagingList;
declare Http::K_Request[Text] G_Request_GetMapsRecordsList; //< Key is the LeaderboardGroupUid
declare Http::K_Request G_Request_GetPlayerMapRankings;
declare K_MapGroupListRankingsRequest[Text] G_Request_GetPlayerMapGroupListGlobalRankings;
declare Http::K_Request[Integer][Text] G_Request_GetMapsPositionsListInClub; //< Key1 is the LeaderboardGroupUid, Key2 is the ClubId
declare Http::K_Request G_Request_GetPlayerMapRankingsInClub;
declare K_MapGroupListRankingsRequest[Integer][Text] G_Request_GetPlayerMapGroupListClubRankings;
declare K_GetRankingsRequest[Text] G_Request_GetMapTopRankingsList; //< Key is the MapUid
declare K_GetRankingsRequest[Integer][Text] G_Request_GetMapTopRankingsInClubList; //< Key1 is the MapUid, Key2 is the ClubId
declare Http::K_Request[Integer] G_Request_GetPlayerRankingsList;
declare K_GetCampaignTopRankingsRequest[Integer] G_Request_GetCampaignTopRankingsList; //< Key is the CampaignId
declare K_GetTopRankingsRequest[Integer] G_Request_GetCampaignTopRankingsInClubList; //< Key is the CampaignId
declare K_LoadingCampaignRequest[Integer] G_LoadingCampaignRequestList; //< Key is the CampaignId
declare K_GetRankingsRequest[Text] G_Request_GetMapRankingLevelsList; //< Key is the MapUid
declare Task::K_Task G_OfflineCampaignTaskLoadScore;
declare Http::K_Request G_Request_MonthlyCampaignsPaging;
declare Http::K_Request G_Request_RoyalCampaignsPaging;
declare K_LoadingMonthlyCampaignRequest[Integer] G_LoadingMonthlyCampaignRequestList; //< Key is the MonthlyCampaignId
declare K_LoadingMonthlyCampaignRequest[Integer] G_LoadingRoyalCampaignRequestList; //< Key is the RoyalCampaignId
declare Http::K_Request G_Request_LoadLiveQuarterlyCampaign;
declare Http::K_Request G_Request_LoadLiveMonthlyCampaign;
declare K_LoadMyQuarterlyCampaignsRankings G_LoadMyQuarterlyCampaignsRankings;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Getters
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_CampaignInfo GetCampaignInfoFromId(K_State _State, Integer _CampaignId) {
	foreach (CampaignPager in _State.CampaignsPagers) {
		foreach (CampaignIndex => Campaign in CampaignPager.CampaignList) {
			if (Campaign.Id == _CampaignId) {
				return K_CampaignInfo {
					Index = CampaignIndex,
					Campaign = Campaign
				};
			}
		}
	}

	foreach (CampaignIndex => Campaign in _State.AllClubCampaignsPager.CampaignList) {
		if (Campaign.Id == _CampaignId) {
			return K_CampaignInfo {
				Index = CampaignIndex,
				Campaign = Campaign
			};
		}
	}

	return K_CampaignInfo {
		Index = -1
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
CampaignStruct::LibCampaignStruct_K_Campaign GetCampaignFromId(K_State _State, Integer _CampaignId) {
	if (_State.LoadedCampaigns.existskey(_CampaignId)) {
		return _State.LoadedCampaigns[_CampaignId];
	}

	foreach (CampaignPager in _State.CampaignsPagers) {
		foreach (Campaign in CampaignPager.CampaignList) {
			if (Campaign.Id == _CampaignId) return Campaign;
		}
	}
	foreach (Campaign in _State.AllClubCampaignsPager.CampaignList) {
		if (Campaign.Id == _CampaignId) return Campaign;
	}

	declare CampaignStruct::LibCampaignStruct_K_Campaign CampaignResult;
	CampaignResult.Id = CampaignStruct::C_Campaign_NullId;
	return CampaignResult;
}
CampaignStruct::LibCampaignStruct_K_Campaign GetCampaignFromId(Integer _CampaignId) {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	return GetCampaignFromId(TMNext_CampaignStore_State, _CampaignId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
CampaignStruct::LibCampaignStruct_K_Map GetMap(CampaignStruct::LibCampaignStruct_K_Campaign _Campaign, Text _MapUid) {
	foreach (Category in _Campaign.Categories) {
		foreach (Map in Category.Playlist) {
			if (Map.Uid == _MapUid) return Map;
		}
	}
	return CampaignStruct::LibCampaignStruct_K_Map {};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the player's map ranking levels on the given map
 *	@return													The player's ranking levels
 *
 *	@param _CampaignId							The campaign Id
 *	@param _MapUid									The Map uid to look for
 *
 */
CampaignStruct::LibCampaignStruct_K_TopScore[][Text] GetMapRankingLevels(Integer _CampaignId, Text _MapUid) {
	foreach (Category in GetCampaignFromId(_CampaignId).Categories) {
		foreach (Map in Category.Playlist) {
			if (Map.Uid == _MapUid) {
				return Map.RankingLevels;
			}
		}
	}
	return [];
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**
 * Get the biggest zone with the lowest rank under 100
 * If there is none, gives the smallest zone of the player
 */
CampaignStruct::LibCampaignStruct_K_Ranking GetTopRank(CampaignStruct::LibCampaignStruct_K_Ranking[] _Rankings) {
	if (_Rankings.count == 0) return CampaignStruct::LibCampaignStruct_K_Ranking {};
	declare Integer TrueIndex;
	for (Index, 0, _Rankings.count-1) {
		TrueIndex = _Rankings.count-1 - Index;
		declare CampaignStruct::LibCampaignStruct_K_Ranking Record = _Rankings[TrueIndex];
		// We find a rank higher than top 100
		if (Record.Position > 100) {
			// We take a smallest zone if it exists
			if (TrueIndex < _Rankings.count - 1) {
				TrueIndex += 1;
			}
			break;
		}
	}

	return _Rankings[TrueIndex];
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Set the medal and the score to a map
 *
 *	@param	_CampaignId							The Id of the campaign
 *	@param	_MapUid									The Id of the map
 *	@param	_Medal									The medal to set
 *	@param	_Score									The score to set
 *
 *	@return													The updated map
 */
CampaignStruct::LibCampaignStruct_K_Map SetMapMedalAndScore(Integer _CampaignId, Text _MapUid, Integer _Medal, Integer _Score) {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	declare K_State State = TMNext_CampaignStore_State;
	assert(State.LoadedCampaigns.existskey(_CampaignId), "You need to load the campaign with id "^_CampaignId^" by using Action_LoadCampaign(), before setting new data");

	foreach (CatIndex => Category in State.LoadedCampaigns[_CampaignId].Categories) {
		foreach (MapIndex => Map in Category.Playlist) {
			if (Map.Uid == _MapUid) {
				declare CampaignStruct::LibCampaignStruct_K_Map TmpMap = Map;
				TmpMap.Medal = _Medal;
				TmpMap.Score = _Score;
				State.LoadedCampaigns[_CampaignId].Categories[CatIndex].Playlist[MapIndex] = TmpMap;
				TMNext_CampaignStore_State = State;
				return TmpMap;
			}
		}
	}

	return CampaignStruct::LibCampaignStruct_K_Map {};
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
CampaignStruct::LibCampaignStruct_K_MonthlyCampaign GetMonthlyCampaignFromId(K_State _State, Integer _MonthlyCampaignId) {
	if (_State.LoadedMonthlyCampaigns.existskey(_MonthlyCampaignId)) {
		return _State.LoadedMonthlyCampaigns[_MonthlyCampaignId];
	}

	foreach (MonthlyCampaign in _State.MonthlyCampaignsPager.CampaignList) {
		if (MonthlyCampaign.Id == _MonthlyCampaignId) return MonthlyCampaign;
	}
	return CampaignStruct::LibCampaignStruct_K_MonthlyCampaign {};
}
CampaignStruct::LibCampaignStruct_K_MonthlyCampaign GetMonthlyCampaignFromId(Integer _MonthlyCampaignId) {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	return GetMonthlyCampaignFromId(TMNext_CampaignStore_State, _MonthlyCampaignId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
CampaignStruct::LibCampaignStruct_K_MonthlyCampaign GetRoyalCampaignFromId(K_State _State, Integer _RoyalCampaignId) {
	if (_State.LoadedRoyalCampaigns.existskey(_RoyalCampaignId)) {
		return _State.LoadedRoyalCampaigns[_RoyalCampaignId];
	}

	foreach (RoyalCampaign in _State.RoyalCampaignsPager.CampaignList) {
		if (RoyalCampaign.Id == _RoyalCampaignId) return RoyalCampaign;
	}
	return CampaignStruct::LibCampaignStruct_K_MonthlyCampaign {};
}
CampaignStruct::LibCampaignStruct_K_MonthlyCampaign GetRoyalCampaignFromId(Integer _RoyalCampaignId) {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	return GetRoyalCampaignFromId(TMNext_CampaignStore_State, _RoyalCampaignId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get the current quarterly campaign
CampaignStruct::LibCampaignStruct_K_Campaign GetLiveQuarterlyCampaign() {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	return TMNext_CampaignStore_State.LiveQuarterly.Campaign;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if a map can be loaded if it is not already
Boolean CanBeLoaded(CampaignStruct::LibCampaignStruct_K_DailyMap _DailyMap) {
	return (
		_DailyMap.LoadStatus != CampaignStruct::C_LoadStatus_Loaded &&
		_DailyMap.Map.Uid != ""
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Actions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request from NadeoServices map list and load score
Void Action_StartLoadingCampaign(CampaignStruct::LibCampaignStruct_K_Campaign _Campaign) {
	if (G_LoadingCampaignRequestList.existskey(_Campaign.Id)) {
		if (Task::IsInitialized(G_LoadingCampaignRequestList[_Campaign.Id].Task_MapList)) {
			G_LoadingCampaignRequestList[_Campaign.Id].Task_MapList = Task::Destroy(G_LoadingCampaignRequestList[_Campaign.Id].Task_MapList);
		}
		if (Task::IsInitialized(G_LoadingCampaignRequestList[_Campaign.Id].Task_LoadScore)) {
			G_LoadingCampaignRequestList[_Campaign.Id].Task_LoadScore = Task::Destroy(G_LoadingCampaignRequestList[_Campaign.Id].Task_LoadScore);
		}
	} else {
		G_LoadingCampaignRequestList[_Campaign.Id] = K_LoadingCampaignRequest {
			Task_MapList = Task::GetEmptyTask(),
			Task_LoadScore = Task::GetEmptyTask()
		};
	}

	declare Text[] MapUidList;
	foreach (Category in _Campaign.Categories) {
		foreach (Map in Category.Playlist) {
			if (Map.Uid != "") MapUidList.add(Map.Uid);
		}
	}
	declare Ident MainUserId = MainUser::GetMainUserId();
	G_LoadingCampaignRequestList[_Campaign.Id].Task_MapList = Task::Create(DataFileMgr, DataFileMgr.Map_NadeoServices_GetListFromUid(MainUserId, MapUidList));
	if (_Campaign.Type == CampaignStruct::C_CampaignType_Quarterly) {
		G_LoadingCampaignRequestList[_Campaign.Id].Task_LoadScore = Task::Create(ScoreMgr, ScoreMgr.Season_LoadScore(MainUserId, _Campaign.SeasonId));
	}
	if (_Campaign.Club.Id != ClubStruct::C_ClubNullId) {
		if (Http::IsInitialized(G_LoadingCampaignRequestList[_Campaign.Id].GetClubRequest)) {
			Http::Destroy(G_LoadingCampaignRequestList[_Campaign.Id].GetClubRequest);
		}
		G_LoadingCampaignRequestList[_Campaign.Id].GetClubRequest = ClubAPI::GetClub(_Campaign.Club.Id);
	}

	Store::SendEvent(C_StoreId, C_Event_PreloadImages, [_Campaign.Media.PopUpImageUrl]);
}

/** Update the campaigns list according to its type
 *
 *	@param	_State										The current state
 *	@param	_CampaignType							The type of campaign list to set
 *	@param	_CampaignsTotal						The total number of campaigns in the database
 *	@param	_Campaigns								The campaigns to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetCampaigns(
	K_State _State,
	Integer _CampaignType,
	Integer _CampaignsTotal,
	CampaignStruct::LibCampaignStruct_K_Campaign[] _Campaigns
) {
	declare K_State State = _State;

	if (!State.CampaignsPagers.existskey(_CampaignType)) return State;
	declare Integer Offset = State.CampaignsPagers[_CampaignType].Offset;

	declare CampaignStruct::LibCampaignStruct_K_Campaign[Integer] CampaignList = [];
	foreach (Key => Campaign in _Campaigns) {
		CampaignList[Offset + Key] = Campaign;
		CampaignList[Offset + Key].IsFetched = True;

		if (_CampaignType == CampaignStruct::C_CampaignType_Quarterly) {
			declare Text[] MapUids;
			foreach (Category in Campaign.Categories) {
				foreach (Track in Category.Playlist) {
					MapUids.add(Track.Uid);
				}
			}
			Tracking::SetOfficialCampaign(System, Campaign.Id, Campaign.Year, Campaign.SeasonName, MapUids);
		}

		Store::SendEvent(
			C_StoreId,
			C_Event_PreloadImages,
			[Campaign.Media.ButtonBackgroundUrl, Campaign.Media.ButtonForegroundUrl, Campaign.Media.LiveButtonBackgroundUrl, Campaign.Media.LiveButtonForegroundUrl]
		);
	}

	State.CampaignsPagers[_CampaignType].CampaignList = CampaignList;
	State.CampaignsPagers[_CampaignType].Total = _CampaignsTotal;

	Store::SendEvent(C_StoreId, C_Event_CampaignListUpdated, [""^_CampaignType]);
	
	return State;
}

/** Update the all club campaigns list
 *
 *	@param	_State										The current state
 *	@param	_CampaignsTotal						The total number of campaigns in the database
 *	@param	_Campaigns								The campaigns to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetAllClubCampaigns(
	K_State _State,
	Integer _CampaignsTotal,
	CampaignStruct::LibCampaignStruct_K_Campaign[] _Campaigns
) {
	declare K_State State = _State;

	declare Integer Offset = State.AllClubCampaignsPager.Offset;

	declare CampaignStruct::LibCampaignStruct_K_Campaign[Integer] CampaignList = [];
	foreach (Key => Campaign in _Campaigns) {
		CampaignList[Offset + Key] = Campaign;
		CampaignList[Offset + Key].IsFetched = True;

		Store::SendEvent(
			C_StoreId,
			C_Event_PreloadImages,
			[Campaign.Media.ButtonBackgroundUrl, Campaign.Media.ButtonForegroundUrl, Campaign.Media.LiveButtonBackgroundUrl, Campaign.Media.LiveButtonForegroundUrl]
		);
	}

	State.AllClubCampaignsPager.CampaignList = CampaignList;
	State.AllClubCampaignsPager.Total = _CampaignsTotal;

	Store::SendEvent(C_StoreId, C_Event_AllClubCampaignListUpdated, []);
	
	return State;
}

/** Update the monthly campaigns list
 *
 *	@param	_State										The current state
 *	@param	_CampaignsTotal						The total number of campaigns in the database
 *	@param	_Campaigns								The campaigns to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_UpdateLoadedMonthlyCampaigns(
	K_State _State,
	CampaignStruct::LibCampaignStruct_K_MonthlyCampaign _Campaign,
	Boolean _IsRoyal
) {
	if (
		(!_IsRoyal && !_State.LoadedMonthlyCampaigns.existskey(_Campaign.Id)) ||
		(_IsRoyal && !_State.LoadedRoyalCampaigns.existskey(_Campaign.Id))
	) {
		return _State;
	}

	declare K_State State = _State;
	
	declare Boolean AllMapsLoaded = True;
	declare CampaignStruct::LibCampaignStruct_K_MonthlyCampaign UpdatedCampaign;
	if (_IsRoyal) {
		UpdatedCampaign = State.LoadedRoyalCampaigns[_Campaign.Id];
	} else {
		UpdatedCampaign = State.LoadedMonthlyCampaigns[_Campaign.Id];
	}
	UpdatedCampaign.IsLive = _Campaign.IsLive;
	foreach (Key => DailyMap in _Campaign.DailyMaps) {
		declare CampaignStruct::LibCampaignStruct_K_DailyMap UpdatedMap;
		// The map already exists, only update unlock time
		if (
			UpdatedCampaign.DailyMaps.existskey(Key) &&
			UpdatedCampaign.DailyMaps[Key].CampaignId == DailyMap.CampaignId &&
			UpdatedCampaign.DailyMaps[Key].SeasonId == DailyMap.SeasonId &&
			UpdatedCampaign.DailyMaps[Key].Map.Uid == DailyMap.Map.Uid
		) {
			UpdatedMap = UpdatedCampaign.DailyMaps[Key];
			UpdatedMap.RelativeStart = DailyMap.RelativeStart;
			UpdatedMap.RelativeEnd = DailyMap.RelativeEnd;
			UpdatedMap.RelativeNow = DailyMap.RelativeNow;
		} else {
			UpdatedMap = DailyMap;
		}
		if (AllMapsLoaded && CanBeLoaded(UpdatedMap)) AllMapsLoaded = False;
		UpdatedCampaign.DailyMaps[Key] = UpdatedMap;
	}
	// Mark the campaign as not loaded if some of its map are not loaded yet
	UpdatedCampaign.IsLoaded = UpdatedCampaign.IsLoaded && AllMapsLoaded;
	if (_IsRoyal) {
		State.LoadedRoyalCampaigns[_Campaign.Id] = UpdatedCampaign;
		Store::SendEvent(C_StoreId, C_Event_RoyalCampaignUpdated, [""^UpdatedCampaign.Id]);
	} else {
		State.LoadedMonthlyCampaigns[_Campaign.Id] = UpdatedCampaign;
		Store::SendEvent(C_StoreId, C_Event_MonthlyCampaignUpdated, [""^UpdatedCampaign.Id]);
	}

	return State;
}

/** Update the monthly campaigns list
 *
 *	@param	_State										The current state
 *	@param	_CampaignsTotal						The total number of campaigns in the database
 *	@param	_Campaigns								The campaigns to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetMonthlyCampaigns(
	K_State _State,
	Integer _CampaignsTotal,
	CampaignStruct::LibCampaignStruct_K_MonthlyCampaign[] _Campaigns,
	Boolean _IsRoyal
) {
	declare K_State State = _State;

	declare Integer Offset;
	if (_IsRoyal) {
		Offset = State.RoyalCampaignsPager.Offset;
	} else {
		Offset = State.MonthlyCampaignsPager.Offset;
	}

	declare CampaignStruct::LibCampaignStruct_K_MonthlyCampaign[Integer] CampaignList = [];
	foreach (Key => Campaign in _Campaigns) {
		CampaignList[Offset + Key] = Campaign;

		if (!_IsRoyal) {
			declare Text[] MapUids;
			foreach (DailyMap in Campaign.DailyMaps) {
				MapUids.add(DailyMap.Map.Uid);
			}
			Tracking::SetIsTOTDTracks(System, MapUids);
		}

		Store::SendEvent(
			C_StoreId,
			C_Event_PreloadImages,
			[Campaign.Media.ButtonBackgroundUrl, Campaign.Media.ButtonForegroundUrl, Campaign.Media.LiveButtonBackgroundUrl, Campaign.Media.LiveButtonForegroundUrl]
		);

		// If the campaign is or was live, then also update the loaded monthly campaigns
		// with the potential new maps data. Monthly campaigns that are not live
		// should not change anymore, so it is not necessary to update them.
		if (
			(_IsRoyal && State.LoadedRoyalCampaigns.existskey(Campaign.Id) && 
				(
					Campaign.IsLive ||
					State.LoadedRoyalCampaigns[Campaign.Id].IsLive
				)
			) ||
			(!_IsRoyal && State.LoadedMonthlyCampaigns.existskey(Campaign.Id) && 
				(
					Campaign.IsLive ||
					State.LoadedMonthlyCampaigns[Campaign.Id].IsLive
				)
			)
		) {
			State = Mutation_UpdateLoadedMonthlyCampaigns(State, Campaign, _IsRoyal);
		}
	}

	if (_IsRoyal) {
		State.RoyalCampaignsPager.CampaignList = CampaignList;
		State.RoyalCampaignsPager.Total = _CampaignsTotal;
	
		Store::SendEvent(C_StoreId, C_Event_CampaignListUpdated, [""^CampaignStruct::C_CampaignType_Royal]);
	} else {
		State.MonthlyCampaignsPager.CampaignList = CampaignList;
		State.MonthlyCampaignsPager.Total = _CampaignsTotal;
	
		Store::SendEvent(C_StoreId, C_Event_CampaignListUpdated, [""^CampaignStruct::C_CampaignType_Monthly]);
	}
	
	return State;
}

/** Update the loaded campaigns list
 *
 *	@param	_State										The current state
 *	@param	_Campaign									The campaign to set
 *
 *	@return														The updated state
 */
K_State Mutation_SetLoadedCampaign(K_State _State, CampaignStruct::LibCampaignStruct_K_Campaign _Campaign) {
	declare K_State State = _State;

	State.LoadedCampaigns[_Campaign.Id] = _Campaign;
	State.LoadedCampaigns[_Campaign.Id].IsFetched = True;
	State.LeaderboardGroupUidToCampaignId[_Campaign.LeaderboardGroupUid] = _Campaign.Id;

	Action_StartLoadingCampaign(_Campaign);

	Store::SendEvent(C_StoreId, C_Event_CampaignUpdated, [""^_Campaign.Id]);
	
	return State;
}

/** Update the clubs campaigns list according to the given club Id
 *
 *	@param	_State										The current state
 *	@param	_ClubId										The club id to set
 *	@param	_CampaignsTotal						The total number of campaigns in the database
 *	@param	_Campaigns								The campaigns to set in the array
 *
 *	@return														The updated state
 */
K_State Mutation_SetClubsCampaigns(
	K_State _State,
	Integer _ClubId,
	Integer _CampaignsTotal,
	CampaignStruct::LibCampaignStruct_K_Campaign[] _Campaigns
) {
	declare K_State State = _State;

	if (!State.ClubsCampaignsPagers.existskey(_ClubId)) {
		State.ClubsCampaignsPagers[_ClubId] = K_CampaignsPager {};
	}
	declare Integer Offset = State.ClubsCampaignsPagers[_ClubId].Offset;

	declare CampaignStruct::LibCampaignStruct_K_Campaign[Integer] CampaignList = [];
	foreach (Key => Campaign in _Campaigns) {
		CampaignList[Offset + Key] = Campaign;

		Store::SendEvent(
			C_StoreId,
			C_Event_PreloadImages,
			[Campaign.Media.ButtonBackgroundUrl, Campaign.Media.ButtonForegroundUrl, Campaign.Media.LiveButtonBackgroundUrl, Campaign.Media.LiveButtonForegroundUrl]
		);
	}

	State.ClubsCampaignsPagers[_ClubId].CampaignList = CampaignList;
	State.ClubsCampaignsPagers[_ClubId].Total = _CampaignsTotal;

	Store::SendEvent(C_StoreId, C_Event_ClubsCampaignListUpdated, [""^_ClubId]);
	
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the campaigns offset
K_State Mutation_SetCampaignsOffset(K_State _State, Integer _CampaignType, Integer _Offset) {
	declare K_State State = _State;
	if (!State.CampaignsPagers.existskey(_CampaignType)) return State;

	State.CampaignsPagers[_CampaignType].Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the monthly campaigns offset
K_State Mutation_SetMonthlyCampaignsOffset(K_State _State, Integer _Offset) {
	declare K_State State = _State;
	State.MonthlyCampaignsPager.Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the royal campaigns offset
K_State Mutation_SetRoyalCampaignsOffset(K_State _State, Integer _Offset) {
	declare K_State State = _State;
	State.RoyalCampaignsPager.Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the all club campaigns offset
K_State Mutation_SetAllClubCampaignsOffset(K_State _State, Integer _Offset) {
	declare K_State State = _State;
	State.AllClubCampaignsPager.Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the clubs campaigns offset
K_State Mutation_SetClubsCampaignsOffset(K_State _State, Integer _ClubId, Integer _Offset) {
	declare K_State State = _State;
	if (!State.ClubsCampaignsPagers.existskey(_ClubId)) {
		State.ClubsCampaignsPagers[_ClubId] = K_CampaignsPager {};
	}

	State.ClubsCampaignsPagers[_ClubId].Offset = _Offset;
	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Mark the campaign as loaded and send event
K_State Mutation_SetCampaignIsLoaded(K_State _State, Integer _CampaignId) {
	declare K_State State = _State;

	if (State.LoadedCampaigns.existskey(_CampaignId)) {
		State.LoadedCampaigns[_CampaignId].IsLoaded = True;
		Store::SendEvent(C_StoreId, C_Event_CampaignLoadComplete, [""^_CampaignId]);
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Mark the campaign as loaded and send event
K_State Mutation_SetMonthlyCampaignIsLoaded(
	K_State _State,
	Integer _MonthlyCampaignId,
	Text[] _LoadedMapUids,
	Boolean _MapsLoadingSucceed
) {
	declare K_State State = _State;

	if (State.LoadedMonthlyCampaigns.existskey(_MonthlyCampaignId)) {
		State.LoadedMonthlyCampaigns[_MonthlyCampaignId].IsLoaded = True;

		declare CampaignStruct::LibCampaignStruct_K_DailyMap[Integer] TmpDailyMaps = State.LoadedMonthlyCampaigns[_MonthlyCampaignId].DailyMaps;
		foreach (Key => DailyMap in TmpDailyMaps) {
			// Set daily map load status
			if (_LoadedMapUids.exists(DailyMap.Map.Uid)) {
				if (_MapsLoadingSucceed) {
					State.LoadedMonthlyCampaigns[_MonthlyCampaignId].DailyMaps[Key].LoadStatus = CampaignStruct::C_LoadStatus_Loaded;
				} else {
					State.LoadedMonthlyCampaigns[_MonthlyCampaignId].DailyMaps[Key].LoadStatus = CampaignStruct::C_LoadStatus_Error;
				}
			}

			// Create standard campaign
			declare CampaignStruct::LibCampaignStruct_K_MonthlyCampaign MonthlyCampaign = State.LoadedMonthlyCampaigns[_MonthlyCampaignId];
			declare CampaignStruct::LibCampaignStruct_K_Category Category = CampaignStruct::LibCampaignStruct_K_Category {
				Name = ""^MonthlyCampaign.Month^MonthlyCampaign.Year^DailyMap.Day,
				Playlist = [DailyMap.Map]
			};
			declare Text[Integer] Month_Names = Const::C_Month_Names_With_Day;
			declare Text CampaignName = TL::Compose(Month_Names[MonthlyCampaign.Month-1], TL::ToText(DailyMap.MonthDay), TL::ToText(MonthlyCampaign.Year));
			State.LoadedCampaigns[DailyMap.CampaignId] = CampaignStruct::LibCampaignStruct_K_Campaign {
				Id = DailyMap.CampaignId,
				Name = CampaignName,
				SeasonId = DailyMap.SeasonId,
				LeaderboardGroupUid = DailyMap.SeasonId,
				Categories = [Category],
				IsFetched = True,
				IsLoaded = True,
				IsSeasonLive = DailyMap.RelativeStart <= 0 && DailyMap.RelativeEnd > 0
			};
			State.LeaderboardGroupUidToCampaignId[DailyMap.SeasonId] = DailyMap.CampaignId;
		}

		foreach (Index => MonthlyCampaign in State.MonthlyCampaignsPager.CampaignList) {
			if (_MonthlyCampaignId == MonthlyCampaign.Id) {
				State.MonthlyCampaignsPager.CampaignList[Index].IsLoaded = True;
				break;
			}
		}
	}

	if (State.LiveMonthly.Campaign.Id == _MonthlyCampaignId) {
		State.LiveMonthly.Campaign.IsLoaded = True;
	}

	Store::SendEvent(C_StoreId, C_Event_MonthlyCampaignLoadComplete, [""^_MonthlyCampaignId]);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_UpdateMonthlyCampaignPlaylist(K_State _State, Integer _MonthlyCampaignId, CNadeoServicesMap[Text] _MapList) {
	declare K_State State = _State;

	if (!State.LoadedMonthlyCampaigns.existskey(_MonthlyCampaignId)) {
		State.LoadedMonthlyCampaigns[_MonthlyCampaignId] = GetMonthlyCampaignFromId(State, _MonthlyCampaignId);
	}

	foreach (DayIndex => DailyMap in State.LoadedMonthlyCampaigns[_MonthlyCampaignId].DailyMaps) {
		if (_MapList.existskey(DailyMap.Map.Uid)) {
			State.LoadedMonthlyCampaigns[_MonthlyCampaignId].DailyMaps[DayIndex].Map = CampaignStruct::GetMapFromNSMap(
				State.LoadedMonthlyCampaigns[_MonthlyCampaignId].DailyMaps[DayIndex].Map, 
				_MapList[DailyMap.Map.Uid]
			);
		}
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Mark the campaign as loaded and send event
K_State Mutation_SetRoyalCampaignIsLoaded(
	K_State _State,
	Integer _RoyalCampaignId,
	Text[] _LoadedMapUids,
	Boolean _MapsLoadingSucceed
) {
	declare K_State State = _State;

	if (State.LoadedRoyalCampaigns.existskey(_RoyalCampaignId)) {
		State.LoadedRoyalCampaigns[_RoyalCampaignId].IsLoaded = True;

		declare CampaignStruct::LibCampaignStruct_K_DailyMap[Integer] TmpDailyMaps = State.LoadedRoyalCampaigns[_RoyalCampaignId].DailyMaps;
		foreach (Key => DailyMap in TmpDailyMaps) {
			// Set daily map load status
			if (_LoadedMapUids.exists(DailyMap.Map.Uid)) {
				if (_MapsLoadingSucceed) {
					State.LoadedRoyalCampaigns[_RoyalCampaignId].DailyMaps[Key].LoadStatus = CampaignStruct::C_LoadStatus_Loaded;
				} else {
					State.LoadedRoyalCampaigns[_RoyalCampaignId].DailyMaps[Key].LoadStatus = CampaignStruct::C_LoadStatus_Error;
				}
			}

			// Create standard campaign
			declare CampaignStruct::LibCampaignStruct_K_MonthlyCampaign RoyalCampaign = State.LoadedRoyalCampaigns[_RoyalCampaignId];
			declare CampaignStruct::LibCampaignStruct_K_Category Category = CampaignStruct::LibCampaignStruct_K_Category {
				Name = ""^RoyalCampaign.Month^RoyalCampaign.Year^DailyMap.Day,
				Playlist = [DailyMap.Map]
			};
			declare Text[Integer] Month_Names = Const::C_Month_Names_With_Day;
			declare Text CampaignName = TL::Compose(Month_Names[RoyalCampaign.Month-1], TL::ToText(DailyMap.MonthDay), TL::ToText(RoyalCampaign.Year));
			State.LoadedCampaigns[DailyMap.CampaignId] = CampaignStruct::LibCampaignStruct_K_Campaign {
				Id = DailyMap.CampaignId,
				Name = CampaignName,
				SeasonId = DailyMap.SeasonId,
				LeaderboardGroupUid = DailyMap.SeasonId,
				Categories = [Category],
				IsFetched = True,
				IsLoaded = True,
				IsSeasonLive = DailyMap.RelativeStart <= 0 && DailyMap.RelativeEnd > 0
			};
			State.LeaderboardGroupUidToCampaignId[DailyMap.SeasonId] = DailyMap.CampaignId;
		}

		foreach (Index => RoyalCampaign in State.RoyalCampaignsPager.CampaignList) {
			if (_RoyalCampaignId == RoyalCampaign.Id) {
				State.RoyalCampaignsPager.CampaignList[Index].IsLoaded = True;
				break;
			}
		}
	}

	Store::SendEvent(C_StoreId, C_Event_RoyalCampaignLoadComplete, [""^_RoyalCampaignId]);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_UpdateRoyalCampaignPlaylist(K_State _State, Integer _RoyalCampaignId, CNadeoServicesMap[Text] _MapList) {
	declare K_State State = _State;

	if (!State.LoadedRoyalCampaigns.existskey(_RoyalCampaignId)) {
		State.LoadedRoyalCampaigns[_RoyalCampaignId] = GetRoyalCampaignFromId(State, _RoyalCampaignId);
	}

	foreach (DayIndex => DailyMap in State.LoadedRoyalCampaigns[_RoyalCampaignId].DailyMaps) {
		if (_MapList.existskey(DailyMap.Map.Uid)) {
			State.LoadedRoyalCampaigns[_RoyalCampaignId].DailyMaps[DayIndex].Map = CampaignStruct::GetMapFromNSMap(
				State.LoadedRoyalCampaigns[_RoyalCampaignId].DailyMaps[DayIndex].Map, 
				_MapList[DailyMap.Map.Uid]
			);
		}
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ /
/** Check if there is a map in the campaign that has not
 *	been loaded from the CORE services
 */
K_State Mutation_UpdateMapsLoadStatus(K_State _State, Integer _CampaignId) {
	declare K_State State = _State;

	declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = GetCampaignFromId(State, _CampaignId);
	declare Boolean FailedToGetMapUrl = False;

	foreach (Category in Campaign.Categories) {
		foreach (Map in Category.Playlist) {
			if (Map.Uid != "" && Map.DownloadUrl == "" && Map.LocalFileName == "") {
				FailedToGetMapUrl = True;
				break;
			}
		}
		if (FailedToGetMapUrl) break;
	}

	declare Boolean Found = False;
	foreach (CampaignType => CampaignPager in State.CampaignsPagers) {
		foreach (Index => Campaign in CampaignPager.CampaignList) {
			if (Campaign.Id == _CampaignId) {
				State.CampaignsPagers[CampaignType].CampaignList[Index].FailedToGetMapUrl = FailedToGetMapUrl;
				Found = True;
				break;
			}
		}
		if (Found) break;
	}

	foreach (CampaignIndex => Campaign in State.AllClubCampaignsPager.CampaignList) {
		if (Campaign.Id == _CampaignId) {
			State.AllClubCampaignsPager.CampaignList[CampaignIndex].FailedToGetMapUrl = FailedToGetMapUrl;
			break;
		}
	}

	if (State.LoadedCampaigns.existskey(_CampaignId)) {
		State.LoadedCampaigns[_CampaignId].FailedToGetMapUrl = FailedToGetMapUrl;
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_UpdateCampaignPlaylist(K_State _State, Integer _CampaignId, CNadeoServicesMap[] _MapList) {
	declare K_State State = _State;

	declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = GetCampaignFromId(State, _CampaignId);
	declare CampaignStruct::LibCampaignStruct_K_Category[] Categories;
	foreach (Category in Campaign.Categories) {
		declare CampaignStruct::LibCampaignStruct_K_Category NewCategory;
		NewCategory.Name = Category.Name;
		foreach (Map in Category.Playlist) {
			foreach (NSMap in _MapList) {
				if (NSMap.Uid == Map.Uid) {
					// Erase only the parameters we need
					declare CampaignStruct::LibCampaignStruct_K_Map NewMap = Map;
					NewMap.Position = Map.Position;
					NewMap.Uid = NSMap.Uid;
					NewMap.Name = NSMap.Name;
					NewMap.Type = NSMap.Type;
					NewMap.Style = NSMap.Style;
					NewMap.AuthorLogin = NSMap.AuthorAccountId;
					NewMap.AuthorDisplayName = NSMap.AuthorDisplayName;
					NewMap.SubmitterAccountId = NSMap.SubmitterAccountId;
					NewMap.CreatedWithSimpleEditor = NSMap.CreatedWithSimpleEditor;
					NewMap.CreatedWithGamepadEditor = NSMap.CreatedWithGamepadEditor;
					NewMap.AuthorTime = NSMap.AuthorScore;
					NewMap.GoldTime = NSMap.GoldScore;
					NewMap.SilverTime = NSMap.SilverScore;
					NewMap.BronzeTime = NSMap.BronzeScore;
					NewMap.DownloadUrl = NSMap.FileUrl;
					NewMap.ThumbnailUrl = NSMap.ThumbnailUrl;
					NewMap.UploadTimestamp = NSMap.TimeStamp;
					NewMap.IsPlayable = NSMap.IsPlayable;
					NewMap.CollectionName = NSMap.CollectionName;
					NewCategory.Playlist.add(NewMap);
				}
			}
		}
		Categories.add(NewCategory);
	}

	declare Boolean Found = False;
	foreach (CampaignType => CampaignPager in State.CampaignsPagers) {
		foreach (Index => Campaign in CampaignPager.CampaignList) {
			if (Campaign.Id == _CampaignId) {
				State.CampaignsPagers[CampaignType].CampaignList[Index].Categories = Categories;
				Found = True;
				break;
			}
		}
		if (Found) break;
	}

	foreach (CampaignIndex => Campaign in State.AllClubCampaignsPager.CampaignList) {
		if (Campaign.Id == _CampaignId) {
			State.AllClubCampaignsPager.CampaignList[CampaignIndex].Categories = Categories;
			break;
		}
	}

	if (State.LoadedCampaigns.existskey(_CampaignId)) {
		State.LoadedCampaigns[_CampaignId].Categories = Categories;
	}

	State = Mutation_UpdateMapsLoadStatus(State, _CampaignId);

	Store::SendEvent(C_StoreId, C_Event_CampaignListUpdated);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_UpdateCampaignClub(K_State _State, Integer _CampaignId, ClubStruct::LibStructuresClub_K_Club _Club) {
	declare K_State State = _State;

	declare Boolean Found = False;
	foreach (CampaignType => CampaignPager in State.CampaignsPagers) {
		foreach (Index => Campaign in CampaignPager.CampaignList) {
			if (Campaign.Id == _CampaignId) {
				State.CampaignsPagers[CampaignType].CampaignList[Index].Club = _Club;
				Found = True;
				break;
			}
		}
		if (Found) break;
	}

	foreach (CampaignIndex => Campaign in State.AllClubCampaignsPager.CampaignList) {
		if (Campaign.Id == _CampaignId) {
			State.AllClubCampaignsPager.CampaignList[CampaignIndex].Club = _Club;
			break;
		}
	}

	if (State.LoadedCampaigns.existskey(_CampaignId)) {
		State.LoadedCampaigns[_CampaignId].Club = _Club;
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_SetMapsRecords(
	K_State _State,
	Text _LeaderboardGroupUid,
	LeaderboardAPI::K_ResponseFromGetPlayerMapRankings[Text] _Records
) {
	declare K_State State = _State;

	declare Text[] CampaignIdList;
	foreach (Campaign in State.LoadedCampaigns) {
		if (Campaign.LeaderboardGroupUid != _LeaderboardGroupUid) continue;
		foreach (MapUid => Record in _Records) {
			foreach (CatIndex => Category in Campaign.Categories) {
				foreach (MapIndex => Map in Category.Playlist) {
					if (Map.Uid == MapUid) {
						declare CampaignStruct::LibCampaignStruct_K_Map TmpMap = State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex];
						if (TmpMap.Score <= 0) TmpMap.Score = Record.Score;
						TmpMap.ScoreBySeason[_LeaderboardGroupUid] = Record.Score;
						TmpMap.Rankings = Record.Rankings;
						TmpMap.UpdateTime_Rankings = Now;
						State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex] = TmpMap;

						if (!CampaignIdList.exists(""^Campaign.Id)) CampaignIdList.add(""^Campaign.Id);
					}
				}
			}
		}
	}

	declare Text[] LeaderboardGroupUidList = [_LeaderboardGroupUid];

	// We use a json formatted string instead of the array directly because there is a limit
	// to the number of values the array can contains. The `SendCustomEvent()` function will fail
	// if there are too many entries.
	Store::SendEvent(C_StoreId, C_Event_MapRecordsUpdated, [CampaignIdList.tojson()]);
	Store::SendEvent(C_StoreId, C_Event_MapPlayerGlobalRankingsUpdated, [LeaderboardGroupUidList.tojson()]);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the player ranking on one map
K_State Mutation_SetMapRecords(K_State _State, Text _LeaderboardGroupUid, LeaderboardAPI::K_ResponseFromGetPlayerMapRankings _Record) {
	declare K_State State = _State;

	declare Text[] CampaignIdList;
	foreach (Campaign in State.LoadedCampaigns) {
		if (Campaign.LeaderboardGroupUid == _LeaderboardGroupUid) {
			foreach (CatIndex => Category in Campaign.Categories) {
				foreach (MapIndex => Map in Category.Playlist) {
					if (Map.Uid == _Record.MapUid) {
						declare CampaignStruct::LibCampaignStruct_K_Map TmpMap = State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex];
						if (TmpMap.Score <= 0) TmpMap.Score = _Record.Score;
						TmpMap.ScoreBySeason[_LeaderboardGroupUid] = _Record.Score;
						TmpMap.Rankings = _Record.Rankings;
						TmpMap.UpdateTime_Rankings = Now;
						State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex] = TmpMap;
						if (!CampaignIdList.exists(""^Campaign.Id)) CampaignIdList.add(""^Campaign.Id);
					}
				}
			}
			// Stop looping on the campaigns once we found the right one
			break;
		}
	}

	declare Text[] LeaderboardGroupUidList = [_LeaderboardGroupUid];

	// We use a json formatted string instead of the array directly because there is a limit
	// to the number of values the array can contains. The `SendCustomEvent()` function will fail
	// if there are too many entries.
	Store::SendEvent(C_StoreId, C_Event_MapRecordsUpdated, [CampaignIdList.tojson()]);
	Store::SendEvent(C_StoreId, C_Event_MapPlayerGlobalRankingsUpdated, [LeaderboardGroupUidList.tojson()]);

	return State;
}
Void SetMapRecords(Text _LeaderboardGroupUid, LeaderboardAPI::K_ResponseFromGetPlayerMapRankings _Record) {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_SetMapRecords(TMNext_CampaignStore_State, _LeaderboardGroupUid, _Record);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the player global ranking in several map/leaderboard
K_State Mutation_SetMapGroupListGlobalRankings(
	K_State _State,
	Text[Text] _MapGroupList,
	LeaderboardAPI::K_ResponseFromGetPlayerMapRankings[] _Rankings
) {
	declare K_State State = _State;

	// The response only contains leaderboards where the player has a ranking
	// We want to update the rankings and update time of all the requested leaderboards
	// even the one that are not in the response
	declare Text[] CampaignIdList;
	declare Text[] LeaderboardGroupUidList;
	foreach (Ranking in _Rankings) {
		if (State.LeaderboardGroupUidToCampaignId.existskey(Ranking.LeaderboardGroupUid)) {
			declare Integer CampaignId = State.LeaderboardGroupUidToCampaignId[Ranking.LeaderboardGroupUid];
			if (State.LoadedCampaigns.existskey(CampaignId)) {
				declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = State.LoadedCampaigns[CampaignId];
				foreach (CatIndex => Category in Campaign.Categories) {
					foreach (MapIndex => Map in Category.Playlist) {
						if (Map.Uid == Ranking.MapUid) {
							declare CampaignStruct::LibCampaignStruct_K_Map TmpMap = State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex];
							if (TmpMap.Score <= 0) TmpMap.Score = Ranking.Score;
							TmpMap.ScoreBySeason[Ranking.LeaderboardGroupUid] = Ranking.Score;
							TmpMap.Rankings = Ranking.Rankings;
							TmpMap.UpdateTime_Rankings = Now;
							State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex] = TmpMap;
	
							if (!CampaignIdList.exists(""^Campaign.Id)) CampaignIdList.add(""^Campaign.Id);
							if (!LeaderboardGroupUidList.exists(Ranking.LeaderboardGroupUid)) LeaderboardGroupUidList.add(Ranking.LeaderboardGroupUid);
						}
					}
				}
			}
		}
	}

	foreach (MapUid => LeaderboardGroupUid in _MapGroupList) {
		if (!LeaderboardGroupUidList.exists(LeaderboardGroupUid)) {
			LeaderboardGroupUidList.add(LeaderboardGroupUid);
			if (State.LeaderboardGroupUidToCampaignId.existskey(LeaderboardGroupUid)) {
				declare Integer CampaignId = State.LeaderboardGroupUidToCampaignId[LeaderboardGroupUid];
				if (State.LoadedCampaigns.existskey(CampaignId)) {
					declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = State.LoadedCampaigns[CampaignId];
					foreach (CatIndex => Category in Campaign.Categories) {
						foreach (MapIndex => Map in Category.Playlist) {
							if (Map.Uid == MapUid) {
								State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].UpdateTime_Rankings = Now;
							}
						}
					}
				}
			}
		}
	}

	// We use a json formatted string instead of the array directly because there is a limit
	// to the number of values the array can contains. The `SendCustomEvent()` function will fail
	// if there are too many entries.
	Store::SendEvent(C_StoreId, C_Event_MapRecordsUpdated, [CampaignIdList.tojson()]);
	Store::SendEvent(C_StoreId, C_Event_MapPlayerGlobalRankingsUpdated, [LeaderboardGroupUidList.tojson()]);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the player position on maps in club rankings
K_State Mutation_SetMapsClubRankings(
	K_State _State,
	Text _LeaderboardGroupUid,
	Integer _ClubId,
	LeaderboardAPI::K_ResponseFromGetPlayerMapRankingsInClub[Text] _Records
) {
	declare K_State State = _State;

	declare Integer[] CampaignIdList;
	foreach (Campaign in State.LoadedCampaigns) {
		if (Campaign.LeaderboardGroupUid != _LeaderboardGroupUid) continue;
		foreach (MapUid => Record in _Records) {
			foreach (CatIndex => Category in Campaign.Categories) {
				foreach (MapIndex => Map in Category.Playlist) {
					if (Map.Uid == MapUid) {
						State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].ScoreBySeason[Record.LeaderboardGroupUid] = Record.Score;
						State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].ClubRankings[Record.ClubId] = Record.Position;
						State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].UpdateTime_ClubRankings[Record.ClubId] = Now;
						if (!CampaignIdList.exists(Campaign.Id)) CampaignIdList.add(Campaign.Id);
					}
				}
			}
		}
	}

	declare Text[] LeaderboardGroupUidList = [_LeaderboardGroupUid];

	// We use a json formatted string instead of the array directly because there is a limit
	// to the number of values the array can contains. The `SendCustomEvent()` function will fail
	// if there are too many entries.
	Store::SendEvent(C_StoreId, C_Event_MapClubRankingsUpdated, [CampaignIdList.tojson()]);
	Store::SendEvent(C_StoreId, C_Event_MapPlayerClubRankingsUpdated, [LeaderboardGroupUidList.tojson()]);

	return State;
}
K_State Mutation_SetMapClubRankings(K_State _State, Text _LeaderboardGroupUid, Integer _ClubId, LeaderboardAPI::K_ResponseFromGetPlayerMapRankingsInClub _Records) {
	return Mutation_SetMapsClubRankings(_State, _LeaderboardGroupUid, _ClubId, [_Records.MapUid => _Records]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the player position on maps in club rankings
K_State Mutation_SetMapGroupListClubRankings(
	K_State _State,
	Text[Text] _MapGroupList,
	Integer _ClubId,
	LeaderboardAPI::K_ResponseFromGetPlayerMapRankingsInClub[] _Rankings
) {
	declare K_State State = _State;

	// The response only contains leaderboards where the player has a ranking
	// We want to update the rankings and update time of all the requested leaderboards
	// even the one that are not in the response
	declare Integer[] CampaignIdList;
	declare Text[] LeaderboardGroupUidList;
	foreach (Ranking in _Rankings) {
		if (State.LeaderboardGroupUidToCampaignId.existskey(Ranking.LeaderboardGroupUid)) {
			declare Integer CampaignId = State.LeaderboardGroupUidToCampaignId[Ranking.LeaderboardGroupUid];
			if (State.LoadedCampaigns.existskey(CampaignId)) {
				declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = State.LoadedCampaigns[CampaignId];
				foreach (CatIndex => Category in Campaign.Categories) {
					foreach (MapIndex => Map in Category.Playlist) {
						if (Map.Uid == Ranking.MapUid) {
							State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].ScoreBySeason[Ranking.LeaderboardGroupUid] = Ranking.Score;
							State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].ClubRankings[Ranking.ClubId] = Ranking.Position;
							State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].UpdateTime_ClubRankings[Ranking.ClubId] = Now;

							if (!CampaignIdList.exists(Campaign.Id)) CampaignIdList.add(Campaign.Id);
							if (!LeaderboardGroupUidList.exists(Ranking.LeaderboardGroupUid)) LeaderboardGroupUidList.add(Ranking.LeaderboardGroupUid);
						}
					}
				}
			}
		}
	}

	foreach (MapUid => LeaderboardGroupUid in _MapGroupList) {
		if (!LeaderboardGroupUidList.exists(LeaderboardGroupUid)) {
			LeaderboardGroupUidList.add(LeaderboardGroupUid);
			if (State.LeaderboardGroupUidToCampaignId.existskey(LeaderboardGroupUid)) {
				declare Integer CampaignId = State.LeaderboardGroupUidToCampaignId[LeaderboardGroupUid];
				if (State.LoadedCampaigns.existskey(CampaignId)) {
					declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = State.LoadedCampaigns[CampaignId];
					foreach (CatIndex => Category in Campaign.Categories) {
						foreach (MapIndex => Map in Category.Playlist) {
							if (Map.Uid == MapUid) {
								State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].UpdateTime_ClubRankings[_ClubId] = Now;
							}
						}
					}
				}
			}
		}
	}

	// We use a json formatted string instead of the array directly because there is a limit
	// to the number of values the array can contains. The `SendCustomEvent()` function will fail
	// if there are too many entries.
	Store::SendEvent(C_StoreId, C_Event_MapClubRankingsUpdated, [CampaignIdList.tojson()]);
	Store::SendEvent(C_StoreId, C_Event_MapPlayerClubRankingsUpdated, [LeaderboardGroupUidList.tojson()]);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_SetMapTopRankings(
	K_State _State,
	Text _MapUid,
	LeaderboardAPI::K_ResponseFromGetMapTopRankings _MapTopRankings
) {
	declare K_State State = _State;

	foreach (CampaignId => Campaign in State.LoadedCampaigns) {
		if (Campaign.LeaderboardGroupUid == _MapTopRankings.LeaderboardGroupUid) {
			foreach (CatIndex => Category in Campaign.Categories) {
				foreach (MapIndex => Map in Category.Playlist) {
					if (Map.Uid == _MapUid) {
						State.LoadedCampaigns[CampaignId].Categories[CatIndex].Playlist[MapIndex].TopRankings = _MapTopRankings.TopRankings;
						State.LoadedCampaigns[CampaignId].Categories[CatIndex].Playlist[MapIndex].UpdateTime_TopRankings = Now;
					}
				}
			}
			break;
		}
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_UpdateMapTopRankingsDisplayNames(
	K_State _State,
	Text _MapUid,
	Text _LeaderboardGroupUid
) {
	declare K_State State = _State;

	foreach (CampaignId => Campaign in State.LoadedCampaigns) {
		if (Campaign.LeaderboardGroupUid == _LeaderboardGroupUid) {
			foreach (CatIndex => Category in Campaign.Categories) {
				foreach (MapIndex => Map in Category.Playlist) {
					if (Map.Uid == _MapUid) {
						foreach (TopRankingIndex => TopRanking in Map.TopRankings) {
							foreach (TopScoreIndex => TopScore in TopRanking.Tops) {
								State.LoadedCampaigns[CampaignId].Categories[CatIndex].Playlist[MapIndex].TopRankings[TopRankingIndex].Tops[TopScoreIndex].DisplayName = UserStore::GetUserMgrPlayerName(TopScore.AccountId);
							}
						}
					}
				}
			}
			break;
		}
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_SetMapTopRankingsInClub(
	K_State _State,
	Text _MapUid,
	Integer _ClubId,
	LeaderboardAPI::K_ResponseFromGetMapTopRankingsInClub _TopRankingsInClub
) {
	declare K_State State = _State;

	foreach (CampaignId => Campaign in State.LoadedCampaigns) {
		if (Campaign.LeaderboardGroupUid == _TopRankingsInClub.LeaderboardGroupUid) {
			foreach (CatIndex => Category in Campaign.Categories) {
				foreach (MapIndex => Map in Category.Playlist) {
					if (Map.Uid == _MapUid) {
						State.LoadedCampaigns[CampaignId].Categories[CatIndex].Playlist[MapIndex].ClubTopRankings[_ClubId] = _TopRankingsInClub.Tops;
						State.LoadedCampaigns[CampaignId].Categories[CatIndex].Playlist[MapIndex].UpdateTime_ClubTopRankings[_ClubId] = Now;
					}
				}
			}
			break;
		}
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_UpdateMapTopRankingsInClubDisplayNames(
	K_State _State,
	Text _MapUid,
	Integer _ClubId,
	Text _LeaderboardGroupUid
) {
	declare K_State State = _State;

	foreach (CampaignId => Campaign in State.LoadedCampaigns) {
		if (Campaign.LeaderboardGroupUid == _LeaderboardGroupUid) {
			foreach (CatIndex => Category in Campaign.Categories) {
				foreach (MapIndex => Map in Category.Playlist) {
					if (Map.Uid == _MapUid && Map.ClubTopRankings.existskey(_ClubId)) {
						foreach (TopScoreIndex => TopScore in Map.ClubTopRankings[_ClubId]) {
							State.LoadedCampaigns[CampaignId].Categories[CatIndex].Playlist[MapIndex].ClubTopRankings[_ClubId][TopScoreIndex].DisplayName = UserStore::GetUserMgrPlayerName(TopScore.AccountId);
						}
					}
				}
			}
			break;
		}
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_SetCampaignRankings(K_State _State, Integer _CampaignId, CampaignStruct::LibCampaignStruct_K_CampaignRanking _CampaignRanking) {
	declare K_State State = _State;

	if (State.LoadedCampaigns.existskey(_CampaignId)) {
		State.LoadedCampaigns[_CampaignId].CampaignRanking = _CampaignRanking;
		State.LoadedCampaigns[_CampaignId].UpdateTime_CampaignRanking = Now;
	}

	declare K_CampaignInfo CampaignInfo = GetCampaignInfoFromId(State, _CampaignId);
	if (CampaignInfo.Index < 0) return State;

	if (State.CampaignsPagers.existskey(CampaignInfo.Campaign.Type)) {
		State.CampaignsPagers[CampaignInfo.Campaign.Type].CampaignList[CampaignInfo.Index].CampaignRanking = _CampaignRanking;
		State.CampaignsPagers[CampaignInfo.Campaign.Type].CampaignList[CampaignInfo.Index].UpdateTime_CampaignRanking = Now;
	} else {
		State.AllClubCampaignsPager.CampaignList[CampaignInfo.Index].CampaignRanking = _CampaignRanking;
		State.AllClubCampaignsPager.CampaignList[CampaignInfo.Index].UpdateTime_CampaignRanking = Now;
	}

	Store::SendEvent(C_StoreId, C_Event_CampaignPlayerGlobalRankingsUpdated, [""^_CampaignId]);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_SetCampaignTopRankings(K_State _State, Integer _CampaignId, CampaignStruct::LibCampaignStruct_K_TopRanking[] _TopRankings) {
	declare K_State State = _State;

	if (State.LoadedCampaigns.existskey(_CampaignId)) {
		State.LoadedCampaigns[_CampaignId].TopRankings = _TopRankings;
		State.LoadedCampaigns[_CampaignId].UpdateTime_TopRankings = Now;
	}

	declare K_CampaignInfo CampaignInfo = GetCampaignInfoFromId(State, _CampaignId);
	if (!State.CampaignsPagers.existskey(CampaignInfo.Campaign.Type) && State.AllClubCampaignsPager.CampaignList.existskey(CampaignInfo.Index)) {
		State.AllClubCampaignsPager.CampaignList[CampaignInfo.Index].TopRankings = _TopRankings;
		State.AllClubCampaignsPager.CampaignList[CampaignInfo.Index].UpdateTime_TopRankings = Now;
	} else if (
		State.CampaignsPagers.existskey(CampaignInfo.Campaign.Type) &&
		State.CampaignsPagers[CampaignInfo.Campaign.Type].CampaignList.existskey(CampaignInfo.Index)
	) {
		State.CampaignsPagers[CampaignInfo.Campaign.Type].CampaignList[CampaignInfo.Index].TopRankings = _TopRankings;
		State.CampaignsPagers[CampaignInfo.Campaign.Type].CampaignList[CampaignInfo.Index].UpdateTime_TopRankings = Now;
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_UpdateTopRankingsDisplayNames(K_State _State, Integer _CampaignId) {
	declare K_State State = _State;

	if (State.LoadedCampaigns.existskey(_CampaignId)) {
		foreach (TopRankingIndex => TopRanking_ReadOnly in State.LoadedCampaigns[_CampaignId].TopRankings) {
			foreach (TopIndex => Top_ReadOnly in TopRanking_ReadOnly.Tops) {
				State.LoadedCampaigns[_CampaignId].TopRankings[TopRankingIndex].Tops[TopIndex].DisplayName = UserStore::GetUserMgrPlayerName(Top_ReadOnly.AccountId);
			}
		}
	}

	declare K_CampaignInfo CampaignInfo = GetCampaignInfoFromId(State, _CampaignId);
	if (!State.CampaignsPagers.existskey(CampaignInfo.Campaign.Type)) {
		if (State.AllClubCampaignsPager.CampaignList.existskey(CampaignInfo.Index)) {
			foreach (TopRankingIndex => TopRanking_ReadOnly in State.AllClubCampaignsPager.CampaignList[CampaignInfo.Index].TopRankings) {
				foreach (TopIndex => Top_ReadOnly in TopRanking_ReadOnly.Tops) {
					State.AllClubCampaignsPager.CampaignList[CampaignInfo.Index].TopRankings[TopRankingIndex].Tops[TopIndex].DisplayName = UserStore::GetUserMgrPlayerName(Top_ReadOnly.AccountId);
				}
			}
		}
	} else if (State.CampaignsPagers[CampaignInfo.Campaign.Type].CampaignList.existskey(CampaignInfo.Index)) {
		foreach (TopRankingIndex => TopRanking_ReadOnly in State.CampaignsPagers[CampaignInfo.Campaign.Type].CampaignList[CampaignInfo.Index].TopRankings) {
			foreach (TopIndex => Top_ReadOnly in TopRanking_ReadOnly.Tops) {
				State.CampaignsPagers[CampaignInfo.Campaign.Type].CampaignList[CampaignInfo.Index].TopRankings[TopRankingIndex].Tops[TopIndex].DisplayName = UserStore::GetUserMgrPlayerName(Top_ReadOnly.AccountId);
			}
		}
	}

	Store::SendEvent(C_StoreId, C_Event_CampaignTopGlobalRankingsUpdated, [""^_CampaignId]);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_SetRankingLevels(
	K_State _State,
	Text _MapUid,
	Text _LeaderboardGroupUid,
	CampaignStruct::LibCampaignStruct_K_TopScore[][Text] _RankingLevels
) {
	declare K_State State = _State;

	foreach (Campaign in State.LoadedCampaigns) {
		if (Campaign.LeaderboardGroupUid == _LeaderboardGroupUid) {
			foreach (CatIndex => Category in Campaign.Categories) {
				foreach (MapIndex => Map in Category.Playlist) {
					if (Map.Uid == _MapUid) {
						State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].RankingLevels = _RankingLevels;
						State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].UpdateTime_RankingLevels = Now;
					}
				}
			}
			break;
		}
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_UpdateRankingLevelsDisplayNames(
	K_State _State,
	Text _MapUid,
	Text _LeaderboardGroupUid
) {
	declare K_State State = _State;

	declare Integer CampaignIdResult = CampaignStruct::C_Campaign_NullId;
	foreach (CampaignId => Campaign in State.LoadedCampaigns) {
		if (Campaign.LeaderboardGroupUid == _LeaderboardGroupUid) {
			CampaignIdResult = CampaignId;
			foreach (CatIndex => Category in Campaign.Categories) {
				foreach (MapIndex => Map in Category.Playlist) {
					if (Map.Uid == _MapUid) {
						foreach (ZoneName => SurroundingRanking in Map.RankingLevels) {
							foreach (TopIndex => TopScore in SurroundingRanking) {
								State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].RankingLevels[ZoneName][TopIndex].DisplayName = UserStore::GetUserMgrPlayerName(TopScore.AccountId);
							}
						}
					}
				}
			}
			break;
		}
	}

	Store::SendEvent(C_StoreId, C_Event_MapRankingLevelsUpdated, [""^CampaignIdResult, _MapUid]);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_SetCampaignClubTopRankings(
	K_State _State,
	Integer _CampaignId,
	Integer _ClubId,
	CampaignStruct::LibCampaignStruct_K_Top[] _TopRankings
) {
	declare K_State State = _State;
	assert(State.LoadedCampaigns.existskey(_CampaignId), "You need to load the campaign with id "^_CampaignId^" by using Action_LoadCampaign(), before setting new data");

	State.LoadedCampaigns[_CampaignId].ClubTopRankings[_ClubId] = _TopRankings;
	State.LoadedCampaigns[_CampaignId].UpdateTime_ClubTopRankings[_ClubId] = Now;

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_SetCampaignClubPlayerRankings(
	K_State _State,
	Integer _CampaignId,
	Integer _ClubId,
	CampaignStruct::LibCampaignStruct_K_Top _Top
) {
	declare K_State State = _State;
	assert(State.LoadedCampaigns.existskey(_CampaignId), "You need to load the campaign with id "^_CampaignId^" by using Action_LoadCampaign(), before setting new data");

	State.LoadedCampaigns[_CampaignId].ClubPlayerRanking[_ClubId] = _Top;
	State.LoadedCampaigns[_CampaignId].UpdateTime_ClubPlayerRanking[_ClubId] = Now;

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
K_State Mutation_UpdateCampaignClubTopRankingsDisplayNames(
	K_State _State,
	Integer _CampaignId
) {
	declare K_State State = _State;
	assert(State.LoadedCampaigns.existskey(_CampaignId), "You need to load the campaign with id "^_CampaignId^" by using Action_LoadCampaign(), before setting new data");

	foreach (ClubId => ClubTopRanking in State.LoadedCampaigns[_CampaignId].ClubTopRankings) {
		foreach (TopIndex => Top in ClubTopRanking) {
			State.LoadedCampaigns[_CampaignId].ClubTopRankings[ClubId][TopIndex].DisplayName = UserStore::GetUserMgrPlayerName(Top.AccountId);
		}
	}

	Store::SendEvent(C_StoreId, C_Event_CampaignTopClubRankingsUpdated, [""^_CampaignId]);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Bust cache of a map player global rankings
 *	If `_MapUid` is empty, all maps in the campaigns will be affected
 */
K_State Mutation_BustCache_MapPlayerGlobalRankings(
	K_State _State,
	Integer _CampaignId,
	Text _MapUid
) {
	declare K_State State = _State;

	declare Boolean CacheBusted;
	if (State.LoadedCampaigns.existskey(_CampaignId)) {
		declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = State.LoadedCampaigns[_CampaignId];
		foreach (CatIndex => Category in Campaign.Categories) {
			foreach (MapIndex => Map in Category.Playlist) {
				if (_MapUid == "" || Map.Uid == _MapUid) {
					State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].UpdateTime_Rankings = 0;
					CacheBusted = True;
				}
			}
		}
	}

	if (CacheBusted) Store::SendEvent(C_StoreId, C_Event_CacheBusted_MapPlayerGlobalRankings, [""^_CampaignId, _MapUid]);

	return State;
}
Void Action_BustCache_MapPlayerGlobalRankings(
	Integer _CampaignId,
	Text _MapUid
) {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_BustCache_MapPlayerGlobalRankings(TMNext_CampaignStore_State, _CampaignId, _MapUid);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Bust cache of a map player club rankings
 *	If `_MapUid` is empty, all maps in the campaigns will be affected
 *	If `_ClubId` is NullId, all clubs in the map will be affected
 */
K_State Mutation_BustCache_MapPlayerClubRankings(
	K_State _State,
	Integer _CampaignId,
	Text _MapUid,
	Integer _ClubId
) {
	declare K_State State = _State;

	declare Boolean CacheBusted;
	if (State.LoadedCampaigns.existskey(_CampaignId)) {
		declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = State.LoadedCampaigns[_CampaignId];
		foreach (CatIndex => Category in Campaign.Categories) {
			foreach (MapIndex => Map in Category.Playlist) {
				if (_MapUid == "" || Map.Uid == _MapUid) {
					if (_ClubId == ClubStruct::C_ClubNullId) {
						State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].UpdateTime_ClubRankings = [];
					} else {
						State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].UpdateTime_ClubRankings[_ClubId] = 0;
					}
					CacheBusted = True;
				}
			}
		}
	}

	if (CacheBusted) Store::SendEvent(C_StoreId, C_Event_CacheBusted_MapPlayerClubRankings, [""^_CampaignId, _MapUid, ""^_ClubId]);

	return State;
}
Void Action_BustCache_MapPlayerClubRankings(
	Integer _CampaignId,
	Text _MapUid,
	Integer _ClubId
) {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_BustCache_MapPlayerClubRankings(TMNext_CampaignStore_State, _CampaignId, _MapUid, _ClubId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Bust cache of a map top global rankings
 *	If `_MapUid` is empty, all maps in the campaigns will be affected
 */
K_State Mutation_BustCache_MapTopGlobalRankings(
	K_State _State,
	Integer _CampaignId,
	Text _MapUid
) {
	declare K_State State = _State;

	declare Boolean CacheBusted;
	if (State.LoadedCampaigns.existskey(_CampaignId)) {
		declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = State.LoadedCampaigns[_CampaignId];
		foreach (CatIndex => Category in Campaign.Categories) {
			foreach (MapIndex => Map in Category.Playlist) {
				if (_MapUid == "" || Map.Uid == _MapUid) {
					State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].UpdateTime_TopRankings = 0;
					CacheBusted = True;
				}
			}
		}
	}

	if (CacheBusted) Store::SendEvent(C_StoreId, C_Event_CacheBusted_MapTopGlobalRankings, [""^_CampaignId, _MapUid]);

	return State;
}
Void Action_BustCache_MapTopGlobalRankings(
	Integer _CampaignId,
	Text _MapUid
) {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_BustCache_MapTopGlobalRankings(TMNext_CampaignStore_State, _CampaignId, _MapUid);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Bust cache of a map top club rankings
 *	If `_MapUid` is empty, all maps in the campaigns will be affected
 *	If `_ClubId` is NullId, all clubs in the map will be affected
 */
K_State Mutation_BustCache_MapTopClubRankings(
	K_State _State,
	Integer _CampaignId,
	Text _MapUid,
	Integer _ClubId
) {
	declare K_State State = _State;

	declare Boolean CacheBusted;
	if (State.LoadedCampaigns.existskey(_CampaignId)) {
		declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = State.LoadedCampaigns[_CampaignId];
		foreach (CatIndex => Category in Campaign.Categories) {
			foreach (MapIndex => Map in Category.Playlist) {
				if (_MapUid == "" || Map.Uid == _MapUid) {
					if (_ClubId == ClubStruct::C_ClubNullId) {
						State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].UpdateTime_ClubTopRankings = [];
					} else {
						State.LoadedCampaigns[Campaign.Id].Categories[CatIndex].Playlist[MapIndex].UpdateTime_ClubTopRankings[_ClubId] = 0;
					}
					CacheBusted = True;
				}
			}
		}
	}

	if (CacheBusted) Store::SendEvent(C_StoreId, C_Event_CacheBusted_MapTopClubRankings, [""^_CampaignId, _MapUid, ""^_ClubId]);

	return State;
}
Void Action_BustCache_MapTopClubRankings(
	Integer _CampaignId,
	Text _MapUid,
	Integer _ClubId
) {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_BustCache_MapTopClubRankings(TMNext_CampaignStore_State, _CampaignId, _MapUid, _ClubId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Check if a cache has expired
Boolean HasCacheExpired_MapPlayerGlobalRankings(CampaignStruct::LibCampaignStruct_K_Map _Map, Integer _CacheLifetime) {
	return (
		_Map.UpdateTime_Rankings <= 0 ||
		Now - _Map.UpdateTime_Rankings > _CacheLifetime
	);
}
Boolean HasCacheExpired_MapPlayerClubRankings(CampaignStruct::LibCampaignStruct_K_Map _Map, Integer _ClubId, Integer _CacheLifetime) {
	return (
		_ClubId != ClubStruct::C_ClubNullId && (
			!_Map.UpdateTime_ClubRankings.existskey(_ClubId) ||
			_Map.UpdateTime_ClubRankings[_ClubId] <= 0 ||
			Now - _Map.UpdateTime_ClubRankings[_ClubId] > _CacheLifetime
		)
	);
}
Boolean HasCacheExpired_MapTopGlobalRankings(CampaignStruct::LibCampaignStruct_K_Map _Map, Integer _CacheLifetime) {
	return (
		_Map.UpdateTime_TopRankings <= 0 ||
		Now - _Map.UpdateTime_TopRankings > _CacheLifetime
	);
}
Boolean HasCacheExpired_MapTopClubRankings(CampaignStruct::LibCampaignStruct_K_Map _Map, Integer _ClubId, Integer _CacheLifetime) {
	return (
		_ClubId != ClubStruct::C_ClubNullId && (
			!_Map.UpdateTime_ClubTopRankings.existskey(_ClubId) ||
			_Map.UpdateTime_ClubTopRankings[_ClubId] <= 0 ||
			Now - _Map.UpdateTime_ClubTopRankings[_ClubId] > _CacheLifetime
		)
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request new campaigns
Void Action_LoadCampaigns(Integer _CampaignType, Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (G_Request_CampaignsPagingList.existskey(_CampaignType) && Http::IsInitialized(G_Request_CampaignsPagingList[_CampaignType])) {
		G_Request_CampaignsPagingList[_CampaignType] = Http::Destroy(G_Request_CampaignsPagingList[_CampaignType]);
	}
	// Create new request
	G_Request_CampaignsPagingList[_CampaignType] = CampaignAPI::GetCampaignList(_Offset, _Length);
	
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_SetCampaignsOffset(TMNext_CampaignStore_State, _CampaignType, _Offset);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request new monthly campaigns
Void Action_LoadMonthlyCampaignsList(Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_MonthlyCampaignsPaging)) {
		Http::Destroy(G_Request_MonthlyCampaignsPaging);
	}
	// Create new request
	G_Request_MonthlyCampaignsPaging = CampaignAPI::GetMonthlyCampaignList(_Offset, _Length, False);
	
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_SetMonthlyCampaignsOffset(TMNext_CampaignStore_State, _Offset);
}
Void Action_LoadMonthlyCampaignsPage(Integer _PageNb, Integer _CampaignsPerPage) {
	Action_LoadMonthlyCampaignsList(
		ML::Max(0, (_PageNb - 2)) * _CampaignsPerPage,
		_CampaignsPerPage * 3
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request new royal campaigns
Void Action_LoadRoyalCampaignsList(Integer _Offset, Integer _Length) {
	// Abort previous request if any and create new request
	G_Request_RoyalCampaignsPaging = Http::DestroyAndCreate(
		G_Request_RoyalCampaignsPaging,
		CampaignAPI::GetMonthlyCampaignList(_Offset, _Length, True)
	);
	
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_SetRoyalCampaignsOffset(TMNext_CampaignStore_State, _Offset);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request a specific campaign
Void Action_LoadCampaign(Integer _CampaignId, Integer _ClubId) {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = GetCampaignFromId(TMNext_CampaignStore_State, _CampaignId);

	// If the campaign exists already, no need to fetch it from LIVE
	if (Campaign.IsFetched && Campaign.Id != CampaignStruct::C_Campaign_NullId) {
		TMNext_CampaignStore_State = Mutation_SetLoadedCampaign(TMNext_CampaignStore_State, Campaign);
	} else {
		// Abort previous request if any
		if (G_Request_CampaignList.existskey(_CampaignId) && Http::IsInitialized(G_Request_CampaignList[_CampaignId].Request)) {
			G_Request_CampaignList[_CampaignId].Request = Http::Destroy(G_Request_CampaignList[_CampaignId].Request);
		} else {
			G_Request_CampaignList[_CampaignId] = K_CampaignRequest {};
		}

		// Create new request
		if (_ClubId != ClubStruct::C_ClubNullId) {
			G_Request_CampaignList[_CampaignId].Request = ClubAPI::GetClubCampaign(_ClubId, _CampaignId);
			G_Request_CampaignList[_CampaignId].ClubId = _ClubId;
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to load a monthly campaign
Void Action_LoadMonthlyCampaign(K_State _State, Integer _MonthlyCampaignId) {
	declare CampaignStruct::LibCampaignStruct_K_MonthlyCampaign MonthlyCampaign = GetMonthlyCampaignFromId(_State, _MonthlyCampaignId);

	if (G_LoadingMonthlyCampaignRequestList.existskey(MonthlyCampaign.Id)) {
		if (Task::IsInitialized(G_LoadingMonthlyCampaignRequestList[MonthlyCampaign.Id].Task_MapList)) {
			G_LoadingMonthlyCampaignRequestList[MonthlyCampaign.Id].Task_MapList = Task::Destroy(G_LoadingMonthlyCampaignRequestList[MonthlyCampaign.Id].Task_MapList);
		}
		if (Task::IsInitialized(G_LoadingMonthlyCampaignRequestList[MonthlyCampaign.Id].Task_LoadScoreList)) {
			G_LoadingMonthlyCampaignRequestList[MonthlyCampaign.Id].Task_LoadScoreList = Task::Destroy(G_LoadingMonthlyCampaignRequestList[MonthlyCampaign.Id].Task_LoadScoreList);
		}
	} else {
		G_LoadingMonthlyCampaignRequestList[MonthlyCampaign.Id] = K_LoadingMonthlyCampaignRequest {};
	}

	declare Ident MainUserId = MainUser::GetMainUserId();
	declare Text[] MapUidList;
	declare Text[] SeasonIdList;
	foreach (DailyMap in MonthlyCampaign.DailyMaps) {
		// Load the map as soon as we have its uid even if its not yet playable
		// This way we can preload maps that will be unlocked soon
		if (CanBeLoaded(DailyMap)) {
			MapUidList.add(DailyMap.Map.Uid);
			SeasonIdList.add(DailyMap.SeasonId);
		}
	}
	if (MapUidList.count > 0) {
		G_LoadingMonthlyCampaignRequestList[MonthlyCampaign.Id].Task_MapList = Task::Create(DataFileMgr, DataFileMgr.Map_NadeoServices_GetListFromUid(MainUserId, MapUidList));
	}
	if (SeasonIdList.count > 0) {
		G_LoadingMonthlyCampaignRequestList[MonthlyCampaign.Id].Task_LoadScoreList = Task::Create(ScoreMgr, ScoreMgr.Season_LoadScoreList(MainUserId, SeasonIdList));
	}

	G_LoadingMonthlyCampaignRequestList[MonthlyCampaign.Id].LoadedMapUids = MapUidList;
	G_LoadingMonthlyCampaignRequestList[MonthlyCampaign.Id].MapsLoadingSucceed = True;

	Store::SendEvent(C_StoreId, C_Event_PreloadImages, [MonthlyCampaign.Media.PopUpImageUrl]);
}
Void Action_LoadMonthlyCampaign(Integer _MonthlyCampaignId) {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	Action_LoadMonthlyCampaign(TMNext_CampaignStore_State, _MonthlyCampaignId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request to load a royal campaign
Void Action_LoadRoyalCampaign(K_State _State, Integer _RoyalCampaignId) {
	declare CampaignStruct::LibCampaignStruct_K_MonthlyCampaign RoyalCampaign = GetRoyalCampaignFromId(_State, _RoyalCampaignId);

	if (G_LoadingRoyalCampaignRequestList.existskey(RoyalCampaign.Id)) {
		if (Task::IsInitialized(G_LoadingRoyalCampaignRequestList[RoyalCampaign.Id].Task_MapList)) {
			G_LoadingRoyalCampaignRequestList[RoyalCampaign.Id].Task_MapList = Task::Destroy(G_LoadingRoyalCampaignRequestList[RoyalCampaign.Id].Task_MapList);
		}
	} else {
		G_LoadingRoyalCampaignRequestList[RoyalCampaign.Id] = K_LoadingMonthlyCampaignRequest {};
	}

	declare Ident MainUserId = MainUser::GetMainUserId();
	declare Text[] MapUidList;
	declare Text[] SeasonIdList;
	foreach (DailyMap in RoyalCampaign.DailyMaps) {
		// Load the map as soon as we have its uid even if its not yet playable
		// This way we can preload maps that will be unlocked soon
		if (CanBeLoaded(DailyMap)) {
			MapUidList.add(DailyMap.Map.Uid);
			SeasonIdList.add(DailyMap.SeasonId);
		}
	}
	if (MapUidList.count > 0) {
		G_LoadingRoyalCampaignRequestList[RoyalCampaign.Id].Task_MapList = Task::Create(DataFileMgr, DataFileMgr.Map_NadeoServices_GetListFromUid(MainUserId, MapUidList));
	}

	G_LoadingRoyalCampaignRequestList[RoyalCampaign.Id].LoadedMapUids = MapUidList;
	G_LoadingRoyalCampaignRequestList[RoyalCampaign.Id].MapsLoadingSucceed = True;

	Store::SendEvent(C_StoreId, C_Event_PreloadImages, [RoyalCampaign.Media.PopUpImageUrl]);
}
Void Action_LoadRoyalCampaign(Integer _RoyalCampaignId) {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	Action_LoadRoyalCampaign(TMNext_CampaignStore_State, _RoyalCampaignId);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request new campaigns
Void Action_LoadAllClubCampaignsPage(Text _Sort, Text _Order, Text _FilterName, Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (Http::IsInitialized(G_Request_AllClubCampaignsPaging)) {
		G_Request_AllClubCampaignsPaging = Http::Destroy(G_Request_AllClubCampaignsPaging);
	}
	// Create new request
	G_Request_AllClubCampaignsPaging = ClubAPI::GetAllClubCampaigns(_Sort, _Order, _FilterName, _Offset, _Length);
	
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_SetAllClubCampaignsOffset(TMNext_CampaignStore_State, _Offset);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request new campaigns
Void Action_LoadClubsCampaigns(Integer _ClubId, Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (G_Request_ClubsCampaignsPagingList.existskey(_ClubId) && Http::IsInitialized(G_Request_ClubsCampaignsPagingList[_ClubId])) {
		G_Request_ClubsCampaignsPagingList[_ClubId] = Http::Destroy(G_Request_ClubsCampaignsPagingList[_ClubId]);
	}
	// Create new request
	G_Request_ClubsCampaignsPagingList[_ClubId] = ClubAPI::GetClubCampaignList(_ClubId, _Offset, _Length, True);

	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_SetClubsCampaignsOffset(TMNext_CampaignStore_State, _ClubId, _Offset);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get the player's global rankings for all maps of the leaderboard
Void Action_LoadMapPlayerGlobalRankings(Text _LeaderboardGroupUid) {
	// Abort previous request if any
	if (G_Request_GetMapsRecordsList.existskey(_LeaderboardGroupUid) && Http::IsInitialized(G_Request_GetMapsRecordsList[_LeaderboardGroupUid])) {
		Http::Destroy(G_Request_GetMapsRecordsList[_LeaderboardGroupUid]);
	}
	// Create new request
	G_Request_GetMapsRecordsList[_LeaderboardGroupUid] = LeaderboardAPI::GetPlayerAllMapsRankings(_LeaderboardGroupUid);
}
Void Action_LoadMapPlayerGlobalRankings(Text _LeaderboardGroupUid, Integer[Text] _CurrentScores) {
	// Abort previous request if any
	if (G_Request_GetMapsRecordsList.existskey(_LeaderboardGroupUid) && Http::IsInitialized(G_Request_GetMapsRecordsList[_LeaderboardGroupUid])) {
		Http::Destroy(G_Request_GetMapsRecordsList[_LeaderboardGroupUid]);
	}
	// Create new request
	G_Request_GetMapsRecordsList[_LeaderboardGroupUid] = LeaderboardAPI::GetPlayerAllMapsRankings(_LeaderboardGroupUid, _CurrentScores);
}
Void Action_LoadMapPlayerGlobalRankings(Text _LeaderboardGroupUid, Text _MapUid, Integer _Score) {
	G_Request_GetPlayerMapRankings = Http::DestroyAndCreate(G_Request_GetPlayerMapRankings, LeaderboardAPI::GetPlayerMapRankings(_LeaderboardGroupUid, _MapUid, _Score));
	G_Request_GetPlayerMapRankings = Http::SetMetadata(G_Request_GetPlayerMapRankings, "LeaderboardGroupUid", _LeaderboardGroupUid);
}
Void Action_LoadMapPlayerGlobalRankings(Text[Text] _MapGroupList, Integer[Text] _CurrentScores) {
	// Abort previous request if any
	if (G_Request_GetPlayerMapGroupListGlobalRankings.existskey(""^_MapGroupList) && Http::IsInitialized(G_Request_GetPlayerMapGroupListGlobalRankings[""^_MapGroupList].Request)) {
		Http::Destroy(G_Request_GetPlayerMapGroupListGlobalRankings[""^_MapGroupList].Request);
	}
	// Create new request
	G_Request_GetPlayerMapGroupListGlobalRankings[""^_MapGroupList] = K_MapGroupListRankingsRequest {
		Request = LeaderboardAPI::GetPlayerMapGroupUidListRankings(_MapGroupList, _CurrentScores),
		MapGroupList = _MapGroupList
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get the player's club rankings for all maps of the leaderboard
Void Action_LoadMapPlayerClubRankings(Text _LeaderboardGroupUid, Integer _ClubId, Integer[Text] _Scores) {
	// Abort previous request if any
	if (G_Request_GetMapsPositionsListInClub.existskey(_LeaderboardGroupUid)
			&& G_Request_GetMapsPositionsListInClub[_LeaderboardGroupUid].existskey(_ClubId) 
			&& Http::IsInitialized(G_Request_GetMapsPositionsListInClub[_LeaderboardGroupUid][_ClubId])
	) {
		G_Request_GetMapsPositionsListInClub[_LeaderboardGroupUid][_ClubId] = Http::Destroy(G_Request_GetMapsPositionsListInClub[_LeaderboardGroupUid][_ClubId]);
	}
	// Create new request
	if (!G_Request_GetMapsPositionsListInClub.existskey(_LeaderboardGroupUid)) {
		G_Request_GetMapsPositionsListInClub[_LeaderboardGroupUid] = [];
	}
	G_Request_GetMapsPositionsListInClub[_LeaderboardGroupUid][_ClubId] = LeaderboardAPI::GetPlayerAllMapsRankingsInAClub(_LeaderboardGroupUid, _ClubId, _Scores);
}
Void Action_LoadMapPlayerClubRankings(Text _LeaderboardGroupUid, Integer _ClubId, Text _MapUid, Integer _Score) {
	G_Request_GetPlayerMapRankingsInClub = Http::DestroyAndCreate(G_Request_GetPlayerMapRankingsInClub, LeaderboardAPI::GetPlayerMapRankingInClub(_LeaderboardGroupUid, _ClubId, _MapUid, _Score));
	G_Request_GetPlayerMapRankingsInClub = Http::SetMetadata(G_Request_GetPlayerMapRankingsInClub, "LeaderboardGroupUid", _LeaderboardGroupUid);
	G_Request_GetPlayerMapRankingsInClub = Http::SetMetadata(G_Request_GetPlayerMapRankingsInClub, "ClubId", ""^_ClubId);
}
Void Action_LoadMapPlayerClubRankings(Text[Text] _MapGroupList, Integer _ClubId, Integer[Text] _Scores) {
	// Abort previous request if any
	if (
		G_Request_GetPlayerMapGroupListClubRankings.existskey(""^_MapGroupList) &&
		G_Request_GetPlayerMapGroupListClubRankings[""^_MapGroupList].existskey(_ClubId) &&
		Http::IsInitialized(G_Request_GetPlayerMapGroupListClubRankings[""^_MapGroupList][_ClubId].Request)
	) {
		G_Request_GetPlayerMapGroupListClubRankings[""^_MapGroupList][_ClubId].Request = Http::Destroy(G_Request_GetPlayerMapGroupListClubRankings[""^_MapGroupList][_ClubId].Request);
	}
	// Create new request
	if (!G_Request_GetPlayerMapGroupListClubRankings.existskey(""^_MapGroupList)) {
		G_Request_GetPlayerMapGroupListClubRankings[""^_MapGroupList] = [];
	}
	G_Request_GetPlayerMapGroupListClubRankings[""^_MapGroupList][_ClubId] = K_MapGroupListRankingsRequest {
		Request = LeaderboardAPI::GetPlayerMapGroupUidListRankingsInAClub(_MapGroupList, _ClubId, _Scores),
		MapGroupList = _MapGroupList
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get the player's global rankings for the campaign in the leaderboard
Void Action_LoadCampaignPlayerGlobalRankings(Integer _CampaignId, Text _LeaderboardGroupUid) {
	// Abort previous request if any
	if (G_Request_GetPlayerRankingsList.existskey(_CampaignId) && Http::IsInitialized(G_Request_GetPlayerRankingsList[_CampaignId])) {
		G_Request_GetPlayerRankingsList[_CampaignId] = Http::Destroy(G_Request_GetPlayerRankingsList[_CampaignId]);
	}
	// Create new request
	G_Request_GetPlayerRankingsList[_CampaignId] = LeaderboardAPI::GetPlayerRankings(_LeaderboardGroupUid);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request player rankings
Void Action_LoadCampaignTopGlobalRankings(Integer _CampaignId, Text _LeaderboardGroupUid) {
	// Abort previous request if any
	if (G_Request_GetCampaignTopRankingsList.existskey(_CampaignId)) {
		if (Http::IsInitialized(G_Request_GetCampaignTopRankingsList[_CampaignId].Request)) {
			G_Request_GetCampaignTopRankingsList[_CampaignId].Request = Http::Destroy(G_Request_GetCampaignTopRankingsList[_CampaignId].Request);
		}
		if (Task::IsInitialized(G_Request_GetCampaignTopRankingsList[_CampaignId].Task_GetDisplayName)) {
			G_Request_GetCampaignTopRankingsList[_CampaignId].Task_GetDisplayName = Task::Destroy(G_Request_GetCampaignTopRankingsList[_CampaignId].Task_GetDisplayName);
		}
	}
	// Create new request
	G_Request_GetCampaignTopRankingsList[_CampaignId] = K_GetCampaignTopRankingsRequest {
		Request = LeaderboardAPI::GetTopRankings(_LeaderboardGroupUid),
		Task_GetDisplayName = Task::GetEmptyTask()
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get the top club rankings for the campaign in the leaderboard
Void Action_LoadCampaignTopClubRankings(Integer _CampaignId, Integer _ClubId, Text _LeaderboardGroupUid, Integer _Offset, Integer _Length) {
	// Abort previous request if any
	if (G_Request_GetCampaignTopRankingsInClubList.existskey(_CampaignId)) {
		if (Http::IsInitialized(G_Request_GetCampaignTopRankingsInClubList[_CampaignId].TopRankingsRequest)) {
			G_Request_GetCampaignTopRankingsInClubList[_CampaignId].TopRankingsRequest = Http::Destroy(G_Request_GetCampaignTopRankingsInClubList[_CampaignId].TopRankingsRequest);
		}
		if (Http::IsInitialized(G_Request_GetCampaignTopRankingsInClubList[_CampaignId].PlayerRankingRequest)) {
			G_Request_GetCampaignTopRankingsInClubList[_CampaignId].PlayerRankingRequest = Http::Destroy(G_Request_GetCampaignTopRankingsInClubList[_CampaignId].PlayerRankingRequest);
		}
		if (Task::IsInitialized(G_Request_GetCampaignTopRankingsInClubList[_CampaignId].Task_GetDisplayName)) {
			G_Request_GetCampaignTopRankingsInClubList[_CampaignId].Task_GetDisplayName = Task::Destroy(G_Request_GetCampaignTopRankingsInClubList[_CampaignId].Task_GetDisplayName);
		}
	}
	// Create new request
	G_Request_GetCampaignTopRankingsInClubList[_CampaignId] = K_GetTopRankingsRequest {
		TopRankingsRequest = LeaderboardAPI::GetTopRankingsInClub(_LeaderboardGroupUid, _ClubId, _Offset, _Length),
		PlayerRankingRequest = LeaderboardAPI::GetPlayerRankingInClub(_LeaderboardGroupUid, _ClubId),
		ClubId = _ClubId
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get the top global rankings for all maps of the leaderboard
Void Action_LoadMapTopGlobalRankings(Text _LeaderboardGroupUid, Text _MapUid, Integer _Score) {
	// Abort previous request if any
	if (G_Request_GetMapTopRankingsList.existskey(_MapUid)) {
		if (Http::IsInitialized(G_Request_GetMapTopRankingsList[_MapUid].Request)) {
			G_Request_GetMapTopRankingsList[_MapUid].Request = Http::Destroy(G_Request_GetMapTopRankingsList[_MapUid].Request);
		}
		if (Task::IsInitialized(G_Request_GetMapTopRankingsList[_MapUid].Task_GetDisplayName)) {
			G_Request_GetMapTopRankingsList[_MapUid].Task_GetDisplayName = Task::Destroy(G_Request_GetMapTopRankingsList[_MapUid].Task_GetDisplayName);
		}
	}
	// Create new request
	G_Request_GetMapTopRankingsList[_MapUid] = K_GetRankingsRequest {
		Request = LeaderboardAPI::GetMapTopRankings(_LeaderboardGroupUid, _MapUid, _Score),
		LeaderboardGroupUid = _LeaderboardGroupUid
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get the top club rankings for all maps of the leaderboard
Void Action_LoadMapTopClubRankings(Text _LeaderboardGroupUid, Text _MapUid, Integer _ClubId, Integer _Score) {
	// Abort previous request if any
	if (G_Request_GetMapTopRankingsInClubList.existskey(_MapUid)
			&& G_Request_GetMapTopRankingsInClubList[_MapUid].existskey(_ClubId) 
	) {
		if (Http::IsInitialized(G_Request_GetMapTopRankingsInClubList[_MapUid][_ClubId].Request)) {
			G_Request_GetMapTopRankingsInClubList[_MapUid][_ClubId].Request = Http::Destroy(G_Request_GetMapTopRankingsInClubList[_MapUid][_ClubId].Request);
		}
		if (Task::IsInitialized(G_Request_GetMapTopRankingsInClubList[_MapUid][_ClubId].Task_GetDisplayName)) {
			G_Request_GetMapTopRankingsInClubList[_MapUid][_ClubId].Task_GetDisplayName = Task::Destroy(G_Request_GetMapTopRankingsInClubList[_MapUid][_ClubId].Task_GetDisplayName);
		}
	}
	// Create new request
	if (!G_Request_GetMapTopRankingsInClubList.existskey(_MapUid)) {
		G_Request_GetMapTopRankingsInClubList[_MapUid] = [];
	}
	G_Request_GetMapTopRankingsInClubList[_MapUid][_ClubId] = K_GetRankingsRequest {
		Request = LeaderboardAPI::GetMapTopRankingsInClub(_LeaderboardGroupUid, _MapUid, _ClubId, _Score),
		LeaderboardGroupUid = _LeaderboardGroupUid
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Request player map ranking levels
Void Action_GetMapLevels(Text _GroupUid, Text _MapUid, Integer _Score) {
	// Abort previous request if any
	if (G_Request_GetMapRankingLevelsList.existskey(_MapUid)) {
		if (Http::IsInitialized(G_Request_GetMapRankingLevelsList[_MapUid].Request)) {
			G_Request_GetMapRankingLevelsList[_MapUid].Request = Http::Destroy(G_Request_GetMapRankingLevelsList[_MapUid].Request);
		}
		if (Task::IsInitialized(G_Request_GetMapRankingLevelsList[_MapUid].Task_GetDisplayName)) {
			G_Request_GetMapRankingLevelsList[_MapUid].Task_GetDisplayName = Task::Destroy(G_Request_GetMapRankingLevelsList[_MapUid].Task_GetDisplayName);
		}
	}
	// Create new request
	G_Request_GetMapRankingLevelsList[_MapUid] =	K_GetRankingsRequest {
		Request = LeaderboardAPI::GetMapLevels(_GroupUid, _MapUid, _Score),
		LeaderboardGroupUid = _GroupUid
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Manage the live quarterly campaign
K_State Mutation_SetLiveQuarterlyCampaign(
	K_State _State,
	CampaignStruct::LibCampaignStruct_K_Campaign _QuarterlyCampaign,
	Integer _LiveCampaignStatus,
	Text _ErrorMessage,
	Boolean _SendEvent,
	Integer _CampaignsTotal
) {
	declare K_State State = _State;

	State.LiveQuarterly.Campaign = _QuarterlyCampaign;
	State.LiveQuarterly.Status = _LiveCampaignStatus;
	State.LiveQuarterly.ErrorMessage = _ErrorMessage;
	State.LiveQuarterly.CampaignsTotal = _CampaignsTotal;

	declare Text[] MapUids;
	foreach (Category in _QuarterlyCampaign.Categories) {
		foreach (Track in Category.Playlist) {
			MapUids.add(Track.Uid);
		}
	}
	Tracking::SetOfficialCampaign(System, _QuarterlyCampaign.Id, _QuarterlyCampaign.Year, _QuarterlyCampaign.SeasonName, MapUids);

	// Preload campaign in pager if its empty
	if (
		State.LiveQuarterly.Status == C_LiveCampaignStatus_Loaded &&
		State.CampaignsPagers.existskey(CampaignStruct::C_CampaignType_Quarterly) &&
		State.CampaignsPagers[CampaignStruct::C_CampaignType_Quarterly].CampaignList.count <= 0
	) {
		State = Mutation_SetCampaignsOffset(State, CampaignStruct::C_CampaignType_Quarterly, 0);
		State = Mutation_SetCampaigns(State, CampaignStruct::C_CampaignType_Quarterly, 1, [_QuarterlyCampaign]);
	}

	if (_SendEvent) Store::SendEvent(C_StoreId, C_Event_LiveQuarterlyCampaignUpdated);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Load the live quarterly campaign
 *
 *	@param	_CampaignAPICachePreload	The number of quarterly campaigns to preload in the CampaignAPI cache
 */
Void Action_LoadLiveQuarterlyCampaign(Integer _CampaignAPICachePreload) {
	if (Http::IsInitialized(G_Request_LoadLiveQuarterlyCampaign)) {
		G_Request_LoadLiveQuarterlyCampaign = Http::Destroy(G_Request_LoadLiveQuarterlyCampaign);
	}

	G_Request_LoadLiveQuarterlyCampaign = CampaignAPI::GetCampaignList(0, _CampaignAPICachePreload);

	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_SetLiveQuarterlyCampaign(TMNext_CampaignStore_State, TMNext_CampaignStore_State.LiveQuarterly.Campaign, C_LiveCampaignStatus_Loading, "", True, 0);
}
Void Action_LoadLiveQuarterlyCampaign() {
	Action_LoadLiveQuarterlyCampaign(1);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Load the offline campaign
Void Action_LoadOfflineCampaign() {
	declare CampaignStruct::LibCampaignStruct_K_Campaign OfflineCampaign = OfflineData::GetOfflineCampaign();
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_SetCampaignsOffset(TMNext_CampaignStore_State, OfflineCampaign.Type, 0);
	TMNext_CampaignStore_State = Mutation_SetCampaigns(TMNext_CampaignStore_State, OfflineCampaign.Type, 1, [OfflineCampaign]);
	TMNext_CampaignStore_State = Mutation_SetLiveQuarterlyCampaign(TMNext_CampaignStore_State, OfflineCampaign, C_LiveCampaignStatus_Loaded, "", False, 1);
	G_OfflineCampaignTaskLoadScore = Task::DestroyAndCreate(G_OfflineCampaignTaskLoadScore, ScoreMgr, ScoreMgr.Season_LoadScore(MainUser::GetMainUserId(), OfflineCampaign.SeasonId));
	TMNext_CampaignStore_State.LoadedCampaigns[OfflineCampaign.Id] = OfflineCampaign;
	TMNext_CampaignStore_State.LoadedCampaigns[OfflineCampaign.Id].IsFetched = True;
	TMNext_CampaignStore_State.LoadedCampaigns[OfflineCampaign.Id].IsLoaded = True;
	TMNext_CampaignStore_State.LeaderboardGroupUidToCampaignId[OfflineCampaign.LeaderboardGroupUid] = OfflineCampaign.Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Manage the live monthly campaign
K_State Mutation_SetLiveMonthlyCampaign(
	K_State _State,
	CampaignStruct::LibCampaignStruct_K_MonthlyCampaign _MonthlyCampaign,
	Integer _LiveCampaignStatus,
	Text _ErrorMessage
) {
	declare K_State State = _State;

	State.LiveMonthly.Campaign = _MonthlyCampaign;
	State.LiveMonthly.Status = _LiveCampaignStatus;
	State.LiveMonthly.ErrorMessage = _ErrorMessage;

	declare Text[] MapUids;
	foreach (DailyMap in _MonthlyCampaign.DailyMaps) {
		MapUids.add(DailyMap.Map.Uid);
	}
	Tracking::SetIsTOTDTracks(System, MapUids);

	// Preload campaign in pager if its empty
	if (
		State.LiveMonthly.Status == C_LiveCampaignStatus_Loaded &&
		State.MonthlyCampaignsPager.CampaignList.count <= 0
	) {
		State = Mutation_SetMonthlyCampaignsOffset(State, 0);
		State = Mutation_SetMonthlyCampaigns(State, 1, [_MonthlyCampaign], False);
	}

	// Replace new or updated maps in the corresponding LoadedMonthlyCampaign
	if (State.LoadedMonthlyCampaigns.existskey(_MonthlyCampaign.Id)) {
		foreach (DailyMapIndex => DailyMap in _MonthlyCampaign.DailyMaps) {
			declare Boolean IsLoaded = False;
			foreach (LoadedDailyMap in State.LoadedMonthlyCampaigns[_MonthlyCampaign.Id].DailyMaps) {
				if (LoadedDailyMap.Map.Uid == DailyMap.Map.Uid && LoadedDailyMap.RelativeStart == DailyMap.RelativeStart) {
					IsLoaded = True;
				}
			}
			if (!IsLoaded) {
				State.LoadedMonthlyCampaigns[_MonthlyCampaign.Id].DailyMaps[DailyMapIndex] = DailyMap;
				State.LoadedMonthlyCampaigns[_MonthlyCampaign.Id].IsLoaded = False;
			}
		}
	}

	// Replace corresponding campaign in pager
	foreach (MonthlyIndex => MonthlyCampaign in State.MonthlyCampaignsPager.CampaignList) {
		if (MonthlyCampaign.Id == _MonthlyCampaign.Id) {
			State.MonthlyCampaignsPager.CampaignList[MonthlyIndex] = _MonthlyCampaign;
		}
	}

	if (_MonthlyCampaign.Id != CampaignStruct::C_Campaign_NullId) {
		Action_LoadMonthlyCampaign(State, _MonthlyCampaign.Id);
	}

	Store::SendEvent(C_StoreId, C_Event_LiveMonthlyCampaignUpdated);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Load the live monthly campaign
 *
 *	@param	_CampaignAPICachePreload	The number of monthly campaigns to preload in the CampaignAPI cache
 */
Void Action_LoadLiveMonthlyCampaign(Integer _CampaignAPICachePreload) {
	if (Http::IsInitialized(G_Request_LoadLiveMonthlyCampaign)) {
		G_Request_LoadLiveMonthlyCampaign = Http::Destroy(G_Request_LoadLiveMonthlyCampaign);
	}

	G_Request_LoadLiveMonthlyCampaign = CampaignAPI::GetMonthlyCampaignList(0, _CampaignAPICachePreload, False);

	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = Mutation_SetLiveMonthlyCampaign(TMNext_CampaignStore_State, TMNext_CampaignStore_State.LiveMonthly.Campaign, C_LiveCampaignStatus_Loading, "");
}
Void Action_LoadLiveMonthlyCampaign() {
	Action_LoadLiveMonthlyCampaign(1);
}

K_State Mutation_SetMyQuarterlyCampaignsRankings(
	K_State _State,
	CampaignStruct::LibCampaignStruct_K_CampaignRanking[Integer] _CampaignsRankings,
	Text[Integer] _CampaignsNames,
	Text _AccountId,
	Integer _Total
) {
	declare K_State State = _State;
	State.MyQuarterlyCampaignsRankingsPager.CampaignsRankings = _CampaignsRankings;
	State.MyQuarterlyCampaignsRankingsPager.CampaignsNames = _CampaignsNames;
	State.MyQuarterlyCampaignsRankingsPager.AccountId = _AccountId;
	State.MyQuarterlyCampaignsRankingsPager.Total = _Total;

	Store::SendEvent(C_StoreId, C_Event_MyQuarterlyCampaignsRankingsUpdated);

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the current user ranking on the quarterly campaigns
Void Action_LoadMyQuarterlyCampaignsRankings(Text _AccountId, Integer _Offset, Integer _Length) {
	if (Http::IsInitialized(G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList)) {
		G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList = Http::Destroy(G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList);
	}
	foreach (Request_GetPlayerRankings in G_LoadMyQuarterlyCampaignsRankings.Requests_GetPlayerRankings) {
		if (Http::IsInitialized(Request_GetPlayerRankings)) {
			Http::Destroy(Request_GetPlayerRankings);
		}
	}

	G_LoadMyQuarterlyCampaignsRankings.AccountId = _AccountId;
	G_LoadMyQuarterlyCampaignsRankings.Offset = _Offset;
	G_LoadMyQuarterlyCampaignsRankings.Total = 0;
	G_LoadMyQuarterlyCampaignsRankings.CampaignsRankings = [];
	G_LoadMyQuarterlyCampaignsRankings.CampaignsNames = [];
	G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList = CampaignAPI::GetCampaignList(_Offset, _Length);
	G_LoadMyQuarterlyCampaignsRankings.Requests_GetPlayerRankings = [];
	G_LoadMyQuarterlyCampaignsRankings.IsLoading = True;
}
Void Action_LoadMyQuarterlyCampaignsRankings(Integer _Offset, Integer _Length) {
	Action_LoadMyQuarterlyCampaignsRankings("", _Offset, _Length);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get information about the training campaign
CampaignStruct::LibCampaignStruct_K_Campaign GetTrainingCampaign() {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	return TMNext_CampaignStore_State.TrainingCampaign;
}

Void Private_ResetData() {
	declare K_State TMNext_CampaignStore_State for System = C_State_Null;
	TMNext_CampaignStore_State = K_State {
		CampaignsPagers = [
			CampaignStruct::C_CampaignType_Quarterly => K_CampaignsPager {}
		],
		MonthlyCampaignsPager = K_MonthlyCampaignsPager {},
		RoyalCampaignsPager = K_MonthlyCampaignsPager {},
		ClubsCampaignsPagers = [],
		LoadedCampaigns = [],
		LoadedMonthlyCampaigns = [],
		LoadedRoyalCampaigns = [],
		LiveQuarterly = K_LiveQuarterlyCampaign {
			Campaign = CampaignStruct::GetEmptyCampaign(),
			Status = C_LiveCampaignStatus_Null,
			ErrorMessage = ""
		},
		LiveMonthly = K_LiveMonthlyCampaign {
			Campaign = CampaignStruct::GetEmptyMonthlyCampaign(),
			Status = C_LiveCampaignStatus_Null,
			ErrorMessage = ""
		},
		TrainingCampaign = OfflineData::GetTrainingCampaign(),
		MyQuarterlyCampaignsRankingsPager = K_MyQuarterlyCampaignsRankingsPager {
			CampaignsRankings = [],
			CampaignsNames = [],
			AccountId = "",
			Total = 0
		}
	};
	TMNext_CampaignStore_State.LoadedCampaigns[TMNext_CampaignStore_State.TrainingCampaign.Id] = TMNext_CampaignStore_State.TrainingCampaign;
	TMNext_CampaignStore_State.LeaderboardGroupUidToCampaignId[TMNext_CampaignStore_State.TrainingCampaign.LeaderboardGroupUid] = TMNext_CampaignStore_State.TrainingCampaign.Id;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Initialize the Campaign store
Void Initialize(Boolean _ResetData) {
	if (_ResetData) {
		Private_ResetData();
	}

	foreach (CampaignType => Request in G_Request_CampaignsPagingList) {
		if (Http::IsInitialized(Request)) {
			Http::Destroy(Request);
		}
	}
	G_Request_CampaignsPagingList = [];

	if (Http::IsInitialized(G_Request_MonthlyCampaignsPaging)) {
		G_Request_MonthlyCampaignsPaging = Http::Destroy(G_Request_MonthlyCampaignsPaging);
	}
	G_Request_MonthlyCampaignsPaging = Http::GetEmptyRequest();

	if (Http::IsInitialized(G_Request_RoyalCampaignsPaging)) {
		G_Request_RoyalCampaignsPaging = Http::Destroy(G_Request_RoyalCampaignsPaging);
	}
	G_Request_RoyalCampaignsPaging = Http::GetEmptyRequest();

	if (Http::IsInitialized(G_Request_AllClubCampaignsPaging)) {
		G_Request_AllClubCampaignsPaging = Http::Destroy(G_Request_AllClubCampaignsPaging);
	}
	G_Request_AllClubCampaignsPaging = Http::GetEmptyRequest();

	foreach (CampaignId => Request in G_Request_CampaignList) {
		if (Http::IsInitialized(Request.Request)) {
			Http::Destroy(Request.Request);
		}
	}
	G_Request_CampaignList = [];

	foreach (ClubId => Request in G_Request_ClubsCampaignsPagingList) {
		if (Http::IsInitialized(Request)) {
			Http::Destroy(Request);
		}
	}
	G_Request_ClubsCampaignsPagingList = [];
	
	foreach (Request in G_Request_GetMapsRecordsList) {
		if (Http::IsInitialized(Request)) {
			Http::Destroy(Request);
		}
	}
	G_Request_GetMapsRecordsList = [];

	foreach (MapGroupListRankingsRequest in G_Request_GetPlayerMapGroupListGlobalRankings) {
		if (Http::IsInitialized(MapGroupListRankingsRequest.Request)) {
			Http::Destroy(MapGroupListRankingsRequest.Request);
		}
	}
	G_Request_GetPlayerMapGroupListGlobalRankings = [];

	foreach (Requests in G_Request_GetMapsPositionsListInClub) {
		foreach (Request in Requests) {
			if (Http::IsInitialized(Request)) {
				Http::Destroy(Request);
			}
		}
	}
	G_Request_GetMapsPositionsListInClub = [];

	foreach (Requests in G_Request_GetPlayerMapGroupListClubRankings) {
		foreach (PlayerMapGroupListClubRankings in Requests) {
			if (Http::IsInitialized(PlayerMapGroupListClubRankings.Request)) {
				Http::Destroy(PlayerMapGroupListClubRankings.Request);
			}
		}
	}
	G_Request_GetPlayerMapGroupListClubRankings = [];

	foreach (Request in G_Request_GetMapTopRankingsList) {
		if (Http::IsInitialized(Request.Request)) {
			Http::Destroy(Request.Request);
		}
		if (Task::IsInitialized(Request.Task_GetDisplayName)) {
			Task::Destroy(Request.Task_GetDisplayName);
		}
	}
	G_Request_GetMapTopRankingsList = [];

	foreach (Requests in G_Request_GetMapTopRankingsInClubList) {
		foreach (Request in Requests) {
			if (Http::IsInitialized(Request.Request)) {
				Http::Destroy(Request.Request);
			}
			if (Task::IsInitialized(Request.Task_GetDisplayName)) {
				Task::Destroy(Request.Task_GetDisplayName);
			}
		}
	}
	G_Request_GetMapTopRankingsInClubList = [];

	foreach (Index => Request in G_Request_GetCampaignTopRankingsList) {
		if (Http::IsInitialized(Request.Request)) {
			Http::Destroy(Request.Request);
		}
		if (Task::IsInitialized(Request.Task_GetDisplayName)) {
			Task::Destroy(Request.Task_GetDisplayName);
		}
	}
	G_Request_GetCampaignTopRankingsList = [];

	foreach (Index => Request in G_Request_GetCampaignTopRankingsInClubList) {
		if (Http::IsInitialized(Request.TopRankingsRequest)) {
			Http::Destroy(Request.TopRankingsRequest);
		}
		if (Http::IsInitialized(Request.PlayerRankingRequest)) {
			Http::Destroy(Request.PlayerRankingRequest);
		}
	}
	G_Request_GetCampaignTopRankingsInClubList = [];

	foreach (Index => Request in G_Request_GetPlayerRankingsList) {
		if (Http::IsInitialized(Request)) {
			Http::Destroy(Request);
		}
	}
	G_Request_GetPlayerRankingsList = [];

	foreach (LoadingCampaignRequest in G_LoadingCampaignRequestList) {
		if (Task::IsInitialized(LoadingCampaignRequest.Task_MapList)) {
			Task::Destroy(LoadingCampaignRequest.Task_MapList);
		}
		if (Task::IsInitialized(LoadingCampaignRequest.Task_LoadScore)) {
			Task::Destroy(LoadingCampaignRequest.Task_LoadScore);
		}
	}
	G_LoadingCampaignRequestList = [];

	foreach (LoadingMonthlyCampaignRequest in G_LoadingMonthlyCampaignRequestList) {
		if (Task::IsInitialized(LoadingMonthlyCampaignRequest.Task_MapList)) {
			Task::Destroy(LoadingMonthlyCampaignRequest.Task_MapList);
		}
		if (Task::IsInitialized(LoadingMonthlyCampaignRequest.Task_LoadScoreList)) {
			Task::Destroy(LoadingMonthlyCampaignRequest.Task_LoadScoreList);
		}
	}
	G_LoadingMonthlyCampaignRequestList = [];

	foreach (LoadingRoyalCampaignRequest in G_LoadingRoyalCampaignRequestList) {
		if (Task::IsInitialized(LoadingRoyalCampaignRequest.Task_MapList)) {
			Task::Destroy(LoadingRoyalCampaignRequest.Task_MapList);
		}
	}
	G_LoadingRoyalCampaignRequestList = [];

	foreach (Request_GetMapRankingLevels in G_Request_GetMapRankingLevelsList) {
		if (Http::IsInitialized(Request_GetMapRankingLevels.Request)) {
			Http::Destroy(Request_GetMapRankingLevels.Request);
		}
		if (Task::IsInitialized(Request_GetMapRankingLevels.Task_GetDisplayName)) {
			Task::Destroy(Request_GetMapRankingLevels.Task_GetDisplayName);
		}
	}
	G_Request_GetMapRankingLevelsList = [];

	if (Task::IsInitialized(G_OfflineCampaignTaskLoadScore)) {
		G_OfflineCampaignTaskLoadScore = Task::Destroy(G_OfflineCampaignTaskLoadScore);
	}
	G_OfflineCampaignTaskLoadScore = Task::GetEmptyTask();

	if (Http::IsInitialized(G_Request_LoadLiveQuarterlyCampaign)) {
		G_Request_LoadLiveQuarterlyCampaign = Http::Destroy(G_Request_LoadLiveQuarterlyCampaign);
	}
	G_Request_LoadLiveQuarterlyCampaign = Http::GetEmptyRequest();

	if (Http::IsInitialized(G_Request_LoadLiveMonthlyCampaign)) {
		G_Request_LoadLiveMonthlyCampaign = Http::Destroy(G_Request_LoadLiveMonthlyCampaign);
	}
	G_Request_LoadLiveMonthlyCampaign = Http::GetEmptyRequest();

	if (Http::IsInitialized(G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList)) {
		G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList = Http::Destroy(G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList);
	}
	foreach (Request_GetPlayerRankings in G_LoadMyQuarterlyCampaignsRankings.Requests_GetPlayerRankings) {
		if (Http::IsInitialized(Request_GetPlayerRankings)) {
			Http::Destroy(Request_GetPlayerRankings);
		}
	}
	G_LoadMyQuarterlyCampaignsRankings = K_LoadMyQuarterlyCampaignsRankings {
		IsLoading = False,
		AccountId = "",
		Offset = 0,
		Total = 0,
		CampaignsRankings = [],
		CampaignsNames = [],
		Request_GetCampaignList = Http::GetEmptyRequest(),
		Requests_GetPlayerRankings = []
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Process event
Void ProcessEvent(CManiaAppEvent _Event) {
	switch (_Event.Type) {
		case CManiaAppEvent::EType::LayerCustomEvent: {
			switch(_Event.CustomEventType) {
				case C_Action_LoadCampaigns: {
					if (_Event.CustomEventData.count >= 3) {
						Action_LoadCampaigns(TL::ToInteger(_Event.CustomEventData[0]), TL::ToInteger(_Event.CustomEventData[1]), TL::ToInteger(_Event.CustomEventData[2]));
					}
				}
				case C_Action_LoadMonthlyCampaignsList: {
					if (_Event.CustomEventData.count >= 2) {
						Action_LoadMonthlyCampaignsList(TL::ToInteger(_Event.CustomEventData[0]), TL::ToInteger(_Event.CustomEventData[1]));
					}
				}
				case C_Action_LoadMonthlyCampaignsPage: {
					if (_Event.CustomEventData.count >= 2) {
						Action_LoadMonthlyCampaignsPage(TL::ToInteger(_Event.CustomEventData[0]), TL::ToInteger(_Event.CustomEventData[1]));
					}
				}
				case C_Action_LoadMonthlyCampaign: {
					if (_Event.CustomEventData.count >= 1) {
						Action_LoadMonthlyCampaign(TL::ToInteger(_Event.CustomEventData[0]));
					}
				}
				case C_Action_LoadRoyalCampaignsList: {
					if (_Event.CustomEventData.count >= 2) {
						Action_LoadRoyalCampaignsList(TL::ToInteger(_Event.CustomEventData[0]), TL::ToInteger(_Event.CustomEventData[1]));
					}
				}
				case C_Action_LoadRoyalCampaign: {
					if (_Event.CustomEventData.count >= 1) {
						Action_LoadRoyalCampaign(TL::ToInteger(_Event.CustomEventData[0]));
					}
				}
				case C_Action_LoadCampaign: {
					if (_Event.CustomEventData.count >= 2) {
						Action_LoadCampaign(TL::ToInteger(_Event.CustomEventData[0]), TL::ToInteger(_Event.CustomEventData[1]));
					}
				}
				case C_Action_LoadAllClubCampaignsPage: {
					if (_Event.CustomEventData.count >= 5) {
						Action_LoadAllClubCampaignsPage(
							_Event.CustomEventData[0],
							_Event.CustomEventData[1],
							_Event.CustomEventData[2],
							TL::ToInteger(_Event.CustomEventData[3]),
							TL::ToInteger(_Event.CustomEventData[4])
						);
					}
				}
				case C_Action_LoadClubsCampaigns: {
					if (_Event.CustomEventData.count >= 3) {
						Action_LoadClubsCampaigns(
							TL::ToInteger(_Event.CustomEventData[0]),
							TL::ToInteger(_Event.CustomEventData[1]),
							TL::ToInteger(_Event.CustomEventData[2])
						);
					}
				}
				case C_Action_LoadMapPlayerGlobalRankings: {
					if (_Event.CustomEventData.count >= 3) {
						declare Text[Text] MapGroupList;
						declare Integer[Text] CurrentScores;
						CurrentScores.fromjson(_Event.CustomEventData[1]);
						MapGroupList.fromjson(_Event.CustomEventData[2]);
						Action_LoadMapPlayerGlobalRankings(MapGroupList, CurrentScores);
					} else if (_Event.CustomEventData.count >= 2) {
						declare Integer[Text] CurrentScores;
						CurrentScores.fromjson(_Event.CustomEventData[1]);
						if (CurrentScores.count == 1) {
							foreach (MapUid => Score in CurrentScores) Action_LoadMapPlayerGlobalRankings(_Event.CustomEventData[0], MapUid, Score);
						} else {
							Action_LoadMapPlayerGlobalRankings(_Event.CustomEventData[0], CurrentScores);
						}
					} else if (_Event.CustomEventData.count >= 1) {
						Action_LoadMapPlayerGlobalRankings(_Event.CustomEventData[0]);
					}
				}
				case C_Action_LoadMapPlayerClubRankings: {
					if (_Event.CustomEventData.count >= 4) {
						declare Text[Text] MapGroupList;
						declare Integer[Text] CurrentScores;
						CurrentScores.fromjson(_Event.CustomEventData[2]);
						MapGroupList.fromjson(_Event.CustomEventData[3]);
						Action_LoadMapPlayerClubRankings(MapGroupList, TL::ToInteger(_Event.CustomEventData[1]), CurrentScores);
					} else if (_Event.CustomEventData.count >= 3) {
						declare Integer[Text] CurrentScores;
						CurrentScores.fromjson(_Event.CustomEventData[2]);
						if (CurrentScores.count == 1) {
							foreach (MapUid => Score in CurrentScores) Action_LoadMapPlayerClubRankings(_Event.CustomEventData[0], TL::ToInteger(_Event.CustomEventData[1]), MapUid, Score);
						} else {
							Action_LoadMapPlayerClubRankings(_Event.CustomEventData[0], TL::ToInteger(_Event.CustomEventData[1]), CurrentScores);
						}
					}
				}
				case C_Action_LoadCampaignPlayerGlobalRankings: {
					if (_Event.CustomEventData.count >= 2) {
						Action_LoadCampaignPlayerGlobalRankings(TL::ToInteger(_Event.CustomEventData[0]), _Event.CustomEventData[1]);
					}
				}
				case C_Action_LoadCampaignTopGlobalRankings: {
					if (_Event.CustomEventData.count >= 2) {
						Action_LoadCampaignTopGlobalRankings(TL::ToInteger(_Event.CustomEventData[0]), _Event.CustomEventData[1]);
					}
				}
				case C_Action_LoadCampaignTopClubRankings: {
					if (_Event.CustomEventData.count >= 5) {
						Action_LoadCampaignTopClubRankings(
							TL::ToInteger(_Event.CustomEventData[0]),
							TL::ToInteger(_Event.CustomEventData[1]),
							_Event.CustomEventData[2],
							TL::ToInteger(_Event.CustomEventData[3]),
							TL::ToInteger(_Event.CustomEventData[4])
						);
					}
				}
				case C_Action_LoadMapTopGlobalRankings: {
					if (_Event.CustomEventData.count >= 3) {
						Action_LoadMapTopGlobalRankings(_Event.CustomEventData[0], _Event.CustomEventData[1], TL::ToInteger(_Event.CustomEventData[2]));
					}
				}
				case C_Action_LoadMapTopClubRankings: {
					if (_Event.CustomEventData.count >= 4) {
						Action_LoadMapTopClubRankings(_Event.CustomEventData[0], _Event.CustomEventData[1], TL::ToInteger(_Event.CustomEventData[2]), TL::ToInteger(_Event.CustomEventData[3]));
					}
				}
				case C_Action_GetMapLevels: {
					if (_Event.CustomEventData.count >= 3) {
						Action_GetMapLevels(
							_Event.CustomEventData[0],
							_Event.CustomEventData[1],
							TL::ToInteger(_Event.CustomEventData[2])
						);
					}
				}
				case C_Action_LoadOfflineCampaign: {
					Action_LoadOfflineCampaign();
				}
				case C_Action_LoadLiveQuarterlyCampaign: {
					if (_Event.CustomEventData.count >= 1) {
						Action_LoadLiveQuarterlyCampaign(TL::ToInteger(_Event.CustomEventData[0]));
					} else {
						Action_LoadLiveQuarterlyCampaign();
					}
				}
				case C_Action_LoadLiveMonthlyCampaign: {
					if (_Event.CustomEventData.count >= 1) {
						Action_LoadLiveMonthlyCampaign(TL::ToInteger(_Event.CustomEventData[0]));
					} else {
						Action_LoadLiveMonthlyCampaign();
					}
				}
				case C_Action_LoadMyQuarterlyCampaignsRankings: {
					if (_Event.CustomEventData.count >= 3) {
						Action_LoadMyQuarterlyCampaignsRankings(
							_Event.CustomEventData[0],
							TL::ToInteger(_Event.CustomEventData[1]),
							TL::ToInteger(_Event.CustomEventData[2])
						);
					}
				}
				case C_Action_BustCache_MapPlayerGlobalRankings: {
					if (_Event.CustomEventData.count >= 2) {
						Action_BustCache_MapPlayerGlobalRankings(
							TL::ToInteger(_Event.CustomEventData[0]),
							_Event.CustomEventData[1]
						);
					}
				}
				case C_Action_BustCache_MapPlayerClubRankings: {
					if (_Event.CustomEventData.count >= 3) {
						Action_BustCache_MapPlayerClubRankings(
							TL::ToInteger(_Event.CustomEventData[0]),
							_Event.CustomEventData[1],
							TL::ToInteger(_Event.CustomEventData[2])
						);
					}
				}
				case C_Action_BustCache_MapTopGlobalRankings: {
					if (_Event.CustomEventData.count >= 2) {
						Action_BustCache_MapTopGlobalRankings(
							TL::ToInteger(_Event.CustomEventData[0]),
							_Event.CustomEventData[1]
						);
					}
				}
				case C_Action_BustCache_MapTopClubRankings: {
					if (_Event.CustomEventData.count >= 3) {
						Action_BustCache_MapTopClubRankings(
							TL::ToInteger(_Event.CustomEventData[0]),
							_Event.CustomEventData[1],
							TL::ToInteger(_Event.CustomEventData[2])
						);
					}
				}
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Process events
Void ProcessEvents(CNod _Context) {
	switchtype (_Context as Context) {
		case CManiaAppTitle: {
			foreach (Event in Context.PendingEvents) {
				ProcessEvent(Event);
			}
		}
		case CManiaAppPlayground: {
			foreach (Event in Context.PendingEvents) {
				ProcessEvent(Event);
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the Campaign store
Void Yield() {
	// Campaigns paging request
	declare TmpRequestList = G_Request_CampaignsPagingList;
	foreach (CampaignType => Request in TmpRequestList) {
		if (Http::IsInitialized(G_Request_CampaignsPagingList[CampaignType])) {
			G_Request_CampaignsPagingList[CampaignType] = Http::Update(G_Request_CampaignsPagingList[CampaignType]);
			if (!Http::IsRunning(G_Request_CampaignsPagingList[CampaignType])) {
				if (Http::IsSuccess(G_Request_CampaignsPagingList[CampaignType])) {
					declare Response = CampaignAPI::GetResponseFromGetCampaignList(G_Request_CampaignsPagingList[CampaignType]);
					
					if (Response.CampaignsTotal > 0) {
						declare K_State TMNext_CampaignStore_State for System = C_State_Null;
						TMNext_CampaignStore_State = Mutation_SetCampaigns(
							TMNext_CampaignStore_State,
							CampaignType,
							Response.CampaignsTotal,
							Response.CampaignList
						);
					} else {
						Store::SendEvent(C_StoreId, C_Event_CampaignListEmpty, [""^CampaignType]);
					}
				} else {
					declare Text[Integer] CampaignTypeLabels = CampaignStruct::C_CampaignType_Labels;
					declare Text CampaignTypeLabel = CampaignTypeLabels.get(CampaignType, CampaignTypeLabels[CampaignStruct::C_CampaignType_None]);
					//L16N [CampaignPagingRequest] %1 goes for the type of error
					declare ErrorMessage = TL::Compose(
						_("Error while fetching campaigns of type %1. Please try again. (Error code: %2)"),
						TL::ToLowerCase(CampaignTypeLabel),
						""^Http::GetStatusCode(G_Request_CampaignsPagingList[CampaignType])
					);
					Store::SendEvent(C_StoreId, C_Event_CampaignListUpdateError, [""^CampaignType, ErrorMessage]);
				}
				Http::Destroy(G_Request_CampaignsPagingList[CampaignType]);
				G_Request_CampaignsPagingList.removekey(CampaignType);
			}
		}
	}

	// Campaign request
	declare TmpCampaignRequestList = G_Request_CampaignList;
	foreach (CampaignId => Request in TmpCampaignRequestList) {
		if (Http::IsInitialized(G_Request_CampaignList[CampaignId].Request)) {
			G_Request_CampaignList[CampaignId].Request = Http::Update(G_Request_CampaignList[CampaignId].Request);
			if (!Http::IsRunning(G_Request_CampaignList[CampaignId].Request)) {
				if (Http::IsSuccess(G_Request_CampaignList[CampaignId].Request)) {
					declare CampaignStruct::LibCampaignStruct_K_Campaign CampaignResponse = ClubAPI::GetResponseFromGetClubCampaign(G_Request_CampaignList[CampaignId].Request);

					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					declare Campaign = GetCampaignFromId(TMNext_CampaignStore_State, CampaignId);
					CampaignResponse.IsFetched = Campaign.IsFetched;
					CampaignResponse.IsLoaded = Campaign.IsLoaded;
					TMNext_CampaignStore_State = Mutation_SetLoadedCampaign(
						TMNext_CampaignStore_State,
						CampaignResponse
					);
				} else {
					declare ErrorMessage = TL::Compose(
						//L16N [CampaignRequest] %1 goes for the type of error
						_("Error while retrieving the campaign. Please try again. (Error code: %1)"),
						""^Http::GetStatusCode(G_Request_CampaignList[CampaignId].Request)
					);
					Store::SendEvent(C_StoreId, C_Event_CampaignUpdateFailed, [""^CampaignId, ErrorMessage]);
				}
				Http::Destroy(G_Request_CampaignList[CampaignId].Request);
				G_Request_CampaignList.removekey(CampaignId);
			}
		}
	}

	// All Club Campaigns paging request
	if (Http::IsInitialized(G_Request_AllClubCampaignsPaging)) {
		G_Request_AllClubCampaignsPaging = Http::Update(G_Request_AllClubCampaignsPaging);
		if (!Http::IsRunning(G_Request_AllClubCampaignsPaging)) {
			if (Http::IsSuccess(G_Request_AllClubCampaignsPaging)) {
				declare Response = ClubAPI::GetResponseFromGetClubCampaignList(G_Request_AllClubCampaignsPaging);
				
				declare K_State TMNext_CampaignStore_State for System = C_State_Null;
				TMNext_CampaignStore_State = Mutation_SetAllClubCampaigns(
					TMNext_CampaignStore_State,
					Response.CampaignsTotal,
					Response.CampaignList
				);
			}
			G_Request_AllClubCampaignsPaging = Http::Destroy(G_Request_AllClubCampaignsPaging);
		}
	}

	// Monthly Campaigns paging request
	if (Http::IsInitialized(G_Request_MonthlyCampaignsPaging)) {
		G_Request_MonthlyCampaignsPaging = Http::Update(G_Request_MonthlyCampaignsPaging);
		if (!Http::IsRunning(G_Request_MonthlyCampaignsPaging)) {
			if (Http::IsSuccess(G_Request_MonthlyCampaignsPaging)) {
				declare Response = CampaignAPI::GetResponseFromGetMonthlyCampaignList(G_Request_MonthlyCampaignsPaging, False);
				if (Response.CampaignsTotal > 0) {
					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					TMNext_CampaignStore_State = Mutation_SetMonthlyCampaigns(
						TMNext_CampaignStore_State,
						Response.CampaignsTotal,
						Response.CampaignList,
						False
					);
				} else {
					Store::SendEvent(C_StoreId, C_Event_CampaignListEmpty, [""^CampaignStruct::C_CampaignType_Monthly]);
				}
			} else {
				declare Text[Integer] CampaignTypeLabels = CampaignStruct::C_CampaignType_Labels;
				declare Text CampaignTypeLabel = CampaignTypeLabels[CampaignStruct::C_CampaignType_Monthly];
				declare ErrorMessage = TL::Compose(
					//L16N [MonthlyCampaignPagingRequest] %1 goes for the type of error
					_("Error while fetching campaigns of type %1. Please try again. (Error code: %2)"),
					TL::ToLowerCase(CampaignTypeLabel),
					""^Http::GetStatusCode(G_Request_MonthlyCampaignsPaging)
				);
				Store::SendEvent(C_StoreId, C_Event_CampaignListUpdateError, [""^CampaignStruct::C_CampaignType_Monthly, ErrorMessage]);
			}
			G_Request_MonthlyCampaignsPaging = Http::Destroy(G_Request_MonthlyCampaignsPaging);
		}
	}

	// Royal Campaigns paging request
	if (Http::IsInitialized(G_Request_RoyalCampaignsPaging)) {
		G_Request_RoyalCampaignsPaging = Http::Update(G_Request_RoyalCampaignsPaging);
		if (!Http::IsRunning(G_Request_RoyalCampaignsPaging)) {
			if (Http::IsSuccess(G_Request_RoyalCampaignsPaging)) {
				declare Response = CampaignAPI::GetResponseFromGetMonthlyCampaignList(G_Request_RoyalCampaignsPaging, True);
				if (Response.CampaignsTotal > 0) {
					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					TMNext_CampaignStore_State = Mutation_SetMonthlyCampaigns(
						TMNext_CampaignStore_State,
						Response.CampaignsTotal,
						Response.CampaignList,
						True
					);
				} else {
					Store::SendEvent(C_StoreId, C_Event_CampaignListEmpty, [""^CampaignStruct::C_CampaignType_Royal]);
				}
			} else {
				declare Text[Integer] CampaignTypeLabels = CampaignStruct::C_CampaignType_Labels;
				declare Text CampaignTypeLabel = CampaignTypeLabels[CampaignStruct::C_CampaignType_Royal];
				declare ErrorMessage = TL::Compose(
					//L16N [RoyalCampaignPagingRequest] %1 goes for the type of error
					_("Error while fetching campaigns of type %1. Please try again. (Error code: %2)"),
					TL::ToLowerCase(CampaignTypeLabel),
					""^Http::GetStatusCode(G_Request_RoyalCampaignsPaging)
				);
				Store::SendEvent(C_StoreId, C_Event_CampaignListUpdateError, [""^CampaignStruct::C_CampaignType_Royal, ErrorMessage]);
			}
			G_Request_RoyalCampaignsPaging = Http::Destroy(G_Request_RoyalCampaignsPaging);
		}
	}

	// Clubs Campaigns paging request
	declare TmpClubsRequestList = G_Request_ClubsCampaignsPagingList;
	foreach (ClubId => Request in TmpClubsRequestList) {
		if (Http::IsInitialized(G_Request_ClubsCampaignsPagingList[ClubId])) {
			G_Request_ClubsCampaignsPagingList[ClubId] = Http::Update(G_Request_ClubsCampaignsPagingList[ClubId]);
			if (!Http::IsRunning(G_Request_ClubsCampaignsPagingList[ClubId])) {
				if (Http::IsSuccess(G_Request_ClubsCampaignsPagingList[ClubId])) {
					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					declare Response = ClubAPI::GetResponseFromGetClubCampaignList(G_Request_ClubsCampaignsPagingList[ClubId]);

					TMNext_CampaignStore_State = Mutation_SetClubsCampaigns(
						TMNext_CampaignStore_State,
						ClubId,
						Response.CampaignsTotal,
						Response.CampaignList
					);
				} else {
					Store::SendEvent(C_StoreId, C_Event_ClubsCampaignListError, [""^ClubId]);
				}
				Http::Destroy(G_Request_ClubsCampaignsPagingList[ClubId]);
				G_Request_ClubsCampaignsPagingList.removekey(ClubId);
			}
		}
	}

	// NadeoServices map list and load score requests
	if (G_LoadingCampaignRequestList.count > 0) {
		declare TmpRequestList = G_LoadingCampaignRequestList;
		foreach (CampaignId => LoadingCampaignRequest in TmpRequestList) {
			if (Task::IsInitialized(G_LoadingCampaignRequestList[CampaignId].Task_MapList)) {
				G_LoadingCampaignRequestList[CampaignId].Task_MapList = Task::Update(G_LoadingCampaignRequestList[CampaignId].Task_MapList);
				if (!Task::IsRunning(G_LoadingCampaignRequestList[CampaignId].Task_MapList)) {
					declare CTaskResult_NSMapList SourceTask = Task::GetSourceTask_NSMapList(G_LoadingCampaignRequestList[CampaignId].Task_MapList);
					if (Task::IsSuccess(G_LoadingCampaignRequestList[CampaignId].Task_MapList) && SourceTask != Null) {
						declare CNadeoServicesMap[] NSMapList;
						declare Text[] MapThumbnailList;
						foreach (NSMap in SourceTask.MapList) {
							NSMapList.add(NSMap);
							MapThumbnailList.add(NSMap.ThumbnailUrl);
							if (MapThumbnailList.count >= 5) {
								Store::SendEvent(C_StoreId, C_Event_PreloadImages, MapThumbnailList);
								MapThumbnailList = [];
							}
						}
						if (MapThumbnailList.count > 0) Store::SendEvent(C_StoreId, C_Event_PreloadImages, MapThumbnailList);

						declare K_State TMNext_CampaignStore_State for System = C_State_Null;
						TMNext_CampaignStore_State = Mutation_UpdateCampaignPlaylist(TMNext_CampaignStore_State, CampaignId, NSMapList);
					} else {
						declare Text ErrorMessage = TL::Compose(
							//L16N Do not translate "Nadeo Services". %1 will be replaced by an error code, e.g. "Error code: 500"
							_("Error while fetching track list from Nadeo Services. Please try again. (Error code: %1)"),
							Task::GetSourceTaskError(G_LoadingCampaignRequestList[CampaignId].Task_MapList).Code
						);
						declare K_State TMNext_CampaignStore_State for System = C_State_Null;
						TMNext_CampaignStore_State = Mutation_UpdateMapsLoadStatus(TMNext_CampaignStore_State, CampaignId);
						declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = GetCampaignFromId(TMNext_CampaignStore_State, CampaignId);
						Store::SendEvent(C_StoreId, C_Event_CampaignListUpdateError, [""^Campaign.Type, ErrorMessage]);
					}
					G_LoadingCampaignRequestList[CampaignId].Task_MapList = Task::Destroy(G_LoadingCampaignRequestList[CampaignId].Task_MapList);
				}
			}

			if (Task::IsInitialized(G_LoadingCampaignRequestList[CampaignId].Task_LoadScore)) {
				G_LoadingCampaignRequestList[CampaignId].Task_LoadScore = Task::Update(G_LoadingCampaignRequestList[CampaignId].Task_LoadScore);
				if (!Task::IsRunning(G_LoadingCampaignRequestList[CampaignId].Task_LoadScore)) {
					if (!Task::IsSuccess(G_LoadingCampaignRequestList[CampaignId].Task_LoadScore)) {
						declare ErrorMessage = TL::Compose(
							//L16N Do not translate "Nadeo Services". %1 will be replaced by an error code, e.g. "Error code: 500"
							_("Error while retrieving scores from Nadeo Services. Please try again. (Error code: %1)"),
							Task::GetSourceTaskError(G_LoadingCampaignRequestList[CampaignId].Task_LoadScore).Code
						);
						declare K_State TMNext_CampaignStore_State for System = C_State_Null;
						declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = GetCampaignFromId(TMNext_CampaignStore_State, CampaignId);
						Store::SendEvent(C_StoreId, C_Event_CampaignListUpdateError, [""^Campaign.Type, ErrorMessage]);
					}
					G_LoadingCampaignRequestList[CampaignId].Task_LoadScore = Task::Destroy(G_LoadingCampaignRequestList[CampaignId].Task_LoadScore);
				}
			}

			if (Http::IsInitialized(G_LoadingCampaignRequestList[CampaignId].GetClubRequest)) {
				G_LoadingCampaignRequestList[CampaignId].GetClubRequest = Http::Update(G_LoadingCampaignRequestList[CampaignId].GetClubRequest);
				if (!Http::IsRunning(G_LoadingCampaignRequestList[CampaignId].GetClubRequest)) {
					if (Http::IsSuccess(G_LoadingCampaignRequestList[CampaignId].GetClubRequest)) {
						declare Response = ClubAPI::GetResponseFromGetClub(G_LoadingCampaignRequestList[CampaignId].GetClubRequest);

						declare K_State TMNext_CampaignStore_State for System = C_State_Null;
						TMNext_CampaignStore_State = Mutation_UpdateCampaignClub(TMNext_CampaignStore_State, CampaignId, Response);
					} else {
						declare ErrorMessage = TL::Compose(
							//L16N %1 will be replaced by an error code, e.g. "Error code: 500"
							_("Error while retrieving the club of the campaign. Please try again. (Error code: %1)"),
							""^Http::GetStatusCode(G_LoadingCampaignRequestList[CampaignId].GetClubRequest)
						);
						declare K_State TMNext_CampaignStore_State for System = C_State_Null;
						declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = GetCampaignFromId(TMNext_CampaignStore_State, CampaignId);
						Store::SendEvent(C_StoreId, C_Event_CampaignListUpdateError, [""^Campaign.Type, ErrorMessage]);
					}
					G_LoadingCampaignRequestList[CampaignId].GetClubRequest = Http::Destroy(G_LoadingCampaignRequestList[CampaignId].GetClubRequest);
				}
			}

			if (
				!Task::IsInitialized(G_LoadingCampaignRequestList[CampaignId].Task_MapList) &&
				!Task::IsInitialized(G_LoadingCampaignRequestList[CampaignId].Task_LoadScore) &&
				!Http::IsInitialized(G_LoadingCampaignRequestList[CampaignId].GetClubRequest)
			) {
				G_LoadingCampaignRequestList.removekey(CampaignId);
				declare K_State TMNext_CampaignStore_State for System = C_State_Null;
				TMNext_CampaignStore_State = Mutation_SetCampaignIsLoaded(TMNext_CampaignStore_State, CampaignId);
			}
			if (G_LoadingCampaignRequestList.count == 0) {
				Store::SendEvent(C_StoreId, C_Event_AllCampaignsLoadComplete, []);
			}
		}
	}

	// NadeoServices map list and load score for monthly campaign requests
	if (G_LoadingMonthlyCampaignRequestList.count > 0) {
		declare TmpRequestList = G_LoadingMonthlyCampaignRequestList;
		foreach (MonthlyCampaignId => LoadingMonthlyCampaignRequest in TmpRequestList) {
			if (Task::IsInitialized(G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].Task_MapList)) {
				declare Task = Task::Update(G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].Task_MapList);
				if (!Task::IsRunning(Task)) {
					if (Task::IsSuccess(Task)) {
						declare CNadeoServicesMap[Text] NSMapList;
						declare Text[] MapThumbnailList;
						declare CTaskResult_NSMapList SourceTask = Task::GetSourceTask_NSMapList(Task);
						foreach (NSMap in SourceTask.MapList) {
							NSMapList[NSMap.Uid] <=> NSMap;
							MapThumbnailList.add(NSMap.ThumbnailUrl);
							if (MapThumbnailList.count >= 5) {
								Store::SendEvent(C_StoreId, C_Event_PreloadImages, MapThumbnailList);
								MapThumbnailList = [];
							}
						}
						if (MapThumbnailList.count > 0) Store::SendEvent(C_StoreId, C_Event_PreloadImages, MapThumbnailList);

						declare K_State TMNext_CampaignStore_State for System = C_State_Null;
						TMNext_CampaignStore_State = Mutation_UpdateMonthlyCampaignPlaylist(TMNext_CampaignStore_State, MonthlyCampaignId, NSMapList);
					} else {
						declare ErrorMessage = TL::Compose(
							//L16N Do not translate "Nadeo Services". %1 will be replaced by an error code, e.g. "Error code: 500"
							_("Error while fetching track list from Nadeo Services. Please try again. (Error code: %1)"),
							Task::GetSourceTaskError(Task).Code
						);
						Store::SendEvent(C_StoreId, C_Event_CampaignListUpdateError, [""^CampaignStruct::C_CampaignType_Monthly, ErrorMessage]);
						G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].MapsLoadingSucceed = False;
					}
					Task = Task::Destroy(Task);
				}
				G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].Task_MapList = Task;
			}

			if (Task::IsInitialized(G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].Task_LoadScoreList)) {
				declare Task = Task::Update(G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].Task_LoadScoreList);
				if (!Task::IsRunning(Task)) {
					if (!Task::IsSuccess(Task)) {
						declare ErrorMessage = TL::Compose(
							//L16N Do not translate "Nadeo Services". %1 will be replaced by an error code, e.g. "Error code: 500"
							_("Error while retrieving scores from Nadeo Services. Please try again. (Error code: %1)"),
							Task::GetSourceTaskError(Task).Code
						);
						Store::SendEvent(C_StoreId, C_Event_CampaignListUpdateError, [""^CampaignStruct::C_CampaignType_Monthly, ErrorMessage, C_ErrorType_ScoresNotLoaded]);
						G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].MapsLoadingSucceed = False;
					}
					Task = Task::Destroy(Task);
				}
				G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].Task_LoadScoreList = Task;
			}

			if (
				!Task::IsInitialized(G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].Task_MapList) &&
				!Task::IsInitialized(G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].Task_LoadScoreList)
			) {
				// If there was no maps to load, e.g. new monthly campaign with the first map of the month unlocked in less than 24 hours
				// Update the monthly campaign list manually because the Task_MapList task was not created
				if (G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].LoadedMapUids.count <= 0) {
					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					TMNext_CampaignStore_State = Mutation_UpdateMonthlyCampaignPlaylist(TMNext_CampaignStore_State, MonthlyCampaignId, []);
				}

				declare K_State TMNext_CampaignStore_State for System = C_State_Null;
				TMNext_CampaignStore_State = Mutation_SetMonthlyCampaignIsLoaded(
					TMNext_CampaignStore_State,
					MonthlyCampaignId,
					G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].LoadedMapUids,
					G_LoadingMonthlyCampaignRequestList[MonthlyCampaignId].MapsLoadingSucceed
				);
				G_LoadingMonthlyCampaignRequestList.removekey(MonthlyCampaignId);
			}
		}
	}

	// NadeoServices map list and load score for royal campaign requests
	if (G_LoadingRoyalCampaignRequestList.count > 0) {
		declare TmpRequestList = G_LoadingRoyalCampaignRequestList;
		foreach (RoyalCampaignId => LoadingRoyalCampaignRequest in TmpRequestList) {
			if (Task::IsInitialized(G_LoadingRoyalCampaignRequestList[RoyalCampaignId].Task_MapList)) {
				declare Task = Task::Update(G_LoadingRoyalCampaignRequestList[RoyalCampaignId].Task_MapList);
				if (!Task::IsRunning(Task)) {
					if (Task::IsSuccess(Task)) {
						declare CNadeoServicesMap[Text] NSMapList;
						declare Text[] MapThumbnailList;
						declare CTaskResult_NSMapList SourceTask = Task::GetSourceTask_NSMapList(Task);
						foreach (NSMap in SourceTask.MapList) {
							NSMapList[NSMap.Uid] <=> NSMap;
							MapThumbnailList.add(NSMap.ThumbnailUrl);
							if (MapThumbnailList.count >= 5) {
								Store::SendEvent(C_StoreId, C_Event_PreloadImages, MapThumbnailList);
								MapThumbnailList = [];
							}
						}
						if (MapThumbnailList.count > 0) Store::SendEvent(C_StoreId, C_Event_PreloadImages, MapThumbnailList);

						declare K_State TMNext_CampaignStore_State for System = C_State_Null;
						TMNext_CampaignStore_State = Mutation_UpdateRoyalCampaignPlaylist(TMNext_CampaignStore_State, RoyalCampaignId, NSMapList);
					} else {
						declare ErrorMessage = TL::Compose(
							//L16N Do not translate "Nadeo Services". %1 will be replaced by an error code, e.g. "Error code: 500"
							_("Error while fetching track list from Nadeo Services. Please try again. (Error code: %1)"),
							Task::GetSourceTaskError(Task).Code
						);
						Store::SendEvent(C_StoreId, C_Event_CampaignListUpdateError, [""^CampaignStruct::C_CampaignType_Royal, ErrorMessage]);
						G_LoadingRoyalCampaignRequestList[RoyalCampaignId].MapsLoadingSucceed = False;
					}
					Task = Task::Destroy(Task);
				}
				G_LoadingRoyalCampaignRequestList[RoyalCampaignId].Task_MapList = Task;
			}

			if (!Task::IsInitialized(G_LoadingRoyalCampaignRequestList[RoyalCampaignId].Task_MapList)) {
				// If there was no maps to load, e.g. new royal campaign with the first map of the month unlocked in less than 24 hours
				// Update the royal campaign list manually because the Task_MapList task was not created
				if (G_LoadingRoyalCampaignRequestList[RoyalCampaignId].LoadedMapUids.count <= 0) {
					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					TMNext_CampaignStore_State = Mutation_UpdateRoyalCampaignPlaylist(TMNext_CampaignStore_State, RoyalCampaignId, []);
				}

				declare K_State TMNext_CampaignStore_State for System = C_State_Null;
				TMNext_CampaignStore_State = Mutation_SetRoyalCampaignIsLoaded(
					TMNext_CampaignStore_State,
					RoyalCampaignId,
					G_LoadingRoyalCampaignRequestList[RoyalCampaignId].LoadedMapUids,
					G_LoadingRoyalCampaignRequestList[RoyalCampaignId].MapsLoadingSucceed
				);
				G_LoadingRoyalCampaignRequestList.removekey(RoyalCampaignId);
			}
		}
	}

	// Get map records request
	if (G_Request_GetMapsRecordsList.count > 0) {
		declare TmpMapsRecordsList = G_Request_GetMapsRecordsList;
		foreach (GroupUid => Request in TmpMapsRecordsList) {
			if (Http::IsInitialized(G_Request_GetMapsRecordsList[GroupUid])) {
				G_Request_GetMapsRecordsList[GroupUid] = Http::Update(G_Request_GetMapsRecordsList[GroupUid]);
				if (!Http::IsRunning(G_Request_GetMapsRecordsList[GroupUid])) {
					if (Http::IsSuccess(G_Request_GetMapsRecordsList[GroupUid])) {
						declare K_State TMNext_CampaignStore_State for System = C_State_Null;
						TMNext_CampaignStore_State = Mutation_SetMapsRecords(
							TMNext_CampaignStore_State,
							GroupUid,
							LeaderboardAPI::GetResponseFromGetPlayerAllMapsRankings(G_Request_GetMapsRecordsList[GroupUid])
						);
					}
					Http::Destroy(G_Request_GetMapsRecordsList[GroupUid]);
					G_Request_GetMapsRecordsList.removekey(GroupUid);
				}
			}
		}
	}

	// Get player map rankings request
	if (Http::IsInitialized(G_Request_GetPlayerMapRankings)) {
		G_Request_GetPlayerMapRankings = Http::Update(G_Request_GetPlayerMapRankings);
		if (!Http::IsRunning(G_Request_GetPlayerMapRankings)) {
			declare K_State TMNext_CampaignStore_State for System = C_State_Null;
			if (Http::IsSuccess(G_Request_GetPlayerMapRankings)) {
				TMNext_CampaignStore_State = Mutation_SetMapRecords(
					TMNext_CampaignStore_State,
					Http::GetMetadata(G_Request_GetPlayerMapRankings, "LeaderboardGroupUid"),
					LeaderboardAPI::GetResponseFromGetPlayerMapRankings(G_Request_GetPlayerMapRankings)
				);
			}
			G_Request_GetPlayerMapRankings = Http::ResetMetadata(G_Request_GetPlayerMapRankings);
			G_Request_GetPlayerMapRankings = Http::Destroy(G_Request_GetPlayerMapRankings);
		}
	}

	// Result of the player's global ranking request
	if (G_Request_GetPlayerMapGroupListGlobalRankings.count > 0) {
		declare TmpPlayerMapGroupListRankings = G_Request_GetPlayerMapGroupListGlobalRankings;
		foreach (Key => MapGroupListRankingsRequest in TmpPlayerMapGroupListRankings) {
			if (Http::IsInitialized(MapGroupListRankingsRequest.Request)) {
				declare UpdatedRequest = Http::Update(MapGroupListRankingsRequest.Request);
				if (!Http::IsRunning(UpdatedRequest)) {
					if (Http::IsSuccess(UpdatedRequest)) {
						declare K_State TMNext_CampaignStore_State for System = C_State_Null;
						TMNext_CampaignStore_State = Mutation_SetMapGroupListGlobalRankings(
							TMNext_CampaignStore_State,
							MapGroupListRankingsRequest.MapGroupList,
							LeaderboardAPI::GetResponseFromGetPlayerMapGroupUidListRankings(UpdatedRequest)
						);
					} else {
						Store::SendEvent(C_StoreId, C_Event_MapPlayerGlobalRankingsUpdateError, []);
					}
					Http::Destroy(UpdatedRequest);
					G_Request_GetPlayerMapGroupListGlobalRankings.removekey(Key);
				} else {
					G_Request_GetPlayerMapGroupListGlobalRankings[Key].Request = UpdatedRequest;
				}
			}
		}
	}

	// Get player maps ranking in club requests
	if (G_Request_GetMapsPositionsListInClub.count > 0) {
		declare TmpRequestList = G_Request_GetMapsPositionsListInClub;
		foreach (GroupUid => Requests in TmpRequestList) {
			foreach (ClubId => Request in Requests) {
				if (Http::IsInitialized(Request)) {
					G_Request_GetMapsPositionsListInClub[GroupUid][ClubId] = Http::Update(Request);
					if (!Http::IsRunning(G_Request_GetMapsPositionsListInClub[GroupUid][ClubId])) {
						if (Http::IsSuccess(G_Request_GetMapsPositionsListInClub[GroupUid][ClubId])) {
							declare K_State TMNext_CampaignStore_State for System = C_State_Null;
							TMNext_CampaignStore_State = Mutation_SetMapsClubRankings(
								TMNext_CampaignStore_State,
								GroupUid,
								ClubId,
								LeaderboardAPI::GetResponseFromGetPlayerAllMapsRankingsInAClub(G_Request_GetMapsPositionsListInClub[GroupUid][ClubId])
							);
						} else {
							declare Text ErrorMessage = TL::Compose(
								//L16N %1 will be replaced by an error code, e.g. "Error code: 500"
								_("Error while fetching player position on tracks in club rankings. Please try again. (Error code: %1)"),
								""^Http::GetStatusCode(G_Request_GetMapsPositionsListInClub[GroupUid][ClubId])
							);
							Store::SendEvent(C_StoreId, C_Event_MapPlayerClubRankingsUpdateError, [ErrorMessage]);
						}
						Http::Destroy(G_Request_GetMapsPositionsListInClub[GroupUid][ClubId]);
						G_Request_GetMapsPositionsListInClub[GroupUid].removekey(ClubId);
						if (G_Request_GetMapsPositionsListInClub[GroupUid].count == 0) {
							G_Request_GetMapsPositionsListInClub.removekey(GroupUid);
						}
					}
				}
			}
		}
	}

	// Get player map rankings in club requests
	if (Http::IsInitialized(G_Request_GetPlayerMapRankingsInClub)) {
		G_Request_GetPlayerMapRankingsInClub = Http::Update(G_Request_GetPlayerMapRankingsInClub);
		if (!Http::IsRunning(G_Request_GetPlayerMapRankingsInClub)) {
			declare K_State TMNext_CampaignStore_State for System = C_State_Null;
			if (Http::IsSuccess(G_Request_GetPlayerMapRankingsInClub)) {
				TMNext_CampaignStore_State = Mutation_SetMapClubRankings(
					TMNext_CampaignStore_State,
					Http::GetMetadata(G_Request_GetPlayerMapRankingsInClub, "LeaderboardGroupUid"),
					TL::ToInteger(Http::GetMetadata(G_Request_GetPlayerMapRankings, "ClubId")),
					LeaderboardAPI::GetResponseFromGetPlayerMapRankingInClub(G_Request_GetPlayerMapRankingsInClub)
				);
			}
			G_Request_GetPlayerMapRankingsInClub = Http::ResetMetadata(G_Request_GetPlayerMapRankingsInClub);
			G_Request_GetPlayerMapRankingsInClub = Http::Destroy(G_Request_GetPlayerMapRankingsInClub);
		}
	}
	
	// Result of the player's club ranking request
	if (G_Request_GetPlayerMapGroupListClubRankings.count > 0) {
		declare TmpPlayerMapGroupListClubRankings = G_Request_GetPlayerMapGroupListClubRankings;
		foreach (Key => Requests in TmpPlayerMapGroupListClubRankings) {
			foreach (ClubId => MapGroupListRankingsRequest in Requests) {
				if (Http::IsInitialized(MapGroupListRankingsRequest.Request)) {
					declare UpdatedRequest = Http::Update(MapGroupListRankingsRequest.Request);
					if (!Http::IsRunning(UpdatedRequest)) {
						if (Http::IsSuccess(UpdatedRequest)) {
							declare K_State TMNext_CampaignStore_State for System = C_State_Null;
							TMNext_CampaignStore_State = Mutation_SetMapGroupListClubRankings(
								TMNext_CampaignStore_State,
								MapGroupListRankingsRequest.MapGroupList,
								ClubId,
								LeaderboardAPI::GetResponseFromGetPlayerMapGroupUidListRankingsInAClub(UpdatedRequest)
							);
						} else {
							declare Text ErrorMessage = TL::Compose(
								//L16N %1 will be replaced by an error code, e.g. "Error code: 500"
								_("Error while fetching player position on tracks in club rankings. Please try again. (Error code: %1)"),
								""^Http::GetStatusCode(UpdatedRequest)
							);
							Store::SendEvent(C_StoreId, C_Event_MapPlayerClubRankingsUpdateError, [ErrorMessage]);
						}
						Http::Destroy(UpdatedRequest);
						G_Request_GetPlayerMapGroupListClubRankings[Key].removekey(ClubId);
						if (G_Request_GetPlayerMapGroupListClubRankings[Key].count == 0) {
							G_Request_GetPlayerMapGroupListClubRankings.removekey(Key);
						}
					} else {
						G_Request_GetPlayerMapGroupListClubRankings[Key][ClubId].Request = UpdatedRequest;
					}
				}
			}
		}
	}

	// Get map top ranking request
	if (G_Request_GetMapTopRankingsList.count > 0) {
		declare TmpRequestList = G_Request_GetMapTopRankingsList;
		foreach (MapUid => StructRequest in TmpRequestList) {
			if (Http::IsInitialized(StructRequest.Request)) {
				G_Request_GetMapTopRankingsList[MapUid].Request = Http::Update(StructRequest.Request);
				if (!Http::IsRunning(G_Request_GetMapTopRankingsList[MapUid].Request)) {
					if (Http::IsSuccess(G_Request_GetMapTopRankingsList[MapUid].Request)) {
						declare Response = LeaderboardAPI::GetResponseFromGetMapTopRankings(G_Request_GetMapTopRankingsList[MapUid].Request);

						declare K_State TMNext_CampaignStore_State for System = C_State_Null;
						TMNext_CampaignStore_State = Mutation_SetMapTopRankings(
							TMNext_CampaignStore_State,
							MapUid,
							Response
						);

						declare Text[] WebServicesUserIdList;
						foreach (TopByZone in Response.TopRankings) {
							foreach (TopScore in TopByZone.Tops) {
								WebServicesUserIdList.add(TopScore.AccountId);
							}
						}
						G_Request_GetMapTopRankingsList[MapUid].Task_GetDisplayName = Task::Create(UserMgr, UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), WebServicesUserIdList));
					}
					G_Request_GetMapTopRankingsList[MapUid].Request = Http::Destroy(G_Request_GetMapTopRankingsList[MapUid].Request);
				}
			}

			if (Task::IsInitialized(G_Request_GetMapTopRankingsList[MapUid].Task_GetDisplayName)) {
				G_Request_GetMapTopRankingsList[MapUid].Task_GetDisplayName = Task::Update(G_Request_GetMapTopRankingsList[MapUid].Task_GetDisplayName);
				if (!Task::IsRunning(G_Request_GetMapTopRankingsList[MapUid].Task_GetDisplayName)) {
					if (Task::IsSuccess(G_Request_GetMapTopRankingsList[MapUid].Task_GetDisplayName)) {
						declare K_State TMNext_CampaignStore_State for System = C_State_Null;
						TMNext_CampaignStore_State = Mutation_UpdateMapTopRankingsDisplayNames(
							TMNext_CampaignStore_State,
							MapUid,
							G_Request_GetMapTopRankingsList[MapUid].LeaderboardGroupUid
						);
					}
					G_Request_GetMapTopRankingsList[MapUid].Task_GetDisplayName = Task::Destroy(G_Request_GetMapTopRankingsList[MapUid].Task_GetDisplayName);
				}
			}

			if (
				!Http::IsInitialized(G_Request_GetMapTopRankingsList[MapUid].Request) &&
				!Task::IsInitialized(G_Request_GetMapTopRankingsList[MapUid].Task_GetDisplayName)
			) {
				G_Request_GetMapTopRankingsList.removekey(MapUid);
				Store::SendEvent(C_StoreId, C_Event_MapTopGlobalRankingsUpdate, [MapUid]);
			}
		}
	}

	// Get map top rankings in club requests
	if (G_Request_GetMapTopRankingsInClubList.count > 0) {
		declare TmpRequestList = G_Request_GetMapTopRankingsInClubList;
		foreach (MapUid => Requests in TmpRequestList) {
			foreach (ClubId => Request in Requests) {
				if (Http::IsInitialized(Request.Request)) {
					G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Request = Http::Update(Request.Request);
					if (!Http::IsRunning(G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Request)) {
						if (Http::IsSuccess(G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Request)) {
							declare Response = LeaderboardAPI::GetResponseFromGetMapTopRankingsInClub(G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Request);
							declare K_State TMNext_CampaignStore_State for System = C_State_Null;
							TMNext_CampaignStore_State = Mutation_SetMapTopRankingsInClub(
								TMNext_CampaignStore_State,
								MapUid,
								ClubId,
								Response
							);

							declare Text[] WebServicesUserIdList;
							foreach (TopScore in Response.Tops) {
								WebServicesUserIdList.add(TopScore.AccountId);
							}
							G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Task_GetDisplayName = Task::Create(UserMgr, UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), WebServicesUserIdList));
						}

						G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Request = Http::Destroy(G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Request);
					}
				}

				if (Task::IsInitialized(G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Task_GetDisplayName)) {
					G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Task_GetDisplayName = Task::Update(G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Task_GetDisplayName);
					if (!Task::IsRunning(G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Task_GetDisplayName)) {
						if (Task::IsSuccess(G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Task_GetDisplayName)) {
							declare K_State TMNext_CampaignStore_State for System = C_State_Null;
							TMNext_CampaignStore_State = Mutation_UpdateMapTopRankingsInClubDisplayNames(
								TMNext_CampaignStore_State,
								MapUid,
								ClubId,
								G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].LeaderboardGroupUid
							);
						}
						G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Task_GetDisplayName = Task::Destroy(G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Task_GetDisplayName);
					}
				}
	
				if (
					!Http::IsInitialized(G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Request) &&
					!Task::IsInitialized(G_Request_GetMapTopRankingsInClubList[MapUid][ClubId].Task_GetDisplayName)
				) {
					G_Request_GetMapTopRankingsInClubList[MapUid].removekey(ClubId);
					if (G_Request_GetMapTopRankingsInClubList[MapUid].count == 0) {
						G_Request_GetMapTopRankingsInClubList.removekey(MapUid);
					}
					Store::SendEvent(C_StoreId, C_Event_MapTopClubRankingsUpdate, [MapUid, ""^ClubId]);
				}
			}
		}
	}

	// Get campaign top rankings requests
	declare TmpList = G_Request_GetCampaignTopRankingsList;
	foreach (CampaignId => StructRequest in TmpList) {
		if (Http::IsInitialized(StructRequest.Request)) {
			G_Request_GetCampaignTopRankingsList[CampaignId].Request = Http::Update(G_Request_GetCampaignTopRankingsList[CampaignId].Request);
			if (!Http::IsRunning(G_Request_GetCampaignTopRankingsList[CampaignId].Request)) {
				if (Http::IsSuccess(G_Request_GetCampaignTopRankingsList[CampaignId].Request)) {
					declare CampaignStruct::LibCampaignStruct_K_TopRanking[] Response = LeaderboardAPI::GetResponseFromGetTopRankings(G_Request_GetCampaignTopRankingsList[CampaignId].Request);
					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					TMNext_CampaignStore_State = Mutation_SetCampaignTopRankings(
						TMNext_CampaignStore_State,
						CampaignId,
						Response
					);

					declare Text[] WebServicesUserIdList;
					foreach (TopRanking in Response) {
						foreach (Top in TopRanking.Tops) {
							WebServicesUserIdList.add(Top.AccountId);
						}
					}
					G_Request_GetCampaignTopRankingsList[CampaignId].Task_GetDisplayName = Task::Create(UserMgr, UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), WebServicesUserIdList));
				}
				G_Request_GetCampaignTopRankingsList[CampaignId].Request = Http::Destroy(G_Request_GetCampaignTopRankingsList[CampaignId].Request);
			}
		}

		if (Task::IsInitialized(G_Request_GetCampaignTopRankingsList[CampaignId].Task_GetDisplayName)) {
			G_Request_GetCampaignTopRankingsList[CampaignId].Task_GetDisplayName = Task::Update(G_Request_GetCampaignTopRankingsList[CampaignId].Task_GetDisplayName);
			if (!Task::IsRunning(G_Request_GetCampaignTopRankingsList[CampaignId].Task_GetDisplayName)) {
				if (Task::IsSuccess(G_Request_GetCampaignTopRankingsList[CampaignId].Task_GetDisplayName)) {
					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					TMNext_CampaignStore_State = Mutation_UpdateTopRankingsDisplayNames(
						TMNext_CampaignStore_State,
						CampaignId
					);
				}
				G_Request_GetCampaignTopRankingsList[CampaignId].Task_GetDisplayName = Task::Destroy(G_Request_GetCampaignTopRankingsList[CampaignId].Task_GetDisplayName);
			}
		}

		if (
			!Http::IsInitialized(G_Request_GetCampaignTopRankingsList[CampaignId].Request) &&
			!Task::IsInitialized(G_Request_GetCampaignTopRankingsList[CampaignId].Task_GetDisplayName)
		) {
			G_Request_GetCampaignTopRankingsList.removekey(CampaignId);
		}
	}

	// Get campaign top rankings in club requests
	declare TmpRequestTopRankingsInClubList = G_Request_GetCampaignTopRankingsInClubList;
	foreach (CampaignId => StructRequest in TmpRequestTopRankingsInClubList) {
		if (Http::IsInitialized(StructRequest.TopRankingsRequest)) {
			G_Request_GetCampaignTopRankingsInClubList[CampaignId].TopRankingsRequest = Http::Update(G_Request_GetCampaignTopRankingsInClubList[CampaignId].TopRankingsRequest);
			if (!Http::IsRunning(G_Request_GetCampaignTopRankingsInClubList[CampaignId].TopRankingsRequest)) {
				if (Http::IsSuccess(G_Request_GetCampaignTopRankingsInClubList[CampaignId].TopRankingsRequest)) {
					declare Result = LeaderboardAPI::GetResponseFromGetTopRankingsInClub(G_Request_GetCampaignTopRankingsInClubList[CampaignId].TopRankingsRequest);
					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					TMNext_CampaignStore_State = Mutation_SetCampaignClubTopRankings(
						TMNext_CampaignStore_State,
						CampaignId,
						Result.ClubId,
						Result.TopRankings
					);

					declare Text[] WebServicesUserIdList;
					foreach (Top in Result.TopRankings) {
						WebServicesUserIdList.add(Top.AccountId);
					}
					G_Request_GetCampaignTopRankingsInClubList[CampaignId].Task_GetDisplayName = Task::Create(UserMgr, UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), WebServicesUserIdList));
				}

				G_Request_GetCampaignTopRankingsInClubList[CampaignId].TopRankingsRequest = Http::Destroy(G_Request_GetCampaignTopRankingsInClubList[CampaignId].TopRankingsRequest);
			}
		}
		if (Http::IsInitialized(StructRequest.PlayerRankingRequest)) {
			G_Request_GetCampaignTopRankingsInClubList[CampaignId].PlayerRankingRequest = Http::Update(G_Request_GetCampaignTopRankingsInClubList[CampaignId].PlayerRankingRequest);
			if (!Http::IsRunning(G_Request_GetCampaignTopRankingsInClubList[CampaignId].PlayerRankingRequest)) {
				if (Http::IsSuccess(G_Request_GetCampaignTopRankingsInClubList[CampaignId].PlayerRankingRequest)) {
					declare TopResult = LeaderboardAPI::GetResponseFromGetPlayerRankingInClub(G_Request_GetCampaignTopRankingsInClubList[CampaignId].PlayerRankingRequest);
					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					TMNext_CampaignStore_State = Mutation_SetCampaignClubPlayerRankings(
						TMNext_CampaignStore_State,
						CampaignId,
						G_Request_GetCampaignTopRankingsInClubList[CampaignId].ClubId,
						TopResult
					);
				}

				G_Request_GetCampaignTopRankingsInClubList[CampaignId].PlayerRankingRequest = Http::Destroy(G_Request_GetCampaignTopRankingsInClubList[CampaignId].PlayerRankingRequest);
			}
		}

		if (Task::IsInitialized(G_Request_GetCampaignTopRankingsInClubList[CampaignId].Task_GetDisplayName)) {
			G_Request_GetCampaignTopRankingsInClubList[CampaignId].Task_GetDisplayName = Task::Update(G_Request_GetCampaignTopRankingsInClubList[CampaignId].Task_GetDisplayName);
			if (!Task::IsRunning(G_Request_GetCampaignTopRankingsInClubList[CampaignId].Task_GetDisplayName)) {
				if (Task::IsSuccess(G_Request_GetCampaignTopRankingsInClubList[CampaignId].Task_GetDisplayName)) {
					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					TMNext_CampaignStore_State = Mutation_UpdateCampaignClubTopRankingsDisplayNames(
						TMNext_CampaignStore_State,
						CampaignId
					);
				}
				G_Request_GetCampaignTopRankingsInClubList[CampaignId].Task_GetDisplayName = Task::Destroy(G_Request_GetCampaignTopRankingsInClubList[CampaignId].Task_GetDisplayName);
			}
		}

		if (
			!Http::IsInitialized(StructRequest.TopRankingsRequest) &&
			!Http::IsInitialized(StructRequest.PlayerRankingRequest) &&
			!Task::IsInitialized(G_Request_GetCampaignTopRankingsInClubList[CampaignId].Task_GetDisplayName)
		) {
			G_Request_GetCampaignTopRankingsInClubList.removekey(CampaignId);
		}
	}

	// Get player rankings request
	declare TmpGetPlayerRankingsList = G_Request_GetPlayerRankingsList;
	foreach (CampaignId => Request in TmpGetPlayerRankingsList) {
		if (Http::IsInitialized(Request)) {
			G_Request_GetPlayerRankingsList[CampaignId] = Http::Update(G_Request_GetPlayerRankingsList[CampaignId]);
			if (!Http::IsRunning(G_Request_GetPlayerRankingsList[CampaignId])) {
				if (Http::IsSuccess(G_Request_GetPlayerRankingsList[CampaignId])) {
					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					TMNext_CampaignStore_State = Mutation_SetCampaignRankings(
						TMNext_CampaignStore_State,
						CampaignId,
						LeaderboardAPI::GetResponseFromGetPlayerRankings(G_Request_GetPlayerRankingsList[CampaignId])
					);
				}
				G_Request_GetPlayerRankingsList[CampaignId] = Http::Destroy(G_Request_GetPlayerRankingsList[CampaignId]);
				G_Request_GetPlayerRankingsList.removekey(CampaignId);
			}
		}
	}

	// Get surrounding rankings request
	declare TmpListLevels = G_Request_GetMapRankingLevelsList;
	foreach (MapUid => Request_ReadOnly in TmpListLevels) {
		if (Http::IsInitialized(G_Request_GetMapRankingLevelsList[MapUid].Request)) {
			declare Request = Http::Update(G_Request_GetMapRankingLevelsList[MapUid].Request);
			if (!Http::IsRunning(Request)) {
				if (Http::IsSuccess(Request)) {
					declare Response = LeaderboardAPI::GetResponseFromGetMapLevels(Request);

					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					TMNext_CampaignStore_State = Mutation_SetRankingLevels(
						TMNext_CampaignStore_State,
						Response.MapUid,
						Response.LeaderboardGroupUid,
						Response.LevelsByZone
					);

					declare Text[] WebServicesUserIdList;
					foreach (LevelByZone in Response.LevelsByZone) {
						foreach (TopScore in LevelByZone) {
							WebServicesUserIdList.add(TopScore.AccountId);
						}
					}
					G_Request_GetMapRankingLevelsList[MapUid].Task_GetDisplayName = Task::Create(UserMgr, UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), WebServicesUserIdList));
				} else {
					Store::SendEvent(C_StoreId, C_Event_MapRankingLevelsUpdateFailed, []);
				}
				Request = Http::Destroy(Request);
			}
			G_Request_GetMapRankingLevelsList[MapUid].Request = Request;
		}

		if (Task::IsInitialized(G_Request_GetMapRankingLevelsList[MapUid].Task_GetDisplayName)) {
			G_Request_GetMapRankingLevelsList[MapUid].Task_GetDisplayName = Task::Update(G_Request_GetMapRankingLevelsList[MapUid].Task_GetDisplayName);
			if (!Task::IsRunning(G_Request_GetMapRankingLevelsList[MapUid].Task_GetDisplayName)) {
				if (Task::IsSuccess(G_Request_GetMapRankingLevelsList[MapUid].Task_GetDisplayName)) {
					declare K_State TMNext_CampaignStore_State for System = C_State_Null;
					TMNext_CampaignStore_State = Mutation_UpdateRankingLevelsDisplayNames(
						TMNext_CampaignStore_State,
						MapUid,
						G_Request_GetMapRankingLevelsList[MapUid].LeaderboardGroupUid
					);
				} else {
					Store::SendEvent(C_StoreId, C_Event_MapRankingLevelsUpdateFailed, []);
				}
				G_Request_GetMapRankingLevelsList[MapUid].Task_GetDisplayName = Task::Destroy(G_Request_GetMapRankingLevelsList[MapUid].Task_GetDisplayName);
			}
		}

		if (
			!Http::IsInitialized(G_Request_GetMapRankingLevelsList[MapUid].Request) &&
			!Task::IsInitialized(G_Request_GetMapRankingLevelsList[MapUid].Task_GetDisplayName)
		) {
			G_Request_GetMapRankingLevelsList.removekey(MapUid);
		}
	}

	// Load score of offline campaign
	if (Task::IsInitialized(G_OfflineCampaignTaskLoadScore)) {
		G_OfflineCampaignTaskLoadScore = Task::Update(G_OfflineCampaignTaskLoadScore);
		if (!Task::IsRunning(G_OfflineCampaignTaskLoadScore)) {
			Store::SendEvent(C_StoreId, C_Event_OfflineCampaignLoaded, []);
			G_OfflineCampaignTaskLoadScore = Task::Destroy(G_OfflineCampaignTaskLoadScore);
		}
	}

	// Get live quarterly campaign
	if (Http::IsInitialized(G_Request_LoadLiveQuarterlyCampaign)) {
		G_Request_LoadLiveQuarterlyCampaign = Http::Update(G_Request_LoadLiveQuarterlyCampaign);
		if (!Http::IsRunning(G_Request_LoadLiveQuarterlyCampaign)) {
			declare K_State TMNext_CampaignStore_State for System = C_State_Null;
			if (Http::IsSuccess(G_Request_LoadLiveQuarterlyCampaign)) {
				declare Response = CampaignAPI::GetResponseFromGetCampaignList(G_Request_LoadLiveQuarterlyCampaign);
				if (Response.CampaignList.count > 0) {
					TMNext_CampaignStore_State = Mutation_SetLiveQuarterlyCampaign(TMNext_CampaignStore_State, Response.CampaignList[0], C_LiveCampaignStatus_Loaded, "", True, Response.CampaignsTotal);
				} else {
					TMNext_CampaignStore_State = Mutation_SetLiveQuarterlyCampaign(
						TMNext_CampaignStore_State,
						TMNext_CampaignStore_State.LiveQuarterly.Campaign,
						C_LiveCampaignStatus_NoCampaigns,
						//L16N Message displayed when no official quarterly campaigns were found. 
						_("No quarterly campaigns found."),
						True,
						0
					);
				}
			} else {
				declare ErrorMessage = TL::Compose(
					//L16N Do not translate "Nadeo Services". %1 will be replaced by an error code, e.g. "Error code: 500"
					_("Error while fetching quarterly campaign from Nadeo Services. Please try again. (Error code: %1)"),
					""^Http::GetStatusCode(G_Request_LoadLiveQuarterlyCampaign)
				);
				TMNext_CampaignStore_State = Mutation_SetLiveQuarterlyCampaign(
					TMNext_CampaignStore_State,
					TMNext_CampaignStore_State.LiveQuarterly.Campaign,
					C_LiveCampaignStatus_Error,
					ErrorMessage,
					True,
					0
				);
			}
			G_Request_LoadLiveQuarterlyCampaign = Http::Destroy(G_Request_LoadLiveQuarterlyCampaign);
		}
	}

	// Get live monthly campaign
	if (Http::IsInitialized(G_Request_LoadLiveMonthlyCampaign)) {
		G_Request_LoadLiveMonthlyCampaign = Http::Update(G_Request_LoadLiveMonthlyCampaign);
		if (!Http::IsRunning(G_Request_LoadLiveMonthlyCampaign)) {
			declare K_State TMNext_CampaignStore_State for System = C_State_Null;
			if (Http::IsSuccess(G_Request_LoadLiveMonthlyCampaign)) {
				declare Response = CampaignAPI::GetResponseFromGetMonthlyCampaignList(G_Request_LoadLiveMonthlyCampaign, False);
				if (Response.CampaignList.count > 0) {
					TMNext_CampaignStore_State = Mutation_SetLiveMonthlyCampaign(TMNext_CampaignStore_State, Response.CampaignList[0], C_LiveCampaignStatus_Loaded, "");
				} else {
					TMNext_CampaignStore_State = Mutation_SetLiveMonthlyCampaign(
						TMNext_CampaignStore_State,
						TMNext_CampaignStore_State.LiveMonthly.Campaign,
						C_LiveCampaignStatus_NoCampaigns,
						//L16N Error displayed when there are no monthly campaigns in the database
						_("No monthly campaigns found.")
					);
				}
			} else {
				declare ErrorMessage = TL::Compose(
					//L16N Do not translate "Nadeo Services". %1 will be replaced by an error code, e.g. "Error code: 500"
					_("Error while fetching monthly campaign from Nadeo Services. Please try again. (Error code: %1)"),
					""^Http::GetStatusCode(G_Request_LoadLiveMonthlyCampaign)
				);
				TMNext_CampaignStore_State = Mutation_SetLiveMonthlyCampaign(
					TMNext_CampaignStore_State,
					TMNext_CampaignStore_State.LiveMonthly.Campaign,
					C_LiveCampaignStatus_Error,
					ErrorMessage
				);
			}
			G_Request_LoadLiveMonthlyCampaign = Http::Destroy(G_Request_LoadLiveMonthlyCampaign);
		}
	}

	// Load my quarterly campaign ranking
	if (G_LoadMyQuarterlyCampaignsRankings.IsLoading) {
		if (Http::IsInitialized(G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList)) {
			G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList = Http::Update(G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList);
			if (!Http::IsRunning(G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList)) {
				if (Http::IsSuccess(G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList)) {
					declare CampaignAPI::LibCampaignAPI_K_ResponseGetCampaignList QuarterlyCampaigns = CampaignAPI::GetResponseFromGetCampaignList(G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList);
					foreach (Index => Campaign in QuarterlyCampaigns.CampaignList) {
						G_LoadMyQuarterlyCampaignsRankings.Requests_GetPlayerRankings[G_LoadMyQuarterlyCampaignsRankings.Offset + Index] = LeaderboardAPI::GetPlayerRankings(Campaign.LeaderboardGroupUid, G_LoadMyQuarterlyCampaignsRankings.AccountId);
						G_LoadMyQuarterlyCampaignsRankings.CampaignsNames[G_LoadMyQuarterlyCampaignsRankings.Offset + Index] = Campaign.Name;
					}
					G_LoadMyQuarterlyCampaignsRankings.Total = QuarterlyCampaigns.CampaignsTotal;
				}
				G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList = Http::Destroy(G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList);
			}
		}
		if (G_LoadMyQuarterlyCampaignsRankings.Requests_GetPlayerRankings.count > 0) {
			declare Http::K_Request[Integer] Requests_GetPlayerRankings = G_LoadMyQuarterlyCampaignsRankings.Requests_GetPlayerRankings;
			foreach (Index => Request_GetPlayerRankings in Requests_GetPlayerRankings) {
				if (Http::IsInitialized(Request_GetPlayerRankings)) {
					declare Http::K_Request UpdatedRequest = Http::Update(Request_GetPlayerRankings);
					if (Http::IsRunning(UpdatedRequest)) {
						G_LoadMyQuarterlyCampaignsRankings.Requests_GetPlayerRankings[Index] = UpdatedRequest;
					} else {
						if (Http::IsSuccess(UpdatedRequest)) {
							G_LoadMyQuarterlyCampaignsRankings.CampaignsRankings[Index] = LeaderboardAPI::GetResponseFromGetPlayerRankings(UpdatedRequest);
						}
						Http::Destroy(UpdatedRequest);
						G_LoadMyQuarterlyCampaignsRankings.Requests_GetPlayerRankings.removekey(Index);
					}
				} else {
					G_LoadMyQuarterlyCampaignsRankings.Requests_GetPlayerRankings.removekey(Index);
				}
			}
		}
		if (
			!Http::IsInitialized(G_LoadMyQuarterlyCampaignsRankings.Request_GetCampaignList) &&
			G_LoadMyQuarterlyCampaignsRankings.Requests_GetPlayerRankings.count <= 0
		) {
			G_LoadMyQuarterlyCampaignsRankings.IsLoading = False;
			declare K_State TMNext_CampaignStore_State for System = C_State_Null;
			TMNext_CampaignStore_State = Mutation_SetMyQuarterlyCampaignsRankings(TMNext_CampaignStore_State, G_LoadMyQuarterlyCampaignsRankings.CampaignsRankings, G_LoadMyQuarterlyCampaignsRankings.CampaignsNames, G_LoadMyQuarterlyCampaignsRankings.AccountId, G_LoadMyQuarterlyCampaignsRankings.Total);
		}
	}

	ProcessEvents(This);
}