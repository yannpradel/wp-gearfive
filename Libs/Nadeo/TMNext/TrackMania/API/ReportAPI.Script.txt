/**
 *  Component : ReportAPI, API for the report system in the game
 */
#Const Version    "2023-01-09"
#Const ScriptName "Libs/Nadeo/TMNext/TrackMania/API/ReportAPI.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ComponentName "report-api"
#Const P "ReportAPI_"

#Const C_API_Report "/api/token/report"

#Const C_Route_PostCreateReport "/create"

#Const C_Headers [
	"Accept" => "application/json",
	"Content-Type" => "application/json"
]

#Struct K_Http_Report {
	Text reportType;
	Text reportTarget;
	Text externalUid;
	Text context;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to create a report
 *
 *	@param	_ReportType								Type of report 
 *	@param	_ReportTarget							Target of the report (club, activity, map or record)
 *	@param	_ExternalUid							If the report target is a player, specify their account id. Else if the report target is a ugc content with an id, specify their id (example a map uid)
 *	@param	_Context [json]						If we need to add some context to the report (for example a SeasonUid for a record)
 *
 *	@return										The request
 */
Http::K_Request PostReportCreate(Text _ReportType, Text _ReportTarget, Text _ExternalUid, Text _Context) {
	declare K_Http_Report Report = K_Http_Report {
		reportType = _ReportType,
		reportTarget = _ReportTarget,
		externalUid = _ExternalUid,
		context = _Context
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Report^C_Route_PostCreateReport, Report.tojson(), C_Headers);
}