/**
 *	API for Clubs
 */
#Const Version		"2023-06-14"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/API/ClubAPI.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/HttpStruct.Script.txt" as HttpStruct
#Include "Libs/Nadeo/TMNext/TrackMania/API/MapReviewAPI.Script.txt" as MapReviewAPI
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_API_Club "/api/token/club"
#Const C_Headers [
	"Accept" => "application/json",
	"Content-Type" => "application/json"
]

#Const C_RouteParameter_ClubId "ClubId"
#Const C_RouteParameter_CampaignId "CampaignId"
#Const C_RouteParameter_AccountId "AccountId"
#Const C_RouteParameter_ActivityId "ActivityId"
#Const C_RouteParameter_ItemId "ItemId"
#Const C_RouteParameter_MapUid "MapUid"
#Const C_RouteParameter_Position "Position"
#Const C_RouteParameter_BucketType "BucketType"
#Const C_RouteParameter_Login "Login"

#Const C_QueryParameter_Offset "offset"
#Const C_QueryParameter_Length "length"
#Const C_QueryParameter_Sort "sort"
#Const C_QueryParameter_Order "order"
#Const C_QueryParameter_Name "name"
#Const C_QueryParameter_Active "active"
#Const C_QueryParameter_SeasonUid "seasonUid"
#Const C_QueryParameter_Format "format"
#Const C_QueryParameter_WithFeedback "withFeedback"
#Const C_QueryParameter_WithMapInfo "withMapInfo"
#Const C_QueryParameter_ClubIds "clubIdList"

#Const C_Route_GetClubs ""
#Const C_Route_GetClubsMine "/mine"
#Const C_Route_GetClub "/:ClubId"
#Const C_Route_PostClubCreate "/create"
#Const C_Route_PostClubDelete "/:ClubId/delete"
#Const C_Route_GetClubMembers "/:ClubId/member"
#Const C_Route_GetClubMemberRequests "/:ClubId/member/request"
#Const C_Route_PostClubMemberRequestAccept "/:ClubId/member/request/:AccountId/accept"
#Const C_Route_PostClubMemberRequestDecline "/:ClubId/member/request/:AccountId/decline"
#Const C_Route_GetClubMemberWithId "/:ClubId/member/:AccountId"
#Const C_Route_GetClubMemberFromLogin "/:ClubId/member/:Login/from-login"
#Const C_Route_DeleteClubMemberWithId "/:ClubId/member/:AccountId/delete"
#Const C_Route_EditClubMemberWithId "/:ClubId/member/:AccountId/edit"
#Const C_Route_PostCreateClubMember "/:ClubId/member/create"
#Const C_Route_GetAllClubRooms "/room"
#Const C_Route_GetAllClubCampaigns "/campaign"
#Const C_Route_GetClubCampaignList "/:ClubId/campaign"
#Const C_Route_GetClubCampaign "/:ClubId/campaign/:CampaignId"
#Const C_Route_GetClubActivities "/:ClubId/activity"
#Const C_Route_GetClubsActivtyFeatured "/activity-featured"
#Const C_Route_PostEditActivity "/:ClubId/activity/:ActivityId/edit"
#Const C_Route_PostDeleteActivity "/:ClubId/activity/:ActivityId/delete"
#Const C_Route_PostUploadMediaActivity "/:ClubId/activity/:ActivityId/upload"
#Const C_Route_PostClubRoomCreate "/:ClubId/room/create"
#Const C_Route_PostClubRoomEdit "/:ClubId/room/:ActivityId/edit"
#Const C_Route_PostCreateCampaign "/:ClubId/campaign/create"
#Const C_Route_PostEditCampaign "/:ClubId/campaign/:CampaignId/edit"
#Const C_Route_GetClubRoomDetail "/:ClubId/room/:ActivityId"
#Const C_Route_PostJoinLink "/:ClubId/room/:ActivityId/join"
#Const C_Route_PostClubRoomCreateFromServer "/:ClubId/room/create-from-server"
#Const C_Route_PostClubRoomEditFromServer "/:ClubId/room/:ActivityId/edit-from-server"
#Const C_Route_GetClubRoomPassword "/:ClubId/room/:ActivityId/get-password"
#Const C_Route_PostClubRoomPasswordGenerate "/:ClubId/room/:ActivityId/generate-password"
#Const C_Route_PostEditClub "/:ClubId/edit"
#Const C_Route_PostDeleteClubMedia "/:ClubId/media/delete"
#Const C_Route_PostUploadClubMedia "/:ClubId/media/upload"
#Const C_Route_PostDeleteClub "/:ClubId/delete"
#Const C_Route_PostSetVIP "/:ClubId/vip/:AccountId/set"
#Const C_Route_PostUnsetVIP "/:ClubId/vip/:AccountId/unset"
#Const C_Route_GetVIPListOnMap "/:ClubId/vip/map/:MapUid"
#Const C_Route_GetGlobalVIPListOnMap "/player-vip/map/:MapUid"
#Const C_Route_GetFollowersListOnMap "/follower/map/:MapUid"
#Const C_Route_PostCreateBucket "/:ClubId/bucket/create"
#Const C_Route_PostEditBucket "/:ClubId/bucket/:ActivityId/edit"
#Const C_Route_PostAddBucketItems "/:ClubId/bucket/:ActivityId/add"
#Const C_Route_PostRemoveBucketItems "/:ClubId/bucket/:ActivityId/remove"
#Const C_Route_GetBucketActivity "/:ClubId/bucket/:ActivityId"
#Const C_Route_GetMapReviewActivities "/map-review"
#Const C_Route_PostCreateMapReviewActivity "/:ClubId/map-review/create"
#Const C_Route_PostEditMapReviewActivity "/:ClubId/map-review/:ActivityId/edit"
#Const C_Route_PostJoinMapReviewActivity "/:ClubId/map-review/:ActivityId/join"
#Const C_Route_PostAddMapQueueMapReviewActivity "/:ClubId/map-review/:ActivityId/add-map-queue"
#Const C_Route_PostRemoveSubmittedMap "/:ClubId/map-review/:ActivityId/map/:MapUid/delete"
#Const C_Route_GetMapReviewActivity "/:ClubId/map-review/:ActivityId"
#Const C_Route_GetMapReviewActivityPlayerSubmittedMaps "/:ClubId/map-review/:ActivityId/map/mine"
#Const C_Route_GetMapReviewActivityAllSubmittedMaps "/:ClubId/map-review/:ActivityId/map"
#Const C_Route_GetMapReviewActivityWaitingTime "/:ClubId/map-review/:ActivityId/waiting-time"
#Const C_Route_PostEditBucketItem "/:ClubId/bucket/:ActivityId/item/:ItemId/edit"
#Const C_Route_PostBucketItemAddMedia "/:ClubId/bucket/:ActivityId/item/:ItemId/add-media"
#Const C_Route_PostBucketItemDeleteMedia "/:ClubId/bucket/:ActivityId/item/:ItemId/delete-media/:Position"
#Const C_Route_GetAllBucketActivities "/bucket/:BucketType/all"
#Const C_Route_PostCreateNews "/:ClubId/news/create"
#Const C_Route_PostEditNews "/:ClubId/news/:ActivityId/edit"
#Const C_Route_PostUploadNewsMedia "/:ClubId/news/:ActivityId/upload"
#Const C_Route_PostDeleteNewsMedia "/:ClubId/news/:ActivityId/delete-media"
#Const C_Route_GetNewsActivity "/:ClubId/news/:ActivityId"
#Const C_Route_PostCreateRanking "/:ClubId/ranking/create"
#Const C_Route_PostSetFeatured "/:ClubId/featured/set"
#Const C_Route_PostUnsetFeatured "/:ClubId/featured/unset"
#Const C_Route_PostPin "/:ClubId/pin"
#Const C_Route_PostTag "/:ClubId/tag"
#Const C_Route_GetPlayerInfo "/player/info"

// Values are from LIVE, do not change them
#Const C_QueryValue_Sort_Popularity "popularity" //< This is the default value
#Const C_QueryValue_Sort_Date "date"
#Const C_QueryValue_Sort_Name "name"

#Const C_QueryValue_Order_ASC "ASC" //< This is the default value for C_QueryValue_Sort_Name
#Const C_QueryValue_Order_DESC "DESC" //< This is the default value for C_QueryValue_Sort_Popularity and C_QueryValue_Sort_Date

#Const ClubStruct::C_ClubThemes_Path as C_ClubThemes_Path
#Const ClubStruct::C_ClubThemes_DisplayNames as C_ClubThemes_DisplayNames
#Const ClubStruct::C_ClubThemes_Folders as C_ClubThemes_Folders
#Const ClubStruct::C_ClubThemes_Files as C_ClubThemes_Files
#Const ClubStruct::C_MediaType_Translations as C_MediaType_Translations

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_HttpClub {
	Integer id;
	Text name;
	Text tag;
	Text description;
	Text authorAccountId;
	Integer creationTimestamp;
	Integer editionTimestamp;
	Text iconUrl;
	Text logoUrl;
	Text decalUrl;
	Text backgroundUrl;
	Text verticalUrl;
	Text decalSponsor4x1Url;
	Text screen16x9Url;
	Text screen8x1Url;
	Text screen16x1Url;
	Text iconTheme;
	Text decalTheme;
	Text screen16x9Theme;
	Text screen8x1Theme;
	Text screen16x1Theme;
	Text verticalTheme;
	Text backgroundTheme;
	Integer popularityLevel;
	Text state;
}

#Struct K_HttpResponseGetClubs {
	K_HttpClub[] clubList;
	Integer maxPage;
	Integer clubCount;
}

#Struct K_ResponseGetClubs {
	ClubStruct::LibStructuresClub_K_Club[] Clubs;
	Integer ClubsTotal;
}

#Struct K_HttpResponseGetClubMemberId {
	Text accountId;
	Integer clubId;
	Text role;
	Integer creationTimestamp;
	Boolean vip;
	Boolean moderator;
	Boolean hasFeatured;
}

#Struct K_HttpClubMember {
	Text accountId;
	Text role;
	Integer creationTimestamp;
	Boolean vip;
}

#Struct K_HttpResponseGetClubMembers {
	K_HttpClubMember[] clubMemberList;
	Integer maxPage;
	Integer itemCount;
}

#Struct K_ResponseGetClubMembers {
	ClubStruct::LibStructuresClub_K_Member[] Members;
	Integer MembersTotal;
}

#Struct K_HttpSetting {
	Text key;
	Text value;
	Text type;
}

#Struct K_HttpRoomCreationWithCampaignId {
	Text name;
	Text region;
	Integer maxPlayersPerServer;
	Text script;
	K_HttpSetting[] settings;
	Integer campaignId;
	Integer scalable;
	Integer password;
}

#Struct K_HttpRoomCreationWithMapList {
	Text name;
	Text region;
	Integer maxPlayersPerServer;
	Text script;
	K_HttpSetting[] settings;
	Text[] maps;
	Integer scalable;
	Integer password;
}

#Struct K_HttpClubRoomCreationFromServer {
	Text name;
	Text login;
}

#Struct K_HttpRoomModel {
	Integer id;
	Text[] maps;
	Text script;
}

#Struct K_HttpRoomCreated {
	Integer clubId;
	Integer roomId;
	Integer campaignId;
	K_HttpRoomModel roomModel;
}

#Struct K_HttpServerInfo {
	Text joinLink;
	Integer playerCount;
	Text currentMapUid;
	Boolean starting;
}

#Struct K_HttpRoom {
	Integer id;
	Text name;
	Text region;
	Text serverAccountId;
	Integer maxPlayers;
	Integer playerCount;
	Text[] maps;
	Text script;
	Boolean scalable;
	Integer creationTimestamp;
	K_HttpSetting[Text] scriptSettings;
	K_HttpServerInfo serverInfo;
}

#Struct K_HttpClubRoom {
	Integer id;
	Integer clubId;
	Text clubName;
	Boolean nadeo;
	Integer campaignId;
	Text playerServerLogin;
	Integer activityId;
	Text mediaUrl;
	Text mediaTheme;
	Text name;
	Integer popularityLevel;
	Integer creationTimestamp;
	Boolean password;
	K_HttpRoom room;
	Text creatorAccountId;
	Text latestEditorAccountId;
}

#Struct K_HttpResponseGetClubRooms {
	K_HttpClubRoom[] clubRoomList;
	Integer maxPage;
	Integer itemCount;
}

#Struct K_ResponseGetClubRooms {
	ClubStruct::LibStructuresClub_K_Room[] Rooms;
	Integer ClubsRoomsTotal;
}

#Struct K_HttpClubRoomPassword {
	Text password;
}

#Struct K_HttpClubCampaign {
	Integer clubId;
	Text clubName;
	Text clubDecalUrl;
	Integer campaignId;
	Integer publicationTimestamp;
	Integer activityId;
	Text mediaUrl;
	Text mediaTheme;
	Text name;
	HttpStruct::LibHttpStruct_K_HttpCampaign campaign;
	Integer popularityLevel;
	Boolean trophies;
	Text creatorAccountId;
	Text latestEditorAccountId;
}

#Struct K_HttpResponseGetClubCampaignList {
	K_HttpClubCampaign[] clubCampaignList;
	Integer maxPage;
	Integer itemCount;
}

#Struct K_ResponseGetClubCampaignList {
	CampaignStruct::LibCampaignStruct_K_Campaign[] CampaignList;
	Integer CampaignsTotal;
}

#Struct K_HttpActivity {
	Integer id;
	Text name;
	Text activityType;
	Integer externalId;
	Integer position;
	Boolean public;
	Boolean active;
	Text mediaTheme;
	Text mediaUrl;
	Boolean password;
	Boolean featured;
	Integer clubId;
	Text creatorAccountId;
	Text latestEditorAccountId;
}

#Struct K_HttpResponseGetClubActivities {
	K_HttpActivity[] activityList;
	Integer maxPage;
	Integer itemCount;
}

#Struct K_ResponseGetClubActivities {
	ClubStruct::LibStructuresClub_K_Activity[] Activities;
	Integer ActivitiesTotal;
}

#Struct K_HttpRole {
	Text role;
}

// We can edit only one parameter of the activity at once
// So we need a struct for each parameter
#Struct K_HttpMoveActivity {
	Integer position;
}
#Struct K_HttpActivateActivity {
	Integer active; //< 1 to activate, 0 to deactivate
}
#Struct K_HttpUpdatePrivacyActivity {
	Integer public;
}
#Struct K_HttpUpdateFeaturedActivity {
	Integer featured;
}
#Struct K_HttpUpdateActivityName {
	Text name;
}
#Struct K_HttpUpdateActivityMediaTheme {
	Text mediaTheme;
}

#Struct K_HttpMapCreation {
	Integer position;
	Text mapUid;
}

#Struct K_HttpCampaignCreation {
	Text name;
	K_HttpMapCreation[] playlist;
}

#Struct K_HttpResponseFromPostCreateCampaign {
	Integer clubId;
	Integer campaignId;
	Integer publicationTimestamp;
	Integer activityId;
	HttpStruct::LibHttpStruct_K_HttpCampaign campaign;
}

#Struct K_ResponseFromPostCreateCampaign {
	CampaignStruct::LibCampaignStruct_K_Campaign Campaign;
	Integer ActivityId;
}

#Struct K_HttpCreateOrEditClub {
	Text name;
	Text tag;
	Text description;
	Text state;
	Text iconTheme;
	Text decalTheme;
	Text screen16x9Theme;
	Text screen8x1Theme;
	Text screen16x1Theme;
	Text verticalTheme;
	Text backgroundTheme;
}

#Struct K_HttpResponseFromGetVIPListOnMap {
	Text[] accountIdList;
}

#Struct K_HttpCreateBucket {
	Text name;
	Text type;
}

#Struct K_HttpEditBucket {
	Text name;
}

#Struct K_HttpBucketItem {
	Text itemId;
	Integer position;
	Text description;
	Text[] mediaUrls;
}

#Struct K_HttpBucketItemList {
	Text[] itemIdList;
}

#Struct K_HttpBucketItemDesc {
	Integer position;
	Text description;
}

#Struct K_HttpBucketActivity {
	Text type;
	K_HttpBucketItem[] bucketItemList;
	Integer bucketItemCount;
	Integer popularityLevel;
	Integer popularityValue;
	Integer id;
	Text mediaUrl;
	Text mediaTheme;
	Integer clubId;
	Text clubName;
	Text name;
	Integer creationTimestamp;
	Text creatorAccountId;
	Text latestEditorAccountId;
}

#Struct K_HttpCreateMapReviewActivity {
	Text name;
	Integer timeLimit;
	Integer scalable;
	Integer maxPlayer;
	Integer allowVoteSkipMap;
	Integer submissionLimitation;
}

#Struct K_HttpMapReviewActivity {
	Integer activityId;
	Text mapReviewUid;
	Text mediaUrl;
	Text mediaTheme;
	Integer timeLimit;
	Boolean scalable;
	Boolean allowVoteSkipMap;
	Boolean submissionLimitation;
	Integer maxPlayer;
	Boolean public;
	Text game2webUrl;
	Integer popularityValue;
	Integer popularityValueBonus;
	Integer popularityLevel;
	Integer playerCount;
	Integer submittedMapCount;
	Integer id;
	Integer clubId;
	Text clubName;
	Text name;
	Integer creationTimestamp;
	Text creatorAccountId;
	Text latestEditorAccountId;
}

#Struct K_HttpResponseGetMapReviews {
	K_HttpMapReviewActivity[] clubMapReviewList;
	Integer maxPage;
	Integer itemCount;
}

#Struct K_ResponseGetMapReviews {
	ClubStruct::LibStructuresClub_K_MapReview[] ClubMapReviews;
	Integer ClubMapReviewsTotal;
}

#Struct K_HttpCreateNews {
	Text name;
	Text headline;
	Text body;
}

#Struct K_HttpNews {
	Text headline;
	Text body;
	Text mediaUrl;
	Text mediaTheme;
	Integer id;
	Integer clubId;
	Text name;
	Integer creationTimestamp;
}

#Struct K_HttpResponseFromGetAllBucketActivities{
	K_HttpBucketActivity[] clubBucketList;
	Integer maxPage;
	Integer itemCount;
}

#Struct K_ResponseFromGetBucketActivities {
	ClubStruct::LibStructuresClub_K_BucketActivity[] BucketActivities;
	Integer BucketActivitiesTotal;
}

#Struct K_HttpCreateRankings {
	Text name;
	Text useCase;
	Integer campaignId;
}

#Struct K_ResponseFromPostCreateRanking {
	Text useCase;
	Integer campaignId;
	Integer id;
	Integer clubId;
	Text name;
	Integer creationTimestamp;
	Text creatorAccountId;
	Text latestEditorAccountId;
}

#Struct K_HttpGetMyClubInfo {
	Integer pinnedClub;
	Integer tagClubId;
	Text tag;
}
#Struct K_ResponseFromGetMyClubInfo {
	Integer PinnedClubId;
	Integer TagClubId;
	Text TagClubTag;
}

#Struct K_HttpPostPinOrUnpinClub {
	Integer pinnedClub;
}
#Struct K_ResponseFromPostPinOrUnpinClub {
	Integer PinnedClubId;
}

#Struct K_HttpPostApplyOrRemoveClubTag {
	Integer tagClubId;
}
#Struct K_ResponseFromPostApplyOrRemoveClubTag {
	Integer TagClubId;
}

#Struct K_HttpClubRoomEdit {
	Text script;
	Integer campaignId;
}

#Struct K_HttpJoinLink {
	Text joinLink;
	Boolean starting;
}

#Struct K_JoinLink {
	Text JoinLink;
	Boolean IsStarting;
}

#Struct K_HttpJoinMapReviewActivity {
	Text joinLink;
	Boolean starting;
	Boolean noMap;
	Integer submissionWaitTimer;
}

#Struct K_JoinMapReviewActivity {
	Text JoinLink;
	Boolean IsStarting;
	Boolean NoMap;
	Integer SubmissionWaitTimer;
}

#Struct K_HttpMapReviewActivityWaitingTime {
	Integer seconds;
}

#Struct K_HttpAddMapQueueMapReviewActivity {
	Text mapUid;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the club theme url or the HTTP url depending on the given media type
Text Private_GetClubMediaUrl(Text _MediaUrl, Text _MediaTheme, Text _MediaType) {
	declare Text MediaUrl = ClubStruct::GetClubThemeUrl(_MediaTheme, _MediaType);
	if (MediaUrl == "") return _MediaUrl;
	return MediaUrl;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a list of clubs
 *
 *	@param	_FilterName								The name to filter
 *	@param	_IsMember									True to return clubs of the main user, False for all clubs
 *	@param	_Offset										The starting index
 *	@param	_Length										The length of the list
 *
 *	@return														The request
 */
Http::K_Request GetClubs(Text _FilterName, Boolean _IsMember, Integer _Offset, Integer _Length) {
	declare Text[Text] Query = [
		C_QueryParameter_Offset => ""^_Offset,
		C_QueryParameter_Length => ""^_Length
	];
	if (!_IsMember && _FilterName != "") {
		Query[C_QueryParameter_Name] = _FilterName;
	}
	
	declare Text QueryString = Http::CreateQueryString(Query);
	declare Text Url;
	if (_IsMember) {
		Url = Config::Get().APIBaseUrl^C_API_Club^C_Route_GetClubsMine^QueryString;
	} else {
		Url = Config::Get().APIBaseUrl^C_API_Club^C_Route_GetClubs^QueryString;
	}
	return Http::CreateGet(Url, C_Headers);
}
Http::K_Request GetClubs(Boolean _IsMember, Integer _Offset, Integer _Length) {
	return GetClubs("", _IsMember, _Offset, _Length);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a list of all clubs
 *
 *	@param	_Offset										The starting index
 *	@param	_Length										The length of the list
 *
 *	@return														The request
 */
Http::K_Request GetClubs(Integer _Offset, Integer _Length) {
	return GetClubs(False, _Offset, _Length);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetClubs request
K_ResponseGetClubs GetResponseFromGetClubs(Http::K_Request _Request) {
	declare K_ResponseGetClubs ResponseGetClubs;
	declare K_HttpResponseGetClubs HttpResponseGetClubs;
	HttpResponseGetClubs.fromjson(Http::GetResult(_Request));
	foreach (Club in HttpResponseGetClubs.clubList) {
		ResponseGetClubs.Clubs.add(ClubStruct::LibStructuresClub_K_Club {
			Id = Club.id,
			Name = Club.name,
			Tag = Club.tag,
			Description = Club.description,
			AuthorAccountId = Club.authorAccountId,
			CreationTimestamp = Club.creationTimestamp,
			EditionTimestamp = Club.editionTimestamp,
			IconUrl = Private_GetClubMediaUrl(Club.iconUrl, Club.iconTheme, ClubStruct::C_MediaType_Icon),
			DecalUrl = Private_GetClubMediaUrl(Club.decalUrl, Club.decalTheme, ClubStruct::C_MediaType_Decal),
			BgUrl = Private_GetClubMediaUrl(Club.backgroundUrl, Club.backgroundTheme, ClubStruct::C_MediaType_Bg),
			VerticalUrl = Private_GetClubMediaUrl(Club.verticalUrl, Club.verticalTheme, ClubStruct::C_MediaType_Vertical),
			DecoImageUrl_DecalSponsor4x1 = Private_GetClubMediaUrl(Club.decalSponsor4x1Url, "", ClubStruct::C_MediaType_DecalSponsor),
			DecoImageUrl_Screen16x9 = Private_GetClubMediaUrl(Club.screen16x9Url, Club.screen16x9Theme, ClubStruct::C_MediaType_Screen16x9),
			DecoImageUrl_Screen8x1 = Private_GetClubMediaUrl(Club.screen8x1Url, Club.screen8x1Theme, ClubStruct::C_MediaType_Screen8x1),
			DecoImageUrl_Screen16x1 = Private_GetClubMediaUrl(Club.screen16x1Url, Club.screen16x1Theme, ClubStruct::C_MediaType_Screen16x1),
			PopularityLevel = Club.popularityLevel,
			PrivacyState = Club.state
		});
	}
	ResponseGetClubs.ClubsTotal = HttpResponseGetClubs.clubCount;
	return ResponseGetClubs;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a specific club
 *
 *	@param	_ClubId										The id of the club to fetch
 *
 *	@return														The request
 */
Http::K_Request GetClub(Integer _ClubId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetClub, [C_RouteParameter_ClubId => ""^_ClubId]);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetClub request
ClubStruct::LibStructuresClub_K_Club GetResponseFromGetClub(Http::K_Request _Request) {
	declare K_HttpClub HttpResponseGetClub;
	HttpResponseGetClub.fromjson(Http::GetResult(_Request));
	return ClubStruct::LibStructuresClub_K_Club {
		Id = HttpResponseGetClub.id,
		Name = HttpResponseGetClub.name,
		Tag = HttpResponseGetClub.tag,
		Description = HttpResponseGetClub.description,
		AuthorAccountId = HttpResponseGetClub.authorAccountId,
		CreationTimestamp = HttpResponseGetClub.creationTimestamp,
		EditionTimestamp = HttpResponseGetClub.editionTimestamp,
		IconUrl = Private_GetClubMediaUrl(HttpResponseGetClub.iconUrl, HttpResponseGetClub.iconTheme, ClubStruct::C_MediaType_Icon),
		DecalUrl = Private_GetClubMediaUrl(HttpResponseGetClub.decalUrl, HttpResponseGetClub.decalTheme, ClubStruct::C_MediaType_Decal),
		BgUrl = Private_GetClubMediaUrl(HttpResponseGetClub.backgroundUrl, HttpResponseGetClub.backgroundTheme, ClubStruct::C_MediaType_Bg),
		VerticalUrl = Private_GetClubMediaUrl(HttpResponseGetClub.verticalUrl, HttpResponseGetClub.verticalTheme, ClubStruct::C_MediaType_Vertical),
		DecoImageUrl_DecalSponsor4x1 = Private_GetClubMediaUrl(HttpResponseGetClub.decalSponsor4x1Url, "", ClubStruct::C_MediaType_DecalSponsor),
		DecoImageUrl_Screen16x9 = Private_GetClubMediaUrl(HttpResponseGetClub.screen16x9Url, HttpResponseGetClub.screen16x9Theme, ClubStruct::C_MediaType_Screen16x9),
		DecoImageUrl_Screen8x1 = Private_GetClubMediaUrl(HttpResponseGetClub.screen8x1Url, HttpResponseGetClub.screen8x1Theme, ClubStruct::C_MediaType_Screen8x1),
		DecoImageUrl_Screen16x1 = Private_GetClubMediaUrl(HttpResponseGetClub.screen16x1Url, HttpResponseGetClub.screen16x1Theme, ClubStruct::C_MediaType_Screen16x1),
		PopularityLevel = HttpResponseGetClub.popularityLevel,
		PrivacyState = HttpResponseGetClub.state
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to create a club
 *
 *	@param	_Club								Information to create a club
 *
 *	@return										The request
 */
Http::K_Request PostClubCreate(ClubStruct::LibStructuresClub_K_Club _Club) {
	declare K_HttpCreateOrEditClub Club = K_HttpCreateOrEditClub {
		name = _Club.Name,
		tag = _Club.Tag,
		description = _Club.Description,
		state = _Club.PrivacyState
	};

	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^C_Route_PostClubCreate, Club.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostClubCreate request
ClubStruct::LibStructuresClub_K_Club GetResponseFromPostClubCreate(Http::K_Request _Request) {
	declare K_HttpClub CreatedClub;
	CreatedClub.fromjson(Http::GetResult(_Request));
	return ClubStruct::LibStructuresClub_K_Club {
		Id = CreatedClub.id,
		Name = CreatedClub.name,
		Tag = CreatedClub.tag,
		Description = CreatedClub.description,
		AuthorAccountId = CreatedClub.authorAccountId,
		CreationTimestamp = CreatedClub.creationTimestamp,
		EditionTimestamp = CreatedClub.editionTimestamp,
		IconUrl = Private_GetClubMediaUrl(CreatedClub.iconUrl, CreatedClub.iconTheme, ClubStruct::C_MediaType_Icon),
		DecalUrl = Private_GetClubMediaUrl(CreatedClub.decalUrl, CreatedClub.decalTheme, ClubStruct::C_MediaType_Decal),
		BgUrl = Private_GetClubMediaUrl(CreatedClub.backgroundUrl, CreatedClub.backgroundTheme, ClubStruct::C_MediaType_Bg),
		VerticalUrl = Private_GetClubMediaUrl(CreatedClub.verticalUrl, CreatedClub.verticalTheme, ClubStruct::C_MediaType_Vertical),
		DecoImageUrl_DecalSponsor4x1 = Private_GetClubMediaUrl(CreatedClub.decalSponsor4x1Url, "", ClubStruct::C_MediaType_DecalSponsor),
		DecoImageUrl_Screen16x9 = Private_GetClubMediaUrl(CreatedClub.screen16x9Url, CreatedClub.screen16x9Theme, ClubStruct::C_MediaType_Screen16x9),
		DecoImageUrl_Screen8x1 = Private_GetClubMediaUrl(CreatedClub.screen8x1Url, CreatedClub.screen8x1Theme, ClubStruct::C_MediaType_Screen8x1),
		DecoImageUrl_Screen16x1 = Private_GetClubMediaUrl(CreatedClub.screen16x1Url, CreatedClub.screen16x1Theme, ClubStruct::C_MediaType_Screen16x1),
		PopularityLevel = CreatedClub.popularityLevel,
		PrivacyState = CreatedClub.state
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to delete a club
 *
 *	@param	_ClubId										Id of the club to delete
 *
 *	@return														The request
 */
Http::K_Request PostClubDelete(Integer _ClubId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostClubDelete, [C_RouteParameter_ClubId => ""^_ClubId]);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a list of
 *	all members of a club
 *
 *	@param	_ClubId										The club id
 *	@param	_Offset										The starting index
 *	@param	_Length										The length of the list
 *
 *	@return														The request
 */
Http::K_Request GetClubMembers(Integer _ClubId, Integer _Offset, Integer _Length) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetClubMembers, [C_RouteParameter_ClubId => ""^_ClubId]);
	declare Text QueryString = Http::CreateQueryString([
		C_QueryParameter_Offset => ""^_Offset,
		C_QueryParameter_Length => ""^_Length
	]);
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^Route^QueryString;
	return Http::CreateGet(Url, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetClubMembers request
K_ResponseGetClubMembers GetResponseFromGetClubMembers(Http::K_Request _Request) {
	declare K_ResponseGetClubMembers ResponseGetClubMembers;
	declare K_HttpResponseGetClubMembers HttpResponseGetClubMembers;
	HttpResponseGetClubMembers.fromjson(Http::GetResult(_Request));
	foreach (Member in HttpResponseGetClubMembers.clubMemberList) {
		ResponseGetClubMembers.Members.add(ClubStruct::LibStructuresClub_K_Member {
			AccountId = Member.accountId,
			Role = Member.role,
			JoinDate = Member.creationTimestamp,
			VIP = Member.vip
		});
	}
	ResponseGetClubMembers.MembersTotal = HttpResponseGetClubMembers.itemCount;
	return ResponseGetClubMembers;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a list of
 *	all member requests of a club
 *
 *	@param	_ClubId										The club id
 *	@param	_Offset										The starting index
 *	@param	_Length										The length of the list
 *
 *	@return														The request
 */
Http::K_Request GetClubMemberRequests(Integer _ClubId, Integer _Offset, Integer _Length) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetClubMemberRequests, [C_RouteParameter_ClubId => ""^_ClubId]);
	declare Text QueryString = Http::CreateQueryString([
		C_QueryParameter_Offset => ""^_Offset,
		C_QueryParameter_Length => ""^_Length
	]);
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^Route^QueryString;
	return Http::CreateGet(Url, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetClubMemberRequests request
K_ResponseGetClubMembers GetResponseFromGetClubMemberRequests(Http::K_Request _Request) {
	return GetResponseFromGetClubMembers(_Request);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get info on a club member
 *
 *	@param	_ClubId									  The Id of the club to fetch
 *	@param	_AccountId								The account Id of the member to fetch
 *
 *	@return														The request
 */
Http::K_Request GetClubMemberWithId(Integer _ClubId, Text _AccountId) {
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^Http::InjectRouteParameters(
		C_Route_GetClubMemberWithId,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_AccountId => _AccountId]
	);
	return Http::CreateGet(Url, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetClubMemberId request
ClubStruct::LibStructuresClub_K_Member GetResponseFromGetClubMemberWithId(Http::K_Request _Request) {
	declare K_HttpResponseGetClubMemberId HttpResponseGetClubMemberId;
	HttpResponseGetClubMemberId.fromjson(Http::GetResult(_Request));

	return ClubStruct::LibStructuresClub_K_Member {
		AccountId = HttpResponseGetClubMemberId.accountId,
		Role = HttpResponseGetClubMemberId.role,
		JoinDate = HttpResponseGetClubMemberId.creationTimestamp,
		VIP = HttpResponseGetClubMemberId.vip,
		Moderator = HttpResponseGetClubMemberId.moderator,
		HasFeatured = HttpResponseGetClubMemberId.hasFeatured
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get info on a club member
 *
 *	@param	_ClubId									  The Id of the club to fetch
 *	@param	_Login										The login of the member to fetch
 *
 *	@return														The request
 */
Http::K_Request GetClubMemberFromLogin(Integer _ClubId, Text _Login) {
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^Http::InjectRouteParameters(
		C_Route_GetClubMemberFromLogin,
		[
			C_RouteParameter_ClubId => ""^_ClubId, 
			C_RouteParameter_Login => _Login
		]
	);
	return Http::CreateGet(Url, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetClubMemberFromLogin request
ClubStruct::LibStructuresClub_K_Member GetResponseFromGetClubMemberFromLogin(Http::K_Request _Request) {
	declare K_HttpResponseGetClubMemberId HttpResponseGetClubMemberId;
	HttpResponseGetClubMemberId.fromjson(Http::GetResult(_Request));

	return ClubStruct::LibStructuresClub_K_Member {
		AccountId = HttpResponseGetClubMemberId.accountId,
		Role = HttpResponseGetClubMemberId.role,
		JoinDate = HttpResponseGetClubMemberId.creationTimestamp,
		VIP = HttpResponseGetClubMemberId.vip,
		Moderator = HttpResponseGetClubMemberId.moderator,
		HasFeatured = HttpResponseGetClubMemberId.hasFeatured
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to delete a club member
 *
 *	@param	_ClubId									  The Id of the club to delete the user from
 *	@param	_AccountId								The account Id of the member to delete
 *
 *	@return														The request
 */
Http::K_Request DeleteClubMemberWithId(Integer _ClubId, Text _AccountId) {
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^Http::InjectRouteParameters(
		C_Route_DeleteClubMemberWithId,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_AccountId => _AccountId]
	);
	return Http::CreatePost(Url, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to edit the role of a club member
 *
 *	@param	_ClubId									  The Id of the club to delete the user from
 *	@param	_AccountId								The account Id of the member to delete
 *	@param	_Role											The role to set to the club member
 *
 *	@return														The request
 */
Http::K_Request EditClubMemberWithId(Integer _ClubId, Text _AccountId, Text _Role) {
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^Http::InjectRouteParameters(
		C_Route_EditClubMemberWithId,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_AccountId => _AccountId]
	);
	declare K_HttpRole Role = K_HttpRole {
		role = _Role
	};
	return Http::CreatePost(Url, Role.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to create a club member with the current user
 *
 *	@param	_ClubId									  The Id of the club to delete the user from
 *
 *	@return														The request
 */
Http::K_Request PostCreateClubMember(Integer _ClubId) {
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^Http::InjectRouteParameters(
		C_Route_PostCreateClubMember,
		[C_RouteParameter_ClubId => ""^_ClubId]
	);
	return Http::CreatePost(Url, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a list of all club rooms
 *
 *	@param	_FilterName								The name to filter
 *	@param	_Offset										The starting index
 *	@param	_Length										The length of the list
 *
 *	@return														The request
 */
Http::K_Request GetAllClubRooms(Text _FilterName, Integer _Offset, Integer _Length) {
	declare Text[Text] Query = [
		C_QueryParameter_Offset => ""^_Offset,
		C_QueryParameter_Length => ""^_Length
	];
	if (_FilterName != "") {
		Query[C_QueryParameter_Name] = _FilterName;
	}
	declare Text QueryString = Http::CreateQueryString(Query);
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^C_Route_GetAllClubRooms^QueryString;
	return Http::CreateGet(Url, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetAllClubRooms and GetClubRooms request
K_ResponseGetClubRooms GetResponseFromGetClubRooms(Http::K_Request _Request) {
	declare K_HttpResponseGetClubRooms HttpResponseGetClubRooms;
	HttpResponseGetClubRooms.fromjson(Http::GetResult(_Request));

	declare K_ResponseGetClubRooms ResponseGetClubRooms;
	foreach (HttpClubRoom in HttpResponseGetClubRooms.clubRoomList) {
		declare ClubStruct::LibStructuresClub_K_ScriptSetting[] ScriptSettings;
		foreach (HttpSetting in HttpClubRoom.room.scriptSettings) {
			ScriptSettings.add(ClubStruct::LibStructuresClub_K_ScriptSetting {
				Key = HttpSetting.key,
				Value = HttpSetting.value,
				Type = HttpSetting.type
			});
		}

		ResponseGetClubRooms.Rooms.add(ClubStruct::LibStructuresClub_K_Room {
			Id = HttpClubRoom.id,
			RoomId = HttpClubRoom.room.id,
			ClubId = HttpClubRoom.clubId,
			ClubName = HttpClubRoom.clubName,
			ActivityId = HttpClubRoom.activityId,
			IsHostedByNadeo = HttpClubRoom.nadeo,
			PlayerServerLogin = HttpClubRoom.playerServerLogin,
			Name = HttpClubRoom.name,
			HasPassword =  HttpClubRoom.password,
			Region = HttpClubRoom.room.region,
			MaxPlayers = HttpClubRoom.room.maxPlayers,
			ScriptName = HttpClubRoom.room.script,
			CampaignId = HttpClubRoom.campaignId,
			MapUids = HttpClubRoom.room.maps,
			MediaUrl = Private_GetClubMediaUrl(HttpClubRoom.mediaUrl, HttpClubRoom.mediaTheme, ClubStruct::C_MediaType_Icon),
			PopularityLevel = HttpClubRoom.popularityLevel,
			ScriptSettings = ScriptSettings,
			CreationTimestamp = HttpClubRoom.room.creationTimestamp,
			Scalable = HttpClubRoom.room.scalable,
			ServerInfo = ClubStruct::LibStructuresClub_K_ServerInfo {
				JoinLink = HttpClubRoom.room.serverInfo.joinLink,
				PlayerCount = HttpClubRoom.room.playerCount,
				CurrentMapUid = HttpClubRoom.room.serverInfo.currentMapUid,
				IsStarting = HttpClubRoom.room.serverInfo.starting
			},
			CreatorAccountId = HttpClubRoom.creatorAccountId,
			LatestEditorAccountId = HttpClubRoom.latestEditorAccountId
		});
	}
	ResponseGetClubRooms.ClubsRoomsTotal = HttpResponseGetClubRooms.itemCount;
	return ResponseGetClubRooms;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a list of activities in a specific club
 *
 *	@param	_ClubId										The Id of the club to fetch
 *	@param	_Offset										The starting index
 *	@param	_Length										The length of the list
 *	@param	_Active										True to only retrieve active activities, False to retrieve inactive ones.
 *
 *	@return														The request
 */
Http::K_Request GetClubActivities(Integer _ClubId, Integer _Offset, Integer _Length, Boolean _Active) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetClubActivities, [C_RouteParameter_ClubId => ""^_ClubId]);
	declare Text Active = "0";
	if (_Active) Active = "1";
	declare Text QueryString = Http::CreateQueryString([
		C_QueryParameter_Offset => ""^_Offset,
		C_QueryParameter_Length => ""^_Length,
		C_QueryParameter_Active => Active
	]);
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^Route^QueryString;
	return Http::CreateGet(Url, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetClubActivities request
K_ResponseGetClubActivities GetResponseFromGetClubActivities(Http::K_Request _Request) {
	declare K_HttpResponseGetClubActivities HttpResponseGetClubActivities;
	HttpResponseGetClubActivities.fromjson(Http::GetResult(_Request));

	declare K_ResponseGetClubActivities ResponseGetClubActivities;
	foreach (HttpActivity in HttpResponseGetClubActivities.activityList) {
		ResponseGetClubActivities.Activities.add(ClubStruct::LibStructuresClub_K_Activity {
			Id = HttpActivity.id,
			Name = HttpActivity.name,
			Type = HttpActivity.activityType,
			ExternalId = HttpActivity.externalId,
			Position = HttpActivity.position,
			Public = HttpActivity.public,
			Active = HttpActivity.active,
			MediaUrl = Private_GetClubMediaUrl(HttpActivity.mediaUrl, HttpActivity.mediaTheme, ClubStruct::C_MediaType_Icon),
			Password = HttpActivity.password,
			Featured = HttpActivity.featured,
			CreatorAccountId = HttpActivity.creatorAccountId,
			LatestEditorAccountId = HttpActivity.latestEditorAccountId
		});
	}
	ResponseGetClubActivities.ActivitiesTotal = HttpResponseGetClubActivities.itemCount;
	return ResponseGetClubActivities;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get featured activity of specific clubs
 *
 *	@param	_ClubIds									The Ids of the clubs to fetch
 *
 *	@return														The request
 */
Http::K_Request GetClubsFeaturedActivity(Integer[] _ClubIds) {
	// Convert the integer array in the format list "1,2,3" needed by the API
	declare Text[] ClubIds;
	foreach (Id in _ClubIds) ClubIds.add(""^Id);
	declare Text ClubIdsQuery = TL::Join(",", ClubIds);

	declare Text QueryString = Http::CreateQueryString([C_QueryParameter_ClubIds => ClubIdsQuery]);
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^C_Route_GetClubsActivtyFeatured^QueryString;
	return Http::CreateGet(Url, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetClubsFeaturedActivity request
ClubStruct::LibStructuresClub_K_Activity[Integer] GetResponseFromGetClubsFeaturedActivity(Http::K_Request _Request) {
	declare K_HttpActivity[] HttpResponseGetClubsFeaturedActivity;
	HttpResponseGetClubsFeaturedActivity.fromjson(Http::GetResult(_Request));

	declare ClubStruct::LibStructuresClub_K_Activity[Integer] ResponseGetClubsFeaturedActivity;
	foreach (HttpActivity in HttpResponseGetClubsFeaturedActivity) {
		ResponseGetClubsFeaturedActivity[HttpActivity.clubId] = ClubStruct::LibStructuresClub_K_Activity {
			Id = HttpActivity.id,
			ClubId = HttpActivity.clubId,
			Name = HttpActivity.name,
			Type = HttpActivity.activityType,
			ExternalId = HttpActivity.externalId,
			Position = HttpActivity.position,
			Public = HttpActivity.public,
			Active = HttpActivity.active,
			MediaUrl = Private_GetClubMediaUrl(HttpActivity.mediaUrl, HttpActivity.mediaTheme, ClubStruct::C_MediaType_Icon),
			Password = HttpActivity.password,
			Featured =  HttpActivity.featured,
			CreatorAccountId = HttpActivity.creatorAccountId,
			LatestEditorAccountId = HttpActivity.latestEditorAccountId
		};
	}
	return ResponseGetClubsFeaturedActivity;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to move a club activity
 *
 *	@param	_ClubId										Id of the club of the campaign
 *	@param	_ActivityId								Id of the activity to move
 *	@param	_Position									The new position of the activity
 *
 *	@return														The request
 */
Http::K_Request PostMoveActivity(Integer _ClubId, Integer _ActivityId, Integer _Position) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostEditActivity,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	declare K_HttpMoveActivity MoveActivity = K_HttpMoveActivity {
		position = _Position
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, MoveActivity.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to delete a club activity
 *
 *	@param	_ClubId										Id of the club of the campaign
 *	@param	_ActivityId								Id of the activity to delete
 *
 *	@return														The request
 */
Http::K_Request PostDeleteActivity(Integer _ClubId, Integer _ActivityId) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostDeleteActivity,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to upload a media to a club activity
 *
 *	@param	_ClubId										Id of the club of the campaign
 *	@param	_ActivityId								Id of the activity to move
 *	@param	_MediaUrl									The new media of the activity
 *
 *	@return														The request
 */
Http::K_Request PostUploadMediaActivity(Integer _ClubId, Integer _ActivityId, Text _MediaUrl) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostUploadMediaActivity,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	return Http::CreatePostFile(Config::Get().APIBaseUrl^C_API_Club^Route, _MediaUrl, []);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a list of all club campaigns
 *
 *	@param	_Sort											The sort option
 *	@param	_Order										The sort order
 *	@param	_FilterName								The name to filter
 *	@param	_Offset										The starting index
 *	@param	_Length										The length of the list
 *
 *	@return														The request
 */
Http::K_Request GetAllClubCampaigns(Text _Sort, Text _Order, Text _FilterName, Integer _Offset, Integer _Length) {
	declare Text[Text] Query = [
		C_QueryParameter_Offset => ""^_Offset,
		C_QueryParameter_Length => ""^_Length
	];
	if (_Sort != "") {
		Query[C_QueryParameter_Sort] = _Sort;
	}
	if (_Order != "") {
		Query[C_QueryParameter_Order] = _Order;
	}
	if (_FilterName != "") {
		Query[C_QueryParameter_Name] = _FilterName;
	}
	declare Text QueryString = Http::CreateQueryString(Query);
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^C_Route_GetAllClubCampaigns^QueryString;
	return Http::CreateGet(Url, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get all campaigns of a specific club
 *
 *	@param	_ClubId										The id of the club
 *	@param	_Offset										The starting index
 *	@param	_Length										The length of the list
 *	@param	_Active										Filter for active campaign or not, if not set, both will be sent
 *
 *	@return														The request
 */
Http::K_Request GetClubCampaignList(Integer _ClubId, Integer _Offset, Integer _Length, Boolean _Active) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetClubCampaignList, [C_RouteParameter_ClubId => ""^_ClubId]);
	declare Text Active = "0";
	if (_Active) Active = "1";
	declare Text QueryString = Http::CreateQueryString([
		C_QueryParameter_Offset => ""^_Offset,
		C_QueryParameter_Length => ""^_Length,
		C_QueryParameter_Active => Active
	]);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route^QueryString, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetAllClubCampaigns and GetClubCampaignList request
K_ResponseGetClubCampaignList GetResponseFromGetClubCampaignList(Http::K_Request _Request) {
	declare K_ResponseGetClubCampaignList ResponseGetClubCampaigns;
	declare K_HttpResponseGetClubCampaignList HttpResponseGetClubCampaigns;
	HttpResponseGetClubCampaigns.fromjson(Http::GetResult(_Request));

	foreach (HttpClubCampaign in HttpResponseGetClubCampaigns.clubCampaignList) {
		declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = CampaignStruct::GetCampaignFromHttpCampaign(HttpClubCampaign.campaign);
		Campaign.ActivityId = HttpClubCampaign.activityId;
		Campaign.Type = CampaignStruct::C_CampaignType_Club;
		Campaign.Media.ButtonBackgroundUrl = Private_GetClubMediaUrl(HttpClubCampaign.mediaUrl, HttpClubCampaign.mediaTheme, ClubStruct::C_MediaType_Icon);
		Campaign.Club.Name = HttpClubCampaign.clubName;
		Campaign.Club.DecalUrl = HttpClubCampaign.clubDecalUrl;
		Campaign.PopularityLevel = HttpClubCampaign.popularityLevel;
		Campaign.ClubOfficialTrophiesEnabled = HttpClubCampaign.trophies;
		Campaign.CreatorAccountId = HttpClubCampaign.creatorAccountId;
		Campaign.LatestEditorAccountId = HttpClubCampaign.latestEditorAccountId;
		ResponseGetClubCampaigns.CampaignList.add(Campaign);
	}

	ResponseGetClubCampaigns.CampaignsTotal = HttpResponseGetClubCampaigns.itemCount;
	return ResponseGetClubCampaigns;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a specific campaign of a specific club
 *
 *	@param	_ClubId										The id of the club
 *	@param	_CampaignId								The id of the campaign
 *	@param	_Length										The length of the list
 *	@param	_Active										Filter for active campaign or not, if not set, both will be sent
 *
 *	@return														The request
 */
Http::K_Request GetClubCampaign(Integer _ClubId, Integer _CampaignId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetClubCampaign,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_CampaignId => ""^_CampaignId
		]
	);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetClubCampaign request
CampaignStruct::LibCampaignStruct_K_Campaign GetResponseFromGetClubCampaign(Http::K_Request _Request) {
	declare K_HttpClubCampaign HttpResponseGetClubCampaign;
	HttpResponseGetClubCampaign.fromjson(Http::GetResult(_Request));
	
	declare CampaignStruct::LibCampaignStruct_K_Campaign ResponseGetClubCampaign;
	ResponseGetClubCampaign = CampaignStruct::GetCampaignFromHttpCampaign(HttpResponseGetClubCampaign.campaign);
	ResponseGetClubCampaign.Type = CampaignStruct::C_CampaignType_Club;
	ResponseGetClubCampaign.Club.Name = HttpResponseGetClubCampaign.clubName;
	ResponseGetClubCampaign.Club.DecalUrl = HttpResponseGetClubCampaign.clubDecalUrl;
	ResponseGetClubCampaign.PopularityLevel = HttpResponseGetClubCampaign.popularityLevel;
	ResponseGetClubCampaign.ClubOfficialTrophiesEnabled = HttpResponseGetClubCampaign.trophies;
	ResponseGetClubCampaign.Media.ButtonBackgroundUrl = Private_GetClubMediaUrl(HttpResponseGetClubCampaign.mediaUrl, HttpResponseGetClubCampaign.mediaTheme, ClubStruct::C_MediaType_Icon);

	return ResponseGetClubCampaign;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to create a club campaign
 *
 *	@param	_Campaign									The campaign to create
 *
 *	@return														The request
 */
Http::K_Request PostCreateCampaign(CampaignStruct::LibCampaignStruct_K_Campaign _Campaign) {
	declare K_HttpCampaignCreation HttpCampaignRessource = K_HttpCampaignCreation {
		name = _Campaign.Name
	};
	foreach (Category in _Campaign.Categories) {
		foreach (Map in Category.Playlist) {
			if (Map.Uid != "") {
				HttpCampaignRessource.playlist.add(
					K_HttpMapCreation {
						position = Map.Position,
						mapUid = Map.Uid
					}
				);
			}
		}
	}

	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostCreateCampaign,
		[C_RouteParameter_ClubId => ""^_Campaign.Club.Id]
	);
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^Route;

	return Http::CreatePost(Url, HttpCampaignRessource.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to edit a club campaign
 *
 *	@param	_Campaign									The campaign to edit
 *
 *	@return														The request
 */
Http::K_Request PostEditCampaign(CampaignStruct::LibCampaignStruct_K_Campaign _Campaign) {
	declare K_HttpCampaignCreation HttpCampaignRessource = K_HttpCampaignCreation {
		name = _Campaign.Name
	};
	foreach (Category in _Campaign.Categories) {
		foreach (Map in Category.Playlist) {
			if (Map.Uid != "") {
				HttpCampaignRessource.playlist.add(
					K_HttpMapCreation {
						position = Map.Position,
						mapUid = Map.Uid
					}
				);
			}
		}
	}

	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostEditCampaign,
		[
			C_RouteParameter_ClubId => ""^_Campaign.Club.Id,
			C_RouteParameter_CampaignId => ""^_Campaign.Id
		]
	);
	declare Text Url = Config::Get().APIBaseUrl^C_API_Club^Route;

	return Http::CreatePost(Url, HttpCampaignRessource.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostCreateCampaign or PostEditCampaign request
K_ResponseFromPostCreateCampaign GetResponseFromPostCreateOrEditCampaign(Http::K_Request _Request) {
	declare K_HttpResponseFromPostCreateCampaign HttpCampaignFromResponse;
	HttpCampaignFromResponse.fromjson(Http::GetResult(_Request));

	declare CampaignStruct::LibCampaignStruct_K_Campaign CampaignResult;
	// No more info needed than that for now
	CampaignResult.Id = HttpCampaignFromResponse.campaignId;
	CampaignResult.Club = ClubStruct::LibStructuresClub_K_Club {
		Id = HttpCampaignFromResponse.clubId
	};
	CampaignResult.Type = CampaignStruct::C_CampaignType_Club;

	return K_ResponseFromPostCreateCampaign {
		Campaign = CampaignResult,
		ActivityId = HttpCampaignFromResponse.activityId
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to activate a club activity
 *
 *	@param	_ClubId										Id of the club
 *	@param	_ActivityId								Id of the activity to de/activate
 *	@param	_Active										True to activate the activity, False otherwise
 *
 *	@return														The request
 */
Http::K_Request PostActivateActivity(Integer _ClubId, Integer _ActivityId, Boolean _Active) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostEditActivity,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	declare Integer Active = 0;
	if (_Active) Active = 1;
	declare K_HttpActivateActivity ActivateActivity = K_HttpActivateActivity {
		active = Active
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, ActivateActivity.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to update the privacy of a club activity
 *
 *	@param	_ClubId										Id of the club
 *	@param	_ActivityId								Id of the activity to update
 *	@param	_Public										True to set it public the activity, False otherwise
 *
 *	@return														The request
 */
Http::K_Request PostUpdatePrivacyActivity(Integer _ClubId, Integer _ActivityId, Boolean _Public) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostEditActivity,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	declare Integer Public = 0;
	if (_Public) Public = 1;
	declare K_HttpUpdatePrivacyActivity UpdatePrivacyActivity = K_HttpUpdatePrivacyActivity {
		public = Public
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, UpdatePrivacyActivity.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to update the featured activity of a club
 *
 *	@param	_ClubId										Id of the club
 *	@param	_ActivityId								Id of the activity to update
 *	@param	_Public										True to feature the activity, False otherwise
 *
 *	@return														The request
 */
Http::K_Request PostUpdateFeaturedActivity(Integer _ClubId, Integer _ActivityId, Boolean _Featured) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostEditActivity,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	declare Integer Featured = 0;
	if (_Featured) Featured = 1;
	declare K_HttpUpdateFeaturedActivity UpdateFeaturedActivity = K_HttpUpdateFeaturedActivity {
		featured = Featured
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, UpdateFeaturedActivity.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to update the name of a club activity
 *
 *	@param	_ClubId										Id of the club
 *	@param	_ActivityId								Id of the activity to update
 *	@param	_Name											The name to set to the activity
 *
 *	@return														The request
 */
Http::K_Request PostUpdateActivityName(Integer _ClubId, Integer _ActivityId, Text _Name) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostEditActivity,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	declare K_HttpUpdateActivityName UpdateActivityName = K_HttpUpdateActivityName {
		name = _Name
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, UpdateActivityName.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to update the media theme of the activity
 *
 *	@param	_ClubId										Id of the club
 *	@param	_ActivityId								Id of the activity to update
 *	@param	_ThemeName											The name of the theme
 *
 *	@return														The request
 */
Http::K_Request PostUpdateActivityMediaTheme(Integer _ClubId, Integer _ActivityId, Text _ThemeName) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostEditActivity,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	declare K_HttpUpdateActivityMediaTheme UpdateActivityMediaTheme = K_HttpUpdateActivityMediaTheme {
		mediaTheme = _ThemeName
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, UpdateActivityMediaTheme.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to create a club room
 *
 *	@param	_Room											The room to create
 *	@param	_EditRoom									True if it's an edit of an existing room
 *
 *	@return														The request
 */
Http::K_Request PostClubRoomCreateOrEdit(ClubStruct::LibStructuresClub_K_Room _Room, Boolean _EditRoom) {
	declare K_HttpSetting[] HttpScriptSettings;
	foreach (ScriptSetting in _Room.ScriptSettings) {
		HttpScriptSettings.add(K_HttpSetting {
			key = ScriptSetting.Key,
			value = ScriptSetting.Value,
			type = ScriptSetting.Type
		});
	}

	declare Integer Scalable;
	if (_Room.Scalable) Scalable = 1;

	declare Integer Password;
	if (_Room.HasPassword && !_EditRoom) Password = 1;

	declare Text PostRessource;
	if (_Room.CampaignId == CampaignStruct::C_Campaign_NullId) {
		declare K_HttpRoomCreationWithMapList HttpRoomCreationWithMapList = K_HttpRoomCreationWithMapList {
			name = _Room.Name,
			script = _Room.ScriptName,
			region = _Room.Region,
			maxPlayersPerServer =_Room.MaxPlayers,
			settings = HttpScriptSettings,
			maps = _Room.MapUids,
			scalable = Scalable,
			password = Password
		};
		PostRessource = HttpRoomCreationWithMapList.tojson();
	} else {
		declare K_HttpRoomCreationWithCampaignId HttpRoomCreationWithCampaignId = K_HttpRoomCreationWithCampaignId {
			name = _Room.Name,
			script = _Room.ScriptName,
			region = _Room.Region,
			maxPlayersPerServer = _Room.MaxPlayers,
			settings = HttpScriptSettings,
			campaignId = _Room.CampaignId,
			scalable = Scalable,
			password = Password
		};
		PostRessource = HttpRoomCreationWithCampaignId.tojson();
	}

	declare Text Route;
	if (_EditRoom) {
		Route = Http::InjectRouteParameters(
			C_Route_PostClubRoomEdit,
			[C_RouteParameter_ClubId => ""^_Room.ClubId, C_RouteParameter_ActivityId => ""^_Room.Id]
		);
	} else {
		Route = Http::InjectRouteParameters(
			C_Route_PostClubRoomCreate,
			[C_RouteParameter_ClubId => ""^_Room.ClubId]
		);
	}

	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, PostRessource, C_Headers);
}
Http::K_Request PostClubRoomCreate(ClubStruct::LibStructuresClub_K_Room _Room) {
	return PostClubRoomCreateOrEdit(_Room, False);
}
Http::K_Request PostClubRoomEdit(ClubStruct::LibStructuresClub_K_Room _Room) {
	return PostClubRoomCreateOrEdit(_Room, True);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to edit a club room from a server login
 *
 *	@param	_ClubId										Id of the club where is the room
 *	@param	_ActivityId								Id of the club room activity to edit
 *	@param	_Name											Name of the club room to edit
 *	@param	_ServerLogin							Login of the server to link the room to
 *
 *	@return														The request
 */
Http::K_Request PostClubRoomEditFromServer(Integer _ClubId, Integer _ActivityId, Text _Name, Text _ServerLogin) {
	declare K_HttpClubRoomCreationFromServer ClubRoomEdition = K_HttpClubRoomCreationFromServer {
		name = _Name,
		login = _ServerLogin
	};
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostClubRoomEditFromServer,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_ActivityId => ""^_ActivityId]
	);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, ClubRoomEdition.tojson(), C_Headers);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to create a club room from a server login
 *
 *	@param	_ClubId										Id of the club to create the room into
 *	@param	_Name											Name of the club room to create
 *	@param	_ServerLogin							Login of the server to link the room to
 *
 *	@return														The request
 */
Http::K_Request PostClubRoomCreateFromServer(Integer _ClubId, Text _Name, Text _ServerLogin) {
	declare K_HttpClubRoomCreationFromServer ClubRoomCreation = K_HttpClubRoomCreationFromServer {
		name = _Name,
		login = _ServerLogin
	};
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostClubRoomCreateFromServer,
		[C_RouteParameter_ClubId => ""^_ClubId]
	);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, ClubRoomCreation.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostClubRoomCreateOrEdit request
ClubStruct::LibStructuresClub_K_Room GetResponseFromPostClubRoomCreateOrEdit(Http::K_Request _Request) {
	declare K_HttpClubRoom HttpResponseClubRoom;
	HttpResponseClubRoom.fromjson(Http::GetResult(_Request));

	declare ClubStruct::LibStructuresClub_K_ScriptSetting[] ScriptSettings;
	foreach (HttpSetting in HttpResponseClubRoom.room.scriptSettings) {
		ScriptSettings.add(ClubStruct::LibStructuresClub_K_ScriptSetting {
			Key = HttpSetting.key,
			Value = HttpSetting.value,
			Type = HttpSetting.type
		});
	}

	return ClubStruct::LibStructuresClub_K_Room {
		Id = HttpResponseClubRoom.id,
		RoomId = HttpResponseClubRoom.room.id,
		ClubId = HttpResponseClubRoom.clubId,
		ClubName = HttpResponseClubRoom.clubName,
		ActivityId = HttpResponseClubRoom.activityId,
		IsHostedByNadeo = HttpResponseClubRoom.nadeo,
		PlayerServerLogin = HttpResponseClubRoom.playerServerLogin,
		Name = HttpResponseClubRoom.name,
		HasPassword = HttpResponseClubRoom.password,
		Region = HttpResponseClubRoom.room.region,
		MaxPlayers = HttpResponseClubRoom.room.maxPlayers,
		ScriptName = HttpResponseClubRoom.room.script,
		CampaignId = HttpResponseClubRoom.campaignId,
		MapUids = HttpResponseClubRoom.room.maps,
		MediaUrl = Private_GetClubMediaUrl(HttpResponseClubRoom.mediaUrl, HttpResponseClubRoom.mediaTheme, ClubStruct::C_MediaType_Icon),
		PopularityLevel = HttpResponseClubRoom.popularityLevel,
		CreationTimestamp = HttpResponseClubRoom.room.creationTimestamp,
		Scalable = HttpResponseClubRoom.room.scalable,
		ScriptSettings = ScriptSettings
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostEditClub, PostUploadClubMedia, PostDeleteClubMedia request
ClubStruct::LibStructuresClub_K_Club GetResponseFromPostEditClubRequests(Http::K_Request _Request) {
	declare K_HttpClub EditedClub;
	EditedClub.fromjson(Http::GetResult(_Request));
	return ClubStruct::LibStructuresClub_K_Club {
		Id = EditedClub.id,
		Name = EditedClub.name,
		Tag = EditedClub.tag,
		Description = EditedClub.description,
		AuthorAccountId = EditedClub.authorAccountId,
		CreationTimestamp = EditedClub.creationTimestamp,
		EditionTimestamp = EditedClub.editionTimestamp,
		IconUrl = Private_GetClubMediaUrl(EditedClub.iconUrl, EditedClub.iconTheme, ClubStruct::C_MediaType_Icon),
		DecalUrl = Private_GetClubMediaUrl(EditedClub.decalUrl, EditedClub.decalTheme, ClubStruct::C_MediaType_Decal),
		BgUrl = Private_GetClubMediaUrl(EditedClub.backgroundUrl, EditedClub.backgroundTheme, ClubStruct::C_MediaType_Bg),
		VerticalUrl = Private_GetClubMediaUrl(EditedClub.verticalUrl, EditedClub.verticalTheme, ClubStruct::C_MediaType_Vertical),
		DecoImageUrl_DecalSponsor4x1 = Private_GetClubMediaUrl(EditedClub.decalSponsor4x1Url, "", ClubStruct::C_MediaType_DecalSponsor),
		DecoImageUrl_Screen16x9 = Private_GetClubMediaUrl(EditedClub.screen16x9Url, EditedClub.screen16x9Theme, ClubStruct::C_MediaType_Screen16x9),
		DecoImageUrl_Screen8x1 = Private_GetClubMediaUrl(EditedClub.screen8x1Url, EditedClub.screen8x1Theme, ClubStruct::C_MediaType_Screen8x1),
		DecoImageUrl_Screen16x1 = Private_GetClubMediaUrl(EditedClub.screen16x1Url, EditedClub.screen16x1Theme, ClubStruct::C_MediaType_Screen16x1),
		PopularityLevel = EditedClub.popularityLevel,
		PrivacyState = EditedClub.state
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to edit a club
 *
 *	@param	_Club								Information to edit a club
 *
 *	@return										The request
 */
Http::K_Request PostEditClub(ClubStruct::LibStructuresClub_K_Club _Club) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostEditClub, [C_RouteParameter_ClubId => ""^_Club.Id]);
	declare Text[Text] HttpClubEdit = [
		"name" => _Club.Name,
		"tag" => _Club.Tag,
		"description" => _Club.Description,
		"state" => _Club.PrivacyState
	];

	foreach (MediaType => MediaTranslation in C_MediaType_Translations) {
		if (MediaType != ClubStruct::C_MediaType_DecalSponsor) {
			declare Text MediaUrl = ClubStruct::GetMediaFromType(_Club, MediaType);
			if (C_ClubThemes_Folders.existskey(MediaUrl) || MediaUrl == "") {
				switch (MediaType) {
					case ClubStruct::C_MediaType_Icon: HttpClubEdit["iconTheme"] = MediaUrl;
					case ClubStruct::C_MediaType_Decal: HttpClubEdit["decalTheme"] = MediaUrl;
					case ClubStruct::C_MediaType_Screen16x9: HttpClubEdit["screen16x9Theme"] = MediaUrl;
					case ClubStruct::C_MediaType_Screen8x1: HttpClubEdit["screen8x1Theme"] = MediaUrl;
					case ClubStruct::C_MediaType_Screen16x1: HttpClubEdit["screen16x1Theme"] = MediaUrl;
					case ClubStruct::C_MediaType_Vertical: HttpClubEdit["verticalTheme"] = MediaUrl;
					case ClubStruct::C_MediaType_Bg: HttpClubEdit["backgroundTheme"] = MediaUrl;
				}
				
			}
		}
	}

	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, HttpClubEdit.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostEditClub request
ClubStruct::LibStructuresClub_K_Club GetResponseFromPostEditClub(Http::K_Request _Request) {
	return GetResponseFromPostEditClubRequests(_Request);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to uplaod a media of a club
 *
 *	@param	_ClubId										Id of the club to edit
 *	@param	_MediaType								The type of media to upload
 *	@param	_MediaUrl									The url of the logo file
 *
 *	@return														The request
 */
Http::K_Request PostUploadClubMedia(Integer _ClubId, Text _MediaType, Text _MediaUrl) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostUploadClubMedia, [C_RouteParameter_ClubId => ""^_ClubId]);
	declare Text QueryString = Http::CreateQueryString([C_QueryParameter_Format => _MediaType]);
	return Http::CreatePostFile(Config::Get().APIBaseUrl^C_API_Club^Route^QueryString, _MediaUrl, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostUploadClubMedia request
ClubStruct::LibStructuresClub_K_Club GetResponseFromPostUploadClubMedia(Http::K_Request _Request) {
	return GetResponseFromPostEditClubRequests(_Request);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to delete a media of a club
 *
 *	@param	_ClubId										Id of the club to edit
 *	@param	_MediaType								The type of media to delete
 *
 *	@return														The request
 */
Http::K_Request PostDeleteClubMedia(Integer _ClubId, Text _MediaType) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostDeleteClubMedia, [C_RouteParameter_ClubId => ""^_ClubId]);
	declare Text QueryString = Http::CreateQueryString([C_QueryParameter_Format => _MediaType]);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route^QueryString, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostDeleteClubMedia request
ClubStruct::LibStructuresClub_K_Club GetResponseFromPostDeleteClubMedia(Http::K_Request _Request) {
	return GetResponseFromPostEditClubRequests(_Request);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to delete a club
 *
 *	@param	_ClubId										Id of the club to edit
 *
 *	@return														The request
 */
Http::K_Request PostDeleteClub(Integer _ClubId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostDeleteClub, [C_RouteParameter_ClubId => ""^_ClubId]);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to set a VIP to a club
 *
 *	@param	_ClubId										Id of the club
 *	@param	_AccountId								Account id of the VIP to set
 *
 *	@return														The request
 */
Http::K_Request PostSetVIP(Integer _ClubId, Text _AccountId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostSetVIP, [C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_AccountId => ""^_AccountId]);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to unset a VIP to a club
 *
 *	@param	_ClubId										Id of the club
 *	@param	_AccountId								Account id of the VIP to unset
 *
 *	@return														The request
 */
Http::K_Request PostUnsetVIP(Integer _ClubId, Text _AccountId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostUnsetVIP, [C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_AccountId => ""^_AccountId]);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the list of VIP on a specific map and in specific club
 *
 *	@param	_ClubId										The id of the club
 *	@param	_MapUid										The uid of the map
 *	@param	_SeasonUid								The seasonId to get the record in
 *
 *	@return														The request
 */
Http::K_Request GetVIPListOnMap(Integer _ClubId, Text _MapUid, Text _SeasonUid) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetVIPListOnMap,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_MapUid => _MapUid
		]
	);
	declare Text QueryString = Http::CreateQueryString([C_QueryParameter_SeasonUid => _SeasonUid]);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route^QueryString, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the list of global vip on a map linked to the player
 *
 *	@param	_MapUid										The uid of the map
 *	@param	_SeasonUid								The seasonId to get the record in
 *
 *	@return														The request
 */
Http::K_Request GetGlobalVIPListOnMap(Text _MapUid, Text _SeasonUid) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetGlobalVIPListOnMap, [C_RouteParameter_MapUid => _MapUid]);
	declare Text QueryString = Http::CreateQueryString([C_QueryParameter_SeasonUid => _SeasonUid]);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route^QueryString, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetVIPListOnMap and GetGlobalVIPListOnMap request
Text[] GetResponseFromGetVIPListOnMap(Http::K_Request _Request) {
	declare K_HttpResponseFromGetVIPListOnMap HttpResponseFromGetVIPListOnMap;
	HttpResponseFromGetVIPListOnMap.fromjson(Http::GetResult(_Request));

	return HttpResponseFromGetVIPListOnMap.accountIdList;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the list of followers of a vip on a map
 *
 *	@param	_MapUid										The uid of the map
 *	@param	_SeasonUid								The seasonId to get the record in
 *
 *	@return														The request
 */
Http::K_Request GetFollowersListOnMap(Text _MapUid, Text _SeasonUid) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetFollowersListOnMap, [C_RouteParameter_MapUid => _MapUid]);
	declare Text QueryString = Http::CreateQueryString([C_QueryParameter_SeasonUid => _SeasonUid]);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route^QueryString, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetFollowersListOnMap request
Text[] GetResponseFromGetFollowersListOnMap(Http::K_Request _Request) {
	declare K_HttpResponseFromGetVIPListOnMap HttpResponseFromGetFollowersListOnMap;
	HttpResponseFromGetFollowersListOnMap.fromjson(Http::GetResult(_Request));

	return HttpResponseFromGetFollowersListOnMap.accountIdList;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to create a bucket activity
 *
 *	@param	_ClubId										Id of the club
 *	@param	_Name											Name of the bucket activity
 *	@param	_BucketType								Type of the bucket activity to create
 *
 *	@return														The request
 */
Http::K_Request PostCreateBucket(Integer _ClubId, Text _Name, Text _BucketType) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostCreateBucket, [C_RouteParameter_ClubId => ""^_ClubId]);
	declare K_HttpCreateBucket HttpCreateBucket = K_HttpCreateBucket {
		name = _Name,
		type = _BucketType
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, HttpCreateBucket.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostCreateBucket or PostEditBucket request
ClubStruct::LibStructuresClub_K_Activity GetResponseFromPostCreateOrEditBucket(Http::K_Request _Request) {
	declare K_HttpBucketActivity HttpBucketActivity;
	HttpBucketActivity.fromjson(Http::GetResult(_Request));

	return ClubStruct::LibStructuresClub_K_Activity {
		Id = HttpBucketActivity.id,
		Name = HttpBucketActivity.name,
		Type = HttpBucketActivity.type
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostCreateBucket request
ClubStruct::LibStructuresClub_K_Activity GetResponseFromPostCreateBucket(Http::K_Request _Request) {
	return GetResponseFromPostCreateOrEditBucket(_Request);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to create a bucket activity
 *
 *	@param	_ClubId										Id of the club
 *	@param	_ActivityId								Id of the bucket activity
 *	@param	_Name											Name of the bucket activity
 *
 *	@return														The request
 */
Http::K_Request PostEditBucket(Integer _ClubId, Integer _ActivityId, Text _Name) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostEditBucket, [C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_ActivityId => ""^_ActivityId]);
	declare K_HttpEditBucket HttpEditBucket = K_HttpEditBucket {
		name = _Name
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, HttpEditBucket.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostEditBucket request
ClubStruct::LibStructuresClub_K_Activity GetResponseFromPostEditBucket(Http::K_Request _Request) {
	return GetResponseFromPostCreateOrEditBucket(_Request);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to add items to a bucket activity
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the activity
 *	@param	_ItemIdList								The list of item ids to add
 *
 *	@return														The request
 */
Http::K_Request PostAddBucketItems(Integer _ClubId, Integer _ActivityId, Text[] _ItemIdList) {
	declare K_HttpBucketItemList HttpPostAddBucketItems = K_HttpBucketItemList {
		itemIdList = _ItemIdList
	};
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostAddBucketItems,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_ActivityId => ""^_ActivityId]
	);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, HttpPostAddBucketItems.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to edit an item from a bucket activity
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the activity
 *	@param	_ItemId										The id of the item to edit
 *	@param	_Position									The position of the item (in the bucket item list)
 *	@param	_Description							The description of the item
 *
 *	@return														The request
 */
Http::K_Request PostEditBucketItem(Integer _ClubId, Integer _ActivityId, Text _ItemId, Integer _Position, Text _Description) {
	declare K_HttpBucketItemDesc HttpPostEditBucketItem = K_HttpBucketItemDesc {
		position = _Position,
		description = _Description
	};

	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostEditBucketItem,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_ActivityId => ""^_ActivityId, C_RouteParameter_ItemId => _ItemId]
	);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, HttpPostEditBucketItem.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to add a media for an item from a bucket activity
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the activity
 *	@param	_ItemId										The id of the item
 *	@param	_MediaUrl									The media to add
 *
 *	@return														The request
 */
Http::K_Request PostBucketItemAddMedia(Integer _ClubId, Integer _ActivityId, Text _ItemId, Text _MediaUrl) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostBucketItemAddMedia,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_ActivityId => ""^_ActivityId, C_RouteParameter_ItemId => _ItemId]
	);
	return Http::CreatePostFile(Config::Get().APIBaseUrl^C_API_Club^Route, _MediaUrl, []);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to delete a media for an item from a bucket activity
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the activity
 *	@param	_ItemId										The id of the item
 *	@param	_Position									The media position
 *
 *	@return														The request
 */
Http::K_Request PostBucketItemDeleteMedia(Integer _ClubId, Integer _ActivityId, Text _ItemId, Integer _Position) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostBucketItemDeleteMedia,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_ActivityId => ""^_ActivityId, C_RouteParameter_ItemId => _ItemId, C_RouteParameter_Position => ""^_Position]
	);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", []);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to create a news activity
 *
 *	@param	_News											The news to create
 *
 *	@return														The request
 */
Http::K_Request PostCreateNews(ClubStruct::LibStructuresClub_K_News _News) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostCreateNews, [C_RouteParameter_ClubId => ""^_News.ClubId]);
	declare K_HttpCreateNews HttpCreateNews = K_HttpCreateNews {
		name = _News.Name,
		headline = _News.Headline,
		body = _News.Body
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, HttpCreateNews.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to edit a news activity
 *
 *	@param	_News											The news to edit
 *
 *	@return														The request
 */
Http::K_Request PostEditNews(ClubStruct::LibStructuresClub_K_News _News) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostEditNews, [C_RouteParameter_ClubId => ""^_News.ClubId, C_RouteParameter_ActivityId => ""^_News.Id]);
	declare K_HttpCreateNews HttpCreateNews = K_HttpCreateNews {
		name = _News.Name,
		headline = _News.Headline,
		body = _News.Body
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, HttpCreateNews.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostCreateNews or PostEditNews request
ClubStruct::LibStructuresClub_K_News GetResponseFromPostCreateOrEditNews(Http::K_Request _Request) {
	declare K_HttpNews HttpNews;
	HttpNews.fromjson(Http::GetResult(_Request));

	return ClubStruct::LibStructuresClub_K_News {
		Id = HttpNews.id,
		Headline = HttpNews.headline,
		Body = HttpNews.body,
		MediaUrl = Private_GetClubMediaUrl(HttpNews.mediaUrl, HttpNews.mediaTheme, ClubStruct::C_MediaType_Icon),
		ClubId = HttpNews.clubId,
		Name = HttpNews.name,
		CreationTimestamp = HttpNews.creationTimestamp
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to upload a media for a news activity
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the news activity
 *	@param	_MediaUrl									The media to upload
 *
 *	@return														The request
 */
Http::K_Request PostUploadNewsMedia(Integer _ClubId, Integer _ActivityId, Text _MediaUrl) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostUploadNewsMedia,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	return Http::CreatePostFile(Config::Get().APIBaseUrl^C_API_Club^Route, _MediaUrl, []);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to delete a media of a news activity
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the news activity
 *
 *	@return														The request
 */
Http::K_Request PostDeleteNewsMedia(Integer _ClubId, Integer _ActivityId) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostDeleteNewsMedia,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", []);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to create a map review activity
 *
 *	@param	_MapReview								The map review to create
 *
 *	@return														The request
 */
Http::K_Request PostCreateMapReviewActivity(ClubStruct::LibStructuresClub_K_MapReview _MapReview) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostCreateMapReviewActivity, [C_RouteParameter_ClubId => ""^_MapReview.Activity.ClubId]);
	
	declare Integer Scalable;
	if (_MapReview.Scalable) Scalable = 1;

	declare Integer AllowVoteSkipMap;
	if (_MapReview.AllowVoteSkipMap) AllowVoteSkipMap = 1;
	
	declare Integer SubmissionLimitation;
	if (_MapReview.SubmissionLimitation) SubmissionLimitation = 1;

	declare K_HttpCreateMapReviewActivity HttpCreateMapReviewActivity = K_HttpCreateMapReviewActivity {
		name = _MapReview.Activity.Name,
		timeLimit = _MapReview.TimeLimit,
		scalable = Scalable,
		maxPlayer = _MapReview.MaxPlayer,
		allowVoteSkipMap = AllowVoteSkipMap,
		submissionLimitation = SubmissionLimitation
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, HttpCreateMapReviewActivity.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to edit a map review activity
 *
 *	@param	_MapReview								The map review to edit
 *
 *	@return														The request
 */
Http::K_Request PostEditMapReviewActivity(ClubStruct::LibStructuresClub_K_MapReview _MapReview) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostEditMapReviewActivity, 
		[
			C_RouteParameter_ClubId => ""^_MapReview.Activity.ClubId, 
			C_RouteParameter_ActivityId => ""^_MapReview.Activity.Id
		]
	);

	declare Integer Scalable;
	if (_MapReview.Scalable) Scalable = 1;

	declare Integer AllowVoteSkipMap;
	if (_MapReview.AllowVoteSkipMap) AllowVoteSkipMap = 1;

	declare Integer SubmissionLimitation;
	if (_MapReview.SubmissionLimitation) SubmissionLimitation = 1;

	declare K_HttpCreateMapReviewActivity HttpCreateMapReviewActivity = K_HttpCreateMapReviewActivity {
		name = _MapReview.Activity.Name,
		timeLimit = _MapReview.TimeLimit,
		scalable = Scalable,
		maxPlayer = _MapReview.MaxPlayer,
		allowVoteSkipMap = AllowVoteSkipMap,
		submissionLimitation = SubmissionLimitation
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, HttpCreateMapReviewActivity.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostCreateMapReviewActivity or PostEditMapReviewActivity request
ClubStruct::LibStructuresClub_K_MapReview GetResponseFromPostCreateOrEditMapReviewActivity(Http::K_Request _Request) {
	declare K_HttpMapReviewActivity HttpMapReviewActivity;
	HttpMapReviewActivity.fromjson(Http::GetResult(_Request));

	return ClubStruct::LibStructuresClub_K_MapReview {
		Activity = ClubStruct::LibStructuresClub_K_Activity {
			Id = HttpMapReviewActivity.activityId,
			ClubId = HttpMapReviewActivity.clubId,
			Name = HttpMapReviewActivity.name,
			Type = ClubStruct::C_ClubActivity_MapReview,
			MediaUrl = Private_GetClubMediaUrl(HttpMapReviewActivity.mediaUrl, HttpMapReviewActivity.mediaTheme, ClubStruct::C_MediaType_Icon),
			CreatorAccountId = HttpMapReviewActivity.creatorAccountId,
			LatestEditorAccountId = HttpMapReviewActivity.latestEditorAccountId
		},
		ClubName = HttpMapReviewActivity.clubName,
		TimeLimit = HttpMapReviewActivity.timeLimit,
		Scalable = HttpMapReviewActivity.scalable,
		MaxPlayer = HttpMapReviewActivity.maxPlayer,
		AllowVoteSkipMap = HttpMapReviewActivity.allowVoteSkipMap,
		Public = HttpMapReviewActivity.public,
		Game2WebUrl = HttpMapReviewActivity.game2webUrl,
		SubmissionLimitation = HttpMapReviewActivity.submissionLimitation,
		PopularityValue = HttpMapReviewActivity.popularityValue,
		PopularityValueBonus = HttpMapReviewActivity.popularityValueBonus,
		PopularityLevel = HttpMapReviewActivity.popularityLevel,
		PlayerCount = HttpMapReviewActivity.playerCount,
		SubmittedMapCount = HttpMapReviewActivity.submittedMapCount,
		CreationTimestamp = HttpMapReviewActivity.creationTimestamp
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get all the public and active bucket activities
 *
 *	@param	_Sort											The sort option
 *	@param	_Order										The sort order
 *	@param	_FilterName								The name to filter
 *	@param	_Offset										The starting index
 *	@param	_Length										The length of the list
 *	@param	_BucketType								The type of bucket requested (skin, map or item)
 *
 *	@return														The request
 */
Http::K_Request GetAllBucketActivites(Text _Sort, Text _Order, Text _FilterName, Integer _Offset, Integer _Length, Text _BucketType) {
	declare Text[Text] Query = [
		C_QueryParameter_Offset => ""^_Offset,
		C_QueryParameter_Length => ""^_Length
	];
	if (_Sort != "") {
		Query[C_QueryParameter_Sort] = _Sort;
	}
	if (_Order != "") {
		Query[C_QueryParameter_Order] = _Order;
	}
	if (_FilterName != "") {
		Query[C_QueryParameter_Name] = _FilterName;
	}
	declare Text Route = Http::InjectRouteParameters(C_Route_GetAllBucketActivities, [C_RouteParameter_BucketType => _BucketType]);
	declare Text QueryString = Http::CreateQueryString(Query);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route^QueryString, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetAllBucketActivites request
K_ResponseFromGetBucketActivities GetResponseFromGetAllBucketActivites(Http::K_Request _Request) {
	declare K_HttpResponseFromGetAllBucketActivities HttpResponseFromGetAllBucketActivites;
	HttpResponseFromGetAllBucketActivites.fromjson(Http::GetResult(_Request));

	declare K_ResponseFromGetBucketActivities ResponseFromGetAllBucketActivites;
	foreach (HttpBucketActivity in HttpResponseFromGetAllBucketActivites.clubBucketList) {
		declare ClubStruct::LibStructuresClub_K_BucketItem[] BucketItemList;
		foreach (HttpBucketItem in HttpBucketActivity.bucketItemList) {
			declare Text[] MediaUrls;
			foreach (Media in HttpBucketItem.mediaUrls) {
				MediaUrls.add(Media);
			}
			BucketItemList.add(ClubStruct::LibStructuresClub_K_BucketItem {
				ItemId = HttpBucketItem.itemId,
				Position = HttpBucketItem.position,
				Description = HttpBucketItem.description,
				MediaUrls = MediaUrls
			});
		}

		ResponseFromGetAllBucketActivites.BucketActivities.add(ClubStruct::LibStructuresClub_K_BucketActivity {
			Id = HttpBucketActivity.id,
			Type = HttpBucketActivity.type,
			Name = HttpBucketActivity.name,
			ClubName = HttpBucketActivity.clubName,
			MediaUrl = Private_GetClubMediaUrl(HttpBucketActivity.mediaUrl, HttpBucketActivity.mediaTheme, ClubStruct::C_MediaType_Icon),
			ClubId = HttpBucketActivity.clubId,
			CreationTimestamp = HttpBucketActivity.creationTimestamp,
			BucketItemList = BucketItemList,
			BucketItemCount = HttpBucketActivity.bucketItemCount,
			PopularityLevel = HttpBucketActivity.popularityLevel,
			PopularityValue = HttpBucketActivity.popularityValue,
			CreatorAccountId = HttpBucketActivity.creatorAccountId,
			LatestEditorAccountId = HttpBucketActivity.latestEditorAccountId
		});
	}
	ResponseFromGetAllBucketActivites.BucketActivitiesTotal = HttpResponseFromGetAllBucketActivites.itemCount;

	return ResponseFromGetAllBucketActivites;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to create a rankings activity
 *
 *	@param	_ClubId										The id of the club
 *	@param	_Name											The name of the activity
 *	@param	_UseCase									The use case of the rankings activity
 *	@param	_CampaignId								The id of the campaign to use
 *
 *	@return														The request
 */
Http::K_Request PostCreateRanking(Integer _ClubId, Text _Name, Text _UseCase, Integer _CampaignId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostCreateRanking, [C_RouteParameter_ClubId => ""^_ClubId]);
	declare K_HttpCreateRankings HttpCreateRankings = K_HttpCreateRankings {
		name = _Name,
		useCase = _UseCase,
		campaignId = _CampaignId
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, HttpCreateRankings.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostCreateRanking request
ClubStruct::LibStructuresClub_K_Activity GetResponseFromPostCreateRanking(Http::K_Request _Request) {
	declare K_ResponseFromPostCreateRanking HttpResponseFromPostCreateRanking;
	HttpResponseFromPostCreateRanking.fromjson(Http::GetResult(_Request));

	return ClubStruct::LibStructuresClub_K_Activity {
		Id = HttpResponseFromPostCreateRanking.id,
		Name = HttpResponseFromPostCreateRanking.name,
		Type = HttpResponseFromPostCreateRanking.useCase,
		ExternalId = HttpResponseFromPostCreateRanking.campaignId,
		ClubId = HttpResponseFromPostCreateRanking.clubId,
		CreatorAccountId = HttpResponseFromPostCreateRanking.creatorAccountId,
		LatestEditorAccountId = HttpResponseFromPostCreateRanking.latestEditorAccountId
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to set a club as featured
 *
 *	@param	_ClubId										The id of the club
 *
 *	@return														The request
 */
Http::K_Request PostSetFeatured(Integer _ClubId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostSetFeatured, [C_RouteParameter_ClubId => ""^_ClubId]);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to unset a club as featured
 *
 *	@param	_ClubId										The id of the club
 *
 *	@return														The request
 */
Http::K_Request PostUnsetFeatured(Integer _ClubId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostUnsetFeatured, [C_RouteParameter_ClubId => ""^_ClubId]);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get all club map review activities
 *
 *	@param	_Offset										The club map review activity map from which to start
 *	@param	_Length										The number of club map review activities requested
 *	@param	_FilterName								The filter for club map review activities
 *
 *	@return														The request
 */
Http::K_Request GetMapReviewActivities(Integer _Offset, Integer _Length, Text _FilterName) {
	declare Text[Text] Query = [
		C_QueryParameter_Offset => ""^_Offset, 
		C_QueryParameter_Length => ""^_Length
	];

	if (_FilterName != "") {
		Query[C_QueryParameter_Name] = _FilterName;
	}

	declare Text QueryString = Http::CreateQueryString(Query);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^C_Route_GetMapReviewActivities^QueryString, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetMapReviewActivities request
K_ResponseGetMapReviews GetResponseFromGetMapReviewActivities(Http::K_Request _Request) {
	declare K_HttpResponseGetMapReviews HttpResponseGetMapReviews;
	HttpResponseGetMapReviews.fromjson(Http::GetResult(_Request));

	declare K_ResponseGetMapReviews ResponseGetMapReviews;
	foreach (HttpMapReview in HttpResponseGetMapReviews.clubMapReviewList) {
		ResponseGetMapReviews.ClubMapReviews.add(ClubStruct::LibStructuresClub_K_MapReview {
			Activity = ClubStruct::LibStructuresClub_K_Activity {
				Id = HttpMapReview.activityId,
				ClubId = HttpMapReview.clubId,
				Name = HttpMapReview.name,
				Type = ClubStruct::C_ClubActivity_MapReview,
				MediaUrl = Private_GetClubMediaUrl(HttpMapReview.mediaUrl, HttpMapReview.mediaTheme, ClubStruct::C_MediaType_Icon),
				CreatorAccountId = HttpMapReview.creatorAccountId,
				LatestEditorAccountId = HttpMapReview.latestEditorAccountId
			},
			ClubName = HttpMapReview.clubName,
			TimeLimit = HttpMapReview.timeLimit,
			Scalable = HttpMapReview.scalable,
			MaxPlayer = HttpMapReview.maxPlayer,
			AllowVoteSkipMap = HttpMapReview.allowVoteSkipMap,
			Public = HttpMapReview.public,
			Game2WebUrl = HttpMapReview.game2webUrl,
			SubmissionLimitation = HttpMapReview.submissionLimitation,
			PopularityValue = HttpMapReview.popularityValue,
			PopularityValueBonus = HttpMapReview.popularityValueBonus,
			PopularityLevel = HttpMapReview.popularityLevel,
			PlayerCount = HttpMapReview.playerCount,
			SubmittedMapCount = HttpMapReview.submittedMapCount,
			CreationTimestamp = HttpMapReview.creationTimestamp
		});
	}
	ResponseGetMapReviews.ClubMapReviewsTotal = HttpResponseGetMapReviews.itemCount;

	return ResponseGetMapReviews;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to pin or unpin a club
 *
 *	@param	_ClubId										The id of the club
 *
 *	@return														The request
 */
Http::K_Request PostPinOrUnpinClub(Integer _ClubId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostPin, [C_RouteParameter_ClubId => ""^_ClubId]);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostPinOrUnpinClub request
K_ResponseFromPostPinOrUnpinClub GetResponseFromPostPinOrUnpinClub(Http::K_Request _Request) {
	declare K_HttpPostPinOrUnpinClub HttpResponseFromPostPinOrUnpinClub;
	HttpResponseFromPostPinOrUnpinClub.fromjson(Http::GetResult(_Request));

	return K_ResponseFromPostPinOrUnpinClub {
		PinnedClubId = HttpResponseFromPostPinOrUnpinClub.pinnedClub
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to apply or unapply a club tag
 *
 *	@param	_ClubId										The id of the club
 *
 *	@return														The request
 */
Http::K_Request PostApplyOrRemoveClubTag(Integer _ClubId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostTag, [C_RouteParameter_ClubId => ""^_ClubId]);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostApplyOrRemoveClubTag request
K_ResponseFromPostApplyOrRemoveClubTag GetResponseFromPostApplyOrRemoveClubTag(Http::K_Request _Request) {
	declare K_HttpPostApplyOrRemoveClubTag HttpResponseFromPostApplyOrRemoveClubTag;
	HttpResponseFromPostApplyOrRemoveClubTag.fromjson(Http::GetResult(_Request));

	return K_ResponseFromPostApplyOrRemoveClubTag {
		TagClubId = HttpResponseFromPostApplyOrRemoveClubTag.tagClubId
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Start a request to get a player club info
Http::K_Request GetMyClubInfo() {
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^C_Route_GetPlayerInfo, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetMyClubInfo request
K_ResponseFromGetMyClubInfo GetResponseFromGetMyClubInfo(Http::K_Request _Request) {
	declare K_HttpGetMyClubInfo HttpResponseFromGetMyClubInfo;
	HttpResponseFromGetMyClubInfo.fromjson(Http::GetResult(_Request));

	return K_ResponseFromGetMyClubInfo {
		PinnedClubId = HttpResponseFromGetMyClubInfo.pinnedClub,
		TagClubId = HttpResponseFromGetMyClubInfo.tagClubId,
		TagClubTag = HttpResponseFromGetMyClubInfo.tag
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a join link of a club room
 *
 *	@param	_ClubId											Id of the club of the room
 *	@param	_ActivityId									Id of the club room activity
 *
 *	@return														The request
 */
Http::K_Request GetJoinLink(Integer _ClubId, Integer _ActivityId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostJoinLink, [C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_ActivityId => ""^_ActivityId]);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetJoinLink request
K_JoinLink GetResponseFromGetJoinLink(Http::K_Request _Request) {
	declare K_HttpJoinLink HttpJoinLinkResponse;
	HttpJoinLinkResponse.fromjson(Http::GetResult(_Request));

	return K_JoinLink {
		JoinLink = HttpJoinLinkResponse.joinLink,
		IsStarting = HttpJoinLinkResponse.starting
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get details of a club room
 *
 *	@param	_ClubId										The id of the club in which the room is
 *	@param	_ActivityId								The id of the club room activity to fetch
 *
 *	@return														The request
 */
Http::K_Request GetClubRoomDetail(Integer _ClubId, Integer _ActivityId) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_GetClubRoomDetail,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_ActivityId => ""^_ActivityId]
	);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetClubRoomDetail request
ClubStruct::LibStructuresClub_K_Room GetResponseFromGetClubRoomDetail(Http::K_Request _Request) {
	declare K_HttpClubRoom HttpClubRoom;
	HttpClubRoom.fromjson(Http::GetResult(_Request));

	declare ClubStruct::LibStructuresClub_K_ScriptSetting[] ScriptSettings;
	foreach (HttpSetting in HttpClubRoom.room.scriptSettings) {
		ScriptSettings.add(ClubStruct::LibStructuresClub_K_ScriptSetting {
			Key = HttpSetting.key,
			Value = HttpSetting.value,
			Type = HttpSetting.type
		});
	}

	return ClubStruct::LibStructuresClub_K_Room {
		Id = HttpClubRoom.id,
		RoomId = HttpClubRoom.room.id,
		ClubId = HttpClubRoom.clubId,
		ClubName = HttpClubRoom.clubName,
		ActivityId = HttpClubRoom.activityId,
		IsHostedByNadeo = HttpClubRoom.nadeo,
		PlayerServerLogin = HttpClubRoom.playerServerLogin,
		HasPassword = HttpClubRoom.password,
		ServerAccountId = HttpClubRoom.room.serverAccountId,
		Name = HttpClubRoom.name,
		Region = HttpClubRoom.room.region,
		MaxPlayers = HttpClubRoom.room.maxPlayers,
		ScriptName = HttpClubRoom.room.script,
		CampaignId = HttpClubRoom.campaignId,
		MapUids = HttpClubRoom.room.maps,
		MediaUrl = Private_GetClubMediaUrl(HttpClubRoom.mediaUrl, HttpClubRoom.mediaTheme, ClubStruct::C_MediaType_Icon),
		PopularityLevel = HttpClubRoom.popularityLevel,
		ScriptSettings = ScriptSettings,
		CreationTimestamp = HttpClubRoom.room.creationTimestamp,
		Scalable = HttpClubRoom.room.scalable,
		ServerInfo = ClubStruct::LibStructuresClub_K_ServerInfo {
			JoinLink = HttpClubRoom.room.serverInfo.joinLink,
			PlayerCount = HttpClubRoom.room.playerCount,
			CurrentMapUid = HttpClubRoom.room.serverInfo.currentMapUid,
			IsStarting = HttpClubRoom.room.serverInfo.starting
		}
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the password of a club room
 *
 *	@param	_ClubId										The id of the club in which the room is
 *	@param	_ActivityId								The id of the club room activity to fetch
 *
 *	@return														The request
 */
Http::K_Request GetClubRoomPassword(Integer _ClubId, Integer _ActivityId) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_GetClubRoomPassword,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_ActivityId => ""^_ActivityId]
	);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetClubRoomPassword request
Text GetResponseFromGetClubRoomPassword(Http::K_Request _Request) {
	declare K_HttpClubRoomPassword HttpClubRoomPassword;
	HttpClubRoomPassword.fromjson(Http::GetResult(_Request));
	
	return HttpClubRoomPassword.password;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to generate the password of a club room
 *
 *	@param	_ClubId										The id of the club in which the room is
 *	@param	_ActivityId								The id of the club room activity to fetch
 *
 *	@return														The request
 */
Http::K_Request PostClubRoomPasswordGenerate(Integer _ClubId, Integer _ActivityId) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostClubRoomPasswordGenerate,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_ActivityId => ""^_ActivityId]
	);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to remove items from a bucket activity
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the activity
 *	@param	_ItemIdList								The list of item ids to add
 *
 *	@return														The request
 */
Http::K_Request PostRemoveBucketItems(Integer _ClubId, Integer _ActivityId, Text[] _ItemIdList) {
	declare K_HttpBucketItemList HttpPostRemoveItemsBucket = K_HttpBucketItemList {
		itemIdList = _ItemIdList
	};
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostRemoveBucketItems,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_ActivityId => ""^_ActivityId]
	);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, HttpPostRemoveItemsBucket.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a bucket activity info
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the activity
 *	@param	_Offset										The offset of the item list
 *	@param	_Length										The length of the item list to get
 *
 *	@return														The request
 */
Http::K_Request GetBucketActivity(Integer _ClubId, Integer _ActivityId, Integer _Offset, Integer _Length) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetBucketActivity,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	declare Text QueryString = Http::CreateQueryString([
		C_QueryParameter_Offset => ""^_Offset,
		C_QueryParameter_Length => ""^_Length
	]);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route^QueryString, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetBucketActivity request
ClubStruct::LibStructuresClub_K_BucketActivity GetResponseFromGetBucketActivity(Http::K_Request _Request) {
	declare K_HttpBucketActivity HttpBucketActivity;
	HttpBucketActivity.fromjson(Http::GetResult(_Request));

	declare ClubStruct::LibStructuresClub_K_BucketItem[] BucketItemList;
	foreach (HttpBucketItem in HttpBucketActivity.bucketItemList) {
		declare Text[] MediaUrls;
		foreach (Media in HttpBucketItem.mediaUrls) {
			MediaUrls.add(Media);
		}
		BucketItemList.add(ClubStruct::LibStructuresClub_K_BucketItem {
			ItemId = HttpBucketItem.itemId,
			Position = HttpBucketItem.position,
			Description = HttpBucketItem.description,
			MediaUrls = MediaUrls
		});
	}

	return ClubStruct::LibStructuresClub_K_BucketActivity {
		Id = HttpBucketActivity.id,
		Type = HttpBucketActivity.type,
		Name = HttpBucketActivity.name,
		ClubName = HttpBucketActivity.clubName,
		MediaUrl = Private_GetClubMediaUrl(HttpBucketActivity.mediaUrl, HttpBucketActivity.mediaTheme, ClubStruct::C_MediaType_Icon),
		ClubId = HttpBucketActivity.clubId,
		CreationTimestamp = HttpBucketActivity.creationTimestamp,
		BucketItemList = BucketItemList,
		BucketItemCount = HttpBucketActivity.bucketItemCount,
		PopularityLevel = HttpBucketActivity.popularityLevel,
		PopularityValue = HttpBucketActivity.popularityValue,
		CreatorAccountId = HttpBucketActivity.creatorAccountId,
		LatestEditorAccountId = HttpBucketActivity.latestEditorAccountId
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to accept or decline a member request
 *
 *	@param	_ClubId										The id of the club
 *	@param	_AccountId								The id of the member to accept or decline
 *	@param	_IsAccepting							True if it's an accept request, False if it's a decline request
 *
 *	@return														The request
 */
Http::K_Request PostAcceptOrDeclineMemberRequest(Integer _ClubId, Text _AccountId, Boolean _IsAccepting) {
	declare Text Url = C_Route_PostClubMemberRequestDecline;
	if (_IsAccepting) Url = C_Route_PostClubMemberRequestAccept;
	declare Text Route = Http::InjectRouteParameters(
		Url,
		[C_RouteParameter_ClubId => ""^_ClubId, C_RouteParameter_AccountId => _AccountId]
	);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}
Http::K_Request PostAcceptMemberRequest(Integer _ClubId, Text _AccountId) {
	return PostAcceptOrDeclineMemberRequest(_ClubId, _AccountId, True);
}
Http::K_Request PostDeclineMemberRequest(Integer _ClubId, Text _AccountId) {
	return PostAcceptOrDeclineMemberRequest(_ClubId, _AccountId, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a news activity info
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the activity
 *
 *	@return														The request
 */
Http::K_Request GetNewsActivity(Integer _ClubId, Integer _ActivityId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetNewsActivity,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetNewsActivity request
ClubStruct::LibStructuresClub_K_News GetResponseFromGetNewsActivity(Http::K_Request _Request) {
	declare K_HttpNews HttpNews;
	HttpNews.fromjson(Http::GetResult(_Request));

	return ClubStruct::LibStructuresClub_K_News {
		Id = HttpNews.id,
		Headline = HttpNews.headline,
		Body = HttpNews.body,
		MediaUrl = Private_GetClubMediaUrl(HttpNews.mediaUrl, HttpNews.mediaTheme, ClubStruct::C_MediaType_Icon),
		ClubId = HttpNews.clubId,
		Name = HttpNews.name,
		CreationTimestamp = HttpNews.creationTimestamp
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a map review activity info
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the activity
 *
 *	@return														The request
 */
Http::K_Request GetMapReviewActivity(Integer _ClubId, Integer _ActivityId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetMapReviewActivity,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetMapReviewActivity request
ClubStruct::LibStructuresClub_K_MapReview GetResponseFromGetMapReviewActivity(Http::K_Request _Request) {
	declare K_HttpMapReviewActivity HttpMapReviewActivity;
	HttpMapReviewActivity.fromjson(Http::GetResult(_Request));

	return ClubStruct::LibStructuresClub_K_MapReview {
		Activity = ClubStruct::LibStructuresClub_K_Activity {
			Id = HttpMapReviewActivity.activityId,
			ClubId = HttpMapReviewActivity.clubId,
			Name = HttpMapReviewActivity.name,
			Type = ClubStruct::C_ClubActivity_MapReview,
			MediaUrl = Private_GetClubMediaUrl(HttpMapReviewActivity.mediaUrl, HttpMapReviewActivity.mediaTheme, ClubStruct::C_MediaType_Icon),
			CreatorAccountId = HttpMapReviewActivity.creatorAccountId,
			LatestEditorAccountId = HttpMapReviewActivity.latestEditorAccountId
		},
		ClubName = HttpMapReviewActivity.clubName,
		TimeLimit = HttpMapReviewActivity.timeLimit,
		Scalable = HttpMapReviewActivity.scalable,
		MaxPlayer = HttpMapReviewActivity.maxPlayer,
		AllowVoteSkipMap = HttpMapReviewActivity.allowVoteSkipMap,
		Public = HttpMapReviewActivity.public,
		Game2WebUrl = HttpMapReviewActivity.game2webUrl,
		SubmissionLimitation = HttpMapReviewActivity.submissionLimitation
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get player submitted maps for a map review activity
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the activity
 *	@param	_Offset										The submitted map from which to start
 *	@param	_Length										The number of submitted maps requested
 *
 *	@return														The request
 */
Http::K_Request GetMapReviewActivityPlayerSubmittedMaps(Integer _ClubId, Integer _ActivityId, Integer _Offset, Integer _Length) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetMapReviewActivityPlayerSubmittedMaps,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	declare Text QueryString = Http::CreateQueryString([
		C_QueryParameter_Offset => ""^_Offset,
		C_QueryParameter_Length => ""^_Length,
		C_QueryParameter_WithFeedback => "true",
		C_QueryParameter_WithMapInfo => "true"
	]);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route^QueryString, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get all submitted maps for a map review activity
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the activity
 *	@param	_Offset										The submitted map from which to start
 *	@param	_Length										The number of submitted maps requested
 *
 *	@return														The request
 */
Http::K_Request GetMapReviewActivityAllSubmittedMaps(Integer _ClubId, Integer _ActivityId, Integer _Offset, Integer _Length) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetMapReviewActivityAllSubmittedMaps,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	declare Text QueryString = Http::CreateQueryString([
		C_QueryParameter_Offset => ""^_Offset,
		C_QueryParameter_Length => ""^_Length
	]);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route^QueryString, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetMapReviewActivityPlayerSubmittedMaps & GetMapReviewActivityAllSubmittedMaps request
MapReviewAPI::K_SubmittedMaps GetResponseFromGetMapReviewActivitySubmittedMaps(Http::K_Request _Request) {
	declare MapReviewAPI::K_HttpSubmittedMaps HttpSubmittedMaps;
	HttpSubmittedMaps.fromjson(Http::GetResult(_Request));

	declare MapReviewAPI::K_SubmittedMap[] SubmittedMaps;
	foreach (HttpSubmittedMap in HttpSubmittedMaps.submittedMaps) {
		SubmittedMaps.add(MapReviewAPI::K_SubmittedMap {
			Uid = HttpSubmittedMap.map.uid,
			Name = HttpSubmittedMap.map.name,
			AuthorAccountId = HttpSubmittedMap.map.author,
			DownloadUrl = HttpSubmittedMap.map.downloadUrl,
			ThumbnailUrl = HttpSubmittedMap.map.thumbnailUrl,
			FeedbackCount = HttpSubmittedMap.feedbackCount,
			NoteInfo = MapReviewAPI::K_NoteInfo {
				CountTotal = HttpSubmittedMap.noteInfo.countTotal,
				Average = HttpSubmittedMap.noteInfo.average
			}
		});
	}

	return MapReviewAPI::K_SubmittedMaps {
		MapList = SubmittedMaps,
		ItemCount = HttpSubmittedMaps.itemCount
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the waiting time of a map review activity
 *
 *	@param	_ClubId										The id of the club
 *	@param	_ActivityId								The id of the activity
 *
 *	@return														The request
 */
Http::K_Request GetMapReviewActivityWaitingTime(Integer _ClubId, Integer _ActivityId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetMapReviewActivityWaitingTime,
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Club^Route, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetMapReviewActivityWaitingTime request
Integer GetResponseFromGetMapReviewActivityWaitingTime(Http::K_Request _Request) {
	declare K_HttpMapReviewActivityWaitingTime HttpMapReviewActivityWaitingTime;
	HttpMapReviewActivityWaitingTime.fromjson(Http::GetResult(_Request));
	return HttpMapReviewActivityWaitingTime.seconds;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to join a map review activity
 *
 *	@param	_MapReview								The map review to join
 *
 *	@return														The request
 */
Http::K_Request PostJoinMapReviewActivity(Integer _ClubId, Integer _ActivityId) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostJoinMapReviewActivity, 
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", []);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to add a map to the map review activity
 *
 *	@param	_MapReview								The map review activity where the map will be added
 *	@param	_MapUid										The Uid of the map to add
 *																		Must be registered to the NadeoServices first !
 *
 *	@return														The request
 */
Http::K_Request PostAddMapQueueMapReviewActivity(Integer _ClubId, Integer _ActivityId, Text _MapUid) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostAddMapQueueMapReviewActivity, 
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId
		]
	);
	declare K_HttpAddMapQueueMapReviewActivity HttpCreateMapReviewActivity = K_HttpAddMapQueueMapReviewActivity {
		mapUid = _MapUid
	};
	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, HttpCreateMapReviewActivity.tojson(), C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostJoinMapReviewActivity and PostAddMapQueueMapReviewActivity request
K_JoinMapReviewActivity GetResponseFromPostJoinMapReviewActivity(Http::K_Request _Request) {
	declare K_HttpJoinMapReviewActivity HttpJoinResponse;
	HttpJoinResponse.fromjson(Http::GetResult(_Request));

	return K_JoinMapReviewActivity {
		JoinLink = HttpJoinResponse.joinLink,
		NoMap = HttpJoinResponse.noMap,
		IsStarting = HttpJoinResponse.starting,
		SubmissionWaitTimer = HttpJoinResponse.submissionWaitTimer
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to remove a submitted map from the map review activity
 *
 *	@param	_MapUid									The Uid of the map to remove
 *
 *	@return													The request
 */
Http::K_Request PostRemoveSubmittedMapRequest(Integer _ClubId, Integer _ActivityId, Text _MapUid) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_PostRemoveSubmittedMap, 
		[
			C_RouteParameter_ClubId => ""^_ClubId,
			C_RouteParameter_ActivityId => ""^_ActivityId,
			C_RouteParameter_MapUid => _MapUid
		]
	);

	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Club^Route, "", C_Headers);
}