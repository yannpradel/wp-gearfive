/**
 *	API for Browsers
 */
#Const Version		"2023-06-09"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/API/BrowserAPI.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CommonLibs/Common/EnvironmentInfo.Script.txt" as EnvironmentInfo
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Quad9.Script.txt" as Quad9
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/MapStore_ML.Script.txt" as MapStore
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_ReplayInfo {
	Text Id;
	Text MapUid;
	Text Name;
	Text Path;
	Text ParentPath;
	Text FilePath;
	Text FileName;
}
#Struct K_MapBrowserData {
	Text SubFolder;
	CampaignStruct::LibCampaignStruct_K_Map MapInfo;
	Text Path;
	Text ParentPath;
}
#Struct K_ReplayBrowserData {
	Text SubFolder;
	K_ReplayInfo ReplayInfo;
}
#Struct K_SkinBrowserData {
	Ident SceneId;
	Ident CurrentItemId;
}
#Struct K_FileBrowserData {
	Text SubFolder;
	Text File;
	Text Path;
	Text ParentPath;
}
#Struct K_TaskResult_FileData {
	Ident TaskId_GetFiles;
	Integer TaskListState;
	K_FileBrowserData[Integer] Datas;
}
#Struct K_BrowserElement {
	Text Name;
	Text File;
	Text TypeName;
	Text Missing;
	Boolean IsSubfolder;
	Text MapUid;
}
#Struct K_RequestsManager {
	Integer PageMonthly;
	Integer PageQuarterly;
	Integer PageClubCampaigns;
	Integer PageClubs;
	Integer PageFavorites;
	Boolean WaitingForMonthlyCampaigns;
	Boolean WaitingForQuarterlyCampaigns;
	Boolean WaitingForClubCampaigns;
	Boolean WaitingForClubs;
	Boolean WaitingForLoadedCampaign;
	Boolean WaitingForLoadedMonthlyCampaign;
	Boolean[Integer] DisplayLiveContent; // < Key is CampaignType from Campaign Struct
	Boolean CampaignIsLoaded;
	Boolean CampaignLoadFail;
	Boolean MonthlyCampaignIsLoaded;
	Boolean MonthlyCampaignLoadFail;
	Integer NextPageLoadTime;
	Boolean GetCampaign;
	Boolean WaitingForFavoriteMaps;
	Boolean WaitingForFavoriteMapSupression;
}
#Struct K_Settings {
	Boolean ShowOnlyUserMaps;
	Boolean ShowOnlyPlayableMaps;
	Text[] FilterByEnvironment;
	Boolean DisplayCreateMapButton;
	Boolean ListMultiSelect;
	Boolean DisplayEditorSettingsButton;
	Text[] FilterByExtension;
	Boolean IsBrowsingForEdition;
	Boolean DisableCloudFolder;
	Boolean DisplayFileNameTooltip;
	Integer PositionFileNameTooltip;
	Text[] FilterByMapType;
	Boolean ShowFavoriteUserMaps;
}
#Struct K_Browser {
	Integer Type;
	Text Name;
	Text SubTitle;
	Integer[] DataTypes;
	Boolean IsFocused;
	Text BasePath;
	Text ParentPath;
	Text CurrentPath;
	Integer ChosenClubId;
	CampaignStruct::LibCampaignStruct_K_Campaign ChosenCampaign;
	CampaignStruct::LibCampaignStruct_K_MonthlyCampaign ChosenMonthlyCampaign;
	Ident TaskId_GetMaps;
	Ident TaskId_GetReplays;
	Integer MapTaskListState;
	Integer ReplayTaskListState;
	K_TaskResult_FileData[Integer] Files; // Key is the data type of the Files
	K_MapBrowserData[Integer] Maps;
	K_MapBrowserData[Integer] FavoriteMaps;
	K_ReplayBrowserData[Integer] Replays;
	K_SkinBrowserData Skin;
	CampaignStruct::LibCampaignStruct_K_Campaign[Integer] Campaigns;
	ClubStruct::LibStructuresClub_K_Club[Integer] Clubs;
	ClubStruct::LibStructuresClub_K_Room[Integer] Rooms;
	Boolean IsFlatten;
	Boolean IsSortingFromAscendingOrder;
	Boolean IsSortingByNameElseByDate;
	K_Settings Settings;
	K_ReplayInfo[Text] SelectedReplays;
	CampaignStruct::LibCampaignStruct_K_Map[Text] SelectedMaps;
}
#Struct K_Event {
	Integer Type;
	CMlControl From;
	CMlScriptEvent::EMenuNavAction MenuNavAction;
	Integer DataType;
	Text Data;
}
#Struct K_ManialinkProps {
	Integer ElementsPerPage;
	Integer SmallMapsPerPage;
	Integer ListsPerPage;
	Real SizeX_ListMargin;
	Vec2 Size_BrowserLists;
}
#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_CurrentScroll;
	CMlControl Frame_FocusHeader;
	CMlControl Frame_FocusBody;
	CMlControl Frame_FocusFooter;
	CMlFrame Frame_SelectedMap;
	CMlFrame Button_ListMultiSelectValid;
	CMlFrame Button_ParentPath;
	CMlFrame Frame_LoadingSpinner;
	CMlFrame Frame_MultiChoice;
	
}
#Struct K_State {
	K_ManialinkProps ManialinkProps;
	K_Controls Controls;
	K_Browser[Integer] Browsers;
	Integer Type_CurrentBrowser;
	K_Event[] PendingEvents;
	K_RequestsManager RequestsManager;
	Text[][Text] Paths_Tree;
	K_MapBrowserData PreSelectedMapBrowserData;
	K_MapBrowserData FavoriteMapToRemove;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_State_Null K_State {
	ManialinkProps = K_ManialinkProps {
		ElementsPerPage = 0,
		SmallMapsPerPage = 0,
		ListsPerPage = 0,
		SizeX_ListMargin = 0.,
		Size_BrowserLists = <0., 0.>
	},
	Controls = K_Controls {},
	Browsers = [],
	Type_CurrentBrowser = 0,
	PendingEvents = [],
	RequestsManager = K_RequestsManager {},
	Paths_Tree = [],
	PreSelectedMapBrowserData = K_MapBrowserData {}
}

#Const C_Name "component-browser-api" //< Component name
#Const P "TMNext_BrowserAPI::" //< Prefix use to differentiate functions/variables in the script
#Const Q "TMNext_BrowserAPI"

#Const C_NavGroupName "navgroup-component-browser"

#Const C_Class_Browser "class-browser"
#Const C_Class_Header "component-browserAPI-class-header"
#Const C_Class_Body "component-browserAPI-class-body"
#Const C_Class_Footer "component-browserAPI-class-footer"

#Const C_BrowserPopUpSize <299., 154.>
#Const C_BrowserPopUpPosY -3.

#Const C_BrowserType_None -1
#Const C_BrowserType_PathNavigation 0
#Const C_BrowserType_PathNavigationSmall 1
#Const C_BrowserType_List 2

#Const C_DelayBetweenRequest 500 //< milliseconds

#Const C_DataType_None -1
#Const C_DataType_Image 0
#Const C_DataType_Skin 1
#Const C_DataType_Map 2
#Const C_DataType_Replay 3
#Const C_DataType_Campaign 4
#Const C_DataType_MonthlyCampaign 5
#Const C_DataType_Script 6
#Const C_DataType_MatchSettings 7
#Const C_DataType_Category 8
#Const C_DataType_Club 9
#Const C_DataType_ItemCollection 10

#Const C_DataType_IsFileList [
	0, //< C_DataType_Image
	1, //< C_DataType_Skin
	6, //< C_DataType_Script
	7, //< C_DataType_MatchSettings
	10 //< C_DataType_ItemCollection
]
#Const C_DataType_CanBeMultiSelect [
	3, //< C_DataType_Replay
	2 //< C_DataType_Map
]
#Const C_DataType_HasCloudFolder [
	2 //< C_DataType_Map
]

#Const C_TooltipPos_ScrollTop 0
#Const C_TooltipPos_Footer 1

#Const C_DataType_NameList [
	//L16N Absence of name, there is no name
	-1 => _("|DataType|None"),
	//L16N 2D asset, drawing
	0 => _("|DataType|Image"),
	//L16N Customized 3D Vehicle Model
	1 => _("|DataType|Skin"),
	//L16N Track to race on
	2 => _("|DataType|Track"),
	//L16N Recording of a previous race performance
	3 => _("|DataType|Replay"),
	//L16N Bundle of tracks for solo play
	4 => _("|DataType|Campaign"),
	//L16N Server for online play
	5 => _("|DataType|Room"),
	//L16N Code for the software. Used to make game modes.
	6 => _("|DataType|Script"),
	//L16N All the settings realated to the match such as the warm-up duration or the number of rounds played
	7 => _("|DataType|MatchSettings"),
	//L16N A folder, also called a directory, is a special space used to store files, other folders...
	8 => _("|DataType|Folder"),
	//L16N Club is an in-game, private communitie where players can gather to discuss, drive, create, organize or participate to special events.
	9 => _("|DataType|Club"),
	//L16N Package of 3D assets use in the track editor as items
	10 => _("|DataType|Item Collection")
]

#Const C_Path_Base "Path_Base"
#Const C_Path_Officials "Path_Officials"
#Const C_Path_Quarterly "Path_Quarterly"
#Const C_Path_Monthly "Path_Monthly"
#Const C_Path_Clubs "Path_Clubs"
#Const C_Path_ChosenClub "Path_ChosenClub"
#Const C_Path_Local "Path_Local"
#Const C_Path_Favorites "Path_Favorites"
#Const C_Path_Null "Path_Null"

#Const C_Paths_Tree [
	"Path_Base" => ["Path_Local", "Path_Officials", "Path_Clubs", "Path_Favorites"],
	"Path_Officials" => ["Path_Quarterly", "Path_Monthly"],
	"Path_Clubs" => ["Path_ChosenClub"]
]

#Const C_BasePath "file://"
#Const C_BasePath_Media "Media/"
#Const C_BasePath_Skins "Skins/"

#Const C_Browser_NullDataCount 0

#Const C_Paths_Names [
	//L16N Campaigns created by Nadeo
	"Path_Officials" => _("|Campaign|Official"),
	//L16N Every three months
	"Path_Quarterly" => _("|Campaign|Quarterly"),
	//L16N Every month
	"Path_Monthly" => _("|Campaign|Monthly"),
	//L16N Clubs are in-game, private communities where players can gather to discuss, drive, create, organize or participate to special events.
	"Path_Clubs" => _("Clubs"),
	//L16N Refers to all local play activities
	"Path_Local" => _("|Menu|Local"),
	//L16N Refers to all the player's favorite tracks
	"Path_Favorites" => _("|Menu|Favorites")
]

#Const C_TaskListState_None -1
#Const C_TaskListState_IsProcessing 0
#Const C_TaskListState_HasSucceeded 1
#Const C_TaskListState_HasFailed 2
#Const C_TaskListState_IsCanceled 3

#Const C_EventType_UnFocusScroll 0
#Const C_EventType_Select 1
#Const C_EventType_Cancel 2
#Const C_EventType_ReachLimit 3
#Const C_EventType_Focus 4
#Const C_EventType_CreateMap 5
#Const C_EventType_ConfirmSelection 6
#Const C_EventType_EditorSettings 7
#Const C_EventType_MultiSelect 8

#Const Const::C_RemoveFavoriteMapPopUp_Description1 as C_RemoveFavoriteMapPopUp_Description
#Const Const::C_RemoveFavoriteMapPopUp_ChoiceIndex_Remove as C_FavoriteMapPopUp_ChoiceIndex_Yes
#Const Const::C_RemoveFavoriteMapPopUp_ChoiceIndex_Back as C_FavoriteMapPopUp_ChoiceIndex_Cancel
#Const Const::C_Month_Names as C_Month_Names
#Const MapStore::C_RemoveFavoriteMap_Error as C_RemoveFavoriteMap_Error

//L16N Page to search for a skin
#Const C_BrowserName_Skin _("Skin browser")
//L16N Page to search for an image
#Const C_BrowserName_Image _("Image browser")
//L16N Page to search for a track
#Const C_BrowserName_Map _("Tracks")
//L16N Storage for campaigns
#Const C_BrowserName_Campaign _("Campaign library")
//L16N Page to search for an item collection
#Const C_BrowserName_ItemCollection _("Item Collection browser")
//L16N Track name
#Const C_Text_Name _("Name")
//L16N Racing track
#Const C_Text_Map _("Track")
//L16N Number of track validated singular (1 or less)
#Const C_Text_Validation _("Validation")
//L16N Number of track validated plural (2 or more)
#Const C_Text_Validations _("Validations")
//L16N Lacking elements to be valid. %1, %2, %3, %4 will be the elements that are needed for validation. (eg. "Missing: Name Logo Track")
#Const C_Text_Missing _("Missing: %1 %2 %3 %4")
//L16N No elements 
#Const C_Text_NoElements _("No suitable elements were found in this folder")
//L16N Remove the focused track from the player favorite tracks
#Const C_Text_RemoveMap _("Remove track")

#Const C_Class_ImageBase "tmnext-browser-api_image-base"
#Const C_Class_TextBase "tmnext-browser-api_text-base"
#Const C_ModelId_OptionsElement "tmnext-browser-api_framemodel-options-element"
#Const C_ModelId_BrowserListElement "tmnext-browser-api_framemodel-browser-list-element"
#Const C_ModelId_BrowserSmallMapElement "tmnext-browser-api_framemodel-browser-small-map-element"
#Const C_ModelId_BrowserMapElement "tmnext-browser-api_framemodel-browser-map-element"
#Const C_Id_OptionsZone "tmnext-browser-api_options-zone"
#Const C_Id_QuadImage "tmnext-browser-api_quad-image"
#Const C_Id_QuadBg "tmnext-browser-api_quad-bg"
#Const C_Id_QuadCheck "tmnext-browser-api_quad-check"
#Const C_Id_LabelName "tmnext-browser-api_label-name"
#Const C_Id_QuadFocus "tmnext-browser-api_quad-focus"
#Const C_Id_FrameGlobal "tmnext-browser-api_frame-global"
#Const C_Id_FramePopUpBackground "tmnext-browser-api_frame-pop-up-background"
#Const C_Id_FrameLoadingSpinner "tmnext-browser-api_frame-loading-spinner"
#Const C_Id_FrameMultichoice "tmnext-browser-api_frame-multichoice"
#Const C_Id_LabelTitle "tmnext-browser-api_label-title"
#Const C_Id_LabelSubTitle "tmnext-browser-api_label-sub-title"
#Const C_Id_FramePathName "tmnext-browser-api_frame-path-name"
#Const C_Id_FrameParentPath "tmnext-browser-api_frame-parent-path"
#Const C_Id_LabelPath "tmnext-browser-api_label-path"
#Const C_Id_Quad9BgSearch "tmnext-browser-api_quad9-bg-search"
#Const C_Id_FrameOptions "tmnext-browser-api_frame-options"
#Const C_Id_FrameOptionsRefresh "tmnext-browser-api_frame-options-refresh"
#Const C_Id_FrameOptionsOrder "tmnext-browser-api_frame-options-order"
#Const C_Id_FrameOptionsCriterion "tmnext-browser-api_frame-options-criterion"
#Const C_Id_FrameOptionsFlatten "tmnext-browser-api_frame-options-flatten"
#Const C_Id_FrameOptionsExplorer "tmnext-browser-api_frame-options-explorer"
#Const C_Id_ButtonCreateMap "tmnext-browser-api_button-create-map"
#Const C_Id_FrameSelectedMap "tmnext-browser-api_frame-selected-map"
#Const C_Id_LabelMap "tmnext-browser-api_label-map"
#Const C_Id_LabelAuthor "tmnext-browser-api_label-author"
#Const C_Id_QuadOverlayThumbnail "tmnext-browser-api_quad-overlay-thumbnail"
#Const C_Id_QuadContourThumbnail "tmnext-browser-api_quad-contour-thumbnail"
#Const C_Id_QuadThumbnail "tmnext-browser-api_quad-thumbnail"
#Const C_Id_QuadThumbnailBg "tmnext-browser-api_quad-thumbnail-bg"
#Const C_Id_QuadMapThumbnailBg "tmnext-browser-api_quad-map-thumbnail-bg"
#Const C_Id_ButtonEditorSettings "tmnext-browser-api_button-editor-settings"
#Const C_Id_QuadActivationZone "tmnext-browser-api_quad-activation-zone"
#Const C_Id_ButtonSelectMap "tmnext-browser-api_button-select-map"
#Const C_Id_FrameSelectedSkin "tmnext-browser-api_frame-selected-skin"
#Const C_Id_LabelSkin "tmnext-browser-api_label-skin"
#Const C_Id_CameraSkin "tmnext-browser-api_camera-skin"
#Const C_Id_FrameBrowserMapScroll "tmnext-browser-api_frame-browser-map-scroll"
#Const C_Id_LabelNoElements "tmnext-browser-api_label-no-elements"
#Const C_Id_FrameBrowserSmallMapScroll "tmnext-browser-api_frame-browser-small-map-scroll"
#Const C_Id_FrameBrowserListScroll "tmnext-browser-api_frame-browser-list-scroll"
#Const C_Id_FrameListButtons "tmnext-browser-api_frame-list-buttons"
#Const C_Id_ButtonListMultiSelectValid "tmnext-browser-api_button-list-multi-select-valid"
#Const C_Id_ButtonListMultiSelectSelectAll "tmnext-browser-api_button-list-multi-select-select-all"
#Const C_Id_ButtonListMultiSelectUnselectAll "tmnext-browser-api_button-list-multi-select-unselect-all"
#Const C_Id_FrameTooltip "tmnext-browser-api_frame-tooltip"
#Const C_Id_LabelTooltip "tmnext-browser-api_label-tooltip"
#Const C_Id_LabelError "tmnext-browser-api_label-error"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text GetManialink() {
	declare Integer ColumnsNb = 5;
	declare Integer RowsNb = 5;
	declare Integer ElementsPerPage = ColumnsNb * RowsNb;
	declare Vec2 Size_BrowsersScrollWindow = <243., 75.>;
	declare Vec2 Size_BrowserMargin = <0., 0.>;
	declare Vec2 Size_Browser = Scroll::GetElementSize(Size_BrowsersScrollWindow, Size_BrowserMargin, ColumnsNb, RowsNb);
	declare Integer ElementsNb = Scroll::GetRequiredElementsNb(Size_BrowsersScrollWindow, Size_Browser, Size_BrowserMargin, ColumnsNb);

	declare Vec2 Size_Header = <0., 0.>;
	declare Vec2 Size_Footer = <0., 0.>;

	declare Vec2 Pos_BrowserElementName = <Size_Browser.X * 0.5, Size_Browser.Y * -0.5>;

	declare Text Ml_BrowsersMap = "";
	for (I, 1, ElementsNb) {
		Ml_BrowsersMap ^= """
		<frameinstance
			modelid="{{{C_ModelId_BrowserMapElement}}}"
			class="{{{Scroll::C_Class_Element}}}"
			hidden="1"
		/>""";
	}

	declare Integer ColumnsNbSmallMap = 5;
	RowsNb = 5;
	declare Vec2 Size_SmallMapBrowserMargin = <0., 0.>;
	declare Integer SmallMapsPerPage = ColumnsNbSmallMap * RowsNb;
	declare Size_SmallBrowserScrollWindow = <190., 66.>;
	declare Vec2 Size_BrowserSmallMaps = Scroll::GetElementSize(Size_SmallBrowserScrollWindow, Size_SmallMapBrowserMargin, ColumnsNbSmallMap, RowsNb);
	ElementsNb = Scroll::GetRequiredElementsNb(Size_SmallBrowserScrollWindow, Size_BrowserSmallMaps, Size_SmallMapBrowserMargin, ColumnsNbSmallMap);
	
	declare Vec2 Pos_BrowserElementName_SmallMaps = <Size_BrowserSmallMaps.X * 0.5, Size_BrowserSmallMaps.Y * -0.5>;

	declare Text Ml_BrowsersSmallMap = "";
	for (I, 1, ElementsNb) {
		Ml_BrowsersSmallMap ^= """
		<frameinstance
			modelid="{{{C_ModelId_BrowserSmallMapElement}}}"
			class="{{{Scroll::C_Class_Element}}}"
			hidden="1"
		/>""";
	}

	declare Integer ColumnsNbList = 1;
	declare Integer RowsNbList = 7;
	declare Integer ListsPerPage = ColumnsNbList * RowsNbList;
	declare Vec2 Size_ListBrowserMargin = <0., 1.25>;
	declare Size_ListBrowserScrollWindow = <245., 65.>;
	declare Vec2 Size_BrowserLists = Scroll::GetElementSize(Size_ListBrowserScrollWindow, Size_ListBrowserMargin, ColumnsNbList, RowsNbList);
	ElementsNb = Scroll::GetRequiredElementsNb(Size_ListBrowserScrollWindow, Size_BrowserLists, Size_ListBrowserMargin, ColumnsNbList);
	
	declare Vec2 Pos_BrowserElementName_Lists = <Size_BrowserLists.X * 0.5, Size_BrowserLists.Y * -0.5>;

	declare Text Ml_BrowsersList = "";
	for (I, 1, ElementsNb) {
		Ml_BrowsersList ^= """
		<frameinstance
			modelid="{{{C_ModelId_BrowserListElement}}}"
			class="{{{Scroll::C_Class_Element}}}"
			hidden="1"
		/>""";
	}

	declare SizeX_ListMargin = 5.;
	declare SizeX_ListGutter = 1.;
	declare SizeX_ListCheck = 6.;

	declare Text[Integer] Choices = Const::C_RemoveFavoriteMapPopUp_Choices;
	declare Text ChoicesJson = TL::MLEncode(Choices.tojson());

	return """
<stylesheet>
	<style class="{{{C_Class_ImageBase}}}" halign="center" valign="center"/>
	<style class="{{{C_Class_TextBase}}}" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textsize="5" textcolor="FFF" textprefix="$i"/>
</stylesheet>

<framemodel id="{{{C_ModelId_OptionsElement}}}">
	<quad
		id="{{{C_Id_OptionsZone}}}"
		size="10.5 8"
		opacity="0" scriptevents="1"
		class="{{{Navigation::C_Class_ActivationZone}}} {{{C_Class_ImageBase}}}"
	/>
	<quad id="{{{C_Id_QuadImage}}}" size="8 8" z-index="1" class="{{{C_Class_ImageBase}}}" colorize="FFF"/>
	<quad
		id="{{{C_Id_QuadBg}}}"
		size="10.5 8"
		class="{{{Navigation::C_Class_ActivationZone}}} {{{C_Class_ImageBase}}}"
		image="{{{Const::C_ImageUrl_ButtonBG_SortingIcons}}}" colorize="FFF"
		opacity="0"
	/>
</framemodel>
<framemodel id="{{{C_ModelId_BrowserListElement}}}">
	<quad
		id="{{{C_Id_QuadCheck}}}" class="{{{C_Class_ImageBase}}}"
		pos="{{{Size_BrowserLists.X - SizeX_ListMargin}}} {{{Pos_BrowserElementName_Lists.Y}}}"
		z-index="2"
		size="6.5 6.5"
		colorize="{{{ColorPalette::C_Color_GreenFour}}}"
		hidden="1"
		image="{{{Const::C_ImageUrl_Icon_Checkbox_Inactive_Square}}}"
	/>
	<label id="{{{C_Id_LabelName}}}"
		size="{{{Size_BrowserLists.X-3.}}} {{{Size_BrowserLists.Y}}}"
		pos="{{{SizeX_ListMargin}}} {{{Pos_BrowserElementName_Lists.Y-0.5}}}"
		z-index="2"
		class="{{{C_Class_TextBase}}}" halign="left" textprefix="$i"
		textfont="{{{FontManager::C_GameFontSemiBold}}}"
		filter-profanities="OnlyIfNotTranslated"
	/>
	<quad id="{{{C_Id_QuadImage}}}" class="{{{C_Class_ImageBase}}}"
		size="{{{Size_BrowserLists.X-2.}}} {{{Size_BrowserLists.Y-2.}}}"
		pos="{{{Pos_BrowserElementName_Lists.X}}} {{{Pos_BrowserElementName_Lists.Y}}}"
		hidden="1" z-index="3" keepratio="Fit"
	/>
	<quad
		size="{{{Size_BrowserLists.X}}} {{{Size_BrowserLists.Y}}}"
		opacity="0" scriptevents="1"
		class="{{{Scroll::C_Class_ActivationZone}}}"
	/>
	<quad id="{{{C_Id_QuadFocus}}}" z-index="1" size="{{{Size_BrowserLists.X}}} {{{Size_BrowserLists.Y}}}"  image="{{{Const::C_ImageUrl_ButtonBG_Line}}}" colorize="{{{ColorPalette::C_Color_GreenFour}}}" hidden="1"/>
	<quad id="{{{C_Id_QuadBg}}}" size="{{{Size_BrowserLists.X}}} {{{Size_BrowserLists.Y}}}" image="{{{Const::C_ImageUrl_ButtonBG_Line}}}" colorize="{{{ColorPalette::C_Color_GreenFour}}}"/>
</framemodel>
<framemodel id="{{{C_ModelId_BrowserSmallMapElement}}}">
	<quad
		id="{{{C_Id_QuadCheck}}}" class="{{{C_Class_ImageBase}}}"
		pos="{{{Size_BrowserSmallMaps.X* 0.87}}} {{{Size_BrowserSmallMaps.Y * -0.25}}}"
		z-index="2"
		size="6 6"
		colorize="{{{ColorPalette::C_Color_GreenFour}}}"
		hidden="1"
		image="{{{Const::C_ImageUrl_Icon_Checkbox_Inactive_Square}}}"
	/>
	<label id="{{{C_Id_LabelName}}}"
		size="{{{Size_BrowserSmallMaps.X-6.}}} {{{Size_BrowserSmallMaps.Y}}}"
		pos="{{{Pos_BrowserElementName_SmallMaps.X-0.25}}} {{{Pos_BrowserElementName_SmallMaps.Y}}}"
		z-index="2"
		class="{{{C_Class_TextBase}}}" textcolor="000" textsize="2" textprefix="$i"
		textfont="{{{FontManager::C_GameFontSemiBold}}}"
		filter-profanities="OnlyIfNotTranslated"
	/>
	<quad id="{{{C_Id_QuadImage}}}" class="{{{C_Class_ImageBase}}}"
		size="{{{Size_BrowserSmallMaps.X-2.}}} {{{Size_BrowserSmallMaps.Y-2.}}}"
		pos="{{{Pos_BrowserElementName_SmallMaps.X}}} {{{Pos_BrowserElementName_SmallMaps.Y}}}"
		hidden="1" z-index="3" keepratio="Fit"
	/>
	<quad
		size="{{{Size_BrowserSmallMaps.X}}} {{{Size_BrowserSmallMaps.Y}}}"
		opacity="0" scriptevents="1"
		class="{{{Scroll::C_Class_ActivationZone}}}"
	/>
	<quad id="{{{C_Id_QuadBg}}}" class="{{{C_Class_ImageBase}}}"
		size="{{{Size_BrowserSmallMaps.X-2.}}} {{{Size_BrowserSmallMaps.Y-2.}}}"
		pos="{{{Pos_BrowserElementName_SmallMaps.X}}} {{{Pos_BrowserElementName_SmallMaps.Y}}}"
		colorize="{{{ColorPalette::C_Color_GreenFour}}}"
		image="{{{Const::C_ImageUrl_ButtonBG_Folder}}}"
	/>
	<quad id="{{{C_Id_QuadFocus}}}" class="{{{C_Class_ImageBase}}}"
		size="{{{Size_BrowserSmallMaps.X-2.}}} {{{Size_BrowserSmallMaps.Y-2.}}}"
		pos="{{{Pos_BrowserElementName_SmallMaps.X}}} {{{Pos_BrowserElementName_SmallMaps.Y}}}"
		colorize="{{{ColorPalette::C_Color_GreenFour}}}" image="{{{Const::C_ImageUrl_ButtonBG_Folder}}}"
		z-index="1" hidden="1"
	/>
</framemodel>
<framemodel id="{{{C_ModelId_BrowserMapElement}}}">
	<label id="{{{C_Id_LabelName}}}"
		size="{{{Size_Browser.X-7.5}}} {{{Size_Browser.Y}}}"
		pos="{{{Pos_BrowserElementName.X-0.25}}} {{{Pos_BrowserElementName.Y}}}"
		z-index="2"
		class="{{{C_Class_TextBase}}}" textcolor="000" textsize="2.75" textprefix="$i"
		textfont="{{{FontManager::C_GameFontSemiBold}}}"
		filter-profanities="OnlyIfNotTranslated"
	/>
	<quad id="{{{C_Id_QuadImage}}}" class="{{{C_Class_ImageBase}}}"
		size="{{{Size_Browser.X-10.}}} {{{Size_Browser.Y-4.}}}"
		pos="{{{Pos_BrowserElementName.X-0.5}}} {{{Pos_BrowserElementName.Y}}}"
		hidden="1" z-index="3" keepratio="Fit"
	/>
	<quad id="{{{C_Id_QuadBg}}}" class="{{{C_Class_ImageBase}}}"
		size="{{{Size_Browser.X-2.}}} {{{Size_Browser.Y-2.}}}"
		pos="{{{Pos_BrowserElementName.X}}} {{{Pos_BrowserElementName.Y}}}"
		colorize="{{{ColorPalette::C_Color_GreenFour}}}"
		image="{{{Const::C_ImageUrl_ButtonBG_Folder}}}" keepratio="Fit"
	/>
	<quad id="{{{C_Id_QuadFocus}}}" class="{{{C_Class_ImageBase}}}"
		size="{{{Size_Browser.X-2.}}} {{{Size_Browser.Y-2.}}}"
		pos="{{{Pos_BrowserElementName.X}}} {{{Pos_BrowserElementName.Y}}}"
		colorize="{{{ColorPalette::C_Color_GreenFour}}}" image="{{{Const::C_ImageUrl_ButtonBG_Folder}}}"
		z-index="1" hidden="1" keepratio="Fit"
	/>
	<quad
		size="{{{Size_Browser.X}}} {{{Size_Browser.Y}}}"
		opacity="0" scriptevents="1"
		class="{{{Scroll::C_Class_ActivationZone}}}"
	/>
</framemodel>

<frame
	id="{{{C_Id_FrameGlobal}}}"
	data-elements-per-page="{{{ElementsPerPage}}}"
	data-small-maps-per-page="{{{SmallMapsPerPage}}}"
	data-lists-per-page="{{{ListsPerPage}}}"
	data-size-x-list-margin="{{{SizeX_ListMargin}}}"
	data-size-browser-lists="{{{Size_BrowserLists.X}}} {{{Size_BrowserLists.Y}}}"
>
	<frameinstance modelid="{{{PopUpBackground::C_Name}}}" id="{{{C_Id_FramePopUpBackground}}}" data-pop-up-name="{{{C_Name}}}" z-index="-1" data-layout="{{{PopUpBackground::C_Layout_Type_Browser}}}"/>
	<frameinstance id="{{{C_Id_FrameLoadingSpinner}}}" modelid="{{{LoadingSpinner::C_Name}}}" />
	<frameinstance modelid="{{{PopUpMultiChoice::C_Name}}}" id="{{{C_Id_FrameMultichoice}}}" data-title="{{{Const::C_RemoveFavoriteMapPopUp_Title}}}" data-choices="{{{ChoicesJson}}}" hidden="1" z-index="10" />
	<label id="{{{C_Id_LabelTitle}}}" class="{{{C_Class_TextBase}}}" halign="left" textsize="9" textcolor="FFF" pos="-116 61.5" textprefix="$t$i" textfont="{{{FontManager::C_GameFontExtraBold}}}" size="200 15" />
	<label id="{{{C_Id_LabelSubTitle}}}" class="{{{C_Class_TextBase}}}" halign="left" textsize="5" textcolor="FFF" pos="-116 53" textprefix="$t$i" textfont="{{{FontManager::C_GameFontSemiBold}}}" size="200 15" />
	
	<frame id="{{{C_Id_FramePathName}}}" pos="0 40.75">
		<frame id="{{{C_Id_FrameParentPath}}}"
			z-index="2"
			class="{{{Navigation::C_Class}}} {{{C_Class_Header}}} {{{MenuSounds::C_Class}}}"
			data-nav-inputs="select;cancel;down;right"
			data-nav-targets="_;_;{{{C_Id_ButtonListMultiSelectSelectAll}}};{{{C_Id_FrameOptionsRefresh}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{C_Id_QuadBg}}}"
			pos="-112 0"
			data-menusounds-selectsound="BrowserFolderBackward"
		>
			<quad image="{{{Const::C_ImageUrl_Icon_ParentPath}}}" size="7 7" z-index="3" class="{{{C_Class_ImageBase}}}" id="{{{C_Id_QuadImage}}}" keepratio="Fit" colorize="FFF"/>
			<quad id="{{{C_Id_QuadBg}}}"
				image="{{{Const::C_ImageUrl_ButtonBG_SortingIcons}}}"
				size="10.5 8" scriptevents="1"
				class="{{{C_Class_ImageBase}}} {{{Navigation::C_Class_ActivationZone}}}"
				colorize="FFF" opacity="0."
			/>
		</frame>
		<label textcolor="000" class="{{{C_Class_TextBase}}}" halign="left" pos="-95 -.5" size="145 10" z-index="2" id="{{{C_Id_LabelPath}}}" textsize="3" textprefix="$i" textfont="{{{FontManager::C_GameFontSemiBold}}}" filter-profanities="OnlyIfNotTranslated"/>
		<quad id="{{{C_Id_Quad9BgSearch}}}" z-index="1" pos="-96 0" size="152 8" image="{{{Const::C_ImageUrl_Background_Path}}}" colorize="FFF" valign="center" halign="left"/>
	</frame>

	<frame id="{{{C_Id_FrameOptions}}}" pos="66.5 40.75">
		<frameinstance modelid="{{{C_ModelId_OptionsElement}}}" id="{{{C_Id_FrameOptionsRefresh}}}"
			pos="-168 0"
			class="{{{Navigation::C_Class}}} {{{C_Class_Header}}} {{{MenuSounds::C_Class}}}"
			data-nav-inputs="select;cancel;right;left;down"
			data-nav-targets="_;_;{{{C_Id_FrameOptionsExplorer}}};{{{C_Id_FrameParentPath}}};{{{C_Id_ButtonListMultiSelectSelectAll}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{C_Id_OptionsZone}}}"
			data-menusounds-selectsound="SelectRefresh"
		/>
		<frameinstance modelid="{{{C_ModelId_OptionsElement}}}" id="{{{C_Id_FrameOptionsOrder}}}"
			pos="69 0"
			class="{{{Navigation::C_Class}}} {{{C_Class_Header}}} {{{MenuSounds::C_Class}}}"
			data-nav-inputs="select;cancel;left;down"
			data-nav-targets="_;_;{{{C_Id_FrameOptionsCriterion}}};{{{C_Id_ButtonListMultiSelectSelectAll}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{C_Id_OptionsZone}}}"
			data-menusounds-selectsound="SelectBrowserSortOption"
		/>
		<frameinstance modelid="{{{C_ModelId_OptionsElement}}}" id="{{{C_Id_FrameOptionsCriterion}}}"
			pos="58 0"
			class="{{{Navigation::C_Class}}} {{{C_Class_Header}}} {{{MenuSounds::C_Class}}}"
			data-nav-inputs="select;cancel;right;left;down"
			data-nav-targets="_;_;{{{C_Id_FrameOptionsOrder}}};{{{C_Id_FrameOptionsFlatten}}};{{{C_Id_ButtonListMultiSelectSelectAll}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{C_Id_OptionsZone}}}"
			data-menusounds-selectsound="SelectBrowserSortOption"
		/>
		<frameinstance modelid="{{{C_ModelId_OptionsElement}}}" id="{{{C_Id_FrameOptionsFlatten}}}"
			pos="47 0"
			class="{{{Navigation::C_Class}}} {{{C_Class_Header}}} {{{MenuSounds::C_Class}}}"
			data-nav-inputs="select;cancel;right;left;down"
			data-nav-targets="_;_;{{{C_Id_FrameOptionsCriterion}}};{{{C_Id_FrameOptionsExplorer}}};{{{C_Id_ButtonListMultiSelectSelectAll}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{C_Id_OptionsZone}}}"
			data-menusounds-selectsound="SelectBrowserSortOption"
		/>
		<frameinstance modelid="{{{C_ModelId_OptionsElement}}}" id="{{{C_Id_FrameOptionsExplorer}}}"
			pos="-4 0"
			class="{{{Navigation::C_Class}}} {{{C_Class_Header}}} {{{MenuSounds::C_Class}}}"
			data-nav-inputs="select;cancel;right;left;down"
			data-nav-targets="_;_;{{{C_Id_FrameOptionsFlatten}}};{{{C_Id_FrameOptionsRefresh}}};{{{C_Id_ButtonListMultiSelectSelectAll}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{C_Id_OptionsZone}}}"
			data-menusounds-selectsound="SelectOpenFolderInExplorer"
		/>
	</frame>

	<frameinstance
		modelid="{{{Button::C_Name}}}" id="{{{C_Id_ButtonCreateMap}}}"
		class="{{{Navigation::C_Class}}} {{{C_Class_Footer}}}" pos="45 -68.5"
		data-text="{{{ _("Create track")}}}"
		data-size="48 8"
		data-textsize="2.8"
		data-textitalicslope=".2"
		data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
		data-image="{{{Const::C_ImageUrl_ButtonBG_CreateMap}}}"
		data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}"
		data-imagefocus="{{{Const::C_ImageUrl_ButtonBG_CreateMap}}}"
		data-textfocuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
		data-focuscolor="FFF"
		data-halign="center"
		data-valign="center"
		data-nav-inputs="select;cancel;right;up"
		data-nav-targets="_;_;{{{C_Id_ButtonSelectMap}}};{{{C_Id_FrameBrowserMapScroll}}}"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
	/>

	<frame id="{{{C_Id_FrameSelectedMap}}}" pos="108 -14">
		<frame pos="-28 22" z-index="5">
			<label id="{{{C_Id_LabelMap}}}" size="65.5 8" class="{{{C_Class_TextBase}}}" halign="left" valign="center2" textsize="5" textprefix="$i$t"/>
			<label id="{{{C_Id_LabelAuthor}}}" size="65.5 8" pos="-1.5 -6" class="{{{C_Class_TextBase}}}" halign="left" valign="center2" textsize="4" textprefix="$i$t" textfont="{{{FontManager::C_GameFontRegular}}}"/>
		</frame>
		<quad id="{{{C_Id_QuadOverlayThumbnail}}}" z-index="2" size="97 71" opacity=".4" image="{{{Const::C_ImageUrl_PopUp_Thumbnail_Overlay}}}" alphamask="{{{Const::C_ImageUrl_PopUp_Thumbnail_Mask}}}" colorize="000" class="{{{C_Class_ImageBase}}}"/>
		<quad id="{{{C_Id_QuadContourThumbnail}}}" z-index="4" size="97 71" image="{{{Const::C_ImageUrl_PopUp_Thumbnail_Contour}}}" class="{{{C_Class_ImageBase}}}"/>
		<quad id="{{{C_Id_QuadThumbnail}}}" z-index="1" size="86. 62." keepratio="Clip" alphamask="{{{Const::C_ImageUrl_PopUp_Thumbnail_Mask2}}}" class="{{{C_Class_ImageBase}}}"/>
		<quad id="{{{C_Id_QuadMapThumbnailBg}}}" z-index="0" colorize="{{{ColorPalette::C_Color_GreenFour}}}" image="{{{Const::C_ImageUrl_PopUp_Thumbnail_Background}}}" size="97 71" keepratio="Clip" alphamask="{{{Const::C_ImageUrl_PopUp_Thumbnail_Mask}}}" class="{{{C_Class_ImageBase}}}"/>

		<frame
			id="{{{C_Id_ButtonEditorSettings}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_Body}}}"
			pos="25 -22" z-index="6"
			data-nav-inputs="select;cancel;left;up;down"
			data-nav-targets="_;_;{{{C_Id_FrameBrowserMapScroll}}};{{{C_Id_ButtonListMultiSelectSelectAll}}};{{{C_Id_ButtonSelectMap}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{C_Id_QuadActivationZone}}}"
		>
			<quad
				id="{{{C_Id_QuadActivationZone}}}"
				size="10.5 8"
				opacity="0" scriptevents="1"
				class="{{{Navigation::C_Class_ActivationZone}}} {{{C_Class_ImageBase}}}"
			/>
			<quad size="8 8" z-index="1" class="{{{C_Class_ImageBase}}}" id="{{{C_Id_QuadImage}}}" colorize="FFF" image="{{{Const::C_ImageUrl_Icon_Edit}}}"/>
			<quad
				size="10.5 8"
				class="{{{Navigation::C_Class_ActivationZone}}} {{{C_Class_ImageBase}}}"
				image="{{{Const::C_ImageUrl_ButtonBG_SortingIcons}}}" colorize="FFF"
				id="{{{C_Id_QuadBg}}}" opacity="0"
			/>
		</frame>
		<frameinstance modelid="{{{Button::C_Name}}}" id="{{{C_Id_ButtonSelectMap}}}"
			data-text="{{{_("Select track")}}}"
			pos="-12 -54.5" data-size="48 8"
			data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}" data-focuscolor="FFF"
			data-textcolor="FFF" data-textsize="2.8"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-image="{{{Const::C_ImageUrl_ButtonBG_CreateMap}}}"
			data-imagefocus="{{{Const::C_ImageUrl_ButtonBG_CreateMap}}}"
			data-textfocuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
			data-textitalicslope=".2"
			data-valign="center" data-halign="center"
			class="{{{Navigation::C_Class}}} {{{C_Class_Footer}}}"
			data-nav-inputs="select;cancel;up;left"
			data-nav-targets="_;_;{{{C_Id_FrameBrowserMapScroll}}};{{{C_Id_ButtonCreateMap}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>

	<frame id="{{{C_Id_FrameSelectedSkin}}}" pos="55 24">
		<quad id="{{{C_Id_QuadContourThumbnail}}}" z-index="4" size="105 76.8" image="{{{Const::C_ImageUrl_PopUp_Thumbnail_Contour}}}"/>
		<quad id="{{{C_Id_QuadThumbnailBg}}}" z-index="0" colorize="{{{ColorPalette::C_Color_GreenFour}}}" image="{{{Const::C_ImageUrl_PopUp_Thumbnail_Background}}}" size="105 76.8" keepratio="Clip" alphamask="{{{Const::C_ImageUrl_PopUp_Thumbnail_Mask}}}"/>
		<label id="{{{C_Id_LabelSkin}}}" z-index="5" size="65.5 8" pos="22 -12.5" class="{{{C_Class_TextBase}}}" halign="left" valign="center2" textsize="5" textprefix="$i"/>
		<camera id="{{{C_Id_CameraSkin}}}" z-index="5" pos="51 -33" halign="center" valign="center" size="80 75" hidden="1"/>
	</frame>

	<frame>
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="{{{C_Id_FrameBrowserMapScroll}}}" z-index="1" />
		<frame 
			pos="{{{Size_BrowsersScrollWindow.X * -0.5 + 2.5}}} 24.5"
			data-elements-per-line="{{{ColumnsNb}}}"
			data-elements-per-page="{{{ElementsPerPage}}}"
			data-element-size="{{{Size_Browser.X}}} {{{Size_Browser.Y}}}"
			data-margin-size="{{{Size_BrowserMargin.X}}} {{{Size_BrowserMargin.Y}}}"
			data-window-size="{{{Size_BrowsersScrollWindow.X}}} {{{Size_BrowsersScrollWindow.Y}}}"
			data-header-height="{{{Size_Header.Y}}}"
			data-footer-height="{{{Size_Footer.Y}}}"
			data-scroll-indicator="1"
			data-skew="-10"
			data-scrollpadding="9"
			data-scroll-indicator-y-offset="-8.5"
			data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-colorize="{{{ColorPalette::C_Color_GreenFour}}}"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}} {{{C_Class_Body}}}"
			data-nav-inputs="select;cancel;up;right;down"
			data-nav-targets="_;_;{{{C_Id_ButtonListMultiSelectSelectAll}}};{{{C_Id_ButtonEditorSettings}}};{{{C_Id_ButtonSelectMap}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			id="{{{C_Id_FrameBrowserMapScroll}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{Ml_BrowsersMap}}}
		</frame>
		<label id="{{{C_Id_LabelNoElements}}}" size="{{{Size_BrowsersScrollWindow.X-10.}}} 10" autonewline="1" halign="center" valign="center2" text="{{{C_Text_NoElements}}}" class="{{{C_Class_TextBase}}}" z-index="1" hidden="1" />
	</frame>

	<frame>
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="{{{C_Id_FrameBrowserSmallMapScroll}}}" z-index="1" />
		<frame
			pos="{{{Size_SmallBrowserScrollWindow.X * -0.5 - 29}}} 19"
			data-elements-per-line="{{{ColumnsNbSmallMap}}}"
			data-elements-per-page="{{{SmallMapsPerPage}}}"
			data-element-size="{{{Size_BrowserSmallMaps.X}}} {{{Size_BrowserSmallMaps.Y}}}"
			data-margin-size="{{{Size_SmallMapBrowserMargin.X}}} {{{Size_SmallMapBrowserMargin.Y}}}"
			data-window-size="{{{Size_SmallBrowserScrollWindow.X}}} {{{Size_SmallBrowserScrollWindow.Y}}}"
			data-header-height="{{{Size_Header.Y}}}"
			data-footer-height="{{{Size_Footer.Y}}}"
			data-scroll-indicator="1"
			data-skew="-10"
			data-scrollpadding="9"
			data-scroll-indicator-y-offset="-10.5"
			data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-colorize="{{{ColorPalette::C_Color_GreenFour}}}"
			data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_Never}}}"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}} {{{C_Class_Body}}}"
			data-nav-inputs="select;cancel;up;right;down"
			data-nav-targets="_;_;{{{C_Id_ButtonListMultiSelectSelectAll}}};{{{C_Id_ButtonEditorSettings}}};{{{C_Id_ButtonSelectMap}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			id="{{{C_Id_FrameBrowserSmallMapScroll}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{Ml_BrowsersSmallMap}}}
		</frame>
		<label id="{{{C_Id_LabelNoElements}}}" pos="-30 0" size="{{{Size_SmallBrowserScrollWindow.X-10.}}} 10" autonewline="1" halign="center" valign="center2" text="{{{C_Text_NoElements}}}" class="{{{C_Class_TextBase}}}" z-index="1" hidden="1" />
	</frame>

	<frame>
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="{{{C_Id_FrameBrowserListScroll}}}" z-index="1" />
		<frame
			pos="{{{Size_ListBrowserScrollWindow.X * -0.5 + 2.5}}} 18.5"
			data-elements-per-line="{{{ColumnsNbList}}}"
			data-elements-per-page="{{{ListsPerPage}}}"
			data-element-size="{{{Size_BrowserLists.X}}} {{{Size_BrowserLists.Y}}}"
			data-margin-size="{{{Size_ListBrowserMargin.X}}} {{{Size_ListBrowserMargin.Y}}}"
			data-window-size="{{{Size_ListBrowserScrollWindow.X}}} {{{Size_ListBrowserScrollWindow.Y}}}"
			data-header-height="{{{Size_Header.Y}}}"
			data-footer-height="{{{Size_Footer.Y}}}"
			data-scroll-indicator="1"
			data-skew="-10"
			data-scrollpadding="11"
			data-scroll-indicator-y-offset="-11.5"
			data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-colorize="{{{ColorPalette::C_Color_GreenFour}}}"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}} {{{C_Class_Body}}}"
			data-nav-inputs="select;cancel;up;down"
			data-nav-targets="_;_;{{{C_Id_ButtonListMultiSelectSelectAll}}};{{{C_Id_ButtonSelectMap}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			id="{{{C_Id_FrameBrowserListScroll}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{Ml_BrowsersList}}}
		</frame>
		<label id="{{{C_Id_LabelNoElements}}}" size="{{{Size_ListBrowserScrollWindow.X-10.}}} 10" autonewline="1" halign="center" valign="center2" text="{{{C_Text_NoElements}}}" class="{{{C_Class_TextBase}}}" z-index="1" hidden="1" />
	</frame>

	<frame id="{{{C_Id_FrameListButtons}}}">
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="{{{C_Id_ButtonListMultiSelectValid}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_Footer}}}"
			pos="93.5 -68.5" z-index="1"
			data-text="{{{_("Confirm")}}}"
			data-size="48 8"
			data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}" data-focuscolor="FFF"
			data-textcolor="FFF" data-textsize="2.8"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-image="{{{Const::C_ImageUrl_ButtonBG_CreateMap}}}"
			data-imagefocus="{{{Const::C_ImageUrl_ButtonBG_CreateMap}}}"
			data-textfocuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
			data-textitalicslope=".2"
			data-valign="center" data-halign="center"
			data-nav-inputs="up;left;select;cancel"
			data-nav-targets="{{{C_Id_FrameBrowserListScroll}}};{{{C_Id_ButtonCreateMap}}};_;_"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="{{{C_Id_ButtonListMultiSelectSelectAll}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_Body}}}"
			pos="75 24" z-index="1"
			data-text="{{{_("Select all")}}}"
			data-size="48 8"
			data-bgempty="1"
			data-opacityunfocus=".5"
			data-textcolor="FFF" data-textsize="2.8"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-textfocuscolor="FFF"
			data-textitalicslope=".2"
			data-valign="center" data-halign="center"
			data-nav-inputs="up;down;right;select;cancel"
			data-nav-targets="{{{C_Id_FrameParentPath}}};{{{C_Id_FrameBrowserListScroll}}};{{{C_Id_ButtonListMultiSelectUnselectAll}}};_;_"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="{{{C_Id_ButtonListMultiSelectUnselectAll}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_Body}}}"
			pos="120 24" z-index="1"
			data-text="{{{_("Unselect all")}}}"
			data-size="48 8"
			data-bgempty="1"
			data-opacityunfocus=".5"
			data-textcolor="FFF" data-textsize="2.8"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-textfocuscolor="FFF"
			data-textitalicslope=".2"
			data-valign="center" data-halign="center"
			data-nav-inputs="up;down;left;select;cancel"
			data-nav-targets="{{{C_Id_FrameParentPath}}};{{{C_Id_FrameBrowserListScroll}}};{{{C_Id_ButtonListMultiSelectSelectAll}}};_;_"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>

	<frame id="{{{C_Id_FrameTooltip}}}" pos="5.5 28" hidden="1">
		<label id="{{{C_Id_LabelTooltip}}}" class="{{{C_Class_TextBase}}}" size="278 10" textsize="4" />
	</frame>
	
	<label id="{{{C_Id_LabelError}}}" pos="-65 -68.5" size="150 10" autonewline="1" maxline="2" textprefix="$i" halign="center" valign="center2" textsize="3" textfont="{{{FontManager::C_GameFontSemiBold}}}" textcolor="{{{ColorPalette::C_Color_ErrorRed}}}"/>
</frame>
	""";
}

Text GetCurrentBrowserName(CMlScript _This) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser)) return "";
	return TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Name;
}

K_Settings GetDefaultSettings() {
	return K_Settings {
		ShowOnlyUserMaps = False,
		ShowOnlyPlayableMaps = False,
		FilterByEnvironment = [EnvironmentInfo::C_Collection_Stadium],
		DisplayCreateMapButton = True,
		ListMultiSelect = False,
		DisplayEditorSettingsButton = False,
		FilterByExtension = [],
		IsBrowsingForEdition = False,
		DisableCloudFolder = False,
		DisplayFileNameTooltip = False,
		PositionFileNameTooltip = C_TooltipPos_Footer,
		FilterByMapType = [],
		ShowFavoriteUserMaps = True
	};
}

Boolean FilterMap(K_Settings _Settings, Text _AuthorLogin, Boolean _IsPlayable, Text _CollectionName, Text _MapType) {
	return (
		(!_Settings.ShowOnlyUserMaps || _AuthorLogin == LocalUser.Login) &&
		(!_Settings.ShowOnlyPlayableMaps || _IsPlayable) &&
		(_Settings.FilterByEnvironment.count <= 0 || _Settings.FilterByEnvironment.exists(_CollectionName)) &&
		(_Settings.FilterByMapType.count <= 0 || _Settings.FilterByMapType.exists(_MapType))
	);
}

Boolean MapsShouldBeFiltered(K_Settings _Settings) {
	return (
		_Settings.ShowOnlyUserMaps ||
		_Settings.ShowOnlyPlayableMaps ||
		_Settings.FilterByEnvironment.count > 0 ||
		_Settings.FilterByMapType.count > 0
	);
}

CampaignStruct::LibCampaignStruct_K_Campaign FilterCampaignMaps(K_Settings _Settings, CampaignStruct::LibCampaignStruct_K_Campaign _Campaign) {
	if (!MapsShouldBeFiltered(_Settings)) return _Campaign;

	declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = _Campaign;
	Campaign.Categories = [];

	foreach (Category in _Campaign.Categories) {
		declare CampaignStruct::LibCampaignStruct_K_Category NewCategory = Category;
		NewCategory.Playlist = [];

		foreach (Map in Category.Playlist) {
			if (FilterMap(_Settings, Map.AuthorLogin, Map.IsPlayable, Map.CollectionName, Map.Type)) {
				NewCategory.Playlist.add(Map);
			}
		}

		if (NewCategory.Playlist.count > 0) {
			Campaign.Categories.add(NewCategory);
		}
	}

	return Campaign;
}

CampaignStruct::LibCampaignStruct_K_MonthlyCampaign FilterCampaignMaps(K_Settings _Settings, CampaignStruct::LibCampaignStruct_K_MonthlyCampaign _MonthlyCampaign) {
	if (!MapsShouldBeFiltered(_Settings)) return _MonthlyCampaign;

	declare CampaignStruct::LibCampaignStruct_K_MonthlyCampaign MonthlyCampaign = _MonthlyCampaign;
	MonthlyCampaign.DailyMaps = [];

	foreach (DayIndex => DailyMap in _MonthlyCampaign.DailyMaps) {
		if (FilterMap(_Settings, DailyMap.Map.AuthorLogin, DailyMap.Map.IsPlayable, DailyMap.Map.CollectionName, DailyMap.Map.Type)) {
			MonthlyCampaign.DailyMaps[DayIndex] = DailyMap;
		} else {
			MonthlyCampaign.DailyMaps[DayIndex] = CampaignStruct::LibCampaignStruct_K_DailyMap {};
		}
	}

	return MonthlyCampaign;
}

Void ShowError(CMlScript _This, Text _ErrorMessage) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser)) return;
	(TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_LabelError) as CMlLabel).SetText(_ErrorMessage);
}

Void FocusScroll(CMlScript _This, Boolean _IsScrollFocused, Boolean _UpdateControllerInfos) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	declare Text[Text] Buttons = ["A" => _("Select"), "B" => _("Back")];
	if (_IsScrollFocused) {
		Scroll::Focus(_This, TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll);
		if (
			TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Map) &&
			TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.ShowFavoriteUserMaps &&
			TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].CurrentPath == C_Path_Favorites
		) {
			Buttons = ["A" => _("Select"), "Action1" => C_Text_RemoveMap, "B" => _("Back")];
		}
	} else {
		Scroll::Unfocus(_This, TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll);
	}
	if (_UpdateControllerInfos) ControllerInfo::SetButtons(Buttons);
}
Void FocusScroll(CMlScript _This, Boolean _IsScrollFocused) {
	FocusScroll(_This, _IsScrollFocused, True);
}

Text GetLastNameOfPath(Text _FolderPath) {
	declare Text Path = TL::Replace(_FolderPath, "\\", "/");
	declare Text[] TmpSplit = TL::Split("/", Path);
	if (TmpSplit.count == 0) return _FolderPath;

	return TmpSplit[TmpSplit.count-1];
}

Void DestroyScene(CMlScript _This) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.SceneId != NullId) {
		if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.CurrentItemId != NullId) {
			_This.MenuSceneMgr.ItemDestroy(TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.SceneId, TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.CurrentItemId);
			TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.CurrentItemId = NullId;
		}
		_This.MenuSceneMgr.SceneDestroy(TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.SceneId);
		TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.SceneId = NullId;
	}
}

Void FocusSkin(CMlScript _This, Boolean _Focused, Text _SkinName, Text _SkinPath) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	declare Frame_SelectedSkin <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameSelectedSkin) as CMlFrame);
	declare Label_Skin = (Frame_SelectedSkin.GetFirstChild(C_Id_LabelSkin) as CMlLabel);
	declare CMlCamera Camera_Skin = (Frame_SelectedSkin.GetFirstChild(C_Id_CameraSkin) as CMlCamera);
	Camera_Skin.Visible = _Focused;
	if (_Focused && TL::EndsWith(".zip", _SkinPath)) {
		if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.SceneId == NullId) {
			TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.SceneId = _This.MenuSceneMgr.SceneCreate("Empty");
			if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.SceneId != NullId) {
				_This.MenuSceneMgr.CameraSetLocation(TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.SceneId, <0., 2.5, -8.5>, 12., 30.);
				_This.MenuSceneMgr.PlaneReflectEnable(TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.SceneId, 0.63, Null, Null, Null, Null, -2.1);
			}
		}
		if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.SceneId != NullId) {
			TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.CurrentItemId = _This.MenuSceneMgr.ItemCreate(TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Skin.SceneId, Const::C_CameraSkinModel, _SkinPath, "");
			Label_Skin.SetText(_SkinName);
		}
	} else {
		DestroyScene(_This);
		Label_Skin.SetText("");
	} 
}

Void FocusBrowserElement(CMlScript _This, CMlFrame _Frame_BrowserElement, Boolean _Focused) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (_Frame_BrowserElement == Null) return;
	declare Quad_Focus <=> (_Frame_BrowserElement.GetFirstChild(C_Id_QuadFocus) as CMlQuad);
	declare Quad_Check <=> (_Frame_BrowserElement.GetFirstChild(C_Id_QuadCheck) as CMlQuad);
	if (Quad_Focus != Null) Quad_Focus.Visible = _Focused;
	if (_Focused) {
		if (Quad_Check != Null) Quad_Check.Colorize = CL::Hex3ToRgb("FFF");
		(_Frame_BrowserElement.GetFirstChild(C_Id_LabelName) as CMlLabel).TextColor = CL::Hex3ToRgb("FFF");
	} else {
		if (Quad_Check != Null) Quad_Check.Colorize = CL::Hex6ToRgb(ColorPalette::C_Color_GreenFour);
		(_Frame_BrowserElement.GetFirstChild(C_Id_LabelName) as CMlLabel).TextColor = CL::Hex6ToRgb(ColorPalette::C_Color_GreenFour);
	}
	if (
		TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser) &&
		TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.DisplayFileNameTooltip
	) {
		declare Label_Tooltip <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_LabelTooltip) as CMlLabel);
		if (_Focused) {
			declare Text TMNext_BrowserAPI_Tooltip for _Frame_BrowserElement;
			Label_Tooltip.Value = TMNext_BrowserAPI_Tooltip;
			Label_Tooltip.Visible = True;
		} else {
			Label_Tooltip.Visible = False;
		}
	}
	
	if (
		TMNext_BrowserAPI_State.Controls.Frame_Global.Parent.Visible &&
		TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Skin) &&
		TMNext_BrowserAPI_State.Type_CurrentBrowser == C_BrowserType_PathNavigationSmall
	) {
		declare Text TMNext_BrowserAPI_FileName for _Frame_BrowserElement;
		declare Text TMNext_BrowserAPI_FilePath for _Frame_BrowserElement;
		FocusSkin(_This, _Focused, TMNext_BrowserAPI_FileName, TMNext_BrowserAPI_FilePath);
	}
}

Void FocusOption(CMlFrame _FrameToFocus, Boolean _IsVisible) {
	if (
		_FrameToFocus == Null ||
		_FrameToFocus.ControlId == "frame-browser-scroll" ||
			(
				_FrameToFocus.ControlId != C_Id_FrameParentPath &&
				!TL::StartsWith(C_Id_FrameOptions^"-", _FrameToFocus.ControlId) &&
				_FrameToFocus.ControlId != C_Id_ButtonEditorSettings
			)
	) return;

	declare Quad_Image <=> (_FrameToFocus.GetFirstChild(C_Id_QuadImage) as CMlQuad);
	declare Quad_BG <=> (_FrameToFocus.GetFirstChild(C_Id_QuadBg) as CMlQuad);
	if (Quad_BG == Null || Quad_Image == Null) return;

	if (_IsVisible) {
		Quad_Image.Colorize = CL::Hex6ToRgb(ColorPalette::C_Color_GreenFour);
		Quad_BG.Opacity = 1.;
	} else {
		Quad_Image.Colorize = CL::Hex3ToRgb("FFF");
		Quad_BG.Opacity = 0.;
	}
}

Void FocusEditorSettings(CMlFrame _Button_EditorSettings, Boolean _Focused) {
	declare Quad_ActivationZone <=> (_Button_EditorSettings.GetFirstChild(C_Id_QuadActivationZone) as CMlQuad);
	if (_Focused) {
		Quad_ActivationZone.Colorize = CL::Hex6ToRgb("ffffff");
	} else {
		Quad_ActivationZone.Colorize = CL::Hex6ToRgb(ColorPalette::C_Color_GreenFour);
	}
}

Boolean IsScrollFocused(CMlScript _This) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	return Scroll::IsFocused(TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll);
}

Void Focus(CMlScript _This, CMlControl _To) {
	if (Transition::IsInTransition(_This)) return;
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	
	declare Focused_Control = Navigation::GetFocusedControl(_This, C_NavGroupName);
	if (Focused_Control != Null) {
		Navigation::Unfocus(_This, Focused_Control);
		if (Focused_Control is CMlFrame) {
			FocusOption((Focused_Control as CMlFrame), False);
			Button::Unfocus(_This, (Focused_Control as CMlFrame));
			if (Focused_Control.HasClass(C_Class_Header)) {
				TMNext_BrowserAPI_State.Controls.Frame_FocusHeader = Focused_Control;
			} else if (Focused_Control.HasClass(C_Class_Body)) {
				TMNext_BrowserAPI_State.Controls.Frame_FocusBody = Focused_Control;
			} else if (Focused_Control.HasClass(C_Class_Footer)) {
				TMNext_BrowserAPI_State.Controls.Frame_FocusFooter = Focused_Control;
			}
		}
	}
	
	if (_To != Null) {
		Navigation::Focus(_This, _To);
		if (_To is CMlFrame) {
			FocusOption((_To as CMlFrame), True);
			Button::Focus(_This, (_To as CMlFrame));
			if (TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll != Null && _To.ControlId == TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll.ControlId && !IsScrollFocused(_This)) {
				FocusScroll(_This, True);
			}
			TMNext_BrowserAPI_State.PendingEvents.add(K_Event {
				Type = C_EventType_Focus
			});
			TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].IsFocused = True;
		}
	}
}

Void SetPathLabelValue(CMlScript _This, Integer _BrowserType, Text _Value) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	declare CMlLabel Label_Path <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_LabelPath) as CMlLabel);
	Label_Path.Value = _Value;

	if (TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) {
		switch (TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath) {
			case C_Path_Base: {
				Label_Path.Value = "";
			}
			case C_Path_Officials: {
				Label_Path.Value = "";
			}
			case C_Path_Clubs: {
				Label_Path.Value = "";
			}
			case C_Path_Favorites: {
				Label_Path.Value = C_Paths_Names[C_Path_Favorites];
			}
			case C_Path_Monthly: {
				Label_Path.Value = C_Paths_Names[C_Path_Officials];
			}
			case C_Path_Quarterly: {
				Label_Path.Value = C_Paths_Names[C_Path_Officials];
			}
			case C_Path_ChosenClub: {
				Label_Path.Value = C_Paths_Names[C_Path_Clubs];
			}
		}
	}
}

Void FocusBrowser(CMlScript _This, Boolean _IsFocused, Boolean _UpdateControllerInfos) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser)) return;

	ShowError(_This, "");
	TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].IsFocused = _IsFocused;
	FocusScroll(_This, _IsFocused, _UpdateControllerInfos);
	if (!_IsFocused) {
		Focus(_This, Null);
	} else {
		TMNext_BrowserAPI_State.PendingEvents.add(K_Event {
			Type = C_EventType_Focus
		});
		SetPathLabelValue(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].CurrentPath);
	}
}

Void FocusBrowser(CMlScript _This, Boolean _IsFocused) {
	FocusBrowser(_This, _IsFocused, True);
}

Boolean IsBrowserFocused(CMlScript _This) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser)) return False;

	return TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].IsFocused;
}

Integer GetBrowserDataCount(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return C_Browser_NullDataCount;
	declare Integer DataCount = C_Browser_NullDataCount;

	switch (TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath) {
		case C_Path_Base: {
			if (TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Map) || TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Campaign)) {
				if (TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent.existskey(CampaignStruct::C_CampaignType_Quarterly)) {
					if (TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent[CampaignStruct::C_CampaignType_Quarterly]) DataCount += 1;
				} else if (TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent.existskey(CampaignStruct::C_CampaignType_Monthly)) {
					if (TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent[CampaignStruct::C_CampaignType_Monthly]) DataCount += 1;
				}
				if (TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent.existskey(CampaignStruct::C_CampaignType_Club)) {
					if (TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent[CampaignStruct::C_CampaignType_Club]) DataCount += 1;
				}
			}
			if (TMNext_BrowserAPI_State.Browsers[_BrowserType].Settings.ShowFavoriteUserMaps) DataCount += 1;
			return DataCount+1;
		}
		case C_Path_Officials: {
			if (TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent.existskey(CampaignStruct::C_CampaignType_Quarterly)) {
				if (TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent[CampaignStruct::C_CampaignType_Quarterly]) DataCount += 1;
			}
			if (TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent.existskey(CampaignStruct::C_CampaignType_Monthly)) {
				if (TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent[CampaignStruct::C_CampaignType_Monthly]) DataCount += 1;
			}
			return DataCount;
		}
		case C_Path_Clubs: {
			return ClubStore::GetBrowserClubsTotal();
		}
		case C_Path_Quarterly: {
			if (TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenCampaign.Id != CampaignStruct::C_Campaign_NullId) {
				foreach (Category in TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenCampaign.Categories) {
					DataCount += Category.Playlist.count;
				}
				return DataCount;
			} else {
				return CampaignStore::GetCampaignsTotal(CampaignStruct::C_CampaignType_Quarterly);
			}
		}
		case C_Path_Monthly: {
			if (TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenMonthlyCampaign.Id != CampaignStruct::C_Campaign_NullId) {
				return TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenMonthlyCampaign.DailyMaps.count;
			} else {
				return CampaignStore::GetMonthlyCampaignsTotal();
			}
		}
		case C_Path_ChosenClub: {
			if (TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenCampaign.Id != CampaignStruct::C_Campaign_NullId) {
				foreach (Category in TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenCampaign.Categories) {
					DataCount += Category.Playlist.count;
				}
				return DataCount;
			} else {
				return CampaignStore::GetClubCampaignsTotal(TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenClubId);
			}
		}
		case C_Path_Favorites: {
			return MapStore::GetFavoriteMapsTotal();
		}
		default: {
			foreach (Type in TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes) {
				if (C_DataType_IsFileList.exists(Type) && TMNext_BrowserAPI_State.Browsers[_BrowserType].Files.existskey(Type)) {
					DataCount += TMNext_BrowserAPI_State.Browsers[_BrowserType].Files[Type].Datas.count;
				} else {
					switch (Type) {
						case C_DataType_Map: {
							DataCount += TMNext_BrowserAPI_State.Browsers[_BrowserType].Maps.count;
						}
						case C_DataType_Replay: {
							DataCount += TMNext_BrowserAPI_State.Browsers[_BrowserType].Replays.count;
						}
						case C_DataType_Campaign: {
							DataCount += TMNext_BrowserAPI_State.Browsers[_BrowserType].Campaigns.count;
						}
					}
				}
			}
		}
	}
	return DataCount;
}

Integer GetDataType(CMlScript _This, Integer _BrowserType, Integer _DataKey) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return C_DataType_None;
	declare CurrentBrowser = TMNext_BrowserAPI_State.Browsers[_BrowserType];

	switch (CurrentBrowser.CurrentPath) {
		case C_Path_Base: return C_DataType_Category;
		case C_Path_Officials: return C_DataType_Category;
		case C_Path_Clubs: return C_DataType_Club;
		case C_Path_Quarterly: {
			if (CurrentBrowser.ChosenCampaign.Id != CampaignStruct::C_Campaign_NullId) {
				return C_DataType_Map;
			} else {
				return C_DataType_Campaign;
			}
		}
		case C_Path_Monthly: {
			if (CurrentBrowser.ChosenMonthlyCampaign.Id != CampaignStruct::C_Campaign_NullId) {
				return C_DataType_Map;
			} else {
				return C_DataType_MonthlyCampaign;
			}
		}
		case C_Path_ChosenClub: {
			if (CurrentBrowser.ChosenCampaign.Id != CampaignStruct::C_Campaign_NullId) {
				return C_DataType_Map;
			} else {
				return C_DataType_Campaign;
			}
		}
		case C_Path_Favorites: {
			return C_DataType_Map;
		}
		default: {
			declare DataCount = 0;
			foreach (Type in CurrentBrowser.DataTypes) {
				if (C_DataType_IsFileList.exists(Type) && CurrentBrowser.Files.existskey(Type)) {
					if (CurrentBrowser.Files[Type].Datas.count + DataCount > _DataKey) return Type;
					DataCount += CurrentBrowser.Files[Type].Datas.count;
				} else {
					switch (Type) {
						case C_DataType_Map: {
							if (CurrentBrowser.Maps.count + DataCount > _DataKey) return Type;
							DataCount += CurrentBrowser.Maps.count;
						}
						case C_DataType_Replay: {
							if (CurrentBrowser.Replays.count + DataCount > _DataKey) return Type;
							DataCount += CurrentBrowser.Replays.count;
						}
						case C_DataType_Campaign: {
							if (CurrentBrowser.Campaigns.count + DataCount > _DataKey) return Type;
							DataCount += CurrentBrowser.Campaigns.count;
						}
					}
				}
			}
		}
	}
	return C_DataType_None;
}

Void UpdateBrowserContent(CMlScript _This, CMlFrame _Frame_Scroll, Integer _DataCount) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (_Frame_Scroll == Null) return;

	Navigation::Lock(_Frame_Scroll, _DataCount <= 0);
	if (IsScrollFocused(_This)) {
		if (_DataCount <= 0) {
			declare Frame_ParentPath <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameParentPath) as CMlFrame);
			Focus(_This, Frame_ParentPath);
			FocusScroll(_This, False);
		} else {
			TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].IsFocused = True;
			FocusScroll(_This, True);
		}
	}
	Scroll::SetElementsTotal(_This, _Frame_Scroll, _DataCount);
}

K_MapBrowserData[Integer] GetFavoriteMapsData() {
	declare CampaignStruct::LibCampaignStruct_K_Map[Integer] FavoriteMaps = MapStore::GetFavoriteMaps();

	declare K_MapBrowserData[Integer] FavoriteMapsData;
	foreach (Index => FavMap in FavoriteMaps) {
		FavoriteMapsData[Index] = K_MapBrowserData {
			MapInfo = FavMap,
			Path = C_Path_Favorites,
			ParentPath = C_Path_Base
		};
	}
	return FavoriteMapsData;
}

Void UpdateLocalMapsData(CMlScript _This, Integer _BrowserType, K_MapBrowserData[] _MapBrowserDataList) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType) || !TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Map)) return;

	declare Integer DataCount = GetBrowserDataCount(_This, _BrowserType);

	foreach (Index => MapBrowserData in _MapBrowserDataList) {
		TMNext_BrowserAPI_State.Browsers[_BrowserType].Maps[DataCount + Index] = MapBrowserData;
	}

	if (_BrowserType == TMNext_BrowserAPI_State.Type_CurrentBrowser) {
		UpdateBrowserContent(_This, TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, GetBrowserDataCount(_This, _BrowserType));
	}
}

Void UpdateLocalReplaysData(CMlScript _This, Integer _BrowserType, K_ReplayBrowserData[] _ReplayBrowserData) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;

	declare DataCount = GetBrowserDataCount(_This, _BrowserType);
	
	foreach (Index => ReplayBrowserData in _ReplayBrowserData) {
		TMNext_BrowserAPI_State.Browsers[_BrowserType].Replays[DataCount + Index] = ReplayBrowserData;
	}

	if (_BrowserType == TMNext_BrowserAPI_State.Type_CurrentBrowser) {
		UpdateBrowserContent(_This, TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, GetBrowserDataCount(_This, _BrowserType));
	}
}

Void SetLocalData(CMlScript _This, Integer _BrowserType, Integer _DataType, K_FileBrowserData[] _FileBrowserDataList) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType) || !TMNext_BrowserAPI_State.Browsers[_BrowserType].Files.existskey(_DataType)) return;
	
	declare DataCount = GetBrowserDataCount(_This, _BrowserType);
	
	foreach (Index => FileBrowserData in _FileBrowserDataList) {
		TMNext_BrowserAPI_State.Browsers[_BrowserType].Files[_DataType].Datas[DataCount + Index] = FileBrowserData;
	}

	if (_BrowserType == TMNext_BrowserAPI_State.Type_CurrentBrowser) {
		UpdateBrowserContent(_This, TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, GetBrowserDataCount(_This, _BrowserType));
	}
}

Text GetFullPath(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return "";

	declare BasePath = TMNext_BrowserAPI_State.Browsers[_BrowserType].BasePath;
	foreach (ParentPath => PathList in TMNext_BrowserAPI_State.Paths_Tree) {
		if (BasePath == ParentPath) return "";
		foreach (Path in PathList) {
			if (BasePath == Path) return "";
		}
	}

	return TMNext_BrowserAPI_State.Browsers[_BrowserType].BasePath ^ TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath;
}

Integer GetElementsPerPage(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	switch (_BrowserType) {
		case C_BrowserType_PathNavigation: {
			return TMNext_BrowserAPI_State.ManialinkProps.ElementsPerPage;
		}
		case C_BrowserType_PathNavigationSmall: {
			return TMNext_BrowserAPI_State.ManialinkProps.SmallMapsPerPage;
		}
		case C_BrowserType_List: {
			return TMNext_BrowserAPI_State.ManialinkProps.ListsPerPage;
		}
	}
	return 0;
}

Void FetchLiveData(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;

	LoadingSpinner::StartAnimation(_This, TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameLoadingSpinner));
	if (TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll != Null) {
		UpdateBrowserContent(_This, TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, 0); //< Avoid some flickering
		TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll.Visible = False;
	}

	declare ElementsPerPage = GetElementsPerPage(_This, _BrowserType);
	declare Integer Length = ElementsPerPage * 3;
	declare Integer QuaterlyCampaignsOffset = ML::Max(0, (TMNext_BrowserAPI_State.RequestsManager.PageQuarterly - 2)) * ElementsPerPage;
	CampaignStore::Action_LoadCampaigns(_This, CampaignStruct::C_CampaignType_Quarterly, QuaterlyCampaignsOffset, Length);
	CampaignStore::Action_LoadMonthlyCampaignsPage(_This, TMNext_BrowserAPI_State.RequestsManager.PageMonthly, ElementsPerPage);
	declare Integer ClubsOffset = ML::Max(0, (TMNext_BrowserAPI_State.RequestsManager.PageClubs - 2)) * ElementsPerPage;
	ClubStore::Action_LoadClubsBrowser(_This, ClubsOffset, Length);
	TMNext_BrowserAPI_State.RequestsManager.WaitingForMonthlyCampaigns = True;
	TMNext_BrowserAPI_State.RequestsManager.WaitingForQuarterlyCampaigns = True;
	TMNext_BrowserAPI_State.RequestsManager.WaitingForClubs = True;
}

CDataFileMgr::EMediaType GetMediaType(Integer _Type) {
	declare CDataFileMgr::EMediaType MediaType;
	switch (_Type) {
		case C_DataType_Image: MediaType = CDataFileMgr::EMediaType::Image;
		case C_DataType_Skin: MediaType = CDataFileMgr::EMediaType::Skins;
		case C_DataType_ItemCollection: MediaType = CDataFileMgr::EMediaType::ItemCollection;
		case C_DataType_Script: MediaType = CDataFileMgr::EMediaType::Script;
		case C_DataType_MatchSettings: MediaType = CDataFileMgr::EMediaType::MatchSettings;
		default: MediaType = CDataFileMgr::EMediaType::Image;
	}
	return MediaType;
}

Void FetchLocalData(CMlScript _This, Integer _BrowserType, Text _Path) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;
	declare K_Browser CurrentBrowser = TMNext_BrowserAPI_State.Browsers[_BrowserType];

	declare Integer BrowserFilter = Const::C_BrowserFilter_UserData;
	if (Config::HasFeature(Config::C_Feature_DebugBrowserAllData)) BrowserFilter = Const::C_BrowserFilter_AllData;
	foreach (Type in CurrentBrowser.DataTypes) {
		if (Type == C_DataType_Map) {
			if (CurrentBrowser.Settings.ShowFavoriteUserMaps && CurrentBrowser.CurrentPath == C_Path_Favorites) {
				TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMaps = True;
				TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
			} else {
				if (CurrentBrowser.TaskId_GetMaps != NullId) {
					DataFileMgr.TaskResult_Release(CurrentBrowser.TaskId_GetMaps);
					TMNext_BrowserAPI_State.Browsers[_BrowserType].TaskId_GetMaps = NullId;
				}
				declare CTaskResult_MapList Task = DataFileMgr.Map_GetFilteredGameList(
					BrowserFilter,
					_Path,
					CurrentBrowser.IsFlatten,
					CurrentBrowser.IsSortingByNameElseByDate,
					CurrentBrowser.IsSortingFromAscendingOrder
				);
				if (Task != Null) {
					TMNext_BrowserAPI_State.Browsers[_BrowserType].TaskId_GetMaps = Task.Id;
				}
			}
		} else if (Type == C_DataType_Replay) {
			if (CurrentBrowser.TaskId_GetReplays != NullId) {
				DataFileMgr.TaskResult_Release(CurrentBrowser.TaskId_GetReplays);
				TMNext_BrowserAPI_State.Browsers[_BrowserType].TaskId_GetReplays = NullId;
			}
			declare CTaskResult_ReplayList Task = DataFileMgr.Replay_GetFilteredGameList(
				BrowserFilter,
				_Path,
				CurrentBrowser.IsFlatten,
				CurrentBrowser.IsSortingByNameElseByDate,
				CurrentBrowser.IsSortingFromAscendingOrder
			);
			if (Task != Null) {
				TMNext_BrowserAPI_State.Browsers[_BrowserType].TaskId_GetReplays = Task.Id;
			}
		} else if (CurrentBrowser.Files.existskey(Type)) {
			if (CurrentBrowser.Files[Type].TaskId_GetFiles != NullId) {
				DataFileMgr.TaskResult_Release(CurrentBrowser.Files[Type].TaskId_GetFiles);
				TMNext_BrowserAPI_State.Browsers[_BrowserType].Files[Type].TaskId_GetFiles = NullId;
			}
			declare CDataFileMgr::EMediaType MediaType = GetMediaType(Type);
			if (Type == C_DataType_Script) BrowserFilter = Const::C_BrowserFilter_AllData;
			declare CTaskResult_FileList Task = DataFileMgr.Media_GetFilteredGameList(
				MediaType,
				BrowserFilter,
				_Path,
				CurrentBrowser.IsFlatten,
				CurrentBrowser.IsSortingByNameElseByDate,
				CurrentBrowser.IsSortingFromAscendingOrder
			);
			if (Task != Null) {
				TMNext_BrowserAPI_State.Browsers[_BrowserType].Files[Type].TaskId_GetFiles = Task.Id;
			}
		}
	}
}

Void FetchLocalData(CMlScript _This, Integer _BrowserType) {
	FetchLocalData(_This, _BrowserType, GetFullPath(_This, _BrowserType));
}

Void SetParentPathToCurrentPath(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (
		!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType) ||
		TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath == C_Path_Base
	) return;

	declare NewCurrentPath = C_Path_Null;

	foreach (ParentPath => PathList in TMNext_BrowserAPI_State.Paths_Tree) {
		if (PathList.exists(TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath)) {
			NewCurrentPath = ParentPath;
			break;
		}
	}
	foreach (ParentPath => PathList in TMNext_BrowserAPI_State.Paths_Tree) {
		if (PathList.exists(NewCurrentPath)) {
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ParentPath = ParentPath;
			break;
		}
	}

	if (NewCurrentPath == C_Path_Null) {
		NewCurrentPath = TMNext_BrowserAPI_State.Browsers[_BrowserType].ParentPath;

		// Can only go back to C_Path_Base (official, club, local) if there are maps or campaigns in the data
		if (
			NewCurrentPath == C_Path_Base &&
			!TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Map) &&
			!TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Campaign)
		) {
			NewCurrentPath = "";
		}

		TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath = NewCurrentPath;

		if (NewCurrentPath == C_Path_Base) {
			if (TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Map) || TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Campaign)) {
				FetchLiveData(_This, _BrowserType);
			}
		} else if (NewCurrentPath == "") {
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ParentPath = C_Path_Base;
			FetchLocalData(_This, _BrowserType);
		} else {
			declare Text CurrentPath = TL::Replace(TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath, "\\", "/");
			declare Text[] TmpSplit = TL::Split("/", CurrentPath);
			declare Rem = TmpSplit.removekey(TmpSplit.count-1);
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ParentPath = TL::Join("/", TmpSplit);
			FetchLocalData(_This, _BrowserType);
		}

		if (_BrowserType == TMNext_BrowserAPI_State.Type_CurrentBrowser) {
			SetPathLabelValue(_This, _BrowserType, TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath);
		}
	} else {
		if (NewCurrentPath == C_Path_Monthly) {
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenMonthlyCampaign = CampaignStruct::LibCampaignStruct_K_MonthlyCampaign {
				Id = CampaignStruct::C_Campaign_NullId
			};
		} else if (NewCurrentPath == C_Path_Quarterly) {
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenCampaign = CampaignStruct::LibCampaignStruct_K_Campaign {
				Id = CampaignStruct::C_Campaign_NullId
			};
		} else if (NewCurrentPath == C_Path_Clubs) {
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenClubId = ClubStruct::C_ClubNullId;
		}
	
		TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath = NewCurrentPath;
		SetPathLabelValue(_This, _BrowserType, TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath);

		UpdateBrowserContent(_This, TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, GetBrowserDataCount(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser));
	}
}

Void ResetBrowserCampaignsAndClubId(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;

	TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenCampaign = CampaignStruct::LibCampaignStruct_K_Campaign {
		Id = CampaignStruct::C_Campaign_NullId
	};
	TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenMonthlyCampaign = CampaignStruct::LibCampaignStruct_K_MonthlyCampaign {
		Id = CampaignStruct::C_Campaign_NullId
	};
	TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenClubId = ClubStruct::C_ClubNullId;
}

Void RefreshBrowserData(CMlScript _This) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser)) return;
	declare K_Browser CurrentBrowser = TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser];

	declare Integer BrowserFilter = Const::C_BrowserFilter_UserData;
	if (Config::HasFeature(Config::C_Feature_DebugBrowserAllData)) BrowserFilter = Const::C_BrowserFilter_AllData;

	foreach (Type in CurrentBrowser.DataTypes) {
		if (Type == C_DataType_Map) {
			DataFileMgr.Map_RefreshFromDisk();
			if (CurrentBrowser.Settings.ShowFavoriteUserMaps && CurrentBrowser.CurrentPath == C_Path_Favorites) {
				TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMaps = True;
				TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
			}
		} else if (Type == C_DataType_Replay) {
			DataFileMgr.Replay_RefreshFromDisk();
		} else if (CurrentBrowser.Files.existskey(Type)) {
			declare CDataFileMgr::EMediaType MediaType = GetMediaType(Type);
			if (Type == C_DataType_Script) BrowserFilter = Const::C_BrowserFilter_AllData;
			DataFileMgr.Media_RefreshFromDisk(MediaType, BrowserFilter);
		}
	}

	FetchLocalData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
}

Void SetCurrentPath(CMlScript _This, Integer _BrowserType, Text _Path) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;
	
	TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath = _Path;
	foreach (ParentPath => PathList in TMNext_BrowserAPI_State.Paths_Tree) {
		if (PathList.exists(_Path)) {
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ParentPath = ParentPath;
			break;
		}
	}

	switch (_Path) {
		case C_Path_Base: {
			if (TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Map) || TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Campaign)) {
				FetchLiveData(_This, _BrowserType);
			}
		}
		case C_Path_Officials: {
			if (TMNext_BrowserAPI_State.Browsers[_BrowserType].BasePath == C_Path_Officials) {
				TMNext_BrowserAPI_State.RequestsManager.WaitingForMonthlyCampaigns = True;
				TMNext_BrowserAPI_State.RequestsManager.WaitingForQuarterlyCampaigns = True;
				TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
			}
		}
		case C_Path_Monthly: {
			if (TMNext_BrowserAPI_State.Browsers[_BrowserType].BasePath == C_Path_Monthly) {
				TMNext_BrowserAPI_State.RequestsManager.WaitingForMonthlyCampaigns = True;
				TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
			}
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenCampaign = CampaignStruct::LibCampaignStruct_K_Campaign {
				Id = CampaignStruct::C_Campaign_NullId
			};
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenMonthlyCampaign = CampaignStruct::LibCampaignStruct_K_MonthlyCampaign {
				Id = CampaignStruct::C_Campaign_NullId
			};
		}
		case C_Path_Quarterly: {
			if (TMNext_BrowserAPI_State.Browsers[_BrowserType].BasePath == C_Path_Quarterly) {
				TMNext_BrowserAPI_State.RequestsManager.WaitingForQuarterlyCampaigns = True;
				TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
			}
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenMonthlyCampaign = CampaignStruct::LibCampaignStruct_K_MonthlyCampaign {
				Id = CampaignStruct::C_Campaign_NullId
			};
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenCampaign = CampaignStruct::LibCampaignStruct_K_Campaign {
				Id = CampaignStruct::C_Campaign_NullId
			};
		}
		case C_Path_Clubs: {
			if (TMNext_BrowserAPI_State.Browsers[_BrowserType].BasePath == C_Path_Clubs) {
				TMNext_BrowserAPI_State.RequestsManager.WaitingForClubs = True;
				TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
			}
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenClubId = ClubStruct::C_ClubNullId;
		}
		case C_Path_ChosenClub: {
			TMNext_BrowserAPI_State.RequestsManager.WaitingForClubCampaigns = True;
			TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
			TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenCampaign = CampaignStruct::LibCampaignStruct_K_Campaign {
				Id = CampaignStruct::C_Campaign_NullId
			};
		}
		case C_Path_Favorites: {
			TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMaps = True;
			TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
			ResetBrowserCampaignsAndClubId(_This, _BrowserType);
		}
		default: {
			if (_Path == "" || _Path == C_Path_Local) {
				TMNext_BrowserAPI_State.Browsers[_BrowserType].ParentPath = C_Path_Base;
				TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath = "";
				ResetBrowserCampaignsAndClubId(_This, _BrowserType);
			} else {
				declare Text CurrentPath = TL::Replace(TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath, "\\", "/");
				declare Text[] TmpSplit = TL::Split("/", CurrentPath);
				declare Rem = TmpSplit.removekey(TmpSplit.count-1);
				TMNext_BrowserAPI_State.Browsers[_BrowserType].ParentPath = TL::Join("/", TmpSplit);
			}
			FetchLocalData(_This, _BrowserType);
		}
	}

	if (_BrowserType == TMNext_BrowserAPI_State.Type_CurrentBrowser) {
		SetPathLabelValue(_This, _BrowserType, TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath);
	}
}

Boolean IsBasePath(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return False;
	return TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath == TMNext_BrowserAPI_State.Browsers[_BrowserType].BasePath;
}

Void ResetPathToBasePath(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;
	SetCurrentPath(_This, _BrowserType, TMNext_BrowserAPI_State.Browsers[_BrowserType].BasePath);
}

Text GetCurrentPath(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return "";
	return TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath;
}

Void UpdateBrowserTitle(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;
	declare CMlLabel Label_Title <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_LabelTitle) as CMlLabel);
	Label_Title.Value = TMNext_BrowserAPI_State.Browsers[_BrowserType].Name;
}
Void UpdateBrowserSubTitle(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;
	declare CMlLabel Label_Title <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_LabelSubTitle) as CMlLabel);
	Label_Title.Value = TMNext_BrowserAPI_State.Browsers[_BrowserType].SubTitle;
}

Boolean IsFlatten(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return False;
	return TMNext_BrowserAPI_State.Browsers[_BrowserType].IsFlatten;
}

Boolean SwitchFlatten(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return False;

	TMNext_BrowserAPI_State.Browsers[_BrowserType].IsFlatten = !TMNext_BrowserAPI_State.Browsers[_BrowserType].IsFlatten;

	switch (_BrowserType) {
		case C_BrowserType_PathNavigation: {
			FetchLocalData(_This, _BrowserType);
		}
		case C_BrowserType_PathNavigationSmall: {
			FetchLocalData(_This, _BrowserType);
		}
		case C_BrowserType_List: {
			FetchLocalData(_This, _BrowserType);
		}
	}

	return TMNext_BrowserAPI_State.Browsers[_BrowserType].IsFlatten;
}

Boolean IsSortingFromAscendingOrder(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return False;
	return TMNext_BrowserAPI_State.Browsers[_BrowserType].IsSortingFromAscendingOrder;
}

Boolean SwitchSortOrder(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return False;

	TMNext_BrowserAPI_State.Browsers[_BrowserType].IsSortingFromAscendingOrder = !TMNext_BrowserAPI_State.Browsers[_BrowserType].IsSortingFromAscendingOrder;

	switch (_BrowserType) {
		case C_BrowserType_PathNavigation: {
			FetchLocalData(_This, _BrowserType);
		}
		case C_BrowserType_PathNavigationSmall: {
			FetchLocalData(_This, _BrowserType);
		}
		case C_BrowserType_List: {
			FetchLocalData(_This, _BrowserType);
		}
	}

	return TMNext_BrowserAPI_State.Browsers[_BrowserType].IsSortingFromAscendingOrder;
}

Boolean IsSortingByNameElseByDate(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return False;
	return TMNext_BrowserAPI_State.Browsers[_BrowserType].IsSortingByNameElseByDate;
}

Boolean SwitchSortCriterion(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return False;

	TMNext_BrowserAPI_State.Browsers[_BrowserType].IsSortingByNameElseByDate = !TMNext_BrowserAPI_State.Browsers[_BrowserType].IsSortingByNameElseByDate;

	switch (_BrowserType) {
		case C_BrowserType_PathNavigation: {
			FetchLocalData(_This, _BrowserType);
		}
		case C_BrowserType_PathNavigationSmall: {
			FetchLocalData(_This, _BrowserType);
		}
		case C_BrowserType_List: {
			FetchLocalData(_This, _BrowserType);
		}
	}

	return TMNext_BrowserAPI_State.Browsers[_BrowserType].IsSortingByNameElseByDate;
}

CManiaApp Private_GetParentApp(CMlScript _This) {
	switchtype (_This as Context) {
		case CMlScriptIngame: {
			return Context.ParentApp;
		}
		case CManiaAppTitleLayer: {
			return Context.ParentApp;
		}
	}
	return Null;
}

Void OpenExplorer(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;
	declare CurrentPath = TL::Replace(TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath, "/", "\\");

	// @TODO Handle the different versions of path in issue about "//" and "\"
	foreach (Type in TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes) {
		switch (Type) {
			case C_DataType_Image: {
				Private_GetParentApp(_This).OpenFileInExplorer("Media\\Images\\"^CurrentPath);
			}
			case C_DataType_Skin: {
				Private_GetParentApp(_This).OpenFileInExplorer("Skins\\"^CurrentPath);
			}
			case C_DataType_Map: {
				Private_GetParentApp(_This).OpenFileInExplorer("Maps\\"^CurrentPath);
			}
			case C_DataType_Replay: {
				Private_GetParentApp(_This).OpenFileInExplorer("Replays\\"^CurrentPath);
			}
			case C_DataType_Script: {
				Private_GetParentApp(_This).OpenFileInExplorer("Scripts\\"^CurrentPath);
			}
			case C_DataType_MatchSettings: {
				Private_GetParentApp(_This).OpenFileInExplorer("Maps\\MatchSettings\\"^CurrentPath);
			}
			case C_DataType_ItemCollection: {
				Private_GetParentApp(_This).OpenFileInExplorer("ItemCollections\\"^CurrentPath);
			}
		}
	}
}

Void InitializeOptions(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	declare Frame_Options <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameOptions) as CMlFrame);

	declare IsSortedFromAscendingOrder = IsSortingFromAscendingOrder(_This, _BrowserType);
	declare IsSortedByNameElseByDate = IsSortingByNameElseByDate(_This, _BrowserType);
	declare IsFlatten = IsFlatten(_This, _BrowserType);

	foreach (Control in Frame_Options.Controls) {
		if (!(Control is CMlFrame)) continue;
		declare Frame_Option = (Control as CMlFrame);
		declare Quad_Image = (Frame_Option.GetFirstChild(C_Id_QuadImage) as CMlQuad);
		if (Quad_Image == Null) continue;
		
		switch (Frame_Option.ControlId) {
			case C_Id_FrameOptionsRefresh: {
				Quad_Image.ChangeImageUrl(Const::C_ImageUrl_Icon_Refresh);
			}
			case C_Id_FrameOptionsOrder: {
				Quad_Image.ChangeImageUrl(Const::C_ImageUrl_Icon_Order);
				if (IsSortedFromAscendingOrder) {
					Quad_Image.RelativeRotation = 180.;
				} else {
					Quad_Image.RelativeRotation = 0.;
				}
			}
			case C_Id_FrameOptionsCriterion: {
				if (IsSortedByNameElseByDate) {
					Quad_Image.ImageUrl = Const::C_ImageUrl_Icon_Criterion_Alpha;
				} else {
					Quad_Image.ImageUrl = Const::C_ImageUrl_Icon_Criterion_Date;
				}
			}
			case C_Id_FrameOptionsFlatten: {
				if (IsFlatten) {
					Quad_Image.ImageUrl = Const::C_ImageUrl_Icon_Flatten_Files;
				} else {
					Quad_Image.ImageUrl = Const::C_ImageUrl_Icon_Flatten_Arbo;
				}
			}
			case C_Id_FrameOptionsExplorer: {
				Quad_Image.ChangeImageUrl(Const::C_ImageUrl_Icon_Explorer);
			}
		}
	}
}

Void UpdateBrowser(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;

	if (
		TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Map) ||
		TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Replay) ||
		TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Image) ||
		TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Skin) ||
		TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Script) ||
		TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_MatchSettings) ||
		TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_ItemCollection)
	) {
		FetchLocalData(_This, _BrowserType);
	}
	if (
		TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Map) || 
		TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Campaign) ||
		TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_MonthlyCampaign)
	) {
		FetchLiveData(_This, _BrowserType);
	}

	SetPathLabelValue(_This, _BrowserType, TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath);
	UpdateBrowserTitle(_This, _BrowserType);
	UpdateBrowserSubTitle(_This, _BrowserType);
	InitializeOptions(_This, _BrowserType);
	UpdateBrowserContent(_This, TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, GetBrowserDataCount(_This, _BrowserType));
}

Void CheckSettings(Integer _BrowserType, K_Settings _Settings, Integer[] _DataTypes) {
	assert(!_Settings.ListMultiSelect || !_Settings.DisplayEditorSettingsButton, "ListMultiSelect and DisplayEditorSettingsButton cannot be active at the same time");
	assert(!_Settings.ListMultiSelect || (_DataTypes.count == 1 && _DataTypes.containsonly(C_DataType_CanBeMultiSelect))); //< Multi selection works only if the browser has one data type
	assert(!_Settings.DisplayEditorSettingsButton || _BrowserType == C_BrowserType_PathNavigationSmall, "DisplayEditorSettingsButton can only be activated with browser type PathNavigationSmall");
}

Void AddBrowser(
	CMlScript _This,
	Integer _BrowserType,
	Text _BrowserName,
	Text _BrowserSubTitle,
	Integer[] _DataTypes,
	Text _BasePath,
	Text _StartPath,
	CTaskResult_MapList _TaskResultMapList,
	CTaskResult_ReplayList _TaskResultReplayList,
	CTaskResult_FileList[Integer] _TaskResultFileLists,
	Boolean _IsFlatten,
	Boolean _IsSortingFromAscendingOrder,
	Boolean _IsSortingByNameElseByDate,
	K_Settings _Settings
) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	CheckSettings(_BrowserType, _Settings, _DataTypes);

	declare K_TaskResult_FileData[Integer] Files;
	foreach (DataType in _DataTypes) {
		if (!C_DataType_IsFileList.exists(DataType)) continue;
		Files[DataType] = K_TaskResult_FileData{};
		if (!_TaskResultFileLists.existskey(DataType)) continue;
		if (_TaskResultFileLists[DataType] != Null) {
			Files[DataType].TaskId_GetFiles = _TaskResultFileLists[DataType].Id;
		} else {
			Files[DataType].TaskId_GetFiles = NullId;
		}
	}

	TMNext_BrowserAPI_State.Browsers[_BrowserType] = K_Browser {
		Type = _BrowserType,
		Name = _BrowserName,
		SubTitle = _BrowserSubTitle,
		DataTypes = _DataTypes,
		BasePath = _BasePath,
		ParentPath = "",
		CurrentPath = "",
		ChosenClubId = ClubStruct::C_ClubNullId,
		ChosenCampaign = CampaignStruct::LibCampaignStruct_K_Campaign {
			Id = CampaignStruct::C_Campaign_NullId
		},
		ChosenMonthlyCampaign = CampaignStruct::LibCampaignStruct_K_MonthlyCampaign {
			Id = CampaignStruct::C_Campaign_NullId
		},
		Files = Files,
		IsFlatten = _IsFlatten,
		IsSortingFromAscendingOrder = _IsSortingFromAscendingOrder,
		IsSortingByNameElseByDate = _IsSortingByNameElseByDate,
		Settings = _Settings,
		SelectedReplays = [],
		SelectedMaps = []
	};
	SetCurrentPath(_This, _BrowserType, _StartPath);
	UpdateBrowserTitle(_This, _BrowserType);
	UpdateBrowserSubTitle(_This, _BrowserType);
	InitializeOptions(_This, _BrowserType);
}

Void AddBrowser(CMlScript _This, Integer _BrowserType, Text _BrowserName, Text _BrowserSubTitle, Integer[] _DataTypes, Text _StartPath, K_Settings _Settings) {
	AddBrowser(_This, _BrowserType, _BrowserName, _BrowserSubTitle, _DataTypes, "", _StartPath, Null, Null, [], False, False, False, _Settings);
}

Void UpdateBrowserDataTypes(CMlScript _This, Integer _BrowserType, Integer[] _DataTypes) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;
	assert(!TMNext_BrowserAPI_State.Browsers[_BrowserType].Settings.ListMultiSelect || (_DataTypes.count == 1 && _DataTypes.containsonly(C_DataType_CanBeMultiSelect))); //< Multi selection works only if the browser has one data type
	TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes = _DataTypes;
	TMNext_BrowserAPI_State.Browsers[_BrowserType].Files = [];
	TMNext_BrowserAPI_State.Browsers[_BrowserType].SelectedReplays = [];
	TMNext_BrowserAPI_State.Browsers[_BrowserType].SelectedMaps = [];
	foreach (DataType in _DataTypes) {
		if (!C_DataType_IsFileList.exists(DataType)) continue;
		TMNext_BrowserAPI_State.Browsers[_BrowserType].Files[DataType] = K_TaskResult_FileData{};
	}
}

Void UpdateBrowserName(CMlScript _This, Integer _BrowserType, Text _Name) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;
	TMNext_BrowserAPI_State.Browsers[_BrowserType].Name = _Name;
}
Void UpdateBrowserSubTitle(CMlScript _This, Integer _BrowserType, Text _SubTitle) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;
	TMNext_BrowserAPI_State.Browsers[_BrowserType].SubTitle = _SubTitle;
}
Void UpdateBrowserBasePath(CMlScript _This, Integer _BrowserType, Text _BasePath) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;
	TMNext_BrowserAPI_State.Browsers[_BrowserType].BasePath = _BasePath;
}

Void CreateOrUpdateBrowser(CMlScript _This, Integer _BrowserType, Text _BrowserName, Text _BrowserSubTitle, Integer[] _DataTypes, Text _StartPath, K_Settings _Settings) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) {
		AddBrowser(_This, _BrowserType, _BrowserName, _BrowserSubTitle, _DataTypes, _StartPath, _Settings);
	} else {
		CheckSettings(_BrowserType, _Settings, _DataTypes);
		TMNext_BrowserAPI_State.Browsers[_BrowserType].Settings = _Settings;
		UpdateBrowserDataTypes(_This, _BrowserType, _DataTypes);
		UpdateBrowserName(_This, _BrowserType, _BrowserName);
		UpdateBrowserSubTitle(_This, _BrowserType, _BrowserSubTitle);
		SetCurrentPath(_This, _BrowserType, _StartPath);
		UpdateBrowserTitle(_This, _BrowserType);
		UpdateBrowserSubTitle(_This, _BrowserType);
		InitializeOptions(_This, _BrowserType);
	}
}

CampaignStruct::LibCampaignStruct_K_Campaign GetCampaign(CMlScript _This, Integer _BrowserType, Integer _DataKey) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) {
		return CampaignStruct::LibCampaignStruct_K_Campaign {
			Id = CampaignStruct::C_Campaign_NullId
		};
	}

	declare Campaign = CampaignStruct::LibCampaignStruct_K_Campaign {
		Id = CampaignStruct::C_Campaign_NullId
	};

	switch (TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath) {
		case C_Path_Quarterly: {
			declare CampaignList = CampaignStore::GetCampaignList(CampaignStruct::C_CampaignType_Quarterly);
			if (CampaignList.existskey(_DataKey)) {
				Campaign = CampaignList[_DataKey];
				if (Campaign.IsLoaded) {
					Campaign = CampaignStore::GetCampaignFromId(Campaign.Id);
				}
			}
		}
		case C_Path_ChosenClub: {
			declare CampaignList = CampaignStore::GetClubCampaignList(TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenClubId);
			if (CampaignList.existskey(_DataKey)) {
				Campaign = CampaignList[_DataKey];
				if (Campaign.IsLoaded) {
					Campaign = CampaignStore::GetCampaignFromId(Campaign.Id);
				}
			}
		}
		default: {
			if (TMNext_BrowserAPI_State.Browsers[_BrowserType].Campaigns.existskey(_DataKey)) {
				return TMNext_BrowserAPI_State.Browsers[_BrowserType].Campaigns[_DataKey];
			}
		}
	}

	return Campaign;
}

CampaignStruct::LibCampaignStruct_K_MonthlyCampaign GetMonthlyCampaign(Integer _DataKey) {
	declare MonthlyCampaignList = CampaignStore::GetMonthlyCampaignList();
	declare MonthlyCampaign = CampaignStruct::LibCampaignStruct_K_MonthlyCampaign {
		Id = CampaignStruct::C_Campaign_NullId
	}; 

	if (MonthlyCampaignList.existskey(_DataKey)) {
		MonthlyCampaign = CampaignStore::GetMonthlyCampaignFromId(MonthlyCampaignList[_DataKey].Id);
		if (!MonthlyCampaign.IsLoaded) {
			MonthlyCampaign = MonthlyCampaignList[_DataKey];
		}
	}
	return MonthlyCampaign;
}

ClubStruct::LibStructuresClub_K_Club GetClub(Integer _BrowserType, Integer _DataKey) {

	declare Clubs = ClubStore::GetBrowserClubs();
	if (Clubs.existskey(_DataKey)) return Clubs[_DataKey];

	return ClubStruct::LibStructuresClub_K_Club {
		Id = ClubStruct::C_ClubNullId
	};
}

K_MapBrowserData GetMapBrowserData(CMlScript _This, Integer _BrowserType, Integer _DataKey) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType) || !TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Map)) return K_MapBrowserData{};

	if (TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenCampaign.Id != CampaignStruct::C_Campaign_NullId) {
		declare MapCount = 0;
		declare CampaignStruct::LibCampaignStruct_K_Map ChosenMap;
		foreach (Category in TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenCampaign.Categories) {
			if (Category.Playlist.count + MapCount <= _DataKey) {
				MapCount += Category.Playlist.count;
				continue;
			} else {
				if (Category.Playlist.existskey(_DataKey - MapCount)) ChosenMap = Category.Playlist[_DataKey - MapCount];
				if (ChosenMap.Uid != "") break;
			}
		}
		
		return K_MapBrowserData{
			MapInfo = ChosenMap
		};
	} else if (TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenMonthlyCampaign.Id != CampaignStruct::C_Campaign_NullId) {
		// DailyMaps have a day index and not a key like other map arrays
		declare Integer Key;
		foreach (DayIndex => DailyMap in TMNext_BrowserAPI_State.Browsers[_BrowserType].ChosenMonthlyCampaign.DailyMaps) {
			if (Key == _DataKey) {
				return K_MapBrowserData {
					MapInfo = DailyMap.Map
				};
				break;
			}
			Key += 1;
		}
	} else if (
		TMNext_BrowserAPI_State.Browsers[_BrowserType].Settings.ShowFavoriteUserMaps &&
		TMNext_BrowserAPI_State.Browsers[_BrowserType].CurrentPath == C_Path_Favorites &&
		TMNext_BrowserAPI_State.Browsers[_BrowserType].FavoriteMaps.existskey(_DataKey)
	) {
		return TMNext_BrowserAPI_State.Browsers[_BrowserType].FavoriteMaps[_DataKey];
	} else if (TMNext_BrowserAPI_State.Browsers[_BrowserType].Maps.existskey(_DataKey)) {
		return TMNext_BrowserAPI_State.Browsers[_BrowserType].Maps[_DataKey];
	}

	return K_MapBrowserData {};
}

K_ReplayBrowserData GetReplayBrowserData(CMlScript _This, Integer _BrowserType, Integer _DataKey) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (
		!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType) ||
		!TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Replay) ||
		!TMNext_BrowserAPI_State.Browsers[_BrowserType].Replays.existskey(_DataKey)
	) return K_ReplayBrowserData{};
	
	return TMNext_BrowserAPI_State.Browsers[_BrowserType].Replays[_DataKey];
}

K_FileBrowserData GetFileBrowserData(CMlScript _This, Integer _BrowserType, Integer _DataKey) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return K_FileBrowserData{};

	foreach (DataType => File in TMNext_BrowserAPI_State.Browsers[_BrowserType].Files) {
		if (File.Datas.existskey(_DataKey)) return File.Datas[_DataKey];
	}
	return K_FileBrowserData{};
}

Integer[] GetBrowserDataTypes(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return [];
	return TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes;
}

Void UpdateMultiSelectButtons(CMlScript _This, CMlFrame _Button_ListMultiSelectValid) {
	if (Navigation::IsLocked(_Button_ListMultiSelectValid)) {
		Button::SetBgColor(_This, _Button_ListMultiSelectValid, CL::Hex6ToRgb(ColorPalette::C_Color_GreenTwo));
	} else {
		Button::SetBgColor(_This, _Button_ListMultiSelectValid, CL::Hex6ToRgb(ColorPalette::C_Color_GreenFour));
	}
}

Void UpdateMapPreselection(CMlScript _This, K_MapBrowserData _MapBrowserData, CMlFrame _Frame_SelectedMap) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	TMNext_BrowserAPI_State.PreSelectedMapBrowserData = _MapBrowserData;

	(_Frame_SelectedMap.GetFirstChild(C_Id_LabelMap) as CMlLabel).SetText(TMNext_BrowserAPI_State.PreSelectedMapBrowserData.MapInfo.Name);
	declare Text AuthorName;
	if (TMNext_BrowserAPI_State.PreSelectedMapBrowserData.MapInfo.AuthorDisplayName != "") {
		//L16N %1 will be replaced by the name of the author of the track, e.g. "by Darrek"
		AuthorName = TL::Compose(_("by %1"), UserStore::GetPlayerName(TMNext_BrowserAPI_State.PreSelectedMapBrowserData.MapInfo.AuthorDisplayName, TMNext_BrowserAPI_State.PreSelectedMapBrowserData.MapInfo.AuthorIsFirstPartyDisplayName));
	}
	declare CMlLabel Label_Author <=> (_Frame_SelectedMap.GetFirstChild(C_Id_LabelAuthor) as CMlLabel);
	Label_Author.SetText(AuthorName);
	Tools::FirstPartyLogoMatchLuminance(Label_Author);
	(_Frame_SelectedMap.GetFirstChild(C_Id_QuadThumbnail) as CMlQuad).ChangeImageUrl(TMNext_BrowserAPI_State.PreSelectedMapBrowserData.MapInfo.ThumbnailUrl);
	declare CMlFrame Button_EditorSettings <=> (_Frame_SelectedMap.GetFirstChild(C_Id_ButtonEditorSettings) as CMlFrame);
	declare CMlControl Button_SelectMap = _Frame_SelectedMap.GetFirstChild(C_Id_ButtonSelectMap);

	Button_SelectMap.Visible = TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser) && !TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.ListMultiSelect && !TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Skin);

	Button_EditorSettings.Visible = (
		Button_SelectMap.Visible &&
		TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.DisplayEditorSettingsButton &&
		_MapBrowserData.MapInfo.Uid != ""
	);

	Navigation::Lock(Button_SelectMap, !Button_SelectMap.Visible || _MapBrowserData.MapInfo.Uid == "");
	Navigation::Lock(Button_EditorSettings, !Button_EditorSettings.Visible);
	UpdateMultiSelectButtons(_This, (Button_SelectMap as CMlFrame));
}

Void SetCurrentBrowserScroll(CMlScript _This, Integer _BrowserType) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	declare Frame_NavBrowserScroll <=> TMNext_BrowserAPI_State.Controls.Frame_Global.Parent;
	declare Frame_BrowserMapScroll <=> (Frame_NavBrowserScroll.GetFirstChild(C_Id_FrameBrowserMapScroll) as CMlFrame);
	declare Frame_BrowserTestMapScroll <=> (Frame_NavBrowserScroll.GetFirstChild(C_Id_FrameBrowserSmallMapScroll) as CMlFrame);
	declare Frame_BrowserListScroll <=> (Frame_NavBrowserScroll.GetFirstChild(C_Id_FrameBrowserListScroll) as CMlFrame);

	declare Frame_ButtonCreateMap <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_ButtonCreateMap) as CMlFrame);
	declare Frame_SelectedMap <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameSelectedMap) as CMlFrame);
	declare Frame_ButtonSelectMap <=> (Frame_SelectedMap.GetFirstChild(C_Id_ButtonSelectMap) as CMlFrame);
	declare Button_EditorSettings <=> (Frame_SelectedMap.GetFirstChild(C_Id_ButtonEditorSettings) as CMlFrame);
	declare Frame_ParentPath <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameParentPath) as CMlFrame);

	declare Frame_SelectedSkin <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameSelectedSkin) as CMlFrame);

	declare Frame_Tooltip <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameTooltip) as CMlFrame);
	declare Label_Tooltip <=> (Frame_Tooltip.GetFirstChild(C_Id_LabelTooltip) as CMlLabel);
	
	declare Frame_ListButtons <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameListButtons) as CMlFrame);
	declare Button_ListMultiSelectValid <=> (Frame_ListButtons.GetFirstChild(C_Id_ButtonListMultiSelectValid) as CMlFrame);
	declare Button_ListMultiSelectSelectAll <=> (Frame_ListButtons.GetFirstChild(C_Id_ButtonListMultiSelectSelectAll) as CMlFrame);
	declare Button_ListMultiSelectunselectAll <=> (Frame_ListButtons.GetFirstChild(C_Id_ButtonListMultiSelectUnselectAll) as CMlFrame);
	
	Scroll::Display(_This, Frame_BrowserMapScroll, _BrowserType == C_BrowserType_PathNavigation);
	Scroll::Display(_This, Frame_BrowserTestMapScroll, _BrowserType == C_BrowserType_PathNavigationSmall);
	Scroll::Display(_This, Frame_BrowserListScroll, _BrowserType == C_BrowserType_List);
	if (Frame_BrowserMapScroll.Visible) {
		TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll = Frame_BrowserMapScroll;
	} else if (Frame_BrowserTestMapScroll.Visible) {
		TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll = Frame_BrowserTestMapScroll;
	} else if (Frame_BrowserListScroll.Visible) {
		TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll = Frame_BrowserListScroll;
	}
	TMNext_BrowserAPI_State.Type_CurrentBrowser = _BrowserType;

	Frame_SelectedMap.Visible = Frame_BrowserTestMapScroll.Visible && TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Map);
	Frame_SelectedSkin.Visible = Frame_BrowserTestMapScroll.Visible && TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Skin);

	Navigation::ChangeControlTarget(_This, Frame_ButtonCreateMap, "up", TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll.ControlId);
	Navigation::ChangeControlTarget(_This, Frame_ButtonSelectMap, "up", TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll.ControlId);
	Navigation::ChangeControlTarget(_This, Button_EditorSettings, "left", TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll.ControlId);
	Navigation::ChangeControlTarget(_This, Button_ListMultiSelectValid, "up", TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll.ControlId);
	Navigation::ChangeControlTarget(_This, Button_ListMultiSelectSelectAll, "down", TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll.ControlId);
	Navigation::ChangeControlTarget(_This, Button_ListMultiSelectunselectAll, "down", TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll.ControlId);
	if (TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) {
		Frame_ButtonCreateMap.Visible = TMNext_BrowserAPI_State.Browsers[_BrowserType].Settings.DisplayCreateMapButton && TMNext_BrowserAPI_State.Browsers[_BrowserType].DataTypes.exists(C_DataType_Map);
		Navigation::Lock(Frame_ButtonCreateMap, !Frame_ButtonCreateMap.Visible);
		Frame_ButtonSelectMap.Hide();
		Navigation::Lock(Frame_ButtonSelectMap, True);
		Button_EditorSettings.Visible = False;
		Navigation::Lock(Button_EditorSettings, True);
		UpdateMapPreselection(_This, K_MapBrowserData {}, Frame_SelectedMap);
		Frame_Tooltip.Visible = TMNext_BrowserAPI_State.Browsers[_BrowserType].Settings.DisplayFileNameTooltip;
		if (Frame_Tooltip.Visible) {
			switch (TMNext_BrowserAPI_State.Browsers[_BrowserType].Settings.PositionFileNameTooltip) {
				case C_TooltipPos_ScrollTop: {
					Frame_Tooltip.RelativePosition_V3 = <5.5, 28.>;
					Label_Tooltip.TextSizeReal = 4.;
				}
				default: { // C_TooltipPos_Footer
					Frame_Tooltip.RelativePosition_V3 = <-12., -69.>;
					Label_Tooltip.TextSizeReal = 5.;
				}
			}
		}
		
		Frame_ListButtons.Visible = (Frame_BrowserListScroll.Visible || Frame_BrowserTestMapScroll.Visible) && TMNext_BrowserAPI_State.Browsers[_BrowserType].Settings.ListMultiSelect;
		Navigation::Lock(Button_ListMultiSelectValid, True);
		Navigation::Lock(Button_ListMultiSelectSelectAll, !Frame_ListButtons.Visible);
		Navigation::Lock(Button_ListMultiSelectunselectAll, !Frame_ListButtons.Visible);
		UpdateMultiSelectButtons(_This, Button_ListMultiSelectValid);
		UpdateMultiSelectButtons(_This, Frame_ButtonSelectMap);
		
		Frame_ButtonCreateMap.RelativePosition_V3 = <45., -68.5>;
		if (Frame_ListButtons.Visible) {
			Navigation::ChangeControlTarget(_This, Frame_ButtonCreateMap, "right", Button_ListMultiSelectValid.ControlId);
		} else if (Frame_SelectedMap.Visible) {
			Navigation::ChangeControlTarget(_This, Frame_ButtonCreateMap, "right", Frame_ButtonSelectMap.ControlId);
		} else {
			Frame_ButtonCreateMap.RelativePosition_V3 = <93.5, -68.5>;
		}
	}
}

Void SetCurrentBrowser(CMlScript _This, Integer _Type, Text _Name, Text _SubTitle, Integer[] _DataTypes, Text _StartPath, K_Settings _Settings, Boolean _IsFocused) {
	CreateOrUpdateBrowser(_This, _Type, _Name, _SubTitle, _DataTypes, _StartPath, _Settings);
	SetCurrentBrowserScroll(_This, _Type);
	FocusBrowser(_This, _IsFocused);
}
Void SetCurrentBrowser(CMlScript _This, Integer _Type, Text _Name, Text _SubTitle, Integer[] _DataTypes, Text _StartPath, K_Settings _Settings) {
	SetCurrentBrowser(_This, _Type, _Name, _SubTitle, _DataTypes, _StartPath, _Settings, True);
}
Void SetCurrentBrowser(CMlScript _This, Integer _Type, Text _Name, Integer[] _DataTypes, Text _StartPath, K_Settings _Settings) {
	SetCurrentBrowser(_This, _Type, _Name, "", _DataTypes, _StartPath, _Settings);
}
Void SetCurrentBrowser(CMlScript _This, Integer _Type, Text _Name, Integer[] _DataTypes, Text _StartPath) {
	SetCurrentBrowser(_This, _Type, _Name, "", _DataTypes, _StartPath, GetDefaultSettings());
}

CMlFrame GetCurrentFrameBrowserScroll(CMlScript _This) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	return TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll;
}

Void UpdateBrowserElement(CMlScript _This, CMlFrame _Frame_Element, Integer _DataKey) {
	if (_Frame_Element == Null) return;
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	declare DataTypeElement = GetDataType(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, _DataKey);
	declare K_BrowserElement BrowserElementData;
	if (C_DataType_NameList.existskey(DataTypeElement)) BrowserElementData.TypeName = C_DataType_NameList[DataTypeElement];

	declare Boolean IsSubfolder for _Frame_Element;
	switch (DataTypeElement) {
		case C_DataType_Campaign: {
			declare Campaign = GetCampaign(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, _DataKey);
			BrowserElementData.Name = Campaign.Name;
			declare Text[Integer] MissingConditions;
			declare MapNumber = 0;
			declare UnplayableMap = 0;
			foreach (Category in Campaign.Categories) {
				foreach (Map in Category.Playlist) {
					if (Map.Name != ""){
						MapNumber += 1;
						if (!Map.IsPlayable) UnplayableMap += 1;
					}
				}
			}
			if (MapNumber < 1) MissingConditions[0] = C_Text_Map;
			if (UnplayableMap >= 1) {
				declare Text Validation;
				if (UnplayableMap > 1){
					Validation = TL::GetTranslatedText(C_Text_Validations);
				} else {
					Validation = TL::GetTranslatedText(C_Text_Validation);
				}
				MissingConditions[1] = (UnplayableMap^" "^Validation);
			}
			if (Campaign.Name == "") MissingConditions[2] = C_Text_Name;
			if (MapNumber < 1 || UnplayableMap >= 1 || Campaign.Name == "") {
				BrowserElementData.Missing = TL::Compose(C_Text_Missing, MissingConditions.get(0, ""), MissingConditions.get(1, ""), MissingConditions.get(2, ""), MissingConditions.get(3, ""));
			}
		}
		case C_DataType_MonthlyCampaign: {
			declare MonthlyCampaign = GetMonthlyCampaign(_DataKey);
			if (MonthlyCampaign.Id != CampaignStruct::C_Campaign_NullId) {
				BrowserElementData.Name = TL::Compose(C_Month_Names[MonthlyCampaign.Month-1], TL::ToText(MonthlyCampaign.Year));
			} else {
				BrowserElementData.Name = Const::C_Text_RetrievingDataPlaceholder;
			}
		}
		case C_DataType_Map: {
			declare K_MapBrowserData MapBrowserData = GetMapBrowserData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, _DataKey);
			if (MapBrowserData.SubFolder != "") {
				BrowserElementData.Name = GetLastNameOfPath(MapBrowserData.SubFolder);
				BrowserElementData.IsSubfolder = True;
			} else {
				BrowserElementData.Name = MapBrowserData.MapInfo.Name;
				BrowserElementData.MapUid = MapBrowserData.MapInfo.Uid;
			}
		}
		case C_DataType_Category: {
			BrowserElementData.IsSubfolder = True;
			declare CurrentPath = TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].CurrentPath;
			if (TMNext_BrowserAPI_State.Paths_Tree.existskey(CurrentPath) && TMNext_BrowserAPI_State.Paths_Tree[CurrentPath].existskey(_DataKey)) {
				declare Path = TMNext_BrowserAPI_State.Paths_Tree[CurrentPath][_DataKey];
				if (C_Paths_Names.existskey(Path)) BrowserElementData.Name = C_Paths_Names[Path];
			}
		}
		case C_DataType_Club: {
			declare Club = GetClub(TMNext_BrowserAPI_State.Type_CurrentBrowser, _DataKey);
			BrowserElementData.IsSubfolder = True;
			BrowserElementData.Name = Club.Name;
			BrowserElementData.File = Club.LogoUrl;
		}
		case C_DataType_Replay: {
			declare K_ReplayBrowserData ReplayBrowserData = GetReplayBrowserData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, _DataKey);
			if (ReplayBrowserData.SubFolder != "") {
				BrowserElementData.Name = GetLastNameOfPath(ReplayBrowserData.SubFolder);
				BrowserElementData.IsSubfolder = True;
			} else {
				BrowserElementData.Name = TL::StripFormatting(ReplayBrowserData.ReplayInfo.Name);
			}
			BrowserElementData.File = ReplayBrowserData.ReplayInfo.FileName;
		}
		default: {
			if (C_DataType_IsFileList.exists(DataTypeElement)) {
				declare FileBrowserData = GetFileBrowserData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, _DataKey);
				if (FileBrowserData.SubFolder != "") {
					BrowserElementData.IsSubfolder = True;
					BrowserElementData.Name = GetLastNameOfPath(FileBrowserData.SubFolder);
				} else {
					BrowserElementData.Name = GetLastNameOfPath(FileBrowserData.File);
					BrowserElementData.File = FileBrowserData.File;
				}
			}
		}
	}

	IsSubfolder = BrowserElementData.IsSubfolder;
	if (IsSubfolder) MenuSounds::SetCustomSelectSound(_Frame_Element, "BrowserFolderDive");
	else MenuSounds::SetCustomSelectSound(_Frame_Element, MenuSounds::C_Sound_Select);

	declare Text TMNext_BrowserAPI_Tooltip for _Frame_Element;
	declare Text TMNext_BrowserAPI_FileName for _Frame_Element;
	declare Text TMNext_BrowserAPI_FilePath for _Frame_Element;
	TMNext_BrowserAPI_Tooltip = "";
	TMNext_BrowserAPI_FileName = "";
	TMNext_BrowserAPI_FilePath = "";
	if (!BrowserElementData.IsSubfolder) {
		TMNext_BrowserAPI_Tooltip = BrowserElementData.Name;
		TMNext_BrowserAPI_FileName = BrowserElementData.Name;
		TMNext_BrowserAPI_FilePath = BrowserElementData.File;
	}

	switch (TMNext_BrowserAPI_State.Type_CurrentBrowser) {
		case C_BrowserType_List: {
			declare Quad_Check <=> (_Frame_Element.GetFirstChild(C_Id_QuadCheck) as CMlQuad);
			declare Label_Name <=> (_Frame_Element.GetFirstChild(C_Id_LabelName) as CMlLabel);
			declare Quad_BG <=> (_Frame_Element.GetFirstChild(C_Id_QuadBg) as CMlQuad);
			Label_Name.Value = BrowserElementData.Name;
			Label_Name.Visible = True;
			
			if (BrowserElementData.IsSubfolder) {
				Quad_BG.Colorize = CL::Hex6ToRgb(ColorPalette::C_Color_Yellow);
				Quad_Check.Visible = False;
			} else {
				Quad_BG.Colorize = CL::Hex6ToRgb(ColorPalette::C_Color_GreenOne);
				Quad_Check.Visible = (
					TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.ListMultiSelect &&
					C_DataType_CanBeMultiSelect.exists(DataTypeElement)
				);
			}

			Label_Name.TextColor = CL::Hex6ToRgb(ColorPalette::C_Color_GreenFour);
			Label_Name.RelativePosition_V3.X = TMNext_BrowserAPI_State.ManialinkProps.SizeX_ListMargin;
			Label_Name.Size.X = TMNext_BrowserAPI_State.ManialinkProps.Size_BrowserLists.X - TMNext_BrowserAPI_State.ManialinkProps.SizeX_ListMargin - Quad_Check.Size.X;

			if (Quad_Check.Visible) {
				if (
					(TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Replay) && TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedReplays.existskey(BrowserElementData.File)) ||
					(TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Map) && TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedMaps.existskey(BrowserElementData.MapUid))
				) {
					Quad_Check.ChangeImageUrl(Const::C_ImageUrl_Icon_Checkbox_Active_Square);
				} else {
					Quad_Check.ChangeImageUrl(Const::C_ImageUrl_Icon_Checkbox_Inactive_Square);
				}
			}
		}
		default: {
			if (TMNext_BrowserAPI_State.Type_CurrentBrowser == C_BrowserType_PathNavigation || TMNext_BrowserAPI_State.Type_CurrentBrowser == C_BrowserType_PathNavigationSmall) {
				declare Label_Name <=> (_Frame_Element.GetFirstChild(C_Id_LabelName) as CMlLabel);
				declare Quad_Image <=> (_Frame_Element.GetFirstChild(C_Id_QuadImage) as CMlQuad);
				declare Quad_BG <=> (_Frame_Element.GetFirstChild(C_Id_QuadBg) as CMlQuad);
				declare Quad_Focus <=> (_Frame_Element.GetFirstChild(C_Id_QuadFocus) as CMlQuad);
				declare Quad_Check <=> (_Frame_Element.GetFirstChild(C_Id_QuadCheck) as CMlQuad);

				Label_Name.Value = BrowserElementData.Name;
				if (Quad_Check != Null) Quad_Check.Visible = False;
				Label_Name.Visible = True;

				if (BrowserElementData.IsSubfolder) {
					Quad_BG.ChangeImageUrl(Const::C_ImageUrl_ButtonBG_Folder);
					Quad_Focus.ChangeImageUrl(Const::C_ImageUrl_ButtonBG_Folder);
					Quad_BG.Colorize = CL::Hex6ToRgb(ColorPalette::C_Color_Yellow);
					Label_Name.TextColor = CL::Hex6ToRgb(ColorPalette::C_Color_GreenFour);
				}	else {
					Quad_BG.ChangeImageUrl(Const::C_ImageUrl_ButtonBG_File);
					Quad_Focus.ChangeImageUrl(Const::C_ImageUrl_ButtonBG_File);
					Quad_BG.Colorize = CL::Hex6ToRgb(ColorPalette::C_Color_GreenOne);
					Label_Name.TextColor = CL::Hex6ToRgb(ColorPalette::C_Color_GreenFour);
				}
				switch (DataTypeElement) {
					case C_DataType_Image: {
						Label_Name.Visible = BrowserElementData.IsSubfolder;
						Quad_Image.Visible = !BrowserElementData.IsSubfolder;
						if (!BrowserElementData.IsSubfolder) {
							Quad_Image.ChangeImageUrl(C_BasePath^C_BasePath_Media^BrowserElementData.File);
						}
					}
					default: {
						Quad_Image.Visible = False;

						if (Quad_Check != Null && C_DataType_CanBeMultiSelect.exists(DataTypeElement)) {
							Quad_Check.Visible = (
								!BrowserElementData.IsSubfolder &&
								TMNext_BrowserAPI_State.Type_CurrentBrowser == C_BrowserType_PathNavigationSmall &&
								TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.ListMultiSelect
							);
							if (Quad_Check.Visible) {
								if (
									(TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Replay) && TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedReplays.existskey(BrowserElementData.File)) ||
									(TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Map) && TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedMaps.existskey(BrowserElementData.MapUid))
								) {
									Quad_Check.ChangeImageUrl(Const::C_ImageUrl_Icon_Checkbox_Active_Square);
								} else {
									Quad_Check.ChangeImageUrl(Const::C_ImageUrl_Icon_Checkbox_Inactive_Square);
								}
							}
						}
					}
				}
			}
		}
	}
}

Void LeaveBrowser(CMlScript _This) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	DestroyScene(_This);
	TMNext_BrowserAPI_State.RequestsManager.WaitingForMonthlyCampaigns = False;
	TMNext_BrowserAPI_State.RequestsManager.WaitingForQuarterlyCampaigns = False;
	TMNext_BrowserAPI_State.RequestsManager.WaitingForClubCampaigns = False;
	TMNext_BrowserAPI_State.RequestsManager.WaitingForClubs = False;
	TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedCampaign = False;
	TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedMonthlyCampaign = False;
	TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMaps = False;
	TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMapSupression = False;
	TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = -1;

	LoadingSpinner::StopAnimation(_This, TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameLoadingSpinner));

	if (!TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser)) return;
	TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign = CampaignStruct::LibCampaignStruct_K_Campaign {
		Id = CampaignStruct::C_Campaign_NullId
	};
	TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenMonthlyCampaign = CampaignStruct::LibCampaignStruct_K_MonthlyCampaign {
		Id = CampaignStruct::C_Campaign_NullId
	};
	TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenClubId = ClubStruct::C_ClubNullId;

	TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
		Type = C_EventType_Cancel
	});
}

Void Cancel(CMlScript _This, Boolean _LeaveBrowser) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser)) return;

	declare CurrentBrowser = TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser];
	if (CurrentBrowser.CurrentPath != C_Path_Base) {
		if (
			(!CurrentBrowser.DataTypes.containsoneof(C_DataType_HasCloudFolder) || CurrentBrowser.Settings.DisableCloudFolder) &&
			(CurrentBrowser.CurrentPath == C_Path_Null || CurrentBrowser.CurrentPath == "" || CurrentBrowser.BasePath == CurrentBrowser.CurrentPath)
		) {
			if (_LeaveBrowser) LeaveBrowser(_This);
		} else {
			SetParentPathToCurrentPath(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
		}
	} else {
		if (_LeaveBrowser) LeaveBrowser(_This);
	}
}

Void Private_UpdateListMultiSelect(CMlScript _This) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	declare CMlFrame[Integer] ElementsVisible = Scroll::GetElementsVisible(TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll);
	foreach (Key => Frame_Element in ElementsVisible) {
		if (Frame_Element.Visible) {
			UpdateBrowserElement(_This, Frame_Element, Key);
		}
	}
	declare Button_ListMultiSelectValid <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_ButtonListMultiSelectValid) as CMlFrame);
	Navigation::Lock(Button_ListMultiSelectValid, (
		TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedReplays.count <= 0 &&
		TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedMaps.count <= 0
	));
	UpdateMultiSelectButtons(_This, Button_ListMultiSelectValid);
}

Void Select(CMlScript _This, CMlControl _Control) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (_Control == Null) return;

	switch (_Control.ControlId){
		case C_Id_FrameOptionsExplorer: {
			OpenExplorer(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
		}
		case C_Id_FrameOptionsRefresh: {
			RefreshBrowserData(_This);
		}
		case C_Id_FrameOptionsOrder: {
			declare IsSortedFromAscendingOrder = SwitchSortOrder(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
			declare Quad_Image <=> ((_Control as CMlFrame).GetFirstChild(C_Id_QuadImage) as CMlQuad);
			if (Quad_Image == Null) return;
			if (IsSortedFromAscendingOrder) {
				Quad_Image.RelativeRotation = 180.;
			} else {
				Quad_Image.RelativeRotation = 0.;
			}
		}
		case C_Id_FrameOptionsCriterion: {
			declare IsSortedByNameElseByDate = SwitchSortCriterion(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
			declare Quad_Image <=> ((_Control as CMlFrame).GetFirstChild(C_Id_QuadImage) as CMlQuad);
			if (Quad_Image == Null) return;
			if (IsSortedByNameElseByDate) {
				Quad_Image.ImageUrl = Const::C_ImageUrl_Icon_Criterion_Alpha;
			} else {
				Quad_Image.ImageUrl = Const::C_ImageUrl_Icon_Criterion_Date;
			}
		}
		case C_Id_FrameOptionsFlatten: {
			declare IsFlatten = SwitchFlatten(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
			declare Quad_Image <=> ((_Control as CMlFrame).GetFirstChild(C_Id_QuadImage) as CMlQuad);
			if (Quad_Image == Null) return;
			if (IsFlatten) {
				Quad_Image.ImageUrl = Const::C_ImageUrl_Icon_Flatten_Files;
			} else {
				Quad_Image.ImageUrl = Const::C_ImageUrl_Icon_Flatten_Arbo;
			}
		}
		case C_Id_FrameParentPath: {
			Cancel(_This, False);
		}
		case C_Id_ButtonCreateMap: {
			TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
				Type = C_EventType_CreateMap
			});
		}
		case C_Id_ButtonSelectMap: {
			TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
				Type = C_EventType_ConfirmSelection,
				DataType = C_DataType_Map,
				Data = TMNext_BrowserAPI_State.PreSelectedMapBrowserData.MapInfo.tojson()
			});
			ResetBrowserCampaignsAndClubId(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
		}
		case C_Id_ButtonEditorSettings: {
			TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
				Type = C_EventType_EditorSettings,
				DataType = C_DataType_Map,
				Data = TMNext_BrowserAPI_State.PreSelectedMapBrowserData.MapInfo.tojson()
			});
			ResetBrowserCampaignsAndClubId(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
		}
		case C_Id_ButtonListMultiSelectValid: {
			if (TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser)) {
				if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Replay)) {
					declare K_ReplayInfo[] ReplayInfoList;
					foreach (ReplayInfo in TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedReplays) {
						ReplayInfoList.add(ReplayInfo);
					}
					TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
						Type = C_EventType_MultiSelect,
						DataType = C_DataType_Replay,
						Data = ReplayInfoList.tojson()
					});
				}
				if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Map)) {
					declare CampaignStruct::LibCampaignStruct_K_Map[] MapList;
					foreach (Map in TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedMaps) {
						MapList.add(Map);
					}
					TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
						Type = C_EventType_MultiSelect,
						DataType = C_DataType_Map,
						Data = MapList.tojson()
					});
				}
			}
		}
		case C_Id_ButtonListMultiSelectSelectAll: {
			if (TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser)) {
				if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Replay)) {
					foreach (ReplayBrowserData in TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Replays) {
						if (ReplayBrowserData.SubFolder == "" && ReplayBrowserData.ReplayInfo.FileName != "") {
							TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedReplays[ReplayBrowserData.ReplayInfo.FileName] = ReplayBrowserData.ReplayInfo;
						}
					}
				}
				if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Map)) {
					if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign.Id != CampaignStruct::C_Campaign_NullId) {
						foreach (Category in TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign.Categories) {
							foreach (Map in Category.Playlist) {
								if (Map.Uid != "") {
									TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedMaps[Map.Uid] = Map;
								}
							}
						}
					} else if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenMonthlyCampaign.Id != CampaignStruct::C_Campaign_NullId) {
						foreach (DailyMap in TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenMonthlyCampaign.DailyMaps) {
							if (DailyMap.Map.Uid != "") {
								TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedMaps[DailyMap.Map.Uid] = DailyMap.Map;
							}
						}
					} else if (		
						TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.ShowFavoriteUserMaps &&
						TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].CurrentPath == C_Path_Favorites
					) {
						foreach (MapBrowserData in TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].FavoriteMaps) {
							if (MapBrowserData.SubFolder == "" && MapBrowserData.MapInfo.Uid != "") {
								TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedMaps[MapBrowserData.MapInfo.Uid] = MapBrowserData.MapInfo;
							}
						}
					} else {
						foreach (MapBrowserData in TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Maps) {
							if (MapBrowserData.SubFolder == "" && MapBrowserData.MapInfo.Uid != "") {
								TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedMaps[MapBrowserData.MapInfo.Uid] = MapBrowserData.MapInfo;
							}
						}
					}
				}
				Private_UpdateListMultiSelect(_This);
			}
		}
		case C_Id_ButtonListMultiSelectUnselectAll: {
			if (TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser)) {
				if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Replay)) {
					foreach (ReplayBrowserData in TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Replays) {
						if (ReplayBrowserData.SubFolder == "" && ReplayBrowserData.ReplayInfo.FileName != "") {
							TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedReplays.removekey(ReplayBrowserData.ReplayInfo.FileName);
						}
					}
				}
				if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Map)) {
					if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign.Id != CampaignStruct::C_Campaign_NullId) {
						foreach (Category in TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign.Categories) {
							foreach (Map in Category.Playlist) {
								if (Map.Uid != "") {
									TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedMaps.removekey(Map.Uid);
								}
							}
						}
					} else if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenMonthlyCampaign.Id != CampaignStruct::C_Campaign_NullId) {
						foreach (DailyMap in TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenMonthlyCampaign.DailyMaps) {
							if (DailyMap.Map.Uid != "") {
								TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedMaps.removekey(DailyMap.Map.Uid);
							}
						}
					} else if (		
						TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.ShowFavoriteUserMaps &&
						TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].CurrentPath == C_Path_Favorites
					) {
						foreach (MapBrowserData in TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].FavoriteMaps) {
							if (MapBrowserData.SubFolder == "" && MapBrowserData.MapInfo.Uid != "") {
								TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedMaps.removekey(MapBrowserData.MapInfo.Uid);
							}
						} 
					} else {
						foreach (MapBrowserData in TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Maps) {
							if (MapBrowserData.SubFolder == "" && MapBrowserData.MapInfo.Uid != "") {
								TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].SelectedMaps.removekey(MapBrowserData.MapInfo.Uid);
							}
						}
					}
				}
				Private_UpdateListMultiSelect(_This);
			}
		}
	}
}

Void InitPathsTree(CMlScript _This) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	TMNext_BrowserAPI_State.Paths_Tree = C_Paths_Tree;
	declare Integer NumberOfOfficialsCategories = 0;
	foreach (CampaignType => IsLive in TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent) {
		switch (CampaignType) {
			case CampaignStruct::C_CampaignType_Quarterly: {
				if (IsLive) {
					NumberOfOfficialsCategories += 1;
				} else {
					foreach (ParentPath => PathList in TMNext_BrowserAPI_State.Paths_Tree) {
						if (PathList.exists(C_Path_Quarterly)) TMNext_BrowserAPI_State.Paths_Tree[ParentPath].remove(C_Path_Quarterly);
					}
				}
			}
			case CampaignStruct::C_CampaignType_Monthly: {
				if (IsLive) {
					NumberOfOfficialsCategories += 1;
				} else {
					foreach (ParentPath => PathList in TMNext_BrowserAPI_State.Paths_Tree) {
						if (PathList.exists(C_Path_Monthly)) TMNext_BrowserAPI_State.Paths_Tree[ParentPath].remove(C_Path_Monthly);
					}
				}
			}
			case CampaignStruct::C_CampaignType_Club: {
				if (!IsLive) {
					foreach (ParentPath => PathList in TMNext_BrowserAPI_State.Paths_Tree) {
						if (PathList.exists(C_Path_Clubs)) TMNext_BrowserAPI_State.Paths_Tree[ParentPath].remove(C_Path_Clubs);
					}
				}
			}
		}
	}
	if (NumberOfOfficialsCategories == 0) {
		foreach (ParentPath => PathList in TMNext_BrowserAPI_State.Paths_Tree) {
			if (PathList.exists(C_Path_Officials)) TMNext_BrowserAPI_State.Paths_Tree[ParentPath].remove(C_Path_Officials);
		}
	}
}

Void ToggleReplaySelection(CMlScript _This, Integer _BrowserType, K_ReplayInfo _ReplayInfo, CMlFrame _Button_ListMultiSelectValid) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;

	if (TMNext_BrowserAPI_State.Browsers[_BrowserType].SelectedReplays.existskey(_ReplayInfo.FileName)) {
		TMNext_BrowserAPI_State.Browsers[_BrowserType].SelectedReplays.removekey(_ReplayInfo.FileName);
	} else {
		TMNext_BrowserAPI_State.Browsers[_BrowserType].SelectedReplays[_ReplayInfo.FileName] = _ReplayInfo;
	}

	Private_UpdateListMultiSelect(_This);
}

Void ToggleMapSelection(CMlScript _This, Integer _BrowserType, CampaignStruct::LibCampaignStruct_K_Map _MapInfo, CMlFrame _Button_ListMultiSelectValid) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (!TMNext_BrowserAPI_State.Browsers.existskey(_BrowserType)) return;

	if (TMNext_BrowserAPI_State.Browsers[_BrowserType].SelectedMaps.existskey(_MapInfo.Uid)) {
		TMNext_BrowserAPI_State.Browsers[_BrowserType].SelectedMaps.removekey(_MapInfo.Uid);
	} else {
		TMNext_BrowserAPI_State.Browsers[_BrowserType].SelectedMaps[_MapInfo.Uid] = _MapInfo;
	}

	Private_UpdateListMultiSelect(_This);
}

Void RemoveMapFromFavorites(CMlScript _This, K_MapBrowserData _Map, CMlFrame _Frame_MultiChoice) {
	PopUpMultiChoice::SetDescription(_This, _Frame_MultiChoice, [
		PopUpMultiChoice::CreateDescriptionPart(TL::Compose(C_RemoveFavoriteMapPopUp_Description, "$<"^Tools::FormatValue(_Map.MapInfo.Name)^"$>"), <130., 30.>, 4., FontManager::C_GameFontRegular, "$t$i", <1., 1., 1.>, False)
	]);
	PopUpMultiChoice::Open(_This, _Frame_MultiChoice);
}

K_Event[] GetPendingEvents(CMlScript _This) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	return TMNext_BrowserAPI_State.PendingEvents;
}

Void MainInit(CMlScript _This) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	TMNext_BrowserAPI_State = C_State_Null;
	
	TMNext_BrowserAPI_State.Controls.Frame_Global <=> (_This.Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);
	TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent = [
		CampaignStruct::C_CampaignType_Quarterly => False,
		CampaignStruct::C_CampaignType_Monthly => False,
		CampaignStruct::C_CampaignType_Club => False
	];
	InitPathsTree(_This);
	TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = -1;
}

Void MainStart(CMlScript _This) {
	declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
	if (TMNext_BrowserAPI_State.Controls.Frame_Global != Null) {
		TMNext_BrowserAPI_State.Controls.Frame_SelectedMap <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameSelectedMap) as CMlFrame);
		declare CMlFrame Frame_ListButtons <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameListButtons) as CMlFrame);
		TMNext_BrowserAPI_State.Controls.Button_ListMultiSelectValid <=> (Frame_ListButtons.GetFirstChild(C_Id_ButtonListMultiSelectValid) as CMlFrame);
		TMNext_BrowserAPI_State.Controls.Button_ParentPath <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameParentPath) as CMlFrame);
		TMNext_BrowserAPI_State.Controls.Frame_LoadingSpinner <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameLoadingSpinner) as CMlFrame);
		TMNext_BrowserAPI_State.Controls.Frame_MultiChoice = (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameMultichoice) as CMlFrame);

		TMNext_BrowserAPI_State.ManialinkProps.ElementsPerPage = TL::ToInteger(TMNext_BrowserAPI_State.Controls.Frame_Global.DataAttributeGet("elements-per-page"));
		TMNext_BrowserAPI_State.ManialinkProps.SmallMapsPerPage = TL::ToInteger(TMNext_BrowserAPI_State.Controls.Frame_Global.DataAttributeGet("small-maps-per-page"));
		TMNext_BrowserAPI_State.ManialinkProps.ListsPerPage = TL::ToInteger(TMNext_BrowserAPI_State.Controls.Frame_Global.DataAttributeGet("lists-per-page"));
		TMNext_BrowserAPI_State.ManialinkProps.SizeX_ListMargin = TL::ToReal(TMNext_BrowserAPI_State.Controls.Frame_Global.DataAttributeGet("size-x-list-margin"));
		TMNext_BrowserAPI_State.ManialinkProps.Size_BrowserLists = Tools::TextToVec2(TMNext_BrowserAPI_State.Controls.Frame_Global.DataAttributeGet("size-browser-lists"));
	}
}

Void MainLoop(CMlScript _This) {
	if (_This.PageIsVisible) {
		declare K_State TMNext_BrowserAPI_State for _This.Page = C_State_Null;
		TMNext_BrowserAPI_State.PendingEvents = [];
		foreach	(BrowserType => Browser in TMNext_BrowserAPI_State.Browsers) {
			if (Browser.DataTypes.exists(C_DataType_Map)) {
				declare CTaskResult_MapList TaskResultList;
				if (Browser.TaskId_GetMaps != NullId) {
					if (DataFileMgr.TaskResults.existskey(Browser.TaskId_GetMaps)) {
						TaskResultList = (DataFileMgr.TaskResults[Browser.TaskId_GetMaps] as CTaskResult_MapList);
					} else {
						TMNext_BrowserAPI_State.Browsers[BrowserType].MapTaskListState = C_TaskListState_HasFailed;
						TMNext_BrowserAPI_State.Browsers[BrowserType].TaskId_GetMaps = NullId;
					}
				}
				if (TaskResultList != Null) {
					if (TaskResultList.HasSucceeded) {
						declare K_MapBrowserData[] NewMapBrowserData;
						foreach (SubFolder in TaskResultList.SubFolders) {
							NewMapBrowserData.add(K_MapBrowserData{
								SubFolder = SubFolder,
								Path = TaskResultList.Path,
								ParentPath = TaskResultList.ParentPath
							});
						}
						foreach (MapInfo in TaskResultList.MapInfos) {
							// @TODO check if the folders are empty and do not display them ?
							// It would mean checking every folder... Maybe ask Falguière a boolean to filter the maps ?
							if (FilterMap(Browser.Settings, MapInfo.AuthorLogin, MapInfo.IsPlayable, MapInfo.CollectionName, MapInfo.MapType)) {
								NewMapBrowserData.add(K_MapBrowserData{
									MapInfo = CampaignStruct::LibCampaignStruct_K_Map {
										Uid = MapInfo.MapUid,
										Name = MapInfo.Name,
										Type = MapInfo.MapType,
										Style = MapInfo.MapStyle,
										AuthorLogin = MapInfo.AuthorLogin,
										AuthorDisplayName = MapInfo.AuthorNickName,
										AuthorTime = MapInfo.TMObjective_AuthorTime,
										GoldTime = MapInfo.TMObjective_GoldTime,
										SilverTime = MapInfo.TMObjective_SilverTime,
										BronzeTime = MapInfo.TMObjective_BronzeTime,
										ThumbnailUrl = "file://Thumbnails/MapUid/"^MapInfo.MapUid,
										IsPlayable = MapInfo.IsPlayable,
										CollectionName = MapInfo.CollectionName,
										LocalFileName = MapInfo.FileName,
										CreatedWithSimpleEditor = MapInfo.CreatedWithSimpleEditor,
										CreatedWithGamepadEditor = MapInfo.CreatedWithGamepadEditor
									},
									Path = TaskResultList.Path,
									ParentPath = TaskResultList.ParentPath
								});
							}
						}
						TMNext_BrowserAPI_State.Browsers[BrowserType].Maps = [];
						UpdateLocalMapsData(_This, BrowserType, NewMapBrowserData);
						TMNext_BrowserAPI_State.Browsers[BrowserType].MapTaskListState = C_TaskListState_HasSucceeded;
					} else if (TaskResultList.HasFailed) {
						TMNext_BrowserAPI_State.Browsers[BrowserType].MapTaskListState = C_TaskListState_HasFailed;
					} else if (TaskResultList.IsCanceled) {
						TMNext_BrowserAPI_State.Browsers[BrowserType].MapTaskListState = C_TaskListState_IsCanceled;
					}
					if (!TaskResultList.IsProcessing) {
						DataFileMgr.TaskResult_Release(TaskResultList.Id);
						TMNext_BrowserAPI_State.Browsers[BrowserType].TaskId_GetMaps = NullId;
					} else {
						TMNext_BrowserAPI_State.Browsers[BrowserType].MapTaskListState = C_TaskListState_IsProcessing;
					}
				}
			}
			if (Browser.DataTypes.exists(C_DataType_Replay)) {
				declare CTaskResult_ReplayList TaskResultList;
				if (Browser.TaskId_GetReplays != NullId) {
					if (DataFileMgr.TaskResults.existskey(Browser.TaskId_GetReplays)) {
						TaskResultList = (DataFileMgr.TaskResults[Browser.TaskId_GetReplays] as CTaskResult_ReplayList);
					} else {
						TMNext_BrowserAPI_State.Browsers[BrowserType].ReplayTaskListState = C_TaskListState_HasFailed;
						TMNext_BrowserAPI_State.Browsers[BrowserType].TaskId_GetReplays = NullId;
					}
				}
				if (TaskResultList != Null) {
					if (TaskResultList.HasSucceeded) {
						declare K_ReplayBrowserData[] NewReplays;
						foreach (SubFolder in TaskResultList.SubFolders) {
							NewReplays.add(K_ReplayBrowserData {
								SubFolder = SubFolder,
								ReplayInfo = K_ReplayInfo {}
							});
						}
						foreach (ReplayInfo in TaskResultList.ReplayInfos) {
							NewReplays.add(K_ReplayBrowserData {
								SubFolder = "",
								ReplayInfo = K_ReplayInfo {
									Id = ReplayInfo.MapUid^"\\"^ReplayInfo.FileName,
									MapUid = ReplayInfo.MapUid,
									Name = ReplayInfo.Name,
									Path = ReplayInfo.Path,
									FileName = ReplayInfo.FileName
								}
							});
						}
	
						TMNext_BrowserAPI_State.Browsers[BrowserType].Replays = [];
						UpdateLocalReplaysData(_This, BrowserType, NewReplays);
						TMNext_BrowserAPI_State.Browsers[BrowserType].ReplayTaskListState = C_TaskListState_HasSucceeded;
					} else if (TaskResultList.HasFailed) {
						TMNext_BrowserAPI_State.Browsers[BrowserType].ReplayTaskListState = C_TaskListState_HasFailed;
					} else if (TaskResultList.IsCanceled) {
						TMNext_BrowserAPI_State.Browsers[BrowserType].ReplayTaskListState = C_TaskListState_IsCanceled;
					}
					if (!TaskResultList.IsProcessing) {
						DataFileMgr.TaskResult_Release(TaskResultList.Id);
						TMNext_BrowserAPI_State.Browsers[BrowserType].TaskId_GetReplays = NullId;
					} else {
						TMNext_BrowserAPI_State.Browsers[BrowserType].ReplayTaskListState = C_TaskListState_IsProcessing;
					}
				}
			}
			foreach (DataType => File in Browser.Files) {
				if (!Browser.DataTypes.exists(DataType)) continue;
				declare CTaskResult_FileList TaskResultList;
				if (File.TaskId_GetFiles != NullId) {
					if (DataFileMgr.TaskResults.existskey(File.TaskId_GetFiles)) {
						TaskResultList = (DataFileMgr.TaskResults[File.TaskId_GetFiles] as CTaskResult_FileList);
					} else {
						TMNext_BrowserAPI_State.Browsers[BrowserType].Files[DataType].TaskListState = C_TaskListState_HasFailed;
						TMNext_BrowserAPI_State.Browsers[BrowserType].Files[DataType].TaskId_GetFiles = NullId;
					}
				}
				if (TaskResultList != Null) {
					if (TaskResultList.HasSucceeded) {
						declare K_FileBrowserData[] NewFileBrowserData;
						foreach (SubFolder in TaskResultList.SubFolders) {
							NewFileBrowserData.add(K_FileBrowserData{
								SubFolder = SubFolder,
								Path = TaskResultList.Path,
								ParentPath = TaskResultList.ParentPath
							});
						}
						foreach (File in TaskResultList.Files) {
							declare Boolean AddFile = True;
							if (Browser.Settings.FilterByExtension.count > 0 && File != "") {
								declare Text[] TmpSplit = TL::Split(".", TL::ToLowerCase(File));
								declare Text Extension = TmpSplit[TmpSplit.count-1];
								AddFile = Extension != "" && Browser.Settings.FilterByExtension.exists(Extension);
							}
							if (AddFile) {
								NewFileBrowserData.add(K_FileBrowserData{
									File = File,
									Path = TaskResultList.Path,
									ParentPath = TaskResultList.ParentPath
								});
							}
						}
						TMNext_BrowserAPI_State.Browsers[BrowserType].Files[DataType].Datas = [];
						SetLocalData(_This, BrowserType, DataType, NewFileBrowserData);
						TMNext_BrowserAPI_State.Browsers[BrowserType].Files[DataType].TaskListState = C_TaskListState_HasSucceeded;
					} else if (TaskResultList.HasFailed) {
						TMNext_BrowserAPI_State.Browsers[BrowserType].Files[DataType].TaskListState = C_TaskListState_HasFailed;
					} else if (TaskResultList.IsCanceled) {
						TMNext_BrowserAPI_State.Browsers[BrowserType].Files[DataType].TaskListState = C_TaskListState_IsCanceled;
					}
					if (!TaskResultList.IsProcessing) {
						DataFileMgr.TaskResult_Release(TaskResultList.Id);
						TMNext_BrowserAPI_State.Browsers[BrowserType].Files[DataType].TaskId_GetFiles = NullId;
					} else {
						TMNext_BrowserAPI_State.Browsers[BrowserType].Files[DataType].TaskListState = C_TaskListState_IsProcessing;
					}
				}
			}
		}
	
		if (
			TMNext_BrowserAPI_State.RequestsManager.WaitingForMonthlyCampaigns ||
			TMNext_BrowserAPI_State.RequestsManager.WaitingForQuarterlyCampaigns ||
			TMNext_BrowserAPI_State.RequestsManager.WaitingForClubCampaigns ||
			TMNext_BrowserAPI_State.RequestsManager.WaitingForClubs ||
			TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedCampaign ||
			TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedMonthlyCampaign ||
			TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMaps ||
			TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMapSupression
		) {
			foreach (Event in _This.PendingEvents) {
				switch (Event.Type) {
					case CMlScriptEvent::Type::PluginCustomEvent: {
						if (
							(
								TMNext_BrowserAPI_State.RequestsManager.WaitingForMonthlyCampaigns ||
								TMNext_BrowserAPI_State.RequestsManager.WaitingForQuarterlyCampaigns
							) && (
								Event.CustomEventType == CampaignStore::C_Event_CampaignListUpdated ||
								Event.CustomEventType == CampaignStore::C_Event_CampaignListEmpty ||
								Event.CustomEventType == CampaignStore::C_Event_CampaignListUpdateError
							)
						) {
							if (Event.CustomEventData.count > 0) {
								// @TODO When campaigntypes are removed we need to differientiate with the new Event names and place PathType as key of Boolean Array 
								declare Integer CampaignType = TL::ToInteger(Event.CustomEventData[0]);
								foreach	(BrowserType => Browser in TMNext_BrowserAPI_State.Browsers) {
									TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent[CampaignType] = Event.CustomEventType == CampaignStore::C_Event_CampaignListUpdated;
								}
								if (CampaignType == CampaignStruct::C_CampaignType_Quarterly) {
									TMNext_BrowserAPI_State.RequestsManager.WaitingForQuarterlyCampaigns = False;
								} else if (CampaignType == CampaignStruct::C_CampaignType_Monthly) {
									TMNext_BrowserAPI_State.RequestsManager.WaitingForMonthlyCampaigns = False;
								}
							}
						} else if (TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMaps && Event.CustomEventType == MapStore::C_Event_FavoriteMapsUpdated) {
							TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMaps = False;
							TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].FavoriteMaps = GetFavoriteMapsData();
						}  else if (TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMapSupression && Event.CustomEventType == MapStore::C_Event_CurrentMapUpdated) {
							TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMapSupression = False;
							if (MapStore::GetCurrentMap().Status == MapStore::C_CurrentMapStatus_Error && MapStore::GetCurrentMap().ErrorCode == MapStore::C_ErrorCode_FailedRemoveFavorites) {
								ShowError(_This, C_RemoveFavoriteMap_Error);
							}
							TMNext_BrowserAPI_State.FavoriteMapToRemove = K_MapBrowserData {};
							UpdateMapPreselection(_This, K_MapBrowserData {}, TMNext_BrowserAPI_State.Controls.Frame_SelectedMap);
							TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMaps = True;
							TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
						} else if (
							Event.CustomEventType == CampaignStore::C_Event_ClubsCampaignListUpdated ||
							Event.CustomEventType == CampaignStore::C_Event_ClubsCampaignListError
						) {
							TMNext_BrowserAPI_State.RequestsManager.WaitingForClubCampaigns = False;
						} else if (
							Event.CustomEventType == ClubStore::C_Event_BrowserClubsUpdated ||
							Event.CustomEventType == ClubStore::C_Event_BrowserClubsError
						) {
							foreach	(BrowserType => Browser in TMNext_BrowserAPI_State.Browsers) {
								TMNext_BrowserAPI_State.RequestsManager.DisplayLiveContent[CampaignStruct::C_CampaignType_Club] = Event.CustomEventType == ClubStore::C_Event_BrowserClubsUpdated;
							}
							TMNext_BrowserAPI_State.RequestsManager.WaitingForClubs = False;
						} else if (TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedCampaign &&
							(
								Event.CustomEventType == CampaignStore::C_Event_CampaignLoadComplete ||
								Event.CustomEventType == CampaignStore::C_Event_CampaignListUpdateError
							)
						) {
							TMNext_BrowserAPI_State.RequestsManager.CampaignIsLoaded = Event.CustomEventType == CampaignStore::C_Event_CampaignLoadComplete;
							TMNext_BrowserAPI_State.RequestsManager.CampaignLoadFail = !TMNext_BrowserAPI_State.RequestsManager.CampaignIsLoaded;
						} else if (TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedMonthlyCampaign &&
							(
								Event.CustomEventType == CampaignStore::C_Event_MonthlyCampaignLoadComplete ||
								Event.CustomEventType == CampaignStore::C_Event_CampaignListUpdateError
							)
						) {
							TMNext_BrowserAPI_State.RequestsManager.MonthlyCampaignIsLoaded = Event.CustomEventType == CampaignStore::C_Event_MonthlyCampaignLoadComplete;
							TMNext_BrowserAPI_State.RequestsManager.MonthlyCampaignLoadFail = !TMNext_BrowserAPI_State.RequestsManager.MonthlyCampaignIsLoaded;
						}
					}
				}
			}
	
			if (TMNext_BrowserAPI_State.RequestsManager.CampaignIsLoaded) {
				TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedCampaign = False;
			}
			if (TMNext_BrowserAPI_State.RequestsManager.MonthlyCampaignIsLoaded) {
				TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedMonthlyCampaign = False;
			}
	
			if (TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime > 0 && Now >= TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime) {
				declare ElementsPerPage = GetElementsPerPage(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
				declare Integer Length = ElementsPerPage * 3;
	
				LoadingSpinner::StartAnimation(_This, TMNext_BrowserAPI_State.Controls.Frame_LoadingSpinner);
				UpdateBrowserContent(_This, TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, 0);
				TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll.Visible = False;
	
				if (TMNext_BrowserAPI_State.RequestsManager.WaitingForMonthlyCampaigns) {
					CampaignStore::Action_LoadMonthlyCampaignsPage(_This, TMNext_BrowserAPI_State.RequestsManager.PageMonthly, ElementsPerPage);
				}
				if (TMNext_BrowserAPI_State.RequestsManager.WaitingForQuarterlyCampaigns) {
					declare Integer Offset = ML::Max(0, (TMNext_BrowserAPI_State.RequestsManager.PageQuarterly - 2)) * ElementsPerPage;
					CampaignStore::Action_LoadCampaigns(_This, CampaignStruct::C_CampaignType_Quarterly, Offset, Length);
				}
				if (TMNext_BrowserAPI_State.RequestsManager.WaitingForClubCampaigns) {
					declare Integer Offset = ML::Max(0, (TMNext_BrowserAPI_State.RequestsManager.PageClubCampaigns - 2)) * ElementsPerPage;
					CampaignStore::Action_LoadClubsCampaigns(_This, TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenClubId, Offset, Length);
				}
				if (TMNext_BrowserAPI_State.RequestsManager.WaitingForClubs) {
					declare Integer Offset = ML::Max(0, (TMNext_BrowserAPI_State.RequestsManager.PageClubs - 2)) * ElementsPerPage;
					ClubStore::Action_LoadClubsBrowser(_This, Offset, Length);
				}
				if (TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedCampaign && !TMNext_BrowserAPI_State.RequestsManager.CampaignIsLoaded) {
					CampaignStore::Action_LoadCampaign(_This, TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign.Id, TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign.Club.Id);
				}
				if (TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedMonthlyCampaign && !TMNext_BrowserAPI_State.RequestsManager.MonthlyCampaignIsLoaded) {
					CampaignStore::Action_LoadMonthlyCampaign(_This, TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenMonthlyCampaign.Id);
				}
				if (TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMaps) {
					// @TODO if LIVE API updated on mapType filter, adapt code here (see /trackmania-next/tmnext/-/issues/3735)
					declare Text MapTypeFilter = "";
					if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.FilterByMapType.count > 0) MapTypeFilter = TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.FilterByMapType[0];
					declare Integer Offset = ML::Max(0, (TMNext_BrowserAPI_State.RequestsManager.PageFavorites - 2)) * ElementsPerPage;
					MapStore::Action_LoadFavoriteMapsPage(
						_This, 
						Offset,
						Length,
						TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].IsSortingByNameElseByDate,
						TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].IsSortingFromAscendingOrder,
						MapTypeFilter,
						TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.ShowOnlyPlayableMaps,
						TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.ShowOnlyUserMaps
					);
				}
				TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = -1;
			}
	
			if (
				!TMNext_BrowserAPI_State.RequestsManager.WaitingForMonthlyCampaigns &&
				!TMNext_BrowserAPI_State.RequestsManager.WaitingForQuarterlyCampaigns &&
				!TMNext_BrowserAPI_State.RequestsManager.WaitingForClubCampaigns &&
				!TMNext_BrowserAPI_State.RequestsManager.WaitingForClubs &&
				!TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedCampaign &&
				!TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedMonthlyCampaign &&
				!TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMaps
			) {
				LoadingSpinner::StopAnimation(_This, TMNext_BrowserAPI_State.Controls.Frame_LoadingSpinner);
				InitPathsTree(_This);
				if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign.Id != CampaignStruct::C_Campaign_NullId) {
					if (TMNext_BrowserAPI_State.RequestsManager.CampaignLoadFail) {
						TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign = CampaignStruct::LibCampaignStruct_K_Campaign {
							Id = CampaignStruct::C_Campaign_NullId
						};
					} else {
						if (TMNext_BrowserAPI_State.RequestsManager.GetCampaign) {
							declare Campaign = FilterCampaignMaps(
								TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings,
								CampaignStore::GetCampaignFromId(TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign.Id)
							);
							TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
								Type = C_EventType_Select,
								DataType = C_DataType_Campaign,
								Data = Campaign.tojson()
							});
							ResetBrowserCampaignsAndClubId(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
							TMNext_BrowserAPI_State.RequestsManager.GetCampaign = False;
						} else {
							TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign = FilterCampaignMaps(
								TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings,
								CampaignStore::GetCampaignFromId(TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign.Id)
							);
						}
					}
				}
				if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenMonthlyCampaign.Id != CampaignStruct::C_Campaign_NullId) {
					if (TMNext_BrowserAPI_State.RequestsManager.MonthlyCampaignLoadFail) {
						TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenMonthlyCampaign = CampaignStruct::LibCampaignStruct_K_MonthlyCampaign {
							Id = CampaignStruct::C_Campaign_NullId
						};
					} else {
						declare MonthlyCampaign = FilterCampaignMaps(
							TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings,
							CampaignStore::GetMonthlyCampaignFromId(TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenMonthlyCampaign.Id)
						);
						declare TmpDailyMaps = MonthlyCampaign.DailyMaps;
						foreach (DayIndex => DailyMap in TmpDailyMaps) {
							if (DailyMap.Map.Uid == "" || (DailyMap.Map.DownloadUrl == "" && DailyMap.Map.LocalFileName == "") || DailyMap.RelativeStart > 0) {
								MonthlyCampaign.DailyMaps.removekey(DayIndex);
							}
						}
						if (TMNext_BrowserAPI_State.RequestsManager.GetCampaign) {
							TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
								Type = C_EventType_Select,
								DataType = C_DataType_MonthlyCampaign,
								Data = MonthlyCampaign.tojson()
							});
							ResetBrowserCampaignsAndClubId(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
							TMNext_BrowserAPI_State.RequestsManager.GetCampaign = False;
						} else {
							TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenMonthlyCampaign = MonthlyCampaign; //< Be sure that `MonthlyCampaign` maps are filtered at this point
						}
					}
				}
				UpdateBrowserContent(_This, TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, GetBrowserDataCount(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser));
			}
		}
	
		foreach (Event in PopUpBackground::GetPendingEvents(_This)) {
			if (Event.Type == PopUpBackground::C_Event_LeavePopUp && Event.PopUpName == C_Name) {
				LeaveBrowser(_This);
			}
		}
	
		foreach (Event in Navigation::GetPendingEvents(_This)) {
			switch (Event.Type) {
				case Navigation::C_EventType_NavigateInput: {
					if (Navigation::IsEventFromGroup(_This, Event, C_NavGroupName) && IsBrowserFocused(_This) && !IsScrollFocused(_This) && !TMNext_BrowserAPI_State.Controls.Frame_MultiChoice.Visible) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							Select(_This, Event.To);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							Cancel(_This, True);
						} else {
							if (Event.To != Null && Event.From != Null) {
								if (TMNext_BrowserAPI_State.Controls.Frame_FocusHeader != Null && Event.To.HasClass(C_Class_Header) && !Event.From.HasClass(C_Class_Header)) {
									Focus(_This, TMNext_BrowserAPI_State.Controls.Frame_FocusHeader);
								} else if (TMNext_BrowserAPI_State.Controls.Frame_FocusBody != Null && Event.To.HasClass(C_Class_Body) && !Event.From.HasClass(C_Class_Body)) {
									Focus(_This, TMNext_BrowserAPI_State.Controls.Frame_FocusBody);
								} else if (TMNext_BrowserAPI_State.Controls.Frame_FocusFooter != Null && Event.To.HasClass(C_Class_Footer) && !Event.From.HasClass(C_Class_Footer)) {
									Focus(_This, TMNext_BrowserAPI_State.Controls.Frame_FocusFooter);
								} else {
									Focus(_This, Event.To);
								}
	
								if (Event.From.ControlId == Event.To.ControlId) {
									TMNext_BrowserAPI_State.PendingEvents.add(K_Event {
										Type = C_EventType_ReachLimit,
										From = Event.From,
										MenuNavAction = Event.Input
									});
								}
							} else {
								Focus(_This, Event.To);
							}
						}
					}
				}
				case Navigation::C_EventType_NavigateMouse: {
					if (Navigation::IsEventFromGroup(_This, Event, C_NavGroupName)) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							Select(_This, Event.To);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							FocusScroll(_This, False);
							Focus(_This, Event.To);
						}
					}
				}
			}
		}
	
		/* Pop up multi choice events */
		foreach (Event in PopUpMultiChoice::GetPendingEvents(_This)) {
			if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == TMNext_BrowserAPI_State.Controls.Frame_MultiChoice.Id) {
				switch (Event.Type) {
					case PopUpMultiChoice::C_EventType_Select: {
						if (Event.SelectedIndex == C_FavoriteMapPopUp_ChoiceIndex_Yes) {
							MapStore::Action_RemoveMapFromFavorites(_This, TMNext_BrowserAPI_State.FavoriteMapToRemove.MapInfo.Uid);
							TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMapSupression = True;
						}
					}
					case PopUpMultiChoice::C_EventType_Display: {
						Navigation::EnableGroup(_This, C_NavGroupName, !TMNext_BrowserAPI_State.Controls.Frame_MultiChoice.Visible);
						if (TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll != Null) Scroll::LockNavigation(TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, TMNext_BrowserAPI_State.Controls.Frame_MultiChoice.Visible);
					}
				}
			}
		}
	
		foreach (Event in Scroll::GetPendingEvents(_This)) {
			if (Event.Scroll != Null && TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll != Null && Event.Scroll.ControlId == TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll.ControlId) {
				switch (Event.Type) {
					case Scroll::C_EventType_Update: {
						declare DataCount = GetBrowserDataCount(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
						declare CurrentBrowser = TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser];
						if (
							CurrentBrowser.ChosenCampaign.Id == CampaignStruct::C_Campaign_NullId &&
							CurrentBrowser.ChosenMonthlyCampaign.Id == CampaignStruct::C_Campaign_NullId &&
							CurrentBrowser.ChosenClubId == CampaignStruct::C_Campaign_NullId
						) {
							switch (CurrentBrowser.CurrentPath) {
								case C_Path_Quarterly: {
									if (Event.Page != TMNext_BrowserAPI_State.RequestsManager.PageQuarterly) {
										TMNext_BrowserAPI_State.RequestsManager.PageQuarterly = Event.Page;
										TMNext_BrowserAPI_State.RequestsManager.WaitingForQuarterlyCampaigns = True;
	
										if (
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime < 0 ||
											Now >= TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime + C_DelayBetweenRequest
										) {
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
										} else {
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now + C_DelayBetweenRequest;
										}
									}
								}
								case C_Path_Monthly: {
									if (Event.Page != TMNext_BrowserAPI_State.RequestsManager.PageMonthly) {
										TMNext_BrowserAPI_State.RequestsManager.PageMonthly = Event.Page;
										TMNext_BrowserAPI_State.RequestsManager.WaitingForMonthlyCampaigns = True;
	
										if (
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime < 0 ||
											Now >= TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime + C_DelayBetweenRequest
										) {
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
										} else {
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now + C_DelayBetweenRequest;
										}
									}
								}
								case C_Path_Clubs: {
									if (Event.Page != TMNext_BrowserAPI_State.RequestsManager.PageClubs) {
										TMNext_BrowserAPI_State.RequestsManager.PageClubs = Event.Page;
										TMNext_BrowserAPI_State.RequestsManager.WaitingForClubs = True;
	
										if (
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime < 0 ||
											Now >= TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime + C_DelayBetweenRequest
										) {
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
										} else {
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now + C_DelayBetweenRequest;
										}
									}
								}
								case C_Path_ChosenClub: {
									if (Event.Page != TMNext_BrowserAPI_State.RequestsManager.PageClubCampaigns) {
										TMNext_BrowserAPI_State.RequestsManager.PageClubCampaigns = Event.Page;
										TMNext_BrowserAPI_State.RequestsManager.WaitingForClubCampaigns = True;
	
										if (
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime < 0 ||
											Now >= TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime + C_DelayBetweenRequest
										) {
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
										} else {
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now + C_DelayBetweenRequest;
										}
									}
								}
								case C_Path_Favorites: {
									if (Event.Page != TMNext_BrowserAPI_State.RequestsManager.PageFavorites) {
										TMNext_BrowserAPI_State.RequestsManager.PageFavorites = Event.Page;
										TMNext_BrowserAPI_State.RequestsManager.WaitingForFavoriteMaps = True;
	
										if (
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime < 0 ||
											Now >= TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime + C_DelayBetweenRequest
										) {
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
										} else {
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now + C_DelayBetweenRequest;
										}
									}
								}
							}
						}
						foreach (Key => Frame_Element in Event.ElementsVisible) {
							Frame_Element.Visible = DataCount > Key;
							if (Frame_Element.Visible) {
								UpdateBrowserElement(_This, Frame_Element, Key);
							}
						}
						foreach (Key => Frame_Element in Event.ElementsHidden) {
							Frame_Element.Visible = False;
						}
						Event.Scroll.Visible = Event.ElementsVisible.count != 0;
	
						// Hide other Label_NoElements
						declare Frame_BrowserMapScroll <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.Parent.GetFirstChild(C_Id_FrameBrowserMapScroll) as CMlFrame);
						declare Frame_BrowserTestMapScroll <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.Parent.GetFirstChild(C_Id_FrameBrowserSmallMapScroll) as CMlFrame);
						declare Frame_BrowserListScroll <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.Parent.GetFirstChild(C_Id_FrameBrowserListScroll) as CMlFrame);
						Frame_BrowserMapScroll.Parent.GetFirstChild(C_Id_LabelNoElements).Hide();
						Frame_BrowserTestMapScroll.Parent.GetFirstChild(C_Id_LabelNoElements).Hide();
						Frame_BrowserListScroll.Parent.GetFirstChild(C_Id_LabelNoElements).Hide();
	
						declare CMlLabel Label_NoElements = (Event.Scroll.Parent.GetFirstChild(C_Id_LabelNoElements) as CMlLabel);
						if (Label_NoElements != Null) Label_NoElements.Visible = !Event.Scroll.Visible && !LoadingSpinner::IsLoading(TMNext_BrowserAPI_State.Controls.Frame_LoadingSpinner);
					}
					case Scroll::C_EventType_Focus: {
						if (Event.From != Null) FocusBrowserElement(_This, Event.From, False);
						if (Event.To != Null) {
							if (IsScrollFocused(_This) || Event.IsMouse) {
								FocusBrowserElement(_This, Event.To, True);
								Focus(_This, Null);
	
								if (
									TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser) &&
									TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.ListMultiSelect
								) {
									if (GetDataType(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey) == C_DataType_Map) {
										declare K_MapBrowserData MapBrowserData = GetMapBrowserData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey);
										UpdateMapPreselection(_This, MapBrowserData, TMNext_BrowserAPI_State.Controls.Frame_SelectedMap);
									} else {
										UpdateMapPreselection(_This, K_MapBrowserData {}, TMNext_BrowserAPI_State.Controls.Frame_SelectedMap);
									}
								}
							}
							if (!IsScrollFocused(_This)) {
								FocusScroll(_This, True);
							}
							if (!IsBrowserFocused(_This)) {
								FocusBrowser(_This, True);
							}
						}
					}
					case Scroll::C_EventType_ReachLimit: {
						if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Up) {
							FocusBrowserElement(_This, Event.From, False);
							FocusScroll(_This, False);
							declare CMlControl ControlTarget = Navigation::GetControlTarget(TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, Event.NavAction);
							if (ControlTarget != Null) {
								if (Navigation::IsLocked(ControlTarget)) {
									ControlTarget = Navigation::GetControlTarget(ControlTarget, Event.NavAction);
									if (Navigation::IsLocked(ControlTarget)) ControlTarget = TMNext_BrowserAPI_State.Controls.Button_ParentPath;
								}
							}
							if (TMNext_BrowserAPI_State.Controls.Frame_FocusHeader != Null && ControlTarget.HasClass(C_Class_Header)) {
								ControlTarget = TMNext_BrowserAPI_State.Controls.Frame_FocusHeader;
							}
	
							Focus(_This, ControlTarget);
							MenuSounds::PlayFocusSound(_This, ControlTarget);
						} else {
							declare CMlControl Button_EditorSettings = TMNext_BrowserAPI_State.Controls.Frame_SelectedMap.GetFirstChild(C_Id_ButtonEditorSettings);
							declare CMlControl Button_SelectMap = TMNext_BrowserAPI_State.Controls.Frame_SelectedMap.GetFirstChild(C_Id_ButtonSelectMap);
							declare Frame_ButtonCreateMap <=> (TMNext_BrowserAPI_State.Controls.Frame_Global.GetFirstChild(C_Id_ButtonCreateMap) as CMlFrame);
							if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Right && !Navigation::IsLocked(Button_EditorSettings)) {
								FocusBrowserElement(_This, Event.From, False);
								FocusScroll(_This, False);
								Focus(_This, Button_EditorSettings);
							} else if (
								Event.NavAction == CMlScriptEvent::EMenuNavAction::Down &&
								(
									!Navigation::IsLocked(TMNext_BrowserAPI_State.Controls.Button_ListMultiSelectValid) ||
									!Navigation::IsLocked(Button_SelectMap) ||
									!Navigation::IsLocked(Frame_ButtonCreateMap)
								)
							) {
								FocusBrowserElement(_This, Event.From, False);
								FocusScroll(_This, False);
								declare ControlTarget = Navigation::GetControlTarget(TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, Event.NavAction);
								if (!Navigation::IsLocked(TMNext_BrowserAPI_State.Controls.Button_ListMultiSelectValid)) {
									ControlTarget = TMNext_BrowserAPI_State.Controls.Button_ListMultiSelectValid;
								} else if (!Navigation::IsLocked(Button_SelectMap)){
									ControlTarget = Button_SelectMap;
								} else if (!Navigation::IsLocked(Frame_ButtonCreateMap)) {
									ControlTarget = Frame_ButtonCreateMap;
								} else {
									TMNext_BrowserAPI_State.PendingEvents.add(K_Event {
										Type = C_EventType_ReachLimit,
										From = Event.From,
										MenuNavAction = Event.NavAction
									});
								}
								
								if (TMNext_BrowserAPI_State.Controls.Frame_FocusFooter != Null && !Navigation::IsLocked(TMNext_BrowserAPI_State.Controls.Frame_FocusFooter) && ControlTarget.HasClass(C_Class_Footer)) {
									ControlTarget = TMNext_BrowserAPI_State.Controls.Frame_FocusFooter;
								}
								if (!Navigation::IsLocked(ControlTarget)) Focus(_This, ControlTarget);
							} else {
								TMNext_BrowserAPI_State.PendingEvents.add(K_Event {
									Type = C_EventType_ReachLimit,
									From = Event.From,
									MenuNavAction = Event.NavAction
								});
							}
						}
					}
					case Scroll::C_EventType_Select: {
						ShowError(_This, "");
						switch (GetDataType(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey)) {
							case C_DataType_Campaign: {
								declare Campaign = GetCampaign(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey);
								declare HasPermission = True;
								declare PermissionMessage = "";
								declare LiveQuarterlyCampaign = CampaignStore::GetLiveQuarterlyCampaign();
								
								if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.IsBrowsingForEdition) {
									HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CreateAndUploadMap);
									if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_OpenAdvancedMapEditor);
								} else if (Campaign.Id == LiveQuarterlyCampaign.Id) {
									HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayCurrentOfficialQuarterlyCampaign);
									if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayCurrentOfficialQuarterlyCampaign);
								} else {
									HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayPastOfficialQuarterlyCampaign);
									if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayPastOfficialQuarterlyCampaign);
								}
								if (!HasPermission) {
									Router::SetParentPath(_This, RoutePaths::C_Path_ClubEditionInfo, Router::GetCurrentRoutePath(_This));
									Router::Push(_This, RoutePaths::C_Path_ClubEditionInfo, [
										RoutePaths::C_Query_Message => PermissionMessage
									], False);
								} else {
									if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Campaign)) {		
										if (Campaign.IsLoaded) {
											Campaign = CampaignStore::GetCampaignFromId(Campaign.Id);
											TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
												Type = C_EventType_Select,
												DataType = C_DataType_Campaign,
												Data = Campaign.tojson()
											});
											ResetBrowserCampaignsAndClubId(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
										} else {
											TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign = FilterCampaignMaps(
												TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings,
												Campaign
											);
											TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedCampaign = True;
											TMNext_BrowserAPI_State.RequestsManager.GetCampaign = True;
											TMNext_BrowserAPI_State.RequestsManager.CampaignIsLoaded = False;
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
										}
									} else if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Map)) {
										TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenCampaign = FilterCampaignMaps(
											TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings,
											Campaign
										);
										TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedCampaign = True;
										TMNext_BrowserAPI_State.RequestsManager.CampaignIsLoaded = Campaign.IsLoaded;
										if (
											!Campaign.IsLoaded && (
												TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].CurrentPath == C_Path_ChosenClub ||
												TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].CurrentPath == C_Path_Quarterly
											)
										) {
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
										}
									}
								}
							}
							case C_DataType_MonthlyCampaign: {
								declare MonthlyCampaign = GetMonthlyCampaign(Event.ToKey);
								declare HasPermission = True;
								declare PermissionMessage = "";
								declare LiveMonthlyCampaign = CampaignStore::GetLiveMonthlyCampaign();
								
								if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.IsBrowsingForEdition) {
									HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CreateAndUploadMap);
									if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_OpenAdvancedMapEditor);
								} else if (MonthlyCampaign.Id == LiveMonthlyCampaign.Id) {
									HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayCurrentOfficialMonthlyCampaign);
									if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayCurrentOfficialMonthlyCampaign);
								} else {
									HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayPastOfficialMonthlyCampaign);
									if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayPastOfficialMonthlyCampaign);
								}
								if (!HasPermission) {
									Router::SetParentPath(_This, RoutePaths::C_Path_ClubEditionInfo, Router::GetCurrentRoutePath(_This));
									Router::Push(_This, RoutePaths::C_Path_ClubEditionInfo, [
										RoutePaths::C_Query_Message => PermissionMessage
									], False);
								} else {
									if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_MonthlyCampaign)) {
										if (MonthlyCampaign.IsLoaded) {
											MonthlyCampaign = CampaignStore::GetMonthlyCampaignFromId(MonthlyCampaign.Id);
											TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
												Type = C_EventType_Select,
												DataType = C_DataType_MonthlyCampaign,
												Data = MonthlyCampaign.tojson()
											});
											ResetBrowserCampaignsAndClubId(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser);
										} else {
											TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenMonthlyCampaign = FilterCampaignMaps(
												TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings,
												MonthlyCampaign
											);
											TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedMonthlyCampaign = True;
											TMNext_BrowserAPI_State.RequestsManager.GetCampaign = True;
											TMNext_BrowserAPI_State.RequestsManager.MonthlyCampaignIsLoaded = False;
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
										}
									} else if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].DataTypes.exists(C_DataType_Map)) {
										TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenMonthlyCampaign = FilterCampaignMaps(
											TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings,
											MonthlyCampaign
										);
										TMNext_BrowserAPI_State.RequestsManager.WaitingForLoadedMonthlyCampaign = True;
										TMNext_BrowserAPI_State.RequestsManager.MonthlyCampaignIsLoaded = MonthlyCampaign.IsLoaded;
										if (
											!MonthlyCampaign.IsLoaded &&
											TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].CurrentPath == C_Path_Monthly
										) {
											TMNext_BrowserAPI_State.RequestsManager.NextPageLoadTime = Now;
										}
									}
								}
							}
							case C_DataType_Map: {
								declare K_MapBrowserData MapBrowserData = GetMapBrowserData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey);
								if (MapBrowserData.SubFolder != "") {
									SetCurrentPath(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, MapBrowserData.SubFolder);
								} else {
									declare HasPermission = True;
									declare PermissionMessage = "";
									if (!MapBrowserData.MapInfo.CreatedWithSimpleEditor && TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.IsBrowsingForEdition) {
										HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_OpenAdvancedMapEditor);
										if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_OpenAdvancedMapEditor);
									}
									if (!HasPermission) {
										Router::SetParentPath(_This, RoutePaths::C_Path_ClubEditionInfo, Router::GetCurrentRoutePath(_This));
										Router::Push(_This, RoutePaths::C_Path_ClubEditionInfo, [
											RoutePaths::C_Query_Message => PermissionMessage
										], False);
									} else if (TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser) && TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.ListMultiSelect) {
										ToggleMapSelection(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, MapBrowserData.MapInfo, TMNext_BrowserAPI_State.Controls.Button_ListMultiSelectValid);
										UpdateBrowserElement(_This, Event.To, Event.ToKey);
										FocusBrowserElement(_This, Event.To, True);
									} else {
										TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
											Type = C_EventType_Select,
											DataType = C_DataType_Map,
											Data = MapBrowserData.MapInfo.tojson()
										});
										UpdateMapPreselection(_This, MapBrowserData, TMNext_BrowserAPI_State.Controls.Frame_SelectedMap);
									}
								}
							}
							case C_DataType_Replay: {
								declare K_ReplayBrowserData ReplayBrowserData = GetReplayBrowserData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey);
								if (ReplayBrowserData.SubFolder != "") {
									SetCurrentPath(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, ReplayBrowserData.SubFolder);
									UpdateBrowserContent(_This, TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, GetBrowserDataCount(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser));
								} else if (TMNext_BrowserAPI_State.Browsers.existskey(TMNext_BrowserAPI_State.Type_CurrentBrowser) && TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.ListMultiSelect) {
									ToggleReplaySelection(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, ReplayBrowserData.ReplayInfo, TMNext_BrowserAPI_State.Controls.Button_ListMultiSelectValid);
									UpdateBrowserElement(_This, Event.To, Event.ToKey);
									FocusBrowserElement(_This, Event.To, True);
								} else {
									TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
										Type = C_EventType_Select,
										DataType = C_DataType_Replay,
										Data = ReplayBrowserData.ReplayInfo.tojson()
									});
								}
							}
							case C_DataType_Image: {
								declare FileBrowserData = GetFileBrowserData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey);
								if (FileBrowserData.SubFolder != "") {
									SetCurrentPath(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, FileBrowserData.SubFolder);
								} else {
									TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
										Type = C_EventType_Select,
										DataType = C_DataType_Image,
										Data = FileBrowserData.File
									});
								}
							}
							case C_DataType_Skin: {
								DestroyScene(_This);
								declare FileBrowserData = GetFileBrowserData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey);
								if (FileBrowserData.SubFolder != "") {
									SetCurrentPath(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, FileBrowserData.SubFolder);
								} else {
									TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
										Type = C_EventType_Select,
										DataType = C_DataType_Skin,
										Data = FileBrowserData.File
									});
								}
							}
							case C_DataType_Script: {
								declare FileBrowserData = GetFileBrowserData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey);
								if (FileBrowserData.SubFolder != "") {
									SetCurrentPath(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, FileBrowserData.SubFolder);
								} else {
									TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
										Type = C_EventType_Select,
										DataType = C_DataType_Script,
										Data = FileBrowserData.File
									});
								}
							}
							case C_DataType_MatchSettings: {
								declare FileBrowserData = GetFileBrowserData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey);
								if (FileBrowserData.SubFolder != "") {
									SetCurrentPath(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, FileBrowserData.SubFolder);
								} else {
									TMNext_BrowserAPI_State.PendingEvents.add(K_Event{
										Type = C_EventType_Select,
										DataType = C_DataType_MatchSettings,
										Data = FileBrowserData.File
									});
								}
							}
							case C_DataType_Club: {
								if (!UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_JoinClub)) {
									Router::SetParentPath(_This, RoutePaths::C_Path_ClubEditionInfo, Router::GetCurrentRoutePath(_This));
									declare PermissionMessage = "";
									if (TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.IsBrowsingForEdition) {
										PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_EditClubMap);
									} else {
										PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayPrivateActivity);
									}
									Router::Push(_This, RoutePaths::C_Path_ClubEditionInfo, [
										RoutePaths::C_Query_Message => PermissionMessage
									], False);
								} else {
									TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].ChosenClubId = GetClub(TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey).Id;
									SetCurrentPath(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, C_Path_ChosenClub);
								}
							}
							case C_DataType_ItemCollection: {
								declare FileBrowserData = GetFileBrowserData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey);
								if (FileBrowserData.SubFolder != "") {
									SetCurrentPath(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, FileBrowserData.SubFolder);
								} else {
									TMNext_BrowserAPI_State.PendingEvents.add(K_Event {
										Type = C_EventType_Select,
										DataType = C_DataType_ItemCollection,
										Data = FileBrowserData.File
									});
								}
							}						
							case C_DataType_Category: {
								declare CurrentPath = TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].CurrentPath;
								if (TMNext_BrowserAPI_State.Paths_Tree.existskey(CurrentPath) && TMNext_BrowserAPI_State.Paths_Tree[CurrentPath].existskey(Event.ToKey)) {
									SetCurrentPath(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, TMNext_BrowserAPI_State.Paths_Tree[CurrentPath][Event.ToKey]);
								}
								UpdateBrowserContent(_This, TMNext_BrowserAPI_State.Controls.Frame_CurrentScroll, GetBrowserDataCount(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser));
							}
						}
					}
					case Scroll::C_EventType_Cancel: {
						if (IsScrollFocused(_This)) Cancel(_This, True);
					}
					case Scroll::C_EventType_NavAction: {
					if (
						Event.NavAction == CMlScriptEvent::EMenuNavAction::Action1 &&
						TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].Settings.ShowFavoriteUserMaps &&
						TMNext_BrowserAPI_State.Browsers[TMNext_BrowserAPI_State.Type_CurrentBrowser].CurrentPath == C_Path_Favorites
						) {
							if (GetDataType(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey) == C_DataType_Map) {
								TMNext_BrowserAPI_State.FavoriteMapToRemove = GetMapBrowserData(_This, TMNext_BrowserAPI_State.Type_CurrentBrowser, Event.ToKey);
								RemoveMapFromFavorites(_This, TMNext_BrowserAPI_State.FavoriteMapToRemove, TMNext_BrowserAPI_State.Controls.Frame_MultiChoice);
							}
						}
					}
				}
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text ComponentV2() {
	return MV::ComponentV2(
		C_Name,
		GetManialink(),
"""
#Include "Libs/Nadeo/TMNext/TrackMania/API/BrowserAPI.Script.txt" as {{{Q}}}
""",
"""
***MainInit***
***
{{{P}}}MainInit(This);
***

***MainStart***
***
{{{P}}}MainStart(This);
***

***MainLoop***
***
{{{P}}}MainLoop(This);
***
""",
[
	CampaignStruct::Component(),
	ClubStruct::Component(),
	CampaignStore::ComponentV2(),
	ClubStore::ComponentV2(),
	Scroll::ComponentV2(),
	Quad9::ComponentV2(),
	Router::ComponentV2(),
	Navigation::ComponentV2(),
	Transition::ComponentV2(),
	Button::ComponentV2(),
	PopUpBackground::ComponentV2(),
	MenuSounds::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	UserStore::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	MapStore::ComponentV2()
],
[]
);
}