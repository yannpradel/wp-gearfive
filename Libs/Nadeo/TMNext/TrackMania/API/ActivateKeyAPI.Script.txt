/**
 *  Component : ActivateKeyAPI, API to activate a key or code
 */
#Const Version		"2022-10-21"
#Const ScriptName "Libs/Nadeo/TMNext/TrackMania/API/ActivateKeyAPI.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/HttpClubAuthorizationHeader.Script.txt" as HttpClubAuthorizationHeader
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_API_Key "/api/key"
#Const C_Headers [
	"Accept" => "application/json",
	"Content-Type" => "application/json"
]

#Const C_Route_PostCheck "/check"
#Const C_Route_PostActivate "/activate"

#Const C_Status_AlreadyActivated "already_activated"
#Const C_StatusCode_InvalidKey 404

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_HttpKey {
	Text key;
}

#Struct K_HttpResponseFromPostCheck {
	Text status;
	Text message;
}
#Struct K_ResponseFromPostCheck {
	Text Status;
	Text Message;
}

#Struct K_HttpResponseFromPostActivate {
	Text redirectionCode;
}
#Struct K_ResponseFromPostActivate {
	Text RedirectionCode;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text[Text] GetHeadersWithClubAuth() {
	declare Text[Text] Headers = C_Headers;
	declare Text AuthorizationHeaders = HttpClubAuthorizationHeader::Get();
	declare Text KeyAutho = TL::SubString(AuthorizationHeaders, 0, TL::Length("Authorization"));
	declare Text ValueAutho = TL::SubString(AuthorizationHeaders, TL::Length("Authorization: "), TL::Length(AuthorizationHeaders));
	Headers[KeyAutho] = ValueAutho;
	return Headers;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to check if the given key is a valid key
 *
 *	@param	_Key		The key send for validation
 *
 *	@return				The request
 */
Http::K_Request PostCheck(Text _Key) {
	declare K_HttpKey HttpKey = K_HttpKey { key = _Key };
	return Http::CreatePost(Config::Get().APIBordeauxClubUrl^C_API_Key^C_Route_PostCheck, HttpKey.tojson(), GetHeadersWithClubAuth());
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostCheck request
K_ResponseFromPostCheck GetResponseFromPostCheck(Http::K_Request _Request) {
	declare K_HttpResponseFromPostCheck HttpResponseFromPostCheck;
	HttpResponseFromPostCheck.fromjson(Http::GetResult(_Request));

	return K_ResponseFromPostCheck {
		Status = HttpResponseFromPostCheck.status,
		Message = HttpResponseFromPostCheck.message
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to activate the given key
 *
 *	@param	_Key		The key for activation
 *
 *	@return				The request
 */
Http::K_Request PostActivate(Text _Key) {
	declare K_HttpKey HttpKey = K_HttpKey { key = _Key };
	return Http::CreatePost(Config::Get().APIBordeauxClubUrl^C_API_Key^C_Route_PostActivate, HttpKey.tojson(), GetHeadersWithClubAuth());
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the PostActivate request
K_ResponseFromPostActivate GetResponseFromPostActivate(Http::K_Request _Request) {
	declare K_HttpResponseFromPostActivate HttpResponseFromPostActivate;
	HttpResponseFromPostActivate.fromjson(Http::GetResult(_Request));

	return K_ResponseFromPostActivate {
		RedirectionCode = HttpResponseFromPostActivate.redirectionCode
	};
}