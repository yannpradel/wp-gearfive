/**
 *  Component : MapAPI, API for the maps system (example : favorite maps)
 */
#Const Version    "2023-03-30"
#Const ScriptName "Libs/Nadeo/TMNext/TrackMania/API/MapAPI.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_API_Map "/api/token/map"

#Const C_RouteParameter_MapUid "MapUid"

#Const C_QueryParameter_MapUids "mapUidList"
#Const C_QueryParameter_CheckFavorite "checkFavorites"
#Const C_QueryParameter_Offset "offset"
#Const C_QueryParameter_Length "length"
#Const C_QueryParameter_Sort "sort"
#Const C_QueryParameter_Order "order"
#Const C_QueryParameter_MapType "mapType"
#Const C_QueryParameter_Playable "playable"
#Const C_QueryParameter_OnlyMine "onlyMine"

#Const C_Sort_Date "date"
#Const C_Sort_Name "name"
#Const C_Order_Desc "desc"
#Const C_Order_Asc "asc"

#Const C_Route_GetMap "/:MapUid"
#Const C_Route_GetMultipleMaps "/get-multiple"
#Const C_Route_GetFavorites "/favorite"
#Const C_Route_PostAddFavorite "/favorite/:MapUid/add"
#Const C_Route_PostRemoveFavorite "/favorite/:MapUid/remove"

#Const C_Headers [
	"Accept" => "application/json",
	"Content-Type" => "application/json"
]

#Struct K_HttpMapInfo {
	Text uid;
	Text mapId;
	Text name;
	Text author;
	Text submitter;
	Integer authorTime;
	Integer goldTime;
	Integer silverTime;
	Integer bronzeTime;
	Integer nbLaps;
	Boolean valid;
	Text downloadUrl;
	Text thumbnailUrl;
	Integer uploadTimestamp;
	Integer updateTimestamp;
	Integer fileSize;
	Boolean public;
	Boolean favorite;
	Boolean playable;
	Text mapStyle;
	Text mapType;
	Text collectionName;
	Boolean gamepadEditor;
}

#Struct K_HttpMapList {
	K_HttpMapInfo[] mapList;
	Integer itemCount;
}

#Struct K_MapList {
	CampaignStruct::LibCampaignStruct_K_Map[] Maps;
	Integer ItemCount;
}

#Struct K_MapListByUid {
	CampaignStruct::LibCampaignStruct_K_Map[Text] Maps;
	Integer ItemCount;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the infos on a map
 *
 *	@param	_MapUid									The Uid of the map to add
 *																	Must be registered to the NadeoServices first !
 *
 *	@return														The request
 */
Http::K_Request GetMap(Text _MapUid) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetMap, [C_RouteParameter_MapUid => _MapUid]);
	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Map^Route, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetMap request
CampaignStruct::LibCampaignStruct_K_Map GetResponseFromGetMap(Http::K_Request _Request) {
	declare K_HttpMapInfo HttpMap;
	HttpMap.fromjson(Http::GetResult(_Request));

	declare CampaignStruct::LibCampaignStruct_K_Map MapInfo = CampaignStruct::LibCampaignStruct_K_Map {
		Uid = HttpMap.uid,
		Name = HttpMap.name,
		AuthorLogin = HttpMap.author,
		SubmitterAccountId = HttpMap.submitter,
		AuthorTime = HttpMap.authorTime,
		GoldTime = HttpMap.goldTime,
		SilverTime = HttpMap.silverTime,
		BronzeTime = HttpMap.bronzeTime,
		NbLaps = HttpMap.nbLaps,
		DownloadUrl = HttpMap.downloadUrl,
		ThumbnailUrl = HttpMap.thumbnailUrl,
		UploadTimestamp = HttpMap.uploadTimestamp,
		IsFavorite = HttpMap.favorite,
		IsPlayable = HttpMap.playable,
		Style = HttpMap.mapStyle,
		Type = HttpMap.mapType,
		CollectionName = HttpMap.collectionName,
		CreatedWithGamepadEditor = HttpMap.gamepadEditor
	};

	return MapInfo;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the list of the favorite maps of the player
 *
 *	@param	_Offset										The offset of the list to get
 *	@param	_Length										The length of the list to get
 *	@param	_Sort											The sort type (date or name) of the list to get
 *	@param	_Order										The sort order (asc or desc) of the list to get
 *
 *	@return														The request
 */
Http::K_Request GetFavoritesMaps(Integer _Offset, Integer _Length, Text _Sort, Text _Order, Text _MapType, Boolean _Playable, Boolean _OnlyUserMaps) {
	declare Text[Text] QueryList = [
		C_QueryParameter_Offset => ""^_Offset,
		C_QueryParameter_Length => ""^_Length,
		C_QueryParameter_Sort => _Sort,
		C_QueryParameter_Order => _Order
	];
	if (_MapType != "") {
		QueryList[C_QueryParameter_MapType] = _MapType;
	}
	if (_Playable) {
		QueryList[C_QueryParameter_Playable] = "1";
	}
	if (_OnlyUserMaps) {
		QueryList[C_QueryParameter_OnlyMine] = "1";
	}
	declare Text QueryString = Http::CreateQueryString(QueryList);

	return Http::CreateGet(Config::Get().APIBaseUrl^C_API_Map^C_Route_GetFavorites^QueryString, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetFavoritesMaps request
K_MapList GetResponseFromGetFavoritesMaps(Http::K_Request _Request) {
	declare K_HttpMapList HttpFavoritesMaps;
	HttpFavoritesMaps.fromjson(Http::GetResult(_Request));

	declare K_MapList FavoritesMaps;
	foreach (Map in HttpFavoritesMaps.mapList) {
		FavoritesMaps.Maps.add(CampaignStruct::LibCampaignStruct_K_Map {
			Uid = Map.uid,
			Name = Map.name,
			AuthorLogin = Map.author,
			SubmitterAccountId = Map.submitter,
			AuthorTime = Map.authorTime,
			GoldTime = Map.goldTime,
			SilverTime = Map.silverTime,
			BronzeTime = Map.bronzeTime,
			NbLaps = Map.nbLaps,
			DownloadUrl = Map.downloadUrl,
			ThumbnailUrl = Map.thumbnailUrl,
			UploadTimestamp = Map.uploadTimestamp,
			IsFavorite = Map.favorite,
			IsPlayable = Map.playable,
			Style = Map.mapStyle,
			Type = Map.mapType,
			CollectionName = Map.collectionName,
			CreatedWithGamepadEditor = Map.gamepadEditor
		});
	}

	FavoritesMaps.ItemCount = HttpFavoritesMaps.itemCount;

	return FavoritesMaps;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to add a map to the favorites list of the player
 *
 *	@param	_MapUid									The Uid of the map to add
 *																	Must be registered to the NadeoServices first !
 *
 *	@return													The request
 */
Http::K_Request PostAddFavoriteMap(Text _MapUid) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostAddFavorite, [C_RouteParameter_MapUid => _MapUid]);

	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Map^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to remove a map from the favorites list of the player
 *
 *	@param	_MapUid									The Uid of the map to add
 *																	Must be registered to the NadeoServices first !
 *
 *	@return													The request
 */
Http::K_Request PostRemoveFavoriteMap(Text _MapUid) {
	declare Text Route = Http::InjectRouteParameters(C_Route_PostRemoveFavorite, [C_RouteParameter_MapUid => _MapUid]);

	return Http::CreatePost(Config::Get().APIBaseUrl^C_API_Map^Route, "", C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the infos on a list of maps
 *
 *	@param	_MapUids									The Uids of the maps to check
 *	@param	_CheckFavorite						Check if maps sent are in player's favorite list
 *
 *	@return														The request
 */
Http::K_Request GetMaps(Text[] _MapUids, Boolean _CheckFavorite) {
	declare Text CheckFavorite = "0";
	if (_CheckFavorite) CheckFavorite = "1";
	declare Text MapUidsQuery = TL::Join(",", _MapUids);
	declare Text QueryString = Http::CreateQueryString([C_QueryParameter_MapUids => MapUidsQuery, C_QueryParameter_CheckFavorite => CheckFavorite]);

	return  Http::CreateGet(Config::Get().APIBaseUrl^C_API_Map^C_Route_GetMultipleMaps^QueryString, C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetMaps request
K_MapListByUid GetResponseFromGetMaps(Http::K_Request _Request) {
	declare K_HttpMapList HttpMaps;
	HttpMaps.fromjson(Http::GetResult(_Request));

	declare K_MapListByUid FavoritesMaps;
	foreach (Map in HttpMaps.mapList) {
		FavoritesMaps.Maps[Map.uid] = CampaignStruct::LibCampaignStruct_K_Map {
			Uid = Map.uid,
			Name = Map.name,
			AuthorLogin = Map.author,
			SubmitterAccountId = Map.submitter,
			AuthorTime = Map.authorTime,
			GoldTime = Map.goldTime,
			SilverTime = Map.silverTime,
			BronzeTime = Map.bronzeTime,
			NbLaps = Map.nbLaps,
			DownloadUrl = Map.downloadUrl,
			ThumbnailUrl = Map.thumbnailUrl,
			UploadTimestamp = Map.uploadTimestamp,
			IsFavorite = Map.favorite,
			IsPlayable = Map.playable,
			Style = Map.mapStyle,
			Type = Map.mapType,
			CollectionName = Map.collectionName,
			CreatedWithGamepadEditor = Map.gamepadEditor
		};
	}

	FavoritesMaps.ItemCount = HttpMaps.itemCount;

	return FavoritesMaps;
}