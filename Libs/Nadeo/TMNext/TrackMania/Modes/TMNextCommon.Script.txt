/** 
 *	Common code for modes of the TMNext project
 */
#Const Version		"2023-02-27"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Modes/TMNextCommon.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CommonLibs/Common/Log.Script.txt" as Log
#Include "Libs/Nadeo/CommonLibs/Common/Tracking.Script.txt" as Tracking
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/Trackmania/Modes/StateManager.Script.txt" as BaseStateMgr

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ConfigFilePath "file://Media/Json/Nadeo/TMNext/Config.json"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Config::K_Loading G_ConfigLoadRequest;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Start loading the configuration
Void ConfigLoad(CHttpManager _Http) {
	// Do not overwrite the config if it was already loaded from the client side
	// see: /trackmania-next/tmnext/-/issues/5173
	declare Integer ConfigSource = Config::GetSource();
	if (ConfigSource == Config::C_Source_Null || ConfigSource == Config::C_Source_ServerTitle) {
		Config::Load();
		G_ConfigLoadRequest = Config::StartMergeFile(_Http, C_ConfigFilePath, Config::C_Source_ServerTitle);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Check if the configuration is still loading
Boolean ConfigIsLoading(CHttpManager _Http) {
	if (Config::IsMergingFile(G_ConfigLoadRequest)) {
		return True;
	}
	Config::StopMergeFile(_Http, G_ConfigLoadRequest);
	Log::EnableCustomLogUI(System, UIManager, Config::HasFeature(Config::C_Feature_CustomLogUI));	
	return False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Called in the ***MB_Private_LogVersions*** section
Void LogVersions() {
	Log::RegisterScript(BaseStateMgr::ScriptName, BaseStateMgr::Version);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Called in the ***MB_Private_LoadLibraries*** section
Void LoadLibraries() {
	BaseStateMgr::Load();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Called in the ***MB_Private_UnloadLibraries*** section
Void UnloadLibraries() {
	BaseStateMgr::Unload();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Called in the ***MB_Private_Yield*** section
Void Yield() {
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			// Initialize players when they join the server
			case CSmModeEvent::EType::OnPlayerAdded: {
				BaseStateMgr::InitializePlayer(Event.Player);
			}
		}
	}
	BaseStateMgr::Yield();
	Tracking::Yield(System, This);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Called in the ***AfterLoadHud*** section
Void AfterLoadHud() {
	UIManager.UIAll.OverlayHide321Go = True;
	UIManager.UIAll.OverlayHideMapInfo = True;
}