/**
 *  Teams Matchmaking request manager
 */
#Const Version    "2021-08-02"
#Const ScriptName "Libs/Nadeo/TMNext/TrackMania/Modes/Teams_Matchmaking/Teams_Matchmaking_RequestManager.Script.txt"

#Include "Libs/Nadeo/TMNext/TrackMania/API/MatchmakingAPI.Script.txt" as MatchmakingAPI
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/ServerAuth.Script.txt" as ServerAuth
#Include "Libs/Nadeo/CommonLibs/Common/Log.Script.txt" as Log
#Include "ManiaApps/Nadeo/TMNext/TrackMania/Teams_Matchmaking/UIModules/NetShare_Teams_Server.Script.txt" as UIModules_NetShare_Teams

#Const C_Request_MatchParticipants_RetryCooldown 2000
#Const C_Request_Top10_RetryCooldown 2000
#Const C_Request_MatchmakingDivisions_RetryCooldown 3000
#Const C_Request_WaitBeforeFirstRequest 1000

#Struct K_MatchmakingRequest {
	Http::K_Request Request;
	Integer RequestTime;
}

declare Text G_AuthToken;

declare K_MatchmakingRequest G_Request_GetMatchmakingDivisions;
declare K_MatchmakingRequest G_Request_MatchParticipants;
declare K_MatchmakingRequest G_Request_Top10;

declare Text G_MatchId;
declare Text G_MatchmakingId;
declare Boolean G_MatchMustBeCompleted;

Void RequestGetMatchmakingDivisions(Integer _RequestTimer) { // RequestTimer in ms
	if (G_Request_GetMatchmakingDivisions.RequestTime <= 0) G_Request_GetMatchmakingDivisions.RequestTime = Now + _RequestTimer;
}

Void RequestPlayersMatchParticipants(Integer _RequestTimer, Boolean _MatchMustBeCompleted) { // RequestTimer in ms
	if (G_Request_MatchParticipants.RequestTime <= 0) G_Request_MatchParticipants.RequestTime = Now + _RequestTimer;
	G_MatchMustBeCompleted = _MatchMustBeCompleted;
}

Void RequestGetTop10(Integer _RequestTimer) { // RequestTimer in ms
	if (G_Request_Top10.RequestTime <= 0) G_Request_Top10.RequestTime = Now + _RequestTimer;
}

Void Init(Text _MatchId, Text _MatchmakingId) {
	G_MatchId = _MatchId;
	G_MatchmakingId = _MatchmakingId;

	G_Request_MatchParticipants.Request = Http::GetEmptyRequest();
	G_Request_GetMatchmakingDivisions.Request = Http::GetEmptyRequest();
	G_Request_Top10.Request = Http::GetEmptyRequest();
	G_Request_MatchParticipants.RequestTime = -1;
	G_Request_GetMatchmakingDivisions.RequestTime = -1;
	G_Request_Top10.RequestTime = -1;

	G_AuthToken = "";
	G_MatchMustBeCompleted = False;
	ServerAuth::Init(ServerAuth::C_Services_Club);
}

Void Yield() {
	if (ServerAuth::HasToken(ServerAuth::C_Services_Club)) {
		// Matchmaking Divisions
		if (G_Request_GetMatchmakingDivisions.RequestTime > 0 && G_Request_GetMatchmakingDivisions.RequestTime <= Now) {
			Http::Destroy(G_Request_GetMatchmakingDivisions.Request);
			G_Request_GetMatchmakingDivisions.Request = MatchmakingAPI::Server_GetMatchmakingDivisionRules(G_MatchmakingId);
			G_Request_GetMatchmakingDivisions.RequestTime = -1;
			Log::Log("Request Matchmaking Divisions"); //@remove when matchmaking divisions fully tested in Teams MM
		}
		if (Http::IsInitialized(G_Request_GetMatchmakingDivisions.Request)) {
			G_Request_GetMatchmakingDivisions.Request = Http::Update(G_Request_GetMatchmakingDivisions.Request);
			if (!Http::IsProcessing(G_Request_GetMatchmakingDivisions.Request)) {
				if (Http::IsSuccess(G_Request_GetMatchmakingDivisions.Request)) {
					declare MatchmakingStruct::LibStructuresMatchmaking_K_Division[Text] Divisions = MatchmakingAPI::GetResponseFromGetMatchmakingDivisionRules(G_Request_GetMatchmakingDivisions.Request);
					Log::Log("Matchmaking Divisions request success : " ^G_Request_GetMatchmakingDivisions.Request.Result); //@remove when matchmaking divisions fully tested in Teams MM
					UIModules_NetShare_Teams::SetDivisions(Divisions);
				} else {
					Log::Log("Matchmaking Divisions request error "^G_Request_GetMatchmakingDivisions.Request.StatusCode^": "^G_Request_GetMatchmakingDivisions.Request.Result); //@remove when matchmaking divisions fully tested in Teams MM
					// Try again after cooldown
					G_Request_GetMatchmakingDivisions.RequestTime = Now + C_Request_MatchmakingDivisions_RetryCooldown;
				}
				G_Request_GetMatchmakingDivisions.Request = Http::Destroy(G_Request_GetMatchmakingDivisions.Request);
			}
		}
		// Players Scores (skill level and score delta) 
		if (G_Request_MatchParticipants.RequestTime > 0 && G_Request_MatchParticipants.RequestTime <= Now) {
			Http::Destroy(G_Request_MatchParticipants.Request);
			G_Request_MatchParticipants.Request = MatchmakingAPI::Server_GetMatchParticipants(G_MatchId);
			G_Request_MatchParticipants.RequestTime = -1;
			Log::Log("Request Match Participants"); //@remove when leaderboard and score delta request fully tested in Teams MM
		}
		if (Http::IsInitialized(G_Request_MatchParticipants.Request)) {
			G_Request_MatchParticipants.Request = Http::Update(G_Request_MatchParticipants.Request);
			if (!Http::IsProcessing(G_Request_MatchParticipants.Request)) {
				if (Http::IsSuccess(G_Request_MatchParticipants.Request)) {
					declare MatchmakingStruct::LibStructuresMatchmaking_K_MatchParticipants MatchParticipants = MatchmakingAPI::GetResponseFromGetMatchParticipants(G_Request_MatchParticipants.Request);
					if (!G_MatchMustBeCompleted || (G_MatchMustBeCompleted && MatchParticipants.IsCompleted)) {
						Log::Log("Match Participants request success : " ^G_Request_MatchParticipants.Request.Result); //@remove when leaderboard and score delta request fully tested in Teams MM
						UIModules_NetShare_Teams::SetMatchParticipants(MatchParticipants);
						RequestGetTop10(0);
					} else {
						Log::Log("Match Participants request not completed "^G_Request_MatchParticipants.Request.StatusCode^": "^G_Request_MatchParticipants.Request.Result); //@remove when leaderboard and score delta request fully tested in Teams MM
						// Try again after cooldown
						G_Request_MatchParticipants.RequestTime = Now + C_Request_MatchParticipants_RetryCooldown;
					}
				} else {
					Log::Log("Match Participants request error "^G_Request_MatchParticipants.Request.StatusCode^": "^G_Request_MatchParticipants.Request.Result); //@remove when leaderboard and score delta request fully tested in Teams MM
					// Try again after cooldown
					G_Request_MatchParticipants.RequestTime = Now + C_Request_MatchParticipants_RetryCooldown;
				}
				G_Request_MatchParticipants.Request = Http::Destroy(G_Request_MatchParticipants.Request);
			}
		}

		// Matchmaking Top 10
		if (G_Request_Top10.RequestTime > 0 && G_Request_Top10.RequestTime <= Now) {
			Http::Destroy(G_Request_Top10.Request);
			G_Request_Top10.Request = MatchmakingAPI::Server_GetMatchmakingLeaderboard(G_MatchmakingId);
			G_Request_Top10.RequestTime = -1;
			Log::Log("Request Matchmaking Top 10"); //@remove when matchmaking Top 10 fully tested in Teams MM
		}
		if (Http::IsInitialized(G_Request_Top10.Request)) {
			G_Request_Top10.Request = Http::Update(G_Request_Top10.Request);
			if (!Http::IsProcessing(G_Request_Top10.Request)) {
				if (Http::IsSuccess(G_Request_Top10.Request)) {
					declare MatchmakingStruct::LibStructuresMatchmaking_K_PlayerLeaderboard[] Top10 = MatchmakingAPI::GetResponseFromGetMatchmakingLeaderboard(G_Request_Top10.Request);
					Log::Log("Matchmaking Top 10 request success : " ^G_Request_Top10.Request.Result); //@remove when matchmaking Top 10 fully tested in Teams MM
					UIModules_NetShare_Teams::SetTop10(Top10);
				} else {
					Log::Log("Matchmaking Top 10 request error "^G_Request_Top10.Request.StatusCode^": "^G_Request_Top10.Request.Result); //@remove when matchmaking Top 10 fully tested in Teams MM
					// Try again after cooldown
					G_Request_Top10.RequestTime = Now + C_Request_Top10_RetryCooldown;
				}
				G_Request_Top10.Request = Http::Destroy(G_Request_Top10.Request);
			}
		}
	
	}
	ServerAuth::Yield();
}