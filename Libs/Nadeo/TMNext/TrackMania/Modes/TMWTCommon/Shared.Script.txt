/** 
 *	Shared network variables for TMWT
 */
#Const Version		"2023-03-18"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/Shared.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
//L16N [TrackMania World Tour - Teams] The teams are tied and we have to continue to play to break the tie.
#Const C_Text_Overtime _("|Match|Overtime")
//L16N [TrackMania World Tour - Teams] Message displayed when a team is one race win away from winning the track
#Const C_Text_TrackPoint _("|Match|Track point")
//L16N [TrackMania World Tour - Teams] Message displayed when a team is one race win away from winning the match
#Const C_Text_MatchPoint _("|Match|Match point")

#Const C_ZIndex_MatchIntro 1.
#Const C_ZIndex_PlayerInfo -1.
#Const C_ZIndex_Header -2.
#Const C_ZIndex_LiveRanking -2.
#Const C_ZIndex_MapInfo -2.
#Const C_ZIndex_Sponsors -2.
#Const C_ZIndex_WarmUp -3.
#Const C_ZIndex_EventMessage -4.

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the pause status to the client
Void SetIsPause(CSmMode _This, Boolean _IsPause) {
	declare netwrite Boolean Net_TMWTCommon_Shared_IsPause for _This.Teams[0] = False;
	Net_TMWTCommon_Shared_IsPause = _IsPause;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the pause status on the client
Boolean GetIsPause(CSmMlScriptIngame _This) {
	declare netread Boolean Net_TMWTCommon_Shared_IsPause for _This.Teams[0] = False;
	return Net_TMWTCommon_Shared_IsPause;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Set the rank of the player in the race
Void SetLiveRank(CSmScore _Score, Integer _Rank) {
	declare Integer TMWTCommon_Shared_Rank for _Score = -1;
	TMWTCommon_Shared_Rank = _Rank;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the rank of the player in the race
Integer GetLiveRank(CSmScore _Score) {
	declare Integer TMWTCommon_Shared_Rank for _Score = -1;
	return TMWTCommon_Shared_Rank;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Signal a live ranking update
Void SignalLiveRankingUpdate(CMlScript _This) {
	declare Integer TMWTCommon_Shared_LiveRankingUpdate for _This = 0;
	TMWTCommon_Shared_LiveRankingUpdate += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the live ranking was updated
Integer GetLiveRankingUpdate(CMlScript _This) {
	declare Integer TMWTCommon_Shared_LiveRankingUpdate for _This = 0;
	return TMWTCommon_Shared_LiveRankingUpdate;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Format a time
Text GetShortTime(Integer _Time, Boolean _Full) {
	if (_Full) {
		return TL::TimeToText(_Time, True, True);
	}
	return TL::FormatReal(_Time / 1000., 3, False, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Spectate a specifig player
Void SpectateLogin(CMlScriptIngame _This, Text _Login) {
	_This.ClientUI.Spectator_SetForcedTarget_Clear();
	_This.SetSpectateTarget(_Login);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if a player is spectating
Boolean IsSpectating(Boolean _IsSpectatorClient, CSmPlayer _InputPlayer) {
	return (
		_IsSpectatorClient ||
		(_InputPlayer != Null && _InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)
	);
}
Boolean IsSpectating(CSmMlScriptIngame _This) {
	return IsSpectating(_This.IsSpectatorClient, _This.InputPlayer);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the match info to the clients
Void SetMatchInfo(CSmMode _This, Text _MatchInfo) {
	declare netwrite Text Net_TMWTCommon_Shared_MatchInfo for _This.Teams[0] = "";
	Net_TMWTCommon_Shared_MatchInfo = _MatchInfo;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the match info
Text GetMatchInfo(CSmMlScriptIngame _This) {
	declare netread Text Net_TMWTCommon_Shared_MatchInfo for _This.Teams[0] = "";
	return Net_TMWTCommon_Shared_MatchInfo;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Send the match MVP to the clients
Void SetMVP(CSmMode _This, Text _AccountId) {
	declare netwrite Text Net_TMWTCommon_Shared_MVPAccountId for _This.Teams[0] = "";
	Net_TMWTCommon_Shared_MVPAccountId = _AccountId;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the match MVP
Text GetMVP(CSmMlScriptIngame _This) {
	declare netread Text Net_TMWTCommon_Shared_MVPAccountId for _This.Teams[0] = "";
	return Net_TMWTCommon_Shared_MVPAccountId;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Initialize the values shared from the server
Void Initialize(CSmMode _This) {
	SetIsPause(_This, False);
	SetMatchInfo(_This, "");
	SetMVP(_This, "");
}