/**
 *	Markers for the TMWT modes
 */
#Const Version		"2023-03-13"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Modes/TMWTCommon/TMWTMarkers.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "ManiaApps/Nadeo/TMNext/TrackMania/TMWTCommon/UIModules/TMWTMarkers_Server.Script.txt" as UIModules_TMWTMarkers

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_MarkersRefreshInterval 1000
#Const C_MarkerHideOnSelf True
#Const C_MarkerDistMin 2.

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Integer G_MarkersRefreshTime;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Find a valid marker frame id
Integer Private_GetMarkerFrameId(Integer[Ident] _MarkerFrameIds) {
	declare Integer[Ident] SortedMarkerFrameIds = _MarkerFrameIds.sort();
	declare Integer NewFrameId = 0;
	foreach (FrameId in SortedMarkerFrameIds) {
		if (NewFrameId != FrameId) {
			return NewFrameId;
		} 
		NewFrameId += 1;
	}
	return SortedMarkerFrameIds.count;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Create a marker on a player
CUIConfigMarker Private_CreatePlayerMarker(CSmPlayer _MarkedPlayer) {
	declare CUIConfigMarker Marker = UIManager.UIAll.AddMarker(_MarkedPlayer);
	if (Marker != Null) {
		Marker.Box = <1., 0.5, 1.>;
		Marker.HudVisibility = CUIConfigMarker::EHudVisibility::WhenVisible;
		Marker.MiniMapVisibility = CUIConfigMarker::EMiniMapVisibility::Never;
		Marker.HideOnSelf = C_MarkerHideOnSelf;
		Marker.DistMin = C_MarkerDistMin;
	}
	return Marker;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Destroy a marker on a player
Void Private_DestroyPlayerMarker(Ident _MarkerId) {
	if (UIManager.UIAll.Markers.existskey(_MarkerId)) {
		UIManager.UIAll.RemoveMarker(UIManager.UIAll.Markers[_MarkerId]);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the markers on the UI
 *
 *	@param	_MarkersPlayers						The player with a marker to attach
 */
Void Private_UpdateMarkers(CSmPlayer[Ident] _MarkedPlayers) {
	declare Ident[Ident] TMWTMakers_MarkedPlayerIds for UIManager.UIAll = [];
	declare Integer[Ident] TMWTMakers_MarkerFrameIds for UIManager.UIAll = [];
	
	// Remove markers
	declare Ident[Ident] ToRemove;
	foreach (MarkedPlayerId => MarkerId in TMWTMakers_MarkedPlayerIds) {
		if (!_MarkedPlayers.existskey(MarkedPlayerId)) {
			ToRemove[MarkedPlayerId] = MarkerId;
		}
	}
	foreach (MarkedPlayerId => MarkerId in ToRemove) {
		Private_DestroyPlayerMarker(MarkerId);
		TMWTMakers_MarkedPlayerIds.removekey(MarkedPlayerId);
		if (TMWTMakers_MarkerFrameIds.existskey(MarkerId)) {
			UIModules_TMWTMarkers::RemoveMarkerFrameId(TMWTMakers_MarkerFrameIds[MarkerId]);
		}
		TMWTMakers_MarkerFrameIds.removekey(MarkerId);
	}
	
	// Add markers
	foreach (MarkedPlayer in _MarkedPlayers) {
		if (!TMWTMakers_MarkedPlayerIds.existskey(MarkedPlayer.Id)) {
			declare CUIConfigMarker Marker = Private_CreatePlayerMarker(MarkedPlayer);
			if (Marker != Null) {
				TMWTMakers_MarkedPlayerIds[MarkedPlayer.Id] = Marker.Id;
				
				// Get a frame id for the marker
				declare Integer MarkerFrameId = Private_GetMarkerFrameId(TMWTMakers_MarkerFrameIds);
				TMWTMakers_MarkerFrameIds[Marker.Id] = MarkerFrameId;
				Marker.ManialinkFrameId = "marker-player-"^MarkerFrameId;
				UIModules_TMWTMarkers::SetMarkerFrameId(MarkerFrameId, MarkedPlayer.User.WebServicesUserId);
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Remove all markers created on the UI
Void Private_RemoveAllMarkers() {
	declare Ident[Ident] TMWTMakers_MarkedPlayerIds for UIManager.UIAll = [];
	declare Integer[Ident] TMWTMakers_MarkerFrameIds for UIManager.UIAll = [];
	foreach (MarkerId in TMWTMakers_MarkedPlayerIds) {
		Private_DestroyPlayerMarker(MarkerId);
	}
	TMWTMakers_MarkedPlayerIds = [];
	TMWTMakers_MarkerFrameIds = [];
	UIModules_TMWTMarkers::ResetMarkerFrameIds();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update library
Void Yield() {
	if (G_MarkersRefreshTime >= 0 && Now >= G_MarkersRefreshTime) {
		G_MarkersRefreshTime = Now + C_MarkersRefreshInterval;
		
		// Check if a player joined or spawned/unspawned
		declare Boolean MarkersMustBeUpdated = False;
		foreach (Player in AllPlayers) {
			declare Boolean TMWTMakers_NewPlayer for Player = True;
			declare CSmPlayer::ESpawnStatus TMWTMakers_SpawnStatus for Player = CSmPlayer::ESpawnStatus::NotSpawned;
			if (TMWTMakers_NewPlayer || TMWTMakers_SpawnStatus != Player.SpawnStatus) {
				TMWTMakers_NewPlayer = False;
				TMWTMakers_SpawnStatus = Player.SpawnStatus;
				MarkersMustBeUpdated = True;
			}
		}
		
		if (MarkersMustBeUpdated) {
			// Find all players that must have a marker above them
			declare CSmPlayer[Ident] MarkedPlayers;
			foreach (Player in Players) {
				if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
					MarkedPlayers[Player.Id] = Player;
				}
			}
			
			Private_UpdateMarkers(MarkedPlayers);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Enable or disable the markers
Void Enable(Boolean _Enabled) {
	if (_Enabled) {
		G_MarkersRefreshTime = Now;
	} else {
		G_MarkersRefreshTime = -1;
		
		// Reinitialize players
		foreach (Player in AllPlayers) {
			declare Boolean TMWTMakers_NewPlayer for Player = True;
			declare CSmPlayer::ESpawnStatus TMWTMakers_SpawnStatus for Player = CSmPlayer::ESpawnStatus::NotSpawned;
			TMWTMakers_NewPlayer = True;
			TMWTMakers_SpawnStatus = CSmPlayer::ESpawnStatus::NotSpawned;
		}
		
		Private_RemoveAllMarkers();
	}
}
Void Enable() {
	Enable(True);
}
Void Disable() {
	Enable(False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	Disable();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
}