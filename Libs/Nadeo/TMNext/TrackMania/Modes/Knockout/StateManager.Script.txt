/** 
 *	State manager for the Knockout mode
 */
#Const Version		"2021-06-23"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Modes/Knockout/StateManager.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/ModeLibs/Common/UIModules_Server.Script.txt" as UIModules
#Include "ManiaApps/Nadeo/TMNext/TrackMania/Knockout/UIModules/KnockoutInfo_Server.Script.txt" as UIModules_KnockoutInfo
#Include "ManiaApps/Nadeo/TMNext/TrackMania/TimeAttack/UIModules/BestRaceViewer_Server.Script.txt" as UIModules_BestRaceViewer
#Include "ManiaApps/Nadeo/TMNext/TrackMania/Knockout/UIModules/KnockedOutPlayers_Server.Script.txt" as UIModules_KnockedOutPlayers
#Include "ManiaApps/Nadeo/TMNext/TrackMania/Knockout/UIModules/KnockoutReward_Server.Script.txt" as UIModules_KnockoutReward
#Include "ManiaApps/Nadeo/TMNext/TrackMania/UIModules/EliminationWarning_Server.Script.txt" as UIModules_EliminationWarning
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/RespawnHelper_Server.Script.txt" as UIModules_RespawnHelper

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/*	Enabling this setting will have
 *	a big impact on the script performances
 *	in crowded server. The library
 *	will do a check on every player
 *	of the server on every frame.
 *	If the script respect the convention
 *	to always use MB_Yield() instead of yield;
 *	then it should not have to enforce
 *	the state at each frame. Any new
 *	player will be initialized when
 *	they join the server
 */
#Const C_ForceStatesEveryFrame False

#Const C_State_Waiting 0
#Const C_State_Playing 1

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Integer[] G_ForcedStates;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Integer[] GetForcedStates() {
	return G_ForcedStates;
}

/** Apply the given states to the given player
 *
 *	@param	_Player										The player to update
 *	@param	_States										The states to apply
 */
Void Private_Apply(CPlayer _Player, Integer[] _States) {
	if (_Player == Null) return;

	UIModules_BestRaceViewer::SetVisibility(_Player, False);
	UIModules_KnockoutInfo::SetVisibility(_Player, False);
	UIModules_EliminationWarning::SetVisibility(_Player, False);

	UIModules_KnockoutReward::SetVisibility(_Player, True);
	UIModules_KnockedOutPlayers::SetVisibility(_Player, True);

	foreach (State in _States) {
		switch (State) {
			case C_State_Playing: {
				UIModules_BestRaceViewer::SetVisibility(_Player, True);
				UIModules_KnockoutInfo::SetVisibility(_Player, True);
				UIModules_EliminationWarning::SetVisibility(_Player, True);
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Add a state to a player
 *
 *	@param	_Player										The player to update
 *	@param	_State										The state to add
 */
Void Add(CPlayer _Player, Integer _State) {
	if (_Player == Null) return;
	declare Integer[] LibStateMgr_States for _Player;
	if (!LibStateMgr_States.exists(_State)) {
		LibStateMgr_States.add(_State);
		if (G_ForcedStates.count <= 0) {
			Private_Apply(_Player, LibStateMgr_States);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Remove a state from a player
 *
 *	@param	_Player										The player to update
 *	@param	_State										The state to remove
 */
Void Remove(CPlayer _Player, Integer _State) {
	if (_Player == Null) return;
	declare Integer[] LibStateMgr_States for _Player;
	if (LibStateMgr_States.exists(_State)) {
		declare Removed = LibStateMgr_States.remove(_State);
		if (G_ForcedStates.count <= 0) {
			Private_Apply(_Player, LibStateMgr_States);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Remove all state from a player
 *
 *	@param	_Player										The player to reset
 */
Void Reset(CPlayer _Player) {
	if (_Player == Null) return;
	declare Integer[] LibStateMgr_States for _Player;
	LibStateMgr_States = [];
	if (G_ForcedStates.count <= 0) {
		Private_Apply(_Player, LibStateMgr_States);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if the player has the given state
 *
 *	@param	_Player										The player to check
 *	@param	_State										The state to find
 *
 *	@return														True if the player has the state
 *																		False otherwise
 */
Boolean HasState(CPlayer _Player, Integer _State) {
	if (_Player == Null) return False;

	declare Integer[] LibStateMgr_States for _Player;
	return LibStateMgr_States.exists(_State) || G_ForcedStates.exists(_State);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if the players have the given state as forced
 *
 *	@param	_State										The state to find
 *
 *	@return														True if the players has the state
 *																		False otherwise
 */
Boolean HasForcedState(Integer _State) {
	return G_ForcedStates.exists(_State);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Force the states applied to all players
 *	To disable the forced states use an empty array
 *
 *	@param	_States									The states to force
 */
Void ForcePlayersStates(Integer[] _States) {
	G_ForcedStates = _States;
	
	foreach (Player in AllPlayers) {
		declare Boolean LibStateMgr_IsForcedStates for Player = False;
		// Enable
		if (G_ForcedStates.count > 0) {
			LibStateMgr_IsForcedStates = True;
			Private_Apply(Player, G_ForcedStates);
		}
		// Disable
		else {
			LibStateMgr_IsForcedStates = False;
			declare Integer[] LibStateMgr_States for Player;
			Private_Apply(Player, LibStateMgr_States);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the library
Void Yield() {
	if (C_ForceStatesEveryFrame && G_ForcedStates.count > 0) {
		foreach (Player in AllPlayers) {
			declare Boolean LibStateMgr_IsForcedStates for Player = False;
			if (!LibStateMgr_IsForcedStates) {
				LibStateMgr_IsForcedStates = True;
				Private_Apply(Player, G_ForcedStates);
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Initialize a player
 *
 *	@param	_Player										The player to initialize
 */
Void InitializePlayer(CPlayer _Player) {
	if (_Player == Null) return;
	
	UIModules_KnockoutInfo::InitializePlayer(_Player);
	UIModules_BestRaceViewer::InitializePlayer(_Player);
	UIModules_KnockedOutPlayers::InitializePlayer(_Player);
	UIModules_KnockoutReward::InitializePlayer(_Player);
	UIModules_EliminationWarning::InitializePlayer(_Player);
	
	Reset(_Player);
	
	if (G_ForcedStates.count > 0) {
		declare Boolean LibStateMgr_IsForcedStates for _Player = False;
		LibStateMgr_IsForcedStates = True;
		Private_Apply(_Player, G_ForcedStates);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the library
Void Unload() {
	ForcePlayersStates([]);
	
	foreach (Player in AllPlayers) {
		InitializePlayer(Player);
	}
	
	UIModules_EliminationWarning::Unload();
	UIModules_KnockoutReward::Unload();
	UIModules_KnockedOutPlayers::Unload();
	UIModules_BestRaceViewer::Unload();
	UIModules_KnockoutInfo::Unload();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the library
Void Load() {
	Unload();
	
	UIModules_KnockoutInfo::Load();
	UIModules_BestRaceViewer::Load();
	UIModules_KnockedOutPlayers::Load();
	UIModules_KnockoutReward::Load();
	UIModules_EliminationWarning::Load();
	
	UIModules::InitializeCustomizableModule(UIModules_KnockoutInfo::GetConfig());
	UIModules::InitializeCustomizableModule(UIModules_BestRaceViewer::GetConfig());
	UIModules::InitializeCustomizableModule(UIModules_EliminationWarning::GetConfig());
	
	UIModules::LoadModules([
		UIModules_KnockoutInfo::GetId(),
		UIModules_BestRaceViewer::GetId(),
		UIModules_KnockedOutPlayers::C_Id,
		UIModules_KnockoutReward::C_Id,
		UIModules_EliminationWarning::GetId()
	]);

	UIModules::UnloadModules([
		UIModules_RespawnHelper::GetId()
	]);

	UIModules_EliminationWarning::SetGameMode(UIModules_EliminationWarning::C_GameMode_Knockout);
}