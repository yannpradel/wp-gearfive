/**
 *	Structures for Clubs
 */
#Const Version		"2023-04-06"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ComponentName "structures-club"
#Const P "LibStructuresClub_"

#Const C_ClubNullId 0 //< Same value as in the LIVE database
#Const C_ActivityNullId 0 //< Same value as in the LIVE database
#Const C_ClubRoleNone ""
#Const C_AccountNullId ""
#Const C_RoomNullId 0

//!\\ These values must be the same in the API from LIVE //!\\
#Const C_ClubActivity_Campaign "campaign"
#Const C_ClubActivity_Room "room"
#Const C_ClubActivity_MapReview "map-review"
#Const C_ClubActivity_MapUpload "map-upload"
#Const C_ClubActivity_SkinUpload "skin-upload"
#Const C_ClubActivity_ItemUpload "item-upload"
#Const C_ClubActivity_Competition "competition"
#Const C_ClubActivity_News "news"
#Const C_ClubActivity_RankingOfficial "ranking-official"
#Const C_ClubActivity_RankingDaily "ranking-daily"
#Const C_ClubActivity_RankingClub "ranking-club"
#Const C_ClubActivity_Ad "ad"
#Const C_ClubActivity_Team "team"

#Const C_ClubActivity_DisplayNames [
	"campaign" => _("Campaign"),
	"room" => _("Room"),
	"map-review" => _("Track review"),
	"map-upload" => _("Track uploads"),
	"skin-upload" => _("Skin uploads"),
	"item-upload" => _("Item collection"),
	"news" => _("News"),
	"competition" => _("Competition"),
	//L16N Name of the activity to display the rankings on the official campaign in a club
	"ranking-official" => _("Official rankings"),
	//L16N Name of the activity to display the rankings on the daily track in a club
	"ranking-daily" => _("Daily rankings"),
	//L16N Name of the activity to display the rankings on a campaign of the club in a club
	"ranking-club" => _("Rankings"),
	//L16N Name of the activity of an advertisement in a club
	"ad" => _("|ActivityType|Advertisement"),
	//L16N Name of the activity of a team in a club
	"team"=> _("|ActivityType|Team")
]

#Const C_ClubActivity_FeaturedAd [
	//L16N Message displayed to highlight the featured club activity. In this case it's a campaign, %1 will be replaced by the activity's name. e.g "Play the new 'Fall 2022' campaign!"
	"campaign" => _("Play the new '$<%1$>' campaign!"),
	//L16N Message displayed to highlight the featured club activity. In this case it's a room, %1 will be replaced by the activity's name. e.g "Play online in the new'Best Circuits' room!"
	"room" => _("Play online in the new '$<%1$>' room!"),
	//L16N Message displayed to highlight the featured club activity. In this case it's a track review, %1 will be replaced by the activity's name. e.g "Review tracks in 'F'uture Campaign'!"
	"map-review" => _("Review tracks in '$<%1$>'!"),
	//L16N Message displayed to highlight the featured club activity. In this case it's a tracks upload, %1 will be replaced by the activity's name. e.g "Let's see the 'Nadeo' tracks!"
	"map-upload" => _("Let's see the new '$<%1$>' tracks!"),
	//L16N Message displayed to highlight the featured club activity. In this case it's a skins upload, %1 will be replaced by the activity's name. e.g "Let's see the new 'Origins' skins!"
	"skin-upload" => _("Let's see the new '$<%1$>' skins!"),
	//L16N Message displayed to highlight the featured club activity. In this case it's an item collection, %1 will be replaced by the activity's name. e.g "Check the new 'Italia collection'!"
	"item-upload" => _("Check the new '$<%1$>' collection!"),
	//L16N Message displayed to highlight the featured club activity. In this case it's a news, %1 will be replaced by the activity's name. e.g "Check this news 'Competition starts today'!"
	"news" => _("Check this news '$<%1$>'!"),
	//L16N Message displayed to highlight the featured club activity. In this case it's a competition, %1 will be replaced by the activity's name. e.g "Participate in the new 'OGL' competition!"
	"competition" => _("Participate in the new '$<%1$>' competition!"),
	//L16N Message displayed to highlight the featured club activity. In this case it's a ranking, %1 will be replaced by the activity's name. e.g "Go see 'Fall 2020' ranking!"
	"ranking-official" => _("Go see '$<%1$>' ranking!"),
	//L16N Message displayed to highlight the featured club activity. In this case it's a ranking, %1 will be replaced by the activity's name. e.g "Go see 'Fall 2020' ranking!"
	"ranking-daily" => _("Go see '$<%1$>' ranking!"),
	//L16N Message displayed to highlight the featured club activity. In this case it's a ranking, %1 will be replaced by the activity's name. e.g "Go see 'Fall 2020' ranking!"
	"ranking-club" => _("Go see '$<%1$>' ranking!"),
	//L16N Message displayed to highlight the featured club activity. In this case it's an ad, %1 will be replaced by the activity's name. e.g "Check the new 'Big event coming'!"
	"ad" => _("Check the new '$<%1$>'!")	
]

// List of activities that are possible to add in a club
#Const C_ChoiceList_AddActivity [
	"campaign" => _("Campaign"),
	//L16N Club servers for members to play the club's campaigns
	"room" => _("Room"),
	"skin-upload" => _("Skin uploads"),
	"map-upload" => _("Track uploads"),
	//L16N Club activity to create a track review
	"map-review" => _("Track review"),
	//L16N Club activity to share news
	"news" => _("News"),
	"competition" => _("Competition"),
	//L16N Club activity to dislay rankings on a given campaign
	"ranking-club" => _("Rankings"),
	"item-upload" => _("Item collection"),
	//L16N Name of the activity of an advertisement in a club
	"ad" => _("|ActivityType|Advertisement"),
	//L16N Name of the activity of a team in a club
	"team" => _("|ActivityType|Team")
]

#Const C_CreateAdvertisement_Link "/clubs/{ClubId}/maniapubs/create"
#Const C_CreateTeam_Link "/clubs/{ClubId}/teams/create"
#Const C_DisplayTeam_Link "/clubs/{ClubId}/teams/{ActivityId}"
#Const C_ActivityLink_ToReplace_ClubId "{ClubId}"
#Const C_ActivityLink_ToReplace_ActivityId "{ActivityId}"
#Const C_CreateCompetition_Link "/create/competition"

// Club privacy state
//!\\ These values must be the same in the API from LIVE //!\\
#Const C_ClubState_Public "public"
#Const C_ClubState_PrivateOpen "private-open"
#Const C_ClubState_PrivateClosed "private-closed"

// Club assets
//!\\ These values must be the same in the API from LIVE //!\\
#Const C_MediaType_Icon "icon"
#Const C_MediaType_Decal "decal"
#Const C_MediaType_Bg "background"
#Const C_MediaType_Vertical "vertical"
#Const C_MediaType_DecalSponsor "decal_sponsor_4x1"
#Const C_MediaType_Screen16x9 "screen_16x9"
#Const C_MediaType_Screen8x1 "screen_8x1"
#Const C_MediaType_Screen16x1 "screen_16x1"
#Const C_MediaType_Translations [ //< CAREFUL ! Can't copy directly C_MediaType so rewrite here, ex : C_MediaType_Icon -> "icon"
	"icon" => _("|ImageType|Icon"), 
	"decal" => _("|ImageType|Decal"), 
	"background" => _("|ImageType|Background"), 
	"vertical" => _("|ImageType|Vertical"), 
	"decal_sponsor_4x1" => _("|ImageType|Decal sponsor"), 
	"screen_16x9" => _("|ImageType|Screen 16x9"), 
	"screen_8x1" => _("|ImageType|Screen 8x1"), 
	"screen_16x1" => _("|ImageType|Screen 16x1")
]

#Const C_ClubThemes_Path "Media/OfficialThemes"
#Const C_ClubThemes_DisplayNames [
	//L16N Name of the animals theme that can be selected when creating or editing a club.
	"animals" => _("|Club Theme|Animals"),
	//L16N Name of the food theme that can be selected when creating or editing a club.
	"food" => _("|Club Theme|Food"),
	//L16N Name of the full speed theme that can be selected when creating or editing a club.
	"fullSpeed" => _("|Club Theme|Full speed"),
	//L16N Name of the manga theme that can be selected when creating or editing a club.
	"manga" => _("|Club Theme|Manga"),
	//L16N Name of the racing theme that can be selected when creating or editing a club.
	"racing" => _("|Club Theme|Racing"),
	//L16N Name of the space theme that can be selected when creating or editing a club.
	"space" => _("|Club Theme|Space"),
	//L16N Name of the industrial revolution theme that can be selected when creating or editing a club.
	"industrialRevolution" => _("|Club Theme|Industrial Revolution"),
	"valhalla" => "Valhalla",
	"rabbids" => "Rabbids",
	"hungry" => "Hungry",
	"honor" => "Honor",
	"crew" => "Crew",
	"division" => "Division",
	"justDance" => "Just Dance"
]
#Const C_ClubThemes_Folders [
	"animals" => "/Animals",
	"food" => "/Food",
	"fullSpeed" => "/FullSpeed",
	"manga" => "/Manga",
	"racing" => "/Racing",
	"space" => "/Space",
	"industrialRevolution" => "/IndustrialRevolution",
	"valhalla" => "/Valhalla",
	"rabbids" => "/Rabbids",
	"hungry" => "/Hungry",
	"honor" => "/Honor",
	"crew" => "/Crew",
	"division" => "/Division",
	"justDance" => "/JustDance"
]
#Const C_ClubThemes_Files [
	"decal" => "/1x1.dds",
	"screen_8x1" => "/8x1.dds",
	"screen_16x1" => "/16x1.dds",
	"screen_16x9" => "/16x9.dds",
	"background" => "/Background.dds",
	"icon" => "/Icon.dds",
	"vertical" => "/Vertical.dds"
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct LibStructuresClub_K_Member {
	Text AccountId;
	Text DisplayName;
	Text Role;
	Integer JoinDate;
	Boolean VIP;
	Boolean Moderator;
	Boolean HasFeatured;
}

#Struct LibStructuresClub_K_Activity {
	Integer Id; //< Id of the activity (can be a room Id)
	Integer ClubId;
	Text Name;
	Text Type;
	Integer ExternalId; //< Id of the campaign
	Integer Position;
	Boolean Public;
	Boolean Active;
	Text MediaUrl;
	Boolean Password;
	Boolean Featured;
	Text CreatorAccountId;
	Text LatestEditorAccountId;
}

#Struct LibStructuresClub_K_Club {
	Integer Id;
	Text Name;
	Text Tag;
	Text Description;
	Text AuthorAccountId;
	Integer CreationTimestamp;
	Integer EditionTimestamp;
	Text IconUrl;
	Text LogoUrl;
	Text DecalUrl;
	Text BgUrl;
	Text VerticalUrl;
	Text DecoImageUrl_DecalSponsor4x1;
	Text DecoImageUrl_Screen16x9;
	Text DecoImageUrl_Screen8x1;
	Text DecoImageUrl_Screen16x1;
	Text PrivacyState;
	Integer PopularityLevel;
	LibStructuresClub_K_Member[][Text][Text] VIPListOnMap; //< First Key is SeasonId, second Key is MapUid, Value is the list of VIP (as members)
	LibStructuresClub_K_Activity FeaturedActivity;
}

#Struct LibStructuresClub_K_ScriptSetting {
	Text Key;
	Text Value;
	Text Type;
}

#Struct LibStructuresClub_K_ServerInfo {
	Text JoinLink;
	Integer PlayerCount;
	Text CurrentMapUid;
	Boolean IsStarting;
}

#Struct LibStructuresClub_K_Room {
	Integer Id;
	Integer RoomId;
	Integer ClubId;
	Text ClubName;
	Integer ActivityId;
	Boolean IsHostedByNadeo;
	Text PlayerServerLogin;
	Text ServerAccountId;
	Text Name;
	Text Region;
	Integer MaxPlayers;
	Text ScriptName;
	Integer CampaignId;
	Text[] MapUids;
	Text MediaUrl;
	Integer PopularityLevel;
	Integer CreationTimestamp;
	Boolean Scalable;
	Boolean HasPassword;
	LibStructuresClub_K_ScriptSetting[] ScriptSettings;
	LibStructuresClub_K_ServerInfo ServerInfo;
	Text CreatorAccountId;
	Text LatestEditorAccountId;
}

#Struct LibStructuresClub_K_BucketItem {
	Text ItemId;
	Integer Position;
	Text Description;
	Text[] MediaUrls;
}

#Struct LibStructuresClub_K_BucketActivity {
	Integer Id;
	Text Type;
	Text Name;
	Text ClubName;
	Text MediaUrl;
	Integer ClubId;
	Integer CreationTimestamp;
	LibStructuresClub_K_BucketItem[] BucketItemList;
	Integer BucketItemCount;
	Integer PopularityLevel;
	Integer PopularityValue;
	Text CreatorAccountId;
	Text LatestEditorAccountId;
}

#Struct LibStructuresClub_K_Skin {
	Text Id;
	Text Type;
	Text Name;
	Text DisplayName;
	Text CreatorAccountId;
	Text CreatorDisplayName;
	Boolean CreatorIsFirstPartyDisplayName;
	Text FileName;
	Text FileUrl;
	Text ThumbnailUrl;
	Integer TimeStamp;
	Boolean IsFavorite;
	Boolean IsUsed;
	Text PrestigeOptions;
	Text CharacterOptions;
}

#Struct LibStructuresClub_K_News {
	Integer Id;
	Text Headline;
	Text Body;
	Text MediaUrl;
	Integer ClubId;
	Text Name;
	Integer CreationTimestamp;
}

#Struct LibStructuresClub_K_MapReview {
	LibStructuresClub_K_Activity Activity;
	Text ClubName;
	Integer TimeLimit;
	Boolean Scalable;
	Integer MaxPlayer;
	Boolean AllowVoteSkipMap;
	Boolean Public;
	Text Game2WebUrl;
	Boolean SubmissionLimitation;
	Integer PopularityValue;
	Integer PopularityValueBonus;
	Integer PopularityLevel;
	Integer PlayerCount;
	Integer SubmittedMapCount;
	Integer CreationTimestamp;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the updated C_ChoiceList_AddActivity
Text[Text] GetChoiceListAddActivity() {
	declare Text[Text] ChoiceListAddActivity = C_ChoiceList_AddActivity;
	if (Platform::IsFromFirstParty(System)) {
		ChoiceListAddActivity.removekey(C_ClubActivity_ItemUpload);
		ChoiceListAddActivity.removekey(C_ClubActivity_Competition);
		ChoiceListAddActivity.removekey(C_ClubActivity_Ad);
		ChoiceListAddActivity.removekey(C_ClubActivity_Team);
	} else {
		// Adding an arrow symbol to show that it's an outside of the game activity
		ChoiceListAddActivity[C_ClubActivity_Competition] = TL::Compose("%1 ", ChoiceListAddActivity[C_ClubActivity_Competition]);
		ChoiceListAddActivity[C_ClubActivity_Ad] = TL::Compose("%1 ", ChoiceListAddActivity[C_ClubActivity_Ad]);
		ChoiceListAddActivity[C_ClubActivity_Team] = TL::Compose("%1 ", ChoiceListAddActivity[C_ClubActivity_Team]);
	}
	return ChoiceListAddActivity;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Determine if the given theme name exists or not
Boolean IsClubThemeName(Text _ThemeName) {
	return C_ClubThemes_Folders.existskey(_ThemeName);
}

/// Determine if the given url is a club theme url or not
Boolean IsClubThemeUrl(Text _MediaUrl) {
	if (!TL::StartsWith("file://"^C_ClubThemes_Path, _MediaUrl)) return False;
	return C_ClubThemes_Folders.exists("/"^TL::Split("/", TL::Replace(_MediaUrl, "\\", "/"))[-2]);
}

/// Get the name of the club theme associated to the given url
Text GetClubThemeName(Text _MediaUrl) {
	if (!IsClubThemeUrl(_MediaUrl)) return _MediaUrl;
	return C_ClubThemes_Folders.keyof("/"^TL::Split("/", TL::Replace(_MediaUrl, "\\", "/"))[-2]);
}

/// Get the formatted url of a club theme given the name and the media type
Text GetClubThemeUrl(Text _ThemeName, Text _MediaType) {
	if (!IsClubThemeName(_ThemeName) || !C_ClubThemes_Files.existskey(_MediaType)) return "";
	return "file://"^C_ClubThemes_Path^C_ClubThemes_Folders[_ThemeName]^C_ClubThemes_Files[_MediaType];
}

/// Get the media url corresponding to the given media type
Text GetMediaFromType(LibStructuresClub_K_Club _Club, Text _MediaType) {
	declare Text MediaUrl;

	switch (_MediaType) {
		case C_MediaType_Icon: MediaUrl = _Club.IconUrl;
		case C_MediaType_Vertical: MediaUrl = _Club.VerticalUrl;
		case C_MediaType_Bg: MediaUrl = _Club.BgUrl;
		case C_MediaType_Decal: MediaUrl = _Club.DecalUrl;
		case C_MediaType_DecalSponsor: MediaUrl = _Club.DecoImageUrl_DecalSponsor4x1;
		case C_MediaType_Screen16x9: MediaUrl = _Club.DecoImageUrl_Screen16x9;
		case C_MediaType_Screen16x1: MediaUrl = _Club.DecoImageUrl_Screen16x1;
		case C_MediaType_Screen8x1: MediaUrl = _Club.DecoImageUrl_Screen8x1;
	}

	return MediaUrl;
}

/// Check if there is at least one asset in the club
Boolean IsAnyAssetSelected(LibStructuresClub_K_Club _Club) {
	foreach (MediaType => MediaTranslation in C_MediaType_Translations) {
		if (GetMediaFromType(_Club, MediaType) != "") {
			return True;
		}
	}

	return False;
}

/// Check if there is at least one theme selected among the different club assets
Boolean IsAnyThemeSelected(LibStructuresClub_K_Club _Club) {
	foreach (MediaType => MediaTranslation in C_MediaType_Translations) {
		declare Text MediaUrl = GetMediaFromType(_Club, MediaType);
		if (TL::StartsWith("file://"^C_ClubThemes_Path, MediaUrl)) {
			MediaUrl = C_ClubThemes_Folders.keyof("/"^TL::Split("/", MediaUrl)[-2]);
		}
		if (C_ClubThemes_Folders.existskey(MediaUrl)) {
			return True;
		}
	}

	return False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the manialink component
Text Component() {
	return MV::Component(
		C_ComponentName,
		"""
		""",
		"""
#Include "TextLib" as {{{P}}}TL

#Const {{{P}}}C_ClubNullId {{{dump(C_ClubNullId)}}}
#Const {{{P}}}C_AccountNullId {{{dump(C_AccountNullId)}}}
#Const {{{P}}}C_ActivityNullId {{{dump(C_ActivityNullId)}}}
#Const {{{P}}}C_ClubRoleNone {{{dump(C_ClubRoleNone)}}}
#Const {{{P}}}C_RoomNullId {{{dump(C_RoomNullId)}}}

#Const {{{P}}}C_ClubActivity_Campaign {{{dump(C_ClubActivity_Campaign)}}}
#Const {{{P}}}C_ClubActivity_Room {{{dump(C_ClubActivity_Room)}}}
#Const {{{P}}}C_ClubActivity_MapUpload {{{dump(C_ClubActivity_MapUpload)}}}
#Const {{{P}}}C_ClubActivity_MapReview {{{dump(C_ClubActivity_MapReview)}}}
#Const {{{P}}}C_ClubActivity_SkinUpload {{{dump(C_ClubActivity_SkinUpload)}}}
#Const {{{P}}}C_ClubActivity_ItemUpload {{{dump(C_ClubActivity_ItemUpload)}}}
#Const {{{P}}}C_ClubActivity_Competition {{{dump(C_ClubActivity_Competition)}}}
#Const {{{P}}}C_ClubActivity_News {{{dump(C_ClubActivity_News)}}}
#Const {{{P}}}C_ClubActivity_RankingOfficial {{{dump(C_ClubActivity_RankingOfficial)}}}
#Const {{{P}}}C_ClubActivity_RankingDaily {{{dump(C_ClubActivity_RankingDaily)}}}
#Const {{{P}}}C_ClubActivity_RankingClub {{{dump(C_ClubActivity_RankingClub)}}}
#Const {{{P}}}C_ClubActivity_Ad {{{dump(C_ClubActivity_Ad)}}}
#Const {{{P}}}C_ClubActivity_Team {{{dump(C_ClubActivity_Team)}}}

#Const {{{P}}}C_ClubActivity_DisplayNames {{{dump(C_ClubActivity_DisplayNames)}}}
#Const {{{P}}}C_ClubActivity_FeaturedAd {{{dump(C_ClubActivity_FeaturedAd)}}}

#Const {{{P}}}C_ClubState_Public {{{dump(C_ClubState_Public)}}}
#Const {{{P}}}C_ClubState_PrivateOpen {{{dump(C_ClubState_PrivateOpen)}}}
#Const {{{P}}}C_ClubState_PrivateClosed {{{dump(C_ClubState_PrivateClosed)}}}

#Const {{{P}}}C_MediaType_Icon {{{dump(C_MediaType_Icon)}}}
#Const {{{P}}}C_MediaType_Decal {{{dump(C_MediaType_Decal)}}}
#Const {{{P}}}C_MediaType_Bg {{{dump(C_MediaType_Bg)}}}
#Const {{{P}}}C_MediaType_Vertical {{{dump(C_MediaType_Vertical)}}}
#Const {{{P}}}C_MediaType_DecalSponsor {{{dump(C_MediaType_DecalSponsor)}}}
#Const {{{P}}}C_MediaType_Screen16x9 {{{dump(C_MediaType_Screen16x9)}}}
#Const {{{P}}}C_MediaType_Screen8x1 {{{dump(C_MediaType_Screen8x1)}}}
#Const {{{P}}}C_MediaType_Screen16x1 {{{dump(C_MediaType_Screen16x1)}}}
#Const {{{P}}}C_MediaType_Translations {{{dump(C_MediaType_Translations)}}}
#Const {{{P}}}C_ClubThemes_Path {{{dump(C_ClubThemes_Path)}}}
#Const {{{P}}}C_ClubThemes_DisplayNames {{{dump(C_ClubThemes_DisplayNames)}}}
#Const {{{P}}}C_ClubThemes_Folders {{{dump(C_ClubThemes_Folders)}}}
#Const {{{P}}}C_ClubThemes_Files {{{dump(C_ClubThemes_Files)}}}

#Const {{{P}}}C_ChoiceList_AddActivity {{{dump(GetChoiceListAddActivity())}}}

#Const {{{P}}}C_CreateAdvertisement_Link {{{dump(C_CreateAdvertisement_Link)}}}
#Const {{{P}}}C_CreateTeam_Link {{{dump(C_CreateTeam_Link)}}}
#Const {{{P}}}C_DisplayTeam_Link {{{dump(C_DisplayTeam_Link)}}}
#Const {{{P}}}C_ActivityLink_ToReplace_ClubId {{{dump(C_ActivityLink_ToReplace_ClubId)}}}
#Const {{{P}}}C_ActivityLink_ToReplace_ActivityId {{{dump(C_ActivityLink_ToReplace_ActivityId)}}}
#Const {{{P}}}C_CreateCompetition_Link {{{dump(C_CreateCompetition_Link)}}}

{{{dumptype(LibStructuresClub_K_Member)}}}
{{{dumptype(LibStructuresClub_K_Activity)}}}
{{{dumptype(LibStructuresClub_K_Club)}}}
{{{dumptype(LibStructuresClub_K_ScriptSetting)}}}
{{{dumptype(LibStructuresClub_K_ServerInfo)}}}
{{{dumptype(LibStructuresClub_K_Room)}}}
{{{dumptype(LibStructuresClub_K_BucketItem)}}}
{{{dumptype(LibStructuresClub_K_BucketActivity)}}}
{{{dumptype(LibStructuresClub_K_Skin)}}}
{{{dumptype(LibStructuresClub_K_News)}}}
{{{dumptype(LibStructuresClub_K_MapReview)}}}
		""",
		"""
{{{P}}}K_Club {{{P}}}GetEmptyClub() {
	return {{{P}}}K_Club {
		Id = {{{P}}}C_ClubNullId,
		Name = "",
		Tag = "",
		IconUrl = "",
		LogoUrl = "",
		DecalUrl = "",
		BgUrl = "",
		VerticalUrl = "",
		DecoImageUrl_DecalSponsor4x1 = "",
		DecoImageUrl_Screen16x9 = "",
		DecoImageUrl_Screen8x1 = "",
		DecoImageUrl_Screen16x1 = "",
		PrivacyState = {{{P}}}C_ClubState_Public,
		PopularityLevel = {{{Const::C_PopularityLevel_None}}}
	};
}

{{{P}}}K_Skin {{{P}}}GetSkinFromNSSkin(CNadeoServicesSkin _NSSkin, Boolean _IsFavorite, Boolean _IsUsed) {
	return {{{P}}}K_Skin {
		Id = _NSSkin.Id,
		Type = _NSSkin.Type,
		Name = _NSSkin.Name,
		DisplayName = _NSSkin.DisplayName,
		CreatorAccountId = _NSSkin.CreatorAccountId,
		CreatorDisplayName = _NSSkin.CreatorDisplayName,
		CreatorIsFirstPartyDisplayName = _NSSkin.CreatorIsFirstPartyDisplayName,
		FileName = _NSSkin.FileName,
		FileUrl = _NSSkin.FileUrl,
		ThumbnailUrl = _NSSkin.ThumbnailUrl,
		TimeStamp = _NSSkin.TimeStamp,
		IsFavorite = _IsFavorite,
		IsUsed = _IsUsed
	};
}
{{{P}}}K_Skin {{{P}}}GetSkinFromNSSkin(CNadeoServicesSkin _NSSkin) {
	return {{{P}}}GetSkinFromNSSkin(_NSSkin, False, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the display name of a club activity
Text {{{P}}}GetActivityDisplayName(Text _ActivityType) {
	return {{{P}}}C_ClubActivity_DisplayNames.get(_ActivityType, "");
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty member structure
{{{P}}}K_Member {{{P}}}GetEmptyMember() {
	return {{{P}}}K_Member {
		AccountId = {{{P}}}C_AccountNullId,
		Role = {{{P}}}C_ClubRoleNone,
		JoinDate = 0
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty activity structure
{{{P}}}K_Activity {{{P}}}GetEmptyActivity() {
	return {{{P}}}K_Activity {
		Id = {{{P}}}C_ActivityNullId
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Determine if the given theme name exists or not
Boolean {{{P}}}IsClubThemeName(Text _ThemeName) {
	return {{{P}}}C_ClubThemes_Folders.existskey(_ThemeName);
}

/// Determine if the given url is a club theme url or not
Boolean {{{P}}}IsClubThemeUrl(Text _MediaUrl) {
	if (!{{{P}}}TL::StartsWith("file://"^{{{P}}}C_ClubThemes_Path, _MediaUrl)) return False;
	return {{{P}}}C_ClubThemes_Folders.exists("/"^{{{P}}}TL::Split("/", {{{P}}}TL::Replace(_MediaUrl, "\\", "/"))[-2]);
}

/// Get the formatted url of a club theme given the name and the media type
Text {{{P}}}GetClubThemeName(Text _MediaUrl) {
	if (!{{{P}}}IsClubThemeUrl(_MediaUrl)) return _MediaUrl;
	return {{{P}}}C_ClubThemes_Folders.keyof("/"^{{{P}}}TL::Split("/", {{{P}}}TL::Replace(_MediaUrl, "\\", "/"))[-2]);
}

/// Get the formatted url of a club theme given the name and the media type
Text {{{P}}}GetClubThemeUrl(Text _ThemeName, Text _MediaType) {
	if (!{{{P}}}IsClubThemeName(_ThemeName) || !{{{P}}}C_ClubThemes_Files.existskey(_MediaType)) return "";
	return "file://"^{{{P}}}C_ClubThemes_Path^{{{P}}}C_ClubThemes_Folders[_ThemeName]^{{{P}}}C_ClubThemes_Files[_MediaType];
}

/// Get the media url corresponding to the given media type
Text {{{P}}}GetMediaFromType({{{P}}}K_Club _Club, Text _MediaType) {
	declare Text MediaUrl;

	switch (_MediaType) {
		case {{{P}}}C_MediaType_Icon: MediaUrl = _Club.IconUrl;
		case {{{P}}}C_MediaType_Vertical: MediaUrl = _Club.VerticalUrl;
		case {{{P}}}C_MediaType_Bg: MediaUrl = _Club.BgUrl;
		case {{{P}}}C_MediaType_Decal: MediaUrl = _Club.DecalUrl;
		case {{{P}}}C_MediaType_DecalSponsor: MediaUrl = _Club.DecoImageUrl_DecalSponsor4x1;
		case {{{P}}}C_MediaType_Screen16x9: MediaUrl = _Club.DecoImageUrl_Screen16x9;
		case {{{P}}}C_MediaType_Screen16x1: MediaUrl = _Club.DecoImageUrl_Screen16x1;
		case {{{P}}}C_MediaType_Screen8x1: MediaUrl = _Club.DecoImageUrl_Screen8x1;
	}

	return MediaUrl;
}

/// Check if there is at least one asset in the club
Boolean {{{P}}}IsAnyAssetSelected({{{P}}}K_Club _Club) {
	foreach (MediaType => MediaTranslation in {{{P}}}C_MediaType_Translations) {
		if ({{{P}}}GetMediaFromType(_Club, MediaType) != "") {
			return True;
		}
	}

	return False;
}

/// Check if there is at least one theme selected among the different club assets
Boolean {{{P}}}IsAnyThemeSelected({{{P}}}K_Club _Club) {
	foreach (MediaType => MediaTranslation in {{{P}}}C_MediaType_Translations) {
		declare Text MediaUrl = {{{P}}}GetMediaFromType(_Club, MediaType);
		if ({{{P}}}TL::StartsWith("file://"^{{{P}}}C_ClubThemes_Path, MediaUrl)) {
			MediaUrl = {{{P}}}C_ClubThemes_Folders.keyof("/"^{{{P}}}TL::Split("/", MediaUrl)[-2]);
		}
		if ({{{P}}}C_ClubThemes_Folders.existskey(MediaUrl)) {
			return True;
		}
	}

	return False;
}
		""",
[],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty club structure
LibStructuresClub_K_Club GetEmptyClub() {
	return LibStructuresClub_K_Club {
		Id = C_ClubNullId,
		Name = "",
		Tag = "",
		IconUrl = "",
		LogoUrl = "",
		DecalUrl = "",
		BgUrl = "",
		VerticalUrl = "",
		DecoImageUrl_DecalSponsor4x1 = "",
		DecoImageUrl_Screen16x9 = "",
		DecoImageUrl_Screen8x1 = "",
		DecoImageUrl_Screen16x1 = "",
		PrivacyState = C_ClubState_Public,
		PopularityLevel = Const::C_PopularityLevel_None
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty member structure
LibStructuresClub_K_Member GetEmptyMember() {
	return LibStructuresClub_K_Member {
		AccountId = C_AccountNullId,
		Role = C_ClubRoleNone,
		JoinDate = 0
	};
}