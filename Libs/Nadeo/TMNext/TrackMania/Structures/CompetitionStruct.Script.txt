/**
 *	Structures for Competition
 */
#Const Version		"2023-04-03"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Structures/CompetitionStruct.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ComponentName "structures-competition"
#Const P "LibStructuresCompetition_"

#Const C_Competition_NullId 0
#Const C_QualifierChallenge_NullId 0
#Const C_Round_NullId 0
#Const C_Match_NullId 0
#Const C_NullPlayerId ""
#Const C_ScoreUnit_Point "point"
#Const C_ScoreUnit_Time "time"
#Const C_ScoreUnit_Rank_Only "rank_only"
#Const C_Status_HasMatches "HAS_MATCHES"
#Const C_Status_Completed "COMPLETED"
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct LibStructuresCompetition_K_ScriptSetting {
	Text Name;
	Text Value;
	Text Type;
}

#Struct LibStructuresCompetition_K_Map {
	Text DownloadUrl; 
	Text Id; 
}

#Struct LibStructuresCompetition_K_CreateCompetition {
	Integer ClubId;
	Text Name;
	Text Description;
	Text MatchStartDate;
	Integer MaxPlayersPerMatch;
	Integer MaxPlayers_Total;
	Text ScriptName;
	LibStructuresCompetition_K_Map[] MapUrl;
	Text LogoUrl;
	Text LogoVerticalUrl;
	LibStructuresCompetition_K_ScriptSetting[] ScriptSettings;
	Integer QualifierDuration;
	LibStructuresCompetition_K_Map[] MapsQualify;
}

#Struct LibStructuresCompetition_K_Participant {
	Text AccountId;
}

#Struct LibStructuresCompetition_K_ClubCompetitionShort {
	Text CreatorAccountId;
	Integer ClubId;
	Text ClubName;
	Integer ActivityId;
	Integer MaxPlayers;
	Text Type;
	Text Name;
	Text LogoUrl;
	Text VerticalUrl;
	Integer CompetitionId;
}

#Struct LibStructuresCompetition_K_ClubCompetitionPlayerChallengeServer {
	Integer Position;
	Text JoinLink;
}

#Struct LibStructuresCompetition_K_ClubCompetitionPlayerChallenge {
	Integer Id;
	Text Name;
	Text StartDate;
	Text EndDate;
	Boolean IsCompleted;
	LibStructuresCompetition_K_ClubCompetitionPlayerChallengeServer[] Servers;
}

#Struct LibStructuresCompetition_K_ClubCompetitionRound {
	Integer Id;
	Text Name;
	Integer Position;
	Text Status;
	Text Start;
	Text End;
	Integer NbMatches;
	LibStructuresCompetition_K_ClubCompetitionPlayerChallenge QualifierChallenge;
}

#Struct LibStructuresCompetition_K_ParticipantResult {
	Text AccountId;
	Text DisplayName; 
	Integer Score; 
	Integer Rank;
	Text Zone;
}

#Struct LibStructuresCompetition_K_ParticipantLeaderboardResults {
	Integer CompetitionId;
	Text Zone;
	LibStructuresCompetition_K_ParticipantResult[] Results;
}

#Struct LibStructuresCompetition_K_ClubCompetition {
	Integer ClubId;
	Integer ActivityId;
	Integer CompetitionId;
	Integer LeaderboardId;
	Text Name;
	Text Description;
	Text StartDate;
	Text EndDate;
	Text RegistrationStart;
	Text RegistrationEnd;
	Integer NbPlayers;
	Text RulesUrl;
	Text LogoUrl;
	LibStructuresCompetition_K_Participant Player;
	Text ExternalRegistrationUrl;
	Text CurrentMatchId;
	Text LiveId;
	Text MatchGenerationDate;
	LibStructuresCompetition_K_ClubCompetitionRound[] Rounds;
	LibStructuresCompetition_K_ClubCompetitionPlayerChallenge CurrentQualifierChallenge;
	Text Type;
	Boolean IsRegistrationOngoing;
}

#Struct LibStructuresCompetition_K_ChallengeResults {
	Integer ChallengeId;
	Integer Cardinal;
	Text ScoreUnit;
	LibStructuresCompetition_K_ParticipantResult[] Results;
}

#Struct LibStructuresCompetition_K_Match {
	Integer Id;
	Text Name;
	Text LiveId;
	Boolean IsCompleted;
	Boolean LocalUserParticipation;
}

#Struct LibStructuresCompetition_K_MatchList {
	LibStructuresCompetition_K_Match[] Matches;
}

#Struct LibStructuresCompetition_K_MatchResults {
	Text MatchLiveId;
	Integer RoundPosition;
	LibStructuresCompetition_K_ParticipantResult[] Results;
	Text ScoreUnit;
}

#Struct LibStructuresCompetition_K_PlayerNextMatch {
	Text LiveId;
	Text Name;
	Text JoinLink;
	Boolean IsSpectator;
	Text EndDate;
	Text StartDate;
	Boolean IsCompleted;
	Boolean IsServerStarted;
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the manialink component
Text Component() {
	return MV::Component(
		C_ComponentName,
		"""
		""",
		"""
#Const {{{P}}}C_NullPlayerId {{{dump(C_NullPlayerId)}}}
#Const {{{P}}}C_QualifierChallenge_NullId {{{dump(C_QualifierChallenge_NullId)}}}
#Const {{{P}}}C_Round_NullId {{{dump(C_Round_NullId)}}}
#Const {{{P}}}C_Match_NullId {{{dump(C_Match_NullId)}}}
#Const {{{P}}}C_Competition_NullId {{{dump(C_Competition_NullId)}}}
#Const {{{P}}}C_ScoreUnit_Point {{{dump(C_ScoreUnit_Point)}}}
#Const {{{P}}}C_ScoreUnit_Time {{{dump(C_ScoreUnit_Time)}}}
#Const {{{P}}}C_ScoreUnit_Rank_Only {{{dump(C_ScoreUnit_Rank_Only)}}}
#Const {{{P}}}C_Status_HasMatches {{{dump(C_Status_HasMatches)}}}
#Const {{{P}}}C_Status_Completed {{{dump(C_Status_Completed)}}}

{{{dumptype(LibStructuresCompetition_K_ScriptSetting)}}}
{{{dumptype(LibStructuresCompetition_K_Map)}}}
{{{dumptype(LibStructuresCompetition_K_CreateCompetition)}}}
{{{dumptype(LibStructuresCompetition_K_Participant)}}}
{{{dumptype(LibStructuresCompetition_K_ClubCompetitionPlayerChallengeServer)}}}
{{{dumptype(LibStructuresCompetition_K_ClubCompetitionPlayerChallenge)}}}
{{{dumptype(LibStructuresCompetition_K_ClubCompetitionRound)}}}
{{{dumptype(LibStructuresCompetition_K_ParticipantResult)}}}
{{{dumptype(LibStructuresCompetition_K_ParticipantLeaderboardResults)}}}
{{{dumptype(LibStructuresCompetition_K_ChallengeResults)}}}
{{{dumptype(LibStructuresCompetition_K_ClubCompetition)}}}
{{{dumptype(LibStructuresCompetition_K_ClubCompetitionShort)}}}
{{{dumptype(LibStructuresCompetition_K_Match)}}}
{{{dumptype(LibStructuresCompetition_K_MatchList)}}}
{{{dumptype(LibStructuresCompetition_K_PlayerNextMatch)}}}
{{{dumptype(LibStructuresCompetition_K_MatchResults)}}}
		""",
		"""
{{{P}}}K_CreateCompetition {{{P}}}GetEmptyCompetition() {
	return {{{P}}}K_CreateCompetition {
		Name = "",
		Description = "",
		MatchStartDate = "",
		MaxPlayersPerMatch = 0,
		MaxPlayers_Total = 0,
		ScriptName = "",
		LogoUrl = "",
		LogoVerticalUrl = "",
		MapUrl = [],
		ScriptSettings = [],
		MapsQualify = [],
		QualifierDuration = 0
	};
}

{{{P}}}K_PlayerNextMatch {{{P}}}GetEmptyCompetitionMatch() {
	return {{{P}}}K_PlayerNextMatch {
		LiveId = "",
		Name = "",
		JoinLink = "",
		IsSpectator = False,
		EndDate = "",
		StartDate = "",
		IsCompleted = False,
		IsServerStarted = False
	};
}

{{{P}}}K_ClubCompetition {{{P}}}GetEmptyClubCompetition() {
	return {{{P}}}K_ClubCompetition {
		ClubId = 0,
		ActivityId = 0,
		Name = "",
		Description = "",
		StartDate = "",
		EndDate = "",
		RegistrationStart = "",
		RegistrationEnd = "",
		NbPlayers = 0,
		RulesUrl = "",
		LogoUrl = "",
		ExternalRegistrationUrl = "",
		CurrentMatchId = "",
		MatchGenerationDate = "",
		Rounds = [],
		IsRegistrationOngoing = False
	};
}
		""",
[],
[]
	);
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty competiton structure
LibStructuresCompetition_K_CreateCompetition GetEmptyCompetition() {
	return LibStructuresCompetition_K_CreateCompetition {
		Name = "",
		Description = "",
		MatchStartDate = "",
		MaxPlayersPerMatch = 0,
		MaxPlayers_Total = 0,
		ScriptName = "",
		LogoUrl = "",
		LogoVerticalUrl = "",
		MapUrl = [],
		ScriptSettings = [],
		MapsQualify = [],
		QualifierDuration = 0
	};
}

LibStructuresCompetition_K_PlayerNextMatch GetEmptyCompetitionMatch() {
	return LibStructuresCompetition_K_PlayerNextMatch {
		LiveId = "",
		Name = "",
		JoinLink = "",
		IsSpectator = False,
		EndDate = "",
		StartDate = "",
		IsCompleted = False,
		IsServerStarted = False
	};
}

LibStructuresCompetition_K_ClubCompetition GetEmptyClubCompetition() {
	return LibStructuresCompetition_K_ClubCompetition {
		ClubId = 0,
		ActivityId = 0,
		Name = "",
		Description = "",
		StartDate = "",
		EndDate = "",
		RegistrationStart = "",
		RegistrationEnd = "",
		NbPlayers = 0,
		RulesUrl = "",
		LogoUrl = "",
		ExternalRegistrationUrl = "",
		CurrentMatchId = "",
		LiveId = "",
		MatchGenerationDate = "",
		Rounds = [],
		IsRegistrationOngoing = False
	};
}