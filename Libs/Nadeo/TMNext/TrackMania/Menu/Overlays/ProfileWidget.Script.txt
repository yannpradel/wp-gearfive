/** 
 *	Overlay: Profile widget
 */
#Const Version		"2023-05-10"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ProfileWidget.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PlayerRank.Script.txt" as PlayerRank

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Overlay_ProfileWidget"
#Const C_NavGroupName "navgroup-overlay-profile-widget"
#Const C_NavGroupName_Global "navgroup-overlay-profile-widget-global"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [Profile Overlay] The player did not received a ranking yet
	declare Text Text_Unranked = _("Unranked");
	//L16N [Profile Overlay] %1 will be replaced by the player division in Ranked, e.g "Gold II in Ranked"
	declare Text Text_InRanked = _("%1 in ranked");
	//L16N [Profile Overlay] Displayed when the players have 0 royal victories
	declare Text Text_RoyalVictories0 = _("No Royal victories yet");
	//L16N [Profile Overlay] Displayed the number of royal victories of the player, in this case 1 so "victory" is singular
	declare Text Text_RoyalVictory = _("1 Royal victory");
	//L16N [Profile Overlay] Displayed the number of royal victories of the player, in this case more than 1 so "victory" is plural, e.g "52 Royal victories"
	declare Text Text_RoyalVictories = _("%1 Royal victories");

	declare Vec2 WidgetSize = <109., 14.> * 0.84;
	declare Vec2 FlagSize = <23.2, 14.> * 0.84;

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="label-base" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontRegular}}}" textcolor="FFFFFF" textsize="3"/>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$t$i" textcolor="FFFFFF" textsize="2"/>
	<style class="quad-base" halign="center" valign="center"/>
</stylesheet>
<frame
	id="frame-global"
	z-index="{{{Const::C_ZIndex_ProfileOverlay}}}"
	pos="-104.5 73"
	data-nav-inputs="{{{Const::C_NavInput_ProfileWidget}}}"
	data-nav-targets="_"
	data-nav-selected="1"
	data-nav-group="{{{C_NavGroupName_Global}}}"
	class="{{{Navigation::C_Class}}}"
>
	<frameinstance id="button-profile"
		modelid="{{{Button::C_Name}}}"
		z-index="-1"
		class="{{{Navigation::C_Class}}}"
		data-size="{{{WidgetSize.X}}} {{{WidgetSize.Y}}}"
		data-labelsize="{{{WidgetSize.X * 0.7}}} {{{WidgetSize.Y}}}"
		data-textsize="3."
		data-textitalicslope="0.2"
		data-fitlabel="1."
		data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
		data-texthalign="left"
		data-textxpos="0.27"
		data-textypos="-0.35"
		data-image="{{{Const::C_ImageUrl_Overlay_Widget_BG}}}"
		data-contourimage="{{{Const::C_ImageUrl_Overlay_Widget_Contour}}}"
		data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
		data-contouropacityunfocus=".0"
		data-contouropacityfocus="1."
		data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
		data-textcolor="FFF"
		data-halign="center"
		data-valign="center"

		data-nav-inputs="select"
		data-nav-targets="_"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
	/>
	<label id="label-ranking" pos="-22 -3.75" size="62 10" class="text-semibold" textsize="1" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" halign="left" />
	<quad id="quad-flag" pos="-{{{WidgetSize.X * 0.51}}} 0" size="{{{FlagSize.X}}} {{{FlagSize.Y}}}" keepratio="Clip" image="file://ZoneFlags/Path/World" alphamask="{{{Const::C_ImageUrl_Overlay_Profile_Flag_Mask}}}" halign="left" valign="center" />
	<frameinstance id="playername-name" modelid="{{{PlayerName::C_Name}}}" pos="-21 1.75" z-index="1" data-size="{{{WidgetSize.X * 0.7}}} {{{WidgetSize.Y}}}" data-valign="center2" data-textsize="3" data-textcolor="ffffff" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" data-textprefix="$t$i" />
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/API/LeaderboardAPI.Script.txt" as LeaderboardAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_MA.Script.txt" as CampaignStore

#Const C_RankingDisplayDuration 5000

#Const C_MaxRankingsDisplayed 4

#Const C_Ranking_Trophy 0
#Const C_Ranking_Ranked 1
#Const C_Ranking_Royal 2
#Const C_Ranking_GameSubscription 3

#Const C_Rank_Names {{{dump(Const::C_Rank_Names)}}}
#Const C_Zone_Translations {{{dump(Const::C_Zone_Translations)}}}
#Const C_Path_OverlayName_ProfileWidget {{{dump(RoutePaths::C_Path_OverlayName_ProfileWidget)}}}
""",
"""
Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void Select(CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return;

	if (_Control.ControlId == "button-profile") {
		if ({{{Router::P}}}GetCurrentRoutePath(This) != "{{{RoutePaths::C_Path_Profile}}}") {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_Profile}}}", {{{Router::P}}}GetCurrentRoutePath(This));
		}
		{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Profile}}}");
	}
}

Boolean UpdateCurrentRanking(Integer _CurrentRankingIndex, CMlLabel _Label_Ranking) {
	declare Boolean HaveRankingToDisplay = False;
	switch (_CurrentRankingIndex) {
		case C_Ranking_Trophy: {
			declare LeaderboardAPI::K_ResponseFromGetPlayerTrophyRanking UserRanking = {{{UserStore::P}}}GetUserTrophyRankings();
			declare {{{CampaignStruct::P}}}K_Ranking TopRank = CampaignStore::GetTopRank(UserRanking.Ranking);

			if (UserRanking.Ranking.count > 0) {
				//L16N Top displayed in the profile of the global ranking. %1 will be replace by the rank, %2 by the zone. e.g "Global Rank : Top 50 World"
				_Label_Ranking.Value = TL::Compose(_("Global Rank | Top %1 %2"), Tools::FormatTop(TopRank.Position, False), C_Zone_Translations.get(TopRank.ZoneName, TL::GetTranslatedText(TopRank.ZoneName)));
				HaveRankingToDisplay = True;
			}
		}
		case C_Ranking_Ranked: {
			declare {{{UserStore::P}}}K_MatchmakingInfo RankedInfos = {{{UserStore::P}}}GetMatchmakingInfos({{{MatchmakingStruct::P}}}C_Mode_Teams3v3);
			if (RankedInfos.PlayerProgression.CurrentDivision != "") {
				{{{PlayerRank::P}}}SetDivisions(RankedInfos.Divisions);
				declare Integer CurrentRank = {{{PlayerRank::P}}}GetRankNumberFromDivisionId(RankedInfos.PlayerProgression.CurrentDivision);
				_Label_Ranking.Value = TL::Compose("{{{Text_InRanked}}}", C_Rank_Names.get(CurrentRank, "{{{Text_Unranked}}}"));
				HaveRankingToDisplay = True;
			}
		}
		case C_Ranking_Royal: {
			HaveRankingToDisplay = True;
			declare {{{UserStore::P}}}K_MatchmakingInfo RoyalInfos = {{{UserStore::P}}}GetMatchmakingInfos({{{MatchmakingStruct::P}}}C_Mode_Royal);
			declare Integer RoyalVictories = RoyalInfos.PlayerProgression.CurrentProgression;
			if (RoyalVictories <= 0) {
				_Label_Ranking.Value = "{{{Text_RoyalVictories0}}}";
			} else if (RoyalVictories == 1) {
				_Label_Ranking.Value = "{{{Text_RoyalVictory}}}";
			} else {
				_Label_Ranking.Value = TL::Compose("{{{Text_RoyalVictories}}}", ""^RoyalVictories);
			}
		}
		case C_Ranking_GameSubscription: {
			HaveRankingToDisplay = True;
			if ({{{UserStore::P}}}IsOfflineMode() || {{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CanSubscribeToStandard)) {
				_Label_Ranking.SetText(RBAC::C_Text_StarterAccess);
			} else if ({{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CanSubscribeToClub)) {
				_Label_Ranking.SetText(RBAC::C_Text_StandardAccess);
			} else {
				_Label_Ranking.SetText(RBAC::C_Text_ClubAccess);
			}
		}
	}
	Tools::FitLabelValue(_Label_Ranking, 1., 0.5, 0.1);
	return HaveRankingToDisplay;
}

Void UpdateName(CMlFrame _PlayerName_Name, CUser _User) {
	if (_User == Null) {
		{{{PlayerName::P}}}SetName(This, _PlayerName_Name, "", "", False, False);
	} else {
		{{{PlayerName::P}}}SetUser(This, _PlayerName_Name, _User, True);
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Button_Profile;
declare CMlQuad Quad_Flag;
declare CMlLabel Label_Ranking;
declare CMlFrame PlayerName_Name;

declare Text FlagUrl;
declare Text LocalUserName;
declare Integer CurrentRankingIndex;
declare Integer RankingChangeTime;
declare Text CurrentRoutePath;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Button_Profile <=> (Frame_Global.GetFirstChild("button-profile") as CMlFrame);
Quad_Flag <=> (Frame_Global.GetFirstChild("quad-flag") as CMlQuad);
Label_Ranking <=> (Frame_Global.GetFirstChild("label-ranking") as CMlLabel);
PlayerName_Name <=> (Frame_Global.GetFirstChild("playername-name") as CMlFrame);

FlagUrl = "";

RankingChangeTime = Now + C_RankingDisplayDuration;

UpdateName(PlayerName_Name, LocalUser);

// Force the page to always be updated otherwise we lose events
PageAlwaysUpdateScript = True;
***

***MainLoop***
***
if (PageIsVisible) {
	
	if (CurrentRoutePath != {{{Router::P}}}GetCurrentRoutePath(This)) {
		CurrentRoutePath = {{{Router::P}}}GetCurrentRoutePath(This);
		declare Boolean NavEnabled = RoutePaths::IsClubAndProfileOverlaysNavEnabled(CurrentRoutePath);
		{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName_Global}}}", NavEnabled);
	}

	if (FlagUrl != LocalUser.CountryFlagUrl && LocalUser.ZonePath != "") {
		FlagUrl = LocalUser.CountryFlagUrl;
		Quad_Flag.ChangeImageUrl(FlagUrl);
	}
	if (LocalUserName != LocalUser.Name) {
		LocalUserName = LocalUser.Name;
		UpdateName(PlayerName_Name, LocalUser);
	}

	if (!{{{Router::P}}}IsOverlayLocked(This, C_Path_OverlayName_ProfileWidget)) {
		foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{Navigation::P}}}C_EventType_NavigateInput: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName_Global}}}")) {
						if (Event.Input == {{{Const::C_NavAction_ProfileWidget}}}) {
							Select(Button_Profile);
						}
					}
				}
				case {{{Navigation::P}}}C_EventType_NavigateMouse: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							// Force overlay unfocus when opening the profile page 
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Null);
							Select(Event.To);
						} else {
							Focus(Event.From, Event.To);
						}
					}
				}
			}
		}
	}

	// Change current user ranking displayed every 5sec
	if (RankingChangeTime > 0 && RankingChangeTime <= Now) {
		RankingChangeTime = Now + C_RankingDisplayDuration;
		if (CurrentRankingIndex == C_MaxRankingsDisplayed - 1) CurrentRankingIndex = 0;
		else CurrentRankingIndex += 1;
		if (!UpdateCurrentRanking(CurrentRankingIndex, Label_Ranking)) RankingChangeTime = Now;
	}
}

foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CMlScriptEvent::Type::PluginCustomEvent: {
			if (Event.CustomEventType == {{{ClubStore::P}}}C_Event_ClubTagUpdated) {
				UpdateName(PlayerName_Name, LocalUser);
			}
		}
	}
}
***
""",
[
	Transition::ComponentV2(),
	Navigation::ComponentV2(),
	Router::ComponentV2(),
	UserStore::ComponentV2(),
	ClubStore::ComponentV2(),
	Button::ComponentV2(),
	CampaignStruct::Component(),
	MatchmakingStruct::Component(),
	PlayerRank::Component(),
	PlayerName::ComponentV2()
],
[]
	);
}