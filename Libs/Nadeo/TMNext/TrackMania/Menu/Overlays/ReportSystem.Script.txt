/**
 *	Overlay : ReportSystem
 *	===========================
 *
 *	Confluence : https://confluence.ubisoft.com/display/Nadeo/Report+System
 *
 *	Info
 *	----
 *	
 *	Overlay using the PopUpReportSystem component in the menus and use a global input to open the pop up
 *
 *
 **/
#Const Version		"2023-05-30"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ReportSystem.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpReportSystem.Script.txt" as PopUpReportSystem
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ReportStruct.Script.txt" as ReportStruct
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_Event {
	Integer Type;
	Text LastUsingId;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Overlay_ReportSystem"

#Const C_NavGroupName_Global "navgroup-overlay-report-system-global"

#Const C_EventType_Open 0
#Const C_EventType_Close 1

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// Add a UsingId (corresponds to the id of the page / UI module opening the report pop up)
// We need to use an array of text (and not only a text) because of the order of leaving and entering page events (see trackmania-next/tmnext/-/issues/4919)
Void AddUsingId(Text _UsingId) {
	declare Text[] TMNext_ReportSystem_UsingIds for LocalUser = [];

	if (!TMNext_ReportSystem_UsingIds.exists(_UsingId)) {
		TMNext_ReportSystem_UsingIds.add(_UsingId);
		// Reset report data when entering new page
		declare ReportStruct::LibStructuresReport_K_ReportData[Integer] TMNext_ReportSystem_Data for LocalUser = [];
		TMNext_ReportSystem_Data = [];
	}
}

// Remove a UsingId (corresponds to the id of the page / UI module opening the report pop up)
// We need to use an array of text (and not only a text) because of the order of leaving and entering page events (see trackmania-next/tmnext/-/issues/4919)
Void RemoveUsingId(Text _UsingId) {
	declare Text[] TMNext_ReportSystem_UsingIds for LocalUser = [];
	TMNext_ReportSystem_UsingIds.remove(_UsingId);
}

// Get the current report system data list (indexed by the report target type)
ReportStruct::LibStructuresReport_K_ReportData[Integer] GetDataList() {
	declare ReportStruct::LibStructuresReport_K_ReportData[Integer] TMNext_ReportSystem_Data for LocalUser = [];
	return TMNext_ReportSystem_Data;
}

// Reset the report system data list
Void ResetDataList() {
	declare ReportStruct::LibStructuresReport_K_ReportData[Integer] TMNext_ReportSystem_Data for LocalUser = [];
	TMNext_ReportSystem_Data = [];
}

// Set the report system data list (indexed by the report target type)
Void SetDataList(ReportStruct::LibStructuresReport_K_ReportData[Integer] _Data) {
	if (_Data.count > 0) {
		declare ReportStruct::LibStructuresReport_K_ReportData[Integer] TMNext_ReportSystem_Data for LocalUser = [];
		TMNext_ReportSystem_Data = _Data;
	}
}

// Add report data to the list (will replace the previous data for the specified report target type)
Void AddData(Integer _ReportTargetType, ReportStruct::LibStructuresReport_K_ReportData _Data) {
	declare ReportStruct::LibStructuresReport_K_ReportData[Integer] TMNext_ReportSystem_Data for LocalUser = [];
	TMNext_ReportSystem_Data[_ReportTargetType] = _Data;
}

// Remove the report data associated to report target type
Void RemoveData(Integer _ReportTargetType) {
	declare ReportStruct::LibStructuresReport_K_ReportData[Integer] TMNext_ReportSystem_Data for LocalUser = [];
	TMNext_ReportSystem_Data.removekey(_ReportTargetType);
}

// Display the report system pop up with the specified data
Void Show(ReportStruct::LibStructuresReport_K_ReportData[Integer] _Data) {
	declare Integer TMNext_ReportSystem_DisplayUpdate for LocalUser = 0;
	declare ReportStruct::LibStructuresReport_K_ReportData[Integer] TMNext_ReportSystem_Data for LocalUser = [];
	declare Boolean TMNext_ReportSystem_Show for LocalUser = True;
	TMNext_ReportSystem_DisplayUpdate += 1;
	TMNext_ReportSystem_Data = _Data;
	TMNext_ReportSystem_Show = True;
}

K_Event[] GetPendingEvents() {
	declare K_Event[] TMNext_ReportSystem_Events for LocalUser = [];
	return TMNext_ReportSystem_Events;
}

// Remove all reports data and hide the pop-up
// /!\ Use this function only before restarting the menu or to reinitialize the state of the overlay
// /!\ Doing it while navigating in the menu could create inconsistencies in the data
Void FullReset() {
	declare Integer TMNext_ReportSystem_DisplayUpdate for LocalUser = 0;
	declare Text[] TMNext_ReportSystem_UsingIds for LocalUser = [];
	declare ReportStruct::LibStructuresReport_K_ReportData[Integer] TMNext_ReportSystem_Data for LocalUser = [];
	declare Boolean TMNext_ReportSystem_Show for LocalUser = True;
	TMNext_ReportSystem_DisplayUpdate += 1;
	TMNext_ReportSystem_UsingIds = [];
	TMNext_ReportSystem_Data = [];
	TMNext_ReportSystem_Show = False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	return MV::Create(
C_Name, 3,
"""
<frame id="frame-global" 	
	data-nav-inputs="{{{Const::C_NavInput_ReportSystem}}}"
	data-nav-targets="_"
	data-nav-selected="1"
	data-nav-group="{{{C_NavGroupName_Global}}}"
	class="{{{Navigation::C_Class}}}" 
	z-index="{{{Const::C_ZIndex_ReportSystem}}}"
>
	<frameinstance 
		id="frame-report-system"
		z-index="{{{Const::C_ZIndex_PopUpDisplay}}}"
		modelid="{{{PopUpReportSystem::C_Name}}}"
		hidden="1"
	/>
</frame>
""",
"""
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ReportStruct.Script.txt" as ReportStruct

{{{dumptype(K_Event)}}}

#Const C_EventType_Open {{{dump(C_EventType_Open)}}}
#Const C_EventType_Close {{{dump(C_EventType_Close)}}}
""",
"""
***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_ReportSystem;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_ReportSystem <=> (Frame_Global.GetFirstChild("frame-report-system") as CMlFrame);

declare Integer TMNext_ReportSystem_DisplayUpdate for LocalUser = 0;
declare Boolean TMNext_ReportSystem_Show for LocalUser = True;
declare Text[] TMNext_ReportSystem_UsingIds for LocalUser = [];
declare ReportStruct::LibStructuresReport_K_ReportData[Integer] TMNext_ReportSystem_Data for LocalUser = [];
declare K_Event[] TMNext_ReportSystem_Events for LocalUser = [];

declare Integer LocalDisplayUpdate = 0;
TMNext_ReportSystem_DisplayUpdate = 0;
TMNext_ReportSystem_UsingIds = [];
TMNext_ReportSystem_Data = [];

{{{PopUpReportSystem::P}}}Display(This, Frame_ReportSystem, False);
***

***MainLoop***
***
if (PageIsVisible) {
	TMNext_ReportSystem_Events = [];

	/* Check display of the overlay */
	if (LocalDisplayUpdate != TMNext_ReportSystem_DisplayUpdate) {
		LocalDisplayUpdate = TMNext_ReportSystem_DisplayUpdate;
		if (TMNext_ReportSystem_Show) {
			{{{PopUpReportSystem::P}}}SetReportTargetsData(This, Frame_ReportSystem, TMNext_ReportSystem_Data);
			{{{PopUpReportSystem::P}}}Display(This, Frame_ReportSystem, True);
		} else {
			{{{PopUpReportSystem::P}}}ForceHide(This, Frame_ReportSystem);
		}
	}

	/* Check C_NavAction_ReportSystem inputs */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName_Global}}}")) {
					if (Event.Input == {{{Const::C_NavAction_ReportSystem}}}) {
						// Do not open the pop up if there is no corresponding using id or data to display
						if (TMNext_ReportSystem_UsingIds.count > 0 && TMNext_ReportSystem_Data.count > 0) {
							{{{PopUpReportSystem::P}}}SetReportTargetsData(This, Frame_ReportSystem, TMNext_ReportSystem_Data);
							{{{PopUpReportSystem::P}}}Display(This, Frame_ReportSystem, True);
						}
					}
				}
			}
		}
	}

	/* Report system pop up events */
	foreach (Event in {{{PopUpReportSystem::P}}}GetPendingEvents(This)) {
		declare Text LastUsingId = "";
		if (TMNext_ReportSystem_UsingIds.count > 0) LastUsingId = TMNext_ReportSystem_UsingIds[TMNext_ReportSystem_UsingIds.count-1];
		switch (Event.Type) {
			case {{{PopUpReportSystem::P}}}C_EventType_Open: {
				TMNext_ReportSystem_Events.add(K_Event {
					Type = C_EventType_Open,
					LastUsingId = LastUsingId
				});
			}
			case {{{PopUpReportSystem::P}}}C_EventType_Close: {
				TMNext_ReportSystem_Events.add(K_Event {
					Type = C_EventType_Close,
					LastUsingId = LastUsingId
				});
			}
		}
	}
}
***
""",
[
	Router::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpReportSystem::ComponentV2()
],
[]
	);
}