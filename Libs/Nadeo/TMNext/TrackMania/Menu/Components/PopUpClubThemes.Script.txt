/** 
 *	Component: PopUpClubThemes
 */
#Const Version		"2023-03-10"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpClubThemes.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Selector.Script.txt" as Selector
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_Event {
	Integer Type;
	CMlFrame PopUpClubThemes;
	Text ThemeName;
	Text MediaUrl;
}
#Struct K_Controls {
	CMlFrame Frame_CustomContent;
	CMlFrame Frame_PreviewClubThemes;
	CMlFrame PopUpMultiChoice_ClubThemes;
	CMlFrame Selector_ClubThemes;
	CMlLabel Label_ClubTheme;
	CMlLabel Label_Number;
	CMlQuad Quad_Background;
	CMlQuad Quad_ClubTheme;
	CMlQuad Quad_Contour;
	CMlQuad Quad_Gradient;
}
#Struct K_State {
	Text SelectedThemeName;
	K_Controls Controls;
	K_Event[] PendingEvents;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-menulibs-pop-up-club-themes" // Component name
#Const P "MenuLibsPopUpClubThemes_PopUpClubThemes::" // Prefix use to differentiate functions/variables in the script
#Const Q "MenuLibsPopUpClubThemes_PopUpClubThemes"

#Const C_Class_PopUpClubThemes "menu-libs-pop-up-club-themes_selector"
#Const C_Id_FrameCustomContent "menu-libs-pop-up-club-themes_frame-multichoice-custom-content"
#Const C_Id_FramePreviewClubThemes "menu-libs-pop-up-club-themes_frame-preview-pop-up-club-themes"
#Const C_Id_LabelNumber "menu-libs-pop-up-club-themes_label-number"
#Const C_Id_LabelClubTheme "menu-libs-pop-up-club-themes_label-pop-up-club-theme"
#Const C_Id_PopUpMultiChoiceClubThemes "menu-libs-pop-up-club-themes_popupmultichoice-pop-up-club-themes"
#Const C_Id_QuadBackground "menu-libs-pop-up-club-themes_quad-background"
#Const C_Id_QuadContour "menu-libs-pop-up-club-themes_quad-contour"
#Const C_Id_QuadGradient "menu-libs-pop-up-club-themes_quad-gradient"
#Const C_Id_QuadClubTheme "menu-libs-pop-up-club-themes_quad-pop-up-club-theme"
#Const C_Id_SelectorClubThemes "menu-libs-pop-up-club-themes_selector-pop-up-club-themes"

#Const ClubStruct::C_ClubThemes_Path as C_ClubThemes_Path
#Const ClubStruct::C_ClubThemes_DisplayNames as C_ClubThemes_DisplayNames
#Const ClubStruct::C_ClubThemes_Folders as C_ClubThemes_Folders
#Const ClubStruct::C_ClubThemes_Files as C_ClubThemes_Files

#Const C_EventType_Display 0
#Const C_EventType_Confirm 1

// Pop-up to choose an activity image
#Const C_Choice_None "none"
#Const C_Choice_CancelTheme 0
#Const C_Choice_ConfirmTheme 1
#Const C_Choices_PopUpClubThemes [
	//L16N [Activity image] Abort the selection of an activity image
	0 => _("Cancel"),
	//L16N [Activity image] Confirm the selection of an activity image
	1 => _("Confirm")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the manialink of the component
Text GetManialink() {
	//L16N [Activity image] Title of the pop-up to choose an activity image.
	declare Text Text_PopUpClubThemesTitle = _("Activity image");

	/* Variables */
	declare Vec2 Size_PreviewTheme = MLHelpers::KeepRatioFromY(608., 272., 25.);
	declare Text[Text] Choices = C_ClubThemes_DisplayNames;
	//L16N [Activity image] Pop-up where the user can select an image for an activity. This choice allow the user to not display any image.
	Choices[C_Choice_None] = _("|ActivityImage|None");


	return """
		<stylesheet>
			<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
		</stylesheet>

		<frame class="{{{C_Class_PopUpClubThemes}}}">
			<frameinstance
				id="{{{C_Id_PopUpMultiChoiceClubThemes}}}" z-index="0"
				modelid="{{{PopUpMultiChoice::C_Name}}}"
				data-title="{{{Text_PopUpClubThemesTitle}}}"
				data-choices="{{{TL::MLEncode(C_Choices_PopUpClubThemes.tojson())}}}"
				data-focus-when-displayed="{{{C_Id_SelectorClubThemes}}}"
				data-custom-content-frame="{{{C_Id_FrameCustomContent}}}"
				data-nav-inputs="up"
				data-nav-targets="{{{C_Id_SelectorClubThemes}}}"
				hidden="1"
			/>
			<frame id="{{{C_Id_FrameCustomContent}}}" z-index="1">
				<frameinstance 
					id="{{{C_Id_SelectorClubThemes}}}" z-index="0"
					modelid="{{{Selector::C_Name}}}"
					class="{{{Navigation::C_Class}}} {{{PopUpMultiChoice::C_Class_Navigation}}}"
					data-choices="{{{TL::MLEncode(Choices.tojson())}}}"
					data-choices-loop="true"
					data-width="75" data-height="12"
					data-halign="center" data-valign="center"
					data-nav-inputs="select;cancel;down"
					data-nav-targets="_;_;{{{PopUpMultiChoice::C_SecondChoice}}}"
					data-nav-group="{{{PopUpMultiChoice::C_NavGroup}}}"
					data-nav-container="{{{PopUpMultiChoice::C_NavContainer}}}"
					data-nav-zone="{{{Selector::C_NavZone}}}"
				/>
				<label id="{{{C_Id_LabelClubTheme}}}" size="{{{Size_PreviewTheme.X*0.9}}} 10." pos="{{{MLHelpers::Skew(0., 0.5*Size_PreviewTheme.Y + 1.5, 10.)}}}" class="text-semibold" halign="center" valign="bottom" textsize="3." z-index="3"/>
				<label id="{{{C_Id_LabelNumber}}}" size="{{{Size_PreviewTheme.X*0.9}}} 10." pos="{{{MLHelpers::Skew(0., -0.5*Size_PreviewTheme.Y - 1.5, 10.)}}}" class="text-semibold" halign="center" valign="top" textsize="1.5" z-index="3"/>
				<frame id="{{{C_Id_FramePreviewClubThemes}}}" pos="{{{-0.5*Size_PreviewTheme.X}}} {{{0.5*Size_PreviewTheme.Y}}}" z-index="1">
					<quad id="{{{C_Id_QuadBackground}}}" size="{{{Size_PreviewTheme.X}}} {{{Size_PreviewTheme.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" keepratio="clip" z-index="0"/>
					<quad id="{{{C_Id_QuadClubTheme}}}" size="{{{Size_PreviewTheme.X}}} {{{Size_PreviewTheme.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip" z-index="1"/>
					<quad id="{{{C_Id_QuadGradient}}}" size="{{{Size_PreviewTheme.X}}} {{{Size_PreviewTheme.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity=".7" z-index="2"/>
					<quad id="{{{C_Id_QuadContour}}}" size="{{{Size_PreviewTheme.X}}} {{{Size_PreviewTheme.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" colorize="FFF" opacity="0." z-index="4"/>
				</frame>
			</frame>
		</frame>
	""";
}

/// Update controller hints at the bottom of the screen
Void Private_UpdateControllerInfo(CMlScript _This) {
	declare K_State MenuLibs_PopUpClubThemes_State for _This.Page;
	declare Text[Text] ControllerInfos = ["A" => _("Select"), "B" => C_Choices_PopUpClubThemes[C_Choice_CancelTheme]];

	if (Navigation::IsFocused(_This, MenuLibs_PopUpClubThemes_State.Controls.Selector_ClubThemes, PopUpMultiChoice::C_NavGroup)) {
		ControllerInfos["A"] = C_Choices_PopUpClubThemes[C_Choice_ConfirmTheme];
		ControllerInfos["left"] = ""; //< Empty on purpose
		//L16N [Activity image] Select a value in a list.
		ControllerInfos["right"] = _("Select value");
	} 

	ControllerInfo::SetButtons(ControllerInfos);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Open the pop-up
Void Private_Focus(CMlScript _This, CMlControl _From, CMlControl _To) {
	declare K_State MenuLibs_PopUpClubThemes_State for _This.Page;

	if (_From != Null) {
		if (Selector::IsSelector(_From)) {
			_This.AnimMgr.Flush(MenuLibs_PopUpClubThemes_State.Controls.Quad_Contour);
			_This.AnimMgr.Flush(MenuLibs_PopUpClubThemes_State.Controls.Quad_Gradient);
			_This.AnimMgr.Add(MenuLibs_PopUpClubThemes_State.Controls.Quad_Contour, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			_This.AnimMgr.Add(MenuLibs_PopUpClubThemes_State.Controls.Quad_Gradient, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}
	
	if (_To != Null) {
		if (Selector::IsSelector(_To)) {
			_This.AnimMgr.Flush(MenuLibs_PopUpClubThemes_State.Controls.Quad_Contour);
			_This.AnimMgr.Flush(MenuLibs_PopUpClubThemes_State.Controls.Quad_Gradient);
			_This.AnimMgr.Add(MenuLibs_PopUpClubThemes_State.Controls.Quad_Contour, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			_This.AnimMgr.Add(MenuLibs_PopUpClubThemes_State.Controls.Quad_Gradient, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	if (MenuLibs_PopUpClubThemes_State.Controls.PopUpMultiChoice_ClubThemes.Visible) {
		Private_UpdateControllerInfo(_This);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Open the pop-up
Void Open(CMlScript _This) {
	declare K_State MenuLibs_PopUpClubThemes_State for _This.Page;
	PopUpMultiChoice::Open(_This, MenuLibs_PopUpClubThemes_State.Controls.PopUpMultiChoice_ClubThemes);
	Private_UpdateControllerInfo(_This);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Select an image in the selector
Void SelectClubTheme(CMlScript _This, Text _ThemeNameOrUrl) {
	declare K_State MenuLibs_PopUpClubThemes_State for _This.Page;
	if (ClubStruct::IsClubThemeUrl(_ThemeNameOrUrl)) {
		Selector::SelectChoice(_This, MenuLibs_PopUpClubThemes_State.Controls.Selector_ClubThemes, ClubStruct::GetClubThemeName(_ThemeNameOrUrl));
	} else {
		Selector::SelectChoice(_This, MenuLibs_PopUpClubThemes_State.Controls.Selector_ClubThemes, _ThemeNameOrUrl);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get pending events of the component
K_Event[] GetPendingEvents(CMlScript _This) {
	declare K_State MenuLibs_PopUpClubThemes_State for _This.Page;
	return MenuLibs_PopUpClubThemes_State.PendingEvents;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Initialize all component instances
Void MainStart(CMlScript _This) {
	declare K_State MenuLibs_PopUpClubThemes_State for _This.Page;

	_This.Page.GetClassChildren(C_Class_PopUpClubThemes, _This.Page.MainFrame, True);
	assert(_This.Page.GetClassChildren_Result.count < 2, "You can only have one instance of the 'PopUpClubThemes' component in your page.");
	foreach (Control in _This.Page.GetClassChildren_Result) {
		declare CMlFrame Frame_PopUpClubThemes = (Control as CMlFrame).Parent;
		MenuLibs_PopUpClubThemes_State = K_State {
			Controls = K_Controls {
				Frame_CustomContent = (Frame_PopUpClubThemes.GetFirstChild(C_Id_FrameCustomContent) as CMlFrame),
				Frame_PreviewClubThemes = (Frame_PopUpClubThemes.GetFirstChild(C_Id_FramePreviewClubThemes) as CMlFrame),
				Label_ClubTheme = (Frame_PopUpClubThemes.GetFirstChild(C_Id_LabelClubTheme) as CMlLabel),
				Label_Number = (Frame_PopUpClubThemes.GetFirstChild(C_Id_LabelNumber) as CMlLabel),
				PopUpMultiChoice_ClubThemes = (Frame_PopUpClubThemes.GetFirstChild(C_Id_PopUpMultiChoiceClubThemes) as CMlFrame),
				Quad_Background = (Frame_PopUpClubThemes.GetFirstChild(C_Id_QuadBackground) as CMlQuad),
				Quad_ClubTheme = (Frame_PopUpClubThemes.GetFirstChild(C_Id_QuadClubTheme) as CMlQuad),
				Quad_Contour = (Frame_PopUpClubThemes.GetFirstChild(C_Id_QuadContour) as CMlQuad),
				Quad_Gradient = (Frame_PopUpClubThemes.GetFirstChild(C_Id_QuadGradient) as CMlQuad),
				Selector_ClubThemes = (Frame_PopUpClubThemes.GetFirstChild(C_Id_SelectorClubThemes) as CMlFrame)
			}
		};
	}
}

/// Loop of the component
Void MainLoop(CMlScript _This) {
	declare K_State MenuLibs_PopUpClubThemes_State for _This.Page;
	MenuLibs_PopUpClubThemes_State.PendingEvents = [];

	/* Events Navigation */
	foreach (Event in Navigation::GetPendingEvents(_This)) {
		if (Navigation::IsEventFromGroup(_This, Event, PopUpMultiChoice::C_NavGroup)) {
			switch (Event.Type) {
				case Navigation::C_EventType_NavigateInput: Private_Focus(_This, Event.From, Event.To);
				case Navigation::C_EventType_NavigateMouse: {
					if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Private_Focus(_This, Event.From, Event.To);
					}
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in PopUpMultiChoice::GetPendingEvents(_This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == MenuLibs_PopUpClubThemes_State.Controls.PopUpMultiChoice_ClubThemes.Id) {
			switch (Event.Type) {
				case PopUpMultiChoice::C_EventType_Display: {
					Event.PopUpMultiChoice.Parent.Parent.Visible = Event.PopUpMultiChoice.Visible;
					if (!Event.PopUpMultiChoice.Visible) Private_Focus(_This, Null, MenuLibs_PopUpClubThemes_State.Controls.Selector_ClubThemes);
					if (Selector::GetSelectedChoice(MenuLibs_PopUpClubThemes_State.Controls.Selector_ClubThemes).Id == "") {
						Selector::SelectChoice(_This, MenuLibs_PopUpClubThemes_State.Controls.Selector_ClubThemes, C_Choice_None);
					}
					MenuLibs_PopUpClubThemes_State.PendingEvents.add(K_Event {
						Type = C_EventType_Display,
						PopUpClubThemes = Event.PopUpMultiChoice.Parent.Parent
					});
				}
				case PopUpMultiChoice::C_EventType_Select: {
					if (Event.SelectedIndex == C_Choice_ConfirmTheme || Event.SelectedControl == MenuLibs_PopUpClubThemes_State.Controls.Selector_ClubThemes) {
						declare Text MediaUrl = MenuLibs_PopUpClubThemes_State.Controls.Quad_ClubTheme.ImageUrl;
						if (MenuLibs_PopUpClubThemes_State.SelectedThemeName == C_Choice_None) MediaUrl = "";
						MenuLibs_PopUpClubThemes_State.PendingEvents.add(K_Event {
							Type = C_EventType_Confirm,
							PopUpClubThemes = Event.PopUpMultiChoice.Parent.Parent,
							ThemeName = MenuLibs_PopUpClubThemes_State.SelectedThemeName,
							MediaUrl = MediaUrl
						});
					}
				}
			}
		}
	}

	/* Selector events */
	foreach (Event in Selector::GetPendingEvents(_This)) {
		switch (Event.Type) {
			case Selector::C_EventType_Update: {
				if (Event.Selector != Null && Event.Selector.Id == MenuLibs_PopUpClubThemes_State.Controls.Selector_ClubThemes.Id) {
					MenuLibs_PopUpClubThemes_State.SelectedThemeName = Event.SelectedChoice.Id;
					MenuLibs_PopUpClubThemes_State.Controls.Label_ClubTheme.SetText(Event.SelectedChoice.Name);
					if (C_ClubThemes_DisplayNames.existskey(Event.SelectedChoice.Id)) {
						MenuLibs_PopUpClubThemes_State.Controls.Label_Number.SetText(Tools::GetListOfKeys(C_ClubThemes_DisplayNames).keyof(Event.SelectedChoice.Id)+2^"/"^C_ClubThemes_DisplayNames.count+1);
						MenuLibs_PopUpClubThemes_State.Controls.Quad_ClubTheme.ChangeImageUrl("file://"^C_ClubThemes_Path^C_ClubThemes_Folders[Event.SelectedChoice.Id]^C_ClubThemes_Files[ClubStruct::C_MediaType_Icon]);
					} else {
						MenuLibs_PopUpClubThemes_State.Controls.Label_Number.SetText(1^"/"^C_ClubThemes_DisplayNames.count+1);
						MenuLibs_PopUpClubThemes_State.Controls.Quad_ClubTheme.ChangeImageUrl(Const::C_ImageUrl_ClubActivity_Default);
					}
				}
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the component
Text ComponentV2() {
	return MV::ComponentV2(
		C_Name,
		GetManialink(),
		"""
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpClubThemes.Script.txt" as {{{Q}}}
		""",
		"""
***MainStart***
***
{{{P}}}MainStart(This);
***

***MainLoop***
***
{{{P}}}MainLoop(This);
***
		""",
		[	
			ClubStruct::Component(),
			MenuSounds::ComponentV2(),
			Navigation::ComponentV2(),
			PopUpMultiChoice::ComponentV2(),
			Selector::ComponentV2()
		],
		[]
	);
}