/** 
 *	Component: Settings
 *
 *	See and update game settings.
 *	Only instance one of this component per page.
 */
#Const Version		"2023-06-22"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Components/Settings.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuButtonList.Script.txt" as MenuButtonList
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Slider.Script.txt" as Slider
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LatencyTest.Script.txt" as LatencyTest
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Checkbox.Script.txt" as Checkbox
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/NavigationTabs.Script.txt" as NavigationTabs
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/DisplayVersion.Script.txt" as DisplayVersion
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/OnlineServicesStatusStore_ML.Script.txt" as OnlineServicesStatusStore
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/OnlineServicesStatusCard.Script.txt" as OnlineServicesStatusCard

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-settings"
#Const P "ComponentSettings_"

#Const C_NavGroup_Global "navgroup-component-settings-global"
#Const C_NavGroup_Main "navgroup-component-settings-main"
#Const C_NavGroup_MouseOnly "navgroup-component-settings-mouseonly"

#Const C_Class_BottomButton "component-settings-bottom-button"
#Const C_Class_FocusSettingLine "component-settings-focus-setting-line"
#Const C_Class_NoFocus "component-settings-no-focus"

#Const C_DiscardSettingsOnTabChange False
#Const Const::C_ImageUrl_Profile_Background as C_BackgroundImageUrl

#Const C_PopUpDiscardChangesChoices_No 0
#Const C_PopUpDiscardChangesChoices_Yes 1

#Const C_Choice_Cancel 0
#Const C_Choice_Activate 1
#Const C_Choices_ActivateKey [
	//L16N [Settings] The player doesn't want to activate the key
	0 => _("Cancel"),
	//L16N [Settings] The player wants to activate the key
	1 => _("Activate")
]

#Const C_SettingCategory_Null 0
#Const C_SettingCategory_Profile 1
#Const C_SettingCategory_Video 2
#Const C_SettingCategory_Sound 3
#Const C_SettingCategory_Controls 4
#Const C_SettingCategory_HUD 5
#Const C_SettingCategory_System 6

#Const C_SettingType_Null 0
#Const C_SettingType_Section 1
#Const C_SettingType_List 2
#Const C_SettingType_TextField 3
#Const C_SettingType_Checkbox 4
#Const C_SettingType_Slider 5
#Const C_SettingType_Binding 6
#Const C_SettingType_Button 7

#Const C_SliderType_Real 0
#Const C_SliderType_Integer 1
#Const C_SliderType_Color 2

#Const C_SettingId_NullId 0
// Profile settings
#Const C_SettingId_ProfileSectionAccount 101
#Const C_SettingId_ProfileTrigram 102
#Const C_SettingId_ProfileTrailsColor 103
#Const C_SettingId_ProfileCopyAccountId 104
#Const C_SettingId_ProfileOpenPlayerPage 105
#Const C_SettingId_ProfileOpenProfilePage 106
#Const C_SettingId_ProfileActivateKey 107
#Const C_SettingId_ProfileSectionPrivacy 108
#Const C_SettingId_ProfileDisplayAds 109
#Const C_SettingId_ProfileEnablePersonalizedAds 110
// Video settings
#Const C_SettingId_VideoSectionDisplay 201
#Const C_SettingId_VideoDevice 202
#Const C_SettingId_VideoDisplayMode 203
#Const C_SettingId_VideoFullscreenResolution 204
#Const C_SettingId_VideoWindowResolutionX 205
#Const C_SettingId_VideoWindowResolutionY 206
#Const C_SettingId_VideoShowWindowBorder 207
#Const C_SettingId_VideoAutomaticQuality 208
#Const C_SettingId_VideoAutomaticMinFPS 209
#Const C_SettingId_VideoAutomaticMaxFPS 210
#Const C_SettingId_VideoLimitFPS 211
#Const C_SettingId_VideoDisplaySync 212
#Const C_SettingId_VideoGPUSync 213
#Const C_SettingId_VideoTrippleBuffer 214
#Const C_SettingId_VideoAGPUseFactor 215
#Const C_SettingId_VideoSectionAA 216
#Const C_SettingId_VideoForwardAA 217
#Const C_SettingId_VideoDeferredAA 218
#Const C_SettingId_VideoRealtimeSSAA 219
#Const C_SettingId_VideoRealtimeSSAAMotion 220
#Const C_SettingId_VideoRealtimeSSAAMinFPS 221
#Const C_SettingId_VideoSectionAdvanced 222
#Const C_SettingId_VideoCanSelectPreset 223
#Const C_SettingId_VideoPreset 224
#Const C_SettingId_VideoShaderQuality 225
#Const C_SettingId_VideoTexturesQuality 226
#Const C_SettingId_VideoShadows 227
#Const C_SettingId_VideoTextureFiltering 228
#Const C_SettingId_VideoVehicleReflect 229
#Const C_SettingId_VideoWaterReflect 230
#Const C_SettingId_VideoEverywhereReflect 231
#Const C_SettingId_VideoBloomHDR 232
#Const C_SettingId_VideoMotionBlur 233
#Const C_SettingId_VideoMotionBlurIntensity 234
#Const C_SettingId_VideoSlowMotionBlur 235
#Const C_SettingId_VideoOpponentCustomization 236
#Const C_SettingId_VideoPerformanceQuality 237
#Const C_SettingId_VideoOutputScale 238
// Sound settings
#Const C_SettingId_SoundSectionGeneral 301
#Const C_SettingId_SoundEnable 302
#Const C_SettingId_SoundDevice 303
#Const C_SettingId_SoundMusicVolume 304
#Const C_SettingId_SoundMasterVolume 305
#Const C_SettingId_SoundEffectVolume 306
#Const C_SettingId_SoundUIVolume 307
#Const C_SettingId_SoundVoiceChatAndTTSVolume 308
#Const C_SettingId_SoundMuteUnfocused 309
#Const C_SettingId_SoundSectionVoiceChatAndTTS 310
#Const C_SettingId_SoundVoiceChat 311
#Const C_SettingId_SoundVoiceChatDeviceIn 312
#Const C_SettingId_SoundVoiceChatDeviceOut 313
#Const C_SettingId_SoundVoiceChatVoiceDetectionMode 314
#Const C_SettingId_SoundVoiceChatVoiceDetectionSensitivity 315
#Const C_SettingId_SoundVoiceChatLoopback 316
#Const C_SettingId_SoundSpeechToText 317
#Const C_SettingId_SoundTextToSpeech 318
#Const C_SettingId_SendTextAsVoice 319
// Control settings
#Const C_SettingId_ControlSectionAnalogSettings 401
#Const C_SettingId_ControlLatencyTest 402
#Const C_SettingId_ControlAnalogVehicleSelection 403
#Const C_SettingId_ControlAnalogSensitivity 404
#Const C_SettingId_ControlAnalogDeadZone 405
#Const C_SettingId_ControlAnalogRumbleIntensity 406
#Const C_SettingId_ControlTriggerHapticFeedbackEnabled 407
#Const C_SettingId_ControlInvertSteer 408
#Const C_SettingId_ControlAccelIsToggleMode 409
#Const C_SettingId_ControlBrakeIsToggleMode 410
#Const C_SettingId_ControlAnalogWheelMode 411
#Const C_SettingId_ControlAnalogCenterSpringIntensity 412
#Const C_SettingId_ControlSectionDevices 413
#Const C_SettingId_ControlDevice 414
#Const C_SettingId_ControlUnbindAll 415
#Const C_SettingId_ControlUnbindOne 416
#Const C_SettingId_ControlBindDefault 417
#Const C_SettingId_ControlSectionBindings 418
#Const C_SettingId_ControlEditBind 419
// HUD settings
#Const C_SettingId_HUDSectionMarkers 501
#Const C_SettingId_HUDMarkersType 502
#Const C_SettingId_HUDMarkersSize 503
#Const C_SettingId_HUDSectionCamera 504
#Const C_SettingId_HUDPrioritizeAlternateCam1 505
#Const C_SettingId_HUDPrioritizeAlternateCam2 506
#Const C_SettingId_HUDPrioritizeAlternateCam3 507
#Const C_SettingId_HUDInternalCamCarVisibility 508
#Const C_SettingId_HUDSectionMiscellaneous 509
#Const C_SettingId_HUDDefaultOpponentVisibility 510
#Const C_SettingId_HUDRoadsideSpectatorVisibility 511
#Const C_SettingId_HUDEnableSpecialBlockMessage 512
#Const C_SettingId_HUDAlwaysDisplayTrackRecords 513
#Const C_SettingId_HUDChatAllowHide 514
#Const C_SettingId_HUDChatBackground 515
#Const C_SettingId_HUDChatTextSize 516
#Const C_SettingId_HUDShowPerformance 517
// System settings
#Const C_SettingId_SystemSectionLanguage 601
#Const C_SettingId_SystemLanguage 602
#Const C_SettingId_SystemSectionMiscellaneous 603
#Const C_SettingId_SystemColorblindMode 604
#Const C_SettingId_SystemAutoSkipStartScreens 605
#Const C_SettingId_SystemScreenshotExtension 606
#Const C_SettingId_SystemJoinLink 607
#Const C_SettingId_SystemCleanCache 608
#Const C_SettingId_SystemCredits 609
#Const C_SettingId_SystemSectionNetwork 610
#Const C_SettingId_SystemOnlineServicesStatus 611
#Const C_SettingId_SystemNetworkSpeed 612
#Const C_SettingId_SystemNetworkSpeedDownload 613
#Const C_SettingId_SystemNetworkSpeedUpload 614
#Const C_SettingId_SystemNetworkCrossPlay 615
#Const C_SettingId_SystemSectionDownload 616
#Const C_SettingId_SystemDownloadSkin 617
#Const C_SettingId_SystemDownloadMapMod 618
#Const C_SettingId_SystemDownloadSign 619
#Const C_SettingId_SystemSectionTrackEditorQuickStart 620
#Const C_SettingId_SystemEnableTrackEditorQuickStart 621
#Const C_SettingId_SystemTrackEditorQuickStartUseGamepadController 622
#Const C_SettingId_SystemTrackEditorQuickStartDifficulty 623
#Const C_SettingId_SystemTrackEditorQuickStartMood 624

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {
	//L16N [Settings] Apply the settings update
	declare Text Text_Apply = _("|Settings|Apply");
	//L16N [Settings] Apply the settings update and close the settings page
	declare Text Text_Continue = _("|Settings|Continue");
	//L16N [Settings] The user must restart the game for the new settings to take effect.
	declare Text Text_RestartRequiredLong = _("Game restart will be required");
	//L16N [Settings] The user must restart the game for the new settings to take effect.
	declare Text Text_RestartRequiredShort = _("Game restart required");
	//L16N [Settings] The changes made by the user have been applied.
	declare Text Text_ChangesApplied = _("Your changes have been applied");
	//L16N [Settings] The user account ID has been copied to the clipboard.
	declare Text Text_AccountIdCopied = _("Your account ID has been copied to the clipboard");
	//L16N [Settings] Activate a key.
	declare Text Text_ActivateKey = _("Activate a key");
	//L16N [Settings] Text pronounced when there is no bind.
	declare Text TTS_NoBind = _("|TTS|No bind");
	//L16N [Settings] Open the online services status page in their web browser
	declare Text Text_OnlineServicesStatus_InfoDescription = _("Open the Trackmania online services status page in a web browser");
	if (Platform::IsAmazon(System)) {
		//L16N [Settings] Display the Trackmania online services status (online services operational or in maintenance or degraded)
		Text_OnlineServicesStatus_InfoDescription = _("Display the Trackmnania online services status");
	}
	//L16N [Settings] Description of the "Cross platform play" setting
	declare Text Text_Crossplay_InfoDescription = _("Allow to play with players from other networks");
	if (Platform::IsMicrosoft(System)) {
		//L16N [Settings] Description of the "Cross platform play" setting on Xbox
		Text_Crossplay_InfoDescription = _("You can change this setting in your console parameters");
	}
	//L16N [Settings] Clicking on this button copy a text to the clipboard
	declare Text Text_CopyProfileCopyAccountId = _("|Clipboard|Copy");
	//L16N [Settings] Sensitivity of the analog sticks
	declare Text Text_ControlAnalogSensitivity_Name = _("Analog sensitivity");
	//L16N [Settings] Description of the "Analog sensitivity" setting
	declare Text Text_ControlAnalogSensitivity_InfoDescription = _("Sensitivity of the analog sticks");
	//L16N [Settings] Size of the analog sticks dead zone
	declare Text Text_ControlAnalogDeadZone_Name = _("Analog dead zone");
	//L16N [Settings] Description of the "Analog dead zone" setting
	declare Text Text_ControlAnalogDeadZone_InfoDescription = _("Size of the analog sticks dead zone");
	if (Platform::IsSony(System)) {
		Text_CopyProfileCopyAccountId = "";
		//L16N [Settings] Sensitivity of the analog sticks on the controller. Translate "the left stick and the right stick" as it is, do not merge them under "sticks". Please ask in comments the official translation for "Left stick and right stick".
		Text_ControlAnalogSensitivity_Name = _("Left stick and right stick sensitivity");
		//L16N [Settings] Description of the "Analog sensitivity" setting. Translate "the left stick and the right stick" as it is, do not merge them under "sticks". Please ask in comments the official translation for "Left stick and right stick".
		Text_ControlAnalogSensitivity_InfoDescription = _("Sensitivity of the left stick and the right stick");
		//L16N [Settings] Size of the analog sticks dead zone. Translate "the left stick and the right stick" as it is, do not merge them under "sticks". Please ask in comments the official translation for "Left stick and right stick".
		Text_ControlAnalogDeadZone_Name = _("Left stick and right stick dead zone");
		//L16N [Settings] Description of the "Analog dead zone" setting. Translate "the left stick and the right stick" as it is, do not merge them under "sticks". Please ask in comments the official translation for "Left stick and right stick".
		Text_ControlAnalogDeadZone_InfoDescription = _("Size of the dead zone of the left stick and the right stick");
	}

	// Player card properties
	declare Vec2 Size_PlayerCard = <109., 14.> * 0.84;
	declare Vec2 Size_PlayerCardFlag = <23.2, 14.> * 0.84;

	// Scroll properties
	declare Vec2 Size_SettingsScroll = <264., 100.>;
	declare Vec2 Size_SettingsScrollGutter = <1., 2.>;
	declare Int2 Dimension_SettingsScroll = <1, 9>;
	declare Vec2 Size_SettingsScrollLine = Scroll::GetElementSize(Size_SettingsScroll, Size_SettingsScrollGutter, Dimension_SettingsScroll.X, Dimension_SettingsScroll.Y);
	declare Integer SettingsLineNb = Scroll::GetRequiredElementsNb(Size_SettingsScroll, Size_SettingsScrollLine, Size_SettingsScrollGutter, Dimension_SettingsScroll.X);
	declare Text ML_SettingsScrollLines;
	for (I, 1, SettingsLineNb) {
		ML_SettingsScrollLines ^= """
			<frameinstance 
				modelid="{{{P}}}framemodel-setting-line" 
				class="{{{Scroll::C_Class_Element}}} {{{MenuSounds::C_Class}}}" 
				data-menusounds-selectsound="{{{MenuSounds::C_Sound_Silent}}}"
				hidden="1"
			/>
		""";
	}

	// Scroll line properties
	declare Real SizeX_Skew = MLHelpers::SkewX(Size_SettingsScrollLine.Y, 10.);
	declare Real SizeX_Padding = 3.;
	declare Vec2 Size_ScrollLineLeft = <Size_SettingsScrollLine.X * (2./3.), Size_SettingsScrollLine.Y>;
	declare Vec2 Size_ScrollLineRight = <Size_SettingsScrollLine.X * (1./3.) + SizeX_Skew, Size_SettingsScrollLine.Y>;
	declare Vec2 Size_SettingName = <Size_ScrollLineLeft.X - (SizeX_Padding * 2), Size_SettingsScrollLine.Y>;
	declare Real PosY_LabelShift = Size_SettingsScrollLine.Y * -0.05;
	declare Real Opacity_ScrollLineUnfocus = 0.6;
	declare Real Opacity_ScrollLineFocus = 1.;
	declare Real Opacity_ScrollLineFocusMissingPermission = 0.8;
	declare Real Opacity_ScrollLineDisabled = 0.6;
	declare Vec2 Pos_SectionName = <1., -Size_SettingsScrollLine.Y>;
	declare Vec2 Size_SectionName = <Size_SettingsScrollLine.X - 2., Size_SettingsScrollLine.Y>;
	
	// Lock properties
	declare Vec2 Size_Lock = <Size_SettingsScrollLine.Y, Size_SettingsScrollLine.Y> * 0.9;
	declare Real Opacity_LockFocus = 0.6;
	declare Real Opacity_LockUnfocus = 0.4;

	// List widget properties
	declare Vec2 Pos_WidgetList = <Size_ScrollLineLeft.X - SizeX_Skew, 0.>;
	declare Real Padding_WidgetList = 8.;
	declare Vec2 Pos_ButtonListPrevious = <Padding_WidgetList, 0.>;
	declare Vec2 Pos_ButtonListNext = <Size_ScrollLineRight.X - Padding_WidgetList, 0.>;
	declare Vec2 Size_ButtonsListPreviousNext = <Size_ScrollLineRight.Y * 0.6, Size_ScrollLineRight.Y * 0.6>;
	declare Vec2 Pos_ListValue = <Size_ScrollLineRight.X * 0.5, PosY_LabelShift>;
	declare Vec2 Size_ListValue = <Size_ScrollLineRight.X - (Padding_WidgetList * 2) - Size_ButtonsListPreviousNext.X - 5., Size_ScrollLineRight.Y>;

	// Centered widget properties
	declare Vec2 Pos_WidgetCenter = <Size_ScrollLineLeft.X - SizeX_Skew + (Size_ScrollLineRight.X * 0.5), 0.>;

	// Text field widget properties
	declare Real Opacity_TextFieldBgUnfocus = 0.2;
	declare Real Opacity_TextFieldBgFocus = 0.8;

	// Binding widget properties
	declare Vec2 Pos_WidgetBinding = <Size_ScrollLineLeft.X, 0.>;
	declare Vec2 Size_PadButtonIcon = <Size_ScrollLineRight.Y - 2., Size_ScrollLineRight.Y - 2.>;
	declare Real Opacity_BindingBgUnfocus = 0.2;
	declare Real Opacity_BindingBgDisabled = 0.2;
	declare Real Opacity_BindingBgFocus = 0.4;
	declare Real Opacity_BindingBgFocusMissingPermission = 0.3;

	// Discard changes pop-up properties
	declare Text[Integer] PopUpDiscardChangesChoices = [
		C_PopUpDiscardChangesChoices_No => _("Cancel"),
		C_PopUpDiscardChangesChoices_Yes => _("|Infinitive|Confirm")
	];
	declare PopUpMultiChoice::K_DescriptionPart[] PopUpDiscardChangesDescription = [
		//L16N [Settings] Pop-up warning the player that they will lose the changes they made if they proceed
		PopUpMultiChoice::CreateDescriptionPart(_("You have not applied your new settings."), <130., 15.>, 3., FontManager::C_GameFontRegular, "$t$i", <1., 1., 1.>, True),
		//L16N [Settings] Pop-up warning the player that they will lose the changes they made if they proceed
		PopUpMultiChoice::CreateDescriptionPart(_("Are you sure you want to discard your changes?"), <130., 10.>, 3., FontManager::C_GameFontSemiBold, "$t$i", ColorPalette::C_Color_Vec3_GreenOne, True)
	];
	//L16N [Settings] Pop-up warning the player that they will lose the changes they made if they proceed
	declare Text Text_DiscardChanges = _("Discard changes");

	declare Text Img_PendingChanges = "file://Media/Manialinks/Nadeo/TMNext/Menus/Settings/Menu_Settings_PendingChanges.dds";
	declare Text Img_OutputScaleArrow = "file://Media/Manialinks/Nadeo/TMNext/Menus/Settings/Menu_Settings_Arrow.dds";

	return MV::Component(
		C_Name,
		"""
<stylesheet>
	<style class="{{{P}}}text-bold" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$t$i" textcolor="ffffff" textsize="3" />
	<style class="{{{P}}}text-semibold" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$t$i" textcolor="ffffff" textsize="3" />
	<style class="{{{P}}}text-regular" valign="center2" textfont="{{{FontManager::C_GameFontRegular}}}" textprefix="$t$i" textcolor="ffffff" textsize="3" />
</stylesheet>

<!-- Keybind display -->
<framemodel id="{{{P}}}framemodel-keybind">
	<frameinstance
		id="{{{P}}}asset-bg-keybind"
		modelid="{{{ExpendableAsset::C_Name}}}"
		z-index="0"
		data-width="20"
		data-height="6.5"
		data-halign="left"
		data-valign="center"
		data-color="{{{ColorPalette::C_Color_DarkBlue}}}"
		data-opacity="{{{Opacity_BindingBgUnfocus}}}"
	/>
	<label id="{{{P}}}label-keybind" class="{{{P}}}text-bold" z-index="1" size="20 6.5" halign="center" textsize="2.5" opacity="{{{Opacity_ScrollLineUnfocus}}}" translate="0" />
	<quad id="{{{P}}}quad-pad-button-icon" z-index="2" {{{MLHelpers::Size(Size_PadButtonIcon)}}} valign="center" hidden="1" />
</framemodel>

<!-- One line of setting in the scroll -->
<framemodel id="{{{P}}}framemodel-setting-line" class="{{{Navigation::C_Class_Container}}}">
	<label id="{{{P}}}label-section-name" class="{{{P}}}text-bold" {{{MLHelpers::Pos(Pos_SectionName)}}} z-index="0" {{{MLHelpers::Size(Size_SectionName)}}} valign="bottom" textsize="3.3" hidden="1" />
	<quad id="{{{P}}}quad-lock" pos="-1 {{{Size_ScrollLineLeft.Y * -0.5}}}" {{{MLHelpers::Size(Size_Lock)}}} halign="right" valign="center" image="{{{Const::C_ImageUrl_Icon_Lock_Oblique}}}" colorize="ffffff" opacity="{{{Opacity_LockUnfocus}}}" hidden="1" />

	<frame id="{{{P}}}frame-setting-line-bg" z-index="1">
		<quad class="{{{Scroll::C_Class_ActivationZone}}}" {{{MLHelpers::Size(Size_SettingsScrollLine)}}} opacity="0" scriptevents="1"/>
		<frameinstance
			id="{{{P}}}asset-bg-left"
			modelid="{{{ExpendableAsset::C_Name}}}"
			z-index="1"
			data-width="{{{Size_ScrollLineLeft.X}}}"
			data-height="{{{Size_ScrollLineLeft.Y}}}"
			data-halign="left"
			data-valign="top"
			data-color="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-image-left="{{{Const::C_ImageUrl_Common_ButtonRounded_Start}}}"
			data-size-left="128 256"
			data-colormode-left="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
			data-opacity="{{{Opacity_ScrollLineUnfocus}}}"
		/>
		<frameinstance
			id="{{{P}}}asset-bg-right"
			modelid="{{{ExpendableAsset::C_Name}}}"
			pos="{{{Size_ScrollLineLeft.X - SizeX_Skew}}} 0"
			z-index="2"
			data-width="{{{Size_ScrollLineRight.X}}}"
			data-height="{{{Size_ScrollLineRight.Y}}}"
			data-halign="left"
			data-valign="top"
			data-color="{{{ColorPalette::C_Color_GreenTwo}}}"
			data-image-right="{{{Const::C_ImageUrl_Common_ButtonRounded_End}}}"
			data-size-right="128 256"
			data-colormode-right="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
			data-opacity="{{{Opacity_ScrollLineUnfocus}}}"
		/>
		<frameinstance
			id="{{{P}}}asset-bg-disabled"
			modelid="{{{ExpendableAsset::C_Name}}}"
			z-index="3"
			data-width="{{{Size_SettingsScrollLine.X}}}"
			data-height="{{{Size_SettingsScrollLine.Y}}}"
			data-halign="left"
			data-valign="top"
			data-color="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}"
			data-opacity="{{{Opacity_ScrollLineUnfocus}}}"
			hidden="1"
		/>
	</frame>
	<frame id="{{{P}}}frame-widget" pos="0 {{{Size_SettingsScrollLine.Y * -0.5}}}" z-index="2">
		<label id="{{{P}}}label-name" class="{{{P}}}text-semibold" pos="{{{SizeX_Padding}}} {{{PosY_LabelShift}}}" {{{MLHelpers::Size(Size_SettingName)}}} textsize="2.5" opacity="{{{Opacity_ScrollLineUnfocus}}}" />

		<!-- List widget -->
		<frame id="{{{P}}}frame-type-list" {{{MLHelpers::Pos(Pos_WidgetList)}}} hidden="1">
			<frameinstance
				id="{{{P}}}button-list-previous"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_FocusSettingLine}}} {{{MenuSounds::C_Class}}}"
				{{{MLHelpers::Pos(Pos_ButtonListPrevious)}}}
				data-size="{{{Size_ButtonsListPreviousNext.X}}} {{{Size_ButtonsListPreviousNext.Y}}}"
				data-image="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
				data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
				data-bgcolor="{{{ColorPalette::C_Color_White}}}"
				data-focuscolor="{{{ColorPalette::C_Color_White}}}"
				data-opacity="{{{Opacity_ScrollLineUnfocus}}}"
				data-opacityunfocus="{{{Opacity_ScrollLineUnfocus}}}"
				data-halign="left"
				data-valign="center"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="{{{MenuSounds::C_Sound_ArrowSelect}}}"
				data-menusounds-playsoundonlyformouse="1"
			/>
			<frameinstance
				id="{{{P}}}button-list-next"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_FocusSettingLine}}} {{{MenuSounds::C_Class}}}"
				{{{MLHelpers::Pos(Pos_ButtonListNext)}}}
				data-size="{{{Size_ButtonsListPreviousNext.X}}} {{{Size_ButtonsListPreviousNext.Y}}}"
				data-image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
				data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
				data-bgcolor="{{{ColorPalette::C_Color_White}}}"
				data-focuscolor="{{{ColorPalette::C_Color_White}}}"
				data-opacity="{{{Opacity_ScrollLineUnfocus}}}"
				data-opacityunfocus="{{{Opacity_ScrollLineUnfocus}}}"
				data-halign="right"
				data-valign="center"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="{{{MenuSounds::C_Sound_ArrowSelect}}}"
				data-menusounds-playsoundonlyformouse="1"
			/>
			<quad
				id="{{{P}}}quad-list-previous-disabled"
				{{{MLHelpers::Pos(Pos_ButtonListPrevious)}}}
				size="{{{Size_ButtonsListPreviousNext.X}}} {{{Size_ButtonsListPreviousNext.Y}}}"
				halign="left"
				valign="center"
				image="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
				colorize="{{{ColorPalette::C_Color_White}}}"
				opacity="0.2"
				hidden="1"
			/>
			<quad
				id="{{{P}}}quad-list-next-disabled"
				{{{MLHelpers::Pos(Pos_ButtonListNext)}}}
				size="{{{Size_ButtonsListPreviousNext.X}}} {{{Size_ButtonsListPreviousNext.Y}}}"
				halign="right"
				valign="center"
				image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
				colorize="{{{ColorPalette::C_Color_White}}}"
				opacity="0.2"
				hidden="1"
			/>
			<label id="{{{P}}}label-list-value" class="{{{P}}}text-semibold" {{{MLHelpers::Pos(Pos_ListValue)}}} {{{MLHelpers::Size(Size_ListValue)}}} halign="center" textsize="2.5" opacity="{{{Opacity_ScrollLineUnfocus}}}" translate="1" />
		</frame>

		<!-- Checkbox widget -->
		<frame id="{{{P}}}frame-type-checkbox" {{{MLHelpers::Pos(Pos_WidgetCenter)}}} hidden="1">
			<frameinstance
				id="{{{P}}}checkbox-value"
				modelid="{{{Checkbox::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_FocusSettingLine}}} {{{C_Class_NoFocus}}} {{{MenuSounds::C_Class}}}"
				data-opacityfocus="{{{Opacity_ScrollLineUnfocus}}}"
				data-opacityunfocus="{{{Opacity_ScrollLineUnfocus}}}"
				data-iconchecked="{{{Const::C_ImageUrl_Icon_Checkbox_Active_Square}}}"
				data-iconunchecked="{{{Const::C_ImageUrl_Icon_Checkbox_Inactive_Square}}}"
				data-iconcolor="{{{ColorPalette::C_Color_White}}}"
				data-iconsize="8 8"
				data-texthalign="left"
				data-textfont="{{{FontManager::C_GameFontSemiBold}}}"
				data-textcolor="{{{ColorPalette::C_Color_White}}}"
				data-textsize="2.5"
				data-textxpos="0.7"
				data-fitlabel="1"
				data-halign="center"
				data-valign="center"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="{{{Checkbox::C_NavZone}}}"
				data-menusounds-playsoundonlyformouse="1"
			/>
		</frame>

		<!-- Slider widget -->
		<frame id="{{{P}}}frame-type-slider" {{{MLHelpers::Pos(Pos_WidgetCenter)}}} hidden="1">
			<frame id="{{{P}}}frame-slider-align">
				<frameinstance
					id="{{{P}}}textfield-slider-value"
					modelid="{{{TextField::C_Name}}}"
					class="{{{Navigation::C_Class}}} {{{C_Class_FocusSettingLine}}} {{{C_Class_NoFocus}}} {{{MenuSounds::C_Class}}}"
					pos="-35.5 0"
					data-size="14 6.5"
					data-halign="center"
					data-valign="center"
					data-textsize="2.5"
					data-bgopacityfocus="{{{Opacity_TextFieldBgFocus}}}"
					data-bgopacityunfocus="{{{Opacity_TextFieldBgUnfocus}}}"
					data-textopacityfocus="{{{Opacity_ScrollLineFocus}}}"
					data-textopacityunfocus="{{{Opacity_ScrollLineUnfocus}}}"
					data-nav-inputs="select"
					data-nav-targets="_"
					data-nav-group="{{{C_NavGroup_MouseOnly}}}"
					data-nav-zone="{{{TextField::C_NavZone}}}"
					data-menusounds-playsoundonlyformouse="1"
				/>
				<label id="{{{P}}}label-slider-value-disabled" class="{{{P}}}text-semibold" pos="-35.5 {{{PosY_LabelShift}}}" size="14 6.5" halign="center" textsize="2.5" textcolor="808080" hidden="1" />
				<frameinstance
					id="{{{P}}}slider-value"
					modelid="{{{Slider::C_Name}}}"
					class="{{{Navigation::C_Class}}} {{{C_Class_FocusSettingLine}}} {{{MenuSounds::C_Class}}}"
					data-halign="center"
					data-valign="center"
					data-opacity="{{{Opacity_ScrollLineUnfocus}}}"
					data-nav-group="{{{C_NavGroup_MouseOnly}}}"
					data-nav-zone="{{{Slider::C_NavZone}}}"
					data-menusounds-playsoundonlyformouse="1"
				/>
			</frame>
		</frame>

		<!-- Text field widget -->
		<frame id="{{{P}}}frame-type-textfield" {{{MLHelpers::Pos(Pos_WidgetCenter)}}} hidden="1">
			<frameinstance
				id="{{{P}}}textfield-value"
				modelid="{{{TextField::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_FocusSettingLine}}} {{{C_Class_NoFocus}}} {{{MenuSounds::C_Class}}}"
				data-size="63 6.5"
				data-halign="center"
				data-valign="center"
				data-textsize="2.5"
				data-bgopacityfocus="{{{Opacity_TextFieldBgFocus}}}"
				data-bgopacityunfocus="{{{Opacity_TextFieldBgUnfocus}}}"
				data-textopacityfocus="{{{Opacity_ScrollLineFocus}}}"
				data-textopacityunfocus="{{{Opacity_ScrollLineUnfocus}}}"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-zone="{{{TextField::C_NavZone}}}"
				data-menusounds-playsoundonlyformouse="1"
			/>
			<label id="{{{P}}}label-textfield-disabled" class="{{{P}}}text-semibold" pos="0 {{{PosY_LabelShift}}}" {{{MLHelpers::Size(Size_ScrollLineRight - <2 * SizeX_Padding, 0.>)}}} halign="center" textsize="2.5" textcolor="808080" hidden="1" />
		</frame>

		<!-- Binding widget -->
		<frame id="{{{P}}}frame-type-binding" {{{MLHelpers::Pos(Pos_WidgetBinding)}}} {{{MLHelpers::Size(Size_ScrollLineRight - <SizeX_Skew * 2, 0.>)}}} halign="left" valign="center" hidden="1">
			<frame id="{{{P}}}frame-align-keybinds">
				<frameinstance modelid="{{{P}}}framemodel-keybind" class="{{{P}}}keybind {{{P}}}text-to-speech" />
				<frameinstance modelid="{{{P}}}framemodel-keybind" class="{{{P}}}keybind" />
				<frameinstance modelid="{{{P}}}framemodel-keybind" class="{{{P}}}keybind" />
				<frameinstance modelid="{{{P}}}framemodel-keybind" class="{{{P}}}keybind" />
				<frameinstance modelid="{{{P}}}framemodel-keybind" class="{{{P}}}keybind" />
			</frame>
		</frame>

		<!-- Button widget -->
		<frame id="{{{P}}}frame-type-button" {{{MLHelpers::Pos(Pos_WidgetCenter)}}} hidden="1">
			<label id="{{{P}}}label-button-value" class="{{{P}}}text-bold" pos="0 {{{PosY_LabelShift}}}" {{{MLHelpers::Size(Size_ScrollLineRight - <2 * SizeX_Padding, 0.>)}}} halign="center" textsize="2.5" opacity="{{{Opacity_ScrollLineUnfocus}}}" />
		</frame>

		<!-- Latency test widget -->
		<frame id="{{{LatencyTest::C_Id_FrameLatencyTest}}}" {{{MLHelpers::Pos(Pos_WidgetCenter)}}} hidden="1">
			<label id="{{{LatencyTest::C_Id_LabelLatencyMs}}}" class="{{{P}}}text-semibold" pos="0 {{{PosY_LabelShift}}}" size="{{{Size_ScrollLineRight.X*0.25}}} {{{Size_ScrollLineRight.Y}}}" halign="left" textsize="2.5" />
			<label id="{{{LatencyTest::C_Id_LabelLatencyText}}}" class="{{{P}}}text-regular" pos="0 {{{PosY_LabelShift}}}" size="{{{Size_ScrollLineRight.X*0.6}}} {{{Size_ScrollLineRight.Y}}}" halign="right" textsize="1.5" />
			<label id="{{{LatencyTest::C_Id_LabelRemainingInputs}}}" class="{{{P}}}text-semibold" pos="{{{Size_ScrollLineRight.X*0.43}}} {{{PosY_LabelShift}}}" size="{{{Size_ScrollLineRight.X*0.2}}} {{{Size_ScrollLineRight.Y}}}" halign="right" textsize="2.5" textcolor="{{{ColorPalette::C_Color_GreenFive}}}"/>
			<frameinstance id="{{{LatencyTest::C_Id_ButtonIconInput}}}" modelid="{{{ButtonIcon::C_Name}}}" data-size="8 8" data-bind="A" data-opacity="0"/>
		</frame>
	</frame>
</framemodel>

<frame id="{{{P}}}frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="cancel;appmenu" data-nav-targets="_;_" data-nav-group="{{{C_NavGroup_Global}}}">
	<!-- Background -->
	<quad id="{{{P}}}capture-mouse-events" size="320 180" z-index="-2" halign="center" valign="center" opacity="0" fullscreen="1" scriptevents="1" />
	<quad id="{{{P}}}quad-background" image="{{{C_BackgroundImageUrl}}}" size="320 180" z-index="-1" halign="center" valign="center" fullscreen="1" />

	<!-- Dimmer -->
	<quad id="{{{P}}}quad-dimmer" size="320 180" z-index="2" halign="center" valign="center" fullscreen="1" bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0" hidden="1" />

	<!-- Discard changes pop-up -->
	<frameinstance
		id="{{{P}}}pop-up-discard-changes" 
		modelid="{{{PopUpMultiChoice::C_Name}}}"
		z-index="3"
		data-title="{{{Text_DiscardChanges}}}"
		data-description="{{{TL::MLEncode(PopUpDiscardChangesDescription.tojson())}}}"
		data-choices="{{{TL::MLEncode(PopUpDiscardChangesChoices.tojson())}}}"
		data-styles-secondchoice="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_ButtonWarning}}}"
		data-close-after-selection="0"
		hidden="1"
	/>

	<!-- Activate key confirmation -->
	<frameinstance 
		id="{{{P}}}popupmultichoice-activate-key" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}"
		modelid="{{{PopUpMultiChoice::C_Name}}}" 
		data-title="{{{Text_ActivateKey}}}"
		data-choices="{{{TL::MLEncode(C_Choices_ActivateKey.tojson())}}}" 
		hidden="1"
	/>

	<!-- Player card -->
	<frame id="{{{P}}}frame-player-card" pos="-104.5 73">
		<quad z-index="0" {{{MLHelpers::Size(Size_PlayerCard)}}} halign="center" valign="center" image="{{{Const::C_ImageUrl_Overlay_Widget_BG}}}" />
		<quad id="{{{P}}}quad-player-card-flag" pos="-{{{Size_PlayerCard.X * 0.51}}} 0" z-index="1" {{{MLHelpers::Size(Size_PlayerCardFlag)}}} keepratio="Clip" image="file://ZoneFlags/Path/World" alphamask="{{{Const::C_ImageUrl_Overlay_Profile_Flag_Mask}}}" valign="center" />
		<frameinstance id="{{{P}}}playername-player-card-name" modelid="{{{PlayerName::C_Name}}}" pos="-21 1.75" z-index="2" data-size="64 10" data-textsize="3" data-valign="center2" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" data-textprefix="$t$i" data-textcolor="ffffff" />
		<label id="{{{P}}}label-player-card-zone" class="{{{P}}}text-semibold" pos="-21.5 -3.9" z-index="2" size="62 10" textsize="1" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" />
	</frame>

	<!-- Online services status card -->
	<frameinstance id="{{{P}}}online-services-status-card" modelid="{{{OnlineServicesStatusCard::C_Name}}}"	pos="107.5 73" />

	<!-- Game restart required message -->
	<label id="{{{P}}}label-restart-required" class="{{{P}}}text-semibold" pos="149 73" size="200 6" halign="right" textsize="2" textcolor="ff0000" text="{{{Text_RestartRequiredShort}}}" hidden="1" />

	<!-- Tabs -->
	<frameinstance
		id="{{{P}}}navigationtabs-categories"
		modelid="{{{NavigationTabs::C_Name}}}"
		pos="-123 49.5"
		data-halign="left"
	/>

	<!-- Display area calibration -->
	<frame id="{{{P}}}frame-area-calibration">
		<quad id="{{{P}}}quad-arrow-top-left" pos="-160 90" size="{{{MLHelpers::MLKeepRatioFromY(116., 116., 20.)}}}" halign="left" valign="bottom" image="{{{Img_OutputScaleArrow}}}" colorize="FFFFFF" rot="90" opacity="0." />
		<quad id="{{{P}}}quad-arrow-top-right" pos="160 90" size="{{{MLHelpers::MLKeepRatioFromY(116., 116., 20.)}}}" halign="left" valign="bottom" image="{{{Img_OutputScaleArrow}}}" colorize="FFFFFF" rot="180" opacity="0." />
		<quad id="{{{P}}}quad-arrow-bottom-left" pos="-160 -90" size="{{{MLHelpers::MLKeepRatioFromY(116., 116., 20.)}}}" halign="left" valign="bottom" image="{{{Img_OutputScaleArrow}}}" colorize="FFFFFF" rot="0" opacity="0." />
		<quad id="{{{P}}}quad-arrow-bottom-right" pos="160 -90" size="{{{MLHelpers::MLKeepRatioFromY(116., 116., 20.)}}}" halign="left" valign="bottom" image="{{{Img_OutputScaleArrow}}}" colorize="FFFFFF" rot="-90" opacity="0." />
	</frame>

	<!-- Settings scroll -->
	<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="{{{P}}}scroll-settings" z-index="1" />
	<frame
		id="{{{P}}}scroll-settings"
		class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
		pos="-124.5 41.9"
		data-elements-per-line="{{{Dimension_SettingsScroll.X}}}"
		data-element-size="{{{Size_SettingsScrollLine.X}}} {{{Size_SettingsScrollLine.Y}}}"
		data-margin-size="{{{Size_SettingsScrollGutter.X}}} {{{Size_SettingsScrollGutter.Y}}}"
		data-window-size="{{{Size_SettingsScroll.X}}} {{{Size_SettingsScroll.Y}}}"
		data-skew="-10"
		data-scrollpadding="25"
		data-scrollbar-xoffset="2"
		data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
		data-scroll-indicator-colorize="FFFFFF"
		data-scroll-indicator-size="12"
		data-scroll-indicator-x-offset="-16"
		data-scroll-indicator-y-offset="-10"
		data-nav-group="{{{C_NavGroup_Main}}}"
	>
		<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
		{{{ML_SettingsScrollLines}}}
	</frame>

	<!-- Info labels -->
	<frame pos="0 -68.5">
		<label id="{{{P}}}label-info-title" class="{{{P}}}text-bold" size="160 6" halign="center" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" />
		<label id="{{{P}}}label-info-description" class="{{{P}}}text-semibold" pos="0 -3" size="160 20" halign="center" valign="top" textsize="2" maxline="3" />
		<label id="{{{P}}}label-info-alert" class="{{{P}}}text-semibold" pos="0 -3" size="160 20" halign="center" valign="top" textsize="2.5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" autonewline="1" maxline="3"/>
	</frame>

	<!-- Bottom buttons -->
	<frame pos="0 -73">
		<frameinstance id="{{{P}}}button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="-151.5 0" z-index="3" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
		<frameinstance
			id="{{{P}}}button-back"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_BottomButton}}} {{{MenuSounds::C_Class}}}"
			pos="-151.5 0"
			z-index="2"
			data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_PageBack}}}"
			data-valign="center"
			data-max-width="70"
			data-nav-inputs="select;right;up"
			data-nav-targets="_;{{{P}}}button-apply;{{{P}}}scroll-settings"
			data-nav-group="{{{C_NavGroup_Main}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			data-menusounds-selectsound="{{{MenuSounds::C_Sound_Cancel}}}"
		/>
		<frameinstance
			id="{{{P}}}button-apply"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_BottomButton}}}"
			pos="151 0"
			z-index="2"
			data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_SizeExpendable}}}"
			data-text="{{{Text_Apply}}}"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;up"
			data-nav-targets="_;{{{P}}}button-back;{{{P}}}scroll-settings"
			data-nav-group="{{{C_NavGroup_Main}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
		<quad id="{{{P}}}quad-pending-changes" pos="150.25 5.75" z-index="3" size="3 3" halign="center" valign="center" image="{{{Img_PendingChanges}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" hidden="1" />
		<frameinstance modelid="{{{ButtonIcon::C_Name}}}" pos="155 0" z-index="4" data-size="8 8" data-bind="menu" data-hideformouse="1" />
	</frame>
	
	<!-- Version number -->
	<frame pos="-155 -84.1">
		<frameinstance modelid="{{{DisplayVersion::C_Name}}}" />
	</frame>
	
	<!-- Controller info -->
	<frameinstance id="{{{P}}}button-list-settings" modelid="{{{MenuButtonList::C_Name}}}" z-index="4" />
</frame>
		""",
		"""
#Include "TextLib" as {{{P}}}TL
#Include "TimeLib" as {{{P}}}TiL
#Include "MathLib" as {{{P}}}ML
#Include "ColorLib" as {{{P}}}CL
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as {{{P}}}Http
#Include "Libs/Nadeo/CommonLibs/Common/Privileges.Script.txt" as {{{P}}}Privileges
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as {{{P}}}Platform
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as {{{P}}}MainUser
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as {{{P}}}Tools
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as {{{P}}}ButtonIcon
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as {{{P}}}Config
#Include "Libs/Nadeo/TMNext/TrackMania/API/ActivateKeyAPI.Script.txt" as {{{P}}}ActivateKeyAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as {{{P}}}ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/RequestRedraw.Script.txt" as {{{P}}}RequestRedraw

#Struct {{{P}}}K_Values {
	Text ValueText;
	Real ValueReal;
	Boolean ValueBoolean;
	Integer ValueInteger;
	Text[] ValueBinds;
	Text[] ValueButtonIcons;
	Real[Text] ValueControlAnalogReal;
	Boolean[Text] ValueControlAnalogBoolean;
}
#Struct {{{P}}}K_List {
	Boolean CanLoop;
	Text[] Labels;
	Text[] ValuesText;
	Int2[] ValuesInt2;
	Integer[] ValuesInteger;
	Boolean[] ValuesBoolean;
	CDisplaySettings::EDisplayMode[] ValuesDisplayMode;
	CDisplaySettings::EDisplaySync[] ValuesDisplaySync;
	CDisplaySettings::EGpuSync[] ValuesGpuSync;
	CDisplaySettings::EForwardAA[] ValuesForwardAA;
	CDisplaySettings::EDeferredAA[] ValuesDeferredAA;
	CDisplaySettings::EPreset[] ValuesPreset;
	CDisplaySettings::EShaderQuality[] ValuesShaderQuality;
	CDisplaySettings::EShadows[] ValuesShadows;
	CDisplaySettings::ETextureFilter[] ValuesTextureFiltering;
	CDisplaySettings::EVehicleReflect[] ValuesVehicleReflect;
	CDisplaySettings::EWaterReflect[] ValuesWaterReflect;
	CDisplaySettings::EFxBloomHdr[] ValuesFxBloomHdr;
	CUserV2Profile::ECustomPlayerModels[] ValuesCustomPlayerModels;
	CManiaPlanet::EPlayerInfoDisplayType[] ValuesPlayerInfoDisplayType;
	CUserV2Profile::EPlayerVisibility[] ValuesPlayerVisibility;
	CUserV2Profile::ERoadsideSpectatorVisibility[] ValuesRoadsideSpectatorVisibility;
	CDisplaySettings::EShowPerformance[] ValuesShowPerformance;
	CManiaPlanet::ENetworkSpeed[] ValuesNetworkSpeed;
	CUserV2Profile::EMapEditorMood[] ValuesMapEditorMood;
	CUserV2Profile::EMapEditorDifficulty[] MapEditorDifficulty;
	CDisplaySettings::EScreenshotExt[] ValuesScreenshotExt;
	CDisplaySettings::EConsoleResolution[] ValuesConsoleResolution;
	NSystemConfig::EVoiceDetectionMode[] ValuesVoiceDetectionMode;
	CUserV2Profile::EIngameChatBackground[] ValuesChatBackground;
	CUserV2Profile::EIngameChatTextSize[] ValuesChatTextSize;
}
#Struct {{{P}}}K_Slider {
	Integer Type;
	Vec2 RangeReal;
	Int2 RangeInteger;
	Integer Steps;
	Boolean DisplayTextField;
}
#Struct {{{P}}}K_Checkbox {
	Text TextLeft;
	Text TextRight;
}
#Struct {{{P}}}K_Setting {
	Integer Id;
	Integer Category;
	Integer SectionId;
	Integer SectionKey;
	Text Name;
	Integer Type;
	Text InfoTitle;
	Text InfoDescription;
	Text ButtonText;
	Integer ActionIndex;
	{{{P}}}K_Slider Slider;
	{{{P}}}K_List List;
	{{{P}}}K_Checkbox Checkbox;
	{{{P}}}K_Values Old;
	{{{P}}}K_Values New;
	Boolean IsDirty;
	Boolean IgnoreDirty;
	Integer Status;
	Boolean NeedRestart;
	Boolean HasDisplaySettingsPreset;
	Boolean NeedEditorQuickStart;
	Boolean NeedManualVoiceChatVoiceDetection;
	Text[] Permissions;
	Integer[] PlatformFamily;
	CSystemPlatform::ESystemPlatform[] Platforms;
	CPrivilegeMgr::EPrivilege[] Privileges;
}
#Struct {{{P}}}K_Binding {
	Integer ActionIndex;
	Text ActionName;
	Text[] Binds;
	Text[] ButtonIcons;
}
#Struct {{{P}}}K_Controls {
	CMlFrame NavigationTabs_Categories;
	CMlFrame Scroll_Settings;
	CMlLabel Label_InfoTitle;
	CMlLabel Label_InfoDescription;
	CMlLabel Label_InfoAlert;
	CMlFrame ButtonIcon_Back;
	CMlFrame Button_Back;
	CMlFrame Button_Apply;
	CMlFrame Frame_PlayerCard;
	CMlQuad Quad_PlayerFlag;
	CMlFrame PlayerName_Name;
	CMlLabel Label_PlayerZone;
	CMlFrame Frame_OnlineServicesStatusCard;
	CMlFrame PopUp_DiscardChanges;
	CMlFrame ButtonList_Settings;
	CMlQuad Quad_Dimmer;
	CMlLabel Label_RestartRequired;
	CMlQuad Quad_PendingChanges;
	CMlQuad Quad_Background;
	CMlFrame PopUp_ActivateKey;
	CMlFrame Frame_AreaCalibration;
}
#Struct {{{P}}}K_AfterDiscardPopUp {
	Integer Action;
	Integer DisplayedCategory;
}
#Struct {{{P}}}K_DraggedSlider {
	Boolean IsDragged;
	CMlFrame Slider;
	CMlFrame TextField;
	Integer SliderType;
}
#Struct {{{P}}}K_DisplaySettingsPreset {
	CDisplaySettings::EShaderQuality ShaderQuality_NextStart;
	CDisplaySettings::EShadows Shadows_NextStart;
	Integer TexturesQuality_NextStart;
	CDisplaySettings::EEverywhereReflect EverywhereReflect;
	CDisplaySettings::EWaterReflect WaterReflect;
	CDisplaySettings::EVehicleReflect VehicleReflect;
	CDisplaySettings::EFxBloomHdr FxBloomHdr;
	CDisplaySettings::EFxMotionBlur FxMotionBlur;
	CDisplaySettings::EFxBlur FxBlur;
}
#Struct {{{P}}}K_PrivilegesCheck {
	{{{P}}}Privileges::K_PrivilegesCheck Check;
	Integer SettingId;
	Integer SettingType;
	CMlFrame Frame_Setting;
	Integer Direction;
	Boolean PlaySound;
}
#Struct {{{P}}}K_State {
	{{{P}}}K_Controls Controls;
	Boolean ComponentEnabled;
	CMlControl LastBottomButtonFocused;
	Integer[][Integer] ScrollSettingIds;
	{{{P}}}K_Setting[Integer] Settings;
	Integer DisplayedCategory;
	Text[] ControlVehicleModels;
	Text ControlVehicleModel;
	Integer ControlControllerId;
	{{{P}}}K_Binding[] Bindings;
	Integer BindingsKeyShift;
	Integer IsEditingTextField;
	Integer CanResetIsEditingTextField;
	Boolean IsWaitingBind;
	Boolean IsWaitingBind_PlaySound;
	Int2 WindowSize;
	Real MasterVolume;
	Real EffectVolume;
	Real UIVolume;
	Real MusicVolume;
	Integer[Integer] LastFocusedSettingKey;
	Integer DefaultCategory;
	Boolean DiscardPopUpDisplayed;
	Boolean ActivateKeyPopUpDisplayed;
	{{{P}}}K_AfterDiscardPopUp AfterDiscardPopUp;
	Integer FocusedSectionId;
	Boolean CanTryToReloadDisplaySettings;
	Boolean CanTryToReloadAudioSettings;
	Boolean CreditsEnabled;
	Boolean ProfileEnabled;
	Boolean LatencyTestEnabled;
	Boolean VehicleSelectionEnabled;
	Integer InputPadsCount;
	Integer FocusedSettingType;
	Boolean ScrollIsFocused;
	Boolean ControllerInfoEnabled;
	Boolean CanEditSlider;
	Boolean SettingIsLocked;
	Boolean SettingsAreDirty;
	Boolean GameNeedRestart;
	Boolean ShowSettingsThatHaveDisplaySettingsPreset;
	Boolean TrackEditorQuickStartEnabled;
	Boolean IsCrossPlayActive;
	Boolean VoiceChatVoiceDetectionManualSensitivity;
	Integer AlertMessageEndTime;
	Integer PreviouslyFocusedTabId;
	Integer PreviouslyFocusedSectionId;
	Integer PreviouslyFocusedSettingId;
	Boolean IsAreaCalibrationDisplayed;
	Boolean IsPlayerCardForcedHide;
	Boolean IsOnboardingModeEnabled;
	{{{P}}}K_DraggedSlider DraggedSlider;
	{{{P}}}K_DisplaySettingsPreset[CDisplaySettings::EPreset] DisplaySettingsPresets;
	{{{P}}}K_PrivilegesCheck PrivilegesCheck;
}
#Struct {{{P}}}K_Event {
	Integer Type;
}

#Const {{{P}}}C_EventType_Back 1
#Const {{{P}}}C_EventType_Continue 2
#Const {{{P}}}C_EventType_OpenCredits 3
#Const {{{P}}}C_EventType_OpenProfile 4

#Const {{{P}}}C_ActionAfterDiscardPopUp_Null 0
#Const {{{P}}}C_ActionAfterDiscardPopUp_GoToCategory 1
#Const {{{P}}}C_ActionAfterDiscardPopUp_CloseSettings 2
#Const {{{P}}}C_ActionAfterDiscardPopUp_OpenCredits 3
#Const {{{P}}}C_ActionAfterDiscardPopUp_OpenProfile 4

#Const {{{P}}}C_TTSContextLevel_Page {{{dump(Const::C_TTSContextLevel_Component + Const::C_TTSContextLevel_Page)}}}
#Const {{{P}}}C_TTSContextLevel_Section {{{dump(Const::C_TTSContextLevel_Component + Const::C_TTSContextLevel_Section)}}}
#Const {{{P}}}C_TTSContextLevel_Setting {{{dump(Const::C_TTSContextLevel_Component + Const::C_TTSContextLevel_Setting)}}}

#Const {{{P}}}C_Zone_Translations {{{dump(Const::C_Zone_Translations)}}}

#Const {{{P}}}C_PopUpDiscardChangesChoices_No {{{dump(C_PopUpDiscardChangesChoices_No)}}}
#Const {{{P}}}C_PopUpDiscardChangesChoices_Yes {{{dump(C_PopUpDiscardChangesChoices_Yes)}}}

#Const {{{P}}}C_SettingType_Null {{{dump(C_SettingType_Null)}}}
#Const {{{P}}}C_SettingType_Section {{{dump(C_SettingType_Section)}}}
#Const {{{P}}}C_SettingType_List {{{dump(C_SettingType_List)}}}
#Const {{{P}}}C_SettingType_TextField {{{dump(C_SettingType_TextField)}}}
#Const {{{P}}}C_SettingType_Checkbox {{{dump(C_SettingType_Checkbox)}}}
#Const {{{P}}}C_SettingType_Slider {{{dump(C_SettingType_Slider)}}}
#Const {{{P}}}C_SettingType_Binding {{{dump(C_SettingType_Binding)}}}
#Const {{{P}}}C_SettingType_Button {{{dump(C_SettingType_Button)}}}

#Const {{{P}}}C_SettingStatus_Enabled 0
#Const {{{P}}}C_SettingStatus_Disabled 1
#Const {{{P}}}C_SettingStatus_Hidden 2
#Const {{{P}}}C_SettingStatus_MissingPermission 3

#Const {{{P}}}C_SliderType_Real {{{dump(C_SliderType_Real)}}}
#Const {{{P}}}C_SliderType_Integer {{{dump(C_SliderType_Integer)}}}
#Const {{{P}}}C_SliderType_Color {{{dump(C_SliderType_Color)}}}

#Const {{{P}}}C_SettingCategory_Null {{{dump(C_SettingCategory_Null)}}}
#Const {{{P}}}C_SettingCategory_Profile {{{dump(C_SettingCategory_Profile)}}}
#Const {{{P}}}C_SettingCategory_Video {{{dump(C_SettingCategory_Video)}}}
#Const {{{P}}}C_SettingCategory_Sound {{{dump(C_SettingCategory_Sound)}}}
#Const {{{P}}}C_SettingCategory_Controls {{{dump(C_SettingCategory_Controls)}}}
#Const {{{P}}}C_SettingCategory_HUD {{{dump(C_SettingCategory_HUD)}}}
#Const {{{P}}}C_SettingCategory_System {{{dump(C_SettingCategory_System)}}}
#Const {{{P}}}C_SettingCategories [
	//L16N [Settings] Title of the profile settings category (trigram, privacy, ...)
	{{{dump(C_SettingCategory_Profile)}}} => _("|Settings|Profile"),
	//L16N [Settings] Title of the video settings category (resolution, texture quality, ...)
	{{{dump(C_SettingCategory_Video)}}} => _("|Settings|Video"),
	//L16N [Settings] Title of the sound settings category (audio output, music volume, ...)
	{{{dump(C_SettingCategory_Sound)}}} => _("|Settings|Sound"),
	//L16N [Settings] Title of the input settings category (mouse sensibility, bindings, ...)
	{{{dump(C_SettingCategory_Controls)}}} => _("|Settings|Controls"),
	//L16N [Settings] Title of the HUD settings category (special block alerts, track editor quick start, ...)
	{{{dump(C_SettingCategory_HUD)}}} => _("|Settings|HUD"),
	//L16N [Settings] Title of the system settings category (language, network speed, ...)
	{{{dump(C_SettingCategory_System)}}} => _("|Settings|System")
]

#Const {{{P}}}C_SettingId_NullId {{{dump(C_SettingId_NullId)}}}
// Profile settings
#Const {{{P}}}C_SettingId_ProfileSectionAccount {{{dump(C_SettingId_ProfileSectionAccount)}}}
#Const {{{P}}}C_SettingId_ProfileTrigram {{{dump(C_SettingId_ProfileTrigram)}}}
#Const {{{P}}}C_SettingId_ProfileTrailsColor {{{dump(C_SettingId_ProfileTrailsColor)}}}
#Const {{{P}}}C_SettingId_ProfileCopyAccountId {{{dump(C_SettingId_ProfileCopyAccountId)}}}
#Const {{{P}}}C_SettingId_ProfileOpenPlayerPage {{{dump(C_SettingId_ProfileOpenPlayerPage)}}}
#Const {{{P}}}C_SettingId_ProfileOpenProfilePage {{{dump(C_SettingId_ProfileOpenProfilePage)}}}
#Const {{{P}}}C_SettingId_ProfileActivateKey {{{dump(C_SettingId_ProfileActivateKey)}}}
#Const {{{P}}}C_SettingId_ProfileSectionPrivacy {{{dump(C_SettingId_ProfileSectionPrivacy)}}}
#Const {{{P}}}C_SettingId_ProfileDisplayAds {{{dump(C_SettingId_ProfileDisplayAds)}}}
#Const {{{P}}}C_SettingId_ProfileEnablePersonalizedAds {{{dump(C_SettingId_ProfileEnablePersonalizedAds)}}}
// Video settings
#Const {{{P}}}C_SettingId_VideoSectionDisplay {{{dump(C_SettingId_VideoSectionDisplay)}}}
#Const {{{P}}}C_SettingId_VideoDevice {{{dump(C_SettingId_VideoDevice)}}}
#Const {{{P}}}C_SettingId_VideoDisplayMode {{{dump(C_SettingId_VideoDisplayMode)}}}
#Const {{{P}}}C_SettingId_VideoFullscreenResolution {{{dump(C_SettingId_VideoFullscreenResolution)}}}
#Const {{{P}}}C_SettingId_VideoWindowResolutionX {{{dump(C_SettingId_VideoWindowResolutionX)}}}
#Const {{{P}}}C_SettingId_VideoWindowResolutionY {{{dump(C_SettingId_VideoWindowResolutionY)}}}
#Const {{{P}}}C_SettingId_VideoShowWindowBorder {{{dump(C_SettingId_VideoShowWindowBorder)}}}
#Const {{{P}}}C_SettingId_VideoAutomaticQuality {{{dump(C_SettingId_VideoAutomaticQuality)}}}
#Const {{{P}}}C_SettingId_VideoAutomaticMinFPS {{{dump(C_SettingId_VideoAutomaticMinFPS)}}}
#Const {{{P}}}C_SettingId_VideoAutomaticMaxFPS {{{dump(C_SettingId_VideoAutomaticMaxFPS)}}}
#Const {{{P}}}C_SettingId_VideoLimitFPS {{{dump(C_SettingId_VideoLimitFPS)}}}
#Const {{{P}}}C_SettingId_VideoDisplaySync {{{dump(C_SettingId_VideoDisplaySync)}}}
#Const {{{P}}}C_SettingId_VideoGPUSync {{{dump(C_SettingId_VideoGPUSync)}}}
#Const {{{P}}}C_SettingId_VideoTrippleBuffer {{{dump(C_SettingId_VideoTrippleBuffer)}}}
#Const {{{P}}}C_SettingId_VideoAGPUseFactor {{{dump(C_SettingId_VideoAGPUseFactor)}}}
#Const {{{P}}}C_SettingId_VideoSectionAA {{{dump(C_SettingId_VideoSectionAA)}}}
#Const {{{P}}}C_SettingId_VideoForwardAA {{{dump(C_SettingId_VideoForwardAA)}}}
#Const {{{P}}}C_SettingId_VideoDeferredAA {{{dump(C_SettingId_VideoDeferredAA)}}}
#Const {{{P}}}C_SettingId_VideoRealtimeSSAA {{{dump(C_SettingId_VideoRealtimeSSAA)}}}
#Const {{{P}}}C_SettingId_VideoRealtimeSSAAMotion {{{dump(C_SettingId_VideoRealtimeSSAAMotion)}}}
#Const {{{P}}}C_SettingId_VideoRealtimeSSAAMinFPS {{{dump(C_SettingId_VideoRealtimeSSAAMinFPS)}}}
#Const {{{P}}}C_SettingId_VideoSectionAdvanced {{{dump(C_SettingId_VideoSectionAdvanced)}}}
#Const {{{P}}}C_SettingId_VideoCanSelectPreset {{{dump(C_SettingId_VideoCanSelectPreset)}}}
#Const {{{P}}}C_SettingId_VideoPreset {{{dump(C_SettingId_VideoPreset)}}}
#Const {{{P}}}C_SettingId_VideoShaderQuality {{{dump(C_SettingId_VideoShaderQuality)}}}
#Const {{{P}}}C_SettingId_VideoTexturesQuality {{{dump(C_SettingId_VideoTexturesQuality)}}}
#Const {{{P}}}C_SettingId_VideoShadows {{{dump(C_SettingId_VideoShadows)}}}
#Const {{{P}}}C_SettingId_VideoTextureFiltering {{{dump(C_SettingId_VideoTextureFiltering)}}}
#Const {{{P}}}C_SettingId_VideoVehicleReflect {{{dump(C_SettingId_VideoVehicleReflect)}}}
#Const {{{P}}}C_SettingId_VideoWaterReflect {{{dump(C_SettingId_VideoWaterReflect)}}}
#Const {{{P}}}C_SettingId_VideoEverywhereReflect {{{dump(C_SettingId_VideoEverywhereReflect)}}}
#Const {{{P}}}C_SettingId_VideoBloomHDR {{{dump(C_SettingId_VideoBloomHDR)}}}
#Const {{{P}}}C_SettingId_VideoMotionBlur {{{dump(C_SettingId_VideoMotionBlur)}}}
#Const {{{P}}}C_SettingId_VideoMotionBlurIntensity {{{dump(C_SettingId_VideoMotionBlurIntensity)}}}
#Const {{{P}}}C_SettingId_VideoSlowMotionBlur {{{dump(C_SettingId_VideoSlowMotionBlur)}}}
#Const {{{P}}}C_SettingId_VideoOpponentCustomization {{{dump(C_SettingId_VideoOpponentCustomization)}}}
#Const {{{P}}}C_SettingId_VideoPerformanceQuality {{{dump(C_SettingId_VideoPerformanceQuality)}}}
#Const {{{P}}}C_SettingId_VideoOutputScale {{{dump(C_SettingId_VideoOutputScale)}}}
// Sound settings
#Const {{{P}}}C_SettingId_SoundSectionGeneral {{{dump(C_SettingId_SoundSectionGeneral)}}}
#Const {{{P}}}C_SettingId_SoundEnable {{{dump(C_SettingId_SoundEnable)}}}
#Const {{{P}}}C_SettingId_SoundDevice {{{dump(C_SettingId_SoundDevice)}}}
#Const {{{P}}}C_SettingId_SoundMusicVolume {{{dump(C_SettingId_SoundMusicVolume)}}}
#Const {{{P}}}C_SettingId_SoundMasterVolume {{{dump(C_SettingId_SoundMasterVolume)}}}
#Const {{{P}}}C_SettingId_SoundEffectVolume {{{dump(C_SettingId_SoundEffectVolume)}}}
#Const {{{P}}}C_SettingId_SoundUIVolume {{{dump(C_SettingId_SoundUIVolume)}}}
#Const {{{P}}}C_SettingId_SoundMuteUnfocused {{{dump(C_SettingId_SoundMuteUnfocused)}}}
#Const {{{P}}}C_SettingId_SoundSectionVoiceChatAndTTS {{{dump(C_SettingId_SoundSectionVoiceChatAndTTS)}}}
#Const {{{P}}}C_SettingId_SoundVoiceChat {{{dump(C_SettingId_SoundVoiceChat)}}}
#Const {{{P}}}C_SettingId_SoundVoiceChatDeviceIn {{{dump(C_SettingId_SoundVoiceChatDeviceIn)}}}
#Const {{{P}}}C_SettingId_SoundVoiceChatDeviceOut {{{dump(C_SettingId_SoundVoiceChatDeviceOut)}}}
#Const {{{P}}}C_SettingId_SoundVoiceChatVoiceDetectionMode {{{dump(C_SettingId_SoundVoiceChatVoiceDetectionMode)}}}
#Const {{{P}}}C_SettingId_SoundVoiceChatVoiceDetectionSensitivity {{{dump(C_SettingId_SoundVoiceChatVoiceDetectionSensitivity)}}}
#Const {{{P}}}C_SettingId_SoundVoiceChatLoopback {{{dump(C_SettingId_SoundVoiceChatLoopback)}}}
#Const {{{P}}}C_SettingId_SoundVoiceChatAndTTSVolume {{{dump(C_SettingId_SoundVoiceChatAndTTSVolume)}}}
#Const {{{P}}}C_SettingId_SoundSpeechToText {{{dump(C_SettingId_SoundSpeechToText)}}}
#Const {{{P}}}C_SettingId_SoundTextToSpeech {{{dump(C_SettingId_SoundTextToSpeech)}}}
#Const {{{P}}}C_SettingId_SendTextAsVoice {{{dump(C_SettingId_SendTextAsVoice)}}}
// Control settings
#Const {{{P}}}C_SettingId_ControlSectionAnalogSettings {{{dump(C_SettingId_ControlSectionAnalogSettings)}}}
#Const {{{P}}}C_SettingId_ControlLatencyTest {{{dump(C_SettingId_ControlLatencyTest)}}}
#Const {{{P}}}C_SettingId_ControlAnalogVehicleSelection {{{dump(C_SettingId_ControlAnalogVehicleSelection)}}}
#Const {{{P}}}C_SettingId_ControlAnalogSensitivity {{{dump(C_SettingId_ControlAnalogSensitivity)}}}
#Const {{{P}}}C_SettingId_ControlAnalogDeadZone {{{dump(C_SettingId_ControlAnalogDeadZone)}}}
#Const {{{P}}}C_SettingId_ControlAnalogRumbleIntensity {{{dump(C_SettingId_ControlAnalogRumbleIntensity)}}}
#Const {{{P}}}C_SettingId_ControlTriggerHapticFeedbackEnabled {{{dump(C_SettingId_ControlTriggerHapticFeedbackEnabled)}}}
#Const {{{P}}}C_SettingId_ControlInvertSteer {{{dump(C_SettingId_ControlInvertSteer)}}}
#Const {{{P}}}C_SettingId_ControlAnalogWheelMode {{{dump(C_SettingId_ControlAnalogWheelMode)}}}
#Const {{{P}}}C_SettingId_ControlAccelIsToggleMode {{{dump(C_SettingId_ControlAccelIsToggleMode)}}}
#Const {{{P}}}C_SettingId_ControlBrakeIsToggleMode {{{dump(C_SettingId_ControlBrakeIsToggleMode)}}}
#Const {{{P}}}C_SettingId_ControlAnalogCenterSpringIntensity {{{dump(C_SettingId_ControlAnalogCenterSpringIntensity)}}}
#Const {{{P}}}C_SettingId_ControlSectionDevices {{{dump(C_SettingId_ControlSectionDevices)}}}
#Const {{{P}}}C_SettingId_ControlDevice {{{dump(C_SettingId_ControlDevice)}}}
#Const {{{P}}}C_SettingId_ControlUnbindAll {{{dump(C_SettingId_ControlUnbindAll)}}}
#Const {{{P}}}C_SettingId_ControlUnbindOne {{{dump(C_SettingId_ControlUnbindOne)}}}
#Const {{{P}}}C_SettingId_ControlBindDefault {{{dump(C_SettingId_ControlBindDefault)}}}
#Const {{{P}}}C_SettingId_ControlSectionBindings {{{dump(C_SettingId_ControlSectionBindings)}}}
#Const {{{P}}}C_SettingId_ControlEditBind {{{dump(C_SettingId_ControlEditBind)}}}
// HUD settings
#Const {{{P}}}C_SettingId_HUDSectionMarkers {{{dump(C_SettingId_HUDSectionMarkers)}}}
#Const {{{P}}}C_SettingId_HUDMarkersType {{{dump(C_SettingId_HUDMarkersType)}}}
#Const {{{P}}}C_SettingId_HUDMarkersSize {{{dump(C_SettingId_HUDMarkersSize)}}}
#Const {{{P}}}C_SettingId_HUDSectionCamera {{{dump(C_SettingId_HUDSectionCamera)}}}
#Const {{{P}}}C_SettingId_HUDPrioritizeAlternateCam1 {{{dump(C_SettingId_HUDPrioritizeAlternateCam1)}}}
#Const {{{P}}}C_SettingId_HUDPrioritizeAlternateCam2 {{{dump(C_SettingId_HUDPrioritizeAlternateCam2)}}}
#Const {{{P}}}C_SettingId_HUDPrioritizeAlternateCam3 {{{dump(C_SettingId_HUDPrioritizeAlternateCam3)}}}
#Const {{{P}}}C_SettingId_HUDInternalCamCarVisibility {{{dump(C_SettingId_HUDInternalCamCarVisibility)}}}
#Const {{{P}}}C_SettingId_HUDSectionMiscellaneous {{{dump(C_SettingId_HUDSectionMiscellaneous)}}}
#Const {{{P}}}C_SettingId_HUDDefaultOpponentVisibility {{{dump(C_SettingId_HUDDefaultOpponentVisibility)}}}
#Const {{{P}}}C_SettingId_HUDRoadsideSpectatorVisibility {{{dump(C_SettingId_HUDRoadsideSpectatorVisibility)}}}
#Const {{{P}}}C_SettingId_HUDEnableSpecialBlockMessage {{{dump(C_SettingId_HUDEnableSpecialBlockMessage)}}}
#Const {{{P}}}C_SettingId_HUDAlwaysDisplayTrackRecords {{{dump(C_SettingId_HUDAlwaysDisplayTrackRecords)}}}
#Const {{{P}}}C_SettingId_HUDChatAllowHide {{{dump(C_SettingId_HUDChatAllowHide)}}}
#Const {{{P}}}C_SettingId_HUDChatBackground {{{dump(C_SettingId_HUDChatBackground)}}}
#Const {{{P}}}C_SettingId_HUDChatTextSize {{{dump(C_SettingId_HUDChatTextSize)}}}
#Const {{{P}}}C_SettingId_HUDShowPerformance {{{dump(C_SettingId_HUDShowPerformance)}}}
// System settings
#Const {{{P}}}C_SettingId_SystemSectionLanguage {{{dump(C_SettingId_SystemSectionLanguage)}}}
#Const {{{P}}}C_SettingId_SystemLanguage {{{dump(C_SettingId_SystemLanguage)}}}
#Const {{{P}}}C_SettingId_SystemSectionMiscellaneous {{{dump(C_SettingId_SystemSectionMiscellaneous)}}}
#Const {{{P}}}C_SettingId_SystemColorblindMode {{{dump(C_SettingId_SystemColorblindMode)}}}
#Const {{{P}}}C_SettingId_SystemAutoSkipStartScreens {{{dump(C_SettingId_SystemAutoSkipStartScreens)}}}
#Const {{{P}}}C_SettingId_SystemScreenshotExtension {{{dump(C_SettingId_SystemScreenshotExtension)}}}
#Const {{{P}}}C_SettingId_SystemJoinLink {{{dump(C_SettingId_SystemJoinLink)}}}
#Const {{{P}}}C_SettingId_SystemCleanCache {{{dump(C_SettingId_SystemCleanCache)}}}
#Const {{{P}}}C_SettingId_SystemCredits {{{dump(C_SettingId_SystemCredits)}}}
#Const {{{P}}}C_SettingId_SystemSectionNetwork {{{dump(C_SettingId_SystemSectionNetwork)}}}
#Const {{{P}}}C_SettingId_SystemOnlineServicesStatus {{{dump(C_SettingId_SystemOnlineServicesStatus)}}}
#Const {{{P}}}C_SettingId_SystemNetworkSpeed {{{dump(C_SettingId_SystemNetworkSpeed)}}}
#Const {{{P}}}C_SettingId_SystemNetworkSpeedDownload {{{dump(C_SettingId_SystemNetworkSpeedDownload)}}}
#Const {{{P}}}C_SettingId_SystemNetworkSpeedUpload {{{dump(C_SettingId_SystemNetworkSpeedUpload)}}}
#Const {{{P}}}C_SettingId_SystemNetworkCrossPlay {{{dump(C_SettingId_SystemNetworkCrossPlay)}}}
#Const {{{P}}}C_SettingId_SystemSectionDownload {{{dump(C_SettingId_SystemSectionDownload)}}}
#Const {{{P}}}C_SettingId_SystemDownloadSkin {{{dump(C_SettingId_SystemDownloadSkin)}}}
#Const {{{P}}}C_SettingId_SystemDownloadMapMod {{{dump(C_SettingId_SystemDownloadMapMod)}}}
#Const {{{P}}}C_SettingId_SystemDownloadSign {{{dump(C_SettingId_SystemDownloadSign)}}}
#Const {{{P}}}C_SettingId_SystemSectionTrackEditorQuickStart {{{dump(C_SettingId_SystemSectionTrackEditorQuickStart)}}}
#Const {{{P}}}C_SettingId_SystemEnableTrackEditorQuickStart {{{dump(C_SettingId_SystemEnableTrackEditorQuickStart)}}}
#Const {{{P}}}C_SettingId_SystemTrackEditorQuickStartUseGamepadController {{{dump(C_SettingId_SystemTrackEditorQuickStartUseGamepadController)}}}
#Const {{{P}}}C_SettingId_SystemTrackEditorQuickStartDifficulty {{{dump(C_SettingId_SystemTrackEditorQuickStartDifficulty)}}}
#Const {{{P}}}C_SettingId_SystemTrackEditorQuickStartMood {{{dump(C_SettingId_SystemTrackEditorQuickStartMood)}}}

#Const {{{P}}}C_SettingKey_Null -1

#Const {{{P}}}C_Setting_Null {{{P}}}K_Setting {
	Id = {{{C_SettingId_NullId}}},
	Type = {{{C_SettingType_Null}}},
	Category = {{{C_SettingCategory_Null}}},
	IsDirty = False,
	SectionKey = -1,
	SectionId = {{{C_SettingId_NullId}}},
	HasDisplaySettingsPreset = False
}

#Const {{{P}}}C_List_VoiceChat_VoiceDetectionMode_PC {{{P}}}K_List {
	Labels = [
		//L16N [Settings] Automatic sensitivity : sensitivity of the microphone will be computed automatically
		_("|Voice chat microphone activation mode|Automatic sensitivity"),
		//L16N [Settings] Manual sensitivity : player can set the sensitivity of the microphone
		_("|Voice chat microphone activation mode|Manual sensitivity"),
		//L16N [Settings] Push-To-Talk : player needs to maintain an input to talk in the voice chat
		_("|Voice chat microphone activation mode|Push-To-Talk")
	],
	ValuesVoiceDetectionMode = [
		NSystemConfig::EVoiceDetectionMode::AutoDetect,
		NSystemConfig::EVoiceDetectionMode::Manual,
		NSystemConfig::EVoiceDetectionMode::PushToTalk
	]
}

#Const {{{P}}}C_Settings [
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ProfileSectionAccount)}}},
		Category = {{{dump(C_SettingCategory_Profile)}}},
		//L16N [Settings] Section of settings related to the player account
		Name = _("Account"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ProfileTrigram)}}},
		Category = {{{dump(C_SettingCategory_Profile)}}},
		//L16N [Settings] The three characters displayed on the back of the car
		Name = _("Trigram"),
		Type = {{{dump(C_SettingType_TextField)}}},
		//L16N [Settings] Description of the trigram setting
		InfoDescription = _("The three characters displayed on the back of the car")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ProfileTrailsColor)}}},
		Category = {{{dump(C_SettingCategory_Profile)}}},
		//L16N [Settings] Color used in multiple ingame features such as the trails left by the car, the pilot lights or the podium sparkles
		Name = _("Favorite color"),
		Type = {{{dump(C_SettingType_Slider)}}},
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Color}}}
		},
		//L16N [Settings] Description of the favorite color setting
		InfoDescription = _("Color used in multiple ingame situations such as the trails left by the car, the pilot lights or the podium sparkles")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ProfileCopyAccountId)}}},
		Category = {{{dump(C_SettingCategory_Profile)}}},
		//L16N [Settings] Display the user account ID. %1 will be replaced by the account ID. eg: "Account ID: 1234-ABCD-5678"
		Name = _("Account ID: %1"),
		Type = {{{dump(C_SettingType_Button)}}},
		//L16N [Settings] The unique identifier of the user account
		InfoTitle = _("Account ID"),
		//L16N [Settings] Copy the user account ID to the clipboard
		InfoDescription = _("Copy your account ID to the clipboard"),
		ButtonText = {{{dump(Text_CopyProfileCopyAccountId)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ProfileOpenPlayerPage)}}},
		Category = {{{dump(C_SettingCategory_Profile)}}},
		//L16N [Settings] Open the user account management page in a web browser
		Name = _("Manage account"),
		Type = {{{dump(C_SettingType_Button)}}},
		//L16N [Settings] Open the user player page in their web browser
		InfoDescription = _("Open your player page in a web browser"),
		//L16N [Settings] Clicking on this button open a link in a web browser
		ButtonText = _("|Link|Open"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ProfileOpenProfilePage)}}},
		Category = {{{dump(C_SettingCategory_Profile)}}},
		//L16N [Settings] Open the user profile page
		Name = _("View profile"),
		Type = {{{dump(C_SettingType_Button)}}},
		//L16N [Settings] Open the user profile page
		InfoDescription = _("Open your profile page"),
		//L16N [Settings] Clicking on this button open a link in a web browser
		ButtonText = _("|Link|Open")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ProfileActivateKey)}}},
		Category = {{{dump(C_SettingCategory_Profile)}}},
		Name = {{{dump(Text_ActivateKey)}}},
		Type = {{{dump(C_SettingType_TextField)}}},
		//L16N [Settings] Description of the activate key setting
		InfoDescription = _("Unlock game features with a key or an activation code.\nThe key will be registered for the current account."),
		IgnoreDirty = True
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ProfileSectionPrivacy)}}},
		Category = {{{dump(C_SettingCategory_Profile)}}},
		//L16N [Settings] Section of the settings related to the privacy
		Name = _("|Settings|Privacy"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ProfileDisplayAds)}}},
		Category = {{{dump(C_SettingCategory_Profile)}}},
		//L16N [Settings] Display ads in the game
		Name = _("Display ads on the in-game signs"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Ads can only be disabled by players with standard or club access
		InfoDescription = _("Directly support Ubisoft Nadeo by enabling brand and club ads in-game. You need standard or club access to disable ads."),
		Permissions = [{{{dump(RBAC::C_GamePermission_RemoveAds)}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ProfileEnablePersonalizedAds)}}},
		Category = {{{dump(C_SettingCategory_Profile)}}},
		//L16N [Settings] Enable ads personalized for the player
		Name = _("Enable personalized ads"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Personalized ads setting description
		InfoDescription = _("I accept that my data will be shared with third parties to enable personalised adverts to be displayed in the game world, depending on my country and my interests. If this option is deactivated, you'll still see advertisements in the game, but they won't match your areas of interest as well."),
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoSectionDisplay)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Section of the settings related to display (window resolution, v-sync, ...)
		Name = _("Display"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoDevice)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] The device used to render the game (graphics card)
		Name = _("Display device"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Display device" setting
		InfoDescription = _("Device used to render the game"),
		NeedRestart = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoDisplayMode)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] The display mode (fullscreen, borderless window, window)
		Name = _("Display mode"),
		Type = {{{dump(C_SettingType_List)}}},
		List = {{{P}}}K_List {
			Labels = [
				_("|DisplayMode|Fullscreen"),
				_("|DisplayMode|Windowed borderless"),
				_("|DisplayMode|Windowed")
			],
			ValuesDisplayMode = [
				CDisplaySettings::EDisplayMode::FullscreenExclusive,
				CDisplaySettings::EDisplayMode::WindowedFull,
				CDisplaySettings::EDisplayMode::Windowed
			]
		},
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoFullscreenResolution)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] The rendering resolution in fullscreen mode
		Name = _("Fullscreen resolution"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Fullscreen resolution" setting
		InfoDescription = _("Rendering resolution in fullscreen mode"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoWindowResolutionX)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] The window width in windowed mode
		Name = _("Window width"),
		Type = {{{dump(C_SettingType_TextField)}}},
		//L16N [Settings] Description of the "Window width" setting
		InfoDescription = _("Window width in windowed mode"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoWindowResolutionY)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] The window height in windowed mode
		Name = _("Window height"),
		Type = {{{dump(C_SettingType_TextField)}}},
		//L16N [Settings] Description of the "Window height" setting
		InfoDescription = _("Window height in windowed mode"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoShowWindowBorder)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Show borders around the window in windowed mode
		Name = _("Show window borders"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Show window borders" setting
		InfoDescription = _("Show borders around the window in windowed mode"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoAutomaticQuality)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Automatically reduce the rendering resolution when the frame rate is below the set threshold
		Name = _("Dynamic resolution"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Dynamic resolution" setting
		InfoDescription = _("Automatically reduce the rendering resolution when the frame rate is below the set threshold"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoAutomaticMinFPS)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Automatically reduce the rendering resolution when the frame rate is below the set threshold
		Name = _("Dynamic resolution activation threshold"),
		Type = {{{dump(C_SettingType_TextField)}}},
		//L16N [Settings] Description of the "Dynamic resolution activation threshold" setting
		InfoDescription = _("Automatically reduce the rendering resolution when the frame rate is below the set threshold"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoLimitFPS)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Limit the number of frames per second
		Name = _("Frame rate limit"),
		Type = {{{dump(C_SettingType_TextField)}}},
		//L16N [Settings] Description of the "Frame rate limit" setting
		InfoDescription = _("Limit the number of frames per second"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoDisplaySync)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Vertical synchronization
		Name = _("V-Sync"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "V-Sync" setting
		InfoDescription = _("Synchronize the frame rate of the game with the refresh rate of the monitor"),
		List = {{{P}}}K_List {
			Labels = [
				_("|VSync|None"),
				_("|VSync|Full"),
				_("|VSync|Half"),
				_("|VSync|Third")
			],
			ValuesDisplaySync = [
				CDisplaySettings::EDisplaySync::None,
				CDisplaySettings::EDisplaySync::VBlank1,
				CDisplaySettings::EDisplaySync::VBlank2,
				CDisplaySettings::EDisplaySync::VBlank3
			]
		},
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoGPUSync)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Synchronization between the GPU and the CPU
		Name = _("GPU & CPU synchronisation"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "GPU & CPU synchronisation" setting
		InfoDescription = _("Number of frames the GPU can cache before synchronizing with the CPU"),
		List = {{{P}}}K_List {
			Labels = [
				_("|GpuSync|None"),
				_("|GpuSync|3 Frames"),
				_("|GpuSync|2 Frames"),
				_("|GpuSync|1 Frame"),
				_("|GpuSync|Immediate")
			],
			ValuesGpuSync = [
				CDisplaySettings::EGpuSync::None,
				CDisplaySettings::EGpuSync::_3Frames,
				CDisplaySettings::EGpuSync::_2Frames,
				CDisplaySettings::EGpuSync::_1Frames,
				CDisplaySettings::EGpuSync::Immediate
			]
		},
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoSectionAdvanced)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Section containing the advanced video quality settings
		Name = _("|Settings|Advanced"),
		Type = {{{dump(C_SettingType_Section)}}},
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoForwardAA)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Forward antialiasing mode selection
		Name = _("Fast antialiasing"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] This setting only takes effect when the 'Very low' or 'Low' shader quality setting is selected
		InfoDescription = _("Works only with 'Very low' or 'Low' shader quality"),
		List = {{{P}}}K_List {
			Labels = [
				_("|Antialiasing|None"),
				"MSAA 2x",
				"MSAA 4x",
				"MSAA 6x",
				"MSAA 8x",
				"MSAA 16x"
			],
			ValuesForwardAA = [
				CDisplaySettings::EForwardAA::None,
				CDisplaySettings::EForwardAA::_2x,
				CDisplaySettings::EForwardAA::_4x,
				CDisplaySettings::EForwardAA::_6x,
				CDisplaySettings::EForwardAA::_8x,
				CDisplaySettings::EForwardAA::_16x
			]
		},
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoDeferredAA)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Deferred antialiasing mode selection
		Name = _("Nice antialiasing"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] This setting only takes effect when the 'High' or 'Very high' shader quality setting is selected
		InfoDescription = _("Works only with 'High' or 'Very high' shader quality"),
		List = {{{P}}}K_List {
			Labels = [
				_("|Antialiasing|None"),
				"FXAA",
				"TAA"
			],
			ValuesDeferredAA = [
				CDisplaySettings::EDeferredAA::None,
				CDisplaySettings::EDeferredAA::FXAA,
				CDisplaySettings::EDeferredAA::UBI_TXAA
			]
		},
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoOpponentCustomization)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Customization that will be applied to the opponents' car
		Name = _("Opponents' car customization"),
		Type = {{{dump(C_SettingType_List)}}},
		List = {{{P}}}K_List {
			Labels = [
				_("3D models + 2D skins"),
				_("2D skins only"),
				_("|CustomModels|Disabled")
			],
			ValuesCustomPlayerModels = [
				CUserV2Profile::ECustomPlayerModels::All,
				CUserV2Profile::ECustomPlayerModels::OnlyTextures,
				CUserV2Profile::ECustomPlayerModels::None
			]
		},
		PlatformFamily = [{{{Platform::C_Family_PC}}}],
		//L16N [Settings] Description of the "Opponents' car customization" setting
		InfoDescription = _("Select the level of customization that will be applied to the opponents' car")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoTextureFiltering)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Texture filtering video setting
		Name = _("Texture filtering"),
		Type = {{{dump(C_SettingType_List)}}},
		List = {{{P}}}K_List {
			Labels = [
				_("|MaxFiltering|Bilinear"),
				_("|MaxFiltering|Trilinear"),
				_("|MaxFiltering|Anisotropic  2x"),
				_("|MaxFiltering|Anisotropic  4x"),
				_("|MaxFiltering|Anisotropic  8x"),
				_("|MaxFiltering|Anisotropic 16x")
			],
			ValuesTextureFiltering = [
				CDisplaySettings::ETextureFilter::Bilinear,
				CDisplaySettings::ETextureFilter::Trilinear,
				CDisplaySettings::ETextureFilter::Aniso_2x,
				CDisplaySettings::ETextureFilter::Aniso_4x,
				CDisplaySettings::ETextureFilter::Aniso_8x,
				CDisplaySettings::ETextureFilter::Aniso_16x
			]
		},
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoCanSelectPreset)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Customize the video settings
		Name = _("Customize advanced video settings"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		NeedRestart = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}],
		//L16N [Settings] Description of the "Customize advanced video settings" setting
		InfoDescription = _("Let the game select the best video settings based on your hardware or use custom settings")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoPreset)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Graphic quality preset selection
		Name = _("Preset"),
		Type = {{{dump(C_SettingType_List)}}},
		List = {{{P}}}K_List {
			Labels = [
				_("|DisplayPreset|Custom"),
				_("|DisplayPreset|Very Fast"),
				_("|DisplayPreset|Fast"),
				_("|DisplayPreset|Nice"),
				_("|DisplayPreset|Very Nice")
			],
			ValuesPreset = [
				CDisplaySettings::EPreset::None,
				CDisplaySettings::EPreset::VeryFast,
				CDisplaySettings::EPreset::Fast,
				CDisplaySettings::EPreset::Nice,
				CDisplaySettings::EPreset::VeryNice
			]
		},
		NeedRestart = True,
		HasDisplaySettingsPreset = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoShaderQuality)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Shaders quality selection
		Name = _("Shaders quality"),
		Type = {{{dump(C_SettingType_List)}}},
		List = {{{P}}}K_List {
			Labels = [
				_("|ShaderQuality|Very low"),
				_("|ShaderQuality|Low"),
				_("|ShaderQuality|High"),
				_("|ShaderQuality|Very high")
			],
			ValuesShaderQuality = [
				CDisplaySettings::EShaderQuality::VeryFast,
				CDisplaySettings::EShaderQuality::Fast,
				CDisplaySettings::EShaderQuality::Nice,
				CDisplaySettings::EShaderQuality::VeryNice
			]
		},
		NeedRestart = True,
		HasDisplaySettingsPreset = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoShadows)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Shadows quality selection
		Name = _("Shadows quality"),
		Type = {{{dump(C_SettingType_List)}}},
		List = {{{P}}}K_List {
			Labels = [
				_("|Shadows|None"),
				_("|Shadows|Minimum"),
				_("|Shadows|Medium"),
				_("|Shadows|High"),
				_("|Shadows|Very high")
			],
			ValuesShadows = [
				CDisplaySettings::EShadows::None,
				CDisplaySettings::EShadows::Minimum,
				CDisplaySettings::EShadows::Medium,
				CDisplaySettings::EShadows::High,
				CDisplaySettings::EShadows::VeryHigh
			]
		},
		NeedRestart = True,
		HasDisplaySettingsPreset = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoTexturesQuality)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Textures quality selection
		Name = _("Textures quality"),
		Type = {{{dump(C_SettingType_List)}}},
		List = {{{P}}}K_List {
			Labels = [
				_("|TexturesQuality|Very low"),
				_("|TexturesQuality|Low"),
				_("|TexturesQuality|Medium"),
				_("|TexturesQuality|High")
			],
			ValuesInteger = [0, 1, 2, 3]
		},
		NeedRestart = True,
		HasDisplaySettingsPreset = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoVehicleReflect)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Reflections on vehicles video setting
		Name = _("Reflections on vehicles"),
		Type = {{{dump(C_SettingType_List)}}},
		List = {{{P}}}K_List {
			Labels = [
				_("|VehicleReflect|Low"),
				_("|VehicleReflect|High (in replays)"),
				_("|VehicleReflect|High")
			],
			ValuesVehicleReflect = [
				CDisplaySettings::EVehicleReflect::Low,
				CDisplaySettings::EVehicleReflect::HighInReplay,
				CDisplaySettings::EVehicleReflect::High
			]
		},
		HasDisplaySettingsPreset = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoWaterReflect)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Reflections on water surface video setting
		Name = _("Reflections on water surface"),
		Type = {{{dump(C_SettingType_List)}}},
		List = {{{P}}}K_List {
			Labels = [
				_("|WaterReflect|Very low"),
				_("|WaterReflect|Low"),
				_("|WaterReflect|High"),
				_("|WaterReflect|Very high")
			],
			ValuesWaterReflect = [
				CDisplaySettings::EWaterReflect::VeryFast,
				CDisplaySettings::EWaterReflect::Fast,
				CDisplaySettings::EWaterReflect::Nice,
				CDisplaySettings::EWaterReflect::VeryNice
			]
		},
		HasDisplaySettingsPreset = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoEverywhereReflect)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Reflections video setting
		Name = _("Other reflections"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		HasDisplaySettingsPreset = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoBloomHDR)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Bloom and lens flare video setting
		Name = _("Bloom and lens flare"),
		Type = {{{dump(C_SettingType_List)}}},
		List = {{{P}}}K_List {
			Labels = [
				_("|FxBloomHdr|None"),
				_("|FxBloomHdr|Medium"),
				_("|FxBloomHdr|High")
			],
			ValuesFxBloomHdr = [
				CDisplaySettings::EFxBloomHdr::None,
				CDisplaySettings::EFxBloomHdr::Medium,
				CDisplaySettings::EFxBloomHdr::High
			]
		},
		HasDisplaySettingsPreset = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoMotionBlur)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Motion blur video setting
		Name = _("Motion blur"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] This setting only takes effect when the 'High' or 'Very high' shader quality setting is selected
		InfoDescription = _("Works only with 'High' or 'Very high' shader quality"),
		HasDisplaySettingsPreset = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoMotionBlurIntensity)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Motion blur intensity video setting
		Name = _("Motion blur intensity"),
		Type = {{{dump(C_SettingType_Slider)}}},
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Real}}},
			RangeReal = <0., 1.>,
			DisplayTextField = True
		},
		HasDisplaySettingsPreset = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoSlowMotionBlur)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Setting to enable or disable the blur during the slow motion effect
		Name = _("Slow motion blur"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		HasDisplaySettingsPreset = True,
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoPerformanceQuality)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Select between performance (higher frame rates) or quality (higher grahic quality) mode
		Name = _("Performance or quality mode"),
		Type = {{{dump(C_SettingType_List)}}},
		List = {{{P}}}K_List {
			Labels = [
				_("Quality"),
				_("Performance"),
				//L16N [Settings] Same as performance but with 120 frames per second
				_("Performance 120FPS")
			],
			ValuesConsoleResolution = [
				CDisplaySettings::EConsoleResolution::Quality,
				CDisplaySettings::EConsoleResolution::Performance,
				CDisplaySettings::EConsoleResolution::UltraPerformance
			]
		},
		PlatformFamily = [{{{Platform::C_Family_Console}}}, {{{Platform::C_Family_Streaming}}}],
		//L16N [Settings] Description of the "Performance or quality mode" setting
		InfoDescription = _("Prioritize performance or image quality. Select performance for higher frame rates or quality for higher graphic quality.")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_VideoOutputScale)}}},
		Category = {{{dump(C_SettingCategory_Video)}}},
		//L16N [Settings] Resizes the display area to fit the screen while maintaining the aspect ratio
		Name = _("Display area calibration"),
		Type = {{{dump(C_SettingType_Slider)}}},
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Real}}},
			RangeReal = <0.25, 1.>
		},
		//L16N [Settings] Description of the "Display area calibration" setting
		InfoDescription = _("Resizes the display area to fit the screen while maintaining the aspect ratio"),
		Platforms = [CSystemPlatform::ESystemPlatform::XBoxOne, CSystemPlatform::ESystemPlatform::XBoxSeries]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundSectionGeneral)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] Section related to the general sounds settings
		Name = _("General"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundEnable)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] Enable sounds in the game
		Name = _("Enable audio"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Enable audio" setting
		InfoDescription = _("Allow the game to produce sound")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundDevice)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] The device used to output sound
		Name = _("Audio device"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Audio device" setting
		InfoDescription = _("Device used to output sound"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundMusicVolume)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] The volume of the music in the game
		Name = _("Music volume"),
		Type = {{{dump(C_SettingType_Slider)}}},
		//L16N [Settings] Description of the "Music volume" setting
		InfoDescription = _("Volume of the music"),
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Real}}},
			RangeReal = <-40., 0.>
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundMasterVolume)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] The master volume of the game
		Name = _("Master volume"),
		Type = {{{dump(C_SettingType_Slider)}}},
		//L16N [Settings] Description of the "Master volume" setting
		InfoDescription = _("Master volume of the game"),
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Real}}},
			RangeReal = <-40., 0.>
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundEffectVolume)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] The volume of the sound effects in the game
		Name = _("Effects volume"),
		Type = {{{dump(C_SettingType_Slider)}}},
		//L16N [Settings] Description of the "Effects volume" setting
		InfoDescription = _("Volume of the sound effects"),
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Real}}},
			RangeReal = <-40., 0.>
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundUIVolume)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] The volume of the sounds of the menus or in-game UI (User Interface)
		Name = _("UI sounds volume"),
		Type = {{{dump(C_SettingType_Slider)}}},
		//L16N [Settings] Description of the "UI sounds volume" setting
		InfoDescription = _("Volume of the sound of the menu navigation and in-game UI"),
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Real}}},
			RangeReal = <-40., 0.>
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundMuteUnfocused)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] Mute the game sounds and music when the window is not focused
		Name = _("Mute the game when not focused"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Mute the game when not focused" setting
		InfoDescription = _("Mute the game sounds and music when the window is not focused"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundSectionVoiceChatAndTTS)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] Section related to the voice chat and text to speech settings
		Name = _("Voice chat & Text To Speech"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundVoiceChat)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] Enable voice chat with other players
		Name = _("|Settings|Voice chat"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Voice chat" setting
		InfoDescription = _("Enable voice chat with other players"),
		Permissions = [{{{dump(RBAC::C_GamePermission_VoiceChat)}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundVoiceChatAndTTSVolume)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] The volume of the speaker in the voice chat and text to speech
		Name = _("Voice chat and text to speech volume"),
		Type = {{{dump(C_SettingType_Slider)}}},
		//L16N [Settings] Description of the "Voice chat and text to speech volume" setting
		InfoDescription = _("Volume of the text to speech and voice chat players voices"),
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Real}}},
			RangeReal = <-40., 0.>
		},
		Permissions = [{{{dump(RBAC::C_GamePermission_VoiceChat)}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundVoiceChatDeviceIn)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},		
		//L16N [Settings] The device used to speak in the voice chat
		Name = _("Voice chat microphone"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Voice chat microphone" setting
		InfoDescription = _("Device used to speak in the voice chat"),
		Permissions = [{{{dump(RBAC::C_GamePermission_VoiceChat)}}}],
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundVoiceChatDeviceOut)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] The device used to play sound from the voice chat
		Name = _("Voice chat speaker"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Voice chat speaker" setting
		InfoDescription = _("Device used to play sound from the voice chat"),
		Permissions = [{{{dump(RBAC::C_GamePermission_VoiceChat)}}}],
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundVoiceChatVoiceDetectionMode)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] Activation mode of the voice chat microphone (Automatic sensitivity, Manual sensitivity or Push-To-Talk)
		Name = _("Voice chat microphone activation mode"),
		Type = {{{dump(C_SettingType_List)}}},
		List = {{{P}}}K_List {
			Labels = [
				//L16N [Settings] Automatic sensitivity : sensitivity of the microphone will be computed automatically
				_("|Voice chat microphone activation mode|Automatic sensitivity"),
				//L16N [Settings] Manual sensitivity : player can set the sensitivity of the microphone
				_("|Voice chat microphone activation mode|Manual sensitivity")
			],
			ValuesVoiceDetectionMode = [
				NSystemConfig::EVoiceDetectionMode::AutoDetect,
				NSystemConfig::EVoiceDetectionMode::Manual
			]
		},
		//L16N [Settings] Description of the "Voice chat microphone activation mode" setting
		InfoDescription = _("Set the voice detection mode for the voice chat microphone"),
		Permissions = [{{{dump(RBAC::C_GamePermission_VoiceChat)}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundVoiceChatVoiceDetectionSensitivity)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] The sensitivity of the microphone used in the voice chat
		Name = _("Voice chat microphone sensitivity"),
		Type = {{{dump(C_SettingType_Slider)}}},
		//L16N [Settings] Description of the "Voice chat microphone sensitivity" setting
		InfoDescription = _("Sensitivity of the microphone used in voice chat"),
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Real}}},
			RangeReal = <0., 1.>
		},
		Permissions = [{{{dump(RBAC::C_GamePermission_VoiceChat)}}}],
		NeedManualVoiceChatVoiceDetection = True
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundVoiceChatLoopback)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] Activate voice loopback to check if the microphone is operational
		Name = _("Voice chat loopback"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Voice chat loopback" setting
		InfoDescription = _("Activate voice loopback to check if the microphone is operational"),
		Permissions = [{{{dump(RBAC::C_GamePermission_VoiceChat)}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundSpeechToText)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] Enable the text transcription of the voice chat
		Name = _("Speech to text"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Speech to text" setting
		InfoDescription = _("Enable the text transcription of the voice chat"),
		Permissions = [{{{dump(RBAC::C_GamePermission_VoiceChat)}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SoundTextToSpeech)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] Enable the narration of the navigation in menus and text messages (English only)
		Name = _("Text to speech"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Text to speech" setting
		InfoDescription = _("Enable the narration of the navigation in menus and text messages (English only)")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SendTextAsVoice)}}},
		Category = {{{dump(C_SettingCategory_Sound)}}},
		//L16N [Settings] Enable the text to speech for text messages in the text chat
		Name = _("Convert text messages in spoken messages"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Send text messages as voice messages" setting
		InfoDescription = _("Messages written in the text chat will be sent as voice messages in the voice chat channel (English only)")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlSectionAnalogSettings)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Section related to the general device settings
		Name = _("Device settings"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlLatencyTest)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Calculate the input lag by pressing the button when it appears
		Name = _("Latency test"),
		Type = {{{dump(C_SettingType_Button)}}},
		//L16N [Settings] Description of the "Latency test" setting. %1 will be replaced by the average input latency of players in milliseconds. e.g. "Average players latency is 15ms"
		InfoDescription = _("Calculate the input lag by pressing the button when it appears\nYou can reduce your latency by setting your TV to « Gaming » mode\nAverage players latency is $<$6FA%1$>ms"),
		//L16N [Settings] Clicking on this button starts the latency test
		ButtonText = _("|Latency test|Start test")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlAnalogVehicleSelection)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Select the vehicle to setup
		Name = _("Vehicle"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Vehicle" setting
		InfoDescription = _("Vehicle to configure")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlAnalogSensitivity)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		Name = {{{dump(Text_ControlAnalogSensitivity_Name)}}},
		Type = {{{dump(C_SettingType_Slider)}}},
		InfoDescription = {{{dump(Text_ControlAnalogSensitivity_InfoDescription)}}},
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Real}}},
			RangeReal = <0.1, 10.>,
			DisplayTextField = True
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlAnalogDeadZone)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		Name = {{{dump(Text_ControlAnalogDeadZone_Name)}}},
		Type = {{{dump(C_SettingType_Slider)}}},
		InfoDescription = {{{dump(Text_ControlAnalogDeadZone_InfoDescription)}}},
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Real}}},
			RangeReal = <0., 0.25>,
			DisplayTextField = True
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlAnalogRumbleIntensity)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Intensity of the controller vibrations when your car hits a wall for example. Do not use the term "rumble".
		Name = _("Vibration intensity"),
		Type = {{{dump(C_SettingType_Slider)}}},
		//L16N [Settings] Description of the "Vibration intensity" setting
		InfoDescription = _("Intensity of the controller vibrations when your car hits a wall for example"),
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Real}}},
			RangeReal = <0., 2.>,
			DisplayTextField = True
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlTriggerHapticFeedbackEnabled)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Enable the adaptive triggers feature of the PS5 controller. PLEASE USE THE OFFICIAL SONY TRANSLATION ! English => "adaptive triggers" | Japanese => "アダプティブトリガー" | Chinese (Simplified) => "自适应扳机" | Chinese (Traditional) => "自適應扳機" | Czech => "adaptivní spouště" | Dutch => "adaptieve triggers" | French => "gâchettes adaptatives" | German => "adaptive Trigger" | Italian => "grilletti adattivi" | Korean => "적응형 트리거" | Polish => "adaptacyjne efekty „Trigger”" | Portuguese (BR) => "gatilhos adaptáveis" | Russian => "адаптивные триггеры" | Spanish => "gatillos adaptativos" | Turkish => "uyarlanabilir tetikler"
		Name = _("Adaptive triggers"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		Platforms = [CSystemPlatform::ESystemPlatform::PS5]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlInvertSteer)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Invert the wheels steering control.
		Name = _("Invert steering axis"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Invert steering axis" setting
		InfoDescription = _("Enables a mode where steering is inverted")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlAnalogWheelMode)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Enable a steering mode where the sensitivity is optimized for wheel controls
		Name = _("Wheel sensitivity"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Wheel sensitivity" setting
		InfoDescription = _("Enable a steering mode where the sensitivity is optimized for wheel controls"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlAccelIsToggleMode)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Enable a mode where using the accelerate input toggles acceleration on or off.
		Name = _("Accelerate: use toggle mode"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Accelerate: use toggle mode" setting
		InfoDescription = _("Enables a mode where the accelerating binding toggles the acceleration on or off")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlBrakeIsToggleMode)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Enable a mode where using the brake input toggles acceleration on or off.
		Name = _("Brake: use toggle mode"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Brake: use toggle mode" setting
		InfoDescription = _("Enables a mode where the braking binding toggles the brakes on or off")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlAnalogCenterSpringIntensity)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Center spring intensity for wheels
		Name = _("Center spring intensity"),
		Type = {{{dump(C_SettingType_Slider)}}},
		//L16N [Settings] Description of the "Center spring intensity" setting
		InfoDescription = _("Center spring intensity for wheels"),
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Real}}},
			RangeReal = <0., 1.>,
			DisplayTextField = True
		},
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlSectionDevices)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Devices used to control the game
		Name = _("|ControllerSettings|Devices"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlDevice)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] The device the user is currently configuring
		Name = _("|ControllerSettings|Device"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Device" setting
		InfoDescription = _("Input device to configure")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlUnbindAll)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Unbind all buttons of the device
		Name = _("Unbind all buttons"),
		Type = {{{dump(C_SettingType_Button)}}},
		//L16N [Settings] Unbind a controller button
		ButtonText = _("|ControllerButton|Unbind")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlUnbindOne)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Unbind one button of the device
		Name = _("Unbind one button"),
		Type = {{{dump(C_SettingType_Button)}}},
		//L16N [Settings] Unbind a controller button
		ButtonText = _("|ControllerButton|Unbind")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlBindDefault)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] Restore the default bindings of the controller
		Name = _("Restore default bindings"),
		Type = {{{dump(C_SettingType_Button)}}},
		//L16N [Settings] Restore the default bindings of the controller
		ButtonText = _("|ControllerBindings|Restore")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_ControlSectionBindings)}}},
		Category = {{{dump(C_SettingCategory_Controls)}}},
		//L16N [Settings] The controller bindings
		Name = _("|ControllerBindings|Bindings"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDSectionMarkers)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Section related to the HUD markers (the text displayed above other players while racing)
		Name = _("HUD labels"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDMarkersType)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Contents of the label displayed above the other players' cars during the race
		Name = _("Players' labels contents"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Players' labels contents" setting
		InfoDescription = _("Contents of the label displayed above the other players' cars during the race"),
		List = {{{P}}}K_List {
			Labels = [
				_("Name"),
				_("Avatar"),
				_("Avatar and Name")
			],
			ValuesPlayerInfoDisplayType = [
				CManiaPlanet::EPlayerInfoDisplayType::Name,
				CManiaPlanet::EPlayerInfoDisplayType::Avatar,
				CManiaPlanet::EPlayerInfoDisplayType::AvatarAndName
			]
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDMarkersSize)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Size of the label displayed above the other players' cars during the race
		Name = _("Players' labels size"),
		Type = {{{dump(C_SettingType_Slider)}}},
		Slider = {{{P}}}K_Slider {
			Type = {{{C_SliderType_Integer}}},
			RangeInteger = <1, 5>,
			Steps = 5
		},
		//L16N [Settings] Description of the "Players' labels size" setting
		InfoDescription = _("Size of the label displayed above the other players' cars during the race")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDSectionCamera)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Section grouping camera settings
		Name = _("|SettingsSection|Camera"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDPrioritizeAlternateCam1)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Activate the alternative camera 1 viewpoint when pressing the camera 1 button once instead of twice
		Name = _("Prioritize alternative camera 1"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Prioritize alternative camera 1" setting
		InfoDescription = _("Activate the alternative camera 1 viewpoint when pressing the camera 1 button once instead of twice")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDPrioritizeAlternateCam2)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Activate the alternative camera 2 viewpoint when pressing the camera 2 button once instead of twice
		Name = _("Prioritize alternative camera 2"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Prioritize alternative camera 2" setting
		InfoDescription = _("Activate the alternative camera 2 viewpoint when pressing the camera 2 button once instead of twice")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDPrioritizeAlternateCam3)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Activate the alternative camera 3 viewpoint when pressing the camera 3 button once instead of twice
		Name = _("Prioritize alternative camera 3"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Prioritize alternative camera 3" setting
		InfoDescription = _("Activate the alternative camera 3 viewpoint when pressing the camera 3 button once instead of twice")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDInternalCamCarVisibility)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Select the visibility of the car when playing with the cockpit camera
		Name = _("Visibility of the car in cockpit view"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Visibility of the car in cockpit view" setting
		InfoDescription = _("Visibility of your car when playing with the cockpit camera"),
		List = {{{P}}}K_List {
			Labels = [
				_("|PlayerVisibility|Opaque"),
				_("|PlayerVisibility|Transparent"),
				_("|PlayerVisibility|Hidden")
			],
			ValuesPlayerVisibility = [
				CUserV2Profile::EPlayerVisibility::Opaque,
				CUserV2Profile::EPlayerVisibility::Ghost,
				CUserV2Profile::EPlayerVisibility::Hidden
			]
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDSectionMiscellaneous)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Section grouping miscellaneous HUD settings
		Name = _("Miscellaneous"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDDefaultOpponentVisibility)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Select how the other players' car will be displayed during the race
		Name = _("Default opponents visibility"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Default opponents visibility" setting
		InfoDescription = _("Select how the other players' car will be displayed during the race"),
		List = {{{P}}}K_List {
			Labels = [
				_("|PlayerVisibility|Opaque"),
				_("|PlayerVisibility|Transparent"),
				_("|PlayerVisibility|Hidden")
			],
			ValuesPlayerVisibility = [
				CUserV2Profile::EPlayerVisibility::Opaque,
				CUserV2Profile::EPlayerVisibility::Ghost,
				CUserV2Profile::EPlayerVisibility::Hidden
			]
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDRoadsideSpectatorVisibility)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Select under which condition the spectators will be displayed on the side of the road during competitions
		Name = _("Visibility of roadside spectators"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Visibility of roadside spectators" setting
		InfoDescription = _("Select under which condition the spectators will be displayed on the side of the road during competitions"),
		List = {{{P}}}K_List {
			Labels = [
				_("|SpectatorsVisibility|When spectating"),
				_("|SpectatorsVisibility|Always"),
				_("|SpectatorsVisibility|Never")
			],
			ValuesRoadsideSpectatorVisibility = [
				CUserV2Profile::ERoadsideSpectatorVisibility::SpectatorOnly,
				CUserV2Profile::ERoadsideSpectatorVisibility::Always,
				CUserV2Profile::ERoadsideSpectatorVisibility::Never
			]
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDEnableSpecialBlockMessage)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Display an alert when you drive on a special block. eg: turbo, engine off, no steering, ...
		Name = _("Display special blocks alerts"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Display special blocks alerts" setting
		InfoDescription = _("Display an alert when you drive on a special block. eg: turbo, engine off, no steering, ...")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDAlwaysDisplayTrackRecords)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Display the world records window on the side of the screen even if you have not unlocked the track author medal
		Name = _("Always display world records"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Always display records" setting
		InfoDescription = _("Display the world records window on the side of the screen even if you have not unlocked the track author medal")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDChatAllowHide)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Allow the user to hide the in-game chat
		Name = _("|Chat|Allow hiding in-game chat"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Allow hiding in-game chat" setting
		InfoDescription = _("Instead of toggling only between the small and full chat display, add a third state where the chat is hidden")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDChatBackground)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Allow the user to display a background behind the text chat
		Name = _("Display text chat background"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Display text chat background" setting
		InfoDescription = _("Display a black background behind the text chat"),
		List = {{{P}}}K_List {
			Labels = [
				// Using already translated words
				_("|PlayerVisibility|Hidden"),
				_("|PlayerVisibility|Transparent"),
				_("|PlayerVisibility|Opaque")
			],
			ValuesChatBackground = [
				CUserV2Profile::EIngameChatBackground::Hidden,
				CUserV2Profile::EIngameChatBackground::Transparent,
				CUserV2Profile::EIngameChatBackground::Opaque
			]
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDChatTextSize)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Allow the user to change the size of the text in the chat
		Name = _("Text chat size"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Text chat size" setting
		InfoDescription = _("Size of the text in the chat"),
		List = {{{P}}}K_List {
			Labels = [
				//L16N [Settings] Small text chat size
				_("|TextChat|Small"),
				//L16N [Settings] Medium text chat size
				_("|TextChat|Medium"),
				//L16N [Settings] Big text chat size
				_("|TextChat|Big")
			],
			ValuesChatTextSize = [
				CUserV2Profile::EIngameChatTextSize::Small,
				CUserV2Profile::EIngameChatTextSize::Medium,
				CUserV2Profile::EIngameChatTextSize::Big
			]
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_HUDShowPerformance)}}},
		Category = {{{dump(C_SettingCategory_HUD)}}},
		//L16N [Settings] Allow the user to show frame rate and other performance information on HUD
		Name = _("Display performance information"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Display performance information" setting
		InfoDescription = _("Display the performance and frame rate of the game in real time"),
		List = {{{P}}}K_List {
			Labels = [
				_("|ShowPerformance|None"),
				//L16N [Settings] Display the FPS and network info. It's only displayed ingame and not in the menus
				_("|ShowPerformance|Minimal (in-game only)"),
				//L16N [Settings] Display the FPS info in one line
				_("|ShowPerformance|Simple"),
				//L16N [Settings] Display the FPS info with more details
				_("|ShowPerformance|Detailed"),
				//L16N [Settings] Display the FPS info with all the details
				_("|ShowPerformance|Full")
			],
			ValuesShowPerformance = [
				CDisplaySettings::EShowPerformance::None,
				CDisplaySettings::EShowPerformance::Minimal,
				CDisplaySettings::EShowPerformance::Fps,
				CDisplaySettings::EShowPerformance::Fps_Bars,
				CDisplaySettings::EShowPerformance::Fps_Bars_Legends
			]
		}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemSectionLanguage)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Section grouping language settings
		Name = _("Language"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemLanguage)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Select the language of the texts in the game
		Name = _("Language"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Language" setting
		InfoDescription = _("Language of the texts in the game")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemSectionNetwork)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Section grouping the network settings
		Name = _("Network"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemNetworkCrossPlay)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Allow to play with players from other networks
		Name = _("Cross platform play"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		InfoDescription = {{{dump(Text_Crossplay_InfoDescription)}}},
		Privileges = [CPrivilegeMgr::EPrivilege::CrossPlay]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemOnlineServicesStatus)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Display the Trackmania online services status and open the status page in a web browser
		Name = _("Online services status"),
		Type = {{{dump(C_SettingType_Button)}}},
		InfoDescription = {{{dump(Text_OnlineServicesStatus_InfoDescription)}}},
		//L16N [Settings] Clicking on this button open a link in a web browser
		ButtonText = _("|Link|Open")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemNetworkSpeed)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] The speed of the user network
		Name = _("Network speed"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Network speed" setting
		InfoDescription = _("Select the speed of your network"),
		List = {{{P}}}K_List {
			Labels = [
				_("|NetworkSpeed|Custom"),
				_("|NetworkSpeed|Very Low - 100Kbps"),
				_("|NetworkSpeed|Low - 1Mbps"),
				_("|NetworkSpeed|Medium - 10Mbps"),
				_("|NetworkSpeed|High - 100Mbps")
			],
			ValuesNetworkSpeed = [
				CManiaPlanet::ENetworkSpeed::Custom,
				CManiaPlanet::ENetworkSpeed::_100Kbps,
				CManiaPlanet::ENetworkSpeed::_1Mbps,
				CManiaPlanet::ENetworkSpeed::_10Mbps,
				CManiaPlanet::ENetworkSpeed::_100Mbps
			]
		},
		PlatformFamily = [{{{Platform::C_Family_PC}}}, {{{Platform::C_Family_Console}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemNetworkSpeedDownload)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Maximum speed at which the game data can be downloaded over the network
		Name = _("Maximum download speed"),
		Type = {{{dump(C_SettingType_TextField)}}},
		//L16N [Settings] Description of the "Maximum download speed" setting
		InfoDescription = _("Maximum speed at which the game data can be downloaded over the network (bytes/s)"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}, {{{Platform::C_Family_Console}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemNetworkSpeedUpload)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Maximum speed at which the game data can be sent over the network
		Name = _("Maximum upload speed"),
		Type = {{{dump(C_SettingType_TextField)}}},
		//L16N [Settings] Description of the "Maximum upload speed" setting
		InfoDescription = _("Maximum speed at which the game data can be sent over the network (bytes/s)"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}, {{{Platform::C_Family_Console}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemSectionDownload)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Section grouping the downloads settings
		Name = _("Downloads"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemDownloadSkin)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Allow the download of custom car liveries and models
		Name = _("Custom car skins"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Custom car skins" setting (car liveries and models)
		InfoDescription = _("Allow the download of custom car skins")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemDownloadMapMod)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Allow the download of custom track textures
		Name = _("Custom track textures"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Custom track textures" setting
		InfoDescription = _("Allow the download of custom track textures")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemDownloadSign)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Allow the download of custom signs
		Name = _("Custom signs"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Custom signs" setting
		InfoDescription = _("Allow the download of custom signs")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemSectionTrackEditorQuickStart)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Section grouping the track editor quick start settings
		Name = _("Track editor quick start"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemEnableTrackEditorQuickStart)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Skip the track editor configuration and use the quick start settings instead
		Name = _("Enable track editor quick start"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Enable track editor quick start" setting
		InfoDescription = _("Skip the track editor configuration and use the quick start settings instead. Available only with Standard and Club access."),
		Permissions = [{{{dump(RBAC::C_GamePermission_OpenAdvancedMapEditor)}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemTrackEditorQuickStartUseGamepadController)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Select the type of control device to use in the track editor: keyboard and mouse or gamepad
		Name = _("Control device"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Control device" setting
		InfoDescription = _("Start the keyboard and mouse or gamepad track editor"),
		List = {{{P}}}K_List {
			Labels = [
				_("|MapEditorDevice|Mouse and keyboard"),
				_("|MapEditorDevice|Gamepad")
			],
			ValuesBoolean = [
				False,
				True
			]
		},
		Permissions = [{{{dump(RBAC::C_GamePermission_OpenAdvancedMapEditor)}}}],
		PlatformFamily = [{{{Platform::C_Family_PC}}}],
		NeedEditorQuickStart = True
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemTrackEditorQuickStartDifficulty)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Start the track editor with the selected difficulty
		Name = _("Difficulty"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Difficulty" setting
		InfoDescription = _("Start the track editor with the selected difficulty"),
		List = {{{P}}}K_List {
			Labels = [
				_("|MapEditorDifficulty|Simple"),
				_("|MapEditorDifficulty|Advanced"),
				_("|MapEditorDifficulty|Expert")
			],
			MapEditorDifficulty = [
				CUserV2Profile::EMapEditorDifficulty::Simple,
				CUserV2Profile::EMapEditorDifficulty::Advanced,
				CUserV2Profile::EMapEditorDifficulty::Expert
			]
		},
		Permissions = [{{{dump(RBAC::C_GamePermission_OpenAdvancedMapEditor)}}}],
		NeedEditorQuickStart = True
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemTrackEditorQuickStartMood)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Select the mood (sunrise, day, sunset, night) of the new track
		Name = _("|TrackEditor|Mood"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Mood" setting
		InfoDescription = _("Mood (sunrise, day, sunset, night) of the new track"),
		List = {{{P}}}K_List {
			Labels = [
				_("|MapMood|Sunrise"),
				_("|MapMood|Day"),
				_("|MapMood|Sunset"),
				_("|MapMood|Night")
			],
			ValuesMapEditorMood = [
				CUserV2Profile::EMapEditorMood::Sunrise,
				CUserV2Profile::EMapEditorMood::Day,
				CUserV2Profile::EMapEditorMood::Sunset,
				CUserV2Profile::EMapEditorMood::Night
			]
		},
		Permissions = [{{{dump(RBAC::C_GamePermission_OpenAdvancedMapEditor)}}}],
		NeedEditorQuickStart = True
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemSectionMiscellaneous)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Section grouping miscellaneous system settings
		Name = _("Miscellaneous"),
		Type = {{{dump(C_SettingType_Section)}}}
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemColorblindMode)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Mode to change the colors on some elements to improve visibility for colorblind players
		Name = _("Colorblind mode"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Colorblind mode" setting
		InfoDescription = _("Improve visibility and colors for colorblind users")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemAutoSkipStartScreens)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Setting to skip automatically the starting screens (logo, video, epilepsy warning, etc.)
		Name = _("Skip the start-up screens"),
		Type = {{{dump(C_SettingType_Checkbox)}}},
		//L16N [Settings] Description of the "Skip the start-up screens" setting
		InfoDescription = _("Automatically skip the screens displayed at launch (logo, epilepsy warning, etc.)")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemScreenshotExtension)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] File format (jpg, png, ...) of the screenshots generated by the game
		Name = _("Screenshot file format"),
		Type = {{{dump(C_SettingType_List)}}},
		//L16N [Settings] Description of the "Screenshot file format" setting
		InfoDescription = _("File format used by the game to save screenshots"),
		List = {{{P}}}K_List {
			Labels = [
				"JPEG",
				"WebP",
				"TGA"
			],
			ValuesScreenshotExt = [
				CDisplaySettings::EScreenshotExt::JPEG,
				CDisplaySettings::EScreenshotExt::WebP,
				CDisplaySettings::EScreenshotExt::TGA
			]
		},
		PlatformFamily = [{{{Platform::C_Family_PC}}}]
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemJoinLink)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Enter a link to join a server
		Name = _("Join link"),
		Type = {{{dump(C_SettingType_TextField)}}},
		//L16N [Settings] Description of the "Join link" setting
		InfoDescription = _("Enter a link to join a server"),
		PlatformFamily = [{{{Platform::C_Family_PC}}}],
		IgnoreDirty = True
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemCleanCache)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Delete all temporary files downloaded by the game
		Name = _("Clean cache"),
		Type = {{{dump(C_SettingType_Button)}}},
		//L16N [Settings] Clicking on this button will clean the cache
		ButtonText = _("|Cache|Clean"),
		//L16N [Settings] Description of the "Clean cache" setting
		InfoDescription = _("Delete all temporary files downloaded by the game")
	},
	{{{P}}}K_Setting {
		Id = {{{dump(C_SettingId_SystemCredits)}}},
		Category = {{{dump(C_SettingCategory_System)}}},
		//L16N [Settings] Display a page listing the people who worked on the game
		Name = _("View game credits"),
		Type = {{{dump(C_SettingType_Button)}}},
		//L16N [Settings] Clicking on this button will display the game credits (list of people who worked on the game)
		ButtonText = _("|GameCredits|View"),
		//L16N [Settings] Description of the "View game credits" setting (list of people who worked on the game). %1 will be replaced by a heart symbol '♥'.
		InfoDescription = _("Display the game credits. Thank you for playing! %1")
	}
]

#Const {{{P}}}C_Class_BottomButton {{{dump(C_Class_BottomButton)}}}
#Const {{{P}}}C_Class_FocusSettingLine {{{dump(C_Class_FocusSettingLine)}}}
#Const {{{P}}}C_Class_NoFocus {{{dump(C_Class_NoFocus)}}}

#Const {{{P}}}C_ResetTextFieldEditionDelay 2
#Const {{{P}}}C_AnalogSettings [
	{{{dump(C_SettingId_ControlAnalogSensitivity)}}},
	{{{dump(C_SettingId_ControlAnalogDeadZone)}}},
	{{{dump(C_SettingId_ControlAnalogRumbleIntensity)}}},
	{{{dump(C_SettingId_ControlTriggerHapticFeedbackEnabled)}}},
	{{{dump(C_SettingId_ControlInvertSteer)}}},
	{{{dump(C_SettingId_ControlAnalogWheelMode)}}},
	{{{dump(C_SettingId_ControlAccelIsToggleMode)}}},
	{{{dump(C_SettingId_ControlBrakeIsToggleMode)}}},
	{{{dump(C_SettingId_ControlAnalogCenterSpringIntensity)}}}
]
#Const {{{P}}}C_NetworkSpeeds [
	CManiaPlanet::ENetworkSpeed::_100Kbps => <12800, 12800>,
	CManiaPlanet::ENetworkSpeed::_1Mbps => <131072, 32768>,
	CManiaPlanet::ENetworkSpeed::_10Mbps => <1310720, 327680>,
	CManiaPlanet::ENetworkSpeed::_100Mbps => <13107200, 13107200>
]
#Const {{{P}}}C_AlertMessageDuration 3000
#Const {{{P}}}C_DiscardSettingsOnTabChange {{{dump(C_DiscardSettingsOnTabChange)}}}
#Const {{{P}}}C_GamepadButtons ""
#Const {{{P}}}C_OneDay_InSecs 86400
	""",
	"""
declare {{{P}}}K_State {{{P}}}G_State;
declare {{{P}}}K_Event[] {{{P}}}PendingEvents;
declare {{{P}}}Http::K_Request {{{P}}}G_Request_PostCheckKey;
declare {{{P}}}Http::K_Request {{{P}}}G_Request_PostActivateKey;
declare Ident {{{P}}}G_TTSContextIdent_Tabs;
declare Ident {{{P}}}G_TTSContextIdent_Section;
declare Ident {{{P}}}G_TTSContextIdent_Setting;

// Get a setting from the scroll
{{{P}}}K_Setting {{{P}}}Private_GetSettingFromScroll({{{P}}}K_State _State, Integer _SettingKey) {
	declare {{{P}}}K_Setting Setting = {{{P}}}C_Setting_Null;

	if (_SettingKey >= 0) {
		if (
			_State.ScrollSettingIds.existskey(_State.DisplayedCategory) &&
			_State.ScrollSettingIds[_State.DisplayedCategory].existskey(_SettingKey)
		) {
			Setting = _State.Settings.get(_State.ScrollSettingIds[_State.DisplayedCategory][_SettingKey], {{{P}}}C_Setting_Null);
		} else if (
			_State.DisplayedCategory == {{{P}}}C_SettingCategory_Controls &&
			_State.Bindings.existskey(_SettingKey - _State.BindingsKeyShift)
		) {
			declare {{{P}}}K_Setting SectionSetting = {{{P}}}C_Setting_Null;
			if (
				_State.ScrollSettingIds.existskey(_State.DisplayedCategory) &&
				_State.ScrollSettingIds[_State.DisplayedCategory].existskey(_State.BindingsKeyShift - 1)
			) {
				SectionSetting = _State.Settings.get(_State.ScrollSettingIds[_State.DisplayedCategory][_State.BindingsKeyShift - 1], {{{P}}}C_Setting_Null);
			}

			declare {{{P}}}K_Binding Binding = _State.Bindings[_SettingKey - _State.BindingsKeyShift];
			Setting = {{{P}}}K_Setting {
				Id = {{{P}}}C_SettingId_ControlEditBind,
				Name = Binding.ActionName,
				ActionIndex = Binding.ActionIndex,
				Type = {{{P}}}C_SettingType_Binding,
				New = {{{P}}}K_Values {
					ValueBinds = Binding.Binds,
					ValueButtonIcons = Binding.ButtonIcons
				},
				SectionKey = SectionSetting.SectionKey,
				SectionId = SectionSetting.SectionId
			};
		}
	}

	return Setting;
}

// Get the value of a slider and convert it to a Text
Text {{{P}}}Private_SliderValueToText(CMlFrame _Slider_Value, Integer _SliderType) {
	declare Text Value = "";

	switch (_SliderType) {
		case {{{P}}}C_SliderType_Color: {
			Value = {{{P}}}CL::RgbToHex6({{{Slider::P}}}GetValueColor(_Slider_Value));
		}
		case {{{P}}}C_SliderType_Integer: {
			Value = ""^{{{Slider::P}}}GetValueInteger(_Slider_Value);
		}
		default: { //< {{{P}}}C_SliderType_Real
			declare Real SliderValueReal = {{{Slider::P}}}GetValueReal(_Slider_Value);
			if (SliderValueReal > -10. && SliderValueReal < 10.) {
				Value = {{{P}}}TL::FormatReal({{{Slider::P}}}GetValueReal(_Slider_Value), 3, False, False);
			} else if (SliderValueReal > -100. && SliderValueReal < 100.) {
				Value = {{{P}}}TL::FormatReal({{{Slider::P}}}GetValueReal(_Slider_Value), 2, False, False);
			} else {
				Value = {{{P}}}TL::FormatReal({{{Slider::P}}}GetValueReal(_Slider_Value), 1, False, False);
			}
		}
	}

	return Value;
}

// Update the buttons in the controller info
{{{P}}}K_State {{{P}}}Private_UpdateControllerInfo(
	{{{P}}}K_State _State,
	Boolean _ForceUpdate,
	Integer _FocusedSettingType,
	Boolean _ScrollIsFocused,
	Boolean _ControllerInfoEnabled,
	Boolean _CanEditSlider,
	Boolean _SettingIsLocked
) {
	if (
		!_ForceUpdate &&
		_State.FocusedSettingType == _FocusedSettingType &&
		_State.ScrollIsFocused == _ScrollIsFocused &&
		_State.ControllerInfoEnabled == _ControllerInfoEnabled &&
		_State.CanEditSlider == _CanEditSlider &&
		_State.SettingIsLocked == _SettingIsLocked
	) {
		return _State;
	}

	declare {{{P}}}K_State State = _State;
	State.FocusedSettingType = _FocusedSettingType;
	State.ScrollIsFocused = _ScrollIsFocused;
	State.ControllerInfoEnabled = _ControllerInfoEnabled;
	State.CanEditSlider = _CanEditSlider;
	State.SettingIsLocked = _SettingIsLocked;

	State.Controls.ButtonList_Settings.Visible = !State.ControllerInfoEnabled && !State.SettingIsLocked;

	declare Text[Text] Buttons;
	if (State.IsWaitingBind || State.SettingIsLocked) {
		// No buttons displayed during button binding
		// We cannot use `Buttons["B"] = _("Cancel");` because it would display the `B` button icon when using a gamepad.
		// It's really only the "escape" key on the keyboard that can cancel the bind not it's equivalent on the gamepad.
	} else if (State.DiscardPopUpDisplayed || State.ActivateKeyPopUpDisplayed) {
		//L16N [Settings] Select a button.
		Buttons["A"] = _("Select");
		//L16N [Settings] Cancel an action.
		Buttons["B"] = _("Cancel");
	} else if (State.ScrollIsFocused) {
		switch (State.FocusedSettingType) {
			case {{{P}}}C_SettingType_List, {{{P}}}C_SettingType_Slider: {
				if (_CanEditSlider) {
					//L16N [Settings] Edit the value of a setting.
					Buttons["A"] = _("|Setting|Edit");
				}
				Buttons["left"] = "";
				//L16N [Settings] Select a value in a list.
				Buttons["right"] = _("Select value");
			}
			case {{{P}}}C_SettingType_TextField: {
				//L16N [Settings] Edit the value of a setting.
				Buttons["A"] = _("|Setting|Edit");
			}
			case {{{P}}}C_SettingType_Checkbox: {
				//L16N [Settings] Toggle a setting checkbox.
				Buttons["A"] = _("|Setting|Toggle");
			}
			case {{{P}}}C_SettingType_Binding: {
				//L16N [Settings] Bind a keyboard or gamepad button.
				Buttons["A"] = _("|ControllerButton|Bind");
			}
			case {{{P}}}C_SettingType_Button: {
				//L16N [Settings] Select a button.
				Buttons["A"] = _("Select");
			}
		}
	} else {
		//L16N [Settings] Select a button.
		Buttons["A"] = _("Select");
	}

	if (State.ControllerInfoEnabled) {
		{{{P}}}ControllerInfo::SetButtons(Buttons);
	} else {
		{{{MenuButtonList::P}}}SetButtons(State.Controls.ButtonList_Settings, Buttons);
	}

	return State;
}
{{{P}}}K_State {{{P}}}Private_UpdateControllerInfo(
	{{{P}}}K_State _State,
	Integer _FocusedSettingType,
	Boolean _ScrollIsFocused,
	Boolean _ControllerInfoEnabled,
	Boolean _CanEditSlider,
	Boolean _SettingIsLocked
) {
	return {{{P}}}Private_UpdateControllerInfo(_State, False, _FocusedSettingType, _ScrollIsFocused, _ControllerInfoEnabled, _CanEditSlider, _SettingIsLocked);
}
{{{P}}}K_State {{{P}}}Private_UpdateControllerInfo({{{P}}}K_State _State) {
	return {{{P}}}Private_UpdateControllerInfo(_State, True, _State.FocusedSettingType, _State.ScrollIsFocused, _State.ControllerInfoEnabled, _State.CanEditSlider, _State.SettingIsLocked);
}

{{{P}}}K_State {{{P}}}Private_DisplayCalibrationArrows({{{P}}}K_State _State, Boolean _IsDisplayed, Boolean _IsAnimated) {
	declare {{{P}}}K_State State = _State;

	State.IsAreaCalibrationDisplayed = _IsDisplayed;
	foreach (Control_Arrow in State.Controls.Frame_AreaCalibration.Controls) {
		AnimMgr.Flush(Control_Arrow);
		if (_IsAnimated) {
			if (State.IsAreaCalibrationDisplayed) {
				AnimMgr.Add(Control_Arrow, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				AnimMgr.Add(Control_Arrow, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		} else {
			if (State.IsAreaCalibrationDisplayed) {
				(Control_Arrow as CMlQuad).Opacity = 1.;
			} else {
				(Control_Arrow as CMlQuad).Opacity = 0.;
			}
		}
	}

	return State;
}

// Enable or disable the navigation in the component
Void {{{P}}}Private_UpdateNavigationLock({{{P}}}K_State _State) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", _State.ComponentEnabled && !_State.DiscardPopUpDisplayed && !_State.ActivateKeyPopUpDisplayed);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Main}}}", _State.ComponentEnabled && !_State.DiscardPopUpDisplayed && !_State.ActivateKeyPopUpDisplayed);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_MouseOnly}}}", _State.ComponentEnabled && !_State.DiscardPopUpDisplayed && !_State.ActivateKeyPopUpDisplayed);
	{{{NavigationTabs::P}}}LockTabs(This, _State.Controls.NavigationTabs_Categories, !_State.ComponentEnabled || _State.DiscardPopUpDisplayed || _State.ActivateKeyPopUpDisplayed);
	{{{Scroll::P}}}LockNavigation(_State.Controls.Scroll_Settings, !_State.ComponentEnabled || _State.DiscardPopUpDisplayed || _State.ActivateKeyPopUpDisplayed);
}

// Get the status of a setting
Integer {{{P}}}Private_GetSettingStatus({{{P}}}K_State _State, {{{P}}}K_Setting _Setting) {
	if (
		_Setting.PlatformFamily.count > 0 && _Setting.Platforms.count > 0 &&
		!_Setting.PlatformFamily.exists({{{P}}}Platform::GetFamily(System)) && !_Setting.Platforms.exists({{{P}}}Platform::GetPlatform(System))
	) {
		return {{{P}}}C_SettingStatus_Hidden;
	} 
	if (_Setting.Platforms.count <= 0 && _Setting.PlatformFamily.count > 0 && !_Setting.PlatformFamily.exists({{{P}}}Platform::GetFamily(System))) {
		return {{{P}}}C_SettingStatus_Hidden;
	} 
	if (_Setting.Platforms.count > 0 && _Setting.PlatformFamily.count <= 0 && !_Setting.Platforms.exists({{{P}}}Platform::GetPlatform(System))) {
		return {{{P}}}C_SettingStatus_Hidden;
	}

	if (_Setting.Id == {{{P}}}C_SettingId_ControlAnalogVehicleSelection && !_State.VehicleSelectionEnabled) {
		return {{{P}}}C_SettingStatus_Hidden;
	}

	if (
		(_Setting.Id == {{{P}}}C_SettingId_SystemCredits && !_State.CreditsEnabled) ||
		(_Setting.Id == {{{P}}}C_SettingId_ProfileOpenProfilePage && !_State.ProfileEnabled) ||
		(_Setting.Id == {{{P}}}C_SettingId_ControlLatencyTest && !_State.LatencyTestEnabled)
	) {
		return {{{P}}}C_SettingStatus_Disabled;
	}

	if (!_State.ShowSettingsThatHaveDisplaySettingsPreset && _Setting.HasDisplaySettingsPreset) {
		return {{{P}}}C_SettingStatus_Hidden;
	}

	if (!_State.TrackEditorQuickStartEnabled && _Setting.NeedEditorQuickStart) {
		return {{{P}}}C_SettingStatus_Disabled;
	}

	if (!_State.VoiceChatVoiceDetectionManualSensitivity && _Setting.NeedManualVoiceChatVoiceDetection) {
		return {{{P}}}C_SettingStatus_Disabled;
	}

	if (_Setting.Permissions.count > 0 && !{{{UserStore::P}}}HasGamePermissions(PrivilegeMgr, _Setting.Permissions)) {
		return {{{P}}}C_SettingStatus_MissingPermission;
	}

	return _Setting.Status;
}

// Check if the setting has one of the given status
Boolean {{{P}}}Private_SettingHasStatus({{{P}}}K_State _State, {{{P}}}K_Setting _Setting, Integer[] _Statuses) {
	return _Statuses.exists({{{P}}}Private_GetSettingStatus(_State, _Setting));
}
Boolean {{{P}}}Private_SettingHasStatus({{{P}}}K_State _State, {{{P}}}K_Setting _Setting, Integer _Status) {
	return {{{P}}}Private_GetSettingStatus(_State, _Setting) == _Status;
}

// Update the focus on a line of the settings scroll
{{{P}}}K_State {{{P}}}Private_FocusSettingsLine({{{P}}}K_State _State, CMlFrame _Frame_SettingLine, Integer _SettingKey, Boolean _IsFocused, Boolean _IsAnimated) {
	declare {{{P}}}K_State State = _State;

	declare {{{P}}}K_Setting Setting = {{{P}}}Private_GetSettingFromScroll(State, _SettingKey);

	if (_Frame_SettingLine != Null) {
		declare CMlFrame Asset_BgLeft <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}asset-bg-left") as CMlFrame);
		declare CMlFrame Asset_BgRight <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}asset-bg-right") as CMlFrame);
		declare CMlFrame Asset_BgDisabled <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}asset-bg-disabled") as CMlFrame);
		declare CMlQuad Quad_Lock <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}quad-lock") as CMlQuad);
		declare CMlLabel Label_Name <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}label-name") as CMlLabel);
		declare CMlLabel Label_ListValue <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}label-list-value") as CMlLabel);
		declare CMlFrame Button_ListPrevious <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}button-list-previous") as CMlFrame);
		declare CMlFrame Button_ListNext <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}button-list-next") as CMlFrame);
		declare CMlFrame Checkbox_Value <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}checkbox-value") as CMlFrame);
		declare CMlFrame Slider_Value <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}slider-value") as CMlFrame);
		declare CMlFrame TextField_SliderValue <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}textfield-slider-value") as CMlFrame);
		declare CMlFrame Textfield_Value <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}textfield-value") as CMlFrame);
		declare CMlFrame Frame_AlignKeybinds <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}frame-align-keybinds") as CMlFrame);
		declare CMlLabel Label_ButtonValue <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}label-button-value") as CMlLabel);
		declare CMlFrame Frame_LatencyTest <=> (_Frame_SettingLine.GetFirstChild("{{{LatencyTest::C_Id_FrameLatencyTest}}}") as CMlFrame);

		declare Vec3 NameTextColor = <0.5, 0.5, 0.5>;
		declare Real ScrollLineOpacity = {{{Opacity_ScrollLineDisabled}}};
		declare Real BindingBgOpacity = {{{Opacity_BindingBgDisabled}}};
		declare Real LockOpacity = {{{Opacity_LockUnfocus}}};
		if ({{{P}}}Private_SettingHasStatus(State, Setting, {{{P}}}C_SettingStatus_Enabled)) {
			if (_IsFocused) {
				NameTextColor = {{{ColorPalette::C_Color_Vec3_GreenOne}}};
				ScrollLineOpacity = {{{Opacity_ScrollLineFocus}}};
				BindingBgOpacity = {{{Opacity_BindingBgFocus}}};
				LockOpacity = {{{Opacity_LockFocus}}};
			} else {
				NameTextColor = <1., 1., 1.>;
				ScrollLineOpacity = {{{Opacity_ScrollLineUnfocus}}};
				BindingBgOpacity = {{{Opacity_BindingBgUnfocus}}};
			}
		} else if ({{{P}}}Private_SettingHasStatus(State, Setting, {{{P}}}C_SettingStatus_MissingPermission)) {
			if (_IsFocused) {
				NameTextColor = {{{ColorPalette::C_Color_Vec3_GreenOne}}};
				ScrollLineOpacity = {{{Opacity_ScrollLineFocusMissingPermission}}};
				BindingBgOpacity = {{{Opacity_BindingBgFocusMissingPermission}}};
				LockOpacity = {{{Opacity_LockFocus}}};
			}
		}

		{{{ExpendableAsset::P}}}SetOpacity(This, Asset_BgLeft, ScrollLineOpacity, False);
		{{{ExpendableAsset::P}}}RedrawAsset(This, Asset_BgLeft, _IsAnimated);
		{{{ExpendableAsset::P}}}SetOpacity(This, Asset_BgRight, ScrollLineOpacity, False);
		{{{ExpendableAsset::P}}}RedrawAsset(This, Asset_BgRight, _IsAnimated);
		{{{ExpendableAsset::P}}}SetOpacity(This, Asset_BgDisabled, ScrollLineOpacity, False);
		{{{ExpendableAsset::P}}}RedrawAsset(This, Asset_BgDisabled, _IsAnimated);
		Quad_Lock.Opacity = LockOpacity;
		Label_Name.Opacity = ScrollLineOpacity;
		Label_Name.TextColor = NameTextColor;
		switch (Setting.Type) {
			case {{{P}}}C_SettingType_List: {
				Label_ListValue.Opacity = ScrollLineOpacity;
				{{{Button::P}}}SetBackgroundOpacity(This, Button_ListPrevious, ScrollLineOpacity, False);
				{{{Button::P}}}SetOpacityUnfocus(This, Button_ListPrevious, ScrollLineOpacity, False);
				{{{Button::P}}}ApplyProperties(This, Button_ListPrevious);
				{{{Button::P}}}SetBackgroundOpacity(This, Button_ListNext, ScrollLineOpacity, False);
				{{{Button::P}}}SetOpacityUnfocus(This, Button_ListNext, ScrollLineOpacity, False);
				{{{Button::P}}}ApplyProperties(This, Button_ListNext);
				if (_IsFocused) Label_ListValue.TTS_Focus();
				else Label_ListValue.TTS_Unfocus();
			}
			case {{{P}}}C_SettingType_TextField: {
				if (_IsFocused) {
					{{{TextField::P}}}Focus(This, Textfield_Value, False, _IsAnimated);
				} else {
					{{{TextField::P}}}Unfocus(This, Textfield_Value, False, _IsAnimated);
				}
			}
			case {{{P}}}C_SettingType_Checkbox: {
				if (_IsFocused) {
					{{{Checkbox::P}}}Focus(This, Checkbox_Value, _IsAnimated);
				} else {
					{{{Checkbox::P}}}Unfocus(This, Checkbox_Value, _IsAnimated);
				}
			}
			case {{{P}}}C_SettingType_Slider: {
				{{{Slider::P}}}SetOpacity(Slider_Value, ScrollLineOpacity);
				if (TextField_SliderValue.Visible) {
					if (_IsFocused) {
						{{{TextField::P}}}Focus(This, TextField_SliderValue, False, _IsAnimated);
					} else {
						{{{TextField::P}}}Unfocus(This, TextField_SliderValue, False, _IsAnimated);
					}
				}
			}
			case {{{P}}}C_SettingType_Binding: {
				foreach (Control in Frame_AlignKeybinds.Controls) {
					if (Control.HasClass("{{{P}}}keybind")) {
						declare CMlFrame Frame_Keybind <=> (Control as CMlFrame);
						declare CMlFrame Asset_BgKeybind <=> (Frame_Keybind.GetFirstChild("{{{P}}}asset-bg-keybind") as CMlFrame);
						declare CMlLabel Label_Keybind <=> (Frame_Keybind.GetFirstChild("{{{P}}}label-keybind") as CMlLabel);
						{{{ExpendableAsset::P}}}SetOpacity(This, Asset_BgKeybind, BindingBgOpacity, False);
						{{{ExpendableAsset::P}}}RedrawAsset(This, Asset_BgKeybind, _IsAnimated);
						Label_Keybind.Opacity = ScrollLineOpacity;
						if (Control.HasClass("{{{P}}}text-to-speech")) {
							if (_IsFocused) Label_Keybind.TTS_Focus();
							else Label_Keybind.TTS_Unfocus();
						}
					}
				}
			}
			case {{{P}}}C_SettingType_Button: {
				Label_ButtonValue.Opacity = ScrollLineOpacity;
				if (_IsFocused) Label_ButtonValue.TTS_Focus();
				else Label_ButtonValue.TTS_Unfocus();
				if (Setting.Id == {{{P}}}C_SettingId_ControlLatencyTest) {
					{{{LatencyTest::P}}}SetFocusState(This, Frame_LatencyTest, _IsFocused);
				}
			}
		}

		// Reset latency test
		if ((!_IsFocused && {{{LatencyTest::P}}}IsRunning(Frame_LatencyTest)) || (_IsFocused && Setting.Id == {{{P}}}C_SettingId_ControlLatencyTest)) {
			{{{LatencyTest::P}}}Reset(This, Frame_LatencyTest);
			Label_ButtonValue.Show();
		} 

		// Display calibration arrows for output scale
		if (State.IsAreaCalibrationDisplayed != (_IsFocused && Setting.Id == {{{P}}}C_SettingId_VideoOutputScale)) {
			State = {{{P}}}Private_DisplayCalibrationArrows(State, _IsFocused && Setting.Id == {{{P}}}C_SettingId_VideoOutputScale, True);
		}

		// Text to speech context
		// The previously focused setting ID is used to avoid reading the entire TTS context when a setting is updated
		if (_IsFocused && (State.PreviouslyFocusedSettingId != Setting.Id || Setting.Id == {{{P}}}C_SettingId_ControlEditBind)) {
			State.PreviouslyFocusedSettingId = Setting.Id;
			if ({{{P}}}G_TTSContextIdent_Setting == NullId) {{{P}}}G_TTSContextIdent_Setting = ParentApp.TTS_Context_Enter({{{P}}}C_TTSContextLevel_Setting);
			ParentApp.TTS_Context_Change({{{P}}}G_TTSContextIdent_Setting, Label_Name.Value, True);
			ParentApp.TTS_Context_Read({{{P}}}C_TTSContextLevel_Setting);
		}
	}

	// Text to speech context
	// The previously focused section ID is used to avoid reading the entire TTS context when a setting is updated
	if (_IsFocused && State.PreviouslyFocusedSectionId != Setting.SectionId) {
		State.PreviouslyFocusedSectionId = Setting.SectionId;
		if ({{{P}}}G_TTSContextIdent_Section == NullId) {{{P}}}G_TTSContextIdent_Section = ParentApp.TTS_Context_Enter({{{P}}}C_TTSContextLevel_Section);
		ParentApp.TTS_Context_Change({{{P}}}G_TTSContextIdent_Section, State.Settings.get(Setting.SectionId, {{{P}}}K_Setting {}).Name, True);
		ParentApp.TTS_Context_Read({{{P}}}C_TTSContextLevel_Section);
	}

	// Highlight the focused section
	if (_IsFocused) {
		State.FocusedSectionId = Setting.SectionId;
	} else {
		State.FocusedSectionId = {{{P}}}C_SettingId_NullId;
	}
	declare CMlFrame Frame_Section <=> {{{Scroll::P}}}GetElementVisible(State.Controls.Scroll_Settings, Setting.SectionKey);
	if (Frame_Section != Null) {
		declare CMlLabel Label_SectionName <=> (Frame_Section.GetFirstChild("{{{P}}}label-section-name") as CMlLabel);
		if (_IsFocused) {
			Label_SectionName.TextColor = {{{ColorPalette::C_Color_Vec3_GreenOne}}};
		} else {
			Label_SectionName.TextColor = <1., 1., 1.>;
		}
	}

	if (_IsFocused) {
		State = {{{P}}}Private_UpdateControllerInfo(State, Setting.Type, State.ScrollIsFocused, State.ControllerInfoEnabled, Setting.Slider.DisplayTextField, {{{P}}}Private_SettingHasStatus(State, Setting, {{{P}}}C_SettingStatus_MissingPermission));
	}

	return State;
}

// Update navigation focus
{{{P}}}K_State {{{P}}}Private_Focus({{{P}}}K_State _State, CMlControl _From, CMlControl _To) {
	declare {{{P}}}K_State State = _State;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);

		if (!_From.HasClass({{{P}}}C_Class_NoFocus)) {
			if ({{{Scroll::P}}}IsScroll(_From)) {
				{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
			} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
				{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
			} else if ({{{Button::P}}}IsButton(_From)) {
				{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
			} else if ({{{Checkbox::P}}}IsCheckbox(_From)) {
				{{{Checkbox::P}}}Unfocus(This, (_From as CMlFrame));
			} else if ({{{TextField::P}}}IsTextField(_From)) {
				{{{TextField::P}}}Unfocus(This, (_From as CMlFrame));
			}
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		
		if (!_To.HasClass({{{P}}}C_Class_NoFocus)) {
			if ({{{Scroll::P}}}IsScroll(_To)) {
				{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
			} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
				{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
			} else if ({{{Button::P}}}IsButton(_To)) {
				{{{Button::P}}}Focus(This, (_To as CMlFrame));
			} else if ({{{Checkbox::P}}}IsCheckbox(_To)) {
				{{{Checkbox::P}}}Focus(This, (_To as CMlFrame));
			} else if ({{{TextField::P}}}IsTextField(_To)) {
				{{{TextField::P}}}Focus(This, (_To as CMlFrame));
			}
		}

		if (_To.HasClass({{{P}}}C_Class_BottomButton)) {
			State.LastBottomButtonFocused = _To;
		}

		// When focusing one of the widget with the mouse
		// force the focus on the corresponding setting line
		// if it's not focused already
		if (_To.HasClass({{{P}}}C_Class_FocusSettingLine)) {
			declare Integer {{{P}}}MouseScrollFocusSettingKey for _To = {{{P}}}C_SettingKey_Null;
			if ({{{P}}}MouseScrollFocusSettingKey != {{{P}}}C_SettingKey_Null && {{{Scroll::P}}}GetFocusedElementKey(State.Controls.Scroll_Settings) != {{{P}}}MouseScrollFocusSettingKey) {
				{{{Scroll::P}}}SetFocusedElementKey(This, State.Controls.Scroll_Settings, {{{P}}}MouseScrollFocusSettingKey, True, True);
			}
		}
	}

	State = {{{P}}}Private_UpdateControllerInfo(State, State.FocusedSettingType, {{{Scroll::P}}}IsFocused(_State.Controls.Scroll_Settings), State.ControllerInfoEnabled, State.CanEditSlider, State.SettingIsLocked);

	return State;
}

// Update the content of a setting line in the scroll
Void {{{P}}}Private_DisplayList({{{P}}}K_State _State, CMlFrame _Frame_TypeList, {{{P}}}K_Setting _Setting, Boolean _IsTTSFocused) {
	declare CMlLabel Label_ListValue <=> (_Frame_TypeList.GetFirstChild("{{{P}}}label-list-value") as CMlLabel);
	if (_Setting.List.Labels.existskey(_Setting.New.ValueInteger)) {
		Label_ListValue.Value = _Setting.List.Labels[_Setting.New.ValueInteger];
	} else {
		Label_ListValue.Value = "";
	}
	if ({{{P}}}Private_SettingHasStatus(_State, _Setting, {{{P}}}C_SettingStatus_Enabled)) {
		Label_ListValue.TextColor = <1., 1., 1.>;
	} else {
		Label_ListValue.TextColor = <0.5, 0.5, 0.5>;
	}
	// Disable italic on device name to respect first party naming convention
	// Check : /trackmania-next/tmnext/-/issues/4418
	if (
		_Setting.Id == {{{P}}}C_SettingId_ControlDevice &&
		{{{P}}}Platform::GetFamily(System) != {{{P}}}Platform::C_Family_PC
	) {
		Label_ListValue.TextPrefix = "";
	} else {
		Label_ListValue.TextPrefix = "$t$i";
	}
	{{{P}}}Tools::FitLabelValue(Label_ListValue, 2.5, 1.5, 0.25);

	if (_IsTTSFocused) { //< Read the updated value
		Label_ListValue.TTS_Focus();
	}

	declare CMlFrame Button_ListPrevious <=> (_Frame_TypeList.GetFirstChild("{{{P}}}button-list-previous") as CMlFrame);
	declare CMlFrame Button_ListNext <=> (_Frame_TypeList.GetFirstChild("{{{P}}}button-list-next") as CMlFrame);
	declare CMlQuad Quad_ListPreviousDisabled <=> (_Frame_TypeList.GetFirstChild("{{{P}}}quad-list-previous-disabled") as CMlQuad);
	declare CMlQuad Quad_ListNextDisabled <=> (_Frame_TypeList.GetFirstChild("{{{P}}}quad-list-next-disabled") as CMlQuad);
	Button_ListPrevious.Visible = {{{P}}}Private_SettingHasStatus(_State, _Setting, {{{P}}}C_SettingStatus_Enabled) && (_Setting.List.CanLoop || _Setting.New.ValueInteger > 0);
	Button_ListNext.Visible = {{{P}}}Private_SettingHasStatus(_State, _Setting, {{{P}}}C_SettingStatus_Enabled) && (_Setting.List.CanLoop || _Setting.New.ValueInteger < _Setting.List.Labels.count - 1);
	Quad_ListPreviousDisabled.Visible = !Button_ListPrevious.Visible;
	Quad_ListNextDisabled.Visible = !Button_ListNext.Visible;
}

// Update the alert message displayed at the bottom of the screen
{{{P}}}K_State {{{P}}}Private_DisplayAlertMessage({{{P}}}K_State _State, Text _Message, Boolean _IsError) {
	declare {{{P}}}K_State State = _State;

	if (_IsError) {
		State.Controls.Label_InfoAlert.TextColor = {{{ColorPalette::C_Color_Vec3_ErrorRed}}};
	} else {
		State.Controls.Label_InfoAlert.TextColor = {{{ColorPalette::C_Color_Vec3_GreenOne}}};
	}

	AnimMgr.Flush(State.Controls.Label_InfoTitle);
	AnimMgr.Flush(State.Controls.Label_InfoDescription);
	AnimMgr.Flush(State.Controls.Label_InfoAlert);

	State.Controls.Label_InfoAlert.Value = _Message;
	State.Controls.Label_InfoAlert.Opacity = 0.;
	State.Controls.Label_InfoAlert.RelativeScale = 1.3;
	State.AlertMessageEndTime = Now + {{{P}}}C_AlertMessageDuration;

	AnimMgr.Add(State.Controls.Label_InfoTitle, "<a opacity=\"0\" hidden=\"1\" />", 125, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(State.Controls.Label_InfoDescription, "<a opacity=\"0\" hidden=\"1\" />", 125, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(State.Controls.Label_InfoAlert, "<a opacity=\"1\" scale=\"1\" hidden=\"0\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);

	{{{P}}}Tools::FitLabelValue(State.Controls.Label_InfoAlert, 2.5, 0.25, 0.25);

	return State;
}
{{{P}}}K_State {{{P}}}Private_DisplayAlertMessage({{{P}}}K_State _State, Text _Message) {
	return {{{P}}}Private_DisplayAlertMessage(_State, _Message, False);
}
{{{P}}}K_State {{{P}}}Private_DisplayErrorMessage({{{P}}}K_State _State, Text _Message) {
	return {{{P}}}Private_DisplayAlertMessage(_State, _Message, True);
}
{{{P}}}K_State {{{P}}}Private_HideAlertMessage({{{P}}}K_State _State) {
	declare {{{P}}}K_State State = _State;

	AnimMgr.Flush(State.Controls.Label_InfoTitle);
	AnimMgr.Flush(State.Controls.Label_InfoDescription);
	AnimMgr.Flush(State.Controls.Label_InfoAlert);
	
	State.AlertMessageEndTime = -1;

	AnimMgr.Add(State.Controls.Label_InfoTitle, "<a opacity=\"1\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(State.Controls.Label_InfoDescription, "<a opacity=\"1\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(State.Controls.Label_InfoAlert, "<a opacity=\"0\" scale=\"1\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::Linear);

	return State;
}

// Update the info text displayed at the bottom of the screen
Void {{{P}}}Private_DisplaySettingInfo({{{P}}}K_State _State, Integer _SettingKey) {
	declare {{{P}}}K_Setting Setting = {{{P}}}Private_GetSettingFromScroll(_State, _SettingKey);

	if (Setting.Id != {{{P}}}C_SettingId_NullId && (Setting.InfoDescription != "" || Setting.NeedRestart)) {
		if (Setting.InfoTitle != "") {
			_State.Controls.Label_InfoTitle.Value = Setting.InfoTitle;
		} else {
			_State.Controls.Label_InfoTitle.Value = Setting.Name;
		}
		if (Setting.Id == {{{P}}}C_SettingId_SoundVoiceChatVoiceDetectionMode && {{{P}}}Platform::IsPC(System)) { // @TODO remove this when PTT binding fixed (see trackmania-next/tmnext/-/issues/4757)
			_State.Controls.Label_InfoDescription.Value = {{{P}}}TL::Compose("%1 %2", _("Set the voice detection mode for the voice chat microphone"), "\n(For Push-To-Talk, hold on the key 'Right Ctrl' to talk)");
		} else if (Setting.Id == {{{P}}}C_SettingId_ControlLatencyTest) {
			_State.Controls.Label_InfoDescription.Value = {{{P}}}TL::Compose(Setting.InfoDescription, {{{P}}}Tools::Ternary({{{LatencyTest::P}}}GetAverageLatency(This) >= 0, ""^{{{LatencyTest::P}}}GetAverageLatency(This), "-")); //< Add the average input latency of players
		}  else if (Setting.Id == {{{P}}}C_SettingId_SystemCredits) {
			_State.Controls.Label_InfoDescription.Value = {{{P}}}TL::Compose(Setting.InfoDescription, ""); //< Add a heart symbol at the end of the description
		} else if (Setting.NeedRestart) {
			declare Text Separator = "";
			if (Setting.InfoDescription != "") {
				// We use a new line to separate the setting description from the restart message
				// This means that if the description is longer than two lines, the restart message won't be visible
				Separator = "\n";
			}
			_State.Controls.Label_InfoDescription.Value = {{{P}}}TL::Compose("%1%2$<$f00%3$>", Setting.InfoDescription, Separator, "{{{Text_RestartRequiredLong}}}");
		} else {
			_State.Controls.Label_InfoDescription.Value = Setting.InfoDescription;
		}
		{{{P}}}Tools::FitLabelValue(_State.Controls.Label_InfoDescription, 2., 0.25, 0.25);
	} else {
		_State.Controls.Label_InfoTitle.Value = "";
		_State.Controls.Label_InfoDescription.Value = "";
	}
}

// Update the binds displayed in the setting line
Void {{{P}}}Private_DisplayBinds(CMlFrame _Frame_AlignKeybinds, Text[] _Binds, Text[] _ButtonIcons) {
	declare Real PosX = 0.;
	foreach (Key => Control in _Frame_AlignKeybinds.Controls) {
		if (Control.HasClass("{{{P}}}keybind")) {
			declare CMlFrame Frame_Keybind <=> (Control as CMlFrame);
			declare CMlFrame Asset_BgKeybind <=> (Frame_Keybind.GetFirstChild("{{{P}}}asset-bg-keybind") as CMlFrame);
			declare CMlLabel Label_Keybind <=> (Frame_Keybind.GetFirstChild("{{{P}}}label-keybind") as CMlLabel);
			declare CMlQuad Quad_PadButtonIcon <=> (Frame_Keybind.GetFirstChild("{{{P}}}quad-pad-button-icon") as CMlQuad);
			if (_ButtonIcons.existskey(Key)) {
				Quad_PadButtonIcon.ImageUrl = _ButtonIcons[Key];
				Frame_Keybind.Visible = True;
				Asset_BgKeybind.Visible = False;
				Label_Keybind.Visible = False;
				Quad_PadButtonIcon.Visible = True;
				Frame_Keybind.RelativePosition_V3.X = PosX;
				PosX += Quad_PadButtonIcon.Size.X + 1.;
			} else if (_Binds.existskey(Key)) {
				// `$` starts a special formatting sequence, if we want to display the $ key, we must escape it.
				if (_Binds[Key] == "$") {
					Label_Keybind.Value = "$$";
				} else {
					Label_Keybind.Value = _Binds[Key];
				}
				{{{P}}}Tools::FitLabelValue(Label_Keybind, 2.5, 1.5, 0.25);
				declare Real Width = {{{P}}}ML::Clamp(Label_Keybind.ComputeWidth(Label_Keybind.Value, True), {{{SizeX_Skew * 2}}}, Label_Keybind.Size.X) + {{{SizeX_Skew * 2}}};
				{{{ExpendableAsset::P}}}SetWidth(This, Asset_BgKeybind, Width, False);
				{{{ExpendableAsset::P}}}RedrawAsset(This, Asset_BgKeybind, False);
				Label_Keybind.RelativePosition_V3.X = Width * 0.5;
				if ({{{P}}}TL::Find(Label_Keybind.Value, {{{P}}}C_GamepadButtons, False, True)) {
					Label_Keybind.RelativePosition_V3.Y = -0.75;
				} else {
					Label_Keybind.RelativePosition_V3.Y = 0.;
				}
				Frame_Keybind.RelativePosition_V3.X = PosX;
				PosX += Width - {{{SizeX_Skew}}} + 2.;
				Frame_Keybind.Visible = True;
				Asset_BgKeybind.Visible = True;
				Label_Keybind.Visible = True;
				Quad_PadButtonIcon.Visible = False;
			} else {
				Frame_Keybind.Visible = False;
			}

			// Text to speech
			if (Frame_Keybind.HasClass("{{{P}}}text-to-speech")) {
				if (_Binds.count <= 0) {
					Label_Keybind.TTS_AltText = "{{{TTS_NoBind}}}";
				} else {
					Label_Keybind.TTS_AltText = "";
					foreach (Bind in _Binds) {
						Label_Keybind.TTS_AltText ^= Bind^" - ";
					}
				}
			}
		}
	}
	_Frame_AlignKeybinds.RelativePosition_V3.X = ({{{Size_ScrollLineRight.X}}} - PosX - {{{SizeX_Skew * 1.9}}}) * 0.5;
}

// Update the content of a setting line in the scroll
Void {{{P}}}Private_DisplaySettingLine({{{P}}}K_State _State, Integer _SettingKey, CMlFrame _Frame_SettingLine) {
	declare {{{P}}}K_Setting Setting = {{{P}}}Private_GetSettingFromScroll(_State, _SettingKey);

	// Display the setting name
	declare CMlLabel Label_Name <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}label-name") as CMlLabel);
	if (Setting.Id == {{{P}}}C_SettingId_ProfileCopyAccountId) {
		if (LocalUser != Null) {
			Label_Name.Value = {{{P}}}TL::Compose(Setting.Name, LocalUser.WebServicesUserId);
		} else {
			//L16N [Settings] Displayed when we cannot get the user account ID
			Label_Name.Value = {{{P}}}TL::Compose(Setting.Name, _("|AccountId|Unknown"));
		}
	} else if (Setting.Id == {{{P}}}C_SettingId_ControlLatencyTest && {{{LatencyTest::P}}}GetPersonalBest(This) != -1) {
		//L16N [Settings] Calculate the input lag by pressing the button when it appears. %1 will be replaced by the best latency achieved by the player. e.g. "Latency test (Personal best: 15ms)"
		Label_Name.Value = {{{P}}}TL::Compose(_("Latency test (personal best: %1ms)"), ""^{{{LatencyTest::P}}}GetPersonalBest(This));
	} else {
		Label_Name.Value = Setting.Name;
	}
	{{{P}}}Tools::FitLabelValue(Label_Name, 2.5, 1., 0.25);
	if ({{{P}}}Private_SettingHasStatus(_State, Setting, {{{P}}}C_SettingStatus_Enabled)) {
		Label_Name.TextColor = <1., 1., 1.>;
	} else {
		Label_Name.TextColor = <0.5, 0.5, 0.5>;
	}

	// Toggle between setting and section
	declare CMlFrame Frame_SettingLineBg <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}frame-setting-line-bg") as CMlFrame);
	declare CMlFrame Frame_Widget <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}frame-widget") as CMlFrame);
	declare CMlLabel Label_SectionName <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}label-section-name") as CMlLabel);
	Frame_SettingLineBg.Visible = Setting.Type != {{{P}}}C_SettingType_Section;
	Frame_Widget.Visible = Setting.Type != {{{P}}}C_SettingType_Section;
	Label_SectionName.Visible = Setting.Type == {{{P}}}C_SettingType_Section;
	
	// Display the correct widget
	declare CMlFrame Frame_TypeList <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}frame-type-list") as CMlFrame);
	declare CMlFrame Frame_TypeTextField <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}frame-type-textfield") as CMlFrame);
	declare CMlFrame Frame_TypeCheckbox <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}frame-type-checkbox") as CMlFrame);
	declare CMlFrame Frame_TypeSlider <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}frame-type-slider") as CMlFrame);
	declare CMlFrame Frame_TypeBinding <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}frame-type-binding") as CMlFrame);
	declare CMlFrame Frame_AlignKeybinds <=> (Frame_TypeBinding.GetFirstChild("{{{P}}}frame-align-keybinds") as CMlFrame);
	declare CMlFrame Frame_TypeButton <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}frame-type-button") as CMlFrame);
	declare CMlFrame Frame_LatencyTest <=> (_Frame_SettingLine.GetFirstChild("{{{LatencyTest::C_Id_FrameLatencyTest}}}") as CMlFrame);
	Frame_TypeList.Visible = Setting.Type == {{{P}}}C_SettingType_List;
	Frame_TypeTextField.Visible = Setting.Type == {{{P}}}C_SettingType_TextField;
	Frame_TypeCheckbox.Visible = Setting.Type == {{{P}}}C_SettingType_Checkbox;
	Frame_TypeSlider.Visible = Setting.Type == {{{P}}}C_SettingType_Slider;
	Frame_TypeBinding.Visible = Setting.Type == {{{P}}}C_SettingType_Binding;
	Frame_TypeButton.Visible = Setting.Type == {{{P}}}C_SettingType_Button;
	Frame_LatencyTest.Visible = Setting.Type == {{{P}}}C_SettingType_Button && Setting.Id == {{{P}}}C_SettingId_ControlLatencyTest;

	// Update background behind disabled setting
	declare CMlFrame Asset_BgLeft <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}asset-bg-left") as CMlFrame);
	declare CMlFrame Asset_BgRight <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}asset-bg-right") as CMlFrame);
	declare CMlFrame Asset_BgDisabled <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}asset-bg-disabled") as CMlFrame);
	declare Boolean ActiveBgVisible = {{{P}}}Private_SettingHasStatus(_State, Setting, {{{P}}}C_SettingStatus_Enabled);
	Asset_BgLeft.Visible = ActiveBgVisible;
	Asset_BgRight.Visible = ActiveBgVisible;
	Asset_BgDisabled.Visible = !ActiveBgVisible;

	// Display a lock icon beside the settings where the player is missing a permission
	declare CMlQuad Quad_Lock <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}quad-lock") as CMlQuad);
	Quad_Lock.Visible = {{{P}}}Private_SettingHasStatus(_State, Setting, {{{P}}}C_SettingStatus_MissingPermission);

	// Update the setting value
	switch (Setting.Type) {
		case {{{P}}}C_SettingType_Section: {
			Label_SectionName.Value = Setting.Name;
			if (_State.FocusedSectionId == Setting.Id) {
				Label_SectionName.TextColor = {{{ColorPalette::C_Color_Vec3_GreenOne}}};
			} else {
				Label_SectionName.TextColor = <1., 1., 1.>;
			}
		}
		case {{{P}}}C_SettingType_TextField: {
			declare CMlFrame TextField_Value <=> (Frame_TypeTextField.GetFirstChild("{{{P}}}textfield-value") as CMlFrame);
			declare CMlLabel Label_TextFieldDisabled <=> (Frame_TypeTextField.GetFirstChild("{{{P}}}label-textfield-disabled") as CMlLabel);
			declare Text Value;

			switch (Setting.Id) {
				case {{{P}}}C_SettingId_SystemNetworkSpeedDownload, {{{P}}}C_SettingId_SystemNetworkSpeedUpload: {
					declare {{{P}}}K_Setting NetworkSpeedSetting = _State.Settings.get({{{P}}}C_SettingId_SystemNetworkSpeed, {{{P}}}C_Setting_Null);
					declare CManiaPlanet::ENetworkSpeed NetworkSpeed = CManiaPlanet::ENetworkSpeed::Custom;
					if (
						NetworkSpeedSetting.Id != {{{P}}}C_SettingId_NullId &&
						NetworkSpeedSetting.List.ValuesNetworkSpeed.existskey(NetworkSpeedSetting.New.ValueInteger)
					) {
						NetworkSpeed = NetworkSpeedSetting.List.ValuesNetworkSpeed[NetworkSpeedSetting.New.ValueInteger];
					}

					if (NetworkSpeed == CManiaPlanet::ENetworkSpeed::Custom) {
						Value = Setting.New.ValueText;
					} else {
						if (Setting.Id == {{{P}}}C_SettingId_SystemNetworkSpeedDownload) {
							if ({{{P}}}C_NetworkSpeeds.existskey(NetworkSpeed)) {
								Value = ""^{{{P}}}C_NetworkSpeeds[NetworkSpeed].X;
							} else {
								Value = ""^ParentApp.ManiaPlanet.NetworkSpeed_CustomDownload;
							}
						} else if (Setting.Id == {{{P}}}C_SettingId_SystemNetworkSpeedUpload) {
							if ({{{P}}}C_NetworkSpeeds.existskey(NetworkSpeed)) {
								Value = ""^{{{P}}}C_NetworkSpeeds[NetworkSpeed].Y;
							} else {
								Value = ""^ParentApp.ManiaPlanet.NetworkSpeed_CustomUpload;
							}
						}
					}
				}
				default: {
					Value = Setting.New.ValueText;
				}
			}
			if ({{{P}}}Private_SettingHasStatus(_State, Setting, {{{P}}}C_SettingStatus_Enabled)) {
				{{{TextField::P}}}SetValue(This, TextField_Value, Value, False);
				TextField_Value.Visible = True;
				Label_TextFieldDisabled.Visible = False;
			} else {
				Label_TextFieldDisabled.Value = Value;
				Label_TextFieldDisabled.TextColor = <0.5, 0.5, 0.5>;
				Label_TextFieldDisabled.Visible = True;
				TextField_Value.Visible = False;
			}

			declare Integer {{{P}}}DisplayedSettingId for TextField_Value;
			{{{P}}}DisplayedSettingId = Setting.Id;
		}
		case {{{P}}}C_SettingType_Button: {
			declare CMlLabel Label_ButtonValue <=> (Frame_TypeButton.GetFirstChild("{{{P}}}label-button-value") as CMlLabel);
			Label_ButtonValue.Value = Setting.ButtonText;
			if ({{{P}}}Private_SettingHasStatus(_State, Setting, {{{P}}}C_SettingStatus_Enabled)) {
				Label_ButtonValue.TextColor = <1., 1., 1.>;
			} else {
				Label_ButtonValue.TextColor = <0.5, 0.5, 0.5>;
			}
		}
		case {{{P}}}C_SettingType_Slider: {
			declare CMlFrame Frame_SliderAlign <=> (Frame_TypeSlider.GetFirstChild("{{{P}}}frame-slider-align") as CMlFrame);
			declare CMlFrame Slider_Value <=> (Frame_SliderAlign.GetFirstChild("{{{P}}}slider-value") as CMlFrame);
			declare CMlFrame TextField_SliderValue <=> (Frame_SliderAlign.GetFirstChild("{{{P}}}textfield-slider-value") as CMlFrame);
			declare CMlLabel Label_SliderValueDisabled <=> (Frame_TypeSlider.GetFirstChild("{{{P}}}label-slider-value-disabled") as CMlLabel);

			// Do not delay the redraw of the slider after the range update
			// The slider would not display the correct value otherwise
			{{{Slider::P}}}SetSteps(Slider_Value, Setting.Slider.Steps);
			if (Setting.Slider.RangeInteger == <0, 0>) {
				{{{Slider::P}}}ResetRangeInteger(Slider_Value);
			} else {
				{{{Slider::P}}}SetRangeInteger(Slider_Value, Setting.Slider.RangeInteger);
			}
			if (Setting.Slider.RangeReal == <0., 0.>) {
				{{{Slider::P}}}ResetRangeReal(Slider_Value);
			} else {
				{{{Slider::P}}}SetRangeReal(Slider_Value, Setting.Slider.RangeReal);
			}
			switch (Setting.Slider.Type) {
				case {{{P}}}C_SliderType_Color: {
					{{{Slider::P}}}SetApplyColorOnCursor(Slider_Value, True, False);
					{{{Slider::P}}}SetBarImageUrl(Slider_Value, "{{{Const::C_ImageUrl_SliderBarBgColor}}}", False);
					{{{Slider::P}}}SetValueReal(Slider_Value, Setting.New.ValueReal);
				}
				case {{{P}}}C_SliderType_Integer: {
					{{{Slider::P}}}SetApplyColorOnCursor(Slider_Value, False, False);
					{{{Slider::P}}}SetBarImageUrl(Slider_Value, "", False);
					{{{Slider::P}}}SetValueInteger(Slider_Value, Setting.New.ValueInteger);
				}
				default: { //< {{{P}}}C_SliderType_Real
					{{{Slider::P}}}SetApplyColorOnCursor(Slider_Value, False, False);
					{{{Slider::P}}}SetBarImageUrl(Slider_Value, "", False);
					if ({{{P}}}C_AnalogSettings.exists(Setting.Id) && Setting.New.ValueControlAnalogReal.existskey(_State.ControlVehicleModel)) {
						{{{Slider::P}}}SetValueReal(Slider_Value, Setting.New.ValueControlAnalogReal[_State.ControlVehicleModel]);
					} else {
						{{{Slider::P}}}SetValueReal(Slider_Value, Setting.New.ValueReal);
					}
				}
			}
			if ({{{P}}}Private_SettingHasStatus(_State, Setting, {{{P}}}C_SettingStatus_Enabled)) {
				{{{Slider::P}}}SetBarColor(Slider_Value, <1., 1., 1.>, False);
				{{{Slider::P}}}SetCursorColor(Slider_Value, <1., 1., 1.>, False);
				TextField_SliderValue.Visible = Setting.Slider.DisplayTextField;
				if (TextField_SliderValue.Visible) {
					{{{TextField::P}}}SetValue(This, TextField_SliderValue, {{{P}}}Private_SliderValueToText(Slider_Value, Setting.Slider.Type), False);
					Frame_SliderAlign.RelativePosition_V3.X = {{{TextField::P}}}GetSize(TextField_SliderValue).X * 0.5;
				} else {
					Frame_SliderAlign.RelativePosition_V3.X = 0.;
				}
				Label_SliderValueDisabled.Visible = False;
			} else {
				{{{Slider::P}}}SetBarColor(Slider_Value, <0.5, 0.5, 0.5>, False);
				{{{Slider::P}}}SetCursorColor(Slider_Value, <0.5, 0.5, 0.5>, False);
				Label_SliderValueDisabled.Visible = Setting.Slider.DisplayTextField;
				if (Label_SliderValueDisabled.Visible) {
					Label_SliderValueDisabled.Value = {{{P}}}Private_SliderValueToText(Slider_Value, Setting.Slider.Type);
					Label_SliderValueDisabled.TextColor = <0.5, 0.5, 0.5>;
					Frame_SliderAlign.RelativePosition_V3.X = {{{TextField::P}}}GetSize(TextField_SliderValue).X * 0.5;
				} else {
					Frame_SliderAlign.RelativePosition_V3.X = 0.;
				}
				TextField_SliderValue.Visible = False;
			}
			{{{Slider::P}}}SetMouseInteractionDisabled(Slider_Value, !{{{P}}}Private_SettingHasStatus(_State, Setting, {{{P}}}C_SettingStatus_Enabled));
			{{{Slider::P}}}RedrawSlider(Slider_Value);

			declare Integer {{{P}}}DisplayedSettingId as {{{P}}}DisplayedSettingId_Slider for Slider_Value;
			declare Integer {{{P}}}DisplayedSettingId as {{{P}}}DisplayedSettingId_TextField for TextField_SliderValue;
			declare CMlFrame {{{P}}}Frame_SettingLine as {{{P}}}Frame_SettingLine_Slider for Slider_Value;
			declare CMlFrame {{{P}}}Frame_SettingLine as {{{P}}}Frame_SettingLine_TextField for TextField_SliderValue;
			declare CMlFrame {{{P}}}Slider_Value for TextField_SliderValue;
			declare CMlFrame {{{P}}}TextField_SliderValue for Slider_Value;
			{{{P}}}DisplayedSettingId_Slider = Setting.Id;
			{{{P}}}DisplayedSettingId_TextField = Setting.Id;
			{{{P}}}Frame_SettingLine_Slider = _Frame_SettingLine;
			{{{P}}}Frame_SettingLine_TextField = _Frame_SettingLine;
			{{{P}}}Slider_Value = Slider_Value;
			{{{P}}}TextField_SliderValue = TextField_SliderValue;
		}
		case {{{P}}}C_SettingType_Checkbox: {
			declare CMlFrame Checkbox_Value <=> (Frame_TypeCheckbox.GetFirstChild("{{{P}}}checkbox-value") as CMlFrame);
			
			if ({{{P}}}Private_SettingHasStatus(_State, Setting, {{{P}}}C_SettingStatus_Enabled)) {
				{{{Checkbox::P}}}SetIconColor(This, Checkbox_Value, <1., 1., 1.>, False);
				{{{Checkbox::P}}}SetIconFocusColor(This, Checkbox_Value, <1., 1., 1.>, False);
				{{{Checkbox::P}}}SetTextColor(This, Checkbox_Value, <1., 1., 1.>, False);
			} else {
				{{{Checkbox::P}}}SetIconColor(This, Checkbox_Value, <0.5, 0.5, 0.5>, False);
				{{{Checkbox::P}}}SetIconFocusColor(This, Checkbox_Value, <0.5, 0.5, 0.5>, False);
				{{{Checkbox::P}}}SetTextColor(This, Checkbox_Value, <0.5, 0.5, 0.5>, False);
			}
			
			if ({{{P}}}C_AnalogSettings.exists(Setting.Id) && Setting.New.ValueControlAnalogBoolean.existskey(_State.ControlVehicleModel)) {
				{{{Checkbox::P}}}Check(This, Checkbox_Value, Setting.New.ValueControlAnalogBoolean[_State.ControlVehicleModel], False);
			} else {
				{{{Checkbox::P}}}Check(This, Checkbox_Value, Setting.New.ValueBoolean, False);
			}
			declare Integer {{{P}}}DisplayedSettingId for Checkbox_Value;
			{{{P}}}DisplayedSettingId = Setting.Id;

			if ({{{P}}}Private_SettingHasStatus(_State, Setting, {{{P}}}C_SettingStatus_Enabled)) {
				{{{Checkbox::P}}}SetOpacityFocus(This, Checkbox_Value, {{{Opacity_ScrollLineFocus}}}, False);
				{{{Checkbox::P}}}SetOpacityUnfocus(This, Checkbox_Value, {{{Opacity_ScrollLineUnfocus}}}, False);
			} else if ({{{P}}}Private_SettingHasStatus(_State, Setting, {{{P}}}C_SettingStatus_MissingPermission)) {
				{{{Checkbox::P}}}SetOpacityFocus(This, Checkbox_Value, {{{Opacity_ScrollLineFocusMissingPermission}}}, False);
				{{{Checkbox::P}}}SetOpacityUnfocus(This, Checkbox_Value, {{{Opacity_ScrollLineDisabled}}}, False);
			} else {
				{{{Checkbox::P}}}SetOpacityFocus(This, Checkbox_Value, {{{Opacity_ScrollLineDisabled}}}, False);
				{{{Checkbox::P}}}SetOpacityUnfocus(This, Checkbox_Value, {{{Opacity_ScrollLineDisabled}}}, False);
			}

			if (Setting.Checkbox.TextRight != "" && Setting.Checkbox.TextLeft != "") {
				{{{Checkbox::P}}}SetValue(This, Checkbox_Value, Setting.Checkbox.TextRight, False);
				{{{Checkbox::P}}}SetMirrorValue(This, Checkbox_Value, Setting.Checkbox.TextLeft, False);
				{{{Checkbox::P}}}SetLabelSize(This, Checkbox_Value, <35., 10.>, False);
				{{{Checkbox::P}}}SetIconChecked(This, Checkbox_Value, "{{{Const::C_ImageUrl_Icon_SwitchOn}}}", False);
				{{{Checkbox::P}}}SetIconUnchecked(This, Checkbox_Value, "{{{Const::C_ImageUrl_Icon_SwitchOff}}}", False);
				{{{Checkbox::P}}}SetIconSize(This, Checkbox_Value, <10., 10.>, False);
			} else {
				{{{Checkbox::P}}}SetValue(This, Checkbox_Value, "", False);
				{{{Checkbox::P}}}SetMirrorValue(This, Checkbox_Value, "", False);
				{{{Checkbox::P}}}SetLabelSize(This, Checkbox_Value, <0., 0.>, False);
				{{{Checkbox::P}}}SetIconChecked(This, Checkbox_Value, "{{{Const::C_ImageUrl_Icon_Checkbox_Active_Square}}}", False);
				{{{Checkbox::P}}}SetIconUnchecked(This, Checkbox_Value, "{{{Const::C_ImageUrl_Icon_Checkbox_Inactive_Square}}}", False);
				{{{Checkbox::P}}}SetIconSize(This, Checkbox_Value, <8., 8.>, False);
			}

			{{{Checkbox::P}}}ApplyProperties(This, Checkbox_Value);
		}
		case {{{P}}}C_SettingType_List: {
			{{{P}}}Private_DisplayList(_State, Frame_TypeList, Setting, False);
			
			declare Integer {{{P}}}DisplayedSettingId as PreviousDisplayedSettingId for Frame_TypeList.GetFirstChild("{{{P}}}button-list-previous");
			declare Integer {{{P}}}DisplayedSettingId as NextDisplayedSettingId for Frame_TypeList.GetFirstChild("{{{P}}}button-list-next");
			PreviousDisplayedSettingId = Setting.Id;
			NextDisplayedSettingId = Setting.Id;
		}
		case {{{P}}}C_SettingType_Binding: {
			{{{P}}}Private_DisplayBinds(Frame_AlignKeybinds, Setting.New.ValueBinds, Setting.New.ValueButtonIcons);
		}
	}

	// Save the parent setting line key
	Page.GetClassChildren({{{P}}}C_Class_FocusSettingLine, _Frame_SettingLine, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare Integer {{{P}}}MouseScrollFocusSettingKey for Control = {{{P}}}C_SettingKey_Null;
		{{{P}}}MouseScrollFocusSettingKey = _SettingKey;
	}
}

// Update the visibility of the dimmer
Void {{{P}}}Private_UpdateDimmer({{{P}}}K_State _State) {
	AnimMgr.Flush(_State.Controls.Quad_Dimmer);
	if (_State.IsWaitingBind) {
		AnimMgr.Add(_State.Controls.Quad_Dimmer, "<a opacity=\"0.7\" hidden=\"0\" />", 200, CAnimManager::EAnimManagerEasing::Linear);
	} else {
		AnimMgr.Add(_State.Controls.Quad_Dimmer, "<a opacity=\"0\" hidden=\"1\" />", 200, CAnimManager::EAnimManagerEasing::Linear);
	}
}

{{{P}}}K_State {{{P}}}Private_DisplayDiscardChangesPopUp({{{P}}}K_State _State, Boolean _Display, {{{P}}}K_AfterDiscardPopUp _AfterDiscardPopUp) {
	declare {{{P}}}K_State State = _State;

	State.DiscardPopUpDisplayed = _Display;
	if (_Display) {
		State.AfterDiscardPopUp = _AfterDiscardPopUp;
	}
	{{{PopUpMultiChoice::P}}}Display(This, {{{P}}}G_State.Controls.PopUp_DiscardChanges, State.DiscardPopUpDisplayed, False);
	{{{PopUpMultiChoice::P}}}FocusFirstChoice(This, {{{P}}}G_State.Controls.PopUp_DiscardChanges, True);
	{{{P}}}Private_UpdateNavigationLock(State);
	State = {{{P}}}Private_UpdateControllerInfo(State);

	return State;
}
{{{P}}}K_State {{{P}}}Private_DisplayDiscardChangesPopUp({{{P}}}K_State _State, Boolean _Display) {
	return {{{P}}}Private_DisplayDiscardChangesPopUp(_State, _Display, {{{P}}}K_AfterDiscardPopUp { Action = {{{P}}}C_ActionAfterDiscardPopUp_Null });
}

{{{P}}}K_State {{{P}}}Private_DisplayActivateKeyPopUp({{{P}}}K_State _State, Boolean _Display) {
	declare {{{P}}}K_State State = _State;

	State.ActivateKeyPopUpDisplayed = _Display;
	{{{PopUpMultiChoice::P}}}Display(This, State.Controls.PopUp_ActivateKey, State.ActivateKeyPopUpDisplayed, False);
	{{{PopUpMultiChoice::P}}}FocusFirstChoice(This, State.Controls.PopUp_ActivateKey, True);
	{{{P}}}Private_UpdateNavigationLock(State);
	State = {{{P}}}Private_UpdateControllerInfo(State);

	return State;
}

// Select which category of settings must be displayed in the scroll
{{{P}}}K_State {{{P}}}Private_SetDisplayedCategory(
	{{{P}}}K_State _State,
	Integer _Category,
	Boolean _CheckDirtySettingsBefore,
	Boolean _ResetLastFocusedSettingKey,
	Boolean _ScrollToAndFocusElement
) {
	declare {{{P}}}K_State State = _State;
	declare Integer CurrentTab = {{{NavigationTabs::P}}}GetCurrentTab(State.Controls.NavigationTabs_Categories);

	if ({{{P}}}C_DiscardSettingsOnTabChange && _CheckDirtySettingsBefore && State.SettingsAreDirty) {
		State = {{{P}}}Private_DisplayDiscardChangesPopUp(
			State,
			True,
			{{{P}}}K_AfterDiscardPopUp {
				Action = {{{P}}}C_ActionAfterDiscardPopUp_GoToCategory,
				DisplayedCategory = _Category
			}
		);
	} else {
		if (State.ScrollSettingIds.existskey(_Category)) {
			// Reset or save focused setting before changing category
			if (_ResetLastFocusedSettingKey) {
				State.LastFocusedSettingKey = [];
			} else {
				State.LastFocusedSettingKey[State.DisplayedCategory] = {{{Scroll::P}}}GetFocusedElementKey(State.Controls.Scroll_Settings);
			}

			State.DisplayedCategory = _Category;
			declare Integer[] CategorySettingIds = State.ScrollSettingIds[State.DisplayedCategory];
			if (State.DisplayedCategory == {{{P}}}C_SettingCategory_Controls) {
				State.BindingsKeyShift = State.ScrollSettingIds[{{{P}}}C_SettingCategory_Controls].count;
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Settings, State.BindingsKeyShift + State.Bindings.count);
			} else {
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Settings, CategorySettingIds.count);
			}

			// Lock section titles
			{{{Scroll::P}}}UnlockAllElements(State.Controls.Scroll_Settings);
			declare Integer[] KeysToLock;
			foreach (Key => SettingId in CategorySettingIds) {
				declare {{{P}}}K_Setting Setting = State.Settings.get(SettingId, {{{P}}}C_Setting_Null);
				if (
					Setting.Type == {{{P}}}C_SettingType_Section ||
					!{{{P}}}Private_SettingHasStatus(State, Setting, [{{{P}}}C_SettingStatus_Enabled, {{{P}}}C_SettingStatus_MissingPermission])
				) {
					KeysToLock.add(Key);
				}
			}
			{{{Scroll::P}}}LockElements(This, State.Controls.Scroll_Settings, KeysToLock);

			// Try to restore previously focused setting in this category
			if (_ScrollToAndFocusElement) {
				if (
					State.LastFocusedSettingKey.existskey(State.DisplayedCategory) &&
					State.LastFocusedSettingKey[State.DisplayedCategory] != {{{P}}}C_SettingKey_Null
				) {
					{{{Scroll::P}}}ScrollToElement(This, State.Controls.Scroll_Settings, State.LastFocusedSettingKey[State.DisplayedCategory], True);
				} else {
					for (Key, 0, CategorySettingIds.count - 1) {
						if (!KeysToLock.exists(Key)) {
							{{{Scroll::P}}}ScrollToElement(This, State.Controls.Scroll_Settings, Key, True);
							break;
						}
					}
				}
			}
		} else {
			State.DisplayedCategory = {{{P}}}C_SettingCategory_Null;
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Settings, 0);
		}

		// Lock and focus another control if the scroll is empty
		declare Integer ElementsTotal = {{{Scroll::P}}}GetElementsTotal(State.Controls.Scroll_Settings);
		{{{Navigation::P}}}Lock(State.Controls.Scroll_Settings, ElementsTotal <= 0);
		if ({{{Navigation::P}}}IsLocked(State.Controls.Scroll_Settings)) {
			declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
			if (FocusedControl == State.Controls.Scroll_Settings) {
				if (State.LastBottomButtonFocused != Null && !{{{Navigation::P}}}IsLocked(State.LastBottomButtonFocused)) {
					State = {{{P}}}Private_Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}"), State.LastBottomButtonFocused);
				} else if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
					State = {{{P}}}Private_Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}"), State.Controls.Button_Back);
				}
			}
		}
	}

	if (State.DisplayedCategory != CurrentTab) {
		{{{NavigationTabs::P}}}UpdateCurrentTab(This, State.Controls.NavigationTabs_Categories, State.DisplayedCategory, False);
	}

	// Text to speech context
	// The previously focused tab ID is used to avoid reading the entire TTS context when a setting is updated
	if (State.PreviouslyFocusedTabId != CurrentTab) {
		State.PreviouslyFocusedTabId = CurrentTab;
		ParentApp.TTS_Context_Change({{{P}}}G_TTSContextIdent_Tabs, {{{NavigationTabs::P}}}GetCurrentTabLabel(State.Controls.NavigationTabs_Categories));
		ParentApp.TTS_Context_Read({{{P}}}C_TTSContextLevel_Page);
	}

	return State;
}
{{{P}}}K_State {{{P}}}Private_SetDisplayedCategory({{{P}}}K_State _State, Integer _Category, Boolean _CheckDirtySettingsBefore, Boolean _ResetLastFocusedSettingKey) {
	return {{{P}}}Private_SetDisplayedCategory(_State, _Category, _CheckDirtySettingsBefore, _ResetLastFocusedSettingKey, True);
}
{{{P}}}K_State {{{P}}}Private_SetDisplayedCategory({{{P}}}K_State _State, Integer _Category, Boolean _CheckDirtySettingsBefore) {
	return {{{P}}}Private_SetDisplayedCategory(_State, _Category, _CheckDirtySettingsBefore, False);
}
{{{P}}}K_State {{{P}}}Private_SetDisplayedCategory({{{P}}}K_State _State, Integer _Category) {
	return {{{P}}}Private_SetDisplayedCategory(_State, _Category, False);
}
{{{P}}}K_State {{{P}}}Private_DisplayCategory({{{P}}}K_State _State) {
	return {{{P}}}Private_SetDisplayedCategory(_State, _State.DisplayedCategory);
}

// Update the user info displayed in the player card
Void {{{P}}}Private_DisplayUserInfo({{{P}}}K_State _State, CUser _User) {
	if (_User == Null || _State.IsPlayerCardForcedHide) {
		_State.Controls.Frame_PlayerCard.Visible = False;
	} else {
		if (_User.CountryFlagUrl == "") {
			_State.Controls.Quad_PlayerFlag.ImageUrl = "file://ZoneFlags/Path/World";
		} else {
			_State.Controls.Quad_PlayerFlag.ImageUrl = _User.CountryFlagUrl;
		}
		{{{PlayerName::P}}}SetUser(This, _State.Controls.PlayerName_Name, _User, True);
		declare Text[] Zones = {{{P}}}TL::Split("|", _User.ZonePath);
		if (Zones.count > 0) {
			_State.Controls.Label_PlayerZone.Value = {{{P}}}C_Zone_Translations.get(Zones[Zones.count-1], {{{P}}}TL::GetTranslatedText(Zones[Zones.count-1]));
			_State.Controls.Label_PlayerZone.Visible = True;
			{{{P}}}Tools::FitLabelValue(_State.Controls.Label_PlayerZone, 1., 0.5, 0.1);
		} else {
			_State.Controls.Label_PlayerZone.Visible = False;
		}
		_State.Controls.Frame_PlayerCard.Visible = True;
	}
}

// Select the vehicle for which we edit the analog settings
{{{P}}}K_State {{{P}}}Private_SetControlVehicleModel({{{P}}}K_State _State, Text _ModelName) {
	declare {{{P}}}K_State State = _State;

	if (State.ControlVehicleModels.exists(_ModelName)) {
		State.ControlVehicleModel = _ModelName;
	}

	return State;
}

Text[] {{{P}}}Private_SplitBinds(Text _Binds) {
	declare Text[] Binds;
	declare Text[] RawBinds = {{{P}}}TL::Split(",", _Binds);
	foreach (Bind in RawBinds) {
		declare Text CleanBind = {{{P}}}TL::Trim(Bind);
		if (CleanBind == "") {
			// The `,` is a valid key bind, but it's also the separator between the binds
			// If we get an empty bind, it means that at the origin if was a bind on `,`
			Binds.add(",");
		} else {
			Binds.add(CleanBind);
		}
	}
	return Binds;
}

// Select the controller for which we edit the bindings
{{{P}}}K_State {{{P}}}Private_SetControlControllerId({{{P}}}K_State _State, Integer _ControllerId) {
	declare {{{P}}}K_State State = _State;

	State.Bindings = [];

	// Find controller
	declare CInputPad ActivePad;
	foreach (Pad in Input.Pads) {
		if (Pad.ControllerId == _ControllerId) {
			ActivePad <=> Pad;
			break;
		}
	}

	// Load bindings
	if (ActivePad != Null) {
		State.ControlControllerId = ActivePad.ControllerId;

		ParentApp.ManiaPlanet.InputBindings_UpdateList(CManiaPlanet::EInputsListFilter::All, ActivePad);
		declare Boolean CanGetPadButtonIcon = {{{P}}}ButtonIcon::CanGetPadButtonIcon(ActivePad);

		foreach (Key => Binding in ParentApp.ManiaPlanet.InputBindings_Bindings) {
			declare Text[] Binds = {{{P}}}Private_SplitBinds(Binding);
			declare Text[] ButtonIcons;
			if (CanGetPadButtonIcon) {
				declare Text[] RawBinds = {{{P}}}Private_SplitBinds(ParentApp.ManiaPlanet.InputBindings_BindingsRaw[Key]); //< `InputBindings_Bindings` and `InputBindings_BindingsRaw` are always synchronized by the C++, no risk of out of bound access
				foreach (Bind in RawBinds) {
					ButtonIcons.add({{{P}}}ButtonIcon::GetPadButtonIcon(System, ActivePad, Bind));
				}
			}
			State.Bindings.add({{{P}}}K_Binding {
				ActionIndex = Key,
				ActionName = ParentApp.ManiaPlanet.InputBindings_ActionNames[Key], //< `InputBindings_Bindings` and `InputBindings_ActionNames` are always synchronized by the C++, no risk of out of bound access
				Binds = Binds,
				ButtonIcons = ButtonIcons
			});
		}
	}

	return State;
}

// Validate trigram
Text {{{P}}}Private_ValidateTrigram(Text _Trigram) {
	return {{{P}}}TL::ToUpperCase({{{P}}}TL::SubText({{{P}}}TL::Trim(_Trigram), 0, 3));
}

// Validate window width
Integer {{{P}}}Private_ValidateWindowResolutionX(Integer _ResolutionX) {
	return {{{P}}}ML::Max(256, _ResolutionX);
}

// Validate window height
Integer {{{P}}}Private_ValidateWindowResolutionY(Integer _ResolutionY) {
	return {{{P}}}ML::Max(128, _ResolutionY);
}

// Validate automatic resolution min FPS
Integer {{{P}}}Private_ValidateAutomaticMinFPS(Integer _MinFPS) {
	return {{{P}}}ML::Max(0, _MinFPS);
}

// Validate FPS limit
Integer {{{P}}}Private_ValidateLimitFPS(Integer _LimitFPS) {
	return {{{P}}}ML::Max(0, _LimitFPS);
}

// Validate network speed
Integer {{{P}}}Private_ValidateNetworkSpeed(Integer _Speed) {
	return {{{P}}}ML::Max(0, _Speed);
}

// Validated audio volume
Real {{{P}}}Private_ValidateAudioVolume(Real _Volume) {
	return {{{P}}}ML::Clamp(_Volume, -40., 0.);
}

// Validate the value the user entered in the text field
Text {{{P}}}Private_ValidateTextFieldValue(CMlFrame _TextField_Value, Integer _SettingId) {
	declare Text Value = {{{TextField::P}}}GetValue(_TextField_Value);
	declare Text ValidatedValue = Value;

	switch (_SettingId) {
		case {{{P}}}C_SettingId_ProfileTrigram: {
			ValidatedValue = {{{P}}}Private_ValidateTrigram(ValidatedValue);
		}
		case {{{P}}}C_SettingId_ProfileActivateKey: {
			ValidatedValue = {{{P}}}TL::ToUpperCase(ValidatedValue);
		}
		case {{{P}}}C_SettingId_VideoWindowResolutionX: {
			ValidatedValue = ""^{{{P}}}Private_ValidateWindowResolutionX({{{P}}}TL::ToInteger(ValidatedValue));
		}
		case {{{P}}}C_SettingId_VideoWindowResolutionY: {
			ValidatedValue = ""^{{{P}}}Private_ValidateWindowResolutionY({{{P}}}TL::ToInteger(ValidatedValue));
		}
		case {{{P}}}C_SettingId_VideoAutomaticMinFPS: {
			ValidatedValue = ""^{{{P}}}Private_ValidateAutomaticMinFPS({{{P}}}TL::ToInteger(ValidatedValue));
		}
		case {{{P}}}C_SettingId_VideoLimitFPS: {
			ValidatedValue = ""^{{{P}}}Private_ValidateLimitFPS({{{P}}}TL::ToInteger(ValidatedValue));
		}
		case {{{P}}}C_SettingId_SystemNetworkSpeedDownload: {
			ValidatedValue = ""^{{{P}}}Private_ValidateNetworkSpeed({{{P}}}TL::ToInteger(ValidatedValue));
		}
		case {{{P}}}C_SettingId_SystemNetworkSpeedUpload: {
			ValidatedValue = ""^{{{P}}}Private_ValidateNetworkSpeed({{{P}}}TL::ToInteger(ValidatedValue));
		}
	}
	
	return ValidatedValue;
}

// Check if any setting is dirty and update the global flag accordingly
{{{P}}}K_State {{{P}}}Private_UpdateSettingsAreDirty({{{P}}}K_State _State) {
	declare {{{P}}}K_State State = _State;

	declare Boolean SettingsWereDirty = State.SettingsAreDirty;
	State.SettingsAreDirty = False;
	State.GameNeedRestart = False;

	foreach (Setting in State.Settings) {
		if (Setting.IsDirty && !Setting.IgnoreDirty) {
			State.SettingsAreDirty = True;
			if (Setting.NeedRestart) {
				State.GameNeedRestart = True;
			}
		}
		// Once we found a dirty setting that need a restart we can stop the loop
		if (State.SettingsAreDirty && State.GameNeedRestart) break;
	}

	// If there are no dirty settings that require a game restart
	// Check if any applied settings are still pending a game restart
	if (!State.GameNeedRestart) {
		State.GameNeedRestart = (
			ParentApp.ManiaPlanet.DisplaySettings != Null && (
				ParentApp.ManiaPlanet.DisplaySettings.Device_NextStart != ParentApp.ManiaPlanet.DisplaySettings.Device_Current ||
				ParentApp.ManiaPlanet.DisplaySettings.Customize_NextStart != ParentApp.ManiaPlanet.DisplaySettings.Customize_Current ||
				ParentApp.ManiaPlanet.DisplaySettings.Preset_NextStart != ParentApp.ManiaPlanet.DisplaySettings.Preset_Current ||
				ParentApp.ManiaPlanet.DisplaySettings.ShaderQuality_NextStart != ParentApp.ManiaPlanet.DisplaySettings.ShaderQuality_Current ||
				ParentApp.ManiaPlanet.DisplaySettings.Shadows_NextStart != ParentApp.ManiaPlanet.DisplaySettings.Shadows_Current ||
				ParentApp.ManiaPlanet.DisplaySettings.TexturesQuality_NextStart != ParentApp.ManiaPlanet.DisplaySettings.TexturesQuality_Current ||
				ParentApp.ManiaPlanet.DisplaySettings.AgpUseFactor_NextStart != ParentApp.ManiaPlanet.DisplaySettings.AgpUseFactor_Current
			)
		);
	}

	if (State.SettingsAreDirty != SettingsWereDirty) {
		AnimMgr.Flush(State.Controls.Quad_PendingChanges);
		if (State.SettingsAreDirty) {
			State.Controls.Quad_PendingChanges.Opacity = 0.;
			State.Controls.Quad_PendingChanges.RelativeScale = 1.5;
			AnimMgr.Add(State.Controls.Quad_PendingChanges, "<a opacity=\"1\" scale=\"1\" hidden=\"0\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Quad_PendingChanges, "<a opacity=\"0\" scale=\"1\" hidden=\"1\" />", 125, CAnimManager::EAnimManagerEasing::Linear);
		}
	}
	State.Controls.Label_RestartRequired.Visible = State.GameNeedRestart;

	return State;
}

// Update the list of settings to display
{{{P}}}K_State {{{P}}}Private_UpdateSettingsList({{{P}}}K_State _State) {
	declare {{{P}}}K_State State = _State;

	State.ScrollSettingIds = [];

	declare Text[Integer] Categories;
	declare Integer[Integer] SettingsNbInSection;
	declare Int2[Integer] CurrentSection;
	foreach (ReadOnlySetting in State.Settings) {
		if ({{{P}}}Private_GetSettingStatus(State, ReadOnlySetting) == {{{P}}}C_SettingStatus_Hidden) continue;

		declare {{{P}}}K_Setting Setting = ReadOnlySetting;

		// Find all categories to display in the `NavigationTabs`
		if (
			!Categories.existskey(Setting.Category) &&
			{{{P}}}C_SettingCategories.existskey(Setting.Category)
		) {
			Categories[Setting.Category] = {{{P}}}C_SettingCategories[Setting.Category];
		}

		// Find and categorize available settings
		if (State.ScrollSettingIds.existskey(Setting.Category)) {
			State.ScrollSettingIds[Setting.Category].add(Setting.Id);
		} else {
			State.ScrollSettingIds[Setting.Category] = [Setting.Id];
		}

		// Find the section in which the setting belong
		if (Setting.Type == {{{P}}}C_SettingType_Section) {
			CurrentSection[Setting.Category] = <Setting.Id, State.ScrollSettingIds[Setting.Category].count - 1>;
			SettingsNbInSection[Setting.Id] = 0;
		}
		declare Int2 SectionIdKey = CurrentSection.get(Setting.Category, <{{{P}}}C_SettingId_NullId, {{{P}}}C_SettingKey_Null>);
		Setting.SectionId = SectionIdKey.X;
		Setting.SectionKey = SectionIdKey.Y;
		SettingsNbInSection[SectionIdKey.X] += 1;
		
		State.Settings[Setting.Id] = Setting;
	}

	// Remove empty sections
	foreach (SectionSettingId => SettingsNb in SettingsNbInSection) {
		if (SettingsNb <= 1 && SectionSettingId != {{{P}}}C_SettingId_ControlSectionBindings) {
			foreach (CategoryId => SettingIds in State.ScrollSettingIds) {
				State.ScrollSettingIds[CategoryId].remove(SectionSettingId);
			}
		}
	}

	// Disable category if it is empty
	declare Integer[][Integer] TmpScrollSettingIds = State.ScrollSettingIds;
	foreach (CategoryId => SettingIds in TmpScrollSettingIds) {
		if (SettingIds.count <= 0) {
			Categories.removekey(CategoryId);
			State.ScrollSettingIds.removekey(CategoryId);
		}
	}

	// Find a default category
	State.DefaultCategory = {{{P}}}C_SettingCategory_Null;
	foreach (CategoryId => CategoryTitle in Categories) {
		State.DefaultCategory = CategoryId;
		break;
	}

	// Display all settings categories in the `NavigationTabs`
	{{{NavigationTabs::P}}}SetTabs(This, State.Controls.NavigationTabs_Categories, Categories, False);
	{{{NavigationTabs::P}}}RedrawNavigationTabs(This, State.Controls.NavigationTabs_Categories, False);

	if (State.DisplayedCategory == {{{P}}}C_SettingCategory_Null || !Categories.existskey(State.DisplayedCategory)) {
		State = {{{P}}}Private_SetDisplayedCategory(State, State.DefaultCategory);
	} else {
		State = {{{P}}}Private_DisplayCategory(State);
	}

	return State;
}

// Show or hide the settings that depends on the video customize setting to be displayed
{{{P}}}K_State {{{P}}}Private_SetVisibilityOfSettingsThatHaveDisplaySettingsPreset({{{P}}}K_State _State, Boolean _Visible) {
	declare {{{P}}}K_State State = _State;

	State.ShowSettingsThatHaveDisplaySettingsPreset = _Visible;
	// When disabling the video settings customization, scroll to the bottom of the scroll
	// beforehand to avoid an unpleasant movement in the scroll
	if (!State.ShowSettingsThatHaveDisplaySettingsPreset) {
		{{{Scroll::P}}}ScrollToFooter(This, State.Controls.Scroll_Settings);
	}
	State = {{{P}}}Private_UpdateSettingsList(State);

	return State;
}

// Update the values of the settings in the scroll to reflect the values of the selected preset
{{{P}}}K_State {{{P}}}Private_UpdateDisplaySettingsPresetInScroll({{{P}}}K_State _State, CDisplaySettings::EPreset _Preset) {
	if (!_State.DisplaySettingsPresets.existskey(_Preset)) return _State;

	declare {{{P}}}K_State State = _State;
	declare {{{P}}}K_DisplaySettingsPreset DisplaySettingsPreset = State.DisplaySettingsPresets[_Preset];

	if (State.Settings.existskey({{{P}}}C_SettingId_VideoShaderQuality)) {
		declare {{{P}}}K_Setting UpdatedSetting = State.Settings[{{{P}}}C_SettingId_VideoShaderQuality];
		if (UpdatedSetting.List.ValuesShaderQuality.exists(DisplaySettingsPreset.ShaderQuality_NextStart)) {
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesShaderQuality.keyof(DisplaySettingsPreset.ShaderQuality_NextStart);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[{{{P}}}C_SettingId_VideoShaderQuality] = UpdatedSetting;
		}
	}

	if (State.Settings.existskey({{{P}}}C_SettingId_VideoTexturesQuality)) {
		declare {{{P}}}K_Setting UpdatedSetting = State.Settings[{{{P}}}C_SettingId_VideoTexturesQuality];
		if (UpdatedSetting.List.ValuesInteger.exists(DisplaySettingsPreset.TexturesQuality_NextStart)) {
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesInteger.keyof(DisplaySettingsPreset.TexturesQuality_NextStart);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[{{{P}}}C_SettingId_VideoTexturesQuality] = UpdatedSetting;
		}
	}
	
	if (State.Settings.existskey({{{P}}}C_SettingId_VideoShadows)) {
		declare {{{P}}}K_Setting UpdatedSetting = State.Settings[{{{P}}}C_SettingId_VideoShadows];
		if (UpdatedSetting.List.ValuesShadows.exists(DisplaySettingsPreset.Shadows_NextStart)) {
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesShadows.keyof(DisplaySettingsPreset.Shadows_NextStart);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[{{{P}}}C_SettingId_VideoShadows] = UpdatedSetting;
		}
	}

	if (State.Settings.existskey({{{P}}}C_SettingId_VideoVehicleReflect)) {
		declare {{{P}}}K_Setting UpdatedSetting = State.Settings[{{{P}}}C_SettingId_VideoVehicleReflect];
		if (UpdatedSetting.List.ValuesVehicleReflect.exists(DisplaySettingsPreset.VehicleReflect)) {
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesVehicleReflect.keyof(DisplaySettingsPreset.VehicleReflect);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[{{{P}}}C_SettingId_VideoVehicleReflect] = UpdatedSetting;
		}
	}

	if (State.Settings.existskey({{{P}}}C_SettingId_VideoWaterReflect)) {
		declare {{{P}}}K_Setting UpdatedSetting = State.Settings[{{{P}}}C_SettingId_VideoWaterReflect];
		if (UpdatedSetting.List.ValuesWaterReflect.exists(DisplaySettingsPreset.WaterReflect)) {
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesWaterReflect.keyof(DisplaySettingsPreset.WaterReflect);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[{{{P}}}C_SettingId_VideoWaterReflect] = UpdatedSetting;
		}
	}

	if (State.Settings.existskey({{{P}}}C_SettingId_VideoEverywhereReflect)) {
		declare {{{P}}}K_Setting UpdatedSetting = State.Settings[{{{P}}}C_SettingId_VideoEverywhereReflect];
		UpdatedSetting.New.ValueBoolean = (DisplaySettingsPreset.EverywhereReflect == CDisplaySettings::EEverywhereReflect::Enabled);
		UpdatedSetting.IsDirty = UpdatedSetting.New.ValueBoolean != UpdatedSetting.Old.ValueBoolean;
		State.Settings[{{{P}}}C_SettingId_VideoEverywhereReflect] = UpdatedSetting;
	}

	if (State.Settings.existskey({{{P}}}C_SettingId_VideoBloomHDR)) {
		declare {{{P}}}K_Setting UpdatedSetting = State.Settings[{{{P}}}C_SettingId_VideoBloomHDR];
		if (UpdatedSetting.List.ValuesFxBloomHdr.exists(DisplaySettingsPreset.FxBloomHdr)) {
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesFxBloomHdr.keyof(DisplaySettingsPreset.FxBloomHdr);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[{{{P}}}C_SettingId_VideoBloomHDR] = UpdatedSetting;
		}
	}

	if (State.Settings.existskey({{{P}}}C_SettingId_VideoMotionBlur)) {
		declare {{{P}}}K_Setting UpdatedSetting = State.Settings[{{{P}}}C_SettingId_VideoMotionBlur];
		UpdatedSetting.New.ValueBoolean = (DisplaySettingsPreset.FxMotionBlur == CDisplaySettings::EFxMotionBlur::Enabled);
		UpdatedSetting.IsDirty = UpdatedSetting.New.ValueBoolean != UpdatedSetting.Old.ValueBoolean;
		State.Settings[{{{P}}}C_SettingId_VideoMotionBlur] = UpdatedSetting;
	}

	if (State.Settings.existskey({{{P}}}C_SettingId_VideoSlowMotionBlur)) {
		declare {{{P}}}K_Setting UpdatedSetting = State.Settings[{{{P}}}C_SettingId_VideoSlowMotionBlur];
		UpdatedSetting.New.ValueBoolean = (DisplaySettingsPreset.FxBlur == CDisplaySettings::EFxBlur::Enabled);
		UpdatedSetting.IsDirty = UpdatedSetting.New.ValueBoolean != UpdatedSetting.Old.ValueBoolean;
		State.Settings[{{{P}}}C_SettingId_VideoSlowMotionBlur] = UpdatedSetting;
	}

	State = {{{P}}}Private_UpdateSettingsAreDirty(State);

	// Update the display of the settings in the scroll to reflect the new settings values
	declare CMlFrame[Integer] ElementsVisible = {{{Scroll::P}}}GetElementsVisible(State.Controls.Scroll_Settings);
	foreach (Key => Frame_Element in ElementsVisible) {
		{{{P}}}Private_DisplaySettingLine(State, Key, Frame_Element);
	}

	return State;
}

// Update the value of a setting in the video settings custom preset
{{{P}}}K_State {{{P}}}Private_UpdateDisplaySettingsPresetCustom({{{P}}}K_State _State, {{{P}}}K_Setting _Setting) {
	if (
		!_Setting.HasDisplaySettingsPreset ||
		!_State.DisplaySettingsPresets.existskey(CDisplaySettings::EPreset::None)
	) return _State;
	
	declare {{{P}}}K_State State = _State;

	switch (_Setting.Id) {
		case {{{P}}}C_SettingId_VideoShaderQuality: {
			if (_Setting.List.ValuesShaderQuality.existskey(_Setting.New.ValueInteger)) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].ShaderQuality_NextStart = _Setting.List.ValuesShaderQuality[_Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoTexturesQuality: {
			if (_Setting.List.ValuesInteger.existskey(_Setting.New.ValueInteger)) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].TexturesQuality_NextStart = _Setting.List.ValuesInteger[_Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoShadows: {
			if (_Setting.List.ValuesShadows.existskey(_Setting.New.ValueInteger)) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].Shadows_NextStart = _Setting.List.ValuesShadows[_Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoVehicleReflect: {
			if (_Setting.List.ValuesVehicleReflect.existskey(_Setting.New.ValueInteger)) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].VehicleReflect = _Setting.List.ValuesVehicleReflect[_Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoWaterReflect: {
			if (_Setting.List.ValuesWaterReflect.existskey(_Setting.New.ValueInteger)) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].WaterReflect = _Setting.List.ValuesWaterReflect[_Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoEverywhereReflect: {
			if (_Setting.New.ValueBoolean) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].EverywhereReflect = CDisplaySettings::EEverywhereReflect::Enabled;
			} else {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].EverywhereReflect = CDisplaySettings::EEverywhereReflect::None;
			}
		}
		case {{{P}}}C_SettingId_VideoBloomHDR: {
			if (_Setting.List.ValuesFxBloomHdr.existskey(_Setting.New.ValueInteger)) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].FxBloomHdr = _Setting.List.ValuesFxBloomHdr[_Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoMotionBlur: {
			if (_Setting.New.ValueBoolean) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].FxMotionBlur = CDisplaySettings::EFxMotionBlur::Enabled;
			} else {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].FxMotionBlur = CDisplaySettings::EFxMotionBlur::None;
			}
		}
		case {{{P}}}C_SettingId_VideoSlowMotionBlur: {
			if (_Setting.New.ValueBoolean) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].FxBlur = CDisplaySettings::EFxBlur::Enabled;
			} else {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].FxBlur = CDisplaySettings::EFxBlur::None;
			}
		}
	}

	return State;
}

// Select the video settings custom preset in the list of available preset
{{{P}}}K_State {{{P}}}Private_SelectDisplaySettingsPresetCustom({{{P}}}K_State _State) {
	declare {{{P}}}K_State State = _State;

	if (State.Settings.existskey({{{P}}}C_SettingId_VideoPreset)) {
		declare {{{P}}}K_Setting UpdatedSetting = State.Settings[{{{P}}}C_SettingId_VideoPreset];

		// Proceed only if the custom preset is not already selected
		if (
			UpdatedSetting.List.ValuesPreset.existskey(UpdatedSetting.New.ValueInteger) &&
			UpdatedSetting.List.ValuesPreset[UpdatedSetting.New.ValueInteger] != CDisplaySettings::EPreset::None &&
			UpdatedSetting.List.ValuesPreset.exists(CDisplaySettings::EPreset::None)
		) {
			// Select the custom preset
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesPreset.keyof(CDisplaySettings::EPreset::None);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[{{{P}}}C_SettingId_VideoPreset] = UpdatedSetting;

			// Update the display of the preset setting in the scroll
			if (
				State.DisplayedCategory == UpdatedSetting.Category &&
				State.ScrollSettingIds.existskey(State.DisplayedCategory) &&
				State.ScrollSettingIds[State.DisplayedCategory].exists({{{P}}}C_SettingId_VideoPreset)
			) {
				declare Integer SettingKey = State.ScrollSettingIds[State.DisplayedCategory].keyof({{{P}}}C_SettingId_VideoPreset);
				declare CMlFrame[Integer] ElementsVisible = {{{Scroll::P}}}GetElementsVisible(State.Controls.Scroll_Settings);
				if (ElementsVisible.existskey(SettingKey)) {
					{{{P}}}Private_DisplaySettingLine(State, SettingKey, ElementsVisible[SettingKey]);
				}
			}

			// When editing any preset other than the custom preset
			// We must update the value of all settings in the custom preset
			// eg: the user select the "very fast" preset and edit one setting
			// then the edited setting and all the other settings in the preset
			// must be used as the new custom preset
			foreach (Setting in State.Settings) {
				State = {{{P}}}Private_UpdateDisplaySettingsPresetCustom(State, Setting);
			}
		}
	}

	return State;
}

// Show or hide the settings that need the track editor quick start to be displayed
{{{P}}}K_State {{{P}}}Private_SetVisibilityOfSettingsThatNeedTrackEditorQuickStart({{{P}}}K_State _State, Boolean _Visible) {
	declare {{{P}}}K_State State = _State;

	State.TrackEditorQuickStartEnabled = _Visible;
	State = {{{P}}}Private_DisplayCategory(State);

	return State;
}

// Update the values of the map editor difficulty setting in the scroll to reflect the values of the selected map editor controller
{{{P}}}K_State {{{P}}}Private_UpdateDisplaySettingsMapEditorDifficultyInScroll({{{P}}}K_State _State, Boolean _IsController) {
	declare {{{P}}}K_State State = _State;

	if (State.Settings.existskey({{{P}}}C_SettingId_SystemTrackEditorQuickStartDifficulty)) {
		declare {{{P}}}K_Setting UpdatedSetting = State.Settings[{{{P}}}C_SettingId_SystemTrackEditorQuickStartDifficulty];
		declare Text[] OldLabels = UpdatedSetting.List.Labels;

		UpdatedSetting.List.Labels = [_("|MapEditorDifficulty|Simple"), _("|MapEditorDifficulty|Advanced")];
		UpdatedSetting.List.MapEditorDifficulty = [CUserV2Profile::EMapEditorDifficulty::Simple, CUserV2Profile::EMapEditorDifficulty::Advanced];
		if (_IsController || {{{P}}}Platform::IsFromFirstParty(System)) {
			UpdatedSetting.List.Labels.add(_("|MapEditorDifficulty|Expert"));
			UpdatedSetting.List.MapEditorDifficulty.add(CUserV2Profile::EMapEditorDifficulty::Expert);
		}

		if (OldLabels.count != UpdatedSetting.List.Labels.count) {
			if (!UpdatedSetting.List.MapEditorDifficulty.existskey(UpdatedSetting.New.ValueInteger)) {
				UpdatedSetting.New.ValueInteger = UpdatedSetting.List.MapEditorDifficulty.count - 1;
				UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			}
			State.Settings[{{{P}}}C_SettingId_SystemTrackEditorQuickStartDifficulty] = UpdatedSetting;
		}
	}

	State = {{{P}}}Private_UpdateSettingsAreDirty(State);

	// Update the display of the settings in the scroll to reflect the new settings values
	declare CMlFrame[Integer] ElementsVisible = {{{Scroll::P}}}GetElementsVisible(State.Controls.Scroll_Settings);
	foreach (Key => Frame_Element in ElementsVisible) {
		{{{P}}}Private_DisplaySettingLine(State, Key, Frame_Element);
	}

	return State;
}

// Called when a setting value is updated
{{{P}}}K_State {{{P}}}Private_NotifySettingUpdate({{{P}}}K_State _State, Integer _SettingId) {
	declare {{{P}}}K_State State = _State;

	switch (_SettingId) {
		case {{{P}}}C_SettingId_ControlAnalogVehicleSelection: {
			if (State.Settings.existskey({{{P}}}C_SettingId_ControlAnalogVehicleSelection)) {
				declare {{{P}}}K_Setting Setting = State.Settings[{{{P}}}C_SettingId_ControlAnalogVehicleSelection];
				if (Setting.List.ValuesText.existskey(Setting.New.ValueInteger)) {
					State = {{{P}}}Private_SetControlVehicleModel(State, Setting.List.ValuesText[Setting.New.ValueInteger]);
					State = {{{P}}}Private_DisplayCategory(State);
				}
			}
		}
		case {{{P}}}C_SettingId_ControlDevice: {
			if (State.Settings.existskey({{{P}}}C_SettingId_ControlDevice)) {
				declare {{{P}}}K_Setting Setting = State.Settings[{{{P}}}C_SettingId_ControlDevice];
				if (Setting.List.ValuesInteger.existskey(Setting.New.ValueInteger)) {
					State = {{{P}}}Private_SetControlControllerId(State, Setting.List.ValuesInteger[Setting.New.ValueInteger]);
					State = {{{P}}}Private_DisplayCategory(State);
				}
			}
		}
		case {{{P}}}C_SettingId_SystemNetworkSpeed: {
			State = {{{P}}}Private_DisplayCategory(State);
		}
		case {{{P}}}C_SettingId_VideoCanSelectPreset: {
			State = {{{P}}}Private_SetVisibilityOfSettingsThatHaveDisplaySettingsPreset(
				State,
				State.Settings.get({{{P}}}C_SettingId_VideoCanSelectPreset, {{{P}}}C_Setting_Null).New.ValueBoolean
			);
		}
		case {{{P}}}C_SettingId_VideoPreset: {
			if (State.Settings.existskey({{{P}}}C_SettingId_VideoPreset)) {
				declare {{{P}}}K_Setting Setting = State.Settings[{{{P}}}C_SettingId_VideoPreset];
				if (Setting.List.ValuesPreset.existskey(Setting.New.ValueInteger)) {
					State = {{{P}}}Private_UpdateDisplaySettingsPresetInScroll(State, Setting.List.ValuesPreset[Setting.New.ValueInteger]);
				}
			}
		}
		case {{{P}}}C_SettingId_VideoOutputScale: {
			if (ParentApp.ManiaPlanet.DisplaySettings != Null && State.Settings.existskey({{{P}}}C_SettingId_VideoOutputScale)) {
				ParentApp.ManiaPlanet.DisplaySettings.ConsoleOutputScale = State.Settings[{{{P}}}C_SettingId_VideoOutputScale].New.ValueReal;
				ParentApp.ManiaPlanet.DisplaySettings_Apply();
			}
		}
		case {{{P}}}C_SettingId_SystemEnableTrackEditorQuickStart: {
			if (State.Settings.existskey({{{P}}}C_SettingId_SystemEnableTrackEditorQuickStart)) {
				State = {{{P}}}Private_SetVisibilityOfSettingsThatNeedTrackEditorQuickStart(
					State,
					State.Settings.get({{{P}}}C_SettingId_SystemEnableTrackEditorQuickStart, {{{P}}}C_Setting_Null).New.ValueBoolean
				);
			}
		}
		case {{{P}}}C_SettingId_SystemTrackEditorQuickStartUseGamepadController: {
			if (State.Settings.existskey({{{P}}}C_SettingId_SystemTrackEditorQuickStartUseGamepadController)) {
				declare {{{P}}}K_Setting Setting = State.Settings[{{{P}}}C_SettingId_SystemTrackEditorQuickStartUseGamepadController];
				if (Setting.List.ValuesBoolean.existskey(Setting.New.ValueInteger)) {
					State = {{{P}}}Private_UpdateDisplaySettingsMapEditorDifficultyInScroll(State, Setting.List.ValuesBoolean[Setting.New.ValueInteger]);
				}
			}
		}
		case {{{P}}}C_SettingId_SystemNetworkCrossPlay: {
			State.IsCrossPlayActive = State.Settings.get({{{P}}}C_SettingId_SystemNetworkCrossPlay, {{{P}}}C_Setting_Null).New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SoundVoiceChatVoiceDetectionMode: {
			if (ParentApp.ManiaPlanet.AudioSettings != Null && State.Settings.existskey({{{P}}}C_SettingId_SoundVoiceChatVoiceDetectionMode)) {
				declare {{{P}}}K_Setting Setting = State.Settings[{{{P}}}C_SettingId_SoundVoiceChatVoiceDetectionMode];
				if (Setting.List.ValuesVoiceDetectionMode.existskey(Setting.New.ValueInteger)) {
					State.VoiceChatVoiceDetectionManualSensitivity = Setting.New.ValueInteger == Setting.List.ValuesVoiceDetectionMode.keyof(NSystemConfig::EVoiceDetectionMode::Manual);
				}
			}
			State = {{{P}}}Private_DisplayCategory(State);
		}
		default: {
			declare {{{P}}}K_Setting Setting = State.Settings.get(_SettingId);
			if (
				Setting.HasDisplaySettingsPreset &&
				Setting.Id != {{{P}}}C_SettingId_VideoPreset &&
				Setting.Id != {{{P}}}C_SettingId_VideoMotionBlurIntensity
			) {
				State = {{{P}}}Private_SelectDisplaySettingsPresetCustom(State);
				State = {{{P}}}Private_UpdateDisplaySettingsPresetCustom(State, Setting);
			}
		}
	}

	return State;
}

// Update a setting value
{{{P}}}K_State {{{P}}}Private_UpdateSettingValue({{{P}}}K_State _State, Integer _SettingId, {{{P}}}K_Values _NewValue) {
	declare {{{P}}}K_State State = _State;
	
	if (
		_SettingId != {{{P}}}C_SettingId_NullId &&
		State.Settings.existskey(_SettingId)
	) {
		declare {{{P}}}K_Setting UpdatedSetting = State.Settings[_SettingId];
		declare Boolean WasDirty = UpdatedSetting.IsDirty;
		if ({{{P}}}C_AnalogSettings.exists(_SettingId)) {
			foreach (ModelName => ValueReal in _NewValue.ValueControlAnalogReal) {
				UpdatedSetting.New.ValueControlAnalogReal[ModelName] = ValueReal;
				UpdatedSetting.IsDirty = (
					!UpdatedSetting.Old.ValueControlAnalogReal.existskey(ModelName) ||
					UpdatedSetting.Old.ValueControlAnalogReal[ModelName] != ValueReal
				);
			}
			foreach (ModelName => ValueBoolean in _NewValue.ValueControlAnalogBoolean) {
				UpdatedSetting.New.ValueControlAnalogBoolean[ModelName] = ValueBoolean;
				UpdatedSetting.IsDirty = (
					!UpdatedSetting.Old.ValueControlAnalogBoolean.existskey(ModelName) ||
					UpdatedSetting.Old.ValueControlAnalogBoolean[ModelName] != ValueBoolean
				);
			}
			State.Settings[_SettingId] = UpdatedSetting;
		} else {
			UpdatedSetting.New = _NewValue;
			UpdatedSetting.IsDirty = (
				UpdatedSetting.New.ValueText != UpdatedSetting.Old.ValueText ||
				UpdatedSetting.New.ValueReal != UpdatedSetting.Old.ValueReal ||
				UpdatedSetting.New.ValueBoolean != UpdatedSetting.Old.ValueBoolean ||
				UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger
			);
			State.Settings[_SettingId] = UpdatedSetting;
		}

		if (WasDirty != UpdatedSetting.IsDirty) {
			State = {{{P}}}Private_UpdateSettingsAreDirty(State);
		}

		State = {{{P}}}Private_NotifySettingUpdate(State, _SettingId);
	}

	return State;
}

// Start a check if the user needs some privileges to change the setting
{{{P}}}K_State {{{P}}}Private_CheckSettingPrivileges(
	{{{P}}}K_State _State,
	{{{P}}}K_Setting _Setting,
	CMlFrame _Frame_Setting,
	Integer _Direction,
	Boolean _PlaySound
) {
	if (_Setting.Privileges.count <= 0) return _State;

	declare {{{P}}}K_State State = _State;
	State.PrivilegesCheck.Check = {{{P}}}Privileges::Check_Destroy(State.PrivilegesCheck.Check);
	declare {{{P}}}Privileges::K_PrivilegeCheck[] Checks;
	foreach (Privilege in _Setting.Privileges) {
		Checks.add({{{P}}}Privileges::Check_Create(
			PrivilegeMgr,
			{{{P}}}MainUser::GetMainUserId(),
			Privilege
		));
	}
	State.PrivilegesCheck = {{{P}}}K_PrivilegesCheck {
		Check = {{{P}}}Privileges::Check_Group(Checks),
		SettingId = _Setting.Id,
		SettingType = _Setting.Type,
		Frame_Setting = _Frame_Setting,
		Direction = _Direction,
		PlaySound = _PlaySound
	};
	return State;
}
{{{P}}}K_State {{{P}}}Private_CheckSettingPrivileges({{{P}}}K_State _State, {{{P}}}K_Setting _Setting, CMlFrame _Frame_Setting, Integer _Direction) {
	return {{{P}}}Private_CheckSettingPrivileges(_State, _Setting, _Frame_Setting, _Direction, False);
}
{{{P}}}K_State {{{P}}}Private_CheckSettingPrivileges({{{P}}}K_State _State, {{{P}}}K_Setting _Setting, CMlFrame _Frame_Setting) {
	return {{{P}}}Private_CheckSettingPrivileges(_State, _Setting, _Frame_Setting, 0);
}
{{{P}}}K_State {{{P}}}Private_CheckSettingPrivileges({{{P}}}K_State _State, {{{P}}}K_Setting _Setting) {
	return {{{P}}}Private_CheckSettingPrivileges(_State, _Setting, Null);
}

// Update a slider setting value
{{{P}}}K_State {{{P}}}Private_UpdateSettingSliderValue(
	{{{P}}}K_State _State,
	{{{P}}}K_Setting _Setting,
	CMlFrame _Frame_SettingLine,
	Integer _Direction,
	Boolean _CheckPrivileges
) {
	if (
		_Setting.Id == {{{P}}}C_SettingId_NullId ||
		_Setting.Type != {{{P}}}C_SettingType_Slider ||
		!{{{P}}}Private_SettingHasStatus(_State, _Setting, {{{P}}}C_SettingStatus_Enabled)
	) {
		return _State;
	}

	declare {{{P}}}K_State State = _State;

	if (_CheckPrivileges) {
		State = {{{P}}}Private_CheckSettingPrivileges(State, _Setting, _Frame_SettingLine, _Direction);
		if (!{{{P}}}Privileges::Check_IsComplete(State.PrivilegesCheck.Check)) {
			return State;
		}
	}

	declare CMlFrame Slider_Value <=> (_Frame_SettingLine.GetFirstChild("{{{P}}}slider-value") as CMlFrame);
	if (_Setting.Slider.Steps > 1) {
		if (_Direction > 0) {
			{{{Slider::P}}}NextStep(Slider_Value);
		} else if (_Direction < 0) {
			{{{Slider::P}}}PreviousStep(Slider_Value);
		}
	} else {
		if (_Direction > 0) {
			{{{Slider::P}}}IncrementRatio(Slider_Value, 0.01);
		} else if (_Direction < 0) {
			{{{Slider::P}}}DecrementRatio(Slider_Value, 0.01);
		}
	}

	declare {{{P}}}K_Values Values;
	switch (_Setting.Slider.Type) {
		case {{{P}}}C_SliderType_Integer: {
			Values.ValueInteger = {{{Slider::P}}}GetValueInteger(Slider_Value);
		}
		default: { //< {{{P}}}C_SliderType_Real, {{{P}}}C_SliderType_Color
			Values.ValueReal = {{{Slider::P}}}GetValueReal(Slider_Value);
		}
	}
	if ({{{P}}}C_AnalogSettings.exists(_Setting.Id)) {
		Values.ValueControlAnalogReal[State.ControlVehicleModel] = {{{Slider::P}}}GetValueReal(Slider_Value);
	}
	State = {{{P}}}Private_UpdateSettingValue(
		State,
		_Setting.Id,
		Values
	);

	if (_Setting.Slider.DisplayTextField) {
		{{{TextField::P}}}SetValue(This, 
			(_Frame_SettingLine.GetFirstChild("{{{P}}}textfield-slider-value") as CMlFrame),
			{{{P}}}Private_SliderValueToText(Slider_Value, _Setting.Slider.Type),
			False
		);
	}

	return State;
}
{{{P}}}K_State {{{P}}}Private_UpdateSettingSliderValue({{{P}}}K_State _State, {{{P}}}K_Setting _Setting, CMlFrame _Frame_SettingLine, Integer _Direction) {
	return {{{P}}}Private_UpdateSettingSliderValue(_State, _Setting, _Frame_SettingLine, _Direction, True);
}
{{{P}}}K_State {{{P}}}Private_UpdateSettingSliderValue({{{P}}}K_State _State, {{{P}}}K_PrivilegesCheck _PrivilegesCheck) {
	return {{{P}}}Private_UpdateSettingSliderValue(
		_State,
		_State.Settings.get(_PrivilegesCheck.SettingId, {{{P}}}C_Setting_Null),
		_PrivilegesCheck.Frame_Setting,
		_PrivilegesCheck.Direction,
		False
	);
}

// Update a list setting value
{{{P}}}K_State {{{P}}}Private_UpdateSettingListValue(
	{{{P}}}K_State _State,
	CMlFrame _Frame_TypeList,
	Integer _SettingId,
	Integer _Direction,
	Boolean _PlaySound,
	Boolean _CheckPrivileges
) {
	if (!_State.Settings.existskey(_SettingId)) return _State;
	declare {{{P}}}K_Setting UpdatedSetting = _State.Settings[_SettingId];
	if (
		UpdatedSetting.Type != {{{P}}}C_SettingType_List ||
		!{{{P}}}Private_SettingHasStatus(_State, UpdatedSetting, {{{P}}}C_SettingStatus_Enabled)
	) return _State;

	declare {{{P}}}K_State State = _State;
	if (_CheckPrivileges) {
		State = {{{P}}}Private_CheckSettingPrivileges(State, UpdatedSetting, _Frame_TypeList, _Direction, _PlaySound);
		if (!{{{P}}}Privileges::Check_IsComplete(State.PrivilegesCheck.Check)) {
			return State;
		}
	}

	declare Integer PrevValueInteger = UpdatedSetting.New.ValueInteger;
	if (UpdatedSetting.List.CanLoop) {
		UpdatedSetting.New.ValueInteger += _Direction;

		if (UpdatedSetting.New.ValueInteger > {{{P}}}ML::Max(0, UpdatedSetting.List.Labels.count - 1)) {
			UpdatedSetting.New.ValueInteger = 0;
		} else if (UpdatedSetting.New.ValueInteger < 0) {
			UpdatedSetting.New.ValueInteger = {{{P}}}ML::Max(0, UpdatedSetting.List.Labels.count - 1);
		}
	} else {
		UpdatedSetting.New.ValueInteger = {{{P}}}ML::Clamp(
			UpdatedSetting.New.ValueInteger + _Direction,
			0,
			{{{P}}}ML::Max(0, UpdatedSetting.List.Labels.count - 1)
		);
	}

	if (_PlaySound && PrevValueInteger != UpdatedSetting.New.ValueInteger) {
		if (_Direction < 0) {
			{{{MenuSounds::P}}}PlaySelectSound(This, _Frame_TypeList.GetFirstChild("{{{P}}}button-list-previous"));
		} else if (_Direction > 0) {
			{{{MenuSounds::P}}}PlaySelectSound(This, _Frame_TypeList.GetFirstChild("{{{P}}}button-list-next"));
		}
	}

	declare Boolean WasDirty = UpdatedSetting.IsDirty;
	UpdatedSetting.IsDirty = (
		UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger &&
		_SettingId != {{{P}}}C_SettingId_ControlAnalogVehicleSelection && //< The vehicle selection cannot be dirty
		_SettingId != {{{P}}}C_SettingId_ControlDevice //< The controller selection cannot be dirty
	);
	State.Settings[_SettingId] = UpdatedSetting;
	if (WasDirty != UpdatedSetting.IsDirty) {
		State = {{{P}}}Private_UpdateSettingsAreDirty(State);
	}

	{{{P}}}Private_DisplayList(State, _Frame_TypeList, UpdatedSetting, True);

	State = {{{P}}}Private_NotifySettingUpdate(State, _SettingId);

	return State;
}
{{{P}}}K_State {{{P}}}Private_UpdateSettingListValue({{{P}}}K_State _State, CMlFrame _Frame_TypeList, Integer _SettingId, Integer _Direction, Boolean _PlaySound) {
	return {{{P}}}Private_UpdateSettingListValue(_State, _Frame_TypeList, _SettingId, _Direction, _PlaySound, True);
}
{{{P}}}K_State {{{P}}}Private_UpdateSettingListValue({{{P}}}K_State _State, {{{P}}}K_PrivilegesCheck _PrivilegesCheck) {
	return {{{P}}}Private_UpdateSettingListValue(
		_State,
		_PrivilegesCheck.Frame_Setting,
		_PrivilegesCheck.SettingId,
		_PrivilegesCheck.Direction,
		_PrivilegesCheck.PlaySound,
		False
	);
}

// Get the pad currently selected in the control settings
CInputPad {{{P}}}Private_GetSelectedPad({{{P}}}K_State _State) {
	foreach (Pad in Input.Pads) {
		if (Pad.ControllerId == _State.ControlControllerId) {
			return Pad;
		}
	}
	return Null;
}

{{{P}}}K_Setting {{{P}}}Private_ApplySetting(CManiaPlanet _ManiaPlanet, {{{P}}}K_Setting _Setting) {
	if (!{{{UserStore::P}}}HasGamePermissions(PrivilegeMgr, _Setting.Permissions)) {
		return _Setting;
	}

	declare {{{P}}}K_Setting Setting = _Setting;

	switch (Setting.Id) {
		case {{{P}}}C_SettingId_ProfileTrigram: {
			_ManiaPlanet.UserMgr.MainUserProfile.User_Trigram = {{{P}}}Private_ValidateTrigram(Setting.New.ValueText);
		}
		case {{{P}}}C_SettingId_ProfileTrailsColor: {
			_ManiaPlanet.UserMgr.MainUserProfile.User_LightTrailHue = Setting.New.ValueReal;
		}
		case {{{P}}}C_SettingId_ProfileDisplayAds: {
			_ManiaPlanet.UserMgr.MainUserProfile.Adverts_Enabled = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_ProfileEnablePersonalizedAds: {
			_ManiaPlanet.UserMgr.MainUserProfile.Adverts_UsePersonnalData = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_VideoDevice: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesText.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.Device_NextStart = Setting.List.ValuesText[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoDisplayMode: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesDisplayMode.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.DisplayMode = Setting.List.ValuesDisplayMode[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoFullscreenResolution: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesInt2.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.FullscreenSize = Setting.List.ValuesInt2[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoWindowResolutionX: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.WindowSize.X = {{{P}}}Private_ValidateWindowResolutionX({{{P}}}TL::ToInteger(Setting.New.ValueText));
			}
		}
		case {{{P}}}C_SettingId_VideoWindowResolutionY: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.WindowSize.Y = {{{P}}}Private_ValidateWindowResolutionY({{{P}}}TL::ToInteger(Setting.New.ValueText));
			}
		}
		case {{{P}}}C_SettingId_VideoShowWindowBorder: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.WindowBorderless = !Setting.New.ValueBoolean;
			}
		}
		case {{{P}}}C_SettingId_VideoAutomaticQuality: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.Automatic_Enabled = Setting.New.ValueBoolean;
			}
		}
		case {{{P}}}C_SettingId_VideoAutomaticMinFPS: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.Automatic_MinFps = {{{P}}}Private_ValidateAutomaticMinFPS({{{P}}}TL::ToInteger(Setting.New.ValueText));
			}
		}
		case {{{P}}}C_SettingId_VideoLimitFPS: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.MaxFps = {{{P}}}Private_ValidateLimitFPS({{{P}}}TL::ToInteger(Setting.New.ValueText));
			}
		}
		case {{{P}}}C_SettingId_VideoDisplaySync: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesDisplaySync.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.DisplaySync = Setting.List.ValuesDisplaySync[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoGPUSync: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesGpuSync.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.GpuSync = Setting.List.ValuesGpuSync[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoForwardAA: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesForwardAA.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.Antialias_Forward = Setting.List.ValuesForwardAA[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoDeferredAA: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesDeferredAA.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.Antialias_Deferred = Setting.List.ValuesDeferredAA[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoCanSelectPreset: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.Customize_NextStart = Setting.New.ValueBoolean;
			}
		}
		case {{{P}}}C_SettingId_VideoPreset: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesPreset.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.Preset_NextStart = Setting.List.ValuesPreset[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoShaderQuality: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesShaderQuality.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.ShaderQuality_NextStart = Setting.List.ValuesShaderQuality[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoTexturesQuality: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesInteger.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.TexturesQuality_NextStart = Setting.List.ValuesInteger[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoShadows: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesShadows.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.Shadows_NextStart = Setting.List.ValuesShadows[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoTextureFiltering: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesTextureFiltering.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.TextureFiltering = Setting.List.ValuesTextureFiltering[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoVehicleReflect: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesVehicleReflect.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.VehicleReflect = Setting.List.ValuesVehicleReflect[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoWaterReflect: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesWaterReflect.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.WaterReflect = Setting.List.ValuesWaterReflect[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoEverywhereReflect: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				if (Setting.New.ValueBoolean) {
					_ManiaPlanet.DisplaySettings.EverywhereReflect = CDisplaySettings::EEverywhereReflect::Enabled;
				} else {
					_ManiaPlanet.DisplaySettings.EverywhereReflect = CDisplaySettings::EEverywhereReflect::None;
				}
			}
		}
		case {{{P}}}C_SettingId_VideoBloomHDR: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesFxBloomHdr.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.FxBloomHdr = Setting.List.ValuesFxBloomHdr[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoMotionBlur: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				if (Setting.New.ValueBoolean) {
					_ManiaPlanet.DisplaySettings.FxMotionBlur = CDisplaySettings::EFxMotionBlur::Enabled;
				} else {
					_ManiaPlanet.DisplaySettings.FxMotionBlur = CDisplaySettings::EFxMotionBlur::None;
				}
			}
		}
		case {{{P}}}C_SettingId_VideoMotionBlurIntensity: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.FxMotionBlurIntens = Setting.New.ValueReal;
			}
		}
		case {{{P}}}C_SettingId_VideoSlowMotionBlur: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				if (Setting.New.ValueBoolean) {
					_ManiaPlanet.DisplaySettings.FxBlur = CDisplaySettings::EFxBlur::Enabled;
				} else {
					_ManiaPlanet.DisplaySettings.FxBlur = CDisplaySettings::EFxBlur::None;
				}
			}
		}
		case {{{P}}}C_SettingId_VideoOpponentCustomization: {
			if (Setting.List.ValuesCustomPlayerModels.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Custom_PlayerModels = Setting.List.ValuesCustomPlayerModels[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoPerformanceQuality: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesConsoleResolution.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.ConsoleResolution = Setting.List.ValuesConsoleResolution[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_VideoOutputScale: {
			if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
				ParentApp.ManiaPlanet.DisplaySettings.ConsoleOutputScale = Setting.New.ValueReal;
			}
		}
		case {{{P}}}C_SettingId_SoundEnable: {
			_ManiaPlanet.AudioSettings_EnableAudio = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SoundDevice: {
			if (_ManiaPlanet.AudioSettings != Null && Setting.List.ValuesText.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.AudioSettings.Device_NextApply = Setting.List.ValuesText[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_SoundMusicVolume: {
			_ManiaPlanet.AudioSettings_MasterMusicVolume = {{{P}}}Private_ValidateAudioVolume(Setting.New.ValueReal);
		}
		case {{{P}}}C_SettingId_SoundMasterVolume: {
			_ManiaPlanet.AudioSettings_MasterSoundVolume = {{{P}}}Private_ValidateAudioVolume(Setting.New.ValueReal);
		}
		case {{{P}}}C_SettingId_SoundEffectVolume: {
			_ManiaPlanet.AudioSettings_SoundVolume_Scene = {{{P}}}Private_ValidateAudioVolume(Setting.New.ValueReal);
		}
		case {{{P}}}C_SettingId_SoundUIVolume: {
			_ManiaPlanet.AudioSettings_SoundVolume_Ui = {{{P}}}Private_ValidateAudioVolume(Setting.New.ValueReal);
		}
		case {{{P}}}C_SettingId_SoundVoiceChatAndTTSVolume: {
			_ManiaPlanet.AudioSettings.VoiceChat_SpeakerVolume = {{{P}}}Private_ValidateAudioVolume(Setting.New.ValueReal);
		}
		case {{{P}}}C_SettingId_SoundMuteUnfocused: {
			_ManiaPlanet.AudioSettings_MuteWhenAppUnfocused = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SoundVoiceChat: {
			_ManiaPlanet.UserMgr.MainUserProfile.VoiceChat_Enabled = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SoundVoiceChatDeviceIn: {
			if (_ManiaPlanet.AudioSettings != Null && Setting.List.ValuesText.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.AudioSettings.VoiceChat_Device_In_NextApply = Setting.List.ValuesText[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_SoundVoiceChatDeviceOut: {
			if (_ManiaPlanet.AudioSettings != Null && Setting.List.ValuesText.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.AudioSettings.VoiceChat_Device_Out_NextApply = Setting.List.ValuesText[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_SoundVoiceChatVoiceDetectionMode: {
			if (_ManiaPlanet.AudioSettings != Null && Setting.List.ValuesVoiceDetectionMode.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.AudioSettings.VoiceChat_VoiceDetection_Mode = Setting.List.ValuesVoiceDetectionMode[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_SoundVoiceChatVoiceDetectionSensitivity: { // Slider can not be set to <1., 0.> so we use the inverse of the value
			_ManiaPlanet.AudioSettings.VoiceChat_VoiceDetection_Sensitivity = {{{P}}}ML::Clamp(1. - Setting.New.ValueReal, 0., 1.);
		}
		case {{{P}}}C_SettingId_SoundVoiceChatLoopback: {
			_ManiaPlanet.UserMgr.MainUserProfile.VoiceChat_Loopback = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SoundSpeechToText: {
			_ManiaPlanet.UserMgr.MainUserProfile.STT_Enabled = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SoundTextToSpeech: {
			_ManiaPlanet.UserMgr.MainUserProfile.TTS_Enabled = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SendTextAsVoice: {
			_ManiaPlanet.UserMgr.MainUserProfile.VoiceChat_SendTextAsVoice = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_ControlAnalogSensitivity: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogReal.existskey(Vehicle.ModelName)) {
					Vehicle.AnalogSensitivity = Setting.New.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
		}
		case {{{P}}}C_SettingId_ControlAnalogDeadZone: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogReal.existskey(Vehicle.ModelName)) {
					Vehicle.AnalogDeadZone = Setting.New.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
		}
		case {{{P}}}C_SettingId_ControlAnalogRumbleIntensity: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogReal.existskey(Vehicle.ModelName)) {
					Vehicle.RumbleIntensity = Setting.New.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
		}
		case {{{P}}}C_SettingId_ControlTriggerHapticFeedbackEnabled: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogBoolean.existskey(Vehicle.ModelName)) {
					Vehicle.HapticFeedbackEnabled = Setting.New.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
		}
		case {{{P}}}C_SettingId_ControlInvertSteer: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogBoolean.existskey(Vehicle.ModelName)) {
					Vehicle.InvertSteer = Setting.New.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
		}
		case {{{P}}}C_SettingId_ControlAnalogWheelMode: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogBoolean.existskey(Vehicle.ModelName)) {
					Vehicle.AnalogSteerV2 = Setting.New.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
		}
		case {{{P}}}C_SettingId_ControlAccelIsToggleMode: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogBoolean.existskey(Vehicle.ModelName)) {
					Vehicle.AccelIsToggleMode = Setting.New.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
		}
		case {{{P}}}C_SettingId_ControlBrakeIsToggleMode: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogBoolean.existskey(Vehicle.ModelName)) {
					Vehicle.BrakeIsToggleMode = Setting.New.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
		}
		case {{{P}}}C_SettingId_ControlAnalogCenterSpringIntensity: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogReal.existskey(Vehicle.ModelName)) {
					Vehicle.CenterSpringIntensity = Setting.New.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
		}
		case {{{P}}}C_SettingId_HUDMarkersType: {
			if (Setting.List.ValuesPlayerInfoDisplayType.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.Interface_PlayerInfoDisplayType = Setting.List.ValuesPlayerInfoDisplayType[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_HUDMarkersSize: {
			_ManiaPlanet.Interface_PlayerInfoDisplaySize = Setting.New.ValueInteger;
		}
		case {{{P}}}C_SettingId_HUDPrioritizeAlternateCam1: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_UseAlternateCam1 = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_HUDPrioritizeAlternateCam2: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_UseAlternateCam2 = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_HUDPrioritizeAlternateCam3: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_UseOldInternalCam = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_HUDInternalCamCarVisibility: {
			if (Setting.List.ValuesPlayerVisibility.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Interface_InternalCamLocalPlayerVisibility = Setting.List.ValuesPlayerVisibility[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_HUDDefaultOpponentVisibility: {
			if (Setting.List.ValuesPlayerVisibility.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Online_DefaultOpponentVisibility = Setting.List.ValuesPlayerVisibility[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_HUDRoadsideSpectatorVisibility: {
			if (Setting.List.ValuesRoadsideSpectatorVisibility.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Online_RoadsideSpectatorVisibility = Setting.List.ValuesRoadsideSpectatorVisibility[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_HUDEnableSpecialBlockMessage: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_ShowSpecialsFeedback = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_HUDAlwaysDisplayTrackRecords: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_AlwaysDisplayRecords = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_HUDChatAllowHide: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_AllowChatHiding = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_HUDChatBackground: {
			if (Setting.List.ValuesChatBackground.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Interface_IngameChatBackground = Setting.List.ValuesChatBackground[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_HUDChatTextSize: {
			if (Setting.List.ValuesChatTextSize.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Interface_IngameChatTextSize = Setting.List.ValuesChatTextSize[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_HUDShowPerformance: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesShowPerformance.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.ShowPerformance = Setting.List.ValuesShowPerformance[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_SystemLanguage: {
			if (Setting.List.ValuesText.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.Language_NextStart = Setting.List.ValuesText[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_SystemColorblindMode: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_ColorblindMode = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SystemAutoSkipStartScreens: {
			_ManiaPlanet.SystemSettings_SkipIntro = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SystemScreenshotExtension: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesScreenshotExt.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.ScreenshotExt = Setting.List.ValuesScreenshotExt[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_SystemNetworkSpeed: {
			if (Setting.List.ValuesNetworkSpeed.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.NetworkSpeed = Setting.List.ValuesNetworkSpeed[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_SystemNetworkSpeedDownload: {
			_ManiaPlanet.NetworkSpeed_CustomDownload = {{{P}}}Private_ValidateNetworkSpeed({{{P}}}TL::ToInteger(Setting.New.ValueText));
		}
		case {{{P}}}C_SettingId_SystemNetworkCrossPlay: {
			_ManiaPlanet.UserMgr.CrossPlay_V2_SetEnabled({{{P}}}MainUser::GetMainUserId(), Setting.New.ValueBoolean);
			if (Setting.New.ValueBoolean != Setting.Old.ValueBoolean) {{{UserStore::P}}}SetUserHasSeenCrossPlayWarning(False);
		}
		case {{{P}}}C_SettingId_SystemNetworkSpeedUpload: {
			_ManiaPlanet.NetworkSpeed_CustomUpload = {{{P}}}Private_ValidateNetworkSpeed({{{P}}}TL::ToInteger(Setting.New.ValueText));
		}
		case {{{P}}}C_SettingId_SystemDownloadSkin: {
			_ManiaPlanet.Network_EnableVehicleSkinLocators = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SystemDownloadMapMod: {
			_ManiaPlanet.Network_EnableMapModLocators = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SystemDownloadSign: {
			_ManiaPlanet.Network_EnableMapSkinLocators = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SystemEnableTrackEditorQuickStart: {
			_ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorUseQuickstart = Setting.New.ValueBoolean;
		}
		case {{{P}}}C_SettingId_SystemTrackEditorQuickStartUseGamepadController: {
			if (Setting.List.ValuesBoolean.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartUseGamepad = Setting.List.ValuesBoolean[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_SystemTrackEditorQuickStartDifficulty: {
			if (Setting.List.MapEditorDifficulty.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartDifficulty = Setting.List.MapEditorDifficulty[Setting.New.ValueInteger];
			}
		}
		case {{{P}}}C_SettingId_SystemTrackEditorQuickStartMood: {
			if (Setting.List.ValuesMapEditorMood.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartMood = Setting.List.ValuesMapEditorMood[Setting.New.ValueInteger];
			}
		}
	}

	Setting.Old = Setting.New;
	Setting.IsDirty = False;

	return Setting;
}

// Apply the new settings values
{{{P}}}K_State {{{P}}}Private_ApplySettings({{{P}}}K_State _State, Integer _SettingCategory) {
	declare {{{P}}}K_State State = _State;
	declare Boolean IsSystemLanguageUpdated = State.Settings.get({{{P}}}C_SettingId_SystemLanguage, {{{P}}}C_Setting_Null).IsDirty;

	declare Boolean SettingsApplied = False;
	if ({{{P}}}C_DiscardSettingsOnTabChange) {
		declare Integer[] SettingIds = State.ScrollSettingIds.get(_SettingCategory, []);
		if (SettingIds.count > 0) {
			foreach (SettingId in SettingIds) {
				if (State.Settings.existskey(SettingId)) {
					State.Settings[SettingId] = {{{P}}}Private_ApplySetting(ParentApp.ManiaPlanet, State.Settings[SettingId]);
				}
			}
			SettingsApplied = True;
		}
	} else {
		foreach (Setting in State.Settings) {
			State.Settings[Setting.Id] = {{{P}}}Private_ApplySetting(ParentApp.ManiaPlanet, State.Settings[Setting.Id]);
		}
		SettingsApplied = True;
	}
	if (SettingsApplied) {
		if (State.SettingsAreDirty) {
			State = {{{P}}}Private_DisplayAlertMessage(State, "{{{Text_ChangesApplied}}}");
		}
		State = {{{P}}}Private_UpdateSettingsAreDirty(State);

		if (!{{{P}}}C_DiscardSettingsOnTabChange || _SettingCategory == {{{P}}}C_SettingCategory_Video || _SettingCategory == {{{P}}}C_SettingCategory_System) {
			// `DisplaySettings` must be loaded before applying (`DisplaySettings != Null`)
			// Otherwise `DisplaySettings_Apply()` will trigger a runtime error "No settings to apply"
			if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
				ParentApp.ManiaPlanet.DisplaySettings_Apply();
				State.WindowSize = ParentApp.ManiaPlanet.DisplaySettings.WindowSize;
			}
		}
		if (!{{{P}}}C_DiscardSettingsOnTabChange || _SettingCategory == {{{P}}}C_SettingCategory_Sound) {
			// `AudioSettings` must be loaded before applying (`AudioSettings != Null`)
			// Otherwise `AudioSettings_Apply()` will trigger a runtime error "No settings to apply"
			if (ParentApp.ManiaPlanet.AudioSettings != Null) {
				ParentApp.ManiaPlanet.AudioSettings_Apply();
				State.MasterVolume = ParentApp.ManiaPlanet.AudioSettings_MasterSoundVolume;
				State.EffectVolume = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Scene;
				State.UIVolume = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Ui;
				State.MusicVolume = ParentApp.ManiaPlanet.AudioSettings_MasterMusicVolume;
			}
		}
		if (!{{{P}}}C_DiscardSettingsOnTabChange || _SettingCategory == State.Settings.get({{{P}}}C_SettingId_SystemLanguage, {{{P}}}C_Setting_Null).Category) {
			ParentApp.ManiaPlanet.Language_Apply();
		}
		
		if (IsSystemLanguageUpdated) { //< Redraw menu components only if system language has changed
			{{{P}}}RequestRedraw::RequestComponentsRedraw();
			ParentApp.ManiaPlanet.Language_Apply();
		}

		if (State.DisplayedCategory == _SettingCategory) {
			State = {{{P}}}Private_SetDisplayedCategory(State, State.DisplayedCategory, False, False, False);
		}
	}

	return State;
}

// Select a setting button
{{{P}}}K_State {{{P}}}Private_SelectSettingButton({{{P}}}K_State _State, Integer _SettingId, Boolean _CheckPrivileges) {
	declare {{{P}}}K_State State = _State;
	declare Boolean PlaySound = True;

	if (_CheckPrivileges) {
		State = {{{P}}}Private_CheckSettingPrivileges(State, State.Settings.get(_SettingId, {{{P}}}C_Setting_Null));
		if (!{{{P}}}Privileges::Check_IsComplete(State.PrivilegesCheck.Check)) {
			return State;
		}
	}

	switch (_SettingId) {
		case {{{P}}}C_SettingId_ProfileCopyAccountId: {
			if (!{{{P}}}Platform::IsSony(System)) {
				if (LocalUser != Null) {
					ParentApp.ManiaPlanet.ClipboardSet(LocalUser.WebServicesUserId);
				} else {
					ParentApp.ManiaPlanet.ClipboardSet(
						{{{P}}}TL::GetTranslatedText(
							{{{P}}}TL::Compose(
								//L16N [Settings] Display the user account ID. %1 will be replaced by the account ID. eg: "Account ID: 1234-ABCD-5678"
								_("Account ID: %1"),
								//L16N [Settings] Displayed when we cannot get the user account ID
								_("|AccountId|Unknown")
							)
						)
					);
				}
				State = {{{P}}}Private_DisplayAlertMessage(State, "{{{Text_AccountIdCopied}}}");
			}
		}
		case {{{P}}}C_SettingId_ProfileOpenPlayerPage: {
			ParentApp.ManiaPlanet.OpenLink({{{P}}}Config::Get().WebsitePlayersPageUrl, CManiaPlanet::ELinkType::ExternalBrowser);
		}
		case {{{P}}}C_SettingId_ProfileOpenProfilePage: {
			if (State.SettingsAreDirty) {
				State = {{{P}}}Private_DisplayDiscardChangesPopUp(
					State,
					True,
					{{{P}}}K_AfterDiscardPopUp {
						Action = {{{P}}}C_ActionAfterDiscardPopUp_OpenProfile
					}
				);
			} else {
				{{{P}}}PendingEvents.add({{{P}}}K_Event {
					Type = {{{P}}}C_EventType_OpenProfile
				});
			}
		}
		case {{{P}}}C_SettingId_ControlLatencyTest: {
			declare CMlFrame Frame_SettingLine <=> {{{Scroll::P}}}GetFocusedElement(State.Controls.Scroll_Settings);
			declare CMlFrame Frame_LatencyTest <=> (Frame_SettingLine.GetFirstChild("{{{LatencyTest::C_Id_FrameLatencyTest}}}") as CMlFrame);
			declare CMlFrame Asset_BgRight <=> (Frame_SettingLine.GetFirstChild("{{{P}}}asset-bg-right") as CMlFrame);
			declare CMlLabel Label_ButtonValue <=> (Frame_SettingLine.GetFirstChild("{{{P}}}label-button-value") as CMlLabel);

			if ({{{LatencyTest::P}}}IsRunning(Frame_LatencyTest)) {
				{{{LatencyTest::P}}}OnInput(This, Frame_LatencyTest);
				PlaySound = False;
			} else if (Label_ButtonValue.Visible) {
				{{{LatencyTest::P}}}Start(This, Frame_LatencyTest, Asset_BgRight);
				Label_ButtonValue.Hide();
			}
		}
		case {{{P}}}C_SettingId_ControlUnbindAll: {
			if (ParentApp.ManiaPlanet.Dialog_IsFinished) {
				declare CInputPad SelectedPad = {{{P}}}Private_GetSelectedPad(State);
				if (SelectedPad != Null) {
					ParentApp.ManiaPlanet.Dialog_UnbindInputDevice(SelectedPad);
					State.IsWaitingBind = True;
					State.IsWaitingBind_PlaySound = False;
					PlaySound = False;
					State = {{{P}}}Private_UpdateControllerInfo(State);
					{{{P}}}Private_UpdateDimmer(State);
				}
			}
		}
		case {{{P}}}C_SettingId_ControlUnbindOne: {
			if (ParentApp.ManiaPlanet.Dialog_IsFinished) {
				declare CInputPad SelectedPad = {{{P}}}Private_GetSelectedPad(State);
				if (SelectedPad != Null) {
					ParentApp.ManiaPlanet.Dialog_BindInput(-1, SelectedPad);
					State.IsWaitingBind = True;
					// `Dialog_BindInput()` do not trigger any sound from the C++
					// So we must not cancel the sound from the script with `PlaySound = False;`
					// like for `Dialog_UnbindInputDevice()` and `Dialog_DefaultInputBindings()`.
					State.IsWaitingBind_PlaySound = True; 
					State = {{{P}}}Private_UpdateControllerInfo(State);
					{{{P}}}Private_UpdateDimmer(State);
				}
			}
		}
		case {{{P}}}C_SettingId_ControlBindDefault: {
			if (ParentApp.ManiaPlanet.Dialog_IsFinished) {
				declare CInputPad SelectedPad = {{{P}}}Private_GetSelectedPad(State);
				if (SelectedPad != Null) {
					ParentApp.ManiaPlanet.Dialog_DefaultInputBindings(SelectedPad);
					State.IsWaitingBind = True;
					State.IsWaitingBind_PlaySound = False;
					PlaySound = False;
					State = {{{P}}}Private_UpdateControllerInfo(State);
					{{{P}}}Private_UpdateDimmer(State);
				}
			}
		}
		case {{{P}}}C_SettingId_SystemOnlineServicesStatus: {
			ParentApp.ManiaPlanet.OpenLink({{{P}}}Config::Get().WebsiteOnlineServicesStatusPage^"/status.html", CManiaPlanet::ELinkType::ExternalBrowser);
		}
		case {{{P}}}C_SettingId_SystemCleanCache: {
			if (ParentApp.ManiaPlanet.Dialog_IsFinished) {
				ParentApp.ManiaPlanet.Dialog_CleanCache();
			}
		}
		case {{{P}}}C_SettingId_SystemCredits: {
			if (State.SettingsAreDirty) {
				State = {{{P}}}Private_DisplayDiscardChangesPopUp(
					State,
					True,
					{{{P}}}K_AfterDiscardPopUp {
						Action = {{{P}}}C_ActionAfterDiscardPopUp_OpenCredits
					}
				);
			} else {
				{{{P}}}PendingEvents.add({{{P}}}K_Event {
					Type = {{{P}}}C_EventType_OpenCredits
				});
			}
		}
		default: {
			PlaySound = False;
		}
	}

	if (PlaySound) {
		{{{MenuSounds::P}}}PlaySound(This, {{{MenuSounds::P}}}C_Sound_Select);
	}

	return State;
}
{{{P}}}K_State {{{P}}}Private_SelectSettingButton({{{P}}}K_State _State, Integer _SettingId) {
	return {{{P}}}Private_SelectSettingButton(_State, _SettingId, True);
}
{{{P}}}K_State {{{P}}}Private_SelectSettingButton({{{P}}}K_State _State, {{{P}}}K_PrivilegesCheck _PrivilegesCheck) {
	return {{{P}}}Private_SelectSettingButton(_State, _PrivilegesCheck.SettingId, False);
}

// Select a setting checkbox
{{{P}}}K_State {{{P}}}Private_SelectSettingCheckbox({{{P}}}K_State _State, CMlFrame _Checkbox_Value, Integer _SettingId, Boolean _CheckPrivileges) {
	declare {{{P}}}K_Setting Setting = _State.Settings.get(_SettingId, {{{P}}}C_Setting_Null);
	if (!{{{P}}}Private_SettingHasStatus(_State, Setting, {{{P}}}C_SettingStatus_Enabled)) return _State;

	declare {{{P}}}K_State State = _State;

	if (_CheckPrivileges) {
		State = {{{P}}}Private_CheckSettingPrivileges(State, Setting, _Checkbox_Value);
		if (!{{{P}}}Privileges::Check_IsComplete(State.PrivilegesCheck.Check)) {
			return State;
		}
	}

	declare Boolean IsChecked = {{{Checkbox::P}}}Toggle(This, _Checkbox_Value);
	{{{MenuSounds::P}}}PlaySound(This, {{{MenuSounds::P}}}C_Sound_Select);
	declare {{{P}}}K_Values Values = {{{P}}}K_Values { ValueBoolean = IsChecked };
	if ({{{P}}}C_AnalogSettings.exists(_SettingId)) {
		Values.ValueControlAnalogBoolean[_State.ControlVehicleModel] = IsChecked;
	}
	State = {{{P}}}Private_UpdateSettingValue(State, _SettingId, Values);
	return State;
}
{{{P}}}K_State {{{P}}}Private_SelectSettingCheckbox({{{P}}}K_State _State, CMlFrame _Checkbox_Value, Integer _SettingId) {
	return {{{P}}}Private_SelectSettingCheckbox(_State, _Checkbox_Value, _SettingId, True);
}
{{{P}}}K_State {{{P}}}Private_SelectSettingCheckbox({{{P}}}K_State _State, {{{P}}}K_PrivilegesCheck _PrivilegesCheck) {
	return {{{P}}}Private_SelectSettingCheckbox(_State, _PrivilegesCheck.Frame_Setting, _PrivilegesCheck.SettingId, False);
}

// Select a setting binding
{{{P}}}K_State {{{P}}}Private_SelectSettingBinding({{{P}}}K_State _State, Integer _ActionIndex) {
	declare {{{P}}}K_State State = _State;
	if (ParentApp.ManiaPlanet.Dialog_IsFinished) {
		declare CInputPad SelectedPad = {{{P}}}Private_GetSelectedPad(State);
		if (SelectedPad != Null) {
			ParentApp.ManiaPlanet.Dialog_BindInput(_ActionIndex, SelectedPad);
			State.IsWaitingBind = True;
			State.IsWaitingBind_PlaySound = True;
			{{{MenuSounds::P}}}PlaySound(This, {{{MenuSounds::P}}}C_Sound_Select);
			State = {{{P}}}Private_UpdateControllerInfo(State);
			{{{P}}}Private_UpdateDimmer(State);
		}
	}
	return State;
}

// Select a setting line in the scroll
{{{P}}}K_State {{{P}}}Private_SelectSettingLine({{{P}}}K_State _State, Integer _SettingKey, CMlFrame _Frame_SettingLine, Boolean _IsFromMouse) {
	declare {{{P}}}K_State State = _State;
	declare {{{P}}}K_Setting Setting = {{{P}}}Private_GetSettingFromScroll(State, _SettingKey);
	
	if (Setting.Id != {{{P}}}C_SettingId_NullId && {{{P}}}Private_SettingHasStatus(State, Setting, {{{P}}}C_SettingStatus_Enabled)) {
		switch (Setting.Type) {
			case {{{P}}}C_SettingType_TextField: {
				// Prevent the user from reselecting the TextField when they click on the setting line while editing the TextField
				if (!_IsFromMouse || State.IsEditingTextField != Setting.Id) {
					State.IsEditingTextField = Setting.Id;
					State.CanResetIsEditingTextField = 0;
					{{{TextField::P}}}Select(This, (_Frame_SettingLine.GetFirstChild("{{{P}}}textfield-value") as CMlFrame));
					{{{MenuSounds::P}}}PlaySound(This, {{{MenuSounds::P}}}C_Sound_Select);
				}
			}
			case {{{P}}}C_SettingType_Button: {
				State = {{{P}}}Private_SelectSettingButton(State, Setting.Id);
			}
			case {{{P}}}C_SettingType_Checkbox: {
				State = {{{P}}}Private_SelectSettingCheckbox(State, _Frame_SettingLine.GetFirstChild("{{{P}}}checkbox-value") as CMlFrame, Setting.Id);
			}
			case {{{P}}}C_SettingType_Binding: {
				State = {{{P}}}Private_SelectSettingBinding(State, Setting.ActionIndex);
			}
			case {{{P}}}C_SettingType_Slider: {
				if (Setting.Slider.DisplayTextField) {
					// Prevent the user from reselecting the TextField when they click on the setting line while editing the TextField
					if (!_IsFromMouse || State.IsEditingTextField != Setting.Id) {
						State.IsEditingTextField = Setting.Id;
						State.CanResetIsEditingTextField = 0;
						{{{TextField::P}}}Select(This, (_Frame_SettingLine.GetFirstChild("{{{P}}}textfield-slider-value") as CMlFrame));
						{{{MenuSounds::P}}}PlaySound(This, {{{MenuSounds::P}}}C_Sound_Select);
					}
				}
			}
		}
	}

	return State;
}

// Select an element of navigation
{{{P}}}K_State {{{P}}}Private_Select({{{P}}}K_State _State, CMlControl _Control) {
	if (_Control == Null) return _State;

	declare {{{P}}}K_State State = _State;

	switch (_Control.ControlId) {
		case "{{{P}}}checkbox-value": {
			declare Integer {{{P}}}DisplayedSettingId for _Control;
			State = {{{P}}}Private_SelectSettingCheckbox(State, _Control as CMlFrame, {{{P}}}DisplayedSettingId);
		}
		case "{{{P}}}button-list-previous": {
			declare Integer {{{P}}}DisplayedSettingId for _Control;
			assert(_Control.Parent.ControlId == "{{{P}}}frame-type-list", "This is not pointing to the right control anymore");
			State = {{{P}}}Private_UpdateSettingListValue(State, _Control.Parent, {{{P}}}DisplayedSettingId, -1, False);
		}
		case "{{{P}}}button-list-next": {
			declare Integer {{{P}}}DisplayedSettingId for _Control;
			assert(_Control.Parent.ControlId == "{{{P}}}frame-type-list", "This is not pointing to the right control anymore");
			State = {{{P}}}Private_UpdateSettingListValue(State, _Control.Parent, {{{P}}}DisplayedSettingId, 1, False);
		}
		case "{{{P}}}button-apply": {
			State = {{{P}}}Private_ApplySettings(State, State.DisplayedCategory);
			if ({{{P}}}G_State.IsOnboardingModeEnabled) {
				{{{P}}}PendingEvents.add({{{P}}}K_Event {
					Type = {{{P}}}C_EventType_Continue
				});
			}
		}
		case "{{{P}}}button-back": {
			if (State.SettingsAreDirty) {
				State = {{{P}}}Private_DisplayDiscardChangesPopUp(
					State,
					True,
					{{{P}}}K_AfterDiscardPopUp {
						Action = {{{P}}}C_ActionAfterDiscardPopUp_CloseSettings
					}
				);
			} else {
				{{{P}}}PendingEvents.add({{{P}}}K_Event {
					Type = {{{P}}}C_EventType_Back
				});
			}
		}
	}

	return State;
}

// Load settings values
{{{P}}}K_State {{{P}}}Private_LoadSettings({{{P}}}K_State _State) {
	declare {{{P}}}K_State State = _State;

	foreach (Setting in State.Settings) {
		declare {{{P}}}K_Setting UpdatedSetting = Setting;

		switch (UpdatedSetting.Id) {
			case {{{P}}}C_SettingId_ProfileTrigram: {
				UpdatedSetting.Old.ValueText = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.User_Trigram;
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case {{{P}}}C_SettingId_ProfileTrailsColor: {
				UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.User_LightTrailHue;
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case {{{P}}}C_SettingId_ProfileDisplayAds: {
				if ({{{UserStore::P}}}HasGamePermissions(PrivilegeMgr, UpdatedSetting.Permissions)) {
					UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Adverts_Enabled;
				} else {
					UpdatedSetting.Old.ValueBoolean = True;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_ProfileEnablePersonalizedAds: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Adverts_UsePersonnalData;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_VideoDevice: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesText = [];
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					foreach (Key => Device in ParentApp.ManiaPlanet.DisplaySettings.Devices) {
						UpdatedSetting.List.ValuesText.add(Device);
						if (ParentApp.ManiaPlanet.DisplaySettings.DevicesNames.existskey(Key)) {
							UpdatedSetting.List.Labels.add(ParentApp.ManiaPlanet.DisplaySettings.DevicesNames[Key]);
						} else {
							//L16N [Settings] Video device (graphics card) without a name
							UpdatedSetting.List.Labels.add(_("|VideoDevice|Unknown"));
						}
						if (ParentApp.ManiaPlanet.DisplaySettings.Device_NextStart == Device) {
							UpdatedSetting.Old.ValueInteger = Key;
						}
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesText.add("");
					//L16N [Settings] The game did not find any connected video device (graphics card)
					UpdatedSetting.List.Labels.add(_("|VideoDevice|No devices"));
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoDisplayMode: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesDisplayMode.keyof(ParentApp.ManiaPlanet.DisplaySettings.DisplayMode);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoFullscreenResolution: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesInt2 = [];
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					foreach (Key => FullscreenSize in ParentApp.ManiaPlanet.DisplaySettings.FullscreenSizes) {
						UpdatedSetting.List.Labels.add(FullscreenSize.X^" x "^FullscreenSize.Y);
						UpdatedSetting.List.ValuesInt2.add(FullscreenSize);
						if (ParentApp.ManiaPlanet.DisplaySettings.FullscreenSize == FullscreenSize) {
							UpdatedSetting.Old.ValueInteger = Key;
						}
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoWindowResolutionX: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueText = ""^ParentApp.ManiaPlanet.DisplaySettings.WindowSize.X;
				} else {
					UpdatedSetting.Old.ValueText = ""^{{{P}}}Private_ValidateWindowResolutionX(0);
				}
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case {{{P}}}C_SettingId_VideoWindowResolutionY: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueText = ""^ParentApp.ManiaPlanet.DisplaySettings.WindowSize.Y;
				} else {
					UpdatedSetting.Old.ValueText = ""^{{{P}}}Private_ValidateWindowResolutionY(0);
				}
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case {{{P}}}C_SettingId_VideoShowWindowBorder: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueBoolean = !ParentApp.ManiaPlanet.DisplaySettings.WindowBorderless;
				} else {
					UpdatedSetting.Old.ValueBoolean = True;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_VideoAutomaticQuality: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.DisplaySettings.Automatic_Enabled;
				} else {
					UpdatedSetting.Old.ValueBoolean = False;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_VideoAutomaticMinFPS: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueText = ""^ParentApp.ManiaPlanet.DisplaySettings.Automatic_MinFps;
				} else {
					UpdatedSetting.Old.ValueText = ""^{{{P}}}Private_ValidateAutomaticMinFPS(60);
				}
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case {{{P}}}C_SettingId_VideoLimitFPS: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueText = ""^ParentApp.ManiaPlanet.DisplaySettings.MaxFps;
				} else {
					UpdatedSetting.Old.ValueText = ""^{{{P}}}Private_ValidateLimitFPS(120);
				}
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case {{{P}}}C_SettingId_VideoDisplaySync: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesDisplaySync.keyof(ParentApp.ManiaPlanet.DisplaySettings.DisplaySync);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoGPUSync: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesGpuSync.keyof(ParentApp.ManiaPlanet.DisplaySettings.GpuSync);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoForwardAA: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesForwardAA.keyof(ParentApp.ManiaPlanet.DisplaySettings.Antialias_Forward);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoDeferredAA: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesDeferredAA.keyof(ParentApp.ManiaPlanet.DisplaySettings.Antialias_Deferred);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoCanSelectPreset: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.DisplaySettings.Customize_NextStart;
				} else {
					UpdatedSetting.Old.ValueBoolean = False;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
				State.ShowSettingsThatHaveDisplaySettingsPreset = UpdatedSetting.New.ValueBoolean;
			}
			case {{{P}}}C_SettingId_VideoPreset: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesPreset.keyof(ParentApp.ManiaPlanet.DisplaySettings.Preset_NextStart);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoShaderQuality: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesShaderQuality.keyof(ParentApp.ManiaPlanet.DisplaySettings.ShaderQuality_NextStart);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoTexturesQuality: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesInteger.keyof(ParentApp.ManiaPlanet.DisplaySettings.TexturesQuality_NextStart);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoShadows: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesShadows.keyof(ParentApp.ManiaPlanet.DisplaySettings.Shadows_NextStart);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoTextureFiltering: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesTextureFiltering.keyof(ParentApp.ManiaPlanet.DisplaySettings.TextureFiltering);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoVehicleReflect: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesVehicleReflect.keyof(ParentApp.ManiaPlanet.DisplaySettings.VehicleReflect);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoWaterReflect: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesWaterReflect.keyof(ParentApp.ManiaPlanet.DisplaySettings.WaterReflect);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoEverywhereReflect: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueBoolean = (ParentApp.ManiaPlanet.DisplaySettings.EverywhereReflect == CDisplaySettings::EEverywhereReflect::Enabled);
				} else {
					UpdatedSetting.Old.ValueBoolean = True;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_VideoBloomHDR: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesFxBloomHdr.keyof(ParentApp.ManiaPlanet.DisplaySettings.FxBloomHdr);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoMotionBlur: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueBoolean = (ParentApp.ManiaPlanet.DisplaySettings.FxMotionBlur == CDisplaySettings::EFxMotionBlur::Enabled);
				} else {
					UpdatedSetting.Old.ValueBoolean = True;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_VideoMotionBlurIntensity: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.DisplaySettings.FxMotionBlurIntens;
				} else {
					UpdatedSetting.Old.ValueReal = 0.;
				}
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case {{{P}}}C_SettingId_VideoSlowMotionBlur: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueBoolean = (ParentApp.ManiaPlanet.DisplaySettings.FxBlur == CDisplaySettings::EFxBlur::Enabled);
				} else {
					UpdatedSetting.Old.ValueBoolean = True;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_VideoOpponentCustomization: {
				declare Integer Key = UpdatedSetting.List.ValuesCustomPlayerModels.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Custom_PlayerModels);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				} else {
					UpdatedSetting.Old.ValueInteger = 0;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoPerformanceQuality: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesConsoleResolution.keyof(ParentApp.ManiaPlanet.DisplaySettings.ConsoleResolution);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_VideoOutputScale: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.DisplaySettings.ConsoleOutputScale;
					UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
				}
			}
			case {{{P}}}C_SettingId_SoundEnable: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.AudioSettings_EnableAudio;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SoundDevice: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesText = [];
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.AudioSettings != Null) {
					foreach (Key => Device in ParentApp.ManiaPlanet.AudioSettings.Devices) {
						UpdatedSetting.List.ValuesText.add(Device);
						UpdatedSetting.List.Labels.add(Device);
						if (ParentApp.ManiaPlanet.AudioSettings.Device_NextApply == Device) {
							UpdatedSetting.Old.ValueInteger = Key;
						}
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesText.add("");
					//L16N [Settings] The game did not find any connected audio device
					UpdatedSetting.List.Labels.add(_("|AudioDevice|No devices"));
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_SoundMusicVolume: {
				UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.AudioSettings_MasterMusicVolume;
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case {{{P}}}C_SettingId_SoundMasterVolume: {
				UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.AudioSettings_MasterSoundVolume;
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case {{{P}}}C_SettingId_SoundEffectVolume: {
				UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Scene;
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case {{{P}}}C_SettingId_SoundUIVolume: {
				UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Ui;
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case {{{P}}}C_SettingId_SoundVoiceChatAndTTSVolume: {
				UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.AudioSettings.VoiceChat_SpeakerVolume;
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case {{{P}}}C_SettingId_SoundMuteUnfocused: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.AudioSettings_MuteWhenAppUnfocused;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SoundVoiceChat: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.VoiceChat_Enabled;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SoundVoiceChatDeviceIn: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesText = [];
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.AudioSettings != Null) {
					foreach (Key => Device in ParentApp.ManiaPlanet.AudioSettings.VoiceChat_Devices_In) {
						UpdatedSetting.List.ValuesText.add(Device);
						UpdatedSetting.List.Labels.add(Device);
						if (ParentApp.ManiaPlanet.AudioSettings.VoiceChat_Device_In_NextApply == Device) {
							UpdatedSetting.Old.ValueInteger = Key;
						}
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesText.add("");
					//L16N [Settings] The game did not find any connected audio device
					UpdatedSetting.List.Labels.add(_("|AudioDevice|No devices"));
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_SoundVoiceChatDeviceOut: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesText = [];
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.AudioSettings != Null) {
					foreach (Key => Device in ParentApp.ManiaPlanet.AudioSettings.VoiceChat_Devices_Out) {
						UpdatedSetting.List.ValuesText.add(Device);
						UpdatedSetting.List.Labels.add(Device);
						if (ParentApp.ManiaPlanet.AudioSettings.VoiceChat_Device_Out_NextApply == Device) {
							UpdatedSetting.Old.ValueInteger = Key;
						}
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesText.add("");
					//L16N [Settings] The game did not find any connected audio device
					UpdatedSetting.List.Labels.add(_("|AudioDevice|No devices"));
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_SoundVoiceChatVoiceDetectionMode: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.AudioSettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesVoiceDetectionMode.keyof(ParentApp.ManiaPlanet.AudioSettings.VoiceChat_VoiceDetection_Mode);
					if (Key >= 0 && UpdatedSetting.List.ValuesVoiceDetectionMode.existskey(Key)) { // @TODO (to remove later) In case player select PPT on PC and is now on console, reset to automatic voice detection (see trackmania-next/tmnext/-/issues/4757)
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
		
				State.VoiceChatVoiceDetectionManualSensitivity = (UpdatedSetting.New.ValueInteger == UpdatedSetting.List.ValuesVoiceDetectionMode.keyof(NSystemConfig::EVoiceDetectionMode::Manual));
			}
			case {{{P}}}C_SettingId_SoundVoiceChatVoiceDetectionSensitivity: { // Slider can not be set to <1., 0.> so we use the inverse of the value
				UpdatedSetting.Old.ValueReal = {{{P}}}ML::Clamp(1. - ParentApp.ManiaPlanet.AudioSettings.VoiceChat_VoiceDetection_Sensitivity, 0., 1.);
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case {{{P}}}C_SettingId_SoundVoiceChatLoopback: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.VoiceChat_Loopback;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SoundSpeechToText: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.STT_Enabled;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SoundTextToSpeech: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.TTS_Enabled;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SendTextAsVoice: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.VoiceChat_SendTextAsVoice;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_ControlAnalogVehicleSelection: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesText = [];
				UpdatedSetting.Old.ValueInteger = 0;
				State.ControlVehicleModels = [];
				State.ControlVehicleModel = "";
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					if (Vehicle.ModelName != "Unassigned") {
						UpdatedSetting.List.ValuesText.add(Vehicle.ModelName);
						UpdatedSetting.List.Labels.add(Vehicle.ModelDisplayName);
						State.ControlVehicleModels.add(Vehicle.ModelName);
						if (State.ControlVehicleModel == "") {
							State.ControlVehicleModel = Vehicle.ModelName;
						}
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesText.add(State.ControlVehicleModel);
					UpdatedSetting.List.Labels.add("-");
					State.ControlVehicleModels.add(State.ControlVehicleModel);
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_ControlAnalogSensitivity: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName] = Vehicle.AnalogSensitivity;
					UpdatedSetting.New.ValueControlAnalogReal[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
			case {{{P}}}C_SettingId_ControlAnalogDeadZone: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName] = Vehicle.AnalogDeadZone;
					UpdatedSetting.New.ValueControlAnalogReal[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
			case {{{P}}}C_SettingId_ControlAnalogRumbleIntensity: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName] = Vehicle.RumbleIntensity;
					UpdatedSetting.New.ValueControlAnalogReal[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
			case {{{P}}}C_SettingId_ControlTriggerHapticFeedbackEnabled: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName] = Vehicle.HapticFeedbackEnabled;
					UpdatedSetting.New.ValueControlAnalogBoolean[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
			case {{{P}}}C_SettingId_ControlInvertSteer: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName] = Vehicle.InvertSteer;
					UpdatedSetting.New.ValueControlAnalogBoolean[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
			case {{{P}}}C_SettingId_ControlAnalogWheelMode: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName] = Vehicle.AnalogSteerV2;
					UpdatedSetting.New.ValueControlAnalogBoolean[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
			case {{{P}}}C_SettingId_ControlAccelIsToggleMode: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName] = Vehicle.AccelIsToggleMode;
					UpdatedSetting.New.ValueControlAnalogBoolean[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
			case {{{P}}}C_SettingId_ControlBrakeIsToggleMode: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName] = Vehicle.BrakeIsToggleMode;
					UpdatedSetting.New.ValueControlAnalogBoolean[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
			case {{{P}}}C_SettingId_ControlAnalogCenterSpringIntensity: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName] = Vehicle.CenterSpringIntensity;
					UpdatedSetting.New.ValueControlAnalogReal[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
			case {{{P}}}C_SettingId_ControlDevice: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesInteger = [];
				UpdatedSetting.Old.ValueInteger = 0;
				State.ControlControllerId = -1;
				State.InputPadsCount = Input.Pads.count;
				declare Integer LowerIdleDuration = -1;
				foreach (Key => Pad in Input.Pads) {
					UpdatedSetting.List.ValuesInteger.add(Pad.ControllerId);
					UpdatedSetting.List.Labels.add({{{P}}}TL::GetTranslatedText(Pad.ModelName));
					// Select the last used controller
					if (LowerIdleDuration == -1 || Pad.IdleDuration < LowerIdleDuration) {
						LowerIdleDuration = Pad.IdleDuration;
						State.ControlControllerId = Pad.ControllerId;
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesInteger.add(State.ControlControllerId);
					//L16N [Settings] The game did not find any connected audio device
					UpdatedSetting.List.Labels.add(_("|InputDevice|No devices"));
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_HUDMarkersType: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesPlayerInfoDisplayType.keyof(ParentApp.ManiaPlanet.Interface_PlayerInfoDisplayType);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_HUDMarkersSize: {
				UpdatedSetting.Old.ValueInteger = ParentApp.ManiaPlanet.Interface_PlayerInfoDisplaySize;
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_HUDPrioritizeAlternateCam1: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_UseAlternateCam1;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_HUDPrioritizeAlternateCam2: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_UseAlternateCam2;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_HUDPrioritizeAlternateCam3: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_UseOldInternalCam;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_HUDInternalCamCarVisibility: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesPlayerVisibility.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_InternalCamLocalPlayerVisibility);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_HUDDefaultOpponentVisibility: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesPlayerVisibility.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Online_DefaultOpponentVisibility);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_HUDRoadsideSpectatorVisibility: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesRoadsideSpectatorVisibility.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Online_RoadsideSpectatorVisibility);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_HUDEnableSpecialBlockMessage: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_ShowSpecialsFeedback;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_HUDAlwaysDisplayTrackRecords: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_AlwaysDisplayRecords;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_HUDChatAllowHide: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_AllowChatHiding;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_HUDChatBackground: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesChatBackground.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_IngameChatBackground);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_HUDChatTextSize: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesChatTextSize.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_IngameChatTextSize);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_HUDShowPerformance: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesShowPerformance.keyof(ParentApp.ManiaPlanet.DisplaySettings.ShowPerformance);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_SystemLanguage: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesText = [];
				UpdatedSetting.Old.ValueInteger = 0;
				foreach (Key => Language in ParentApp.ManiaPlanet.Language_AvailableChoices) {
					UpdatedSetting.List.ValuesText.add(Language);
					if (ParentApp.ManiaPlanet.Language_AvailableChoices_Names.existskey(Key)) {
						UpdatedSetting.List.Labels.add(ParentApp.ManiaPlanet.Language_AvailableChoices_Names[Key]);
					} else {
						UpdatedSetting.List.Labels.add(Language);
					}
					if (Language == ParentApp.ManiaPlanet.Language_NextStart) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesText.add("");
					UpdatedSetting.List.Labels.add("-");
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_SystemOnlineServicesStatus: {
				UpdatedSetting.ButtonText = {{{OnlineServicesStatusStore::P}}}GetCurrentStatusNameAndIcon();
			}
			case {{{P}}}C_SettingId_SystemNetworkSpeed: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesNetworkSpeed.keyof(ParentApp.ManiaPlanet.NetworkSpeed);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_SystemNetworkSpeedDownload: {
				UpdatedSetting.Old.ValueText = ""^ParentApp.ManiaPlanet.NetworkSpeed_CustomDownload;
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case {{{P}}}C_SettingId_SystemNetworkSpeedUpload: {
				UpdatedSetting.Old.ValueText = ""^ParentApp.ManiaPlanet.NetworkSpeed_CustomUpload;
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case {{{P}}}C_SettingId_SystemNetworkCrossPlay: {
				UpdatedSetting.Old.ValueBoolean = {{{UserStore::P}}}IsCrossPlayActive();
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SystemDownloadSkin: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.Network_EnableVehicleSkinLocators;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SystemDownloadMapMod: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.Network_EnableMapModLocators;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SystemDownloadSign: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.Network_EnableMapSkinLocators;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SystemEnableTrackEditorQuickStart: {
				if ({{{UserStore::P}}}HasGamePermissions(PrivilegeMgr, UpdatedSetting.Permissions)) {
					UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorUseQuickstart;
				} else {
					UpdatedSetting.Old.ValueBoolean = False;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
				State.TrackEditorQuickStartEnabled = UpdatedSetting.New.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SystemTrackEditorQuickStartUseGamepadController: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesBoolean.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartUseGamepad);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_SystemTrackEditorQuickStartDifficulty: {
				UpdatedSetting.Old.ValueInteger = 1; //< Advanced difficulty by default
				UpdatedSetting.List.Labels = [_("|MapEditorDifficulty|Simple"), _("|MapEditorDifficulty|Advanced")];
				UpdatedSetting.List.MapEditorDifficulty = [CUserV2Profile::EMapEditorDifficulty::Simple, CUserV2Profile::EMapEditorDifficulty::Advanced];
				if (ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartUseGamepad || {{{P}}}Platform::IsFromFirstParty(System)) {
					UpdatedSetting.List.Labels.add(_("|MapEditorDifficulty|Expert"));
					UpdatedSetting.List.MapEditorDifficulty.add(CUserV2Profile::EMapEditorDifficulty::Expert);
				}

				declare Integer Key = UpdatedSetting.List.MapEditorDifficulty.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartDifficulty);
				if (Key >= 0 && Key < UpdatedSetting.List.MapEditorDifficulty.count) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_SystemTrackEditorQuickStartMood: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesMapEditorMood.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartMood);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case {{{P}}}C_SettingId_SystemColorblindMode: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_ColorblindMode;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SystemAutoSkipStartScreens: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.SystemSettings_SkipIntro;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case {{{P}}}C_SettingId_SystemScreenshotExtension: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesScreenshotExt.keyof(ParentApp.ManiaPlanet.DisplaySettings.ScreenshotExt);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
		}

		State.Settings[Setting.Id] = UpdatedSetting;
	}
	
	State = {{{P}}}Private_SetControlVehicleModel(State, State.ControlVehicleModel);
	State = {{{P}}}Private_SetControlControllerId(State, State.ControlControllerId);

	if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
		State.WindowSize = ParentApp.ManiaPlanet.DisplaySettings.WindowSize;
	}
	State.MasterVolume = ParentApp.ManiaPlanet.AudioSettings_MasterSoundVolume;
	State.EffectVolume = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Scene;
	State.UIVolume = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Ui;
	State.MusicVolume = ParentApp.ManiaPlanet.AudioSettings_MasterMusicVolume;
	
	return State;
}

// Update the status of the settings
{{{P}}}K_State {{{P}}}Private_SetSettingsStatus({{{P}}}K_State _State, Integer[] _SettingIds, Integer _Status) {
	declare {{{P}}}K_State State = _State;

	foreach (SettingId in _SettingIds) {
		if (State.Settings.existskey(SettingId)) {
			State.Settings[SettingId].Status = _Status;
		}
	}

	State = {{{P}}}Private_UpdateSettingsList(State);

	return State;
}

// Enable or disable the component.
{{{P}}}K_State {{{P}}}Private_Enable(
	{{{P}}}K_State _State,
	Boolean _Enabled,
	Boolean _ForceUpdate,
	Boolean _ResetCategory
) {
	if (!_ForceUpdate && _State.ComponentEnabled == _Enabled) return _State;

	declare {{{P}}}K_State State = _State;

	State.ComponentEnabled = _Enabled;
	State.IsEditingTextField = {{{P}}}C_SettingId_NullId;
	State.CanResetIsEditingTextField = 0;
	{{{P}}}Private_UpdateNavigationLock(State);

	if (State.ComponentEnabled) {
		// Load settings value
		ParentApp.ManiaPlanet.DisplaySettings_LoadCurrent();
		ParentApp.ManiaPlanet.AudioSettings_LoadCurrent();
		State.CanTryToReloadDisplaySettings = (ParentApp.ManiaPlanet.DisplaySettings != Null);
		State.CanTryToReloadAudioSettings = (ParentApp.ManiaPlanet.AudioSettings != Null);
		{{{OnlineServicesStatusStore::P}}}Action_GetStatus(This);
		State = {{{P}}}Private_LoadSettings(State);
		State = {{{P}}}Private_UpdateSettingsList(State);
		if (State.LatencyTestEnabled) {
			{{{LatencyTest::P}}}RetrieveLatencyResults(This);
		}

		// Speech to text (only available for US players)
		// This verification must be made when opening the component because the variable is not yet initialized in MainStart
		if (!ParentApp.ManiaPlanet.UserMgr.MainUserProfile.STT_Available) {
			State = {{{P}}}Private_SetSettingsStatus(State, [{{{P}}}C_SettingId_SoundSpeechToText], {{{P}}}C_SettingStatus_Hidden);
		}

		// Text to speech context
		{{{P}}}G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Enter({{{P}}}C_TTSContextLevel_Page);
		State.PreviouslyFocusedTabId = -1;
		State.PreviouslyFocusedSectionId = -1;
		State.PreviouslyFocusedSettingId = -1;

		// Update display
		if (_ResetCategory || !State.ScrollSettingIds.existskey(State.DisplayedCategory)) {
			State = {{{P}}}Private_SetDisplayedCategory(State, State.DefaultCategory, False, True);
		} else {
			State = {{{P}}}Private_DisplayCategory(State);
		}
		{{{P}}}Private_DisplayUserInfo(State, LocalUser);

		// Focus the settings scroll by default
		if (!{{{Navigation::P}}}IsLocked(State.Controls.Scroll_Settings)) {
			State = {{{P}}}Private_Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}"), State.Controls.Scroll_Settings);
		} else if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
			State = {{{P}}}Private_Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}"), State.Controls.Button_Back);
		}
	} else {
		if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
			ParentApp.ManiaPlanet.DisplaySettings_Unload();
		}
		if (ParentApp.ManiaPlanet.AudioSettings != Null) {
			ParentApp.ManiaPlanet.AudioSettings_Unload();
		}
		State.CanTryToReloadDisplaySettings = False;
		State.CanTryToReloadAudioSettings = False;

		// Close the discard changes pop-up if it was open
		if (State.DiscardPopUpDisplayed) {
			State = {{{P}}}Private_DisplayDiscardChangesPopUp(State, False);
		}

		// Close the activate key pop-up if it was open
		if (State.ActivateKeyPopUpDisplayed) {
			State = {{{P}}}Private_DisplayActivateKeyPopUp(State, False);
		}

		// Hide calibration arrows is they were visible
		if (State.IsAreaCalibrationDisplayed) {
			State = {{{P}}}Private_DisplayCalibrationArrows(State, False, False);
		}

		// Reset the activate key setting
		State = {{{P}}}Private_UpdateSettingValue(State, {{{P}}}C_SettingId_ProfileActivateKey, {{{P}}}K_Values { ValueText = "" });
		{{{P}}}G_Request_PostActivateKey = {{{P}}}Http::Destroy({{{P}}}G_Request_PostActivateKey);
		{{{P}}}G_Request_PostCheckKey = {{{P}}}Http::Destroy({{{P}}}G_Request_PostCheckKey);

		State.PrivilegesCheck.Check = {{{P}}}Privileges::Check_Destroy(State.PrivilegesCheck.Check);
		
		State = {{{P}}}Private_HideAlertMessage(State);
		State.DraggedSlider.IsDragged = False;

		{{{P}}}G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Leave({{{P}}}G_TTSContextIdent_Tabs);
		{{{P}}}G_TTSContextIdent_Section = ParentApp.TTS_Context_Leave({{{P}}}G_TTSContextIdent_Section);
		{{{P}}}G_TTSContextIdent_Setting = ParentApp.TTS_Context_Leave({{{P}}}G_TTSContextIdent_Setting);
	}

	return State;
}

// Convert a `CDisplaySettings` object to a `K_DisplaySettingsPreset` structure
{{{P}}}K_DisplaySettingsPreset {{{P}}}Private_ConvertDisplaySettings(CDisplaySettings _DisplaySettings) {
	return {{{P}}}K_DisplaySettingsPreset {
		ShaderQuality_NextStart = _DisplaySettings.ShaderQuality_NextStart,
		Shadows_NextStart = _DisplaySettings.Shadows_NextStart,
		TexturesQuality_NextStart = _DisplaySettings.TexturesQuality_NextStart,
		EverywhereReflect = _DisplaySettings.EverywhereReflect,
		WaterReflect = _DisplaySettings.WaterReflect,
		VehicleReflect = _DisplaySettings.VehicleReflect,
		FxBloomHdr = _DisplaySettings.FxBloomHdr,
		FxMotionBlur = _DisplaySettings.FxMotionBlur,
		FxBlur = _DisplaySettings.FxBlur
	};
}

// Assign the values of a `K_DisplaySettingsPreset` to a `CDisplaySettings` object
Void {{{P}}}Private_ApplyDisplaySettings(CDisplaySettings _DisplaySettingsToUpdate, {{{P}}}K_DisplaySettingsPreset _DisplaySettingToApply) {
	_DisplaySettingsToUpdate.ShaderQuality_NextStart = _DisplaySettingToApply.ShaderQuality_NextStart;
	_DisplaySettingsToUpdate.Shadows_NextStart = _DisplaySettingToApply.Shadows_NextStart;
	_DisplaySettingsToUpdate.TexturesQuality_NextStart = _DisplaySettingToApply.TexturesQuality_NextStart;
	_DisplaySettingsToUpdate.EverywhereReflect = _DisplaySettingToApply.EverywhereReflect;
	_DisplaySettingsToUpdate.WaterReflect = _DisplaySettingToApply.WaterReflect;
	_DisplaySettingsToUpdate.VehicleReflect = _DisplaySettingToApply.VehicleReflect;
	_DisplaySettingsToUpdate.FxBloomHdr = _DisplaySettingToApply.FxBloomHdr;
	_DisplaySettingsToUpdate.FxMotionBlur = _DisplaySettingToApply.FxMotionBlur;
	_DisplaySettingsToUpdate.FxBlur = _DisplaySettingToApply.FxBlur;
}

// Gather the different display settings presets
{{{P}}}K_State {{{P}}}Private_RetrieveDisplaySettingsPresets({{{P}}}K_State _State) {
	declare {{{P}}}K_State State = _State;

	// Retrieving the presets can be costly
	// To avoid doing that each time a settings component is instantiated
	// we cache the presets in a variable shared everywhere (menu and game mode)
	// If the presets are already in the cache we return them
	// Otherwise we retrieve them and save them in the cache
	declare {{{P}}}K_DisplaySettingsPreset[CDisplaySettings::EPreset] {{{P}}}DisplaySettingsPresetsCache for System;
	if ({{{P}}}DisplaySettingsPresetsCache.count > 0) {
		State.DisplaySettingsPresets = {{{P}}}DisplaySettingsPresetsCache;
	} else {
		declare Boolean NeedToUnloadDisplaySettings = False;
		if (ParentApp.ManiaPlanet.DisplaySettings == Null) {
			ParentApp.ManiaPlanet.DisplaySettings_LoadCurrent();
			NeedToUnloadDisplaySettings = True;
		}

		if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
			// Save the original display settings
			declare CDisplaySettings::EPreset OriginalPreset = ParentApp.ManiaPlanet.DisplaySettings.Preset_NextStart;
			declare {{{P}}}K_DisplaySettingsPreset OriginalDisplaySettings = {{{P}}}Private_ConvertDisplaySettings(ParentApp.ManiaPlanet.DisplaySettings);

			// Loop through the presets to gather the display settings values for each one
			State.DisplaySettingsPresets = [];
			declare CDisplaySettings::EPreset[] Presets = [
				CDisplaySettings::EPreset::None,
				CDisplaySettings::EPreset::VeryFast,
				CDisplaySettings::EPreset::Fast,
				CDisplaySettings::EPreset::Nice,
				CDisplaySettings::EPreset::VeryNice
			];
			foreach (Preset in Presets) {
				ParentApp.ManiaPlanet.DisplaySettings.Preset_NextStart = Preset;
				ParentApp.ManiaPlanet.DisplaySettings_Apply();
				State.DisplaySettingsPresets[Preset] = {{{P}}}Private_ConvertDisplaySettings(ParentApp.ManiaPlanet.DisplaySettings);
			}
			{{{P}}}DisplaySettingsPresetsCache = State.DisplaySettingsPresets;

			// Restore the original display settings
			ParentApp.ManiaPlanet.DisplaySettings.Preset_NextStart = OriginalPreset;
			{{{P}}}Private_ApplyDisplaySettings(ParentApp.ManiaPlanet.DisplaySettings, OriginalDisplaySettings);
			ParentApp.ManiaPlanet.DisplaySettings_Apply();
			if (NeedToUnloadDisplaySettings) {
				ParentApp.ManiaPlanet.DisplaySettings_Unload();
			}
		}
	}

	return State;
}

// Initializes which modes are available on the current plaform
{{{P}}}K_State {{{P}}}Private_InitializePerformanceQualityModes({{{P}}}K_State _State) {
	if (!_State.Settings.existskey({{{P}}}C_SettingId_VideoPerformanceQuality)) return _State;

	declare {{{P}}}K_State State = _State;

	declare Boolean NeedToUnloadDisplaySettings = False;
	if (ParentApp.ManiaPlanet.DisplaySettings == Null) {
		ParentApp.ManiaPlanet.DisplaySettings_LoadCurrent();
		NeedToUnloadDisplaySettings = True;
	}

	if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
		// Find how many modes are available
		declare {{{P}}}K_Setting Setting = State.Settings[{{{P}}}C_SettingId_VideoPerformanceQuality];
		declare CDisplaySettings::EConsoleResolution[] ConsoleResolutionValues;
		declare Text[] ConsoleResolutionLabels;
		foreach (Key => ConsoleResolution in Setting.List.ValuesConsoleResolution) {
			if (ParentApp.ManiaPlanet.DisplaySettings.ConsoleResolution_IsAvailable(ConsoleResolution)) {
				ConsoleResolutionValues.add(ConsoleResolution);
				ConsoleResolutionLabels.add(Setting.List.Labels[Key]);
			}
		}

		// If only one mode is available disable the setting
		if (ConsoleResolutionValues.count <= 1) {
			State.Settings.removekey({{{P}}}C_SettingId_VideoPerformanceQuality);
		}
		// If some modes are not available remove them
		else if (ConsoleResolutionValues.count < Setting.List.ValuesConsoleResolution.count) {
			Setting.List.ValuesConsoleResolution = ConsoleResolutionValues;
			Setting.List.Labels = ConsoleResolutionLabels;
			Setting.New.ValueInteger = {{{P}}}ML::Clamp(Setting.New.ValueInteger, 0, Setting.List.ValuesConsoleResolution.count - 1);
			Setting.Old.ValueInteger = {{{P}}}ML::Clamp(Setting.Old.ValueInteger, 0, Setting.List.ValuesConsoleResolution.count - 1);
			State.Settings[{{{P}}}C_SettingId_VideoPerformanceQuality] = Setting;
		}

		if (NeedToUnloadDisplaySettings) {
			ParentApp.ManiaPlanet.DisplaySettings_Unload();
		}
	}

	return State;
}

// Initialize the component with a list of settings to display
{{{P}}}K_State {{{P}}}Private_Initialize({{{P}}}K_State _State, {{{P}}}K_Setting[] _Settings) {
	declare {{{P}}}K_State State = _State;

	assert(ParentApp != Null && ParentApp.ManiaPlanet != Null, "The 'Settings' component can only be used in contexts that have access to `ParentApp.Maniaplanet`");

	State.ScrollSettingIds = [];
	State.Settings = [];
	State.Bindings = [];
	State.BindingsKeyShift = 0;
	State.IsEditingTextField = {{{P}}}C_SettingId_NullId;
	State.CanResetIsEditingTextField = 0;
	State.IsWaitingBind = False;
	State.IsWaitingBind_PlaySound = False;
	State.LastFocusedSettingKey = [];
	State.DisplayedCategory = {{{P}}}C_SettingCategory_Null;
	State.DefaultCategory = {{{P}}}C_SettingCategory_Null;
	State.FocusedSectionId = {{{P}}}C_SettingId_NullId;
	State.CanTryToReloadDisplaySettings = False;
	State.CanTryToReloadAudioSettings = False;
	State.CreditsEnabled = False;
	State.ProfileEnabled = False;
	State.LatencyTestEnabled = False;
	State.FocusedSettingType = {{{P}}}C_SettingType_Null;
	State.ScrollIsFocused = False;
	State.ControllerInfoEnabled = False;
	State.CanEditSlider = False;
	State.SettingIsLocked = False;
	State.AlertMessageEndTime = -1;
	State.DraggedSlider.IsDragged = False;
	State.ShowSettingsThatHaveDisplaySettingsPreset = False;
	State.TrackEditorQuickStartEnabled = False;
	State.VoiceChatVoiceDetectionManualSensitivity = False;

	// Check how many vehicles are available
	declare Integer VehiclesNb = 0;
	foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
		if (Vehicle.ModelName != "Unassigned") {
			VehiclesNb += 1;
		}
	}
	State.VehicleSelectionEnabled = VehiclesNb > 1;

	State = {{{P}}}Private_RetrieveDisplaySettingsPresets(State);
	
	foreach (Setting in _Settings) {
		assert(
			!State.Settings.existskey(Setting.Id),
			"Setting '"^Setting.Name^"' use the same id that another setting"
		);
		assert(
			Setting.Privileges.count <= 0 || (
				Setting.Type == {{{P}}}C_SettingType_Checkbox ||
				Setting.Type == {{{P}}}C_SettingType_List ||
				Setting.Type == {{{P}}}C_SettingType_Slider ||
				Setting.Type == {{{P}}}C_SettingType_Button
			),
			"Privileges check not implemented for this type of setting. Name: '"^Setting.Name^"', Type : "^Setting.Type^"."
		);
		State.Settings[Setting.Id] = Setting;
	}
	
	State = {{{P}}}Private_InitializePerformanceQualityModes(State);
	State = {{{P}}}Private_UpdateSettingsList(State);
	{{{P}}}Private_UpdateDimmer(State);

	return State;
}

// Update the list of the settings
{{{P}}}K_State {{{P}}}Private_SetSettingsList({{{P}}}K_State _State, Integer[] _SettingIds, {{{P}}}K_List _List) {
	declare {{{P}}}K_State State = _State;

	foreach (SettingId in _SettingIds) {
		if (State.Settings.existskey(SettingId)) {
			State.Settings[SettingId].List = _List;
		}
	}

	State = {{{P}}}Private_UpdateSettingsList(State);

	return State;
}

// Update the availability of the credits
{{{P}}}K_State {{{P}}}Private_EnableCredits({{{P}}}K_State _State, Boolean _Enabled) {
	if (_State.CreditsEnabled == _Enabled) return _State;

	declare {{{P}}}K_State State = _State;
	State.CreditsEnabled = _Enabled;
	State = {{{P}}}Private_UpdateSettingsList(State);
	return State;
}

// Update the availability of the profile page
{{{P}}}K_State {{{P}}}Private_EnableProfile({{{P}}}K_State _State, Boolean _Enabled) {
	if (_State.ProfileEnabled == _Enabled) return _State;

	declare {{{P}}}K_State State = _State;
	State.ProfileEnabled = _Enabled;
	State = {{{P}}}Private_UpdateSettingsList(State);
	return State;
}

// Update the availability of the latency test
{{{P}}}K_State {{{P}}}Private_EnableLatencyTest({{{P}}}K_State _State, Boolean _Enabled) {
	if (_State.LatencyTestEnabled == _Enabled) return _State;

	declare {{{P}}}K_State State = _State;
	State.LatencyTestEnabled = _Enabled;
	State = {{{P}}}Private_UpdateSettingsList(State);
	return State;
}

// Public API

// Enable or disable the component
Void {{{P}}}Enable(Boolean _Enabled, Boolean _ResetCategory) {
	{{{P}}}G_State = {{{P}}}Private_Enable({{{P}}}G_State, _Enabled, False, _ResetCategory);
}
Void {{{P}}}Enable(Boolean _Enabled) {
	{{{P}}}Enable(_Enabled, True);
}

// Initialize the component with a list of settings to display
Void {{{P}}}Initialize({{{P}}}K_Setting[] _Settings) {
	{{{P}}}G_State = {{{P}}}Private_Initialize({{{P}}}G_State, _Settings);
}

// Use navigation events from the manialink
Void {{{P}}}UseLocalEvents(Boolean _UseLocalEvents) {
	{{{Scroll::P}}}UseLocalEvents(This, _UseLocalEvents);
	{{{Navigation::P}}}UseLocalEvents(This, _UseLocalEvents);
}

// Update the status of the settings
Void {{{P}}}SetSettingsStatus(Integer[] _SettingIds, Integer _Status) {
	{{{P}}}G_State = {{{P}}}Private_SetSettingsStatus({{{P}}}G_State, _SettingIds, _Status);
}
Void {{{P}}}SetSettingStatus(Integer _SettingId, Integer _Status) {
	{{{P}}}SetSettingsStatus([_SettingId], _Status);
}

// Update the list of the settings
Void {{{P}}}SetSettingsList(Integer[] _SettingIds, {{{P}}}K_List _List) {
	{{{P}}}G_State = {{{P}}}Private_SetSettingsList({{{P}}}G_State, _SettingIds, _List);
}
Void {{{P}}}SetSettingList(Integer _SettingId, {{{P}}}K_List _List) {
	{{{P}}}SetSettingsList([_SettingId], _List);
}

// Update the availability of the credits
Void {{{P}}}EnableCredits(Boolean _Enabled) {
	{{{P}}}G_State = {{{P}}}Private_EnableCredits({{{P}}}G_State, _Enabled);
}

// Update the availability of the profile page
Void {{{P}}}EnableProfile(Boolean _Enabled) {
	{{{P}}}G_State = {{{P}}}Private_EnableProfile({{{P}}}G_State, _Enabled);
}

// Update the availability of the latency test
Void {{{P}}}EnableLatencyTest(Boolean _Enabled) {
	{{{P}}}G_State = {{{P}}}Private_EnableLatencyTest({{{P}}}G_State, _Enabled);
}

// Display the main menu `ControllerInfo` or the internal `MenuButtonsList`
Void {{{P}}}EnableControllerInfo(Boolean _Enabled) {
	{{{P}}}G_State = {{{P}}}Private_UpdateControllerInfo({{{P}}}G_State, {{{P}}}G_State.FocusedSettingType, {{{P}}}G_State.ScrollIsFocused, _Enabled, {{{P}}}G_State.CanEditSlider, {{{P}}}G_State.SettingIsLocked);
}

// Enable the onboarding mode of settings
Void {{{P}}}EnableOnboardingMode(Boolean _Enabled) {
	{{{P}}}G_State.IsOnboardingModeEnabled = _Enabled;
	{{{P}}}G_State.Controls.ButtonIcon_Back.Visible = !_Enabled;
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation({{{P}}}G_State.Controls.Button_Back, !_Enabled);
	if (_Enabled) {
		{{{ExpendableButton::P}}}SetText(This, {{{P}}}G_State.Controls.Button_Apply, "{{{Text_Continue}}}");
	} else {
		{{{ExpendableButton::P}}}SetText(This, {{{P}}}G_State.Controls.Button_Apply, "{{{Text_Apply}}}");
	}
}

// Control the visibility of the background
Void {{{P}}}SetBackgroundVisibility(Boolean _Visible) {
	{{{P}}}G_State.Controls.Quad_Background.Visible = _Visible;
}

// Control the visibility of the player card
Void {{{P}}}SetPlayerCardVisibility(Boolean _Visible) {
	{{{P}}}G_State.IsPlayerCardForcedHide = !_Visible;
	{{{P}}}Private_DisplayUserInfo({{{P}}}G_State, LocalUser);
}

// Control the visibility of the navigation tabs
Void {{{P}}}SetNavigationTabsVisibility(Boolean _Visible) {
	{{{P}}}G_State.Controls.NavigationTabs_Categories.Visible = _Visible;
}

***MainInit***
***
declare CMlFrame {{{P}}}Frame_Global;
***

***MainStart***
***
{{{P}}}Frame_Global <=> (Page.GetFirstChild("{{{P}}}frame-global") as CMlFrame);
{{{P}}}G_State.Controls.NavigationTabs_Categories <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}navigationtabs-categories") as CMlFrame);
{{{P}}}G_State.Controls.Scroll_Settings <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}scroll-settings") as CMlFrame);
{{{P}}}G_State.Controls.Label_InfoTitle <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}label-info-title") as CMlLabel);
{{{P}}}G_State.Controls.Label_InfoDescription <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}label-info-description") as CMlLabel);
{{{P}}}G_State.Controls.Label_InfoAlert <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}label-info-alert") as CMlLabel);
{{{P}}}G_State.Controls.ButtonIcon_Back <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}button-icon-back") as CMlFrame);
{{{P}}}G_State.Controls.Button_Back <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}button-back") as CMlFrame);
{{{P}}}G_State.Controls.Button_Apply <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}button-apply") as CMlFrame);
{{{P}}}G_State.Controls.Frame_PlayerCard <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}frame-player-card") as CMlFrame);
{{{P}}}G_State.Controls.Quad_PlayerFlag <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}quad-player-card-flag") as CMlQuad);
{{{P}}}G_State.Controls.PlayerName_Name <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}playername-player-card-name") as CMlFrame);
{{{P}}}G_State.Controls.Label_PlayerZone <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}label-player-card-zone") as CMlLabel);
{{{P}}}G_State.Controls.Frame_OnlineServicesStatusCard <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}online-services-status-card") as CMlFrame);
{{{P}}}G_State.Controls.PopUp_DiscardChanges <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}pop-up-discard-changes") as CMlFrame);
{{{P}}}G_State.Controls.ButtonList_Settings <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}button-list-settings") as CMlFrame);
{{{P}}}G_State.Controls.Quad_Dimmer <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}quad-dimmer") as CMlQuad);
{{{P}}}G_State.Controls.Label_RestartRequired <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}label-restart-required") as CMlLabel);
{{{P}}}G_State.Controls.Quad_PendingChanges <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}quad-pending-changes") as CMlQuad);
{{{P}}}G_State.Controls.Quad_Background <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}quad-background") as CMlQuad);
{{{P}}}G_State.Controls.PopUp_ActivateKey <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}popupmultichoice-activate-key") as CMlFrame);
{{{P}}}G_State.Controls.Frame_AreaCalibration <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}frame-area-calibration") as CMlFrame);

{{{P}}}PendingEvents = [];

{{{P}}}G_State = {{{P}}}Private_Initialize({{{P}}}G_State, {{{P}}}C_Settings);
{{{P}}}G_State = {{{P}}}Private_Enable({{{P}}}G_State, False, True, True);

{{{Navigation::P}}}Focus(This, {{{P}}}Frame_Global); //< Focus `C_NavGroup_Global`
{{{P}}}G_State = {{{P}}}Private_Focus({{{P}}}G_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}"), {{{P}}}G_State.Controls.Button_Back);

if ({{{P}}}Platform::IsMicrosoft(System)) { // Crossplay setting read only on Xbox (can be set in the console parameters)
	{{{P}}}SetSettingStatus({{{P}}}C_SettingId_SystemNetworkCrossPlay, {{{P}}}C_SettingStatus_MissingPermission);
}

if (ParentApp.ManiaPlanet.SystemSettings_SkipIntro_ReadOnly) { // AutoSkipStartScreens not available on PS5
	{{{P}}}SetSettingStatus({{{P}}}C_SettingId_SystemAutoSkipStartScreens, {{{P}}}C_SettingStatus_Hidden);
}

if ({{{P}}}Platform::IsPC(System)) { // PTT available on PC only for now
	{{{P}}}SetSettingList({{{P}}}C_SettingId_SoundVoiceChatVoiceDetectionMode, {{{P}}}C_List_VoiceChat_VoiceDetectionMode_PC);
}
***

***MainLoop***
***
{{{P}}}PendingEvents = [];

if ({{{P}}}G_State.ComponentEnabled) {
	// External code (eg: the old settings page)
	// can unload the `DisplaySettings` or `AudioSettings` objects
	// while this page still need them. If this is the case, we try to reload them.
	if (ParentApp.ManiaPlanet.DisplaySettings == Null && {{{P}}}G_State.CanTryToReloadDisplaySettings) {
		ParentApp.ManiaPlanet.DisplaySettings_LoadCurrent();
	}
	if (ParentApp.ManiaPlanet.AudioSettings == Null && {{{P}}}G_State.CanTryToReloadAudioSettings) {
		ParentApp.ManiaPlanet.AudioSettings_LoadCurrent();
	}

	// Delay the textfield edition reset by two frames
	// to prevent the user from editing the setting
	// again if they click on the line while already
	// editing the setting
	if ({{{P}}}G_State.CanResetIsEditingTextField > 0) {
		{{{P}}}G_State.CanResetIsEditingTextField -= 1;
		if ({{{P}}}G_State.CanResetIsEditingTextField <= 0) {
			{{{P}}}G_State.IsEditingTextField = {{{P}}}C_SettingId_NullId;
		}
	}

	// The user finished editing bindings
	if ({{{P}}}G_State.IsWaitingBind && ParentApp.ManiaPlanet.Dialog_IsFinished) {
		{{{P}}}G_State.IsWaitingBind = False;
		// Reload bindings and refresh display
		{{{P}}}G_State = {{{P}}}Private_SetControlControllerId({{{P}}}G_State, {{{P}}}G_State.ControlControllerId);
		{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
		{{{P}}}G_State = {{{P}}}Private_UpdateControllerInfo({{{P}}}G_State);
		{{{P}}}Private_UpdateDimmer({{{P}}}G_State);

		if ({{{P}}}G_State.IsWaitingBind_PlaySound) {
			{{{P}}}G_State.IsWaitingBind_PlaySound = False;
			if (ParentApp.ManiaPlanet.Dialog_Success) {
				{{{MenuSounds::P}}}PlaySound(This, {{{MenuSounds::P}}}C_Sound_Select);
			} else {
				{{{MenuSounds::P}}}PlaySound(This, {{{MenuSounds::P}}}C_Sound_Cancel);
			}
		}
	}

	// Window size updated
	if (
		ParentApp.ManiaPlanet.DisplaySettings != Null &&
		{{{P}}}G_State.DisplayedCategory == {{{P}}}C_SettingCategory_Video &&
		{{{P}}}G_State.WindowSize != ParentApp.ManiaPlanet.DisplaySettings.WindowSize
	) {
		// Update the window size in the text fields if the user did not modify them already
		if (
			{{{P}}}G_State.Settings.existskey({{{P}}}C_SettingId_VideoWindowResolutionX) &&
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_VideoWindowResolutionX].New.ValueText == ""^{{{P}}}G_State.WindowSize.X
		) {
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_VideoWindowResolutionX].New.ValueText = ""^ParentApp.ManiaPlanet.DisplaySettings.WindowSize.X;
		}
		if (
			{{{P}}}G_State.Settings.existskey({{{P}}}C_SettingId_VideoWindowResolutionY) &&
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_VideoWindowResolutionY].New.ValueText == ""^{{{P}}}G_State.WindowSize.Y
		) {
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_VideoWindowResolutionY].New.ValueText = ""^ParentApp.ManiaPlanet.DisplaySettings.WindowSize.Y;
		}

		{{{P}}}G_State.WindowSize = ParentApp.ManiaPlanet.DisplaySettings.WindowSize;
		{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
	}

	// Sound or music volume updated
	if ({{{P}}}G_State.DisplayedCategory == {{{P}}}C_SettingCategory_Sound) {
		// Update the volumes in the sliders if the user did not modify them already
		if (
			{{{P}}}G_State.MusicVolume != ParentApp.ManiaPlanet.AudioSettings_MasterMusicVolume &&
			{{{P}}}G_State.Settings.existskey({{{P}}}C_SettingId_SoundMusicVolume) &&
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SoundMusicVolume].New.ValueReal == {{{P}}}G_State.MusicVolume
		) {
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SoundMusicVolume].New.ValueReal = ParentApp.ManiaPlanet.AudioSettings_MasterMusicVolume;
			{{{P}}}G_State.MusicVolume = ParentApp.ManiaPlanet.AudioSettings_MasterMusicVolume;
			{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
		}
		if (
			{{{P}}}G_State.MasterVolume != ParentApp.ManiaPlanet.AudioSettings_MasterSoundVolume &&
			{{{P}}}G_State.Settings.existskey({{{P}}}C_SettingId_SoundMasterVolume) &&
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SoundMasterVolume].New.ValueReal == {{{P}}}G_State.MasterVolume
		) {
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SoundMasterVolume].New.ValueReal = ParentApp.ManiaPlanet.AudioSettings_MasterSoundVolume;
			{{{P}}}G_State.MasterVolume = ParentApp.ManiaPlanet.AudioSettings_MasterSoundVolume;
			{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
		}
		if (
			{{{P}}}G_State.EffectVolume != ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Scene &&
			{{{P}}}G_State.Settings.existskey({{{P}}}C_SettingId_SoundEffectVolume) &&
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SoundEffectVolume].New.ValueReal == {{{P}}}G_State.EffectVolume
		) {
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SoundEffectVolume].New.ValueReal = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Scene;
			{{{P}}}G_State.EffectVolume = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Scene;
			{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
		}
		if (
			{{{P}}}G_State.UIVolume != ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Ui &&
			{{{P}}}G_State.Settings.existskey({{{P}}}C_SettingId_SoundUIVolume) &&
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SoundUIVolume].New.ValueReal == {{{P}}}G_State.UIVolume
		) {
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SoundUIVolume].New.ValueReal = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Ui;
			{{{P}}}G_State.UIVolume = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Ui;
			{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
		}
	}

	// A controller device has been plugged/unplugged
	// The probability for the same number of devices to be plugged and unplugged at the same time is so low
	// that we don't need to check the content of the array
	if ({{{P}}}G_State.InputPadsCount != Input.Pads.count) {
		{{{P}}}G_State.InputPadsCount = Input.Pads.count;
		
		if ({{{P}}}G_State.Settings.existskey({{{P}}}C_SettingId_ControlDevice)) {
			declare {{{P}}}K_Setting UpdatedSetting = {{{P}}}G_State.Settings[{{{P}}}C_SettingId_ControlDevice];
			UpdatedSetting.List.Labels = [];
			UpdatedSetting.List.ValuesInteger = [];
			declare Boolean OldControlControllerIdExists = False;
			declare Integer NewControlControllerId = -1;
			declare Integer NewControlControllerKey = 0;
			declare Integer LowerIdleDuration = -1;
			foreach (Key => Pad in Input.Pads) {
				UpdatedSetting.List.ValuesInteger.add(Pad.ControllerId);
				UpdatedSetting.List.Labels.add({{{P}}}TL::GetTranslatedText(Pad.ModelName));
				// Find the last used controller
				if (LowerIdleDuration == -1 || Pad.IdleDuration < LowerIdleDuration) {
					LowerIdleDuration = Pad.IdleDuration;
					NewControlControllerId = Pad.ControllerId;
					NewControlControllerKey = Key;
				}
				if (Pad.ControllerId == {{{P}}}G_State.ControlControllerId) {
					OldControlControllerIdExists = True;
					UpdatedSetting.New.ValueInteger = Key;
				}
			}
			if (!OldControlControllerIdExists) {
				{{{P}}}G_State.ControlControllerId = NewControlControllerId;
				UpdatedSetting.New.ValueInteger = NewControlControllerKey;
			}
			if (UpdatedSetting.List.Labels.count <= 0) {
				UpdatedSetting.List.ValuesInteger.add({{{P}}}G_State.ControlControllerId);
				//L16N [Settings] The game did not find any connected controller devices
				UpdatedSetting.List.Labels.add(_("|InputDevice|No devices"));
			}
			{{{P}}}G_State.Settings[{{{P}}}C_SettingId_ControlDevice] = UpdatedSetting;

			{{{P}}}G_State = {{{P}}}Private_SetControlControllerId({{{P}}}G_State, {{{P}}}G_State.ControlControllerId);
			if ({{{P}}}G_State.DisplayedCategory == {{{P}}}C_SettingCategory_Controls) {
				{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
			}
		}
	}

	// Alert message finished
	if ({{{P}}}G_State.AlertMessageEndTime >= 0 && {{{P}}}G_State.AlertMessageEndTime <= Now) {
		{{{P}}}G_State = {{{P}}}Private_HideAlertMessage({{{P}}}G_State);
	}

	// Update TextField associated to the slider
	if ({{{P}}}G_State.DraggedSlider.IsDragged) {
		{{{TextField::P}}}SetValue(This, 
			{{{P}}}G_State.DraggedSlider.TextField,
			{{{P}}}Private_SliderValueToText({{{P}}}G_State.DraggedSlider.Slider, {{{P}}}G_State.DraggedSlider.SliderType),
			False
		);
	}

	// Privileges check
	if (!{{{P}}}Privileges::Check_IsComplete({{{P}}}G_State.PrivilegesCheck.Check)) {
		{{{P}}}G_State.PrivilegesCheck.Check = {{{P}}}Privileges::Check_Update({{{P}}}G_State.PrivilegesCheck.Check);
		if ({{{P}}}Privileges::Check_IsComplete({{{P}}}G_State.PrivilegesCheck.Check)) {
			{{{P}}}G_State.PrivilegesCheck.Check = {{{P}}}Privileges::Check_Destroy({{{P}}}G_State.PrivilegesCheck.Check);
			if ({{{P}}}Privileges::Check_HasPrivilege({{{P}}}G_State.PrivilegesCheck.Check)) {
				switch ({{{P}}}G_State.PrivilegesCheck.SettingType) {
					case {{{P}}}C_SettingType_Checkbox: {
						{{{P}}}G_State = {{{P}}}Private_SelectSettingCheckbox({{{P}}}G_State, {{{P}}}G_State.PrivilegesCheck);
					}
					case {{{P}}}C_SettingType_List: {
						{{{P}}}G_State = {{{P}}}Private_UpdateSettingListValue({{{P}}}G_State, {{{P}}}G_State.PrivilegesCheck);
					}
					case {{{P}}}C_SettingType_Slider: {
						{{{P}}}G_State = {{{P}}}Private_UpdateSettingSliderValue({{{P}}}G_State, {{{P}}}G_State.PrivilegesCheck);
					}
					case {{{P}}}C_SettingType_Button: {
						{{{P}}}G_State = {{{P}}}Private_SelectSettingButton({{{P}}}G_State, {{{P}}}G_State.PrivilegesCheck);
					}
				}
			}
		}
	}

	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::AppMenu) {
						{{{P}}}G_State = {{{P}}}Private_Select({{{P}}}G_State, {{{P}}}G_State.Controls.Button_Apply);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						{{{P}}}G_State = {{{P}}}Private_Select({{{P}}}G_State, {{{P}}}G_State.Controls.Button_Back);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Main}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						{{{P}}}G_State = {{{P}}}Private_Select({{{P}}}G_State, Event.To);
					} else {
						{{{P}}}G_State = {{{P}}}Private_Focus({{{P}}}G_State, Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Main}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						{{{P}}}G_State = {{{P}}}Private_Select({{{P}}}G_State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						{{{P}}}G_State = {{{P}}}Private_Focus({{{P}}}G_State, Event.From, Event.To);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_MouseOnly}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						{{{P}}}G_State = {{{P}}}Private_Select({{{P}}}G_State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						{{{P}}}G_State = {{{P}}}Private_Focus({{{P}}}G_State, Event.From, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOut) {
						{{{P}}}G_State = {{{P}}}Private_Focus({{{P}}}G_State, Event.From, Event.To);
					}
				}
			}
		}
	}

	foreach (Event in {{{LatencyTest::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{LatencyTest::P}}}C_EventType_TryAgain: {
				if (Event.LatencyTest.ControlId == "{{{LatencyTest::C_Id_FrameLatencyTest}}}") {
					//L16N [Settings] Error message displayed when the player has failed the latency test
					{{{P}}}G_State = {{{P}}}Private_DisplayErrorMessage({{{P}}}G_State, _("Your inputs were inconsistent, so we were unable to accurately calculate the latency of your device. Please check your monitor or TV latency settings and try to be as regular as possible with your inputs!"));
					{{{P}}}G_State.AlertMessageEndTime = Now + 3*{{{P}}}C_AlertMessageDuration;
				}
			}
		}
	}

	foreach (Event in {{{NavigationTabs::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{NavigationTabs::P}}}C_EventType_Select: {
				if (Event.Frame_NavigationTabs == {{{P}}}G_State.Controls.NavigationTabs_Categories) {
					{{{P}}}G_State = {{{P}}}Private_SetDisplayedCategory({{{P}}}G_State, Event.CurrentTab, True);
				}
			}
		}
	}

	foreach (Event in {{{TextField::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TextField::P}}}C_EventType_Update: {
				if (Event.TextField != Null) {
					switch (Event.TextField.ControlId) {
						case "{{{P}}}textfield-value": {
							{{{P}}}G_State.CanResetIsEditingTextField = {{{P}}}C_ResetTextFieldEditionDelay;
							declare Integer {{{P}}}DisplayedSettingId for Event.TextField;
							declare Text ValidatedValue = {{{P}}}Private_ValidateTextFieldValue(Event.TextField, {{{P}}}DisplayedSettingId);
							{{{P}}}G_State = {{{P}}}Private_UpdateSettingValue({{{P}}}G_State, {{{P}}}DisplayedSettingId, {{{P}}}K_Values { ValueText = ValidatedValue });

							// If the user entered a custom value for the network speed
							// Switch to the custom option in the network speed list
							switch ({{{P}}}DisplayedSettingId) {
								case {{{P}}}C_SettingId_SystemNetworkSpeedUpload: {
									if (
										{{{P}}}G_State.Settings.existskey({{{P}}}C_SettingId_SystemNetworkSpeed) &&
										{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SystemNetworkSpeed].List.ValuesNetworkSpeed.exists(CManiaPlanet::ENetworkSpeed::Custom)
									) {
										{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SystemNetworkSpeed].New.ValueInteger = {{{P}}}G_State.Settings[{{{P}}}C_SettingId_SystemNetworkSpeed].List.ValuesNetworkSpeed.keyof(CManiaPlanet::ENetworkSpeed::Custom);
										{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
									}
								}
								case {{{P}}}C_SettingId_SystemNetworkSpeedDownload: {
									if (
										{{{P}}}G_State.Settings.existskey({{{P}}}C_SettingId_SystemNetworkSpeed) &&
										{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SystemNetworkSpeed].List.ValuesNetworkSpeed.exists(CManiaPlanet::ENetworkSpeed::Custom)
									) {
										{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SystemNetworkSpeed].New.ValueInteger = {{{P}}}G_State.Settings[{{{P}}}C_SettingId_SystemNetworkSpeed].List.ValuesNetworkSpeed.keyof(CManiaPlanet::ENetworkSpeed::Custom);
										{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
									}
								}
							}

							if (Event.Value != ValidatedValue) {
								{{{TextField::P}}}SetValue(This, Event.TextField, ValidatedValue, False);
							}
							
							{{{MenuSounds::P}}}PlaySound(This, {{{MenuSounds::P}}}C_Sound_Select);

							// Open joinlink
							if ({{{P}}}DisplayedSettingId == {{{P}}}C_SettingId_SystemJoinLink && ValidatedValue != "") {
								// Reset voice chat channel if needed
								if (ParentApp.VoiceChat.Manual_Channel != "") {
									ParentApp.VoiceChat.Manual_Channel = "";
									ParentApp.VoiceChat.Manual_ClearUsers();
									ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting = CGameUserVoiceChat::EMuteSetting::NotMuted;
								}
								declare Text JoinLink = {{{P}}}TL::Replace(ValidatedValue, "#join", "#qjoin");
								JoinLink = {{{P}}}TL::Replace(JoinLink, "#spectate", "#qspectate");
								ParentApp.ManiaPlanet.OpenLink(JoinLink, CManiaPlanet::ELinkType::ManialinkBrowser);
							}

							// Create a request to check the given key or activation code
							if ({{{P}}}DisplayedSettingId == {{{P}}}C_SettingId_ProfileActivateKey && ValidatedValue != "" && !{{{P}}}G_State.ActivateKeyPopUpDisplayed) {
								declare Text[] Match = {{{P}}}TL::RegexMatch("....-....-....-....-....", ValidatedValue, "");
								if (Match.count > 0 && {{{P}}}TL::Length(Match[0]) == {{{P}}}TL::Length(ValidatedValue)) {
									{{{P}}}G_Request_PostCheckKey = {{{P}}}Http::DestroyAndCreate({{{P}}}G_Request_PostCheckKey, {{{P}}}ActivateKeyAPI::PostCheck(ValidatedValue));
								} else {
									//L16N [Settings] Error message displayed when the player entered a key with the wrong format
									{{{P}}}G_State = {{{P}}}Private_DisplayErrorMessage({{{P}}}G_State, _("This Key or Activation Code has the wrong format.\nExpected format: XXXX-XXXX-XXXX-XXXX-XXXX"));
								}
							}
						}
						case "{{{P}}}textfield-slider-value": {
							{{{P}}}G_State.CanResetIsEditingTextField = {{{P}}}C_ResetTextFieldEditionDelay;
							{{{MenuSounds::P}}}PlaySound(This, {{{MenuSounds::P}}}C_Sound_Select);

							declare Integer {{{P}}}DisplayedSettingId for Event.TextField;
							declare {{{P}}}K_Setting Setting = {{{P}}}G_State.Settings.get({{{P}}}DisplayedSettingId, {{{P}}}C_Setting_Null);
							if (Setting.Id == {{{P}}}DisplayedSettingId && Setting.Type == {{{P}}}C_SettingType_Slider) {
								declare CMlFrame {{{P}}}Slider_Value for Event.TextField;
								switch (Setting.Slider.Type) {
									case {{{P}}}C_SliderType_Color: {
										{{{Slider::P}}}SetValueColor({{{P}}}Slider_Value, {{{P}}}CL::HexToRgb(Event.Value));
									}
									case {{{P}}}C_SliderType_Integer: {
										{{{Slider::P}}}SetValueInteger({{{P}}}Slider_Value, {{{P}}}TL::ToInteger(Event.Value));
									}
									default: { //< {{{P}}}C_SliderType_Real
										{{{Slider::P}}}SetValueReal({{{P}}}Slider_Value, {{{P}}}TL::ToReal(Event.Value));
									}
								}

								declare CMlFrame {{{P}}}Frame_SettingLine for Event.TextField;
								{{{P}}}G_State = {{{P}}}Private_UpdateSettingSliderValue(
									{{{P}}}G_State,
									Setting,
									{{{P}}}Frame_SettingLine,
									0
								);
							}
						}
					}
				}
			}
		}
	}

	foreach (Event in {{{Slider::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{Slider::P}}}C_EventType_CursorDragStart: {
				if (
					Event.Slider != Null &&
					Event.Slider.ControlId == "{{{P}}}slider-value"
				) {
					declare CMlFrame {{{P}}}TextField_SliderValue for Event.Slider;
					declare Integer {{{P}}}DisplayedSettingId for Event.Slider;
					declare {{{P}}}K_Setting Setting = {{{P}}}G_State.Settings.get({{{P}}}DisplayedSettingId, {{{P}}}C_Setting_Null);
					if (Setting.Slider.DisplayTextField) {
						{{{P}}}G_State.DraggedSlider.Slider = Event.Slider;
						{{{P}}}G_State.DraggedSlider.TextField = {{{P}}}TextField_SliderValue;
						{{{P}}}G_State.DraggedSlider.SliderType = Setting.Slider.Type;
						{{{P}}}G_State.DraggedSlider.IsDragged = True;
					}
				}
			}
			case {{{Slider::P}}}C_EventType_CursorDragStop: {
				if (
					Event.Slider != Null &&
					Event.Slider.ControlId == "{{{P}}}slider-value"
				) {
					declare CMlFrame {{{P}}}Frame_SettingLine for Event.Slider;
					declare Integer {{{P}}}DisplayedSettingId for Event.Slider;
					{{{P}}}G_State.DraggedSlider.IsDragged = False;
					{{{P}}}G_State = {{{P}}}Private_UpdateSettingSliderValue(
						{{{P}}}G_State,
						{{{P}}}G_State.Settings.get({{{P}}}DisplayedSettingId, {{{P}}}C_Setting_Null),
						{{{P}}}Frame_SettingLine,
						0
					);
				}
			}
		}
	}

	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll == {{{P}}}G_State.Controls.Scroll_Settings) {
			switch (Event.Type) {
				case {{{Scroll::P}}}C_EventType_Update: {
					foreach (Key => Frame_Element in Event.ElementsVisible) {
						{{{P}}}Private_DisplaySettingLine({{{P}}}G_State, Key, Frame_Element);
						Frame_Element.Visible = True;
					}
					foreach (Frame_Element in Event.ElementsHidden) {
						Frame_Element.Visible = False;
					}
				}
				case {{{Scroll::P}}}C_EventType_Focus: {
					{{{P}}}G_State = {{{P}}}Private_FocusSettingsLine({{{P}}}G_State, Event.From, Event.FromKey, False, Event.PlayFocusAnimation);
					if (Event.To != Null && Event.IsMouse) {
						declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
						if (FocusedControl != {{{P}}}G_State.Controls.Scroll_Settings && !{{{Navigation::P}}}IsLocked({{{P}}}G_State.Controls.Scroll_Settings)) {
							{{{P}}}G_State = {{{P}}}Private_Focus({{{P}}}G_State, FocusedControl, {{{P}}}G_State.Controls.Scroll_Settings);
						}
					}
					if ({{{Scroll::P}}}IsFocused({{{P}}}G_State.Controls.Scroll_Settings)) {
						{{{P}}}G_State = {{{P}}}Private_FocusSettingsLine({{{P}}}G_State, Event.To, Event.ToKey, True, Event.PlayFocusAnimation);
						{{{P}}}Private_DisplaySettingInfo({{{P}}}G_State, Event.ToKey);
					} else {
						{{{P}}}Private_DisplaySettingInfo({{{P}}}G_State, -1);
						{{{P}}}G_TTSContextIdent_Section = ParentApp.TTS_Context_Leave({{{P}}}G_TTSContextIdent_Section);
						{{{P}}}G_TTSContextIdent_Setting = ParentApp.TTS_Context_Leave({{{P}}}G_TTSContextIdent_Setting);
						{{{P}}}G_State.PreviouslyFocusedSectionId = -1;
						{{{P}}}G_State.PreviouslyFocusedSettingId = -1;
					}
				}
				case {{{Scroll::P}}}C_EventType_ReachLimit: {
					if ({{{Scroll::P}}}IsFocused({{{P}}}G_State.Controls.Scroll_Settings)) {
						if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Right) {
							declare {{{P}}}K_Setting Setting = {{{P}}}Private_GetSettingFromScroll({{{P}}}G_State, Event.FromKey);
							if (Setting.Type == {{{P}}}C_SettingType_Slider) {
								{{{P}}}G_State = {{{P}}}Private_UpdateSettingSliderValue({{{P}}}G_State, Setting, Event.From, 1);
							} else if (Setting.Type == {{{P}}}C_SettingType_List) {
								if (Event.From != Null) {
									{{{P}}}G_State = {{{P}}}Private_UpdateSettingListValue({{{P}}}G_State, Event.From.GetFirstChild("{{{P}}}frame-type-list") as CMlFrame, Setting.Id, 1, True);
								}
							} else if (!{{{Navigation::P}}}IsLocked({{{P}}}G_State.Controls.Button_Apply)) {
								{{{P}}}G_State = {{{P}}}Private_Focus({{{P}}}G_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}"), {{{P}}}G_State.Controls.Button_Apply);
							}
						} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Left) {
							declare {{{P}}}K_Setting Setting = {{{P}}}Private_GetSettingFromScroll({{{P}}}G_State, Event.FromKey);
							if (Setting.Type == {{{P}}}C_SettingType_Slider) {
								{{{P}}}G_State = {{{P}}}Private_UpdateSettingSliderValue({{{P}}}G_State, Setting, Event.From, -1);
							} else if (Setting.Type == {{{P}}}C_SettingType_List) {
								if (Event.From != Null) {
									{{{P}}}G_State = {{{P}}}Private_UpdateSettingListValue({{{P}}}G_State, Event.From.GetFirstChild("{{{P}}}frame-type-list") as CMlFrame, Setting.Id, -1, True);
								}
							} else if (!{{{Navigation::P}}}IsLocked({{{P}}}G_State.Controls.Button_Back)) {
								{{{P}}}G_State = {{{P}}}Private_Focus({{{P}}}G_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}"), {{{P}}}G_State.Controls.Button_Back);
							}
						} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Down) {
							if ({{{P}}}G_State.LastBottomButtonFocused != Null && !{{{Navigation::P}}}IsLocked({{{P}}}G_State.LastBottomButtonFocused)) {
								{{{P}}}G_State = {{{P}}}Private_Focus({{{P}}}G_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}"), {{{P}}}G_State.LastBottomButtonFocused);
							} else if (!{{{Navigation::P}}}IsLocked({{{P}}}G_State.Controls.Button_Back)) {
								{{{P}}}G_State = {{{P}}}Private_Focus({{{P}}}G_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}"), {{{P}}}G_State.Controls.Button_Back);
							} else if (!{{{Navigation::P}}}IsLocked({{{P}}}G_State.Controls.Button_Apply)) {
								{{{P}}}G_State = {{{P}}}Private_Focus({{{P}}}G_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}"), {{{P}}}G_State.Controls.Button_Apply);
							}
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_Select: {
					{{{P}}}G_State = {{{P}}}Private_SelectSettingLine({{{P}}}G_State, Event.ToKey, Event.To, Event.IsMouse);
				}
			}
		}
	}

	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice.Id == {{{P}}}G_State.Controls.PopUp_DiscardChanges.Id) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					if (Event.SelectedIndex == {{{P}}}C_PopUpDiscardChangesChoices_Yes) {
						// Restore old settings value
						if ({{{P}}}C_DiscardSettingsOnTabChange) {
							if ({{{P}}}G_State.ScrollSettingIds.existskey({{{P}}}G_State.DisplayedCategory)) {
								declare Integer[] CategorySettingIds = {{{P}}}G_State.ScrollSettingIds[{{{P}}}G_State.DisplayedCategory];
								foreach (SettingId in CategorySettingIds) {
									declare {{{P}}}K_Setting UpdatedSetting = {{{P}}}G_State.Settings.get(SettingId, {{{P}}}C_Setting_Null);
									{{{P}}}G_State = {{{P}}}Private_UpdateSettingValue({{{P}}}G_State, UpdatedSetting.Id, UpdatedSetting.Old);
								}
							}
						} else {
							declare {{{P}}}K_Setting[Integer] TmpSettings = {{{P}}}G_State.Settings;
							foreach (Setting in TmpSettings) {
								{{{P}}}G_State = {{{P}}}Private_UpdateSettingValue({{{P}}}G_State, Setting.Id, Setting.Old);
							}
						}

						switch ({{{P}}}G_State.AfterDiscardPopUp.Action) {
							case {{{P}}}C_ActionAfterDiscardPopUp_GoToCategory: {
								{{{P}}}G_State = {{{P}}}Private_SetDisplayedCategory({{{P}}}G_State, {{{P}}}G_State.AfterDiscardPopUp.DisplayedCategory, False);
							}
							case {{{P}}}C_ActionAfterDiscardPopUp_CloseSettings: {
								{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
								{{{P}}}PendingEvents.add({{{P}}}K_Event {
									Type = {{{P}}}C_EventType_Back
								});
							}
							case {{{P}}}C_ActionAfterDiscardPopUp_OpenCredits: {
								{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
								{{{P}}}PendingEvents.add({{{P}}}K_Event {
									Type = {{{P}}}C_EventType_OpenCredits
								});
							}
							case {{{P}}}C_ActionAfterDiscardPopUp_OpenProfile: {
								{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
								{{{P}}}PendingEvents.add({{{P}}}K_Event {
									Type = {{{P}}}C_EventType_OpenProfile
								});
							}
							default: {
								{{{P}}}G_State = {{{P}}}Private_DisplayCategory({{{P}}}G_State);
							}
						}
					}
					{{{P}}}G_State = {{{P}}}Private_DisplayDiscardChangesPopUp({{{P}}}G_State, False);
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					if (!Event.PopUpMultiChoice.Visible) {
						{{{P}}}G_State = {{{P}}}Private_DisplayDiscardChangesPopUp({{{P}}}G_State, False);
					}
				}
			} 
		} else if (Event.PopUpMultiChoice == {{{P}}}G_State.Controls.PopUp_ActivateKey) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					if (!Event.PopUpMultiChoice.Visible) {
						{{{P}}}G_State = {{{P}}}Private_DisplayActivateKeyPopUp({{{P}}}G_State, False);
					}
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					switch (Event.SelectedIndex) {
						case {{{C_Choice_Activate}}}: {
							{{{P}}}G_Request_PostActivateKey = {{{P}}}Http::DestroyAndCreate(
								{{{P}}}G_Request_PostActivateKey, 
								{{{P}}}ActivateKeyAPI::PostActivate({{{P}}}G_State.Settings.get({{{P}}}C_SettingId_ProfileActivateKey, {{{P}}}C_Setting_Null).New.ValueText)
							);
						}
					}
				}
			}
		}
	}

	// The crossplay setting can be changed in the console parameters on Xbox platforms
	if ({{{P}}}Platform::IsMicrosoft(System) && {{{P}}}G_State.IsCrossPlayActive != {{{UserStore::P}}}IsCrossPlayActive()) {
		{{{P}}}G_State = {{{P}}}Private_UpdateSettingValue(
			{{{P}}}G_State,
			{{{P}}}C_SettingId_SystemNetworkCrossPlay,
			{{{P}}}K_Values {
				ValueBoolean = {{{UserStore::P}}}IsCrossPlayActive()
			}
		);
		if ({{{P}}}G_State.DisplayedCategory == {{{P}}}C_SettingCategory_System) {
			{{{P}}}G_State = {{{P}}}Private_SetDisplayedCategory({{{P}}}G_State, {{{P}}}G_State.DisplayedCategory, False, False, False);
		}
	}

	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{OnlineServicesStatusStore::P}}}C_Event_OnlineServicesStatusUpdated: {
						if ({{{P}}}G_State.Settings.existskey({{{P}}}C_SettingId_SystemOnlineServicesStatus)) {
							{{{P}}}G_State.Settings[{{{P}}}C_SettingId_SystemOnlineServicesStatus].ButtonText = {{{OnlineServicesStatusStore::P}}}GetCurrentStatusNameAndIcon();
							{{{OnlineServicesStatusCard::P}}}DisplayOnlineServicesStatus({{{OnlineServicesStatusStore::P}}}GetCurrentStatus(), {{{P}}}G_State.Controls.Frame_OnlineServicesStatusCard);
							if ({{{P}}}G_State.DisplayedCategory == {{{P}}}C_SettingCategory_System) {
								{{{P}}}G_State = {{{P}}}Private_SetDisplayedCategory({{{P}}}G_State, {{{P}}}G_State.DisplayedCategory, False, False, False);
							}						
						}
					}
				}
			}
		}
	}

	/* Check key request */
	if ({{{P}}}Http::IsInitialized({{{P}}}G_Request_PostCheckKey)) {
		{{{P}}}G_Request_PostCheckKey = {{{P}}}Http::Update({{{P}}}G_Request_PostCheckKey);
		if (!{{{P}}}Http::IsRunning({{{P}}}G_Request_PostCheckKey)) {
			if ({{{P}}}Http::IsSuccess({{{P}}}G_Request_PostCheckKey)) {
				declare Response = {{{P}}}ActivateKeyAPI::GetResponseFromPostCheck({{{P}}}G_Request_PostCheckKey);
				if (Response.Status == {{{P}}}ActivateKeyAPI::C_Status_AlreadyActivated) {
					//L16N [Settings] Error message displayed when the player entered a key that has already been used.
					{{{P}}}G_State = {{{P}}}Private_DisplayErrorMessage({{{P}}}G_State, _("This Key or Activation Code has already been activated."));
				} else {
					{{{PopUpMultiChoice::P}}}SetDescription(This, {{{P}}}G_State.Controls.PopUp_ActivateKey, [
						//L16N [Settings] Ask the player if they really want to activate the key. %1 will be replaced by the type of key or activation code. e.g. "Do you really want to register this 'Club time limited' key for the current account?"
						{{{PopUpMultiChoice::P}}}CreateDescriptionPart({{{P}}}TL::Compose(_("Do you really want to register this '%1' key for the current account?"), Response.Message), <130., 20.>, 3., {{{dump(FontManager::C_GameFontSemiBold)}}}, "$t$i", <1., 1., 1.>, False),
						//L16N [Settings] Warn the player that a key activation cannot be undone.
						{{{PopUpMultiChoice::P}}}CreateDescriptionPart(_("This cannot be changed once the activation is complete"), <130., 15.>, 2., {{{dump(FontManager::C_GameFontSemiBold)}}}, "$t$i", {{{ColorPalette::C_Color_Vec3_GreenOne}}}, False)
					]);
					{{{P}}}G_State = {{{P}}}Private_DisplayActivateKeyPopUp({{{P}}}G_State, True);
				}
			} else if ({{{P}}}G_Request_PostCheckKey.StatusCode == {{{P}}}ActivateKeyAPI::C_StatusCode_InvalidKey) {
				//L16N [Settings] Error message displayed when the player entered an unvalid key.
				{{{P}}}G_State = {{{P}}}Private_DisplayErrorMessage({{{P}}}G_State, _("This Key or Activation Code is not valid."));
			} else {
				//L16N [Settings] Error message displayed when the validity check of the key has failed.
				{{{P}}}G_State = {{{P}}}Private_DisplayErrorMessage({{{P}}}G_State, _("The validity check of this Key or Activation Code has failed, please try again."));
			}
			{{{P}}}G_Request_PostCheckKey = {{{P}}}Http::Destroy({{{P}}}G_Request_PostCheckKey);
		}
	}

	/* Activate key request */
	if ({{{P}}}Http::IsInitialized({{{P}}}G_Request_PostActivateKey)) {
		{{{P}}}G_Request_PostActivateKey = {{{P}}}Http::Update({{{P}}}G_Request_PostActivateKey);
		if (!{{{P}}}Http::IsRunning({{{P}}}G_Request_PostActivateKey)) {
			if ({{{P}}}Http::IsSuccess({{{P}}}G_Request_PostActivateKey)) {
				//L16N [Settings] Message displayed when the key has successfully been activated.
				{{{P}}}G_State = {{{P}}}Private_DisplayAlertMessage({{{P}}}G_State, _("The Key or Activation Code has been successfully activated.\nHave fun!"));
			} else {
				//L16N [Settings] Error message displayed when the key cannot be activated.
				{{{P}}}G_State = {{{P}}}Private_DisplayErrorMessage({{{P}}}G_State, _("Failed to activate your key."));
			}
			{{{P}}}G_Request_PostActivateKey = {{{P}}}Http::Destroy({{{P}}}G_Request_PostActivateKey);
		}
	}
}
***
		""",
		[
			ButtonIcon::ComponentV2(),
			ExpendableAsset::ComponentV2(),
			LatencyTest::ComponentV2(),
			Navigation::ComponentV2(),
			Scroll::ComponentV2(),
			Slider::Component(),
			Button::ComponentV2(),
			Checkbox::ComponentV2(),
			ExpendableButton::ComponentV2(),
			NavigationTabs::ComponentV2(),
			TextField::ComponentV2(),
			UserStore::ComponentV2(),
			PopUpMultiChoice::ComponentV2(),
			MenuButtonList::Component(),
			DisplayVersion::Component(),
			OnlineServicesStatusStore::ComponentV2(),
			OnlineServicesStatusCard::Component(),
			MenuSounds::ComponentV2(),
			PlayerName::ComponentV2()
		],
		[]
	);
}