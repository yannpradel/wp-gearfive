/**
 *	Component: PopUpPrestigeCompletion
 */
#Const Version		"2023-06-16"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpPrestigeCompletion.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Modes/Medals.Script.txt" as Medals
#Include "Libs/Nadeo/ModeLibs/Common/Clans_Common.Script.txt" as Clans
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset_TMNext
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton_TMNext
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/NavigationTabs.Script.txt" as NavigationTabs
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/PrestigeStruct.Script.txt" as PrestigeStruct
#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "ColorLib" as CL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_Event {
	Integer Type;
	CMlFrame PopUpPrestigeCompletion;
}

#Struct K_Controls {
	CMlFrame Button_Back;
	CMlFrame Frame_Global;
	CMlFrame Frame_NavigationContainer;
	CMlFrame Frame_TabRanked;
	CMlFrame Frame_TabRoyal;
	CMlFrame Frame_TabSeason;
	CMlFrame NavigationTabs_PrestigeModes;
	CMlLabel Label_Year;
}

#Struct K_PopUpPrestigeCompletion {
	Boolean IsPopUpPrestigeCompletion;
	Integer PrestigeYear;
	CUserV2Manager::EPrestigeMode PrestigeMode;
	CUserV2Manager::EPrestigeMode[] PrestigeModesUpdated;
	PrestigeStruct::K_Prestige[Text] PrestigeList;
	K_Controls Controls;
}

#Struct K_State {
	K_Event[] PendingEvents;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-PopUpPrestigeCompletion" //< Component name
#Const C_NavGroup_Default "navgroup-pop-up-prestige-completion-default"
#Const P "ComponentPopUpPrestigeCompletion::" //< Prefix used to differentiate functions/variables in the script
#Const Q "ComponentPopUpPrestigeCompletion"

#Const C_Class_TextRegular "tmnext-pop-up-prestige-completion_text-regular"
#Const C_Class_TextSemiBold "tmnext-pop-up-prestige-completion_text-semi-bold"
#Const C_Class_TextExtraBold "tmnext-pop-up-prestige-completion_text-extra-bold"
#Const C_Class_PopUpPrestigeCompletion "tmnext-pop-up-prestige-completion_PopUpPrestigeCompletion" //< Component class

#Const C_Id_Asset_CategoryTypeBg "tmnext-pop-up-prestige-asset-category-type-background"
#Const C_Id_ButtonIcon_Back "tmnext-pop-up-prestige-completion_button-icon-back"
#Const C_Id_Button_Back "tmnext-pop-up-prestige-completion_button-back"
#Const C_Id_FrameBackground "tmnext-pop-up-prestige-completion_frame-background"
#Const C_Id_FrameNavContainer "tmnext-pop-up-prestige-completion_navigation-container"
#Const C_Id_FrameTabRanked "tmnext-pop-up-prestige-completion_frame-tab-ranked"
#Const C_Id_FrameTabRoyal "tmnext-pop-up-prestige-completion_frame-tab-royal"
#Const C_Id_FrameTabSeason "tmnext-pop-up-prestige-completion_frame-tab-season"
#Const C_Id_Frame_CategoryLevel "tmnext-pop-up-prestige-completion_frame-category-level"
#Const C_Id_Frame_CategoryLevels "tmnext-pop-up-prestige-completion_frame-category-levels"
#Const C_Id_Frame_CategoryType "tmnext-pop-up-prestige-completion_frame-category-type"
#Const C_Id_Frame_PrestigeComplete "tmnext-pop-up-prestige-frame-prestige-complete"
#Const C_Id_Frame_PrestigeLevels "tmnext-pop-up-prestige-completion_frame-prestige-levels"
#Const C_Id_LabelTitle "tmnext-pop-up-prestige-completion_label-title"
#Const C_Id_LabelYear "tmnext-pop-up-prestige-completion_label-year"
#Const C_Id_Label_CategoryTypeName "tmnext-pop-up-prestige-completion_label-category-type-name"
#Const C_Id_Label_SeasonInfo "tmnext-pop-up-prestige-completion_label-season-info"
#Const C_Id_NavigationTabs "tmnext-pop-up-prestige-completion_navigation-tabs"
#Const C_Id_Quad_CategoryLevelIcon "tmnext-pop-up-prestige-completion_quad-category-level-icon"
#Const C_Id_Quad_CategoryTypeIcon "tmnext-pop-up-prestige-completion_quad-category-type-icon"
#Const C_Id_Quad_PrestigeCompleteBg "tmnext-pop-up-prestige-completion_quad-prestige-complete-bg"
#Const C_Id_Quad_PrestigeCompleteCheck "tmnext-pop-up-prestige-completion_quad-prestige-complete-check"
#Const C_Id_Quad_PrestigeCompleteContour "tmnext-pop-up-prestige-completion_quad-prestige-complete-contour"

#Const C_PopUpPrestigeCompletion_Null K_PopUpPrestigeCompletion {
	IsPopUpPrestigeCompletion = False,
	PrestigeYear = 2023, //< Prestige skins starts from January 2023
	PrestigeMode = CUserV2Manager::EPrestigeMode::Season,
	PrestigeModesUpdated = [],
	PrestigeList = []
}

#Const C_State_Null K_State {
	PendingEvents = []
}

#Const C_EventType_Open 0
#Const C_EventType_Close 1

#Const C_MaxPrestigeLevels 13

#Const C_Tab_Season 0
#Const C_Tab_Ranked 1
#Const C_Tab_Royal 2
#Const C_TabNames [
	0 => _("|Mode|Season"),
	1 => _("|Mode|Ranked"),
	2 => _("|Mode|Royal")
]
#Const C_TabIndexToPrestigeModes [
	0 => CUserV2Manager::EPrestigeMode::Season,
	1 => CUserV2Manager::EPrestigeMode::Ranked,
	2 => CUserV2Manager::EPrestigeMode::Royal
]

#Const Const::C_Rank_Icons as C_Rank_Icons
#Const Const::C_Season_Name_To_Index as C_Season_Name_To_Index
#Const Medals::C_MedalColors as C_MedalColors
#Const Medals::C_MedalSubStyles as C_MedalSubStyles
#Const C_SeasonLogo [
	"Spring" => "file://Media/Manialinks/Nadeo/TMNext/Menus/PopUp/PopUpPrestigeList/Prestige_Spring.dds",
	"Summer" => "file://Media/Manialinks/Nadeo/TMNext/Menus/PopUp/PopUpPrestigeList/Prestige_Summer.dds",
	"Fall" => "file://Media/Manialinks/Nadeo/TMNext/Menus/PopUp/PopUpPrestigeList/Prestige_Fall.dds",
	"Winter" => "file://Media/Manialinks/Nadeo/TMNext/Menus/PopUp/PopUpPrestigeList/Prestige_Winter.dds"
]
#Const C_Img_PrestigelLevelSeason "file://Media/Manialinks/Nadeo/TMNext/Menus/PageGarage/PrestigeLevelSeason.dds"
#Const C_Img_PrestigelLevelRanked "file://Media/Manialinks/Nadeo/TMNext/Menus/PageGarage/PrestigeLevelRanked.dds"
#Const C_Img_PrestigelLevelRoyal "file://Media/Manialinks/Nadeo/TMNext/Menus/PageGarage/PrestigeLevelRoyal.dds"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text GetManialink() {
	//L16N [Prestige completion] Title of the prestige completion pop-up
	declare Text Text_Title = _("Prestige unlock");
	//L16N [Prestige completion] Information displayed when a campaign has not been released yet.
	declare Text Text_SeasonNotReleased = _("Not released yet");

	/* Common */
	declare Integer CurrentCategory;
	declare Real SizeX_PrestigeLevelOverlap = -0.1;
	declare Vec2 Size_PrestigeLevelsComplete = MLHelpers::KeepRatioFromY(112., 100., 8.);

	/* Season */
	declare Vec2 Pos_SeasonCategoryLevel = <3., -2.>;
	declare Vec2 Size_SeasonLogo = <14., 14.>;
	declare Vec2 Size_SeasonPrestigeLevel = <5., 4.5>;
	declare Vec2 Size_SeasonCategoryLevelIcon = <Size_SeasonPrestigeLevel.Y*1.5, Size_SeasonPrestigeLevel.Y*1.5>;
	declare Vec2 Size_SeasonPrestigeLevelAdjusted = <Size_SeasonPrestigeLevel.X - MLHelpers::SkewX(Size_SeasonPrestigeLevel.Y, 10.), Size_SeasonPrestigeLevel.Y>;
	declare Vec2 Size_SeasonPrestigesLevels = <C_MaxPrestigeLevels*(Size_SeasonPrestigeLevelAdjusted.X + SizeX_PrestigeLevelOverlap), Size_SeasonPrestigeLevel.Y>;
	declare Vec2 Size_SeasonCategoryLevel = <Size_SeasonCategoryLevelIcon.X*0.5 + Size_SeasonPrestigesLevels.X, Size_SeasonCategoryLevelIcon.Y>;
	declare Vec2 Margin_SeasonCategoryLevel = <3.5, 2.>;
	declare Vec2 Margin_SeasonLogo = <3.5, 3.5>;

	declare Text ML_SeasonPrestiges;
	foreach (SeasonIndex => SeasonName in Const::C_Season_Names) {
		ML_SeasonPrestiges ^= """
			<frame id="{{{C_Id_Frame_CategoryType}}}" pos="{{{MLHelpers::Skew(0., -CurrentCategory*(Size_SeasonLogo.Y + Margin_SeasonLogo.Y), 10.)}}}" data-categorytype="{{{SeasonIndex}}}">
				<quad id="{{{C_Id_Quad_CategoryTypeIcon}}}" size="{{{Size_SeasonLogo.X}}} {{{Size_SeasonLogo.Y}}}" image="{{{C_SeasonLogo[SeasonIndex]}}}" halign="left" valign="center" z-index="0"/>
				<label id="{{{C_Id_Label_CategoryTypeName}}}" pos="{{{MLHelpers::Skew(Size_SeasonLogo.X + Margin_SeasonLogo.X, 2., 10.)}}}" size="100 5" class="{{{C_Class_TextExtraBold}}}" text="{{{SeasonName}}}" textsize="1" halign="left" valign="bottom" z-index="0"/>
				<label id="{{{C_Id_Label_SeasonInfo}}}" pos="{{{MLHelpers::Skew(Size_SeasonLogo.X + Margin_SeasonLogo.X - 0.5, -1., 10.)}}}" size="100 5" class="{{{C_Class_TextRegular}}}" text="{{{Text_SeasonNotReleased}}}" textsize="3" halign="left" z-index="0" hidden="1"/>
				<frame id="{{{C_Id_Frame_CategoryLevels}}}" pos="{{{Size_SeasonLogo.X + Margin_SeasonLogo.X}}} 0">
		""";
		for (CategoryLevel, 0, 3) { //< For the prestiges of the seasons, the category level corresponds to the 4 medals (bronze, silver, gold, author)
			ML_SeasonPrestiges ^= """
				<frame id="{{{C_Id_Frame_CategoryLevel}}}" pos="{{{MLHelpers::Skew(Pos_SeasonCategoryLevel.X + CategoryLevel*(Size_SeasonCategoryLevel.X + Margin_SeasonCategoryLevel.X), Pos_SeasonCategoryLevel.Y, 10.)}}}" data-categorylevel="{{{CategoryLevel+1}}}">
					<quad id="{{{C_Id_Quad_CategoryLevelIcon}}}" size="{{{Size_SeasonCategoryLevelIcon.X}}} {{{Size_SeasonCategoryLevelIcon.Y}}}" halign="center" valign="center" style="MedalsBig" substyle="{{{C_MedalSubStyles[CategoryLevel+1]}}}" z-index="5"/>
					<frame id="{{{C_Id_Frame_PrestigeComplete}}}" pos="{{{MLHelpers::Skew(0.5*Size_SeasonPrestigesLevels.X + 0.5*MLHelpers::SkewX(Size_SeasonPrestigeLevel.Y, 10.), 0., 10.)}}}" z-index="3">
						<quad id="{{{C_Id_Quad_PrestigeCompleteBg}}}" size="{{{Size_PrestigeLevelsComplete.X}}} {{{Size_PrestigeLevelsComplete.Y}}}" image="{{{Const::C_ImageUrl_PopUp_PrestigeList_Complete_Background}}}" colorize="{{{C_MedalColors[CategoryLevel+1]}}}" halign="center" valign="center" opacity="0" z-index="1"/>
						<quad id="{{{C_Id_Quad_PrestigeCompleteContour}}}" size="{{{Size_PrestigeLevelsComplete.X}}} {{{Size_PrestigeLevelsComplete.Y}}}" image="{{{Const::C_ImageUrl_PopUp_PrestigeList_Complete_Contour}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" halign="center" valign="center" opacity="0" z-index="2"/>
						<quad id="{{{C_Id_Quad_PrestigeCompleteCheck}}}" pos="{{{MLHelpers::Skew(0., -0.5, 10.)}}}" size="{{{Size_PrestigeLevelsComplete.X*0.8}}} {{{Size_PrestigeLevelsComplete.Y*0.8}}}" image="{{{Const::C_ImageUrl_Icon_Validation_Oblique_256}}}" colorize="FFFFF" halign="center" valign="center" opacity="0" z-index="3"/>
					</frame>
					<frame id="{{{C_Id_Frame_PrestigeLevels}}}">
			""";
			for (Level, 0, C_MaxPrestigeLevels-1) {
				ML_SeasonPrestiges ^= """<quad pos="{{{Level*(Size_SeasonPrestigeLevelAdjusted.X + SizeX_PrestigeLevelOverlap)}}} 0" size="{{{Size_SeasonPrestigeLevel.X}}} {{{Size_SeasonPrestigeLevel.Y}}}" halign="left" valign="center" image="{{{C_Img_PrestigelLevelSeason}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.5" z-index="{{{C_MaxPrestigeLevels-Level}}}"/>""";
			}
			ML_SeasonPrestiges ^= """</frame></frame>""";
		}
		ML_SeasonPrestiges ^= """</frame></frame>""";
		CurrentCategory += 1;
	}

	/* Ranked */
	declare Vec2 Pos_RankedCategoryLevels = <0., -0.5>;
	declare Vec2 Pos_RankedPrestigeLevels = <2., -0.5>;
	declare Vec2 Size_RankedPrestigeLevel = <4., 4.5>;
	declare Vec2 Size_RankedCategoryLevelIcon = <13., 13.>;
	declare Vec2 Size_RankedPrestigeLevelAdjusted = <Size_RankedPrestigeLevel.X - MLHelpers::SkewX(Size_RankedPrestigeLevel.Y, 10.), Size_RankedPrestigeLevel.Y>;
	declare Vec2 Size_RankedPrestigesLevels = <C_MaxPrestigeLevels*(Size_RankedPrestigeLevelAdjusted.X + SizeX_PrestigeLevelOverlap), Size_RankedPrestigeLevel.Y>;
	declare Vec2 Size_RankedCategoryLevel = <Size_RankedCategoryLevelIcon.X + Pos_RankedPrestigeLevels.X + Size_RankedPrestigesLevels.X, Size_RankedCategoryLevelIcon.Y>;
	declare Vec2 Margin_RankedCategoryType = <11.5, 0.>;
	declare Vec2 Margin_RankedCategoryLevel = <0., -0.4>;

	CurrentCategory = 0;
	declare Text ML_RankedPrestiges;
	foreach (RankedIndex => RankedName in PrestigeStruct::C_RankedCategoryTypes) {
		ML_RankedPrestiges ^= """
			<frame id="{{{C_Id_Frame_CategoryType}}}" pos="{{{MLHelpers::Skew(CurrentCategory*(Size_RankedCategoryLevel.X + Margin_RankedCategoryType.X), 0., 10.)}}}" data-categorytype="{{{RankedIndex}}}">
				<label id="{{{C_Id_Label_CategoryTypeName}}}" pos="2 0" size="100 5" class="{{{C_Class_TextExtraBold}}}" text="{{{RankedName}}}" textsize="3" halign="left" valign="bottom" z-index="0"/>
				<frame id="{{{C_Id_Frame_CategoryLevels}}}" pos="{{{MLHelpers::Skew(0., -Size_RankedCategoryLevel.Y*0.5 + Pos_RankedCategoryLevels.Y, 10.)}}}">
		""";
		for (CategoryLevel, 0, Tools::Ternary(TL::CompareWithoutFormat(RankedIndex, "Master", False), 3, 2)) { //< For the prestiges of the ranked, the category level corresponds to the division ranks (BronzeI, Bronze II etc...)
			ML_RankedPrestiges ^= """
				<frame id="{{{C_Id_Frame_CategoryLevel}}}" pos="{{{MLHelpers::Skew(0., -CategoryLevel*(Size_RankedCategoryLevel.Y + Margin_RankedCategoryLevel.Y), 10.)}}}" data-categorylevel="{{{CategoryLevel+1}}}">
					<quad id="{{{C_Id_Quad_CategoryLevelIcon}}}" size="{{{Size_RankedCategoryLevelIcon.X}}} {{{Size_RankedCategoryLevelIcon.Y}}}" image="{{{C_Rank_Icons[PrestigeStruct::ConvertToRankedRank(RankedIndex, CategoryLevel+1)]}}}" halign="left" valign="center" keepratio="fit" z-index="0"/>
					<frame id="{{{C_Id_Frame_PrestigeComplete}}}" pos="{{{MLHelpers::Skew(Size_RankedCategoryLevelIcon.X + Pos_RankedPrestigeLevels.X + 0.5*Size_RankedPrestigesLevels.X + 0.5*MLHelpers::SkewX(Size_RankedPrestigeLevel.Y, 10.), 0., 10.)}}}" z-index="3">
						<quad id="{{{C_Id_Quad_PrestigeCompleteBg}}}" size="{{{Size_PrestigeLevelsComplete.X}}} {{{Size_PrestigeLevelsComplete.Y}}}" image="{{{Const::C_ImageUrl_PopUp_PrestigeList_Complete_Background}}}" colorize="{{{C_MedalColors[Medals::TextToInteger(RankedIndex)]}}}" halign="center" valign="center" opacity="0" z-index="1"/>
						<quad id="{{{C_Id_Quad_PrestigeCompleteContour}}}" size="{{{Size_PrestigeLevelsComplete.X}}} {{{Size_PrestigeLevelsComplete.Y}}}" image="{{{Const::C_ImageUrl_PopUp_PrestigeList_Complete_Contour}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" halign="center" valign="center" opacity="0" z-index="2"/>
						<quad id="{{{C_Id_Quad_PrestigeCompleteCheck}}}" pos="{{{MLHelpers::Skew(0., -0.5, 10.)}}}" size="{{{Size_PrestigeLevelsComplete.X*0.8}}} {{{Size_PrestigeLevelsComplete.Y*0.8}}}" image="{{{Const::C_ImageUrl_Icon_Validation_Oblique_256}}}" colorize="FFFFF" halign="center" valign="center" opacity="0" z-index="3"/>
					</frame>
					<frame id="{{{C_Id_Frame_PrestigeLevels}}}" pos="{{{Size_RankedCategoryLevelIcon.X + Pos_RankedPrestigeLevels.X}}} 0">
			""";
			for (Level, 0, C_MaxPrestigeLevels-1) {
				ML_RankedPrestiges ^= """<quad pos="{{{Level*(Size_RankedPrestigeLevelAdjusted.X + SizeX_PrestigeLevelOverlap)}}} 0" size="{{{Size_RankedPrestigeLevel.X}}} {{{Size_RankedPrestigeLevel.Y}}}" halign="left" valign="center" image="{{{C_Img_PrestigelLevelRanked}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.5" z-index="{{{C_MaxPrestigeLevels-Level}}}"/>""";
			}
			ML_RankedPrestiges ^= """</frame></frame>""";
		}
		ML_RankedPrestiges ^= """</frame></frame>""";
		CurrentCategory += 1;
	}

	/* Royal */
	declare Vec2 Pos_RoyalPrestigeLevels = <2., 0.>;
	declare Vec2 Size_RoyalPrestigeLevel = <2., 4.5>;
	declare Vec2 Size_RoyalCategoryTypeLogo = <15.5, 9.>;
	declare Vec2 Size_RoyalCategoryLevelIcon = <6., 6.>;
	declare Vec2 Size_RoyalPrestigeLevelAdjusted = <Size_RoyalPrestigeLevel.X - MLHelpers::SkewX(Size_RoyalPrestigeLevel.Y, 10.), Size_RoyalPrestigeLevel.Y>;
	declare Vec2 Size_RoyalPrestigesLevels = <C_MaxPrestigeLevels*(Size_RoyalPrestigeLevelAdjusted.X + SizeX_PrestigeLevelOverlap), Size_RoyalPrestigeLevel.Y>;
	declare Vec2 Size_RoyalColumn = <Size_RoyalCategoryTypeLogo.X + 4*(Pos_RoyalPrestigeLevels.X + Size_RoyalPrestigesLevels.X), 7*Size_RoyalCategoryTypeLogo.Y>;
	declare Vec2 Margin_RoyalCategoryType = <5.5, 0.6>;
	declare Vec2 Margin_RoyalCategoryTypeLogo = <1., Margin_RoyalCategoryType.Y>;

	CurrentCategory = 0;
	declare Text ML_RoyalPrestiges;
	foreach (TeamIndex => TeamName in PrestigeStruct::C_RoyalCategoyTypes) { //< 20 royal teams
		ML_RoyalPrestiges ^= """
			<frame id="{{{C_Id_Frame_CategoryType}}}" pos="{{{MLHelpers::Skew(CurrentCategory%3*(Size_RoyalColumn.X + Margin_RoyalCategoryType.X), -Size_RoyalCategoryTypeLogo.Y*0.5 - ML::FloorInteger(CurrentCategory/3.)*(Size_RoyalCategoryTypeLogo.Y + Margin_RoyalCategoryType.Y), 10.)}}}" data-categorytype="{{{TeamIndex}}}">
				<frameinstance id="{{{C_Id_Asset_CategoryTypeBg}}}" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_RoyalCategoryTypeLogo.X+MLHelpers::SkewX(Size_RoyalCategoryTypeLogo.Y, 10.)}}}" data-height="{{{Size_RoyalCategoryTypeLogo.Y}}}" data-halign="center" data-valign="center" data-color="{{{ColorPalette::C_Color_DarkBlue}}}" data-opacity="0.5" z-index="0"/>
				<quad id="{{{C_Id_Quad_CategoryTypeIcon}}}" size="{{{Size_RoyalCategoryTypeLogo.X - MLHelpers::SkewX(Size_RoyalCategoryTypeLogo.Y, 10.)}}} {{{Size_RoyalCategoryTypeLogo.Y}}}" image="{{{Clans::GetClanLogo(Clans::C_ClanStyle_Animals, CurrentCategory+1)}}}" halign="center" valign="center" keepratio="fit" z-index="1"/>
				<frame id="{{{C_Id_Frame_CategoryLevels}}}" pos="{{{MLHelpers::Skew(Size_RoyalCategoryTypeLogo.X*0.5 + Margin_RoyalCategoryTypeLogo.X, 0., 10.)}}}">
		""";
		for (CategoryLevel, 0, 3) { //< For the prestiges of the royal, the category level corresponds to result of the player in a match (1st, 2nd, 3rd, 4th)
			ML_RoyalPrestiges ^= """<frame id="{{{C_Id_Frame_CategoryLevel}}}" pos="{{{CategoryLevel*(Size_RoyalPrestigesLevels.X + Pos_RoyalPrestigeLevels.X)}}} 0" data-categorylevel="{{{CategoryLevel+1}}}">""";
			if (CurrentCategory/3 < 1) {
				ML_RoyalPrestiges ^= """<quad id="{{{C_Id_Quad_CategoryLevelIcon}}}" pos="{{{MLHelpers::Skew(Size_RoyalPrestigesLevels.X*0.5, Size_RoyalCategoryTypeLogo.Y*0.5, 10.)}}}" size="{{{Size_RoyalCategoryLevelIcon.X}}} {{{Size_RoyalCategoryLevelIcon.Y}}}" halign="center" valign="bottom" style="MedalsBig" substyle="{{{C_MedalSubStyles[CategoryLevel+1]}}}" z-index="5"/>""";
			}
			ML_RoyalPrestiges ^= """<frame id="{{{C_Id_Frame_PrestigeLevels}}}">""";
			for (Level, 0, C_MaxPrestigeLevels-1) {
				ML_RoyalPrestiges ^= """<quad pos="{{{Level*(Size_RoyalPrestigeLevelAdjusted.X + SizeX_PrestigeLevelOverlap)}}} 0" size="{{{Size_RoyalPrestigeLevel.X}}} {{{Size_RoyalPrestigeLevel.Y}}}" halign="left" valign="center" image="{{{C_Img_PrestigelLevelRoyal}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.5" z-index="{{{C_MaxPrestigeLevels-Level}}}"/>""";
			}
			ML_RoyalPrestiges ^= """</frame></frame>""";
		}
		ML_RoyalPrestiges ^= """</frame></frame>""";
		CurrentCategory += 1;
	}

	return """
<stylesheet>
	<style class="{{{C_Class_TextRegular}}}" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="13" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="{{{C_Class_TextSemiBold}}}" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textsize="4" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="{{{C_Class_TextExtraBold}}}" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textsize="13" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame global -->
<frame class="{{{C_Class_PopUpPrestigeCompletion}}}">
	<frame z-index="1" id="{{{C_Id_FrameNavContainer}}}" class="{{{Navigation::C_Class_Container}}}">	
		<frameinstance id="{{{C_Id_FrameBackground}}}" modelid="{{{PopUpBackground::C_Name}}}" z-index="0"/>
		<label id="{{{C_Id_LabelTitle}}}" pos="{{{MLHelpers::Skew(-126.5, 61.5, 10.)}}}" size="150 20" class="{{{C_Class_TextExtraBold}}}" text="{{{Text_Title}}}" halign="left" z-index="1"/>
		<label id="{{{C_Id_LabelYear}}}" pos="{{{MLHelpers::Skew(-125.5, 52., 10.)}}}" size="150 20" class="{{{C_Class_TextSemiBold}}}" halign="left" z-index="1"/>
		<frameinstance id="{{{C_Id_NavigationTabs}}}" modelid="{{{NavigationTabs::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, 34.5, 10.)}}}" data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}" data-halign="left" z-index="1"/>

		<!-- Tab Season -->
		<frame id="{{{C_Id_FrameTabSeason}}}" pos="-127.5 13." hidden="1">
			{{{ML_SeasonPrestiges}}}
		</frame>

		<!-- Tab Ranked -->
		<frame id="{{{C_Id_FrameTabRanked}}}" pos="-131.5 7." hidden="1">
			{{{ML_RankedPrestiges}}}
		</frame>

		<!-- Tab Royal -->
		<frame id="{{{C_Id_FrameTabRoyal}}}" pos="-120. 17.25" hidden="1">
			{{{ML_RoyalPrestiges}}}
		</frame>

		<!-- Bottom buttons -->
		<frameinstance id="{{{C_Id_ButtonIcon_Back}}}" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
		<frameinstance
			id="{{{C_Id_Button_Back}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
			modelid="{{{ExpendableButton_TMNext::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-styles="{{{ExpendableButton_TMNext::C_Style_SizeExpendable}}} {{{ExpendableButton_TMNext::C_Style_AlignCenter}}} {{{ExpendableButton_TMNext::C_Style_ButtonSecondary}}} {{{ExpendableButton_TMNext::C_Style_PageBack}}}"
			data-nav-inputs="select;cancel"
			data-nav-targets="_;_"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{ExpendableButton_TMNext::C_NavZone}}}"
		/>
	</frame>
</frame>
""";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the frame instance of this component from an inside control
CMlFrame Private_GetPopUpPrestigeCompletionFrame(CMlControl _Control) {
	if (_Control == Null) return Null;
	if (_Control.HasClass(C_Class_PopUpPrestigeCompletion)) return _Control.Parent;
	return Private_GetPopUpPrestigeCompletionFrame(_Control.Parent);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the prestige corresponding to the given parameters
PrestigeStruct::K_Prestige Private_GetPrestige(PrestigeStruct::K_Prestige[] _PrestigeList, Text _CategoryType, Integer _CategoryLevel) {
	foreach (Prestige in _PrestigeList) {
		if (TL::CompareWithoutFormat(Prestige.CategoryType, _CategoryType, False) && Prestige.CategoryLevel == _CategoryLevel) {
			return Prestige;
		}
	}
	return PrestigeStruct::K_Prestige {};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Lock/Unlock the pop up navigation
Void Private_LockPopUp(CMlScript _This, K_PopUpPrestigeCompletion _PopUpPrestigeCompletion, Boolean _IsLocked) {
	Navigation::EnableGroup(_This, C_NavGroup_Default, !_IsLocked);
	Navigation::EnableContainer(_This, _PopUpPrestigeCompletion.Controls.Frame_NavigationContainer, !_IsLocked);
	NavigationTabs::LockTabs(_This, _PopUpPrestigeCompletion.Controls.NavigationTabs_PrestigeModes, _IsLocked);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Handle the focus inside the pop-up
Void Private_Focus(CMlScript _This, CMlControl _From, CMlControl _To) {
	if (Transition::IsInTransition(_This)) return;

	if (_From != Null) {
		Navigation::Unfocus(_This, _From);
		if (ExpendableButton::IsButton(_From)) {
			ExpendableButton::Unfocus(_This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		Navigation::Focus(_This, _To);
		if (ExpendableButton::IsButton(_To)) {
			ExpendableButton::Focus(_This, (_To as CMlFrame));
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Update the prestige list
Void Private_UpdatePrestigeList(CMlScript _This, K_PopUpPrestigeCompletion _PopUpPrestigeCompletion) {
	declare PrestigeStruct::K_Prestige[] FilteredPrestigeList;
	declare CMlFrame Frame_Tab;

	// Update year
	_PopUpPrestigeCompletion.Controls.Label_Year.SetText(""^_PopUpPrestigeCompletion.PrestigeYear);

	// Filter prestiges
	foreach (Prestige in _PopUpPrestigeCompletion.PrestigeList) {
		if (Prestige.Year == _PopUpPrestigeCompletion.PrestigeYear && Prestige.Mode == _PopUpPrestigeCompletion.PrestigeMode) {
			FilteredPrestigeList.add(Prestige);
		}
	}

	// Get the frame of the current tab
	switch (_PopUpPrestigeCompletion.PrestigeMode) {
		case CUserV2Manager::EPrestigeMode::Season: Frame_Tab = _PopUpPrestigeCompletion.Controls.Frame_TabSeason;
		case CUserV2Manager::EPrestigeMode::Ranked: Frame_Tab = _PopUpPrestigeCompletion.Controls.Frame_TabRanked;
		case CUserV2Manager::EPrestigeMode::Royal: Frame_Tab = _PopUpPrestigeCompletion.Controls.Frame_TabRoyal;
	}

	// Update prestige data
	foreach (Index => Control_CategoryType in Frame_Tab.Controls) {
		declare CMlFrame Frame_CategoryType = (Control_CategoryType as CMlFrame);
		declare CMlFrame Frame_CategoryLevels <=> (Frame_CategoryType.GetFirstChild(C_Id_Frame_CategoryLevels) as CMlFrame);

		if (_PopUpPrestigeCompletion.PrestigeMode == CUserV2Manager::EPrestigeMode::Season) {
			declare CMlLabel Label_PrestigeInfo <=> (Frame_CategoryType.GetFirstChild(C_Id_Label_SeasonInfo) as CMlLabel);
			declare Integer CategoryTypeSeasonName = CampaignStruct::GetSeasonNameInCampaignName(Frame_CategoryType.DataAttributeGet("categorytype"));

			Frame_CategoryLevels.Visible = (
				(_PopUpPrestigeCompletion.PrestigeYear > 2022 && _PopUpPrestigeCompletion.PrestigeYear < Tools::GetYear()) ||
				(_PopUpPrestigeCompletion.PrestigeYear == Tools::GetYear() && CategoryTypeSeasonName <= CampaignStore::GetLiveQuarterlyCampaign().SeasonName) ||
				(_PopUpPrestigeCompletion.PrestigeYear == 2022 && CategoryTypeSeasonName == 3)
			);
			Label_PrestigeInfo.Visible = !Frame_CategoryLevels.Visible;
		}

		if (Frame_CategoryLevels.Visible) {
			foreach (Control_CategoryLevel in Frame_CategoryLevels.Controls) {
				declare CMlFrame Frame_CategoryLevel <=> (Control_CategoryLevel as CMlFrame);
				declare CMlFrame Frame_PrestigeComplete <=> (Frame_CategoryLevel.GetFirstChild(C_Id_Frame_PrestigeComplete) as CMlFrame);
				declare CMlFrame Frame_PrestigeLevels <=> (Frame_CategoryLevel.GetFirstChild(C_Id_Frame_PrestigeLevels) as CMlFrame);
				declare PrestigeStruct::K_Prestige Prestige = Private_GetPrestige(FilteredPrestigeList, Frame_CategoryType.DataAttributeGet("categorytype"), TL::ToInteger(Frame_CategoryLevel.DataAttributeGet("categorylevel")));
	
				// Display prestige levels
				foreach (PrestigeLevel => Control_PrestigeLevel in Frame_PrestigeLevels.Controls) {
					_This.AnimMgr.Flush(Control_PrestigeLevel);
					if (Prestige.PrestigeLevel > PrestigeLevel) {
						if (_PopUpPrestigeCompletion.PrestigeMode == CUserV2Manager::EPrestigeMode::Royal) {
							_This.AnimMgr.Add(Control_PrestigeLevel, "<a opacity=\"1\" colorize=\""^CL::RgbToHex6(Clans::GetClanColor(Clans::C_ClanStyle_Animals, Index+1))^"\" />", Now + (50 * PrestigeLevel), 250, CAnimManager::EAnimManagerEasing::QuadOut);
						} else {
							_This.AnimMgr.Add(Control_PrestigeLevel, "<a opacity=\"1\" colorize=\""^ColorPalette::C_Color_GreenOne^"\" />", Now + (50 * PrestigeLevel), 250, CAnimManager::EAnimManagerEasing::QuadOut);
						}
						
						// Bonus animation when the player has unlocked all prestige levels
						if (Prestige.StatValueForNextLevel > 0) {
							_This.AnimMgr.Add(Control_PrestigeLevel, "<anim scale=\"1.2\" />", Now + C_MaxPrestigeLevels*50 + 50*PrestigeLevel + 50, 250, CAnimManager::EAnimManagerEasing::QuadOut);
							_This.AnimMgr.AddChain(Control_PrestigeLevel, "<anim scale=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
						}
					}
				}
	
				// Show completion badge if the player has unlocked all prestige levels
				if (Frame_PrestigeComplete != Null && Prestige.StatValueForNextLevel > 0) {
					foreach (Control in Frame_PrestigeComplete.Controls) {
						_This.AnimMgr.Flush(Control);
						if (Control.ControlId == C_Id_Quad_PrestigeCompleteCheck) {
							_This.AnimMgr.Add(Control, "<anim opacity=\"0.6\" scale=\"1.2\"/>", Now + C_MaxPrestigeLevels*50 + 50, 250, CAnimManager::EAnimManagerEasing::QuadOut);
						} else {
							_This.AnimMgr.Add(Control, "<anim opacity=\"1.\" scale=\"1.2\"/>", Now + C_MaxPrestigeLevels*50 + 50, 250, CAnimManager::EAnimManagerEasing::QuadOut);
						}
						_This.AnimMgr.Add(Control, "<anim scale=\"1.\"/>", Now + C_MaxPrestigeLevels*50 + 50 + 500, 250, CAnimManager::EAnimManagerEasing::QuadOut);
					}
				}
			}
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Reset the pop-up
Void Private_Reset(CMlScript _This, K_PopUpPrestigeCompletion _PopUpPrestigeCompletion) {
	foreach (Frame_Tab in [_PopUpPrestigeCompletion.Controls.Frame_TabSeason, _PopUpPrestigeCompletion.Controls.Frame_TabRanked, _PopUpPrestigeCompletion.Controls.Frame_TabRoyal]) {
		foreach (Control_CategoryType in Frame_Tab.Controls) {
			declare CMlFrame Frame_CategoryType = (Control_CategoryType as CMlFrame);
			declare CMlFrame Frame_CategoryLevels <=> (Frame_CategoryType.GetFirstChild(C_Id_Frame_CategoryLevels) as CMlFrame);
			declare CMlLabel Label_PrestigeInfo <=> (Frame_CategoryType.GetFirstChild(C_Id_Label_SeasonInfo) as CMlLabel);

			Frame_CategoryLevels.Show();
			if (Label_PrestigeInfo != Null) Label_PrestigeInfo.Hide(); 
			foreach (Control_CategoryLevel in Frame_CategoryLevels.Controls) {
				declare CMlFrame Frame_CategoryLevel = (Control_CategoryLevel as CMlFrame);
				declare CMlFrame Frame_PrestigeComplete <=> (Frame_CategoryLevel.GetFirstChild(C_Id_Frame_PrestigeComplete) as CMlFrame);
				declare CMlFrame Frame_PrestigeLevels <=> (Frame_CategoryLevel.GetFirstChild(C_Id_Frame_PrestigeLevels) as CMlFrame);
	
				foreach (Control_PrestigeLevel in Frame_PrestigeLevels.Controls) {
					(Control_PrestigeLevel as CMlQuad).Opacity = 0.5;
					(Control_PrestigeLevel as CMlQuad).Colorize = ColorPalette::C_Color_Vec3_DarkBlue;
					_This.AnimMgr.Flush(Control_PrestigeLevel);
					Control_PrestigeLevel.Scale = 1.;
				}

				if (Frame_PrestigeComplete != Null) {
					foreach (Control in Frame_PrestigeComplete.Controls) {
						_This.AnimMgr.Flush(Control);
						(Control as CMlQuad).Opacity = 0.;
						(Control as CMlQuad).Scale = 1.;
					}
				}
			}
		}
		Frame_Tab.Hide();
	}
}

K_PopUpPrestigeCompletion Private_Display(CMlScript _This, K_PopUpPrestigeCompletion _PopUpPrestigeCompletion, PrestigeStruct::K_Prestige[Text] _PrestigeList, Integer _PrestigeYear, CUserV2Manager::EPrestigeMode _PrestigeMode, Boolean _IsDisplayed) {
	declare K_PopUpPrestigeCompletion PopUpPrestigeCompletion = _PopUpPrestigeCompletion;

	// Update prestige data
	PopUpPrestigeCompletion.PrestigeList = _PrestigeList;
	PopUpPrestigeCompletion.PrestigeYear = _PrestigeYear;
	PopUpPrestigeCompletion.PrestigeModesUpdated.clear();
	if (_PrestigeList.count > 0) {
		NavigationTabs::UpdateCurrentTab(_This, PopUpPrestigeCompletion.Controls.NavigationTabs_PrestigeModes, C_TabIndexToPrestigeModes.keyof(_PrestigeMode));
	} else {
		Private_Reset(_This, PopUpPrestigeCompletion);
	}

	// Update pop-up visibility
	PopUpPrestigeCompletion.Controls.Frame_Global.Visible = _IsDisplayed;
	Private_LockPopUp(_This, PopUpPrestigeCompletion, !_IsDisplayed);

	// Update focus
	ControllerInfo::SetButtons(["A" => _("Select"), "B" => _("Back")]);
	if (_IsDisplayed && !Navigation::IsFocused(_This, PopUpPrestigeCompletion.Controls.Button_Back, C_NavGroup_Default)) {
		Private_Focus(_This, Null, PopUpPrestigeCompletion.Controls.Button_Back);
	}

	return PopUpPrestigeCompletion;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Check if the control is a pop-up
Boolean IsPopUpPrestigeCompletion(CMlControl _Control) {
	if (_Control == Null) return False;
	declare K_PopUpPrestigeCompletion TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion for _Control = C_PopUpPrestigeCompletion_Null;
	return TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion.IsPopUpPrestigeCompletion;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Display or hide the pop-up
Void Display(CMlScript _This, CMlFrame _Frame_PopUpPrestigeCompletion, PrestigeStruct::K_Prestige[Text] _PrestigeList, Integer _PrestigeYear, CUserV2Manager::EPrestigeMode _PrestigeMode, Boolean _IsDisplayed) {
	assert(IsPopUpPrestigeCompletion(_Frame_PopUpPrestigeCompletion), _Frame_PopUpPrestigeCompletion.ControlId^" is not an instance of the PopUpPrestigeCompletion component.");
	declare K_State TMNext_PopUpPrestigeCompletion_State for _This.Page = C_State_Null;
	declare K_PopUpPrestigeCompletion TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion for _Frame_PopUpPrestigeCompletion = C_PopUpPrestigeCompletion_Null;
	declare Boolean IsEventSend = TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion.Controls.Frame_Global.Visible != _IsDisplayed;

	// Update pop-up visibility
	TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion = Private_Display(_This, TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion, _PrestigeList, _PrestigeYear, _PrestigeMode, _IsDisplayed);

	// Send event
	if (IsEventSend) {
		if (_IsDisplayed) {
			TMNext_PopUpPrestigeCompletion_State.PendingEvents.add(K_Event {
				Type = C_EventType_Open,
				PopUpPrestigeCompletion = TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion.Controls.Frame_Global
			});
		} else {
			TMNext_PopUpPrestigeCompletion_State.PendingEvents.add(K_Event {
				Type = C_EventType_Close,
				PopUpPrestigeCompletion = TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion.Controls.Frame_Global
			});
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Handle the selection inside the pop-up
Void Private_Select(CMlScript _This, CMlControl _Control) {
	declare CMlFrame Frame_PopUpPrestigeCompletion = Private_GetPopUpPrestigeCompletionFrame(_Control);

	if (Frame_PopUpPrestigeCompletion != Null) {
		switch (_Control.ControlId) {
			case C_Id_Button_Back: {
				Display(_This, Frame_PopUpPrestigeCompletion, [], 0, CUserV2Manager::EPrestigeMode::Season, False);
			}
		}
	}
}

Void Open(CMlScript _This, CMlFrame _Frame_PopUpPrestigeCompletion, PrestigeStruct::K_Prestige[Text] _PrestigeList, Integer _PrestigeYear, CUserV2Manager::EPrestigeMode _PrestigeMode) {
	Display(_This, _Frame_PopUpPrestigeCompletion, _PrestigeList, _PrestigeYear, _PrestigeMode, True);
}
Void Close(CMlScript _This, CMlFrame _Frame_PopUpPrestigeCompletion) {
	Display(_This, _Frame_PopUpPrestigeCompletion, [], 0, CUserV2Manager::EPrestigeMode::Season, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get pending events of the pop-up
K_Event[] GetPendingEvents(CMlScript _This) {
	declare K_State TMNext_PopUpPrestigeCompletion_State for _This.Page = C_State_Null;
	return TMNext_PopUpPrestigeCompletion_State.PendingEvents;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Initialize the pop-up component
Void InitializePopUpPrestigeCompletion(CMlScript _This, CMlFrame _Frame_PopUpPrestigeCompletion) {
	declare K_PopUpPrestigeCompletion TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion for _Frame_PopUpPrestigeCompletion = C_PopUpPrestigeCompletion_Null;
	
	TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion = K_PopUpPrestigeCompletion {
		IsPopUpPrestigeCompletion = True,
		PrestigeYear = Tools::GetYear(),
		PrestigeMode = CUserV2Manager::EPrestigeMode::Season,
		Controls = K_Controls {
			Frame_Global = _Frame_PopUpPrestigeCompletion,
			Frame_NavigationContainer = (_Frame_PopUpPrestigeCompletion.GetFirstChild(C_Id_FrameNavContainer) as CMlFrame),
			Frame_TabSeason = (_Frame_PopUpPrestigeCompletion.GetFirstChild(C_Id_FrameTabSeason) as CMlFrame),
			Frame_TabRanked = (_Frame_PopUpPrestigeCompletion.GetFirstChild(C_Id_FrameTabRanked) as CMlFrame),
			Frame_TabRoyal = (_Frame_PopUpPrestigeCompletion.GetFirstChild(C_Id_FrameTabRoyal) as CMlFrame),
			Button_Back = (_Frame_PopUpPrestigeCompletion.GetFirstChild(C_Id_Button_Back) as CMlFrame),
			Label_Year = (_Frame_PopUpPrestigeCompletion.GetFirstChild(C_Id_LabelYear) as CMlLabel),
			NavigationTabs_PrestigeModes = (_Frame_PopUpPrestigeCompletion.GetFirstChild(C_Id_NavigationTabs) as CMlFrame)
		}
	};

	// Close the pop-up by defaut
	TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion = Private_Display(_This, TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion, [], 0, CUserV2Manager::EPrestigeMode::Season, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Initialize all pop-ups in the manialink
Void InitializePopUpPrestigeCompletions(CMlScript _This) {
	_This.Page.GetClassChildren(C_Class_PopUpPrestigeCompletion, _This.Page.MainFrame, True);
	declare CMlControl[] PageClassChildrenControls = _This.Page.GetClassChildren_Result;
	foreach (Control in PageClassChildrenControls) {
		InitializePopUpPrestigeCompletion(_This, (Control as CMlFrame).Parent);
	}
}

Void MainStart(CMlScript _This) {
	InitializePopUpPrestigeCompletions(_This);
}

Void MainLoop(CMlScript _This) {
	declare K_State TMNext_PopUpPrestigeCompletion_State for _This.Page = C_State_Null;
	TMNext_PopUpPrestigeCompletion_State.PendingEvents = [];

	/* PopUpBackground events */
	foreach (Event in PopUpBackground::GetPendingEvents(_This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == C_Id_FrameBackground) {
			switch (Event.Type) {
				case PopUpBackground::C_EventType_Close: Close(_This, Private_GetPopUpPrestigeCompletionFrame(Event.PopUpBackground));
			}
		}
	}

	/* Navigation events */
	foreach (Event in Navigation::GetPendingEvents(_This)) {
		switch (Event.Type) {
			case Navigation::C_EventType_NavigateInput: {
				if (Navigation::IsEventFromGroup(_This, Event, C_NavGroup_Default)) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Cancel: Close(_This, Private_GetPopUpPrestigeCompletionFrame(Event.To));
						case CMlScriptEvent::EMenuNavAction::Select: Private_Select(_This, Event.To);
						default: Private_Focus(_This, Event.From, Event.To);
					}
				}
			}
			case Navigation::C_EventType_NavigateMouse: {
				if (Navigation::IsEventFromGroup(_This, Event, C_NavGroup_Default)) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: Private_Select(_This, Event.To);
						case CMlScriptEvent::Type::MouseOver: Private_Focus(_This, Event.From, Event.To);
					}
				}
			}
		}
	}

	/* Events NavigationTabs */
	foreach (Event in NavigationTabs::GetPendingEvents(_This)) {
		if (Event.Frame_NavigationTabs.ControlId == C_Id_NavigationTabs) {
			switch (Event.Type) {
				case NavigationTabs::C_EventType_Select: {
					declare K_PopUpPrestigeCompletion TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion for Private_GetPopUpPrestigeCompletionFrame(Event.Frame_NavigationTabs) = C_PopUpPrestigeCompletion_Null;

					TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion.Controls.Frame_TabSeason.Visible = Event.CurrentTab == C_Tab_Season;
					TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion.Controls.Frame_TabRanked.Visible = Event.CurrentTab == C_Tab_Ranked;
					TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion.Controls.Frame_TabRoyal.Visible = Event.CurrentTab == C_Tab_Royal;
					TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion.PrestigeMode = C_TabIndexToPrestigeModes.get(Event.CurrentTab, CUserV2Manager::EPrestigeMode::Season);

					if (!TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion.PrestigeModesUpdated.exists(TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion.PrestigeMode)) {
						TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion.PrestigeModesUpdated.add(TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion.PrestigeMode);
						Private_UpdatePrestigeList(_This, TMNext_PopUpPrestigeCompletion_PopUpPrestigeCompletion);
					}
				}
			}
		}
	}
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text ComponentV2() {
	return MV::ComponentV2(
		C_Name,
		GetManialink(),
		"""
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpPrestigeCompletion.Script.txt" as {{{Q}}}
		""",
		"""
***MainStart***
***
{{{P}}}MainStart(This);
***

***MainLoop***
***
{{{P}}}MainLoop(This);
***
		""",
		[
			ButtonIcon::ComponentV2(),
			ExpendableAsset_TMNext::ComponentV2(),
			ExpendableButton_TMNext::ComponentV2(),
			Navigation::ComponentV2(),
			NavigationTabs::ComponentV2(),
			PopUpBackground::ComponentV2(),
			Transition::ComponentV2()
		],
		[]
	);
}