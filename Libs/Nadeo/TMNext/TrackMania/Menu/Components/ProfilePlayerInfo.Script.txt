/** 
 *	Component: ProfilePlayerInfo
 *
 *	Available parameters:
 *	- data-enable-players-pager -> hide/show the players pager
 *	- data-enable-zone-selection -> hide/show the zone selection button
 *	- data-enable-my-access-info -> hide/show the my access button
 *	- data-enable-garage -> hide/show the garage button
 */
#Const Version		"2023-06-13"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Components/ProfilePlayerInfo.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/CommonLibs/Common/Error.Script.txt" as Error
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PlayerRank.Script.txt" as PlayerRank
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PlayerRoyalVictories.Script.txt" as PlayerRoyalVictories
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuButtonList.Script.txt" as MenuButtonList
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/NavigationTabs.Script.txt" as NavigationTabs
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpReportSystem.Script.txt" as PopUpReportSystem

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-profileplayerinfo" //< Component name
#Const P "ComponentProfilePlayerInfo_" //< Prefix used to differentiate functions/variables in the script
#Const C_NavGroup_Global "navgroup-component-profileplayerinfo-global"
#Const C_NavGroup_Main "navgroup-component-profileplayerinfo-main"
#Const C_NavGroup_MouseOnly "navgroup-component-profileplayerinfo-mouse-only"

#Const C_DelayBetweenPagerRequest 250
#Const C_Size_PlayerProfile <300., 160.>
#Const Const::C_ImageUrl_Profile_Background as C_BackgroundImageUrl

// Categories tabs
#Const C_TabDisplayed_General 0
#Const C_TabDisplayed_Trophies 1
#Const C_TabDisplayed_Royal 2
#Const C_TabDisplayed_Ranked 3
#Const C_TabNames [
	//L16N [Profile] Title of tab to access the profile of the player
	0 => _("|Profile|General"),
	//L16N [Profile] Title of tab to access trophies owned by the player
	1 => _("|Profile|Trophies"),
	//L16N [Profile] Title of tab to access the Royal statistics of the player, Try to keep "Royal" as it is as much as possible.
	2 => _("|Profile|Royal"),
	//L16N [Profile] Title of tab to access the matchmaking ranked statistics of the player
	3 => _("|Profile|Ranked")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component(Vec2 _Size_PlayerProfile) {
	//L16N [Profile] Text pronounced when a trophy is selected. %1 is the number of trophies, %2 is part of the the trophy name. e.g. "3 Trophy 7"
	declare Text TTS_Trophy = _("%1 trophy %2");
	//L16N [Profile] A button to access the garage
	declare Text Text_Garage = _("Garage");
	//L16N [Profile] A button to access the first party profile of the player. %1 will be replaced by the first party network name. eg: "PSN profile".
	declare Text Text_FirstPartyProfile = TL::Compose(_("%1 profile"), "$<$i"^Platform::GetSmallNetworkName(System)^"$>");
	//L16N [Profile] A button to access the Ubisoft Connect profile of the player. %1 will be replaced by the Ubisoft Connect network name. eg: "Ubisoft Connect profile".
	declare Text Text_UbisoftConnectProfile = TL::Compose(_("%1 profile"), "$<$i"^Platform::GetSmallNetworkName(CSystemPlatform::ESystemPlatform::None)^"$>");
	//L16N [Profile] A button to report a player, use an infinitive verb if possible
	declare Text Text_Report = _("|Verb|Report");
	//L16N [Profile] A button to access to the store page (replacing the STORE button in the home page) where you can find information about the different accesses (Standard, Club) and the time left.
	declare Text Text_MyAccess = _("My access");
	//L16N [Profile] A button to select the zone (continent/territory/region) to represent. eg: Europe > France > ...
	declare Text Text_ChangeRegion = _("Change region");
	//L16N [Profile] Player's points number (plural).
	declare Text Text_Points = _("|Score|Points");
	//L16N [Profile] Player's points number (singular).
	declare Text Text_Point = _("|Score|Point");
	//L16N [Profile] The player did not received a ranking yet
	declare Text Text_NotRanked = _("Not ranked");
	//L16N [Profile] A button to display the next zone in the list. A zone is a location, eg: Europe, South Africa, Tokyo, ...
	declare Text Text_NextZone = _("Next zone");
	//L16N [Profile] A button to display the previous zone in the list. A zone is a location, eg: Europe, South Africa, Tokyo, ...
	declare Text Text_PrevZone = _("Previous zone");
	//L16N [Profile] A button to display the next player in the list
	declare Text Text_NextPlayer = _("Next player");
	//L16N [Profile] A button to display the previous player in the list
	declare Text Text_PrevPlayer = _("Previous player");
	//L16N [Profile] An error occurred while retrieving the trophies. %1 will be replaced by an error code.
	declare Text Text_ErrorWhileRetrievingTrophies = _("Error while retrieving trophies (code: %1)");
	//L16N [Profile] An error occurred while retrieving the trophy ranking. %1 will be replaced by an error code.
	declare Text Text_ErrorWhileRetrievingTrophyRanking = _("Error while retrieving ranking (code: %1)");
	//L16N [Profile] Tell the player that they can click on the trophies icons to see how they unlocked them.
	declare Text Text_UnlockHistory = _("Select a trophy to see its unlock history");
	//L16N [Profile] Retrieving data about the user
	declare Text Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [Profile] The trophy unlock history is not available at the moment
	declare Text Text_TrophyHistoryUnavailable = _("Trophy history unavailable");
	//L16N [Profile] The trophy unlock history is empty
	declare Text Text_TrophyHistoryEmpty = _("Trophy history empty");
	//L16N [Profile] Trophy awarded for a medal obtained in solo mode (eg: all bronze medals in white tracks of a campaign)
	declare Text Text_TrophyAchievementType_SoloMedal = _("|TrophyUnlock|Solo medal");
	//L16N [Profile] Trophy awarded for a rank obtained in solo mode (eg: top 100 at the end of the winter season)
	declare Text Text_TrophyAchievementType_SoloRanking = _("|TrophyUnlock|Solo ranking");
	//L16N [Profile] Trophy awarded for a rank obtained at the end of a live match (eg: finished 5th at the end of an online time attack match)
	declare Text Text_TrophyAchievementType_LiveMatch = _("|TrophyUnlock|Live match");
	//L16N [Profile] Trophy awarded for a rank obtained at the end of one competition match (eg: finished 5th of the Open Grand League week 3 match)
	declare Text Text_TrophyAchievementType_CompetitionMatch = _("|TrophyUnlock|Competition match");
	//L16N [Profile] Trophy awarded for a rank obtained at the end of a whole competition (eg: finished 2nd of the Open Grand League Fall 2020 competition)
	declare Text Text_TrophyAchievementType_CompetitionRanking = _("|TrophyUnlock|Competition ranking");
	//L16N [Profile] Trophy awarded for a rank obtained at the end of a seasonal campaign (eg: finished 125th of the Fall 2020 campaign)
	declare Text Text_SoloRanking_OfficialQuarterly = _("|TrophyUnlock|Seasonal campaign");
	//L16N [Profile] Trophy awarded for a rank obtained at the end of the track of the day (eg: finished 125th of the 11/11/2020 track of the day)
	declare Text Text_SoloRanking_TrackOfTheDay = _("|TrophyUnlock|Track of the Day");
	//L16N [Profile] Trophy awarded for a medal obtained on the track of the day (eg: author medal on the 11/11/2020 track of the day)
	declare Text Text_SoloMedal_TrackOfTheDay = _("|TrophyUnlock|Track of the Day");
	//L16N [Profile] Trophy awarded for the medals obtained in a campaign category (eg: all gold medals on the white tracks of the Fall 2020 campaign)
	declare Text Text_SoloMedal_SoloWhite = _("|TrophyUnlock|All medals on white tracks");
	//L16N [Profile] Trophy awarded for the medals obtained in a campaign category (eg: all gold medals on the green tracks of the Fall 2020 campaign)
	declare Text Text_SoloMedal_SoloGreen = _("|TrophyUnlock|All medals on green tracks");
	//L16N [Profile] Trophy awarded for the medals obtained in a campaign category (eg: all gold medals on the blue tracks of the Fall 2020 campaign)
	declare Text Text_SoloMedal_SoloBlue = _("|TrophyUnlock|All medals on blue tracks");
	//L16N [Profile] Trophy awarded for the medals obtained in a campaign category (eg: all gold medals on the red tracks of the Fall 2020 campaign)
	declare Text Text_SoloMedal_SoloRed = _("|TrophyUnlock|All medals on red tracks");
	//L16N [Profile] Trophy awarded for the medals obtained in a campaign category (eg: all gold medals on the black tracks of the Fall 2020 campaign)
	declare Text Text_SoloMedal_SoloBlack = _("|TrophyUnlock|All medals on black tracks");

	//L16N [Profile] Echelon name
	declare Text Text_Bronze1 = _("|Echelon|Bronze 1");
	//L16N [Profile] Echelon name
	declare Text Text_Bronze2 = _("|Echelon|Bronze 2");
	//L16N [Profile] Echelon name
	declare Text Text_Bronze3 = _("|Echelon|Bronze 3");
	//L16N [Profile] Echelon name
	declare Text Text_Silver1 = _("|Echelon|Silver 1");
	//L16N [Profile] Echelon name
	declare Text Text_Silver2 = _("|Echelon|Silver 2");
	//L16N [Profile] Echelon name
	declare Text Text_Silver3 = _("|Echelon|Silver 3");
	//L16N [Profile] Echelon name
	declare Text Text_Gold1 = _("|Echelon|Gold 1");
	//L16N [Profile] Echelon name
	declare Text Text_Gold2 = _("|Echelon|Gold 2");
	//L16N [Profile] Echelon name
	declare Text Text_Gold3 = _("|Echelon|Gold 3");

	//L16N [Profile] Best rank in ranked matchmaking
	declare Text Text_BestRank = _("Best rank");
	//L16N [Profile] Current season in ranked matchmaking
	declare Text Text_CurrentSeason = _("Current season");
	//L16N [Profile] Previous season in ranked matchmaking
	declare Text Text_PreviousSeason = _("Previous season");
	//L16N [Profile] Best season in ranked matchmaking
	declare Text Text_BestSeason = _("Best season");
	//L16N [Profile] These datas are missing in the API
	declare Text Text_MissingStats = _("No data");
	//L16N [Profile] Text displayed above the number of matches the player played
	declare Text Text_Matches = _("Matches");
	//L16N [Profile] MVP means "Most valuable player", if "Most Valuable Player" is not common in your language please translate by "Best Player", will be followed the total MVP count of the player in all seasons
	declare Text Text_MVP = _("MVP");
	//L16N [Profile] The win rate of the player in ranked matchmaking, will be followed by a percentage
	declare Text Text_WinRate = _("Win rate");
	//L16N [Profile] Rank in royal matchmaking
	declare Text Text_RoyalRank = _("Royal rank");
	//L16N [Profile] Victories of the Royal mode, will be followed by a number
	declare Text Text_Victories = _("Victories");
	//L16N [Profile] Title of player"s statistics in Super Royal, Try to keep "Super Royal" as it is as much as possible.
	declare Text Text_SuperRoyal = _("Super Royal");
	//L16N [Profile] Message displayed when some information about the player profile are missing.
	declare Text Text_MissingInfos = _("Some information were not retrieved correctly. Please try again to display the missing information.");
	//L16N [Profile] Text displayed above the global ranking of the player
	declare Text Text_Global = _("Global");
	//L16N [Profile] Text displayed next to the player ranking. eg: "Top 3 World".
	declare Text Text_Top = _("|Rank|Top");
	declare Text Text_ErrorWhileRetrievingProfile = TL::Compose(
		//L16N [Profile] An error occurred while retrieving the player's profile. %1 will be replaced by an error code.
		_("Error while retrieving profile (code: %1)"),
		Error::C_Code_Profile_MissPrivilegeViewGameHistory
	);

	declare Text[Text] SuperRoyal_DivisionNames = Const::C_SuperRoyal_DivisionNames;
	declare Text Text_Bronze = SuperRoyal_DivisionNames.get(Const::C_SuperRoyal_Division_Bronze);
	declare Text Text_Silver = SuperRoyal_DivisionNames.get(Const::C_SuperRoyal_Division_Silver);
	declare Text Text_Gold = SuperRoyal_DivisionNames.get(Const::C_SuperRoyal_Division_Gold);
	declare Text Text_Master = SuperRoyal_DivisionNames.get(Const::C_SuperRoyal_Division_Master);

	declare Vec2 Size_PagerPrevPlayer = <7., 7.>;
	declare Vec2 Size_PagerNextPlayer = <7., 7.>;

	declare Vec2 Pos_SpinnerTrophies = <100., -35.>;

	declare Int2 TrophiesListGrid = <1, 9>;
	declare Vec2 Size_TrophyCellGutter = <-0.52, 9.>;
	declare Vec2 Size_TrophyCell = MLHelpers::KeepRatioFromY(372., 280., 23.);
	declare Vec2 Size_TrophyIcon = <21., 21.>;
	declare Text ML_TrophiesList = "";
	for (I, 0, 8) {
		declare Integer ColNb = I / TrophiesListGrid.X;
		declare Vec2 Pos = <(Size_TrophyCell.X + Size_TrophyCellGutter.X) * ColNb, 0.>;
		declare Text ControlId = P^"button-trophy-"^I;
		ML_TrophiesList ^= """
			<frame
				id="{{{ControlId}}}"
				class="{{{Navigation::C_Class}}} {{{P}}}button-trophy"
				pos="{{{Pos.X}}} {{{Pos.Y}}}"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="{{{P}}}quad-trophy-mouse"
				data-trophy-key="{{{I}}}"
			>
				<frameinstance modelid="{{{P}}}framemodel-trophy-cell" />
			</frame>
		""";
	}

	declare Int2 TrophiesHistoryGrid = <1, 7>;
	declare Vec2 Size_TrophiesHistory = <162., 53.>;
	declare Vec2 Size_TrophiesHistory_Gutter = <1., 1.>;
	declare Vec2 Size_TrophiesHistory_Cell = Scroll::GetElementSize(Size_TrophiesHistory, Size_TrophiesHistory_Gutter, TrophiesHistoryGrid.X, TrophiesHistoryGrid.Y);
	declare Integer TrophiesHistoryCellsNb = Scroll::GetRequiredElementsNb(Size_TrophiesHistory, Size_TrophiesHistory_Cell, Size_TrophiesHistory_Gutter, TrophiesHistoryGrid.X);
	declare Vec2 Size_TrophiesHistory_StartEnd = MLHelpers::KeepRatioFromY(128., 256., Size_TrophiesHistory_Cell.Y);
	declare Vec2 Size_TrophiesHistory_Description = <125. - (Size_TrophiesHistory_StartEnd.X * 2.), Size_TrophiesHistory_Cell.Y>;
	declare Vec2 Size_TrophiesHistory_Date = <26. - (Size_TrophiesHistory_StartEnd.X * 2.), Size_TrophiesHistory_Cell.Y>;
	declare Vec2 Size_TrophiesHistory_Amount = <9.5 - (Size_TrophiesHistory_StartEnd.X * 2.), Size_TrophiesHistory_Cell.Y>;
	declare Vec2 Pos_TrophiesHistory_Description = <Size_TrophiesHistory_StartEnd.X, 0.>;
	declare Vec2 Pos_TrophiesHistory_Date = <(Size_TrophiesHistory_StartEnd.X * 2.) + Pos_TrophiesHistory_Description.X + Size_TrophiesHistory_Description.X + 1., 0.>;
	declare Vec2 Pos_TrophiesHistory_Amount = <(Size_TrophiesHistory_StartEnd.X * 2.) + Pos_TrophiesHistory_Date.X + Size_TrophiesHistory_Date.X + 0.5, 0.>;
	declare Text ML_TrophiesHistory = "";
	for (I, 1, TrophiesHistoryCellsNb) {
		ML_TrophiesHistory ^= """<frameinstance modelid="{{{P}}}framemodel-trophy-history-cell" class="{{{Scroll::C_Class_Element}}}" hidden="1" />""";
	}

	declare Vec2 Size_PlayerCard = <109., 14.> * 0.84;
	declare Vec2 Size_PlayerCardFlag = <23.2, 14.> * 0.84;

	declare Vec2 Size_BgFull = MLHelpers::KeepRatioFromY(732., 1152., 96.);
	declare Vec2 Size_BgHalf = MLHelpers::KeepRatioFromY(628., 556., 46.);
	declare Vec2 Size_BgThird = MLHelpers::KeepRatioFromY(592., 360., 30.);
	declare Vec2 Size_BgTrophies = MLHelpers::KeepRatioFromY(628., 556., 53.);

	return MV::Component(
		C_Name,
		"""
<stylesheet>
	<style class="{{{P}}}text-title" textsize="10" textprefix="$t$i" textitalicslope=".2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textcolor="FFF" />
	<style class="{{{P}}}text-regular" textsize="4" textprefix="$t$i" textitalicslope=".2" textfont="{{{FontManager::C_GameFontRegular}}}" textcolor="FFF" />
	<style class="{{{P}}}text-info" textsize="4" halign="center" valign="center2" textprefix="$t$i" textitalicslope=".2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textcolor="FFF" />
	<style class="{{{P}}}text-error" halign="center" valign="center2" textprefix="$t$i" textfont="{{{FontManager::C_GameFontSemiBold}}}" textcolor="{{{ColorPalette::C_Color_ErrorRed}}}" />
	<style class="{{{P}}}text-bold" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$t$i" textcolor="ffffff" textsize="2" />
	<style class="{{{P}}}text-semibold" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$t$i" textcolor="ffffff" textsize="2" />
</stylesheet>
<framemodel id="{{{P}}}framemodel-trophy-cell">
	<quad
		id="{{{P}}}quad-trophy-icon"
		pos="0.75 {{{Size_TrophyCell.Y * -0.43}}}" z-index="1"
		size="{{{Size_TrophyIcon.X}}} {{{Size_TrophyIcon.Y}}}"
		halign="center" valign="center"
		autoscale="0"
		image="{{{Const::C_ImageUrl_Trophy_512_Bronze1}}}"
	/>
	<label
		id="{{{P}}}label-trophy-count"
		class="{{{P}}}text-bold"
		pos="0 {{{Size_TrophyCell.Y * -0.88}}}" z-index="2"
		size="{{{Size_TrophyCell.X}}} {{{Size_TrophyCell.Y}}}"
		halign="center" valign="center2"
		textsize="3.5"
		text="0"
	/>
	<quad
		id="{{{P}}}quad-trophy-bg"
		pos="0 {{{Size_TrophyCell.Y * -0.5}}}" z-index="-1"
		{{{MLHelpers::Size(Size_TrophyCell)}}}
		halign="center" valign="center"
		image="{{{Const::C_ImageUrl_Profile_TrophyBg}}}"
		colorize="{{{ColorPalette::C_Color_DarkBlue}}}"
		opacity="0.2"
	/>
	<quad
		id="{{{P}}}quad-trophy-focus"
		pos="0 {{{Size_TrophyCell.Y * -0.5}}}" z-index="0"
		{{{MLHelpers::Size(Size_TrophyCell)}}}
		halign="center" valign="center"
		opacity="0"
		image="{{{Const::C_ImageUrl_Profile_TrophyContour}}}"
		colorize="{{{ColorPalette::C_Color_GreenOne}}}"
	/>
	<frame {{{MLHelpers::Size(Size_TrophyCell)}}} halign="center">
		<quad
			id="{{{P}}}quad-trophy-mouse"
			class="{{{Navigation::C_Class_ActivationZone}}}"
			pos="0 {{{Size_TrophyCell.Y * -0.5}}}" z-index="-1"
			rot="10"
			size="{{{Size_TrophyCell.X * 0.85}}} {{{Size_TrophyCell.Y * 1.2}}}"
			halign="center" valign="center"
			opacity="0"
			scriptevents="1"
		/>
	</frame>
</framemodel>
<framemodel id="{{{P}}}framemodel-trophy-history-cell">
	<frame id="frame-trophy-history-cell-bg" z-index="0">
		<quad {{{MLHelpers::Pos(Pos_TrophiesHistory_Description)}}} {{{MLHelpers::Size(Size_TrophiesHistory_StartEnd)}}} halign="right" image="{{{Const::C_ImageUrl_Profile_TrophyLine_Start}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" />
		<quad {{{MLHelpers::Pos(Pos_TrophiesHistory_Description)}}} {{{MLHelpers::Size(Size_TrophiesHistory_Description)}}} bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" />
		<quad {{{MLHelpers::Pos(<Pos_TrophiesHistory_Description.X + Size_TrophiesHistory_Description.X, Pos_TrophiesHistory_Description.Y>)}}} {{{MLHelpers::Size(Size_TrophiesHistory_StartEnd)}}} image="{{{Const::C_ImageUrl_Profile_TrophyLine_End}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" />
		
		<quad {{{MLHelpers::Pos(Pos_TrophiesHistory_Date)}}} {{{MLHelpers::Size(Size_TrophiesHistory_StartEnd)}}} halign="right" image="{{{Const::C_ImageUrl_Profile_TrophyLine_Start}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" />
		<quad {{{MLHelpers::Pos(Pos_TrophiesHistory_Date)}}} {{{MLHelpers::Size(Size_TrophiesHistory_Date)}}} bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" />
		<quad {{{MLHelpers::Pos(<Pos_TrophiesHistory_Date.X + Size_TrophiesHistory_Date.X, Pos_TrophiesHistory_Date.Y>)}}} {{{MLHelpers::Size(Size_TrophiesHistory_StartEnd)}}} image="{{{Const::C_ImageUrl_Profile_TrophyLine_End}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" />

		<quad {{{MLHelpers::Pos(Pos_TrophiesHistory_Amount)}}} {{{MLHelpers::Size(Size_TrophiesHistory_StartEnd)}}} halign="right" image="{{{Const::C_ImageUrl_Profile_TrophyLine_Start}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" />
		<quad {{{MLHelpers::Pos(Pos_TrophiesHistory_Amount)}}} {{{MLHelpers::Size(Size_TrophiesHistory_Amount)}}} bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" />
		<quad {{{MLHelpers::Pos(<Pos_TrophiesHistory_Amount.X + Size_TrophiesHistory_Amount.X, Pos_TrophiesHistory_Amount.Y>)}}} {{{MLHelpers::Size(Size_TrophiesHistory_StartEnd)}}} image="{{{Const::C_ImageUrl_Profile_TrophyLine_End}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" />
	</frame>
	<frame pos="0 {{{(Size_TrophiesHistory_Cell.Y * -0.5) - 0.5}}}" z-index="1">
		<label id="{{{P}}}label-description" class="{{{P}}}text-semibold" pos="{{{Pos_TrophiesHistory_Description.X}}} 0" size="{{{Size_TrophiesHistory_Description.X}}} {{{Size_TrophiesHistory_Description.Y}}}" valign="center2" textsize="2" />
		<label id="{{{P}}}label-date" class="{{{P}}}text-semibold" pos="{{{Pos_TrophiesHistory_Date.X + (Size_TrophiesHistory_Date.X * 0.5)}}} 0" size="{{{Size_TrophiesHistory_Date.X + 4.}}} {{{Size_TrophiesHistory_Date.Y}}}" halign="center" valign="center2" textsize="2" />
		<label id="{{{P}}}label-amount" class="{{{P}}}text-bold" pos="{{{Pos_TrophiesHistory_Amount.X + (Size_TrophiesHistory_Amount.X * 0.5)}}} 0" size="{{{Size_TrophiesHistory_Amount.X + 2.}}} {{{Size_TrophiesHistory_Amount.Y}}}" halign="center" valign="center2" textsize="2" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" />
	</frame>
</framemodel>

<frame id="{{{P}}}frame-global" class="{{{C_Name}}} {{{Navigation::C_Class}}}" data-nav-inputs="action3;action4;up;down;cancel" data-nav-targets="_;_;_;_;_" data-nav-group="{{{C_NavGroup_Global}}}">
	<quad id="{{{P}}}quad-background" image="{{{C_BackgroundImageUrl}}}" size="320 180" z-index="-4" halign="center" valign="center" fullscreen="1"/>
	<frameinstance modelid="{{{MenuButtonList::C_Name}}}" id="{{{P}}}frame-button-list-profile" z-index="1" />
	<quad id="{{{P}}}quad-lights" pos="-105 30" size="{{{MLHelpers::MLKeepRatioFromY(1200., 1080., 180.)}}}" image="{{{Const::C_ImageUrl_Common_Spotlight}}}" z-index="1" colorize="FFF" halign="center" valign="center" />
	<label id="{{{P}}}label-error" class="{{{P}}}text-error" pos="0 -61" textsize="2.5" size="300 10" z-index="10"/>
	<frame pos="-20 0" z-index="-2">
		<frame id="{{{P}}}frame-world">
			<quad image="{{{Const::C_ImageUrl_Profile_WorldMap}}}" pos="-320 0" size="320 180" halign="center" valign="center" />
			<quad image="{{{Const::C_ImageUrl_Profile_WorldMap}}}" size="320 180" halign="center" valign="center"/>
			<quad image="{{{Const::C_ImageUrl_Profile_WorldMap}}}" pos="320 0" size="320 180" halign="center" valign="center"/>
		</frame>
	</frame>

	<frameinstance 
		id="{{{P}}}frame-report-system"
		z-index="10"
		modelid="{{{PopUpReportSystem::C_Name}}}"
		hidden="1"
	/>

	<frame id="{{{P}}}frame-player-card" pos="-104.5 73" z-index="5">
		<quad z-index="0" {{{MLHelpers::Size(Size_PlayerCard)}}} halign="center" valign="center" image="{{{Const::C_ImageUrl_Overlay_Widget_BG}}}" />
		<frameinstance id="{{{P}}}playername-player-card-name" modelid="{{{PlayerName::C_Name}}}" pos="-21 1.75" z-index="1" data-size="64 10" data-textsize="3" data-valign="center2" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" data-textprefix="$t$i" data-textcolor="ffffff" />
		<quad id="{{{P}}}quad-player-card-echelon" pos="-22.5 -3.75" z-index="1" size="4 4" autoscale="0" valign="center" />
		<label id="{{{P}}}label-player-card-echelon" pos="-18.5 -3.75" z-index="2" size="62 10" class="{{{P}}}text-semibold" textsize="1" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" halign="left" />
		<frameinstance id="{{{P}}}spinner-player-card-echelon" modelid="{{{LoadingSpinner::C_Name}}}" pos="-20 -3.75" z-index="3" scale="0.2" data-color="{{{ColorPalette::C_Color_GreenOne}}}" />
		<quad id="{{{P}}}quad-player-card-flag" pos="-{{{Size_PlayerCard.X * 0.51}}} 0" z-index="1" {{{MLHelpers::Size(Size_PlayerCardFlag)}}} keepratio="Clip" image="file://ZoneFlags/Path/World" alphamask="{{{Const::C_ImageUrl_Overlay_Profile_Flag_Mask}}}" halign="left" valign="center" />
		<frameinstance
			modelid="{{{Button::C_Name}}}"
			id="{{{P}}}button-prev-player"
			class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}}"
			pos="{{{Size_PlayerCard.X * -0.5}}} 0" z-index="0"
			data-size="{{{Size_PagerPrevPlayer.X}}} {{{Size_PagerPrevPlayer.Y}}}"
			data-image="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
			data-bgcolor="{{{ColorPalette::C_Color_White}}}"
			data-focuscolor="{{{ColorPalette::C_Color_White}}}"
			data-opacity="1."
			data-opacityunfocus="0.6"
			data-halign="right" data-valign="center"
			data-nav-group="{{{C_NavGroup_MouseOnly}}}"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-menusounds-selectsound="ArrowSelect"
			hidden="1"
		/>
		<frameinstance
			modelid="{{{Button::C_Name}}}"
			id="{{{P}}}button-next-player"
			class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}}"
			pos="{{{Size_PlayerCard.X * 0.5}}} 0" z-index="0"
			data-size="{{{Size_PagerNextPlayer.X}}} {{{Size_PagerNextPlayer.Y}}}"
			data-image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
			data-bgcolor="{{{ColorPalette::C_Color_White}}}"
			data-focuscolor="{{{ColorPalette::C_Color_White}}}"
			data-opacity="1."
			data-opacityunfocus="0.6"
			data-halign="left" data-valign="center"
			data-nav-group="{{{C_NavGroup_MouseOnly}}}"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-menusounds-selectsound="ArrowSelect"
			hidden="1"
		/>
		<frameinstance id="{{{P}}}button-icon-prev-player" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{(Size_PlayerCard.X * -0.5) - 1}}} 0" data-halign="right" data-valign="center" data-size="7 7" data-bind="LT" data-hideformouse="1" />
		<frameinstance id="{{{P}}}button-icon-next-player" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{(Size_PlayerCard.X * 0.5) + 1}}} 0" data-halign="left" data-valign="center" data-size="7 7" data-bind="RT" data-hideformouse="1" />
	</frame>
	<frameinstance
		id="{{{P}}}navigationtabs-categories"
		modelid="{{{NavigationTabs::C_Name}}}"
		pos="-122.6 49.7"
		data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}"
		data-halign="left"
		z-index="5"
	/>

	<frameinstance id="{{{P}}}spinner-privilege-check" modelid="{{{LoadingSpinner::C_Name}}}" pos="12 -5" z-index="4" />
	<label id="{{{P}}}label-privilege-check" class="{{{P}}}text-regular" pos="12 -5" z-index="5" size="125 20" halign="center" valign="center2" text="{{{Text_ErrorWhileRetrievingProfile}}}" hidden="1" />

	<frame id="{{{P}}}frame-content" pos="-87.8 30">
		<frame id="{{{P}}}frame-trophies" hidden="1" pos="0 0" z-index="2">
			<frameinstance modelid="{{{LoadingSpinner::C_Name}}}" id="{{{P}}}spinner-trophies" pos="{{{Pos_SpinnerTrophies.X}}} {{{Pos_SpinnerTrophies.Y}}}" />
			<label
				id="{{{P}}}label-trophies-error"
				class="{{{P}}}text-regular"
				pos="{{{Pos_SpinnerTrophies.X}}} {{{Pos_SpinnerTrophies.Y}}}"
				size="125 20"
				halign="center" valign="center2"
				maxline="5"
				hidden="1"
			/>
			<frame id="{{{P}}}frame-trophies-loaded">
				<label
					id="{{{P}}}label-display-history"
					class="{{{P}}}text-title"
					pos="-48 -60.2" z-index="2"
					size="258 15"
					valign="bottom"
					textsize="3.5"
					text="{{{Text_UnlockHistory}}}"
				/>
				<frame
					id="{{{P}}}frame-trophies-list"
					class="{{{Navigation::C_Class}}}"
					pos="-37 -62.5" z-index="1"
					data-nav-group="{{{C_NavGroup_Main}}}"
					data-nav-inputs="select;left;right;up;down"
					data-nav-targets="_;_;_;{{{P}}}frame-trophies-ranking;{{{P}}}button-back"
				>
					{{{ML_TrophiesList}}}
				</frame>
				<frame
					id="{{{P}}}frame-trophies-ranking"
					class="{{{Navigation::C_Class}}} {{{P}}}focus-opacity-container {{{P}}}controller-info-pager"
					pos="-15 -16"
					data-nav-group="{{{C_NavGroup_Main}}}"
					data-nav-inputs="left;right;down"
					data-nav-targets="_;_;{{{P}}}frame-trophies-list"
				>
					<frame>
						<frameinstance
							modelid="{{{Button::C_Name}}}"
							id="{{{P}}}button-next-zone"
							pos="-19.5 0"
							data-size="8 8"
							data-image="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
							data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
							data-bgcolor="FFF"
							data-opacityunfocus=".6"
							data-focuscolor="FFF"
							data-halign="center" data-valign="center"
							class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{P}}}focus-opacity-element"
							data-nav-group="{{{C_NavGroup_MouseOnly}}}"
							data-nav-inputs="select"
							data-nav-targets="_"
							data-nav-zone="{{{Button::C_NavZone}}}"
							data-menusounds-selectsound="ArrowSelect"
							data-{{{P}}}opacity-focus="1"
							data-{{{P}}}opacity-unfocus="0.6"
						/>
						<frameinstance
							modelid="{{{Button::C_Name}}}"
							id="{{{P}}}button-prev-zone"
							pos="19 0"
							data-size="8 8"
							data-image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
							data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
							data-bgcolor="FFF"
							data-opacityunfocus=".6"
							data-focuscolor="FFF"
							data-halign="center" data-valign="center"
							class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{P}}}focus-opacity-element"
							data-nav-group="{{{C_NavGroup_MouseOnly}}}"
							data-nav-inputs="select"
							data-nav-targets="_"
							data-nav-zone="{{{Button::C_NavZone}}}"
							data-menusounds-selectsound="ArrowSelect"
							data-{{{P}}}opacity-focus="1"
							data-{{{P}}}opacity-unfocus="0.6"
						/>
						<label size="46 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 18.5>, 10.))}}} text="{{{Text_Global}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
						<label size="46 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 8.>, 10.))}}} text="{{{Text_Top}}}" class="{{{P}}}text-info" textsize="2" textfont="{{{FontManager::C_GameFontRegular}}}" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
						<label id="{{{P}}}label-trophies-global-ranking-position" size="32 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -2.>, 10.))}}} class="{{{P}}}text-info" textsize="13" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
						<label id="{{{P}}}label-trophies-global-ranking-zone" size="46 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -19.5>, 10.))}}} class="{{{P}}}text-info" textsize="2.5" maxline="3" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
					</frame>
					<quad {{{MLHelpers::Size(Size_BgTrophies)}}} class="{{{P}}}focus-opacity-element" image="{{{Const::C_ImageUrl_Profile_Info_Demi_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6" data-{{{P}}}opacity-focus="0.8" data-{{{P}}}opacity-unfocus="0.6" />
					<quad {{{MLHelpers::Size(Size_BgTrophies)}}} class="{{{P}}}focus-opacity-element" image="{{{Const::C_ImageUrl_Profile_Info_Demi_Background_Contour}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" z-index="2" halign="center" valign="center" opacity="0" data-{{{P}}}opacity-focus="1" data-{{{P}}}opacity-unfocus="0" />
				</frame>
				<frame id="{{{P}}}frame-trophies-points" pos="38 -16">
					<frame>
						<quad id="{{{P}}}quad-best-trophy" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 7.>, 10.))}}} z-index="2" size="42 42" image="{{{Const::C_ImageUrl_Trophy_512_None}}}" halign="center" valign="center" autoscale="0"/>
						<quad {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 7.>, 10.))}}} z-index="1" size="45 45" image="{{{Const::C_ImageUrl_Profile_Trophy_Selected}}}" opacity="0.4" halign="center" valign="center"/>
						<label id="{{{P}}}label-trophies-points" size="46 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -14.5>, 10.))}}} class="{{{P}}}text-info" textsize="5.5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
						<label id="{{{P}}}label-trophies-points-text" size="46 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -19.8>, 10.))}}} text="{{{Text_Point}}}" class="{{{P}}}text-info" textsize="1.8" textfont="{{{FontManager::C_GameFontRegular}}}" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					</frame>
					<quad {{{MLHelpers::Size(Size_BgTrophies)}}} image="{{{Const::C_ImageUrl_Profile_Info_Demi_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				</frame>
				<frame pos="47.5 10.5" hidden="1" id="{{{P}}}frame-trophies-history">
					<label id="{{{P}}}label-trophy-history" class="{{{P}}}text-regular" pos="22 -5" size="{{{Size_TrophiesHistory.X}}} 10" valign="center2" />
					<frameinstance
						modelid="{{{LoadingSpinner::C_Name}}}"
						id="{{{P}}}spinner-trophies-history"
						pos="{{{16 + Size_TrophiesHistory.X * 0.5}}} {{{Size_TrophiesHistory.Y * -0.5}}}"
					/>
					<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="{{{P}}}scroll-trophies-history" z-index="6" />
					<frame
						id="{{{P}}}scroll-trophies-history"
						class="{{{Scroll::C_Class_Window}}}"
						pos="22 0" z-index="5"
						data-elements-per-line="{{{TrophiesHistoryGrid.X}}}"
						data-element-size="{{{Size_TrophiesHistory_Cell.X}}} {{{Size_TrophiesHistory_Cell.Y}}}"
						data-margin-size="{{{Size_TrophiesHistory_Gutter.X}}} {{{Size_TrophiesHistory_Gutter.Y}}}"
						data-window-size="{{{Size_TrophiesHistory.X}}} {{{Size_TrophiesHistory.Y}}}"
						data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
						data-scroll-indicator-colorize="FFFFFF"
						data-scroll-indicator-size="8"
						data-scroll-indicator-x-offset="-8"
						data-scroll-indicator-y-offset="-8"
						data-scrollbar-xoffset="2"
						data-scrollpadding="10"
						data-skew="-10"
						data-scroll-grid-size="1 3.75"
						data-pager-page-size="{{{TrophiesHistoryCellsNb}}}"
						data-pager-trigger-size="{{{TrophiesHistoryCellsNb}}}"
						data-pager-margin-size="{{{TrophiesHistoryCellsNb/2}}}"
					>
						<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
						{{{ML_TrophiesHistory}}}
					</frame>
				</frame>
			</frame>
		</frame>

		<frame id="{{{P}}}frame-ranked-stats" pos="-16.2 -4.5" hidden="1" z-index="2">
			<frame id="{{{P}}}frame-public-data">
				<frame id="{{{P}}}frame-current-season" pos="42.2 -33">
					<label id="{{{P}}}label-title" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 41.>, 10.))}}} text="{{{Text_CurrentSeason}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
					<frameinstance modelid="{{{PlayerRank::C_Name}}}" id="{{{P}}}frame-rank" {{{MLHelpers::Pos(MLHelpers::SkewX(<1.5, 0.>, 10.))}}} scale="1.8"/>
					<label id="{{{P}}}label-rank" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -38.5>, 10.))}}} class="{{{P}}}text-info" textsize="5.8" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					<label id="{{{P}}}label-rank-date" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -42.>, 10.))}}} class="{{{P}}}text-info" textsize="2.5" textfont="{{{FontManager::C_GameFontSemiBold}}}" hidden="1"/>
					<quad {{{MLHelpers::Size(Size_BgFull)}}} image="{{{Const::C_ImageUrl_Profile_Info_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
					<label id="{{{P}}}label-ranked-error"	class="{{{P}}}text-regular" textprefix="$i"	textsize="2" size="40 40" halign="center" valign="center2" maxline="4" />
				</frame>

				<frame id="{{{P}}}frame-previous-season" pos="89.5 -33">
					<label id="{{{P}}}label-title" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 41.>, 10.))}}} text="{{{Text_PreviousSeason}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
					<frameinstance modelid="{{{PlayerRank::C_Name}}}" id="{{{P}}}frame-rank" {{{MLHelpers::Pos(MLHelpers::SkewX(<1.5, 0.>, 10.))}}} scale="1.8"/>
					<label id="{{{P}}}label-rank" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -36.>, 10.))}}} class="{{{P}}}text-info" textsize="4" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					<label id="{{{P}}}label-rank-date" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -42.>, 10.))}}} class="{{{P}}}text-info" textsize="2.5" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
					<quad {{{MLHelpers::Size(Size_BgFull)}}} image="{{{Const::C_ImageUrl_Profile_Info_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
					<label id="{{{P}}}label-ranked-error"	class="{{{P}}}text-regular" textprefix="$i"	textsize="2" size="40 40" halign="center" valign="center2" maxline="4" />
				</frame>

				<frame id="{{{P}}}frame-best-season" pos="136.8 -33">
					<label id="{{{P}}}label-title" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 41.>, 10.))}}} text="{{{Text_BestSeason}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
					<frameinstance modelid="{{{PlayerRank::C_Name}}}" id="{{{P}}}frame-rank" {{{MLHelpers::Pos(MLHelpers::SkewX(<1.5, 0.>, 10.))}}} scale="1.8"/>
					<label id="{{{P}}}label-rank" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -36.>, 10.))}}} class="{{{P}}}text-info" textsize="4" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					<label id="{{{P}}}label-rank-date" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -42.>, 10.))}}} class="{{{P}}}text-info" textsize="2.5" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
					<quad {{{MLHelpers::Size(Size_BgFull)}}} image="{{{Const::C_ImageUrl_Profile_Info_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
					<label id="{{{P}}}label-ranked-error"	class="{{{P}}}text-regular" textprefix="$i"	textsize="2" size="40 40" halign="center" valign="center2" maxline="4" />
				</frame>
			</frame>

			<frame id="{{{P}}}frame-sensible-data">
				<frame id="{{{P}}}frame-matches-count">
					<label id="{{{P}}}label-matches-count" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 0.25>, 10.))}}}  class="{{{P}}}text-info" textsize="11" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					<label id="{{{P}}}label-title" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -8.5>, 10.))}}} text="{{{Text_Matches}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
					<quad {{{MLHelpers::Size(Size_BgThird)}}} image="{{{Const::C_ImageUrl_Profile_Info_Third_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				</frame>

				<frame id="{{{P}}}frame-win-rate" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -33.1>, 10.))}}}>
					<label id="{{{P}}}label-percentage" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 0.25>, 10.))}}}  class="{{{P}}}text-info" textsize="11" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					<label id="{{{P}}}label-title" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -8.5>, 10.))}}} text="{{{Text_WinRate}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
					<quad {{{MLHelpers::Size(Size_BgThird)}}} image="{{{Const::C_ImageUrl_Profile_Info_Third_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				</frame>

				<frame id="{{{P}}}frame-mvp" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -66.2>, 10.))}}}>
					<label id="{{{P}}}label-mvp-count" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 0.25>, 10.))}}}  class="{{{P}}}text-info" textsize="11" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					<label id="{{{P}}}label-title" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -8.5>, 10.))}}} text="{{{Text_MVP}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
					<quad {{{MLHelpers::Size(Size_BgThird)}}} image="{{{Const::C_ImageUrl_Profile_Info_Third_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				</frame>
			</frame>
		</frame>

		<frame id="{{{P}}}frame-royal-stats" pos="-22 -37.5" hidden="1" z-index="2">
			<frame id="{{{P}}}frame-royal-victories">
				<label id="{{{P}}}label-title" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 41.>, 10.))}}} size="40 5" text="{{{C_TabNames[C_TabDisplayed_Royal]}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
				<frameinstance modelid="{{{PlayerRoyalVictories::C_Name}}}" id="{{{P}}}frame-royal-level" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 4.>, 10.))}}} data-imagetype="{{{PlayerRoyalVictories::C_ImageType_Lion_Without_Count}}}" />
				<label id="{{{P}}}label-royal-victories" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -36.>, 10.))}}} class="{{{P}}}text-info" textsize="10" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
				<label text="{{{Text_Victories}}}" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -42.>, 10.))}}} class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
				<quad {{{MLHelpers::Size(Size_BgFull)}}} image="{{{Const::C_ImageUrl_Profile_Info_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
			</frame>

			<frame id="{{{P}}}frame-super-royal-victories" pos="48 0">
				<label id="{{{P}}}label-title" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 41.>, 10.))}}} text="{{{Text_SuperRoyal}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
				<quad id="{{{P}}}quad-super-royal-logo" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 4.>, 10.))}}} size="35 35" image="file://Media/Manialinks/Nadeo/TMNext/Modes/Royal/SuperRoyal/Logo_Super_Royal_Qualifications.dds" halign="center" valign="center"/>
				<label id="{{{P}}}label-super-royal-victories" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -36.>, 10.))}}} class="{{{P}}}text-info" textsize="10" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
				<label text="{{{Text_Victories}}}" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -42.>, 10.))}}} class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
				<quad {{{MLHelpers::Size(Size_BgFull)}}} image="{{{Const::C_ImageUrl_Profile_Info_Background_RoundedLeft}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				
				<frame pos="63.8 36.5">
					<frame>
						<quad {{{MLHelpers::Size(MLHelpers::KeepRatioFromY(860., 276., 23.))}}} image="{{{Const::C_ImageUrl_Profile_Info_Horizontal_Straight}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
						<quad pos="-20.5 1" size="16.5 16.5" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/Matchmaking_Ranks/Crown_Bronze.dds" halign="center" valign="center"/>
						<label text="{{{Text_Bronze}}}" pos="-20.5 -7.1" size="21 5" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="1.8"/>
						<label id="{{{P}}}label-bronze-victories" pos="-9 0.75" size="38 10" class="{{{P}}}text-info" textsize="9" halign="left" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
						<label text="{{{Text_Victories}}}" pos="-9 -5.5" size="36 5" halign="left" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					</frame>
					<frame {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -24.35>, 10.))}}}>
						<quad {{{MLHelpers::Size(MLHelpers::KeepRatioFromY(860., 276., 23.))}}} image="{{{Const::C_ImageUrl_Profile_Info_Horizontal_Straight}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
						<quad pos="-20.5 1" size="16.5 16.5" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/Matchmaking_Ranks/Crown_Silver.dds" halign="center" valign="center"/>
						<label text="{{{Text_Silver}}}" pos="-20.5 -7.1" size="21 5" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="1.8"/>
						<label id="{{{P}}}label-silver-victories" pos="-9 0.75" size="38 10" class="{{{P}}}text-info" textsize="9" halign="left" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
						<label text="{{{Text_Victories}}}" pos="-9 -5.5" size="36 5" halign="left" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					</frame>
					<frame {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -48.7>, 10.))}}}>
						<quad {{{MLHelpers::Size(MLHelpers::KeepRatioFromY(860., 276., 23.))}}} image="{{{Const::C_ImageUrl_Profile_Info_Horizontal_Straight}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
						<quad pos="-20.5 1" size="16.5 16.5" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/Matchmaking_Ranks/Crown_Gold.dds" halign="center" valign="center"/>
						<label text="{{{Text_Gold}}}" pos="-20.5 -7.1" size="21 5" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="1.8"/>
						<label id="{{{P}}}label-gold-victories" pos="-9 0.75" size="38 10" class="{{{P}}}text-info" textsize="9" halign="left" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
						<label text="{{{Text_Victories}}}" pos="-9 -5.5" size="36 5" halign="left" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					</frame>
					<frame {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -73.05>, 10.))}}}>
						<quad {{{MLHelpers::Size(MLHelpers::KeepRatioFromY(860., 276., 23.))}}} image="{{{Const::C_ImageUrl_Profile_Info_Horizontal_Straight}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
						<quad pos="-20.5 1" size="16.5 16.5" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/Matchmaking_Ranks/Crown_Master.dds" halign="center" valign="center"/>
						<label text="{{{Text_Master}}}" pos="-20.5 -7.1" size="21 5" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="1.8"/>
						<label id="{{{P}}}label-master-victories" pos="-9 0.75" size="38 10" class="{{{P}}}text-info" textsize="9" halign="left" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
						<label text="{{{Text_Victories}}}" pos="-9 -5.5" size="36 5" halign="left" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>

	<frame id="{{{P}}}frame-current-skin" pos="-106 -12" z-index="0">
		<camera id="{{{P}}}camera-skin" halign="center" valign="center" {{{MLHelpers::Size(<160., 180.> * 0.9)}}}/>
	</frame>
	
	<frame id="{{{P}}}frame-general-tab" z-index="3">
		<frame id="{{{P}}}frame-main-profile" pos="-24 -7.7">
			<frame
				id="{{{P}}}frame-info-ranking"
				class="{{{Navigation::C_Class}}} {{{P}}}focus-opacity-container {{{P}}}controller-info-pager"
				{{{MLHelpers::Pos(MLHelpers::SkewX(<-5., 24.8>, 10.))}}}
				data-nav-group="{{{C_NavGroup_Main}}}"
				data-nav-inputs="left;right;down"
				data-nav-targets="_;_;{{{P}}}frame-info-campaign-ranking"
			>
				<quad {{{MLHelpers::Size(Size_BgHalf)}}} class="{{{P}}}focus-opacity-element" image="{{{Const::C_ImageUrl_Profile_Info_Demi_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6" data-{{{P}}}opacity-focus="0.8" data-{{{P}}}opacity-unfocus="0.6" />
				<quad {{{MLHelpers::Size(Size_BgHalf)}}} class="{{{P}}}focus-opacity-element" image="{{{Const::C_ImageUrl_Profile_Info_Demi_Background_Contour}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" z-index="3" halign="center" valign="center" opacity="0" data-{{{P}}}opacity-focus="1" data-{{{P}}}opacity-unfocus="0" />
				<label z-index="1" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 16.4>, 10.))}}} text="{{{Text_Global}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
				<frameinstance modelid="{{{LoadingSpinner::C_Name}}}" id="{{{P}}}spinner-ranking" pos="-1 -5" z-index="2" />
				<frame id="{{{P}}}frame-info-ranking-loaded" z-index="1">
					<label size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 7.3>, 10.))}}} text="{{{Text_Top}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" textsize="2"/>
					<label id="{{{P}}}label-ranking-position" size="30 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -1.1>, 10.))}}} class="{{{P}}}text-info" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" textsize="13"/>
					<label id="{{{P}}}label-ranking-category" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -17.>, 10.))}}} class="{{{P}}}text-info" textsize="2.5" maxline="3" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
					<frameinstance modelid="{{{Button::C_Name}}}" id="{{{P}}}button-general-trophies-next-zone"
						pos="-17.5 0"
						data-size="7 7"
						data-image="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
						data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
						data-bgcolor="FFF"
						data-opacityunfocus=".6"
						data-focuscolor="FFF"
						data-halign="center" data-valign="center"
						class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{P}}}focus-opacity-element"
						data-nav-group="{{{C_NavGroup_MouseOnly}}}"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-zone="{{{Button::C_NavZone}}}"
						data-menusounds-selectsound="ArrowSelect"
						data-{{{P}}}opacity-focus="1"
						data-{{{P}}}opacity-unfocus="0.6"
					/>
					<frameinstance modelid="{{{Button::C_Name}}}" id="{{{P}}}button-general-trophies-previous-zone"
						pos="17 0"
						data-size="7 7"
						data-image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
						data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
						data-bgcolor="FFF"
						data-opacityunfocus=".6"
						data-focuscolor="FFF"
						data-halign="center" data-valign="center"
						class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{P}}}focus-opacity-element"
						data-nav-group="{{{C_NavGroup_MouseOnly}}}"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-zone="{{{Button::C_NavZone}}}"
						data-menusounds-selectsound="ArrowSelect"
						data-{{{P}}}opacity-focus="1"
						data-{{{P}}}opacity-unfocus="0.6"
					/>
				</frame>
			</frame>

			<frame
				id="{{{P}}}frame-info-campaign-ranking"
				class="{{{Navigation::C_Class}}} {{{P}}}focus-opacity-container {{{P}}}controller-info-pager"
				{{{MLHelpers::Pos(MLHelpers::SkewX(<-5., -24.8>, 10.))}}}
				data-nav-group="{{{C_NavGroup_Main}}}"
				data-nav-inputs="left;right;down;up"
				data-nav-targets="_;_;{{{P}}}button-back;{{{P}}}frame-info-ranking"
			>
				<frameinstance modelid="{{{LoadingSpinner::C_Name}}}" id="{{{P}}}spinner-campaign" scale="0.8" />
				<frame>
					<frameinstance modelid="{{{Button::C_Name}}}" id="{{{P}}}button-previous-campaign"
						pos="-17.5 0"
						data-size="7 7"
						data-image="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
						data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
						data-bgcolor="FFF"
						data-opacityunfocus=".6"
						data-focuscolor="FFF"
						data-halign="center" data-valign="center"
						class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{P}}}focus-opacity-element"
						data-nav-group="{{{C_NavGroup_MouseOnly}}}"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-zone="{{{Button::C_NavZone}}}"
						data-menusounds-selectsound="ArrowSelect"
						data-{{{P}}}opacity-focus="1"
						data-{{{P}}}opacity-unfocus="0.6"
					/>
					<frameinstance modelid="{{{Button::C_Name}}}" id="{{{P}}}button-next-campaign"
						pos="17 0"
						data-size="7 7"
						data-image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
						data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
						data-bgcolor="FFF"
						data-opacityunfocus=".6"
						data-focuscolor="FFF"
						data-halign="center" data-valign="center"
						class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{P}}}focus-opacity-element"
						data-nav-group="{{{C_NavGroup_MouseOnly}}}"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-zone="{{{Button::C_NavZone}}}"
						data-menusounds-selectsound="ArrowSelect"
						data-{{{P}}}opacity-focus="1"
						data-{{{P}}}opacity-unfocus="0.6"
					/>
					<label id="{{{P}}}label-campaign-name" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 16.4>, 10.))}}} class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
					<label id="{{{P}}}label-campaign-ranking-top" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 7.3>, 10.))}}} text="{{{Text_Top}}}" class="{{{P}}}text-info" textsize="2" textfont="{{{FontManager::C_GameFontRegular}}}" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					<label id="{{{P}}}label-campaign-ranking-position" size="30 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -1.1>, 10.))}}} class="{{{P}}}text-info" textsize="13" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
					<label id="{{{P}}}label-campaign-ranking-zone" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -17.>, 10.))}}} class="{{{P}}}text-info" textsize="2.5" maxline="3" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
				</frame>
				<quad {{{MLHelpers::Size(Size_BgHalf)}}} class="{{{P}}}focus-opacity-element" image="{{{Const::C_ImageUrl_Profile_Info_Demi_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6" data-{{{P}}}opacity-focus="0.8" data-{{{P}}}opacity-unfocus="0.6" />
				<quad {{{MLHelpers::Size(Size_BgHalf)}}} class="{{{P}}}focus-opacity-element" image="{{{Const::C_ImageUrl_Profile_Info_Demi_Background_Contour}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" z-index="2" halign="center" valign="center" opacity="0" data-{{{P}}}opacity-focus="1" data-{{{P}}}opacity-unfocus="0" />
			</frame>

			<frame id="{{{P}}}frame-info-trophies" pos="42 0">
				<label id="{{{P}}}label-title" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 41.>, 10.))}}} text="{{{C_TabNames[C_TabDisplayed_Trophies]}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
				<quad id="{{{P}}}quad-highest-trophy" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 0.>, 10.))}}} size="36 36" image="{{{Const::C_ImageUrl_Trophy_512_Bronze1}}}" halign="center" valign="center" autoscale="0"/>
				<label id="{{{P}}}label-trophy-number" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -39.5>, 10.))}}} class="{{{P}}}text-info" textsize="13" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
				<quad {{{MLHelpers::Size(Size_BgFull)}}} image="{{{Const::C_ImageUrl_Profile_Info_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
			</frame>

			<frame id="{{{P}}}frame-info-royal" pos="89.5 0">
				<label id="{{{P}}}label-title" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 41.>, 10.))}}} text="{{{Text_RoyalRank}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
				<frameinstance modelid="{{{PlayerRoyalVictories::C_Name}}}" id="{{{P}}}frame-royal-level" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 0.>, 10.))}}} z-index="2" data-imagetype="{{{PlayerRoyalVictories::C_ImageType_Lion_Without_Count}}}" />
				<label id="{{{P}}}label-royal-level" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -39.>, 10.))}}} class="{{{P}}}text-info" textsize="4" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
				<quad {{{MLHelpers::Size(Size_BgFull)}}} image="{{{Const::C_ImageUrl_Profile_Info_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				<frameinstance modelid="{{{LoadingSpinner::C_Name}}}" z-index="1" id="{{{P}}}spinner-royal" />
			</frame>

			<frame id="{{{P}}}frame-info-ranked" pos="137 0">
				<label id="{{{P}}}label-title" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., 41.>, 10.))}}} text="{{{Text_BestRank}}}" class="{{{P}}}text-info" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="2.5"/>
				<frameinstance modelid="{{{PlayerRank::C_Name}}}" id="{{{P}}}frame-best-rank" {{{MLHelpers::Pos(MLHelpers::SkewX(<1.5, 0.>, 10.))}}} z-index="2" scale="1.8"/>
				<label id="{{{P}}}label-best-rank" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -36.>, 10.))}}} class="{{{P}}}text-info" textsize="4" textcolor="{{{ColorPalette::C_Color_GreenOne}}}"/>
				<label id="{{{P}}}label-best-rank-date" size="40 5" {{{MLHelpers::Pos(MLHelpers::SkewX(<0., -42.>, 10.))}}} class="{{{P}}}text-info" textsize="2.5" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
				<quad {{{MLHelpers::Size(Size_BgFull)}}} image="{{{Const::C_ImageUrl_Profile_Info_Background}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				<frameinstance modelid="{{{LoadingSpinner::C_Name}}}" z-index="1" id="{{{P}}}spinner-ranked" />
			</frame>
		</frame>
	</frame>
	
	<frame id="{{{P}}}frame-footer" pos="0 -73">
		<frameinstance modelid="{{{ButtonIcon::C_Name}}}" pos="-151.5 0" z-index="3" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
		<frameinstance
			id="{{{P}}}button-back"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{P}}}bottom-button {{{MenuSounds::C_Class}}}"
			pos="-151.5 0"
			z-index="2"
			data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_PageBack}}}"
			data-max-width="60"
			data-nav-inputs="select;right"
			data-nav-targets="_;{{{P}}}button-my-access"
			data-nav-group="{{{C_NavGroup_Main}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			data-menusounds-selectsound="{{{MenuSounds::C_Sound_Cancel}}}"
		/>
		<frameinstance
			id="{{{P}}}button-my-access"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{P}}}bottom-button"
			pos="20 0"
			z-index="2"
			data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_SizeExpendable}}}"
			data-text="{{{Text_MyAccess}}}"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;{{{P}}}button-back;{{{P}}}button-update-zone"
			data-nav-group="{{{C_NavGroup_Main}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
		<frameinstance
			id="{{{P}}}button-update-zone"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{P}}}bottom-button"
			pos="70 0"
			z-index="2"
			data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_SizeExpendable}}}"
			data-text="{{{Text_ChangeRegion}}}"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;{{{P}}}button-my-access;{{{P}}}button-garage"
			data-nav-group="{{{C_NavGroup_Main}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
		<frameinstance
			id="{{{P}}}button-garage"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{P}}}bottom-button"
			pos="124.5 0"
			z-index="2"
			data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_SizeExpendable}}}"
			data-text="{{{Text_Garage}}}"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-icon-image="{{{Const::C_ImageUrl_Icon_Car}}}"
			data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;{{{P}}}button-update-zone;{{{P}}}button-first-party-profile"
			data-nav-group="{{{C_NavGroup_Main}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
		<frameinstance
			id="{{{P}}}button-first-party-profile"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{P}}}bottom-button"
			pos="70 0"
			z-index="2"
			data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_SizeExpendable}}}"
			data-text="{{{Text_FirstPartyProfile}}}"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;{{{P}}}button-garage;{{{P}}}button-ubisoft-connect-profile"
			data-nav-group="{{{C_NavGroup_Main}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			data-nav-locked="1"
			hidden="1"
		/>
		<frameinstance
			id="{{{P}}}button-ubisoft-connect-profile"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{P}}}bottom-button"
			pos="100 0"
			z-index="2"
			data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_SizeExpendable}}}"
			data-text="{{{Text_UbisoftConnectProfile}}}"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;{{{P}}}button-first-party-profile;{{{P}}}button-report"
			data-nav-group="{{{C_NavGroup_Main}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			data-nav-locked="1"
			hidden="1"
		/>
		<frameinstance
			id="{{{P}}}button-report"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{P}}}bottom-button"
			pos="124.5 0"
			z-index="2"
			data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_SizeExpendable}}}"
			data-text="{{{Text_Report}}}"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left"
			data-nav-targets="_;{{{P}}}button-ubisoft-connect-profile"
			data-nav-group="{{{C_NavGroup_Main}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			data-nav-locked="1"
			hidden="1"
		/>
	</frame>
</frame>
		""",
		"""
#Include "TextLib" as {{{P}}}TL
#Include "MathLib" as {{{P}}}ML
#Include "ColorLib" as {{{P}}}CL
#Include "TimeLib" as {{{P}}}TiL
#Include "Libs/Nadeo/CommonLibs/Common/Privileges.Script.txt" as {{{P}}}Privileges
#Include "Libs/Nadeo/CommonLibs/Common/ReportContext.Script.txt" as {{{P}}}ReportContext
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as {{{P}}}Http
#Include "Libs/Nadeo/CommonLibs/Common/Task.Script.txt" as {{{P}}}Task
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as {{{P}}}Platform
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as {{{P}}}MainUser
#Include "Libs/Nadeo/CommonLibs/Common/AudioManager_ML.Script.txt" as {{{P}}}AudioManager
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as {{{P}}}Tools
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Pager2.Script.txt" as {{{P}}}Pager
#Include "Libs/Nadeo/MenuLibs/Common/MenuSceneManager.Script.txt" as {{{P}}}MenuSceneManager
#Include "Libs/Nadeo/ModeLibs/Common/Bot.Script.txt" as {{{P}}}Bot
#Include "Libs/Nadeo/TMNext/TrackMania/API/LeaderboardAPI.Script.txt" as {{{P}}}LeaderboardAPI
#Include "Libs/Nadeo/TMNext/TrackMania/API/MatchmakingAPI.Script.txt" as {{{P}}}MatchmakingAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as {{{P}}}ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ReportSystem.Script.txt" as {{{P}}}ReportSystem
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as {{{P}}}Config
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/PrestigeStruct.Script.txt" as {{{P}}}PrestigeStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ReportStruct.Script.txt" as {{{P}}}ReportStruct

#Struct {{{P}}}K_Controls {
	CMlFrame Frame_Global;
	CMlQuad Quad_PlayerCardFlag;
	CMlFrame PlayerName_PlayerCardName;
	CMlFrame Button_MyAccess;
	CMlFrame Button_UpdateZone;
	CMlFrame Button_NextPlayer;
	CMlFrame Button_PrevPlayer;
	CMlFrame ButtonIcon_PrevPlayer;
	CMlFrame ButtonIcon_NextPlayer;
	CMlLabel Label_DisplayHistory;
	CMlLabel Label_TrophiesGlobalRankingPosition;
	CMlLabel Label_TrophiesGlobalRankingZone;
	CMlLabel Label_TrophiesPoints;
	CMlLabel Label_TrophiesPointsText;
	CMlFrame Button_NextZone;
	CMlFrame Button_PrevZone;
	CMlFrame Frame_Trophies;
	CMlLabel Label_TrophiesError;
	CMlFrame Frame_TrophiesLoaded;
	CMlFrame Frame_TrophiesHistory;
	CMlLabel Label_TrophyHistory;
	CMlFrame Spinner_TrophiesHistory;
	CMlFrame Scroll_TrophiesHistory;
	CMlFrame Frame_InfoRankingLoaded;
	CMlFrame Spinner_Trophies;
	CMlFrame Spinner_Ranking;
	CMlFrame Spinner_Campaign;
	CMlFrame Spinner_Ranked;
	CMlFrame Spinner_Royal;
	CMlFrame Frame_TrophiesList;
	CMlFrame Frame_MainProfile;
	CMlLabel Label_TrophyTopRank;
	CMlLabel Label_TrophyTopRankZone;
	CMlQuad Quad_TopTrophy;
	CMlQuad Quad_BestTrophy;
	CMlLabel Label_TopTrophyCount;
	CMlLabel Label_TopCampaignName;
	CMlLabel Label_TopText;
	CMlLabel Label_TopCampaignRank;
	CMlLabel Label_TopCampaignZone;
	CMlFrame Frame_MyQuarterlyCampaignsRankings;
	CMlFrame Frame_PreviousCampaign;
	CMlFrame Frame_NextCampaign;
	CMlFrame Button_GeneralTrophiesPreviousZone;
	CMlFrame Button_GeneralTrophiesNextZone;
	CMlFrame Button_Back;
	CMlFrame Frame_CurrentSkin;
	CMlQuad Quad_Lights;
	CMlQuad Quad_PlayerCardEchelon;
	CMlLabel Label_PlayerCardEchelon;
	CMlFrame Spinner_PlayerCardEchelon;
	CMlFrame Button_Garage;
	CMlFrame Button_FirstPartyProfile;
	CMlFrame Button_UbisoftConnectProfile;
	CMlFrame Button_Report;
	CMlFrame Frame_PlayerBestRank;
	CMlLabel Label_BestRank;
	CMlLabel Label_BestRankDate;
	CMlFrame Frame_RankedStats;
	CMlFrame Frame_RankedCurrentSeason;
	CMlFrame Frame_PlayerCurrentSeason;
	CMlLabel Label_CurrentSeason;
	CMlLabel Label_CurrentSeasonDate;
	CMlFrame Frame_RankedPreviousSeason;
	CMlFrame Frame_PlayerPreviousSeason;
	CMlLabel Label_PreviousSeason;
	CMlLabel Label_PreviousSeasonDate;
	CMlLabel Label_PreviousRankedError;
	CMlFrame Frame_RankedBestSeason;
	CMlFrame Frame_PlayerBestSeason;
	CMlLabel Label_BestSeason;
	CMlLabel Label_BestSeasonDate;
	CMlLabel Label_BestRankedError;
	CMlFrame Frame_PublicData;
	CMlFrame Frame_SensibleData;
	CMlLabel Label_MatchesCount;
	CMlLabel Label_WinRate;
	CMlLabel Label_MVPCount;
	CMlFrame Frame_MainRoyalLevel;
	CMlLabel Label_MainRoyalLevel;
	CMlFrame Frame_RoyalStats;
	CMlFrame Frame_RoyalLevel;
	CMlLabel Label_RoyalVictories;
	CMlQuad Quad_SuperRoyalLogo;
	CMlLabel Label_SuperRoyalVictories;
	CMlLabel Label_BronzeVictories;
	CMlLabel Label_SilverVictories;
	CMlLabel Label_GoldVictories;
	CMlLabel Label_MasterVictories;
	CMlFrame Frame_ButtonList;
	CMlLabel Label_Error;
	CMlFrame NavigationTabs_Categories;
	CMlQuad Quad_Background;
	CMlFrame Frame_Content;
	CMlFrame Frame_ContentTrophiesRanking;
	CMlFrame Frame_GeneralTab;
	CMlFrame Frame_GeneralTabInfoRanking;
	CMlFrame Spinner_PrivilegeCheck;
	CMlLabel Label_PrivilegeCheck;
	CMlFrame Frame_ReportSystem;
}

#Struct {{{P}}}K_Scene {
	Ident SceneId;
	Ident CurrentItemId;
	Ident CurrentExtraItemId;
}

#Struct {{{P}}}K_TrophiesRanking {
	Text ZoneName;
	Integer Rank;
	Integer Total;
}

#Struct {{{P}}}K_TrophiesRankingsPager {
	{{{CampaignStruct::P}}}K_Ranking[] TrophiesRankings;
	Integer CurrentPage;
	Integer MaxPage;
}

#Struct {{{P}}}K_TrophyHistoryEntry {
	Text Description;
	Text Date;
	Integer Amount;
	Integer TimeStamp;
}

#Struct {{{P}}}K_TrophyHistoryScroll {
	{{{P}}}K_TrophyHistoryEntry[Integer] Content;
	Integer Total;
}

#Struct {{{P}}}K_TrophiesHistory {
	{{{P}}}K_TrophyHistoryScroll TrophyScroll;
	Ident TaskId_GetTrophyHistory;
	Integer RequestedTrophyType;
	Integer RequestedOffset;
	Boolean IsLoading;
}

#Struct {{{P}}}K_MatchmakingStats {
	{{{P}}}Http::K_Request GetPlayerStats;
	{{{MatchmakingStruct::P}}}K_PlayerStatistics Stats;
	Integer QueueId;
}

#Struct {{{P}}}K_SuperRoyalStats {
	{{{P}}}Http::K_Request GetPlayerStats;
	{{{MatchmakingStruct::P}}}K_SuperRoyalStatistics Stats;
}

#Struct {{{P}}}K_Zone {
	Text Id;
	Text ParentId;
	Text Name;
	Text Path;
	Text FullPath;
	Text FlagUrl;
	Text CountryFlagUrl;
	Text CarSkinName;
	Text CarSkinUrl;
	Text PilotSkinName;
	Text PilotSkinUrl;
}

#Struct {{{P}}}K_Record {
	Text Detail;
	Text Id;
}

#Struct {{{P}}}K_PlayerProfile {
	Boolean IsFakeUser;
	Boolean IsFirstPartyDisplayName;
	Integer SuccessfulTaskNumber;
	Ident UserId;
	Text AccountId;
	Text ClubTag;
	Text Name;
	{{{P}}}K_Zone Zone;
	{{{ClubStruct::P}}}K_Skin CarSkin;
	{{{ClubStruct::P}}}K_Skin PilotSkin;
	Vec3 SkinLightColor;
	Boolean CanViewGameHistory;
	Boolean IsReportable;
	{{{P}}}K_Record RecordData;
	Boolean IsGhost;
}

#Struct {{{P}}}K_PrivilegeCheck {
	{{{P}}}K_PlayerProfile User;
	{{{P}}}Privileges::K_PrivilegeCheck PrivilegeCheck;
}

#Struct {{{P}}}K_State {
	{{{P}}}K_Controls Controls;
	Boolean Enabled;
	Boolean MyAccessButtonEnabled;
	Boolean GarageButtonEnabled;
	Boolean PlayersPagerEnabled;
	Boolean ZoneSelectionEnabled;
	Boolean IsPlayerProfileUpdated;
	Boolean IsTTSContextUpdateNeeded;
	{{{P}}}K_TrophiesRankingsPager TrophiesRankingsPager;
	Ident TaskId_GetAccountLastYearSummary;
	Boolean TrophiesLoadingError;
	Integer[Integer] TrophiesCount;
	{{{P}}}Http::K_Request GetPlayersTrophyRanking;
	Text TrophyRankingLoadingError;
	Integer TabDisplayed;
	Integer NextPrevPlayerCooldown;
	{{{P}}}K_Scene Scene;
	Integer FocusedTrophyKey;
	Integer SelectedTrophyKey;
	Integer HistoryTrophyType;
	{{{P}}}K_PlayerProfile PlayerProfile;
	{{{P}}}K_TrophiesHistory TrophiesHistory;
	{{{P}}}K_MatchmakingStats Ranked;
	{{{P}}}K_MatchmakingStats Royal;
	{{{P}}}K_SuperRoyalStats SuperRoyal;
	{{{P}}}Task::K_Task Task_GetClubTagList;
	{{{P}}}Task::K_Task Task_GetSkinList;
	{{{P}}}Task::K_Task Task_GetPrestigeSkin;
	{{{P}}}Task::K_Task Task_RetrieveDisplayName;
	{{{P}}}Task::K_Task Task_RetrieveUserZoneList;
	{{{P}}}Pager::K_Pager MyQuarterlyCampaignsRankingsPager;
	CMlControl[Integer] TabsFocuses;
	{{{P}}}K_PrivilegeCheck PrivilegeCheck;
	Text MatchId;
	Text MatchmakingId;
}

#Struct {{{P}}}K_Event {
	Integer Type;
	Ident CurrentUserId;
}

#Const {{{P}}}C_EventType_Close 0
#Const {{{P}}}C_EventType_NextPlayer 1
#Const {{{P}}}C_EventType_PrevPlayer 2
#Const {{{P}}}C_EventType_EditPlayer 3
#Const {{{P}}}C_EventType_Garage 4
#Const {{{P}}}C_EventType_MyAccessInfo 5

#Const {{{P}}}C_Zone_Translations {{{dump(Const::C_Zone_Translations)}}}

#Const {{{P}}}C_DelayBetweenPagerRequest {{{dump(C_DelayBetweenPagerRequest)}}}

#Const {{{P}}}C_ErrorCode_None "0"
#Const {{{P}}}C_ErrorCode_CouldNotCreateTask "1"
#Const {{{P}}}C_ErrorCode_TaskDeleted "2"

#Const {{{P}}}C_TTSContextLevel_Page {{{dump(Const::C_TTSContextLevel_Component + Const::C_TTSContextLevel_Page)}}}
#Const {{{P}}}C_TTSContextLevel_Section {{{dump(Const::C_TTSContextLevel_Component + Const::C_TTSContextLevel_Section)}}}

#Const {{{P}}}C_TabDisplayed_General {{{dump(C_TabDisplayed_General)}}}
#Const {{{P}}}C_TabDisplayed_Trophies {{{dump(C_TabDisplayed_Trophies)}}}
#Const {{{P}}}C_TabDisplayed_Ranked {{{dump(C_TabDisplayed_Ranked)}}}
#Const {{{P}}}C_TabDisplayed_Royal {{{dump(C_TabDisplayed_Royal)}}}

#Const {{{P}}}C_TrophyAchievementType_SoloMedal "SoloMedal"
#Const {{{P}}}C_TrophyAchievementType_SoloRanking "SoloRanking"
#Const {{{P}}}C_TrophyAchievementType_LiveMatch "LiveMatch"
#Const {{{P}}}C_TrophyAchievementType_CompetitionMatch "CompetitionMatch"
#Const {{{P}}}C_TrophyAchievementType_CompetitionRanking "CompetitionRanking"

#Const {{{P}}}C_SoloRankingAchievementTypes [
	"OfficialQuarterly" => "{{{Text_SoloRanking_OfficialQuarterly}}}",
	"TrackOfTheDay" => "{{{Text_SoloRanking_TrackOfTheDay}}}"
]

#Const {{{P}}}C_SoloMedalAchievementTypes [
	"TrackOfTheDay" => "{{{Text_SoloMedal_TrackOfTheDay}}}",
	"SoloWhite" => "{{{Text_SoloMedal_SoloWhite}}}",
	"SoloGreen" => "{{{Text_SoloMedal_SoloGreen}}}",
	"SoloBlue" => "{{{Text_SoloMedal_SoloBlue}}}",
	"SoloRed" => "{{{Text_SoloMedal_SoloRed}}}",
	"SoloBlack" => "{{{Text_SoloMedal_SoloBlack}}}"
]

#Const {{{P}}}C_Echelon_Null 0
#Const {{{P}}}C_Echelon_Bronze1 1
#Const {{{P}}}C_Echelon_Bronze2 2
#Const {{{P}}}C_Echelon_Bronze3 3
#Const {{{P}}}C_Echelon_Silver1 4
#Const {{{P}}}C_Echelon_Silver2 5
#Const {{{P}}}C_Echelon_Silver3 6
#Const {{{P}}}C_Echelon_Gold1 7
#Const {{{P}}}C_Echelon_Gold2 8
#Const {{{P}}}C_Echelon_Gold3 9

#Const {{{P}}}C_Rank_Bar_Colors {{{dump(Const::C_Rank_Bar_Colors)}}}
#Const {{{P}}}C_Rank_Names {{{dump(Const::C_Rank_Names)}}}
#Const {{{P}}}C_Royal_Level_Names {{{dump(Const::C_Royal_Level_Names)}}}
#Const {{{P}}}C_SuperRoyal_Logos {{{dump(Const::C_SuperRoyal_Logos)}}}
#Const {{{P}}}C_SuperRoyal_Division_Bronze {{{dump(Const::C_SuperRoyal_Division_Bronze)}}}
#Const {{{P}}}C_SuperRoyal_Division_Silver {{{dump(Const::C_SuperRoyal_Division_Silver)}}}
#Const {{{P}}}C_SuperRoyal_Division_Gold {{{dump(Const::C_SuperRoyal_Division_Gold)}}}
#Const {{{P}}}C_SuperRoyal_Division_Master {{{dump(Const::C_SuperRoyal_Division_Master)}}}
		""",
		"""
declare {{{P}}}K_Event[] {{{P}}}PendingEvents;
declare {{{P}}}K_State {{{P}}}G_State;
declare Ident {{{P}}}G_TTSContextIdent_Tabs;
declare Ident {{{P}}}G_TTSContextIdent_ContainerTitle;
declare Ident {{{P}}}G_TTSContextIdent_ContainerRank;

{{{P}}}K_State {{{P}}}Private_UpdateSkinDisplayed({{{P}}}K_State _State) {
	declare {{{P}}}K_State State = _State;

	if (State.Scene.SceneId != NullId && !{{{P}}}MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)) {
		if (State.Scene.CurrentItemId != NullId) {
			MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentItemId);
			State.Scene.CurrentItemId = NullId;
		}
		if (State.Scene.CurrentExtraItemId != NullId) {
			MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentExtraItemId);
			State.Scene.CurrentExtraItemId = NullId;
		}

		declare Text CarSkinUrl = "";
		declare Text CarSkinName = "{{{Const::C_CarDefaultSkinName}}}";
		if (State.PlayerProfile.CarSkin.Name != "") {
			CarSkinName = State.PlayerProfile.CarSkin.Name;
			CarSkinUrl = State.PlayerProfile.CarSkin.FileUrl;
		} else if (State.PlayerProfile.Zone.CarSkinName != "") {
			CarSkinName = State.PlayerProfile.Zone.CarSkinName;
			CarSkinUrl = State.PlayerProfile.Zone.CarSkinUrl;
		}
		State.Scene.CurrentItemId = MenuSceneMgr.ItemCreate(
			State.Scene.SceneId,
			"{{{Const::C_CameraSkinModel}}}",
			CarSkinName,
			CarSkinUrl,
			State.PlayerProfile.CarSkin.PrestigeOptions
		);
		if (State.Scene.CurrentItemId != NullId) {
			MenuSceneMgr.ItemSetPlayerState(
				State.Scene.SceneId,
				State.Scene.CurrentItemId,
				State.PlayerProfile.SkinLightColor,
				<0., 0., 0.>,
				"",
				""
			);
			MenuSceneMgr.ItemSetPivot(State.Scene.SceneId, State.Scene.CurrentItemId, {{{dump(Const::C_CarDefaultPivotInScene)}}});

			declare Text PilotSkinName = "{{{Const::C_PilotDefaultSkinName}}}";
			declare Text PilotSkinUrl = "";
			declare Text PilotSkinCharacterOptions = "";
			if (State.PlayerProfile.PilotSkin.Name != "") {
				PilotSkinName = State.PlayerProfile.PilotSkin.Name;
				PilotSkinUrl = State.PlayerProfile.PilotSkin.FileUrl;
				PilotSkinCharacterOptions = State.PlayerProfile.PilotSkin.CharacterOptions;
			} else if (State.PlayerProfile.Zone.PilotSkinName != "") {
				PilotSkinName = State.PlayerProfile.Zone.PilotSkinName;
				PilotSkinUrl = State.PlayerProfile.Zone.PilotSkinUrl;
			}
			State.Scene.CurrentExtraItemId = MenuSceneMgr.ItemCreate(
				State.Scene.SceneId,
				"{{{Const::C_CameraPilotModel}}}",
				PilotSkinName,
				PilotSkinUrl,
				PilotSkinCharacterOptions
			);
			if (State.Scene.CurrentExtraItemId != NullId) {
				MenuSceneMgr.ItemSetPlayerState(
					State.Scene.SceneId,
					State.Scene.CurrentExtraItemId,
					State.PlayerProfile.SkinLightColor,
					<0., 0., 0.>,
					"",
					""
				);
				MenuSceneMgr.ItemSetPivot(State.Scene.SceneId, State.Scene.CurrentExtraItemId, <-1., 0., 0.>);
			}
		}

		{{{P}}}ReportContext::SetProfileSkin(System, State.PlayerProfile.CarSkin.Name, State.PlayerProfile.CarSkin.FileUrl);
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Display and create the 3D scene or destroy it
{{{P}}}K_State {{{P}}}Private_Display3DScene({{{P}}}K_State _State, Boolean _IsVisible) {
	declare {{{P}}}K_State State = _State;

	if (_IsVisible) {
		if (State.Scene.SceneId == NullId) {
			State.Scene.SceneId = MenuSceneMgr.SceneCreate("Empty");
		}
		{{{P}}}MenuSceneManager::PageSynchronizeScene(Page, LocalUser);
		if (State.Scene.SceneId != NullId) {
			MenuSceneMgr.CameraSetLocation(State.Scene.SceneId, <-0., 3.2, -11.7>, 12., 39.);
			MenuSceneMgr.PlaneReflectEnable(State.Scene.SceneId, 0.63, Null, Null, Null, Null, 0.);
		}
		State = {{{P}}}Private_UpdateSkinDisplayed(State);
	} else {
		if (State.Scene.SceneId != NullId) {
			if (State.Scene.CurrentItemId != NullId) {
				MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentItemId);
				State.Scene.CurrentItemId = NullId;
			}
			if (State.Scene.CurrentExtraItemId != NullId) {
				MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentExtraItemId);
				State.Scene.CurrentExtraItemId = NullId;
			}
			MenuSceneMgr.SceneDestroy(State.Scene.SceneId);
			State.Scene.SceneId = NullId;
		}
	}
	
	return State;
}

Void {{{P}}}Private_ShowTrophyHistoryEntry(CMlFrame _Frame_TrophyHistoryEntry, {{{P}}}K_TrophyHistoryEntry _TrophyHistoryEntry) {
	declare CMlLabel Label_Description <=> (_Frame_TrophyHistoryEntry.GetFirstChild("{{{P}}}label-description") as CMlLabel);
	declare CMlLabel Label_Date <=> (_Frame_TrophyHistoryEntry.GetFirstChild("{{{P}}}label-date") as CMlLabel);
	declare CMlLabel Label_Amount <=> (_Frame_TrophyHistoryEntry.GetFirstChild("{{{P}}}label-amount") as CMlLabel);
	Label_Description.Value = _TrophyHistoryEntry.Description;
	{{{P}}}Tools::FitLabelValue(Label_Description, 2., 0.5, 0.25);
	Label_Date.Value = _TrophyHistoryEntry.Date;
	Label_Amount.Value = ""^_TrophyHistoryEntry.Amount;
	// Trophies are taken into account for the ranking during 1 year
	if ({{{P}}}TiL::GetLocalDelta_Years({{{P}}}TiL::GetCurrent(), ""^_TrophyHistoryEntry.TimeStamp) >= 1) {
		Label_Description.Opacity = 0.6;
		Label_Date.Opacity = 0.6;
		Label_Amount.Opacity = 0.6;
	} else {
		Label_Description.Opacity = 1.;
		Label_Date.Opacity = 1.;
		Label_Amount.Opacity = 1.;
	}
	_Frame_TrophyHistoryEntry.Visible = True;
}

Void {{{P}}}Private_ShowTrophyHistoryEntryLoading(CMlFrame _Frame_TrophyHistoryEntry) {
	declare CMlLabel Label_Description <=> (_Frame_TrophyHistoryEntry.GetFirstChild("{{{P}}}label-description") as CMlLabel);
	Label_Description.Value = "{{{Text_Retrieving}}}";
	{{{P}}}Tools::FitLabelValue(Label_Description, 2., 0.5, 0.25);
	(_Frame_TrophyHistoryEntry.GetFirstChild("{{{P}}}label-date") as CMlLabel).Value = "";
	(_Frame_TrophyHistoryEntry.GetFirstChild("{{{P}}}label-amount") as CMlLabel).Value = "";
	_Frame_TrophyHistoryEntry.Visible = True;
}

Void {{{P}}}Private_HideTrophyHistoryEntry(CMlFrame _Frame_TrophyHistoryEntry) {
	_Frame_TrophyHistoryEntry.Visible = False;
}

Void {{{P}}}Private_PlayPagerAnim(CMlFrame _Button_Pager) {
	AnimMgr.Flush(_Button_Pager);
	_Button_Pager.RelativeScale = 1.;
	AnimMgr.Add(_Button_Pager, "<a scale=\"1.1\" />", 50, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.AddChain(_Button_Pager, "<a scale=\"1\" />", 100, CAnimManager::EAnimManagerEasing::QuadOut);
}

Void {{{P}}}Private_SendCloseEvent({{{P}}}K_State _State) {
	{{{P}}}PendingEvents.add({{{P}}}K_Event {
		Type = {{{P}}}C_EventType_Close,
		CurrentUserId = _State.PlayerProfile.UserId
	});
	{{{P}}}ReportContext::ResetProfile(System);
}
Void {{{P}}}Private_SendPrevPlayerEvent({{{P}}}K_State _State) {
	{{{P}}}Private_PlayPagerAnim(_State.Controls.Button_PrevPlayer);
	{{{P}}}PendingEvents.add({{{P}}}K_Event {
		Type = {{{P}}}C_EventType_PrevPlayer,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void {{{P}}}Private_SendNextPlayerEvent({{{P}}}K_State _State) {
	{{{P}}}Private_PlayPagerAnim(_State.Controls.Button_NextPlayer);
	{{{P}}}PendingEvents.add({{{P}}}K_Event {
		Type = {{{P}}}C_EventType_NextPlayer,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void {{{P}}}Private_SendEditPlayerEvent({{{P}}}K_State _State) {
	{{{P}}}PendingEvents.add({{{P}}}K_Event {
		Type = {{{P}}}C_EventType_EditPlayer,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void {{{P}}}Private_SendGarageEvent({{{P}}}K_State _State) {
	{{{P}}}PendingEvents.add({{{P}}}K_Event {
		Type = {{{P}}}C_EventType_Garage,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void {{{P}}}Private_SendMyAccessInfoEvent({{{P}}}K_State _State) {
	{{{P}}}PendingEvents.add({{{P}}}K_Event {
		Type = {{{P}}}C_EventType_MyAccessInfo,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}

Void {{{P}}}Private_EnableUnderline(CMlControl _Control, Boolean _Enabled) {
	if (_Control.Parent != Null) {
		declare CMlControl Control_Underline <=> _Control.Parent.GetFirstChild("{{{P}}}quad-underline");
		if (Control_Underline != Null) {
			if (_Enabled) {
				AnimMgr.Add(Control_Underline, "<a opacity=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				AnimMgr.Add(Control_Underline, "<a opacity=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	}
}

Boolean {{{P}}}Private_IsBrowsingTrophiesHistory({{{P}}}K_State _State) {
	return (
		_State.TabDisplayed == {{{P}}}C_TabDisplayed_Trophies &&
		_State.SelectedTrophyKey >= 0 &&
		!{{{Navigation::P}}}IsLocked(_State.Controls.Frame_TrophiesList)
	);
}

Void {{{P}}}Private_UpdateControllerInfo({{{P}}}K_State _State, CMlControl _Focus) {
	declare Text[Text] Buttons;
	if (_Focus != Null) {
		if ({{{P}}}Private_IsBrowsingTrophiesHistory(_State)) {
			Buttons["up"] = ""; //< empty on purpose
			//L16N [Profile] Browse the trophies history of the player
			Buttons["down"] = _("|History|Browse");
			Buttons["B"] = _("Back");
		} else if (_Focus.HasClass("{{{P}}}controller-info-pager")) {
			Buttons["left"] = ""; //< empty on purpose
			//L16N [Profile] Browse the rankings of the player
			Buttons["right"] = _("|Rankings|Browse");
		} else {
			Buttons["A"] = _("Select");
		}
	}

	if (This is CMlScriptIngame) {
		{{{MenuButtonList::P}}}SetButtons(_State.Controls.Frame_ButtonList, Buttons);
	} else {
		{{{P}}}ControllerInfo::SetButtons(Buttons);
	}
}

Void {{{P}}}Private_FocusUnsetPage(CMlQuad _Quad_Unset, Boolean _Focused) {
	if (_Focused) {
		_Quad_Unset.Opacity = 1.;
		_Quad_Unset.Colorize = <1., 0., 0.>;
	} else {
		_Quad_Unset.Opacity = 0.5;
		_Quad_Unset.Colorize = <1., 1., 1.>;
	}
}

Void {{{P}}}Private_FocusTrophyKey({{{P}}}K_State _State, Integer _FocusedTrophyKey, Integer _SelectedTrophyKey, Boolean _TrophiesListIsFocused) {
	foreach (ControlKey => Control in _State.Controls.Frame_TrophiesList.Controls) {
		declare CMlFrame Frame_Trophy <=> (Control as CMlFrame);
		declare CMlQuad Quad_TrophyBG <=> (Frame_Trophy.GetFirstChild("{{{P}}}quad-trophy-bg") as CMlQuad);
		declare CMlQuad Quad_TrophyIcon <=> (Frame_Trophy.GetFirstChild("{{{P}}}quad-trophy-icon") as CMlQuad);
		declare CMlLabel Label_TrophyCount <=> ((Control as CMlFrame).GetFirstChild("{{{P}}}label-trophy-count") as CMlLabel);
		declare CMlQuad Quad_TrophyFocus <=> (Frame_Trophy.GetFirstChild("{{{P}}}quad-trophy-focus") as CMlQuad);

		declare Real TrophyBGOpacity = 0.2;
		declare Real TrophyCountOpacity = 0.8;
		declare Real TrophyIconOpacity = 0.8;
		declare Real TrophyFocusOpacity = 0.;
		if (_State.PlayerProfile.AccountId == LocalUser.WebServicesUserId) {
			if (ControlKey == _SelectedTrophyKey) {
				TrophyBGOpacity = 0.6;
				TrophyCountOpacity = 1.;
				TrophyIconOpacity = 1.;
				TrophyFocusOpacity = 1.;
			} else if (_TrophiesListIsFocused && ControlKey == _FocusedTrophyKey) {
				Label_TrophyCount.TTS_Focus();
				TrophyBGOpacity = 0.6;
				TrophyCountOpacity = 1.;
				TrophyIconOpacity = 1.;
			}
		}

		declare Text TrophyCountColor = "{{{ColorPalette::C_Color_GreenOne}}}";
		if (
			(_State.PlayerProfile.AccountId == LocalUser.WebServicesUserId && ControlKey == _SelectedTrophyKey) ||
			(!_State.TrophiesCount.existskey(_State.Controls.Frame_TrophiesList.Controls.count - ControlKey) || _State.TrophiesCount[_State.Controls.Frame_TrophiesList.Controls.count - ControlKey] <= 0)
		) {
			TrophyCountColor = "{{{ColorPalette::C_Color_White}}}";
		}

		AnimMgr.Flush(Quad_TrophyBG);
		AnimMgr.Flush(Quad_TrophyIcon);
		AnimMgr.Flush(Label_TrophyCount);
		AnimMgr.Flush(Quad_TrophyFocus);
		AnimMgr.Add(Quad_TrophyBG, "<anim opacity=\""^TrophyBGOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_TrophyIcon, "<anim opacity=\""^TrophyIconOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Label_TrophyCount, "<anim textcolor=\""^TrophyCountColor^"\" opacity=\""^TrophyCountOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_TrophyFocus, "<anim opacity=\""^TrophyFocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void {{{P}}}Private_FocusTrophiesList({{{P}}}K_State _State, Boolean _TrophiesListIsFocused) {
	{{{P}}}Private_FocusTrophyKey(_State, _State.FocusedTrophyKey, _State.SelectedTrophyKey, _TrophiesListIsFocused);
}

{{{P}}}K_State {{{P}}}Private_SetFocusedTrophy({{{P}}}K_State _State, Integer _TrophyKey) {
	declare Integer NewTrophyKey = {{{P}}}ML::Clamp(_TrophyKey, 0, _State.Controls.Frame_TrophiesList.Controls.count - 1);
	if (_State.FocusedTrophyKey == NewTrophyKey) return _State;
	
	declare {{{P}}}K_State State = _State;

	declare CMlControl Focused_Control = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	declare Boolean TrophiesListIsFocused = (Focused_Control != Null && Focused_Control == State.Controls.Frame_TrophiesList);
	State.FocusedTrophyKey = NewTrophyKey;
	{{{P}}}Private_FocusTrophiesList(State, TrophiesListIsFocused);

	return State;
}

Void {{{P}}}Private_TTSContextUpdate({{{P}}}K_State _State, CMlFrame _Frame_Container) {
	if (_Frame_Container != Null && _Frame_Container.HasClass("{{{P}}}controller-info-pager")) {
		if ({{{P}}}G_TTSContextIdent_ContainerTitle == NullId) {{{P}}}G_TTSContextIdent_ContainerTitle = ParentApp.TTS_Context_Enter({{{P}}}C_TTSContextLevel_Section);
		if ({{{P}}}G_TTSContextIdent_ContainerRank == NullId) {{{P}}}G_TTSContextIdent_ContainerRank = ParentApp.TTS_Context_Enter({{{P}}}C_TTSContextLevel_Section);

		if (_Frame_Container.ControlId == "{{{P}}}frame-info-campaign-ranking") {
			ParentApp.TTS_Context_Change({{{P}}}G_TTSContextIdent_ContainerTitle, _State.Controls.Label_TopCampaignName);
			if (_State.Controls.Label_TopText.Visible) {
				ParentApp.TTS_Context_Change({{{P}}}G_TTSContextIdent_ContainerRank, {{{P}}}TL::GetTranslatedText({{{P}}}TL::Compose("%1 %2 %3", "{{{Text_Top}}}", _State.Controls.Label_TopCampaignRank.Value, _State.Controls.Label_TopCampaignZone.Value)), True);
			} else {
				ParentApp.TTS_Context_Change({{{P}}}G_TTSContextIdent_ContainerRank, _State.Controls.Label_TopCampaignZone);
			}
		} else if (_Frame_Container.ControlId == "{{{P}}}frame-trophies-ranking" || _Frame_Container.ControlId == "{{{P}}}frame-info-ranking") {
			ParentApp.TTS_Context_Change({{{P}}}G_TTSContextIdent_ContainerTitle, "{{{Text_Global}}}", True);
			ParentApp.TTS_Context_Change({{{P}}}G_TTSContextIdent_ContainerRank, {{{P}}}TL::Compose("%1 %2 %3", "{{{Text_Top}}}", _State.Controls.Label_TrophiesGlobalRankingPosition.Value, _State.Controls.Label_TrophiesGlobalRankingZone.Value), True);
		}

		ParentApp.TTS_Context_Read({{{P}}}C_TTSContextLevel_Section);
	} else {
		{{{P}}}G_TTSContextIdent_ContainerTitle = ParentApp.TTS_Context_Leave({{{P}}}G_TTSContextIdent_ContainerTitle);
		{{{P}}}G_TTSContextIdent_ContainerRank = ParentApp.TTS_Context_Leave({{{P}}}G_TTSContextIdent_ContainerRank);
	}
}
Void {{{P}}}Private_TTSContextUpdate({{{P}}}K_State _State, CMlControl _Control) {
	if (_Control != Null && _Control.HasClass("{{{P}}}focus-opacity-element") && _Control.Parent != Null && _Control.Parent.Parent != Null) {
		{{{P}}}Private_TTSContextUpdate(_State, _Control.Parent.Parent);
	} else {
		{{{P}}}Private_TTSContextUpdate(_State, _Control as CMlFrame);
	}
}

Void {{{P}}}Private_FocusOpacityContainerUpdate({{{P}}}K_State _State, CMlFrame _Frame_Container, Boolean _Focused) {
	if (_Frame_Container != Null) {
		Page.GetClassChildren("{{{P}}}focus-opacity-element", _Frame_Container, True);
		foreach (Control in Page.GetClassChildren_Result) {
			if (_Focused && Control.DataAttributeExists("{{{P}}}opacity-focus")) {
				if ({{{Button::P}}}IsButton(Control)) {
					{{{Button::P}}}SetOpacityUnfocus(This, (Control as CMlFrame), {{{P}}}TL::ToReal(Control.DataAttributeGet("{{{P}}}opacity-focus")));
				} else {
					AnimMgr.Flush(Control);
					AnimMgr.Add(Control, "<anim opacity=\""^Control.DataAttributeGet("{{{P}}}opacity-focus")^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			} else if (!_Focused && Control.DataAttributeExists("{{{P}}}opacity-unfocus")) {
				if ({{{Button::P}}}IsButton(Control)) {
					{{{Button::P}}}SetOpacityUnfocus(This, (Control as CMlFrame), {{{P}}}TL::ToReal(Control.DataAttributeGet("{{{P}}}opacity-unfocus")));
				} else {
					AnimMgr.Flush(Control);
					AnimMgr.Add(Control, "<anim opacity=\""^Control.DataAttributeGet("{{{P}}}opacity-unfocus")^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			}
		}
	}
}

Void {{{P}}}Private_Focus({{{P}}}K_State _State, CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);

		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Scroll::P}}}IsScroll(_From)) {
			{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		} else if (_From.HasClass("{{{P}}}focus-opacity-container")) {
			{{{P}}}Private_FocusOpacityContainerUpdate(_State, (_From as CMlFrame), False);
		} else if (_From.ControlId == _State.Controls.Frame_TrophiesList.ControlId) {
			{{{P}}}Private_FocusTrophiesList(_State, False);
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Scroll::P}}}IsScroll(_To)) {
			{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		} else if (_To.HasClass("{{{P}}}focus-opacity-container")) {
			{{{P}}}Private_FocusOpacityContainerUpdate(_State, (_To as CMlFrame), True);
			{{{P}}}Private_TTSContextUpdate(_State, _To as CMlFrame);
		} else if (_To.ControlId == _State.Controls.Frame_TrophiesList.ControlId) {
			{{{P}}}Private_FocusTrophiesList(_State, True);
		}
	}

	{{{P}}}Private_UpdateControllerInfo(_State, _To);
}
Void {{{P}}}Private_Focus({{{P}}}K_State _State, CMlControl _To) {
	assert(_To != Null, "Use Private_Focus(K_State _State, CMlControl _From, CMlControl _To) to focus Null");
	declare Text TargetNavGroup = {{{Navigation::P}}}GetControlGroupName(_To);
	{{{P}}}Private_Focus(_State, {{{Navigation::P}}}GetFocusedControl(This, TargetNavGroup), _To);
}

Void {{{P}}}Anim_FadeInOut(CMlQuad _Quad, Boolean _FadeIn) {
	AnimMgr.Flush(_Quad);
	if (_FadeIn) {
		AnimMgr.Add(_Quad, "<a opacity=\"1.\" />", 215, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Quad, "<a opacity=\"0.\" />", 215, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

{{{P}}}K_State {{{P}}}Private_UpdateTabDisplayed({{{P}}}K_State _State, Integer _NewTabDisplayed) {
	declare {{{P}}}K_State State = _State;

	// Save control focused in the old tab
	State.TabsFocuses[State.TabDisplayed] = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");

	State.TabDisplayed = _NewTabDisplayed;
	State.Controls.Frame_Trophies.Visible = State.TabDisplayed == {{{P}}}C_TabDisplayed_Trophies;
	State.Controls.Frame_RankedStats.Visible = State.TabDisplayed == {{{P}}}C_TabDisplayed_Ranked;
	State.Controls.Frame_RoyalStats.Visible = State.TabDisplayed == {{{P}}}C_TabDisplayed_Royal;
	State.Controls.Frame_MainProfile.Visible = State.TabDisplayed == {{{P}}}C_TabDisplayed_General;
	State.Controls.Frame_CurrentSkin.Visible = State.TabDisplayed == {{{P}}}C_TabDisplayed_General;

	// Display the car only when the profile is displayed and the general tab selected
	State = {{{P}}}Private_Display3DScene(State, State.Enabled && State.TabDisplayed == {{{P}}}C_TabDisplayed_General);
	{{{P}}}Anim_FadeInOut(State.Controls.Quad_Lights, State.TabDisplayed == {{{P}}}C_TabDisplayed_General);

	if ({{{NavigationTabs::P}}}GetCurrentTab(State.Controls.NavigationTabs_Categories) != State.TabDisplayed) {
		{{{NavigationTabs::P}}}UpdateCurrentTab(This, State.Controls.NavigationTabs_Categories, State.TabDisplayed, False);
	}

	// Update navigation and report context
	declare Text UpTargetControlId = "";
	switch (State.TabDisplayed) {
		case {{{P}}}C_TabDisplayed_General: {
			UpTargetControlId = "{{{P}}}frame-info-campaign-ranking";
			{{{P}}}ReportContext::SetProfileCurrentTab(System, "Profile");
		}
		case {{{P}}}C_TabDisplayed_Trophies: {
			UpTargetControlId = "{{{P}}}frame-trophies-list";
			{{{P}}}ReportContext::SetProfileCurrentTab(System, "Trophies");
		}
		case {{{P}}}C_TabDisplayed_Royal: {
			UpTargetControlId = "";
			{{{P}}}ReportContext::SetProfileCurrentTab(System, "Royal");
		}
		case {{{P}}}C_TabDisplayed_Ranked: {
			UpTargetControlId = "";
			{{{P}}}ReportContext::SetProfileCurrentTab(System, "Ranked");
		}
	}
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Back, "up", UpTargetControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_MyAccess, "up", UpTargetControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_UpdateZone, "up", UpTargetControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Garage, "up", UpTargetControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_FirstPartyProfile, "up", UpTargetControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_UbisoftConnectProfile, "up", UpTargetControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Report, "up", UpTargetControlId);

	// Select a control to focus
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	if (
		{{{P}}}Private_IsBrowsingTrophiesHistory(State) &&
		!{{{Navigation::P}}}IsLocked(State.Controls.Frame_TrophiesList)
	) {
		{{{P}}}Private_Focus(State, FocusedControl, State.Controls.Frame_TrophiesList);
		State = {{{P}}}Private_SetFocusedTrophy(State, State.SelectedTrophyKey);
	} else if (
		(FocusedControl == Null || !FocusedControl.HasClass("{{{P}}}bottom-button")) &&
		State.TabsFocuses.existskey(State.TabDisplayed) &&
		State.TabsFocuses[State.TabDisplayed] != Null &&
		!{{{Navigation::P}}}IsLocked(State.TabsFocuses[State.TabDisplayed])
	) {
		{{{P}}}Private_Focus(State, FocusedControl, State.TabsFocuses[State.TabDisplayed]);
	} else if (
		FocusedControl == Null ||
		!FocusedControl.HasClass("{{{P}}}bottom-button") ||
		{{{Navigation::P}}}IsLocked(FocusedControl)
	) {
		{{{P}}}Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

Void {{{P}}}Private_SetZoneFlag({{{P}}}K_State _State, Text _FlagUrl) {
	_State.Controls.Quad_PlayerCardFlag.ImageUrl = _FlagUrl;
}

Void {{{P}}}Private_SetPlayerName({{{P}}}K_State _State, Text _PlayerName, Text _ClubTag, Boolean _IsFirstPartyDisplayName, Boolean _IsFakeUser) {
	{{{PlayerName::P}}}SetName(This, _State.Controls.PlayerName_PlayerCardName, _PlayerName, _ClubTag, _IsFirstPartyDisplayName, !_IsFakeUser);
	{{{P}}}ReportContext::SetProfilePlayerName(System, _PlayerName);
}

Text {{{P}}}Private_GetTrophyImage(Integer _Trophy) {
	declare TrophyImage = "{{{Const::C_ImageUrl_Trophy_512_None}}}";
	switch (_Trophy) {
		case 0: TrophyImage = "{{{Const::C_ImageUrl_Trophy_512_None}}}";
		case 1: TrophyImage = "{{{Const::C_ImageUrl_Trophy_512_Bronze1}}}"; //< T1 trophy
		case 2: TrophyImage = "{{{Const::C_ImageUrl_Trophy_512_Bronze2}}}";
		case 3: TrophyImage = "{{{Const::C_ImageUrl_Trophy_512_Bronze3}}}";
		case 4: TrophyImage = "{{{Const::C_ImageUrl_Trophy_512_Silver1}}}";
		case 5: TrophyImage = "{{{Const::C_ImageUrl_Trophy_512_Silver2}}}";
		case 6: TrophyImage = "{{{Const::C_ImageUrl_Trophy_512_Silver3}}}";
		case 7: TrophyImage = "{{{Const::C_ImageUrl_Trophy_512_Gold1}}}";
		case 8: TrophyImage = "{{{Const::C_ImageUrl_Trophy_512_Gold2}}}";
		case 9: TrophyImage = "{{{Const::C_ImageUrl_Trophy_512_Gold3}}}"; //< T9 trophy
	}
	return TrophyImage;
}
Text {{{P}}}Private_GetTrophyImageSmall(Integer _Trophy) {
	declare TrophyImage = "{{{Const::C_ImageUrl_Trophy_128_None}}}";
	switch (_Trophy) {
		case 0: TrophyImage = "{{{Const::C_ImageUrl_Trophy_128_None}}}";
		case 1: TrophyImage = "{{{Const::C_ImageUrl_Trophy_128_Bronze1}}}"; //< T1 trophy
		case 2: TrophyImage = "{{{Const::C_ImageUrl_Trophy_128_Bronze2}}}";
		case 3: TrophyImage = "{{{Const::C_ImageUrl_Trophy_128_Bronze3}}}";
		case 4: TrophyImage = "{{{Const::C_ImageUrl_Trophy_128_Silver1}}}";
		case 5: TrophyImage = "{{{Const::C_ImageUrl_Trophy_128_Silver2}}}";
		case 6: TrophyImage = "{{{Const::C_ImageUrl_Trophy_128_Silver3}}}";
		case 7: TrophyImage = "{{{Const::C_ImageUrl_Trophy_128_Gold1}}}";
		case 8: TrophyImage = "{{{Const::C_ImageUrl_Trophy_128_Gold2}}}";
		case 9: TrophyImage = "{{{Const::C_ImageUrl_Trophy_128_Gold3}}}"; //< T9 trophy
	}
	return TrophyImage;
}

Integer {{{P}}}GetBestTrophy(Integer[Integer] _TrophiesCount) {
	declare Integer BestTrophy = 0;
	foreach (Trophy => TrophyCount in _TrophiesCount) {
		if (TrophyCount > 0 && Trophy > BestTrophy) BestTrophy = Trophy;
	}
	return BestTrophy;
}

Void {{{P}}}Private_UpdateTopTrophyCount({{{P}}}K_State _State, Integer[Integer] _TrophiesCount) {
	declare Integer BestTrophy = {{{P}}}GetBestTrophy(_TrophiesCount);

	_State.Controls.Quad_TopTrophy.ImageUrl = {{{P}}}Private_GetTrophyImage(BestTrophy);
	_State.Controls.Quad_BestTrophy.ImageUrl = {{{P}}}Private_GetTrophyImage(BestTrophy);

	if (_TrophiesCount.count > 0) {
		_State.Controls.Label_TopTrophyCount.Value = ""^_TrophiesCount[BestTrophy];
	} else {
		_State.Controls.Label_TopTrophyCount.Value = "0";
	}
}

Integer[Integer] {{{P}}}GetTrophyCount(CAccountTrophyLastYearSummary _TrophiesSummary) {
	if (_TrophiesSummary == Null) return [];

	declare Integer[Integer] TrophiesCount;
	for (Index, 0, 9) {
		switch (Index) {
			case 0: TrophiesCount[0] = 0;
			case 1: TrophiesCount[1] = _TrophiesSummary.T1Count;
			case 2: TrophiesCount[2] = _TrophiesSummary.T2Count;
			case 3: TrophiesCount[3] = _TrophiesSummary.T3Count;
			case 4: TrophiesCount[4] = _TrophiesSummary.T4Count;
			case 5: TrophiesCount[5] = _TrophiesSummary.T5Count;
			case 6: TrophiesCount[6] = _TrophiesSummary.T6Count;
			case 7: TrophiesCount[7] = _TrophiesSummary.T7Count;
			case 8: TrophiesCount[8] = _TrophiesSummary.T8Count;
			case 9: TrophiesCount[9] = _TrophiesSummary.T9Count;
		}
	}
	return TrophiesCount;
}

{{{P}}}K_State {{{P}}}Private_SetTrophies({{{P}}}K_State _State, CAccountTrophyLastYearSummary _TrophiesSummary) {
	declare {{{P}}}K_State State = _State;
	State.TrophiesCount = {{{P}}}GetTrophyCount(_TrophiesSummary);
	declare BestTrophy = {{{P}}}GetBestTrophy(State.TrophiesCount);

	foreach (Key => Control in State.Controls.Frame_TrophiesList.Controls) {
		declare CMlLabel Label_TrophyCount <=> ((Control as CMlFrame).GetFirstChild("{{{P}}}label-trophy-count") as CMlLabel);
		declare CMlQuad Quad_TrophyIcon <=> ((Control as CMlFrame).GetFirstChild("{{{P}}}quad-trophy-icon") as CMlQuad);
		declare Integer Trophy = State.Controls.Frame_TrophiesList.Controls.count - Key;

		if (State.TrophiesCount.existskey(Trophy)) Label_TrophyCount.Value = ""^State.TrophiesCount[Trophy];
		else Label_TrophyCount.Value = "0";
		Label_TrophyCount.TTS_AltText = {{{P}}}TL::Compose("{{{TTS_Trophy}}}", Label_TrophyCount.Value, ""^Trophy);
		if (Trophy <= BestTrophy) {
			Quad_TrophyIcon.ChangeImageUrl({{{P}}}Private_GetTrophyImage(Trophy));
		} else {
			Quad_TrophyIcon.ChangeImageUrl({{{P}}}Private_GetTrophyImage(0));
		}
	}

	{{{P}}}Private_UpdateTopTrophyCount(State, State.TrophiesCount);
	{{{P}}}ReportContext::SetProfileTrophies(System, State.TrophiesCount);
	
	declare CMlControl Focused_Control = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	{{{P}}}Private_FocusTrophiesList(State, (Focused_Control != Null && Focused_Control == State.Controls.Frame_TrophiesList));

	return State;
}

Void {{{P}}}Private_SetTrophiesPoints({{{P}}}K_State _State, Integer _Points) {
	_State.Controls.Label_TrophiesPoints.Value = ""^_Points;
	if (_Points > 1) {
		_State.Controls.Label_TrophiesPointsText.Value = "{{{Text_Points}}}";
	} else {
		_State.Controls.Label_TrophiesPointsText.Value = "{{{Text_Point}}}";
	}

	{{{P}}}ReportContext::SetProfileTrophiesPoints(System, _Points);
}

Void {{{P}}}Private_SetEchelon({{{P}}}K_State _State, Integer _Echelon) {
	declare Integer Echelon = {{{P}}}ML::Clamp(_Echelon, {{{P}}}C_Echelon_Null, {{{P}}}C_Echelon_Gold3);
	if (Echelon >= {{{P}}}C_Echelon_Bronze1) {
		switch (_Echelon) {
			case {{{P}}}C_Echelon_Bronze1: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "{{{Const::C_ImageUrl_Echelon_64_Bronze1}}}";
				_State.Controls.Label_PlayerCardEchelon.Value = "{{{Text_Bronze1}}}";
			}
			case {{{P}}}C_Echelon_Bronze2: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "{{{Const::C_ImageUrl_Echelon_64_Bronze2}}}";
				_State.Controls.Label_PlayerCardEchelon.Value = "{{{Text_Bronze2}}}";
			}
			case {{{P}}}C_Echelon_Bronze3: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "{{{Const::C_ImageUrl_Echelon_64_Bronze3}}}";
				_State.Controls.Label_PlayerCardEchelon.Value = "{{{Text_Bronze3}}}";
			}
			case {{{P}}}C_Echelon_Silver1: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "{{{Const::C_ImageUrl_Echelon_64_Silver1}}}";
				_State.Controls.Label_PlayerCardEchelon.Value = "{{{Text_Silver1}}}";
			}
			case {{{P}}}C_Echelon_Silver2: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "{{{Const::C_ImageUrl_Echelon_64_Silver2}}}";
				_State.Controls.Label_PlayerCardEchelon.Value = "{{{Text_Silver2}}}";
			}
			case {{{P}}}C_Echelon_Silver3: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "{{{Const::C_ImageUrl_Echelon_64_Silver3}}}";
				_State.Controls.Label_PlayerCardEchelon.Value = "{{{Text_Silver3}}}";
			}
			case {{{P}}}C_Echelon_Gold1: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "{{{Const::C_ImageUrl_Echelon_64_Gold1}}}";
				_State.Controls.Label_PlayerCardEchelon.Value = "{{{Text_Gold1}}}";
			}
			case {{{P}}}C_Echelon_Gold2: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "{{{Const::C_ImageUrl_Echelon_64_Gold2}}}";
				_State.Controls.Label_PlayerCardEchelon.Value = "{{{Text_Gold2}}}";
			}
			case {{{P}}}C_Echelon_Gold3: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "{{{Const::C_ImageUrl_Echelon_64_Gold3}}}";
				_State.Controls.Label_PlayerCardEchelon.Value = "{{{Text_Gold3}}}";
			}
		}
		_State.Controls.Quad_PlayerCardEchelon.Visible = True;
		_State.Controls.Label_PlayerCardEchelon.Visible = True;
	} else {
		_State.Controls.Quad_PlayerCardEchelon.Visible = False;
		_State.Controls.Label_PlayerCardEchelon.Visible = False;
	}

	{{{P}}}ReportContext::SetProfileEchelon(System, Echelon);
}

Void {{{P}}}Private_SetRank(
	CMlFrame _Frame_PlayerRank,
	CMlLabel _Label_Rank,
	CMlLabel _Label_RankDate,
	Text _DivisionId,
	Text _ProgressionDate,
	Boolean _ShowMinRankIfNoInfo,
	CMlLabel _Label_RankNoInfo
) {
	if (_DivisionId != "") {
		if (_Label_RankNoInfo != Null) _Label_RankNoInfo.Value = "";
		{{{PlayerRank::P}}}UpdatePlayerRank(_Frame_PlayerRank, _DivisionId);
		declare Integer BestRank = {{{PlayerRank::P}}}GetRankNumberFromDivisionId(_DivisionId);
		_Label_Rank.Value = {{{P}}}C_Rank_Names.get(BestRank, "");
		_Label_RankDate.Value = {{{P}}}TiL::FormatDate(_ProgressionDate, {{{P}}}TiL::EDateFormats::MonthYear);
	} else if (_ShowMinRankIfNoInfo) {
		if (_Label_RankNoInfo != Null) _Label_RankNoInfo.Value = "";
		{{{PlayerRank::P}}}UpdatePlayerRank(_Frame_PlayerRank, 1);
		_Label_Rank.Value = {{{P}}}C_Rank_Names.get(1, "");
		_Label_RankDate.Value = "";
	} else {
		if (_Label_RankNoInfo != Null) _Label_RankNoInfo.Value = "{{{Text_MissingStats}}}";
		{{{PlayerRank::P}}}UpdatePlayerRank(_Frame_PlayerRank, -1);
		_Label_Rank.Value = "";
		_Label_RankDate.Value = "";
	}
}

Void {{{P}}}Private_SetRankedStats({{{P}}}K_State _State, Boolean _DisplaySensibleData) {
	// Ranked button preview
	{{{P}}}Private_SetRank(_State.Controls.Frame_PlayerBestRank, _State.Controls.Label_BestRank, _State.Controls.Label_BestRankDate, _State.Ranked.Stats.BestDivision, ""^_State.Ranked.Stats.BestProgressionDate, True, Null);
	
	//Ranked Stats	
	{{{P}}}Private_SetRank(_State.Controls.Frame_PlayerCurrentSeason, _State.Controls.Label_CurrentSeason, _State.Controls.Label_CurrentSeasonDate, _State.Ranked.Stats.CurrentDivision, {{{P}}}TiL::GetCurrent(), True, Null);
	{{{P}}}Private_SetRank(_State.Controls.Frame_PlayerPreviousSeason, _State.Controls.Label_PreviousSeason, _State.Controls.Label_PreviousSeasonDate, _State.Ranked.Stats.PreviousDivision, ""^_State.Ranked.Stats.PreviousProgressionDate, False, _State.Controls.Label_PreviousRankedError);
	{{{P}}}Private_SetRank(_State.Controls.Frame_PlayerBestSeason, _State.Controls.Label_BestSeason, _State.Controls.Label_BestSeasonDate, _State.Ranked.Stats.BestDivision, ""^_State.Ranked.Stats.BestProgressionDate, False, _State.Controls.Label_BestRankedError);
	{{{P}}}G_State.Controls.Frame_SensibleData.Visible = _DisplaySensibleData;
	if (_DisplaySensibleData) {
		declare Real WinRate = 0.;
		if (_State.Ranked.Stats.PlayedMatches > 0) WinRate = ((_State.Ranked.Stats.Victories * 1.)  / _State.Ranked.Stats.PlayedMatches) * 100.; //Do not remove the *1. on the integer in the division, otherwise WinRate will be 0
		{{{P}}}G_State.Controls.Label_MatchesCount.Value = ""^_State.Ranked.Stats.PlayedMatches;
		{{{P}}}G_State.Controls.Label_WinRate.Value = {{{P}}}TL::Compose("%1%%", ""^{{{P}}}ML::NearestInteger(WinRate));
		{{{P}}}G_State.Controls.Label_MVPCount.Value = ""^_State.Ranked.Stats.MVPCount;
		AnimMgr.Flush({{{P}}}G_State.Controls.Frame_PublicData);
		AnimMgr.Add({{{P}}}G_State.Controls.Frame_PublicData, "<a pos=\"0 "^{{{P}}}G_State.Controls.Frame_PublicData.RelativePosition_V3.Y^"\" />", 50, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Flush({{{P}}}G_State.Controls.Frame_PublicData);
		AnimMgr.Add({{{P}}}G_State.Controls.Frame_PublicData, "<a pos=\"-48 "^{{{P}}}G_State.Controls.Frame_PublicData.RelativePosition_V3.Y^"\" />", 50, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

	Void {{{P}}}Private_SetRoyalLevel(
	CMlFrame _Frame_RoyalLevel,
	CMlLabel _Label_RoyalLevel,
	CMlLabel _Label_RoyalVictories,
	Text _DivisionId,
	Integer _Victories
) {
	{{{PlayerRoyalVictories::P}}}UpdatePlayerRoyalVictories(This, _Frame_RoyalLevel, _DivisionId, _Victories);
	declare Integer RoyalLevel = {{{PlayerRoyalVictories::P}}}GetRoyalLevelFromDivisionId(This, _DivisionId);
	if (_Label_RoyalLevel != Null) _Label_RoyalLevel.Value = {{{P}}}C_Royal_Level_Names.get(RoyalLevel, "");
	if (_Label_RoyalVictories != Null) _Label_RoyalVictories.Value = ""^_Victories;
}

Void {{{P}}}Private_SetSuperRoyalStats(
	CMlQuad _Quad_SuperRoyalLogo,
	CMlLabel _Label_SuperRoyalVictories,
	CMlLabel _Label_BronzeVictories,
	CMlLabel _Label_SilverVictories,
	CMlLabel _Label_GoldVictories,
	CMlLabel _Label_MasterVictories,
	Integer _BronzeVictories,
	Integer _SilverVictories,
	Integer _GoldVictories,
	Integer _MasterVictories
) {
	declare Text BestSuperRoyalDivision = "";
	declare Integer BestSuperRoyalVictories = 0;
	if (_MasterVictories > 0) {
		BestSuperRoyalDivision = {{{P}}}C_SuperRoyal_Division_Master;
		BestSuperRoyalVictories = _MasterVictories;
	} else if (_GoldVictories > 0) {
		BestSuperRoyalDivision = {{{P}}}C_SuperRoyal_Division_Gold;
		BestSuperRoyalVictories = _GoldVictories;
	} else if (_SilverVictories > 0) {
		BestSuperRoyalDivision = {{{P}}}C_SuperRoyal_Division_Silver;
		BestSuperRoyalVictories = _SilverVictories;
	} else if (_BronzeVictories > 0) {
		BestSuperRoyalDivision = {{{P}}}C_SuperRoyal_Division_Bronze;
		BestSuperRoyalVictories = _BronzeVictories;
	}

	_Label_BronzeVictories.Value = ""^_BronzeVictories;
	_Label_SilverVictories.Value = ""^_SilverVictories;
	_Label_GoldVictories.Value = ""^_GoldVictories;
	_Label_MasterVictories.Value = ""^_MasterVictories;
	_Quad_SuperRoyalLogo.ChangeImageUrl({{{P}}}C_SuperRoyal_Logos.get(BestSuperRoyalDivision, ""));
	_Label_SuperRoyalVictories.Value = ""^BestSuperRoyalVictories;
}

Void {{{P}}}Private_SetRoyalStats({{{P}}}K_State _State) {
	// Royal button preview
	{{{P}}}Private_SetRoyalLevel(_State.Controls.Frame_MainRoyalLevel, _State.Controls.Label_MainRoyalLevel, Null, _State.Royal.Stats.CurrentDivision, _State.Royal.Stats.CurrentProgression);

	// Royal stats
	{{{P}}}Private_SetRoyalLevel(_State.Controls.Frame_RoyalLevel, Null, _State.Controls.Label_RoyalVictories, _State.Royal.Stats.CurrentDivision, _State.Royal.Stats.Victories);
	// Super Royal stats
	{{{P}}}Private_SetSuperRoyalStats(
		_State.Controls.Quad_SuperRoyalLogo,
		_State.Controls.Label_SuperRoyalVictories,
		_State.Controls.Label_BronzeVictories,
		_State.Controls.Label_SilverVictories,
		_State.Controls.Label_GoldVictories,
		_State.Controls.Label_MasterVictories,
		_State.SuperRoyal.Stats.BronzeVictories,
		_State.SuperRoyal.Stats.SilverVictories,
		_State.SuperRoyal.Stats.GoldVictories,
		_State.SuperRoyal.Stats.MasterVictories
	);
}

{{{P}}}K_State {{{P}}}Private_SetTrophiesRankingsPage({{{P}}}K_State _State, Integer _PageNb, Boolean _PlaySound) {
	declare {{{P}}}K_State State = _State;

	declare Integer NewCurrentPage = {{{P}}}ML::Clamp(_PageNb, 0, State.TrophiesRankingsPager.MaxPage);

	if (NewCurrentPage > State.TrophiesRankingsPager.CurrentPage) {
		{{{P}}}Private_PlayPagerAnim(State.Controls.Button_NextZone);
		{{{P}}}Private_PlayPagerAnim(State.Controls.Button_GeneralTrophiesNextZone);
		if (_PlaySound) {{{P}}}AudioManager::PlaySound(This, {{{MenuSounds::P}}}C_Sound_ArrowSelect);
	} else if (NewCurrentPage < State.TrophiesRankingsPager.CurrentPage) {
		{{{P}}}Private_PlayPagerAnim(State.Controls.Button_PrevZone);
		{{{P}}}Private_PlayPagerAnim(State.Controls.Button_GeneralTrophiesPreviousZone);
		if (_PlaySound) {{{P}}}AudioManager::PlaySound(This, {{{MenuSounds::P}}}C_Sound_ArrowSelect);
	}

	State.Controls.Button_NextZone.Visible = (_PageNb < State.TrophiesRankingsPager.MaxPage);
	State.Controls.Button_GeneralTrophiesNextZone.Visible = State.Controls.Button_NextZone.Visible;
	State.Controls.Button_PrevZone.Visible = (_PageNb > 0);
	State.Controls.Button_GeneralTrophiesPreviousZone.Visible = State.Controls.Button_PrevZone.Visible;

	State.TrophiesRankingsPager.CurrentPage = NewCurrentPage;

	if (
		State.TrophiesRankingsPager.TrophiesRankings.count <= 0 ||
		!State.TrophiesRankingsPager.TrophiesRankings.existskey(State.TrophiesRankingsPager.CurrentPage)
	) {
		if (State.TrophyRankingLoadingError != {{{P}}}C_ErrorCode_None) {
			State.Controls.Label_TrophiesGlobalRankingZone.Value = {{{P}}}TL::Compose("{{{Text_ErrorWhileRetrievingTrophyRanking}}}", State.TrophyRankingLoadingError);
		} else {
			State.Controls.Label_TrophiesGlobalRankingZone.Value = "{{{Text_NotRanked}}}";
		}
		State.Controls.Label_TrophiesGlobalRankingPosition.Value = "-";
	} else {
		declare {{{CampaignStruct::P}}}K_Ranking TrophiesRanking = State.TrophiesRankingsPager.TrophiesRankings[State.TrophiesRankingsPager.CurrentPage];

		State.Controls.Label_TrophiesGlobalRankingPosition.Value = {{{P}}}Tools::FormatTop(TrophiesRanking.Position, False);
		State.Controls.Label_TrophiesGlobalRankingZone.Value = {{{P}}}C_Zone_Translations.get(TrophiesRanking.ZoneName, {{{P}}}TL::GetTranslatedText(TrophiesRanking.ZoneName));
	}
	
	State.Controls.Label_TrophyTopRank.Value = State.Controls.Label_TrophiesGlobalRankingPosition.Value;
	State.Controls.Label_TrophyTopRankZone.Value = State.Controls.Label_TrophiesGlobalRankingZone.Value;

	{{{P}}}Tools::FitLabelValue(State.Controls.Label_TrophiesGlobalRankingZone, 2.5, 1.5, 0.25);
	{{{P}}}Tools::FitLabelValue(State.Controls.Label_TrophyTopRankZone, 2.5, 1.5, 0.25);

	return State;
}

{{{P}}}K_State {{{P}}}Private_SetTrophiesRankings({{{P}}}K_State _State, {{{CampaignStruct::P}}}K_Ranking[] _TrophiesRankings) {
	declare {{{P}}}K_State State = _State;

	State.TrophiesRankingsPager.TrophiesRankings = _TrophiesRankings;
	State.TrophiesRankingsPager.MaxPage = {{{P}}}ML::Max(0, _TrophiesRankings.count - 1);
	
	// Find the better zone with a rank below or equal to 100
	declare Integer PageNb = _TrophiesRankings.count - 1;
	foreach (Key => ZoneRanking in _TrophiesRankings) {
		if (ZoneRanking.Position <= 100) {
			PageNb = Key;
			break;
		}
	}

	State = {{{P}}}Private_SetTrophiesRankingsPage(State, PageNb, False);

	declare Integer[][Text] ReportContextRankings;
	foreach (Ranking in _TrophiesRankings) {
		ReportContextRankings[Ranking.ZoneName] = [Ranking.Position, Ranking.Length];
	}
	{{{P}}}ReportContext::SetProfileTrophiesRankings(System, ReportContextRankings);

	return State;
}

Void {{{P}}}Private_UpdateTrophiesRankingLoading({{{P}}}K_State _State) {
	declare Boolean IsLoading = {{{P}}}Http::IsInitialized(_State.GetPlayersTrophyRanking) && {{{P}}}Http::IsRunning(_State.GetPlayersTrophyRanking);
	_State.Controls.Frame_InfoRankingLoaded.Visible = !IsLoading;
	{{{LoadingSpinner::P}}}SetIsLoading(This, _State.Controls.Spinner_Ranking, IsLoading);
}

{{{P}}}K_State {{{P}}}Private_SetTrophiesHistoryIsLoading({{{P}}}K_State _State, Boolean _IsLoading) {
	declare {{{P}}}K_State State = _State;

	State.TrophiesHistory.IsLoading = _IsLoading;
	State.Controls.Scroll_TrophiesHistory.Visible = !State.TrophiesHistory.IsLoading;
	State.Controls.Label_TrophyHistory.Visible = !State.TrophiesHistory.IsLoading;
	{{{LoadingSpinner::P}}}SetIsLoading(This, _State.Controls.Spinner_TrophiesHistory, State.TrophiesHistory.IsLoading);
	
	return State;
}

{{{P}}}K_State {{{P}}}Private_SetTrophyHistoryScroll({{{P}}}K_State _State, Integer _TrophyType, Integer _Offset, CTaskResult_AccountTrophyGainHistory _TrophyHistory) {
	declare {{{P}}}K_State State = _State;

	if (_TrophyHistory != Null) {
		State.TrophiesHistory.TrophyScroll.Content = [];
		declare Integer Key = _Offset;

		/*
		AchievementType data

		SoloMedal:
		- Text SoloMedalAchievementType
		SoloRanking:
		- Text MapId
		- Text SeasonId
		- Text SoloRankingAchievementType
		LiveMatch:
		- Integer Duration
		- Text GameMode
		- Text GameModeCustomData
		- Boolean IsOfficial
		- Text ServerId
		CompetitionMatch:
		- Text CompetitionId
		- Text CompetitionMatchInfo
		- Text CompetitionName
		- Text CompetitionStage
		- Text CompetitionStageStep
		- Text CompetitionType
		- Text ServerId
		CompetitionRanking:
		- Text CompetitionId
		- Text CompetitionName
		- Text CompetitionStage
		- Text CompetitionStageStep
		- Text CompetitionType
		*/
		
		foreach (AccountTrophyGain in _TrophyHistory.AccountTrophyGainList) {
			declare Text Description = AccountTrophyGain.TrophyAchievement.TrophyAchievementType;
			switch (AccountTrophyGain.TrophyAchievement.TrophyAchievementType) {
				case {{{P}}}C_TrophyAchievementType_SoloMedal: {
					declare TrophySoloMedal <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_SoloMedal);
					declare Text AchievementType = TrophySoloMedal.SoloMedalAchievementType;
					if ({{{P}}}C_SoloMedalAchievementTypes.existskey(TrophySoloMedal.SoloMedalAchievementType)) {
						AchievementType = {{{P}}}C_SoloMedalAchievementTypes[TrophySoloMedal.SoloMedalAchievementType];
					}
					Description = {{{P}}}TL::Compose("%1 - %2", "{{{Text_TrophyAchievementType_SoloMedal}}}", AchievementType);
				}
				case {{{P}}}C_TrophyAchievementType_SoloRanking: {
					declare TrophySoloRanking <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_SoloRanking);
					declare Text AchievementType = TrophySoloRanking.SoloRankingAchievementType;
					if ({{{P}}}C_SoloRankingAchievementTypes.existskey(TrophySoloRanking.SoloRankingAchievementType)) {
						AchievementType = {{{P}}}C_SoloRankingAchievementTypes[TrophySoloRanking.SoloRankingAchievementType];
					}
					Description = {{{P}}}TL::Compose("%1 - %2", "{{{Text_TrophyAchievementType_SoloRanking}}}", AchievementType);
				}
				case {{{P}}}C_TrophyAchievementType_LiveMatch: {
					declare TrophyLiveMatch <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_LiveMatch);
					Description = "{{{Text_TrophyAchievementType_LiveMatch}}}";
				}
				case {{{P}}}C_TrophyAchievementType_CompetitionMatch: {
					declare TrophyCompetitionMatch <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_CompetitionMatch);
					Description = {{{P}}}TL::Compose("%1 - %2", "{{{Text_TrophyAchievementType_CompetitionMatch}}}", TrophyCompetitionMatch.CompetitionName);
				}
				case {{{P}}}C_TrophyAchievementType_CompetitionRanking: {
					declare TrophyCompetitionRanking <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_CompetitionRanking);
					Description = {{{P}}}TL::Compose("%1 - %2", "{{{Text_TrophyAchievementType_CompetitionRanking}}}", TrophyCompetitionRanking.CompetitionName);
				}
			}

			declare Integer Amount = 0;
			switch (_TrophyType) {
				case 1: Amount = AccountTrophyGain.T1Count;
				case 2: Amount = AccountTrophyGain.T2Count;
				case 3: Amount = AccountTrophyGain.T3Count;
				case 4: Amount = AccountTrophyGain.T4Count;
				case 5: Amount = AccountTrophyGain.T5Count;
				case 6: Amount = AccountTrophyGain.T6Count;
				case 7: Amount = AccountTrophyGain.T7Count;
				case 8: Amount = AccountTrophyGain.T8Count;
				case 9: Amount = AccountTrophyGain.T9Count;
			}

			State.TrophiesHistory.TrophyScroll.Content[Key] = {{{P}}}K_TrophyHistoryEntry {
				Description = Description,
				Date = {{{P}}}TiL::FormatDate(""^AccountTrophyGain.TimeStamp, {{{P}}}TiL::EDateFormats::DateShort),
				Amount = Amount,
				TimeStamp = AccountTrophyGain.TimeStamp
			};
			Key += 1;
		}
		State.TrophiesHistory.TrophyScroll.Total = _TrophyHistory.AccountTrophyGainTotalCount;
	} else {
		State.TrophiesHistory.TrophyScroll.Content = [];
		State.TrophiesHistory.TrophyScroll.Total = 0;
	}

	if (State.TrophiesHistory.IsLoading) {
		State = {{{P}}}Private_SetTrophiesHistoryIsLoading(State, False);
	}
	
	if (State.HistoryTrophyType == _TrophyType) {
		{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_TrophiesHistory, State.TrophiesHistory.TrophyScroll.Total);
		if (State.TrophiesHistory.TrophyScroll.Total <= 0) {
			if (
				_TrophyHistory != Null &&
				!_TrophyHistory.HasSucceeded &&
				State.TrophiesCount.existskey(_TrophyType) &&
				State.TrophiesCount[_TrophyType] > 0
			) {
				State.Controls.Label_TrophyHistory.Value = "{{{Text_TrophyHistoryUnavailable}}}";
			} else {
				State.Controls.Label_TrophyHistory.Value = "{{{Text_TrophyHistoryEmpty}}}";
			}
		} else {
			State.Controls.Label_TrophyHistory.Value = "";
		}
	}
	
	{{{P}}}Private_UpdateControllerInfo(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}"));

	return State;
}

{{{P}}}K_State {{{P}}}Private_RequestTrophyHistory({{{P}}}K_State _State, Integer _TrophyType, Integer _Offset, Integer _Count) {
	if (ScoreMgr == Null && _TrophyType <= 0) return _State;

	declare {{{P}}}K_State State = _State;

	// Cancel previous task
	if (State.TrophiesHistory.TaskId_GetTrophyHistory != NullId) {
		if (ScoreMgr.TaskResults.existskey(State.TrophiesHistory.TaskId_GetTrophyHistory)) {
			ScoreMgr.TaskResult_Release(State.TrophiesHistory.TaskId_GetTrophyHistory);
		}
		State.TrophiesHistory.TaskId_GetTrophyHistory = NullId;
	}
	State.TrophiesHistory.RequestedTrophyType = 0;
	State.TrophiesHistory.RequestedOffset = 0;

	// Start new task
	declare CTaskResult_AccountTrophyGainHistory Task = ScoreMgr.Trophy_GetGainHistoryByType(
		{{{P}}}MainUser::GetMainUserId(),
		_TrophyType,
		_Offset,
		_Count
	);
	if (Task != Null) {
		State.TrophiesHistory.TaskId_GetTrophyHistory = Task.Id;
		State.TrophiesHistory.RequestedTrophyType = _TrophyType;
		State.TrophiesHistory.RequestedOffset = _Offset;
	}

	return State;
}

{{{P}}}K_State {{{P}}}Private_UpdateSelectedTrophy({{{P}}}K_State _State, Integer _TrophyKey) {
	declare {{{P}}}K_State State = _State;

	declare CMlControl Focused_Control = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	declare Boolean TrophiesListIsFocused = (Focused_Control != Null && Focused_Control == State.Controls.Frame_TrophiesList);
	State.SelectedTrophyKey = _TrophyKey;
	if (State.SelectedTrophyKey >= 0 && State.SelectedTrophyKey < _State.Controls.Frame_TrophiesList.Controls.count) {
		State.HistoryTrophyType = _State.Controls.Frame_TrophiesList.Controls.count - State.SelectedTrophyKey;
	} else {
		State.HistoryTrophyType = 0;
	}
	{{{P}}}Private_FocusTrophiesList(State, TrophiesListIsFocused);

	State.Controls.Frame_TrophiesHistory.Visible = State.HistoryTrophyType > 0 && State.PlayerProfile.AccountId == LocalUser.WebServicesUserId;
	if (State.Controls.Frame_TrophiesHistory.Visible) {
		if (!State.TrophiesHistory.IsLoading) {
			State = {{{P}}}Private_SetTrophiesHistoryIsLoading(State, True);
		}
		{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_TrophiesHistory, 0);
		{{{Scroll::P}}}TriggerPagerUpdate(State.Controls.Scroll_TrophiesHistory);
	}

	{{{P}}}Private_UpdateControllerInfo(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}"));

	return State;
}
{{{P}}}K_State {{{P}}}Private_SetSelectedTrophy({{{P}}}K_State _State, Integer _TrophyKey) {
	declare Integer NewTrophyKey = {{{P}}}ML::Clamp(_TrophyKey, -1, _State.Controls.Frame_TrophiesList.Controls.count - 1);
	if (_State.SelectedTrophyKey == NewTrophyKey) NewTrophyKey = -1;
	return {{{P}}}Private_UpdateSelectedTrophy(_State, NewTrophyKey);
}

Void {{{P}}}Private_ScrollTrophyHistory({{{P}}}K_State _State, Real _Delta) {
	if (
		_State.Controls.Frame_TrophiesHistory.Visible &&
		_State.Controls.Scroll_TrophiesHistory.Visible &&
		_State.TrophiesHistory.TrophyScroll.Total > {{{TrophiesHistoryGrid.Y}}}
	) {
		{{{Scroll::P}}}ScrollDelta(This, _State.Controls.Scroll_TrophiesHistory, _Delta, 250);
	}
}

Void {{{P}}}Private_UpdatePlayersPagerVisibility({{{P}}}K_State _State) {
	_State.Controls.Button_PrevPlayer.Visible = (_State.PlayersPagerEnabled && !{{{ButtonIcon::P}}}IsVisible({{{P}}}G_State.Controls.ButtonIcon_PrevPlayer));
	_State.Controls.Button_NextPlayer.Visible = (_State.PlayersPagerEnabled && !{{{ButtonIcon::P}}}IsVisible({{{P}}}G_State.Controls.ButtonIcon_NextPlayer));
}

{{{P}}}K_State {{{P}}}Private_Enable({{{P}}}K_State _State, Boolean _Enabled) {
	declare {{{P}}}K_State State = _State;

	// Text to speech context
	if (_Enabled) {
		{{{P}}}G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Enter({{{P}}}C_TTSContextLevel_Page);
		ParentApp.TTS_Context_Change({{{P}}}G_TTSContextIdent_Tabs, {{{NavigationTabs::P}}}GetCurrentTabLabel(State.Controls.NavigationTabs_Categories));
		ParentApp.TTS_Context_Read({{{P}}}C_TTSContextLevel_Page);
		if (State.Controls.Frame_ReportSystem.Visible) {{{PopUpReportSystem::P}}}Display(This, State.Controls.Frame_ReportSystem, False);
	} else {
		{{{P}}}G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Leave({{{P}}}G_TTSContextIdent_Tabs);
		{{{P}}}G_TTSContextIdent_ContainerTitle = ParentApp.TTS_Context_Leave({{{P}}}G_TTSContextIdent_ContainerTitle);
		{{{P}}}G_TTSContextIdent_ContainerRank = ParentApp.TTS_Context_Leave({{{P}}}G_TTSContextIdent_ContainerRank);
	}

	if (_Enabled && !State.Enabled) {
		{{{P}}}Private_Focus(State, State.Controls.Button_Back);
	}
	
	State.Enabled = _Enabled;
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Main}}}", State.Enabled);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", State.Enabled);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_MouseOnly}}}", State.Enabled);
	{{{NavigationTabs::P}}}LockTabs(This, {{{P}}}G_State.Controls.NavigationTabs_Categories, !_Enabled);
	{{{P}}}Private_UpdatePlayersPagerVisibility(State);

	// Display the car only when the profile is displayed and the general tab selected
	State = {{{P}}}Private_Display3DScene(State, State.Enabled && State.TabDisplayed == {{{P}}}C_TabDisplayed_General);

	if (!State.Enabled) {
		State.PrivilegeCheck.PrivilegeCheck = {{{P}}}Privileges::Check_Destroy(State.PrivilegeCheck.PrivilegeCheck);
	}

	return State;
}

{{{P}}}K_State {{{P}}}Private_EnableGarageButton({{{P}}}K_State _State, Boolean _Enabled) {
	declare {{{P}}}K_State State = _State;

	State.GarageButtonEnabled = _Enabled;
	State.Controls.Button_Garage.Visible = (
		State.GarageButtonEnabled && 
		State.PlayerProfile.AccountId != "" &&
		LocalUser.WebServicesUserId == State.PlayerProfile.AccountId
	);
	{{{Navigation::P}}}Lock(State.Controls.Button_Garage, !State.Controls.Button_Garage.Visible);

	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	if (FocusedControl == State.Controls.Button_Garage && {{{Navigation::P}}}IsLocked(FocusedControl)) {
		{{{P}}}Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}
	
	return State;
}

{{{P}}}K_State {{{P}}}Private_EnableFirstPartyProfileButton({{{P}}}K_State _State, Boolean _Enabled) {
	declare {{{P}}}K_State State = _State;

	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(
		State.Controls.Button_FirstPartyProfile, 
		_Enabled && State.PlayerProfile.AccountId != "" && LocalUser.WebServicesUserId != State.PlayerProfile.AccountId
	);

	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	if (FocusedControl == State.Controls.Button_FirstPartyProfile && {{{Navigation::P}}}IsLocked(FocusedControl)) {
		{{{P}}}Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}
	
	return State;
}

{{{P}}}K_State {{{P}}}Private_EnableUbisoftConnectProfileButton({{{P}}}K_State _State) {
	declare {{{P}}}K_State State = _State;

	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(
		State.Controls.Button_UbisoftConnectProfile, 
		State.PlayerProfile.AccountId != "" && LocalUser.WebServicesUserId != State.PlayerProfile.AccountId
	);

	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	if (FocusedControl == State.Controls.Button_UbisoftConnectProfile && {{{Navigation::P}}}IsLocked(FocusedControl)) {
		{{{P}}}Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}
	
	return State;
}

{{{P}}}K_State {{{P}}}Private_EnableReportButton({{{P}}}K_State _State) {
	declare {{{P}}}K_State State = _State;

	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(
		State.Controls.Button_Report, 
		State.PlayerProfile.IsReportable
	);

	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	if (FocusedControl == State.Controls.Button_Report && {{{Navigation::P}}}IsLocked(FocusedControl)) {
		{{{P}}}Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}
	
	return State;
}

Void {{{P}}}AdaptFooterButtonsPositions({{{P}}}K_State _State) {
	if (_State.Controls.Button_UbisoftConnectProfile.Visible) {
		if (_State.Controls.Button_Report.Visible) {
			_State.Controls.Button_UbisoftConnectProfile.RelativePosition_V3.X = _State.Controls.Button_Report.RelativePosition_V3.X - 1. - {{{ExpendableButton::P}}}GetWidth(_State.Controls.Button_Report);
		} else {
			_State.Controls.Button_UbisoftConnectProfile.RelativePosition_V3.X = _State.Controls.Button_Report.RelativePosition_V3.X;
		}
	}
	if (_State.Controls.Button_FirstPartyProfile.Visible) {
		if (_State.Controls.Button_UbisoftConnectProfile.Visible) {
			_State.Controls.Button_FirstPartyProfile.RelativePosition_V3.X = _State.Controls.Button_UbisoftConnectProfile.RelativePosition_V3.X - 1. - {{{ExpendableButton::P}}}GetWidth(_State.Controls.Button_UbisoftConnectProfile);
		} else {
			_State.Controls.Button_FirstPartyProfile.RelativePosition_V3.X = _State.Controls.Button_UbisoftConnectProfile.RelativePosition_V3.X;
		}
	}
}

{{{P}}}K_State {{{P}}}Private_EnablePlayersPager({{{P}}}K_State _State, Boolean _Enabled) {
	declare {{{P}}}K_State State = _State;

	State.PlayersPagerEnabled = _Enabled;
	State.Controls.ButtonIcon_PrevPlayer.Visible = State.PlayersPagerEnabled;
	State.Controls.ButtonIcon_NextPlayer.Visible = State.PlayersPagerEnabled;
	{{{P}}}Private_UpdatePlayersPagerVisibility(State);

	return State;
}

{{{P}}}K_State {{{P}}}Private_EnableZoneSelection({{{P}}}K_State _State, Boolean _Enabled) {
	declare {{{P}}}K_State State = _State;

	State.ZoneSelectionEnabled = _Enabled;
	State.Controls.Button_UpdateZone.Visible = (
		State.ZoneSelectionEnabled && 
		State.PlayerProfile.AccountId != "" &&
		LocalUser.WebServicesUserId == State.PlayerProfile.AccountId
	);
	{{{Navigation::P}}}Lock(State.Controls.Button_UpdateZone, !State.Controls.Button_UpdateZone.Visible);
	State.Controls.Button_UpdateZone.RelativePosition_V3.X = State.Controls.Button_Garage.RelativePosition_V3.X - 1. - {{{ExpendableButton::P}}}GetWidth(State.Controls.Button_Garage);

	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	if (FocusedControl == State.Controls.Button_UpdateZone && {{{Navigation::P}}}IsLocked(FocusedControl)) {
		{{{P}}}Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}


{{{P}}}K_State {{{P}}}Private_EnableMyAccessButton({{{P}}}K_State _State, Boolean _Enabled) {
	declare {{{P}}}K_State State = _State;

	State.MyAccessButtonEnabled = _Enabled;
	State.Controls.Button_MyAccess.Visible = (
		State.MyAccessButtonEnabled && 
		State.PlayerProfile.AccountId != "" &&
		LocalUser.WebServicesUserId == State.PlayerProfile.AccountId
	);
	{{{Navigation::P}}}Lock(State.Controls.Button_MyAccess, !State.Controls.Button_MyAccess.Visible);
	State.Controls.Button_MyAccess.RelativePosition_V3.X = State.Controls.Button_UpdateZone.RelativePosition_V3.X - 1. - {{{ExpendableButton::P}}}GetWidth(State.Controls.Button_UpdateZone);

	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	if (FocusedControl == State.Controls.Button_MyAccess && {{{Navigation::P}}}IsLocked(FocusedControl)) {
		{{{P}}}Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}
	
	return State;
}

Void {{{P}}}Private_DisplayTrophies({{{P}}}K_State _State) {
	{{{LoadingSpinner::P}}}SetIsLoading(This, _State.Controls.Spinner_Trophies, _State.TaskId_GetAccountLastYearSummary != NullId);
	_State.Controls.Label_TrophiesError.Visible = (_State.TaskId_GetAccountLastYearSummary == NullId && _State.TrophiesLoadingError);
	_State.Controls.Frame_TrophiesLoaded.Visible = (_State.TaskId_GetAccountLastYearSummary == NullId && !_State.TrophiesLoadingError);
	_State.Controls.Label_DisplayHistory.Visible = (_State.PlayerProfile.AccountId == LocalUser.WebServicesUserId);
	{{{Navigation::P}}}Lock(_State.Controls.Frame_TrophiesList, !_State.Controls.Frame_TrophiesLoaded.Visible || _State.PlayerProfile.AccountId != LocalUser.WebServicesUserId);
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	if (FocusedControl == _State.Controls.Frame_TrophiesList && {{{Navigation::P}}}IsLocked(FocusedControl)) {
		{{{P}}}Private_Focus(_State, FocusedControl, _State.Controls.Button_Back);
	}
}

Void {{{P}}}Private_UpdateMyQuarterlyCampaignsRankings(
	{{{P}}}K_State _State,
	{{{CampaignStruct::P}}}K_CampaignRanking[Integer] _CampaignsRankings,
	Text[Integer] _CampaignsNames,
	Integer _Index
) {
	if (_CampaignsRankings.existskey(_Index)) {
		declare {{{CampaignStruct::P}}}K_Ranking[] CampaignRankings = _CampaignsRankings[_Index].Rankings;
		declare {{{CampaignStruct::P}}}K_Ranking TopRank = {{{CampaignStore::P}}}GetTopRank(CampaignRankings);

		_State.Controls.Label_TopText.Visible = CampaignRankings.count > 0;
		if (CampaignRankings.count > 0) {
			_State.Controls.Label_TopCampaignRank.Value = {{{P}}}Tools::FormatTop(TopRank.Position, False);
			_State.Controls.Label_TopCampaignZone.Value = {{{P}}}C_Zone_Translations.get(TopRank.ZoneName, {{{P}}}TL::GetTranslatedText(TopRank.ZoneName));
		} else {
			_State.Controls.Label_TopCampaignRank.Value = "-";
			_State.Controls.Label_TopCampaignZone.Value = "{{{Text_NotRanked}}}";
		}
		_State.Controls.Label_TopCampaignRank.Visible = True;
		_State.Controls.Label_TopCampaignZone.Visible = True;
		{{{P}}}Tools::FitLabelValue(_State.Controls.Label_TopCampaignZone, 2.5, 1.5, 0.25);

		if (_State.PlayerProfile.AccountId == LocalUser.WebServicesUserId) {
			declare Integer[][Text] ReportContextRankings;
			foreach (Ranking in CampaignRankings) {
				ReportContextRankings[Ranking.ZoneName] = [Ranking.Position, Ranking.Length];
			}
			{{{P}}}ReportContext::SetProfileCampaignRankings(System, ReportContextRankings);
		} else {
			{{{P}}}ReportContext::SetProfileCampaignRankings(System, []);
		}

		{{{LoadingSpinner::P}}}StopAnimation(This, {{{P}}}G_State.Controls.Spinner_Campaign);
	} else {
		_State.Controls.Label_TopCampaignRank.Visible = False;
		_State.Controls.Label_TopCampaignZone.Visible = False;
		_State.Controls.Label_TopText.Visible = False;
		{{{LoadingSpinner::P}}}StartAnimation(This, {{{P}}}G_State.Controls.Spinner_Campaign);
		{{{P}}}ReportContext::SetProfileCampaignRankings(System, []);
	}
	if (_CampaignsNames.existskey(_Index)) {
		declare {{{CampaignStruct::P}}}K_CampaignName CampaignName = {{{CampaignStruct::P}}}ParseCampaignName(_CampaignsNames[_Index]);
		if (CampaignName.IsValid) {
			_State.Controls.Label_TopCampaignName.Value = CampaignName.TranslatedName;
		} else {
			_State.Controls.Label_TopCampaignName.Value = CampaignName.Name;
		}
		_State.Controls.Label_TopCampaignName.Visible = True;
	} else {
		_State.Controls.Label_TopCampaignName.Visible = False;
	}
}

Void {{{P}}}Private_UpdateCampaignArrows({{{P}}}K_State _State) {
	if (_State.Controls.Frame_MyQuarterlyCampaignsRankings.Visible) {
		_State.Controls.Frame_PreviousCampaign.Visible = !{{{P}}}Pager::IsAtLastPage(_State.MyQuarterlyCampaignsRankingsPager);
		_State.Controls.Frame_NextCampaign.Visible = !{{{P}}}Pager::IsAtFirstPage(_State.MyQuarterlyCampaignsRankingsPager);
	}
}

Void {{{P}}}SetCampaignsRankingVisibility({{{P}}}K_State _State, Boolean _IsVisible) {
	_State.Controls.Frame_MyQuarterlyCampaignsRankings.Visible = _IsVisible;
	{{{Navigation::P}}}Lock(_State.Controls.Frame_MyQuarterlyCampaignsRankings, !_State.Controls.Frame_MyQuarterlyCampaignsRankings.Visible);
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	if (FocusedControl == _State.Controls.Frame_MyQuarterlyCampaignsRankings && {{{Navigation::P}}}IsLocked(FocusedControl)) {
		{{{P}}}Private_Focus(_State, FocusedControl, _State.Controls.Button_Back);
	}
	{{{P}}}Private_UpdateCampaignArrows(_State);
}

{{{P}}}K_State {{{P}}}Private_SetUser({{{P}}}K_State _State, {{{P}}}K_PlayerProfile _User, Boolean _CheckPrivileges, Boolean _IsLeavingProfile) {
	declare {{{P}}}K_State State = _State;

	if (_User.IsReportable) {
		{{{P}}}ReportSystem::AddUsingId("{{{C_Name}}}");
	} else {
		{{{P}}}ReportSystem::RemoveUsingId("{{{C_Name}}}");
	}

	// Check if the user has the right privileges if they are not looking at their own profile
	State.PrivilegeCheck.PrivilegeCheck = {{{P}}}Privileges::Check_Destroy(State.PrivilegeCheck.PrivilegeCheck);
	if (
		_CheckPrivileges &&
		!_User.IsFakeUser && (
			LocalUser == Null ||
			_User.AccountId != LocalUser.WebServicesUserId
		) 
	) {
		State.PrivilegeCheck.User = _User;
		State.PrivilegeCheck.PrivilegeCheck = {{{P}}}Privileges::Check_Create(PrivilegeMgr, {{{P}}}MainUser::GetMainUserId(), CPrivilegeMgr::EPrivilege::ViewUserGameHistory, [_User.AccountId]);
	}

	State.PlayerProfile = _User;
	State.TrophiesLoadingError = False;
	State.TrophyRankingLoadingError = {{{P}}}C_ErrorCode_None;

	State = {{{P}}}Private_SetTrophies(State, Null);
	{{{P}}}Private_SetTrophiesPoints(State, 0);
	{{{P}}}Private_SetEchelon(State, {{{P}}}C_Echelon_Null);
	State = {{{P}}}Private_SetTrophiesRankings(State, []);
	if (!_IsLeavingProfile) { //< Avoid unnecessary refreshes when leaving the page
		State = {{{P}}}Private_UpdateSkinDisplayed(State);
		State = {{{P}}}Private_EnableMyAccessButton(State, State.MyAccessButtonEnabled);
		State = {{{P}}}Private_EnableGarageButton(State, State.GarageButtonEnabled);
		State = {{{P}}}Private_EnableFirstPartyProfileButton(State, State.PlayerProfile.IsFirstPartyDisplayName);
		State = {{{P}}}Private_EnableUbisoftConnectProfileButton(State);
		State = {{{P}}}Private_EnableReportButton(State);
		State = {{{P}}}Private_EnableZoneSelection(State, State.ZoneSelectionEnabled);
		State = {{{P}}}Private_UpdateTabDisplayed(State, State.TabDisplayed);
		{{{P}}}AdaptFooterButtonsPositions(State);
	}

	if (State.TaskId_GetAccountLastYearSummary != NullId) {
		if (ParentApp.ScoreMgr.TaskResults.existskey(State.TaskId_GetAccountLastYearSummary)) {
			ParentApp.ScoreMgr.TaskResult_Release(State.TaskId_GetAccountLastYearSummary);
		}
		State.TaskId_GetAccountLastYearSummary = NullId;
	}

	if ({{{P}}}Http::IsInitialized(State.GetPlayersTrophyRanking)) {
		State.GetPlayersTrophyRanking = {{{P}}}Http::Destroy(State.GetPlayersTrophyRanking);
	}
	if ({{{P}}}Http::IsInitialized(State.Ranked.GetPlayerStats)) {
		State.Ranked.GetPlayerStats = {{{P}}}Http::Destroy(State.Ranked.GetPlayerStats);
	}
	if ({{{P}}}Http::IsInitialized(State.Royal.GetPlayerStats)) {
		State.Royal.GetPlayerStats = {{{P}}}Http::Destroy(State.Royal.GetPlayerStats);
	}
	if ({{{P}}}Http::IsInitialized(State.SuperRoyal.GetPlayerStats)) {
		State.SuperRoyal.GetPlayerStats = {{{P}}}Http::Destroy(State.SuperRoyal.GetPlayerStats);
	}
	{{{LoadingSpinner::P}}}SetIsLoading(This, State.Controls.Spinner_PlayerCardEchelon, False);
	{{{LoadingSpinner::P}}}SetIsLoading(This, State.Controls.Spinner_Ranked, False);
	{{{LoadingSpinner::P}}}SetIsLoading(This, State.Controls.Spinner_Royal, False);
	{{{LoadingSpinner::P}}}SetIsLoading(This, State.Controls.Spinner_PrivilegeCheck, False);

	State.Controls.Label_PrivilegeCheck.Visible = False;
	State.Controls.Frame_Content.Visible = True;
	State.Controls.Frame_GeneralTab.Visible = True;
	{{{Navigation::P}}}Lock(_State.Controls.Frame_ContentTrophiesRanking, False);
	{{{Navigation::P}}}Lock(State.Controls.Frame_GeneralTabInfoRanking, False);

	// We need an API to get a favorite list of any user
	if (_User.AccountId == "") {
		{{{P}}}Private_SetZoneFlag(State, "");
		{{{P}}}Private_SetPlayerName(State, "", "", False, False);
		{{{P}}}SetCampaignsRankingVisibility(State, False);
		{{{P}}}ReportContext::SetProfilePlayerAccountId(System, "");
		State.Controls.Label_Error.SetText("");
	} else if (
		!{{{P}}}Privileges::Check_IsComplete(State.PrivilegeCheck.PrivilegeCheck) ||
		(!_User.CanViewGameHistory && !_User.IsFakeUser)
	) {
		declare Boolean CheckIsComplete = {{{P}}}Privileges::Check_IsComplete(State.PrivilegeCheck.PrivilegeCheck);
		{{{LoadingSpinner::P}}}SetIsLoading(This, State.Controls.Spinner_PrivilegeCheck, !CheckIsComplete);
		{{{LoadingSpinner::P}}}SetIsLoading(This, State.Controls.Spinner_PlayerCardEchelon, !CheckIsComplete);
		State.Controls.Label_PrivilegeCheck.Visible = CheckIsComplete;
		State.Controls.Frame_Content.Visible = False;
		State.Controls.Frame_GeneralTab.Visible = False;
		{{{Navigation::P}}}Lock(_State.Controls.Frame_ContentTrophiesRanking, True);
		{{{Navigation::P}}}Lock(State.Controls.Frame_GeneralTabInfoRanking, True);
	
		if (State.PlayerProfile.IsFakeUser) {
			{{{P}}}Private_SetZoneFlag(State, {{{P}}}Bot::GetCountryFlagUrl(_User.Name));
		} else if (_User.Zone.Path == "") {
			{{{P}}}Private_SetZoneFlag(State, "file://ZoneFlags/Path/World");
		} else {
			{{{P}}}Private_SetZoneFlag(State, _User.Zone.CountryFlagUrl);
		}
		{{{P}}}Private_SetPlayerName(State, _User.Name,  _User.ClubTag, _User.IsFirstPartyDisplayName, _User.IsFakeUser);
		{{{P}}}ReportContext::SetProfilePlayerAccountId(System, _User.AccountId);
		{{{P}}}SetCampaignsRankingVisibility(State, False);
	} else {
		if (State.PlayerProfile.IsFakeUser) {
			{{{P}}}Private_SetZoneFlag(State, {{{P}}}Bot::GetCountryFlagUrl(_User.Name));
		} else if (_User.Zone.Path == "") {
			{{{P}}}Private_SetZoneFlag(State, "file://ZoneFlags/Path/World");
		} else {
			{{{P}}}Private_SetZoneFlag(State, _User.Zone.CountryFlagUrl);
		}

		{{{P}}}Private_SetPlayerName(State, _User.Name,  _User.ClubTag, _User.IsFirstPartyDisplayName, _User.IsFakeUser);
		{{{P}}}ReportContext::SetProfilePlayerAccountId(System, _User.AccountId);

		declare Ident[] TaskIds;
		foreach (Task in ParentApp.ScoreMgr.TaskResults) {
			TaskIds.add(Task.Id);
		}
		declare CTaskResult_AccountTrophyLastYearSummary Task;
		if (LocalUser.WebServicesUserId == _User.AccountId) {
			Task = ParentApp.ScoreMgr.Trophy_GetLastYearSummary({{{P}}}MainUser::GetMainUserId());
		} else if (!State.PlayerProfile.IsFakeUser) {
			Task = ParentApp.ScoreMgr.Trophy_GetLastYearSummaryForUser({{{P}}}MainUser::GetMainUserId(), _User.AccountId);
		}

		// ScoreMgr is not available ingame, we have to use ParentApp.ScoreMgr
		// Calling ParentApp.ScoreMgr.Trophy_XXX() will return Null
		// even if the task is created in ParentApp.ScoreMgr.TaskResults
		// Retrieve the task manually from the results array
		if (Task == Null) {
			foreach (TmpTask in ParentApp.ScoreMgr.TaskResults) {
				if (
					!TaskIds.exists(TmpTask.Id) &&
					(TmpTask is CTaskResult_AccountTrophyLastYearSummary)
				) {
					Task <=> (ParentApp.ScoreMgr.TaskResults[TmpTask.Id] as CTaskResult_AccountTrophyLastYearSummary);
				}
			}
		}
		{{{P}}}SetCampaignsRankingVisibility(State, True);
		
		if (Task != Null) {
			State.TaskId_GetAccountLastYearSummary = Task.Id;
		} else if (!State.PlayerProfile.IsFakeUser) {
			State.Controls.Label_TrophiesError.Value = {{{P}}}TL::Compose("{{{Text_ErrorWhileRetrievingTrophies}}}", {{{P}}}C_ErrorCode_CouldNotCreateTask);
			State.TrophiesLoadingError = True;
		}

		if (!State.PlayerProfile.IsFakeUser) {
			State.GetPlayersTrophyRanking = {{{P}}}LeaderboardAPI::GetPlayersTrophyRanking([_User.AccountId]);
			{{{LoadingSpinner::P}}}SetIsLoading(This, State.Controls.Spinner_PlayerCardEchelon, True);
			// Ranked stats
			if (State.Ranked.QueueId == 0) {
				declare {{{UserStore::P}}}K_MatchmakingInfo RankedMatchmakingInfo = {{{UserStore::P}}}GetMatchmakingInfos("{{{MatchmakingStruct::C_Mode_Teams3v3}}}");
				{{{PlayerRank::P}}}SetDivisions(RankedMatchmakingInfo.Divisions);
				State.Ranked.QueueId = RankedMatchmakingInfo.QueueId;
			}
			State.Ranked.GetPlayerStats = {{{P}}}MatchmakingAPI::GetPlayerMatchmakingStatistics(State.Ranked.QueueId, _User.AccountId);
			{{{LoadingSpinner::P}}}SetIsLoading(This, State.Controls.Spinner_Ranked, True);
			// Royal stats
			if (State.Royal.QueueId == 0) {
				declare {{{UserStore::P}}}K_MatchmakingInfo RoyalMatchmakingInfo = {{{UserStore::P}}}GetMatchmakingInfos("{{{MatchmakingStruct::C_Mode_Royal}}}");
				{{{PlayerRoyalVictories::P}}}SetDivisions(This, RoyalMatchmakingInfo.Divisions);
				State.Royal.QueueId = RoyalMatchmakingInfo.QueueId;
			}
			State.Royal.GetPlayerStats = {{{P}}}MatchmakingAPI::GetPlayerMatchmakingStatistics(State.Royal.QueueId, _User.AccountId);
			{{{LoadingSpinner::P}}}SetIsLoading(This, State.Controls.Spinner_Royal, True);
			// Super Royal stats
			State.SuperRoyal.GetPlayerStats = {{{P}}}MatchmakingAPI::GetSuperRoyalStats(_User.AccountId);
		} else {
			State.Ranked.Stats = {{{MatchmakingStruct::P}}}K_PlayerStatistics {};
			{{{P}}}Private_SetRankedStats(State, False);
			State.Royal.Stats = {{{MatchmakingStruct::P}}}K_PlayerStatistics {};
			State.SuperRoyal.Stats = {{{MatchmakingStruct::P}}}K_SuperRoyalStatistics {};
			{{{P}}}Private_SetRoyalStats(State);
		}

		if (
			{{{CampaignStore::P}}}GetMyQuarterlyCampaignsTotal() <= 0 ||
			{{{CampaignStore::P}}}GetMyQuarterlyCampaignsAccountId() != _User.AccountId
		) {
			State.MyQuarterlyCampaignsRankingsPager = {{{P}}}Pager::ForceRangeUpdate(State.MyQuarterlyCampaignsRankingsPager);
		}
		// Unselect the trophy if we are looking to another player
		if (LocalUser.WebServicesUserId != _User.AccountId) {
			State = {{{P}}}Private_SetSelectedTrophy(State, -1);
		}
	}

	{{{P}}}Private_DisplayTrophies(State);
	{{{P}}}Private_UpdateCampaignArrows(State);
	{{{P}}}Private_UpdateTrophiesRankingLoading(State);

	declare CMlControl Focused_Control = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	if ({{{Navigation::P}}}IsLocked(Focused_Control)) {
		{{{P}}}Private_Focus(_State, Focused_Control, _State.Controls.Button_Back);
	}

	Focused_Control = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
	declare Boolean TrophiesListIsFocused = (Focused_Control != Null && Focused_Control == State.Controls.Frame_TrophiesList);
	{{{P}}}Private_FocusTrophiesList(State, TrophiesListIsFocused);
	State = {{{P}}}Private_UpdateSelectedTrophy(State, State.SelectedTrophyKey);

	return State;
}

{{{P}}}K_State {{{P}}}Private_InitProfilePlayerInfo({{{P}}}K_State _State) {
	Page.GetClassChildren("{{{C_Name}}}", Page.MainFrame, True);
	assert(Page.GetClassChildren_Result.count <= 1, "You can only include one instance of the ProfilePlayerInfo component in a page");

	declare {{{P}}}K_State State = _State;

	State.IsPlayerProfileUpdated = True;
	State.MyQuarterlyCampaignsRankingsPager = {{{P}}}Pager::Create(1, 3, 1, 1000, False);

	State.TrophiesRankingsPager = {{{P}}}K_TrophiesRankingsPager {
		TrophiesRankings = [],
		CurrentPage = 0,
		MaxPage = 0
	};

	foreach (Key => Control in State.Controls.Frame_TrophiesList.Controls) {
		declare CMlQuad Quad_TrophyIcon <=> ((Control as CMlFrame).GetFirstChild("{{{P}}}quad-trophy-icon") as CMlQuad);
		Quad_TrophyIcon.ImageUrl = {{{P}}}Private_GetTrophyImage(State.Controls.Frame_TrophiesList.Controls.count - Key);
	}

	declare Boolean GarageButtonEnabled = True;
	if (State.Controls.Frame_Global.Parent.DataAttributeExists("enable-garage")) {
		GarageButtonEnabled = {{{P}}}Tools::TextToBoolean(State.Controls.Frame_Global.Parent.DataAttributeGet("enable-garage"));
	}
	State.GarageButtonEnabled = GarageButtonEnabled;

	State = {{{P}}}Private_Enable(State, False);
	State = {{{P}}}Private_SetUser(State, {{{P}}}K_PlayerProfile {}, False, False);

	declare Boolean PlayersPagerEnabled = True;
	if (State.Controls.Frame_Global.Parent.DataAttributeExists("enable-players-pager")) {
		PlayersPagerEnabled = {{{P}}}Tools::TextToBoolean(State.Controls.Frame_Global.Parent.DataAttributeGet("enable-players-pager"));
	}
	State = {{{P}}}Private_EnablePlayersPager(State, PlayersPagerEnabled);

	declare Boolean ZoneSelectionEnabled = True;
	if (State.Controls.Frame_Global.Parent.DataAttributeExists("enable-zone-selection")) {
		ZoneSelectionEnabled = {{{P}}}Tools::TextToBoolean(State.Controls.Frame_Global.Parent.DataAttributeGet("enable-zone-selection"));
	}
	State = {{{P}}}Private_EnableZoneSelection(State, ZoneSelectionEnabled);
	State = {{{P}}}Private_UpdateTabDisplayed(State, {{{P}}}C_TabDisplayed_General);

	declare Boolean MyAccessButtonEnabled = True;
	if (State.Controls.Frame_Global.Parent.DataAttributeExists("enable-my-access-info")) {
		MyAccessButtonEnabled = {{{P}}}Tools::TextToBoolean(State.Controls.Frame_Global.Parent.DataAttributeGet("enable-my-access-info"));
	}
	State = {{{P}}}Private_EnableMyAccessButton(State, MyAccessButtonEnabled);

	{{{P}}}Private_UpdateTopTrophyCount(State, []);
	{{{P}}}Private_UpdateMyQuarterlyCampaignsRankings({{{P}}}G_State, [], [], {{{P}}}Pager::GetIndex({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager));

	State.NextPrevPlayerCooldown = -1;
	State = {{{P}}}Private_SetFocusedTrophy(State, State.Controls.Frame_TrophiesList.Controls.count - 1);
	State = {{{P}}}Private_SetSelectedTrophy(State, -1);

	State = {{{P}}}Private_EnableFirstPartyProfileButton(State, State.PlayerProfile.IsFirstPartyDisplayName);
	State = {{{P}}}Private_EnableUbisoftConnectProfileButton(State);
	{{{P}}}AdaptFooterButtonsPositions(State);

	State.MatchId = "";
	State.MatchmakingId = "";

	return State;
}

{{{P}}}K_State {{{P}}}Private_Select({{{P}}}K_State _State, CMlControl _Control) {
	if (_Control == Null) return _State;
	
	declare {{{P}}}K_State State = _State;

	switch (_Control.ControlId) {
		case "{{{P}}}button-back": {
			{{{P}}}Private_SendCloseEvent(State);
			State = {{{P}}}Private_SetUser(State, {{{P}}}K_PlayerProfile {}, False, True);
		}
		case "{{{P}}}button-my-access": {
			if (State.MyAccessButtonEnabled) {
				{{{P}}}Private_SendMyAccessInfoEvent(State);
			}
		}
		case "{{{P}}}button-garage": {
			if (State.GarageButtonEnabled) {
				{{{P}}}Private_SendGarageEvent(State);
			}
		}
		case "{{{P}}}button-first-party-profile": {
			UserMgr.Profile_ShowFirstPartyProfile({{{P}}}MainUser::GetMainUserId(), State.PlayerProfile.AccountId);
		}
		case "{{{P}}}button-ubisoft-connect-profile": {
			UserMgr.Profile_ShowUbisoftConnectProfile({{{P}}}MainUser::GetMainUserId(), State.PlayerProfile.AccountId);
		}
		case "{{{P}}}button-report": {
			State = {{{P}}}Private_Enable(State, False);
			if (This is CMlScriptIngame) {
				declare {{{P}}}ReportStruct::LibStructuresReport_K_ReportData[Integer] Data = 					
				[
					{{{P}}}ReportStruct::C_ReportTarget_PlayerName => {{{P}}}ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.Name],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "InGame Profile"]]
					}
				];
				if (State.PlayerProfile.CarSkin.FileUrl != "") {
					Data[{{{P}}}ReportStruct::C_ReportTarget_Skin] = {{{P}}}ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.Name],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "InGame Profile"]]
					};
				}
				if (!State.PlayerProfile.IsGhost) {
					if (State.MatchId != "") {
						Data[{{{P}}}ReportStruct::C_ReportTarget_Player] = {{{P}}}ReportStruct::LibStructuresReport_K_ReportData {
							Details = [State.PlayerProfile.Name],
							Ids = [State.PlayerProfile.AccountId],
							Contexts = [["From" => "InGame Profile", "MatchmakingId" => State.MatchmakingId, "MatchId" => State.MatchId, "ServerChatLog" => ParentApp.ManiaPlanet.ServerChatLog]]
						};
					} else {
						Data[{{{P}}}ReportStruct::C_ReportTarget_Player] = {{{P}}}ReportStruct::LibStructuresReport_K_ReportData {
							Details = [State.PlayerProfile.Name],
							Ids = [State.PlayerProfile.AccountId],
							Contexts = [["From" => "InGame Profile", "ServerChatLog" => ParentApp.ManiaPlanet.ServerChatLog]]
						};
					}
				}
				if (State.PlayerProfile.RecordData.Id != "") {
					Data[{{{P}}}ReportStruct::C_ReportTarget_Record] = {{{P}}}ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.RecordData.Detail],
						Ids = [State.PlayerProfile.RecordData.Id],
						Contexts = [["From" => "InGame Profile"]]
					};
				}
				if (State.PlayerProfile.ClubTag != "") {
					Data[{{{P}}}ReportStruct::C_ReportTarget_ClubTag] = {{{P}}}ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.ClubTag],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "InGame Profile"]]
					};
				}
				{{{PopUpReportSystem::P}}}SetReportTargetsData(This, State.Controls.Frame_ReportSystem, Data);
				{{{PopUpReportSystem::P}}}Display(This, State.Controls.Frame_ReportSystem, True);
			} else {
				declare {{{P}}}ReportStruct::LibStructuresReport_K_ReportData[Integer] Data = 					
				[
					{{{P}}}ReportStruct::C_ReportTarget_PlayerName => {{{P}}}ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.Name],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "Menu Profile"]]
					}
				];
				if (State.PlayerProfile.CarSkin.FileUrl != "") {
					Data[{{{P}}}ReportStruct::C_ReportTarget_Skin] = {{{P}}}ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.Name],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "Menu Profile"]]
					};
				}
				if (State.PlayerProfile.ClubTag != "") {
					Data[{{{P}}}ReportStruct::C_ReportTarget_ClubTag] = {{{P}}}ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.ClubTag],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "Menu Profile"]]
					};
				}
				{{{P}}}ReportSystem::Show(Data);
			}
		}
		case "{{{P}}}button-prev-player": {
			if (State.PlayersPagerEnabled && (State.NextPrevPlayerCooldown < 0 || Now >= State.NextPrevPlayerCooldown)) {
				{{{P}}}Private_SendPrevPlayerEvent(State);
				State.NextPrevPlayerCooldown = Now + {{{P}}}C_DelayBetweenPagerRequest;
			}
		}
		case "{{{P}}}button-next-player": {
			if (State.PlayersPagerEnabled && (State.NextPrevPlayerCooldown < 0 || Now >= State.NextPrevPlayerCooldown)) {
				{{{P}}}Private_SendNextPlayerEvent(State);
				State.NextPrevPlayerCooldown = Now + {{{P}}}C_DelayBetweenPagerRequest;
			}
		}
		case "{{{P}}}button-update-zone": {
			if (State.ZoneSelectionEnabled) {
				{{{P}}}Private_SendEditPlayerEvent(State);
			}
		}
		case "{{{P}}}button-prev-zone", "{{{P}}}button-general-trophies-previous-zone": {
			State = {{{P}}}Private_SetTrophiesRankingsPage(State, State.TrophiesRankingsPager.CurrentPage - 1, False);
			{{{P}}}Private_TTSContextUpdate(State, _Control);
		}
		case "{{{P}}}button-next-zone", "{{{P}}}button-general-trophies-next-zone": {
			State = {{{P}}}Private_SetTrophiesRankingsPage(State, State.TrophiesRankingsPager.CurrentPage + 1, False);
			{{{P}}}Private_TTSContextUpdate(State, _Control);
		}
		case "{{{P}}}button-previous-campaign": {
			State.IsTTSContextUpdateNeeded = True;
			State.MyQuarterlyCampaignsRankingsPager = {{{P}}}Pager::GoToNextPage(State.MyQuarterlyCampaignsRankingsPager);
			{{{P}}}Private_PlayPagerAnim(State.Controls.Frame_PreviousCampaign);
		}
		case "{{{P}}}button-next-campaign": {
			State.IsTTSContextUpdateNeeded = True;
			State.MyQuarterlyCampaignsRankingsPager = {{{P}}}Pager::GoToPreviousPage(State.MyQuarterlyCampaignsRankingsPager);
			{{{P}}}Private_PlayPagerAnim(State.Controls.Frame_NextCampaign);
		}
		case "{{{P}}}frame-trophies-list": {
			State = {{{P}}}Private_SetSelectedTrophy(State, State.FocusedTrophyKey);
		}
	}

	if (_Control.HasClass("{{{P}}}button-trophy")) {
		State = {{{P}}}Private_SetSelectedTrophy(State, {{{P}}}TL::ToInteger(_Control.DataAttributeGet("trophy-key")));
	}

	return State;
}

// Enable or disable the player profile
// The primary effect is to enable or
// disable the navigation inside the component
Void {{{P}}}Enable(Boolean _Enabled) {
	{{{P}}}G_State = {{{P}}}Private_Enable({{{P}}}G_State, _Enabled);
}

Boolean {{{P}}}IsEnabled() {
	return {{{P}}}G_State.Enabled;
}

// Set the user to display in the profile
Void {{{P}}}SetUser(CUser _User) {
	if (_User == Null) {
		{{{P}}}G_State = {{{P}}}Private_SetUser({{{P}}}G_State, {{{P}}}K_PlayerProfile {}, False, False);
	} else {
		declare Text ZoneName = "";
		declare Text[] Zones = {{{P}}}TL::Split("|", _User.ZonePath);
		if (Zones.count > 0) ZoneName = Zones[Zones.count-1];

		{{{P}}}G_State = {{{P}}}Private_SetUser({{{P}}}G_State, {{{P}}}K_PlayerProfile {
			SuccessfulTaskNumber = 0,
			UserId = _User.Id,
			Name = _User.Name,
			ClubTag = _User.ClubTag,
			IsFirstPartyDisplayName = _User.IsFirstPartyDisplayName,
			AccountId = _User.WebServicesUserId,
			IsFakeUser = (_User.IsFakeUser || {{{P}}}TL::StartsWith("*fake", _User.Login)), //@HACK to detect fake user until Falguiere fix the bug
			CarSkin = {{{ClubStruct::P}}}K_Skin {
				Name = _User.Model_CarSport_SkinName,
				FileUrl = _User.Model_CarSport_SkinUrl,
				PrestigeOptions = _User.Prestige_SkinOptions
			},
			PilotSkin = {{{ClubStruct::P}}}K_Skin {
				Name = _User.Model_CharacterPilot_SkinName,
				FileUrl = _User.Model_CharacterPilot_SkinUrl,
				CharacterOptions = _User.Character_SkinOptions
			},
			SkinLightColor = _User.Color,
			Zone = {{{P}}}K_Zone {
				Name = ZoneName,
				Path = _User.ZonePath,
				FlagUrl = _User.ZoneFlagUrl,
				CountryFlagUrl = _User.CountryFlagUrl
			},
			CanViewGameHistory = LocalUser != Null && _User.WebServicesUserId == LocalUser.WebServicesUserId,
			IsReportable = _User.WebServicesUserId != "" && _User.WebServicesUserId != LocalUser.WebServicesUserId && !{{{P}}}TL::StartsWith("*splitscreen", _User.Login) && !_User.IsFakeUser && !{{{P}}}TL::StartsWith("*fake", _User.Login), //@HACK to detect fake user until Falguiere fix the bug
			RecordData = {{{P}}}K_Record {
				Detail = "",
				Id = ""
			},
			IsGhost = False
		}, True, False);
	}
}

// Set the accountid of the user to display in the profile
Void {{{P}}}SetUserAccountId(Text _AccountId) {
	if (_AccountId == LocalUser.WebServicesUserId) {
		{{{P}}}G_State.IsPlayerProfileUpdated = True;
		{{{P}}}SetUser(LocalUser);
	} else {
		{{{P}}}G_State.IsPlayerProfileUpdated = False;
		{{{P}}}G_State.Task_GetClubTagList = {{{P}}}Task::DestroyAndCreate({{{P}}}G_State.Task_GetClubTagList, UserMgr, UserMgr.Tag_GetClubTagList({{{P}}}MainUser::GetMainUserId(), [_AccountId]));
		{{{P}}}G_State.Task_GetPrestigeSkin = {{{P}}}Task::DestroyAndCreate({{{P}}}G_State.Task_GetPrestigeSkin, UserMgr, UserMgr.Prestige_GetCurrentAccountPrestigeForUser({{{P}}}MainUser::GetMainUserId(), _AccountId));
		{{{P}}}G_State.Task_GetSkinList = {{{P}}}Task::DestroyAndCreate({{{P}}}G_State.Task_GetSkinList, DataFileMgr, DataFileMgr.AccountSkin_NadeoServices_GetListForUser({{{P}}}MainUser::GetMainUserId(), _AccountId));
		{{{P}}}G_State.Task_RetrieveDisplayName = {{{P}}}Task::DestroyAndCreate({{{P}}}G_State.Task_RetrieveDisplayName, UserMgr, UserMgr.RetrieveDisplayName({{{P}}}MainUser::GetMainUserId(), [_AccountId]));
		{{{P}}}G_State.Task_RetrieveUserZoneList = {{{P}}}Task::DestroyAndCreate({{{P}}}G_State.Task_RetrieveUserZoneList, ZoneMgr, ZoneMgr.RetrieveUserZoneList({{{P}}}MainUser::GetMainUserId(), [_AccountId]));
		{{{P}}}G_State.PlayerProfile = {{{P}}}K_PlayerProfile {
			UserId = NullId,
			AccountId = _AccountId,
			CanViewGameHistory = False,
			IsReportable = _AccountId != "" && _AccountId != LocalUser.WebServicesUserId,
			RecordData = {{{P}}}K_Record {
				Detail = "",
				Id = ""
			},
			IsGhost = False
		};
	}
}

// Set the record of the user to display in the profile (for the report system)
Void {{{P}}}SetUserRecord(Text _RecordDetail, Text _RecordId) {
	{{{P}}}G_State.PlayerProfile.RecordData.Detail = _RecordDetail;
	{{{P}}}G_State.PlayerProfile.RecordData.Id = _RecordId;
}

// Set the match id (Ranked or Royal) for the context of the report system
Void {{{P}}}SetMatchAndMatchmakingId(Text _MatchId, Text _MatchmakingId) {
	{{{P}}}G_State.MatchId = _MatchId;
	{{{P}}}G_State.MatchmakingId = _MatchmakingId;
}

// Set if the user is a ghost (for the report system)
Void {{{P}}}SetUserIsGhost(Boolean _IsGhost) {
	{{{P}}}G_State.PlayerProfile.IsGhost = _IsGhost;
}

// Display or hide the my access button
Void {{{P}}}EnableMyAccessButton(Boolean _Enabled) {
	{{{P}}}G_State = {{{P}}}Private_EnableMyAccessButton({{{P}}}G_State, _Enabled);
}

// Display or hide the garage button
Void {{{P}}}EnableGarageButton(Boolean _Enabled) {
	{{{P}}}G_State = {{{P}}}Private_EnableGarageButton({{{P}}}G_State, _Enabled);
}

// Display or hide the players pager
Void {{{P}}}EnablePlayersPager(Boolean _Enabled) {
	{{{P}}}G_State = {{{P}}}Private_EnablePlayersPager({{{P}}}G_State, _Enabled);
}

// Display or hide the zone selection button
Void {{{P}}}EnableZoneSelection(Boolean _Enabled) {
	{{{P}}}G_State = {{{P}}}Private_EnableZoneSelection({{{P}}}G_State, _Enabled);
}

// Use navigation events from the manialink
Void {{{P}}}UseLocalEvents(Boolean _UseLocalEvents) {
	{{{Scroll::P}}}UseLocalEvents(This, _UseLocalEvents);
	{{{Navigation::P}}}UseLocalEvents(This, _UseLocalEvents);
}

// Control the visibility of the background
Void {{{P}}}SetBackgroundVisibility(Boolean _Visible) {
	{{{P}}}G_State.Controls.Quad_Background.Visible = _Visible;
}

***MainInit***
***
declare CMlFrame {{{P}}}Frame_Title;
declare CMlFrame {{{P}}}Frame_PlayerCard;
declare CMlFrame {{{P}}}Frame_World;
declare Boolean {{{P}}}ButtonIconPrevPlayerIsVisible;
declare Boolean {{{P}}}ButtonIconNextPlayerIsVisible;
declare CMlControl {{{P}}}LastBottomButtonFocused;
***

***MainStart***
***
{{{P}}}G_State.Controls.Frame_Global <=> (Page.GetFirstChild("{{{P}}}frame-global") as CMlFrame);
{{{P}}}Frame_Title <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-title") as CMlFrame);
{{{P}}}Frame_PlayerCard <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-player-card") as CMlFrame);
{{{P}}}Frame_World <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-world") as CMlFrame);
{{{P}}}G_State.Controls.Button_MyAccess <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}button-my-access") as CMlFrame);
{{{P}}}G_State.Controls.Button_UpdateZone <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}button-update-zone") as CMlFrame);
{{{P}}}G_State.Controls.Quad_PlayerCardFlag <=> ({{{P}}}Frame_PlayerCard.GetFirstChild("{{{P}}}quad-player-card-flag") as CMlQuad);
{{{P}}}G_State.Controls.PlayerName_PlayerCardName <=> ({{{P}}}Frame_PlayerCard.GetFirstChild("{{{P}}}playername-player-card-name") as CMlFrame);
{{{P}}}G_State.Controls.Button_PrevPlayer <=> ({{{P}}}Frame_PlayerCard.GetFirstChild("{{{P}}}button-prev-player") as CMlFrame);
{{{P}}}G_State.Controls.Button_NextPlayer <=> ({{{P}}}Frame_PlayerCard.GetFirstChild("{{{P}}}button-next-player") as CMlFrame);
{{{P}}}G_State.Controls.ButtonIcon_PrevPlayer <=> ({{{P}}}Frame_PlayerCard.GetFirstChild("{{{P}}}button-icon-prev-player") as CMlFrame);
{{{P}}}G_State.Controls.ButtonIcon_NextPlayer <=> ({{{P}}}Frame_PlayerCard.GetFirstChild("{{{P}}}button-icon-next-player") as CMlFrame);
{{{P}}}G_State.Controls.Frame_Trophies <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-trophies") as CMlFrame);
{{{P}}}G_State.Controls.Quad_BestTrophy <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}quad-best-trophy") as CMlQuad);
{{{P}}}G_State.Controls.Label_TrophiesError <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}label-trophies-error") as CMlLabel);
{{{P}}}G_State.Controls.Frame_TrophiesLoaded <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}frame-trophies-loaded") as CMlFrame);
{{{P}}}G_State.Controls.Spinner_Trophies <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}spinner-trophies") as CMlFrame);
{{{P}}}G_State.Controls.Frame_TrophiesList <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}frame-trophies-list") as CMlFrame);
{{{P}}}G_State.Controls.Label_DisplayHistory <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}label-display-history") as CMlLabel);
{{{P}}}G_State.Controls.Label_TrophiesGlobalRankingPosition <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}label-trophies-global-ranking-position") as CMlLabel);
{{{P}}}G_State.Controls.Label_TrophiesGlobalRankingZone <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}label-trophies-global-ranking-zone") as CMlLabel);
{{{P}}}G_State.Controls.Label_TrophiesPoints <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}label-trophies-points") as CMlLabel);
{{{P}}}G_State.Controls.Label_TrophiesPointsText <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}label-trophies-points-text") as CMlLabel);
{{{P}}}G_State.Controls.Frame_TrophiesHistory <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}frame-trophies-history") as CMlFrame);
{{{P}}}G_State.Controls.Label_TrophyHistory <=> ({{{P}}}G_State.Controls.Frame_TrophiesHistory.GetFirstChild("{{{P}}}label-trophy-history") as CMlLabel);
{{{P}}}G_State.Controls.Spinner_TrophiesHistory <=> ({{{P}}}G_State.Controls.Frame_TrophiesHistory.GetFirstChild("{{{P}}}spinner-trophies-history") as CMlFrame);
{{{P}}}G_State.Controls.Scroll_TrophiesHistory <=> ({{{P}}}G_State.Controls.Frame_TrophiesHistory.GetFirstChild("{{{P}}}scroll-trophies-history") as CMlFrame);
{{{P}}}G_State.Controls.Button_PrevZone <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}button-prev-zone") as CMlFrame);
{{{P}}}G_State.Controls.Button_NextZone <=> ({{{P}}}G_State.Controls.Frame_Trophies.GetFirstChild("{{{P}}}button-next-zone") as CMlFrame);
{{{P}}}G_State.Controls.Frame_MainProfile <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-main-profile") as CMlFrame);
{{{P}}}G_State.Controls.Label_TrophyTopRank <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}label-ranking-position") as CMlLabel);
{{{P}}}G_State.Controls.Label_TrophyTopRankZone <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}label-ranking-category") as CMlLabel);
{{{P}}}G_State.Controls.Quad_TopTrophy <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}quad-highest-trophy") as CMlQuad);
{{{P}}}G_State.Controls.Label_TopTrophyCount <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}label-trophy-number") as CMlLabel);
{{{P}}}G_State.Controls.Label_TopCampaignName <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}label-campaign-name") as CMlLabel);
{{{P}}}G_State.Controls.Label_TopText <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}label-campaign-ranking-top") as CMlLabel);
{{{P}}}G_State.Controls.Label_TopCampaignRank <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}label-campaign-ranking-position") as CMlLabel);
{{{P}}}G_State.Controls.Label_TopCampaignZone <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}label-campaign-ranking-zone") as CMlLabel);
{{{P}}}G_State.Controls.Frame_InfoRankingLoaded <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}frame-info-ranking-loaded") as CMlFrame);
{{{P}}}G_State.Controls.Spinner_Ranking <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}spinner-ranking") as CMlFrame);
{{{P}}}G_State.Controls.Spinner_Ranked <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}spinner-ranked") as CMlFrame);
{{{P}}}G_State.Controls.Spinner_Royal <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}spinner-royal") as CMlFrame);
{{{P}}}G_State.Controls.Spinner_Campaign <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}spinner-campaign") as CMlFrame);
{{{P}}}G_State.Controls.Frame_MyQuarterlyCampaignsRankings <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-info-campaign-ranking") as CMlFrame);
{{{P}}}G_State.Controls.Frame_PreviousCampaign <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}button-previous-campaign") as CMlFrame);
{{{P}}}G_State.Controls.Frame_NextCampaign <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}button-next-campaign") as CMlFrame);
{{{P}}}G_State.Controls.Button_GeneralTrophiesPreviousZone <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}button-general-trophies-previous-zone") as CMlFrame);
{{{P}}}G_State.Controls.Button_GeneralTrophiesNextZone <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}button-general-trophies-next-zone") as CMlFrame);
{{{P}}}G_State.Controls.Button_Back <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}button-back") as CMlFrame);
{{{P}}}G_State.Controls.Frame_CurrentSkin <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-current-skin") as CMlFrame);
{{{P}}}G_State.Controls.Quad_Lights <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}quad-lights") as CMlQuad);
{{{P}}}G_State.Controls.Quad_PlayerCardEchelon <=> ({{{P}}}Frame_PlayerCard.GetFirstChild("{{{P}}}quad-player-card-echelon") as CMlQuad);
{{{P}}}G_State.Controls.Label_PlayerCardEchelon <=> ({{{P}}}Frame_PlayerCard.GetFirstChild("{{{P}}}label-player-card-echelon") as CMlLabel);
{{{P}}}G_State.Controls.Spinner_PlayerCardEchelon <=> ({{{P}}}Frame_PlayerCard.GetFirstChild("{{{P}}}spinner-player-card-echelon") as CMlFrame);
{{{P}}}G_State.Controls.Button_Garage <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}button-garage") as CMlFrame);
{{{P}}}G_State.Controls.Button_FirstPartyProfile <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}button-first-party-profile") as CMlFrame);
{{{P}}}G_State.Controls.Button_UbisoftConnectProfile <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}button-ubisoft-connect-profile") as CMlFrame);
{{{P}}}G_State.Controls.Button_Report  <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}button-report") as CMlFrame);
{{{P}}}G_State.Controls.Frame_PlayerBestRank <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}frame-best-rank") as CMlFrame);
{{{P}}}G_State.Controls.Label_BestRank <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}label-best-rank") as CMlLabel);
{{{P}}}G_State.Controls.Label_BestRankDate <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}label-best-rank-date") as CMlLabel);
{{{P}}}G_State.Controls.Frame_RankedStats <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-ranked-stats") as CMlFrame);
{{{P}}}G_State.Controls.Frame_RankedCurrentSeason <=> ({{{P}}}G_State.Controls.Frame_RankedStats.GetFirstChild("{{{P}}}frame-current-season") as CMlFrame);
{{{P}}}G_State.Controls.Frame_PlayerCurrentSeason <=> ({{{P}}}G_State.Controls.Frame_RankedCurrentSeason.GetFirstChild("{{{P}}}frame-rank") as CMlFrame);
{{{P}}}G_State.Controls.Label_CurrentSeason <=> ({{{P}}}G_State.Controls.Frame_RankedCurrentSeason.GetFirstChild("{{{P}}}label-rank") as CMlLabel);
{{{P}}}G_State.Controls.Label_CurrentSeasonDate <=> ({{{P}}}G_State.Controls.Frame_RankedCurrentSeason.GetFirstChild("{{{P}}}label-rank-date") as CMlLabel);
{{{P}}}G_State.Controls.Frame_RankedPreviousSeason <=> ({{{P}}}G_State.Controls.Frame_RankedStats.GetFirstChild("{{{P}}}frame-previous-season") as CMlFrame);
{{{P}}}G_State.Controls.Frame_PlayerPreviousSeason <=> ({{{P}}}G_State.Controls.Frame_RankedPreviousSeason.GetFirstChild("{{{P}}}frame-rank") as CMlFrame);
{{{P}}}G_State.Controls.Label_PreviousSeason <=> ({{{P}}}G_State.Controls.Frame_RankedPreviousSeason.GetFirstChild("{{{P}}}label-rank") as CMlLabel);
{{{P}}}G_State.Controls.Label_PreviousSeasonDate <=> ({{{P}}}G_State.Controls.Frame_RankedPreviousSeason.GetFirstChild("{{{P}}}label-rank-date") as CMlLabel);
{{{P}}}G_State.Controls.Label_PreviousRankedError <=> ({{{P}}}G_State.Controls.Frame_RankedPreviousSeason.GetFirstChild("{{{P}}}label-ranked-error") as CMlLabel);
{{{P}}}G_State.Controls.Frame_RankedBestSeason <=> ({{{P}}}G_State.Controls.Frame_RankedStats.GetFirstChild("{{{P}}}frame-best-season") as CMlFrame);
{{{P}}}G_State.Controls.Frame_PlayerBestSeason <=> ({{{P}}}G_State.Controls.Frame_RankedBestSeason.GetFirstChild("{{{P}}}frame-rank") as CMlFrame);
{{{P}}}G_State.Controls.Label_BestSeason <=> ({{{P}}}G_State.Controls.Frame_RankedBestSeason.GetFirstChild("{{{P}}}label-rank") as CMlLabel);
{{{P}}}G_State.Controls.Label_BestSeasonDate <=> ({{{P}}}G_State.Controls.Frame_RankedBestSeason.GetFirstChild("{{{P}}}label-rank-date") as CMlLabel);
{{{P}}}G_State.Controls.Label_BestRankedError <=> ({{{P}}}G_State.Controls.Frame_RankedBestSeason.GetFirstChild("{{{P}}}label-ranked-error") as CMlLabel);
{{{P}}}G_State.Controls.Frame_PublicData <=> ({{{P}}}G_State.Controls.Frame_RankedStats.GetFirstChild("{{{P}}}frame-public-data") as CMlFrame);
{{{P}}}G_State.Controls.Frame_SensibleData <=> ({{{P}}}G_State.Controls.Frame_RankedStats.GetFirstChild("{{{P}}}frame-sensible-data") as CMlFrame);
{{{P}}}G_State.Controls.Label_MatchesCount <=> ({{{P}}}G_State.Controls.Frame_RankedStats.GetFirstChild("{{{P}}}label-matches-count") as CMlLabel);
{{{P}}}G_State.Controls.Label_WinRate <=> ({{{P}}}G_State.Controls.Frame_RankedStats.GetFirstChild("{{{P}}}label-percentage") as CMlLabel);
{{{P}}}G_State.Controls.Label_MVPCount <=> ({{{P}}}G_State.Controls.Frame_RankedStats.GetFirstChild("{{{P}}}label-mvp-count") as CMlLabel);
{{{P}}}G_State.Controls.Frame_MainRoyalLevel <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}frame-royal-level") as CMlFrame);
{{{P}}}G_State.Controls.Label_MainRoyalLevel <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}label-royal-level") as CMlLabel);
{{{P}}}G_State.Controls.Label_RoyalVictories <=> ({{{P}}}G_State.Controls.Frame_MainProfile.GetFirstChild("{{{P}}}label-royal-victories") as CMlLabel);
{{{P}}}G_State.Controls.Frame_RoyalStats <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-royal-stats") as CMlFrame);
{{{P}}}G_State.Controls.Frame_RoyalLevel <=> ({{{P}}}G_State.Controls.Frame_RoyalStats.GetFirstChild("{{{P}}}frame-royal-level") as CMlFrame);
{{{P}}}G_State.Controls.Label_RoyalVictories <=> ({{{P}}}G_State.Controls.Frame_RoyalStats.GetFirstChild("{{{P}}}label-royal-victories") as CMlLabel);
{{{P}}}G_State.Controls.Quad_SuperRoyalLogo <=> ({{{P}}}G_State.Controls.Frame_RoyalStats.GetFirstChild("{{{P}}}quad-super-royal-logo") as CMlQuad);
{{{P}}}G_State.Controls.Label_SuperRoyalVictories <=> ({{{P}}}G_State.Controls.Frame_RoyalStats.GetFirstChild("{{{P}}}label-super-royal-victories") as CMlLabel);
{{{P}}}G_State.Controls.Label_BronzeVictories <=> ({{{P}}}G_State.Controls.Frame_RoyalStats.GetFirstChild("{{{P}}}label-bronze-victories") as CMlLabel);
{{{P}}}G_State.Controls.Label_SilverVictories <=> ({{{P}}}G_State.Controls.Frame_RoyalStats.GetFirstChild("{{{P}}}label-silver-victories") as CMlLabel);
{{{P}}}G_State.Controls.Label_GoldVictories <=> ({{{P}}}G_State.Controls.Frame_RoyalStats.GetFirstChild("{{{P}}}label-gold-victories") as CMlLabel);
{{{P}}}G_State.Controls.Label_MasterVictories <=> ({{{P}}}G_State.Controls.Frame_RoyalStats.GetFirstChild("{{{P}}}label-master-victories") as CMlLabel);
{{{P}}}G_State.Controls.Frame_ButtonList <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-button-list-profile") as CMlFrame);
{{{P}}}G_State.Controls.Label_Error <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}label-error") as CMlLabel);
{{{P}}}G_State.Controls.NavigationTabs_Categories <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}navigationtabs-categories") as CMlFrame);
{{{P}}}G_State.Controls.Quad_Background <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}quad-background") as CMlQuad);
{{{P}}}G_State.Controls.Frame_Content <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-content") as CMlFrame);
{{{P}}}G_State.Controls.Frame_ContentTrophiesRanking <=> ({{{P}}}G_State.Controls.Frame_Content.GetFirstChild("{{{P}}}frame-trophies-ranking") as CMlFrame);
{{{P}}}G_State.Controls.Frame_GeneralTab <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-general-tab") as CMlFrame);
{{{P}}}G_State.Controls.Frame_GeneralTabInfoRanking <=> ({{{P}}}G_State.Controls.Frame_GeneralTab.GetFirstChild("{{{P}}}frame-info-ranking") as CMlFrame);
{{{P}}}G_State.Controls.Spinner_PrivilegeCheck <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}spinner-privilege-check") as CMlFrame);
{{{P}}}G_State.Controls.Label_PrivilegeCheck <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}label-privilege-check") as CMlLabel);
{{{P}}}G_State.Controls.Frame_ReportSystem <=> ({{{P}}}G_State.Controls.Frame_Global.GetFirstChild("{{{P}}}frame-report-system") as CMlFrame);

{{{P}}}PendingEvents = [];

{{{P}}}ButtonIconPrevPlayerIsVisible = {{{ButtonIcon::P}}}IsVisible({{{P}}}G_State.Controls.ButtonIcon_PrevPlayer);
{{{P}}}ButtonIconNextPlayerIsVisible = {{{ButtonIcon::P}}}IsVisible({{{P}}}G_State.Controls.ButtonIcon_NextPlayer);
{{{P}}}Private_UpdatePlayersPagerVisibility({{{P}}}G_State);

{{{P}}}LastBottomButtonFocused = {{{P}}}G_State.Controls.Button_Back;
{{{MenuButtonList::P}}}SetButtons({{{P}}}G_State.Controls.Frame_ButtonList, []);
{{{P}}}ControllerInfo::SetButtons([]);
{{{Navigation::P}}}Focus(This, {{{P}}}G_State.Controls.Frame_Global);
{{{P}}}G_State = {{{P}}}Private_InitProfilePlayerInfo({{{P}}}G_State);
***

***MainLoop***
***
{{{P}}}PendingEvents = [];

if ({{{P}}}G_State.Enabled) {
	if (
		{{{P}}}G_State.Scene.SceneId != NullId &&
		{{{P}}}MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)
	) {
		{{{P}}}G_State = {{{P}}}Private_Display3DScene({{{P}}}G_State, False);
		{{{P}}}G_State = {{{P}}}Private_Display3DScene({{{P}}}G_State, True);
	}

	if ({{{P}}}Frame_World.Visible) {
		{{{P}}}Frame_World.RelativePosition_V3.X = {{{P}}}TiL::Clamp01UTCDay({{{P}}}TiL::GetCurrent())*320.;
	}

	// Update pager and check if the range changed
	{{{P}}}G_State.MyQuarterlyCampaignsRankingsPager = {{{P}}}Pager::Update({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager);
	if ({{{P}}}Pager::RangeUpdated({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager)) {
		{{{P}}}G_State.MyQuarterlyCampaignsRankingsPager = {{{P}}}Pager::ProcessRangeUpdate({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager);
		// Ask the store to load the new range of campaigns rankings
		{{{CampaignStore::P}}}Action_LoadMyQuarterlyCampaignsRankings(
			This,
			{{{P}}}G_State.PlayerProfile.AccountId,
			{{{P}}}Pager::GetRangeOffset({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager),
			{{{P}}}Pager::GetRangeLength({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager)
		);
	}
	if ({{{P}}}Pager::PageUpdated({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager)) {
		{{{P}}}G_State.MyQuarterlyCampaignsRankingsPager = {{{P}}}Pager::ProcessPageUpdate({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager);
		{{{P}}}Private_UpdateMyQuarterlyCampaignsRankings(
			{{{P}}}G_State,
			{{{CampaignStore::P}}}GetMyQuarterlyCampaignsRankings(),
			{{{CampaignStore::P}}}GetMyQuarterlyCampaignsNames(),
			{{{P}}}Pager::GetIndex({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager)
		);
		{{{P}}}Private_UpdateCampaignArrows({{{P}}}G_State);
		if ({{{P}}}G_State.IsTTSContextUpdateNeeded) {
			{{{P}}}G_State.IsTTSContextUpdateNeeded = False;
			{{{P}}}Private_TTSContextUpdate({{{P}}}G_State, {{{P}}}G_State.Controls.Frame_MyQuarterlyCampaignsRankings);
		}
	}

	if (
		{{{P}}}ButtonIconPrevPlayerIsVisible != {{{ButtonIcon::P}}}IsVisible({{{P}}}G_State.Controls.ButtonIcon_PrevPlayer) ||
		{{{P}}}ButtonIconNextPlayerIsVisible != {{{ButtonIcon::P}}}IsVisible({{{P}}}G_State.Controls.ButtonIcon_NextPlayer)
	) {
		{{{P}}}ButtonIconPrevPlayerIsVisible = {{{ButtonIcon::P}}}IsVisible({{{P}}}G_State.Controls.ButtonIcon_PrevPlayer);
		{{{P}}}ButtonIconNextPlayerIsVisible = {{{ButtonIcon::P}}}IsVisible({{{P}}}G_State.Controls.ButtonIcon_NextPlayer);
		{{{P}}}Private_UpdatePlayersPagerVisibility({{{P}}}G_State);
	}

	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					if ({{{P}}}G_State.PlayersPagerEnabled) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Action3) {
							{{{P}}}G_State = {{{P}}}Private_Select({{{P}}}G_State, {{{P}}}G_State.Controls.Button_PrevPlayer);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Action4) {
							{{{P}}}G_State = {{{P}}}Private_Select({{{P}}}G_State, {{{P}}}G_State.Controls.Button_NextPlayer);
						}
					}
					if ({{{P}}}Private_IsBrowsingTrophiesHistory({{{P}}}G_State)) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							{{{P}}}G_State = {{{P}}}Private_UpdateSelectedTrophy({{{P}}}G_State, -1);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Up) {
							{{{P}}}Private_ScrollTrophyHistory({{{P}}}G_State, {{{-(Size_TrophiesHistory_Cell.Y + Size_TrophiesHistory_Gutter.Y) * 2}}});
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Down) {
							{{{P}}}Private_ScrollTrophyHistory({{{P}}}G_State, {{{(Size_TrophiesHistory_Cell.Y + Size_TrophiesHistory_Gutter.Y) * 2}}});
						}
					} else {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							{{{P}}}Private_SendCloseEvent({{{P}}}G_State);
							{{{P}}}G_State = {{{P}}}Private_SetUser({{{P}}}G_State, {{{P}}}K_PlayerProfile {}, False, True);
						}
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Main}}}")) {
					if ({{{P}}}Private_IsBrowsingTrophiesHistory({{{P}}}G_State)) {
						// Do nothing
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						{{{P}}}G_State = {{{P}}}Private_Select({{{P}}}G_State, Event.To);
					} else if (
						Event.From == Event.To &&
						Event.From.ControlId == {{{P}}}G_State.Controls.Frame_TrophiesList.ControlId && (
							Event.Input == CMlScriptEvent::EMenuNavAction::Left ||
							Event.Input == CMlScriptEvent::EMenuNavAction::Right
						)
					) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
							{{{P}}}G_State = {{{P}}}Private_SetFocusedTrophy({{{P}}}G_State, {{{P}}}G_State.FocusedTrophyKey - 1);
							{{{P}}}AudioManager::PlaySound(This, {{{MenuSounds::P}}}C_Sound_Focus);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
							{{{P}}}G_State = {{{P}}}Private_SetFocusedTrophy({{{P}}}G_State, {{{P}}}G_State.FocusedTrophyKey + 1);
							{{{P}}}AudioManager::PlaySound(This, {{{MenuSounds::P}}}C_Sound_Focus);
						}
					} else if (
						Event.From == Event.To && (
							Event.From.ControlId == "{{{P}}}frame-trophies-ranking" ||
							Event.From.ControlId == "{{{P}}}frame-info-ranking"
						) && (
							Event.Input == CMlScriptEvent::EMenuNavAction::Left ||
							Event.Input == CMlScriptEvent::EMenuNavAction::Right
						)
					) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
							{{{P}}}G_State = {{{P}}}Private_SetTrophiesRankingsPage({{{P}}}G_State, {{{P}}}G_State.TrophiesRankingsPager.CurrentPage + 1, True);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
							{{{P}}}G_State = {{{P}}}Private_SetTrophiesRankingsPage({{{P}}}G_State, {{{P}}}G_State.TrophiesRankingsPager.CurrentPage - 1, True);
						}
					} else if (
						Event.From == Event.To &&
						Event.From.ControlId == "{{{P}}}frame-info-campaign-ranking" && (
							Event.Input == CMlScriptEvent::EMenuNavAction::Left ||
							Event.Input == CMlScriptEvent::EMenuNavAction::Right
						)
					) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
							if (!{{{P}}}Pager::IsAtLastPage({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager)) {
								{{{P}}}AudioManager::PlaySound(This, {{{MenuSounds::P}}}C_Sound_ArrowSelect);
							}
							{{{P}}}G_State.IsTTSContextUpdateNeeded = True;
							{{{P}}}G_State.MyQuarterlyCampaignsRankingsPager = {{{P}}}Pager::GoToNextPage({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager);
							{{{P}}}Private_PlayPagerAnim({{{P}}}G_State.Controls.Frame_PreviousCampaign);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
							if (!{{{P}}}Pager::IsAtFirstPage({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager)) {
								{{{P}}}AudioManager::PlaySound(This, {{{MenuSounds::P}}}C_Sound_ArrowSelect);
							}
							{{{P}}}G_State.IsTTSContextUpdateNeeded = True;
							{{{P}}}G_State.MyQuarterlyCampaignsRankingsPager = {{{P}}}Pager::GoToPreviousPage({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager);
							{{{P}}}Private_PlayPagerAnim({{{P}}}G_State.Controls.Frame_NextCampaign);
						}
					} else if (
						Event.From != Null &&
						Event.To != Null &&
						Event.From.HasClass("{{{P}}}bottom-button") &&
						!Event.To.HasClass("{{{P}}}bottom-button")
					) {
						{{{P}}}LastBottomButtonFocused = Event.From;
						{{{P}}}Private_Focus({{{P}}}G_State, Event.From, Event.To);
					}  else if (
						Event.From != Null &&
						Event.To != Null &&
						!Event.From.HasClass("{{{P}}}bottom-button") &&
						Event.To.HasClass("{{{P}}}bottom-button")
					) {
						if (!{{{Navigation::P}}}IsLocked({{{P}}}LastBottomButtonFocused)) {
							{{{P}}}Private_Focus({{{P}}}G_State, Event.From, {{{P}}}LastBottomButtonFocused);
						} else {
							{{{P}}}Private_Focus({{{P}}}G_State, Event.From, Event.To);
						}
					} else {
						{{{P}}}Private_Focus({{{P}}}G_State, Event.From, Event.To);
					}
					{{{P}}}Private_TTSContextUpdate({{{P}}}G_State, Event.To as CMlFrame);
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Main}}}")) {
					{{{P}}}Private_TTSContextUpdate({{{P}}}G_State, Event.To as CMlFrame);
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						{{{P}}}G_State = {{{P}}}Private_Select({{{P}}}G_State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						{{{P}}}Private_Focus({{{P}}}G_State, Event.From, Event.To);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_MouseOnly}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						{{{P}}}G_State = {{{P}}}Private_Select({{{P}}}G_State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						if (
							Event.To != Null &&
							Event.To.HasClass("{{{P}}}button-trophy") &&
							!{{{Navigation::P}}}IsLocked({{{P}}}G_State.Controls.Frame_TrophiesList)
						) {
							declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Main}}}");
							if (FocusedControl == Null || FocusedControl.ControlId != {{{P}}}G_State.Controls.Frame_TrophiesList.ControlId) {
								{{{P}}}Private_Focus({{{P}}}G_State, FocusedControl, {{{P}}}G_State.Controls.Frame_TrophiesList);
							}
							{{{P}}}G_State = {{{P}}}Private_SetFocusedTrophy({{{P}}}G_State, {{{P}}}TL::ToInteger(Event.To.DataAttributeGet("trophy-key")));
						}
						{{{P}}}Private_Focus({{{P}}}G_State, Event.From, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOut) {
						{{{P}}}Private_Focus({{{P}}}G_State, Event.From, Event.To);
					}
				}
			}
		}
	}

	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				if (Event.CustomEventType == {{{CampaignStore::P}}}C_Event_MyQuarterlyCampaignsRankingsUpdated) {
					{{{P}}}G_State.MyQuarterlyCampaignsRankingsPager = {{{P}}}Pager::SetTotal(
						{{{P}}}G_State.MyQuarterlyCampaignsRankingsPager,
						{{{CampaignStore::P}}}GetMyQuarterlyCampaignsTotal()
					);
					{{{P}}}Private_UpdateMyQuarterlyCampaignsRankings(
						{{{P}}}G_State,
						{{{CampaignStore::P}}}GetMyQuarterlyCampaignsRankings(),
						{{{CampaignStore::P}}}GetMyQuarterlyCampaignsNames(),
						{{{P}}}Pager::GetIndex({{{P}}}G_State.MyQuarterlyCampaignsRankingsPager)
					);
				}
			}
		}
	}

	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll == {{{P}}}G_State.Controls.Scroll_TrophiesHistory) {
			switch (Event.Type) {
				case {{{Scroll::P}}}C_EventType_Update: {
					foreach (Key => Frame_Element in Event.ElementsVisible) {
						if ({{{P}}}G_State.TrophiesHistory.TrophyScroll.Content.existskey(Key)) {
							{{{P}}}Private_ShowTrophyHistoryEntry(Frame_Element, {{{P}}}G_State.TrophiesHistory.TrophyScroll.Content[Key]);
						} else {
							{{{P}}}Private_ShowTrophyHistoryEntryLoading(Frame_Element);
						}
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						{{{P}}}Private_HideTrophyHistoryEntry(Frame_Element);
					}
				}
				case {{{Scroll::P}}}C_EventType_PagerUpdate: {
					{{{P}}}G_State = {{{P}}}Private_RequestTrophyHistory({{{P}}}G_State, {{{P}}}G_State.HistoryTrophyType, Event.PagerOffset, Event.PagerCount);
				}
			}
		}
	}

	foreach (Event in {{{NavigationTabs::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{NavigationTabs::P}}}C_EventType_Select: {
				if (Event.Frame_NavigationTabs.ControlId == {{{P}}}G_State.Controls.NavigationTabs_Categories.ControlId) {
					{{{P}}}G_State = {{{P}}}Private_UpdateTabDisplayed({{{P}}}G_State, Event.CurrentTab);
					ParentApp.TTS_Context_Change({{{P}}}G_TTSContextIdent_Tabs, {{{NavigationTabs::P}}}GetCurrentTabLabel({{{P}}}G_State.Controls.NavigationTabs_Categories));
					ParentApp.TTS_Context_Read({{{P}}}C_TTSContextLevel_Page);
				}
			}
		}
	}

	// Process trophy history task
	if ({{{P}}}G_State.TrophiesHistory.TaskId_GetTrophyHistory != NullId) {
		if (ScoreMgr != Null && ScoreMgr.TaskResults.existskey({{{P}}}G_State.TrophiesHistory.TaskId_GetTrophyHistory)) {
			declare CTaskResult_AccountTrophyGainHistory Task = (ScoreMgr.TaskResults[{{{P}}}G_State.TrophiesHistory.TaskId_GetTrophyHistory] as CTaskResult_AccountTrophyGainHistory);
			if (!Task.IsProcessing) {
				{{{P}}}G_State = {{{P}}}Private_SetTrophyHistoryScroll(
					{{{P}}}G_State,
					{{{P}}}G_State.TrophiesHistory.RequestedTrophyType,
					{{{P}}}G_State.TrophiesHistory.RequestedOffset,
					Task
				);
				ScoreMgr.TaskResult_Release({{{P}}}G_State.TrophiesHistory.TaskId_GetTrophyHistory);
				{{{P}}}G_State.TrophiesHistory.TaskId_GetTrophyHistory = NullId;
			}
		} else {
			{{{P}}}G_State.TrophiesHistory.TaskId_GetTrophyHistory = NullId;
		}
	}

	// Process trophy ranking request
	if ({{{P}}}Http::IsInitialized({{{P}}}G_State.GetPlayersTrophyRanking)) {
		{{{P}}}G_State.GetPlayersTrophyRanking = {{{P}}}Http::Update({{{P}}}G_State.GetPlayersTrophyRanking);
		if (!{{{P}}}Http::IsRunning({{{P}}}G_State.GetPlayersTrophyRanking)) {
			declare {{{CampaignStruct::P}}}K_Ranking[] Ranking;
			declare Integer Points = 0;
			declare Integer Echelon = {{{P}}}C_Echelon_Null;
			if ({{{P}}}Http::IsSuccess({{{P}}}G_State.GetPlayersTrophyRanking)) {
				declare Response = {{{P}}}LeaderboardAPI::GetResponseFromGetPlayersTrophyRanking({{{P}}}G_State.GetPlayersTrophyRanking);
				if (Response.Players.count >= 1) {
					declare PlayerRanking = Response.Players[0];
					Points = PlayerRanking.Points;
					Echelon = PlayerRanking.Echelon;
					Ranking = PlayerRanking.Ranking;
					if (LocalUser.WebServicesUserId == {{{P}}}G_State.PlayerProfile.AccountId) {
						{{{UserStore::P}}}Action_UpdateUserTrophyRankings(This, PlayerRanking);
					}
				}
			} else {
				{{{P}}}G_State.TrophyRankingLoadingError = ""^{{{P}}}Http::GetStatusCode({{{P}}}G_State.GetPlayersTrophyRanking);
			}
			{{{P}}}Private_SetTrophiesPoints({{{P}}}G_State, Points);
			{{{P}}}Private_SetEchelon({{{P}}}G_State, Echelon);
			{{{P}}}G_State = {{{P}}}Private_SetTrophiesRankings({{{P}}}G_State, Ranking);

			{{{P}}}Http::Destroy({{{P}}}G_State.GetPlayersTrophyRanking);
			{{{P}}}Private_UpdateTrophiesRankingLoading({{{P}}}G_State);
			{{{LoadingSpinner::P}}}SetIsLoading(This, {{{P}}}G_State.Controls.Spinner_PlayerCardEchelon, False);
		}
	}

	// Process trophies retrieve task
	if ({{{P}}}G_State.TaskId_GetAccountLastYearSummary != NullId) {
		if (ParentApp.ScoreMgr.TaskResults.existskey({{{P}}}G_State.TaskId_GetAccountLastYearSummary)) {
			declare CTaskResult_AccountTrophyLastYearSummary Task <=> (ParentApp.ScoreMgr.TaskResults[{{{P}}}G_State.TaskId_GetAccountLastYearSummary] as CTaskResult_AccountTrophyLastYearSummary);
			if (!Task.IsProcessing) {
				if (Task.HasSucceeded) {
					{{{P}}}G_State = {{{P}}}Private_SetTrophies({{{P}}}G_State, Task.Summary);
				} else {
					{{{P}}}G_State.Controls.Label_TrophiesError.Value = {{{P}}}TL::Compose("{{{Text_ErrorWhileRetrievingTrophies}}}", ""^Task.ErrorCode);
					{{{P}}}G_State.TrophiesLoadingError = True;
				}
				ParentApp.ScoreMgr.TaskResult_Release({{{P}}}G_State.TaskId_GetAccountLastYearSummary);
				{{{P}}}G_State.TaskId_GetAccountLastYearSummary = NullId;
				{{{P}}}Private_DisplayTrophies({{{P}}}G_State);
			}
		} else {
			{{{P}}}G_State.Controls.Label_TrophiesError.Value = {{{P}}}TL::Compose("{{{Text_ErrorWhileRetrievingTrophies}}}", {{{P}}}C_ErrorCode_TaskDeleted);
			{{{P}}}G_State.TrophiesLoadingError = True;
			{{{P}}}G_State.TaskId_GetAccountLastYearSummary = NullId;
			{{{P}}}Private_DisplayTrophies({{{P}}}G_State);
		}
	}

	// Process matchmaking ranked stats request
	if ({{{P}}}Http::IsInitialized({{{P}}}G_State.Ranked.GetPlayerStats)) {
		{{{P}}}G_State.Ranked.GetPlayerStats = {{{P}}}Http::Update({{{P}}}G_State.Ranked.GetPlayerStats);
		if (!{{{P}}}Http::IsRunning({{{P}}}G_State.Ranked.GetPlayerStats)) {
			if ({{{P}}}Http::IsSuccess({{{P}}}G_State.Ranked.GetPlayerStats)) {
				{{{P}}}G_State.Ranked.Stats = {{{P}}}MatchmakingAPI::GetResponseFromGetPlayerMatchmakingStatistics({{{P}}}G_State.Ranked.GetPlayerStats);
			} else {
				{{{P}}}G_State.Ranked.Stats = {{{MatchmakingStruct::P}}}K_PlayerStatistics {};
			}
			{{{P}}}Private_SetRankedStats({{{P}}}G_State, LocalUser.WebServicesUserId == {{{P}}}G_State.Ranked.Stats.AccountId);
			{{{P}}}G_State.Ranked.GetPlayerStats = {{{P}}}Http::Destroy({{{P}}}G_State.Ranked.GetPlayerStats);
			{{{LoadingSpinner::P}}}SetIsLoading(This, {{{P}}}G_State.Controls.Spinner_Ranked, False);
		}
	}

	// Process royal stats request
	if ({{{P}}}Http::IsInitialized({{{P}}}G_State.Royal.GetPlayerStats)) {
		{{{P}}}G_State.Royal.GetPlayerStats = {{{P}}}Http::Update({{{P}}}G_State.Royal.GetPlayerStats);
		if (!{{{P}}}Http::IsRunning({{{P}}}G_State.Royal.GetPlayerStats)) {
			if ({{{P}}}Http::IsSuccess({{{P}}}G_State.Royal.GetPlayerStats)) {
				{{{P}}}G_State.Royal.Stats = {{{P}}}MatchmakingAPI::GetResponseFromGetPlayerMatchmakingStatistics({{{P}}}G_State.Royal.GetPlayerStats);
			} else {
				{{{P}}}G_State.Royal.Stats = {{{MatchmakingStruct::P}}}K_PlayerStatistics {};
			}
			{{{P}}}Private_SetRoyalStats({{{P}}}G_State);
			{{{P}}}G_State.Royal.GetPlayerStats = {{{P}}}Http::Destroy({{{P}}}G_State.Royal.GetPlayerStats);
			{{{LoadingSpinner::P}}}SetIsLoading(This, {{{P}}}G_State.Controls.Spinner_Royal, False);
		}
	}

	// Process super royal stats request
	if ({{{P}}}Http::IsInitialized({{{P}}}G_State.SuperRoyal.GetPlayerStats)) {
		{{{P}}}G_State.SuperRoyal.GetPlayerStats = {{{P}}}Http::Update({{{P}}}G_State.SuperRoyal.GetPlayerStats);
		if (!{{{P}}}Http::IsRunning({{{P}}}G_State.SuperRoyal.GetPlayerStats)) {
			if ({{{P}}}Http::IsSuccess({{{P}}}G_State.SuperRoyal.GetPlayerStats)) {
				{{{P}}}G_State.SuperRoyal.Stats = {{{P}}}MatchmakingAPI::GetResponseFromSuperRoyalStats({{{P}}}G_State.SuperRoyal.GetPlayerStats);
			} else {
				{{{P}}}G_State.SuperRoyal.Stats = {{{MatchmakingStruct::P}}}K_SuperRoyalStatistics {};
			}
			{{{P}}}Private_SetRoyalStats({{{P}}}G_State);
			{{{P}}}G_State.SuperRoyal.GetPlayerStats = {{{P}}}Http::Destroy({{{P}}}G_State.SuperRoyal.GetPlayerStats);
		}
	}

	// Get player display name task
	if ({{{P}}}Task::IsInitialized({{{P}}}G_State.Task_RetrieveDisplayName)) {
		{{{P}}}G_State.Task_RetrieveDisplayName = {{{P}}}Task::Update({{{P}}}G_State.Task_RetrieveDisplayName);
		if (!{{{P}}}Task::IsRunning({{{P}}}G_State.Task_RetrieveDisplayName)) {
			if ({{{P}}}Task::IsSuccess({{{P}}}G_State.Task_RetrieveDisplayName)) {
				{{{P}}}G_State.PlayerProfile.Name = UserMgr.FindDisplayName({{{P}}}G_State.PlayerProfile.AccountId, {{{P}}}G_State.PlayerProfile.IsFirstPartyDisplayName);
			} else {
				{{{P}}}G_State.Controls.Label_Error.SetText("{{{Text_MissingInfos}}}");
			}
			{{{P}}}G_State.Task_RetrieveDisplayName = {{{P}}}Task::Destroy({{{P}}}G_State.Task_RetrieveDisplayName);
		}
	}

	// Get player club tag task
	if ({{{P}}}Task::IsInitialized({{{P}}}G_State.Task_GetClubTagList)) {
		{{{P}}}G_State.Task_GetClubTagList = {{{P}}}Task::Update({{{P}}}G_State.Task_GetClubTagList);
		if (!{{{P}}}Task::IsRunning({{{P}}}G_State.Task_GetClubTagList)) {
			declare CTaskResult_ClubTagList SourceTask = {{{P}}}Task::GetSourceTask_ClubTagList({{{P}}}G_State.Task_GetClubTagList);
			if ({{{P}}}Task::IsSuccess({{{P}}}G_State.Task_GetClubTagList) && SourceTask != Null) {
				{{{P}}}G_State.PlayerProfile.ClubTag = SourceTask.GetClubTag({{{P}}}G_State.PlayerProfile.AccountId);
			} else {
				{{{P}}}G_State.Controls.Label_Error.SetText("{{{Text_MissingInfos}}}");
			}
			{{{P}}}G_State.Task_GetClubTagList = {{{P}}}Task::Destroy({{{P}}}G_State.Task_GetClubTagList);
		}
	}

	// Get player zone task
	if ({{{P}}}Task::IsInitialized({{{P}}}G_State.Task_RetrieveUserZoneList)) {
		{{{P}}}G_State.Task_RetrieveUserZoneList = {{{P}}}Task::Update({{{P}}}G_State.Task_RetrieveUserZoneList);
		if (!{{{P}}}Task::IsRunning({{{P}}}G_State.Task_RetrieveUserZoneList)) {
			declare CTaskResult_UserZoneList SourceTask = {{{P}}}Task::GetSourceTask_UserZoneList({{{P}}}G_State.Task_RetrieveUserZoneList);
			if ({{{P}}}Task::IsSuccess({{{P}}}G_State.Task_RetrieveUserZoneList) && SourceTask != Null) {
				declare CZone Zone = SourceTask.GetUserZone({{{P}}}G_State.PlayerProfile.AccountId);
				if (Zone != Null) {
					{{{P}}}G_State.PlayerProfile.Zone = {{{P}}}K_Zone {
						Id = Zone.Id,
						ParentId = Zone.ParentId,
						Name = Zone.Name,
						Path = Zone.Path,
						FullPath = Zone.FullPath,
						FlagUrl = Zone.FlagUrl,
						CountryFlagUrl = Zone.CountryFlagUrl,
						CarSkinName = Zone.Model_CarSport_SkinName,
						CarSkinUrl = Zone.Model_CarSport_SkinUrl,
						PilotSkinName = Zone.Model_CharacterPilot_SkinName,
						PilotSkinUrl = Zone.Model_CharacterPilot_SkinUrl
					};
				}
			} else {
				{{{P}}}G_State.Controls.Label_Error.SetText("{{{Text_MissingInfos}}}");
			}
			{{{P}}}G_State.Task_RetrieveUserZoneList = {{{P}}}Task::Destroy({{{P}}}G_State.Task_RetrieveUserZoneList);
		}
	}

	// Get player prestige skin task
	if ({{{P}}}Task::IsInitialized({{{P}}}G_State.Task_GetPrestigeSkin)) {
		{{{P}}}G_State.Task_GetPrestigeSkin = {{{P}}}Task::Update({{{P}}}G_State.Task_GetPrestigeSkin);
		if (!{{{P}}}Task::IsRunning({{{P}}}G_State.Task_GetPrestigeSkin)) {
			declare CTaskResult_UserPrestige SourceTask = {{{P}}}Task::GetSourceTask_UserPrestige({{{P}}}G_State.Task_GetPrestigeSkin);
			if ({{{P}}}Task::IsSuccess({{{P}}}G_State.Task_GetPrestigeSkin) && SourceTask != Null) {
				if (SourceTask.UserPrestige != Null) {
					{{{P}}}G_State.PlayerProfile.CarSkin.PrestigeOptions = {{{P}}}PrestigeStruct::ConvertPrestige(SourceTask.UserPrestige).SkinOptions;
				}
			} else {
				{{{P}}}G_State.Controls.Label_Error.SetText("{{{Text_MissingInfos}}}");
			}
			{{{P}}}G_State.Task_GetPrestigeSkin = {{{P}}}Task::Destroy({{{P}}}G_State.Task_GetPrestigeSkin);
		}
	}

	// Get player skins task
	if ({{{P}}}Task::IsInitialized({{{P}}}G_State.Task_GetSkinList)) {
		{{{P}}}G_State.Task_GetSkinList = {{{P}}}Task::Update({{{P}}}G_State.Task_GetSkinList);
		if (!{{{P}}}Task::IsRunning({{{P}}}G_State.Task_GetSkinList)) {
			declare CTaskResult_NSSkinList SourceTask = {{{P}}}Task::GetSourceTask_NSSkinList({{{P}}}G_State.Task_GetSkinList);
			if ({{{P}}}Task::IsSuccess({{{P}}}G_State.Task_GetSkinList) && SourceTask != Null) {
				if (SourceTask.SkinList.count > 0) {
					declare Text PrestigeOptions = {{{P}}}G_State.PlayerProfile.CarSkin.PrestigeOptions;
					{{{P}}}G_State.PlayerProfile.CarSkin = {{{ClubStruct::P}}}GetSkinFromNSSkin(SourceTask.SkinList[0], True, False);
					{{{P}}}G_State.PlayerProfile.CarSkin.PrestigeOptions = PrestigeOptions; // Keep the prestige skin options rerieved earlier
				}
			} else {
				{{{P}}}G_State.Controls.Label_Error.SetText("{{{Text_MissingInfos}}}");
			}
			{{{P}}}G_State.Task_GetSkinList = {{{P}}}Task::Destroy({{{P}}}G_State.Task_GetSkinList);
		}
	}

	if (
		!{{{P}}}G_State.IsPlayerProfileUpdated &&
		!{{{P}}}Task::IsInitialized({{{P}}}G_State.Task_GetClubTagList) &&
		!{{{P}}}Task::IsInitialized({{{P}}}G_State.Task_RetrieveUserZoneList) &&
		!{{{P}}}Task::IsInitialized({{{P}}}G_State.Task_RetrieveDisplayName) &&
		!{{{P}}}Task::IsInitialized({{{P}}}G_State.Task_GetPrestigeSkin) &&
		!{{{P}}}Task::IsInitialized({{{P}}}G_State.Task_GetSkinList)
	) {
		{{{P}}}G_State.IsPlayerProfileUpdated = True;
		{{{P}}}G_State = {{{P}}}Private_SetUser({{{P}}}G_State, {{{P}}}G_State.PlayerProfile, True, False);
	}

	if (!{{{P}}}Privileges::Check_IsComplete({{{P}}}G_State.PrivilegeCheck.PrivilegeCheck)) {
		{{{P}}}G_State.PrivilegeCheck.PrivilegeCheck = {{{P}}}Privileges::Check_Update({{{P}}}G_State.PrivilegeCheck.PrivilegeCheck);
		if ({{{P}}}Privileges::Check_IsComplete({{{P}}}G_State.PrivilegeCheck.PrivilegeCheck)) {
			{{{P}}}G_State.PrivilegeCheck.User.CanViewGameHistory = {{{P}}}Privileges::Check_HasPrivilege({{{P}}}G_State.PrivilegeCheck.PrivilegeCheck);
			{{{P}}}G_State.PrivilegeCheck.PrivilegeCheck = {{{P}}}Privileges::Check_Destroy({{{P}}}G_State.PrivilegeCheck.PrivilegeCheck);
			{{{P}}}G_State = {{{P}}}Private_SetUser({{{P}}}G_State, {{{P}}}G_State.PrivilegeCheck.User, False, False);
		}
	}
} else {
	if (This is CMlScriptIngame) {
		/* Report system pop up events (used IN GAME) */
		foreach (Event in {{{PopUpReportSystem::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{PopUpReportSystem::P}}}C_EventType_Close: {
					{{{P}}}G_State = {{{P}}}Private_Enable({{{P}}}G_State, True);
				}
			}
		}
	} else {
		/* Report system events (used in MENUS) */
		foreach (Event in {{{P}}}ReportSystem::GetPendingEvents()) {
			if (Event.LastUsingId == "{{{C_Name}}}") {
				switch (Event.Type) {
					case {{{P}}}ReportSystem::C_EventType_Close: {
						{{{P}}}G_State = {{{P}}}Private_Enable({{{P}}}G_State, True);
					}
				}
			}
		}
	}
}
***
		""",
		[
			Navigation::ComponentV2(),
			MenuSounds::ComponentV2(),
			Scroll::ComponentV2(),
			LoadingSpinner::ComponentV2(),
			Button::ComponentV2(),
			ExpendableButton::ComponentV2(),
			MenuButtonList::Component(),
			ClubStruct::Component(),
			UserStore::ComponentV2(),
			MatchmakingStruct::Component(),
			CampaignStruct::Component(),
			CampaignStore::ComponentV2(),
			PlayerRoyalVictories::ComponentV2(),
			PlayerRank::Component(),
			NavigationTabs::ComponentV2(),
			ButtonIcon::ComponentV2(),
			PopUpReportSystem::ComponentV2(),
			PlayerName::ComponentV2()
		],
		[]
	);
}
Text Component() {
	return Component(C_Size_PlayerProfile);
}