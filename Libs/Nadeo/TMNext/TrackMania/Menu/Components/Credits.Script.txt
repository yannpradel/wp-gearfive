/** 
 *	Component: Credits
 *
 *	See the game credits
 *	Only instance one of this component per page.
 */
#Const Version		"2023-05-24"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Components/Credits.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuButtonList.Script.txt" as MenuButtonList
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-credits"
#Const P "ComponentCredits_"

#Const C_NavGroup_Global "navgroup-component-credits-global"
#Const C_NavGroup_Main "navgroup-component-credits-main"

#Const C_CreditsJsonPath "file://Media/Json/Nadeo/TMNext/Credits/Credits.json"
#Const C_LicensesTextPath "file://Media/Json/Nadeo/TMNext/Credits/Licenses.txt"

//L16N [Credits] Softwares usage licenses
#Const C_Text_Licenses _("|Software|Licenses")

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {
	//L16N Credits of the game, listing all the people who work on the game
	declare Text Text_Credits = _("Credits");

	declare Integer ColumnsNb = 1;
	declare Integer RowsNb = 14;
	declare Integer CreditsPerPage = ColumnsNb * RowsNb;
	declare Vec2 Size_CreditsScrollWindow = <250., 130.>;
	declare Vec2 Size_CreditMargin = <2., 2.>;
	declare Vec2 Size_Credit = Scroll::GetElementSize(Size_CreditsScrollWindow, Size_CreditMargin, ColumnsNb, RowsNb);
	declare Integer CreditsNb = Scroll::GetRequiredElementsNb(Size_CreditsScrollWindow, Size_Credit, Size_CreditMargin, ColumnsNb);

	declare Text ML_Credits = "";
	for (I, 1, CreditsNb) {
		ML_Credits ^= """
			<frameinstance modelid="{{{P}}}framemodel-credit-line" class="{{{Scroll::C_Class_Element}}}" hidden="1"/>
		""";
	}

	declare Vec2 Pos_LabelLocation = <Size_Credit.X * 0.5, Size_Credit.Y * -0.5>;
	declare Vec2 Pos_LabelEntity = <Size_Credit.X * 0.5, Size_Credit.Y * -0.8>;
	declare Vec2 Pos_LabelJobTitle = <Size_Credit.X * 0.5, Size_Credit.Y * -0.7>;
	declare Vec2 Pos_LabelPerson = <Size_Credit.X * 0.5, Size_Credit.Y * 0.1>;

	declare Text VivoxLogo = Const::C_LogoFolder^"VivoxLogo.dds";
	declare Vec2 Size_VivoxLogo = MLHelpers::KeepRatioFromY(1170., 480., 20.);

	return MV::Component(
		C_Name,
		"""
<stylesheet>
	<style class="{{{P}}}text-base" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="3" textcolor="ffffff" textprefix="$t"/>
	<style class="{{{P}}}text-jobtitle" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textsize="3.5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" textprefix="$i$t"/>
	<style class="{{{P}}}text-entity" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textsize="5" textcolor="{{{ColorPalette::C_Color_GreenTwo}}}" textprefix="$t"/>
	<style class="{{{P}}}text-location" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textsize="8" textcolor="{{{ColorPalette::C_Color_GreenThree}}}" textprefix="$t"/>
	<style class="{{{P}}}text-title" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textsize="10" textcolor="ffffff" textprefix="$i$t"/>
	<style class="{{{P}}}text-licenses" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="3" textcolor="ffffff" />
</stylesheet>

<!-- One line of credit in the scroll -->
<framemodel id="{{{P}}}framemodel-credit-line">
	<label id="{{{P}}}label-location" class="{{{P}}}text-location" pos="{{{Pos_LabelLocation.X}}} {{{Pos_LabelLocation.Y}}}" size="{{{Size_CreditsScrollWindow.X}}} {{{Size_CreditsScrollWindow.Y}}}" translate="1" hidden="1" />
	<label id="{{{P}}}label-entity" class="{{{P}}}text-entity" pos="{{{Pos_LabelEntity.X}}} {{{Pos_LabelEntity.Y}}}" size="{{{Size_CreditsScrollWindow.X}}} {{{Size_CreditsScrollWindow.Y}}}" translate="1" hidden="1" />
	<label id="{{{P}}}label-jobtitle" class="{{{P}}}text-jobtitle" pos="{{{Pos_LabelJobTitle.X}}} {{{Pos_LabelJobTitle.Y}}}" size="{{{Size_CreditsScrollWindow.X}}} {{{Size_CreditsScrollWindow.Y}}}" translate="1" hidden="1" />
	<label id="{{{P}}}label-person" class="{{{P}}}text-base" pos="{{{Pos_LabelPerson.X}}} {{{Pos_LabelPerson.Y}}}" size="{{{Size_CreditsScrollWindow.X}}} {{{Size_CreditsScrollWindow.Y}}}" valign="top" maxline="3" translate="1" hidden="1" />
</framemodel>

<frame id="{{{P}}}frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="cancel;up;down" data-nav-targets="_;_;_" data-nav-group="{{{C_NavGroup_Global}}}">
	<!-- Background -->
	<quad id="{{{P}}}capture-mouse-events" size="320 180" z-index="-3" halign="center" valign="center" fullscreen="1" scriptevents="1" />
	<quad size="320 180" z-index="-2" halign="center" valign="center" image="{{{Const::C_ImageUrl_Credits_Background}}}" fullscreen="1" />
	<quad size="320 180" z-index="-1" halign="center" valign="center" bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.4" fullscreen="1" />
	
	<!-- Page title -->
	<label class="{{{P}}}text-title" text="{{{Text_Credits}}}" pos="0 80" size="300 10" />

	<!-- Credits scroll -->
	<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="{{{P}}}scroll-credits" z-index="1" />
	<frame
		id="{{{P}}}scroll-credits"
		pos="{{{-Size_CreditsScrollWindow.X/2.}}} {{{Size_CreditsScrollWindow.Y/2.+5}}}"
		data-elements-per-line="{{{ColumnsNb}}}"
		data-elements-per-page="{{{CreditsPerPage}}}"
		data-element-size="{{{Size_Credit.X}}} {{{Size_Credit.Y}}}"
		data-margin-size="{{{Size_CreditMargin.X}}} {{{Size_CreditMargin.Y}}}"
		data-window-size="{{{Size_CreditsScrollWindow.X}}} {{{Size_CreditsScrollWindow.Y}}}"
		data-scroll-indicator-y-offset="-18."
		data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom}}}"
		data-scroll-indicator-colorize="FFFFFF"
		data-scroll-indicator-size="10"
		data-scrollbar-xoffset="25."
		class="{{{Scroll::C_Class_Window}}}"
	>
		<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
		{{{ML_Credits}}}
		<frame class="{{{Scroll::C_Class_Footer}}}">
			<label class="{{{P}}}text-location" pos="{{{Pos_LabelLocation.X}}} -15" size="{{{Size_CreditsScrollWindow.X}}} {{{Size_CreditsScrollWindow.Y}}}" text="{{{C_Text_Licenses}}}" />
			<label id="{{{P}}}label-licenses" class="{{{P}}}text-licenses" pos="0 -25" size="{{{Size_CreditsScrollWindow.X}}} {{{Size_CreditsScrollWindow.Y}}}" autonewline="1" />
		</frame>
	</frame>

	<!-- Back button -->
	<frame pos="-151.5 -73" z-index="2">
		<frameinstance modelid="{{{ButtonIcon::C_Name}}}" z-index="2" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
		<frameinstance
			id="{{{P}}}button-back"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}}"
			z-index="1"
			data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="{{{C_NavGroup_Main}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			data-menusounds-selectsound="{{{MenuSounds::C_Sound_Cancel}}}"
		/>
	</frame>

	<!-- Partners logos -->
	<quad id="{{{P}}}quad-logo-vivox" pos="130 -73" {{{MLHelpers::Size(Size_VivoxLogo)}}} autoscale="0" halign="center" valign="center" image="{{{VivoxLogo}}}" />

	<!-- Controller info -->
	<frameinstance modelid="{{{MenuButtonList::C_Name}}}" id="{{{P}}}button-list-credits" z-index="2" />
</frame>
		""",
		"""
#Include "MathLib" as {{{P}}}ML
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as {{{P}}}Http
		
#Struct {{{P}}}K_Controls {
	CMlFrame Scroll_Credits;
	CMlLabel Label_Licenses;
	CMlFrame Button_Back;
	CMlFrame ButtonList_Credits;
}
#Struct {{{P}}}K_CreditSource {
	Text Location;
	Text Entity;
	Text JobTitle;
	Text Person;
}
#Struct {{{P}}}K_CreditLine {
	Text Name;
	Integer Type;
}
#Struct {{{P}}}K_State {
	{{{P}}}K_Controls Controls;
	Boolean ComponentEnabled;
	{{{P}}}Http::K_Request Request_LoadCredits;
	{{{P}}}Http::K_Request Request_LoadLicenses;
	Boolean IsLoadingCredits;
	{{{P}}}K_CreditLine[] CreditLines;
}
#Struct {{{P}}}K_Event {
	Integer Type;
}

#Const {{{P}}}C_CreditsJsonPath {{{dump(C_CreditsJsonPath)}}}
#Const {{{P}}}C_LicensesTextPath {{{dump(C_LicensesTextPath)}}}

#Const {{{P}}}C_NavGroup_Global {{{dump(C_NavGroup_Global)}}}
#Const {{{P}}}C_NavGroup_Main {{{dump(C_NavGroup_Main)}}}

#Const {{{P}}}C_LabelType_None 0
#Const {{{P}}}C_LabelType_Location 1
#Const {{{P}}}C_LabelType_Entity 2
#Const {{{P}}}C_LabelType_JobTitle 3
#Const {{{P}}}C_LabelType_Person 4

#Const {{{P}}}C_EventType_CloseCredits 1
		""",
		"""
declare {{{P}}}K_State {{{P}}}G_State;
declare {{{P}}}K_Event[] {{{P}}}PendingEvents;

// Private API

// Display a credit line
Void {{{P}}}Private_DisplayCreditLine({{{P}}}K_State _State, CMlFrame _Frame_Element, Integer _Key) {
	if (_State.CreditLines.existskey(_Key)) {
		declare {{{P}}}K_CreditLine CreditLine = _State.CreditLines[_Key];
		_Frame_Element.GetFirstChild("{{{P}}}label-location").Visible = (CreditLine.Type == {{{P}}}C_LabelType_Location);
		_Frame_Element.GetFirstChild("{{{P}}}label-entity").Visible = (CreditLine.Type == {{{P}}}C_LabelType_Entity);
		_Frame_Element.GetFirstChild("{{{P}}}label-jobtitle").Visible = (CreditLine.Type == {{{P}}}C_LabelType_JobTitle);
		_Frame_Element.GetFirstChild("{{{P}}}label-person").Visible = (CreditLine.Type == {{{P}}}C_LabelType_Person);
		switch (CreditLine.Type) {
			case {{{P}}}C_LabelType_Location: (_Frame_Element.GetFirstChild("{{{P}}}label-location") as CMlLabel).Value = CreditLine.Name;
			case {{{P}}}C_LabelType_Entity: (_Frame_Element.GetFirstChild("{{{P}}}label-entity") as CMlLabel).Value = CreditLine.Name;
			case {{{P}}}C_LabelType_JobTitle: (_Frame_Element.GetFirstChild("{{{P}}}label-jobtitle") as CMlLabel).Value = CreditLine.Name;
			case {{{P}}}C_LabelType_Person: (_Frame_Element.GetFirstChild("{{{P}}}label-person") as CMlLabel).Value = CreditLine.Name;
		}
		_Frame_Element.Visible = True;
	} else {
		_Frame_Element.Visible = False;
	}
}

// Update navigation focus
Void {{{P}}}Private_Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);

		if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		
		if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void {{{P}}}Private_Select(CMlControl _Control) {
	if (_Control == Null) return;

	switch (_Control.ControlId) {
		case "{{{P}}}button-back": {
			{{{P}}}PendingEvents.add({{{P}}}K_Event {
				Type = {{{P}}}C_EventType_CloseCredits
			});
		}
	}
}

// Enable or disable the navigation in the component
Void {{{P}}}Private_UpdateNavigationLock({{{P}}}K_State _State) {
	{{{Navigation::P}}}EnableGroup(This, {{{P}}}C_NavGroup_Global, _State.ComponentEnabled);
	{{{Navigation::P}}}EnableGroup(This, {{{P}}}C_NavGroup_Main, _State.ComponentEnabled);
	{{{Scroll::P}}}LockNavigation(_State.Controls.Scroll_Credits, !_State.ComponentEnabled);
}

// Enable or disable the component.
{{{P}}}K_State {{{P}}}Private_Enable({{{P}}}K_State _State, Boolean _Enabled, Boolean _ForceUpdate) {
	if (!_ForceUpdate && _State.ComponentEnabled == _Enabled) return _State;

	declare {{{P}}}K_State State = _State;

	State.ComponentEnabled = _Enabled;
	{{{P}}}Private_UpdateNavigationLock(State);

	if (State.ComponentEnabled) {
		// Restart the credits from the top
		{{{Scroll::P}}}ScrollToHeader(This, State.Controls.Scroll_Credits);
		// Force a refresh of the scroll display
		{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Credits, State.CreditLines.count);
		// Focus the back button by default
		{{{P}}}Private_Focus({{{Navigation::P}}}GetFocusedControl(This, {{{P}}}C_NavGroup_Main), State.Controls.Button_Back);
	}

	return State;
}
{{{P}}}K_State {{{P}}}Private_Enable({{{P}}}K_State _State, Boolean _Enabled) {
	return {{{P}}}Private_Enable(_State, _Enabled, False);
}

// Set the credits to display in the scroll
{{{P}}}K_State {{{P}}}Private_SetCredits({{{P}}}K_State _State, {{{P}}}K_CreditSource[] _CreditsSource) {
	declare {{{P}}}K_State State = _State;

	State.CreditLines = [];

	declare Text[] Locations;
	declare Text[] Entities;
	declare Text[] JobTitles;
	declare Text[] Persons;
	declare Boolean FirstLocation = True;
	foreach (Credit in _CreditsSource) {
		if (!Locations.exists(Credit.Location)) {
			if (!FirstLocation) {
				// Add two blanks between locations
				State.CreditLines.add({{{P}}}K_CreditLine {
					Name = "",
					Type = {{{P}}}C_LabelType_None
				});
				State.CreditLines.add({{{P}}}K_CreditLine {
					Name = "",
					Type = {{{P}}}C_LabelType_None
				});
			}
			if (FirstLocation) FirstLocation = False;
			Locations.add(Credit.Location);
			State.CreditLines.add({{{P}}}K_CreditLine {
				Name = Credit.Location,
				Type = {{{P}}}C_LabelType_Location
			});
			Entities = [];
		}
		if (!Entities.exists(Credit.Entity)) {
			Entities.add(Credit.Entity);
			State.CreditLines.add({{{P}}}K_CreditLine {
				Name = Credit.Entity,
				Type = {{{P}}}C_LabelType_Entity
			});
			JobTitles = [];
		}
		if (!JobTitles.exists(Credit.JobTitle)) {
			JobTitles.add(Credit.JobTitle);
			State.CreditLines.add({{{P}}}K_CreditLine {
				Name = Credit.JobTitle,
				Type = {{{P}}}C_LabelType_JobTitle
			});
			Persons = [];
		}
		if (!Persons.exists(Credit.Person)) {
			Persons.add(Credit.Person);
			State.CreditLines.add({{{P}}}K_CreditLine {
				Name = Credit.Person,
				Type = {{{P}}}C_LabelType_Person
			});
		}
	}

	{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Credits, State.CreditLines.count);

	return State;
}

// Update the licenses text
Void {{{P}}}Private_UpdateLicenses({{{P}}}K_State _State, Text _Licenses) {
	_State.Controls.Label_Licenses.Value = _Licenses;
	if (_State.Controls.Label_Licenses.Value == "") {
		{{{Scroll::P}}}SetFooterHeight(This, _State.Controls.Scroll_Credits, 0.);
	} else {
		{{{Scroll::P}}}SetFooterHeight(
			This, _State.Controls.Scroll_Credits, (
				{{{P}}}ML::Abs(_State.Controls.Label_Licenses.RelativePosition_V3.Y) +
				_State.Controls.Label_Licenses.ComputeHeight(_State.Controls.Label_Licenses.Value)
			)
		);
	}
}

// Initialize the component
{{{P}}}K_State {{{P}}}Private_Initialize({{{P}}}K_State _State) {
	declare {{{P}}}K_State State = _State;

	State = {{{P}}}Private_SetCredits(State, []);
	{{{P}}}Private_UpdateLicenses(State, "");

	State.IsLoadingCredits = True;
	State.Request_LoadCredits = {{{P}}}Http::DestroyAndCreate(
		State.Request_LoadCredits,
		{{{P}}}Http::CreateGet({{{P}}}C_CreditsJsonPath, [])
	);
	State.Request_LoadLicenses = {{{P}}}Http::DestroyAndCreate(
		State.Request_LoadLicenses,
		{{{P}}}Http::CreateGet({{{P}}}C_LicensesTextPath, [])
	);

	return State;
}

// Public API

// Enable or disable the component
Void {{{P}}}Enable(Boolean _Enabled) {
	{{{P}}}G_State = {{{P}}}Private_Enable({{{P}}}G_State, _Enabled);
}

// Display or hide the menu buttons at the bottom right
Void {{{P}}}EnableMenuButtonList(Boolean _Enabled) {
	{{{P}}}G_State.Controls.ButtonList_Credits.Visible = _Enabled;
}

// Use navigation events from the manialink
Void {{{P}}}UseLocalEvents(Boolean _UseLocalEvents) {
	{{{Scroll::P}}}UseLocalEvents(This, _UseLocalEvents);
	{{{Navigation::P}}}UseLocalEvents(This, _UseLocalEvents);
}

***MainInit***
***
declare CMlFrame {{{P}}}Frame_Global;
***

***MainStart***
***
{{{P}}}Frame_Global <=> (Page.GetFirstChild("{{{P}}}frame-global") as CMlFrame);
{{{P}}}G_State.Controls.Scroll_Credits <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}scroll-credits") as CMlFrame);
{{{P}}}G_State.Controls.Label_Licenses <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}label-licenses") as CMlLabel);
{{{P}}}G_State.Controls.Button_Back <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}button-back") as CMlFrame);
{{{P}}}G_State.Controls.ButtonList_Credits <=> ({{{P}}}Frame_Global.GetFirstChild("{{{P}}}button-list-credits") as CMlFrame);

{{{P}}}PendingEvents = [];

{{{P}}}G_State = {{{P}}}Private_Initialize({{{P}}}G_State);
{{{P}}}G_State = {{{P}}}Private_Enable({{{P}}}G_State, False, True);

{{{MenuButtonList::P}}}SetButtons({{{P}}}G_State.Controls.ButtonList_Credits, ["Down" => "", "Up" => _("Scroll")]);
***

***MainLoop***
***
{{{P}}}PendingEvents = [];

if ({{{P}}}G_State.IsLoadingCredits) {
	if ({{{P}}}Http::IsInitialized({{{P}}}G_State.Request_LoadCredits)) {
		{{{P}}}G_State.Request_LoadCredits = {{{P}}}Http::Update({{{P}}}G_State.Request_LoadCredits);

		if (!{{{P}}}Http::IsRunning({{{P}}}G_State.Request_LoadCredits)) {
			if ({{{P}}}Http::IsSuccess({{{P}}}G_State.Request_LoadCredits)) {
				declare {{{P}}}K_CreditSource[] CreditsSource;
				CreditsSource.fromjson({{{P}}}Http::GetResult({{{P}}}G_State.Request_LoadCredits));
				{{{P}}}G_State = {{{P}}}Private_SetCredits({{{P}}}G_State, CreditsSource);
			}
			{{{P}}}G_State.Request_LoadCredits = {{{P}}}Http::Destroy({{{P}}}G_State.Request_LoadCredits);
		}
	}
	if ({{{P}}}Http::IsInitialized({{{P}}}G_State.Request_LoadLicenses)) {
		{{{P}}}G_State.Request_LoadLicenses = {{{P}}}Http::Update({{{P}}}G_State.Request_LoadLicenses);

		if (!{{{P}}}Http::IsRunning({{{P}}}G_State.Request_LoadLicenses)) {
			if ({{{P}}}Http::IsSuccess({{{P}}}G_State.Request_LoadLicenses)) {
				{{{P}}}Private_UpdateLicenses({{{P}}}G_State, {{{P}}}Http::GetResult({{{P}}}G_State.Request_LoadLicenses));
			}
			{{{P}}}G_State.Request_LoadLicenses = {{{P}}}Http::Destroy({{{P}}}G_State.Request_LoadLicenses);
		}
	}
	{{{P}}}G_State.IsLoadingCredits = (
		{{{P}}}Http::IsInitialized({{{P}}}G_State.Request_LoadCredits) &&
		{{{P}}}Http::IsInitialized({{{P}}}G_State.Request_LoadLicenses)
	);
}

if ({{{P}}}G_State.ComponentEnabled) {
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Scroll::P}}}C_EventType_Update: {
				if (Event.Scroll == {{{P}}}G_State.Controls.Scroll_Credits) {
					foreach (Key => Frame_Element in Event.ElementsVisible) {
						{{{P}}}Private_DisplayCreditLine({{{P}}}G_State, Frame_Element, Key);
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						Frame_Element.Visible = False;
					}
				}
			}
		}
	}

	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, {{{P}}}C_NavGroup_Global)) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Up) {
						{{{Scroll::P}}}Scroll(This, {{{P}}}G_State.Controls.Scroll_Credits, -7.);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Down) {
						{{{Scroll::P}}}Scroll(This, {{{P}}}G_State.Controls.Scroll_Credits, 7.);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						{{{P}}}Private_Select({{{P}}}G_State.Controls.Button_Back);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, {{{P}}}C_NavGroup_Main)) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						{{{P}}}Private_Select(Event.To);
					} else {
						{{{P}}}Private_Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, {{{P}}}C_NavGroup_Main)) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						{{{P}}}Private_Select(Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						{{{P}}}Private_Focus(Event.From, Event.To);
					}
				}
			}
		}
	}
}
***
		""",
		[
			Navigation::ComponentV2(),
			ExpendableButton::ComponentV2(),
			Scroll::ComponentV2(),
			MenuButtonList::Component(),
			ButtonIcon::ComponentV2(),
			MenuSounds::ComponentV2()
		],
		[]
	);
}