/** 
 *	Component: Checkbox
 *	===========================
 *
 *	The `Checkbox` component was designed to be used with the `Navigation` class.
 *	With this component, the player will for example be able to check or uncheck a property or a parameter.
 *	The mouse detection zone for the navigation will automatically adapt depending on :
 *	- the size of the label (`data-labelsize`),
 *	- the size of the icon (`data-iconsize`),
 *	- their respective position inside the component (`data-***xpos`, `data-***ypos`)
 *
 *	Events
 *	----------
 *	- C_EventType_Check
 *
 *	Parameters
 *	----------
 *	- data-halign
 *	- data-valign
 *	- data-opacityfocus
 *	- data-opacityunfocus
 *	- data-iconsize
 *	- data-iconcolor
 *	- data-iconfocuscolor
 *	- data-iconchecked
 *	- data-iconunchecked
 *	- data-iconxpos <= Ratio (0;1)
 *	- data-iconypos <= Ratio (0;1)
 *	- data-text
 *	- data-textsize
 *	- data-textprefix
 *	- data-textfont
 *	- data-textcolor
 *	- data-textfocuscolor
 *	- data-textxpos <= Ratio (0;1)
 *	- data-textypos <= Ratio (0;1)
 *	- data-texthalign
 *	- data-textvalign
 *	- data-textitalicslope
 *	- data-textmirror : (Text) Add a text in mirror of the first one (for now works for text in mirror of a centered icon, texts will be at the right and left of the icon)
 *	- data-labelsize
 *	- data-checked
 *	- data-fitlabel : Real (must superior to 0.) If a value is provided the textsize will be reduce until the text fit in the label or reach the provided value
 *	- data-autonewline
 *	- data-maxline
 *	- data-adaptlabelsize : adapt the size of the label depending on the width of the text. If enabled, the 'data-labelsize' will be the maximum size of the label.
 *	- data-tts-oncheck : trigger a TTS focus when the checkbox is checked/uncheked (True by default)
 */
#Const Version		"2023-03-30"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Components/Checkbox.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_TextProperties {
	Text Value;
	Real TextSize;
	Text TextPrefix;
	Text Font;
	Vec3 Color;
	Vec3 FocusColor;
	Real PosX;
	Real PosY;
	Text HAlign;
	Text VAlign;
	Real ItalicSlope;
	Vec2 Size;
	Real Fit;
	Boolean AutoNewLine;
	Integer MaxLine;
	Boolean IsLabelSizeAdaptable;
}

#Struct K_ImageProperties {
	Vec2 Size;
	Vec3 Color;
	Vec3 FocusColor;
	Real PosX;
	Real PosY;
	Text ImageChecked;
	Text ImageUnchecked;
}

#Struct K_Checkbox {
	Text HAlign;
	Text VAlign;
	Boolean IsCheckbox;
	Boolean IsChecked;
	Boolean IsLocked;
	Boolean IsFocused;
	Boolean IsTTSFocusedOnCheck;
	Real OpacityFocus;
	Real OpacityUnfocus;
	K_TextProperties Label;
	K_ImageProperties Icon;
	Text LabelMirrorValue;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Checkbox_Null K_Checkbox {
	IsCheckbox = False
}

#Const C_Name "component-checkbox" //< Component name
#Const P "TMNext_Checkbox::" //< Prefix used to differentiate functions/variables in the script
#Const Q "TMNext_Checkbox"
#Const C_NavZone "tmnext-checkbox_quad-activation"

#Const C_Class_FrameContainerCheckbox "tmnext-checkbox_frame-container-checkbox"
#Const C_Id_FrameCheckboxAlign "tmnext-checkbox_frame-checkbox-align"
#Const C_Id_QuadIcon "tmnext-checkbox_quad-icon"
#Const C_Id_LabelCheckbox "tmnext-checkbox_label-checkbox"
#Const C_Id_LabelMirrorCheckbox "tmnext-checkbox_label-mirror-checkbox"

#Const C_DefaultTextPrefix "$t$i"
//L16N [Checkbox] Text pronounced when focusing a checked box
#Const C_TTS_SwitchButton _("|Checkbox|Switch button")
//L16N [Checkbox] Text pronounced when focusing a checked box
#Const C_TTS_Checked _("|Checkbox|Checkbox activated")
//L16N [Checkbox] Text pronounced when focusing an unchecked box
#Const C_TTS_Unchecked _("|Checkbox|Checkbox deactivated")

#Const C_EventType_Check 0
#Const C_FocusAnimDuration 250

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text GetManialink() {
	return """
<frame id="{{{C_Id_FrameCheckboxAlign}}}" class="{{{C_Class_FrameContainerCheckbox}}}">
	<quad id="{{{C_NavZone}}}" class="{{{Navigation::C_Class_ActivationZone}}}" halign="center" valign="center" z-index="1" opacity="0" scriptevents="1"/>
	<quad id="{{{C_Id_QuadIcon}}}" bgcolor="FFF" halign="center" valign="center" size="7 7" />
	<label id="{{{C_Id_LabelCheckbox}}}" size="50 10" halign="center" valign="center2" textsize="3" textcolor="FFF" textprefix="{{{C_DefaultTextPrefix}}}" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
	<label id="{{{C_Id_LabelMirrorCheckbox}}}" size="50 10" halign="center" valign="center2" textsize="3" textcolor="FFF" textprefix="{{{C_DefaultTextPrefix}}}" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
</frame>
	""";
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Update the component's opacity
Void ApplyOpacityAndColor(CMlScript _This, CMlFrame _Frame_Checkbox, Boolean _IsAnimated) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	assert(TMNext_Checkbox_Checkbox.IsCheckbox, "Control '"^_Frame_Checkbox.ControlId^"' is not a checkbox");

	declare CMlLabel Label_Checkbox <=> (_Frame_Checkbox.GetFirstChild(C_Id_LabelCheckbox) as CMlLabel);
	declare CMlLabel LabelMirror_Checkbox <=> (_Frame_Checkbox.GetFirstChild(C_Id_LabelMirrorCheckbox) as CMlLabel);
	declare CMlQuad Quad_Icon <=> (_Frame_Checkbox.GetFirstChild(C_Id_QuadIcon) as CMlQuad);

	_This.AnimMgr.Flush(Label_Checkbox);
	_This.AnimMgr.Flush(LabelMirror_Checkbox);
	_This.AnimMgr.Flush(Quad_Icon);

	if (TMNext_Checkbox_Checkbox.IsLocked) {
		if (_IsAnimated) {
			_This.AnimMgr.Add(Quad_Icon, "<anim colorize=\""^CL::RgbToHex6(TMNext_Checkbox_Checkbox.Icon.Color)^"\" opacity=\"0.5\"/>", C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			_This.AnimMgr.Add(Label_Checkbox, "<anim textcolor=\""^CL::RgbToHex6(TMNext_Checkbox_Checkbox.Label.Color)^"\" opacity=\"0.5\" />", C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			if (TMNext_Checkbox_Checkbox.LabelMirrorValue != "") {
				_This.AnimMgr.Add(LabelMirror_Checkbox, "<anim textcolor=\""^CL::RgbToHex6(TMNext_Checkbox_Checkbox.Label.Color)^"\" opacity=\"0.5\" />", C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		} else {
			Quad_Icon.Colorize = TMNext_Checkbox_Checkbox.Icon.Color;
			Quad_Icon.Opacity = 0.5;
			Label_Checkbox.TextColor = TMNext_Checkbox_Checkbox.Label.Color;
			Label_Checkbox.Opacity = 0.5;
			if (TMNext_Checkbox_Checkbox.LabelMirrorValue != "") {
				LabelMirror_Checkbox.TextColor = TMNext_Checkbox_Checkbox.Label.Color;
				LabelMirror_Checkbox.Opacity = 0.5;
			}
		}
	} else if (TMNext_Checkbox_Checkbox.IsFocused) {
		if (_IsAnimated) {
			_This.AnimMgr.Add(Quad_Icon, "<anim colorize=\""^CL::RgbToHex6(TMNext_Checkbox_Checkbox.Icon.FocusColor)^"\" opacity=\""^TMNext_Checkbox_Checkbox.OpacityFocus^"\" />", C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			_This.AnimMgr.Add(Label_Checkbox, "<anim textcolor=\""^CL::RgbToHex6(TMNext_Checkbox_Checkbox.Label.FocusColor)^"\" opacity=\""^TMNext_Checkbox_Checkbox.OpacityFocus^"\" />", C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);	
			if (TMNext_Checkbox_Checkbox.LabelMirrorValue != "") {
				_This.AnimMgr.Add(LabelMirror_Checkbox, "<anim textcolor=\""^CL::RgbToHex6(TMNext_Checkbox_Checkbox.Label.FocusColor)^"\" opacity=\""^TMNext_Checkbox_Checkbox.OpacityFocus^"\" />", C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		} else {
			Quad_Icon.Colorize = TMNext_Checkbox_Checkbox.Icon.FocusColor;
			Quad_Icon.Opacity = TMNext_Checkbox_Checkbox.OpacityFocus;
			Label_Checkbox.TextColor = TMNext_Checkbox_Checkbox.Label.FocusColor;
			Label_Checkbox.Opacity = TMNext_Checkbox_Checkbox.OpacityFocus;
			if (TMNext_Checkbox_Checkbox.LabelMirrorValue != "") {
				LabelMirror_Checkbox.TextColor = TMNext_Checkbox_Checkbox.Label.FocusColor;
				LabelMirror_Checkbox.Opacity = TMNext_Checkbox_Checkbox.OpacityFocus;
			}
		}
	} else if (_IsAnimated) {
		_This.AnimMgr.Add(Quad_Icon, "<anim colorize=\""^CL::RgbToHex6(TMNext_Checkbox_Checkbox.Icon.Color)^"\" opacity=\""^TMNext_Checkbox_Checkbox.OpacityUnfocus^"\" />", C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Label_Checkbox, "<anim textcolor=\""^CL::RgbToHex6(TMNext_Checkbox_Checkbox.Label.Color)^"\" opacity=\""^TMNext_Checkbox_Checkbox.OpacityUnfocus^"\" />", C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		if (TMNext_Checkbox_Checkbox.LabelMirrorValue != "") {
			_This.AnimMgr.Add(LabelMirror_Checkbox, "<anim textcolor=\""^CL::RgbToHex6(TMNext_Checkbox_Checkbox.Label.Color)^"\" opacity=\""^TMNext_Checkbox_Checkbox.OpacityUnfocus^"\" />", C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	} else {
		Quad_Icon.Colorize = TMNext_Checkbox_Checkbox.Icon.Color;
		Quad_Icon.Opacity = TMNext_Checkbox_Checkbox.OpacityUnfocus;
		Label_Checkbox.TextColor = TMNext_Checkbox_Checkbox.Label.Color;
		Label_Checkbox.Opacity = TMNext_Checkbox_Checkbox.OpacityUnfocus;
		if (TMNext_Checkbox_Checkbox.LabelMirrorValue != "") {
			LabelMirror_Checkbox.TextColor = TMNext_Checkbox_Checkbox.Label.Color;
			LabelMirror_Checkbox.Opacity = TMNext_Checkbox_Checkbox.OpacityUnfocus;
		}
	}
}
Void ApplyOpacityAndColor(CMlScript _This, CMlFrame _Frame_Checkbox) {
	ApplyOpacityAndColor(_This, _Frame_Checkbox, True);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	The component is focused by the Navigation component
Void Focus(CMlScript _This, CMlFrame _Frame_Checkbox, Boolean _IsTTSFocused, Boolean _IsAnimated) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	assert(TMNext_Checkbox_Checkbox.IsCheckbox, "Control '"^_Frame_Checkbox.ControlId^"' is not a checkbox");
	if (TMNext_Checkbox_Checkbox.IsLocked) return;

	TMNext_Checkbox_Checkbox.IsFocused = True;
	ApplyOpacityAndColor(_This, _Frame_Checkbox, _IsAnimated);
	if (_IsTTSFocused) (_Frame_Checkbox.GetFirstChild(C_Id_LabelCheckbox) as CMlLabel).TTS_Focus();
	else (_Frame_Checkbox.GetFirstChild(C_Id_LabelCheckbox) as CMlLabel).TTS_Unfocus();
}
Void Focus(CMlScript _This, CMlFrame _Frame_Checkbox, Boolean _IsAnimated) {
	Focus(_This, _Frame_Checkbox, True, _IsAnimated);
}
Void Focus(CMlScript _This, CMlFrame _Frame_Checkbox) {
	Focus(_This, _Frame_Checkbox, True);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	The component is unfocused by the Navigation component
Void Unfocus(CMlScript _This, CMlFrame _Frame_Checkbox, Boolean _IsAnimated) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	assert(TMNext_Checkbox_Checkbox.IsCheckbox, "Control '"^_Frame_Checkbox.ControlId^"' is not a checkbox");
	if (TMNext_Checkbox_Checkbox.IsLocked) return;

	TMNext_Checkbox_Checkbox.IsFocused = False;
	ApplyOpacityAndColor(_This, _Frame_Checkbox, _IsAnimated);
	(_Frame_Checkbox.GetFirstChild(C_Id_LabelCheckbox) as CMlLabel).TTS_Unfocus();
}
Void Unfocus(CMlScript _This, CMlFrame _Frame_Checkbox) {
	Unfocus(_This, _Frame_Checkbox, True);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Apply a locked or unlocked appearance to the component (will not lock/unlock the navigation)
Void Lock(CMlScript _This, CMlFrame _Frame_Checkbox, Boolean _IsLocked) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	assert(TMNext_Checkbox_Checkbox.IsCheckbox, "Control '"^_Frame_Checkbox.ControlId^"' is not a checkbox");

	TMNext_Checkbox_Checkbox.IsLocked = _IsLocked;
	ApplyOpacityAndColor(_This, _Frame_Checkbox);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Apply all the properties to the component
Void ApplyProperties(CMlScript _This, CMlFrame _Frame_Checkbox, K_Checkbox _Properties) {
	declare CMlFrame Frame_Align <=> (_Frame_Checkbox.GetFirstChild(C_Id_FrameCheckboxAlign) as CMlFrame);
	declare CMlLabel Label_Checkbox <=> (_Frame_Checkbox.GetFirstChild(C_Id_LabelCheckbox) as CMlLabel);
	declare CMlLabel Label_MirrorCheckbox <=> (_Frame_Checkbox.GetFirstChild(C_Id_LabelMirrorCheckbox) as CMlLabel);
	declare CMlQuad Quad_Icon <=> (_Frame_Checkbox.GetFirstChild(C_Id_QuadIcon) as CMlQuad);
	declare CMlQuad Quad_Activation <=> (_Frame_Checkbox.GetFirstChild(C_NavZone) as CMlQuad);

	Label_Checkbox.Value = _Properties.Label.Value;
	Label_Checkbox.TextSizeReal = _Properties.Label.TextSize;
	Label_Checkbox.TextPrefix = _Properties.Label.TextPrefix;
	Label_Checkbox.TextFont = _Properties.Label.Font;
	Label_Checkbox.HorizontalAlign = Tools::TextToHAlign(_Properties.Label.HAlign);
	Label_Checkbox.VerticalAlign = Tools::TextToVAlign(_Properties.Label.VAlign);
	Label_Checkbox.ItalicSlope = _Properties.Label.ItalicSlope;
	Label_Checkbox.AutoNewLine = _Properties.Label.AutoNewLine;
	Label_Checkbox.MaxLine = _Properties.Label.MaxLine;
	if (_Properties.Label.IsLabelSizeAdaptable) {
		Label_Checkbox.Size = <ML::Min(Label_Checkbox.ComputeWidth(TL::GetTranslatedText(Label_Checkbox.Value), False), _Properties.Label.Size.X), _Properties.Label.Size.Y>;
	} else {
		Label_Checkbox.Size = _Properties.Label.Size;
	}

	if (_Properties.LabelMirrorValue == "") {
		Label_MirrorCheckbox.Value = "";
		Label_MirrorCheckbox.Size = <0., 0.>;
	} else {
		Label_MirrorCheckbox.Value = _Properties.LabelMirrorValue;
		Label_MirrorCheckbox.TextSizeReal = _Properties.Label.TextSize;
		Label_MirrorCheckbox.TextPrefix = _Properties.Label.TextPrefix;
		Label_MirrorCheckbox.TextFont = _Properties.Label.Font;
		Label_MirrorCheckbox.HorizontalAlign = Tools::MirrorHAlign(Label_Checkbox.HorizontalAlign);
		Label_MirrorCheckbox.VerticalAlign = Tools::MirrorVAlign(Label_Checkbox.VerticalAlign);
		Label_MirrorCheckbox.ItalicSlope = _Properties.Label.ItalicSlope;
		if (_Properties.Label.IsLabelSizeAdaptable) {
			Label_MirrorCheckbox.Size = <ML::Min(Label_MirrorCheckbox.ComputeWidth(TL::GetTranslatedText(Label_MirrorCheckbox.Value), False), _Properties.Label.Size.X), _Properties.Label.Size.Y>;
		} else {
			Label_MirrorCheckbox.Size = _Properties.Label.Size;
		}
	}

	// Text to speech
	if (_Properties.IsChecked) {
		if (_Properties.LabelMirrorValue != "") { //< switch button
			Label_Checkbox.TTS_AltText = TL::Compose("%1 %2", C_TTS_SwitchButton, _Properties.Label.Value);
		} else {
			Label_Checkbox.TTS_AltText = TL::Compose("%1 %2", _Properties.Label.Value, C_TTS_Checked);
		}
	} else {
		if (_Properties.LabelMirrorValue != "") { //< switch button
			Label_Checkbox.TTS_AltText = TL::Compose("%1 %2", C_TTS_SwitchButton, _Properties.LabelMirrorValue);
		} else {
			Label_Checkbox.TTS_AltText = TL::Compose("%1 %2", _Properties.Label.Value, C_TTS_Unchecked);
		}
	}

	Quad_Icon.Size = _Properties.Icon.Size;

	ApplyOpacityAndColor(_This, _Frame_Checkbox, False);

	/* Check state */
	if (_Properties.IsChecked && _Properties.Icon.ImageChecked != "") {
		Quad_Icon.ChangeImageUrl(_Properties.Icon.ImageChecked);
		Quad_Icon.Visible = True;
	} else if (!_Properties.IsChecked && _Properties.Icon.ImageUnchecked != "") {
		Quad_Icon.ChangeImageUrl(_Properties.Icon.ImageUnchecked);
		Quad_Icon.Visible = True;
	} else {
		Quad_Icon.Visible = False;
	}

	/* Position */
	declare Vec2 SizeOfReference = <ML::Max(_Properties.Label.Size.X, Quad_Icon.Size.X), ML::Max(Label_Checkbox.Size.Y, Quad_Icon.Size.Y)>;
	Quad_Icon.RelativePosition_V3 = <SizeOfReference.X * (_Properties.Icon.PosX-0.5), SizeOfReference.Y * (_Properties.Icon.PosY-0.5)>;
	Label_Checkbox.RelativePosition_V3 = <SizeOfReference.X * (_Properties.Label.PosX-0.5), SizeOfReference.Y * (_Properties.Label.PosY-0.5)>;
	if (Label_MirrorCheckbox.Value != "") Label_MirrorCheckbox.RelativePosition_V3 = <SizeOfReference.X * (1-_Properties.Label.PosX-0.5), SizeOfReference.Y * (1-_Properties.Label.PosY-0.5)>;

	/* Get the center pos of the label depending on its alignment */
	declare Vec2 Pos_LabelCenter = Label_Checkbox.RelativePosition_V3;
	switch (Label_Checkbox.HorizontalAlign) {
		case CMlControl::AlignHorizontal::Left: Pos_LabelCenter.X += Label_Checkbox.Size.X/2;
		case CMlControl::AlignHorizontal::Right: Pos_LabelCenter.X -= Label_Checkbox.Size.X/2;
	}
	switch (Label_Checkbox.VerticalAlign) {
		case CMlControl::AlignVertical::Top: Pos_LabelCenter.Y -= Label_Checkbox.Size.Y/2;
		case CMlControl::AlignVertical::Bottom: Pos_LabelCenter.Y += Label_Checkbox.Size.Y/2;
	}

	/* Activation zone */
	if (_Properties.Label.IsLabelSizeAdaptable) SizeOfReference = <ML::Max(Label_Checkbox.Size.X, Quad_Icon.Size.X), ML::Max(Label_Checkbox.Size.Y, Quad_Icon.Size.Y)>;
	if (Label_MirrorCheckbox.Value == "") {
		Quad_Activation.Size.X = ML::Max(SizeOfReference.X, Quad_Icon.Size.X/2 + ML::Abs(Quad_Icon.RelativePosition_V3.X - Pos_LabelCenter.X) + Label_Checkbox.Size.X/2);
		Quad_Activation.Size.Y = ML::Max(SizeOfReference.Y, Quad_Icon.Size.Y/2 + ML::Abs(Quad_Icon.RelativePosition_V3.Y - Pos_LabelCenter.Y) + Label_Checkbox.Size.Y/2);
		Quad_Activation.RelativePosition_V3 = Quad_Icon.RelativePosition_V3;
		if (Quad_Icon.RelativePosition_V3.X < Pos_LabelCenter.X) {
			Quad_Activation.RelativePosition_V3.X = ((Quad_Icon.RelativePosition_V3.X - Quad_Icon.Size.X*0.5) + (Pos_LabelCenter.X + Label_Checkbox.Size.X*0.5))*0.5;
		} else if (Quad_Icon.RelativePosition_V3.X > Pos_LabelCenter.X) {
			Quad_Activation.RelativePosition_V3.X = ((Pos_LabelCenter.X - Label_Checkbox.Size.X*0.5) + (Quad_Icon.RelativePosition_V3.X + Quad_Icon.Size.X*0.5))*0.5;
		}
		if (Quad_Icon.RelativePosition_V3.Y < Pos_LabelCenter.Y) {
			Quad_Activation.RelativePosition_V3.Y = ((Quad_Icon.RelativePosition_V3.Y - Quad_Icon.Size.Y*0.5) + (Pos_LabelCenter.Y + Label_Checkbox.Size.Y*0.5))*0.5;
		} else if (Quad_Icon.RelativePosition_V3.Y > Pos_LabelCenter.Y) {
			Quad_Activation.RelativePosition_V3.Y = ((Pos_LabelCenter.Y - Label_Checkbox.Size.Y*0.5) + (Quad_Icon.RelativePosition_V3.Y + Quad_Icon.Size.Y*0.5))*0.5;
		}
	} else {
		declare Real Margin = ML::Abs(Quad_Icon.RelativePosition_V3.X - Pos_LabelCenter.X) - Quad_Icon.Size.X/2 - Label_Checkbox.Size.X/2;
		Quad_Activation.Size.X = ML::Max(SizeOfReference.X * 2, Quad_Icon.Size.X + (2 * Margin) + (2 * Label_Checkbox.Size.X));
		Quad_Activation.Size.Y = SizeOfReference.Y;
		Quad_Activation.RelativePosition_V3.X = Quad_Icon.RelativePosition_V3.X;
		Quad_Activation.RelativePosition_V3.Y = Quad_Icon.RelativePosition_V3.Y;
	}

	/* Align */
	Tools::Align(Frame_Align, Quad_Activation.Size, _Properties.HAlign, _Properties.VAlign);
	Frame_Align.RelativePosition_V3 -= Quad_Activation.RelativePosition_V3; //< Adjust the offset created by the label

	/* Fit - Apply after every other label properties, especially its size */
	if (_Properties.Label.Fit > 0.) {
		Tools::FitLabelValue(Label_Checkbox, _Properties.Label.Fit, 0.25);
		if (Label_MirrorCheckbox.Value != "") Tools::FitLabelValue(Label_MirrorCheckbox, _Properties.Label.Fit, 0.25);
	}
}
Void ApplyProperties(CMlScript _This, CMlFrame _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Special component actions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean Check(CMlScript _This, CMlFrame _Frame_Checkbox, Boolean _IsChecked, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	assert(TMNext_Checkbox_Checkbox.IsCheckbox, "Control '"^_Frame_Checkbox.ControlId^"' is not a checkbox");
	if (TMNext_Checkbox_Checkbox.IsLocked) return TMNext_Checkbox_Checkbox.IsChecked;
	declare Boolean IsTTSFocused = TMNext_Checkbox_Checkbox.IsChecked != _IsChecked && TMNext_Checkbox_Checkbox.IsTTSFocusedOnCheck;

	TMNext_Checkbox_Checkbox.IsChecked = _IsChecked;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
	
	if (IsTTSFocused) { //< Trigger TTS focus after component update
		(_Frame_Checkbox.GetFirstChild(C_Id_LabelCheckbox) as CMlLabel).TTS_Focus();
	}

	return TMNext_Checkbox_Checkbox.IsChecked;
}
Boolean Check(CMlScript _This, CMlFrame _Frame_Checkbox, Boolean _IsChecked) {
	return Check(_This, _Frame_Checkbox, _IsChecked, True);
}

Boolean Toggle(CMlScript _This, CMlFrame _Frame_Checkbox, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return Check(_This, _Frame_Checkbox, !TMNext_Checkbox_Checkbox.IsChecked, _ApplyProperties);
}
Boolean Toggle(CMlScript _This, CMlFrame _Frame_Checkbox) {
	return Toggle(_This, _Frame_Checkbox, True);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Setters
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void SetValue(CMlScript _This, CMlFrame _Frame_Checkbox, Text _Value, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.Value = _Value;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetValue(CMlScript _This, CMlFrame _Frame_Checkbox, Text _Value) {
	SetValue(_This, _Frame_Checkbox, _Value, True);
}
Void SetMirrorValue(CMlScript _This, CMlFrame _Frame_Checkbox, Text _MirrorValue, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.LabelMirrorValue = _MirrorValue;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetMirrorValue(CMlScript _This, CMlFrame _Frame_Checkbox, Text _MirrorValue) {
	SetMirrorValue(_This, _Frame_Checkbox, _MirrorValue, True);
}
Void SetTextSize(CMlScript _This, CMlFrame _Frame_Checkbox, Real _TextSize, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.TextSize = _TextSize;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetTextSize(CMlScript _This, CMlFrame _Frame_Checkbox, Real _TextSize) {
	SetTextSize(_This, _Frame_Checkbox, _TextSize, True);
}
Void SetTextPrefix(CMlScript _This, CMlFrame _Frame_Checkbox, Text _TextPrefix, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.TextPrefix = _TextPrefix;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetTextPrefix(CMlScript _This, CMlFrame _Frame_Checkbox, Text _TextPrefix) {
	SetTextPrefix(_This, _Frame_Checkbox, _TextPrefix, True);
}
Void SetTextFont(CMlScript _This, CMlFrame _Frame_Checkbox, Text _TextFont, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.Font = _TextFont;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetTextFont(CMlScript _This, CMlFrame _Frame_Checkbox, Text _TextFont) {
	SetTextFont(_This, _Frame_Checkbox, _TextFont, True);
}
Void SetTextColor(CMlScript _This, CMlFrame _Frame_Checkbox, Vec3 _TextColor, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.Color = _TextColor;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetTextColor(CMlScript _This, CMlFrame _Frame_Checkbox, Vec3 _TextColor) {
	SetTextColor(_This, _Frame_Checkbox, _TextColor, True);
}
Void SetTextFocusColor(CMlScript _This, CMlFrame _Frame_Checkbox, Vec3 _TextFocusColor, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.FocusColor = _TextFocusColor;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetTextFocusColor(CMlScript _This, CMlFrame _Frame_Checkbox, Vec3 _TextFocusColor) {
	SetTextFocusColor(_This, _Frame_Checkbox, _TextFocusColor, True);
}
Void SetTextXPos(CMlScript _This, CMlFrame _Frame_Checkbox, Real _TextXPos, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.PosX = _TextXPos;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetTextXPos(CMlScript _This, CMlFrame _Frame_Checkbox, Real _TextXPos) {
	SetTextXPos(_This, _Frame_Checkbox, _TextXPos, True);
}
Void SetTextYPos(CMlScript _This, CMlFrame _Frame_Checkbox, Real _TextYPos, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.PosY = _TextYPos;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetTextYPos(CMlScript _This, CMlFrame _Frame_Checkbox, Real _TextYPos) {
	SetTextYPos(_This, _Frame_Checkbox, _TextYPos, True);
}
Void SetTextHAlign(CMlScript _This, CMlFrame _Frame_Checkbox, Text _HAlign, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.HAlign = _HAlign;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetTextHAlign(CMlScript _This, CMlFrame _Frame_Checkbox, Text _HAlign) {
	SetTextHAlign(_This, _Frame_Checkbox, _HAlign, True);
}
Void SetTextVAlign(CMlScript _This, CMlFrame _Frame_Checkbox, Text _VAlign, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.VAlign = _VAlign;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetTextVAlign(CMlScript _This, CMlFrame _Frame_Checkbox, Text _VAlign) {
	SetTextVAlign(_This, _Frame_Checkbox, _VAlign, True);
}
Void SetTextItalicSlope(CMlScript _This, CMlFrame _Frame_Checkbox, Real _ItalicSlope, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.ItalicSlope = _ItalicSlope;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetTextItalicSlope(CMlScript _This, CMlFrame _Frame_Checkbox, Real _ItalicSlope) {
	SetTextItalicSlope(_This, _Frame_Checkbox, _ItalicSlope, True);
}
Void SetLabelSize(CMlScript _This, CMlFrame _Frame_Checkbox, Vec2 _LabelSize, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.Size = _LabelSize;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetLabelSize(CMlScript _This, CMlFrame _Frame_Checkbox, Vec2 _LabelSize) {
	SetLabelSize(_This, _Frame_Checkbox, _LabelSize, True);
}
Void SetFitLabel(CMlScript _This, CMlFrame _Frame_Checkbox, Real _MinTextSize, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.Fit = _MinTextSize;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetFitLabel(CMlScript _This, CMlFrame _Frame_Checkbox, Real _MinTextSize) {
	SetFitLabel(_This, _Frame_Checkbox, _MinTextSize, True);
}
Void SetIsLabelSizeAdaptable(CMlScript _This, CMlFrame _Frame_Checkbox, Boolean _IsLabelSizeAdaptable, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Label.IsLabelSizeAdaptable = _IsLabelSizeAdaptable;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetIsLabelSizeAdaptable(CMlScript _This, CMlFrame _Frame_Checkbox, Boolean _IsLabelSizeAdaptable) {
	SetIsLabelSizeAdaptable(_This, _Frame_Checkbox, _IsLabelSizeAdaptable, True);
}
Void SetIconSize(CMlScript _This, CMlFrame _Frame_Checkbox, Vec2 _Size, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Icon.Size = _Size;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetIconSize(CMlScript _This, CMlFrame _Frame_Checkbox, Vec2 _Size) {
	SetIconSize(_This, _Frame_Checkbox, _Size, True);
}
Void SetIconColor(CMlScript _This, CMlFrame _Frame_Checkbox, Vec3 _Color, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Icon.Color = _Color;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetIconColor(CMlScript _This, CMlFrame _Frame_Checkbox, Vec3 _Color) {
	SetIconColor(_This, _Frame_Checkbox, _Color, True);
}
Void SetIconFocusColor(CMlScript _This, CMlFrame _Frame_Checkbox, Vec3 _FocusColor, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Icon.FocusColor = _FocusColor;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetIconFocusColor(CMlScript _This, CMlFrame _Frame_Checkbox, Vec3 _FocusColor) {
	SetIconFocusColor(_This, _Frame_Checkbox, _FocusColor, True);
}
Void SetIconXPos(CMlScript _This, CMlFrame _Frame_Checkbox, Real _IconXPos, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Icon.PosX = _IconXPos;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetIconXPos(CMlScript _This, CMlFrame _Frame_Checkbox, Real _IconXPos) {
	SetIconXPos(_This, _Frame_Checkbox, _IconXPos, True);
}
Void SetIconYPos(CMlScript _This, CMlFrame _Frame_Checkbox, Real _IconYPos, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Icon.PosY = _IconYPos;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetIconYPos(CMlScript _This, CMlFrame _Frame_Checkbox, Real _IconYPos) {
	SetIconYPos(_This, _Frame_Checkbox, _IconYPos, True);
}
Void SetIconChecked(CMlScript _This, CMlFrame _Frame_Checkbox, Text _ImageUrl, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Icon.ImageChecked = _ImageUrl;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetIconChecked(CMlScript _This, CMlFrame _Frame_Checkbox, Text _ImageUrl) {
	SetIconChecked(_This, _Frame_Checkbox, _ImageUrl, True);
}
Void SetIconUnchecked(CMlScript _This, CMlFrame _Frame_Checkbox, Text _ImageUrl, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.Icon.ImageUnchecked = _ImageUrl;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetIconUnchecked(CMlScript _This, CMlFrame _Frame_Checkbox, Text _ImageUrl) {
	SetIconUnchecked(_This, _Frame_Checkbox, _ImageUrl, True);
}
Void SetHAlign(CMlScript _This, CMlFrame _Frame_Checkbox, Text _HAlign, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.HAlign = _HAlign;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetHAlign(CMlScript _This, CMlFrame _Frame_Checkbox, Text _HAlign) {
	SetHAlign(_This, _Frame_Checkbox, _HAlign, True);
}
Void SetVAlign(CMlScript _This, CMlFrame _Frame_Checkbox, Text _VAlign, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.VAlign = _VAlign;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetVAlign(CMlScript _This, CMlFrame _Frame_Checkbox, Text _VAlign) {
	SetVAlign(_This, _Frame_Checkbox, _VAlign, True);
}
Void SetOpacityFocus(CMlScript _This, CMlFrame _Frame_Checkbox, Real _Opacity, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.OpacityFocus = _Opacity;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetOpacityFocus(CMlScript _This, CMlFrame _Frame_Checkbox, Real _Opacity) {
	SetOpacityFocus(_This, _Frame_Checkbox, _Opacity, True);
}
Void SetOpacityUnfocus(CMlScript _This, CMlFrame _Frame_Checkbox, Real _Opacity, Boolean _ApplyProperties) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox.OpacityUnfocus = _Opacity;
	if (_ApplyProperties) ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
}
Void SetOpacityUnfocus(CMlScript _This, CMlFrame _Frame_Checkbox, Real _Opacity) {
	SetOpacityUnfocus(_This, _Frame_Checkbox, _Opacity, True);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Getters
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean IsChecked(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.IsChecked;
}

Boolean IsCheckbox(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.IsCheckbox;
}

Boolean IsCheckboxTrigger(CMlControl _Control_Trigger) {
	return (_Control_Trigger != Null && _Control_Trigger.ControlId == C_NavZone);
}

CMlFrame GetCheckboxFromTrigger(CMlControl _Control_Trigger) {
	declare CMlFrame TMNext_Checkbox_ParentCheckbox for _Control_Trigger = Null;
	return TMNext_Checkbox_ParentCheckbox;
}
CMlLabel GetLabel(CMlFrame _Frame_Checkbox) {
	return (_Frame_Checkbox.GetFirstChild(C_Id_LabelCheckbox) as CMlLabel);
}
Text GetValue(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.Value;
}
Text GetMirrorValue(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.LabelMirrorValue;
}
Real GetTextSize(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.TextSize;
}
Text GetTextPrefix(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.TextPrefix;
}
Text GetTextFont(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.Font;
}
Vec3 GetTextColor(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.Color;
}
Vec3 GetTextFocusColor(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.FocusColor;
}
Real GetTextXPos(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.PosX;
}
Real GetTextYPos(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.PosY;
}
Text GetTextHAlign(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.HAlign;
}
Text GetTextVAlign(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.VAlign;
}
Real GetTextItalicSlope(CMlFrame _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.ItalicSlope;
}
Vec2 GetLabelSize(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.Size;
}
Real GetFitLabel(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.Fit;
}
Boolean GetIsLabelSizeAdaptable(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Label.IsLabelSizeAdaptable;
}
Vec2 GetIconSize(CMlFrame _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Icon.Size;
}
Vec3 GetIconColor(CMlFrame _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Icon.Color;
}
Vec3 GetIconFocusColor(CMlFrame _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Icon.FocusColor;
}
Real GetIconXPos(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Icon.PosX;
}
Real GetIconYPos(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Icon.PosY;
}
Text GetIconChecked(CMlFrame _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Icon.ImageChecked;
}
Text GetIconUnchecked(CMlFrame _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.Icon.ImageUnchecked;
}
Text GetHAlign(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.HAlign;
}
Text GetVAlign(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.VAlign;
}
Real GetOpacityFocus(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.OpacityFocus;
}
Real GetOpacityUnfocus(CMlControl _Frame_Checkbox) {
	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	return TMNext_Checkbox_Checkbox.OpacityUnfocus;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Initialize the component
Void InitCheckbox(CMlScript _This, CMlFrame _Frame_Checkbox)	{
	if (_Frame_Checkbox == Null) return;

	declare CMlLabel Label_Checkbox <=> (_Frame_Checkbox.GetFirstChild(C_Id_LabelCheckbox) as CMlLabel);
	declare CMlQuad Quad_Activation <=> (_Frame_Checkbox.GetFirstChild(C_NavZone) as CMlQuad);
	declare CMlQuad Quad_Icon <=> (_Frame_Checkbox.GetFirstChild(C_Id_QuadIcon) as CMlQuad);

	declare K_Checkbox TMNext_Checkbox_Checkbox for _Frame_Checkbox = C_Checkbox_Null;
	TMNext_Checkbox_Checkbox = K_Checkbox {
		IsCheckbox = True,
		IsChecked = False,
		IsLocked = False,
		IsFocused = False,
		IsTTSFocusedOnCheck = True,
		OpacityFocus = 1.,
		OpacityUnfocus = 1.,
		HAlign = Tools::C_HAlign_Center,
		VAlign = Tools::C_VAlign_Center,
		Label = K_TextProperties {
			Value = "",
			TextSize = Label_Checkbox.TextSizeReal,
			TextPrefix = C_DefaultTextPrefix,
			Font = Label_Checkbox.TextFont,
			Color = Label_Checkbox.TextColor,
			FocusColor = Label_Checkbox.TextColor,
			PosX = 0.5,
			PosY = 0.5,
			HAlign = "center",
			VAlign = "center2",
			ItalicSlope = 0.,
			Fit = -1.,
			Size = <0., 0.>,
			AutoNewLine = False,
			MaxLine = -1,
			IsLabelSizeAdaptable = False
		},
		Icon = K_ImageProperties {
			Size = Quad_Icon.Size,
			Color = Quad_Icon.BgColor,
			FocusColor = Quad_Icon.BgColor,
			PosX = 0.5,
			PosY = 0.5,
			ImageChecked = Quad_Icon.ImageUrl,
			ImageUnchecked = Quad_Icon.ImageUrl
		}
	};

	// Initialize the checkbox state
	if (_Frame_Checkbox.DataAttributeExists("checked")) {
		TMNext_Checkbox_Checkbox.IsChecked = Tools::GetBooleanAttribute(_Frame_Checkbox, "checked");
	}
	if (_Frame_Checkbox.DataAttributeExists("tts-oncheck")) {
		TMNext_Checkbox_Checkbox.IsTTSFocusedOnCheck = Tools::GetBooleanAttribute(_Frame_Checkbox, "tts-oncheck");
	}
	if (_Frame_Checkbox.DataAttributeExists("halign")) {
		TMNext_Checkbox_Checkbox.HAlign = _Frame_Checkbox.DataAttributeGet("halign");
	}
	if (_Frame_Checkbox.DataAttributeExists("valign")) {
		TMNext_Checkbox_Checkbox.VAlign = _Frame_Checkbox.DataAttributeGet("valign");
	}
	if (_Frame_Checkbox.DataAttributeExists("opacityfocus")) {
		TMNext_Checkbox_Checkbox.OpacityFocus = TL::ToReal(_Frame_Checkbox.DataAttributeGet("opacityfocus"));
	}
	if (_Frame_Checkbox.DataAttributeExists("opacityunfocus")) {
		TMNext_Checkbox_Checkbox.OpacityUnfocus = TL::ToReal(_Frame_Checkbox.DataAttributeGet("opacityunfocus"));
	}
	if (_Frame_Checkbox.DataAttributeExists("text")) {
		TMNext_Checkbox_Checkbox.Label.Value = _Frame_Checkbox.DataAttributeGet("text");
	}
	if (_Frame_Checkbox.DataAttributeExists("textsize")) {
		TMNext_Checkbox_Checkbox.Label.TextSize = TL::ToReal(_Frame_Checkbox.DataAttributeGet("textsize"));
	}
	if (_Frame_Checkbox.DataAttributeExists("textprefix")) {
		TMNext_Checkbox_Checkbox.Label.TextPrefix = _Frame_Checkbox.DataAttributeGet("textprefix");
	}
	if (_Frame_Checkbox.DataAttributeExists("textfont")) {
		TMNext_Checkbox_Checkbox.Label.Font = _Frame_Checkbox.DataAttributeGet("textfont");
	}
	if (_Frame_Checkbox.DataAttributeExists("textcolor")) {
		TMNext_Checkbox_Checkbox.Label.Color = CL::HexToRgb(_Frame_Checkbox.DataAttributeGet("textcolor"));
	}
	if (_Frame_Checkbox.DataAttributeExists("textfocuscolor")) {
		TMNext_Checkbox_Checkbox.Label.FocusColor = CL::HexToRgb(_Frame_Checkbox.DataAttributeGet("textfocuscolor"));
	}
	if (_Frame_Checkbox.DataAttributeExists("textxpos")) {
		TMNext_Checkbox_Checkbox.Label.PosX = TL::ToReal(_Frame_Checkbox.DataAttributeGet("textxpos"));
	}
	if (_Frame_Checkbox.DataAttributeExists("textypos")) {
		TMNext_Checkbox_Checkbox.Label.PosY = TL::ToReal(_Frame_Checkbox.DataAttributeGet("textypos"));
	}
	if (_Frame_Checkbox.DataAttributeExists("texthalign")) {
		TMNext_Checkbox_Checkbox.Label.HAlign = _Frame_Checkbox.DataAttributeGet("texthalign");
	}
	if (_Frame_Checkbox.DataAttributeExists("textvalign")) {
		TMNext_Checkbox_Checkbox.Label.VAlign = _Frame_Checkbox.DataAttributeGet("textvalign");
	}
	if (_Frame_Checkbox.DataAttributeExists("textitalicslope")) {
		TMNext_Checkbox_Checkbox.Label.ItalicSlope = TL::ToReal(_Frame_Checkbox.DataAttributeGet("textitalicslope"));
	}
	if (_Frame_Checkbox.DataAttributeExists("textmirror")) {
		TMNext_Checkbox_Checkbox.LabelMirrorValue = _Frame_Checkbox.DataAttributeGet("textmirror");
	}
	if (_Frame_Checkbox.DataAttributeExists("labelsize")) {
		TMNext_Checkbox_Checkbox.Label.Size = Tools::TextToVec2(_Frame_Checkbox.DataAttributeGet("labelsize"));
	}
	if (_Frame_Checkbox.DataAttributeExists("fitlabel")) {
		TMNext_Checkbox_Checkbox.Label.Fit = TL::ToReal(_Frame_Checkbox.DataAttributeGet("fitlabel"));
	}
	if (_Frame_Checkbox.DataAttributeExists("autonewline")) {
		TMNext_Checkbox_Checkbox.Label.AutoNewLine = Tools::TextToBoolean(_Frame_Checkbox.DataAttributeGet("autonewline"));
	}
	if (_Frame_Checkbox.DataAttributeExists("maxline")) {
		TMNext_Checkbox_Checkbox.Label.MaxLine = TL::ToInteger(_Frame_Checkbox.DataAttributeGet("maxline"));
	}
	if (_Frame_Checkbox.DataAttributeExists("adaptlabelsize")) {
		TMNext_Checkbox_Checkbox.Label.IsLabelSizeAdaptable = Tools::GetBooleanAttribute(_Frame_Checkbox, "adaptlabelsize");
	}
	if (_Frame_Checkbox.DataAttributeExists("iconchecked")) {
		TMNext_Checkbox_Checkbox.Icon.ImageChecked = _Frame_Checkbox.DataAttributeGet("iconchecked");
	}
	if (_Frame_Checkbox.DataAttributeExists("iconunchecked")) {
		TMNext_Checkbox_Checkbox.Icon.ImageUnchecked = _Frame_Checkbox.DataAttributeGet("iconunchecked");
	}
	if (_Frame_Checkbox.DataAttributeExists("iconcolor")) {
		TMNext_Checkbox_Checkbox.Icon.Color = CL::HexToRgb(_Frame_Checkbox.DataAttributeGet("iconcolor"));
	}
	if (_Frame_Checkbox.DataAttributeExists("iconfocuscolor")) {
		TMNext_Checkbox_Checkbox.Icon.FocusColor = CL::HexToRgb(_Frame_Checkbox.DataAttributeGet("iconfocuscolor"));
	}
	if (_Frame_Checkbox.DataAttributeExists("iconsize")) {
		TMNext_Checkbox_Checkbox.Icon.Size = Tools::TextToVec2(_Frame_Checkbox.DataAttributeGet("iconsize"));
	}
	if (_Frame_Checkbox.DataAttributeExists("iconxpos")) {
		TMNext_Checkbox_Checkbox.Icon.PosX = TL::ToReal(_Frame_Checkbox.DataAttributeGet("iconxpos"));
	}
	if (_Frame_Checkbox.DataAttributeExists("iconypos")) {
		TMNext_Checkbox_Checkbox.Icon.PosY = TL::ToReal(_Frame_Checkbox.DataAttributeGet("iconypos"));
	}

	declare CMlFrame TMNext_Checkbox_ParentCheckbox for Quad_Activation = Null;
	TMNext_Checkbox_ParentCheckbox = _Frame_Checkbox;

	ApplyProperties(_This, _Frame_Checkbox, TMNext_Checkbox_Checkbox);
	Unfocus(_This, _Frame_Checkbox);
}

Void MainInit(CMlScript _This) {
	_This.Page.GetClassChildren(C_Class_FrameContainerCheckbox, _This.Page.MainFrame, True);
	foreach (Control in _This.Page.GetClassChildren_Result) {
		declare CMlFrame Frame_CheckboxContainer = (Control as CMlFrame);
		InitCheckbox(_This, Frame_CheckboxContainer.Parent);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text ComponentV2() {
	return MV::ComponentV2(
		C_Name,
		GetManialink(),
		"""
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Checkbox.Script.txt" as {{{Q}}}
		""",
		"""
***MainInit***
***
{{{P}}}MainInit(This);
***
		""",
		[],
		[]
	);
}