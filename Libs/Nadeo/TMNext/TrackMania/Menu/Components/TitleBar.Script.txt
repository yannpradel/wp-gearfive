/** 
 *	Component: TitleBar
 *
 *	Available parameters:
 *	- data-size
 *	- data-bgcolor
 *	- data-bgopacity
 *	- data-strokecolor
 *	- data-textcolor
 *	- data-icon
 *	- data-title
 *	- data-sub-title
 *	- data-textsize
 *	- data-textfont
 *	- data-halign
 *	- data-valign
 *	- data-title-halign
 *	- data-sub-title-halign
 *	- data-leftimage
 *	- data-leftimagesize
 *	- data-leftimagecolorize
 *	- data-leftimagefocuscolorize
 *	- data-leftlabel
 *	- data-leftcolor
 *	- data-leftcolorfocus
 *	- data-leftbgcolorfocus
 *	- data-leftopacity
 *	- data-leftopacityfocus
 *	- data-leftinput
 *	- data-leftinactive
 *	- data-rightimage
 *	- data-rightimagesize
 *	- data-rightimagecolorize
 *	- data-rightimagefocuscolorize
 *	- data-rightlabel
 *	- data-rightcolor
 *	- data-rightcolorfocus
 *	- data-rightbgcolorfocus
 *	- data-rightopacity
 *	- data-rightopacityfocus
 *	- data-rightinput
 *	- data-rightinactive
 */
#Const Version		"2022-07-22"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Components/TitleBar.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Quad9.Script.txt" as Quad9
#Include "Libs/Nadeo/MenuLibs/Common/Menu/ShareMenuNavigation_ML.Script.txt" as ShareMenuNavigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-titlebar" //< Component name
#Const P "ComponentTitleBar_" //< Prefix used to differentiate functions/variables in the script
#Const C_Path_Images "file://Media/Manialinks/Nadeo/TMNext/Menus"

#Const C_Button_Left 0
#Const C_Button_Right 1

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {
	declare Text DataImage_Fill = Quad9::GetDataImage(C_Path_Images^"/Quad9TitleBar_Fill/", <3., 3.>);
	
	declare Vec2 Size_TitleBar = <150., 10.>;
	declare Real SizeXRatio_ButtonLabel = 0.3;
	declare Vec2 Size_ButtonLabel = <Size_TitleBar.X * SizeXRatio_ButtonLabel, Size_TitleBar.Y>;
	declare Vec2 Size_ButtonIcon = <8., 8.>;
	declare Real MarginX_Icon = 7.;
	
	return MV::Component(
		C_Name,
		"""
<stylesheet>
		<style class="{{{P}}}style-label-button" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$t$i"/>
</stylesheet>
<frame class="{{{P}}}container">
	<frame pos="0 5" id="{{{P}}}frame-align">
		<frameinstance modelid="{{{Quad9::C_Name}}}" z-index="0" data-valign="center" data-size="150 10" data-image="{{{DataImage_Fill}}}" data-colorize="eeeeee" id="{{{P}}}quad9-background" />
		<label pos="75 -1" z-index="2" size="60 10" halign="center" valign="center2" textprefix="$t$i" id="{{{P}}}label-title" />
		<label pos="75 -1" z-index="2" size="60 10" halign="center" valign="center2" textprefix="$t$i" id="{{{P}}}label-sub-title" />
		<quad pos="8 0" z-index="3" size="8 8" halign="center" valign="center" id="{{{P}}}quad-icon" />

		<frame pos="0 0" z-index="3" hidden="1" id="{{{P}}}frame-button-left">
			<quad z-index="-1" size="{{{Size_ButtonIcon.X + Size_ButtonLabel.X + 5}}} 10" valign="center" opacity="0" data-button="{{{C_Button_Left}}}" scriptevents="1" id="{{{P}}}quad-button" />
			<frameinstance z-index="0" data-size="{{{Size_ButtonIcon.X + Size_ButtonLabel.X + 5}}} 10" data-valign="center" data-image="{{{DataImage_Fill}}}" data-colorize="999999" modelid="{{{Quad9::C_Name}}}" id="{{{P}}}quad9-button-bg" />
			<frameinstance pos="0 0" z-index="1" data-size="{{{Size_ButtonIcon.X}}} {{{Size_ButtonIcon.Y}}}" data-halign="left" data-valign="center" data-hideformouse="1" hidden="1" modelid="{{{ButtonIcon::C_Name}}}" id="{{{P}}}button-icon" />
			<label class="{{{P}}}style-label-button" italicslope=".2" pos="{{{Size_ButtonIcon.X}}} -0.5" z-index="2" size="{{{Size_ButtonLabel.X}}} {{{Size_ButtonLabel.Y}}}" valign="center2" id="{{{P}}}button-label" />
			<quad id="{{{P}}}button-image" pos="{{{Size_ButtonIcon.X}}} -0.5" z-index="2" valign="center" />
		</frame>
		<frame pos="{{{Size_TitleBar.X}}} 0" z-index="4" hidden="1" id="{{{P}}}frame-button-right">
			<quad z-index="-1" size="{{{Size_ButtonIcon.X + Size_ButtonLabel.X + 5}}} 10" halign="right" valign="center" opacity="0" data-button="{{{C_Button_Right}}}" scriptevents="1" id="{{{P}}}quad-button" />
			<frameinstance z-index="0" data-size="{{{Size_ButtonIcon.X + Size_ButtonLabel.X + 5}}} 10" data-halign="right" data-valign="center" data-image="{{{DataImage_Fill}}}" data-colorize="999999" modelid="{{{Quad9::C_Name}}}" id="{{{P}}}quad9-button-bg" />
			<frameinstance pos="0 0" z-index="1" data-size="{{{Size_ButtonIcon.X}}} {{{Size_ButtonIcon.Y}}}" data-halign="right" data-valign="center" data-hideformouse="1" hidden="1" modelid="{{{ButtonIcon::C_Name}}}" id="{{{P}}}button-icon" />
			<label class="{{{P}}}style-label-button" italicslope=".2" pos="{{{-Size_ButtonIcon.X}}} -0.5" z-index="2" size="{{{Size_ButtonLabel.X}}} {{{Size_ButtonLabel.Y}}}" halign="right" valign="center2" id="{{{P}}}button-label" />
			<quad id="{{{P}}}button-image" pos="{{{-Size_ButtonIcon.X}}} -0.5" z-index="2" halign="right" valign="center" />
		</frame>
	</frame>
</frame>
		""",
		"""
#Include "TextLib" as {{{P}}}TL
#Include "MathLib" as {{{P}}}ML
#Include "ColorLib" as {{{P}}}CL
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as {{{P}}}Tools

#Const {{{P}}}C_HAlign_Left "left"
#Const {{{P}}}C_HAlign_Center "center"
#Const {{{P}}}C_HAlign_Right "right"

#Const {{{P}}}C_VAlign_Top "top"
#Const {{{P}}}C_VAlign_Center "center"
#Const {{{P}}}C_VAlign_Bottom "bottom"

#Const {{{P}}}C_EventType_Button 0

#Const {{{P}}}C_Button_Null -1
#Const {{{P}}}C_Button_Left {{{C_Button_Left}}}
#Const {{{P}}}C_Button_Right {{{C_Button_Right}}}
#Const {{{P}}}C_Buttons [{{{C_Button_Left}}}, {{{C_Button_Right}}}]

#Struct {{{P}}}K_ButtonImageProperty {
	Text ImageUrl;
	Vec2 Size;
	Text Colorize;
	Text FocusColorize;
}

#Struct {{{P}}}K_Properties {
	Vec3 BgColor;
	Vec3 StrokeColor;
	Vec3 TextColor;
	Real BgOpacity;
	Text Icon;
	Text Title;
	Text Subtitle;
	Real TextSize;
	Text TextFont;
	Vec2 Size;
	Text HAlign;
	Text VAlign;
	Text TitleHAlign;
	Text SubtitleHAlign;
	{{{P}}}K_ButtonImageProperty[Integer] ButtonsImage;
	Text[Integer] ButtonsLabel;
	Text[Integer] ButtonsInput;
	Vec3[Integer] ButtonsColor;
	Vec3[Integer] ButtonsColorFocus;
	Vec3[Integer] ButtonsBgColorFocus;
	Real[Integer] ButtonsOpacity;
	Real[Integer] ButtonsOpacityFocus;
	Boolean[Integer] ButtonsInactive;
}

#Struct {{{P}}}K_Event {
	Integer Type;
	CMlFrame TitleBar;
	Integer Button;
	Boolean IsMouse;
}
		""",
		"""
declare {{{P}}}K_Event[] {{{P}}}PendingEvents;
declare CMlFrame[] {{{P}}}G_Frames_TitleBar;
declare Boolean {{{P}}}G_UseLocalEvents;

Void {{{P}}}Private_UpdateButtons() {
	foreach (Frame_TitleBar in {{{P}}}G_Frames_TitleBar) {
		declare {{{P}}}K_Properties {{{P}}}Properties for Frame_TitleBar;
		if ({{{P}}}Properties.ButtonsInput.existskey({{{P}}}C_Button_Left)) {
			declare CMlFrame Frame_ButtonLeft <=> (Frame_TitleBar.GetFirstChild("{{{P}}}frame-button-left") as CMlFrame);
			declare CMlFrame Frame_ButtonIcon <=> (Frame_ButtonLeft.GetFirstChild("{{{P}}}button-icon") as CMlFrame);
			AnimMgr.Flush(Frame_ButtonLeft);
			if (Frame_ButtonIcon.Visible && {{{ButtonIcon::P}}}IsVisible(Frame_ButtonIcon)) {
				AnimMgr.Add(Frame_ButtonLeft, "<anim pos=\""^{{{Size_ButtonIcon.X*0.5}}}^" "^Frame_ButtonLeft.RelativePosition_V3.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				AnimMgr.Add(Frame_ButtonLeft, "<anim pos=\"0. "^Frame_ButtonLeft.RelativePosition_V3.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
		if ({{{P}}}Properties.ButtonsInput.existskey({{{P}}}C_Button_Right)) {
			declare CMlFrame Frame_ButtonRight <=> (Frame_TitleBar.GetFirstChild("{{{P}}}frame-button-right") as CMlFrame);
			declare CMlFrame Frame_ButtonIcon <=> (Frame_ButtonRight.GetFirstChild("{{{P}}}button-icon") as CMlFrame);
			AnimMgr.Flush(Frame_ButtonRight);
			if (Frame_ButtonIcon.Visible && {{{ButtonIcon::P}}}IsVisible(Frame_ButtonIcon)) {
				AnimMgr.Add(Frame_ButtonRight, "<anim pos=\""^{{{P}}}Properties.Size.X - {{{Size_ButtonIcon.X*0.5}}}^" "^Frame_ButtonRight.RelativePosition_V3.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				AnimMgr.Add(Frame_ButtonRight, "<anim pos=\""^{{{P}}}Properties.Size.X^" "^Frame_ButtonRight.RelativePosition_V3.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	}
}

Void {{{P}}}Private_ApplyProperties(CMlFrame _Frame_TitleBar, {{{P}}}K_Properties _NewProperties) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	
	declare CMlFrame Frame_Align <=> (_Frame_TitleBar.GetFirstChild("{{{P}}}frame-align") as CMlFrame);
	declare CMlFrame Quad9_Background <=> (Frame_Align.GetFirstChild("{{{P}}}quad9-background") as CMlFrame);
	declare CMlLabel Label_Title <=> (Frame_Align.GetFirstChild("{{{P}}}label-title") as CMlLabel);
	declare CMlLabel Label_Subtitle <=> (Frame_Align.GetFirstChild("{{{P}}}label-sub-title") as CMlLabel);
	declare CMlFrame[Integer] Frames_Button = [
		{{{P}}}C_Button_Left => (Frame_Align.GetFirstChild("{{{P}}}frame-button-left") as CMlFrame),
		{{{P}}}C_Button_Right => (Frame_Align.GetFirstChild("{{{P}}}frame-button-right") as CMlFrame)
	];
	declare CMlQuad[Integer] Quads_Button;
	declare CMlLabel[Integer] Labels_Button;
	declare CMlFrame[Integer] Icons_Button;
	declare CMlFrame[Integer] Quad9s_Button;
	declare CMlQuad[Integer] Quads_ButtonClick;
	foreach (ButtonId in {{{P}}}C_Buttons) {
		Quads_Button[ButtonId] = (Frames_Button[ButtonId].GetFirstChild("{{{P}}}button-image") as CMlQuad);
		Labels_Button[ButtonId] = (Frames_Button[ButtonId].GetFirstChild("{{{P}}}button-label") as CMlLabel);
		Icons_Button[ButtonId] = (Frames_Button[ButtonId].GetFirstChild("{{{P}}}button-icon") as CMlFrame);
		Quad9s_Button[ButtonId] = (Frames_Button[ButtonId].GetFirstChild("{{{P}}}quad9-button-bg") as CMlFrame);
		Quads_ButtonClick[ButtonId] = (Frames_Button[ButtonId].GetFirstChild("{{{P}}}quad-button") as CMlQuad);
	}
	declare CMlQuad Quad_Icon <=> (Frame_Align.GetFirstChild("{{{P}}}quad-icon") as CMlQuad);
	
	declare Boolean ForceSizeUpdate = False;
	declare Boolean ForceAlignUpdate = False;

	declare Real IconSizeX = 1.;
	declare Real ButtonsSizeX = 0.;

	/*
	 * /!\ The order in which the properties are applied is important /!\
	 */
	
	if ({{{P}}}Properties.BgColor != _NewProperties.BgColor) {
		{{{P}}}Properties.BgColor = _NewProperties.BgColor;
		{{{Quad9::P}}}SetColorize(Quad9_Background, {{{P}}}Properties.BgColor);
		foreach (Quad9_Button in Quad9s_Button) {
			{{{Quad9::P}}}SetColorize(Quad9_Button, {{{P}}}Properties.BgColor);
		}
	}

	if ({{{P}}}Properties.BgOpacity != _NewProperties.BgOpacity) {
		{{{P}}}Properties.BgOpacity = _NewProperties.BgOpacity;
		{{{Quad9::P}}}SetOpacity(Quad9_Background, {{{P}}}Properties.BgOpacity);
		foreach (Quad9_Button in Quad9s_Button) {
			{{{Quad9::P}}}SetOpacity(Quad9_Button, {{{P}}}Properties.BgOpacity);
		}
	}

	if ({{{P}}}Properties.TextColor != _NewProperties.TextColor) {
		{{{P}}}Properties.TextColor = _NewProperties.TextColor;
		Label_Title.TextColor = {{{P}}}Properties.TextColor;
		Label_Subtitle.TextColor = {{{P}}}Properties.TextColor;
	}

	if ({{{P}}}Properties.Icon != _NewProperties.Icon) {
		ForceAlignUpdate = True;
		{{{P}}}Properties.Icon = _NewProperties.Icon;
		Quad_Icon.ChangeImageUrl({{{P}}}Properties.Icon);
	}

	if ({{{P}}}Properties.Icon != "") IconSizeX = (Quad_Icon.Size.X + {{{MarginX_Icon}}});
	
	if ({{{P}}}Properties.Title != _NewProperties.Title) {
		{{{P}}}Properties.Title = _NewProperties.Title;
		Label_Title.Value = {{{P}}}Properties.Title;
	}

	if ({{{P}}}Properties.Subtitle != _NewProperties.Subtitle) {
		{{{P}}}Properties.Subtitle = _NewProperties.Subtitle;
		Label_Subtitle.Value = {{{P}}}Properties.Subtitle;
	}
	
	if ({{{P}}}Properties.TextSize != _NewProperties.TextSize) {
		{{{P}}}Properties.TextSize = _NewProperties.TextSize;
		Label_Title.TextSizeReal = {{{P}}}Properties.TextSize;
		Label_Subtitle.TextSizeReal = {{{P}}}Properties.TextSize;
	}

	if ({{{P}}}Properties.TextFont != _NewProperties.TextFont) {
		{{{P}}}Properties.TextFont = _NewProperties.TextFont;
		Label_Title.TextFont = {{{P}}}Properties.TextFont;
		Label_Subtitle.TextFont = {{{P}}}Properties.TextFont;
	}
	
	foreach (ButtonId => ButtonImage in _NewProperties.ButtonsImage) {
		if (
			!{{{P}}}Properties.ButtonsImage.existskey(ButtonId) ||
			{{{P}}}Properties.ButtonsImage[ButtonId].ImageUrl != ButtonImage.ImageUrl ||
			{{{P}}}Properties.ButtonsImage[ButtonId].Size != ButtonImage.Size ||
			{{{P}}}Properties.ButtonsImage[ButtonId].Colorize != ButtonImage.Colorize ||
			{{{P}}}Properties.ButtonsImage[ButtonId].FocusColorize != ButtonImage.FocusColorize
		) {
			{{{P}}}Properties.ButtonsImage[ButtonId] = ButtonImage;
			if (Frames_Button.existskey(ButtonId)) {
				Frames_Button[ButtonId].Visible = {{{P}}}Properties.ButtonsImage[ButtonId].ImageUrl != "" || ({{{P}}}Properties.ButtonsLabel.existskey(ButtonId) && {{{P}}}Properties.ButtonsLabel[ButtonId] != "");
			}
			if (Quads_Button.existskey(ButtonId)) {
				Quads_Button[ButtonId].ImageUrl = {{{P}}}Properties.ButtonsImage[ButtonId].ImageUrl;
				Quads_Button[ButtonId].Size = {{{P}}}Properties.ButtonsImage[ButtonId].Size;
				Quads_Button[ButtonId].Colorize = {{{P}}}CL::HexToRgb({{{P}}}Properties.ButtonsImage[ButtonId].Colorize);
			}
		}
		ForceSizeUpdate = True;
	}
	foreach (ButtonId => ButtonLabel in _NewProperties.ButtonsLabel) {
		if (
			!{{{P}}}Properties.ButtonsLabel.existskey(ButtonId) ||
			{{{P}}}Properties.ButtonsLabel[ButtonId] != ButtonLabel
		) {
			{{{P}}}Properties.ButtonsLabel[ButtonId] = ButtonLabel;
			if (Frames_Button.existskey(ButtonId)) {
				Frames_Button[ButtonId].Visible = {{{P}}}Properties.ButtonsLabel[ButtonId] != "" || ({{{P}}}Properties.ButtonsImage.existskey(ButtonId) && {{{P}}}Properties.ButtonsImage[ButtonId].ImageUrl != "");
			}
			if (Labels_Button.existskey(ButtonId)) {
				Labels_Button[ButtonId].Value = {{{P}}}Properties.ButtonsLabel[ButtonId];
			}
		}
		ForceSizeUpdate = True;
	}
	foreach (ButtonId => ButtonInput in _NewProperties.ButtonsInput) {
		if (
			!{{{P}}}Properties.ButtonsInput.existskey(ButtonId) ||
			{{{P}}}Properties.ButtonsInput[ButtonId] != ButtonInput
		) {
			{{{P}}}Properties.ButtonsInput[ButtonId] = ButtonInput;
			if (Icons_Button.existskey(ButtonId)) {
				Icons_Button[ButtonId].Visible = {{{P}}}Properties.ButtonsInput[ButtonId] != "";
				if (Icons_Button[ButtonId].Visible) {
					{{{ButtonIcon::P}}}SetBind(This, Icons_Button[ButtonId], {{{P}}}Properties.ButtonsInput[ButtonId]);
				}
			}
		}
		ForceSizeUpdate = True;
	}
	foreach (ButtonId => ButtonColor in _NewProperties.ButtonsColor) {
		if (
			!{{{P}}}Properties.ButtonsColor.existskey(ButtonId) ||
			{{{P}}}Properties.ButtonsColor[ButtonId] != ButtonColor
		) {
			{{{P}}}Properties.ButtonsColor[ButtonId] = ButtonColor;
		}
	}
	foreach (ButtonId => ButtonColorFocus in _NewProperties.ButtonsColorFocus) {
		if (
			!{{{P}}}Properties.ButtonsColorFocus.existskey(ButtonId) ||
			{{{P}}}Properties.ButtonsColorFocus[ButtonId] != ButtonColorFocus
		) {
			{{{P}}}Properties.ButtonsColorFocus[ButtonId] = ButtonColorFocus;
		}
	}
	foreach (ButtonId => ButtonBgColorFocus in _NewProperties.ButtonsBgColorFocus) {
		if (
			!{{{P}}}Properties.ButtonsBgColorFocus.existskey(ButtonId) ||
			{{{P}}}Properties.ButtonsBgColorFocus[ButtonId] != ButtonBgColorFocus
		) {
			{{{P}}}Properties.ButtonsBgColorFocus[ButtonId] = ButtonBgColorFocus;
		}
	}
	foreach (ButtonId => ButtonOpacity in _NewProperties.ButtonsOpacity) {
		if (
			!{{{P}}}Properties.ButtonsOpacity.existskey(ButtonId) ||
			{{{P}}}Properties.ButtonsOpacity[ButtonId] != ButtonOpacity
		) {
			{{{P}}}Properties.ButtonsOpacity[ButtonId] = ButtonOpacity;
		}
	}
	foreach (ButtonId => ButtonOpacityFocus in _NewProperties.ButtonsOpacityFocus) {
		if (
			!{{{P}}}Properties.ButtonsOpacityFocus.existskey(ButtonId) ||
			{{{P}}}Properties.ButtonsOpacityFocus[ButtonId] != ButtonOpacityFocus
		) {
			{{{P}}}Properties.ButtonsOpacityFocus[ButtonId] = ButtonOpacityFocus;
		}
	}
	foreach (ButtonId => ButtonInactive in _NewProperties.ButtonsInactive) {
		if (
			!{{{P}}}Properties.ButtonsInactive.existskey(ButtonId) ||
			{{{P}}}Properties.ButtonsInactive[ButtonId] != ButtonInactive
		) {
			{{{P}}}Properties.ButtonsInactive[ButtonId] = ButtonInactive;
		}
	}
	foreach (ButtonId in {{{P}}}C_Buttons) {
		declare Vec3 Color = <-1., -1., -1.>;
		if (
			{{{P}}}Properties.ButtonsColor.existskey(ButtonId) &&
			{{{P}}}Properties.ButtonsColor[ButtonId] != <-1., -1., -1.>
		) {
			Color = {{{P}}}Properties.ButtonsColor[ButtonId];
		} else if ({{{P}}}Properties.TextColor != <-1., -1., -1.>) {
			Color = {{{P}}}Properties.TextColor;
		}
		{{{ButtonIcon::P}}}SetColor(This, Icons_Button[ButtonId], {{{P}}}CL::RgbToHex6(Color));
		
		Labels_Button[ButtonId].TextColor = Color;
		Labels_Button[ButtonId].TextFont = {{{P}}}Properties.TextFont;
		Labels_Button[ButtonId].TextSizeReal = {{{P}}}Properties.TextSize;
		
		if ({{{P}}}Properties.ButtonsOpacity.existskey(ButtonId)) {
			Labels_Button[ButtonId].Opacity = {{{P}}}Properties.ButtonsOpacity[ButtonId];
			Quads_Button[ButtonId].Opacity = {{{P}}}Properties.ButtonsOpacity[ButtonId];
		}
	}
	
	if (ForceSizeUpdate || {{{P}}}Properties.Size != _NewProperties.Size) {
		{{{P}}}Properties.Size = _NewProperties.Size;
		ForceAlignUpdate = True;
		
		{{{Quad9::P}}}SetSize(Quad9_Background, {{{P}}}Properties.Size);
		Label_Title.RelativePosition_V3.X = {{{P}}}Properties.Size.X * 0.5;
		Frames_Button[{{{P}}}C_Button_Right].RelativePosition_V3.X = {{{P}}}Properties.Size.X;
		{{{P}}}Private_UpdateButtons();

		foreach (ButtonId in {{{P}}}C_Buttons) {
			if (Frames_Button[ButtonId].Visible) {
				declare Real LabelMaxWidth = ({{{P}}}Properties.Size.X * {{{SizeXRatio_ButtonLabel}}}) - 2.;
				if (Icons_Button[ButtonId].Visible) {
					LabelMaxWidth -= {{{Size_ButtonIcon.X * 2.}}} + 2.;
				}
				LabelMaxWidth = {{{P}}}ML::Max(0., LabelMaxWidth);
				Labels_Button[ButtonId].Size.X = {{{P}}}ML::Clamp(Labels_Button[ButtonId].ComputeWidth(Labels_Button[ButtonId].Value), 0., LabelMaxWidth);
				declare Real ButtonSizeX = 2. + {{{Size_ButtonIcon.X * 2.}}} + 2. + Labels_Button[ButtonId].Size.X;
				Quads_ButtonClick[ButtonId].Size = <ButtonSizeX, {{{P}}}Properties.Size.Y>;
				{{{Quad9::P}}}SetSize(Quad9s_Button[ButtonId], <ButtonSizeX, {{{P}}}Properties.Size.Y>);
				if (ButtonSizeX > ButtonsSizeX) {
					ButtonsSizeX = ButtonSizeX;
				}
			}
		}
		
		declare Real Divider = 0.;
		if ({{{P}}}Properties.Subtitle != "") Divider += 1.;
		if ({{{P}}}Properties.Title != "") Divider += 1.;

		if (Divider != 0.) {
			Label_Title.Size.X = {{{P}}}ML::Max(1., (({{{P}}}Properties.Size.X/Divider) - (ButtonsSizeX * 2.) - IconSizeX));
			Label_Subtitle.Size.X = {{{P}}}ML::Max(1., (({{{P}}}Properties.Size.X/Divider) - (ButtonsSizeX * 2.) - IconSizeX));
		}
	}
	
	if (ForceAlignUpdate || {{{P}}}Properties.HAlign != _NewProperties.HAlign) {
		{{{P}}}Properties.HAlign = _NewProperties.HAlign;
		
		switch ({{{P}}}Properties.HAlign) {
			case {{{P}}}C_HAlign_Left: {
				Frame_Align.RelativePosition_V3.X = 0.;
			}
			case {{{P}}}C_HAlign_Center: {
				Frame_Align.RelativePosition_V3.X = {{{P}}}Properties.Size.X * -0.5;
			}
			case {{{P}}}C_HAlign_Right: {
				Frame_Align.RelativePosition_V3.X = {{{P}}}Properties.Size.X * -1.;
			}
		}
	}
	
	if (ForceAlignUpdate || {{{P}}}Properties.VAlign != _NewProperties.VAlign) {
		{{{P}}}Properties.VAlign = _NewProperties.VAlign;
		
		switch ({{{P}}}Properties.VAlign) {
			case {{{P}}}C_VAlign_Top: {
				Frame_Align.RelativePosition_V3.Y = {{{P}}}Properties.Size.Y * -0.5;
			}
			case {{{P}}}C_VAlign_Center: {
				Frame_Align.RelativePosition_V3.Y = 0.;
			}
			case {{{P}}}C_VAlign_Bottom: {
				Frame_Align.RelativePosition_V3.Y = {{{P}}}Properties.Size.Y * 0.5;
			}
		}
	}

	if (ForceAlignUpdate || {{{P}}}Properties.TitleHAlign != _NewProperties.TitleHAlign) {
		{{{P}}}Properties.TitleHAlign = _NewProperties.TitleHAlign;

		switch ({{{P}}}Properties.TitleHAlign) {
			case {{{P}}}C_HAlign_Left: {
				Label_Title.RelativePosition_V3.X = IconSizeX;
				Label_Title.HorizontalAlign = CMlControl::AlignHorizontal::Left;
			}
			case {{{P}}}C_HAlign_Center: {
				Label_Title.RelativePosition_V3.X = {{{P}}}Properties.Size.X * 0.5;
				Label_Title.HorizontalAlign = CMlControl::AlignHorizontal::HCenter;
			}
			case {{{P}}}C_HAlign_Right: {
				Label_Title.RelativePosition_V3.X = {{{P}}}Properties.Size.X - ButtonsSizeX - 2.;
				Label_Title.HorizontalAlign = CMlControl::AlignHorizontal::Right;
			}
		}
	}

	if (ForceAlignUpdate || {{{P}}}Properties.SubtitleHAlign != _NewProperties.SubtitleHAlign) {
		{{{P}}}Properties.SubtitleHAlign = _NewProperties.SubtitleHAlign;

		switch ({{{P}}}Properties.SubtitleHAlign) {
			case {{{P}}}C_HAlign_Left: {
				Label_Subtitle.RelativePosition_V3.X = IconSizeX;
				Label_Subtitle.HorizontalAlign = CMlControl::AlignHorizontal::Left;
			}
			case {{{P}}}C_HAlign_Center: {
				Label_Subtitle.RelativePosition_V3.X = {{{P}}}Properties.Size.X * 0.5;
				Label_Subtitle.HorizontalAlign = CMlControl::AlignHorizontal::HCenter;
			}
			case {{{P}}}C_HAlign_Right: {
				Label_Subtitle.RelativePosition_V3.X = {{{P}}}Properties.Size.X - ButtonsSizeX - 2.;
				Label_Subtitle.HorizontalAlign = CMlControl::AlignHorizontal::Right;
			}
		}
	}
}

Void {{{P}}}SetBgColor(CMlFrame _Frame_TitleBar, Vec3 _BgColor) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.BgColor = _BgColor;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetStrokeColor(CMlFrame _Frame_TitleBar, Vec3 _StrokeColor) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.StrokeColor = _StrokeColor;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetTextColor(CMlFrame _Frame_TitleBar, Vec3 _TextColor) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.TextColor = _TextColor;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetIcon(CMlFrame _Frame_TitleBar, Text _Icon) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.Icon = _Icon;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetTitle(CMlFrame _Frame_TitleBar, Text _Title) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.Title = _Title;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetTitleVisibility(CMlFrame _Frame_TitleBar, Boolean _IsVisible) {
	declare CMlLabel Label_Title <=> (_Frame_TitleBar.GetFirstChild("{{{P}}}label-title") as CMlLabel);
	Label_Title.Visible = _IsVisible;
}

Void {{{P}}}SetSubtitle(CMlFrame _Frame_TitleBar, Text _Subtitle) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.Subtitle = _Subtitle;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetTextSize(CMlFrame _Frame_TitleBar, Real _TextSize) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.TextSize = _TextSize;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetTextFont(CMlFrame _Frame_TitleBar, Text _TextFont) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.TextFont = _TextFont;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetHAlign(CMlFrame _Frame_TitleBar, Text _HAlign) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.HAlign = {{{P}}}TL::ToLowerCase({{{P}}}TL::Trim(_HAlign));
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetVAlign(CMlFrame _Frame_TitleBar, Text _VAlign) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.VAlign = {{{P}}}TL::ToLowerCase({{{P}}}TL::Trim(_VAlign));
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetTitleHAlign(CMlFrame _Frame_TitleBar, Text _TitleHAlign) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.TitleHAlign = {{{P}}}TL::ToLowerCase({{{P}}}TL::Trim(_TitleHAlign));
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetSubtitleHAlign(CMlFrame _Frame_TitleBar, Text _SubtitleHAlign) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.SubtitleHAlign = {{{P}}}TL::ToLowerCase({{{P}}}TL::Trim(_SubtitleHAlign));
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetSize(CMlFrame _Frame_TitleBar, Vec2 _Size) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.Size = _Size;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetBgOpacity(CMlFrame _Frame_TitleBar, Real _Opacity) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.BgOpacity = _Opacity;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}SetButtonImage(CMlFrame _Frame_TitleBar, Integer _ButtonId, Text _ImageUrl, Vec2 _Size, Text _Colorize, Text _FocusColorize) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.ButtonsImage[_ButtonId].ImageUrl = _ImageUrl;
	NewProperties.ButtonsImage[_ButtonId].Size = _Size;
	NewProperties.ButtonsImage[_ButtonId].Colorize = _Colorize;
	NewProperties.ButtonsImage[_ButtonId].FocusColorize = _FocusColorize;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}
Void {{{P}}}SetButtonImage(CMlFrame _Frame_TitleBar, Integer _ButtonId, Text _ImageUrl) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	{{{P}}}SetButtonImage(
		_Frame_TitleBar, 
		_ButtonId, 
		_ImageUrl, 
		{{{P}}}Properties.ButtonsImage[_ButtonId].Size, 
		{{{P}}}Properties.ButtonsImage[_ButtonId].Colorize, 
		{{{P}}}Properties.ButtonsImage[_ButtonId].FocusColorize
	);
}
Void {{{P}}}SetButtonLabel(CMlFrame _Frame_TitleBar, Integer _ButtonId, Text _Label) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.ButtonsLabel[_ButtonId] = _Label;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}
Void {{{P}}}SetButtonInput(CMlFrame _Frame_TitleBar, Integer _ButtonId, Text _Input) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.ButtonsInput[_ButtonId] = _Input;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}
Void {{{P}}}SetButtonColor(CMlFrame _Frame_TitleBar, Integer _ButtonId, Vec3 _Color) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.ButtonsColor[_ButtonId] = _Color;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}
Void {{{P}}}SetButtonColorFocus(CMlFrame _Frame_TitleBar, Integer _ButtonId, Vec3 _Color) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.ButtonsColorFocus[_ButtonId] = _Color;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}
Void {{{P}}}SetButtonBgColorFocus(CMlFrame _Frame_TitleBar, Integer _ButtonId, Vec3 _Color) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.ButtonsBgColorFocus[_ButtonId] = _Color;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}
Void {{{P}}}SetButtonOpacity(CMlFrame _Frame_TitleBar, Integer _ButtonId, Real _Opacity) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.ButtonsOpacity[_ButtonId] = _Opacity;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}
Void {{{P}}}SetButtonOpacityFocus(CMlFrame _Frame_TitleBar, Integer _ButtonId, Real _Opacity) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.ButtonsOpacityFocus[_ButtonId] = _Opacity;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}
Void {{{P}}}SetButtonInactive(CMlFrame _Frame_TitleBar, Integer _ButtonId, Boolean _IsInactive) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.ButtonsInactive[_ButtonId] = _IsInactive;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}
Void {{{P}}}SetButton(CMlFrame _Frame_TitleBar, Integer _ButtonId, Text _Label, Text _Input) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	NewProperties.ButtonsLabel[_ButtonId] = _Label;
	NewProperties.ButtonsInput[_ButtonId] = _Input;
	{{{P}}}Private_ApplyProperties(_Frame_TitleBar, NewProperties);
}

Void {{{P}}}LockNavigation(CMlFrame _Frame_TitleBar, Boolean _Locked) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	foreach (ButtonId => Input in {{{P}}}Properties.ButtonsInput) {
		{{{P}}}SetButtonInactive(_Frame_TitleBar, ButtonId, _Locked);
	}
}
Void {{{P}}}LockNavigation(Boolean _Locked) {
	foreach (_Frame_TitleBar in {{{P}}}G_Frames_TitleBar) {
		{{{P}}}LockNavigation(_Frame_TitleBar, _Locked);
	}
}

Void ProcessMenuNavAction(CMlFrame[] _Frames_TitleBar, CMlScriptEvent::EMenuNavAction _MenuNavAction) {
	foreach (Frame_TitleBar in _Frames_TitleBar) {
		declare {{{P}}}K_Properties {{{P}}}Properties for Frame_TitleBar;
		declare Text MenuNavActionText = {{{P}}}Tools::MenuNavActionToText(_MenuNavAction);
		foreach (ButtonId => Input in {{{P}}}Properties.ButtonsInput) {
			if (
				Input == MenuNavActionText &&
				(!{{{P}}}Properties.ButtonsInactive.existskey(ButtonId) || !{{{P}}}Properties.ButtonsInactive[ButtonId])
			) {
				{{{P}}}PendingEvents.add({{{P}}}K_Event {
					Type = {{{P}}}C_EventType_Button,
					TitleBar = Frame_TitleBar,
					Button = ButtonId,
					IsMouse = False
				});
			}
		}
	}
}

/**	Use the local menu navigation events
 *	instead of the events shared by the
 *	ShareMenuNavigation component
 */
Void {{{P}}}UseLocalEvents(Boolean _Enable) {
	{{{P}}}G_UseLocalEvents = _Enable;
}

Void {{{P}}}Private_InitTitleBar(CMlFrame _Frame_Container) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_Container.Parent;
	
	declare CMlFrame Frame_Align <=> (_Frame_Container.GetFirstChild("{{{P}}}frame-align") as CMlFrame);
	declare CMlLabel Label_Title <=> (Frame_Align.GetFirstChild("{{{P}}}label-title") as CMlLabel);
	declare CMlFrame[] Frames_Button = [
		(Frame_Align.GetFirstChild("{{{P}}}frame-button-left") as CMlFrame),
		(Frame_Align.GetFirstChild("{{{P}}}frame-button-right") as CMlFrame)
	];
	foreach (Frame_Button in Frames_Button) {
		declare CMlQuad Quad_ButtonClick <=> (Frame_Button.GetFirstChild("{{{P}}}quad-button") as CMlQuad);
		declare CMlFrame {{{P}}}TitleBar for Quad_ButtonClick;
		{{{P}}}TitleBar = _Frame_Container.Parent;
	}
	
	{{{P}}}Properties = {{{P}}}K_Properties {
		BgColor = <-1., -1., -1.>,
		StrokeColor = <-1., -1., -1.>,
		BgOpacity = 1.,
		TextColor = Label_Title.TextColor,
		Title = Label_Title.Value,
		TextSize = Label_Title.TextSizeReal,
		TextFont = Label_Title.TextFont,
		Size = <0., 0.>,
		HAlign = {{{P}}}C_HAlign_Left,
		VAlign = {{{P}}}C_VAlign_Top,
		ButtonsImage = [],
		ButtonsLabel = [],
		ButtonsInput = [],
		ButtonsColor = [],
		ButtonsColorFocus = [],
		ButtonsBgColorFocus = [],
		ButtonsOpacity = [],
		ButtonsOpacityFocus = [],
		ButtonsInactive = []
	};
	declare {{{P}}}K_Properties NewProperties = {{{P}}}Properties;
	
	if (_Frame_Container.Parent.DataAttributeExists("bgcolor")) {
		NewProperties.BgColor = {{{P}}}CL::HexToRgb(_Frame_Container.Parent.DataAttributeGet("bgcolor"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("strokecolor")) {
		NewProperties.StrokeColor = {{{P}}}CL::HexToRgb(_Frame_Container.Parent.DataAttributeGet("strokecolor"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("textcolor")) {
		NewProperties.TextColor = {{{P}}}CL::HexToRgb(_Frame_Container.Parent.DataAttributeGet("textcolor"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("icon")) {
		NewProperties.Icon = _Frame_Container.Parent.DataAttributeGet("icon");
	}
	if (_Frame_Container.Parent.DataAttributeExists("bgopacity")) {
		NewProperties.BgOpacity = {{{P}}}TL::ToReal(_Frame_Container.Parent.DataAttributeGet("bgopacity"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("title")) {
		NewProperties.Title = _Frame_Container.Parent.DataAttributeGet("title");
	}
	if (_Frame_Container.Parent.DataAttributeExists("sub-title")) {
		NewProperties.Subtitle = _Frame_Container.Parent.DataAttributeGet("sub-title");
	}
	if (_Frame_Container.Parent.DataAttributeExists("textsize")) {
		NewProperties.TextSize = {{{P}}}TL::ToReal(_Frame_Container.Parent.DataAttributeGet("textsize"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("textfont")) {
		NewProperties.TextFont = _Frame_Container.Parent.DataAttributeGet("textfont");
	}
	if (_Frame_Container.Parent.DataAttributeExists("size")) {
		NewProperties.Size = {{{P}}}Tools::TextToVec2(_Frame_Container.Parent.DataAttributeGet("size"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("halign")) {
		NewProperties.HAlign = _Frame_Container.Parent.DataAttributeGet("halign");
	}
	if (_Frame_Container.Parent.DataAttributeExists("valign")) {
		NewProperties.VAlign = _Frame_Container.Parent.DataAttributeGet("valign");
	}
	if (_Frame_Container.Parent.DataAttributeExists("title-halign")) {
		NewProperties.TitleHAlign = _Frame_Container.Parent.DataAttributeGet("title-halign");
	}
	if (_Frame_Container.Parent.DataAttributeExists("sub-title-halign")) {
		NewProperties.SubtitleHAlign = _Frame_Container.Parent.DataAttributeGet("sub-title-halign");
	}
	if (_Frame_Container.Parent.DataAttributeExists("leftimage")) {
		if (!NewProperties.ButtonsImage.existskey({{{P}}}C_Button_Left)) {
			NewProperties.ButtonsImage[{{{P}}}C_Button_Left] = {{{P}}}K_ButtonImageProperty {};
		}
		NewProperties.ButtonsImage[{{{P}}}C_Button_Left].ImageUrl = _Frame_Container.Parent.DataAttributeGet("leftimage");
	}
	if (_Frame_Container.Parent.DataAttributeExists("leftimagesize")) {
		if (!NewProperties.ButtonsImage.existskey({{{P}}}C_Button_Left)) {
			NewProperties.ButtonsImage[{{{P}}}C_Button_Left] = {{{P}}}K_ButtonImageProperty {};
		}
		NewProperties.ButtonsImage[{{{P}}}C_Button_Left].Size = {{{P}}}Tools::TextToVec2(_Frame_Container.Parent.DataAttributeGet("leftimagesize"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("leftimagecolorize")) {
		if (!NewProperties.ButtonsImage.existskey({{{P}}}C_Button_Left)) {
			NewProperties.ButtonsImage[{{{P}}}C_Button_Left] = {{{P}}}K_ButtonImageProperty {};
		}
		NewProperties.ButtonsImage[{{{P}}}C_Button_Left].Colorize = _Frame_Container.Parent.DataAttributeGet("leftimagecolorize");
	}
	if (_Frame_Container.Parent.DataAttributeExists("leftimagefocuscolorize")) {
		if (!NewProperties.ButtonsImage.existskey({{{P}}}C_Button_Left)) {
			NewProperties.ButtonsImage[{{{P}}}C_Button_Left] = {{{P}}}K_ButtonImageProperty {};
		}
		NewProperties.ButtonsImage[{{{P}}}C_Button_Left].FocusColorize = _Frame_Container.Parent.DataAttributeGet("leftimagefocuscolorize");
	}
	if (_Frame_Container.Parent.DataAttributeExists("leftlabel")) {
		NewProperties.ButtonsLabel[{{{P}}}C_Button_Left] = _Frame_Container.Parent.DataAttributeGet("leftlabel");
	}
	if (_Frame_Container.Parent.DataAttributeExists("rightimage")) {
		if (!NewProperties.ButtonsImage.existskey({{{P}}}C_Button_Right)) {
			NewProperties.ButtonsImage[{{{P}}}C_Button_Right] = {{{P}}}K_ButtonImageProperty {};
		}
		NewProperties.ButtonsImage[{{{P}}}C_Button_Right].ImageUrl = _Frame_Container.Parent.DataAttributeGet("rightimage");
	}
	if (_Frame_Container.Parent.DataAttributeExists("rightimagesize")) {
		if (!NewProperties.ButtonsImage.existskey({{{P}}}C_Button_Right)) {
			NewProperties.ButtonsImage[{{{P}}}C_Button_Right] = {{{P}}}K_ButtonImageProperty {};
		}
		NewProperties.ButtonsImage[{{{P}}}C_Button_Right].Size = {{{P}}}Tools::TextToVec2(_Frame_Container.Parent.DataAttributeGet("rightimagesize"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("rightimagecolorize")) {
		if (!NewProperties.ButtonsImage.existskey({{{P}}}C_Button_Right)) {
			NewProperties.ButtonsImage[{{{P}}}C_Button_Right] = {{{P}}}K_ButtonImageProperty {};
		}
		NewProperties.ButtonsImage[{{{P}}}C_Button_Right].Colorize = _Frame_Container.Parent.DataAttributeGet("rightimagecolorize");
	}
	if (_Frame_Container.Parent.DataAttributeExists("rightimagefocuscolorize")) {
		if (!NewProperties.ButtonsImage.existskey({{{P}}}C_Button_Right)) {
			NewProperties.ButtonsImage[{{{P}}}C_Button_Right] = {{{P}}}K_ButtonImageProperty {};
		}
		NewProperties.ButtonsImage[{{{P}}}C_Button_Right].FocusColorize = _Frame_Container.Parent.DataAttributeGet("rightimagefocuscolorize");
	}
	if (_Frame_Container.Parent.DataAttributeExists("rightlabel")) {
		NewProperties.ButtonsLabel[{{{P}}}C_Button_Right] = _Frame_Container.Parent.DataAttributeGet("rightlabel");
	}
	if (_Frame_Container.Parent.DataAttributeExists("leftinput")) {
		NewProperties.ButtonsInput[{{{P}}}C_Button_Left] = {{{P}}}TL::ToLowerCase(_Frame_Container.Parent.DataAttributeGet("leftinput"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("rightinput")) {
		NewProperties.ButtonsInput[{{{P}}}C_Button_Right] = {{{P}}}TL::ToLowerCase(_Frame_Container.Parent.DataAttributeGet("rightinput"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("leftcolor")) {
		NewProperties.ButtonsColor[{{{P}}}C_Button_Left] = {{{P}}}CL::HexToRgb(_Frame_Container.Parent.DataAttributeGet("leftcolor"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("rightcolor")) {
		NewProperties.ButtonsColor[{{{P}}}C_Button_Right] = {{{P}}}CL::HexToRgb(_Frame_Container.Parent.DataAttributeGet("rightcolor"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("leftcolorfocus")) {
		NewProperties.ButtonsColorFocus[{{{P}}}C_Button_Left] = {{{P}}}CL::HexToRgb(_Frame_Container.Parent.DataAttributeGet("leftcolorfocus"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("rightcolorfocus")) {
		NewProperties.ButtonsColorFocus[{{{P}}}C_Button_Right] = {{{P}}}CL::HexToRgb(_Frame_Container.Parent.DataAttributeGet("rightcolorfocus"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("leftbgcolorfocus")) {
		NewProperties.ButtonsBgColorFocus[{{{P}}}C_Button_Left] = {{{P}}}CL::HexToRgb(_Frame_Container.Parent.DataAttributeGet("leftbgcolorfocus"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("rightbgcolorfocus")) {
		NewProperties.ButtonsBgColorFocus[{{{P}}}C_Button_Right] = {{{P}}}CL::HexToRgb(_Frame_Container.Parent.DataAttributeGet("rightbgcolorfocus"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("leftopacity")) {
		NewProperties.ButtonsOpacity[{{{P}}}C_Button_Left] = {{{P}}}TL::ToReal(_Frame_Container.Parent.DataAttributeGet("leftopacity"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("rightopacity")) {
		NewProperties.ButtonsOpacity[{{{P}}}C_Button_Right] = {{{P}}}TL::ToReal(_Frame_Container.Parent.DataAttributeGet("rightopacity"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("leftopacityfocus")) {
		NewProperties.ButtonsOpacityFocus[{{{P}}}C_Button_Left] = {{{P}}}TL::ToReal(_Frame_Container.Parent.DataAttributeGet("leftopacityfocus"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("rightopacityfocus")) {
		NewProperties.ButtonsOpacityFocus[{{{P}}}C_Button_Right] = {{{P}}}TL::ToReal(_Frame_Container.Parent.DataAttributeGet("rightopacityfocus"));
	}
	if (_Frame_Container.Parent.DataAttributeExists("leftinactive")) {
		NewProperties.ButtonsInactive[{{{P}}}C_Button_Left] = {{{P}}}Tools::GetBooleanAttribute(_Frame_Container.Parent, "leftinactive");
	}
	if (_Frame_Container.Parent.DataAttributeExists("rightinactive")) {
		NewProperties.ButtonsInactive[{{{P}}}C_Button_Right] = {{{P}}}Tools::GetBooleanAttribute(_Frame_Container.Parent, "rightinactive");
	}
	
	{{{P}}}Private_ApplyProperties(_Frame_Container.Parent, NewProperties);
}

Void FocusButton(CMlFrame _Frame_TitleBar, Integer _ButtonSide, Boolean _Focused) {
	declare {{{P}}}K_Properties {{{P}}}Properties for _Frame_TitleBar;
	declare CMlFrame Frame_Button;

	if (_ButtonSide == {{{P}}}C_Button_Left) {
		Frame_Button <=> (_Frame_TitleBar.GetFirstChild("{{{P}}}frame-button-left") as CMlFrame);
	} else if (_ButtonSide == {{{P}}}C_Button_Right) {
		Frame_Button <=> (_Frame_TitleBar.GetFirstChild("{{{P}}}frame-button-right") as CMlFrame);
	}

	if (Frame_Button != Null) {
		declare Label_Button <=> (Frame_Button.GetFirstChild("{{{P}}}button-label") as CMlLabel);
		declare Quad_ButtonImage <=> (Frame_Button.GetFirstChild("{{{P}}}button-image") as CMlQuad);
		declare Quad9_ButtonBg <=> (Frame_Button.GetFirstChild("{{{P}}}quad9-button-bg") as CMlFrame);

		if (_Focused) {
			if ({{{P}}}Properties.ButtonsColorFocus.existskey(_ButtonSide)) {
				Label_Button.TextColor = {{{P}}}Properties.ButtonsColorFocus[_ButtonSide];
			}
			if ({{{P}}}Properties.ButtonsOpacity.existskey(_ButtonSide)) {
				AnimMgr.Flush(Quad_ButtonImage);
				AnimMgr.Flush(Label_Button);
				AnimMgr.Add(Quad_ButtonImage, "<anim opacity=\""^{{{P}}}Properties.ButtonsOpacityFocus[_ButtonSide]^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Button, "<anim opacity=\""^{{{P}}}Properties.ButtonsOpacityFocus[_ButtonSide]^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
			if ({{{P}}}Properties.ButtonsImage.existskey(_ButtonSide)) {
				Quad_ButtonImage.Colorize = {{{P}}}CL::HexToRgb({{{P}}}Properties.ButtonsImage[_ButtonSide].FocusColorize);
			}
			if ({{{P}}}Properties.ButtonsBgColorFocus.existskey(_ButtonSide)) {
				{{{Quad9::P}}}SetColorize(Quad9_ButtonBg, {{{P}}}Properties.ButtonsBgColorFocus[_ButtonSide]);
			}
		} else {
			if ({{{P}}}Properties.ButtonsOpacityFocus.existskey(_ButtonSide)) {
				AnimMgr.Flush(Quad_ButtonImage);
				AnimMgr.Flush(Label_Button);
				AnimMgr.Add(Quad_ButtonImage, "<anim opacity=\""^{{{P}}}Properties.ButtonsOpacity[_ButtonSide]^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Button, "<anim opacity=\""^{{{P}}}Properties.ButtonsOpacity[_ButtonSide]^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
			if ({{{P}}}Properties.ButtonsImage.existskey(_ButtonSide)) {
				Quad_ButtonImage.Colorize = {{{P}}}CL::HexToRgb({{{P}}}Properties.ButtonsImage[_ButtonSide].Colorize);
			}
			if ({{{P}}}Properties.ButtonsColor.existskey(_ButtonSide)) {
				Label_Button.TextColor = {{{P}}}Properties.ButtonsColor[_ButtonSide];
			} else {
				declare CMlLabel Label_Title <=> (_Frame_TitleBar.GetFirstChild("{{{P}}}label-title") as CMlLabel);
				Label_Button.TextColor = Label_Title.TextColor;
			}
			{{{Quad9::P}}}SetColorize(Quad9_ButtonBg, {{{P}}}Properties.BgColor);
		}
	}
}

***MainInit***
***
Page.GetClassChildren("{{{P}}}container", Page.MainFrame, True);
foreach (Control in Page.GetClassChildren_Result) {
	declare CMlFrame Frame_TitleBarContainer = (Control as CMlFrame);
	{{{P}}}G_Frames_TitleBar.add(Frame_TitleBarContainer.Parent);
	{{{P}}}Private_InitTitleBar(Frame_TitleBarContainer);
}
***

***MainLoop***
***
{{{P}}}PendingEvents = [];

foreach (Event in PendingEvents) {
	if (Event.Type == CMlScriptEvent::Type::MouseClick) {
		if (Event.ControlId == "{{{P}}}quad-button") {
			declare Integer ButtonId = {{{P}}}TL::ToInteger(Event.Control.DataAttributeGet("button"));
			declare CMlFrame {{{P}}}TitleBar for Event.Control;
			declare {{{P}}}K_Properties {{{P}}}Properties for {{{P}}}TitleBar;
			if (!{{{P}}}Properties.ButtonsInactive.existskey(ButtonId) || !{{{P}}}Properties.ButtonsInactive[ButtonId]) {
				{{{P}}}PendingEvents.add({{{P}}}K_Event {
					Type = {{{P}}}C_EventType_Button,
					TitleBar = {{{P}}}TitleBar,
					Button = ButtonId,
					IsMouse = True
				});
				{{{MenuSounds::P}}}PlaySound(This, {{{MenuSounds::P}}}C_Sound_Select);
			}
		}
	} else if (Event.Type == CMlScriptEvent::Type::MouseOver) {
		if (Event.ControlId == "{{{P}}}quad-button") {
			declare CMlFrame {{{P}}}TitleBar for Event.Control;
			if ({{{P}}}TitleBar != Null) FocusButton({{{P}}}TitleBar, {{{P}}}TL::ToInteger(Event.Control.DataAttributeGet("button")), True);
		}
	} else if (Event.Type == CMlScriptEvent::Type::MouseOut) {
		if (Event.ControlId == "{{{P}}}quad-button") {
			declare CMlFrame {{{P}}}TitleBar for Event.Control;
			if ({{{P}}}TitleBar != Null) FocusButton({{{P}}}TitleBar, {{{P}}}TL::ToInteger(Event.Control.DataAttributeGet("button")), False);
		}
	}
}

/* ButtonIcon events */
foreach (Event in {{{ButtonIcon::P}}}GetPendingEvents(This)) {
	if (Event.Type == {{{ButtonIcon::P}}}C_EventType_HideForMouse) {
		{{{P}}}Private_UpdateButtons();
	}
}

if ({{{P}}}G_UseLocalEvents) {
	foreach (Event in PendingEvents) {
		if (Event.Type == CMlScriptEvent::Type::MenuNavigation) {
			ProcessMenuNavAction({{{P}}}G_Frames_TitleBar, Event.MenuNavAction);
		}
	}
} else {
	foreach (Event in {{{ShareMenuNavigation::P}}}GetPendingEvents(This)) {
		ProcessMenuNavAction({{{P}}}G_Frames_TitleBar, Event.MenuNavAction);
	}
}
***
		""",
		[
			Quad9::ComponentV2(),
			ShareMenuNavigation::ComponentV2(),
			ButtonIcon::ComponentV2(),
			MenuSounds::ComponentV2()
		],
		[]
	);
}