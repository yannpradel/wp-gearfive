/**
 *	Component: TrackBrowser
 *	===========================
 *
 *	Confluence : https://confluence.ubisoft.com/display/Nadeo/Track Browser
 *
 *	Info
 *	----
 *	
 *	Pop up used to browse and select one or several tracks. 
 * 	Can be used in different situations : to play a map, to create a club room, to send a map to the Map Review server, etc...
 *
 *	Parameters
 *	----------
 *
 *	- `data-opening-tab` (`integer`): Constant used to determine which tab to open when we display the browser. Value can be :
 *			0 -> C_TabIndex_MyTracks
 *			1 -> C_TabIndex_Favorites
 *			2 -> C_TabIndex_Official
 *			3 -> C_TabIndex_Clubs
 *	- `data-open-on-last-tab-enabled` (`boolean`): True by default. If True, will open the browser on the last tab used, otherwise use the data-opening-tab
 *	- `data-multi-select` (`boolean`): False by default to select only one track. If True the player can select several tracks 
 *	- `data-show-only-my-local-tracks` (`boolean`): False by default. If True browser will display only 'My Local Tracks' folder
 *	- `data-browsing-for-edition` (`boolean`): False by default. If True will check user permissions for track edition
 *	- `data-show-only-playable` (`boolean`): False by default. If True will show only playable tracks
 *	- `data-force-show-official-tracks` (`boolean`): False by default. If True will show official maps (campaign, totd and royal) event if they do not correspond to the filters
 *
 */
#Const Version		"2023-06-14"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Components/TrackBrowser.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CommonLibs/Common/Privileges.Script.txt" as Privileges
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/Task.Script.txt" as Task
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CommonLibs/Common/EnvironmentInfo.Script.txt" as EnvironmentInfo
#Include "Libs/Nadeo/CommonLibs/Common/Error.Script.txt" as Error
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/MapStore_ML.Script.txt" as MapStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/TMNext/TrackMania/API/CampaignAPI.Script.txt" as CampaignAPI
#Include "Libs/Nadeo/TMNext/TrackMania/API/MapAPI.Script.txt" as MapAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/NavigationTabs.Script.txt" as NavigationTabs
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton_TMNext
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset_TMNext
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Checkbox.Script.txt" as Checkbox
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PlayerRoyalVictories.Script.txt" as PlayerRoyalVictories
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/PlayerName.Script.txt" as PlayerName

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_Event {
	Integer	Type;
	CampaignStruct::LibCampaignStruct_K_Map Track;
	CampaignStruct::LibCampaignStruct_K_Map[Text] MultiTracks;
}
#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Frame_Tabs;
	CMlLabel Label_SubTitle;
	CMlLabel Label_SectionTitle;
	CMlFrame Frame_Scroll_Tracks;
	CMlFrame Button_AddTracks;
	CMlFrame ButtonIcon_AddTracks;
	CMlFrame Button_Back;
	CMlFrame Frame_LoadingSpinner;
	CMlLabel Label_NoTracks;
	CMlLabel Label_NoTracksDetails;
	CMlLabel Label_Error;
	CMlFrame Frame_MyTracks;
	CMlFrame Button_MyLocalTracks;
	CMlFrame Button_MyOnlineTracks;
	CMlFrame Frame_Official;
	CMlFrame Frame_OfficialButtons;
	CMlFrame Button_OfficialCampaigns;
	CMlFrame Button_TOTD;
	CMlLabel Label_DayTOTD;
	CMlFrame Frame_Royal;
	CMlFrame Button_Royal;
	CMlFrame Frame_RoyalVictory;
	CMlFrame Frame_Scroll_Official_Campaigns;
	CMlFrame Frame_Scroll_TOTD;
	CMlFrame Frame_Clubs;
	CMlFrame Frame_Scroll_Clubs;
	CMlFrame Frame_Options;
	CMlFrame Button_SelectAll;
	CMlFrame ButtonIcon_SelectAll;
	CMlFrame Button_Flatten;
	CMlFrame Button_Refresh;
	CMlFrame Button_OpenExplorer;
	CMlFrame Button_Sort;
	CMlFrame ButtonIcon_Sort;
	CMlFrame Frame_SortPopUp;
	CMlFrame Button_SortOption1;
	CMlFrame Button_SortOption2;
	CMlFrame Frame_MultiChoice;
	CMlFrame Frame_SpaceDisk;
	CMlFrame Frame_SpaceDiskLeft;
	CMlLabel Label_SpaceDiskLeft;
	CMlFrame Frame_LoadingSpinner_PopUp;
}
#Struct K_LocalTrack {
	Text ParentPath;
	Text Path;
	CampaignStruct::LibCampaignStruct_K_Map TrackInfo;
	Text SubFolder;
}
#Struct K_DeleteTrack {
	Task::K_Task Task;
	Text Name;
	Text FileName;
	Text Uid;
}
#Struct K_UploadTrack {
	Task::K_Task Task;
	Text Name;
	Text Uid;
}
#Struct K_MyTracks {
	Boolean NeedRefresh;
	K_LocalTrack[] LocalTracks;
	Text CurrentPath;
	Text CurrentParentPath;
	Boolean FocusParentFolder;
	Integer[] LastFolderSelected_Keys;
	Task::K_Task Task_GetLocalTracks;
	Task::K_Task Task_GetOnlineTracks;
	Task::K_Task Task_CheckTrackUploadStatus;
	K_DeleteTrack DeleteLocalTrack;
	K_UploadTrack UploadLocalTrack;
	CMlFrame LastButtonFocused;
}
#Struct K_RemoveTrack {
	Text Name;
	Text Uid;
}
#Struct K_Favorites {
	Boolean IsLoadingTracks;
	K_RemoveTrack RemoveTrack;
}
#Struct K_OfficialCampaign {
	Integer OffsetKey;
	Integer Id;
	Integer Season;
	Text Name;
	Integer Year;
	Text ImageUrl;
	CampaignStruct::LibCampaignStruct_K_Map[Integer] Tracks;
}
#Struct K_MonthlyCampaign {
	Integer OffsetKey;
	Integer Id;
	Text MonthName;
	Integer MonthNumber;
	Integer Year;
	Integer YearFormat;
	CampaignStruct::LibCampaignStruct_K_Map[Integer] Tracks;
}
#Struct K_Official {
	CMlFrame LastButtonFocused;
	Boolean IsLoadingTracks;
	Integer[Integer] CurrentMonthDays;
	// Official campaigns
	K_OfficialCampaign[][Integer] Campaigns;
	Boolean IsLoadingCampaigns;
	Integer CampaignLineSelectedKey;
	Integer CampaignColumnFocusKey;
	CMlFrame LastScrollCampaignFocus;
	Boolean FocusParentCampaign;
	// Track of the Day
	K_MonthlyCampaign[][Integer] Monthlies;
	Boolean IsLoadingMonthly;
	Integer MonthlyColumnFocusKey;
	CMlFrame LastScrollMonthlyFocus;
	Integer ScrollMonthlyOffset;
	Integer CurrentPageMonthly;
	Boolean FocusParentMonthly;
	Integer MonthlyLineSelectedKey;
	// Royal
	K_MonthlyCampaign[][Integer] Royals;
	Boolean IsLoadingRoyal;
	Integer RoyalColumnFocusKey;
	CMlFrame LastScrollRoyalFocus;
	Integer ScrollRoyalOffset;
	Integer CurrentPageRoyal;
	Boolean FocusParentRoyal;
	Integer RoyalLineSelectedKey;
}
#Struct K_Clubs {
	ClubStruct::LibStructuresClub_K_Club[Integer] Clubs;
	Boolean IsLoadingClubs;
	ClubStruct::LibStructuresClub_K_Club SelectedClub;
	Boolean IsLoadingCampaigns;
	CampaignStruct::LibCampaignStruct_K_Campaign[Integer] SelectedCampaigns;
	Boolean FocusParentClub;
	Integer SelectedClubKey;
	Boolean IsLoadingCampaignTracks;
	Boolean FocusParentCampaign;
	Integer SelectedCampaignKey;
}
#Struct K_Sortings {
	Boolean IsFlatten;
	Boolean IsSortingByNameElseByDate;
	Boolean IsSortingFromAscendingOrder;
}
#Struct K_Settings {
	Integer ChosenOpeningTab;
	Boolean OpenOnLastTab;
	Boolean MultiSelect;
	Boolean ShowOnlyMyLocalTracks;
	Boolean IsBrowsingForEdition;
	Boolean ForceShowOfficialTracks; // will show official maps (campaign, totd and royal) event if they do not correspond to the filters
}
#Struct K_Filters {
	Boolean ShowOnlyUserTracks;
	Boolean ShowOnlyPlayableTracks;
	Text[] FilterByEnvironment;
	Text[] FilterByMapType;
}
#Struct K_TracksFavoriteStatus {
	Http::K_Request Request;
	Integer CheckRequestTime;
	Integer LastAddOrRemoveRequestTime;
	Boolean FirstHeartIconDisplay;
	Text[] UidsToCheck;
	Text[] KnownedFavoritesTracksUids;
	Text CurrentTrackUid;
	Text CurrentTrackName;
}
#Struct K_ManialinkProps {
	Vec2 Pos_TrackNameOneLine;
	Vec2 Pos_TrackNameTwoLines;
	Vec2 Pos_TrackAuthor;
	Vec2 Pos_TrackFocusOptions;
	Vec2 Pos_TrackFocusOptionsWithMultiSelect;
	Vec2 Pos_SecondHorizontalButton;
	Vec2 Pos_ThirdHorizontalButton;
	Integer MonthlyPerPage;
	Integer TOTDPerPage;
}
#Struct K_State {
	K_Controls Controls;
	Integer CurrentTabIndex;
	Integer CurrentSection;
	CampaignStruct::LibCampaignStruct_K_Map[Integer] Tracks;
	CampaignStruct::LibCampaignStruct_K_Map[Text] SelectedTracks; // id corresponds to the Track Uid
	K_MyTracks MyTracks;
	K_Favorites Favorites;
	K_Official Official;
	K_Clubs Clubs;
	K_Sortings SortingTypes;
	K_Settings Settings;
	K_Filters Filters;
	CMlFrame LastOptionButtonFocused;
	K_TracksFavoriteStatus TracksFavoriteStatus;
	Boolean HasFilteredTracks;
	Boolean CanViewUGC;
	Privileges::K_PrivilegeCheck UGCPrivilegeCheck;
	K_ManialinkProps ManialinkProps;
	K_Event[] PendingEvents;
	K_Event[] DelayedPendingEvents;
	Integer LastSelectAllInputTime;
	Boolean LastIsSortingByNameElseByDate;
	Boolean LastIsSortingFromAscendingOrder;
	Integer SpaceLeftOnDiskInKB;
	Ident TTSContextIdent_Tabs;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_State_Null K_State {
	Controls = K_Controls {},
	CurrentTabIndex = 0,
	CurrentSection = 0,
	Tracks = [],
	SelectedTracks = [],
	MyTracks = K_MyTracks {},
	Favorites = K_Favorites {},
	Official = K_Official {},
	Clubs = K_Clubs {},
	SortingTypes = K_Sortings {},
	Settings = K_Settings {},
	Filters = K_Filters {},
	TracksFavoriteStatus = K_TracksFavoriteStatus {},
	HasFilteredTracks = False,
	CanViewUGC = False,
	UGCPrivilegeCheck = Privileges::K_PrivilegeCheck {},
	ManialinkProps = K_ManialinkProps {},
	PendingEvents = [],
	DelayedPendingEvents = [],
	LastSelectAllInputTime = -1,
	LastIsSortingByNameElseByDate = False,
	LastIsSortingFromAscendingOrder = False,
	SpaceLeftOnDiskInKB = -1,
	TTSContextIdent_Tabs = NullId
}

#Const C_Name "component-trackbrowser" //< Component name
#Const P "TMNext_TrackBrowser::" //< Prefix used to differentiate functions/variables in the script
#Const Q "TMNext_TrackBrowser"

#Const C_NavGroupName "navgroup-track-browser"
#Const C_NavGroupGlobal "navgroup-track-browser-global"

#Const C_Class_OfficialCampaign_Mouse_Navigation "class-official-campaign-mouse-navigation"
#Const C_Class_Monthly_Mouse_Navigation "class-monthly-mouse-navigation"
#Const C_Class_MainButton_FocusMemory "class-main-button-focus-memory"
#Const C_Class_OptionButton_FocusMemory "class-option-button-focus-memory"
#Const C_Class_TrackOptions_Mouse_Navigation "class-track-focus-options-mouse-navigation"

#Const C_TabNames [
	//L16N [Track Browser] Refers to the first tab of the Track Browser pop up. Leads to the player's local and online tracks
	0 => _("|Tabs|My Tracks"),
	//L16N [Track Browser] Refers to the second tab of the Track Browser pop up. Leads to the player's favorite tracks
	1 => _("|Tabs|Favorites"),
	//L16N [Track Browser] Refers to the third tab of the Track Browser pop up. Leads to the official tracks (from Nadeo campaigns, Track of the Day and Royal tracks).
	2 => _("|Tabs|Official"),
	//L16N [Track Browser] Refers to the fourth tab of the Track Browser pop up. Leads to the clubs campaigns tracks
	3 => _("|Tabs|Clubs")
]

#Const C_Img_TrackBrowserHeader "file://Media/Manialinks/Nadeo/TMNext/Menus/PopUp/Popup_TrackBrowser_Header.dds"
#Const C_Img_MyLocalTracks "file://Media/Manialinks/Nadeo/TMNext/Menus/TrackBrowser/Popup_TrackBrowser_Button_MyMaps_Local.dds"
#Const C_Img_MyOnlineTracks "file://Media/Manialinks/Nadeo/TMNext/Menus/TrackBrowser/Popup_TrackBrowser_Button_MyMaps_Online.dds"
#Const C_Img_OfficialCampaigns "file://Media/Manialinks/Nadeo/TMNext/Menus/TrackBrowser/Popup_TrackBrowser_Button_Official_Campaigns.dds"
#Const C_Img_TOTD "file://Media/Manialinks/Nadeo/TMNext/Menus/TrackBrowser/Popup_TrackBrowser_Button_Official_TOTD.dds"
#Const C_Img_Royal "file://Media/Manialinks/Nadeo/TMNext/Menus/TrackBrowser/Popup_TrackBrowser_Button_Official_Royal.dds"
#Const C_Img_Track_Folder "file://Media/Manialinks/Nadeo/TMNext/Menus/TrackBrowser/Popup_TrackBrowser_Track_Folder.dds"
#Const C_Img_Year_Campaign "file://Media/Manialinks/Nadeo/TMNext/Menus/TrackBrowser/Popup_TrackBrowser_Year_Campaign.dds"
#Const C_Img_Year_TOTD_OneLine "file://Media/Manialinks/Nadeo/TMNext/Menus/TrackBrowser/Popup_TrackBrowser_Year_TOTD_OneLine.dds"
#Const C_Img_Year_TOTD_TwoLinesTop "file://Media/Manialinks/Nadeo/TMNext/Menus/TrackBrowser/Popup_TrackBrowser_Year_TOTD_TwoLines_Top.dds"
#Const C_Img_Year_TOTD_TwoLinesBottom "file://Media/Manialinks/Nadeo/TMNext/Menus/TrackBrowser/Popup_TrackBrowser_Year_TOTD_TwoLines_Bottom.dds"

#Const C_Event_Exit 0
#Const C_Event_Select 1
#Const C_Event_MultiSelect 2

#Const C_TabIndex_None -1
#Const C_TabIndex_MyTracks 0
#Const C_TabIndex_Favorites 1
#Const C_TabIndex_Official 2
#Const C_TabIndex_Clubs 3

#Const C_Section_None -1
#Const C_Section_LocalTracks 0
#Const C_Section_OnlineTracks 1
#Const C_Section_OfficialCampaigns 2
#Const C_Section_SelectedOfficialCampaign 3
#Const C_Section_Monthly 4
#Const C_Section_SelectedMonthly 5
#Const C_Section_Royal 6
#Const C_Section_SelectedRoyal 7
#Const C_Section_SelectedClub 8
#Const C_Section_SelectedClubCampaign 9

// [C_TabIndex_X => [C_Section_X, C_Section_Y, C_Section_Z]]
#Const C_TabSectionRelationship [
	0 => [-1, 0, 1],
	1 => [-1],
	2 => [-1, 2, 3, 4, 5, 6, 7],
	3 => [-1 , 8, 9]
]

#Const C_Season_Winter_Index 0
#Const C_Season_Spring_Index 1
#Const C_Season_Summer_Index 2
#Const C_Season_Fall_Index 3
#Const C_SeasonsTotal 4

#Const C_Color_TOTD_Day "267294"

#Const C_MonthlyPerLine 6

#Const C_EventsDelay 150

#Const C_SpaceOnDiskAssetWidth 25

#Const C_YearFormatNull -1
#Const C_OneLineYear 0
#Const C_TwoLinesYearTop 1
#Const C_TwoLinesYearBottom 2

#Const C_ErrorMessage_TimeDuration 5000
#Const C_ErrorMessage_FadeTime 750

#Const C_PopUpDeleteTrackIndex 0
#Const C_PopUpUploadTrackIndex 1
#Const C_PopUpRemoveFavoriteTrackIndex 2

#Const C_MaxSelectedTracksCountCheck 100

#Const C_DelayBetweenInput 300
#Const C_CheckFavoriteStatusCooldown 500
#Const C_FavoriteTrackRequestCooldown 500

#Const C_ErrorCode_NS_UnknowMap "C-AK-03-01"

#Const C_Buttons_Classic ["A" => _("Select")]
#Const C_Buttons_Tracks_Favorite [
	"A" => _("Select"),
	//L16N Remove the focused track from the player favorite tracks
	"Action1" => _("Remove favorite")
]
#Const C_Buttons_Tracks_Local [
	"A" => _("Select"),
	//L16N Delete the focused track from the player local tracks
	"Action1" => _("Delete track"),
	//L16N Upload the focused local track to the player online tracks
	"Action2" => _("Upload track")
]
#Const C_Buttons_Tracks_AddFavorite [
	"A" => _("Select"),
	//L16N Add the focused track to the player favorite tracks
	"Action2" => _("Add favorite")
]
#Const C_Buttons_Tracks_RemoveFavorite [
	"A" => _("Select"),
	//L16N Remove the focused track from the player favorite tracks
	"Action2" => _("Remove favorite")
]

//L16N Title of the pop-up asking the player to sort tracks (by alphabetical or chronological order)
#Const C_SortTracksPopUp_Title _("Sort tracks")
#Const C_SortTracksPopUp_Choices [0 => _("Ok")]
#Const C_SortTracksPopUp_ChoiceIndex_Ok 0

//L16N [Track Browser] Title of the track browser, a pop up used to browse and select tracks of the game
#Const C_Text_Title _("Track Browser")
//L16N [Track Browser] Subtitle of the track browser, indicate to the player to select one track (for example to choose a track to play)
#Const C_Text_SubTitleSingular _("Select a track")
//L16N [Track Browser] Subtitle of the track browser, indicate to the player to select several tracks (for example in a room creation)
#Const C_Text_SubTitlePlural _("Select tracks")
//L16N [Track Browser] Button to validate the tracks selection (for example in a room creation)
#Const C_Text_AddTracks _("Add tracks")
//L16N [Track Browser] Button to validate the tracks selection when there is only 1 track selected
#Const C_Text_AddOneTrack _("Add 1 track")
//L16N [Track Browser] Button to validate the tracks selection when there are several tracks selected, %1 will be replaced by the tracks number. e.g "Add 25 tracks"
#Const C_Text_AddSeveralTracks _("Add %1 tracks")
//L16N [Track Browser] Button to select/unselect all tracks of the current section
#Const C_Text_SelectAll _("|Tracks|All")
//L16N [Track Browser] Button to go to the previous page of the Track Browser
#Const C_Text_Back _("Back")
//L16N [Track Browser] Button to exit the Track Browser
#Const C_Text_Exit _("Exit")
//L16N [Track Browser] Button to sort the tracks (alphabetical or chronological order)
#Const C_Text_Sort _("Sort")
//L16N [Track Browser] Button to access the player's local and online tracks
#Const C_Text_Tracks _("My tracks")
//L16N [Track Browser] Button to access the player's local tracks
#Const C_Text_LocalTracks _("My local tracks")
//L16N [Track Browser] Button to access the player's online tracks
#Const C_Text_OnlineTracks _("My online tracks")
//L16N [Track Browser] Title of the section of player's favorite tracks
#Const C_Text_FavoriteTracks _("My favorite tracks")
//L16N [Track Browser] Button to access the Nadeo official tracks (Seasons, TOTD and Royal tracks) 
#Const C_Text_Official _("Official tracks")
//L16N [Track Browser] Button to access the Nadeo official campaigns 
#Const C_Text_OfficialCampaigns _("Official campaigns")
//L16N [Track Browser] Button to access the Track of the Days
#Const C_Text_TOTD _("Track of the day")
//L16N [Track Browser] Button to access the Royal tracks
#Const C_Text_Royal _("Royal")
//L16N [Track Browser] Title of the section of the player's clubs, to access the tracks included in the clubs campaigns 
#Const C_Text_MyClubsTracks _("My clubs tracks")
//L16N [Track Browser] Title of the section when the player has selected a club, %1 will be replaced by the club name. e.g "'Darrek' club campaigns"
#Const C_Text_SelectedClub _("'%1' club campaigns")
//L16N [Track Browser] Title of the section when the player has selected a campaign with only one track, %1 will be replaced by the campaign name. e.g "'A08' campaign track"
#Const C_Text_SelectedCampaignSingular _("'%1' campaign track")
//L16N [Track Browser] Title of the section when the player has selected a campaign with several tracks, %1 will be replaced by the campaign name. e.g "'A08' campaign tracks"
#Const C_Text_SelectedCampaign _("'%1' campaign tracks")
//L16N [Track Browser] Title of the section when the player has selected a Track of The Day, %1 will be replaced by a month and year. e.g "December 2021 tracks"
#Const C_Text_SelectedTOTD _("|Date|%1 tracks")
//L16N [Track Browser] Title of the section when the player has selected a Royal campaign, %1 will be replaced by a month and year. e.g "December 2021 royal tracks"
#Const C_Text_SelectedRoyal _("|Date|%1 Royal tracks")
//L16N [Track Browser] Message displayed when there are no tracks in the current section
#Const C_Text_NoTracks _("No tracks found in this section")
//L16N [Track Browser] Message displayed when there aren't any tracks in the current section suitable for the player activity. For example in a room edition with Royal mode, only Royal tracks can be used. Other example in Server Review, players can use only their tracks.
#Const C_Text_NoSuitableTracks _("Tracks found in this section are not suitable")
//L16N [Track Browser] Message displayed when there aren't any tracks in the current section suitable, to incite the player to search elsewhere
#Const C_Text_NoSuitableTracksDetails _("You may search in other sections for suitable tracks")
//L16N [Track Browser] Message displayed to explain to the player how to add tracks in the Local tracks section
#Const C_Text_NoLocalTracks _("You can create a new track in the Track Editor")
//L16N [Track Browser] Message displayed to explain to the player how to add tracks in the Online tracks section
#Const C_Text_NoOnlineTracks _("You can upload a track from your local tracks")
//L16N [Track Browser] Message displayed to explain to the player how to add a track to their favorites
#Const C_Text_NoFavoriteTracks _("While playing a track, add it to your favorites via the pause menu.")
//L16N [Track Browser] Message displayed to explain to the player how to find tracks in the CLUB tab of the browser
#Const C_Text_NoClubs _("Join a club to find its tracks here")
//L16N [Track Browser] Message to explain that the current club does not have any campaigns
#Const C_Text_NoClubCampaigns _("This club does not have any campaigns")
//L16N [Track Browser] Message to explain that there are no official campaigns to display
#Const C_Text_NoOfficialCampaign _("No official campaigns available")
//L16N [Track Browser] Message to explain that the current campaign does not have any tracks
#Const C_Text_NoCampaignTracks _("This campaign does not have any tracks")
//L16N [Track Browser] Message to explain that the current monthly campaign (Track of the Day or Royal) does not have any tracks
#Const C_Text_NoMonthlyTracks _("This month does not have any tracks")
//L16N [Track Browser] Message to explain that there are no Track of the Day to display
#Const C_Text_NoTOTD _("No Track of the Day available")
//L16N [Track Browser] Message to explain that there are no Royal tracks to display
#Const C_Text_NoRoyal _("No Royal tracks available")
//L16N [Track Browser] Alphabetical sort option for the tracks
#Const C_Text_ByName _("By name")
//L16N [Track Browser] Chronological sort option for the tracks
#Const C_Text_ByDate _("By date")
//L16N [Track Browser] Ascending sort option for the tracks
#Const C_Text_Ascending _("Ascending")
//L16N [Track Browser] Descending sort option for the tracks
#Const C_Text_Descending _("Descending")
//L16N [Track Browser] Checking track online status to update the upload possibilities for the player 
#Const C_Text_CheckingTrackOnline _("Checking track online status")
//L16N [Track Browser] Track upload is in progress
#Const C_Text_UploadingTrackOnline _("Uploading track")
//L16N [Track Browser] Space left on disk to stock local tracks, in MB (megabyte), e.g "60/250MB"
#Const C_Text_SpaceLeftOnDisk _("%1/%2MB")
//L16N [Track Browser] %1 MUST STAY AT THE END OF THE STRING !!! %1 will be replaced by the name of the author of the track, e.g. "by PlayerA". If your language does not permit to keep the %1 at the end of the string, do not translate "By" and just keep the text "%1" 
#Const C_Text_AuthorName _("|NameOnTheRight|By %1")

//L16N Title of the pop-up asking the player to confirm they want to delete a local track
#Const C_DeleteTrackPopUp_Title _("Delete track")
//L16N The player need to confirm they want to delete the local track, %1 will be replaced by the track name. e.g "Are you sure you want to delete the track 'Test 2' from your local tracks?"
#Const C_DeleteTrackPopUp_Description1 _("Are you sure you want to delete the track '%1' from your local tracks?")
//L16N This track will not be accessible anywhere after the suppression
#Const C_DeleteTrackPopUp_Description2 _("The track data will be lost permanently")
//L16N This track will still be accessible in the online folder after the suppression
#Const C_DeleteTrackPopUp_Description3 _("A copy will stay in your online tracks folder")
#Const C_DeleteTrackPopUp_Choices [0 => _("Back"), 1 => _("Delete")]
#Const C_DeleteTrackPopUp_ChoiceIndex_Back 0
#Const C_DeleteTrackPopUp_ChoiceIndex_Delete 1

//L16N Title of the pop-up asking the player to confirm they want to upload a track
#Const C_UploadTrackPopUp_Title1 _("Upload track")
//L16N Title of the pop-up asking the player to confirm they want to upload a track
#Const C_UploadTrackPopUp_Title2 _("Re-upload track")
//L16N Title of the pop-up to inform the player their track is now uploaded
#Const C_UploadTrackPopUp_Title3 _("Upload complete")
//L16N Title of the pop-up to inform the player their track is not uploaded
#Const C_UploadTrackPopUp_Title4 _("Upload incomplete")
//L16N The player need to confirm they want to upload the track, %1 will be replaced by the track name. e.g "Are you sure you want to upload the track 'Test 2' to your online tracks?"
#Const C_UploadTrackPopUp_Description1 _("Are you sure you want to upload the track '%1' to your online tracks?")
//L16N Even after the upload, the track will still be accessible in the player's local folder
#Const C_UploadTrackPopUp_Description2 _("A copy will stay in your local tracks folder")
//L16N The player need to confirm they want to re-upload the track, %1 will be replaced by the track name. e.g "Are you sure you want to upload the track 'Test 2' to your online tracks?"
#Const C_UploadTrackPopUp_Description3 _("Are you sure you want to re-upload the track '%1' to your online tracks?")
//L16N This track is already uploaded in the player's online tracks
#Const C_UploadTrackPopUp_Description4 _("This track is already uploaded online")
//L16N The track is not playable and must be to be uploaded, %1 will be replaced by the track name. e.g "The track 'Test 2' is not playable. You can only upload playable tracks."
#Const C_UploadTrackPopUp_Description5 _("The track '%1' is not playable. You can only upload playable tracks.")
//L16N The player needs to validate the track before uploading it
#Const C_UploadTrackPopUp_Description6 _("Validate this track in the track editor first")
//L16N The track is already uploaded by someone else, %1 will be replaced by the track name. e.g "The track 'Test 2' is already uploaded by another player."
#Const C_UploadTrackPopUp_Description7 _("The track '%1' is already uploaded by another player.")
//L16N The player does not have the permission to re-upload this track
#Const C_UploadTrackPopUp_Description8 _("You cannot re-upload this track")
//L16N The track upload was successful, %1 will be replaced by the track name. e.g "The track 'Test 2' is now uploaded!"
#Const C_UploadTrackPopUp_Description9 _("The track '%1' is now uploaded!")
//L16N The players can now find this track in their online tracks
#Const C_UploadTrackPopUp_Description10 _("You can find it in your online tracks")
//L16N Error while uploading a track. %1 will be replaced by the track name "Error while uploading the track 'Test 2'."
#Const C_UploadTrackPopUp_Description11 _("Error while uploading the track '%1'")
//L16N Error while uploading a track. %1 will be replaced by a code e.g. "Error code: 500"
#Const C_UploadTrackPopUp_Description12 _("Error code: %1")
#Const C_UploadTrackPopUp_Choices [0 => _("Back"), 1 => _("Upload")]
#Const C_UploadTrackPopUp_ChoiceIndex_Back 0
#Const C_UploadTrackPopUp_ChoiceIndex_Upload 1

#Const Const::C_RemoveFavoriteMapPopUp_Title as C_RemoveFavoriteMapPopUp_Title 
#Const Const::C_RemoveFavoriteMapPopUp_Description1 as C_RemoveFavoriteMapPopUp_Description1 
#Const Const::C_RemoveFavoriteMapPopUp_Description2 as C_RemoveFavoriteMapPopUp_Description2 
#Const Const::C_RemoveFavoriteMapPopUp_Choices as C_RemoveFavoriteMapPopUp_Choices 
#Const Const::C_RemoveFavoriteMapPopUp_ChoiceIndex_Remove as C_RemoveFavoriteMapPopUp_ChoiceIndex_Remove 

#Const Const::C_MaxSpaceAvailableOnConsoleInMB as C_MaxSpaceAvailableOnConsoleInMB

#Const Const::C_Text_RetrievingDataPlaceholder as C_Text_Retrieving

#Const Const::C_Season_Names as C_Season_Names
#Const Const::C_Season_Name_To_Index as C_Season_Name_To_Index
#Const Const::C_ImageUrls_Campaign_TrackBrowser as C_ImageUrls_Campaign_TrackBrowser
#Const Const::C_Month_Names as C_Month_Names

#Const C_ModelId_FramemodelTrack "tmnext-track-browser_framemodel-track"
#Const C_ModelId_FramemodelClubOrCampaign "tmnext-track-browser_framemodel-club-or-campaign"
#Const C_ModelId_FramemodelOfficialCampaign "tmnext-track-browser_framemodel-official-campaign"
#Const C_ModelId_FramemodelCampaignYear "tmnext-track-browser_framemodel-campaign-year"
#Const C_ModelId_FramemodelTOTD "tmnext-track-browser_framemodel-totd"
#Const C_ModelId_FramemodelTOTDYear "tmnext-track-browser_framemodel-totd-year"

#Const C_Class_QuadBase "tmnext-track-browser_quad-base"
#Const C_Class_TextExtraBold "tmnext-track-browser_text-extra-bold"
#Const C_Class_TextSemiBold "tmnext-track-browser_text-semi-bold"
#Const C_Class_TextRegular "tmnext-track-browser_text-regular"

#Const C_Id_FrameOfficialCampaign "tmnext-track-browser_frame-official-campaign-"
#Const C_Id_FrameYearCampaign "tmnext-track-browser_frame-year-campaign-"
#Const C_Id_FrameTOTDIndex "tmnext-track-browser_frame-totd-"
#Const C_Id_FrameYearTOTD "tmnext-track-browser_frame-year-totd-"
#Const C_Id_QuadHitbox "tmnext-track-browser_quad-hitbox"
#Const C_Id_QuadImage "tmnext-track-browser_quad-image"
#Const C_Id_ControlBlockListTrackThumbnail "tmnext-track-browser_control-block-list-track-thumbnail"
#Const C_Id_QuadGradient "tmnext-track-browser_quad-gradient"
#Const C_Id_ControlBlockListTrackName "tmnext-track-browser_control-block-list-track-name"
#Const C_Id_LabelTrackDay "tmnext-track-browser_label-track-day"
#Const C_Id_PlayerNameAuthor "tmnext-track-browser_playername-author"
#Const C_Id_LabelFolderName "tmnext-track-browser_label-folder-name"
#Const C_Id_QuadFocus "tmnext-track-browser_quad-focus"
#Const C_Id_FrameTrackFocusOptions "tmnext-track-browser_frame-track-focus-options"
#Const C_Id_ButtonDeleteMyTrack "tmnext-track-browser_button-delete-my-track"
#Const C_Id_ButtonUploadMyTrack "tmnext-track-browser_button-upload-my-track"
#Const C_Id_ButtonRemoveTrackFromFavorites "tmnext-track-browser_button-remove-track-from-favorites"
#Const C_Id_ButtonFavorite "tmnext-track-browser_button-favorite"
#Const C_Id_ButtonCheckboxTrack "tmnext-track-browser_button-checkbox-track"
#Const C_Id_QuadScrollHitbox "tmnext-track-browser_quad-scroll-hitbox"
#Const C_Id_QuadMouseHitbox "tmnext-track-browser_quad-mouse-hitbox"
#Const C_Id_QuadBg "tmnext-track-browser_quad-bg"
#Const C_Id_LabelName "tmnext-track-browser_label-name"
#Const C_Id_LabelYear "tmnext-track-browser_label-year"
#Const C_Id_QuadYearBg "tmnext-track-browser_quad-year-bg"
#Const C_Id_QuadYearBgOneLine "tmnext-track-browser_quad-year-bg-one-line"
#Const C_Id_QuadYearBgTwoLinesTop "tmnext-track-browser_quad-year-bg-two-lines-top"
#Const C_Id_QuadYearBgTwoLinesBottom "tmnext-track-browser_quad-year-bg-two-lines-bottom"
#Const C_Id_LabelMonthName "tmnext-track-browser_label-month-name"
#Const C_Id_LabelMonthNumber "tmnext-track-browser_label-month-number"
#Const C_Id_FrameGlobal "tmnext-track-browser_frame-global"
#Const C_Id_PopUpBackground "tmnext-track-browser_pop-up-background"
#Const C_Id_FrameMultichoiceGlobal "tmnext-track-browser_frame-multichoice-global"
#Const C_Id_FrameMultichoice "tmnext-track-browser_frame-multichoice"
#Const C_Id_FrameLoadingSpinnerPopUpMultichoice "tmnext-track-browser_frame-loading-spinner-pop-up-multichoice"
#Const C_Id_FrameSortPopUp "tmnext-track-browser_frame-sort-pop-up"
#Const C_Id_FrameSortPopUpCustomContent "tmnext-track-browser_frame-sort-pop-up-custom-content"
#Const C_Id_SortOption1 "tmnext-track-browser_sort-option-1"
#Const C_Id_SortOption2 "tmnext-track-browser_sort-option-2"
#Const C_Id_FrameHeader "tmnext-track-browser_frame-header"
#Const C_Id_LabelTitle "tmnext-track-browser_label-title"
#Const C_Id_LabelSubtitle "tmnext-track-browser_label-subtitle"
#Const C_Id_FrameTabs "tmnext-track-browser_frame-tabs"
#Const C_Id_FrameCommonContent "tmnext-track-browser_frame-common-content"
#Const C_Id_LabelSectionTitle "tmnext-track-browser_label-section-title"
#Const C_Id_FrameLoadingSpinner "tmnext-track-browser_frame-loading-spinner"
#Const C_Id_LabelError "tmnext-track-browser_label-error"
#Const C_Id_FrameOptions "tmnext-track-browser_frame-options"
#Const C_Id_ButtonSelectAllTracks "tmnext-track-browser_button-select-all-tracks"
#Const C_Id_ButtonIconSelectAll "tmnext-track-browser_button-icon-select-all"
#Const C_Id_FrameSpaceDisk "tmnext-track-browser_frame-space-disk"
#Const C_Id_FrameBackgroundSpaceLeftOnDisk "tmnext-track-browser_frame-background-space-left-on-disk"
#Const C_Id_FrameSpaceLeftOnDisk "tmnext-track-browser_frame-space-left-on-disk"
#Const C_Id_LabelSpaceLeftOnDisk "tmnext-track-browser_label-space-left-on-disk"
#Const C_Id_ButtonFlatten "tmnext-track-browser_button-flatten"
#Const C_Id_ButtonRefresh "tmnext-track-browser_button-refresh"
#Const C_Id_ButtonOpenExplorer "tmnext-track-browser_button-open-explorer"
#Const C_Id_ButtonSort "tmnext-track-browser_button-sort"
#Const C_Id_ButtonIconSort "tmnext-track-browser_button-icon-sort"
#Const C_Id_FrameScrollTracks "tmnext-track-browser_frame-scroll-tracks"
#Const C_Id_LabelNoTracks "tmnext-track-browser_label-no-tracks"
#Const C_Id_LabelNoTracksDetails "tmnext-track-browser_label-no-tracks-details"
#Const C_Id_ButtonBack "tmnext-track-browser_button-back"
#Const C_Id_ButtonIconBack "tmnext-track-browser_button-icon-back"
#Const C_Id_ButtonAddSelectedTracks "tmnext-track-browser_button-add-selected-tracks"
#Const C_Id_ButtonIconAddTracks "tmnext-track-browser_button-icon-add-tracks"
#Const C_Id_FrameMyTracks "tmnext-track-browser_frame-my-tracks"
#Const C_Id_ButtonMyLocalTracks "tmnext-track-browser_button-my-local-tracks"
#Const C_Id_ButtonMyOnlineTracks "tmnext-track-browser_button-my-online-tracks"
#Const C_Id_FrameOfficial "tmnext-track-browser_frame-official"
#Const C_Id_FrameButtons "tmnext-track-browser_frame-buttons"
#Const C_Id_ButtonOfficialCampaigns "tmnext-track-browser_button-official-campaigns"
#Const C_Id_FrameTOTD "tmnext-track-browser_frame-totd"
#Const C_Id_ButtonTOTD "tmnext-track-browser_button-totd"
#Const C_Id_LabelTOTDDay "tmnext-track-browser_label-totd-day"
#Const C_Id_FrameRoyal "tmnext-track-browser_frame-royal"
#Const C_Id_FrameRoyalVictory "tmnext-track-browser_frame-royal-victory"
#Const C_Id_ButtonRoyal "tmnext-track-browser_button-royal"
#Const C_Id_FrameScrollOfficialCampaigns "tmnext-track-browser_frame-scroll-official-campaigns"
#Const C_Id_FrameScrollTOTD "tmnext-track-browser_frame-scroll-totd"
#Const C_Id_FrameClubs "tmnext-track-browser_frame-clubs"
#Const C_Id_FrameScrollClubs "tmnext-track-browser_frame-scroll-clubs"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text GetManialink() {
	declare Vec2 Pos_Title = MLHelpers::SkewX(<-126., 62.>, PopUpBackground::C_SkewAngle);
	declare Vec2 Pos_SubTitle = MLHelpers::SkewX(<-124., 52.>, PopUpBackground::C_SkewAngle);
	declare Vec2 Pos_Tabs = MLHelpers::SkewX(<-125., 36.>, PopUpBackground::C_SkewAngle);
	declare Vec2 Pos_SectionTitle = MLHelpers::SkewX(<-124., 20.>, PopUpBackground::C_SkewAngle);

	declare Vec2 Size_HorizontalButton = MLHelpers::KeepRatioFromY(1232., 556., 34.5);
	declare Vec2 Pos_FirstHorizontalButton = <-128., -2.5>;
	declare Vec2 Pos_SecondHorizontalButton = <-54.5, -2.5>;
	declare Vec2 Pos_ThirdHorizontalButton = <19., -2.5>;

	declare Vec2 Size_Header = <0., 0.>;
	declare Vec2 Size_Footer = <0., 0.>;

	/* Scroll tracks common */
	declare Vec2 Size_TracksScrollWindow = <255., 73.>;
	declare Integer ColumnsNb_Tracks = 6;
	declare Integer RowsNb_Tracks = 2;
	declare Integer TracksPerPage = ColumnsNb_Tracks * RowsNb_Tracks;
	declare Vec2 Size_TrackMargin = <3., 3.>;
	declare Vec2 Size_Track = Scroll::GetElementSize(Size_TracksScrollWindow, Size_TrackMargin, ColumnsNb_Tracks, RowsNb_Tracks);
	declare Integer TracksElementsNb = Scroll::GetRequiredElementsNb(Size_TracksScrollWindow, Size_Track, Size_TrackMargin, ColumnsNb_Tracks);

	declare Vec2 Size_TrackImage = MLHelpers::KeepRatioFromY(544., 412., Size_Track.Y);
	declare Vec2 Size_Track_Adjusted = <Size_TrackImage.X - MLHelpers::SkewX(Size_TrackImage.Y, 10.),	Size_TrackImage.Y>;
	declare Vec2 Pos_TrackNameOneLine = <Size_TrackImage.X * 0.06, Size_TrackImage.Y * -0.78>;
	declare Vec2 Pos_TrackNameTwoLines = <Size_TrackImage.X * 0.08, Size_TrackImage.Y * -0.73>;
	declare Vec2 Pos_TrackDay = <Size_TrackImage.X * 0.15, Size_TrackImage.Y * -0.12>;
	declare Vec2 Pos_TrackAuthor = <Size_TrackImage.X * 0.05, Size_TrackImage.Y * -0.9>;
	declare Vec2 Pos_TrackSelectedCheckbox = <Size_TrackImage.X * 0.9, Size_TrackImage.Y * -0.12>;
	declare Vec2 Pos_TrackFocusOptions = <Size_TrackImage.X * 0.9, Size_TrackImage.Y * -0.12>;
	declare Vec2 Pos_TrackFocusOptionsWithMultiSelect = <Size_TrackImage.X * 0.75, Size_TrackImage.Y * -0.12>;
	
	declare Text ML_Tracks = "";
	for (I, 1, TracksElementsNb) {
		ML_Tracks ^= """
			<frameinstance
				modelid="{{{C_ModelId_FramemodelTrack}}}"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	/* Scroll clubs & club campaigns */
	declare Vec2 Size_ClubsScrollWindow = <250., 75.>;
	declare Integer ColumnsNb_Clubs = 5;
	declare Integer RowsNb_Clubs = 3;
	declare Integer ClubsPerPage = ColumnsNb_Clubs * RowsNb_Clubs;
	declare Vec2 Size_ClubMargin = <3., 3.>;
	declare Vec2 Size_Club = Scroll::GetElementSize(Size_ClubsScrollWindow, Size_ClubMargin, ColumnsNb_Clubs, RowsNb_Clubs);
	declare Integer ClubsElementsNb = Scroll::GetRequiredElementsNb(Size_ClubsScrollWindow, Size_Club, Size_ClubMargin, ColumnsNb_Clubs);

	declare Vec2 Size_ClubImage = MLHelpers::KeepRatioFromY(608., 272., Size_Club.Y);
	declare Vec2 Size_Club_Adjusted = <Size_ClubImage.X - MLHelpers::SkewX(Size_ClubImage.Y, 10.),	Size_ClubImage.Y>;
	declare Vec2 Pos_ClubName = <Size_ClubImage.X * 0.03, Size_ClubImage.Y * -0.88>;
	
	declare Text ML_Clubs = "";
	for (I, 1, ClubsElementsNb) {
		ML_Clubs ^= """
			<frameinstance
				modelid="{{{C_ModelId_FramemodelClubOrCampaign}}}"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	/* Scroll official campaigns */
	declare Vec2 Size_CampaignsScrollWindow = <195., 75.>;
	declare Integer ColumnsNb_Campaigns = 1;
	declare Integer RowsNb_Campaigns = 3;
	declare Integer CampaignsPerPage = ColumnsNb_Campaigns * RowsNb_Campaigns;
	declare Vec2 Size_CampaignMargin = <0., 3.>;
	declare Vec2 Size_Campaign = Scroll::GetElementSize(Size_CampaignsScrollWindow, Size_CampaignMargin, ColumnsNb_Campaigns, RowsNb_Campaigns);
	declare Integer CampaignsElementsNb = Scroll::GetRequiredElementsNb(Size_CampaignsScrollWindow, Size_Campaign, Size_CampaignMargin, ColumnsNb_Campaigns);

	declare Vec2 Size_CampaignYear = MLHelpers::KeepRatioFromY(128., 252., Size_Club.Y);
	
	declare Text ML_Campaigns = "";
	for (I, 1, CampaignsElementsNb) {
		declare Text ML_Campaigns_Year = "";
		declare Vec2 Pos_Campaign = <0., 0.>;
		declare Text LeftTarget = "_";
		declare Text RightTarget = "_";
		for (J, 0, 3) {
			if (J-1 >= 0) LeftTarget = C_Id_FrameOfficialCampaign^I-1^"-"^J-1;
			if (J+1 <= 3) RightTarget = C_Id_FrameOfficialCampaign^I-1^"-"^J+1;

			ML_Campaigns_Year ^= """
				<frameinstance
					id="{{{C_Id_FrameOfficialCampaign}}}{{{I-1}}}-{{{J}}}"
					modelid="{{{C_ModelId_FramemodelOfficialCampaign}}}"
					data-nav-inputs="select;cancel;left;right"
					data-nav-targets="_;_;{{{LeftTarget}}};{{{RightTarget}}}"
					pos="{{{Pos_Campaign.X}}} {{{Pos_Campaign.Y}}}"
					data-key="{{{J}}}"
				/>
			""";
			Pos_Campaign.X = Pos_Campaign.X + Size_Club.X + Size_ClubMargin.X;
		}
		ML_Campaigns ^= """
			<frame class="{{{Scroll::C_Class_Element}}}">
				<frameinstance modelid="{{{C_ModelId_FramemodelCampaignYear}}}" pos="-10.5 0" id="{{{C_Id_FrameYearCampaign}}}{{{I}}}"/>
				{{{ML_Campaigns_Year}}}
			</frame>
		""";
	}

	/* Scroll TOTD */
	declare Vec2 Size_TOTD_ScrollWindow = <255., 75.>;
	declare Integer ColumnsNb_TOTD = 1;
	declare Integer RowsNb_TOTD = 2;
	declare Integer TOTD_PerPage = ColumnsNb_TOTD * RowsNb_TOTD;
	declare Vec2 Size_TOTD_Margin = <0., 0.>;
	declare Vec2 Size_TOTD = Scroll::GetElementSize(Size_TOTD_ScrollWindow, Size_TOTD_Margin, ColumnsNb_TOTD, RowsNb_TOTD);
	declare Integer TOTD_ElementsNb = Scroll::GetRequiredElementsNb(Size_TOTD_ScrollWindow, Size_TOTD, Size_TOTD_Margin, ColumnsNb_TOTD);
	declare Integer MonthlyPerPage = TOTD_PerPage * C_MonthlyPerLine;

	declare Vec2 Size_TOTDYearOneLine = MLHelpers::KeepRatioFromY(156., 412., Size_Track.Y);
	declare Vec2 Size_TOTDYearTwoLines = MLHelpers::KeepRatioFromY(256., 512., Size_Track.Y + (Size_TrackMargin.Y / 2));
	declare Vec2 Pos_MonthNumber = <Size_Track.X * 0.77, Size_Track.Y * -0.7>;

	declare Text ML_TOTD = "";
	for (I, 1, TOTD_ElementsNb) {
		declare Text ML_TOTD_Year = "";
		declare Vec2 Pos_TOTD = <0., 0.>;
		declare Text LeftTarget = "_";
		declare Text RightTarget = "_";
		for (J, 0, C_MonthlyPerLine-1) {
			if (J-1 >= 0) LeftTarget = C_Id_FrameTOTDIndex^I-1^"-"^J-1;
			if (J+1 <= 5) RightTarget = C_Id_FrameTOTDIndex^I-1^"-"^J+1;

			ML_TOTD_Year ^= """
				<frameinstance
					id="{{{C_Id_FrameTOTDIndex}}}{{{I-1}}}-{{{J}}}"
					modelid="{{{C_ModelId_FramemodelTOTD}}}"
					data-nav-inputs="select;cancel;left;right"
					data-nav-targets="_;_;{{{LeftTarget}}};{{{RightTarget}}}"
					pos="{{{Pos_TOTD.X}}} {{{Pos_TOTD.Y}}}"
					data-key="{{{J}}}"
				/>
			""";
			Pos_TOTD.X = Pos_TOTD.X + Size_Track.X + Size_TrackMargin.X;
		}
		ML_TOTD ^= """
			<frame class="{{{Scroll::C_Class_Element}}}">
				<frameinstance modelid="{{{C_ModelId_FramemodelTOTDYear}}}" pos="-10.5 0" id="{{{C_Id_FrameYearTOTD}}}{{{I}}}"/>
				{{{ML_TOTD_Year}}}
			</frame>
		""";
	}

	declare Text[Integer] Choices = C_SortTracksPopUp_Choices;
	declare Text ChoicesJson = TL::MLEncode(Choices.tojson());

	return """
<stylesheet>
	<style class="{{{C_Class_QuadBase}}}" halign="center" valign="center"/>
	<style class="{{{C_Class_TextExtraBold}}}" halign="left" valign="center2" textcolor="ffffff" textsize="13" textprefix="$t$i" textfont="{{{FontManager::C_GameFontExtraBold}}}"/>
	<style class="{{{C_Class_TextSemiBold}}}" halign="left" valign="center2" textcolor="ffffff" textsize="5" textprefix="$t$i" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
	<style class="{{{C_Class_TextRegular}}}" halign="left" valign="center2" textcolor="ffffff" textsize="5" textprefix="$t$i" textfont="{{{FontManager::C_GameFontRegular}}}"/>
</stylesheet>

<framemodel id="{{{C_ModelId_FramemodelTrack}}}">
	<frame size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" pos="{{{Size_TrackImage.X/2}}} {{{-Size_TrackImage.Y/2}}}" halign="center" valign="center" z-index="1">
		<quad id="{{{C_Id_QuadHitbox}}}" size="{{{Size_Track_Adjusted.X}}} {{{Size_Track_Adjusted.Y*1.5}}}" scriptevents="1" class="{{{C_Class_QuadBase}}} {{{Scroll::C_Class_ActivationZone}}}" rot="10"/>
	</frame>
	<frameinstance id="{{{C_Id_ControlBlockListTrackThumbnail}}}" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" z-index="0" data-size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" data-image="{{{C_Img_Track_Folder}}}" data-alphamask="{{{Const::C_ImageUrl_Common_Track_Mask}}}" />
	<quad id="{{{C_Id_QuadGradient}}}" z-index="1" size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" image="{{{Const::C_ImageUrl_Common_Track_Gradient_Full}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}"/>
	<frameinstance id="{{{C_Id_ControlBlockListTrackName}}}" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" z-index="2" data-valign="center2" data-textsize="2" data-textsize-fitlabel-min="0.6" data-textsize-fitlabel-step="0.2" data-maxline="2" data-size="{{{Size_TrackImage.X * 0.8}}} 7" data-opacity="0.7" pos="{{{Pos_TrackNameOneLine.X}}} {{{Pos_TrackNameOneLine.Y}}}" data-filter-profanities="OnlyIfNotTranslated" data-textprefix="$t$i" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" />
	<label id="{{{C_Id_LabelTrackDay}}}" z-index="2" class="{{{C_Class_TextExtraBold}}}" textsize="3" size="{{{Size_TrackImage.X * 0.5}}} 5" opacity="0.7" pos="{{{Pos_TrackDay.X}}} {{{Pos_TrackDay.Y}}}"/>
	<frameinstance id="{{{C_Id_PlayerNameAuthor}}}" z-index="2" modelid="{{{PlayerName::C_Name}}}" pos="{{{Pos_TrackAuthor.X}}} {{{Pos_TrackAuthor.Y}}}" data-size="{{{Size_TrackImage.X * 0.8}}} 5" data-opacity="0.7" data-halign="left" data-valign="center" data-textprefix="$t$i" data-textfont="{{{FontManager::C_GameFontRegular}}}" data-textsize="2" data-textcompose="{{{C_Text_AuthorName}}}" />
	<label id="{{{C_Id_LabelFolderName}}}" z-index="2" class="{{{C_Class_TextSemiBold}}}" textsize="2" maxline="2" size="{{{Size_TrackImage.X * 0.75}}} 5" opacity="0.7" pos="{{{Pos_TrackAuthor.X}}} {{{Pos_TrackAuthor.Y}}}" filter-profanities="OnlyIfNotTranslated"/>
	<quad id="{{{C_Id_QuadFocus}}}" z-index="3" size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" image="{{{Const::C_ImageUrl_Common_Track_Contour}}}" opacity="0." colorize="FFF"/>
	<frame id="{{{C_Id_FrameTrackFocusOptions}}}" z-index="3" pos="{{{Pos_TrackFocusOptions.X}}} {{{Pos_TrackFocusOptions.Y}}}" halign="right" hidden="1" >
		<quad id="{{{C_Id_ButtonDeleteMyTrack}}}" image="{{{Const::C_ImageUrl_Icon_Bin_Inc}}}" size="7 7" pos="0 0" class="{{{C_Class_TrackOptions_Mouse_Navigation}}}" halign="center" valign="center2" colorize="FFF" opacity="0.7" scriptevents="1"/>
		<quad id="{{{C_Id_ButtonUploadMyTrack}}}" image="{{{Const::C_ImageUrl_Icon_Cloud_Inc}}}" size="7 7" pos="-8 0" class="{{{C_Class_TrackOptions_Mouse_Navigation}}}" halign="center" valign="center2" colorize="FFF" opacity="0.7" scriptevents="1"/>
		<quad id="{{{C_Id_ButtonRemoveTrackFromFavorites}}}" image="{{{Const::C_ImageUrl_Icon_Cross_Oblique_128}}}" size="7 7" pos="0 0" class="{{{C_Class_TrackOptions_Mouse_Navigation}}}" halign="center" valign="center2" colorize="FFF" opacity="0.7" scriptevents="1"/>
		<quad id="{{{C_Id_ButtonFavorite}}}" image="{{{Const::C_ImageUrl_Icon_Settings_Favorite_Empty}}}" size="7 7" pos="0 0" class="{{{C_Class_TrackOptions_Mouse_Navigation}}}" halign="center" valign="center2" colorize="FFF" opacity="0.7" scriptevents="1"/>
	</frame>
	<quad id="{{{C_Id_ButtonCheckboxTrack}}}" z-index="2" image="{{{Const::C_ImageUrl_Icon_Checkbox_Inactive_Square}}}" size="7 7" pos="{{{Pos_TrackSelectedCheckbox.X}}} {{{Pos_TrackSelectedCheckbox.Y}}}" hidden="1" halign="center" valign="center2" colorize="FFF" opacity="0.7" scriptevents="1"/>
</framemodel>

<framemodel id="{{{C_ModelId_FramemodelOfficialCampaign}}}">
	<frame size="{{{Size_ClubImage.X}}} {{{Size_ClubImage.Y}}}" pos="{{{Size_ClubImage.X/2}}} {{{-Size_ClubImage.Y/2}}}" halign="center" valign="center" z-index="1">
		<quad id="{{{C_Id_QuadScrollHitbox}}}" size="{{{Size_Club_Adjusted.X}}} {{{Size_Club_Adjusted.Y*1.5}}}" scriptevents="1" class="{{{C_Class_QuadBase}}} {{{Scroll::C_Class_ActivationZone}}}" rot="10"/>
	</frame>
	<frame size="{{{Size_ClubImage.X}}} {{{Size_ClubImage.Y}}}" pos="{{{Size_ClubImage.X/2}}} {{{-Size_ClubImage.Y/2}}}" halign="center" valign="center" z-index="2">
		<quad id="{{{C_Id_QuadMouseHitbox}}}" size="{{{Size_Club_Adjusted.X}}} {{{Size_Club_Adjusted.Y*1.5}}}" scriptevents="1" class="{{{C_Class_QuadBase}}} {{{C_Class_OfficialCampaign_Mouse_Navigation}}}" rot="10"/>
	</frame>
	<quad id="{{{C_Id_QuadBg}}}" z-index="-1" size="{{{Size_ClubImage.X}}} {{{Size_ClubImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip"/>
	<quad id="{{{C_Id_QuadImage}}}" z-index="0" size="{{{Size_ClubImage.X}}} {{{Size_ClubImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip"/>
	<quad id="{{{C_Id_QuadGradient}}}" z-index="1" size="{{{Size_ClubImage.X}}} {{{Size_ClubImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" opacity="0.8" colorize="{{{ColorPalette::C_Color_DarkBlue}}}"/>
	<label id="{{{C_Id_LabelName}}}" z-index="2" class="{{{C_Class_TextSemiBold}}}" textsize="2" size="{{{Size_ClubImage.X * 0.75}}} 7" opacity="0.7" pos="{{{Pos_ClubName.X}}} {{{Pos_ClubName.Y}}}" translate="1"/>
	<quad id="{{{C_Id_QuadFocus}}}" z-index="3" size="{{{Size_ClubImage.X}}} {{{Size_ClubImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" opacity="0." colorize="FFF"/>
</framemodel>

<framemodel id="{{{C_ModelId_FramemodelCampaignYear}}}">
	<label id="{{{C_Id_LabelYear}}}" rot="-80" textsize="3.75" pos="{{{Size_CampaignYear.X * 0.5}}} {{{Size_CampaignYear.Y * -0.5}}}" size="{{{Size_CampaignYear.Y * 0.8}}} {{{Size_CampaignYear.X * 0.9}}}" class="{{{C_Class_TextSemiBold}}}" halign="center" textcolor="{{{ColorPalette::C_Color_GreenTwo}}}"/>
	<quad id="{{{C_Id_QuadYearBg}}}" hidden="1" z-index="-1" size="{{{Size_CampaignYear.X}}} {{{Size_CampaignYear.Y}}}" image="{{{C_Img_Year_Campaign}}}" colorize="{{{ColorPalette::C_Color_GreenFour}}}"/>
</framemodel>

<framemodel id="{{{C_ModelId_FramemodelClubOrCampaign}}}">
	<frame size="{{{Size_ClubImage.X}}} {{{Size_ClubImage.Y}}}" pos="{{{Size_ClubImage.X/2}}} {{{-Size_ClubImage.Y/2}}}" halign="center" valign="center" z-index="1">
		<quad id="{{{C_Id_QuadHitbox}}}" size="{{{Size_Club_Adjusted.X}}} {{{Size_Club_Adjusted.Y*1.5}}}" scriptevents="1" class="{{{C_Class_QuadBase}}} {{{Scroll::C_Class_ActivationZone}}}" rot="10"/>
	</frame>
	<quad id="{{{C_Id_QuadBg}}}" z-index="-1" size="{{{Size_ClubImage.X}}} {{{Size_ClubImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip"/>
	<quad id="{{{C_Id_QuadImage}}}" z-index="0" size="{{{Size_ClubImage.X}}} {{{Size_ClubImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip"/>
	<quad id="{{{C_Id_QuadGradient}}}" z-index="1" size="{{{Size_ClubImage.X}}} {{{Size_ClubImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" opacity="0.8" colorize="{{{ColorPalette::C_Color_DarkBlue}}}"/>
	<label id="{{{C_Id_LabelName}}}" z-index="2" class="{{{C_Class_TextSemiBold}}}" textsize="2" size="{{{Size_ClubImage.X * 0.75}}} 7" opacity="0.7" pos="{{{Pos_ClubName.X}}} {{{Pos_ClubName.Y}}}" filter-profanities="OnlyIfNotTranslated"/>
	<quad id="{{{C_Id_QuadFocus}}}" z-index="3" size="{{{Size_ClubImage.X}}} {{{Size_ClubImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" opacity="0." colorize="FFF"/>
</framemodel>

<framemodel id="{{{C_ModelId_FramemodelTOTD}}}">
	<frame size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" pos="{{{Size_TrackImage.X/2}}} {{{-Size_TrackImage.Y/2}}}" halign="center" valign="center" z-index="1">
		<quad id="{{{C_Id_QuadScrollHitbox}}}" size="{{{Size_Track_Adjusted.X}}} {{{Size_Track_Adjusted.Y*1.5}}}" scriptevents="1" class="{{{C_Class_QuadBase}}} {{{Scroll::C_Class_ActivationZone}}}" rot="10"/>
	</frame>
	<frame size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" pos="{{{Size_TrackImage.X/2}}} {{{-Size_TrackImage.Y/2}}}" halign="center" valign="center" z-index="2">
		<quad id="{{{C_Id_QuadMouseHitbox}}}" size="{{{Size_Track_Adjusted.X}}} {{{Size_Track_Adjusted.Y*1.5}}}" scriptevents="1" class="{{{C_Class_QuadBase}}} {{{C_Class_Monthly_Mouse_Navigation}}}" rot="10"/>
	</frame>
	<quad id="{{{C_Id_QuadImage}}}" z-index="0" size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" image="{{{C_Img_Track_Folder}}}" alphamask="{{{Const::C_ImageUrl_Common_Track_Mask}}}"/>
	<quad id="{{{C_Id_QuadGradient}}}" z-index="2" opacity="0.5" size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" image="{{{Const::C_ImageUrl_Common_Track_Gradient_Full}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}"/>
	<label id="{{{C_Id_LabelMonthName}}}" z-index="3" class="{{{C_Class_TextSemiBold}}}" textsize="2" size="{{{Size_TrackImage.X * 0.75}}} 5" opacity="0.7" pos="{{{Pos_TrackAuthor.X}}} {{{Pos_TrackAuthor.Y}}}" translate="1"/>
	<label id="{{{C_Id_LabelMonthNumber}}}" z-index="1" textsize="12" class="{{{C_Class_TextExtraBold}}}" halign="center" textcolor="{{{ColorPalette::C_Color_GreenTwo}}}" size="{{{Size_TrackImage.X * 0.75}}} {{{Size_TrackImage.Y * 0.75}}}" opacity="0.6" pos="{{{Pos_MonthNumber.X}}} {{{Pos_MonthNumber.Y}}}"/>
	<quad id="{{{C_Id_QuadFocus}}}" z-index="4" size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" image="{{{Const::C_ImageUrl_Common_Track_Contour}}}" opacity="0." colorize="FFF"/>
</framemodel>

<framemodel id="{{{C_ModelId_FramemodelTOTDYear}}}">
	<label id="{{{C_Id_LabelYear}}}" rot="-80" textsize="3.75" pos="{{{Size_TOTDYearOneLine.X * 0.5}}} {{{Size_TOTDYearOneLine.Y * -0.5}}}" size="{{{Size_TOTDYearOneLine.Y * 0.8}}} {{{Size_TOTDYearOneLine.X * 0.9}}}" class="{{{C_Class_TextSemiBold}}}" halign="center" textcolor="{{{ColorPalette::C_Color_GreenTwo}}}"/>
	<quad id="{{{C_Id_QuadYearBgOneLine}}}" hidden="1" z-index="-1" size="{{{Size_TOTDYearOneLine.X}}} {{{Size_TOTDYearOneLine.Y}}}" image="{{{C_Img_Year_TOTD_OneLine}}}" colorize="{{{ColorPalette::C_Color_GreenFour}}}"/>
	<quad id="{{{C_Id_QuadYearBgTwoLinesTop}}}" hidden="1" z-index="-1" size="{{{Size_TOTDYearTwoLines.X}}} {{{Size_TOTDYearTwoLines.Y}}}" pos="{{{-Size_TrackMargin.X * 0.9}}} 0" image="{{{C_Img_Year_TOTD_TwoLinesTop}}}" colorize="{{{ColorPalette::C_Color_GreenFour}}}"/>
	<quad id="{{{C_Id_QuadYearBgTwoLinesBottom}}}" hidden="1" z-index="-1" size="{{{Size_TOTDYearTwoLines.X}}} {{{Size_TOTDYearTwoLines.Y}}}" pos="{{{-Size_TrackMargin.X * 0.75}}} {{{Size_TrackMargin.Y * 0.5}}}" image="{{{C_Img_Year_TOTD_TwoLinesBottom}}}" colorize="{{{ColorPalette::C_Color_GreenFour}}}"/>
</framemodel>

<frame
	id="{{{C_Id_FrameGlobal}}}"
	class="{{{Navigation::C_Class}}}"
	hidden="1"
	data-nav-inputs="action3;action4;appmenu"
	data-nav-targets="_;_;_"
	data-nav-group="{{{C_NavGroupGlobal}}}"
	data-pos-track-name-one-line="{{{Pos_TrackNameOneLine.X}}} {{{Pos_TrackNameOneLine.Y}}}"
	data-pos-track-name-two-lines="{{{Pos_TrackNameTwoLines.X}}} {{{Pos_TrackNameTwoLines.Y}}}"
	data-pos-track-author="{{{Pos_TrackAuthor.X}}} {{{Pos_TrackAuthor.Y}}}"
	data-pos-track-focus-options="{{{Pos_TrackFocusOptions.X}}} {{{Pos_TrackFocusOptions.Y}}}"
	data-pos-track-focus-options-with-multi-select="{{{Pos_TrackFocusOptionsWithMultiSelect.X}}} {{{Pos_TrackFocusOptionsWithMultiSelect.Y}}}"
	data-pos-second-horizontal-button="{{{Pos_SecondHorizontalButton.X}}} {{{Pos_SecondHorizontalButton.Y}}}"
	data-pos-third-horizontal-button="{{{Pos_ThirdHorizontalButton.X}}} {{{Pos_ThirdHorizontalButton.Y}}}"
	data-monthly-per-page="{{{MonthlyPerPage}}}"
	data-totd-per-page="{{{TOTD_PerPage}}}"
>
	<frameinstance
		id="{{{C_Id_PopUpBackground}}}"
		modelid="{{{PopUpBackground::C_Name}}}"
		z-index="-1"
		data-header-image="{{{C_Img_TrackBrowserHeader}}}"
	/>

	<frame id="{{{C_Id_FrameMultichoiceGlobal}}}" z-index="2">
		<frameinstance
			id="{{{C_Id_FrameMultichoice}}}" 
			modelid="{{{PopUpMultiChoice::C_Name}}}"
			hidden="1"
		/>
		<frameinstance id="{{{C_Id_FrameLoadingSpinnerPopUpMultichoice}}}" z-index="1" modelid="{{{LoadingSpinner::C_Name}}}" scale="0.8" halign="center" valign="center"/>

		<frameinstance
			id="{{{C_Id_FrameSortPopUp}}}" 
			modelid="{{{PopUpMultiChoice::C_Name}}}"
			data-custom-content-frame="{{{C_Id_FrameSortPopUpCustomContent}}}"
			data-title="{{{C_SortTracksPopUp_Title}}}"
			data-choices="{{{ChoicesJson}}}"
			data-close-after-selection="0"  
			data-nav-inputs="up"
			data-nav-targets="{{{C_Id_SortOption2}}}"
			hidden="1"
		/>
		<frame id="{{{C_Id_FrameSortPopUpCustomContent}}}" z-index="1" hidden="1">
			<frameinstance
				id="{{{C_Id_SortOption1}}}"
				modelid="{{{Checkbox::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{PopUpMultiChoice::C_Class_Navigation}}}"
				pos="{{{MLHelpers::Skew(0., 6., 10.)}}}"
				data-labelsize="50 10"
				data-text="{{{C_Text_ByName}}}"
				data-textmirror="{{{C_Text_ByDate}}}"
				data-textxpos="0.7"
				data-texthalign="left"
				data-textitalicslope=".2"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textcolor="{{{ColorPalette::C_Color_White}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-textsize="4.5"
				data-fitlabel="1"
				data-opacityunfocus="0.6"
				data-iconsize="12 12"
				data-iconxpos="0.5"
				data-iconcolor="{{{ColorPalette::C_Color_White}}}"
				data-iconfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-iconchecked="{{{Const::C_ImageUrl_Icon_SwitchOn}}}"
				data-iconunchecked="{{{Const::C_ImageUrl_Icon_SwitchOff}}}"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;left;right;down"
				data-nav-targets="_;_;_;_;{{{C_Id_SortOption2}}}"
				data-nav-group="{{{PopUpMultiChoice::C_NavGroup}}}"
				data-nav-zone="{{{Checkbox::C_NavZone}}}"
			/>
			<frameinstance
				id="{{{C_Id_SortOption2}}}"
				modelid="{{{Checkbox::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{PopUpMultiChoice::C_Class_Navigation}}}"
				pos="{{{MLHelpers::Skew(0., -6., 10.)}}}"
				data-labelsize="50 10"
				data-text="{{{C_Text_Ascending}}}"
				data-textmirror="{{{C_Text_Descending}}}"
				data-textxpos="0.7"
				data-texthalign="left"
				data-textitalicslope=".2"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textcolor="{{{ColorPalette::C_Color_White}}}"
				data-textfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-textsize="4.5"
				data-fitlabel="1"
				data-opacityunfocus="0.6"
				data-iconsize="12 12"
				data-iconxpos="0.5"
				data-iconcolor="{{{ColorPalette::C_Color_White}}}"
				data-iconfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-iconchecked="{{{Const::C_ImageUrl_Icon_SwitchOn}}}"
				data-iconunchecked="{{{Const::C_ImageUrl_Icon_SwitchOff}}}"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;left;right;up;down"
				data-nav-targets="_;_;_;_;{{{C_Id_SortOption1}}};{{{PopUpMultiChoice::C_FirstChoice}}}"
				data-nav-group="{{{PopUpMultiChoice::C_NavGroup}}}"
				data-nav-zone="{{{Checkbox::C_NavZone}}}"
			/>
		</frame>
	</frame>

	<frame id="{{{C_Id_FrameHeader}}}">
		<label id="{{{C_Id_LabelTitle}}}" pos="{{{Pos_Title.X}}} {{{Pos_Title.Y}}}" size="200 30" class="{{{C_Class_TextExtraBold}}}" text="{{{C_Text_Title}}}" />
		<label id="{{{C_Id_LabelSubtitle}}}" pos="{{{Pos_SubTitle.X}}} {{{Pos_SubTitle.Y}}}" size="200 15" class="{{{C_Class_TextSemiBold}}}" text="{{{C_Text_SubTitleSingular}}}" />
		<frameinstance
			id="{{{C_Id_FrameTabs}}}"
			pos="{{{Pos_Tabs.X}}} {{{Pos_Tabs.Y}}}"
			modelid="{{{NavigationTabs::C_Name}}}"
			data-halign="left"
			data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}"
			data-tabs-padding="2.5 0"
			data-events-delay="{{{C_EventsDelay}}}"
		/>
	</frame>

	<frame id="{{{C_Id_FrameCommonContent}}}">
		<label id="{{{C_Id_LabelSectionTitle}}}" size="155 10" pos="{{{Pos_SectionTitle.X}}} {{{Pos_SectionTitle.Y}}}" class="{{{C_Class_TextExtraBold}}}" textsize="4"/>
		<frameinstance id="{{{C_Id_FrameLoadingSpinner}}}" modelid="{{{LoadingSpinner::C_Name}}}" pos="5 -25" halign="center" valign="center"/>
		<label id="{{{C_Id_LabelError}}}" size="140 10" pos="-10 -70" textcolor="{{{ColorPalette::C_Color_ErrorRed}}}" class="{{{C_Class_TextSemiBold}}}" textsize="4" textprefix="$i" halign="center"/>

		<frame id="{{{C_Id_FrameOptions}}}" pos="95 20.5" hidden="1">
			<frameinstance
				id="{{{C_Id_ButtonSelectAllTracks}}}"
				modelid="{{{Checkbox::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_OptionButton_FocusMemory}}}"
				pos="12.5 -1.1"
				data-labelsize="20 10"
				data-text="{{{C_Text_SelectAll}}}"
				data-textxpos="0.35"
				data-textypos="0.5"
				data-texthalign="right"
				data-textitalicslope=".2"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-textcolor="{{{ColorPalette::C_Color_White}}}"
				data-textsize="2.5"
				data-fitlabel="1"
				data-opacityunfocus="0.6"
				data-iconsize="7 7"
				data-iconxpos="0.5"
				data-iconypos="0.53"
				data-iconcolor="{{{ColorPalette::C_Color_White}}}"
				data-iconchecked="{{{Const::C_ImageUrl_Icon_Checkbox_Active_Square}}}"
				data-iconunchecked="{{{Const::C_ImageUrl_Icon_Checkbox_Inactive_Square}}}"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;right;down"
				data-nav-targets="_;_;{{{C_Id_ButtonFlatten}}};{{{C_Id_FrameScrollTracks}}}"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Checkbox::C_NavZone}}}"
			/>
			<frameinstance modelid="{{{ButtonIcon::C_Name}}}" id="{{{C_Id_ButtonIconSelectAll}}}" data-halign="center" data-size="6 6" data-bind="LT" data-hideformouse="1" />

			<frame id="{{{C_Id_FrameSpaceDisk}}}" pos="-15 -0.15" hidden="1">
				<frameinstance 
					id="{{{C_Id_FrameBackgroundSpaceLeftOnDisk}}}"
					data-halign="left"
					modelid="{{{ExpendableAsset_TMNext::C_Name}}}"
					data-styles="{{{ExpendableAsset_TMNext::C_Style_EdgesRounded}}}"
					data-height="3"
					data-width="{{{C_SpaceOnDiskAssetWidth}}}"
					data-color="{{{ColorPalette::C_Color_GreenFour}}}"
					data-opacity="0.8"
					z-index="1"
				/>
				<frameinstance 
					id="{{{C_Id_FrameSpaceLeftOnDisk}}}"
					data-halign="left"
					modelid="{{{ExpendableAsset_TMNext::C_Name}}}"
					data-styles="{{{ExpendableAsset_TMNext::C_Style_EdgesRounded}}}"
					data-height="3"
					data-width="{{{C_SpaceOnDiskAssetWidth}}}"
					data-color="{{{ColorPalette::C_Color_GreenTwo}}}"
					data-opacity="0.8"
					z-index="2"
				/>
				<label id="{{{C_Id_LabelSpaceLeftOnDisk}}}" size="20 10" pos="-1 -0.25" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" opacity="0.6" class="{{{C_Class_TextSemiBold}}}" textsize="1" textprefix="$i" halign="right"/>
			</frame>

			<frameinstance
				id="{{{C_Id_ButtonFlatten}}}"
				modelid="{{{Checkbox::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				pos="-8 0"
				data-opacityunfocus="0.6"
				data-iconsize="7 7"
				data-iconcolor="{{{ColorPalette::C_Color_White}}}"
				data-iconfocuscolor="{{{ColorPalette::C_Color_White}}}"
				data-iconchecked="{{{Const::C_ImageUrl_Icon_Flatten_Files}}}"
				data-iconunchecked="{{{Const::C_ImageUrl_Icon_Flatten_Arbo}}}"
				data-halign="center"
				data-valign="center"
				data-nav-inputs="select;cancel;right;left;down"
				data-nav-targets="_;_;{{{C_Id_ButtonRefresh}}};{{{C_Id_ButtonSelectAllTracks}}};{{{C_Id_FrameScrollTracks}}}"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Checkbox::C_NavZone}}}"
			/>

			<frameinstance
				id="{{{C_Id_ButtonRefresh}}}"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{C_Class_OptionButton_FocusMemory}}}"
				data-opacity="1."
				data-opacityunfocus="0.6"
				data-halign="center"
				data-valign="center"
				data-bgcolor="FFF"
				data-focuscolor="FFF"
				data-image="{{{Const::C_ImageUrl_Icon_Refresh}}}"
				data-imagefocus="{{{Const::C_ImageUrl_Icon_Refresh}}}"
				data-size="7 7"
				data-nav-inputs="select;cancel;right;left;down"
				data-nav-targets="_;_;{{{C_Id_ButtonOpenExplorer}}};{{{C_Id_ButtonFlatten}}};{{{C_Id_FrameScrollTracks}}}"
				data-nav-group="{{{C_NavGroupName}}}"
				data-menusounds-selectsound="SelectRefresh"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				id="{{{C_Id_ButtonOpenExplorer}}}"
				modelid="{{{Button::C_Name}}}"
				pos="8 0"
				class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{C_Class_OptionButton_FocusMemory}}}"
				data-opacity="1."
				data-opacityunfocus="0.6"
				data-halign="center"
				data-valign="center"
				data-bgcolor="FFF"
				data-focuscolor="FFF"
				data-image="{{{Const::C_ImageUrl_Icon_Explorer_Inc}}}"
				data-imagefocus="{{{Const::C_ImageUrl_Icon_Explorer_Inc}}}"
				data-size="7 7"
				data-nav-inputs="select;cancel;left;right;down"
				data-nav-targets="_;_;{{{C_Id_ButtonRefresh}}};{{{C_Id_ButtonSort}}};{{{C_Id_FrameScrollTracks}}}"
				data-nav-group="{{{C_NavGroupName}}}"
				data-menusounds-selectsound="SelectOpenFolderInExplorer"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>

			<frameinstance
				id="{{{C_Id_ButtonSort}}}"
				modelid="{{{ExpendableButton_TMNext::C_Name}}}"
				pos="27.5 0"
				class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{C_Class_OptionButton_FocusMemory}}}"
				data-styles="{{{ExpendableButton_TMNext::C_Style_SizeSmall}}} {{{ExpendableButton_TMNext::C_Style_AlignCenter}}} {{{ExpendableButton_TMNext::C_Style_ButtonTertiary}}}"
				data-text="{{{C_Text_Sort}}}"
				data-nav-inputs="select;cancel;left;down"
				data-nav-targets="_;_;{{{C_Id_ButtonOpenExplorer}}};{{{C_Id_FrameScrollTracks}}}"
				data-nav-group="{{{C_NavGroupName}}}"
				data-menusounds-selectsound="SelectBrowserSortOption"
				data-nav-zone="{{{ExpendableButton_TMNext::C_NavZone}}}"
			/>
			<frameinstance modelid="{{{ButtonIcon::C_Name}}}" id="{{{C_Id_ButtonIconSort}}}" pos="41.5 0" data-halign="left" data-size="6 6" data-bind="RT" data-hideformouse="1" />
		</frame>

		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="{{{C_Id_FrameScrollTracks}}}" z-index="1" />
		<frame
			id="{{{C_Id_FrameScrollTracks}}}"
			pos="{{{Size_TracksScrollWindow.X * -0.514}}} {{{Size_TracksScrollWindow.Y * 0.22}}}"
			data-elements-per-line="{{{ColumnsNb_Tracks}}}"
			data-pager-page-size="{{{TracksPerPage*2}}}"
			data-element-size="{{{Size_Track.X}}} {{{Size_Track.Y}}}"
			data-margin-size="{{{Size_TrackMargin.X}}} {{{Size_TrackMargin.Y}}}"
			data-window-size="{{{Size_TracksScrollWindow.X}}} {{{Size_TracksScrollWindow.Y}}}"
			data-header-height="{{{Size_Header.Y}}}"
			data-footer-height="{{{Size_Footer.Y}}}"
			data-scroll-indicator-x-offset="-10."
			data-scroll-indicator-y-offset="-12."
			data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-colorize="FFFFFF"
			data-scroll-indicator-size="12"
			data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_Never}}}"
			data-scrollpadding="17.5"
			data-enable-prescroll="0"
			data-skew="-10."
			data-skew-valign="{{{Scroll::C_SkewVAlign_Center}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			hidden="1"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_Tracks}}}
		</frame>
		<label id="{{{C_Id_LabelNoTracks}}}" size="180 10" pos="5 -10" text="{{{C_Text_NoTracks}}}" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" class="{{{C_Class_TextSemiBold}}}" halign="center" hidden="1"/>
		<label id="{{{C_Id_LabelNoTracksDetails}}}" size="250 10" pos="3 -20" class="{{{C_Class_TextRegular}}}" textprefix="$i" halign="center" hidden="1"/>

		<frameinstance
			id="{{{C_Id_ButtonBack}}}"
			modelid="{{{ExpendableButton_TMNext::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			pos="-137.5 -67"
			data-styles="{{{ExpendableButton_TMNext::C_Style_SizeExpendable}}} {{{ExpendableButton_TMNext::C_Style_AlignCenter}}} {{{ExpendableButton_TMNext::C_Style_ButtonSecondary}}}"
			data-halign="left"
			data-text="{{{C_Text_Exit}}}"
			data-nav-inputs="select;cancel;up;right"
			data-nav-targets="_;_;{{{C_Id_ButtonMyLocalTracks}}};_"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton_TMNext::C_NavZone}}}"
		/>
		<frameinstance modelid="{{{ButtonIcon::C_Name}}}" id="{{{C_Id_ButtonIconBack}}}" pos="-138.5 -67" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />

		<frameinstance
			id="{{{C_Id_ButtonAddSelectedTracks}}}"
			modelid="{{{ExpendableButton_TMNext::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			pos="120 -67"
			data-styles="{{{ExpendableButton_TMNext::C_Style_SizeExpendable}}} {{{ExpendableButton_TMNext::C_Style_AlignCenter}}} {{{ExpendableButton_TMNext::C_Style_ButtonSecondary}}}"
			data-max-width="60"
			data-halign="right"
			data-text="{{{C_Text_AddTracks}}}"
			data-nav-inputs="select;appmenu;cancel;up;left"
			data-nav-targets="_;_;_;{{{C_Id_FrameScrollTracks}}};{{{C_Id_ButtonBack}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton_TMNext::C_NavZone}}}"
			data-nav-locked="1"
			hidden="1"
		/>
		<frameinstance hidden="1" modelid="{{{ButtonIcon::C_Name}}}" id="{{{C_Id_ButtonIconAddTracks}}}" pos="120 -67" data-halign="left" data-size="8 8" data-bind="AppMenu" data-hideformouse="1" />
	</frame>

	<frame id="{{{C_Id_FrameMyTracks}}}">
		<frameinstance
			id="{{{C_Id_ButtonMyLocalTracks}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_MainButton_FocusMemory}}}"
			pos="{{{Pos_FirstHorizontalButton.X}}} {{{Pos_FirstHorizontalButton.Y}}}"
			data-text="{{{C_Text_LocalTracks}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{C_Img_MyLocalTracks}}}"
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus=".0"
			data-isblink="1"
			data-textsize="2"
			data-texthalign="left"
			data-textitalicslope=".2"
			data-textxpos="0.05" data-textypos="-0.9"
			data-textfont="{{{FontManager::C_GameFontSemiBold}}}"
			data-valign="center" data-halign="left"
			data-tilthitbox="10"
			data-nav-inputs="select;cancel;right;down"
			data-nav-targets="_;_;{{{C_Id_ButtonMyOnlineTracks}}};{{{C_Id_ButtonBack}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance
			id="{{{C_Id_ButtonMyOnlineTracks}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_MainButton_FocusMemory}}}"
			pos="{{{Pos_SecondHorizontalButton.X}}} {{{Pos_SecondHorizontalButton.Y}}}"
			data-text="{{{C_Text_OnlineTracks}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{C_Img_MyOnlineTracks}}}"
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus=".0"
			data-isblink="1"
			data-textsize="2"
			data-texthalign="left"
			data-textitalicslope=".2"
			data-textxpos="0.05" data-textypos="-0.9"
			data-textfont="{{{FontManager::C_GameFontSemiBold}}}"
			data-valign="center" data-halign="left"
			data-tilthitbox="10"
			data-nav-inputs="select;cancel;left;down"
			data-nav-targets="_;_;{{{C_Id_ButtonMyLocalTracks}}};{{{C_Id_ButtonBack}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>

	<frame id="{{{C_Id_FrameOfficial}}}">
		<frame id="{{{C_Id_FrameButtons}}}">
			<frameinstance
				id="{{{C_Id_ButtonOfficialCampaigns}}}"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_MainButton_FocusMemory}}}"
				pos="{{{Pos_FirstHorizontalButton.X}}} {{{Pos_FirstHorizontalButton.Y}}}"
				data-text="{{{C_Text_OfficialCampaigns}}}"
				data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
				data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-image="{{{C_Img_OfficialCampaigns}}}"
				data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
				data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
				data-contouropacityunfocus=".0"
				data-isblink="1"
				data-textsize="2"
				data-texthalign="left"
				data-textitalicslope=".2"
				data-textxpos="0.05" data-textypos="-0.9"
				data-textfont="{{{FontManager::C_GameFontSemiBold}}}"
				data-valign="center" data-halign="left"
				data-tilthitbox="10"
				data-nav-inputs="select;cancel;right;down"
				data-nav-targets="_;_;{{{C_Id_ButtonTOTD}}};{{{C_Id_ButtonBack}}}"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<frame id="{{{C_Id_FrameTOTD}}}" pos="{{{Pos_SecondHorizontalButton.X}}} {{{Pos_SecondHorizontalButton.Y}}}">
				<frameinstance
					id="{{{C_Id_ButtonTOTD}}}"
					modelid="{{{Button::C_Name}}}"
					class="{{{Navigation::C_Class}}} {{{C_Class_MainButton_FocusMemory}}}"
					data-text="{{{C_Text_TOTD}}}"
					data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
					data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
					data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
					data-image="{{{C_Img_TOTD}}}"
					data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
					data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
					data-contouropacityunfocus=".0"
					data-isblink="1"
					data-textsize="2"
					data-texthalign="left"
					data-textitalicslope=".2"
					data-textxpos="0.05" data-textypos="-0.9"
					data-textfont="{{{FontManager::C_GameFontSemiBold}}}"
					data-valign="center" data-halign="left"
					data-tilthitbox="10"
					data-nav-inputs="select;cancel;left;right;down"
					data-nav-targets="_;_;{{{C_Id_ButtonOfficialCampaigns}}};{{{C_Id_ButtonRoyal}}};{{{C_Id_ButtonBack}}}"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
				<label id="{{{C_Id_LabelTOTDDay}}}" class="{{{C_Class_TextExtraBold}}}" pos="{{{Size_HorizontalButton.X * 0.505}}} {{{Size_HorizontalButton.Y/2 * 0.005}}}" size="10 10" textsize="3.25" halign="center" textprefix="$t" textcolor="{{{C_Color_TOTD_Day}}}" z-index="2" />
			</frame>
			<frame id="{{{C_Id_FrameRoyal}}}" pos="{{{Pos_ThirdHorizontalButton.X}}} {{{Pos_ThirdHorizontalButton.Y}}}">
				<frameinstance modelid="{{{PlayerRoyalVictories::C_Name}}}" id="{{{C_Id_FrameRoyalVictory}}}" pos="{{{Size_HorizontalButton.X * 0.5}}} 0" scale="0.85" z-index="2" data-imagetype="{{{PlayerRoyalVictories::C_ImageType_Lion_Without_Count}}}"/>
				<frameinstance
					id="{{{C_Id_ButtonRoyal}}}"
					modelid="{{{Button::C_Name}}}"
					class="{{{Navigation::C_Class}}} {{{C_Class_MainButton_FocusMemory}}}"
					data-text="{{{C_Text_Royal}}}"
					data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
					data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
					data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
					data-image="{{{C_Img_Royal}}}"
					data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
					data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
					data-contouropacityunfocus=".0"
					data-isblink="1"
					data-textsize="2"
					data-texthalign="left"
					data-textitalicslope=".2"
					data-textxpos="0.05" data-textypos="-0.9"
					data-textfont="{{{FontManager::C_GameFontSemiBold}}}"
					data-valign="center" data-halign="left"
					data-tilthitbox="10"
					data-nav-inputs="select;cancel;left;down"
					data-nav-targets="_;_;{{{C_Id_ButtonTOTD}}};{{{C_Id_ButtonBack}}}"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
			</frame>
		</frame>

		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="{{{C_Id_FrameScrollOfficialCampaigns}}}" z-index="1" />
		<frame
			id="{{{C_Id_FrameScrollOfficialCampaigns}}}"
			pos="{{{Size_CampaignsScrollWindow.X * -0.65}}} {{{Size_CampaignsScrollWindow.Y * 0.22}}}"
			data-elements-per-line="{{{ColumnsNb_Campaigns}}}"
			data-pager-page-size="{{{CampaignsPerPage*2}}}"
			data-element-size="{{{Size_Campaign.X}}} {{{Size_Campaign.Y}}}"
			data-margin-size="{{{Size_CampaignMargin.X}}} {{{Size_CampaignMargin.Y}}}"
			data-window-size="{{{Size_CampaignsScrollWindow.X}}} {{{Size_CampaignsScrollWindow.Y}}}"
			data-header-height="{{{Size_Header.Y}}}"
			data-footer-height="{{{Size_Footer.Y}}}"
			data-scroll-indicator-x-offset="-10."
			data-scroll-indicator-y-offset="-12."
			data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-colorize="FFFFFF"
			data-scroll-indicator-size="12"
			data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_Never}}}"
			data-scrollpadding="17.5"
			data-skew="-10."
			data-skew-valign="{{{Scroll::C_SkewVAlign_Center}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			hidden="1"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_Campaigns}}}
		</frame>

		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="{{{C_Id_FrameScrollTOTD}}}" z-index="1" />
			<frame
				id="{{{C_Id_FrameScrollTOTD}}}"
				pos="{{{Size_TOTD_ScrollWindow.X * -0.5}}} {{{Size_TOTD_ScrollWindow.Y * 0.22}}}"
				data-elements-per-line="{{{ColumnsNb_TOTD}}}"
				data-elements-per-page="{{{TOTD_PerPage}}}"
				data-element-size="{{{Size_TOTD.X}}} {{{Size_TOTD.Y}}}"
				data-margin-size="{{{Size_TOTD_Margin.X}}} {{{Size_TOTD_Margin.Y}}}"
				data-window-size="{{{Size_TOTD_ScrollWindow.X}}} {{{Size_TOTD_ScrollWindow.Y}}}"
				data-header-height="{{{Size_Header.Y}}}"
				data-footer-height="{{{Size_Footer.Y}}}"
				data-scroll-indicator-x-offset="-10."
				data-scroll-indicator-y-offset="-12."
				data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
				data-scroll-indicator-colorize="FFFFFF"
				data-scroll-indicator-size="12"
				data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_Never}}}"
				data-scrollpadding="17.5"
				data-enable-prescroll="0"
				data-skew="-10."
				data-skew-valign="{{{Scroll::C_SkewVAlign_Center}}}"
				data-nav-group="{{{C_NavGroupName}}}"
				class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
				hidden="1"
			>
				<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
				{{{ML_TOTD}}}
			</frame>
	</frame>

	<frame id="{{{C_Id_FrameClubs}}}">
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="{{{C_Id_FrameScrollClubs}}}" z-index="1" />
		<frame
			id="{{{C_Id_FrameScrollClubs}}}"
			pos="{{{Size_ClubsScrollWindow.X * -0.521}}} {{{Size_ClubsScrollWindow.Y * 0.22}}}"
			data-elements-per-line="{{{ColumnsNb_Clubs}}}"
			data-pager-page-size="{{{ClubsPerPage*2}}}"
			data-element-size="{{{Size_Club.X}}} {{{Size_Club.Y}}}"
			data-margin-size="{{{Size_ClubMargin.X}}} {{{Size_ClubMargin.Y}}}"
			data-window-size="{{{Size_ClubsScrollWindow.X}}} {{{Size_ClubsScrollWindow.Y}}}"
			data-header-height="{{{Size_Header.Y}}}"
			data-footer-height="{{{Size_Footer.Y}}}"
			data-scroll-indicator-x-offset="-10."
			data-scroll-indicator-y-offset="-12."
			data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-colorize="FFFFFF"
			data-scroll-indicator-size="12"
			data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_Never}}}"
			data-scrollpadding="17.5"
			data-skew="-10."
			data-skew-valign="{{{Scroll::C_SkewVAlign_Center}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			hidden="1"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_Clubs}}}
		</frame>
	</frame>
</frame>
	""";
}

Void SetOpeningTab(CMlScript _This, Integer _ChosenTab) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	assert(C_TabNames.existskey(_ChosenTab), "The chosen tab index do not exist. Check Track Browser constants");
	TMNext_TrackBrowser_State.Settings.ChosenOpeningTab = _ChosenTab;
}

Void SetOpenOnLastTabEnabled(CMlScript _This, Boolean _Enabled) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Settings.OpenOnLastTab = _Enabled;
}

Void SetMultiSelect(CMlScript _This, Boolean _MultiSelect) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Settings.MultiSelect = _MultiSelect;
}

Void SetShowOnlyMyLocalTracks(CMlScript _This, Boolean _ShowOnlyMyLocalTracks) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Settings.ShowOnlyMyLocalTracks = _ShowOnlyMyLocalTracks;
	if (_ShowOnlyMyLocalTracks) TMNext_TrackBrowser_State.Settings.ChosenOpeningTab = C_TabIndex_MyTracks;
}

Void SetIsBrowsingForEdition(CMlScript _This, Boolean _IsBrowsingForEdition) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Settings.IsBrowsingForEdition = _IsBrowsingForEdition;
}

Void SetForceShowOfficialTracks(CMlScript _This, Boolean _ForceShowOfficialTracks) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Settings.ForceShowOfficialTracks = _ForceShowOfficialTracks;
}

Void ShowOnlyUserTracks(CMlScript _This, Boolean _ShowOnlyUserTracks) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Filters.ShowOnlyUserTracks = _ShowOnlyUserTracks;
}

Void ShowOnlyPlayableTracks(CMlScript _This, Boolean _ShowOnlyPlayableTracks) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Filters.ShowOnlyPlayableTracks = _ShowOnlyPlayableTracks;
}

Void SetEnvironmentFilters(CMlScript _This, Text[] _FilterByEnvironment) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Filters.FilterByEnvironment = _FilterByEnvironment;
}

Void AddEnvironmentFilter(CMlScript _This, Text _FilterByEnvironment) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (!TMNext_TrackBrowser_State.Filters.FilterByEnvironment.exists(_FilterByEnvironment)) {
		TMNext_TrackBrowser_State.Filters.FilterByEnvironment.add(_FilterByEnvironment);
	}
}

Void SetMapTypeFilters(CMlScript _This, Text[] _FilterByMapType) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Filters.FilterByMapType = _FilterByMapType;
}

Void AddMapTypeFilter(CMlScript _This, Text _FilterByMapType) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (!TMNext_TrackBrowser_State.Filters.FilterByMapType.exists(_FilterByMapType)) {
		TMNext_TrackBrowser_State.Filters.FilterByMapType.add(_FilterByMapType);
	}
}

// Initialize browser with data settings
Void InitializeBrowser(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeExists("opening-tab")) {
		SetOpeningTab(_This, TL::ToInteger(TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeGet("opening-tab")));
	}
	if (TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeExists("open-on-last-tab-enabled")) {
		SetOpenOnLastTabEnabled(_This, Tools::TextToBoolean(TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeGet("open-on-last-tab-enabled")));
	}
	if (TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeExists("multi-select")) {
		SetMultiSelect(_This, Tools::TextToBoolean(TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeGet("multi-select")));
	}
	if (TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeExists("show-only-my-local-tracks")) {
		SetShowOnlyMyLocalTracks(_This, Tools::TextToBoolean(TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeGet("show-only-my-local-tracks")));
	}
	if (TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeExists("browsing-for-edition")) {
		SetIsBrowsingForEdition(_This, Tools::TextToBoolean(TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeGet("browsing-for-edition")));
	}
	if (TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeExists("force-show-official-tracks")) {
		SetForceShowOfficialTracks(_This, Tools::TextToBoolean(TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeGet("force-show-official-tracks")));
	}
	if (TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeExists("show-only-playable")) {
		ShowOnlyPlayableTracks(_This, Tools::TextToBoolean(TMNext_TrackBrowser_State.Controls.Frame_Global.Parent.DataAttributeGet("show-only-playable")));
	}

	TMNext_TrackBrowser_State.ManialinkProps.Pos_TrackNameOneLine = Tools::TextToVec2(TMNext_TrackBrowser_State.Controls.Frame_Global.DataAttributeGet("pos-track-name-one-line"));
	TMNext_TrackBrowser_State.ManialinkProps.Pos_TrackNameTwoLines = Tools::TextToVec2(TMNext_TrackBrowser_State.Controls.Frame_Global.DataAttributeGet("pos-track-name-two-lines"));
	TMNext_TrackBrowser_State.ManialinkProps.Pos_TrackAuthor = Tools::TextToVec2(TMNext_TrackBrowser_State.Controls.Frame_Global.DataAttributeGet("pos-track-author"));
	TMNext_TrackBrowser_State.ManialinkProps.Pos_TrackFocusOptions = Tools::TextToVec2(TMNext_TrackBrowser_State.Controls.Frame_Global.DataAttributeGet("pos-track-focus-options"));
	TMNext_TrackBrowser_State.ManialinkProps.Pos_TrackFocusOptionsWithMultiSelect = Tools::TextToVec2(TMNext_TrackBrowser_State.Controls.Frame_Global.DataAttributeGet("pos-track-focus-options-with-multi-select"));
	TMNext_TrackBrowser_State.ManialinkProps.Pos_SecondHorizontalButton = Tools::TextToVec2(TMNext_TrackBrowser_State.Controls.Frame_Global.DataAttributeGet("pos-second-horizontal-button"));
	TMNext_TrackBrowser_State.ManialinkProps.Pos_ThirdHorizontalButton = Tools::TextToVec2(TMNext_TrackBrowser_State.Controls.Frame_Global.DataAttributeGet("pos-third-horizontal-button"));
	TMNext_TrackBrowser_State.ManialinkProps.MonthlyPerPage = TL::ToInteger(TMNext_TrackBrowser_State.Controls.Frame_Global.DataAttributeGet("monthly-per-page"));
	TMNext_TrackBrowser_State.ManialinkProps.TOTDPerPage = TL::ToInteger(TMNext_TrackBrowser_State.Controls.Frame_Global.DataAttributeGet("totd-per-page"));
}

Boolean FilterTrack(CMlScript _This, Text _AuthorLogin, Boolean _IsPlayable, Text _CollectionName, Text _MapType) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare Boolean TrackPassFilter = (
		(!TMNext_TrackBrowser_State.Filters.ShowOnlyUserTracks || _AuthorLogin == LocalUser.Login || _AuthorLogin == LocalUser.WebServicesUserId) && // Map.AuthorLogin corresponds to the user login for local maps and the user webservicesuserid for online maps
		(!TMNext_TrackBrowser_State.Filters.ShowOnlyPlayableTracks || _IsPlayable) &&
		(TMNext_TrackBrowser_State.Filters.FilterByEnvironment.count <= 0 || TMNext_TrackBrowser_State.Filters.FilterByEnvironment.exists(_CollectionName)) &&
		(TMNext_TrackBrowser_State.Filters.FilterByMapType.count <= 0 || TMNext_TrackBrowser_State.Filters.FilterByMapType.exists(_MapType))
	);
	if (!TrackPassFilter && !TMNext_TrackBrowser_State.HasFilteredTracks) TMNext_TrackBrowser_State.HasFilteredTracks = True;
	return TrackPassFilter;
}

Boolean TracksShouldBeFiltered(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.HasFilteredTracks = False;
	return (
		TMNext_TrackBrowser_State.Filters.ShowOnlyUserTracks ||
		TMNext_TrackBrowser_State.Filters.ShowOnlyPlayableTracks ||
		TMNext_TrackBrowser_State.Filters.FilterByEnvironment.count > 0 ||
		TMNext_TrackBrowser_State.Filters.FilterByMapType.count > 0
	);
}

Void SortOfficialCampaigns(CMlScript _This, CampaignStruct::LibCampaignStruct_K_Campaign _LiveCampaign) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare Integer CampaignsTotal = CampaignStore::GetLiveQuarterlyCampaignsTotal();
	declare CampaignStruct::LibCampaignStruct_K_CampaignName LiveCampaignName = CampaignStruct::ParseCampaignName(_LiveCampaign.Name);
	declare Text TranslatedName = _LiveCampaign.Name;
	if (LiveCampaignName.IsValid) TranslatedName = TL::GetTranslatedText(LiveCampaignName.TranslatedName);
	declare Integer CurrentYear = TL::ToInteger(LiveCampaignName.Year);
	declare Integer CurrentSeason = C_Season_Name_To_Index.get(LiveCampaignName.Season, 0);
	declare Text CurrentSeasonName = LiveCampaignName.Season;

	declare Integer TrackIndex = 0;
	declare CampaignStruct::LibCampaignStruct_K_Map[Integer] TmpTracks = [];
	foreach (Category in _LiveCampaign.Categories) {
		foreach (Map in Category.Playlist) {
			TmpTracks[TrackIndex] = Map;
			TrackIndex += 1;
		}
	}
	declare Integer ScrollIndex = 0;
	TMNext_TrackBrowser_State.Official.Campaigns[ScrollIndex] = [];
	TMNext_TrackBrowser_State.Official.Campaigns[ScrollIndex].add(K_OfficialCampaign {
		OffsetKey = 0,
		Id = _LiveCampaign.Id,
		Season = CurrentSeason,
		Name = TranslatedName,
		Year = CurrentYear,
		ImageUrl = C_ImageUrls_Campaign_TrackBrowser.get(CurrentSeasonName, ""),
		Tracks = TmpTracks
	});

	// Rebuild the campaigns history
	for (I, 1, CampaignsTotal-1) {
		if (CurrentSeason - 1 < 0) CurrentSeason = C_Season_Fall_Index;
		else CurrentSeason = CurrentSeason - 1;
		CurrentSeasonName = C_Season_Name_To_Index.keyof(CurrentSeason);
		if (CurrentSeason == C_Season_Fall_Index) {
			CurrentYear -= 1;
			ScrollIndex += 1;
			TMNext_TrackBrowser_State.Official.Campaigns[ScrollIndex] = [];
		}

		declare Text CurrentName = CurrentSeasonName^" "^CurrentYear;
		declare CampaignStruct::LibCampaignStruct_K_CampaignName CurrentCampaignName = CampaignStruct::ParseCampaignName(CurrentName);
		if (CurrentCampaignName.IsValid) CurrentName = TL::GetTranslatedText(CurrentCampaignName.TranslatedName);

		TMNext_TrackBrowser_State.Official.Campaigns[ScrollIndex].add(K_OfficialCampaign {
			OffsetKey = I,
			Id = CampaignStruct::C_Campaign_NullId,
			Season = CurrentSeason,
			Name = CurrentName,
			Year = CurrentYear,
			ImageUrl = C_ImageUrls_Campaign_TrackBrowser.get(CurrentSeasonName, ""),
			Tracks = []
		});
	}
}

Void SortMonthlies(CMlScript _This, CampaignStruct::LibCampaignStruct_K_MonthlyCampaign[Integer] _Monthlies, Integer _ScrollMonthlyOffset, Boolean _IsRoyal) {
	if (_Monthlies.count > 0) {
		declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
		declare Integer PrevYear;
		if (_Monthlies.existskey(_ScrollMonthlyOffset)) PrevYear = _Monthlies[_ScrollMonthlyOffset].Year;
		declare Integer ScrollIndex = 0;

		if (_IsRoyal) TMNext_TrackBrowser_State.Official.Royals[ScrollIndex + _ScrollMonthlyOffset] = [];
		else TMNext_TrackBrowser_State.Official.Monthlies[ScrollIndex + _ScrollMonthlyOffset] = [];

		declare Integer[Integer] MonthliesPerYear = []; // the key corresponds to the year
		foreach (I => Monthly in _Monthlies) {
			if (Monthly.Id != CampaignStruct::C_MonthlyCampaign_NullId) {
				// We want to have a line break between different years and at the middle of the year (if the year has more than 6 months to display)
				if (
					// Check if we are switching to another year
					PrevYear != Monthly.Year ||
					// Check if we are at the middle of the year (June)...
					// ...make a new line only if the year has more than 6 months to display (meaning we have stocked at least one month from December to July for this year)
					(Monthly.Month == C_MonthlyPerLine && 
						(
							(!_IsRoyal && TMNext_TrackBrowser_State.Official.Monthlies[ScrollIndex + _ScrollMonthlyOffset].count > 0) ||
							(_IsRoyal && TMNext_TrackBrowser_State.Official.Royals[ScrollIndex + _ScrollMonthlyOffset].count > 0)
						)
					) 
				) {
					if (PrevYear != Monthly.Year) PrevYear = Monthly.Year;
					ScrollIndex += 1;
					if (_IsRoyal) TMNext_TrackBrowser_State.Official.Royals[ScrollIndex + _ScrollMonthlyOffset] = [];
					else TMNext_TrackBrowser_State.Official.Monthlies[ScrollIndex + _ScrollMonthlyOffset] = [];
				}
				declare Integer TrackIndex = 0;
				declare CampaignStruct::LibCampaignStruct_K_Map[Integer] TmpTracks = [];
				foreach (DailyMap in Monthly.DailyMaps) {
					if (DailyMap.Map.Uid != "" && (DailyMap.Map.DownloadUrl != "" || DailyMap.Map.LocalFileName != "") && DailyMap.RelativeStart <= 0) {
						TmpTracks[TrackIndex] = DailyMap.Map;
						TrackIndex += 1;
					}
				}
				if (_IsRoyal) {
					TMNext_TrackBrowser_State.Official.Royals[ScrollIndex + _ScrollMonthlyOffset].add(K_MonthlyCampaign {
						OffsetKey = I,
						Id = Monthly.Id,
						MonthName = TL::GetTranslatedText(TL::Compose(C_Month_Names[Monthly.Month-1], TL::ToText(Monthly.Year))),
						MonthNumber = Monthly.Month,
						Year = Monthly.Year,
						YearFormat = C_YearFormatNull,
						Tracks = TmpTracks
					});
				} else {
					TMNext_TrackBrowser_State.Official.Monthlies[ScrollIndex + _ScrollMonthlyOffset].add(K_MonthlyCampaign {
						OffsetKey = I,
						Id = Monthly.Id,
						MonthName = TL::GetTranslatedText(TL::Compose(C_Month_Names[Monthly.Month-1], TL::ToText(Monthly.Year))),
						MonthNumber = Monthly.Month,
						Year = Monthly.Year,
						YearFormat = C_YearFormatNull,
						Tracks = TmpTracks
					});
				}
	
				// Count the number of monthlies in each year to adapt the year format display
				if (MonthliesPerYear.existskey(Monthly.Year)) MonthliesPerYear[Monthly.Year] = MonthliesPerYear[Monthly.Year] + 1;
				else MonthliesPerYear[Monthly.Year] = 1;
			}
		}

		// Now that we have all the informations, set the good year format for each monthly
		if (_IsRoyal) {
			foreach (I => MonthlyLine in TMNext_TrackBrowser_State.Official.Royals) {
				foreach (J => Monthly in TMNext_TrackBrowser_State.Official.Royals[I]) {
					declare Integer MonthliesCountPerYear = MonthliesPerYear.get(Monthly.Year, 0);
					if (MonthliesCountPerYear <= 6) {
						TMNext_TrackBrowser_State.Official.Royals[I][J].YearFormat = C_OneLineYear;
					} else {
						if (Monthly.MonthNumber >= 7) TMNext_TrackBrowser_State.Official.Royals[I][J].YearFormat = C_TwoLinesYearTop;
						else TMNext_TrackBrowser_State.Official.Royals[I][J].YearFormat = C_TwoLinesYearBottom;
					}
				}
			}
		} else {
			foreach (I => MonthlyLine in TMNext_TrackBrowser_State.Official.Monthlies) {
				foreach (J => Monthly in TMNext_TrackBrowser_State.Official.Monthlies[I]) {
					declare Integer MonthliesCountPerYear = MonthliesPerYear.get(Monthly.Year, 0);
					if (MonthliesCountPerYear <= 6) {
						TMNext_TrackBrowser_State.Official.Monthlies[I][J].YearFormat = C_OneLineYear;
					} else {
						if (Monthly.MonthNumber >= 7) TMNext_TrackBrowser_State.Official.Monthlies[I][J].YearFormat = C_TwoLinesYearTop;
						else TMNext_TrackBrowser_State.Official.Monthlies[I][J].YearFormat = C_TwoLinesYearBottom;
					}
				}
			}
		}
	}
}

Void SetSectionTitle(CMlScript _This, Text _Value) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Controls.Label_SectionTitle.Value = _Value;
	Tools::FitLabelValue(TMNext_TrackBrowser_State.Controls.Label_SectionTitle, 4., 1., 0.5);
}

Void UpdateLoadingStatus(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare Boolean IsLoading = 
		Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks) ||
		Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks) ||
		TMNext_TrackBrowser_State.Favorites.IsLoadingTracks ||
		TMNext_TrackBrowser_State.Official.IsLoadingCampaigns ||
		TMNext_TrackBrowser_State.Official.IsLoadingTracks ||
		TMNext_TrackBrowser_State.Official.IsLoadingMonthly ||
		TMNext_TrackBrowser_State.Official.IsLoadingRoyal ||
		TMNext_TrackBrowser_State.Clubs.IsLoadingClubs ||
		TMNext_TrackBrowser_State.Clubs.IsLoadingCampaigns ||
		TMNext_TrackBrowser_State.Clubs.IsLoadingCampaignTracks
	;
	LoadingSpinner::SetIsLoading(_This, TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner, IsLoading);
	if (IsLoading) LoadingSpinner::Fade(_This, TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner, 1., 500);
	else LoadingSpinner::Fade(_This, TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner, 0., 500);
	Navigation::EnableGroup(_This, C_NavGroupName, !IsLoading);
	Navigation::EnableGroup(_This, C_NavGroupGlobal, !IsLoading);
	NavigationTabs::LockTabs(_This, TMNext_TrackBrowser_State.Controls.Frame_Tabs, IsLoading);
}

Void UpdateLocalTracks(CMlScript _This, Text _Path) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare Integer BrowserFilter = Const::C_BrowserFilter_UserData;
	if (Config::HasFeature(Config::C_Feature_DebugBrowserAllData)) BrowserFilter = Const::C_BrowserFilter_AllData;

	TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks = Task::DestroyAndCreate(
		TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks,
		DataFileMgr,
		DataFileMgr.Map_GetFilteredGameList(
			BrowserFilter,
			_Path,
			TMNext_TrackBrowser_State.SortingTypes.IsFlatten || Platform::IsFromFirstParty(System), // never display track folders on console
			TMNext_TrackBrowser_State.SortingTypes.IsSortingByNameElseByDate,
			TMNext_TrackBrowser_State.SortingTypes.IsSortingFromAscendingOrder
		)
	);

	Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, 0);
	UpdateLoadingStatus(_This);
}

Void UpdateOnlineTracks(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks = Task::DestroyAndCreate(
		TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks,
		DataFileMgr,
		DataFileMgr.Map_NadeoServices_GetListFromUser(MainUser::GetMainUserId(), LocalUser.WebServicesUserId)
	);

	UpdateLoadingStatus(_This);
}

Void UpdateFavoriteTracks(CMlScript _This, Integer _Offset, Integer _Length) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	// @TODO if LIVE API updated on mapType filter, adapt code here (see /trackmania-next/tmnext/-/issues/3735)
	declare Text MapTypeFilter = "";
	if (TMNext_TrackBrowser_State.Filters.FilterByMapType.count > 0) MapTypeFilter = TMNext_TrackBrowser_State.Filters.FilterByMapType[0];
	
	MapStore::Action_LoadFavoriteMapsPage(
		_This, 
		_Offset,
		_Length,
		TMNext_TrackBrowser_State.SortingTypes.IsSortingByNameElseByDate,
		TMNext_TrackBrowser_State.SortingTypes.IsSortingFromAscendingOrder,
		MapTypeFilter,
		TMNext_TrackBrowser_State.Filters.ShowOnlyPlayableTracks,
		TMNext_TrackBrowser_State.Filters.ShowOnlyUserTracks
	);
}

Void CheckTracksFavoriteStatus(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (TMNext_TrackBrowser_State.Tracks.count > 0) {
		foreach (Track in TMNext_TrackBrowser_State.Tracks) {
			if (!TMNext_TrackBrowser_State.TracksFavoriteStatus.KnownedFavoritesTracksUids.exists(Track.Uid) && !TMNext_TrackBrowser_State.TracksFavoriteStatus.UidsToCheck.exists(Track.Uid)) {
				TMNext_TrackBrowser_State.TracksFavoriteStatus.UidsToCheck.add(Track.Uid);
			}
		}
		TMNext_TrackBrowser_State.TracksFavoriteStatus.CheckRequestTime = Now + C_CheckFavoriteStatusCooldown;
	}
}

Void UpdateOfficialTracks(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	switch (TMNext_TrackBrowser_State.CurrentSection) {
		case C_Section_SelectedOfficialCampaign: {
			if (TMNext_TrackBrowser_State.Official.Campaigns.existskey(TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey) && TMNext_TrackBrowser_State.Official.Campaigns[TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey].existskey(TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey)) {
				declare K_OfficialCampaign CurrentCampaign = TMNext_TrackBrowser_State.Official.Campaigns[TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey][TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey];
				declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = CampaignStore::GetCampaignFromId(CurrentCampaign.Id);
				if (Campaign.Id == CampaignStruct::C_Campaign_NullId) {
					TMNext_TrackBrowser_State.Official.IsLoadingTracks = True;
					CampaignStore::Action_LoadCampaigns(_This, CampaignStruct::C_CampaignType_Quarterly, CurrentCampaign.OffsetKey, 1);
				} else {
					if (!Campaign.IsLoaded) {
						TMNext_TrackBrowser_State.Official.IsLoadingTracks = True;
						CampaignStore::Action_LoadCampaign(_This, Campaign.Id);
					} else {
						TMNext_TrackBrowser_State.Official.IsLoadingTracks = False;
						TMNext_TrackBrowser_State.Tracks.clear();
						declare Integer Index = 0;
						declare Boolean NeedFilter = !TMNext_TrackBrowser_State.Settings.ForceShowOfficialTracks && TracksShouldBeFiltered(_This);
						foreach (Category in Campaign.Categories) {
							foreach (Map in Category.Playlist) {
								if (!NeedFilter || FilterTrack(_This, Map.AuthorLogin, Map.IsPlayable, Map.CollectionName, Map.Type)) {
									TMNext_TrackBrowser_State.Tracks[Index] = Map;
									TMNext_TrackBrowser_State.Tracks[Index].Name = TL::GetTranslatedText(CampaignStruct::TranslateOfficialMapName(Map.Name, "", True));
									TMNext_TrackBrowser_State.Tracks[Index].AuthorDisplayName = ""; // stock an empty author display name on purpose for official campaign tracks
									Index += 1;
								}
							}
						}
						Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, TMNext_TrackBrowser_State.Tracks.count);
						CheckTracksFavoriteStatus(_This);
					}
				}
				UpdateLoadingStatus(_This);
			}
		}
		case C_Section_SelectedMonthly: {
			if (TMNext_TrackBrowser_State.Official.Monthlies.existskey(TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey) && TMNext_TrackBrowser_State.Official.Monthlies[TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey].existskey(TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey)) {
				declare K_MonthlyCampaign CurrentCampaign = TMNext_TrackBrowser_State.Official.Monthlies[TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey][TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey];
				declare CampaignStruct::LibCampaignStruct_K_MonthlyCampaign Campaign = CampaignStore::GetMonthlyCampaignFromId(CurrentCampaign.Id);
				if (Campaign.Id == CampaignStruct::C_Campaign_NullId) {
					TMNext_TrackBrowser_State.Official.IsLoadingTracks = True;
					CampaignStore::Action_LoadMonthlyCampaignsList(_This, CurrentCampaign.OffsetKey, 1);
				} else {
					if (!Campaign.IsLoaded) {
						TMNext_TrackBrowser_State.Official.IsLoadingTracks = True;
						CampaignStore::Action_LoadMonthlyCampaign(_This, CurrentCampaign.Id);
					} else {
						TMNext_TrackBrowser_State.Official.IsLoadingTracks = False;
						TMNext_TrackBrowser_State.Tracks.clear();
						declare Integer Index = 0;
						declare Boolean NeedFilter = !TMNext_TrackBrowser_State.Settings.ForceShowOfficialTracks && TracksShouldBeFiltered(_This);
						foreach (DailyMap in Campaign.DailyMaps) {
							if (DailyMap.Map.Uid != "" && (DailyMap.Map.DownloadUrl != "" || DailyMap.Map.LocalFileName != "") && DailyMap.RelativeStart <= 0) {
								if (!NeedFilter || FilterTrack(_This, DailyMap.Map.AuthorLogin, DailyMap.Map.IsPlayable, DailyMap.Map.CollectionName, DailyMap.Map.Type)) {
									TMNext_TrackBrowser_State.Tracks[Index] = DailyMap.Map;
									TMNext_TrackBrowser_State.Official.CurrentMonthDays[Index] = DailyMap.MonthDay;
									Index += 1;
								}
							}
						}
						Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, TMNext_TrackBrowser_State.Tracks.count);
						CheckTracksFavoriteStatus(_This);
					}
				}
				UpdateLoadingStatus(_This);
			}
		}
		case C_Section_SelectedRoyal: {
			if (TMNext_TrackBrowser_State.Official.Royals.existskey(TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey) && TMNext_TrackBrowser_State.Official.Royals[TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey].existskey(TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey)) {
				declare K_MonthlyCampaign CurrentCampaign = TMNext_TrackBrowser_State.Official.Royals[TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey][TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey];
				declare CampaignStruct::LibCampaignStruct_K_MonthlyCampaign Campaign = CampaignStore::GetRoyalCampaignFromId(CurrentCampaign.Id);
				if (Campaign.Id == CampaignStruct::C_Campaign_NullId) {
					TMNext_TrackBrowser_State.Official.IsLoadingTracks = True;
					CampaignStore::Action_LoadRoyalCampaignsList(_This, CurrentCampaign.OffsetKey, 1);
				} else {
					if (!Campaign.IsLoaded) {
						TMNext_TrackBrowser_State.Official.IsLoadingTracks = True;
						CampaignStore::Action_LoadRoyalCampaign(_This, CurrentCampaign.Id);
					} else {
						TMNext_TrackBrowser_State.Official.IsLoadingTracks = False;
						TMNext_TrackBrowser_State.Tracks.clear();
						declare Integer Index = 0;
						declare Boolean NeedFilter = !TMNext_TrackBrowser_State.Settings.ForceShowOfficialTracks && TracksShouldBeFiltered(_This);
						foreach (DailyMap in Campaign.DailyMaps) {
							if (DailyMap.Map.Uid != "" && (DailyMap.Map.DownloadUrl != "" || DailyMap.Map.LocalFileName != "") && DailyMap.RelativeStart <= 0) {
								if (!NeedFilter || FilterTrack(_This, DailyMap.Map.AuthorLogin, DailyMap.Map.IsPlayable, DailyMap.Map.CollectionName, DailyMap.Map.Type)) {
									TMNext_TrackBrowser_State.Tracks[Index] = DailyMap.Map;
									TMNext_TrackBrowser_State.Official.CurrentMonthDays[Index] = DailyMap.MonthDay;
									Index += 1;
								}
							}
						}
						Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, TMNext_TrackBrowser_State.Tracks.count);
						CheckTracksFavoriteStatus(_This);
					}
				}
				UpdateLoadingStatus(_This);
			}
		}
	}
}

Void UpdateClubCampaignTracks(CMlScript _This, Integer _SelectedCampaignId) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare CampaignStruct::LibCampaignStruct_K_Campaign Campaign = CampaignStore::GetCampaignFromId(_SelectedCampaignId);
	if (!Campaign.IsLoaded) {
		TMNext_TrackBrowser_State.Clubs.IsLoadingCampaignTracks = True;
		CampaignStore::Action_LoadCampaign(_This, _SelectedCampaignId, TMNext_TrackBrowser_State.Clubs.SelectedClub.Id);
	} else {
		TMNext_TrackBrowser_State.Clubs.IsLoadingCampaignTracks = False;
		TMNext_TrackBrowser_State.Tracks.clear();
		declare Integer Index = 0;
		declare Boolean NeedFilter = TracksShouldBeFiltered(_This);
		foreach (Category in Campaign.Categories) {
			foreach (Map in Category.Playlist) {
				if (!NeedFilter || FilterTrack(_This, Map.AuthorLogin, Map.IsPlayable, Map.CollectionName, Map.Type)) {
					TMNext_TrackBrowser_State.Tracks[Index] = Map;
					Index += 1;
				}
			}
		}
		Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, TMNext_TrackBrowser_State.Tracks.count);
		CheckTracksFavoriteStatus(_This);
		if (TMNext_TrackBrowser_State.Tracks.count == 1) {
			SetSectionTitle(_This, TL::Compose(C_Text_SelectedCampaignSingular, "$<"^Tools::FormatValue(TMNext_TrackBrowser_State.Clubs.SelectedCampaigns[TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey].Name)^"$>"));
		} else {
			SetSectionTitle(_This, TL::Compose(C_Text_SelectedCampaign, "$<"^Tools::FormatValue(TMNext_TrackBrowser_State.Clubs.SelectedCampaigns[TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey].Name)^"$>"));
		}		
	}
	UpdateLoadingStatus(_This);
}

Void UpdateControllerInfos(CMlScript _This, Boolean _FocusTracksScroll, Boolean _HasFavoriteData, Boolean _TrackIsFavorite, Boolean _IsFolder) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	switch (TMNext_TrackBrowser_State.CurrentTabIndex) {
		case C_TabIndex_MyTracks: {
			switch (TMNext_TrackBrowser_State.CurrentSection) {
				case C_Section_None: {
					ExpendableButton::SetText(_This, TMNext_TrackBrowser_State.Controls.Button_Back, C_Text_Exit);
					ControllerInfo::SetButtons(C_Buttons_Classic); 
				}
				case C_Section_LocalTracks: {
					if (TMNext_TrackBrowser_State.Settings.ShowOnlyMyLocalTracks && TMNext_TrackBrowser_State.MyTracks.CurrentPath == "") ExpendableButton::SetText(_This, TMNext_TrackBrowser_State.Controls.Button_Back, C_Text_Exit);
					else ExpendableButton::SetText(_This, TMNext_TrackBrowser_State.Controls.Button_Back, C_Text_Back);

					if (_FocusTracksScroll && !_IsFolder) ControllerInfo::SetButtons(C_Buttons_Tracks_Local);
					else ControllerInfo::SetButtons(C_Buttons_Classic);
				}
				case C_Section_OnlineTracks: {
					ExpendableButton::SetText(_This, TMNext_TrackBrowser_State.Controls.Button_Back, C_Text_Back);
					if (_FocusTracksScroll && _HasFavoriteData) {
						if (_TrackIsFavorite)	ControllerInfo::SetButtons(C_Buttons_Tracks_RemoveFavorite);
						else ControllerInfo::SetButtons(C_Buttons_Tracks_AddFavorite);
					} else {
						ControllerInfo::SetButtons(C_Buttons_Classic);
					}
				}
			}
		}
		case C_TabIndex_Favorites: {
			if (_FocusTracksScroll) ControllerInfo::SetButtons(C_Buttons_Tracks_Favorite);
			else ControllerInfo::SetButtons(C_Buttons_Classic);
		}
		default: {
			if (TMNext_TrackBrowser_State.CurrentSection == C_Section_None) ExpendableButton::SetText(_This, TMNext_TrackBrowser_State.Controls.Button_Back, C_Text_Exit);
			else ExpendableButton::SetText(_This, TMNext_TrackBrowser_State.Controls.Button_Back, C_Text_Back);

			if (_FocusTracksScroll && _HasFavoriteData) {
				if (_TrackIsFavorite)	ControllerInfo::SetButtons(C_Buttons_Tracks_RemoveFavorite);
				else ControllerInfo::SetButtons(C_Buttons_Tracks_AddFavorite);
			} else {
				ControllerInfo::SetButtons(C_Buttons_Classic);
			}
		}
	}
}

Void UpdateControllerInfos(CMlScript _This) {
	UpdateControllerInfos(_This, False, False, False, False);
}

Void UpdateControllerInfos(CMlScript _This, Boolean _FocusTracksScroll) {
	UpdateControllerInfos(_This, _FocusTracksScroll, False, False, False);
}

Void Focus(CMlScript _This, CMlControl _From, CMlControl _To) {
	if (Transition::IsInTransition(_This)) return;
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	
	if (_From != Null) {
		Navigation::Unfocus(_This, _From);
		if (Button::IsButton(_From)) {
			Button::Unfocus(_This, (_From as CMlFrame));
		} else if (ExpendableButton::IsButton(_From)) {
			ExpendableButton::Unfocus(_This, (_From as CMlFrame));
		} else if (Scroll::IsScroll(_From)) {
			Scroll::Unfocus(_This, (_From as CMlFrame));
			if (_From.ControlId == TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks.ControlId) UpdateControllerInfos(_This, False);
		} else if (Checkbox::IsCheckbox(_From)) {
			Checkbox::Unfocus(_This, _From as CMlFrame);
		}
	}
	
	if (_To != Null) {
		Navigation::Focus(_This, _To);
		if (Button::IsButton(_To)) {
			Button::Focus(_This, (_To as CMlFrame));
		} else if (ExpendableButton::IsButton(_To)) {
			ExpendableButton::Focus(_This, (_To as CMlFrame));
		} else if (Scroll::IsScroll(_To)) {
			Scroll::Focus(_This, (_To as CMlFrame));
			if (_To.ControlId == TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks.ControlId) UpdateControllerInfos(_This, True);
		} else if (Checkbox::IsCheckbox(_To)) {
			Checkbox::Focus(_This, _To as CMlFrame);
		}
		if (_To.HasClass(C_Class_MainButton_FocusMemory)) {
			switch (TMNext_TrackBrowser_State.CurrentTabIndex) {
				case C_TabIndex_MyTracks: {
					TMNext_TrackBrowser_State.MyTracks.LastButtonFocused = (_To as CMlFrame);
					Navigation::ChangeControlTarget(_This, TMNext_TrackBrowser_State.Controls.Button_Back, "up", TMNext_TrackBrowser_State.MyTracks.LastButtonFocused.ControlId);
				}
				case C_TabIndex_Official: {
					TMNext_TrackBrowser_State.Official.LastButtonFocused = (_To as CMlFrame);
					Navigation::ChangeControlTarget(_This, TMNext_TrackBrowser_State.Controls.Button_Back, "up", TMNext_TrackBrowser_State.Official.LastButtonFocused.ControlId);
				}
			}
		} else if (_To.HasClass(C_Class_OptionButton_FocusMemory)) {
			TMNext_TrackBrowser_State.LastOptionButtonFocused = (_To as CMlFrame);
		}
	}
}

Void ReFocus(CMlScript _This) {
	Focus(_This, Null, Navigation::GetFocusedControl(_This, C_NavGroupName));
}

Text GetLastNameOfPath(Text _FolderPath) {
	declare Text Path = TL::Replace(_FolderPath, "\\", "/");
	declare Text[] TmpSplit = TL::Split("/", Path);
	if (TmpSplit.count == 0) return _FolderPath;

	return TmpSplit[TmpSplit.count-1];
}

Void ShowTrackLoading(CMlScript _This, CMlFrame _Frame_Track) {
	declare CMlFrame ControlBlockList_TrackName = _Frame_Track.GetFirstChild(C_Id_ControlBlockListTrackName) as CMlFrame;
	declare CMlLabel Label_TrackDay = _Frame_Track.GetFirstChild(C_Id_LabelTrackDay) as CMlLabel;
	declare CMlFrame PlayerName_Author = _Frame_Track.GetFirstChild(C_Id_PlayerNameAuthor) as CMlFrame;
	declare CMlLabel Label_FolderName = _Frame_Track.GetFirstChild(C_Id_LabelFolderName) as CMlLabel;
	declare CMlFrame ControlBlockList_TrackThumbnail = _Frame_Track.GetFirstChild(C_Id_ControlBlockListTrackThumbnail) as CMlFrame;
	declare CMlFrame Frame_FocusOptions = _Frame_Track.GetFirstChild(C_Id_FrameTrackFocusOptions) as CMlFrame;

	_Frame_Track.Show();
	Frame_FocusOptions.Hide();
	Label_TrackDay.Value = "";
	ControlBlockList::SetOwnerAndTextValue(_This, ControlBlockList_TrackName, "", C_Text_Retrieving);
	PlayerName_Author.Visible = False;
	Label_FolderName.Value = "";
	ControlBlockList_TrackThumbnail.Visible = False;
}

Void UpdateAddTracksButtonVisibility(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Controls.Button_AddTracks.Visible = TMNext_TrackBrowser_State.Settings.MultiSelect && TMNext_TrackBrowser_State.SelectedTracks.count > 0;
	Navigation::Lock(TMNext_TrackBrowser_State.Controls.Button_AddTracks, !TMNext_TrackBrowser_State.Controls.Button_AddTracks.Visible);
	TMNext_TrackBrowser_State.Controls.ButtonIcon_AddTracks.Visible = TMNext_TrackBrowser_State.Controls.Button_AddTracks.Visible;
}

Void UpdateSelectedTrack(CMlScript _This, CMlFrame _Frame_Track, Text _TrackUid, Boolean _IsSelected) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare CMlFrame ControlBlockList_TrackName = _Frame_Track.GetFirstChild(C_Id_ControlBlockListTrackName) as CMlFrame;
	declare CMlLabel Label_TrackDay = _Frame_Track.GetFirstChild(C_Id_LabelTrackDay) as CMlLabel;
	declare CMlFrame PlayerName_Author = _Frame_Track.GetFirstChild(C_Id_PlayerNameAuthor) as CMlFrame;
	declare CMlQuad Button_Checkbox = _Frame_Track.GetFirstChild(C_Id_ButtonCheckboxTrack) as CMlQuad;

	if ((_TrackUid == "" && _IsSelected) || TMNext_TrackBrowser_State.SelectedTracks.existskey(_TrackUid)) {
		Button_Checkbox.ChangeImageUrl(Const::C_ImageUrl_Icon_Checkbox_Active_Square);
		Button_Checkbox.Colorize = ColorPalette::C_Color_Vec3_GreenOne;
		ControlBlockList::SetTextColor(_This, ControlBlockList_TrackName, ColorPalette::C_Color_Vec3_GreenOne);
		Label_TrackDay.TextColor = ColorPalette::C_Color_Vec3_GreenOne;
		PlayerName::SetTextColor(_This, PlayerName_Author, ColorPalette::C_Color_Vec3_GreenOne);
	} else {
		Button_Checkbox.ChangeImageUrl(Const::C_ImageUrl_Icon_Checkbox_Inactive_Square);
		Button_Checkbox.Colorize = <1.,1.,1.>;
		ControlBlockList::SetTextColor(_This, ControlBlockList_TrackName, ColorPalette::C_Color_Vec3_White);
		Label_TrackDay.TextColor = <1.,1.,1.>;
		PlayerName::SetTextColor(_This, PlayerName_Author, ColorPalette::C_Color_Vec3_White);
	}
	switch (TMNext_TrackBrowser_State.SelectedTracks.count) {
		case 0: ExpendableButton::SetText(_This, TMNext_TrackBrowser_State.Controls.Button_AddTracks, C_Text_AddTracks);
		case 1: ExpendableButton::SetText(_This, TMNext_TrackBrowser_State.Controls.Button_AddTracks, C_Text_AddOneTrack);
		default: ExpendableButton::SetText(_This, TMNext_TrackBrowser_State.Controls.Button_AddTracks, TL::Compose(C_Text_AddSeveralTracks, ""^TMNext_TrackBrowser_State.SelectedTracks.count));
	}
	UpdateAddTracksButtonVisibility(_This);
}

Void UpdateSelectedTrack(CMlScript _This, CMlFrame _Frame_Track, Text _TrackUid) {
	UpdateSelectedTrack(_This, _Frame_Track, _TrackUid, False);
}

Void UpdateSelectedTrack(CMlScript _This, CMlFrame _Frame_Track, Boolean _IsSelected) {
	UpdateSelectedTrack(_This, _Frame_Track, "", _IsSelected);
}

Void ShowTrack(CMlScript _This, CMlFrame _Frame_Track, CampaignStruct::LibCampaignStruct_K_Map _TrackInfo, Boolean _IsFolder, Text _FolderName, Text _MonthDay) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;

	declare CMlFrame ControlBlockList_TrackName = _Frame_Track.GetFirstChild(C_Id_ControlBlockListTrackName) as CMlFrame;
	declare CMlLabel Label_TrackDay = _Frame_Track.GetFirstChild(C_Id_LabelTrackDay) as CMlLabel;	
	declare CMlFrame PlayerName_Author = _Frame_Track.GetFirstChild(C_Id_PlayerNameAuthor) as CMlFrame;
	declare CMlLabel Label_FolderName = _Frame_Track.GetFirstChild(C_Id_LabelFolderName) as CMlLabel;
	declare CMlFrame ControlBlockList_TrackThumbnail = _Frame_Track.GetFirstChild(C_Id_ControlBlockListTrackThumbnail) as CMlFrame;
	declare CMlQuad Quad_Gradient = _Frame_Track.GetFirstChild(C_Id_QuadGradient) as CMlQuad;
	declare CMlQuad Button_Checkbox = _Frame_Track.GetFirstChild(C_Id_ButtonCheckboxTrack) as CMlQuad;

	_Frame_Track.Show();
	ControlBlockList_TrackThumbnail.Visible = True;
	if (_IsFolder) {
		Quad_Gradient.Opacity = 0.5;
		Label_FolderName.Value = GetLastNameOfPath(_FolderName);
		Tools::FitLabelValue(Label_FolderName, 2., 0.6, 0.2);
		ControlBlockList::SetTTSAltText(_This, ControlBlockList_TrackName, "", "", False);
		ControlBlockList::SetOwnerAndTextValue(_This, ControlBlockList_TrackName, "", "", False);
		ControlBlockList::Redraw(_This, ControlBlockList_TrackName);
		Label_TrackDay.Value = "";
		PlayerName_Author.Visible = False;
		ControlBlockList::SetOwnerAndImageUrl(_This, ControlBlockList_TrackThumbnail, "", C_Img_Track_Folder, False);
		ControlBlockList::Redraw(_This, ControlBlockList_TrackThumbnail);
		Button_Checkbox.Visible = False;
	} else {
		Quad_Gradient.Opacity = 1.;
		Label_FolderName.Value = "";
		ControlBlockList::SetOwnerAndTextValue(_This, ControlBlockList_TrackName, _TrackInfo.AuthorLogin, Tools::FormatValue(_TrackInfo.Name), False);
		if (ControlBlockList::GetValueLineCount(_This, ControlBlockList_TrackName) >= 2) {
			ControlBlockList_TrackName.RelativePosition_V3 = TMNext_TrackBrowser_State.ManialinkProps.Pos_TrackNameTwoLines;
		} else {
			ControlBlockList_TrackName.RelativePosition_V3 = TMNext_TrackBrowser_State.ManialinkProps.Pos_TrackNameOneLine;
		}
		if (_TrackInfo.AuthorDisplayName == "") {
			ControlBlockList::SetTTSAltText(_This, ControlBlockList_TrackName, "", "", False);
			ControlBlockList_TrackName.RelativePosition_V3 = TMNext_TrackBrowser_State.ManialinkProps.Pos_TrackAuthor;
			PlayerName_Author.Visible = False;
		} else {
			ControlBlockList::SetTTSAltText(
				_This,
				ControlBlockList_TrackName,
				TL::Compose("%2 "^TL::GetTranslatedText(C_Text_AuthorName), _TrackInfo.AuthorDisplayName, ControlBlockList::GetTextValue(ControlBlockList_TrackName)),
				TL::Compose("%2 "^TL::GetTranslatedText(C_Text_AuthorName), _TrackInfo.AuthorDisplayName, ControlBlockList::C_DefaultTextValueBlocked),
				False
			);
			PlayerName_Author.Visible = True;
			PlayerName::SetAccountId(_This, PlayerName_Author, _TrackInfo.AuthorLogin, False);
		}
		ControlBlockList::Redraw(_This, ControlBlockList_TrackName);
		Label_TrackDay.Value = _MonthDay;
		ControlBlockList::SetOwnerAndImageUrl(_This, ControlBlockList_TrackThumbnail, _TrackInfo.AuthorLogin, _TrackInfo.ThumbnailUrl, False);
		ControlBlockList::Redraw(_This, ControlBlockList_TrackThumbnail);
		if (TMNext_TrackBrowser_State.Settings.MultiSelect) {
			Button_Checkbox.Visible = True;
			UpdateSelectedTrack(_This, _Frame_Track, _TrackInfo.Uid);
		} else {
			Button_Checkbox.Visible = False;
			UpdateSelectedTrack(_This, _Frame_Track, False);
		}
	}
}

Void ShowTrack(CMlScript _This, CMlFrame _Frame_Track, CampaignStruct::LibCampaignStruct_K_Map _TrackInfo) {
	ShowTrack(_This, _Frame_Track, _TrackInfo, False, "", "");
}

Void ShowTrack(CMlScript _This, CMlFrame _Frame_Track, CampaignStruct::LibCampaignStruct_K_Map _TrackInfo, Text _MonthDay) {
	ShowTrack(_This, _Frame_Track, _TrackInfo, False, "", _MonthDay);
}

Void HideTrack(CMlFrame _Frame_Track) {
	_Frame_Track.Hide();
}

Void UpdateFocusOptions(CMlScript _This, CMlFrame _Frame_FocusOptions) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;

	declare CMlQuad Button_DeleteMyTrack = _Frame_FocusOptions.GetFirstChild(C_Id_ButtonDeleteMyTrack) as CMlQuad;	
	declare CMlQuad Button_UploadMyTrack = _Frame_FocusOptions.GetFirstChild(C_Id_ButtonUploadMyTrack) as CMlQuad;	
	declare CMlQuad Button_RemoveFromFavorite = _Frame_FocusOptions.GetFirstChild(C_Id_ButtonRemoveTrackFromFavorites) as CMlQuad;	
	declare CMlQuad Button_Favorite = _Frame_FocusOptions.GetFirstChild(C_Id_ButtonFavorite) as CMlQuad;	

	Button_DeleteMyTrack.Visible = (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_MyTracks && TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks);
	Button_UploadMyTrack.Visible = (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_MyTracks && TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks);
	Button_RemoveFromFavorite.Visible = (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites);
	Button_Favorite.Visible = (
		(!Http::IsRunning(TMNext_TrackBrowser_State.TracksFavoriteStatus.Request) && TMNext_TrackBrowser_State.TracksFavoriteStatus.CheckRequestTime == -1) &&
		(TMNext_TrackBrowser_State.CurrentSection == C_Section_OnlineTracks ||
		TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Official ||
		TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Clubs)
	);

	if (Button_Favorite.Visible) {
		declare Integer TrackScrollKey for _Frame_FocusOptions.Parent;
		if (TMNext_TrackBrowser_State.Tracks.existskey(TrackScrollKey)) {
			if (TMNext_TrackBrowser_State.TracksFavoriteStatus.FirstHeartIconDisplay) {
				TMNext_TrackBrowser_State.TracksFavoriteStatus.FirstHeartIconDisplay = False;
				Button_Favorite.Opacity = 0.;
				_This.AnimMgr.Flush(Button_Favorite);
				_This.AnimMgr.Add(Button_Favorite, "<anim opacity=\"0.7\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
			if (TMNext_TrackBrowser_State.Tracks[TrackScrollKey].IsFavorite) Button_Favorite.ImageUrl = Const::C_ImageUrl_Icon_Settings_Favorite_Full;
			else Button_Favorite.ImageUrl = Const::C_ImageUrl_Icon_Settings_Favorite_Empty;
			UpdateControllerInfos(_This, True, True, TMNext_TrackBrowser_State.Tracks[TrackScrollKey].IsFavorite, False);
		}
	}
	if (TMNext_TrackBrowser_State.Settings.MultiSelect) _Frame_FocusOptions.RelativePosition_V3.X = TMNext_TrackBrowser_State.ManialinkProps.Pos_TrackFocusOptionsWithMultiSelect.X;
	else _Frame_FocusOptions.RelativePosition_V3.X = TMNext_TrackBrowser_State.ManialinkProps.Pos_TrackFocusOptions.X;
}

Void FocusTrack(CMlScript _This, CMlFrame _Frame_Track, Boolean _IsFocus) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;

	declare CMlQuad Quad_Focus = _Frame_Track.GetFirstChild(C_Id_QuadFocus) as CMlQuad;
	declare CMlQuad Quad_Gradient = _Frame_Track.GetFirstChild(C_Id_QuadGradient) as CMlQuad;
	declare CMlFrame ControlBlockList_TrackName = _Frame_Track.GetFirstChild(C_Id_ControlBlockListTrackName) as CMlFrame;
	declare CMlLabel Label_TrackDay = _Frame_Track.GetFirstChild(C_Id_LabelTrackDay) as CMlLabel;
	declare CMlFrame PlayerName_Author = _Frame_Track.GetFirstChild(C_Id_PlayerNameAuthor) as CMlFrame;
	declare CMlLabel Label_FolderName = _Frame_Track.GetFirstChild(C_Id_LabelFolderName) as CMlLabel;
	declare CMlFrame Frame_FocusOptions = _Frame_Track.GetFirstChild(C_Id_FrameTrackFocusOptions) as CMlFrame;
	declare CMlQuad Button_Checkbox = _Frame_Track.GetFirstChild(C_Id_ButtonCheckboxTrack) as CMlQuad;

	declare Boolean IsFolder = (Label_FolderName.Value != "");
	Frame_FocusOptions.Visible = _IsFocus && !IsFolder;

	_This.AnimMgr.Flush(Quad_Gradient);
	_This.AnimMgr.Flush(Quad_Focus);
	_This.AnimMgr.Flush(Label_TrackDay);
	_This.AnimMgr.Flush(PlayerName_Author);
	_This.AnimMgr.Flush(Label_FolderName);
	_This.AnimMgr.Flush(Button_Checkbox);
	if (_IsFocus) {
		UpdateControllerInfos(_This, True, False, False, IsFolder);
		UpdateFocusOptions(_This, Frame_FocusOptions);
		declare Real GradientOpacity = 0.6;
		if (IsFolder) GradientOpacity = 0.;
		_This.AnimMgr.Add(Quad_Gradient, "<anim opacity=\""^GradientOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Quad_Focus, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		ControlBlockList::SetOpacity(_This, ControlBlockList_TrackName, 1., 250);
		_This.AnimMgr.Add(Label_TrackDay, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		PlayerName::SetOpacity(_This, PlayerName_Author, 1., 250);
		_This.AnimMgr.Add(Label_FolderName, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		if (TMNext_TrackBrowser_State.Settings.MultiSelect) {
			_This.AnimMgr.Add(Button_Checkbox, "<anim  opacity=\"1.\" scale=\"1.2\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	} else {
		declare Real GradientOpacity = 1.;
		if (IsFolder) GradientOpacity = 0.5;
		_This.AnimMgr.Add(Quad_Gradient, "<anim opacity=\""^GradientOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Quad_Focus, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		ControlBlockList::SetOpacity(_This, ControlBlockList_TrackName, 0.7, 250);
		_This.AnimMgr.Add(Label_TrackDay, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		PlayerName::SetOpacity(_This, PlayerName_Author, 0.7, 250);
		_This.AnimMgr.Add(Label_FolderName, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		if (TMNext_TrackBrowser_State.Settings.MultiSelect) {
			_This.AnimMgr.Add(Button_Checkbox, "<anim opacity=\"0.7\" scale=\"1.\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	// Text to speech
	if (_IsFocus && IsFolder) {
		Label_FolderName.TTS_Focus();
	} else if (_IsFocus) {
		ControlBlockList::TTS_Focus(ControlBlockList_TrackName);
	} else {
		Label_FolderName.TTS_Unfocus();
		ControlBlockList::TTS_Unfocus(ControlBlockList_TrackName);
	}
}

Void UpdateNoTracksMessage(CMlScript _This, Integer _ElementsVisibleCount) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare Boolean IsScrollDisplayed =
		TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks ||
		TMNext_TrackBrowser_State.CurrentSection == C_Section_OnlineTracks ||
		TMNext_TrackBrowser_State.CurrentSection == C_Section_OfficialCampaigns ||
		TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedOfficialCampaign ||
		TMNext_TrackBrowser_State.CurrentSection == C_Section_Monthly ||
		TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedMonthly ||
		TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal ||
		TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedRoyal ||
		TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedClub ||
		TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedClubCampaign ||
		(TMNext_TrackBrowser_State.CurrentSection == C_Section_None && 
			(
				TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites ||
				TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Clubs
			)
		)
	;
	TMNext_TrackBrowser_State.Controls.Label_NoTracks.Visible =
		IsScrollDisplayed &&
		_ElementsVisibleCount <= 0 &&
		(TMNext_TrackBrowser_State.Controls.Label_Error.Value == "") &&
		!LoadingSpinner::IsLoading(TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner)
	;
	TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Visible = TMNext_TrackBrowser_State.Controls.Label_NoTracks.Visible;
	if (TMNext_TrackBrowser_State.HasFilteredTracks) {
		TMNext_TrackBrowser_State.Controls.Label_NoTracks.Value = C_Text_NoSuitableTracks;
		TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Value = C_Text_NoSuitableTracksDetails;
	} else {
		TMNext_TrackBrowser_State.Controls.Label_NoTracks.Value = C_Text_NoTracks;
		switch (TMNext_TrackBrowser_State.CurrentSection) {
			case C_Section_None: {
				if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites) TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Value = C_Text_NoFavoriteTracks;
				else if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Clubs) TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Value = C_Text_NoClubs;
			}
			case C_Section_LocalTracks: TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Value = C_Text_NoLocalTracks;
			case C_Section_OnlineTracks: TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Value = C_Text_NoOnlineTracks;
			case C_Section_OfficialCampaigns: TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Value = C_Text_NoOfficialCampaign;
			case C_Section_Monthly: TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Value = C_Text_NoTOTD;
			case C_Section_Royal: TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Value = C_Text_NoRoyal;
			case C_Section_SelectedMonthly, C_Section_SelectedRoyal: TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Value = C_Text_NoMonthlyTracks;
			case C_Section_SelectedClub: TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Value = C_Text_NoClubCampaigns;
			case C_Section_SelectedOfficialCampaign, C_Section_SelectedClubCampaign: TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Value = C_Text_NoCampaignTracks;
			default: TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails.Value = "";
		}
	}
}

Void ShowClubOrCampaignLoading(CMlFrame _Frame_Element) {
	declare CMlLabel Label_ClubOrCampaignName = _Frame_Element.GetFirstChild(C_Id_LabelName) as CMlLabel;
	declare CMlQuad Quad_Img = _Frame_Element.GetFirstChild(C_Id_QuadImage) as CMlQuad;

	_Frame_Element.Show();
	Label_ClubOrCampaignName.Value = C_Text_Retrieving;
	Tools::FitLabelValue(Label_ClubOrCampaignName, 2., 0.6, 0.2);
	Quad_Img.ChangeImageUrl("");
}

Void ShowClubOrCampaign(CMlFrame _Frame_Element, Text _Name, Text _IconUrl, Text _Year, Boolean _SetYearForTheLine) {
	declare CMlLabel Label_ClubOrCampaignName = _Frame_Element.GetFirstChild(C_Id_LabelName) as CMlLabel;
	declare CMlQuad Quad_Img = _Frame_Element.GetFirstChild(C_Id_QuadImage) as CMlQuad;

	_Frame_Element.Show();
	Label_ClubOrCampaignName.Value = "$<"^Tools::FormatValue(_Name)^"$>";
	if (_IconUrl != "") {
		Quad_Img.ChangeImageUrl(_IconUrl);
	} else {
		Quad_Img.ChangeImageUrl(Const::C_ImageUrl_ClubActivity_Default);
	}
	// Only for official campaigns
	if (_SetYearForTheLine && _Year != "" && _Frame_Element.Parent != Null) {
		assert(_Frame_Element.Parent.HasClass(Scroll::C_Class_Element), "We are not pointing to the correct frame anymore");
		declare CMlQuad Quad_CampaignYear = _Frame_Element.Parent.GetFirstChild(C_Id_QuadYearBg) as CMlQuad;
		declare CMlLabel Label_CampaignYear = _Frame_Element.Parent.GetFirstChild(C_Id_LabelYear) as CMlLabel;
		if (Label_CampaignYear != Null) Label_CampaignYear.Value = _Year;
		if (Quad_CampaignYear != Null) Quad_CampaignYear.Visible = Label_CampaignYear.Value != "";
	}
}

Void ShowClubOrCampaign(CMlFrame _Frame_Element, Text _Name, Text _IconUrl) {
	ShowClubOrCampaign(_Frame_Element, _Name, _IconUrl, "", False);
}

Void HideClubOrCampaign(CMlFrame _Frame_Element, Boolean _HideYearCampaign, Boolean _SetYearForTheLine) {
	_Frame_Element.Hide();
	// Only for official campaigns
	if (_SetYearForTheLine && _HideYearCampaign && _Frame_Element.Parent != Null) {
		assert(_Frame_Element.Parent.HasClass(Scroll::C_Class_Element), "We are not pointing to the correct frame anymore");
		declare CMlQuad Quad_CampaignYear = _Frame_Element.Parent.GetFirstChild(C_Id_QuadYearBg) as CMlQuad;
		declare CMlLabel Label_CampaignYear = _Frame_Element.Parent.GetFirstChild(C_Id_LabelYear) as CMlLabel;
		if (Label_CampaignYear != Null) Label_CampaignYear.Value = "";
		if (Quad_CampaignYear != Null) Quad_CampaignYear.Visible = False;
	}
}

Void HideClubOrCampaign(CMlFrame _Frame_Element) {
	HideClubOrCampaign(_Frame_Element, False, False);
}

Void FocusClubOrCampaign(CMlScript _This, CMlFrame _Frame_Element, Boolean _IsFocus) {
	declare CMlQuad Quad_Focus = _Frame_Element.GetFirstChild(C_Id_QuadFocus) as CMlQuad;
	declare CMlQuad Quad_Gradient = _Frame_Element.GetFirstChild(C_Id_QuadGradient) as CMlQuad;
	declare CMlLabel Label_ClubOrCampaignName = _Frame_Element.GetFirstChild(C_Id_LabelName) as CMlLabel;

	_This.AnimMgr.Flush(Quad_Focus);
	_This.AnimMgr.Flush(Quad_Gradient);
	_This.AnimMgr.Flush(Label_ClubOrCampaignName);
	if (_IsFocus) {
		_This.AnimMgr.Add(Quad_Focus, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Label_ClubOrCampaignName, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		Label_ClubOrCampaignName.TTS_Focus();
	} else {
		_This.AnimMgr.Add(Quad_Focus, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.8\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Label_ClubOrCampaignName, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		Label_ClubOrCampaignName.TTS_Unfocus();
	}
}

CMlControl[] GetLineControls(CMlFrame _Frame_Element) {
	// The first control corresponds to the year frame, we need to remove it to keep only the the campaign or monthly frames
	declare CMlControl[] LineControls = _Frame_Element.Controls;
	LineControls.removekey(0);
	return LineControls;
}

Void FocusOfficialCampaign(CMlScript _This, CMlFrame _Frame_Element, Boolean _IsFocus) {
	if (_Frame_Element == Null) return;
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;

	declare CMlControl[] CampaignFrames = GetLineControls(_Frame_Element);
	if (CampaignFrames.existskey(TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey)) {
		if (_IsFocus && !CampaignFrames[TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey].Visible) {
			if (CampaignFrames.count >= C_SeasonsTotal) {
				declare Integer CampaignKeyToFocus = TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey;
				while (CampaignKeyToFocus >= 0) {
					if (CampaignFrames[CampaignKeyToFocus].Visible) {
						TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey = CampaignKeyToFocus;
						FocusClubOrCampaign(_This, CampaignFrames[TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey] as CMlFrame, _IsFocus);
						break;
					}
					CampaignKeyToFocus -= 1;
				}
			}
		} else {
			FocusClubOrCampaign(_This, CampaignFrames[TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey] as CMlFrame, _IsFocus);
		}
	}
}

Void UnfocusLastOfficialCampaign(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (TMNext_TrackBrowser_State.Official.LastScrollCampaignFocus != Null) {
		FocusOfficialCampaign(_This, TMNext_TrackBrowser_State.Official.LastScrollCampaignFocus, False);
		TMNext_TrackBrowser_State.Official.LastScrollCampaignFocus = Null;
	}
}

Void FocusOfficialCampaignByMouse(CMlScript _This, CMlFrame _Frame_Campaign) {
	if (_Frame_Campaign != Null) {
		if (_Frame_Campaign.DataAttributeExists("key") && _Frame_Campaign.Parent != Null) {
			declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
			UnfocusLastOfficialCampaign(_This);
			TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey = TL::ToInteger(_Frame_Campaign.DataAttributeGet("key"));
			assert(_Frame_Campaign.Parent.HasClass(Scroll::C_Class_Element), "We are not pointing to the correct frame anymore");
			declare Integer CampaignScrollKey for _Frame_Campaign.Parent;
			Scroll::SetFocusedElementKey(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Official_Campaigns, CampaignScrollKey, True, True);
		}
	}
}

Void FocusOfficialCampaignByInput(CMlScript _This, CMlScriptEvent::EMenuNavAction _Input, CMlFrame _Frame_Element) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare CMlControl[] CampaignFrames = GetLineControls(_Frame_Element);
	switch (_Input) {
		case CMlScriptEvent::EMenuNavAction::Right : {
			if (TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey + 1 < C_SeasonsTotal) {
				if (CampaignFrames.count >= C_SeasonsTotal && CampaignFrames[TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey + 1].Visible) {
					if (CampaignFrames.existskey(TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey)) FocusClubOrCampaign(_This, CampaignFrames[TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey] as CMlFrame, False);
					TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey = TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey + 1;
					FocusClubOrCampaign(_This, CampaignFrames[TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey] as CMlFrame, True);
				}
			}
		}
		case CMlScriptEvent::EMenuNavAction::Left : {
			if (TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey - 1 >= 0) {
				if (CampaignFrames.count >= C_SeasonsTotal && CampaignFrames[TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey - 1].Visible) {
					if (CampaignFrames.existskey(TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey)) FocusClubOrCampaign(_This, CampaignFrames[TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey] as CMlFrame, False);
					TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey = TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey - 1;
					FocusClubOrCampaign(_This, CampaignFrames[TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey] as CMlFrame, True);
				}
			} else {
				Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
			}
		}
	}
}

Void ShowTOTD(CMlFrame _Frame_TOTD, Text _MonthName, Text _MonthNumber, Text _Year, Integer _YearFormat, Boolean _SetYearForTheLine) {
	declare CMlLabel Label_Month_Name = _Frame_TOTD.GetFirstChild(C_Id_LabelMonthName) as CMlLabel;
	declare CMlLabel Label_Month_Number = _Frame_TOTD.GetFirstChild(C_Id_LabelMonthNumber) as CMlLabel;

	_Frame_TOTD.Show();
	Label_Month_Name.Value = _MonthName;
	Tools::FitLabelValue(Label_Month_Name, 2., 0.6, 0.2);
	Label_Month_Number.Value = _MonthNumber;
	if (_SetYearForTheLine && _Year != "" && _Frame_TOTD.Parent != Null) {
		assert(_Frame_TOTD.Parent.HasClass(Scroll::C_Class_Element), "We are not pointing to the correct frame anymore");
		declare CMlQuad Quad_CampaignYearOneLine = _Frame_TOTD.Parent.GetFirstChild(C_Id_QuadYearBgOneLine) as CMlQuad;
		declare CMlQuad Quad_CampaignYearTwoLinesTop = _Frame_TOTD.Parent.GetFirstChild(C_Id_QuadYearBgTwoLinesTop) as CMlQuad;
		declare CMlQuad Quad_CampaignYearTwoLinesBottom = _Frame_TOTD.Parent.GetFirstChild(C_Id_QuadYearBgTwoLinesBottom) as CMlQuad;
		declare CMlLabel Label_CampaignYear = _Frame_TOTD.Parent.GetFirstChild(C_Id_LabelYear) as CMlLabel;
		if (Label_CampaignYear != Null) Label_CampaignYear.Value = _Year;
		if (Quad_CampaignYearOneLine != Null && Quad_CampaignYearTwoLinesTop != Null && Quad_CampaignYearTwoLinesBottom != Null) {
			Quad_CampaignYearOneLine.Visible = (_YearFormat == C_OneLineYear);
			Quad_CampaignYearTwoLinesTop.Visible = (_YearFormat == C_TwoLinesYearTop);
			Quad_CampaignYearTwoLinesBottom.Visible = (_YearFormat == C_TwoLinesYearBottom);
			if (Quad_CampaignYearTwoLinesBottom.Visible && Label_CampaignYear != Null) Label_CampaignYear.Value = "";
		}
	}
}

Void HideTOTD(CMlFrame _Frame_TOTD, Boolean _HideYear, Boolean _SetYearForTheLine) {
	_Frame_TOTD.Hide();
	if (_SetYearForTheLine && _HideYear && _Frame_TOTD.Parent != Null) {
		assert(_Frame_TOTD.Parent.HasClass(Scroll::C_Class_Element), "We are not pointing to the correct frame anymore");
		declare CMlQuad Quad_CampaignYearOneLine = _Frame_TOTD.Parent.GetFirstChild(C_Id_QuadYearBgOneLine) as CMlQuad;
		declare CMlQuad Quad_CampaignYearTwoLinesTop = _Frame_TOTD.Parent.GetFirstChild(C_Id_QuadYearBgTwoLinesTop) as CMlQuad;
		declare CMlQuad Quad_CampaignYearTwoLinesBottom = _Frame_TOTD.Parent.GetFirstChild(C_Id_QuadYearBgTwoLinesBottom) as CMlQuad;
		declare CMlLabel Label_CampaignYear = _Frame_TOTD.Parent.GetFirstChild(C_Id_LabelYear) as CMlLabel;
		if (Label_CampaignYear != Null) Label_CampaignYear.Value = "";
		if (Quad_CampaignYearOneLine != Null) Quad_CampaignYearOneLine.Visible = False;
		if (Quad_CampaignYearTwoLinesTop != Null) Quad_CampaignYearTwoLinesTop.Visible = False;
		if (Quad_CampaignYearTwoLinesBottom != Null) Quad_CampaignYearTwoLinesBottom.Visible = False;
	}
}

Void FocusTOTD(CMlScript _This, CMlFrame _Frame_TOTD, Boolean _IsFocus) {
	declare CMlQuad Quad_Focus = _Frame_TOTD.GetFirstChild(C_Id_QuadFocus) as CMlQuad;
	declare CMlQuad Quad_Gradient = _Frame_TOTD.GetFirstChild(C_Id_QuadGradient) as CMlQuad;
	declare CMlLabel Label_Month_Name = _Frame_TOTD.GetFirstChild(C_Id_LabelMonthName) as CMlLabel;

	_This.AnimMgr.Flush(Quad_Focus);
	_This.AnimMgr.Flush(Quad_Gradient);
	_This.AnimMgr.Flush(Label_Month_Name);
	if (_IsFocus) {
		_This.AnimMgr.Add(Quad_Focus, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Label_Month_Name, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		Label_Month_Name.TTS_Focus();
	} else {
		_This.AnimMgr.Add(Quad_Focus, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.5\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		_This.AnimMgr.Add(Label_Month_Name, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		Label_Month_Name.TTS_Unfocus();
	}
}

Void FocusMonthly(CMlScript _This, CMlFrame _Frame_Element, Boolean _IsFocus, Boolean _IsRoyal) {
	if (_Frame_Element == Null) return;

	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare CMlControl[] TOTD_Frames = GetLineControls(_Frame_Element);
	if (_IsRoyal) {
		if (TOTD_Frames.existskey(TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey)) {
			if (_IsFocus && !TOTD_Frames[TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey].Visible) {
				if (TOTD_Frames.count >= C_MonthlyPerLine) {
					declare Integer TOTDKeyToFocus = TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey;
					while (TOTDKeyToFocus >= 0) {
						if (TOTD_Frames[TOTDKeyToFocus].Visible) {
							TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey = TOTDKeyToFocus;
							FocusTOTD(_This, TOTD_Frames[TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey] as CMlFrame, _IsFocus);
							break;
						}
						TOTDKeyToFocus -= 1;
					}
				}
			} else {
				FocusTOTD(_This, TOTD_Frames[TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey] as CMlFrame, _IsFocus);
			}
		}
	} else {
		if (TOTD_Frames.existskey(TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey)) {
			if (_IsFocus && !TOTD_Frames[TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey].Visible) {
				if (TOTD_Frames.count >= C_MonthlyPerLine) {
					declare Integer TOTDKeyToFocus = TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey;
					while (TOTDKeyToFocus >= 0) {
						if (TOTD_Frames[TOTDKeyToFocus].Visible) {
							TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey = TOTDKeyToFocus;
							FocusTOTD(_This, TOTD_Frames[TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey] as CMlFrame, _IsFocus);
							break;
						}
						TOTDKeyToFocus -= 1;
					}
				}
			} else {
				FocusTOTD(_This, TOTD_Frames[TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey] as CMlFrame, _IsFocus);
			}
		}
	}
}

Void UnfocusLastMonthly(CMlScript _This, Boolean _IsRoyal) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (_IsRoyal) {
		if (TMNext_TrackBrowser_State.Official.LastScrollRoyalFocus != Null) {
			FocusMonthly(_This, TMNext_TrackBrowser_State.Official.LastScrollRoyalFocus, False, _IsRoyal);
			TMNext_TrackBrowser_State.Official.LastScrollRoyalFocus = Null;
		}
	} else {
		if (TMNext_TrackBrowser_State.Official.LastScrollMonthlyFocus != Null) {
			FocusMonthly(_This, TMNext_TrackBrowser_State.Official.LastScrollMonthlyFocus, False, _IsRoyal);
			TMNext_TrackBrowser_State.Official.LastScrollMonthlyFocus = Null;
		}
	}
}

Void UnfocusLastMonthlies(CMlScript _This) {
	UnfocusLastMonthly(_This, False);
	UnfocusLastMonthly(_This, True);
}

Void FocusMonthlyByMouse(CMlScript _This, CMlFrame _Frame_TOTD, Boolean _IsRoyal) {
	if (_Frame_TOTD != Null) {
		if (_Frame_TOTD.DataAttributeExists("key") && _Frame_TOTD.Parent != Null) {
			declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
			UnfocusLastMonthly(_This, _IsRoyal);
			if (_IsRoyal) {
				TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey = TL::ToInteger(_Frame_TOTD.DataAttributeGet("key"));
			} else {
				TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey = TL::ToInteger(_Frame_TOTD.DataAttributeGet("key"));
			}
			assert(_Frame_TOTD.Parent.HasClass(Scroll::C_Class_Element), "We are not pointing to the correct frame anymore");
			declare Integer MonthlyScrollKey for _Frame_TOTD.Parent;
			Scroll::SetFocusedElementKey(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD, MonthlyScrollKey, True, True);
		}
	}
}

Void FocusMonthlyByInput(CMlScript _This, CMlScriptEvent::EMenuNavAction _Input, CMlFrame _Frame_Element, Boolean _IsRoyal) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare CMlControl[] TOTD_Frames = GetLineControls(_Frame_Element);
	switch (_Input) {
		case CMlScriptEvent::EMenuNavAction::Right : {
			if (_IsRoyal) {
				if (TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey + 1 < C_MonthlyPerLine) {
					if (TOTD_Frames.count >= C_MonthlyPerLine && TOTD_Frames[TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey + 1].Visible) {
						if (TOTD_Frames.existskey(TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey)) FocusTOTD(_This, TOTD_Frames[TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey] as CMlFrame, False);
						TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey = TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey + 1;
						FocusTOTD(_This, TOTD_Frames[TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey] as CMlFrame, True);
					}
				}
			} else {
				if (TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey + 1 < C_MonthlyPerLine) {
					if (TOTD_Frames.count >= C_MonthlyPerLine && TOTD_Frames[TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey + 1].Visible) {
						if (TOTD_Frames.existskey(TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey)) FocusTOTD(_This, TOTD_Frames[TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey] as CMlFrame, False);
						TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey = TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey + 1;
						FocusTOTD(_This, TOTD_Frames[TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey] as CMlFrame, True);
					}
				}
			}
		}
		case CMlScriptEvent::EMenuNavAction::Left : {
			if (_IsRoyal) {
				if (TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey - 1 >= 0) {
					if (TOTD_Frames.count >= C_MonthlyPerLine && TOTD_Frames[TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey - 1].Visible) {
						if (TOTD_Frames.existskey(TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey)) FocusTOTD(_This, TOTD_Frames[TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey] as CMlFrame, False);
						TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey = TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey - 1;
						FocusTOTD(_This, TOTD_Frames[TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey] as CMlFrame, True);
					}
				} else {
					Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
				}
			} else {
				if (TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey - 1 >= 0) {
					if (TOTD_Frames.count >= C_MonthlyPerLine && TOTD_Frames[TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey - 1].Visible) {
						if (TOTD_Frames.existskey(TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey)) FocusTOTD(_This, TOTD_Frames[TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey] as CMlFrame, False);
						TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey = TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey - 1;
						FocusTOTD(_This, TOTD_Frames[TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey] as CMlFrame, True);
					}
				} else {
					Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
				}
			}
		}
	}
}

Void ResetMyTracks(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Tracks = [];
	TMNext_TrackBrowser_State.MyTracks.LocalTracks = [];
	TMNext_TrackBrowser_State.MyTracks.CurrentPath = "";
	TMNext_TrackBrowser_State.MyTracks.CurrentParentPath = "";
	TMNext_TrackBrowser_State.MyTracks.FocusParentFolder = False;
	TMNext_TrackBrowser_State.MyTracks.LastFolderSelected_Keys.clear();
	TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks = Task::Destroy(TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks);
	TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks = Task::Destroy(TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks);
	TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus = Task::Destroy(TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus);
	TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task = Task::Destroy(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task);
	TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Name = "";
	TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.FileName = "";
	TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Uid = "";
	TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task = Task::Destroy(TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task);
	TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Name = "";
	TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Uid = "";
}

Void ResetFavorites(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Favorites.IsLoadingTracks = False;
	TMNext_TrackBrowser_State.Favorites.RemoveTrack.Name = "";
	TMNext_TrackBrowser_State.Favorites.RemoveTrack.Uid = "";
}

Void ResetOfficial(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	UnfocusLastOfficialCampaign(_This);
	UnfocusLastMonthlies(_This);
	TMNext_TrackBrowser_State.Official.IsLoadingTracks = False;
	TMNext_TrackBrowser_State.Official.Campaigns = [];
	TMNext_TrackBrowser_State.Official.IsLoadingCampaigns = False;
	TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey = -1;
	TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey = 0;
	TMNext_TrackBrowser_State.Official.LastScrollCampaignFocus = Null;
	TMNext_TrackBrowser_State.Official.FocusParentCampaign = False;
	TMNext_TrackBrowser_State.Official.Monthlies = [];
	TMNext_TrackBrowser_State.Official.IsLoadingMonthly = False;
	TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey = 0;
	TMNext_TrackBrowser_State.Official.LastScrollMonthlyFocus = Null;
	TMNext_TrackBrowser_State.Official.ScrollMonthlyOffset = 0;
	TMNext_TrackBrowser_State.Official.CurrentPageMonthly = -1;
	TMNext_TrackBrowser_State.Official.FocusParentMonthly = False;
	TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey = -1;
	TMNext_TrackBrowser_State.Official.Royals = [];
	TMNext_TrackBrowser_State.Official.IsLoadingRoyal = False;
	TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey = 0;
	TMNext_TrackBrowser_State.Official.LastScrollRoyalFocus = Null;
	TMNext_TrackBrowser_State.Official.ScrollRoyalOffset = 0;
	TMNext_TrackBrowser_State.Official.CurrentPageRoyal = -1;
	TMNext_TrackBrowser_State.Official.FocusParentRoyal = False;
	TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey = -1;
	TMNext_TrackBrowser_State.Official.CurrentMonthDays.clear();
}

Void ResetClubs(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Clubs.Clubs = [];
	TMNext_TrackBrowser_State.Clubs.IsLoadingClubs = False;
	TMNext_TrackBrowser_State.Clubs.SelectedClub = ClubStruct::LibStructuresClub_K_Club {};
	TMNext_TrackBrowser_State.Clubs.IsLoadingCampaigns = False;
	TMNext_TrackBrowser_State.Clubs.SelectedCampaigns = [];
	TMNext_TrackBrowser_State.Clubs.FocusParentClub = False;
	TMNext_TrackBrowser_State.Clubs.SelectedClubKey = -1;
	TMNext_TrackBrowser_State.Clubs.IsLoadingCampaignTracks = False;
	TMNext_TrackBrowser_State.Clubs.FocusParentCampaign = False;
	TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey = -1;
}

Void ResetTracksFavoriteStatus(CMlScript _This, Boolean _ResetKnownedFavorites) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.TracksFavoriteStatus.Request = Http::Destroy(TMNext_TrackBrowser_State.TracksFavoriteStatus.Request);
	TMNext_TrackBrowser_State.TracksFavoriteStatus.CheckRequestTime = -1;
	TMNext_TrackBrowser_State.TracksFavoriteStatus.LastAddOrRemoveRequestTime = -1;
	TMNext_TrackBrowser_State.TracksFavoriteStatus.FirstHeartIconDisplay = False;
	TMNext_TrackBrowser_State.TracksFavoriteStatus.UidsToCheck.clear();
	if (_ResetKnownedFavorites)	TMNext_TrackBrowser_State.TracksFavoriteStatus.KnownedFavoritesTracksUids.clear();
	TMNext_TrackBrowser_State.TracksFavoriteStatus.CurrentTrackUid = "";
	TMNext_TrackBrowser_State.TracksFavoriteStatus.CurrentTrackName = "";
}

Void Reset(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	switch (TMNext_TrackBrowser_State.CurrentTabIndex) {
		case C_TabIndex_None: {
			ResetMyTracks(_This);
			ResetFavorites(_This);
			ResetOfficial(_This);
			ResetClubs(_This);
		}
		case C_TabIndex_MyTracks: {
			ResetFavorites(_This);
			ResetOfficial(_This);
			ResetClubs(_This);
		}
		case C_TabIndex_Favorites: {
			ResetMyTracks(_This);
			ResetOfficial(_This);
			ResetClubs(_This);
		}
		case C_TabIndex_Official: {
			ResetMyTracks(_This);
			ResetFavorites(_This);
			ResetClubs(_This);
		}
		case C_TabIndex_Clubs: {
			ResetMyTracks(_This);
			ResetFavorites(_This);
			ResetOfficial(_This);
		}
	}
	ResetTracksFavoriteStatus(_This, False);
}

Void EnableOption(CMlFrame _Button, Boolean _Enable) {
	if (_Button == Null) return;
	_Button.Visible = _Enable;
	Navigation::Lock(_Button, !_Enable);
}

Void CheckButtonSelectAllTracks(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare Boolean AllTracksChecked = True;
	// Manual limit set to avoid checking too much tracks
	if (TMNext_TrackBrowser_State.MyTracks.LocalTracks.count > C_MaxSelectedTracksCountCheck || TMNext_TrackBrowser_State.Tracks.count > C_MaxSelectedTracksCountCheck) {
		AllTracksChecked = False;
	} else {
		if (TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks) {
			declare Integer FoldersNb = 0;
			foreach (Track in TMNext_TrackBrowser_State.MyTracks.LocalTracks) {
				if (Track.SubFolder == "" && !TMNext_TrackBrowser_State.SelectedTracks.existskey(Track.TrackInfo.Uid)) {
					AllTracksChecked = False;
					break;
				} else if (Track.SubFolder != "") {
					FoldersNb += 1;
				}
			}
			if (FoldersNb == TMNext_TrackBrowser_State.MyTracks.LocalTracks.count) {
				AllTracksChecked = False;
			}
		} else {
			// If there is more tracks displayed than in the selected array, no need to check
			if (TMNext_TrackBrowser_State.Tracks.count > TMNext_TrackBrowser_State.SelectedTracks.count) {
				AllTracksChecked = False;
			} else {
				foreach (Track in TMNext_TrackBrowser_State.Tracks) {
					if (!TMNext_TrackBrowser_State.SelectedTracks.existskey(Track.Uid)) {
						AllTracksChecked = False;
						break;
					}
				}
			}
		}
	}
	Checkbox::Check(_This, TMNext_TrackBrowser_State.Controls.Button_SelectAll, AllTracksChecked);
}

Void ShowOptions(CMlScript _This, Boolean _Show) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Controls.Frame_Options.Visible = _Show;
	// SelectAll button unavailable when tracks API uses an offset (for now only Favorites, later in Online Tracks too) 
	EnableOption(TMNext_TrackBrowser_State.Controls.Button_SelectAll, _Show && TMNext_TrackBrowser_State.Settings.MultiSelect && TMNext_TrackBrowser_State.CurrentTabIndex != C_TabIndex_Favorites);
	TMNext_TrackBrowser_State.Controls.ButtonIcon_SelectAll.Visible = TMNext_TrackBrowser_State.Controls.Button_SelectAll.Visible;
	TMNext_TrackBrowser_State.Controls.Frame_SpaceDisk.Visible = _Show && TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks && Platform::IsFromFirstParty(System);
	EnableOption(TMNext_TrackBrowser_State.Controls.Button_Flatten, _Show && TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks && Platform::IsPC(System));
	EnableOption(TMNext_TrackBrowser_State.Controls.Button_Refresh, _Show && TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks && Platform::IsPC(System));
	EnableOption(TMNext_TrackBrowser_State.Controls.Button_OpenExplorer, _Show && TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks && Platform::IsPC(System));
	EnableOption(TMNext_TrackBrowser_State.Controls.Button_Sort, _Show && (TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks || TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites));
	TMNext_TrackBrowser_State.Controls.ButtonIcon_Sort.Visible = TMNext_TrackBrowser_State.Controls.Button_Sort.Visible;
	if (TMNext_TrackBrowser_State.Controls.Button_SelectAll.Visible) {
		declare CMlLabel Label_SelectAll = Checkbox::GetLabel(TMNext_TrackBrowser_State.Controls.Button_SelectAll);
		declare Real LabelWidth = ML::Min(Label_SelectAll.ComputeWidth(Label_SelectAll.Value), Checkbox::GetLabelSize(TMNext_TrackBrowser_State.Controls.Button_SelectAll).X);
		if (TMNext_TrackBrowser_State.Controls.Button_Flatten.Visible) {
			TMNext_TrackBrowser_State.Controls.Button_SelectAll.RelativePosition_V3.X = -27.;
			TMNext_TrackBrowser_State.Controls.ButtonIcon_SelectAll.RelativePosition_V3.X = TMNext_TrackBrowser_State.Controls.Button_SelectAll.RelativePosition_V3.X - LabelWidth + 2.5;
		} else if (TMNext_TrackBrowser_State.Controls.Frame_SpaceDisk.Visible) {
			TMNext_TrackBrowser_State.Controls.Button_SelectAll.RelativePosition_V3.X = -49.;
			TMNext_TrackBrowser_State.Controls.ButtonIcon_SelectAll.RelativePosition_V3.X = TMNext_TrackBrowser_State.Controls.Button_SelectAll.RelativePosition_V3.X - LabelWidth + 2.5;			
		} else if (TMNext_TrackBrowser_State.Controls.Button_Sort.Visible) {
			TMNext_TrackBrowser_State.Controls.Button_SelectAll.RelativePosition_V3.X = -1.;
			TMNext_TrackBrowser_State.Controls.ButtonIcon_SelectAll.RelativePosition_V3.X = TMNext_TrackBrowser_State.Controls.Button_SelectAll.RelativePosition_V3.X - LabelWidth + 2.5;
		} else {
			TMNext_TrackBrowser_State.Controls.Button_SelectAll.RelativePosition_V3.X = 27.5;
			TMNext_TrackBrowser_State.Controls.ButtonIcon_SelectAll.RelativePosition_V3.X = TMNext_TrackBrowser_State.Controls.Button_SelectAll.RelativePosition_V3.X + 17.;
		}
	}
}

Void EnableMultiSelect(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	UpdateAddTracksButtonVisibility(_This);
	if (TMNext_TrackBrowser_State.Settings.MultiSelect) {
		TMNext_TrackBrowser_State.Controls.Label_SubTitle.Value = C_Text_SubTitlePlural;
	} else {
		TMNext_TrackBrowser_State.Controls.Label_SubTitle.Value = C_Text_SubTitleSingular;	
	}
}

// Navigation between tabs (My Tracks, Favorites, Official and Clubs) and tabs sections
Void GoToTabAndSection(CMlScript _This, Integer _TabIndex, Integer _Section) {
	if (!C_TabNames.existskey(_TabIndex)) return;
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.CurrentTabIndex = _TabIndex;
	TMNext_TrackBrowser_State.CurrentSection = _Section;
	UserStore::SetTrackBrowser_Tab(TMNext_TrackBrowser_State.CurrentTabIndex);
	Reset(_This);
	if (NavigationTabs::GetCurrentTab(TMNext_TrackBrowser_State.Controls.Frame_Tabs) != TMNext_TrackBrowser_State.CurrentTabIndex) {
		NavigationTabs::UpdateCurrentTab(_This, TMNext_TrackBrowser_State.Controls.Frame_Tabs, TMNext_TrackBrowser_State.CurrentTabIndex, False);
	}

	TMNext_TrackBrowser_State.Controls.Frame_MyTracks.Hide();
	TMNext_TrackBrowser_State.Controls.Frame_Official.Hide();
	TMNext_TrackBrowser_State.Controls.Frame_Clubs.Hide();
	ShowOptions(_This, False);
	Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, 0);
	Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs, 0);
	// We don't want to send a Focus Event to the Official campaigns and Monthlies scrolls because it compromises the behaviour of the ColumnFocusKey variable
	Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Official_Campaigns, 0, False);
	Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD, 0, False);
	SetSectionTitle(_This, "");
	TMNext_TrackBrowser_State.Controls.Label_Error.Value = "";
	declare Text ButtonBack_UpTargetId = "";
	declare Text ButtonBack_RightTargetId = "";
	UpdateControllerInfos(_This);

	switch (TMNext_TrackBrowser_State.CurrentTabIndex) {
		case C_TabIndex_MyTracks: {
			switch (TMNext_TrackBrowser_State.CurrentSection) {
				case C_Section_None: {
					SetSectionTitle(_This, C_Text_Tracks);
					TMNext_TrackBrowser_State.Controls.Frame_MyTracks.Show();
					Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.MyTracks.LastButtonFocused);
					ButtonBack_UpTargetId = TMNext_TrackBrowser_State.MyTracks.LastButtonFocused.ControlId;
				}
				case C_Section_LocalTracks: {
					TMNext_TrackBrowser_State.Controls.Frame_MyTracks.Hide();
					ShowOptions(_This, True);
					if (TMNext_TrackBrowser_State.MyTracks.NeedRefresh) {
						DataFileMgr.Map_RefreshFromDisk();
						TMNext_TrackBrowser_State.MyTracks.NeedRefresh = False;
					}	
					UpdateLocalTracks(_This, TMNext_TrackBrowser_State.MyTracks.CurrentPath);
					ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks.ControlId;
					ButtonBack_RightTargetId = ButtonBack_UpTargetId;
				}
				case C_Section_OnlineTracks: {
					TMNext_TrackBrowser_State.Controls.Frame_MyTracks.Hide();
					ShowOptions(_This, TMNext_TrackBrowser_State.Settings.MultiSelect);
					UpdateOnlineTracks(_This);
					ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks.ControlId;
					ButtonBack_RightTargetId = ButtonBack_UpTargetId;
				}
			}
		}
		case C_TabIndex_Favorites: {
			SetSectionTitle(_This, C_Text_FavoriteTracks);
			ShowOptions(_This, True);
			TMNext_TrackBrowser_State.Favorites.IsLoadingTracks = True;
			UpdateLoadingStatus(_This);
			ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks.ControlId;
			ButtonBack_RightTargetId = ButtonBack_UpTargetId;
			Scroll::TriggerPagerUpdate(TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks);
		}
		case C_TabIndex_Official: {
			switch (TMNext_TrackBrowser_State.CurrentSection) {
				case C_Section_None: {
					SetSectionTitle(_This, C_Text_Official);
					TMNext_TrackBrowser_State.Controls.Frame_Official.Show();
					TMNext_TrackBrowser_State.Controls.Frame_OfficialButtons.Show();
					TMNext_TrackBrowser_State.Controls.Label_DayTOTD.SetText(""^Tools::GetMonthDay());
					if (TMNext_TrackBrowser_State.Official.LastButtonFocused == Null || Navigation::IsLocked(TMNext_TrackBrowser_State.Official.LastButtonFocused)) {
						TMNext_TrackBrowser_State.Official.LastButtonFocused = TMNext_TrackBrowser_State.Controls.Button_OfficialCampaigns;
					}
					Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Official.LastButtonFocused);
					ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Official.LastButtonFocused.ControlId;
				}
				case C_Section_OfficialCampaigns: {
					TMNext_TrackBrowser_State.Controls.Frame_Official.Show();
					TMNext_TrackBrowser_State.Controls.Frame_OfficialButtons.Hide();
					SetSectionTitle(_This, C_Text_OfficialCampaigns);
					TMNext_TrackBrowser_State.Official.IsLoadingCampaigns = True;
					UpdateLoadingStatus(_This);
					CampaignStore::Action_LoadLiveQuarterlyCampaign(_This, CampaignAPI::C_CachePreload_CampaignOfficial);
					ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Controls.Frame_Scroll_Official_Campaigns.ControlId;
					ButtonBack_RightTargetId = ButtonBack_UpTargetId;
				}
				case C_Section_SelectedOfficialCampaign: {
					if (TMNext_TrackBrowser_State.Official.Campaigns.existskey(TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey) && TMNext_TrackBrowser_State.Official.Campaigns[TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey].existskey(TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey)) {
						declare Text CampaignName = TMNext_TrackBrowser_State.Official.Campaigns[TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey][TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey].Name;		
						SetSectionTitle(_This, TL::Compose(C_Text_SelectedCampaign, CampaignName));
						UpdateOfficialTracks(_This);
						ShowOptions(_This, TMNext_TrackBrowser_State.Settings.MultiSelect);
						ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks.ControlId;
						ButtonBack_RightTargetId = ButtonBack_UpTargetId;
					}
				}
				case C_Section_Monthly: {
					TMNext_TrackBrowser_State.Controls.Frame_Official.Show();
					TMNext_TrackBrowser_State.Controls.Frame_OfficialButtons.Hide();
					SetSectionTitle(_This, C_Text_TOTD);
					TMNext_TrackBrowser_State.Official.IsLoadingMonthly = True;
					UpdateLoadingStatus(_This);
					TMNext_TrackBrowser_State.Official.CurrentPageMonthly = -1; // To trigger the pager update
					ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD.ControlId;
					ButtonBack_RightTargetId = ButtonBack_UpTargetId;
				}
				case C_Section_SelectedMonthly: {
					if (TMNext_TrackBrowser_State.Official.Monthlies.existskey(TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey) && TMNext_TrackBrowser_State.Official.Monthlies[TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey].existskey(TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey)) {
						declare Text MonthlyName = TMNext_TrackBrowser_State.Official.Monthlies[TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey][TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey].MonthName;
						SetSectionTitle(_This, TL::Compose(C_Text_SelectedTOTD, MonthlyName));
						UpdateOfficialTracks(_This);
						ShowOptions(_This, TMNext_TrackBrowser_State.Settings.MultiSelect);
						ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks.ControlId;
						ButtonBack_RightTargetId = ButtonBack_UpTargetId;
					}
				}
				case C_Section_Royal: {
					TMNext_TrackBrowser_State.Controls.Frame_Official.Show();
					TMNext_TrackBrowser_State.Controls.Frame_OfficialButtons.Hide();
					SetSectionTitle(_This, C_Text_Royal);
					TMNext_TrackBrowser_State.Official.IsLoadingRoyal = True;
					UpdateLoadingStatus(_This);
					TMNext_TrackBrowser_State.Official.CurrentPageRoyal = -1; // To trigger the pager update
					ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD.ControlId;
					ButtonBack_RightTargetId = ButtonBack_UpTargetId;
				}
				case C_Section_SelectedRoyal: {
					if (TMNext_TrackBrowser_State.Official.Royals.existskey(TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey) && TMNext_TrackBrowser_State.Official.Royals[TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey].existskey(TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey)) {
						declare Text RoyalName = TMNext_TrackBrowser_State.Official.Royals[TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey][TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey].MonthName;
						SetSectionTitle(_This, TL::Compose(C_Text_SelectedRoyal, RoyalName));
						UpdateOfficialTracks(_This);
						ShowOptions(_This, TMNext_TrackBrowser_State.Settings.MultiSelect);
						ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks.ControlId;
						ButtonBack_RightTargetId = ButtonBack_UpTargetId;
					}
				}
			}
		}
		case C_TabIndex_Clubs: {			
			switch (TMNext_TrackBrowser_State.CurrentSection) {
				case C_Section_None: {
					TMNext_TrackBrowser_State.Controls.Frame_Clubs.Show();
					SetSectionTitle(_This, C_Text_MyClubsTracks);
					TMNext_TrackBrowser_State.Clubs.IsLoadingClubs = True;
					UpdateLoadingStatus(_This);
					ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs.ControlId;
					ButtonBack_RightTargetId = ButtonBack_UpTargetId;
					Scroll::TriggerPagerUpdate(TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs);
				}
				case C_Section_SelectedClub: {
					TMNext_TrackBrowser_State.Controls.Frame_Clubs.Show();
					SetSectionTitle(_This, TL::Compose(C_Text_SelectedClub, "$<"^Tools::FormatValue(FilterProfanities(TMNext_TrackBrowser_State.Clubs.SelectedClub.Name))^"$>"));
					TMNext_TrackBrowser_State.Clubs.IsLoadingCampaigns = True;
					UpdateLoadingStatus(_This);
					ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs.ControlId;
					ButtonBack_RightTargetId = ButtonBack_UpTargetId;
					Scroll::TriggerPagerUpdate(TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs);
				}
				case C_Section_SelectedClubCampaign: {
					if (TMNext_TrackBrowser_State.Clubs.SelectedCampaigns.existskey(TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey)) {
						declare Integer SelectedCampaignId = TMNext_TrackBrowser_State.Clubs.SelectedCampaigns[TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey].Id;
						UpdateClubCampaignTracks(_This, SelectedCampaignId);
						ShowOptions(_This, TMNext_TrackBrowser_State.Settings.MultiSelect);
						ButtonBack_UpTargetId = TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks.ControlId;
						ButtonBack_RightTargetId = ButtonBack_UpTargetId;
					}
				}
			}
		}
	}
	EnableMultiSelect(_This);
	if (TMNext_TrackBrowser_State.Settings.MultiSelect && TMNext_TrackBrowser_State.Controls.Button_AddTracks.Visible) {
		ButtonBack_RightTargetId = TMNext_TrackBrowser_State.Controls.Button_AddTracks.ControlId;
	}
	Navigation::ChangeControlTargets(_This, TMNext_TrackBrowser_State.Controls.Button_Back, ["up", "right"], [ButtonBack_UpTargetId, ButtonBack_RightTargetId]);
}

Void GoToTab(CMlScript _This, Integer _TabIndex) {
	return GoToTabAndSection(_This, _TabIndex, C_Section_None);
}

Void GoToSection(CMlScript _This, Integer _Section) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	return GoToTabAndSection(_This, TMNext_TrackBrowser_State.CurrentTabIndex, _Section);
}

Void Refresh(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Controls.Label_Error.Value = "";
	switch (TMNext_TrackBrowser_State.CurrentSection) {
		case C_Section_None: {
			if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites) {
				Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, 0);
				TMNext_TrackBrowser_State.Favorites.IsLoadingTracks = True;
				UpdateLoadingStatus(_This);
				Scroll::TriggerPagerUpdate(TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks);
			}
		}
		case C_Section_LocalTracks: {
			DataFileMgr.Map_RefreshFromDisk();
			UpdateLocalTracks(_This, TMNext_TrackBrowser_State.MyTracks.CurrentPath);
		}
	}
}

// Update the navigation tabs depending on browser setttings
Void UpdateNavigationTabs(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare Text[Integer] TabNames = C_TabNames;

	if (TMNext_TrackBrowser_State.Settings.ShowOnlyMyLocalTracks) {
		TabNames = [C_TabIndex_MyTracks => C_TabNames[C_TabIndex_MyTracks]];
	}

	if (!TMNext_TrackBrowser_State.CanViewUGC) {
		TabNames.removekey(C_TabIndex_Favorites);
		TabNames.removekey(C_TabIndex_Clubs);
	}

	NavigationTabs::SetTabs(_This, TMNext_TrackBrowser_State.Controls.Frame_Tabs, TabNames, False);
	NavigationTabs::RedrawNavigationTabs(_This, TMNext_TrackBrowser_State.Controls.Frame_Tabs, False);
}

Void LockScroll(CMlFrame _Frame_Scroll, Boolean _Lock) {
	Scroll::LockNavigation(_Frame_Scroll, _Lock);
	Navigation::Lock(_Frame_Scroll, _Lock);
}

Void RetrievePersistentTrackBrowser(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare UserStore::K_TrackBrowserInfos CurrentBrowser = UserStore::GetPersistentTrackBrowserInfos();

	TMNext_TrackBrowser_State.CurrentTabIndex = CurrentBrowser.CurrentTabIndex;
	TMNext_TrackBrowser_State.SortingTypes.IsFlatten = CurrentBrowser.IsFlatten;
	TMNext_TrackBrowser_State.SortingTypes.IsSortingByNameElseByDate = CurrentBrowser.IsSortingByNameElseByDate;
	TMNext_TrackBrowser_State.SortingTypes.IsSortingFromAscendingOrder = CurrentBrowser.IsSortingFromAscendingOrder;
}

Void RetrievePreviousTrackBrowser(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare Integer TMNext_TrackBrowser_CurrentSection for LocalUser = -1;
	TMNext_TrackBrowser_State.CurrentSection = TMNext_TrackBrowser_CurrentSection;
	// Local tracks
	declare Text TMNext_TrackBrowser_CurrentPath for LocalUser = ""; 
	TMNext_TrackBrowser_State.MyTracks.CurrentPath = TMNext_TrackBrowser_CurrentPath;
	// Official campaigns
	declare K_OfficialCampaign[][Integer] TMNext_TrackBrowser_OfficialCampaigns for LocalUser = [];
	declare Integer TMNext_TrackBrowser_OfficialCampaignLineSelectedKey for LocalUser = -1; 
	declare Integer TMNext_TrackBrowser_OfficialCampaignColumnFocusKey for LocalUser = 0; 
	TMNext_TrackBrowser_State.Official.Campaigns = TMNext_TrackBrowser_OfficialCampaigns;
	TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey = TMNext_TrackBrowser_OfficialCampaignLineSelectedKey;
	TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey = TMNext_TrackBrowser_OfficialCampaignColumnFocusKey;
	// Monthly campaigns
	declare K_MonthlyCampaign[][Integer] TMNext_TrackBrowser_Monthlies for LocalUser = [];
	declare Integer TMNext_TrackBrowser_MonthlyColumnFocusKey for LocalUser = 0;
	declare Integer TMNext_TrackBrowser_ScrollMonthlyOffset for LocalUser = 0;
	declare Integer TMNext_TrackBrowser_CurrentPageMonthly for LocalUser = -1;
	declare Integer TMNext_TrackBrowser_MonthlyLineSelectedKey for LocalUser = -1;
	TMNext_TrackBrowser_State.Official.Monthlies = TMNext_TrackBrowser_Monthlies;
	TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey = TMNext_TrackBrowser_MonthlyColumnFocusKey;
	TMNext_TrackBrowser_State.Official.ScrollMonthlyOffset = TMNext_TrackBrowser_ScrollMonthlyOffset;
	TMNext_TrackBrowser_State.Official.CurrentPageMonthly = TMNext_TrackBrowser_CurrentPageMonthly;
	TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey = TMNext_TrackBrowser_MonthlyLineSelectedKey;
	// Royal campaigns
	declare K_MonthlyCampaign[][Integer] TMNext_TrackBrowser_Royals for LocalUser = [];
	declare Integer TMNext_TrackBrowser_RoyalColumnFocusKey for LocalUser = 0;
	declare Integer TMNext_TrackBrowser_ScrollRoyalOffset for LocalUser = 0;
	declare Integer TMNext_TrackBrowser_CurrentPageRoyal for LocalUser = -1;
	declare Integer TMNext_TrackBrowser_RoyalLineSelectedKey for LocalUser = -1;
	TMNext_TrackBrowser_State.Official.Royals = TMNext_TrackBrowser_Royals;
	TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey = TMNext_TrackBrowser_RoyalColumnFocusKey;
	TMNext_TrackBrowser_State.Official.ScrollRoyalOffset = TMNext_TrackBrowser_ScrollRoyalOffset;
	TMNext_TrackBrowser_State.Official.CurrentPageRoyal = TMNext_TrackBrowser_CurrentPageRoyal;
	TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey = TMNext_TrackBrowser_RoyalLineSelectedKey;
	// Club campaigns
	declare ClubStruct::LibStructuresClub_K_Club[Integer] TMNext_TrackBrowser_Clubs for LocalUser = [];
	declare Integer TMNext_TrackBrowser_SelectedClubKey for LocalUser = -1;
	declare ClubStruct::LibStructuresClub_K_Club TMNext_TrackBrowser_SelectedClub for LocalUser = ClubStruct::LibStructuresClub_K_Club {};
	declare Integer TMNext_TrackBrowser_SelectedClubCampaignKey for LocalUser = -1;
	declare CampaignStruct::LibCampaignStruct_K_Campaign[Integer] TMNext_TrackBrowser_SelectedClubCampaigns for LocalUser = [];
	TMNext_TrackBrowser_State.Clubs.Clubs = TMNext_TrackBrowser_Clubs;
	TMNext_TrackBrowser_State.Clubs.SelectedClubKey = TMNext_TrackBrowser_SelectedClubKey;
	TMNext_TrackBrowser_State.Clubs.SelectedClub = TMNext_TrackBrowser_SelectedClub;
	TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey = TMNext_TrackBrowser_SelectedClubCampaignKey;
	TMNext_TrackBrowser_State.Clubs.SelectedCampaigns = TMNext_TrackBrowser_SelectedClubCampaigns;
}

Void SavePreviousTrackBrowser(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare Integer TMNext_TrackBrowser_CurrentSection for LocalUser = -1;
	TMNext_TrackBrowser_CurrentSection = TMNext_TrackBrowser_State.CurrentSection;
	// Local tracks
	declare Text TMNext_TrackBrowser_CurrentPath for LocalUser = ""; 
	TMNext_TrackBrowser_CurrentPath = TMNext_TrackBrowser_State.MyTracks.CurrentPath;
	// Official campaigns
	declare K_OfficialCampaign[][Integer] TMNext_TrackBrowser_OfficialCampaigns for LocalUser = [];
	declare Integer TMNext_TrackBrowser_OfficialCampaignLineSelectedKey for LocalUser = -1; 
	declare Integer TMNext_TrackBrowser_OfficialCampaignColumnFocusKey for LocalUser = 0; 
	TMNext_TrackBrowser_OfficialCampaigns = TMNext_TrackBrowser_State.Official.Campaigns;
	TMNext_TrackBrowser_OfficialCampaignLineSelectedKey = TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey;
	TMNext_TrackBrowser_OfficialCampaignColumnFocusKey = TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey;
	// Monthly campaigns
	declare K_MonthlyCampaign[][Integer] TMNext_TrackBrowser_Monthlies for LocalUser = [];
	declare Integer TMNext_TrackBrowser_MonthlyColumnFocusKey for LocalUser = 0;
	declare Integer TMNext_TrackBrowser_ScrollMonthlyOffset for LocalUser = 0;
	declare Integer TMNext_TrackBrowser_CurrentPageMonthly for LocalUser = -1;
	declare Integer TMNext_TrackBrowser_MonthlyLineSelectedKey for LocalUser = -1;
	TMNext_TrackBrowser_Monthlies = TMNext_TrackBrowser_State.Official.Monthlies;
	TMNext_TrackBrowser_MonthlyColumnFocusKey = TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey;
	TMNext_TrackBrowser_ScrollMonthlyOffset = TMNext_TrackBrowser_State.Official.ScrollMonthlyOffset;
	TMNext_TrackBrowser_CurrentPageMonthly = TMNext_TrackBrowser_State.Official.CurrentPageMonthly;
	TMNext_TrackBrowser_MonthlyLineSelectedKey = TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey;
	// Royal campaigns
	declare K_MonthlyCampaign[][Integer] TMNext_TrackBrowser_Royals for LocalUser = [];
	declare Integer TMNext_TrackBrowser_RoyalColumnFocusKey for LocalUser = 0;
	declare Integer TMNext_TrackBrowser_ScrollRoyalOffset for LocalUser = 0;
	declare Integer TMNext_TrackBrowser_CurrentPageRoyal for LocalUser = -1;
	declare Integer TMNext_TrackBrowser_RoyalLineSelectedKey for LocalUser = -1;
	TMNext_TrackBrowser_Royals = TMNext_TrackBrowser_State.Official.Royals;
	TMNext_TrackBrowser_RoyalColumnFocusKey = TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey;
	TMNext_TrackBrowser_ScrollRoyalOffset = TMNext_TrackBrowser_State.Official.ScrollRoyalOffset;
	TMNext_TrackBrowser_CurrentPageRoyal = TMNext_TrackBrowser_State.Official.CurrentPageRoyal;
	TMNext_TrackBrowser_RoyalLineSelectedKey = TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey;
	// Club campaigns
	declare ClubStruct::LibStructuresClub_K_Club[Integer] TMNext_TrackBrowser_Clubs for LocalUser = [];
	declare Integer TMNext_TrackBrowser_SelectedClubKey for LocalUser = -1;
	declare ClubStruct::LibStructuresClub_K_Club TMNext_TrackBrowser_SelectedClub for LocalUser = ClubStruct::LibStructuresClub_K_Club {};
	declare Integer TMNext_TrackBrowser_SelectedClubCampaignKey for LocalUser = -1;
	declare CampaignStruct::LibCampaignStruct_K_Campaign[Integer] TMNext_TrackBrowser_SelectedClubCampaigns for LocalUser = [];
	TMNext_TrackBrowser_Clubs = TMNext_TrackBrowser_State.Clubs.Clubs;
	TMNext_TrackBrowser_SelectedClubKey = TMNext_TrackBrowser_State.Clubs.SelectedClubKey;
	TMNext_TrackBrowser_SelectedClub = TMNext_TrackBrowser_State.Clubs.SelectedClub;
	TMNext_TrackBrowser_SelectedClubCampaignKey = TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey ;
	TMNext_TrackBrowser_SelectedClubCampaigns = TMNext_TrackBrowser_State.Clubs.SelectedCampaigns;
}

Boolean IsSectionCorrespondingToTab(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	return C_TabSectionRelationship.existskey(TMNext_TrackBrowser_State.CurrentTabIndex) && C_TabSectionRelationship[TMNext_TrackBrowser_State.CurrentTabIndex].exists(TMNext_TrackBrowser_State.CurrentSection);
}

Boolean IsSectionDisplayPossible(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare Boolean IsSectionDisplayPossible = False;
	switch (TMNext_TrackBrowser_State.CurrentSection) {
		case C_Section_OfficialCampaigns, C_Section_SelectedOfficialCampaign: {
			IsSectionDisplayPossible = TMNext_TrackBrowser_State.Official.Campaigns.count > 0;
		}
		case C_Section_Monthly, C_Section_SelectedMonthly: {
			IsSectionDisplayPossible = (
				TMNext_TrackBrowser_State.CanViewUGC &&
				(
					TMNext_TrackBrowser_State.Filters.FilterByMapType.count == 0 ||
					TMNext_TrackBrowser_State.Filters.FilterByMapType.exists(Const::C_MapType_Race_NoConcat)
				) &&
				TMNext_TrackBrowser_State.Official.Monthlies.count > 0
			);
		}
		case C_Section_Royal, C_Section_SelectedRoyal: {
			IsSectionDisplayPossible = (
				TMNext_TrackBrowser_State.CanViewUGC &&
				(
					TMNext_TrackBrowser_State.Filters.FilterByMapType.count == 0 ||
					TMNext_TrackBrowser_State.Filters.FilterByMapType.exists(Const::C_MapType_Royal_NoConcat)
				) && 
				TMNext_TrackBrowser_State.Official.Royals.count > 0
			);
		}
		case C_Section_SelectedClub, C_Section_SelectedClubCampaign: {
			IsSectionDisplayPossible = TMNext_TrackBrowser_State.Clubs.Clubs.count > 0 && TMNext_TrackBrowser_State.Clubs.SelectedCampaigns.count > 0;
		}
		default: IsSectionDisplayPossible = True;
	}
	return IsSectionDisplayPossible;
}

Void LockBrowser(CMlScript _This, Boolean _Lock) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	Navigation::EnableGroup(_This, C_NavGroupName, !_Lock);
	Navigation::EnableGroup(_This, C_NavGroupGlobal, !_Lock);
	NavigationTabs::LockTabs(_This, TMNext_TrackBrowser_State.Controls.Frame_Tabs, _Lock);
	LockScroll(TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, _Lock);
}

Void UpdateRoyalVictoriesDisplay(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare UserStore::K_MatchmakingInfo RoyalMatchmakingInfo = UserStore::GetMatchmakingInfos(MatchmakingStruct::C_Mode_Royal);
	PlayerRoyalVictories::SetDivisions(_This, RoyalMatchmakingInfo.Divisions);
	PlayerRoyalVictories::UpdatePlayerRoyalVictories(_This, TMNext_TrackBrowser_State.Controls.Frame_RoyalVictory, RoyalMatchmakingInfo.PlayerProgression.CurrentDivision, RoyalMatchmakingInfo.PlayerProgression.CurrentProgression);
}

CManiaApp Private_GetParentApp(CMlScript _This) {
	switchtype (_This as Context) {
		case CMlScriptIngame: {
			return Context.ParentApp;
		}
		case CManiaAppTitleLayer: {
			return Context.ParentApp;
		}
	}

	return Null;
}

Void Private_UpateTOTDAndRoyalAccess(CMlScript _This, Boolean _UpdateTabAndSection) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;

	// Update TOTD button visibility
	if (
		TMNext_TrackBrowser_State.CanViewUGC && (
			TMNext_TrackBrowser_State.Filters.FilterByMapType.count == 0 ||
			TMNext_TrackBrowser_State.Filters.FilterByMapType.exists(Const::C_MapType_Race_NoConcat)
		)
	) {
		TMNext_TrackBrowser_State.Controls.Label_DayTOTD.Show();
		Button::ShowAndUnlock(TMNext_TrackBrowser_State.Controls.Button_TOTD);
	}	else {
		TMNext_TrackBrowser_State.Controls.Label_DayTOTD.Hide();
		Button::HideAndLock(TMNext_TrackBrowser_State.Controls.Button_TOTD);
	}

	// Update Royal button visibility
	if (
		TMNext_TrackBrowser_State.CanViewUGC && (
			TMNext_TrackBrowser_State.Filters.FilterByMapType.count == 0 ||
			TMNext_TrackBrowser_State.Filters.FilterByMapType.exists(Const::C_MapType_Royal_NoConcat)
		)
	) {
		TMNext_TrackBrowser_State.Controls.Frame_RoyalVictory.Show();
		Button::ShowAndUnlock(TMNext_TrackBrowser_State.Controls.Button_Royal);
		UpdateRoyalVictoriesDisplay(_This);
		if (TMNext_TrackBrowser_State.Controls.Button_TOTD.Visible) TMNext_TrackBrowser_State.Controls.Frame_Royal.RelativePosition_V3.X = TMNext_TrackBrowser_State.ManialinkProps.Pos_ThirdHorizontalButton.X;
		else TMNext_TrackBrowser_State.Controls.Frame_Royal.RelativePosition_V3.X = TMNext_TrackBrowser_State.ManialinkProps.Pos_SecondHorizontalButton.X;
	}	else {
		TMNext_TrackBrowser_State.Controls.Frame_RoyalVictory.Hide();
		Button::HideAndLock(TMNext_TrackBrowser_State.Controls.Button_Royal);
	}

	// Force an update of the section to focus the right element if the TOTD and Royal buttons are hidden and locked
	if (
		_UpdateTabAndSection &&
		TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Official && (
			TMNext_TrackBrowser_State.CurrentSection == C_Section_None ||
			!IsSectionDisplayPossible(_This)
		)
	) {
		TMNext_TrackBrowser_State.CurrentSection = C_Section_None;
		TMNext_TrackBrowser_State.Official.LastButtonFocused = Null;
		GoToTabAndSection(_This, TMNext_TrackBrowser_State.CurrentTabIndex, TMNext_TrackBrowser_State.CurrentSection);
	}
}

Void Display(CMlScript _This, Boolean _Visible, Boolean _SendExitEvent) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	// Don't re show or hide browser if is already in the right display
	if ((_Visible && TMNext_TrackBrowser_State.Controls.Frame_Global.Visible) || (!_Visible && !TMNext_TrackBrowser_State.Controls.Frame_Global.Visible)) return;

	TMNext_TrackBrowser_State.Controls.Frame_Global.Visible = _Visible;
	LockBrowser(_This, !_Visible);

	if (_Visible) {
		// Automatic local tracks refresh on browser opening (mandatory for console which do not have a refresh button)
		TMNext_TrackBrowser_State.MyTracks.NeedRefresh = True;

		// If game is offline, restrain track browser to local tracks
		if (UserStore::IsOfflineMode()) {
			SetShowOnlyMyLocalTracks(_This, True);
		} else {
			declare UserStore::K_MatchmakingInfo RoyalMatchmakingInfo = UserStore::GetMatchmakingInfos(MatchmakingStruct::C_Mode_Royal);	
			if (RoyalMatchmakingInfo.Divisions.count <= 0) { //< Try to load matchmaking infos again if not loaded correctly
				UserStore::Action_LoadMatchmakingInfos(_This, LocalUser.WebServicesUserId);
			}
		}
		UpdateNavigationTabs(_This);

		// Retrieve sort settings and last open tab (persistent infos)
		RetrievePersistentTrackBrowser(_This);
		// Retrieve last section and data to re-open it (not persistent infos)
		RetrievePreviousTrackBrowser(_This);

		Private_UpateTOTDAndRoyalAccess(_This, False);

		if (TMNext_TrackBrowser_State.Settings.ShowOnlyMyLocalTracks) {
			GoToTabAndSection(_This, C_TabIndex_MyTracks, C_Section_LocalTracks);
		} else if (
			TMNext_TrackBrowser_State.Settings.OpenOnLastTab &&
			NavigationTabs::IsAvailableTab(TMNext_TrackBrowser_State.Controls.Frame_Tabs, TMNext_TrackBrowser_State.CurrentTabIndex)
		) {
			// Security in case we try to open a sub section and we do not have the mandatory informations to display it
			if (!IsSectionCorrespondingToTab(_This) || !IsSectionDisplayPossible(_This)) {
				TMNext_TrackBrowser_State.CurrentSection = C_Section_None;
			}
			GoToTabAndSection(_This, TMNext_TrackBrowser_State.CurrentTabIndex, TMNext_TrackBrowser_State.CurrentSection);
		} else if (NavigationTabs::IsAvailableTab(TMNext_TrackBrowser_State.Controls.Frame_Tabs, TMNext_TrackBrowser_State.Settings.ChosenOpeningTab)) {
			GoToTab(_This, TMNext_TrackBrowser_State.Settings.ChosenOpeningTab);
		} else {
			GoToTab(_This, C_TabIndex_MyTracks);
		}

		Checkbox::Check(_This, TMNext_TrackBrowser_State.Controls.Button_Flatten, TMNext_TrackBrowser_State.SortingTypes.IsFlatten);
		Checkbox::Check(_This, TMNext_TrackBrowser_State.Controls.Button_SortOption1, TMNext_TrackBrowser_State.SortingTypes.IsSortingByNameElseByDate);
		Checkbox::Check(_This, TMNext_TrackBrowser_State.Controls.Button_SortOption2, TMNext_TrackBrowser_State.SortingTypes.IsSortingFromAscendingOrder);

		// Check that the user can view UGC
		TMNext_TrackBrowser_State.UGCPrivilegeCheck = Privileges::Check_DestroyAndCreate(
			TMNext_TrackBrowser_State.UGCPrivilegeCheck,
			PrivilegeMgr,
			MainUser::GetMainUserId(),
			CPrivilegeMgr::EPrivilege::UseUserCreatedContent
		);

		// Text to speech context
		TMNext_TrackBrowser_State.TTSContextIdent_Tabs = Private_GetParentApp(_This).TTS_Context_Enter(Const::C_TTSContextLevel_Component);
		Private_GetParentApp(_This).TTS_Context_Change(TMNext_TrackBrowser_State.TTSContextIdent_Tabs, NavigationTabs::GetCurrentTabLabel(TMNext_TrackBrowser_State.Controls.Frame_Tabs));
		Private_GetParentApp(_This).TTS_Context_Read(Const::C_TTSContextLevel_Component);
	} else {
		Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
		LockScroll(TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, True);
		LockScroll(TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs, True);
		LockScroll(TMNext_TrackBrowser_State.Controls.Frame_Scroll_Official_Campaigns, True);
		LockScroll(TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD, True);
		TMNext_TrackBrowser_State.SelectedTracks.clear();
		if (TMNext_TrackBrowser_State.Settings.MultiSelect) {
			ExpendableButton::SetText(_This, TMNext_TrackBrowser_State.Controls.Button_AddTracks, C_Text_AddTracks);
		}
		if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Official) {
			UnfocusLastOfficialCampaign(_This);
			UnfocusLastMonthlies(_This);
		}
		ResetTracksFavoriteStatus(_This, True);
		ControllerInfo::SetButtons([]);
		TMNext_TrackBrowser_State.Controls.Label_Error.Value = "";
		SavePreviousTrackBrowser(_This);
		if (_SendExitEvent) {
			TMNext_TrackBrowser_State.DelayedPendingEvents.add(K_Event {
				Type = C_Event_Exit
			});
		}
		TMNext_TrackBrowser_State.UGCPrivilegeCheck = Privileges::Check_Destroy(TMNext_TrackBrowser_State.UGCPrivilegeCheck);
		TMNext_TrackBrowser_State.TTSContextIdent_Tabs = Private_GetParentApp(_This).TTS_Context_Leave(TMNext_TrackBrowser_State.TTSContextIdent_Tabs);
	}
}

Void Display(CMlScript _This, Boolean _Visible) {
	Display(_This, _Visible, True);
}

Void Cancel(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	switch (TMNext_TrackBrowser_State.CurrentSection) {
		case C_Section_None: {
			Display(_This, False);
		}
		case C_Section_LocalTracks: {
			if (TMNext_TrackBrowser_State.MyTracks.CurrentPath != "") {
				UpdateLocalTracks(_This, TMNext_TrackBrowser_State.MyTracks.CurrentParentPath);
				TMNext_TrackBrowser_State.MyTracks.FocusParentFolder = True;
			} else if (!TMNext_TrackBrowser_State.Settings.ShowOnlyMyLocalTracks) {
				GoToTab(_This, C_TabIndex_MyTracks);
			} else {
				Display(_This, False);
			}
		}
		case C_Section_OnlineTracks: {
			GoToTab(_This, C_TabIndex_MyTracks);
		}
		case C_Section_OfficialCampaigns: {
			UnfocusLastOfficialCampaign(_This);
			TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey = 0;
			GoToTab(_This, C_TabIndex_Official);
		}
		case C_Section_SelectedOfficialCampaign: {
			GoToSection(_This, C_Section_OfficialCampaigns);
			TMNext_TrackBrowser_State.Official.FocusParentCampaign = True;
		}
		case C_Section_Monthly: {
			UnfocusLastMonthly(_This, False);
			TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey = 0;
			GoToTab(_This, C_TabIndex_Official);
		}
		case C_Section_SelectedMonthly: {
			GoToSection(_This, C_Section_Monthly);
			TMNext_TrackBrowser_State.Official.FocusParentMonthly = True;
		}
		case C_Section_Royal: {
			UnfocusLastMonthly(_This, True);
			TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey = 0;
			GoToTab(_This, C_TabIndex_Official);
		}
		case C_Section_SelectedRoyal: {
			GoToSection(_This, C_Section_Royal);
			TMNext_TrackBrowser_State.Official.FocusParentRoyal = True;
		}
		case C_Section_SelectedClub: {
			GoToTab(_This, C_TabIndex_Clubs);
			TMNext_TrackBrowser_State.Clubs.FocusParentClub = True;
		}
		case C_Section_SelectedClubCampaign: {
			GoToSection(_This, C_Section_SelectedClub);
			TMNext_TrackBrowser_State.Clubs.FocusParentCampaign = True;
		}
	}
	TMNext_TrackBrowser_State.Controls.Label_Error.Value = "";
}

Void SelectAllTracks(CMlScript _This, Boolean _Select) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks) {	// Special behavior for Local Tracks due to sub folders
		foreach (Track in TMNext_TrackBrowser_State.MyTracks.LocalTracks) {
			if (_Select && Track.SubFolder == "") TMNext_TrackBrowser_State.SelectedTracks[Track.TrackInfo.Uid] = Track.TrackInfo;
			else TMNext_TrackBrowser_State.SelectedTracks.removekey(Track.TrackInfo.Uid);
		}
	} else {
		foreach (Track in TMNext_TrackBrowser_State.Tracks) {
			if (_Select) TMNext_TrackBrowser_State.SelectedTracks[Track.Uid] = Track;
			else TMNext_TrackBrowser_State.SelectedTracks.removekey(Track.Uid);
		}
	}

	declare CMlFrame[Integer] ElementsVisible = Scroll::GetElementsVisible(TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks);
	foreach (Key => Frame_Element in ElementsVisible) {
		if (TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks) {	// Special behavior for Local Tracks due to sub folders
			if (TMNext_TrackBrowser_State.MyTracks.LocalTracks.existskey(Key) && TMNext_TrackBrowser_State.MyTracks.LocalTracks[Key].SubFolder == "") {
				UpdateSelectedTrack(_This, Frame_Element, _Select);
			}
		} else if (TMNext_TrackBrowser_State.Tracks.existskey(Key)) {
			UpdateSelectedTrack(_This, Frame_Element, _Select);
		}
	}
}

Void Select(CMlScript _This, CMlControl _Control) {
	if (_Control == Null || Transition::IsInTransition(_This)) return;
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;

	switch (_Control.ControlId) {
		// Main menu
		case C_Id_ButtonBack: Cancel(_This);
		case C_Id_ButtonMyLocalTracks: GoToSection(_This, C_Section_LocalTracks);
		case C_Id_ButtonMyOnlineTracks: GoToSection(_This, C_Section_OnlineTracks);
		case C_Id_ButtonOfficialCampaigns: GoToSection(_This, C_Section_OfficialCampaigns);
		case C_Id_ButtonTOTD: GoToSection(_This, C_Section_Monthly);
		case C_Id_ButtonRoyal: GoToSection(_This, C_Section_Royal);
		case C_Id_ButtonAddSelectedTracks: {
			TMNext_TrackBrowser_State.PendingEvents.add(K_Event{
				Type = C_Event_MultiSelect,
				MultiTracks = TMNext_TrackBrowser_State.SelectedTracks
			});
		}
		// Options
		case C_Id_ButtonSelectAllTracks: {
			Checkbox::Toggle(_This, _Control as CMlFrame);
			SelectAllTracks(_This, Checkbox::IsChecked(_Control as CMlFrame));
		}
		case C_Id_ButtonFlatten: {
			TMNext_TrackBrowser_State.SortingTypes.IsFlatten = Checkbox::Toggle(_This, _Control as CMlFrame);
			UserStore::SetTrackBrowser_FlattenOption(TMNext_TrackBrowser_State.SortingTypes.IsFlatten);
			Refresh(_This);
		}
		case C_Id_ButtonRefresh: Refresh(_This);
		case C_Id_ButtonOpenExplorer: {
			Private_GetParentApp(_This).OpenFileInExplorer("Maps\\"^TMNext_TrackBrowser_State.MyTracks.CurrentPath);
		}
		case C_Id_ButtonSort: PopUpMultiChoice::Open(_This, TMNext_TrackBrowser_State.Controls.Frame_SortPopUp);
		case C_Id_SortOption1: {
			TMNext_TrackBrowser_State.SortingTypes.IsSortingByNameElseByDate = Checkbox::Toggle(_This, _Control as CMlFrame);
			UserStore::SetTrackBrowser_SortOption1(TMNext_TrackBrowser_State.SortingTypes.IsSortingByNameElseByDate);
		}
		case C_Id_SortOption2: {
			TMNext_TrackBrowser_State.SortingTypes.IsSortingFromAscendingOrder = Checkbox::Toggle(_This, _Control as CMlFrame);
			UserStore::SetTrackBrowser_SortOption2(TMNext_TrackBrowser_State.SortingTypes.IsSortingFromAscendingOrder);
		}
	}
}

Void SelectOfficialCampaign(CMlScript _This, Integer _ScrollKey) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (TMNext_TrackBrowser_State.Official.Campaigns.existskey(_ScrollKey) && TMNext_TrackBrowser_State.Official.Campaigns[_ScrollKey].existskey(TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey)) {
		declare HasPermission = False;
		declare PermissionMessage = "";
		declare LiveQuarterlyCampaign = CampaignStore::GetLiveQuarterlyCampaign();							
		if (TMNext_TrackBrowser_State.Official.Campaigns[_ScrollKey][TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey].Id == LiveQuarterlyCampaign.Id) {
			HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayCurrentOfficialQuarterlyCampaign);
			if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayCurrentOfficialQuarterlyCampaign);								
		} else {
			HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayPastOfficialQuarterlyCampaign);
			if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayPastOfficialQuarterlyCampaign);
		}

		if (!HasPermission) {
			Router::SetParentPath(_This, RoutePaths::C_Path_ClubEditionInfo, Router::GetCurrentRoutePath(_This));
			Router::Push(_This, 
				RoutePaths::C_Path_ClubEditionInfo, 
				[
					RoutePaths::C_Query_Message => PermissionMessage
				],
				False
			);
		} else {
			TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey = _ScrollKey;
			UnfocusLastOfficialCampaign(_This);
			GoToSection(_This, C_Section_SelectedOfficialCampaign);
		}
	}
}

Void SelectMonthly(CMlScript _This, Integer _ScrollKey) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (TMNext_TrackBrowser_State.Official.Monthlies.existskey(_ScrollKey) && TMNext_TrackBrowser_State.Official.Monthlies[_ScrollKey].existskey(TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey)) {
		declare HasPermission = False;
		declare PermissionMessage = "";
		declare LiveMonthlyCampaign = CampaignStore::GetLiveMonthlyCampaign();				
		if (TMNext_TrackBrowser_State.Official.Monthlies[_ScrollKey][TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey].Id == LiveMonthlyCampaign.Id) {
			HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayCurrentOfficialMonthlyCampaign);
			if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayCurrentOfficialMonthlyCampaign);								
		} else {
			HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayPastOfficialMonthlyCampaign);
			if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayPastOfficialMonthlyCampaign);
		}

		if (!HasPermission) {
			Router::SetParentPath(_This, RoutePaths::C_Path_ClubEditionInfo, Router::GetCurrentRoutePath(_This));
			Router::Push(_This, 
				RoutePaths::C_Path_ClubEditionInfo, 
				[
					RoutePaths::C_Query_Message => PermissionMessage
				],
				False
			);
		} else {
			TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey = _ScrollKey;
			UnfocusLastMonthly(_This, False);
			GoToSection(_This, C_Section_SelectedMonthly);
		}
	}
}

Void SelectRoyal(CMlScript _This, Integer _ScrollKey) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (TMNext_TrackBrowser_State.Official.Royals.existskey(_ScrollKey) && TMNext_TrackBrowser_State.Official.Royals[_ScrollKey].existskey(TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey)) {
		if (!UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayMatchmaking)) { // use same permission than the one used in the LIVE menu to play a Royal match 
			Router::SetParentPath(_This, RoutePaths::C_Path_ClubEditionInfo, Router::GetCurrentRoutePath(_This));
			Router::Push(_This, 
				RoutePaths::C_Path_ClubEditionInfo, 
				[
					RoutePaths::C_Query_Message => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayRoyalTracks)
				],
				False
			);
		} else {
			TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey = _ScrollKey;
			UnfocusLastMonthly(_This, True);
			GoToSection(_This, C_Section_SelectedRoyal);
		}
	}
}

Void AddTrackToSelection(CMlScript _This, Integer _TrackKey, CMlFrame _Frame_Track) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare Text TrackUid;
	declare CampaignStruct::LibCampaignStruct_K_Map CurrentTrack;
	declare Boolean IsSelected;
	if (TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks) {
		CurrentTrack = TMNext_TrackBrowser_State.MyTracks.LocalTracks[_TrackKey].TrackInfo;
	} else {
		CurrentTrack = TMNext_TrackBrowser_State.Tracks[_TrackKey];
	}
	TrackUid = CurrentTrack.Uid;
	if (TMNext_TrackBrowser_State.SelectedTracks.existskey(TrackUid)) {
		TMNext_TrackBrowser_State.SelectedTracks.removekey(TrackUid);
		IsSelected = False;
	}	else {
		TMNext_TrackBrowser_State.SelectedTracks[TrackUid] = CurrentTrack;
		IsSelected = True;
	}
	UpdateSelectedTrack(_This, _Frame_Track, IsSelected);
	CheckButtonSelectAllTracks(_This);
}

Void SelectTrack(CMlScript _This, Integer _TrackKey, CMlFrame _Frame_Track, CampaignStruct::LibCampaignStruct_K_Map _TrackInfo) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare HasPermission = False;
	declare PermissionMessage = "";
	if (TMNext_TrackBrowser_State.Settings.IsBrowsingForEdition) {
		if (_TrackInfo.CreatedWithSimpleEditor) {
			HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_OpenSimpleMapEditor);
			if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_OpenSimpleMapEditor);
		} else {
			HasPermission = UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_OpenAdvancedMapEditor);
			if (!HasPermission) PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_OpenAdvancedMapEditor);
		}
	}
	
	if (TMNext_TrackBrowser_State.Settings.IsBrowsingForEdition && !HasPermission) {
		Router::SetParentPath(_This, RoutePaths::C_Path_ClubEditionInfo, Router::GetCurrentRoutePath(_This));
		Router::Push(_This, 
			RoutePaths::C_Path_ClubEditionInfo, 
			[
				RoutePaths::C_Query_Message => PermissionMessage
			],
			False
		);
	} else if (TMNext_TrackBrowser_State.Settings.MultiSelect) {
		AddTrackToSelection(_This, _TrackKey, _Frame_Track);
	} else {
		TMNext_TrackBrowser_State.PendingEvents.add(K_Event{
			Type = C_Event_Select,
			Track = _TrackInfo
		});
	}
}

Void OpenPopUp_DeleteLocalTrack(CMlScript _This, Integer _TrackKey) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (TMNext_TrackBrowser_State.MyTracks.LocalTracks.existskey(_TrackKey) && TMNext_TrackBrowser_State.MyTracks.LocalTracks[_TrackKey].SubFolder == "") {
		TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Name = TMNext_TrackBrowser_State.MyTracks.LocalTracks[_TrackKey].TrackInfo.Name;
		TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.FileName = TL::Replace(TMNext_TrackBrowser_State.MyTracks.LocalTracks[_TrackKey].TrackInfo.LocalFileName, "\\", "/");
		TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Uid = TMNext_TrackBrowser_State.MyTracks.LocalTracks[_TrackKey].TrackInfo.Uid;
		TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus = Task::DestroyAndCreate(
			TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus,
			DataFileMgr,
			DataFileMgr.Map_NadeoServices_GetFromUid(MainUser::GetMainUserId(), TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Uid)
		);
	
		PopUpMultiChoice::SetTitle(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, C_DeleteTrackPopUp_Title, False);
		PopUpMultiChoice::SetDescription(_This, 
			TMNext_TrackBrowser_State.Controls.Frame_MultiChoice,
			[
				PopUpMultiChoice::CreateDescriptionPart(TL::Compose(C_DeleteTrackPopUp_Description1, "$<"^Tools::FormatValue(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Name)^"$>"), <130., 15.>, 3., FontManager::C_GameFontRegular, "$t$i", <1., 1., 1.>, False)
			],
			False
		);
		PopUpMultiChoice::SetClosedAfterSelection(TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, True);
		PopUpMultiChoice::SetStylesSecondChoice(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, [ExpendableButton_TMNext::C_Style_SizeExpendable, ExpendableButton_TMNext::C_Style_AlignCenter, ExpendableButton_TMNext::C_Style_ButtonSecondary, ExpendableButton_TMNext::C_Style_ButtonWarning], False);
		PopUpMultiChoice::SetChoices(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, C_DeleteTrackPopUp_Choices, False);
		PopUpMultiChoice::RedrawPopUpMultiChoice(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, False);
		declare Integer PopUpType for TMNext_TrackBrowser_State.Controls.Frame_MultiChoice;
		PopUpType = C_PopUpDeleteTrackIndex;
		PopUpMultiChoice::Open(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice);
	}
}

Void SetLoadingSpinnerPopUp(CMlScript _This, Boolean _IsLoading, Text _Label, Boolean _ForceRedraw) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (_IsLoading)	{
		LoadingSpinner::StartAnimation(_This, TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner_PopUp, _Label);
		PopUpMultiChoice::ResetDescription(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, False);
	} else {
		LoadingSpinner::StopAnimation(_This, TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner_PopUp);
	}
	PopUpMultiChoice::SetForceHideChoices(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, _IsLoading, _ForceRedraw);
	PopUpMultiChoice::LockPopUp(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, _IsLoading, True);
}

Void SetLoadingSpinnerPopUp(CMlScript _This, Boolean _IsLoading, Text _Label) {
	SetLoadingSpinnerPopUp(_This, _IsLoading, _Label, True);
}

Void EditUploadLocalTrackPopUp(
	CMlScript _This,
	Boolean _TrackIsValid,
	Boolean _WaitingForTrackData,
	Boolean _TrackAlreadyUploaded,
	Boolean _TrackUploadedByMe, 
	Boolean _NewUploadComplete,
	Text _NewUploadError
) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	declare Text Title = C_UploadTrackPopUp_Title1;
	declare Text[Integer] Choices = C_UploadTrackPopUp_Choices;
	declare Text Description1 = C_UploadTrackPopUp_Description1;
	declare Text Description2 = C_UploadTrackPopUp_Description2;
	declare Vec3 ColorDescription2 = <1., 1., 1.>;
	declare PopUpMultiChoice::K_DescriptionPart[] Description;

	if (_NewUploadComplete) {
		if (_NewUploadError != "") {
			Title = C_UploadTrackPopUp_Title4;
			Description1 = C_UploadTrackPopUp_Description11;
			Description2 = TL::Compose( C_UploadTrackPopUp_Description12, _NewUploadError);
			ColorDescription2 = ColorPalette::C_Color_Vec3_ErrorRed;
			Choices.removekey(C_UploadTrackPopUp_ChoiceIndex_Upload);
		} else {
			Title = C_UploadTrackPopUp_Title3;
			Description1 = C_UploadTrackPopUp_Description9;
			Description2 = C_UploadTrackPopUp_Description10;
			ColorDescription2 = ColorPalette::C_Color_Vec3_GreenOne;
			Choices.removekey(C_UploadTrackPopUp_ChoiceIndex_Upload);
		}
	} else {
		if (_TrackIsValid && !_WaitingForTrackData) {
			if (_TrackAlreadyUploaded) {
				Title = C_UploadTrackPopUp_Title2;
				if (_TrackUploadedByMe) {
					Description1 = C_UploadTrackPopUp_Description3;
					Description2 = C_UploadTrackPopUp_Description4;
					ColorDescription2 = ColorPalette::C_Color_Vec3_GreenOne;
				} else {
					Description1 = C_UploadTrackPopUp_Description7;
					Description2 = C_UploadTrackPopUp_Description8;
					Choices.removekey(C_UploadTrackPopUp_ChoiceIndex_Upload);
				}
			}
		} else {
			Description1 = C_UploadTrackPopUp_Description5;
			Description2 = C_UploadTrackPopUp_Description6;
			ColorDescription2 = ColorPalette::C_Color_Vec3_GreenOne;
			Choices.removekey(C_UploadTrackPopUp_ChoiceIndex_Upload);
		}
	}

	Description = [
		PopUpMultiChoice::CreateDescriptionPart(TL::Compose(Description1, "$<"^Tools::FormatValue(TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Name)^"$>"), <130., 15.>, 3., FontManager::C_GameFontRegular, "$t$i", <1., 1., 1.>, False),
		PopUpMultiChoice::CreateDescriptionPart(Description2, <130., 10.>, 3., FontManager::C_GameFontSemiBold, "$t$i", ColorDescription2, False)
	];

	PopUpMultiChoice::SetTitle(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, Title, False);
	PopUpMultiChoice::SetDescription(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, Description, False);
	PopUpMultiChoice::SetChoices(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, Choices, False);
	SetLoadingSpinnerPopUp(_This, _WaitingForTrackData, C_Text_CheckingTrackOnline, False);
	PopUpMultiChoice::RedrawPopUpMultiChoice(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, False);
}

Void OpenPopUp_UploadLocalTrack(CMlScript _This, Integer _TrackKey) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (TMNext_TrackBrowser_State.MyTracks.LocalTracks.existskey(_TrackKey) && TMNext_TrackBrowser_State.MyTracks.LocalTracks[_TrackKey].SubFolder == "") {
		TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Name = TMNext_TrackBrowser_State.MyTracks.LocalTracks[_TrackKey].TrackInfo.Name;
		TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Uid = TMNext_TrackBrowser_State.MyTracks.LocalTracks[_TrackKey].TrackInfo.Uid;		
		PopUpMultiChoice::SetStylesSecondChoice(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, [ExpendableButton_TMNext::C_Style_SizeExpendable, ExpendableButton_TMNext::C_Style_AlignCenter, ExpendableButton_TMNext::C_Style_ButtonSecondary], False);
		PopUpMultiChoice::SetClosedAfterSelection(TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, False);
		
		if (TMNext_TrackBrowser_State.MyTracks.LocalTracks[_TrackKey].TrackInfo.IsPlayable) {
			EditUploadLocalTrackPopUp(_This, True, True, False, False, False, "");
			TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus = Task::DestroyAndCreate(
				TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus,
				DataFileMgr,
				DataFileMgr.Map_NadeoServices_GetFromUid(MainUser::GetMainUserId(), TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Uid)
			);
		} else {
			EditUploadLocalTrackPopUp(_This, False, False, False, False, False, "");
		}
		declare Integer PopUpType for TMNext_TrackBrowser_State.Controls.Frame_MultiChoice;
		PopUpType = C_PopUpUploadTrackIndex;
		PopUpMultiChoice::Open(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice);
	}
}

Void OpenPopUp_RemoveFavoriteTrack(CMlScript _This, Integer _TrackKey) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (TMNext_TrackBrowser_State.Tracks.existskey(_TrackKey)) {
		TMNext_TrackBrowser_State.Favorites.RemoveTrack.Name = TMNext_TrackBrowser_State.Tracks[_TrackKey].Name;
		TMNext_TrackBrowser_State.Favorites.RemoveTrack.Uid = TMNext_TrackBrowser_State.Tracks[_TrackKey].Uid;
	
		PopUpMultiChoice::SetTitle(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, C_RemoveFavoriteMapPopUp_Title, False);
		PopUpMultiChoice::SetDescription(_This, 
			TMNext_TrackBrowser_State.Controls.Frame_MultiChoice,
			[
				PopUpMultiChoice::CreateDescriptionPart(TL::Compose(C_RemoveFavoriteMapPopUp_Description1, "$<"^Tools::FormatValue(TMNext_TrackBrowser_State.Favorites.RemoveTrack.Name)^"$>"), <130., 15.>, 3., FontManager::C_GameFontRegular, "$t$i", <1., 1., 1.>, False),
				PopUpMultiChoice::CreateDescriptionPart(C_RemoveFavoriteMapPopUp_Description2, <130., 10.>, 3., FontManager::C_GameFontSemiBold, "$t$i", ColorPalette::C_Color_Vec3_GreenOne, False)
			],
			False
		);
		PopUpMultiChoice::SetClosedAfterSelection(TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, True);
		PopUpMultiChoice::SetStylesSecondChoice(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, [ExpendableButton_TMNext::C_Style_SizeExpendable, ExpendableButton_TMNext::C_Style_AlignCenter, ExpendableButton_TMNext::C_Style_ButtonSecondary, ExpendableButton_TMNext::C_Style_ButtonWarning], False);
		PopUpMultiChoice::SetChoices(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, C_RemoveFavoriteMapPopUp_Choices, False);
		PopUpMultiChoice::RedrawPopUpMultiChoice(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice, False);
		declare Integer PopUpType for TMNext_TrackBrowser_State.Controls.Frame_MultiChoice;
		PopUpType = C_PopUpRemoveFavoriteTrackIndex;
		PopUpMultiChoice::Open(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice);
	}
}

Void AddOrRemoveFocusedTrackToFavorites(CMlScript _This, Integer _TrackKey) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	if (TMNext_TrackBrowser_State.Tracks.existskey(_TrackKey) && Now > TMNext_TrackBrowser_State.TracksFavoriteStatus.LastAddOrRemoveRequestTime + C_FavoriteTrackRequestCooldown) {
		TMNext_TrackBrowser_State.TracksFavoriteStatus.CurrentTrackUid = TMNext_TrackBrowser_State.Tracks[_TrackKey].Uid;
		TMNext_TrackBrowser_State.TracksFavoriteStatus.CurrentTrackName = TMNext_TrackBrowser_State.Tracks[_TrackKey].Name;
		TMNext_TrackBrowser_State.TracksFavoriteStatus.LastAddOrRemoveRequestTime = Now;
		if (TMNext_TrackBrowser_State.TracksFavoriteStatus.KnownedFavoritesTracksUids.exists(TMNext_TrackBrowser_State.TracksFavoriteStatus.CurrentTrackUid)) {
			MapStore::Action_RemoveMapFromFavorites(_This, TMNext_TrackBrowser_State.TracksFavoriteStatus.CurrentTrackUid);
		} else {
			MapStore::Action_AddMapToFavorites(_This, TMNext_TrackBrowser_State.TracksFavoriteStatus.CurrentTrackUid);
		}
	}
}

Void ShowError(CMlScript _This, Text _ErrorMessage) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State.Controls.Label_Error.Value = _ErrorMessage;
	Tools::FitLabelValue(TMNext_TrackBrowser_State.Controls.Label_Error, 4., 2., 0.25);
}

Boolean Private_IsScrollTracksDisplayed(Integer _TabIndex, Integer _Section) {
	return (
		_TabIndex == C_TabIndex_Favorites ||
		_Section == C_Section_LocalTracks ||
		_Section == C_Section_OnlineTracks ||
		_Section == C_Section_SelectedOfficialCampaign ||
		_Section == C_Section_SelectedMonthly ||
		_Section == C_Section_SelectedRoyal ||
		_Section == C_Section_SelectedClubCampaign
	);
}

K_Event[] GetPendingEvents(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	return TMNext_TrackBrowser_State.PendingEvents;
}

Void MainInit(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State = C_State_Null;
}

Void MainStart(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	TMNext_TrackBrowser_State = K_State {
		CurrentTabIndex = C_TabIndex_None,
		CurrentSection = C_Section_None,
		Tracks = [],
		SelectedTracks = [],
		MyTracks = K_MyTracks {
			NeedRefresh = False,
			LocalTracks = [],
			CurrentPath = "",
			CurrentParentPath = "",
			FocusParentFolder = False,
			LastFolderSelected_Keys = [],
			Task_GetLocalTracks = Task::GetEmptyTask(),
			Task_GetOnlineTracks = Task::GetEmptyTask(),
			Task_CheckTrackUploadStatus = Task::GetEmptyTask(),
			DeleteLocalTrack = K_DeleteTrack {
				Task = Task::GetEmptyTask(),
				Name = "",
				FileName = "",
				Uid = ""
			},
			UploadLocalTrack = K_UploadTrack {
				Task = Task::GetEmptyTask(),
				Name = "",
				Uid = ""
			}
		},
		Favorites = K_Favorites {
			IsLoadingTracks = False,
			RemoveTrack = K_RemoveTrack {
				Name = "",
				Uid = ""
			}
		},
		Official = K_Official {
			Campaigns = [],
			IsLoadingCampaigns = False,
			IsLoadingTracks = False,
			CampaignLineSelectedKey = -1,
			CampaignColumnFocusKey = 0,
			LastScrollCampaignFocus = Null,
			FocusParentCampaign = False,
			Monthlies = [],
			IsLoadingMonthly = False,
			MonthlyColumnFocusKey = 0,
			LastScrollMonthlyFocus = Null,
			ScrollMonthlyOffset = 0,
			CurrentPageMonthly = -1,
			FocusParentMonthly = False,
			MonthlyLineSelectedKey = -1,
			Royals = [],
			IsLoadingRoyal = False,
			RoyalColumnFocusKey = 0,
			LastScrollRoyalFocus = Null,
			ScrollRoyalOffset = 0,
			CurrentPageRoyal = -1,
			FocusParentRoyal = False,
			RoyalLineSelectedKey = -1,
			CurrentMonthDays = []
		},
		Clubs = K_Clubs {
			Clubs = [],
			IsLoadingClubs = False,
			SelectedClub = ClubStruct::LibStructuresClub_K_Club {},
			IsLoadingCampaigns = False,
			SelectedCampaigns = [],
			FocusParentClub = False,
			SelectedClubKey = -1,
			IsLoadingCampaignTracks = False,
			FocusParentCampaign = False,
			SelectedCampaignKey = -1
		},
		SortingTypes = K_Sortings {
			IsFlatten = False,
			IsSortingByNameElseByDate = False,
			IsSortingFromAscendingOrder = False
		},
		Settings = K_Settings {
			ChosenOpeningTab = C_TabIndex_MyTracks,
			OpenOnLastTab = True,
			MultiSelect = False,
			ShowOnlyMyLocalTracks = False,
			IsBrowsingForEdition = False,
			ForceShowOfficialTracks = False
		},
		Filters = K_Filters {
			ShowOnlyUserTracks = False,
			ShowOnlyPlayableTracks = False,
			FilterByEnvironment = [EnvironmentInfo::C_Collection_Stadium],
			FilterByMapType = []
		},
		TracksFavoriteStatus = K_TracksFavoriteStatus {
			Request = Http::GetEmptyRequest(),
			CheckRequestTime = -1,
			LastAddOrRemoveRequestTime = -1,
			FirstHeartIconDisplay = False,
			UidsToCheck = [],
			KnownedFavoritesTracksUids = [],
			CurrentTrackUid = "",
			CurrentTrackName = ""
		},
		CanViewUGC = False
	};
	
	TMNext_TrackBrowser_State.Controls.Frame_Global = (_This.Page.GetFirstChild(C_Id_FrameGlobal) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_Tabs = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameTabs) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Label_SubTitle = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_LabelSubtitle) as CMlLabel);
	TMNext_TrackBrowser_State.Controls.Label_SectionTitle = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_LabelSectionTitle) as CMlLabel);
	TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameLoadingSpinner) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameScrollTracks) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_AddTracks = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_ButtonAddSelectedTracks) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.ButtonIcon_AddTracks = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_ButtonIconAddTracks) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_Back = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_ButtonBack) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Label_NoTracks = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_LabelNoTracks) as CMlLabel);
	TMNext_TrackBrowser_State.Controls.Label_NoTracksDetails = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_LabelNoTracksDetails) as CMlLabel);
	TMNext_TrackBrowser_State.Controls.Label_Error = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_LabelError) as CMlLabel);
	TMNext_TrackBrowser_State.Controls.Frame_MyTracks = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameMyTracks) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_MyLocalTracks = (TMNext_TrackBrowser_State.Controls.Frame_MyTracks.GetFirstChild(C_Id_ButtonMyLocalTracks) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_MyOnlineTracks = (TMNext_TrackBrowser_State.Controls.Frame_MyTracks.GetFirstChild(C_Id_ButtonMyOnlineTracks) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_Official = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameOfficial) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_OfficialButtons = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameButtons) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_OfficialCampaigns = (TMNext_TrackBrowser_State.Controls.Frame_OfficialButtons.GetFirstChild(C_Id_ButtonOfficialCampaigns) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_TOTD = (TMNext_TrackBrowser_State.Controls.Frame_OfficialButtons.GetFirstChild(C_Id_ButtonTOTD) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Label_DayTOTD = (TMNext_TrackBrowser_State.Controls.Frame_OfficialButtons.GetFirstChild(C_Id_LabelTOTDDay) as CMlLabel);
	TMNext_TrackBrowser_State.Controls.Frame_Royal = (TMNext_TrackBrowser_State.Controls.Frame_OfficialButtons.GetFirstChild(C_Id_FrameRoyal) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_Royal = (TMNext_TrackBrowser_State.Controls.Frame_OfficialButtons.GetFirstChild(C_Id_ButtonRoyal) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_RoyalVictory = (TMNext_TrackBrowser_State.Controls.Frame_OfficialButtons.GetFirstChild(C_Id_FrameRoyalVictory) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_Scroll_Official_Campaigns = (TMNext_TrackBrowser_State.Controls.Frame_Official.GetFirstChild(C_Id_FrameScrollOfficialCampaigns) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD = (TMNext_TrackBrowser_State.Controls.Frame_Official.GetFirstChild(C_Id_FrameScrollTOTD) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_Clubs = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameClubs) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs = (TMNext_TrackBrowser_State.Controls.Frame_Clubs.GetFirstChild(C_Id_FrameScrollClubs) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_Options = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameOptions) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_SelectAll = (TMNext_TrackBrowser_State.Controls.Frame_Options.GetFirstChild(C_Id_ButtonSelectAllTracks) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.ButtonIcon_SelectAll = (TMNext_TrackBrowser_State.Controls.Frame_Options.GetFirstChild(C_Id_ButtonIconSelectAll) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_Flatten = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_ButtonFlatten) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_Refresh = (TMNext_TrackBrowser_State.Controls.Frame_Options.GetFirstChild(C_Id_ButtonRefresh) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_OpenExplorer = (TMNext_TrackBrowser_State.Controls.Frame_Options.GetFirstChild(C_Id_ButtonOpenExplorer) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_Sort = (TMNext_TrackBrowser_State.Controls.Frame_Options.GetFirstChild(C_Id_ButtonSort) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.ButtonIcon_Sort = (TMNext_TrackBrowser_State.Controls.Frame_Options.GetFirstChild(C_Id_ButtonIconSort) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_SortPopUp = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameSortPopUp) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_SortOption1 = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_SortOption1) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Button_SortOption2 = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_SortOption2) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_MultiChoice = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameMultichoice) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_SpaceDisk = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameSpaceDisk) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Frame_SpaceDiskLeft = (TMNext_TrackBrowser_State.Controls.Frame_SpaceDisk.GetFirstChild(C_Id_FrameSpaceLeftOnDisk) as CMlFrame);
	TMNext_TrackBrowser_State.Controls.Label_SpaceDiskLeft = (TMNext_TrackBrowser_State.Controls.Frame_SpaceDisk.GetFirstChild(C_Id_LabelSpaceLeftOnDisk) as CMlLabel);
	TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner_PopUp = (TMNext_TrackBrowser_State.Controls.Frame_Global.GetFirstChild(C_Id_FrameLoadingSpinnerPopUpMultichoice) as CMlFrame);

	TMNext_TrackBrowser_State.MyTracks.LastButtonFocused = TMNext_TrackBrowser_State.Controls.Button_MyLocalTracks;
	TMNext_TrackBrowser_State.Official.LastButtonFocused = TMNext_TrackBrowser_State.Controls.Button_OfficialCampaigns;
	TMNext_TrackBrowser_State.LastOptionButtonFocused = TMNext_TrackBrowser_State.Controls.Button_Sort;

	Checkbox::Check(_This, TMNext_TrackBrowser_State.Controls.Button_Flatten, TMNext_TrackBrowser_State.SortingTypes.IsFlatten);
	Checkbox::Check(_This, TMNext_TrackBrowser_State.Controls.Button_SortOption1, TMNext_TrackBrowser_State.SortingTypes.IsSortingByNameElseByDate);
	Checkbox::Check(_This, TMNext_TrackBrowser_State.Controls.Button_SortOption2, TMNext_TrackBrowser_State.SortingTypes.IsSortingFromAscendingOrder);
	InitializeBrowser(_This);
}

Void MainLoop(CMlScript _This) {
	declare K_State TMNext_TrackBrowser_State for _This.Page = C_State_Null;
	
	TMNext_TrackBrowser_State.PendingEvents = TMNext_TrackBrowser_State.DelayedPendingEvents;
	TMNext_TrackBrowser_State.DelayedPendingEvents = [];

	if (TMNext_TrackBrowser_State.Controls.Frame_Global.Visible) {
	
		// Space disk left for local tracks update
		if (TMNext_TrackBrowser_State.Controls.Frame_SpaceDisk.Visible && TMNext_TrackBrowser_State.SpaceLeftOnDiskInKB != DataFileMgr.UserSave_AvailableSpace) {
			TMNext_TrackBrowser_State.SpaceLeftOnDiskInKB = DataFileMgr.UserSave_AvailableSpace;
	
			declare Integer SpaceUsedInMB = ML::Max(0, C_MaxSpaceAvailableOnConsoleInMB - ML::TruncInteger(TMNext_TrackBrowser_State.SpaceLeftOnDiskInKB / 1024.));
			TMNext_TrackBrowser_State.Controls.Label_SpaceDiskLeft.Value = TL::Compose(C_Text_SpaceLeftOnDisk, ""^SpaceUsedInMB, ""^C_MaxSpaceAvailableOnConsoleInMB);
	
			declare Real Ratio = (SpaceUsedInMB * 1.0) / (C_MaxSpaceAvailableOnConsoleInMB * 1.0);
			ExpendableAsset::SetWidth(_This, TMNext_TrackBrowser_State.Controls.Frame_SpaceDiskLeft, Ratio * C_SpaceOnDiskAssetWidth);
			TMNext_TrackBrowser_State.Controls.Frame_SpaceDiskLeft.Visible = Ratio > 0.;
		}
	
		// Check current tracks favorite status
		if (TMNext_TrackBrowser_State.TracksFavoriteStatus.CheckRequestTime != -1 && Now > TMNext_TrackBrowser_State.TracksFavoriteStatus.CheckRequestTime) {
			TMNext_TrackBrowser_State.TracksFavoriteStatus.CheckRequestTime = -1;
			TMNext_TrackBrowser_State.TracksFavoriteStatus.Request = Http::DestroyAndCreate(
				TMNext_TrackBrowser_State.TracksFavoriteStatus.Request,
				MapAPI::GetMaps(TMNext_TrackBrowser_State.TracksFavoriteStatus.UidsToCheck, True)
			);
		}
	
		// Check UGC privilege
		if (
			!Privileges::Check_IsComplete(TMNext_TrackBrowser_State.UGCPrivilegeCheck) &&
			!LoadingSpinner::IsLoading(TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner)
		) {
			TMNext_TrackBrowser_State.UGCPrivilegeCheck = Privileges::Check_Update(TMNext_TrackBrowser_State.UGCPrivilegeCheck);
			if (Privileges::Check_IsComplete(TMNext_TrackBrowser_State.UGCPrivilegeCheck)) {
				TMNext_TrackBrowser_State.CanViewUGC = Privileges::Check_HasPrivilege(TMNext_TrackBrowser_State.UGCPrivilegeCheck);
				TMNext_TrackBrowser_State.UGCPrivilegeCheck = Privileges::Check_Destroy(TMNext_TrackBrowser_State.UGCPrivilegeCheck);
				UpdateNavigationTabs(_This);
				if (!NavigationTabs::IsAvailableTab(TMNext_TrackBrowser_State.Controls.Frame_Tabs, TMNext_TrackBrowser_State.CurrentTabIndex)) {
					if (TMNext_TrackBrowser_State.Settings.ShowOnlyMyLocalTracks) {
						GoToTabAndSection(_This, C_TabIndex_MyTracks, C_Section_LocalTracks);
					} else {
						GoToTab(_This, C_TabIndex_MyTracks);
					}
				} else {
					Private_UpateTOTDAndRoyalAccess(_This, True);
				}
			}
		}
	
		/* Events PopUpBackground */
		foreach (Event in PopUpBackground::GetPendingEvents(_This)) {
			if (
				Event.Type == PopUpBackground::C_EventType_Close &&
				Event.PopUpBackground != Null &&
				Event.PopUpBackground.ControlId == C_Id_PopUpBackground &&
				!LoadingSpinner::IsLoading(TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner)
			) {
				Display(_This, False);
			}
		}
	
		/* Events Navigation */
		foreach (Event in Navigation::GetPendingEvents(_This)) {
			if (Navigation::IsEventFromGroup(_This, Event, C_NavGroupName)) {
				switch (Event.Type) {
					case Navigation::C_EventType_NavigateInput: {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							Select(_This, Event.To);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							Cancel(_This);
						} else {
							Focus(_This, Event.From, Event.To);
						}
					}
					case Navigation::C_EventType_NavigateMouse: {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							Select(_This, Event.To);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							Focus(_This, Event.From, Event.To);
						}
					}
				}
			} else if (Navigation::IsEventFromGroup(_This, Event, C_NavGroupGlobal)) {
				if (Event.Input == CMlScriptEvent::EMenuNavAction::Action4 && TMNext_TrackBrowser_State.Controls.Button_Sort.Visible) {
					Select(_This, TMNext_TrackBrowser_State.Controls.Button_Sort);
				} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Action3 && TMNext_TrackBrowser_State.Controls.Button_SelectAll.Visible) {
					if (Now > TMNext_TrackBrowser_State.LastSelectAllInputTime + C_DelayBetweenInput) {
						Select(_This, TMNext_TrackBrowser_State.Controls.Button_SelectAll);
						TMNext_TrackBrowser_State.LastSelectAllInputTime = Now;
					}
				} else if (Event.Input == CMlScriptEvent::EMenuNavAction::AppMenu && TMNext_TrackBrowser_State.Controls.Button_AddTracks.Visible) {
					Select(_This, TMNext_TrackBrowser_State.Controls.Button_AddTracks);
				}
			} else if (Navigation::IsEventFromGroup(_This, Event, PopUpMultiChoice::C_NavGroup)) {
				switch (Event.Type) {
					case Navigation::C_EventType_NavigateInput: {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							Select(_This, Event.To);
						} else if ( // Can toggle the switch with right and left input
							(Event.Input == CMlScriptEvent::EMenuNavAction::Left || Event.Input == CMlScriptEvent::EMenuNavAction::Right) &&
							(Event.From.ControlId == TMNext_TrackBrowser_State.Controls.Button_SortOption1.ControlId || Event.From.ControlId == TMNext_TrackBrowser_State.Controls.Button_SortOption2.ControlId)					
						) {						
							if (
								(Event.Input == CMlScriptEvent::EMenuNavAction::Left && Checkbox::IsChecked(Event.From)) ||
								(Event.Input == CMlScriptEvent::EMenuNavAction::Right && !Checkbox::IsChecked(Event.From))
							) {
								Select(_This, Event.From);
							}
						}
					}
					case Navigation::C_EventType_NavigateMouse: {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							Select(_This, Event.To);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							Focus(_This, Event.From, Event.To);
						}
					}
				}
			}
		}
	
		/* Pop up multi choice events */
		foreach (Event in PopUpMultiChoice::GetPendingEvents(_This)) {
			if (Event.PopUpMultiChoice != Null) {
				if (Event.PopUpMultiChoice.Id == TMNext_TrackBrowser_State.Controls.Frame_SortPopUp.Id) {
					switch (Event.Type) {
						case PopUpMultiChoice::C_EventType_Select: {
							if (Event.SelectedIndex == C_SortTracksPopUp_ChoiceIndex_Ok) {
								PopUpMultiChoice::Close(_This, TMNext_TrackBrowser_State.Controls.Frame_SortPopUp, True);
							}
						}
						case PopUpMultiChoice::C_EventType_Display: {
							LockBrowser(_This, TMNext_TrackBrowser_State.Controls.Frame_SortPopUp.Visible);
							if (
								!TMNext_TrackBrowser_State.Controls.Frame_SortPopUp.Visible &&
								(
									TMNext_TrackBrowser_State.SortingTypes.IsSortingByNameElseByDate != TMNext_TrackBrowser_State.LastIsSortingByNameElseByDate ||
									TMNext_TrackBrowser_State.SortingTypes.IsSortingFromAscendingOrder != TMNext_TrackBrowser_State.LastIsSortingFromAscendingOrder
								)
							) {
								TMNext_TrackBrowser_State.LastIsSortingByNameElseByDate = TMNext_TrackBrowser_State.SortingTypes.IsSortingByNameElseByDate;
								TMNext_TrackBrowser_State.LastIsSortingFromAscendingOrder = TMNext_TrackBrowser_State.SortingTypes.IsSortingFromAscendingOrder;
								Refresh(_This);
							}
						}
					}
				} else if (Event.PopUpMultiChoice.Id == TMNext_TrackBrowser_State.Controls.Frame_MultiChoice.Id) {
					switch (Event.Type) {
						case PopUpMultiChoice::C_EventType_Select: {
							declare Integer PopUpType for TMNext_TrackBrowser_State.Controls.Frame_MultiChoice;
							if (TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks) {
								if (Event.SelectedIndex == C_DeleteTrackPopUp_ChoiceIndex_Delete && PopUpType == C_PopUpDeleteTrackIndex && TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.FileName != "") {
									TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task = Task::DestroyAndCreate(
										TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task,
										DataFileMgr,
										DataFileMgr.UserSave_DeleteFile("Maps/"^TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.FileName)
									);
								} else if (PopUpType == C_PopUpUploadTrackIndex) {
									if (Event.SelectedIndex == C_UploadTrackPopUp_ChoiceIndex_Upload && TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Uid != "") {
										TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task = Task::DestroyAndCreate(
											TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task,
											DataFileMgr,
											DataFileMgr.Map_NadeoServices_Register(MainUser::GetMainUserId(), TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Uid)
										);
										SetLoadingSpinnerPopUp(_This, True, C_Text_UploadingTrackOnline);
									} else if (Event.SelectedIndex == C_UploadTrackPopUp_ChoiceIndex_Back) {
										PopUpMultiChoice::Close(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice);
									}
								}
							} else if (
								Event.SelectedIndex == C_RemoveFavoriteMapPopUp_ChoiceIndex_Remove &&
								TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites &&
								PopUpType == C_PopUpRemoveFavoriteTrackIndex &&
								TMNext_TrackBrowser_State.Favorites.RemoveTrack.Uid != ""
							) {
								MapStore::Action_RemoveMapFromFavorites(_This, TMNext_TrackBrowser_State.Favorites.RemoveTrack.Uid);									
							}
						}
						case PopUpMultiChoice::C_EventType_Display: {
							if (!TMNext_TrackBrowser_State.Controls.Frame_MultiChoice.Visible && LoadingSpinner::IsLoading(TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner_PopUp)) {
								LoadingSpinner::SetIsLoading(_This, TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner_PopUp, False);
							}
							LockBrowser(_This, TMNext_TrackBrowser_State.Controls.Frame_MultiChoice.Visible);
						}
					}
				}
			}
		}
	
		/* Scroll events */
		foreach (Event in Scroll::GetPendingEvents(_This)) {
			if (Event.Scroll != Null) {
				switch (Event.Scroll.Id) {
					case TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks.Id: {
						switch (Event.Type) {
							case Scroll::C_EventType_Cancel: if (!LoadingSpinner::IsLoading(TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner)) Cancel(_This);
							case Scroll::C_EventType_Select: {
								// Special behavior for Local Tracks due to sub folders
								if (TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks) {
									if (TMNext_TrackBrowser_State.MyTracks.LocalTracks.existskey(Event.ToKey)) {
										if (TMNext_TrackBrowser_State.MyTracks.LocalTracks[Event.ToKey].SubFolder != "") {
											UpdateLocalTracks(_This, TMNext_TrackBrowser_State.MyTracks.LocalTracks[Event.ToKey].SubFolder);
											TMNext_TrackBrowser_State.MyTracks.LastFolderSelected_Keys.add(Event.ToKey);
										} else {
											if (TMNext_TrackBrowser_State.MyTracks.LocalTracks.existskey(Event.ToKey)) {
												SelectTrack(_This, Event.ToKey, Event.To, TMNext_TrackBrowser_State.MyTracks.LocalTracks[Event.ToKey].TrackInfo);
											}
										}
									}
								} else {
									if (TMNext_TrackBrowser_State.Tracks.existskey(Event.ToKey)) {
										SelectTrack(_This, Event.ToKey, Event.To, TMNext_TrackBrowser_State.Tracks[Event.ToKey]);
									}					
								}
							}
							case Scroll::C_EventType_PagerUpdate: {
								switch (TMNext_TrackBrowser_State.CurrentSection) {
									case C_Section_None: {
										if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites) UpdateFavoriteTracks(_This, Event.PagerOffset, Event.PagerCount);
									}
								}
							}
							case Scroll::C_EventType_Update: {
								// Special behavior for Local Tracks due to sub folders
								if (TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks) {
									foreach (Key => Frame_Element in Event.ElementsVisible) {
										declare Integer TrackScrollKey for Frame_Element;
										TrackScrollKey = Key;
										if (TMNext_TrackBrowser_State.MyTracks.LocalTracks.existskey(Key)) {
											if (TMNext_TrackBrowser_State.MyTracks.LocalTracks[Key].SubFolder != "") {
												ShowTrack(_This, Frame_Element, TMNext_TrackBrowser_State.MyTracks.LocalTracks[Key].TrackInfo, True, TMNext_TrackBrowser_State.MyTracks.LocalTracks[Key].SubFolder, "");
											} else {
												ShowTrack(_This, Frame_Element, TMNext_TrackBrowser_State.MyTracks.LocalTracks[Key].TrackInfo);
											}
										}
									}
									foreach (Key => Frame_Element in Event.ElementsHidden) {
										declare Integer TrackScrollKey for Frame_Element;
										TrackScrollKey = -1;
										HideTrack(Frame_Element);
									}
								} else {
									foreach (Key => Frame_Element in Event.ElementsVisible) {
										declare Integer TrackScrollKey for Frame_Element;
										TrackScrollKey = Key;
										if (TMNext_TrackBrowser_State.Tracks.existskey(Key)) {
											if (TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedMonthly || TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedRoyal) {
												declare Text MonthDay = TL::FormatInteger(TMNext_TrackBrowser_State.Official.CurrentMonthDays[Key], 2);
												ShowTrack(_This, Frame_Element, TMNext_TrackBrowser_State.Tracks[Key], MonthDay);
											} else {
												ShowTrack(_This, Frame_Element, TMNext_TrackBrowser_State.Tracks[Key]);
											}
										} else {
											ShowTrackLoading(_This, Frame_Element);
										}
									}
									foreach (Key => Frame_Element in Event.ElementsHidden) {
										declare Integer TrackScrollKey for Frame_Element;
										TrackScrollKey = -1;
										HideTrack(Frame_Element);
									}
								}
								TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks.Visible = Event.ElementsVisible.count > 0;
								LockScroll(TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, Event.ElementsVisible.count <= 0);
								UpdateNoTracksMessage(_This, Event.ElementsVisible.count);
								if (Event.ElementsVisible.count > 0 && TMNext_TrackBrowser_State.Settings.MultiSelect && TMNext_TrackBrowser_State.Controls.Button_SelectAll.Visible) {
									CheckButtonSelectAllTracks(_This);
								}
								if (Private_IsScrollTracksDisplayed(TMNext_TrackBrowser_State.CurrentTabIndex, TMNext_TrackBrowser_State.CurrentSection)) {
									if (Event.ElementsVisible.count > 0) {
										Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks);
									} else if (TMNext_TrackBrowser_State.Controls.Label_NoTracks.Visible) {
										Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
									}
								}
							}
							case Scroll::C_EventType_Focus: {
								if (Event.From != Null) FocusTrack(_This, Event.From, False);
								if (Event.To != Null) {
									if (Event.IsMouse && !Scroll::IsFocused(Event.Scroll)) {
										Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), Event.Scroll);
									}
									if (Scroll::IsFocused(Event.Scroll)) {
										FocusTrack(_This, Event.To, True);
									}
								}
							}
							case Scroll::C_EventType_ReachLimit: {
								if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Down) {
									if (TMNext_TrackBrowser_State.Settings.MultiSelect && TMNext_TrackBrowser_State.Controls.Button_AddTracks.Visible) Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_AddTracks);
									else Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
								} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Left) {
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
								} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Up && TMNext_TrackBrowser_State.Controls.Frame_Options.Visible) {
									if (TMNext_TrackBrowser_State.LastOptionButtonFocused.Visible) {
										Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.LastOptionButtonFocused);
									} else {
										foreach (Control in TMNext_TrackBrowser_State.Controls.Frame_Options.Controls) {
											if (Navigation::IsNavigationControl(Control) && !Navigation::IsLocked(Control)) {
												Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), Control);
											}
										}
									}
								} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Right && TMNext_TrackBrowser_State.Settings.MultiSelect && TMNext_TrackBrowser_State.Controls.Button_AddTracks.Visible) {
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_AddTracks);
								}
							}
							case Scroll::C_EventType_NavAction: {
								if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Action1) {
									if (TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks && !Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task)) {
										OpenPopUp_DeleteLocalTrack(_This, Event.ToKey);
									} else if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites) {
										OpenPopUp_RemoveFavoriteTrack(_This, Event.ToKey);
									}
								} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Action2) {
									if (
										TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks &&
										!Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus) &&
										!Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task)
									) {
										OpenPopUp_UploadLocalTrack(_This, Event.ToKey);
									} else if (
										TMNext_TrackBrowser_State.CurrentSection != C_Section_None &&
										TMNext_TrackBrowser_State.CurrentSection != C_Section_LocalTracks
									) {
										AddOrRemoveFocusedTrackToFavorites(_This, Event.ToKey);
									}
								}
							}
						}
					}
					case TMNext_TrackBrowser_State.Controls.Frame_Scroll_Official_Campaigns.Id: {
						switch (Event.Type) {
							case Scroll::C_EventType_Cancel: if (!LoadingSpinner::IsLoading(TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner)) Cancel(_This);
							case Scroll::C_EventType_Select: SelectOfficialCampaign(_This, Event.ToKey);
							case Scroll::C_EventType_Update: {
								foreach (Key => Frame_Element in Event.ElementsVisible) {
									declare Integer CampaignScrollKey for Frame_Element;
									CampaignScrollKey = Key;
									if (TMNext_TrackBrowser_State.Official.Campaigns.existskey(Key)) {
										declare CMlControl[] CampaignFrames = GetLineControls(Frame_Element);
										foreach (I => Element in CampaignFrames) {									
											if (TMNext_TrackBrowser_State.Official.Campaigns[Key].existskey(I)) {
												ShowClubOrCampaign((Element as CMlFrame), TMNext_TrackBrowser_State.Official.Campaigns[Key][I].Name, TMNext_TrackBrowser_State.Official.Campaigns[Key][I].ImageUrl, ""^TMNext_TrackBrowser_State.Official.Campaigns[Key][I].Year, (I == 0));
											} else {
												HideClubOrCampaign(Element as CMlFrame);
											}
										}
									}
								}
								foreach (Key => Frame_Element in Event.ElementsHidden) {
									declare Integer CampaignScrollKey for Frame_Element;
									CampaignScrollKey = Key;
									declare CMlControl[] CampaignFrames = GetLineControls(Frame_Element);
									foreach (I => Element in CampaignFrames) {
										HideClubOrCampaign(Element as CMlFrame, True, (I == 0));
									}
								}
								TMNext_TrackBrowser_State.Controls.Frame_Scroll_Official_Campaigns.Visible = Event.ElementsVisible.count > 0;
								LockScroll(TMNext_TrackBrowser_State.Controls.Frame_Scroll_Official_Campaigns, Event.ElementsVisible.count <= 0);
								if (TMNext_TrackBrowser_State.CurrentSection == C_Section_OfficialCampaigns) UpdateNoTracksMessage(_This, Event.ElementsVisible.count);
								if (Event.ElementsVisible.count > 0) {
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Frame_Scroll_Official_Campaigns);
								} else if (TMNext_TrackBrowser_State.Controls.Label_NoTracks.Visible) {
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
								}
							}
							case Scroll::C_EventType_Focus: {
								if (Event.From != Null) {
									FocusOfficialCampaign(_This, Event.From, False);
								}
								if (Event.To != Null) {
									if (Event.IsMouse && !Scroll::IsFocused(Event.Scroll)) {
										Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), Event.Scroll);
									}
									if (Scroll::IsFocused(Event.Scroll)) {
										FocusOfficialCampaign(_This, Event.To, True);
										TMNext_TrackBrowser_State.Official.LastScrollCampaignFocus = Event.To;
									}
								}
							}
							case Scroll::C_EventType_ReachLimit: {
								if ((Event.NavAction == CMlScriptEvent::EMenuNavAction::Right || Event.NavAction == CMlScriptEvent::EMenuNavAction::Left) && Event.From != Null) {
									FocusOfficialCampaignByInput(_This, Event.NavAction, Event.From);
								} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Down) {
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
								}
							}
						}
					}
					case TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD.Id: {
						switch (Event.Type) {
							case Scroll::C_EventType_Cancel: if (!LoadingSpinner::IsLoading(TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner)) Cancel(_This);
							case Scroll::C_EventType_Select: {
								if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Monthly) SelectMonthly(_This, Event.ToKey);
								else if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal) SelectRoyal(_This, Event.ToKey);
							}
							case Scroll::C_EventType_Update: {
								if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Monthly && TMNext_TrackBrowser_State.Official.CurrentPageMonthly != Event.Page) {
									TMNext_TrackBrowser_State.Official.CurrentPageMonthly = Event.Page;
									declare Integer Length = TMNext_TrackBrowser_State.ManialinkProps.MonthlyPerPage * 3;
									declare Integer Offset = ML::Max(0, TMNext_TrackBrowser_State.Official.CurrentPageMonthly - 2) * TMNext_TrackBrowser_State.ManialinkProps.MonthlyPerPage;
									TMNext_TrackBrowser_State.Official.ScrollMonthlyOffset = ML::Max(0, TMNext_TrackBrowser_State.Official.CurrentPageMonthly - 2) * TMNext_TrackBrowser_State.ManialinkProps.TOTDPerPage;		
									CampaignStore::Action_LoadMonthlyCampaignsList(_This, Offset, Length);
								} else if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal && TMNext_TrackBrowser_State.Official.CurrentPageRoyal != Event.Page) {
									TMNext_TrackBrowser_State.Official.CurrentPageRoyal = Event.Page;
									declare Integer Length = TMNext_TrackBrowser_State.ManialinkProps.MonthlyPerPage * 3;
									declare Integer Offset = ML::Max(0, TMNext_TrackBrowser_State.Official.CurrentPageRoyal - 2) * TMNext_TrackBrowser_State.ManialinkProps.MonthlyPerPage;
									TMNext_TrackBrowser_State.Official.ScrollRoyalOffset = ML::Max(0, TMNext_TrackBrowser_State.Official.CurrentPageRoyal - 2) * TMNext_TrackBrowser_State.ManialinkProps.TOTDPerPage;		
									CampaignStore::Action_LoadRoyalCampaignsList(_This, Offset, Length);
								}
	
								foreach (Key => Frame_Element in Event.ElementsVisible) {
									declare Integer MonthlyScrollKey for Frame_Element;
									MonthlyScrollKey = Key;
									declare CMlControl[] TOTD_Frames = GetLineControls(Frame_Element);
									declare K_MonthlyCampaign[][Integer] CurrentMonthlies = [];
									if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Monthly) {
										CurrentMonthlies = TMNext_TrackBrowser_State.Official.Monthlies;
									} else if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal) {
										CurrentMonthlies = TMNext_TrackBrowser_State.Official.Royals;
									}
									if (CurrentMonthlies.existskey(Key)) {
										foreach (I => Element in TOTD_Frames) {
											if (CurrentMonthlies[Key].existskey(I)) {
												declare Text MonthNumber = TL::FormatInteger(CurrentMonthlies[Key][I].MonthNumber, 2);
												ShowTOTD((Element as CMlFrame), CurrentMonthlies[Key][I].MonthName, MonthNumber, ""^CurrentMonthlies[Key][I].Year, CurrentMonthlies[Key][I].YearFormat, (I == 0));
											} else {
												HideTOTD(Element as CMlFrame, False, False);
											}
										}
									}
								}
								foreach (Key => Frame_Element in Event.ElementsHidden) {
									declare Integer MonthlyScrollKey for Frame_Element;
									MonthlyScrollKey = Key;
									declare CMlControl[] TOTD_Frames = GetLineControls(Frame_Element);
									foreach (I => Element in TOTD_Frames) {
										HideTOTD(Element as CMlFrame, True, (I == 0));
									}
								}
								TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD.Visible = Event.ElementsVisible.count > 0;
								LockScroll(TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD, Event.ElementsVisible.count <= 0);
								if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Monthly || TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal) {
									UpdateNoTracksMessage(_This, Event.ElementsVisible.count);
									if (Event.ElementsVisible.count > 0) {
										Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD);
									} else if (TMNext_TrackBrowser_State.Controls.Label_NoTracks.Visible) {
										Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
									}
								}
							}
							case Scroll::C_EventType_Focus: {
								if (Event.From != Null) {
									FocusMonthly(_This, Event.From, False, TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal);
								}
								if (Event.To != Null) {
									if (Event.IsMouse && !Scroll::IsFocused(Event.Scroll)) {
										Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), Event.Scroll);
									}
									if (Scroll::IsFocused(Event.Scroll)) {
										FocusMonthly(_This, Event.To, True, TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal);
										if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Monthly) TMNext_TrackBrowser_State.Official.LastScrollMonthlyFocus = Event.To;
										else if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal) TMNext_TrackBrowser_State.Official.LastScrollRoyalFocus = Event.To;
									}
								}
							}
							case Scroll::C_EventType_ReachLimit: {
								if ((Event.NavAction == CMlScriptEvent::EMenuNavAction::Right || Event.NavAction == CMlScriptEvent::EMenuNavAction::Left) && Event.From != Null) {
									FocusMonthlyByInput(_This, Event.NavAction, Event.From, TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal);
								} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Down) {
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
								}
							}
						}
					}
					case TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs.Id: {
						switch (Event.Type) {
							case Scroll::C_EventType_Cancel: if (!LoadingSpinner::IsLoading(TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner)) Cancel(_This);
							case Scroll::C_EventType_Select: {
								switch (TMNext_TrackBrowser_State.CurrentSection) {
									case C_Section_None: {
										if (!UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_ViewClub)) {
											Router::SetParentPath(_This, RoutePaths::C_Path_ClubEditionInfo, Router::GetCurrentRoutePath(_This));
											Router::Push(
												_This, 
												RoutePaths::C_Path_ClubEditionInfo, 
												[
													RoutePaths::C_Query_Message => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_ViewClub)
												],
												False
											);
										} else if (TMNext_TrackBrowser_State.Clubs.Clubs.existskey(Event.ToKey)) {
											TMNext_TrackBrowser_State.Clubs.SelectedClub = TMNext_TrackBrowser_State.Clubs.Clubs[Event.ToKey];
											TMNext_TrackBrowser_State.Clubs.SelectedClubKey = Event.ToKey;
											GoToSection(_This, C_Section_SelectedClub);
										}
									}
									case C_Section_SelectedClub: {
										if (TMNext_TrackBrowser_State.Clubs.SelectedCampaigns.existskey(Event.ToKey)) {
											if (!UserStore::HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_JoinClub)) {
												declare PermissionMessage = "";
												if (TMNext_TrackBrowser_State.Settings.IsBrowsingForEdition) {
													PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_EditClubMap);
												} else {
													PermissionMessage = RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayPublicClubCampaign);
												}
												Router::SetParentPath(_This, RoutePaths::C_Path_ClubEditionInfo, Router::GetCurrentRoutePath(_This));
												Router::Push(
													_This, 
													RoutePaths::C_Path_ClubEditionInfo, 
													[
														RoutePaths::C_Query_Message => PermissionMessage
													],
													False
												);
											} else {
												TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey = Event.ToKey;
												GoToSection(_This, C_Section_SelectedClubCampaign);
											}
										}
									}
								}
							}
							case Scroll::C_EventType_PagerUpdate: {
								switch (TMNext_TrackBrowser_State.CurrentSection) {
									case C_Section_None: {
										ClubStore::Action_LoadClubsBrowser(_This, Event.PagerOffset, Event.PagerCount);
									}
									case C_Section_SelectedClub: {
										CampaignStore::Action_LoadClubsCampaigns(_This, TMNext_TrackBrowser_State.Clubs.SelectedClub.Id, Event.PagerOffset, Event.PagerCount);
									}
								}
							}
							case Scroll::C_EventType_Update: {
								foreach (Key => Frame_Element in Event.ElementsVisible) {
									if (TMNext_TrackBrowser_State.CurrentSection == C_Section_None && TMNext_TrackBrowser_State.Clubs.Clubs.existskey(Key)) {
										ShowClubOrCampaign(Frame_Element, TMNext_TrackBrowser_State.Clubs.Clubs[Key].Name, TMNext_TrackBrowser_State.Clubs.Clubs[Key].IconUrl);
									} else if (TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedClub && TMNext_TrackBrowser_State.Clubs.SelectedCampaigns.existskey(Key)) {
										ShowClubOrCampaign(Frame_Element, TMNext_TrackBrowser_State.Clubs.SelectedCampaigns[Key].Name, TMNext_TrackBrowser_State.Clubs.SelectedCampaigns[Key].Media.ButtonBackgroundUrl);
									} else {
										ShowClubOrCampaignLoading(Frame_Element);
									}
								}
								foreach (Key => Frame_Element in Event.ElementsHidden) {
									HideClubOrCampaign(Frame_Element);
								}
	
								TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs.Visible = Event.ElementsVisible.count > 0;
								LockScroll(TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs, Event.ElementsVisible.count <= 0);
								if (
									TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Clubs &&
									(TMNext_TrackBrowser_State.CurrentSection == C_Section_None || TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedClub)
								) {
									UpdateNoTracksMessage(_This, Event.ElementsVisible.count);
								}
								if (Event.ElementsVisible.count > 0) {
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs);
								} else if (TMNext_TrackBrowser_State.Controls.Label_NoTracks.Visible) {
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
								}
							}
							case Scroll::C_EventType_Focus: {
								if (Event.From != Null) FocusClubOrCampaign(_This, Event.From, False);
								if (Event.To != Null) {
									if (Event.IsMouse && !Scroll::IsFocused(Event.Scroll)) {
										Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), Event.Scroll);
									}
									if (Scroll::IsFocused(Event.Scroll)) {
										FocusClubOrCampaign(_This, Event.To, True);
									}
								}
							}
							case Scroll::C_EventType_ReachLimit: {
								if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Left || Event.NavAction == CMlScriptEvent::EMenuNavAction::Down) {
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
								}
							}
						}
					}
				}
			}
		}
	
		/* Special mouse events */
		foreach (Event in _This.PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::MouseOver: {
					if (Event.Control != Null) {
						if (Event.Control.Parent.Parent != Null) {
							if (Event.Control.HasClass(C_Class_OfficialCampaign_Mouse_Navigation)) {
								FocusOfficialCampaignByMouse(_This, Event.Control.Parent.Parent);
							}	else if (Event.Control.HasClass(C_Class_Monthly_Mouse_Navigation)) {
								FocusMonthlyByMouse(_This, Event.Control.Parent.Parent, TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal);
							}
						}
						if (Event.Control.HasClass(C_Class_TrackOptions_Mouse_Navigation)) {
							MenuSounds::PlaySound(_This, MenuSounds::C_Sound_Focus);
							_This.AnimMgr.Flush(Event.Control);
							_This.AnimMgr.Add(Event.Control, "<anim opacity=\"1.\" scale=\"1.2\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
						}
					}
				}
				case CMlScriptEvent::Type::MouseOut: {
					if (Event.Control != Null && Event.Control.HasClass(C_Class_TrackOptions_Mouse_Navigation)) {
						_This.AnimMgr.Flush(Event.Control);
						_This.AnimMgr.Add(Event.Control, "<anim opacity=\"0.7\" scale=\"1.\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
					}
				}
				case CMlScriptEvent::Type::MouseClick: {
					if (Event.Control.Parent.Parent.Parent != Null) {
						if (Event.Control.HasClass(C_Class_OfficialCampaign_Mouse_Navigation)) {
							assert(Event.Control.Parent.Parent.Parent.HasClass(Scroll::C_Class_Element), "We are not pointing to the correct frame anymore");
							declare Integer CampaignScrollKey for Event.Control.Parent.Parent.Parent;
							SelectOfficialCampaign(_This, CampaignScrollKey);
						} else if (Event.Control.HasClass(C_Class_Monthly_Mouse_Navigation)) {
							assert(Event.Control.Parent.Parent.Parent.HasClass(Scroll::C_Class_Element), "We are not pointing to the correct frame anymore");
							declare Integer MonthlyScrollKey for Event.Control.Parent.Parent.Parent;
							if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Monthly) SelectMonthly(_This, MonthlyScrollKey);
							else if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal) SelectRoyal(_This, MonthlyScrollKey);
						}
					}
					if (Event.Control.Parent.Parent != Null) {
						if (Event.Control.HasClass(C_Class_TrackOptions_Mouse_Navigation)) {
							assert(Event.Control.Parent.Parent.HasClass(Scroll::C_Class_Element), "We are not pointing to the correct frame anymore");
							MenuSounds::PlaySound(_This, MenuSounds::C_Sound_Select);
							if (Event.ControlId == C_Id_ButtonDeleteMyTrack) {
								declare Integer TrackScrollKey for Event.Control.Parent.Parent;
								if (TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks && !Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task)) {
									OpenPopUp_DeleteLocalTrack(_This, TrackScrollKey);
								}
							} else if (Event.ControlId == C_Id_ButtonUploadMyTrack) {
								declare Integer TrackScrollKey for Event.Control.Parent.Parent;
								if (
									TMNext_TrackBrowser_State.CurrentSection == C_Section_LocalTracks && 
									!Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus) &&
									!Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task)
								) {
									OpenPopUp_UploadLocalTrack(_This, TrackScrollKey);
								}
							} else if (Event.ControlId == C_Id_ButtonRemoveTrackFromFavorites) {
								declare Integer TrackScrollKey for Event.Control.Parent.Parent;
								if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites) {
									OpenPopUp_RemoveFavoriteTrack(_This, TrackScrollKey);
								}
							} else if (Event.ControlId == C_Id_ButtonFavorite) {
								declare Integer TrackScrollKey for Event.Control.Parent.Parent;
								AddOrRemoveFocusedTrackToFavorites(_This, TrackScrollKey);
							}
						} else if (Event.ControlId == C_Id_ButtonCheckboxTrack) {
							assert(Event.Control.Parent.HasClass(Scroll::C_Class_Element), "We are not pointing to the correct frame anymore");
							declare Integer TrackScrollKey for Event.Control.Parent;
							if (TMNext_TrackBrowser_State.Settings.MultiSelect) {
								AddTrackToSelection(_This, TrackScrollKey, Event.Control.Parent);
							}
						}
					}
				}
			}
		}
	
		/* Events NavigationTabs */
		foreach (Event in NavigationTabs::GetPendingEvents(_This)) {
			switch (Event.Type) {
				case NavigationTabs::C_EventType_Select: {
					if (Event.Frame_NavigationTabs.ControlId == TMNext_TrackBrowser_State.Controls.Frame_Tabs.ControlId) {
						// Check this condition for the rare case of the player clicking on both a tab and en element to load (example : an official campaign)
						if (!LoadingSpinner::IsLoading(TMNext_TrackBrowser_State.Controls.Frame_LoadingSpinner) && !TMNext_TrackBrowser_State.Settings.ShowOnlyMyLocalTracks) {
							GoToTab(_This, Event.CurrentTab);
						}	else if (Event.CurrentTab != TMNext_TrackBrowser_State.CurrentTabIndex) {
							NavigationTabs::UpdateCurrentTab(_This, TMNext_TrackBrowser_State.Controls.Frame_Tabs, TMNext_TrackBrowser_State.CurrentTabIndex, False);
						}
					}

					// Text to speech context
					Private_GetParentApp(_This).TTS_Context_Change(TMNext_TrackBrowser_State.TTSContextIdent_Tabs, NavigationTabs::GetCurrentTabLabel(TMNext_TrackBrowser_State.Controls.Frame_Tabs));
					Private_GetParentApp(_This).TTS_Context_Read(Const::C_TTSContextLevel_Component);
				}
			}
		}
	
		/* Store events */
		foreach (Event in _This.PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::PluginCustomEvent: {
					switch (Event.CustomEventType) {
						case UserStore::C_Event_MatchmakingInfosUpdated: {
							UpdateRoyalVictoriesDisplay(_This);
						}
						case MapStore::C_Event_FavoriteMapsUpdated, MapStore::C_Event_FavoriteMapsError: {
							if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites) {
								TMNext_TrackBrowser_State.Tracks = MapStore::GetFavoriteMaps();
								Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, MapStore::GetFavoriteMapsTotal());			
								if (TMNext_TrackBrowser_State.Favorites.IsLoadingTracks) {
									TMNext_TrackBrowser_State.Favorites.IsLoadingTracks = False;
									UpdateLoadingStatus(_This);
								}
								if (Event.CustomEventType == MapStore::C_Event_FavoriteMapsError) {
									if (Event.CustomEventData.count > 1)  {
										ShowError(_This, Event.CustomEventData[1]);
									}	
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
								}
							}
						}
						case MapStore::C_Event_CurrentMapUpdated: {
							// Retrieve map name and uid depending on the current tab
							declare Text TrackUid = TMNext_TrackBrowser_State.TracksFavoriteStatus.CurrentTrackUid;
							declare Text TrackName = TMNext_TrackBrowser_State.TracksFavoriteStatus.CurrentTrackName;
							if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites) {
								TrackUid = TMNext_TrackBrowser_State.Favorites.RemoveTrack.Uid;
								TrackName = TMNext_TrackBrowser_State.Favorites.RemoveTrack.Name;
							}
	
							declare MapStore::K_CurrentMap CurrentMap = MapStore::GetCurrentMap();
							
							// Display error if necessary
							if (CurrentMap.Status == MapStore::C_CurrentMapStatus_Error) {
								if (CurrentMap.ErrorCode == MapStore::C_ErrorCode_FailedRemoveFavorites) {
									ShowError(_This, Error::GetErrorMessage(Error::C_Type_ManiaScript, Error::C_Code_TrackBrowser_RemoveFavoriteMap, "HTTP "^CurrentMap.ErrorCodeHttp, ["$<"^Tools::FormatValue(TrackName)^"$>"]));
								} else if (CurrentMap.ErrorCode == MapStore::C_ErrorCode_FailedAddFavorites) {
									ShowError(_This, Error::GetErrorMessage(Error::C_Type_ManiaScript, Error::C_Code_TrackBrowser_AddFavoriteMap, "HTTP "^CurrentMap.ErrorCodeHttp, ["$<"^Tools::FormatValue(TrackName)^"$>"]));
								}
								Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
							} else if (CurrentMap.Status == MapStore::C_CurrentMapStatus_Success && TrackUid == CurrentMap.Uid) {
								TMNext_TrackBrowser_State.Controls.Label_Error.Value = "";
								// In the rare case where we have the same map several times in a campaign, we check all tracks
								foreach (I => Track in TMNext_TrackBrowser_State.Tracks) {
									if (Track.Uid == TrackUid) {
										TMNext_TrackBrowser_State.Tracks[I].IsFavorite = CurrentMap.IsFavorite;
									}
								}
								if (CurrentMap.IsFavorite) TMNext_TrackBrowser_State.TracksFavoriteStatus.KnownedFavoritesTracksUids.add(TrackUid);
								else TMNext_TrackBrowser_State.TracksFavoriteStatus.KnownedFavoritesTracksUids.remove(TrackUid);
	
								// Remove track from selected tracks if necessary
								if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites) { 
									if (TMNext_TrackBrowser_State.Settings.MultiSelect) TMNext_TrackBrowser_State.SelectedTracks.removekey(TrackUid);
								} else { // Update favorite heart icon
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks);
								}
							}
	
							// Reset map uid and name at the end
							if (CurrentMap.Status == MapStore::C_CurrentMapStatus_Success || CurrentMap.Status == MapStore::C_CurrentMapStatus_Error) {
								if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Favorites) {
									TMNext_TrackBrowser_State.Favorites.RemoveTrack.Name = "";
									TMNext_TrackBrowser_State.Favorites.RemoveTrack.Uid = "";
									Refresh(_This);
								} else {
									TMNext_TrackBrowser_State.TracksFavoriteStatus.CurrentTrackUid = "";
									TMNext_TrackBrowser_State.TracksFavoriteStatus.CurrentTrackName = "";
								}
							}
						}
						case CampaignStore::C_Event_LiveQuarterlyCampaignUpdated: {
							if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Official && TMNext_TrackBrowser_State.CurrentSection == C_Section_OfficialCampaigns) {
								if (TMNext_TrackBrowser_State.Official.IsLoadingCampaigns) {
									TMNext_TrackBrowser_State.Official.IsLoadingCampaigns = False;
									UpdateLoadingStatus(_This);
								}
								declare Status = CampaignStore::GetLiveQuarterlyCampaignStatus();
								if (Status == CampaignStore::C_LiveCampaignStatus_Loaded) {
									SortOfficialCampaigns(_This, CampaignStore::GetLiveQuarterlyCampaign());
									Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Official_Campaigns, TMNext_TrackBrowser_State.Official.Campaigns.count);
									if (TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey != -1 && TMNext_TrackBrowser_State.Official.FocusParentCampaign) {
										Scroll::ScrollToElement(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Official_Campaigns, TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey, True);
										TMNext_TrackBrowser_State.Official.FocusParentCampaign = False;
									}
								} else if (Status == CampaignStore::C_LiveCampaignStatus_NoCampaigns || Status == CampaignStore::C_LiveCampaignStatus_Error) {
									Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Official_Campaigns, 0);
									if (Status == CampaignStore::C_LiveCampaignStatus_Error) {
										//L16N Error while retrieving the official campaigns
										ShowError(_This, TL::Compose(_("Error while retrieving the official campaigns. (Error code: %1)"), Error::C_Code_TrackBrowser_GetOfficialCampaigns));
										Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
									}
								}
							}
						}
						case CampaignStore::C_Event_CampaignListUpdated,
								CampaignStore::C_Event_MonthlyCampaignLoadComplete,
								CampaignStore::C_Event_RoyalCampaignLoadComplete,
								CampaignStore::C_Event_CampaignListEmpty,
								CampaignStore::C_Event_CampaignListUpdateError: {
							if (
								(TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Official && 
									(TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedOfficialCampaign ||
										TMNext_TrackBrowser_State.CurrentSection == C_Section_Monthly ||
										TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedMonthly ||
										TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal ||
										TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedRoyal
									)
								) || 
								(TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Clubs && TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedClubCampaign)
							) {
								declare Boolean IsValidCampaign = False;
								// Monthly campaign selected
								if (Event.CustomEventType == CampaignStore::C_Event_MonthlyCampaignLoadComplete && Event.CustomEventData.count > 0 && TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedMonthly) {
									if (TMNext_TrackBrowser_State.Official.Monthlies.existskey(TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey) && TMNext_TrackBrowser_State.Official.Monthlies[TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey].existskey(TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey)) {
										declare K_MonthlyCampaign CurrentCampaign = TMNext_TrackBrowser_State.Official.Monthlies[TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey][TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey];									
										if (TL::ToInteger(Event.CustomEventData[0]) == CurrentCampaign.Id) {
											IsValidCampaign = True;
											UpdateOfficialTracks(_This);
										} else {
											Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, 0);
											TMNext_TrackBrowser_State.Official.IsLoadingTracks = False;
											UpdateLoadingStatus(_This);
										}
									}
								} else if (Event.CustomEventType == CampaignStore::C_Event_RoyalCampaignLoadComplete && Event.CustomEventData.count > 0 && TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedRoyal) {
									// Royal campaign selected
									if (TMNext_TrackBrowser_State.Official.Royals.existskey(TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey) && TMNext_TrackBrowser_State.Official.Royals[TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey].existskey(TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey)) {
										declare K_MonthlyCampaign CurrentCampaign = TMNext_TrackBrowser_State.Official.Royals[TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey][TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey];									
										if (TL::ToInteger(Event.CustomEventData[0]) == CurrentCampaign.Id) {
											IsValidCampaign = True;
											UpdateOfficialTracks(_This);
										} else {
											Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, 0);
											TMNext_TrackBrowser_State.Official.IsLoadingTracks = False;
											UpdateLoadingStatus(_This);
										}
									}
								} else if (Event.CustomEventData.count > 0) {
									declare Integer CampaignType = TL::ToInteger(Event.CustomEventData[0]);
									// Official campaign selected
									if (CampaignType == CampaignStruct::C_CampaignType_Quarterly && TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedOfficialCampaign) {
										declare CampaignList = CampaignStore::GetCampaignList(CampaignStruct::C_CampaignType_Quarterly);
										if (TMNext_TrackBrowser_State.Official.Campaigns.existskey(TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey) && TMNext_TrackBrowser_State.Official.Campaigns[TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey].existskey(TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey)) {
											declare Integer Key = TMNext_TrackBrowser_State.Official.Campaigns[TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey][TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey].OffsetKey;
											if (CampaignList.existskey(Key) && CampaignList[Key].Id != CampaignStruct::C_Campaign_NullId) {
												IsValidCampaign = True;
												TMNext_TrackBrowser_State.Official.Campaigns[TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey][TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey].Id = CampaignList[Key].Id;
												UpdateOfficialTracks(_This);
											} else {
												Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, 0);
												TMNext_TrackBrowser_State.Official.IsLoadingTracks = False;
												UpdateLoadingStatus(_This);
											}
										}
									} else if (CampaignType == CampaignStruct::C_CampaignType_Monthly) {
										// List of monthly campaigns
										if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Monthly) {
											if (TMNext_TrackBrowser_State.Official.IsLoadingMonthly) {
												TMNext_TrackBrowser_State.Official.IsLoadingMonthly = False;
												UpdateLoadingStatus(_This);
											}
											SortMonthlies(_This, CampaignStore::GetMonthlyCampaignList(), TMNext_TrackBrowser_State.Official.ScrollMonthlyOffset, False);
											Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD, TMNext_TrackBrowser_State.Official.Monthlies.count);
											if (TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey != -1 && TMNext_TrackBrowser_State.Official.FocusParentMonthly) {
												Scroll::ScrollToElement(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD, TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey, True);
												TMNext_TrackBrowser_State.Official.FocusParentMonthly = False;
											}
										} else if (TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedMonthly) { // Monthly campaign selected with no campaign id
											declare CampaignList = CampaignStore::GetMonthlyCampaignList();
											if (TMNext_TrackBrowser_State.Official.Monthlies.existskey(TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey) && TMNext_TrackBrowser_State.Official.Monthlies[TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey].existskey(TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey)) {
												declare Integer Key = TMNext_TrackBrowser_State.Official.Monthlies[TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey][TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey].OffsetKey;					
												if (CampaignList.existskey(Key) && CampaignList[Key].Id != CampaignStruct::C_Campaign_NullId) {
													IsValidCampaign = True;
													TMNext_TrackBrowser_State.Official.Monthlies[TMNext_TrackBrowser_State.Official.MonthlyLineSelectedKey][TMNext_TrackBrowser_State.Official.MonthlyColumnFocusKey].Id = CampaignList[Key].Id;
													UpdateOfficialTracks(_This);
												} else {
													Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, 0);
													TMNext_TrackBrowser_State.Official.IsLoadingTracks = False;
													UpdateLoadingStatus(_This);
												}
											}
										}
									} else if (CampaignType == CampaignStruct::C_CampaignType_Royal) { 
										// List of royal campaigns
										if (TMNext_TrackBrowser_State.CurrentSection == C_Section_Royal) {
											if (TMNext_TrackBrowser_State.Official.IsLoadingRoyal) {
												TMNext_TrackBrowser_State.Official.IsLoadingRoyal = False;
												UpdateLoadingStatus(_This);
											}
											SortMonthlies(_This, CampaignStore::GetRoyalCampaignList(), TMNext_TrackBrowser_State.Official.ScrollRoyalOffset, True);
											Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD, TMNext_TrackBrowser_State.Official.Royals.count);
											if (TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey != -1 && TMNext_TrackBrowser_State.Official.FocusParentRoyal) {
												Scroll::ScrollToElement(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_TOTD, TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey, True);
												TMNext_TrackBrowser_State.Official.FocusParentRoyal = False;
											}
										} else if (TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedRoyal) { // Royal campaign selected with no campaign id
											declare CampaignList = CampaignStore::GetRoyalCampaignList();
											if (TMNext_TrackBrowser_State.Official.Royals.existskey(TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey) && TMNext_TrackBrowser_State.Official.Royals[TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey].existskey(TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey)) {
												declare Integer Key = TMNext_TrackBrowser_State.Official.Royals[TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey][TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey].OffsetKey;					
												if (CampaignList.existskey(Key) && CampaignList[Key].Id != CampaignStruct::C_Campaign_NullId) {
													IsValidCampaign = True;
													TMNext_TrackBrowser_State.Official.Royals[TMNext_TrackBrowser_State.Official.RoyalLineSelectedKey][TMNext_TrackBrowser_State.Official.RoyalColumnFocusKey].Id = CampaignList[Key].Id;
													UpdateOfficialTracks(_This);
												} else {
													Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, 0);
													TMNext_TrackBrowser_State.Official.IsLoadingTracks = False;
													UpdateLoadingStatus(_This);
												}
											}
										}
									}
								}
								// Stop loading if error on selected campaign
								if (Event.CustomEventType == CampaignStore::C_Event_CampaignListUpdateError && (Event.CustomEventData.count < 3 || Event.CustomEventData[2] != CampaignStore::C_ErrorType_ScoresNotLoaded)) {
									Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, 0);
									TMNext_TrackBrowser_State.Official.IsLoadingTracks = False;
									UpdateLoadingStatus(_This);
									if (TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedMonthly) {
										//L16N Error while retrieving the tracks of the selected month
										ShowError(_This, TL::Compose(_("Error while retrieving this month tracks. (Error code: %1)"), Error::C_Code_TrackBrowser_GetMonthlyTracks));
									} else if (TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedOfficialCampaign) {
										//L16N Error while retrieving an official campaign
										ShowError(_This, TL::Compose(_("Error while retrieving this official campaign. (Error code: %1)"), Error::C_Code_TrackBrowser_GetOfficialCampaignTracks));
									} else if (TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedClubCampaign) {
										//L16N Error while retrieving a club campaign
										ShowError(_This, TL::Compose(_("Error while retrieving this club campaign. (Error code: %1)"), Error::C_Code_TrackBrowser_GetClubCampaignTracks));
									}
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
								}
							}
						}
						case ClubStore::C_Event_BrowserClubsUpdated, ClubStore::C_Event_BrowserClubsError: {
							if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Clubs && TMNext_TrackBrowser_State.CurrentSection == C_Section_None) {
								TMNext_TrackBrowser_State.Clubs.Clubs = ClubStore::GetBrowserClubs();
								Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs, ClubStore::GetBrowserClubsTotal());						
								if (TMNext_TrackBrowser_State.Clubs.IsLoadingClubs) {
									TMNext_TrackBrowser_State.Clubs.IsLoadingClubs = False;
									UpdateLoadingStatus(_This);
								}
								if (Event.CustomEventType == ClubStore::C_Event_BrowserClubsError) {
									//L16N Error while retrieving player's clubs
									ShowError(_This, TL::Compose(_("Error while retrieving your clubs. (Error code: %1)"), Error::C_Code_TrackBrowser_GetPlayerClubs));
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
								}
								if (TMNext_TrackBrowser_State.Clubs.SelectedClubKey != -1 && TMNext_TrackBrowser_State.Clubs.FocusParentClub) {
									Scroll::ScrollToElement(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs, TMNext_TrackBrowser_State.Clubs.SelectedClubKey, True);
									TMNext_TrackBrowser_State.Clubs.SelectedClubKey = -1;
									TMNext_TrackBrowser_State.Clubs.FocusParentClub = False;
									TMNext_TrackBrowser_State.Clubs.SelectedClub = ClubStruct::LibStructuresClub_K_Club {};
								}
							}
						}
						case CampaignStore::C_Event_ClubsCampaignListUpdated, CampaignStore::C_Event_ClubsCampaignListError: {
							if (TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Clubs && TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedClub) {
								TMNext_TrackBrowser_State.Clubs.SelectedCampaigns = CampaignStore::GetClubCampaignList(TMNext_TrackBrowser_State.Clubs.SelectedClub.Id);
								Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs, CampaignStore::GetClubCampaignsTotal(TMNext_TrackBrowser_State.Clubs.SelectedClub.Id));
								if (TMNext_TrackBrowser_State.Clubs.IsLoadingCampaigns) {
									TMNext_TrackBrowser_State.Clubs.IsLoadingCampaigns = False;
									UpdateLoadingStatus(_This);
								}
								if (Event.CustomEventType == CampaignStore::C_Event_ClubsCampaignListError) {
									//L16N Error while retrieving the current club campaigns, %1 will be replaced by the club name, %2 by a code, e.g "Error while retrieving 'Darrek' club campaigns. (Error code: 400)"
									ShowError(_This, TL::Compose(_("Error while retrieving '%1' club campaigns. (Error code: %2)"), TL::StripFormatting(TMNext_TrackBrowser_State.Clubs.SelectedClub.Name), Error::C_Code_TrackBrowser_GetClubCampaigns));
									Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
								}
								if (TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey != -1 && TMNext_TrackBrowser_State.Clubs.FocusParentCampaign) {
									Scroll::ScrollToElement(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Clubs, TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey, True);
									TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey = -1;
									TMNext_TrackBrowser_State.Clubs.FocusParentCampaign = False;
								}
							}
						}
						case CampaignStore::C_Event_CampaignLoadComplete: {
							if (
								(TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Official && TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedOfficialCampaign) ||
								(TMNext_TrackBrowser_State.CurrentTabIndex == C_TabIndex_Clubs && TMNext_TrackBrowser_State.CurrentSection == C_Section_SelectedClubCampaign)						
							) {
								declare Integer SelectedClubCampaignId = CampaignStruct::C_Campaign_NullId;
								if (TMNext_TrackBrowser_State.Clubs.SelectedCampaigns.existskey(TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey)) {
									SelectedClubCampaignId = TMNext_TrackBrowser_State.Clubs.SelectedCampaigns[TMNext_TrackBrowser_State.Clubs.SelectedCampaignKey].Id;
								}
								declare Integer OfficialCampaignId = CampaignStruct::C_Campaign_NullId;
								if (TMNext_TrackBrowser_State.Official.Campaigns.existskey(TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey) && TMNext_TrackBrowser_State.Official.Campaigns[TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey].existskey(TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey)) {
									OfficialCampaignId = TMNext_TrackBrowser_State.Official.Campaigns[TMNext_TrackBrowser_State.Official.CampaignLineSelectedKey][TMNext_TrackBrowser_State.Official.CampaignColumnFocusKey].Id;
								}
								if (Event.CustomEventData.count > 0) {
									declare Integer EventCampaignId = TL::ToInteger(Event.CustomEventData[0]);
									if (SelectedClubCampaignId == EventCampaignId) {
										UpdateClubCampaignTracks(_This, SelectedClubCampaignId);
									} else if (OfficialCampaignId == EventCampaignId) {
										UpdateOfficialTracks(_This);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	// Local tracks task
	if (Task::IsInitialized(TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks)) {
		TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks = Task::Update(TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks);
		if (!Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks)) {
			declare CTaskResult_MapList SourceTask = Task::GetSourceTask_MapList(TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks);
			if (Task::IsSuccess(TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks) && SourceTask != Null) {
				TMNext_TrackBrowser_State.MyTracks.LocalTracks.clear();
				TMNext_TrackBrowser_State.MyTracks.CurrentPath = SourceTask.Path;
				TMNext_TrackBrowser_State.MyTracks.CurrentParentPath = SourceTask.ParentPath;
	
				declare CurrentPath = TL::Replace(TMNext_TrackBrowser_State.MyTracks.CurrentPath, "\\", "/");
				if (TL::EndsWith("/", CurrentPath)) CurrentPath = TL::SubString(CurrentPath, 0, TL::Length(CurrentPath)-1);
				if (CurrentPath != "" && Platform::IsPC(System)) SetSectionTitle(_This, TL::Compose("%1%2%3", C_Text_LocalTracks, "/", FilterProfanities(CurrentPath)));
				else SetSectionTitle(_This, C_Text_LocalTracks);
				
				foreach (SubFolder in SourceTask.SubFolders) {
					TMNext_TrackBrowser_State.MyTracks.LocalTracks.add(K_LocalTrack {
						ParentPath = SourceTask.ParentPath,
						Path = SourceTask.Path,
						TrackInfo = CampaignStruct::LibCampaignStruct_K_Map {},
						SubFolder = SubFolder
					});
				}
	
				declare Boolean NeedFilter = TracksShouldBeFiltered(_This);
				foreach (TrackInfo in SourceTask.MapInfos) {
					declare CampaignStruct::LibCampaignStruct_K_Map Map = CampaignStruct::GetMapFromMapInfo(TrackInfo);
					// Local maps are made by the current player, so AuthorIsFirstPartyDisplayName is always True on consoles
					Map.AuthorIsFirstPartyDisplayName = Platform::IsFromFirstParty(System);
					if (!NeedFilter || FilterTrack(_This, Map.AuthorLogin, Map.IsPlayable, Map.CollectionName, Map.Type)) {
						TMNext_TrackBrowser_State.MyTracks.LocalTracks.add(K_LocalTrack {
							ParentPath = SourceTask.ParentPath,
							Path = SourceTask.Path,
							TrackInfo = Map,
							SubFolder = ""
						});
					}
				}
	
				// Hide SelectAllTracks button when not usable
				if (TMNext_TrackBrowser_State.Settings.MultiSelect) {
					declare Boolean OnlyFolders = TMNext_TrackBrowser_State.MyTracks.LocalTracks.count == SourceTask.SubFolders.count;
					EnableOption(TMNext_TrackBrowser_State.Controls.Button_SelectAll, TMNext_TrackBrowser_State.Settings.MultiSelect && !OnlyFolders);
				}
	
				Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, TMNext_TrackBrowser_State.MyTracks.LocalTracks.count);
				if (TMNext_TrackBrowser_State.MyTracks.LastFolderSelected_Keys.count > 0 && TMNext_TrackBrowser_State.MyTracks.FocusParentFolder) {
					Scroll::ScrollToElement(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, TMNext_TrackBrowser_State.MyTracks.LastFolderSelected_Keys[TMNext_TrackBrowser_State.MyTracks.LastFolderSelected_Keys.count-1], True);
					TMNext_TrackBrowser_State.MyTracks.LastFolderSelected_Keys.removekey(TMNext_TrackBrowser_State.MyTracks.LastFolderSelected_Keys.count-1);
					TMNext_TrackBrowser_State.MyTracks.FocusParentFolder = False;
				}
			} else if (SourceTask != Null) {
				//L16N Error while retrieving player's local tracks. %1 will be replaced with a code e.g. "Error code: 500"
				ShowError(_This, TL::Compose(_("Error while retrieving your local tracks. (Error code: %1)"), SourceTask.ErrorCode));
				Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
			}
			UpdateLoadingStatus(_This);
			TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks = Task::Destroy(TMNext_TrackBrowser_State.MyTracks.Task_GetLocalTracks);
		}
	}
	
	// Online tracks task
	if (Task::IsInitialized(TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks)) {
		TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks = Task::Update(TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks);
		if (!Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks)) {
			declare CTaskResult_NSMapList SourceTask = Task::GetSourceTask_NSMapList(TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks);
			if (Task::IsSuccess(TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks) && SourceTask != Null) {
				TMNext_TrackBrowser_State.Tracks.clear();
				SetSectionTitle(_This, C_Text_OnlineTracks);
	
				declare Boolean NeedFilter = TracksShouldBeFiltered(_This);
				declare Integer Index = 0;
				foreach (NSMap in SourceTask.MapList) {
					declare CampaignStruct::LibCampaignStruct_K_Map Map = CampaignStruct::GetMapFromNSMap(CampaignStruct::LibCampaignStruct_K_Map {}, NSMap);
					if (!NeedFilter || FilterTrack(_This, Map.AuthorLogin, Map.IsPlayable, Map.CollectionName, Map.Type)) {
						TMNext_TrackBrowser_State.Tracks[Index] = Map;
						Index += 1;
					}
				}
				Scroll::SetElementsTotal(_This, TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks, TMNext_TrackBrowser_State.Tracks.count);
				CheckTracksFavoriteStatus(_This);
			} else if (SourceTask != Null) {
				//L16N Error while retrieving player's online tracks. %1 will be replaced with a code e.g. "Error code: 500"
				ShowError(_This, TL::Compose(_("Error while retrieving your online tracks. (Error code: %1)"), SourceTask.ErrorCode));
				Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Button_Back);
			}
			UpdateLoadingStatus(_This);
			TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks = Task::Destroy(TMNext_TrackBrowser_State.MyTracks.Task_GetOnlineTracks);
		}
	}
	
	// Check all tracks favorite status
	if (Http::IsInitialized(TMNext_TrackBrowser_State.TracksFavoriteStatus.Request)) {
		TMNext_TrackBrowser_State.TracksFavoriteStatus.Request = Http::Update(TMNext_TrackBrowser_State.TracksFavoriteStatus.Request);
		if (!Http::IsRunning(TMNext_TrackBrowser_State.TracksFavoriteStatus.Request)) {
			if (Http::IsSuccess(TMNext_TrackBrowser_State.TracksFavoriteStatus.Request)) {
				declare Response = MapAPI::GetResponseFromGetMaps(TMNext_TrackBrowser_State.TracksFavoriteStatus.Request);
				foreach (I => Track in TMNext_TrackBrowser_State.Tracks) {
					if (Response.Maps.existskey(Track.Uid) && Response.Maps[Track.Uid].IsFavorite) {
						TMNext_TrackBrowser_State.TracksFavoriteStatus.KnownedFavoritesTracksUids.add(Track.Uid);
					}
					TMNext_TrackBrowser_State.Tracks[I].IsFavorite = TMNext_TrackBrowser_State.TracksFavoriteStatus.KnownedFavoritesTracksUids.exists(Track.Uid);
				}
				TMNext_TrackBrowser_State.TracksFavoriteStatus.FirstHeartIconDisplay = True;
				Focus(_This, Navigation::GetFocusedControl(_This, C_NavGroupName), TMNext_TrackBrowser_State.Controls.Frame_Scroll_Tracks);
			}
			TMNext_TrackBrowser_State.TracksFavoriteStatus.Request = Http::Destroy(TMNext_TrackBrowser_State.TracksFavoriteStatus.Request);
		}
	}
	
	// Check track status task
	if (Task::IsInitialized(TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus)) {
		TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus = Task::Update(TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus);
		if (!Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus)) {
			declare CTaskResult_NSMap SourceTask = Task::GetSourceTask_NSMap(TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus);
			
			declare Text NewDescriptionDeleteTrack = C_DeleteTrackPopUp_Description2;
			declare Vec3 NewColorDescriptionDeleteTrack = ColorPalette::C_Color_Vec3_GreenOne;		
			declare Integer PopUpType for TMNext_TrackBrowser_State.Controls.Frame_MultiChoice;
	
			if (Task::IsSuccess(TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus) && SourceTask != Null && SourceTask.Map != Null) {
				if (TMNext_TrackBrowser_State.Controls.Frame_MultiChoice.Visible) {
					if (PopUpType == C_PopUpDeleteTrackIndex && (SourceTask.Map.SubmitterWebServicesUserId == LocalUser.WebServicesUserId)) {
						NewDescriptionDeleteTrack = C_DeleteTrackPopUp_Description3;
						NewColorDescriptionDeleteTrack = <1., 1., 1.>;
					} else if (PopUpType == C_PopUpUploadTrackIndex) {
						EditUploadLocalTrackPopUp(_This, True, False, True, (SourceTask.Map.SubmitterWebServicesUserId == LocalUser.WebServicesUserId), False, "");
					}
				}
			} else {
				if (TMNext_TrackBrowser_State.Controls.Frame_MultiChoice.Visible) {
					if (PopUpType == C_PopUpUploadTrackIndex) {
						EditUploadLocalTrackPopUp(_This, True, False, False, False, False, "");
					}
				}
			}
			
			if (TMNext_TrackBrowser_State.Controls.Frame_MultiChoice.Visible && PopUpType == C_PopUpDeleteTrackIndex) {
				PopUpMultiChoice::SetDescription(
					_This, 
					TMNext_TrackBrowser_State.Controls.Frame_MultiChoice,
					[
						PopUpMultiChoice::CreateDescriptionPart(TL::Compose(C_DeleteTrackPopUp_Description1, "$<"^Tools::FormatValue(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Name)^"$>"), <130., 15.>, 3., FontManager::C_GameFontRegular, "$t$i", <1., 1., 1.>, False),
						PopUpMultiChoice::CreateDescriptionPart(NewDescriptionDeleteTrack, <130., 10.>, 3., FontManager::C_GameFontSemiBold, "$t$i", NewColorDescriptionDeleteTrack, False)
					],
					True
				);
			}
			TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus = Task::Destroy(TMNext_TrackBrowser_State.MyTracks.Task_CheckTrackUploadStatus);
		}
	}
	
	// Delete local track task
	if (Task::IsInitialized(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task)) {
		TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task = Task::Update(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task);
		if (!Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task)) {
			declare CTaskResult SourceTask = Task::GetSourceTask(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task);
			if (Task::IsSuccess(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task)) {
				// Remove track from selected tracks if necessary
				if (TMNext_TrackBrowser_State.Settings.MultiSelect) TMNext_TrackBrowser_State.SelectedTracks.removekey(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Uid);
				Refresh(_This);
			} else {
				declare Text ErrorCode = Error::C_Code_TrackBrowser_DeleteTrackTaskNull;
				if (SourceTask != Null) {
					ErrorCode = SourceTask.ErrorCode;
				}
				//L16N Error while deleting a local track. %1 will be replaced by the track name and %2 will be replaced with a code e.g. "Error while deleting the local track 'Test 2'. (Error code: 500)"
				ShowError(_This, TL::Compose(_("Error while deleting the local track '%1'. (Error code: %2)"), "$<"^Tools::FormatValue(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Name)^"$>", ErrorCode));
			}
			TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task = Task::Destroy(TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Task);
			TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Name = "";
			TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.FileName = "";
			TMNext_TrackBrowser_State.MyTracks.DeleteLocalTrack.Uid = "";
		}
	}
	
	// Upload local track task
	if (Task::IsInitialized(TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task)) {
		TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task = Task::Update(TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task);
		if (!Task::IsRunning(TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task)) {
			if (Task::IsSuccess(TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task)) {
				EditUploadLocalTrackPopUp(_This, False, False, False, False, True, "");
			} else {
				EditUploadLocalTrackPopUp(_This, False, False, False, False, True, Task::GetSourceTaskError(TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task).Code);
			}
			SetLoadingSpinnerPopUp(_This, False, "");
			TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task = Task::Destroy(TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Task);
			TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Name = "";
			TMNext_TrackBrowser_State.MyTracks.UploadLocalTrack.Uid = "";
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text ComponentV2() {
	return MV::ComponentV2(
		C_Name,
		GetManialink(),
"""
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/TrackBrowser.Script.txt" as {{{Q}}}
""",
"""
***MainInit***
***
{{{P}}}MainInit(This);
***

***MainStart***
***
{{{P}}}MainStart(This);
***

***MainLoop***
***
{{{P}}}MainLoop(This);
***
""",
[
	Transition::ComponentV2(),
	PopUpBackground::ComponentV2(),
	Navigation::ComponentV2(),
	ExpendableButton_TMNext::ComponentV2(),
	ButtonIcon::ComponentV2(),
	Button::ComponentV2(),
	NavigationTabs::ComponentV2(),
	Scroll::ComponentV2(),
	CampaignStruct::Component(),
	LoadingSpinner::ComponentV2(),
	UserStore::ComponentV2(),
	MapStore::ComponentV2(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	CampaignStore::ComponentV2(),
	MenuSounds::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	Checkbox::ComponentV2(),
	Router::ComponentV2(),
	ExpendableAsset_TMNext::ComponentV2(),
	PlayerRoyalVictories::ComponentV2(),
	PlayerName::ComponentV2(),
	ControlBlockList::ComponentV2()
],
[]
);
}