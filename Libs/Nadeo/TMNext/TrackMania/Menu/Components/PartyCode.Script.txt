/** 
 *	Component: PartyCode
 */
#Const Version		"2023-05-24"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Components/PartyCode.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-partycode" //< Component name
#Const P "ComponentPartyCode_" //< Prefix used to differentiate functions/variables in the script

#Const C_NavGroupEscapePopUp "navgroup-party-code-escape-pop-up"
#Const C_NavGroupName "navgroup-party-code"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Public
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {
	//L16N [Party Code] Title of the pop up to manage party code (to play on a private server)
	declare Text Text_Title = _("Private party");
	//L16N [Party Code] Sub Title of the pop up to explain the party code function
	declare Text Text_SubTitle = _("Play on a private server with all the players who enter the same party code as you. Once someone enters the code and click on Play, a match will start 60s later.");
	//L16N [Party Code] Sub sub Title of the pop up to explain that the player Royal victory does not increase with victories on private servers
	declare Text Text_SubSubTitle = _("No Royal victory when activated");
	//L16N [Party Code] Button to enter a party code 
	declare Text Text_EnterCode = _("Enter Party Code");
	//L16N [Party Code] Display your generated party code
	declare Text Text_YourCode = _("Your Party Code");
	//L16N [Party Code] Button to generate a new party code
	declare Text Text_GenerateCode = _("Generate party code");
	//L16N [Party Code] Button to validate a party code
	declare Text Text_OK = _("Ok");
	//L16N [Party Code] Message to explain that the party code is copied to the system clipboard
	declare Text Text_CodeCopied = _("Party Code copied to the clipboard");
	//L16N [Party Code] Message displayed when the party code was regenerated
	declare Text Text_CodeGenerated = _("New Party Code generated");
	//L16N [Party Code] Message displayed when the party code can't be regenerated. %1 goes for the type of Error.
	declare Text Text_CodeGenerationError = _("Error while generating a new Party Code, please try again. (Error code: %1)");
	//L16N [Party Code] Message displayed when the party code is not validated by CLUB API
	declare Text Text_CheckingCodeError = _("Incorrect Party Code");
	//L16N [Party Code] Message displayed when the party code is not validated by CLUB API because it's from another platform and player has disabled the crossplay
	declare Text Text_CheckingCodeCrossplayDisabledError = _("This Party code is not compatible with your crossplay setting. You must enable the crossplay.");
	//L16N [Party Code] Message displayed when the party code is not validated by CLUB API because it's from the same platform and player has enable the crossplay
	declare Text Text_CheckingCodeCrossplayEnabledError = _("This Party code is not compatible with your crossplay setting. You must disable the crossplay.");
	//L16N [Party Code] Message displayed when the party code is not validated by CLUB API for an unknow reason
	declare Text Text_CheckingCodeErrorDefault = _("Party Code not validated");
	//L16N [Party Code] Message displayed when the party code is activated
	declare Text Text_CodeActivated = _("Party Code activated");
	//L16N [Party Code] Message displayed when the party code is desactivated
	declare Text Text_CodeDesactivated = _("Party Code desactivated");

	declare Boolean DisplayCrossButton = Platform::IsPC(System) || Platform::IsStreaming(System);

	return MV::Component(
		C_Name,
		"""
<stylesheet>
	<style class="{{{P}}}quad-base" halign="center" valign="center"/>
	<style class="{{{P}}}text-base" halign="center" valign="center2" textprefix="$t$i" textfont="{{{FontManager::C_GameFontSemiBold}}}" textsize="4" textcolor="FFF"/>
</stylesheet>


<frame id="{{{P}}}frame-global" hidden="1">
	<frame id="{{{P}}}frame-pop-up-backgroud"
		z-index="-1"
		class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}}"

		data-nav-group="{{{C_NavGroupEscapePopUp}}}"
		data-nav-zone="{{{P}}}quad-pop-up-fullscreen"
		data-nav-inputs="cancel"
		data-nav-targets="_"

		data-menusounds-selectsound="BackButtonSelect"
	>
		<quad image="{{{Const::C_ImageUrl_Matchmaking_PartyCode_PopUp}}}" size="180 107" pos="-4 3" opacity="0.9" class="quad-base" scriptevents="1" z-index="1"/>
		<quad id="{{{P}}}quad-pop-up-fullscreen" bgcolor="000" size="320 180" opacity="0.3" class="quad-base {{{Navigation::C_Class_ActivationZone}}}" z-index="-1" fullscreen="1" scriptevents="1"/>
	</frame>
	<frameinstance
		modelid="{{{Button::C_Name}}}" id="{{{P}}}button-leave"
		class="{{{Navigation::C_Class}}}"
		pos="76 50"
		data-size="10 10"
		data-bgcolor="FFF"
		data-focuscolor="FFF"
		data-image="{{{Const::C_ImageUrl_Icon_Cross_Oblique_256}}}"
		data-imagefocus="{{{Const::C_ImageUrl_Icon_Cross_Oblique_256}}}"
		data-opacityunfocus=".5"
		data-halign="center"
		data-valign="center"
		data-nav-inputs="select;cancel;down"
		data-nav-targets="_;_;{{{P}}}textfield-code"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
		data-nav-locked="{{{!DisplayCrossButton}}}"
		hidden="{{{!DisplayCrossButton}}}"
		z-index="1"
	/>
	<label id="{{{P}}}label-title" pos="{{{MLHelpers::Skew(-2., 45., 10.)}}}" text="{{{Text_Title}}}" textsize="7" size="110 20" class="{{{P}}}text-base" textfont="{{{FontManager::C_GameFontExtraBold}}}"/>
	<label id="{{{P}}}label-sub-title" pos="{{{MLHelpers::Skew(-2., 30., 10.)}}}" text="{{{Text_SubTitle}}}" size="140 15" class="{{{P}}}text-base" textsize="2.5" textprefix="$i" textfont="{{{FontManager::C_GameFontRegular}}}" autonewline="1" maxline="4"/>
	<label id="{{{P}}}label-sub-sub-title" pos="{{{MLHelpers::Skew(-2., 18., 10.)}}}" text="{{{Text_SubSubTitle}}}" size="140 10" class="{{{P}}}text-base" textsize="2" textprefix="$i" textfont="{{{FontManager::C_GameFontRegular}}}"/>
	<frame id="{{{P}}}frame-enter-code" pos="{{{MLHelpers::Skew(-2., 9., 10.)}}}">
		<label text="{{{Text_EnterCode}}}" size="70 30" class="{{{P}}}text-base" textsize="3.5"/>
		<frameinstance 
			modelid="{{{TextField::C_Name}}}" id="{{{P}}}textfield-code" pos="-1 -7"
			class="{{{Navigation::C_Class}}}"
			data-size="{{{7.2*98/14}}} 7.4"
			data-bgopacityunfocus="0.6"
			data-bgcolorfocus="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-bgcolorunfocus="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-contourcolorfocus="{{{ColorPalette::C_Color_GreenOne}}}"
			data-contouropacityunfocus=".0"
			data-contouropacityfocus="1."
			data-textsize="3."
			data-textcolorunfocus="{{{ColorPalette::C_Color_GreenOne}}}"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel;down;right"
			data-nav-targets="_;_;{{{P}}}button-ok;{{{P}}}button-show-code-1"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{TextField::C_NavZone}}}"
		/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="{{{P}}}button-ok"
			class="{{{Navigation::C_Class}}}"
			pos="-3 -16"
			data-text="{{{Text_OK}}}"
			data-textcolor="FFF"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-textsize="2.5"
			data-textitalicslope=".2"
			data-textopacityunfocus="0.6"
			data-size="{{{8.*272/108}}} 8"
			data-bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-focuscolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-image="{{{Const::C_ImageUrl_Matchmaking_PartyCode_Button_OK}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Matchmaking_PartyCode_Button_OK}}}"
			data-opacityunfocus=".6"
			data-halign="center"
			data-valign="center"
			data-nav-inputs="select;cancel;up;down;right"
			data-nav-targets="_;_;{{{P}}}textfield-code;{{{P}}}button-generate;{{{P}}}button-show-code-1"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			z-index="1"
		/>
		<frameinstance 
			modelid="{{{Button::C_Name}}}" id="{{{P}}}button-show-code-1"
			class="{{{Navigation::C_Class}}}"
			pos="30 -7"
			hidden="1"
			data-size="{{{8.4*128/108}}} 8.4"
			data-bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-opacity="1."
			data-image="{{{Const::C_ImageUrl_Matchmaking_PartyCode_Action_Button}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Matchmaking_PartyCode_Action_Button}}}"
			data-icon="{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}"
			data-iconfocus="{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}"
			data-focuscolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-iconcolor="FFF"
			data-iconfocuscolor="FFF"
			data-iconsize="7 7"
			data-opacityunfocus="0.6"
			data-halign="center"
			data-valign="center"
			data-nav-inputs="select;cancel;down;left;right"
			data-nav-targets="_;_;{{{P}}}button-ok;{{{P}}}textfield-code;{{{P}}}button-delete-code"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
		/>
		<frameinstance 
			modelid="{{{Button::C_Name}}}" id="{{{P}}}button-delete-code"
			class="{{{Navigation::C_Class}}}"
			pos="40 -7"
			hidden="1"
			data-size="{{{8.4*128/108}}} 8.4"
			data-bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-opacity="1."
			data-image="{{{Const::C_ImageUrl_Matchmaking_PartyCode_Action_Button}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Matchmaking_PartyCode_Action_Button}}}"
			data-icon="{{{Const::C_ImageUrl_Icon_Bin_Inc}}}"
			data-iconfocus="{{{Const::C_ImageUrl_Icon_Bin_Inc}}}"
			data-focuscolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-iconcolor="FFF"
			data-iconfocuscolor="FFF"
			data-iconsize="7 7"
			data-opacityunfocus="0.6"
			data-halign="center"
			data-valign="center"
			data-nav-inputs="select;cancel;down;left"
			data-nav-targets="_;_;{{{P}}}button-ok;{{{P}}}button-show-code-1"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
		/>
		<label id="{{{P}}}label-check-code-message" pos="-3 -24" class="{{{P}}}text-base" textfont="{{{FontManager::C_GameFontSemiBold}}}" size="140 10" textsize="2.5" textprefix="$i"/>
	</frame>
	<frame id="{{{P}}}frame-your-code" pos="{{{MLHelpers::Skew(-2., -23., 10.)}}}">
		<label id="{{{P}}}label-your-code" hidden="1" text="{{{Text_YourCode}}}" size="70 30" class="{{{P}}}text-base" textsize="3.5"/>
		<frameinstance
			modelid="{{{Button::C_Name}}}" id="{{{P}}}button-generate"
			class="{{{Navigation::C_Class}}}"
			pos="-1 -7"
			data-text="{{{Text_GenerateCode}}}"
			data-textcolor="FFF"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-textsize="2.5"
			data-fitlabel="1.5"
			data-textitalicslope=".2"
			data-textopacityunfocus="0.6"
			data-size="{{{11.*808/112}}} 11"
			data-bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-focuscolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-image="{{{Const::C_ImageUrl_Common_Entry_BG}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Common_Entry_BG}}}"
			data-opacityunfocus=".6"
			data-halign="center"
			data-valign="center"
			data-nav-inputs="select;cancel;up;right"
			data-nav-targets="_;_;{{{P}}}button-ok;{{{P}}}button-refresh-code"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			z-index="1"
		/>
		<frame id="{{{P}}}frame-generated-code" pos="-1 -7" hidden="1">
			<quad z-index="0" image="{{{Const::C_ImageUrl_LocalNetwork_PlayerBox}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity=".6" size="{{{9.*416/96}}} 9" halign="center" valign="center" />
			<label id="{{{P}}}label-generated-code" z-index="1" size="70 30" class="{{{P}}}text-base" textprefix="$i" textfont="{{{FontManager::C_GameFontRegular}}}" textsize="3"/>
		</frame>
		<frameinstance 
			modelid="{{{Button::C_Name}}}" id="{{{P}}}button-refresh-code"
			class="{{{Navigation::C_Class}}}"
			pos="25 -7"
			hidden="1"
			data-size="{{{8.4*128/108}}} 8.4"
			data-bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-opacity="1."
			data-image="{{{Const::C_ImageUrl_Matchmaking_PartyCode_Action_Button}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Matchmaking_PartyCode_Action_Button}}}"
			data-icon="{{{Const::C_ImageUrl_Icon_Refresh}}}"
			data-iconfocus="{{{Const::C_ImageUrl_Icon_Refresh}}}"
			data-focuscolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-iconcolor="FFF"
			data-iconfocuscolor="FFF"
			data-iconsize="7 7"
			data-opacityunfocus="0.6"
			data-halign="center"
			data-valign="center"
			data-nav-inputs="select;cancel;left;right;up"
			data-nav-targets="_;_;{{{P}}}button-generate;{{{P}}}button-show-code-2;{{{P}}}button-ok"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
		/>
		<frameinstance 
			modelid="{{{Button::C_Name}}}" id="{{{P}}}button-show-code-2"
			class="{{{Navigation::C_Class}}}"
			pos="35 -7"
			hidden="1"
			data-size="{{{8.4*128/108}}} 8.4"
			data-bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-opacity="1."
			data-image="{{{Const::C_ImageUrl_Matchmaking_PartyCode_Action_Button}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Matchmaking_PartyCode_Action_Button}}}"
			data-icon="{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}"
			data-iconfocus="{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}"
			data-focuscolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-iconcolor="FFF"
			data-iconfocuscolor="FFF"
			data-iconsize="7 7"
			data-opacityunfocus="0.6"
			data-halign="center"
			data-valign="center"
			data-nav-inputs="select;cancel;left;right;up"
			data-nav-targets="_;_;{{{P}}}button-refresh-code;{{{P}}}button-copy-code;{{{P}}}button-ok"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
		/>
		<frameinstance 
			modelid="{{{Button::C_Name}}}" id="{{{P}}}button-copy-code"
			class="{{{Navigation::C_Class}}}"
			pos="45 -7"
			hidden="1"
			data-size="{{{8.4*128/108}}} 8.4"
			data-bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-opacity="1."
			data-image="{{{Const::C_ImageUrl_Matchmaking_PartyCode_Action_Button}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Matchmaking_PartyCode_Action_Button}}}"
			data-icon="{{{Const::C_ImageUrl_Icon_Copy_Inc}}}"
			data-iconfocus="{{{Const::C_ImageUrl_Icon_Copy_Inc}}}"
			data-focuscolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-iconcolor="FFF"
			data-iconfocuscolor="FFF"
			data-iconsize="5 5"
			data-opacityunfocus="0.6"
			data-halign="center"
			data-valign="center"
			data-nav-inputs="select;cancel;left;up"
			data-nav-targets="_;_;{{{P}}}button-show-code-2;{{{P}}}button-ok"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
		/>
		<label id="{{{P}}}label-message" pos="0 -17" class="{{{P}}}text-base" textfont="{{{FontManager::C_GameFontRegular}}}" size="120 10" textsize="2.5" textprefix="$i"/>
	</frame>
</frame>
""",
"""
#Include "TextLib" as {{{P}}}TL
#Include "ColorLib" as {{{P}}}CL
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as {{{P}}}Http
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as {{{P}}}Tools
#Include "Libs/Nadeo/TMNext/TrackMania/API/MatchmakingAPI.Script.txt" as {{{P}}}MatchmakingAPI

#Const {{{P}}}C_Event_LeavePopUp 0
#Const {{{P}}}C_Event_NewPartyCode 1

#Const {{{P}}}C_Message_TimeDuration 4000
#Const {{{P}}}C_Message_FadeTime 500

#Const {{{P}}}C_TextHiddenCode "**********"

#Struct {{{P}}}K_Event {
	Integer Type;
	Text PartyCode;
}

#Struct {{{P}}}K_Controls {
	CMlFrame Frame_Global;
	CMlLabel Label_Message;
	CMlLabel Label_CheckingCodeMessage;
	CMlFrame Button_Ok;
	CMlFrame Button_ShowCode_1;
	CMlFrame Button_DeleteCode;
	CMlFrame Button_RefreshCode;
	CMlFrame Button_ShowCode_2;
	CMlFrame Button_CopyCode;
	CMlFrame TextField_Code;
	CMlFrame Button_GenerateCode;
	CMlFrame Frame_GeneratedCode;
	CMlLabel Label_GeneratedCode;
	CMlLabel Label_YourCode;
}

#Struct {{{P}}}K_State {
	Text CurrentPartyCode;
	Text GeneratedPartyCode;
	{{{P}}}Http::K_Request GenerateCode;
	{{{P}}}Http::K_Request CheckCode;
	Boolean FirstCodeGeneration;
	Boolean LeavePopUpIfCodeValidated;
}
""",
"""
declare {{{P}}}K_State {{{P}}}State;
declare {{{P}}}K_Controls {{{P}}}Controls;
declare {{{P}}}K_Event[] {{{P}}}PendingEvents;

Void {{{P}}}LeavePopUp(CMlFrame _Button_Leave) {
	{{{MenuSounds::P}}}PlaySound(This, "ClosePopUpButtonSelect");
	if (_Button_Leave != Null) _Button_Leave.RelativeScale = 1.;

	{{{P}}}PendingEvents.add({{{P}}}K_Event {
		Type = {{{P}}}C_Event_LeavePopUp
	});
}

Void {{{P}}}Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{TextField::P}}}IsTextField(_From)) {
			{{{TextField::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{TextField::P}}}IsTextField(_To)) {
			{{{TextField::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void {{{P}}}DisplayMessage(CMlLabel _Label, Text _Message, Boolean _IsErrorMessage) {
	if (_IsErrorMessage) _Label.TextColor = {{{P}}}CL::Hex6ToRgb("{{{ColorPalette::C_Color_ErrorRed}}}");
	else _Label.TextColor = <1., 1., 1.>;
	_Label.SetText(_Message);
	AnimMgr.Flush(_Label);
	AnimMgr.Add(_Label, "<a opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.Add(_Label, "<a opacity=\"0.\" />", Now+{{{P}}}C_Message_TimeDuration, {{{P}}}C_Message_FadeTime, CAnimManager::EAnimManagerEasing::QuadOut);
}

Void {{{P}}}ShowEntryCode() {
	if ({{{TextField::P}}}GetTextFormatEntry({{{P}}}Controls.TextField_Code) == CMlEntry::ETextFormat::Password) {
		{{{Button::P}}}SetIcon(This, {{{P}}}Controls.Button_ShowCode_1, "{{{Const::C_ImageUrl_Icon_Cam_Unfollow_Inc}}}");
		{{{Button::P}}}SetIconFocus(This, {{{P}}}Controls.Button_ShowCode_1, "{{{Const::C_ImageUrl_Icon_Cam_Unfollow_Inc}}}");	
		{{{TextField::P}}}SetTextFormatEntry(This, {{{P}}}Controls.TextField_Code, CMlEntry::ETextFormat::Basic);
	} else {		
		{{{Button::P}}}SetIcon(This, {{{P}}}Controls.Button_ShowCode_1, "{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}");
		{{{Button::P}}}SetIconFocus(This, {{{P}}}Controls.Button_ShowCode_1, "{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}");
		{{{TextField::P}}}SetTextFormatEntry(This, {{{P}}}Controls.TextField_Code, CMlEntry::ETextFormat::Password);
	}
}

Void {{{P}}}ShowGeneratedCode(Text _Code) {
	{{{P}}}Controls.Label_GeneratedCode.Value = _Code;
	if (_Code != {{{P}}}C_TextHiddenCode) {
		{{{Button::P}}}SetIcon(This, {{{P}}}Controls.Button_ShowCode_2, "{{{Const::C_ImageUrl_Icon_Cam_Unfollow_Inc}}}");
		{{{Button::P}}}SetIconFocus(This, {{{P}}}Controls.Button_ShowCode_2, "{{{Const::C_ImageUrl_Icon_Cam_Unfollow_Inc}}}");	
	} else {		
		{{{Button::P}}}SetIcon(This, {{{P}}}Controls.Button_ShowCode_2, "{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}");
		{{{Button::P}}}SetIconFocus(This, {{{P}}}Controls.Button_ShowCode_2, "{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}");
	}
}

Void {{{P}}}ShowGeneratedCode(){
	if ({{{P}}}Controls.Label_GeneratedCode.Value != {{{P}}}C_TextHiddenCode) {
		{{{P}}}ShowGeneratedCode({{{P}}}C_TextHiddenCode);
	} else {
		{{{P}}}ShowGeneratedCode({{{P}}}State.GeneratedPartyCode);
	}
}

Void {{{P}}}DisplayActionsButtons() {
	// Enter Party Code
	declare Boolean DisplayEnterCodeActions = ({{{P}}}State.CurrentPartyCode != "");
	{{{Button::P}}}SetVisibilityAndNavigation({{{P}}}Controls.Button_ShowCode_1, DisplayEnterCodeActions);
	{{{Button::P}}}SetVisibilityAndNavigation({{{P}}}Controls.Button_DeleteCode, DisplayEnterCodeActions);
	// Your Party Code
	declare Boolean DisplayGeneratedCodeActions = ({{{P}}}State.GeneratedPartyCode != "");
	{{{Button::P}}}SetVisibilityAndNavigation({{{P}}}Controls.Button_ShowCode_2, DisplayGeneratedCodeActions);
	{{{Button::P}}}SetVisibilityAndNavigation({{{P}}}Controls.Button_RefreshCode, DisplayGeneratedCodeActions);
	{{{Button::P}}}SetVisibilityAndNavigation({{{P}}}Controls.Button_CopyCode, DisplayGeneratedCodeActions);
}

Void {{{P}}}DisplayGeneratedCode() {
	declare Boolean DisplayGeneratedCode = ({{{P}}}State.GeneratedPartyCode != "");
	{{{Button::P}}}SetVisibilityAndNavigation({{{P}}}Controls.Button_GenerateCode, !DisplayGeneratedCode);
	{{{P}}}Controls.Label_YourCode.Visible = DisplayGeneratedCode;
	{{{P}}}Controls.Frame_GeneratedCode.Visible = DisplayGeneratedCode;
	{{{P}}}Controls.Label_GeneratedCode.Value = {{{P}}}C_TextHiddenCode;
	{{{P}}}Controls.Label_GeneratedCode.Visible = DisplayGeneratedCode;
	if (DisplayGeneratedCode) {
		{{{Navigation::P}}}ChangeControlTarget(This, {{{P}}}Controls.Button_RefreshCode, "up", {{{P}}}Controls.Button_Ok.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, {{{P}}}Controls.Button_Ok, "down", {{{P}}}Controls.Button_RefreshCode.ControlId);
		{{{P}}}Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), {{{P}}}Controls.Button_Ok);
	} else {
		{{{Navigation::P}}}ChangeControlTarget(This, {{{P}}}Controls.Button_GenerateCode, "up", {{{P}}}Controls.Button_Ok.ControlId);
		{{{Navigation::P}}}ChangeControlTarget(This, {{{P}}}Controls.Button_Ok, "down", {{{P}}}Controls.Button_GenerateCode.ControlId);
	}
	{{{P}}}DisplayActionsButtons();
}

Void {{{P}}}DisplayRegeneratedCode() {
	if ({{{P}}}Controls.Label_GeneratedCode.Value != {{{P}}}C_TextHiddenCode) {
		{{{P}}}Controls.Label_GeneratedCode.Value = {{{P}}}State.GeneratedPartyCode;
	}
	{{{P}}}DisplayMessage({{{P}}}Controls.Label_Message, "{{{Text_CodeGenerated}}}", False);
}

Void {{{P}}}ValidatePartyCode() {
	// Do not check code if empty, it's a way to reset the party code
	if ({{{P}}}State.CurrentPartyCode == "") {
		{{{P}}}PendingEvents.add({{{P}}}K_Event {
			Type = {{{P}}}C_Event_NewPartyCode,
			PartyCode = {{{P}}}State.CurrentPartyCode
		});
		if ({{{P}}}State.LeavePopUpIfCodeValidated) {
			{{{P}}}State.LeavePopUpIfCodeValidated = False;
			{{{P}}}LeavePopUp(Null); 
		} else {
			{{{P}}}DisplayMessage({{{P}}}Controls.Label_CheckingCodeMessage, "{{{Text_CodeDesactivated}}}", False);
			{{{P}}}Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), {{{P}}}Controls.Button_Ok);
		}
	} else {
		if ({{{P}}}Http::IsInitialized({{{P}}}State.CheckCode)) {
			{{{P}}}State.CheckCode = {{{P}}}Http::Destroy({{{P}}}State.CheckCode);
		}
		{{{P}}}State.CheckCode = {{{P}}}MatchmakingAPI::CheckPartyCode({{{P}}}State.CurrentPartyCode);
	}
}

Void {{{P}}}Select(CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return;

	switch (_Control.ControlId) {
		case "{{{P}}}button-show-code-1": {
			// Sync show code buttons 1 and 2
			if ({{{P}}}State.GeneratedPartyCode != "") {{{P}}}ShowGeneratedCode();
			{{{P}}}ShowEntryCode();
		}
		case "{{{P}}}button-show-code-2": {
			// Sync show code buttons 1 and 2
			{{{P}}}ShowGeneratedCode();
			{{{P}}}ShowEntryCode();
		}
		case "{{{P}}}button-delete-code": {
			{{{TextField::P}}}SetValue(This, {{{P}}}Controls.TextField_Code, "", True);
		}
		case "{{{P}}}button-ok": {
			{{{P}}}State.LeavePopUpIfCodeValidated = True;
			{{{P}}}ValidatePartyCode();
		}
		case "{{{P}}}button-generate": {
			if ({{{P}}}Http::IsInitialized({{{P}}}State.GenerateCode)) {
				{{{P}}}State.GenerateCode = {{{P}}}Http::Destroy({{{P}}}State.GenerateCode);
			}
			{{{P}}}State.GenerateCode = {{{P}}}MatchmakingAPI::GeneratePartyCode();
		}
		case "{{{P}}}button-refresh-code": {
			if ({{{P}}}Http::IsInitialized({{{P}}}State.GenerateCode)) {
				{{{P}}}State.GenerateCode = {{{P}}}Http::Destroy({{{P}}}State.GenerateCode);
			}
			{{{P}}}State.GenerateCode = {{{P}}}MatchmakingAPI::GeneratePartyCode();
		}
		case "{{{P}}}button-copy-code": {
			System.ClipboardSet({{{P}}}State.GeneratedPartyCode);
			{{{P}}}DisplayMessage({{{P}}}Controls.Label_Message, "{{{Text_CodeCopied}}}", False);
		}
		case "{{{P}}}button-leave": {{{P}}}LeavePopUp(_Control as CMlFrame);
		case "{{{P}}}frame-pop-up-backgroud": {{{P}}}LeavePopUp(Null);
	}
}

Void {{{P}}}Private_Display(Boolean _Visible) {
	{{{P}}}Controls.Frame_Global.Visible = _Visible;
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", _Visible);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupEscapePopUp}}}", _Visible);	
}

Boolean {{{P}}}IsDisplayed() {
	return {{{P}}}Controls.Frame_Global.Visible;
}

Void {{{P}}}Show() {
	{{{P}}}Private_Display(True);
	{{{P}}}Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), {{{P}}}Controls.Button_Ok);
}

Void {{{P}}}Hide() {
	{{{P}}}Private_Display(False);
}

Void {{{P}}}ResetActionsButtons() {
	// Enter Party Code
	{{{Button::P}}}SetIcon(This, {{{P}}}Controls.Button_ShowCode_1, "{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}");
	{{{Button::P}}}SetIconFocus(This, {{{P}}}Controls.Button_ShowCode_1, "{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}");
	{{{TextField::P}}}SetTextFormatEntry(This, {{{P}}}Controls.TextField_Code, CMlEntry::ETextFormat::Password);
	// Your Party Code
	{{{Button::P}}}SetIcon(This, {{{P}}}Controls.Button_ShowCode_2, "{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}");
	{{{Button::P}}}SetIconFocus(This, {{{P}}}Controls.Button_ShowCode_2, "{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}");
}

Void {{{P}}}ResetPartyCode() {
	{{{P}}}State = {{{P}}}K_State {
		CurrentPartyCode = "",
		GeneratedPartyCode = "",
		FirstCodeGeneration = True,
		LeavePopUpIfCodeValidated = False
	};
	{{{TextField::P}}}SetValue(This, {{{P}}}Controls.TextField_Code, "", True);
	{{{P}}}ResetActionsButtons();
	{{{P}}}DisplayGeneratedCode();
}

***MainInit***
***
declare CMlLabel Label_SubTitle;
***

***MainStart***
***
{{{P}}}Controls.Frame_Global <=> (Page.GetFirstChild("{{{P}}}frame-global") as CMlFrame);
{{{P}}}Controls.Label_Message <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}label-message") as CMlLabel);
{{{P}}}Controls.Label_CheckingCodeMessage <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}label-check-code-message") as CMlLabel);
{{{P}}}Controls.Button_Ok <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}button-ok") as CMlFrame);
{{{P}}}Controls.Button_ShowCode_1 <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}button-show-code-1") as CMlFrame);
{{{P}}}Controls.Button_DeleteCode <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}button-delete-code") as CMlFrame);
{{{P}}}Controls.Button_RefreshCode <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}button-refresh-code") as CMlFrame);
{{{P}}}Controls.Button_ShowCode_2 <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}button-show-code-2") as CMlFrame);
{{{P}}}Controls.Button_CopyCode <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}button-copy-code") as CMlFrame);
{{{P}}}Controls.TextField_Code <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}textfield-code") as CMlFrame);
{{{P}}}Controls.Button_GenerateCode <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}button-generate") as CMlFrame);
{{{P}}}Controls.Frame_GeneratedCode <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}frame-generated-code") as CMlFrame);
{{{P}}}Controls.Label_GeneratedCode <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}label-generated-code") as CMlLabel);
{{{P}}}Controls.Label_YourCode <=> ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}label-your-code") as CMlLabel);
Label_SubTitle = ({{{P}}}Controls.Frame_Global.GetFirstChild("{{{P}}}label-sub-title") as CMlLabel);

{{{P}}}State = {{{P}}}K_State {
	CurrentPartyCode = "",
	GeneratedPartyCode = "",
	GenerateCode = {{{P}}}Http::GetEmptyRequest(),
	CheckCode = {{{P}}}Http::GetEmptyRequest(),
	FirstCodeGeneration = True,
	LeavePopUpIfCodeValidated = False
};

{{{P}}}Tools::FitLabelValue(Label_SubTitle, 2.5, 1., 0.25);

{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", False);
{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupEscapePopUp}}}", False);	
***

***MainLoop***
***
{{{P}}}PendingEvents = [];

if (PageIsVisible) {
	if ({{{P}}}Controls.Frame_Global.Visible) {
		foreach (Event in {{{TextField::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{TextField::P}}}C_EventType_Update: {
					if (Event.Control != Null && Event.Control.ControlId == {{{P}}}Controls.TextField_Code.ControlId) {
						if (Event.Value != {{{P}}}State.CurrentPartyCode) {
							{{{P}}}State.CurrentPartyCode = Event.Value;
							{{{P}}}DisplayActionsButtons();
							{{{P}}}ValidatePartyCode();
						}
					}
				}
			}
		}

		foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
			if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
				switch (Event.Type) {
					case {{{Navigation::P}}}C_EventType_NavigateInput: {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							{{{P}}}Select(Event.To);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							{{{P}}}LeavePopUp(Null);
						} else {
							{{{P}}}Focus(Event.From, Event.To);
						}
					}
					case {{{Navigation::P}}}C_EventType_NavigateMouse: {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							{{{P}}}Select(Event.To);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							{{{P}}}Focus(Event.From, Event.To);
						}
					}
				}
			} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupEscapePopUp}}}")) {
				switch (Event.Type) {
					case {{{Navigation::P}}}C_EventType_NavigateMouse: {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							{{{P}}}Select(Event.To);
						}
					}
				}
			}
		}
	}
}
// Retrieve generated code
if ({{{P}}}Http::IsInitialized({{{P}}}State.GenerateCode)) {
	{{{P}}}State.GenerateCode = {{{P}}}Http::Update({{{P}}}State.GenerateCode);
	if (!{{{P}}}Http::IsRunning({{{P}}}State.GenerateCode)) {
		if ({{{P}}}Http::IsSuccess({{{P}}}State.GenerateCode)) {
			{{{P}}}State.GeneratedPartyCode = {{{P}}}MatchmakingAPI::GetResponseFromPartyCode({{{P}}}State.GenerateCode);
			{{{TextField::P}}}SetValue(This, {{{P}}}Controls.TextField_Code, {{{P}}}State.GeneratedPartyCode, True);
			if ({{{P}}}State.FirstCodeGeneration) {
				{{{P}}}DisplayGeneratedCode();
				{{{P}}}State.FirstCodeGeneration = False;
				// Reset "Enter party code" show/hide button at first code generation to be in sync after
				{{{P}}}ResetActionsButtons();
			} else {
				{{{P}}}DisplayRegeneratedCode();
			} 
		} else {
			{{{P}}}DisplayMessage({{{P}}}Controls.Label_Message, TL::Compose("{{{Text_CodeGenerationError}}}", ""^{{{P}}}State.GenerateCode.StatusCode), True);
		}
		{{{P}}}State.GenerateCode = {{{P}}}Http::Destroy({{{P}}}State.GenerateCode);
	}
}

// Check party code 
if ({{{P}}}Http::IsInitialized({{{P}}}State.CheckCode)) {
	{{{P}}}State.CheckCode = {{{P}}}Http::Update({{{P}}}State.CheckCode);
	if (!{{{P}}}Http::IsRunning({{{P}}}State.CheckCode)) {
		if ({{{P}}}Http::IsSuccess({{{P}}}State.CheckCode)) {
			{{{P}}}PendingEvents.add({{{P}}}K_Event {
				Type = {{{P}}}C_Event_NewPartyCode,
				PartyCode = {{{P}}}State.CurrentPartyCode
			});
			{{{P}}}DisplayMessage({{{P}}}Controls.Label_CheckingCodeMessage, "{{{Text_CodeActivated}}}", False);
			if ({{{P}}}State.LeavePopUpIfCodeValidated) {{{P}}}LeavePopUp(Null); 
		} else {
			switch ({{{P}}}State.CheckCode.StatusCode) {
				case {{{MatchmakingStruct::P}}}C_Status_PartyCode_NotFound: {
					{{{P}}}DisplayMessage({{{P}}}Controls.Label_CheckingCodeMessage, "{{{Text_CheckingCodeError}}}", True);
				}
				case {{{MatchmakingStruct::P}}}C_Status_PartyCode_IncompatiblePlatform: {
					if ({{{UserStore::P}}}IsCrossPlayActive()) {
						{{{P}}}DisplayMessage({{{P}}}Controls.Label_CheckingCodeMessage, "{{{Text_CheckingCodeCrossplayEnabledError}}}", True);
					} else {
						{{{P}}}DisplayMessage({{{P}}}Controls.Label_CheckingCodeMessage, "{{{Text_CheckingCodeCrossplayDisabledError}}}", True);
					}
				}
				default: {
					{{{P}}}DisplayMessage({{{P}}}Controls.Label_CheckingCodeMessage, "{{{Text_CheckingCodeErrorDefault}}}", True);
				}
			}
		}
		{{{P}}}State.LeavePopUpIfCodeValidated = False;
		{{{P}}}State.CheckCode = {{{P}}}Http::Destroy({{{P}}}State.CheckCode);
	}
}
***
""",
[
	Navigation::ComponentV2(),
	TextField::ComponentV2(),
	Button::ComponentV2(),
	Transition::ComponentV2(),
	MatchmakingStruct::Component(),
	MenuSounds::ComponentV2(),
	UserStore::ComponentV2()
],
[]
);
}