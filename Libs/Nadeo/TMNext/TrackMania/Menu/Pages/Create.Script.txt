/** 
 *	Page: Create
 */
#Const Version		"2023-05-22"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/Create.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_Create"
#Const C_NavGroupName "navgroup-page-create"

#Const C_Index_MapEditor 0
#Const C_Index_MapReview 1
#Const C_Index_ReplayEditor 2
#Const C_Index_Garage 3

#Const C_ButtonNames [
	//L16N [Page Create] Create or edit a track in the editor. This text will be displayed on 3 narrow lines maximum. Try to avoid words longer than 12 characters. You can use a dash (-) to split longer words.
	0 => _("Track editor"),
	//L16N [Page Create] Test your and others tracks online with other players. This text will be displayed on 3 narrow lines maximum. Try to avoid words longer than 12 characters. You can use a dash (-) to split longer words.
	1 => _("Track review"),
	//L16N [Page Create] Edit a replay. This text will be displayed on 3 narrow lines maximum. Try to avoid words longer than 12 characters. You can use a dash (-) to split longer words.
	2 => _("Replay editor"),
	//L16N [Page Create] Customize your car. This text will be displayed on 3 narrow lines maximum. Try to avoid words longer than 12 characters. You can use a dash (-) to split longer words.
	3 => _("Garage")
]

#Const C_ButtonImagePath_MapEditor_Console "file://Media/Manialinks/Nadeo/TMNext/Menus/PageCreate/Menu_Create_TrackEditor_Vertical.dds"
#Const C_ButtonImagesPathList [
	0 => "file://Media/Manialinks/Nadeo/TMNext/Menus/PageCreate/Menu_Create_TrackEditor_Horizontal.dds",
	1 => "file://Media/Manialinks/Nadeo/TMNext/Menus/PageCreate/Menu_Create_TrackReview.dds",
	2 => "file://Media/Manialinks/Nadeo/TMNext/Menus/PageCreate/Menu_Create_ReplayEditor.dds",
	3 => "file://Media/Manialinks/Nadeo/TMNext/Menus/PageCreate/Menu_Create_Garage.dds"
]

#Const Const::C_Choices_ConnectionRestored as C_Choices_ConnectionRestored

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_Back = _("Back");
	//L16N Test others tracks online with other players 
	declare Text Text_MapReview = _("Try out others' creations");
	// Description of the offline pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_Offline = [
		PopUpMultiChoice::CreateDescriptionPart(Const::C_OfflinePopUp_Description, <120., 30.>, 3., FontManager::C_GameFontSemiBold, "$t$i", <1., 1., 1.>, False)
	];

	declare Boolean PlaformIsFromFirstParty = Platform::IsFromFirstParty(System);

	declare Vec2 Size_HorizontalButton = MLHelpers::KeepRatioFromY(1232., 556., 46.3);
	declare Vec2 Size_VerticalButton = MLHelpers::KeepRatioFromY(1004., 1152., 95.8);

	declare Vec2 Pos_ButtonMapEditorConsole = <-35.5, -7.65>;
	declare Vec2 Pos_ButtonMapEditor = MLHelpers::SkewX(<-48., 17.1>, 10.);
	declare Vec2 Pos_ButtonMapReview = MLHelpers::SkewX(<-48., -32.5>, 10.);
	declare Vec2 Pos_ButtonGarage = MLHelpers::SkewX(<50., 17.1>, 10.);
	declare Vec2 Pos_ButtonReplayEditor = MLHelpers::SkewX(<50., -32.5>, 10.);

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="left" valign="center2" textsize="2.5" textprefix="$t$i" textfont="{{{FontManager::C_GameFontSemiBold}}}" italicslope=".2" textcolor="FFFFFF"/>
</stylesheet>

<!-- Pop-ups -->
<frameinstance 
	id="popupmultichoice-offline" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}"
	modelid="{{{PopUpMultiChoice::C_Name}}}"
	data-title="{{{Const::C_OfflinePopUp_Title}}}"
	data-description="{{{TL::MLEncode(Description_Offline.tojson())}}}"
	data-choices="{{{TL::MLEncode(C_Choices_ConnectionRestored.tojson())}}}"
	data-default-focus-second-button="1"
	hidden="1"
/>

<!-- Frame global -->
<frame id="frame-global">
	<frame id="frame-buttons">
		<frameinstance
			id="button-map-editor" pos="{{{Pos_ButtonMapEditor.X}}} {{{Pos_ButtonMapEditor.Y}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{C_ButtonNames[C_Index_MapEditor]}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{C_ButtonImagesPathList[C_Index_MapEditor]}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus=".0"
			data-isblink="1"
			data-textsize="5"
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-autonewline="1" data-maxline="2"
			data-valign="center" data-halign="center"
			data-tilthitbox="10"
			data-nav-inputs="select;cancel;right;down"
			data-nav-targets="_;_;button-garage;button-map-review"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		
		<frame id="frame-map-review" pos="{{{Pos_ButtonMapReview.X}}} {{{Pos_ButtonMapReview.Y}}}">
			<frameinstance
				id="button-map-review"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{C_ButtonNames[C_Index_MapReview]}}}"
				data-secondarylabel="label-map-review"
				data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
				data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-image="{{{C_ButtonImagesPathList[C_Index_MapReview]}}}"
				data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
				data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
				data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
				data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
				data-contouropacityunfocus=".0"
				data-isblink="1"
				data-textsize="5"
				data-textitalicslope="0.2"
				data-textopacityunfocus="0.8"
				data-textxpos="0.13" data-textypos="-0.13"
				data-texthalign="left" data-textvalign="top"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-valign="center" data-halign="center"
				data-tilthitbox="10"
				data-nav-inputs="select;cancel;up;right;down"
				data-nav-targets="_;_;button-map-editor;button-replay-editor;button-back"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
			/>
			<label id="label-map-review" class="text-semibold" text="{{{Text_MapReview}}}" pos="{{{-Size_HorizontalButton.X/2 * 0.75}}} {{{Size_HorizontalButton.Y/2 * 0.28}}}" size="{{{Size_HorizontalButton.X * 0.75}}} 10" opacity="0.8" z-index="10"/>
		</frame>

		<frameinstance
			id="button-garage" pos="{{{Pos_ButtonGarage.X}}} {{{Pos_ButtonGarage.Y}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{C_ButtonNames[C_Index_Garage]}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{C_ButtonImagesPathList[C_Index_Garage]}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus=".0"
			data-isblink="1"
			data-textsize="5"
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-valign="center" data-halign="center"
			data-tilthitbox="10"
			data-nav-inputs="select;cancel;left;down"
			data-nav-targets="_;_;button-map-editor;button-replay-editor"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
				
		<frameinstance
			id="button-replay-editor" pos="{{{Pos_ButtonReplayEditor.X}}} {{{Pos_ButtonReplayEditor.Y}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{C_ButtonNames[C_Index_ReplayEditor]}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{C_ButtonImagesPathList[C_Index_ReplayEditor]}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus=".0"
			data-isblink="1"
			data-textsize="5"
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-valign="center" data-halign="center"
			data-tilthitbox="10"
			data-nav-inputs="select;cancel;left;up;down"
			data-nav-targets="_;_;button-map-review;button-garage;button-back"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="{{{PlaformIsFromFirstParty}}}"
			hidden="{{{PlaformIsFromFirstParty}}}"
		/>
	</frame>

	<frameinstance
		id="button-back" pos="-151.5 -73" z-index="1"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;up;right;"
		data-nav-targets="_;_;button-map-review;button-map-review"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "Libs/Nadeo/CommonLibs/Common/ReportContext.Script.txt" as ReportContext
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo

#Const C_ButtonImagePath_MapEditor_Console {{{dump(C_ButtonImagePath_MapEditor_Console)}}}
#Const C_PlaformIsFromFirstParty {{{dump(PlaformIsFromFirstParty)}}}
#Const C_Choice_Reconnect {{{dump(Const::C_Choice_Reconnect)}}}
""",
"""
Void SetLabelOpacity(CMlLabel _Label, Boolean _IsFocused) {
	AnimMgr.Flush(_Label);
	if (_IsFocused) {
		AnimMgr.Add(_Label, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Label, "<anim opacity=\"0.8\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
			if (_From.DataAttributeExists("secondarylabel")) {
				SetLabelOpacity(_From.Parent.GetFirstChild(_From.DataAttributeGet("secondarylabel")) as CMlLabel, False);
			}
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
			if (_To.DataAttributeExists("secondarylabel")) {
				SetLabelOpacity(_To.Parent.GetFirstChild(_To.DataAttributeGet("secondarylabel")) as CMlLabel, True);
			}
		}
	}
}

Void Select(CMlControl _Control, CMlFrame _PopUpMultiChoice_Offline) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return;

	switch(_Control.ControlId) {
		case "button-back": {{{Router::P}}}PushParent(This);
		case "button-map-editor": {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_MapEditorSettings}}}", "{{{RoutePaths::C_Path_Create}}}");
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_MapEditorSettings}}}");
		}
		case "button-map-review": {
			if ({{{UserStore::P}}}IsOfflineMode()) {
				{{{PopUpMultiChoice::P}}}Open(This, _PopUpMultiChoice_Offline);
			} else if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_AccessServerReview)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_AccessServerReview)
				]);
			} else {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ServerReview}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ServerReview}}}");
			}
		}
		case "button-replay-editor": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_OpenReplayEditor)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_OpenReplayEditor)
				]);
			} else {
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_EditReplay}}}");
			}
		}
		case "button-garage": {
			if ({{{UserStore::P}}}IsOfflineMode() && C_PlaformIsFromFirstParty) {
				{{{PopUpMultiChoice::P}}}Open(This, _PopUpMultiChoice_Offline);
			} else if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_OpenSkinEditor)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_OpenSkinEditor)
				]);
			} else {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_Garage}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Garage}}}");
			}
		}
	}
}

Void InitButtons(CMlFrame _Frame_Buttons, CMlFrame _Button_Back) {
	declare CMlFrame Frame_MapReview = (_Frame_Buttons.GetFirstChild("frame-map-review") as CMlFrame);
	declare CMlFrame Button_MapReview = (Frame_MapReview.GetFirstChild("button-map-review") as CMlFrame);
	if (C_PlaformIsFromFirstParty) {
		declare CMlFrame Button_MapEditor = (_Frame_Buttons.GetFirstChild("button-map-editor") as CMlFrame);
		declare CMlFrame Button_Garage = (_Frame_Buttons.GetFirstChild("button-garage") as CMlFrame);
		declare CMlFrame Button_ReplayEditor = (_Frame_Buttons.GetFirstChild("button-replay-editor") as CMlFrame);

		_Frame_Buttons.RelativePosition_V3.X = _Frame_Buttons.RelativePosition_V3.X - 15.;
		Button_MapEditor.RelativePosition_V3 = {{{Pos_ButtonMapEditorConsole}}};
		{{{Button::P}}}SetSize(This, Button_MapEditor, {{{Size_VerticalButton}}});
		declare Vec2 LabelSize = <{{{Size_VerticalButton.X * 0.65}}}, 10.>;
		{{{Button::P}}}SetLabelSize(This, Button_MapEditor, LabelSize);
		{{{Button::P}}}SetImage(This, Button_MapEditor, C_ButtonImagePath_MapEditor_Console);
		{{{Button::P}}}SetContourImage(This, Button_MapEditor, "{{{Const::C_ImageUrl_Common_VerticalButton_Contour}}}");
		{{{Button::P}}}SetGradientImage(This, Button_MapEditor, "{{{Const::C_ImageUrl_Common_VerticalButton_Gradient}}}");
		{{{Button::P}}}SetTextXPos(This, Button_MapEditor, 0.26);
		{{{Button::P}}}SetTextYPos(This, Button_MapEditor, -0.063);
		
		Frame_MapReview.RelativePosition_V3 = Button_ReplayEditor.RelativePosition_V3;
		{{{Navigation::P}}}ChangeControlTargets(This, Button_MapEditor, ["down", "left"], [_Button_Back.ControlId, _Button_Back.ControlId]);
		{{{Navigation::P}}}ChangeControlTargets(This, _Button_Back, ["up", "right"], [Button_MapEditor.ControlId, Button_MapEditor.ControlId]);
		{{{Navigation::P}}}ChangeControlTarget(This, Button_Garage, "down", Button_MapReview.ControlId);
		{{{Navigation::P}}}ChangeControlTargets(This, Button_MapReview, ["up", "left"], [Button_Garage.ControlId, Button_MapEditor.ControlId]);
	} else {
		{{{Navigation::P}}}ChangeControlTarget(This, Button_MapReview, "left", _Button_Back.ControlId);
	}
}

Void FocusDefaultControl(CMlFrame _Frame_Buttons) {
	foreach (Control in _Frame_Buttons.Controls) {
		if ({{{Button::P}}}IsButton(Control) && !{{{Navigation::P}}}IsLocked(Control)) {
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Control);
			break;
		}
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame PopUpMultiChoice_Offline;
declare CMlFrame Frame_Buttons;
declare CMlFrame Button_Back;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
PopUpMultiChoice_Offline <=> (Page.GetFirstChild("popupmultichoice-offline") as CMlFrame);
Frame_Buttons <=> (Frame_Global.GetFirstChild("frame-buttons") as CMlFrame);
Button_Back <=> (Frame_Global.GetFirstChild("button-back") as CMlFrame);

InitButtons(Frame_Buttons, Button_Back);
FocusDefaultControl(Frame_Buttons);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_Create}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_EnteringRoute: {
				if ({{{UserStore::P}}}IsOfflineMode()) {
					ControllerInfo::SetButtons(["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "B" => "{{{Text_Back}}}"]);
				} else {
					ControllerInfo::SetButtons(["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "{{{Const::C_NavInput_ClubWidget}}}" => "{{{Const::C_Text_ClubWidget}}}", "B" => "{{{Text_Back}}}"]);
				}
				ReportContext::SetMenuSection(System, ReportContext::C_MenuSection_Create);

				// Refresh current focus for TTS
				Focus(Null, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"));
			}
		}
	}

	
	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Cancel: {{{Router::P}}}PushParent(This);
						case CMlScriptEvent::EMenuNavAction::Select: Select(Event.To, PopUpMultiChoice_Offline);
						default: Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: Select(Event.To, PopUpMultiChoice_Offline);
						case CMlScriptEvent::Type::MouseOver: Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == PopUpMultiChoice_Offline.Id) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !Event.PopUpMultiChoice.Visible);
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					switch (Event.SelectedIndex) {
						case C_Choice_Reconnect: {
							SendCustomEvent("{{{Const::C_Event_ConnectionError_RequestRestart}}}", []);
						}
					}
				}
			}
		}
	}
}
foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
	switch (Event.Type) {
		case "{{{Router::C_Event_LeavingRoute}}}": {
			// Updates the focus when the player is leaving the page to avoid a visible focus update when entering the page
			if ({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}") == Button_Back) {
				FocusDefaultControl(Frame_Buttons);
			}
			if ({{{PopUpMultiChoice::P}}}IsDisplayed(PopUpMultiChoice_Offline)) {
				{{{PopUpMultiChoice::P}}}Close(This, PopUpMultiChoice_Offline);
			}
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	ExpendableButton::ComponentV2(),
	Navigation::ComponentV2(),
	Router::ComponentV2(),
	Transition::ComponentV2(), 
	PopUpMultiChoice::ComponentV2(),
	UserStore::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}