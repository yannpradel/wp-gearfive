/** 
 *	Page: TOTDChannelDisplay
 */
#Const Version		"2023-05-30"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/TOTDChannelDisplay.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MedalStack.Script.txt" as MedalStack
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/CupOfTheDayStatus.Script.txt" as CupOfTheDayStatus
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/MapRankings.Script.txt" as MapRankings
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/NavigationTabs.Script.txt" as NavigationTabs
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ProfilePlayerInfo.Script.txt" as ProfilePlayerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ZoneSelection.Script.txt" as ZoneSelection
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_TOTDChannelDisplay"
#Const C_NavGroupName "navgroup-page-totd-channel-display"
#Const C_NavGroup_Global "navgroup-page-totd-channel-display-global"

// `PlayMultiplayerModeWithUGC` also check `PlayMultiplayerAsyncWithUGC` at the same time
// No need to check for `PlayMultiplayerAsyncWithUGC` before displaying the leaderboards
#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::PlayMultiplayerModeWithUGC
]

#Const C_EventsDelay 150
#Const C_Color_COTD "ffc600"
#Const C_Color_TOTD_Day "1b4f67"

#Const Const::C_TabNames_Campaigns as C_TabNames
#Const Const::C_Day_Names as C_DayNames

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_Back = _("Back");
	//L16N[Track of the Day channel] Text displayed above the pop-up title to signal that the server is online
	declare Text Text_Live = _("|Room|Live");
	//L16N[Track of the Day channel] Title of the pop-up
	declare Text Text_TrackDay = _("Track of the day");
	//L16N[Track of the Day channel] Title of the upcoming Cups of the Day section
	declare Text Text_COTD = _("Cup of the day");
	//L16N[Track of the Day channel] Button that will send the player on the map review activity page
	declare Text Text_MRButton = _("Review and submit for next tracks of the day");
	//L16N[Track of the Day channel] Text displayed above the rank of the player. e.g. "Top 1485".
	declare Text Text_Top = _("Top");
	//L16N[Track of the Day channel] Go to server with other players.
	declare Text Text_Join = _("Join");
	//L16N[Track of the Day channel] Text above the time until next day
	declare Text Text_Next = _("Next");
	//L16N[Track of the Day channel] Text displayed when the player is unranked on the given daily map
	declare Text Text_NoRank = _("Not ranked");
	//L16N[Track of the Day channel] Text displayed when the player have no medals on the given daily map
	declare Text Text_NoMedals = _("No medals");
	//L16N[Track of the Day channel] The cup of the day starts in less than one hour (more than 15min)
	declare Text Text_UpcomingCOTD = _("The Cup of the Day will start in less than one hour");
	//L16N[Track of the Day channel] Message to show the remaining time before the next Cup of the Day, will be followed by a timer. e.g. "Next Cup of the Day in 1:32:51"
	declare Text Text_NextCOTD = _("Next Cup of the Day in %1");
	//L16N[Track of the Day channel] Message to show the remaining time before the end of the Cup of the Day qualifications, will be followed by a timer. e.g. "Qualifications end in 3:51"
	declare Text Text_QualifCOTD = _("Qualifications end in %1");
	//L16N[Track of the Day channel] Text preceded by a button icon (i.e. "X") to inform the player that they can access the ranking for the selected track by pressing the associated button on their controller.
	declare Text Text_AccessMapRankings = _("Track rankings");
	//L16N[Track of the Day channel] Text preceded by a button icon (i.e. "X") to inform the player that they can exit the ranking for the selected track by pressing the associated button on their controller.
	declare Text Text_ExitMapRankings = _("Exit track rankings");
	//L16N[Track of the Day channel] Text preceded by a button icon (i.e. "X") to inform the player that they can select the focused element by pressing the associated button on their controller.
	declare Text Text_Select = _("Select");
	//L16N[Track of the Day channel] Text of the Loading spinner informing the player that the track of the day data are currently loading.
	declare Text Text_RetrievingTOTD = _("Retrieving track of the day data");
	//L16N[Track of the Day channel] Text of the Loading spinner informing the player that they are currently joining the track of the day server.
	declare Text Text_Joining = _("Joining server...");
	//L16N [rack of the Day channel] Text preceded by a button icon (i.e. "X") to inform the player that they can access the author profile for the selected track by pressing the associated button on their controller.
	declare Text Text_ShowAuthorProfile = _("Show author profile");

	declare Vec2 Size_MapReviewButton = <111., 12.>;
	declare Vec2 Size_DayButton = MLHelpers::KeepRatioFromY(539., 669., 55.5);
	declare Vec2 Size_BackgroundCOTD = <44.5, 14.7>;

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-cotd">
	<frameinstance id="frame-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_BackgroundCOTD.X}}}" data-height="{{{Size_BackgroundCOTD.Y}}}" data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}" data-color="{{{ColorPalette::C_Color_GreenThree}}}" z-index="0"/>
	<label id="label-time" size="{{{Size_BackgroundCOTD.X*0.9}}} {{{Size_BackgroundCOTD.Y}}}" pos="0 -0.5" class="text-semibold" textsize="6." z-index="1"/>
</framemodel>

<!-- Frame global -->
<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="action1" data-nav-targets="_" data-nav-group="{{{C_NavGroup_Global}}}" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" data-header-image="{{{Const::C_ImageUrl_PopUp_TOTD_Header}}}" z-index="-1"/>
	<frameinstance id="loadingspinner-retrieve-info" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-120., 20., 10.)}}}" data-label="{{{Text_RetrievingTOTD}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" data-size="10 10" scale="0.7" z-index="2"/>
	
	<!-- Player profile page -->
	<frame id="frame-profile" hidden="1" z-index="5">
		<frameinstance
			modelid="{{{ProfilePlayerInfo::C_Name}}}"
			data-enable-players-pager="0"
			data-enable-zone-selection="0"
			data-enable-my-access-info="0"
		/>
	</frame>
	
	<!-- Header -->
	<frameinstance id="frame-navigation-tabs" modelid="{{{NavigationTabs::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, 34.5, 10.)}}}" data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}" data-events-delay="{{{C_EventsDelay}}}" data-halign="left" z-index="1"/>
	<label id="label-title" pos="{{{MLHelpers::Skew(-126.5, 61.5, 10.)}}}" size="135 20" class="text-extrabold" text="{{{Text_TrackDay}}}" textsize="13" halign="left" z-index="1"/>
	<label id="label-totd-day" pos="{{{MLHelpers::Skew(104.5, 51.2, 10.)}}}" size="50 10" class="text-extrabold" textsize="7" textcolor="{{{C_Color_TOTD_Day}}}" z-index="2" />
	<label id="label-cotd-info" pos="{{{MLHelpers::Skew(-125., 53., 10.)}}}" size="150 10" class="text-semibold" halign="left" textcolor="{{{C_Color_COTD}}}" textsize="2.5" z-index="3"/>
	<frame id="frame-live-indicator" pos="{{{MLHelpers::Skew(-124.5, 72., 10.)}}}" z-index="2">
		<quad id="quad-live-indicator" pos="0 0.5" size="3 3" halign="left" valign="center" image="{{{Const::C_ImageUrl_Icon_Radio_Button_On}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" z-index="5"/>
		<label id="label-live-indicator" pos="4 0" size="50 1" class="text-extrabold" text="{{{Text_Live}}}" textsize="3.5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" halign="left" z-index="5"/>
	</frame>

	<!-- Body -->
	<frame id="frame-content" z-index="1">
		<frameinstance id="frame-zone-selection" modelid="{{{ZoneSelection::C_Name}}}" pos="{{{MLHelpers::Skew(-75., 11., 10.)}}}" z-index="3"/>
		<label id="label-info" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-semibold" halign="left" textsize="2.5" textcolor="{{{ColorPalette::C_Color_ErrorRed}}}" />
		<frame id="frame-pinned-club" pos="{{{MLHelpers::Skew(-120., 11., 10.)}}}" z-index="3">
			<quad id="quad-club-pin" size="5 5" image="{{{Const::C_ImageUrl_Icon_Pin_Full}}}" colorize="FFFFFF" halign="right" valign="center"/>
			<label id="label-club-name" class="text-extrabold" pos="0 -0.5" textsize="4" halign="left" filter-profanities="OnlyIfNotTranslated" z-index="1"/>
		</frame>

		<frame id="frame-totd-days" pos="{{{MLHelpers::Skew(-70.3, -27.5, 10.)}}}">
			<frame id="frame-previous-day" pos="{{{-Size_DayButton.X + MLHelpers::SkewX(Size_DayButton.Y, 10.) - 2.}}} 0">
				<quad id="quad-bg" image="{{{Const::C_ImageUrl_PopUp_TOTD_Day}}}" colorize="{{{ColorPalette::C_Color_GreenFour}}}" size="{{{Size_DayButton.X}}} {{{Size_DayButton.Y}}}" halign="center" valign="center" opacity=".6"/>
				<label id="label-day" pos="{{{MLHelpers::Skew(0., Size_DayButton.Y*0.38, 10.)}}}" size="{{{Size_DayButton.X - 12.}}} 10" class="text-extrabold" textcolor="{{{ColorPalette::C_Color_GreenTwo}}}" textsize="6" z-index="2"/>
				<frameinstance id="loadingspinner-previous-day" modelid="{{{LoadingSpinner::C_Name}}}" z-index="5"/>
				<frame id="frame-medals" z-index="1" hidden="1">
					<label id="label-time" class="text-semibold" size="{{{Size_DayButton.X-14.}}} 10" pos="{{{MLHelpers::Skew(-0., 8., 10.)}}}" textsize="3" z-index="3"/>
					<label id="label-no-medals" class="text-extrabold" text="{{{Text_NoMedals}}}" size="{{{Size_DayButton.X-14.}}} 10" textsize="3" textcolor="{{{ColorPalette::C_Color_GreenTwo}}}" autonewline="1" maxline="2" z-index="3"/>
					<frameinstance id="frame-medal-stack" modelid="{{{MedalStack::C_Name}}}" pos="{{{MLHelpers::Skew(-0., -7., 10.)}}}" scale="1.6" data-bigmedaldirection="{{{MedalStack::C_BigMedal_HCentered}}}" data-medaloffset="9.5" data-iscolorize="0" z-index="2"/>
				</frame>
				<frame id="frame-rank" z-index="1" hidden="1">
					<label id="label-top" class="text-extrabold" text="{{{Text_Top}}}" pos="1 3" size="{{{Size_DayButton.X-14.}}} 10" textsize="2" textcolor="{{{ColorPalette::C_Color_GreenTwo}}}" autonewline="1" maxline="2"/>
					<label id="label-rank" class="text-extrabold" size="{{{Size_DayButton.X-14.}}} 10" textsize="3" textcolor="{{{ColorPalette::C_Color_GreenTwo}}}" autonewline="1" maxline="2"/>
					<label id="label-zone" class="text-extrabold" pos="-1 -9" size="{{{Size_DayButton.X-14.}}} 10" textsize=".5" textcolor="{{{ColorPalette::C_Color_GreenTwo}}}" autonewline="1" maxline="2"/>
				</frame>
			</frame>
	
			<frame id="frame-current-day">
				<label id="label-day" pos="{{{MLHelpers::Skew(0., Size_DayButton.Y*0.38, 10.)}}}" size="{{{Size_DayButton.X - 12.}}} 10" class="text-extrabold" textcolor="{{{ColorPalette::C_Color_White}}}" textsize="6" opacity=".6" z-index="2"/>
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-join" z-index="1"
					class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}}"
					data-text="{{{Text_Join}}}"
					data-size="{{{Size_DayButton.X}}} {{{Size_DayButton.Y}}}"
					data-labelsize="{{{Size_DayButton.X-14.}}} {{{Size_DayButton.Y}}}"
					data-opacityunfocus=".6"
					data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}"
					data-focuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
					data-image="{{{Const::C_ImageUrl_PopUp_TOTD_Day}}}"
					data-imagefocus="{{{Const::C_ImageUrl_PopUp_TOTD_Day}}}"
					data-iconcolortype="{{{Button::C_ColorType_Colorize}}}"
					data-iconcolor="{{{ColorPalette::C_Color_GreenOne}}}"
					data-iconfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
					data-iconsize="20 20"
					data-icon="{{{Const::C_ImageUrl_Icon_Animated_Triple_Arrow_Right}}}"
					data-iconfocus="{{{Const::C_ImageUrl_Icon_Animated_Triple_Arrow_Right}}}"
					data-iconxpos=".47" data-iconypos="-.62"
					data-iconopacityunfocus=".6"
					data-contourimage="{{{Const::C_ImageUrl_PopUp_TOTD_Day_Contour}}}"
					data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
					data-fitlabel="2"
					data-textsize="3."
					data-textitalicslope=".2"
					data-textopacityunfocus=".6"
					data-textxpos=".53" data-textypos="-0.4"
					data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
					data-textcolor="{{{ColorPalette::C_Color_GreenOne}}}"
					data-textfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
					data-halign="center" data-valign="center"
					data-nav-inputs="select;cancel;down;action1"
					data-nav-targets="_;_;button-map-review;frame-map-rankings"	
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
					data-menusounds-selectsound="PlayButtonSelect"
				/>
			</frame>
			
			<frame id="frame-next-day" pos="{{{Size_DayButton.X - MLHelpers::SkewX(Size_DayButton.Y, 10.) + 2.}}} 0">
				<quad id="quad-bg" image="{{{Const::C_ImageUrl_PopUp_TOTD_Day}}}" colorize="{{{ColorPalette::C_Color_GreenFour}}}" size="{{{Size_DayButton.X}}} {{{Size_DayButton.Y}}}" halign="center" valign="center" opacity="0.6" z-index="0"/>
				<label id="label-day" pos="{{{MLHelpers::Skew(0., Size_DayButton.Y*0.38, 10.)}}}" size="{{{Size_DayButton.X - 12.}}} 10" class="text-extrabold" textcolor="{{{ColorPalette::C_Color_GreenTwo}}}" textsize="6" z-index="1"/>
				<label id="label-next" pos="{{{MLHelpers::Skew(0., 2., 10.)}}}" size="{{{Size_DayButton.X - 12.}}} 10" class="text-extrabold" text="{{{Text_Next}}}" textcolor="{{{ColorPalette::C_Color_GreenTwo}}}" textsize="4." z-index="1"/>
				<label id="label-remaining-time-next-map" pos="{{{MLHelpers::Skew(0., -4., 10.)}}}" size="{{{Size_DayButton.X - 12.}}} 10" class="text-semibold" textsize="3.5" z-index="1"/>
			</frame>
		</frame>

		<frameinstance
			id="button-map-review" pos="{{{MLHelpers::Skew(-125.8, -62.5, 10.)}}}" z-index="1"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_MRButton}}}"
			data-text-textsize="3."
			data-text-autonewline-enabled="true" data-text-maxlines="2"
			data-text-textfont="{{{FontManager::C_GameFontSemiBold}}}"
			data-focus-opacity-focused="1." data-focus-opacity-unfocused="0.6"
			data-focus-color-focused="FFFFFF" data-focus-color-unfocused="FFFFFF"
			data-width="{{{Size_MapReviewButton.X}}}" data-height="{{{Size_MapReviewButton.Y}}}"
			data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{ExpendableButton::C_Style_ButtonTertiary}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;cancel;up;action1"
			data-nav-targets="_;_;button-join;frame-map-rankings"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>

		<frame id="frame-cotd" pos="{{{MLHelpers::Skew(26.5, -13., 10.)}}}" z-index="1">
			<label id="label-cotd" size="100 10" pos="{{{MLHelpers::Skew(0., 11., 10.)}}}" class="text-extrabold" text="{{{Text_COTD}}}" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" textsize="4"/>
			<frameinstance id="frame-cotd-first-run" modelid="framemodel-cotd" pos="{{{MLHelpers::Skew(0., 0., 10.)}}}"/>
			<frameinstance id="frame-cotd-second-run" modelid="framemodel-cotd" pos="{{{MLHelpers::Skew(0., -(Size_BackgroundCOTD.Y + 2.7), 10.)}}}"/>
			<frameinstance id="frame-cotd-third-run" modelid="framemodel-cotd" pos="{{{MLHelpers::Skew(0., -2*(Size_BackgroundCOTD.Y + 2.7), 10.)}}}"/>
		</frame>

		<frameinstance 
			id="frame-map-rankings" pos="105 -25" z-index="1"
			modelid="{{{MapRankings::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-inputs="cancel;action1"
			data-nav-targets="button-join;button-join"
			data-nav-zone="{{{MapRankings::C_NavZone}}}"
		/>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "TimeLib" as TiL
#Include "Libs/Nadeo/CommonLibs/Common/Privileges.Script.txt" as Privileges
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/API/ChannelAPI.Script.txt" as ChannelAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ReportSystem.Script.txt" as ReportSystem
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ReportStruct.Script.txt" as ReportStruct

#Const C_Tab_Medals {{{dump(Const::C_Tab_Medals)}}}
#Const C_Tab_ZoneRankings {{{dump(Const::C_Tab_ZoneRankings)}}}
#Const C_Tab_ClubRankings {{{dump(Const::C_Tab_ClubRankings)}}}
#Const C_TabNames {{{dump(Const::C_TabNames_Campaigns)}}}

#Const C_Month_Names_Abreviation {{{dump(Const::C_Month_Names_Abreviation)}}}

#Const C_COTDStatus_Check_Frequency 30000 //< Check the COTD status every 30 secondes
#Const C_Retry_MaxWait 30000 //< Try to join the server for a maximum of 30 seconds before aborting
#Const C_Retry_Timer 5000 //< Try to join a server every 5 seconds until a joinlink is received

#Const C_InfoType_None "none"
#Const C_InfoType_Loading "loading"
#Const C_InfoType_Error "error"

#Struct K_Controls {
	CMlFrame Button_Join;
	CMlFrame Frame_COTDFirstRun;
	CMlFrame Frame_COTDSecondRun;
	CMlFrame Frame_COTDThirdRun;
	CMlFrame Frame_CurrentDay;
	CMlFrame LoadingSpinner_PreviousDay;
	CMlFrame LoadingSpinner_RetrieveInfo;
	CMlFrame Frame_MapRankings;
	CMlFrame Frame_Medals;
	CMlFrame Frame_NavigationTabs;
	CMlFrame Frame_NextDay;
	CMlFrame Frame_PinnedClub;
	CMlFrame Frame_PopUpBackground;
	CMlFrame Frame_PreviousDay;
	CMlFrame Frame_Profile;
	CMlFrame Frame_Rank;
	CMlLabel Label_ClubName;
	CMlLabel Label_Info;
	CMlLabel Label_InfoCOTD;
	CMlFrame Frame_ZoneSelection;
}

#Struct K_State {
	K_Controls Controls;
	Boolean IsCOTDJoinable;
	Boolean IsCOTDStatusUpdateNeeded;
	Integer ZoneLevel;
	Integer CurrentTab;
	Integer DailyCooldown;
	Integer DailyMapEndTime;
	Integer CurrentCOTDStatus;
	Integer UpcomingCOTDTimeStamp;
	Http::K_Request JoinLinkRequest;
	{{{MapRankings::P}}}K_Rankings MapRankings;
	{{{CampaignStruct::P}}}K_DailyMap DailyMap;
	{{{CampaignStruct::P}}}K_DailyMap PreviousDailyMap;
	{{{CampaignStruct::P}}}K_MonthlyCampaign MonthlyCampaign;
	{{{CampaignStruct::P}}}K_MonthlyCampaign PreviousMonthlyCampaign;
	Privileges::K_PrivilegeCheck PlayPrivilegeCheck;
	ReportStruct::LibStructuresReport_K_ReportData[Integer] CurrentReportData;
}
""",
"""
declare Ident G_TTSContextIdent_Tabs;
declare Ident G_TTSContextIdent_Section;

// Read the TTS context with updated value
Void ReadTTSContext(K_State _State) {
	ParentApp.TTS_Context_Change(G_TTSContextIdent_Tabs, {{{NavigationTabs::P}}}GetCurrentTabLabel(_State.Controls.Frame_NavigationTabs));
	if (_State.Controls.Frame_ZoneSelection.Visible || _State.Controls.Frame_PinnedClub.Visible) {
		if (G_TTSContextIdent_Section == NullId) G_TTSContextIdent_Section = ParentApp.TTS_Context_Enter({{{Const::C_TTSContextLevel_Section}}});
		if (_State.Controls.Frame_ZoneSelection.Visible) ParentApp.TTS_Context_Change(G_TTSContextIdent_Section, {{{ZoneSelection::P}}}GetCurrentZoneName(This), True);
		if (_State.Controls.Frame_PinnedClub.Visible) ParentApp.TTS_Context_Change(G_TTSContextIdent_Section, _State.Controls.Label_ClubName);
	} else {
		G_TTSContextIdent_Section = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Section);
	}
	ParentApp.TTS_Context_Read({{{Const::C_TTSContextLevel_Page}}});
}

// Display an information message
Void DisplayInfo(K_State _State, Text _Text, Text _InfoType) {
	declare Vec2 Pos_Hidden = MLHelpers::SkewX(<-126., 20.>, 10.);
	declare Vec2 Pos_Visible = MLHelpers::SkewX(<-125., 20.>, 10.);
	AnimMgr.Flush(_State.Controls.Label_Info);

	// Update loading spinner
	if (_InfoType == C_InfoType_Loading) {
		{{{LoadingSpinner::P}}}StartAnimWithFade(This, _State.Controls.LoadingSpinner_RetrieveInfo, _Text);
	} else {
		{{{LoadingSpinner::P}}}StopAnimWithFade(This, _State.Controls.LoadingSpinner_RetrieveInfo);
	}

	// Update label
	if (_InfoType == C_InfoType_Error && _Text != "") {
		_State.Controls.Label_Info.SetText(_Text);
		_State.Controls.Label_Info.Opacity = 0.;
		_State.Controls.Label_Info.RelativePosition_V3 = Pos_Hidden;
		AnimMgr.Add(_State.Controls.Label_Info, "<anim pos=\""^Pos_Visible.X^" "^Pos_Visible.Y^"\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_State.Controls.Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

// Update controller hints at the bottom of the screen
Void UpdateControllerInfo(K_State _State) {
	declare Text[Text] ControllerInfos = ["A" => "{{{Text_Select}}}", "B" => "{{{Text_Back}}}"];
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");

	if (FocusedControl != Null) {
		if (FocusedControl.ControlId == _State.Controls.Frame_MapRankings.ControlId) {
			ControllerInfos["B"] = ""; //< Empty on purpose
			ControllerInfos["Action1"] = "{{{Text_ExitMapRankings}}}";
		} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Frame_MapRankings)) {
			ControllerInfos["Action1"] = "{{{Text_AccessMapRankings}}}";
		} else if ({{{MapRankings::P}}}IsMapAuthorNameDisplayed(_State.Controls.Frame_MapRankings)) {
			ControllerInfos["Action1"] = "{{{Text_ShowAuthorProfile}}}";
		}

		if (_State.DailyMap.Map.Uid != "") {
			ControllerInfos["{{{Const::C_NavInput_ReportSystem}}}"] = "{{{Const::C_Text_Report}}}";
		}
	}
	
	ControllerInfo::SetButtons(ControllerInfos);
}

Void LockPage(K_State _State, Boolean _Lock) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !_Lock);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", !_Lock);
	{{{MapRankings::P}}}LockNavigation(This, _State.Controls.Frame_MapRankings, _Lock);
	{{{NavigationTabs::P}}}LockTabs(This, _State.Controls.Frame_NavigationTabs, _Lock);
}

// Display the player's profile associated to the given account id
K_State DisplayProfile(K_State _State, Text _AccountId, Boolean _Display) {
	if (_Display && _AccountId == "") return _State;
	declare K_State State = _State;

	State.Controls.Frame_Profile.Visible = _Display;
	LockPage(State, _Display);
	if (_Display) {
		State.CurrentReportData = ReportSystem::GetDataList();
		{{{ProfilePlayerInfo::P}}}SetUserAccountId(_AccountId);
		{{{ProfilePlayerInfo::P}}}Enable(True);
		{{{ProfilePlayerInfo::P}}}EnableGarageButton(False);
	} else {
		{{{ProfilePlayerInfo::P}}}Enable(False);
		if (PageIsVisible) {
			ReportSystem::AddUsingId("{{{C_Name}}}");
			ReportSystem::SetDataList(State.CurrentReportData);
		}
		UpdateControllerInfo(State);
	}
	return State;
}

Void Focus(K_State _State, CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{MapRankings::P}}}IsMapRankings(_From)) {
			{{{MapRankings::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
			if (_From.ControlId == "button-join") {
				(_State.Controls.Frame_CurrentDay.GetFirstChild("label-day") as CMlLabel).Opacity = .6;
			}
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{MapRankings::P}}}IsMapRankings(_To)) {
			{{{MapRankings::P}}}Focus(This, (_To as CMlFrame));
			if (_From != Null) {{{Navigation::P}}}ChangeControlTarget(This, _To, "action1", _From.ControlId);
		} else if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
			if (_To.ControlId == "button-join") {
				(_State.Controls.Frame_CurrentDay.GetFirstChild("label-day") as CMlLabel).Opacity = 1.;
			}
		}
	}

	UpdateControllerInfo(_State);
}

K_State Select(K_State _State, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-join": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayTOTDChannel)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayTOTDChannel)
				]);
			} else if (TitleControl.IsReady && !Http::IsInitialized(State.JoinLinkRequest) && Privileges::Check_IsComplete(State.PlayPrivilegeCheck)) {
				DisplayInfo(_State, "{{{Text_Joining}}}", C_InfoType_Loading);
				State.PlayPrivilegeCheck = Privileges::Check_DestroyAndCreate(
					State.PlayPrivilegeCheck,
					PrivilegeMgr,
					MainUser::GetMainUserId(),
					CPrivilegeMgr::EPrivilege::PlayMultiplayerSession
				);
			}
		}
		case "button-map-review": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_AccessServerReview)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_AccessServerReview)
				]);
			} else {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ServerReview}}}", "{{{RoutePaths::C_Path_Live}}}");
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ServerReview}}}");
			}
		}
	}

	return State;
}

{{{CampaignStruct::P}}}K_Map GetLoadedMap({{{CampaignStruct::P}}}K_DailyMap _DailyMap) {
	if (_DailyMap.CampaignId != {{{CampaignStruct::P}}}C_Campaign_NullId) {
		declare {{{CampaignStruct::P}}}K_Campaign Campaign = {{{CampaignStore::P}}}GetCampaignFromId(_DailyMap.CampaignId);
		foreach (Category in Campaign.Categories) {
			foreach (Map in Category.Playlist) {
				if (Map.Uid == _DailyMap.Map.Uid) {
					return Map;
				}
			}
		}
	}
	return _DailyMap.Map;
}

Void UpdateDates(K_State _State) {
	if (_State.MonthlyCampaign.Month == 0 || _State.DailyMap.MonthDay == 0) return;

	declare CMlLabel Label_PreviousDay <=> (_State.Controls.Frame_PreviousDay.GetFirstChild("label-day") as CMlLabel);
	declare CMlLabel Label_CurrentDay <=> (_State.Controls.Frame_CurrentDay.GetFirstChild("label-day") as CMlLabel);
	declare CMlLabel Label_NextDay <=> (_State.Controls.Frame_NextDay.GetFirstChild("label-day") as CMlLabel);

	/* Update yesterday label */
	if (_State.MonthlyCampaign.Month == 1 && _State.DailyMap.MonthDay == 1) {
		Label_PreviousDay.Value = TL::Compose(C_Month_Names_Abreviation[C_Month_Names_Abreviation.count - 1], TL::ToText(_State.PreviousMonthlyCampaign.LastDay));
	} else if (_State.DailyMap.MonthDay == 1) {
		Label_PreviousDay.Value = TL::Compose(C_Month_Names_Abreviation[_State.MonthlyCampaign.Month-2], TL::ToText(_State.PreviousMonthlyCampaign.LastDay));
	} else {
		Label_PreviousDay.Value = TL::Compose(C_Month_Names_Abreviation[_State.MonthlyCampaign.Month-1], TL::ToText(_State.DailyMap.MonthDay-1));
	}

	/* Update today label */
	Label_CurrentDay.Value = TL::Compose(C_Month_Names_Abreviation[_State.MonthlyCampaign.Month-1], TL::ToText(_State.DailyMap.MonthDay));

	/* Update tomorrow label */
	if (_State.MonthlyCampaign.Month == 12 && _State.DailyMap.MonthDay == _State.MonthlyCampaign.LastDay) {
		Label_NextDay.Value = TL::Compose(C_Month_Names_Abreviation[0], "1");
	} else if (_State.DailyMap.MonthDay == _State.MonthlyCampaign.LastDay) {
		Label_NextDay.Value = TL::Compose(C_Month_Names_Abreviation[_State.MonthlyCampaign.Month], "1");
	} else {
		Label_NextDay.Value = TL::Compose(C_Month_Names_Abreviation[_State.MonthlyCampaign.Month-1], TL::ToText(_State.DailyMap.MonthDay+1));
	}
}

K_State UpdateCurrentMapRankings(K_State _State) {
	declare K_State State = _State;
	State.DailyMap.Map = GetLoadedMap(State.DailyMap);
	declare Boolean IsLoading = (
		(_State.CurrentTab == C_Tab_ZoneRankings && State.DailyMap.Map.TopRankings.count <= 0) ||
		(_State.CurrentTab == C_Tab_ClubRankings && State.DailyMap.Map.ClubTopRankings.count <= 0)
	);

	/* Update rankings */
	State.MapRankings = {{{MapRankings::P}}}UpdateMapRanking(
		This, 
		State.Controls.Frame_MapRankings,
		{{{ClubStore::P}}}GetUserPinnedClub().Id,
		State.DailyMap.CampaignId,
		State.DailyMap.SeasonId,
		State.DailyMap.Map,
		State.ZoneLevel,
		State.CurrentTab,
		False,
		False,
		IsLoading
	);
	{{{MapRankings::P}}}ShowRankingAndMedals(
		State.Controls.Frame_MapRankings,
		State.DailyMap.Map.Uid != "" && (State.CurrentTab == C_Tab_ClubRankings || State.CurrentTab == C_Tab_ZoneRankings),
		State.CurrentTab == C_Tab_Medals
	);

	if (State.DailyMap.Map.Uid != "") {
		ReportSystem::AddData(
			ReportStruct::C_ReportTarget_Track,
			ReportStruct::LibStructuresReport_K_ReportData {
				Details = [State.DailyMap.Map.Name],
				Ids = [State.DailyMap.Map.Uid],
				Contexts = [["From" => "Menu TOTDChannelDisplay"]]
			}
		);
	} else {
		ReportSystem::RemoveData(ReportStruct::C_ReportTarget_Track);
	}

	{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
	UpdateControllerInfo(State);

	return State;
}

K_State UpdatePreviousMapResults(K_State _State) {
	declare K_State State = _State;

	/* Update loaded map */
	State.PreviousDailyMap.Map = GetLoadedMap(State.PreviousDailyMap);

	if (State.PreviousDailyMap.Map.Uid != "") {
		declare {{{CampaignStruct::P}}}K_Ranking Record = {{{CampaignStruct::P}}}K_Ranking {};
		declare CMlFrame Frame_MedalStack = (State.Controls.Frame_PreviousDay.GetFirstChild("frame-medal-stack") as CMlFrame);
		declare CMlLabel Label_NoMedals = (State.Controls.Frame_PreviousDay.GetFirstChild("label-no-medals") as CMlLabel);
		declare CMlLabel Label_Time = (State.Controls.Frame_PreviousDay.GetFirstChild("label-time") as CMlLabel);
		declare CMlLabel Label_Rank = (State.Controls.Frame_PreviousDay.GetFirstChild("label-rank") as CMlLabel);
		declare CMlLabel Label_Zone = (State.Controls.Frame_PreviousDay.GetFirstChild("label-zone") as CMlLabel);
		declare CMlLabel Label_Top = (State.Controls.Frame_PreviousDay.GetFirstChild("label-top") as CMlLabel);

		/* Update medal stack and frame visibility */
		{{{MedalStack::P}}}SetMedalsNumber(Frame_MedalStack, State.PreviousDailyMap.Map.Medal);
		State.Controls.Frame_Medals.Visible = State.CurrentTab == C_Tab_Medals;
		State.Controls.Frame_Rank.Visible = !State.Controls.Frame_Medals.Visible;

		/* Update records */
		switch (State.CurrentTab) {
			case C_Tab_ClubRankings: {
				if (State.PreviousDailyMap.Map.ClubRankings.existskey({{{ClubStore::P}}}GetUserPinnedClub().Id)) {
					Record.Position = State.PreviousDailyMap.Map.ClubRankings[{{{ClubStore::P}}}GetUserPinnedClub().Id];
				}
			}
			case C_Tab_ZoneRankings: {
				if (State.PreviousDailyMap.Map.Rankings.existskey(State.ZoneLevel)) {
					Record = State.PreviousDailyMap.Map.Rankings[State.ZoneLevel];
				}
			}
		}
		
		/* Update labels */
		Label_Zone.SetText(TL::GetTranslatedText(Record.ZoneName));
		Label_NoMedals.Visible = State.PreviousDailyMap.Map.Medal == 0;
		Label_Time.Visible = !Label_NoMedals.Visible && State.PreviousDailyMap.Map.Score != -1;
		if (Label_Time.Visible) Label_Time.SetText(TL::TimeToText(State.PreviousDailyMap.Map.Score, True, True));
		Tools::FitLabelValue(Label_NoMedals, 3., 1., 0.25);
		if (Record.Position > 0) {
			Label_Top.Show();
			Label_Rank.RelativePosition_V3 = <-.5, -2.5>;
			Label_Rank.SetText(Tools::FormatTop(Record.Position, False));
			Tools::FitLabelValue(Label_Rank, 6., 4., 0.25);
		} else {
			Label_Top.Hide();
			Label_Rank.RelativePosition_V3 = <.0, .0>;
			Label_Rank.SetText("{{{Text_NoRank}}}");
			Tools::FitLabelValue(Label_Rank, 3., 1., 0.25);
		}
	}

	{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_PreviousDay);

	return State;
}

{{{CampaignStruct::P}}}K_DailyMap LoadDailyMapMedalsAndScores({{{CampaignStruct::P}}}K_DailyMap _DailyMap) {
	declare {{{CampaignStruct::P}}}K_DailyMap DailyMap = _DailyMap;
	declare {{{CampaignStruct::P}}}K_Campaign DailyCampaign = {{{CampaignStore::P}}}GetCampaignFromId(DailyMap.CampaignId);

	/* Get loaded map */
	DailyMap.Map = GetLoadedMap(DailyMap);

	/* Load medals and scores */
	if (DailyMap.Map.Uid != "" && DailyCampaign.IsLoaded) {
		declare Integer MapMedal = ScoreMgr.Map_GetMedal(
			MainUser::GetMainUserId(),
			DailyMap.Map.Uid,
			"{{{Const::C_ScopeType_PersonalBest}}}",
			"",
			"{{{Const::C_GameMode_TimeAttack}}}",
			""
		);
		declare Integer MapScore = ScoreMgr.Map_GetRecord_v2(
			MainUser::GetMainUserId(),
			DailyMap.Map.Uid,
			"{{{Const::C_ScopeType_Season}}}",
			DailyMap.SeasonId,
			"{{{Const::C_GameMode_TimeAttack}}}",
			""
		);
		DailyMap.Map = {{{CampaignStore::P}}}SetMapMedalAndScore(DailyMap.CampaignId, DailyMap.Map.Uid, MapMedal, MapScore);
	}

	return DailyMap;
}

Void LoadCampaigns(K_State _State) {
	_State.Controls.Frame_Rank.Visible = False;
	_State.Controls.Frame_Medals.Visible = False;
	{{{CampaignStore::P}}}Action_LoadLiveMonthlyCampaign(This);
	{{{LoadingSpinner::P}}}StartAnimWithFade(This, _State.Controls.LoadingSpinner_PreviousDay);
	DisplayInfo(_State, "{{{Text_RetrievingTOTD}}}", C_InfoType_Loading);
}

K_State UpdateInfoCOTD(K_State _State) {
	declare K_State State = _State;

	switch (State.CurrentCOTDStatus) {
		case {{{CupOfTheDayStatus::P}}}C_CupOfTheDayStatus_StartingDateDisplayed: {
			State.Controls.Label_InfoCOTD.SetText("{{{Text_UpcomingCOTD}}}");
		}
		case {{{CupOfTheDayStatus::P}}}C_CupOfTheDayStatus_StartingSoon: {
			State.IsCOTDStatusUpdateNeeded = TiL::GetDelta(TiL::GetCurrent(), ""^State.UpcomingCOTDTimeStamp) >= 0;
			State.Controls.Label_InfoCOTD.SetText(TL::Compose("{{{Text_NextCOTD}}}", TiL::FormatDelta(""^State.UpcomingCOTDTimeStamp, TiL::GetCurrent(), TiL::EDurationFormats::Chrono)));
		}
		case {{{CupOfTheDayStatus::P}}}C_CupOfTheDayStatus_QualificationsStarted: {
			declare Integer QualificationEndTime = State.UpcomingCOTDTimeStamp + {{{CupOfTheDayStatus::P}}}C_QualificationsDuration;
			State.IsCOTDStatusUpdateNeeded = TiL::GetDelta(TiL::GetCurrent(), ""^QualificationEndTime) >= 0;
			State.Controls.Label_InfoCOTD.SetText(TL::Compose("{{{Text_QualifCOTD}}}", TiL::FormatDelta(TiL::GetCurrent(), ""^QualificationEndTime, TiL::EDurationFormats::Chrono)));
		}
		default: {
			State.Controls.Label_InfoCOTD.SetText("");
		}
	}
	
	return State;
}

K_State UpdateStatusTOTD(K_State _State) {
	declare K_State State = _State;
	declare CMlLabel Label_Time;

	// COTD info
	State.IsCOTDStatusUpdateNeeded = False;
	State.CurrentCOTDStatus = {{{CupOfTheDayStatus::P}}}GetStatus();
	declare Integer NewCOTDTimeStamp = {{{CupOfTheDayStatus::P}}}GetNewCOTDTimeStamp();
	declare Integer FirstRerunCOTDTimeStamp = {{{CupOfTheDayStatus::P}}}GetFirstRerunCOTDTimeStamp();
	declare Integer SecondRerunCOTDTimeStamp = {{{CupOfTheDayStatus::P}}}GetSecondRerunCOTDTimeStamp();
	declare Integer[] UpcomingCOTDStatus = [
		{{{CupOfTheDayStatus::P}}}C_CupOfTheDayStatus_StartingDateDisplayed, 
		{{{CupOfTheDayStatus::P}}}C_CupOfTheDayStatus_StartingSoon, 
		{{{CupOfTheDayStatus::P}}}C_CupOfTheDayStatus_QualificationsStarted
	];

	// Defines if the  player can still play the next COTD
	State.IsCOTDJoinable = (
		State.CurrentCOTDStatus == {{{CupOfTheDayStatus::P}}}C_CupOfTheDayStatus_StartingSoon || 
		State.CurrentCOTDStatus == {{{CupOfTheDayStatus::P}}}C_CupOfTheDayStatus_QualificationsStarted
	);

	// Update COTD time labels
	foreach (TimeStamp in [NewCOTDTimeStamp, FirstRerunCOTDTimeStamp, SecondRerunCOTDTimeStamp]) {
		switch (TimeStamp) {
			case NewCOTDTimeStamp: Label_Time <=> (State.Controls.Frame_COTDFirstRun.GetFirstChild("label-time") as CMlLabel);
			case FirstRerunCOTDTimeStamp: Label_Time <=> (State.Controls.Frame_COTDSecondRun.GetFirstChild("label-time") as CMlLabel);
			case SecondRerunCOTDTimeStamp: Label_Time <=> (State.Controls.Frame_COTDThirdRun.GetFirstChild("label-time") as CMlLabel);
		}

		Label_Time.TextColor = <1., 1., 1.>;
		Label_Time.SetText(TiL::FormatDate(""^TimeStamp, TiL::EDateFormats::TimeShort));
		if (UpcomingCOTDStatus.exists({{{CupOfTheDayStatus::P}}}GetStatus(TimeStamp))) {
			Label_Time.TextColor = CL::Hex6ToRgb("{{{C_Color_COTD}}}");
			State.UpcomingCOTDTimeStamp = TimeStamp;
		}
	}

	// Update pop-up header
	if (UpcomingCOTDStatus.exists(State.CurrentCOTDStatus)) {
		{{{PopUpBackground::P}}}SetHeaderImageUrl(This, State.Controls.Frame_PopUpBackground, "{{{Const::C_ImageUrl_PopUp_TOTD_Header_COTD}}}");
	} else {
		{{{PopUpBackground::P}}}SetHeaderImageUrl(This, State.Controls.Frame_PopUpBackground, "{{{Const::C_ImageUrl_PopUp_TOTD_Header}}}");
	}

	return UpdateInfoCOTD(State);
}

// Select the tab to display
K_State UpdateCampaignTabPage(K_State _State, Integer _TabIndex, Boolean _IsRead) {
	declare K_State State = _State;

	State.Controls.Frame_PinnedClub.Visible = _TabIndex == C_Tab_ClubRankings;
	State.Controls.Frame_ZoneSelection.Visible = _TabIndex == C_Tab_ZoneRankings;
	State.CurrentTab = _TabIndex;
	if (_IsRead) ReadTTSContext(State);

	switch (_TabIndex) {
		case C_Tab_ZoneRankings: {
			declare Integer[Text] CurrentScores;
			if (State.DailyMap.Map.Score > 0) CurrentScores = [State.DailyMap.Map.Uid => State.DailyMap.Map.Score];
			{{{CampaignStore::P}}}Action_LoadMapPlayerGlobalRankings(This, State.DailyMap.SeasonId, CurrentScores);
			{{{CampaignStore::P}}}Action_LoadMapTopGlobalRankings(This, State.DailyMap.SeasonId, State.DailyMap.Map.Uid, State.DailyMap.Map.Score);
		}
		case C_Tab_ClubRankings: {
			declare PinnedClubId = {{{ClubStore::P}}}GetUserPinnedClub().Id;
			declare Integer[Text] CurrentScores;
			if (State.DailyMap.Map.Score > 0) CurrentScores = [State.DailyMap.Map.Uid => State.DailyMap.Map.Score];
			if (PinnedClubId != {{{ClubStruct::P}}}C_ClubNullId) {
				{{{CampaignStore::P}}}Action_LoadMapPlayerClubRankings(This, State.DailyMap.SeasonId, PinnedClubId, CurrentScores);
				{{{CampaignStore::P}}}Action_LoadMapTopClubRankings(This, State.DailyMap.SeasonId, State.DailyMap.Map.Uid, PinnedClubId, State.DailyMap.Map.Score);
			}
		}
		default: {
			State = UpdateCurrentMapRankings(State);
			State = UpdatePreviousMapResults(State);
		}
	}

	// Update navigation
	if ({{{Navigation::P}}}IsLocked({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"))) {
		Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Join);
	}

	return State;
}

// Update the navigation tabs with the current region name and the pinned club
Void UpdateNavigationTabs(K_State _State) {
	declare Text[Integer] TabNames = C_TabNames;

	if ({{{ZoneSelection::P}}}GetCurrentZoneLevel(This) != "") {
		TabNames[C_Tab_ZoneRankings] = {{{ZoneSelection::P}}}GetCurrentZoneLevel(This);
	} else {
		TabNames.removekey(C_Tab_ZoneRankings);
	}

	if ({{{ClubStore::P}}}GetUserPinnedClub().Id == {{{ClubStruct::P}}}C_ClubNullId) {
		TabNames.removekey(C_Tab_ClubRankings);
	}

	{{{NavigationTabs::P}}}SetTabs(This, _State.Controls.Frame_NavigationTabs, TabNames, False);
	{{{NavigationTabs::P}}}RedrawNavigationTabs(This, _State.Controls.Frame_NavigationTabs, False);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_RankingDisplay;
declare CMlLabel Label_DayTOTD;
declare CMlLabel Label_RemainingTimeCOTD;
declare CMlLabel Label_RemainingTimeNextMap;

declare Integer CampaignDisplay_NavigationTab for LocalUser = C_Tab_Medals;
declare Integer CampaignDisplay_SelectedRegion for LocalUser = {{{ZoneSelection::P}}}C_ZoneLevel_Null;

declare K_State State;
declare Integer NextDayUpdate;
declare Integer JoinLinkWaitingTime;
declare Integer Next_COTD_Status_CheckTime;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_RankingDisplay <=> (Frame_Global.GetFirstChild("frame-buttons-ranking-display") as CMlFrame);
Label_DayTOTD = (Frame_Global.GetFirstChild("label-totd-day") as CMlLabel);
Label_RemainingTimeNextMap <=> (Frame_Global.GetFirstChild("label-remaining-time-next-map") as CMlLabel);

State = K_State {
	DailyMapEndTime = -1,
	DailyCooldown = -1,
	JoinLinkRequest = Http::GetEmptyRequest(),
	ZoneLevel = {{{ZoneSelection::P}}}C_ZoneLevel_World,
	CurrentTab = C_Tab_Medals,
	Controls = K_Controls {
		Frame_COTDFirstRun = (Frame_Global.GetFirstChild("frame-cotd-first-run") as CMlFrame),
		Frame_COTDSecondRun = (Frame_Global.GetFirstChild("frame-cotd-second-run") as CMlFrame),
		Frame_COTDThirdRun = (Frame_Global.GetFirstChild("frame-cotd-third-run") as CMlFrame),
		Frame_CurrentDay = (Frame_Global.GetFirstChild("frame-current-day") as CMlFrame),
		LoadingSpinner_RetrieveInfo = (Frame_Global.GetFirstChild("loadingspinner-retrieve-info") as CMlFrame),
		LoadingSpinner_PreviousDay = (Frame_Global.GetFirstChild("loadingspinner-previous-day") as CMlFrame),
		Frame_MapRankings = (Frame_Global.GetFirstChild("frame-map-rankings") as CMlFrame),
		Frame_Medals = (Frame_Global.GetFirstChild("frame-medals") as CMlFrame),
		Frame_NavigationTabs = (Frame_Global.GetFirstChild("frame-navigation-tabs") as CMlFrame),
		Frame_NextDay = (Frame_Global.GetFirstChild("frame-next-day") as CMlFrame),
		Frame_PinnedClub = (Frame_Global.GetFirstChild("frame-pinned-club") as CMlFrame),
		Frame_PopUpBackground = (Frame_Global.GetFirstChild("frame-background") as CMlFrame),
		Frame_PreviousDay = (Frame_Global.GetFirstChild("frame-previous-day") as CMlFrame),
		Frame_Profile = (Frame_Global.GetFirstChild("frame-profile") as CMlFrame),
		Frame_Rank = (Frame_Global.GetFirstChild("frame-rank") as CMlFrame),
		Button_Join = (Frame_Global.GetFirstChild("button-join") as CMlFrame),
		Label_ClubName = (Frame_Global.GetFirstChild("label-club-name") as CMlLabel),
		Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
		Label_InfoCOTD = (Frame_Global.GetFirstChild("label-cotd-info") as CMlLabel),
		Frame_ZoneSelection = (Frame_Global.GetFirstChild("frame-zone-selection") as CMlFrame)
	}
};
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_TOTDChannelDisplay}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				ReportSystem::AddUsingId("{{{C_Name}}}");
				SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", ["{{{Text_TrackDay}}}"]);
				State.Controls.Label_ClubName.SetText({{{ClubStore::P}}}GetUserPinnedClub().Name);
				State.DailyCooldown = -1;
				State = DisplayProfile(State, "", False);
				LoadCampaigns(State);

				// Text to speech context
				G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Enter({{{Const::C_TTSContextLevel_Page}}});

				// Update zone selection with shared variables (must be done before updating tabs)
				{{{ZoneSelection::P}}}SetCurrentZone(This, CampaignDisplay_SelectedRegion);

				// Update navigation tabs with shared variables
				UpdateNavigationTabs(State);
				if ({{{NavigationTabs::P}}}IsAvailableTab(State.Controls.Frame_NavigationTabs, CampaignDisplay_NavigationTab)) {
					{{{NavigationTabs::P}}}UpdateCurrentTab(This, State.Controls.Frame_NavigationTabs, CampaignDisplay_NavigationTab, False);
					State.CurrentTab = CampaignDisplay_NavigationTab;
				} else {
					State.CurrentTab = {{{NavigationTabs::P}}}GetCurrentTab(State.Controls.Frame_NavigationTabs);
					CampaignDisplay_NavigationTab = State.CurrentTab;
				}
				ReadTTSContext(State);
				State.Controls.Frame_PinnedClub.Visible = State.CurrentTab == C_Tab_ClubRankings;
				State.Controls.Frame_ZoneSelection.Visible = State.CurrentTab == C_Tab_ZoneRankings;
				Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Join);
			}
		}
	}

	/* JoinLink request */
	if (Http::IsInitialized(State.JoinLinkRequest)) {
		State.JoinLinkRequest = Http::Update(State.JoinLinkRequest);
		if (!Http::IsRunning(State.JoinLinkRequest)) {
			if (Http::IsSuccess(State.JoinLinkRequest)) {
				declare Text JoinLink = ChannelAPI::GetResponseFromGetJoinLink(State.JoinLinkRequest);
				if (JoinLink != "") {
					{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
					TitleControl::OpenLinkAndWait(This, TitleControl, JoinLink, CMlScript::LinkType::ManialinkBrowser);
				} else if (JoinLinkWaitingTime < C_Retry_MaxWait) {
					State.JoinLinkRequest = Http::RetryWithDelay(State.JoinLinkRequest, Now + C_Retry_Timer);
					JoinLinkWaitingTime += C_Retry_Timer;
				} else {
					//L16N [Online] Message displayed when there is no joinlink to join a server.
					DisplayInfo(State, _("Servers are offline or in maintenance, please try again later."), C_InfoType_Error);
				}
				TitleControl::WaitIsReady(TitleControl);
			} else {
				//L16N [Online] Message displayed when the player couldn't connect to the server. %1 goes for the type of error.
				DisplayInfo(State, TL::Compose(_("An error occurred while joining, please try again. (Error code: %1)"), ""^Http::GetStatusCode(State.JoinLinkRequest)), C_InfoType_Error);
			}
			if (!Http::IsWaitingRetry(State.JoinLinkRequest)) {
				State.JoinLinkRequest = Http::Destroy(State.JoinLinkRequest);
			}
		}
	}

	/* Report system events */
	foreach (Event in ReportSystem::GetPendingEvents()) {
		if (Event.LastUsingId == "{{{C_Name}}}") {
			switch (Event.Type) {
				case ReportSystem::C_EventType_Open: {
					LockPage(State, True);
				}
				case ReportSystem::C_EventType_Close: {
					LockPage(State, False);
					UpdateControllerInfo(State);
				}
			}
		}
	}

	/* Check leaderboard privilege */
	if (!Privileges::Check_IsComplete(State.PlayPrivilegeCheck)) {
		State.PlayPrivilegeCheck = Privileges::Check_Update(State.PlayPrivilegeCheck);
		if (Privileges::Check_IsComplete(State.PlayPrivilegeCheck)) {
			if (Privileges::Check_HasPrivilege(State.PlayPrivilegeCheck)) {
				JoinLinkWaitingTime = 0;
				State.JoinLinkRequest = Http::DestroyAndCreate(
					State.JoinLinkRequest,
					ChannelAPI::GetJoinLink("{{{Const::C_ChannelUid_Daily}}}")
				);
			} else {
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
			}
			State.PlayPrivilegeCheck = Privileges::Check_Destroy(State.PlayPrivilegeCheck);
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Action1: {
							if ({{{Navigation::P}}}IsLocked(State.Controls.Frame_MapRankings) && {{{MapRankings::P}}}IsMapAuthorNameDisplayed(State.Controls.Frame_MapRankings)) {
								State = DisplayProfile(State, State.DailyMap.Map.AuthorLogin, True);
							}
						}
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Event.To);
						case CMlScriptEvent::EMenuNavAction::Cancel: {
							if (Event.From != Null && Event.From.ControlId == "frame-map-rankings") {
								Focus(State, Event.From, Event.To);
							} else {
								{{{Router::P}}}PushParent(This);
							}
						}
						default: Focus(State, Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(State, Event.From, Event.To);
					}
				}
			}
		}
	}

	/* Popup background events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background") {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close:	{{{Router::P}}}PushParent(This);
			}
		}
	}

	/* Events NavigationTabs */
	foreach (Event in {{{NavigationTabs::P}}}GetPendingEvents(This)) {
		if (Event.Frame_NavigationTabs.ControlId == State.Controls.Frame_NavigationTabs.ControlId) {
			switch (Event.Type) {
				case {{{NavigationTabs::P}}}C_EventType_Update: {
					if (!{{{NavigationTabs::P}}}IsAvailableTab(State.Controls.Frame_NavigationTabs, State.CurrentTab)) {
						State = UpdateCampaignTabPage(State, {{{NavigationTabs::P}}}GetCurrentTab(State.Controls.Frame_NavigationTabs), True);
						CampaignDisplay_NavigationTab = State.CurrentTab;
					}
				}
				case {{{NavigationTabs::P}}}C_EventType_Select: {
					State = UpdateCampaignTabPage(State, Event.CurrentTab, True);
					CampaignDisplay_NavigationTab = State.CurrentTab;
				}
			}
		}
	}

	/* Zone selection events */
	foreach (Event in {{{ZoneSelection::P}}}GetPendingEvents(This)) {
		if (Event.Type == {{{ZoneSelection::P}}}C_Event_ZoneUpdate) {
			CampaignDisplay_SelectedRegion = Event.Zone;
			State.ZoneLevel = Event.Zone;
			State = UpdateCurrentMapRankings(State);
			State = UpdatePreviousMapResults(State);
			UpdateNavigationTabs(State);
			ReadTTSContext(State);
		}
	}

	/* Map rankings info events */
	foreach (Event in {{{MapRankings::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{MapRankings::P}}}C_EventType_Select: {
				State = DisplayProfile(State, Event.AccountId, True);
			}
		}
	}

	/* Profile player info events */
	foreach (Event in {{{ProfilePlayerInfo::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{ProfilePlayerInfo::P}}}C_EventType_Close: {
				State = DisplayProfile(State, "", False);
			}
		}
	}

	/* Campaign store events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{CampaignStore::P}}}C_Event_LiveMonthlyCampaignUpdated: {
						if ({{{CampaignStore::P}}}GetLiveMonthlyCampaignStatus() == {{{CampaignStore::P}}}C_LiveCampaignStatus_Loaded) {
							State.MonthlyCampaign = {{{CampaignStore::P}}}GetLiveMonthlyCampaign();
							{{{CupOfTheDayStatus::P}}}Update_COTD_Times();
							State = UpdateStatusTOTD(State);
							Next_COTD_Status_CheckTime = Now + C_COTDStatus_Check_Frequency;
							NextDayUpdate = Now;
						}
					}
					case {{{CampaignStore::P}}}C_Event_CampaignListUpdated: {
						if (Event.CustomEventData.count > 0 && Event.CustomEventData[0] == "{{{CampaignStruct::C_CampaignType_Monthly}}}") {
							if ({{{CampaignStore::P}}}GetMonthlyCampaignsTotal() >= 2) {
								State.PreviousMonthlyCampaign = {{{CampaignStore::P}}}GetMonthlyCampaignList()[1];
								State.PreviousDailyMap = State.PreviousMonthlyCampaign.DailyMaps[State.PreviousMonthlyCampaign.DailyMaps.count - 1];
								{{{CampaignStore::P}}}Action_LoadMonthlyCampaign(This, State.PreviousMonthlyCampaign.Id);
								UpdateDates(State);
							} else {
								//L16N [Online] Message displayed when previous daily track data cannot be fetched from the server.
								DisplayInfo(State, _("An error occurred while fetching previous track of the day data, please try again."), C_InfoType_Error);
								State = UpdatePreviousMapResults(State);
							}
						}
					}
					case {{{CampaignStore::P}}}C_Event_MonthlyCampaignLoadComplete: {
						if (Event.CustomEventData.count > 0 && Event.CustomEventData[0] == ""^State.MonthlyCampaign.Id) {
							foreach (Day => DailyMap in State.MonthlyCampaign.DailyMaps) {
								if (DailyMap.RelativeStart < 0 && DailyMap.RelativeEnd >= 0) {
									declare Integer RelativeNowTimeDiff = ((Now - DailyMap.RelativeNow) / 1000);
									State.DailyMapEndTime = TL::ToInteger(TiL::GetCurrent()) + DailyMap.RelativeEnd - RelativeNowTimeDiff;
									State.DailyMap = LoadDailyMapMedalsAndScores(DailyMap);
									declare Integer DailyMapStartTime = TL::ToInteger(TiL::GetCurrent()) + DailyMap.RelativeStart - RelativeNowTimeDiff;
									if (State.DailyMap.MonthDay == 1) { //< Loads previous monthly campaign if a new month just begins
										{{{CampaignStore::P}}}Action_LoadMonthlyCampaignsPage(This, 1, 2);
									} else if (State.MonthlyCampaign.DailyMaps.existskey(Day-1)) {
										State.PreviousDailyMap = LoadDailyMapMedalsAndScores(State.MonthlyCampaign.DailyMaps[Day-1]);
										State = UpdatePreviousMapResults(State);
										UpdateDates(State);
									}
									State = UpdateCampaignTabPage(State, State.CurrentTab, False);
									break;
								}
							}
							State = UpdateCurrentMapRankings(State);
						} else if (Event.CustomEventData.count > 0 && Event.CustomEventData[0] == ""^State.PreviousMonthlyCampaign.Id) {
							State.PreviousDailyMap = LoadDailyMapMedalsAndScores(State.PreviousDailyMap);
							State = UpdatePreviousMapResults(State);
						}
					}
					default: {
						if (
							Event.CustomEventType == {{{CampaignStore::P}}}C_Event_MapRecordsUpdated || 
							Event.CustomEventType == {{{CampaignStore::P}}}C_Event_MapTopGlobalRankingsUpdate || 
							Event.CustomEventType == {{{CampaignStore::P}}}C_Event_MapClubRankingsUpdated ||
							Event.CustomEventType == {{{CampaignStore::P}}}C_Event_MapTopClubRankingsUpdate
						) {
							State = UpdateCurrentMapRankings(State);
							State = UpdatePreviousMapResults(State);
						}
					}
				}
			}
		}
	}

	/* Next TOTD timer update */
	if (TiL::Compare(""^State.DailyMapEndTime, TiL::GetCurrent()) >= 0) {
		Label_RemainingTimeNextMap.Visible = State.DailyMapEndTime >= 0;
		Label_RemainingTimeNextMap.Value = TiL::FormatDelta(""^State.DailyMapEndTime, TiL::GetCurrent(), TiL::EDurationFormats::Chrono);
	} else if (State.DailyCooldown < 0 || Now >= State.DailyCooldown) {
		State.DailyCooldown = Now + 15000;
		Label_RemainingTimeNextMap.Visible = False;
		LoadCampaigns(State);
	}

	/* COTD status update */
	if (Next_COTD_Status_CheckTime > 0 && Next_COTD_Status_CheckTime <= Now || State.IsCOTDStatusUpdateNeeded) {
		Next_COTD_Status_CheckTime = Now + C_COTDStatus_Check_Frequency;
		State = UpdateStatusTOTD(State);
	} else if (State.IsCOTDJoinable) {
		State = UpdateInfoCOTD(State);
	}

	/* TOTD day update */
	if (Now > NextDayUpdate) {
		Label_DayTOTD.SetText(""^{{{CampaignStore::P}}}GetDayTOTD());
		NextDayUpdate = Now + {{{CampaignStore::P}}}GetRelativeEndTOTD();
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_LeavingRoute: {
				{{{MapRankings::P}}}ShowRankingAndMedals(State.Controls.Frame_MapRankings, False, False);
				State.PlayPrivilegeCheck = Privileges::Check_Destroy(State.PlayPrivilegeCheck);
				State.JoinLinkRequest = Http::Destroy(State.JoinLinkRequest);
				G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Tabs);
				G_TTSContextIdent_Section = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Section);
				ReportSystem::RemoveUsingId("{{{C_Name}}}");
				DisplayInfo(State, "", C_InfoType_None);
			}
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	ButtonIcon::ComponentV2(),
	CampaignStore::ComponentV2(),
	CampaignStruct::Component(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	CupOfTheDayStatus::Component(),
	ExpendableAsset::ComponentV2(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MapRankings::ComponentV2(),
	MedalStack::Component(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	NavigationTabs::ComponentV2(),
	PopUpBackground::ComponentV2(),
	ProfilePlayerInfo::Component(),
	Router::ComponentV2(),
	Transition::ComponentV2(),
	UserStore::ComponentV2(),
	ZoneSelection::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}