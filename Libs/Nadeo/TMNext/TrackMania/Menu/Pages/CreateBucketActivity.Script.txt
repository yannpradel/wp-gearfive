/** 
 *	Page: CreateBucketActivity
 */
#Const Version		"2023-05-05"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/CreateBucketActivity.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/API/BrowserAPI.Script.txt" as BrowserAPI
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpClubThemes.Script.txt" as PopUpClubThemes
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_CreateBucketActivity"
#Const C_NavGroup_Default "navgroup-page-create-bucket-activity-default"
#Const C_NavGroup_Global "navgroup-page-create-bucket-activity-global"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [CreateBucketActivity] Title of the page to create the activity skin uploads
	declare Text Text_CreateSkinUploads = _("Create skin uploads");
	//L16N [CreateBucketActivity] Title of the page to create the activity track uploads
	declare Text Text_CreateMapUploads = _("Create track uploads");
	//L16N [CreateBucketActivity] Title of the page to edit the activity skin uploads
	declare Text Text_EditSkinUploads = _("Edit skin uploads");
	//L16N [CreateBucketActivity] Title of the page to edit the activity track uploads
	declare Text Text_EditMapUploads = _("Edit track uploads");
	//L16N [CreateBucketActivity] Button to save the edited activity.
	declare Text Text_Save = _("Save");
	//L16N [CreateBucketActivity] Button to create an activity.
	declare Text Text_Create = _("Create");
	//L16N [CreateBucketActivity] Text displayed while creating an activity
	declare Text Text_Creating = _("Creating activity...");
	//L16N [CreateBucketActivity] Text displayed while editing an activity
	declare Text Text_Editing = _("Editing activity...");
	//L16N [CreateBucketActivity] Default placeholder for activity name text field.
	declare Text Text_Name = _("Activity name");
	//L16N [CreateBucketActivity] Error message displayed when the player tries to create an activity without the requirements.
	declare Text Text_NoName = _("You need at least a name to create this activity.");
	//L16N [CreateBucketActivity] Text pronounced when the player is focusing the button to choose a logo for the room.
	declare Text TTS_ChooseLogo = _("Choose a logo for your activity");

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Page -->
<frameinstance modelid="{{{BrowserAPI::C_Name}}}" id="frame-browser" z-index="{{{Const::C_ZIndex_BrowserAPI}}}" hidden="1"/>
<frameinstance id="loadingspinner-create-or-edit-bucket" modelid="{{{LoadingSpinner::C_Name}}}" data-dimmer="true" data-opacity="0." z-index="{{{Const::C_ZIndex_Loading}}}"/>

<!-- Frame global -->
<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="cancel;appmenu" data-nav-targets="_;_" data-nav-group="{{{C_NavGroup_Global}}}" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" z-index="-1"/>
	<frameinstance id="popupclubthemes-icon" modelid="{{{PopUpClubThemes::C_Name}}}" z-index="3"/>
	<label id="label-title" pos="{{{MLHelpers::Skew(-127.7, 69.2, 10.)}}}" size="250 35" class="text-extrabold" textsize="13" maxline="2" halign="left" valign="top" z-index="1"/>
	<label id="label-info" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-semibold" textsize="2.5" halign="left"/>

	<frameinstance 
		id="textfield-name" pos="{{{MLHelpers::Skew(-125.3, 9., 10.)}}}"
		modelid="{{{TextField::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-size="73.5 9"
		data-placeholder="{{{Text_Name}}}"
		data-bgopacityunfocus="0.4"
		data-bgcolorfocus="{{{ColorPalette::C_Color_GreenFour}}}"
		data-bgcolorunfocus="{{{ColorPalette::C_Color_GreenFour}}}"
		data-contourcolorfocus="{{{ColorPalette::C_Color_GreenOne}}}"
		data-contouropacityunfocus="0."
		data-contouropacityfocus="1."
		data-textsize="3."
		data-textcolorunfocus="{{{ColorPalette::C_Color_GreenOne}}}"
		data-halign="left" data-valign="center"
		data-nav-inputs="select;down;right"
		data-nav-targets="_;button-logo;button-create"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{TextField::C_NavZone}}}"
	/>

	<frameinstance 
		id="button-logo" pos="{{{MLHelpers::Skew(-127.5, -15., 10.)}}}"
		modelid="{{{Button::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-size="{{{MLHelpers::MLKeepRatioFromY(608., 272., 35.)}}}"
		data-opacityunfocus=".6"
		data-tts-text="{{{TTS_ChooseLogo}}}"
		data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}"
		data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}"
		data-focuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
		data-iconcolor="{{{ColorPalette::C_Color_GreenOne}}}"
		data-iconfocuscolor="{{{ColorPalette::C_Color_White}}}"
		data-iconsize="13 13"
		data-bgkeepratio="clip"
		data-contouropacityunfocus="0."
		data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
		data-contourimage="{{{Const::C_ImageUrl_ClubActivity_Contour}}}"
		data-halign="left" data-valign="center"
		data-nav-inputs="select;up;down;right"
		data-nav-targets="_;textfield-name;button-back;button-create"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
	/>

	<!-- Bottom buttons -->
	<frameinstance id="button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
	<frameinstance
		id="button-back" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-max-width="60."
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;up;right"
		data-nav-targets="_;button-logo;button-create"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance id="button-icon-create" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" data-halign="left" data-size="8 8" data-bind="appmenu" data-hideformouse="1" />
	<frameinstance
		id="button-create" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_Create}}}"
		data-max-width="70."
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-halign="right"
		data-nav-inputs="select;up;left"
		data-nav-targets="_;button-logo;button-back"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "TextLib" as TL

#Const C_Name_MaxChar 20

#Struct K_Controls {
	CMlFrame Button_Back;
	CMlFrame Button_Create;
	CMlFrame Button_Logo;
	CMlFrame Frame_Browser;
	CMlFrame LoadingSpinner_CreateOrEditBucket;
	CMlFrame PopUpClubThemes_Icon;
	CMlFrame TextField_Name;
	CMlLabel Label_Info;
	CMlLabel Label_Title;
}

#Struct K_State {
	Boolean IsEditing;
	Text BucketActivityType;
	K_Controls Controls;
	{{{ClubStruct::P}}}K_Activity Activity;
}
""",
"""
// Enable or disable navigation groups
Void EnableNavigationGroups(Boolean _IsEnabled) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", _IsEnabled);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", _IsEnabled);
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{TextField::P}}}IsTextField(_From)) {
			{{{TextField::P}}}Unfocus(This, _From as CMlFrame);
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{TextField::P}}}IsTextField(_To)) {
			{{{TextField::P}}}Focus(This, _To as CMlFrame);
		}
	}
}

Void DisplayBrowser(Boolean _IsVisible, CMlFrame _Frame_Browser) {
	_Frame_Browser.Visible = _IsVisible;
	EnableNavigationGroups(!_IsVisible);
	{{{BrowserAPI::P}}}FocusBrowser(This, _IsVisible);
	if (_IsVisible) {
		declare BrowserSettings = {{{BrowserAPI::P}}}GetDefaultSettings();
		BrowserSettings.FilterByExtension = ["png", "jpg", "jpeg"];
		BrowserSettings.DisplayFileNameTooltip = True;
		{{{BrowserAPI::P}}}SetCurrentBrowser(This, 
			{{{BrowserAPI::C_BrowserType_PathNavigation}}}, 
			"{{{BrowserAPI::C_BrowserName_Image}}}", 
			[{{{BrowserAPI::C_DataType_Image}}}], 
			"", 
			BrowserSettings
		);
		{{{BrowserAPI::P}}}RefreshBrowserData(This);
	} else {
		ControllerInfo::SetButtons(["A" => _("Select")]);
	}
}

Void Select(K_State _State, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return;

	_State.Controls.Label_Info.SetText("");
	switch (_Control.ControlId) {
		case "button-back": {{{Router::P}}}PushParent(This);
		case "button-logo": {
			if (Platform::IsFromFirstParty(System)) {
				{{{PopUpClubThemes::P}}}Open(This);
			} else {
				DisplayBrowser(True, _State.Controls.Frame_Browser);
			}
		}
		case "button-create": {
			if (_State.Activity.Name == "") {
				_State.Controls.Label_Info.SetText("{{{Text_NoName}}}");
			} else {
				EnableNavigationGroups(False);
				if (_State.IsEditing) {
					{{{LoadingSpinner::P}}}StartAnimWithFade(This, _State.Controls.LoadingSpinner_CreateOrEditBucket, "{{{Text_Editing}}}");
					{{{ClubStore::P}}}Action_EditBucketActivity(This, {{{ClubStore::P}}}GetUserCurrentClub().Id,  _State.Activity.Id, _State.Activity.Name, _State.Activity.MediaUrl);
				} else {
					{{{LoadingSpinner::P}}}StartAnimWithFade(This, _State.Controls.LoadingSpinner_CreateOrEditBucket, "{{{Text_Creating}}}");
					{{{ClubStore::P}}}Action_CreateBucketActivity(This, {{{ClubStore::P}}}GetUserCurrentClub().Id, _State.Activity.Name, _State.Activity.MediaUrl, _State.BucketActivityType);
				}
			}
		}
	}
}

Void UpdateLogo(K_State _State) {
	if (_State.Activity.MediaUrl != "") {
		if ({{{ClubStruct::P}}}IsClubThemeName(_State.Activity.MediaUrl)) {
			{{{Button::P}}}SetImage(This, _State.Controls.Button_Logo, {{{ClubStruct::P}}}GetClubThemeUrl(_State.Activity.MediaUrl, "{{{ClubStruct::C_MediaType_Icon}}}"));
			{{{Button::P}}}SetImageFocus(This, _State.Controls.Button_Logo, {{{ClubStruct::P}}}GetClubThemeUrl(_State.Activity.MediaUrl, "{{{ClubStruct::C_MediaType_Icon}}}"));
		} else if (Http.IsValidUrl(_State.Activity.MediaUrl) || {{{ClubStruct::P}}}IsClubThemeUrl(_State.Activity.MediaUrl)) {
			{{{Button::P}}}SetImage(This, _State.Controls.Button_Logo, _State.Activity.MediaUrl);
			{{{Button::P}}}SetImageFocus(This, _State.Controls.Button_Logo, _State.Activity.MediaUrl);
		} else {
			{{{Button::P}}}SetImage(This, _State.Controls.Button_Logo, {{{BrowserAPI::P}}}C_BasePath^_State.Activity.MediaUrl);
			{{{Button::P}}}SetImageFocus(This, _State.Controls.Button_Logo, {{{BrowserAPI::P}}}C_BasePath^_State.Activity.MediaUrl);
		}
		{{{Button::P}}}SetOpacityUnfocus(This, _State.Controls.Button_Logo, 0.75);
		{{{Button::P}}}SetIcon(This, _State.Controls.Button_Logo, "");
		{{{Button::P}}}SetIconFocus(This, _State.Controls.Button_Logo, "");
		{{{Button::P}}}SetBgColorType(This, _State.Controls.Button_Logo, {{{Button::C_ColorType_None}}});
	} else {
		{{{Button::P}}}SetOpacityUnfocus(This, _State.Controls.Button_Logo, 0.5);
		{{{Button::P}}}SetImage(This, _State.Controls.Button_Logo, "{{{Const::C_ImageUrl_ClubActivity}}}");
		{{{Button::P}}}SetImageFocus(This, _State.Controls.Button_Logo, "{{{Const::C_ImageUrl_ClubActivity}}}");
		{{{Button::P}}}SetIcon(This, _State.Controls.Button_Logo, "{{{Const::C_ImageUrl_Icon_Plus_Oblique}}}");
		{{{Button::P}}}SetIconFocus(This, _State.Controls.Button_Logo, "{{{Const::C_ImageUrl_Icon_Plus_Oblique}}}");
		{{{Button::P}}}SetBgColorType(This, _State.Controls.Button_Logo, {{{Button::C_ColorType_Colorize}}});
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_State State;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	Controls = K_Controls {
		Frame_Browser = (Page.GetFirstChild("frame-browser") as CMlFrame),
		Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
		Button_Create = (Frame_Global.GetFirstChild("button-create") as CMlFrame),
		Button_Logo = (Frame_Global.GetFirstChild("button-logo") as CMlFrame),
		Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
		Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
		LoadingSpinner_CreateOrEditBucket = (Page.GetFirstChild("loadingspinner-create-or-edit-bucket") as CMlFrame),
		PopUpClubThemes_Icon = (Frame_Global.GetFirstChild("popupclubthemes-icon") as CMlFrame),
		TextField_Name = (Frame_Global.GetFirstChild("textfield-name") as CMlFrame)
	}
};
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_CreateBucketActivity}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);

				if (Query.existskey("{{{RoutePaths::C_Query_BucketActivityType}}}")) {
					State.BucketActivityType = Query["{{{RoutePaths::C_Query_BucketActivityType}}}"];
					State.IsEditing = Query.existskey("{{{RoutePaths::C_Query_Activity}}}");
					if (State.IsEditing) {
						State.Activity.fromjson(Query["{{{RoutePaths::C_Query_Activity}}}"]);
						{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Create, "{{{Text_Save}}}");
						if ({{{ClubStruct::P}}}IsClubThemeUrl(State.Activity.MediaUrl)) {{{PopUpClubThemes::P}}}SelectClubTheme(This, State.Activity.MediaUrl);
						else {{{PopUpClubThemes::P}}}SelectClubTheme(This, {{{PopUpClubThemes::P}}}C_Choice_None);
						switch (State.BucketActivityType) {
							case {{{ClubStruct::P}}}C_ClubActivity_MapUpload: State.Controls.Label_Title.SetText("{{{Text_EditMapUploads}}}");
							case {{{ClubStruct::P}}}C_ClubActivity_SkinUpload: State.Controls.Label_Title.SetText("{{{Text_EditSkinUploads}}}");
						}
					} else {
						State.Activity = {{{ClubStruct::P}}}K_Activity {};
						{{{PopUpClubThemes::P}}}SelectClubTheme(This, {{{PopUpClubThemes::P}}}C_Choice_None);
						{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Create, "{{{Text_Create}}}");
						switch (State.BucketActivityType) {
							case {{{ClubStruct::P}}}C_ClubActivity_MapUpload: State.Controls.Label_Title.SetText("{{{Text_CreateMapUploads}}}");
							case {{{ClubStruct::P}}}C_ClubActivity_SkinUpload: State.Controls.Label_Title.SetText("{{{Text_CreateSkinUploads}}}");
						}
					}

					UpdateLogo(State);
					DisplayBrowser(False, State.Controls.Frame_Browser);
					{{{TextField::P}}}SetValue(This, State.Controls.TextField_Name, State.Activity.Name);
					Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.TextField_Name);
					ControllerInfo::SetButtons(["A" => _("Select")]);
				} else {
					{{{Router::P}}}PushParent(This);
				}
			}
		}
	}

	/* TextField events */
	foreach (Event in {{{TextField::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TextField::P}}}C_EventType_Update: {
				if (Event.Control != Null && Event.Control.ControlId == State.Controls.TextField_Name.ControlId) {
					if (Event.Value != State.Activity.Name) {
						declare Text NewName = Tools::FormatValue(Event.Value);
						declare Integer Length = TL::Length(TL::StripFormatting(NewName));
						if (Length > C_Name_MaxChar) {
							//L16N [CreateBucketActivity] Message displayed when the activity name exceeds the maximum number of characters. %1 will be replaced by a number, e.g. "The activty name has a maximum of 20 characters"
							State.Controls.Label_Info.Value = TL::Compose(_("The name activity has a maximum of %1 characters"), ""^C_Name_MaxChar);
							NewName = TL::SubText(NewName, 0, C_Name_MaxChar);
						} else {
							State.Controls.Label_Info.Value = "";
						}
						State.Activity.Name = NewName;
						{{{TextField::P}}}SetValue(This, State.Controls.TextField_Name, NewName);
					}
				}
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}") || {{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: Select(State, Event.To);
						case CMlScriptEvent::EMenuNavAction::AppMenu: Select(State, State.Controls.Button_Create);
						case CMlScriptEvent::EMenuNavAction::Cancel: {{{Router::P}}}PushParent(This);
						default: Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: Select(State, Event.To);
						case CMlScriptEvent::Type::MouseOver: Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* ClubStore events */
	foreach (Event in PendingEvents) {
		if (Event.Type == CMlScriptEvent::Type::PluginCustomEvent) {
			switch (Event.CustomEventType) {
				case {{{ClubStore::P}}}C_Event_BucketActivityCreatedOrEdited: {{{Router::P}}}PushParent(This);
				case {{{ClubStore::P}}}C_Event_BucketActivityCreationOrEditionFailed: {
					{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditBucket);
					EnableNavigationGroups(True);
					if (Event.CustomEventData.count > 0) {
						State.Controls.Label_Info.SetText(Event.CustomEventData[0]);
					}
				}
			}
		}
	}

	/* Browser events */
	foreach (Event in {{{BrowserAPI::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{BrowserAPI::P}}}C_EventType_Select: {
				DisplayBrowser(False, State.Controls.Frame_Browser);
				if (Event.DataType == {{{BrowserAPI::P}}}C_DataType_Image) {
					State.Activity.MediaUrl = {{{BrowserAPI::P}}}C_BasePath_Media^Event.Data;
					UpdateLogo(State);
				}
			}
			case {{{BrowserAPI::P}}}C_EventType_Cancel: {
				DisplayBrowser(False, State.Controls.Frame_Browser);
			}
		}
	}

	/* Activity image events */
	foreach (Event in {{{PopUpClubThemes::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{PopUpClubThemes::P}}}C_EventType_Display: EnableNavigationGroups(!Event.PopUpClubThemes.Visible);
			case {{{PopUpClubThemes::P}}}C_EventType_Confirm: {
				if (Event.PopUpClubThemes != Null && Event.PopUpClubThemes.Id == State.Controls.PopUpClubThemes_Icon.Id) {
					if (Event.MediaUrl != "") State.Activity.MediaUrl = Event.ThemeName;
					else State.Activity.MediaUrl = Event.MediaUrl;
					ControllerInfo::SetButtons(["A" => _("Select")]);
					UpdateLogo(State);
				}
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background" && {{{Navigation::P}}}GroupIsEnabled(This, "{{{C_NavGroup_Default}}}")) {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: {{{Router::P}}}PushParent(This);
			}
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_LeavingRoute}}}": {
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditBucket);
				EnableNavigationGroups(True);
			}
		}
	}
}
***
""",
[
	BrowserAPI::ComponentV2(),
	Button::ComponentV2(),
	ButtonIcon::ComponentV2(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpBackground::ComponentV2(),
	PopUpClubThemes::ComponentV2(),
	Router::ComponentV2(),
	TextField::ComponentV2(),
	Transition::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}