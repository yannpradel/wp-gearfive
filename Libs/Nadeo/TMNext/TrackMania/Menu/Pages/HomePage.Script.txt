/** 
 *	Page: HomePage
 */
#Const Version		"2023-06-09"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/HomePage.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/NewsStore_ML.Script.txt" as NewsStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/NewsStruct.Script.txt" as NewsStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Checkbox.Script.txt" as Checkbox

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_HomePage"
#Const C_NavGroupName "navgroup-home-page"
#Const C_NavGroupName_MouseOnly "navgroup-home-page-mouseonly"

#Const C_Class_News "page-home-class-news"
#Const C_ExpendableButtonStyle_StackHomePage "expendable-button-style-stack-homepage"

#Const C_Choice_Cancel 0
#Const C_Choice_Quit 1
#Const C_Choices_QuitGame [
	//L16N [HomePage] The player doesn't want to quit the game
	0 => _("Cancel"),
	//L16N [HomePage] The player wants to quit the game
	1 => _("Quit")
]

#Const Const::C_Choices_ConnectionRestored as C_Choices_ConnectionRestored

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [HomePage] Button to access the Play menu (which include Solo, Live and Local pages).
	declare Text Text_Play = _("|HomePage|Play");
	//L16N [HomePage] Button to access the Clubs menu.
	declare Text Text_Clubs	= _("|HomePage|Clubs");
	//L16N [HomePage] Button to access the Create menu.
	declare Text Text_Create = _("|HomePage|Create");
	// Do not translate "Ubisoft Connect"
	declare Text Text_UbiConnect = "Ubisoft Connect";
	//L16N [HomePage] Button to access the Settings menu
	declare Text Text_Settings = _("|HomePage|Settings");
	//L16N [HomePage] Title of the quit game pop up.
	declare Text Text_QuitGamePopUp_Title = _("Quit game");
	//L16N [HomePage] Title of the cross platform pop up.
	declare Text Text_CrossPlayPopUp_Title = _("Cross platform play");
	//L16N [HomePage] Text asking console players if they want to return to the title screen
	declare Text Text_FirstPartyQuit = _("Go back to the title screen?");
	//L16N [HomePage] Text asking console players if they want to quit the game.
	declare Text Text_QuitGameDescription = _("Are you sure you want to quit Trackmania?");
	// Description of the crossplay pop-up
	declare Text Text_NetworkName = "$<$i"^Platform::GetNetworkName(System)^"$>";
	if (Platform::IsPC(System)) Text_NetworkName = _("PC");
	//L16N [HomePage] Description of the cross platform pop up. %1 will be replaced with the name of the current platform network. e.g. "To play with Xbox network users only..."
	declare Text Text_PopUpCrossplay = _("You are currently able to play with players from other networks. To play with %1 users only, disable this feature in the settings menu.");
	if (Platform::IsMicrosoft(System)) {
		//L16N [HomePage] Description of the cross platform pop up for Xbox consoles. %1 will be replaced with the name of the current platform network. e.g. "To play with Xbox network users only..."
		Text_PopUpCrossplay = _("You are currently able to play with players from other networks. To play with %1 users only, disable this feature in the console parameters.");
	}
	declare PopUpMultiChoice::K_DescriptionPart[] Description_CrossPlay = [
		PopUpMultiChoice::CreateDescriptionPart(TL::Compose(Text_PopUpCrossplay, Text_NetworkName), <130., 30.>, 3., FontManager::C_GameFontSemiBold, "$t$i", <1., 1., 1.>, False)
	];
	// Description of the offline pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_Offline = [
		PopUpMultiChoice::CreateDescriptionPart(Const::C_OfflinePopUp_Description, <120., 30.>, 3., FontManager::C_GameFontSemiBold, "$t$i", <1., 1., 1.>, False)
	];
	
	declare Vec2 Size_Button = <98., 14.> * 0.84;
	declare Real Pos_Buttons_X = -90.;
	declare Real Margin = 1.5;

	declare Real[] Pos_Buttons_Y;
	Pos_Buttons_Y.add(42.);
	for (I, 1, 3) {
		Pos_Buttons_Y.add(Pos_Buttons_Y[I-1] - Size_Button.Y - Margin);
	}

	declare Vec2 Size_Button_News = <105.2, 53.6> * 0.84;
	declare Real Pos_Button_News_Y = Pos_Buttons_Y[3] - (Size_Button_News.Y * 0.635) - Margin;
	declare Vec2 Size_News_Tabs = <20.4, 7.2> * 0.84;
	declare Vec2 Size_NewsTabsButton = <2.5, 2.5>;
	declare Real SizeX_NewsTabsButtonGap = 1.;
	declare Real Pos_NewsTab_Y = Pos_Button_News_Y - Size_Button_News.Y/2. + Size_News_Tabs.Y/2. + 0.1;

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$t$i" textcolor="FFFFFF" textsize="2"/>
	<style class="text-regular" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontRegular}}}" textprefix="$t$i" textcolor="FFFFFF" textsize="3"/>
	<style class="text-error" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i" textcolor="{{{ColorPalette::C_Color_ErrorRed}}}" textsize="4"/>
	<style class="quad-base" halign="center" valign="center"/>
</stylesheet>

<!-- Pop-ups -->
<frameinstance 
	id="popupmultichoice-quit-game" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}"
	modelid="{{{PopUpMultiChoice::C_Name}}}" 
	data-title="{{{Text_QuitGamePopUp_Title}}}" 
	data-choices="{{{TL::MLEncode(C_Choices_QuitGame.tojson())}}}" 
	data-styles-secondchoice="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_ButtonWarning}}}"
	hidden="1"
/>
<frameinstance 
	id="popupmultichoice-cross-play" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}" 
	modelid="{{{PopUpMultiChoice::C_Name}}}" 
	data-title="{{{Text_CrossPlayPopUp_Title}}}" 
	data-description="{{{TL::MLEncode(Description_CrossPlay.tojson())}}}" 
	data-selection-required="true"
	hidden="1"
/>
<frameinstance 
	id="popupmultichoice-offline" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}"
	modelid="{{{PopUpMultiChoice::C_Name}}}"
	data-title="{{{Const::C_OfflinePopUp_Title}}}"
	data-description="{{{TL::MLEncode(Description_Offline.tojson())}}}"
	data-choices="{{{TL::MLEncode(C_Choices_ConnectionRestored.tojson())}}}" 
	data-default-focus-second-button="1"
	hidden="1"
/>

<!-- Frame global -->
<frame id="frame-global">
	<frameinstance
		id="button-play"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		pos="{{{MLHelpers::Skew(Pos_Buttons_X, Pos_Buttons_Y[0], 10.)}}}"
		z-index="1"
		data-text="{{{Text_Play}}}"
		data-supersample="1"
		data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{ExpendableButton::C_Style_StackTop}}} {{{C_ExpendableButtonStyle_StackHomePage}}}"

		data-nav-inputs="select;cancel;up;down;right;left"
		data-nav-targets="_;_;button-settings;button-clubs;_;_"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance
		id="button-clubs"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		pos="{{{MLHelpers::Skew(Pos_Buttons_X, Pos_Buttons_Y[1], 10.)}}}"
		z-index="1"
		data-text="{{{Text_Clubs}}}"
		data-supersample="1"
		data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{C_ExpendableButtonStyle_StackHomePage}}}"

		data-nav-inputs="select;cancel;up;down;right;left"
		data-nav-targets="_;_;button-play;button-create;_;_"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance
		id="button-create"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		pos="{{{MLHelpers::Skew(Pos_Buttons_X, Pos_Buttons_Y[2], 10.)}}}"
		z-index="1"
		data-text="{{{Text_Create}}}"
		data-supersample="1"
		data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{C_ExpendableButtonStyle_StackHomePage}}}"

		data-nav-inputs="select;cancel;up;down;right;left"
		data-nav-targets="_;_;button-clubs;button-ubi-connect;_;_"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance
		id="button-ubi-connect"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		pos="{{{MLHelpers::Skew(Pos_Buttons_X, Pos_Buttons_Y[3], 10.)}}}"
		z-index="1"
		data-text="{{{Text_UbiConnect}}}"
		data-supersample="1"
		data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{C_ExpendableButtonStyle_StackHomePage}}}"

		data-nav-inputs="select;cancel;up;down;right;left"
		data-nav-targets="_;_;button-create;button-news;_;_"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance id="button-news"
		modelid="{{{Button::C_Name}}}"
		z-index="1"
		pos="{{{MLHelpers::Skew(Pos_Buttons_X, Pos_Button_News_Y, 10.)}}}"
		class="{{{Navigation::C_Class}}} {{{C_Class_News}}}"
		data-opacity="1."
		data-size="{{{Size_Button_News.X}}} {{{Size_Button_News.Y}}}"
		data-image="{{{Const::C_ImageUrl_Home_News_BG}}}"
		data-imagefocus="{{{Const::C_ImageUrl_Home_News_BG}}}"
		data-alphamask="{{{Const::C_ImageUrl_Home_News_Mask}}}"
		data-contourimage="{{{Const::C_ImageUrl_Home_News_Contour}}}"
		data-contourimagecolor="{{{ColorPalette::C_Color_GreenOne}}}"
		data-contouropacityunfocus=".0"
		data-contouropacityfocus="1."
		data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
		data-halign="center"
		data-valign="center"
		data-tilthitbox="10"
		data-supersample="1"

		data-nav-inputs="select;cancel;up;down;right;left"
		data-nav-targets="_;_;button-ubi-connect;button-settings;_;_"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
	/>

	<quad id="quad-tmp-news-image" z-index="2" opacity="0." pos="{{{MLHelpers::Skew(Pos_Buttons_X, Pos_Button_News_Y, 10.)}}}" size="{{{Size_Button_News.X}}} {{{Size_Button_News.Y}}}" alphamask="{{{Const::C_ImageUrl_Home_News_Mask}}}" class="quad-base" />
	<quad id="quad-news-shadow" z-index="3" pos="{{{MLHelpers::Skew(Pos_Buttons_X, Pos_Button_News_Y, 10.)}}}" size="{{{Size_Button_News.X}}} {{{Size_Button_News.Y}}}" image="{{{Const::C_ImageUrl_Home_News_Shadows}}}" colorize="000" class="quad-base" />
	<label id="label-news" z-index="4" pos="{{{MLHelpers::Skew(Pos_Buttons_X, Pos_Button_News_Y - 12., 10.)}}}" size="{{{Size_Button_News.X * 0.8}}} 20" autonewline="1" maxline="2" class="text-extrabold" />
	
	<frame id="frame-news-tabs" z-index="4" pos="-66.1 {{{Pos_NewsTab_Y}}}" hidden="1">
		<quad id="quad-news-tabs-bg" size="{{{Size_News_Tabs.X}}} {{{Size_News_Tabs.Y}}}" image="{{{Const::C_ImageUrl_Home_News_Tabs}}}" colorize="C4C4C4" opacity="0.6" class="quad-base" scriptevents="1" />
		<frame id="frame-news-tabs-buttons-focus" z-index="1">
			<quad id="quad-news-pager-1" {{{MLHelpers::Size(Size_NewsTabsButton)}}} image="{{{Const::C_ImageUrl_Icon_Radio_Button_On}}}" colorize="FFFFFF" opacity="0" class="quad-base news-pager {{{Navigation::C_Class}}}" scriptevents="1" data-key="0" data-nav-inputs="select" data-nav-targets="_" data-nav-group="{{{C_NavGroupName_MouseOnly}}}" />
			<quad id="quad-news-pager-2" {{{MLHelpers::Size(Size_NewsTabsButton)}}} image="{{{Const::C_ImageUrl_Icon_Radio_Button_On}}}" colorize="FFFFFF" opacity="0" class="quad-base news-pager {{{Navigation::C_Class}}}" scriptevents="1" data-key="1" data-nav-inputs="select" data-nav-targets="_" data-nav-group="{{{C_NavGroupName_MouseOnly}}}" />
			<quad id="quad-news-pager-3" {{{MLHelpers::Size(Size_NewsTabsButton)}}} image="{{{Const::C_ImageUrl_Icon_Radio_Button_On}}}" colorize="FFFFFF" opacity="0" class="quad-base news-pager {{{Navigation::C_Class}}}" scriptevents="1" data-key="2" data-nav-inputs="select" data-nav-targets="_" data-nav-group="{{{C_NavGroupName_MouseOnly}}}" />
		</frame>
		<frame id="frame-news-tabs-buttons-off" z-index="2">
			<quad {{{MLHelpers::Size(Size_NewsTabsButton)}}} image="{{{Const::C_ImageUrl_Icon_Radio_Button_Off}}}" colorize="FFFFFF" class="quad-base" />
			<quad {{{MLHelpers::Size(Size_NewsTabsButton)}}} image="{{{Const::C_ImageUrl_Icon_Radio_Button_Off}}}" colorize="FFFFFF" class="quad-base" />
			<quad {{{MLHelpers::Size(Size_NewsTabsButton)}}} image="{{{Const::C_ImageUrl_Icon_Radio_Button_Off}}}" colorize="FFFFFF" class="quad-base" />
		</frame>
		<quad id="quad-button-on" z-index="3" {{{MLHelpers::Size(Size_NewsTabsButton)}}} image="{{{Const::C_ImageUrl_Icon_Radio_Button_On}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" class="quad-base" />
	</frame>

	<frameinstance
		id="button-settings"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		pos="-151.5 -73"
		z-index="1"
		data-text="{{{Text_Settings}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}}"
		data-halign="left"
		data-nav-inputs="select;cancel;up;down;right;left"
		data-nav-targets="_;_;button-news;button-play;_;_"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>

	<label id="label-error" pos="10 -75" size="150 10" opacity="0." class="text-error"/>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "AnimLib" as AL
#Include "Libs/Nadeo/CommonLibs/Common/Task.Script.txt" as Task
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/CommonLibs/Common/Tracking.Script.txt" as Tracking
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo

#Const C_MaxNewsDisplayed 3
#Const C_NewsDisplayDuration 8000

#Const C_AutoFadeInDuration 300
#Const C_AutoFadeGap 200
#Const C_AutoFadeOutDuration 500

#Const C_ManualFadeInDuration 150
#Const C_ManualFadeGap 100
#Const C_ManualFadeOutDuration 250

#Const C_Choice_Cancel {{{dump(C_Choice_Cancel)}}}
#Const C_Choice_Quit {{{dump(C_Choice_Quit)}}}

#Const C_Choice_Reconnect {{{dump(Const::C_Choice_Reconnect)}}}

#Struct K_NewsInteraction {
	Text NewsId;
	Text Placement;
	Text ActionName;
}

#Struct K_Controls {
	CMlFrame Frame_News_Tabs;
	CMlLabel Label_News;
	CMlFrame Button_News;
	CMlFrame Button_Play;
	CMlFrame Frame_NewsTabsButtonsOff;
	CMlFrame Frame_NewsTabsButtonsFocus;
	CMlQuad Quad_News_Button_On;
	CMlQuad Quad_Tmp_News_Img;
	CMlFrame PopUpMultiChoice_CrossPlay;
	CMlFrame PopUpMultiChoice_Offline;
	CMlFrame PopUpMultiChoice_QuitGame;
}

#Struct K_State {
	K_Controls Controls;
	Task::K_Task Task_ShowUbisoftConnect;
	Task::K_Task Task_OpenNewsLink;
	{{{NewsStruct::P}}}K_News[] News;
	{{{NewsStruct::P}}}K_NewsLink[] PendingLinksList;
	K_NewsInteraction NewsInteraction;
	Integer CurrentNewsIndex;
	Integer NewsAnimEndTime;
	Integer NewsChangeTime;
	Boolean IsManualNewsSwitch;
}

#Const C_NewsInteraction_Null K_NewsInteraction {
	NewsId = {{{dump(NewsStruct::C_NewsNullId)}}},
	Placement = {{{dump(NewsStruct::C_Placement_Null)}}},
	ActionName = ""
}

""",
"""
Boolean CanGoBackToTitleScreen() {
	return (
		Platform::IsFromFirstParty(System) &&
		Platform::GetPlatform(System) != CSystemPlatform::ESystemPlatform::Luna
	);
}

Void UpdateControllerInfo(K_State _State) {
	if (_State.Controls.PopUpMultiChoice_CrossPlay.Visible) {
		ControllerInfo::SetButtons(["A" => _("Select")]);
	} else if (_State.Controls.PopUpMultiChoice_QuitGame.Visible) {
		ControllerInfo::SetButtons(["A" => _("Select"), "B" => _("Back")]);
	} else {
		declare Text Echap = _("Quit");
		if (CanGoBackToTitleScreen()) Echap = _("Back");
		if ({{{UserStore::P}}}IsOfflineMode()) {
			ControllerInfo::SetButtons(["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "B" => Echap]);
		} else {
			ControllerInfo::SetButtons(["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "{{{Const::C_NavInput_ClubWidget}}}" => "{{{Const::C_Text_ClubWidget}}}", "B" => Echap]);
		}
	}
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Checkbox::P}}}IsCheckbox(_From)) {
			{{{Checkbox::P}}}Unfocus(This, _From as CMlFrame);
		} else if (_From.HasClass("news-pager")) {
			AnimMgr.Flush(_From);
			AnimMgr.Add(_From, "<anim opacity=\"0\" />", 250, CAnimManager::EAnimManagerEasing::Linear);
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Checkbox::P}}}IsCheckbox(_To)) {
			{{{Checkbox::P}}}Focus(This, _To as CMlFrame);
		} else if (_To.HasClass("news-pager")) {
			AnimMgr.Flush(_To);
			AnimMgr.Add(_To, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::Linear);
		}
	}
}

Void FinishNewsAnimation(K_State _State, Integer _CurrentNewsIndex) {
	// Set news data
	if (_State.Controls.Frame_NewsTabsButtonsOff.Controls.existskey(_CurrentNewsIndex)) {
		_State.Controls.Quad_News_Button_On.RelativePosition_V3.X = _State.Controls.Frame_NewsTabsButtonsOff.Controls[_CurrentNewsIndex].RelativePosition_V3.X;
	} else {
		_State.Controls.Quad_News_Button_On.RelativePosition_V3.X = 0.;
	}
	if (_State.News.existskey(_State.CurrentNewsIndex)) _State.Controls.Label_News.Value = _State.News[_State.CurrentNewsIndex].Title;
	{{{Button::P}}}SetTextToSpeech(This, _State.Controls.Button_News, _State.Controls.Label_News.Value);
	Tools::FitLabelValue(_State.Controls.Label_News, 2., 0.75, 0.25);

	// Finish fade animation
	declare Integer FadeOutDuration = C_AutoFadeOutDuration;
	if (_State.IsManualNewsSwitch) {
		FadeOutDuration = C_ManualFadeOutDuration;
	}
	AnimMgr.Add(_State.Controls.Label_News, "<anim opacity=\"1.\" />", FadeOutDuration, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(_State.Controls.Quad_News_Button_On, "<anim opacity=\"1.\" />", FadeOutDuration, CAnimManager::EAnimManagerEasing::Linear);
}

K_State UpdateNewsDisplay(K_State _State, Integer _Shift, Boolean _ManualSwitch) {
	declare K_State State = _State;

	State.NewsChangeTime = Now + C_NewsDisplayDuration;

	if (State.News.count <= 0) {
		State.CurrentNewsIndex = 0;
	} else {
		State.CurrentNewsIndex += _Shift;
		if (State.CurrentNewsIndex < 0) State.CurrentNewsIndex = State.News.count - 1;
		else if (State.CurrentNewsIndex > State.News.count - 1) State.CurrentNewsIndex = 0;
	}
	State.Controls.Frame_News_Tabs.Visible = State.News.count > 1;

	if (State.News.existskey(State.CurrentNewsIndex)) {
		declare {{{NewsStruct::P}}}K_News News = State.News[State.CurrentNewsIndex];
		Tracking::SendNewsImpression(
			ParentApp.TrackingMgr,
			System,
			News.Placement,
			News.Id,
			News.DisplayTime
		);
		State.Controls.Quad_Tmp_News_Img.ChangeImageUrl({{{Button::P}}}GetImage(State.Controls.Button_News));
		State.Controls.Quad_Tmp_News_Img.Opacity = 1.;

		if (News.DisplayTime > 0) {
			State.NewsChangeTime = Now + (News.DisplayTime * 1000);
		}

		declare Text MediaUrl = News.MediaUrl;
		if (MediaUrl != "") {
			{{{Button::P}}}SetImage(This, State.Controls.Button_News, MediaUrl);
			{{{Button::P}}}SetImageFocus(This, State.Controls.Button_News, MediaUrl);
		} else {
			{{{Button::P}}}SetImage(This, State.Controls.Button_News, "{{{Const::C_ImageUrl_Home_News_BG}}}");
			{{{Button::P}}}SetImageFocus(This, State.Controls.Button_News, "{{{Const::C_ImageUrl_Home_News_BG}}}");
		}

		// Start fade animation
		AnimMgr.Flush(State.Controls.Label_News);
		AnimMgr.Flush(State.Controls.Quad_Tmp_News_Img);
		AnimMgr.Flush(State.Controls.Quad_News_Button_On);
		declare Integer FadeInDuration = C_AutoFadeInDuration;
		declare Integer FadeOutDuration = C_AutoFadeOutDuration;
		declare Integer FadeGap = C_AutoFadeGap;
		State.IsManualNewsSwitch = _ManualSwitch;
		if (_ManualSwitch) {
			FadeInDuration = C_ManualFadeInDuration;
			FadeOutDuration = C_ManualFadeOutDuration;
			FadeGap = C_ManualFadeGap;
		}
		AnimMgr.Add(State.Controls.Label_News, "<anim opacity=\"0.\" />", FadeInDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(State.Controls.Quad_Tmp_News_Img, "<anim opacity=\"0.\" />", FadeInDuration + FadeGap + FadeOutDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(State.Controls.Quad_News_Button_On, "<anim opacity=\"0.\" />", FadeInDuration, CAnimManager::EAnimManagerEasing::Linear);
		State.NewsAnimEndTime = Now + FadeInDuration + FadeGap;
	} else {
		State.Controls.Label_News.Value = "";
		{{{Button::P}}}SetImage(This, State.Controls.Button_News, "{{{Const::C_ImageUrl_Home_News_BG}}}");
		{{{Button::P}}}SetImageFocus(This, State.Controls.Button_News, "{{{Const::C_ImageUrl_Home_News_BG}}}");
		{{{Button::P}}}SetTextToSpeech(This, State.Controls.Button_News, State.Controls.Label_News.Value);
	}

	return State;
}

Void AlignNewsTabs(K_State _State) {
	declare Real SizeX_AllButtons = 0.;
	if (_State.News.count > 0) SizeX_AllButtons = (_State.News.count * {{{Size_NewsTabsButton.X}}}) + (_State.News.count - 1 * {{{SizeX_NewsTabsButtonGap}}});
	foreach (Key => Control in _State.Controls.Frame_NewsTabsButtonsOff.Controls) {
		if (Key < _State.News.count) {
			Control.RelativePosition_V3.X = (SizeX_AllButtons * -0.5) + ({{{Size_NewsTabsButton.X}}} * 0.5) + (Key * ({{{Size_NewsTabsButton.X}}} + {{{SizeX_NewsTabsButtonGap}}}));
			Control.Visible = True;
		} else {
			Control.Visible = False;
		}
	}
	foreach (Key => Control in _State.Controls.Frame_NewsTabsButtonsFocus.Controls) {
		if (Key < _State.News.count) {
			Control.RelativePosition_V3.X = (SizeX_AllButtons * -0.5) + ({{{Size_NewsTabsButton.X}}} * 0.5) + (Key * ({{{Size_NewsTabsButton.X}}} + {{{SizeX_NewsTabsButtonGap}}}));
			Control.Visible = True;
		} else {
			Control.Visible = False;
		}
	}
}

K_State UpdateNews(K_State _State) {
	declare K_State State = _State;

	State.News = {{{NewsStore::P}}}GetNews({{{NewsStruct::P}}}C_Placement_Homepage, C_MaxNewsDisplayed);
	AlignNewsTabs(State);
	State = UpdateNewsDisplay(State, 0, False);

	return State;
}

K_State Select(CMlControl _Control, K_State _State) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-play": {
			switch ({{{UserStore::P}}}GetCurrentPlayTabIndex()) {
				case {{{Const::C_TabIndex_Solo}}}: {{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Solo}}}");
				case {{{Const::C_TabIndex_Live}}}: {{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Live}}}");
				case {{{Const::C_TabIndex_Local}}}: {{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Local}}}");
				default: {{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Solo}}}");
			}
		}
		case "button-clubs": {
			if ({{{UserStore::P}}}IsOfflineMode()) {
				{{{PopUpMultiChoice::P}}}Open(This, State.Controls.PopUpMultiChoice_Offline);
			} else {
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Clubs}}}");
			}
		}
		case "button-create": {{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Create}}}");
		case "button-ubi-connect": State.Task_ShowUbisoftConnect = Task::DestroyAndCreate(State.Task_ShowUbisoftConnect, UserMgr, UserMgr.UbisoftConnect_Show(MainUser::GetMainUserId()));
		case "button-news": {
			// We put every links in a list and will try to open them all until one work
			if (!Task::IsInitialized(State.Task_OpenNewsLink) && State.News.existskey(State.CurrentNewsIndex)) {
				declare {{{NewsStruct::P}}}K_News News = State.News[State.CurrentNewsIndex];
				State.PendingLinksList = News.Links;
				State.NewsInteraction = K_NewsInteraction {
					NewsId = News.Id,
					Placement = News.Placement
				};
				State.Task_OpenNewsLink = Task::Destroy(State.Task_OpenNewsLink);
			}
		}
		case "button-settings": {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_Settings}}}", "{{{RoutePaths::C_Path_Home}}}");
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Settings}}}");
		}
	}

	if (_Control.HasClass("news-pager") && _Control.DataAttributeExists("key")) {
		declare Integer Shift = TL::ToInteger(_Control.DataAttributeGet("key")) - State.CurrentNewsIndex;
		if (Shift != 0) {
			State = UpdateNewsDisplay(State, Shift, True);
		}
	}

	return State;
}

Void SetErrorMessage(CMlLabel _Label, Text _Message) {
	_Label.Value = _Message;
	AnimMgr.Flush(_Label);
	AnimMgr.Add(_Label, "<a opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.Add(_Label, "<a opacity=\"0.\" />", Now+3000, 500, CAnimManager::EAnimManagerEasing::QuadOut);
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlLabel Label_Error;

declare K_State State;
{{{ExpendableButton::P}}}CreateStyle(This, "{{{C_ExpendableButtonStyle_StackHomePage}}}", {{{ExpendableButton::P}}}K_Properties {
	Enabled = [
		{{{ExpendableButton::P}}}C_Property_Width,
		{{{ExpendableButton::P}}}C_Property_Height,
		{{{ExpendableButton::P}}}C_Property_HAlign,
		{{{ExpendableButton::P}}}C_Property_VAlign,
		{{{ExpendableButton::P}}}C_Property_TextFontSize,
		{{{ExpendableButton::P}}}C_Property_TextHAlign
	],
	Width = {{{Size_Button.X}}},
	Height = {{{Size_Button.Y}}},
	HAlign = CMlControl::AlignHorizontal::HCenter,
	VAlign = CMlControl::AlignVertical::VCenter,
	TextFontSize = 5.,
	TextHAlign = CMlControl::AlignHorizontal::Left
});
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Label_Error <=> (Frame_Global.GetFirstChild("label-error") as CMlLabel);

State = K_State {
	Controls = K_Controls {
		Frame_News_Tabs = (Frame_Global.GetFirstChild("frame-news-tabs") as CMlFrame),
		Label_News = (Frame_Global.GetFirstChild("label-news") as CMlLabel),
		Button_News = (Frame_Global.GetFirstChild("button-news") as CMlFrame),
		Button_Play = (Frame_Global.GetFirstChild("button-play") as CMlFrame),
		Frame_NewsTabsButtonsOff = (Frame_Global.GetFirstChild("frame-news-tabs-buttons-off") as CMlFrame),
		Frame_NewsTabsButtonsFocus = (Frame_Global.GetFirstChild("frame-news-tabs-buttons-focus") as CMlFrame),
		Quad_News_Button_On = (Frame_Global.GetFirstChild("quad-button-on") as CMlQuad),
		Quad_Tmp_News_Img = (Frame_Global.GetFirstChild("quad-tmp-news-image") as CMlQuad),
		PopUpMultiChoice_CrossPlay = (Page.GetFirstChild("popupmultichoice-cross-play") as CMlFrame),
		PopUpMultiChoice_Offline = (Page.GetFirstChild("popupmultichoice-offline") as CMlFrame),
		PopUpMultiChoice_QuitGame = (Page.GetFirstChild("popupmultichoice-quit-game") as CMlFrame)
	},
	Task_ShowUbisoftConnect = Task::GetEmptyTask(),
	Task_OpenNewsLink = Task::GetEmptyTask(),
	News = [],
	PendingLinksList = [],
	NewsInteraction = C_NewsInteraction_Null,
	CurrentNewsIndex = -1,
	NewsAnimEndTime = -1,
	NewsChangeTime = -1,
	IsManualNewsSwitch = False
};

State = UpdateNews(State);
Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Play);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_Home}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		if (Event.Type == {{{Router::P}}}C_Event_EnteringRoute) {
			State = UpdateNews(State);
			Focus(Null, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"));
			{{{PopUpMultiChoice::P}}}Display(This, State.Controls.PopUpMultiChoice_CrossPlay, 
				{{{UserStore::P}}}IsCrossPlayActive() && 
				!{{{UserStore::P}}}GetUserHasSeenCrossPlayWarning(),
				True
			);
		}
	}

	// Change current news displayed every 8sec
	if (State.News.count > 1 && State.NewsChangeTime > 0 && State.NewsChangeTime <= Now) {
		declare CMlControl CurrentFocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
		if (CurrentFocusedControl == Null || (CurrentFocusedControl != Null && !CurrentFocusedControl.HasClass("{{{C_Class_News}}}"))) State = UpdateNewsDisplay(State, 1, False);
	}
	if (State.NewsAnimEndTime > 0 && State.NewsAnimEndTime <= Now) {
		FinishNewsAnimation(State, State.CurrentNewsIndex);
		State.NewsAnimEndTime = -1;
		State.IsManualNewsSwitch = False;
	}

	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						State = Select(Event.To, State);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						if (CanGoBackToTitleScreen()) {
							{{{PopUpMultiChoice::P}}}SetDescription(This, State.Controls.PopUpMultiChoice_QuitGame, [
								{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_FirstPartyQuit}}}", <130., 30.>, 3., {{{dump(FontManager::C_GameFontSemiBold)}}}, "$t$i", <1., 1., 1.>, False)
							]);
						} else {
							{{{PopUpMultiChoice::P}}}SetDescription(This, State.Controls.PopUpMultiChoice_QuitGame, [
								{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_QuitGameDescription}}}", <130., 30.>, 3., {{{dump(FontManager::C_GameFontSemiBold)}}}, "$t$i", <1., 1., 1.>, False)
							]);
						}
						{{{PopUpMultiChoice::P}}}Open(This, State.Controls.PopUpMultiChoice_QuitGame);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
						// Display previous news
						if (Event.From.HasClass("{{{C_Class_News}}}") && State.News.count > 1) State = UpdateNewsDisplay(State, -1, True);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
						// Display next news
						if (Event.From.HasClass("{{{C_Class_News}}}") && State.News.count > 1) State = UpdateNewsDisplay(State, 1, True);
					} else {
						Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(Event.To, State);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName_MouseOnly}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(Event.To, State);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver || Event.Mouse == CMlScriptEvent::Type::MouseOut) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (
			Event.PopUpMultiChoice != Null && 
			(
				Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_CrossPlay.Id ||
				Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_Offline.Id ||
				Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_QuitGame.Id
			)
		) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !Event.PopUpMultiChoice.Visible);
					{{{Router::P}}}LockOverlay(This, "{{{RoutePaths::C_Path_OverlayName_ClubWidget}}}", Event.PopUpMultiChoice.Visible);
					{{{Router::P}}}LockOverlay(This, "{{{RoutePaths::C_Path_OverlayName_ProfileWidget}}}", Event.PopUpMultiChoice.Visible);
					UpdateControllerInfo(State);
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					switch (Event.PopUpMultiChoice.ControlId) {
						case State.Controls.PopUpMultiChoice_CrossPlay.ControlId: {
							{{{UserStore::P}}}SetUserHasSeenCrossPlayWarning(True);
						}
						case State.Controls.PopUpMultiChoice_Offline.ControlId: {
							switch (Event.SelectedIndex) {
								case C_Choice_Reconnect: {
									SendCustomEvent("{{{Const::C_Event_ConnectionError_RequestRestart}}}", []);
								}
							}
						}
						case State.Controls.PopUpMultiChoice_QuitGame.ControlId: {
							switch (Event.SelectedIndex) {
								case C_Choice_Quit: {
									if (CanGoBackToTitleScreen()) {
										{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_PressStart}}}");
									} else {
										ParentApp.Menu_Quit();
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// Open Ubisoft Connect Overlay task
	if (Task::IsInitialized(State.Task_ShowUbisoftConnect)) {
		State.Task_ShowUbisoftConnect = Task::Update(State.Task_ShowUbisoftConnect);
		if (!Task::IsRunning(State.Task_ShowUbisoftConnect)) {
			if (!Task::IsSuccess(State.Task_ShowUbisoftConnect)) {
				SetErrorMessage(
					Label_Error,
					//L16N Error while opening Ubisoft Connect overlay. %1 will be replaced with an error type and %2 with a code e.g. "Error from WebServices - 500"
					TL::Compose(
						"%1 (%2)",
						//L16N Error while opening Ubisoft Connect overlay.
						_("Error while opening Ubisoft Connect"),
						Task::GetCustomError(State.Task_ShowUbisoftConnect).Code
					)
				);
			}
			State.Task_ShowUbisoftConnect = Task::Destroy(State.Task_ShowUbisoftConnect);
		}
	}

	// Open a news links
	if (State.PendingLinksList.count > 0 && !Task::IsInitialized(State.Task_OpenNewsLink)) {
		State.Task_OpenNewsLink = Task::DestroyAndCreate(
			State.Task_OpenNewsLink,
			UserMgr,
			UserMgr.News_OpenLink(MainUser::GetMainUserId(), State.PendingLinksList[0].Type, State.PendingLinksList[0].Param)
		);
		State.NewsInteraction.ActionName = State.PendingLinksList[0].ActionName;
		State.PendingLinksList.removekey(0);
		Tracking::SendNewsInteraction(
			ParentApp.TrackingMgr,
			State.NewsInteraction.Placement,
			State.NewsInteraction.NewsId,
			State.NewsInteraction.ActionName
		);
	}
	if (Task::IsInitialized(State.Task_OpenNewsLink)) {
		State.Task_OpenNewsLink = Task::Update(State.Task_OpenNewsLink);
		if (!Task::IsRunning(State.Task_OpenNewsLink)) {
			if (Task::IsSuccess(State.Task_OpenNewsLink)) {
				State.PendingLinksList = [];
				State.NewsInteraction = C_NewsInteraction_Null;
			}
			State.Task_OpenNewsLink = Task::Destroy(State.Task_OpenNewsLink);
		}
	}
}

foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
	if (Event.Type == {{{Router::P}}}C_Event_LeavingRoute) {
		declare CMlFrame[] PopUps = [
			State.Controls.PopUpMultiChoice_QuitGame,
			State.Controls.PopUpMultiChoice_CrossPlay,
			State.Controls.PopUpMultiChoice_Offline
		];
		foreach (PopUp in PopUps) {
			if ({{{PopUpMultiChoice::P}}}IsDisplayed(PopUp)) {
				{{{PopUpMultiChoice::P}}}Close(This, PopUp);
				{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", True);
				{{{Router::P}}}LockOverlay(This, "{{{RoutePaths::C_Path_OverlayName_ClubWidget}}}", False);
				{{{Router::P}}}LockOverlay(This, "{{{RoutePaths::C_Path_OverlayName_ProfileWidget}}}", False);
				UpdateControllerInfo(State);
			}
		}
	}
}
***
""",
[
	Checkbox::ComponentV2(), 
	Transition::ComponentV2(), 
	Navigation::ComponentV2(),
	Router::ComponentV2(), 
	UserStore::ComponentV2(),
	Button::ComponentV2(),
	MenuSounds::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	ExpendableButton::ComponentV2(),
	NewsStore::ComponentV2(),
	NewsStruct::Component()
],
[]
	);
}