/** 
 *	Page: RoomCampaignDisplay
 */
#Const Version		"2023-06-14"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/RoomCampaignDisplay.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Components/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MedalStack.Script.txt" as MedalStack
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Checkbox.Script.txt" as Checkbox
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/MapRankings.Script.txt" as MapRankings
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/NavigationTabs.Script.txt" as NavigationTabs
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ProfilePlayerInfo.Script.txt" as ProfilePlayerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Rankings.Script.txt" as RegionRankings
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ServerStatus.Script.txt" as ServerStatus
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ZoneSelection.Script.txt" as ZoneSelection
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/TMNext/TrackMania/UbisoftChallenges.Script.txt" as UbisoftChallenges
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "ColorLib" as CL
#Include "MathLib" as ML
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_RoomCampaignDisplay"
#Const C_NavGroupName "navgroup-page-room-display"
#Const C_NavGroup_Global "navgroup-page-room-display-global"
#Const C_Class_MapButton "class-button-map-page-room-display"

// `PlayMultiplayerMode` also check `PlayMultiplayerAsync` at the same time
// No need to check for `PlayMultiplayerAsync` before displaying the leaderboards
#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::PlayMultiplayerModeWithUGC
]

#Const C_EventsDelay 150

#Const C_ColumnNumber 5
#Const C_RowNumber 5

#Const C_Choice_Cancel 0
#Const C_Choice_Join 1
#Const C_Choices [
	0 => _("Cancel"),
	1 => _("Join")
]

#Const Const::C_TabNames_Campaigns as C_TabNames
#Const ColorPalette::C_Color_Difficulty as C_Category_Colors

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_Back = _("Back");
	//L16N [RoomCampaignDisplay] Text displayed when the room is a live room.
	declare Text Text_Live = _("|Room|Live");
	//L16N [RoomCampaignDisplay] Best place in specified region ranking
	declare Text Text_Top = _("|Rank|Top");
	//L16N [RoomCampaignDisplay] Text preceded by a button icon (i.e. "X") to inform the player that they can access the ranking for the current room by pressing the associated button on their controller.
	declare Text Text_AccessCampaignRankings = _("Campaign rankings");
	//L16N [RoomCampaignDisplay] Text preceded by a button icon (i.e. "X") to inform the player that they can access the ranking for the selected track by pressing the associated button on their controller.
	declare Text Text_AccessMapRankings = _("Track rankings");
	//L16N [RoomCampaignDisplay] Text preceded by a button icon (i.e. "X") to inform the player that they can exit the ranking for the selected track by pressing the associated button on their controller.
	declare Text Text_ExitRankings = _("Exit rankings");
	//L16N [RoomCampaignDisplay] Text preceded by a button icon (i.e. "X") to inform the player that they can select the focused element by pressing the associated button on their controller.
	declare Text Text_Select = _("Select");
	//L16N [RoomCampaignDisplay] Text of the Loading spinner informing the player that the selected room is currently loading.
	declare Text Text_Retrieving = _("Retrieving room's data");
	//L16N [RoomCampaignDisplay] Text of the club button. %1 will be replaced by the name of the club. e.g. "Club Nadeo"
	declare Text Text_Club = _("Club $<%1$>");
	//L16N [RoomCampaignDisplay] Message displayed when there is no tracks in the room.
	declare Text Text_NoMaps = _("There is no tracks in this room.");
	//L16N [RoomCampaignDisplay] Text of the button to join the room as a spectator.
	declare Text Text_Spectate = _("Spectate");
	//L16N [RoomCampaignDisplay] Text of the button to join the room as a player.
	declare Text Text_JoinRoom = _("Join room");
	//L16N [RoomCampaignDisplay] Text of the join button when joining the server of the room.
	declare Text Text_Joining = _("Joining...");
	//L16N [RoomCampaignDisplay] Message displayed when there is no joinlink to join a server.
	declare Text Text_OfflineServer = _("Servers are offline or in maintenance, please try again later.");
	//L16N [RoomCampaignDisplay] Message displayed when the player couldn't connect to the server. %1 goes for the type of error.
	declare Text Text_JoinError = _("An error occurred while joining, please try again. (Error code: %1)");
	//L16N [RoomCampaignDisplay] Message displayed when the room cannot be loaded properly. %1 goes for the type of error.
	declare Text Text_FetchError = _("An error occurred while fetching the room, please try again. (Error code: %1)");
	//L16N [RoomCampaignDisplay] Title of the password pop-up.
	declare Text Text_RoomPassword = _("Room password");
	//L16N [RoomCampaignDisplay] Text displayed next to the password of the room.
	declare Text Text_Password = _("Password");
	//L16N [RoomCampaignDisplay] Message to explain that the room password is copied to the system clipboard
	declare Text Text_PasswordCopied = _("Room password copied to the clipboard");
	//L16N [RoomCampaignDisplay] Message displayed when the room password was regenerated
	declare Text Text_PasswordGenerated = _("New room password generated");
	//L16N [RoomCampaignDisplay] Message displayed when the room password can't be regenerated. %1 goes for the type of Error.
	declare Text Text_PasswordGenerationError = _("Error while generating a new room password, please try again. (Error code: %1)");
	//L16N [RoomCampaignDisplay] Message displayed when the player enter an empty room password.
	declare Text Text_EmptyPassword = _("A password is required to join the room.");
	//L16N [RoomCampaignDisplay] %1 will be replaced by the name of the author of the track, e.g. "by Darrek"
	declare Text Text_AuthorName = _("By %1");
	//L16N [RoomCampaignDisplay] Text preceded by a button icon (i.e. "X") to inform the player that they can access the author profile for the selected track by pressing the associated button on their controller.
	declare Text Text_ShowAuthorProfile = _("Show author profile");
	// Description of the room password pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description = [
		//L16N [RoomCampaignDisplay] Text displayed in the password pop-up to indicate that this room is portected with a password.
		PopUpMultiChoice::CreateDescriptionPart(_("This room is protected with a password."), <140., 5.>, 3., FontManager::C_GameFontSemiBold, "$t$i", <1., 1., 1.>, False)
	];

	/* Map grid */
	declare Vec2 Size_Spacing = <0.5, 2.>;
	declare Vec2 Size_MapButton = <35.5, 9.5>;
	declare Vec2 Size_Category = MLHelpers::KeepRatioFromY(320., 20., 2.13);
	declare GridConfig_Column = Grid::Create(Size_MapButton.X*C_ColumnNumber + Size_Spacing.X*(C_ColumnNumber-1), 0., Size_Spacing.X, Grid::C_Direction_Right);
	declare GridConfig_Row = Grid::Create(Size_MapButton.Y*C_RowNumber + Size_Spacing.Y*(C_RowNumber-1), 0., Size_Spacing.Y, Grid::C_Direction_Bottom);
	for (ColumnIndex, 0, C_ColumnNumber-1) GridConfig_Column = Grid::AddColumn(GridConfig_Column, ColumnIndex, 100., Grid::C_Align_Center);
	for (RowIndex, 0, C_RowNumber-1) GridConfig_Row = Grid::AddRow(GridConfig_Row, RowIndex, 100., Grid::C_Align_Center);
	declare Grid_Column = Grid::Compile(GridConfig_Column);
	declare Grid_Row = Grid::Compile(GridConfig_Row);

	declare Text ML_Maps = "";
	declare Text ML_Categories = "";
	for (ColumnIndex, 0, C_ColumnNumber-1) {
		for (RowIndex, 0, C_RowNumber-1) {
			declare Text UpTarget = "button-map-"^ML::Clamp(ColumnIndex, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex-1, 0, C_RowNumber-1);
			declare Text DownTarget = "button-map-"^ML::Clamp(ColumnIndex, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex+1, 0, C_RowNumber-1);
			declare Text LeftTarget = "button-map-"^ML::Clamp(ColumnIndex-1, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex, 0, C_RowNumber-1);
			declare Text RightTarget = "button-map-"^ML::Clamp(ColumnIndex+1, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex, 0, C_RowNumber-1);
			if (RowIndex == 0) UpTarget = "button-club";
			if (RowIndex == C_ColumnNumber-1) DownTarget = "button-join";
			
			ML_Maps ^= """
				<frame id="frame-map-{{{ColumnIndex}}}-{{{RowIndex}}}" pos="{{{MLHelpers::Skew(Grid_Column.Pos[ColumnIndex], Grid_Row.Pos[RowIndex], 10.)}}}">
					<frameinstance
						id="button-map-{{{ColumnIndex}}}-{{{RowIndex}}}" z-index="1"
						modelid="{{{ExpendableButton::C_Name}}}"
						class="{{{Navigation::C_Class}}} {{{C_Class_MapButton}}}"
						data-text="{{{TL::FormatInteger(C_RowNumber*ColumnIndex + (RowIndex+1), 2)}}}"
						data-height="{{{Grid_Row.Size[RowIndex]}}}" data-width="{{{Grid_Column.Size[ColumnIndex]}}}" 
						data-nav-inputs="select;cancel;up;down;left;right;action1;action2"
						data-nav-targets="_;_;{{{UpTarget}}};{{{DownTarget}}};{{{LeftTarget}}};{{{RightTarget}}};frame-map-rankings;frame-region-rankings"
						data-nav-group="{{{C_NavGroupName}}}"
						data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
					/>
					<frameinstance 
						id="frame-medalstack" scale=".8" z-index="2"
						pos="{{{Grid_Column.Size[ColumnIndex]*0.25}}} {{{-Grid_Row.Size[RowIndex]*0.42}}}"
						modelid="{{{MedalStack::C_Name}}}" 
						data-bigmedaldirection="{{{MedalStack::C_BigMedal_None}}}"
						data-medaloffset="9.5"
						data-iscolorize="0"
					/>
					<frame id="frame-top" pos="{{{Grid_Column.Size[ColumnIndex]*0.63}}} {{{-Grid_Row.Size[RowIndex]*0.83}}}" z-index="2" hidden="1">
						<label id="label-top" size="8 {{{Size_MapButton.Y}}}" text="{{{Text_Top}}}" textfont="{{{FontManager::C_GameFontRegular}}}" textcolor="{{{ColorPalette::C_Color_GreenThree}}}" textsize="1.5" textprefix="$i$t" valign="bottom" halign="right"/>
						<label id="label-rank" pos="0 -0.3" size="11 {{{Size_MapButton.Y}}}" textfont="{{{FontManager::C_GameFontSemiBold}}}" textcolor="{{{ColorPalette::C_Color_GreenThree}}}" textsize="3.5" textprefix="$i$t" valign="bottom" halign="left"/>
					</frame>
				</frame>
			""";
		}

		ML_Categories ^= """
			<frameinstance 
				id="category-{{{ColumnIndex}}}"
				modelid="{{{ExpendableAsset::C_Name}}}"
				pos="{{{Grid_Column.Pos[ColumnIndex] + 1.5}}} 0" 
				data-width="{{{Size_Category.X}}}" 
				data-height="{{{Size_Category.Y}}}"
				data-color="{{{CL::RgbToHex6(C_Category_Colors[ColumnIndex])}}}"
				data-halign="left" 
				data-valign="center"
			/>
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="action1" data-nav-targets="_" data-nav-group="{{{C_NavGroup_Global}}}" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" data-header-gradient-visible="1" z-index="-1"/>
	<frameinstance id="frame-loading-spinner" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-120., 20., 10.)}}}" data-label="{{{Text_Retrieving}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" scale="0.6" z-index="2"/>	
	<frame id="frame-profile" hidden="1" z-index="10">
		<frameinstance modelid="{{{ProfilePlayerInfo::C_Name}}}" data-enable-players-pager="0" data-enable-zone-selection="0" data-enable-my-access-info="0"/>
	</frame>

	<!-- Pop-up header -->
	<frameinstance id="frame-navigation-tabs" modelid="{{{NavigationTabs::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, 34.5, 10.)}}}" data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}" data-events-delay="{{{C_EventsDelay}}}" data-halign="left" z-index="1"/>
	<label id="label-title" pos="{{{MLHelpers::Skew(-126.5, 61.5, 10.)}}}" size="150 20" class="text-extrabold" textsize="13" halign="left" filter-profanities="OnlyIfNotTranslated" z-index="1"/>
	<label id="label-script-name" pos="{{{MLHelpers::Skew(-125.5, 45.5, 10.)}}}" size="150 20" class="text-semibold" textsize="4.5" halign="left" z-index="1"/>
	<frame id="frame-live-indicator" pos="{{{MLHelpers::Skew(-124.5, 72., 10.)}}}" z-index="2">
		<quad id="quad-live-indicator" pos="0 0.5" size="3 3" halign="left" valign="center2" image="{{{Const::C_ImageUrl_Icon_Radio_Button_On}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" z-index="5"/>
		<label id="label-live-indicator" pos="4 0" size="50 1" class="text-extrabold" text="{{{Text_Live}}}" textsize="3.5" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" halign="left" z-index="5"/>
	</frame>
	<frameinstance 
		id="frame-region-rankings" pos="99.5 50" z-index="1"
		modelid="{{{RegionRankings::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-nav-inputs="cancel;action1;action2"
		data-nav-targets="button-map-0-0;frame-map-rankings;button-map-0-0"
		data-nav-zone="{{{RegionRankings::C_NavZone}}}"
		data-nav-group="{{{C_NavGroupName}}}"
	/>
	<frameinstance 
		id="button-club" z-index="2"
		pos="{{{MLHelpers::Skew(-126., 53., 10.)}}}"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-styles="{{{ExpendableButton::C_Style_NoBackground}}}"
		data-valign="center"
		data-icon-image="{{{Const::C_ImageUrl_Icon_Link}}}"
		data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
		data-icon-color-unfocused="{{{ColorPalette::C_Color_White}}}"
		data-icon-color-focused="{{{ColorPalette::C_Color_GreenOne}}}"
		data-text-textcolor-unfocused="{{{ColorPalette::C_Color_White}}}"
		data-text-textcolor-focused="{{{ColorPalette::C_Color_GreenOne}}}"
		data-nav-inputs="select;cancel;down;action1;action2"
		data-nav-targets="_;_;button-map-0-0;frame-map-rankings;frame-region-rankings"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		data-nav-locked="1"
		data-filter-profanities="{{{Tools::C_FilterProfanities_Always}}}"
		hidden="1"
	/>

	<!-- Pop-up body -->
	<frameinstance id="frame-zone-selection" modelid="{{{ZoneSelection::C_Name}}}" pos="{{{MLHelpers::Skew(-75., 11., 10.)}}}" z-index="3"/>
	<label id="label-info" pos="{{{MLHelpers::Skew(-125.5, 19., 10.)}}}" size="200 1" class="text-semibold" textsize="2.5" halign="left" z-index="1"/>
	<label id="label-room-id" pos="{{{MLHelpers::Skew(137., 22., 10.)}}}" size="20 10" class="text-semibold" textsize="2" halign="right" textcolor="FFF" z-index="1"/>
	<frame id="frame-pinned-club" pos="{{{MLHelpers::Skew(-120., 11., 10.)}}}" z-index="3">
		<quad id="quad-club-pin" size="5 5" image="{{{Const::C_ImageUrl_Icon_Pin_Full}}}" colorize="FFFFFF" halign="right" valign="center"/>
		<label id="label-club-name" class="text-extrabold" pos="0 -0.5" textsize="4" halign="left" filter-profanities="OnlyIfNotTranslated" z-index="1"/>
	</frame>

	<frameinstance 
		id="frame-map-rankings" pos="105 -25" z-index="1"
		modelid="{{{MapRankings::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-inputs="cancel;action1;action2"
		data-nav-targets="button-map-0-0;button-map-0-0;frame-region-rankings"
		data-nav-zone="{{{MapRankings::C_NavZone}}}"
	/>

	<frame id="frame-room" pos="{{{MLHelpers::Skew(-144., 5., 10.)}}}" z-index="1">
		<frame id="frame-categories">
			{{{ML_Categories}}}
		</frame>
		<frame id="frame-maps">
			{{{ML_Maps}}}
		</frame>
	</frame>

	<!-- Bottom buttons -->
	<frameinstance
		id="button-join" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_JoinRoom}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-icon-align="{{{ExpendableButton::C_IconAlign_Right}}}"
		data-icon-color-focused="{{{ColorPalette::C_Color_GreenOne}}}"
		data-icon-color-unfocused="{{{ColorPalette::C_Color_GreenOne}}}"
		data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
		data-icon-image="{{{Const::C_ImageUrl_Icon_Animated_Triple_Arrow_Right}}}"
		data-halign="left" data-valign="center"
		data-nav-inputs="select;cancel;up;right;action1;action2"
		data-nav-targets="_;_;button-map-0-0;button-spectate;frame-map-rankings;frame-region-rankings"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance
		id="button-spectate" pos="{{{MLHelpers::Skew(-80., -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_Spectate}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-halign="left" data-valign="center"
		data-nav-inputs="select;cancel;up;left;right;action1;action2"
		data-nav-targets="_;_;button-map-0-0;button-join;button-show-password;frame-map-rankings;frame-region-rankings"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<quad id="quad-locked-room" pos="{{{MLHelpers::Skew(-60., -67., 10.)}}}" size="10 10" image="{{{Const::C_ImageUrl_Icon_Lock_Oblique}}}" halign="left" valign="center" colorize="{{{ColorPalette::C_Color_GreenOne}}}" hidden="1"/>

	<!-- Room admin password -->
	<frame id="frame-password-admin" pos="{{{MLHelpers::Skew(130., -67., 10.)}}}" hidden="1" z-index="2">
		<label id="label-password-title" pos="{{{MLHelpers::Skew(0., 0., 10.)}}}" size="80 10" class="text-extrabold" text="{{{Text_Password}}}" textsize="3" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" halign="right"/>
		<label id="label-admin-password" pos="{{{MLHelpers::Skew(0., -5., 10.)}}}" size="20 10" class="text-semibold" textsize="3" halign="right" hidden="1"/>
		<label id="label-admin-password-hidden" pos="{{{MLHelpers::Skew(0., -6., 10.)}}}" size="20 10" class="text-semibold" text="* * * * *" textsize="3" halign="right"/>
		<frameinstance 
			id="button-show-password"
			modelid="{{{Checkbox::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-opacityunfocus="0.6"
			data-iconsize="7 7"
			data-iconchecked="{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}"
			data-iconunchecked="{{{Const::C_ImageUrl_Icon_Cam_Unfollow_Inc}}}"
			data-nav-inputs="select;cancel;left;right;action1;action2"
			data-nav-targets="_;_;button-spectate;button-copy-password;frame-map-rankings;frame-region-rankings"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Checkbox::C_NavZone}}}"
			data-nav-locked="1"
		/>
		<frameinstance
			id="button-copy-password"
			modelid="{{{Button::C_Name}}}" 
			class="{{{Navigation::C_Class}}}"
			data-size="4 4"
			data-opacityunfocus="0.6"
			data-image="{{{Const::C_ImageUrl_Icon_Copy_Inc}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Icon_Copy_Inc}}}"
			data-focuscolor="{{{ColorPalette::C_Color_White}}}"
			data-bgcolor="{{{ColorPalette::C_Color_White}}}"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel;left;right;action1;action2"
			data-nav-targets="_;_;button-show-password;button-regenerate-password;frame-map-rankings;frame-region-rankings"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
		/>
		<frameinstance 
			id="button-regenerate-password"
			modelid="{{{Button::C_Name}}}" 
			class="{{{Navigation::C_Class}}}"
			data-size="7 7"
			data-opacityunfocus="0.6"
			data-image="{{{Const::C_ImageUrl_Icon_Refresh}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Icon_Refresh}}}"
			data-focuscolor="{{{ColorPalette::C_Color_White}}}"
			data-bgcolor="{{{ColorPalette::C_Color_White}}}"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel;left;action1;action2"
			data-nav-targets="_;_;button-copy-password;frame-map-rankings;frame-region-rankings"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
		/>
	</frame>

	<!-- Password pop-up -->
	<frame id="frame-popupmultichoice-password" z-index="10">
		<frameinstance
			id="popupmultichoice-password" 
			modelid="{{{PopUpMultiChoice::C_Name}}}"
			data-title="{{{Text_RoomPassword}}}"
			data-choices="{{{TL::MLEncode(C_Choices.tojson())}}}"
			data-description="{{{TL::MLEncode(Description.tojson())}}}"
			data-custom-content-frame="frame-multichoice-custom-content"
			data-close-after-selection="0"
			data-nav-inputs="up"
			data-nav-targets="textfield-password"
			hidden="1"
		/>
		<frame id="frame-multichoice-custom-content" z-index="11">
			<frameinstance 
				id="textfield-password"
				modelid="{{{TextField::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{PopUpMultiChoice::C_Class_Navigation}}}"
				data-size="70 10"
				data-placeholder="{{{Text_RoomPassword}}}"
				data-bgopacityunfocus="0.4"
				data-bgcolorfocus="{{{ColorPalette::C_Color_GreenFour}}}"
				data-bgcolorunfocus="{{{ColorPalette::C_Color_GreenFour}}}"
				data-contourcolorfocus="{{{ColorPalette::C_Color_GreenOne}}}"
				data-contouropacityunfocus=".0"
				data-contouropacityfocus="1."
				data-textprefix="$i"
				data-textsize="2.5"
				data-textformat="password"
				data-textcolorunfocus="{{{ColorPalette::C_Color_GreenOne}}}"
				data-nav-inputs="select;cancel;down;right"
				data-nav-targets="_;_;{{{PopUpMultiChoice::C_SecondChoice}}};button-show-textfield-password"
				data-nav-group="{{{PopUpMultiChoice::C_NavGroup}}}"
				data-nav-zone="{{{TextField::C_NavZone}}}"
			/>
			<frameinstance 
				id="button-show-textfield-password" pos="40 0"
				modelid="{{{Checkbox::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{PopUpMultiChoice::C_Class_Navigation}}}"
				data-opacityunfocus="0.6"
				data-iconsize="9 9"
				data-iconchecked="{{{Const::C_ImageUrl_Icon_Cam_Follow_Inc}}}"
				data-iconunchecked="{{{Const::C_ImageUrl_Icon_Cam_Unfollow_Inc}}}"
				data-nav-inputs="select;cancel;left;down"
				data-nav-targets="_;_;textfield-password;{{{PopUpMultiChoice::C_SecondChoice}}}"
				data-nav-group="{{{PopUpMultiChoice::C_NavGroup}}}"
				data-nav-zone="{{{Checkbox::C_NavZone}}}"
			/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "ColorLib" as CL
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CommonLibs/Common/Privileges.Script.txt" as Privileges
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CommonLibs/Common/ReportContext.Script.txt" as ReportContext
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Modes/Medals.Script.txt" as Medals
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/API/ChannelAPI.Script.txt" as ChannelAPI
#Include "Libs/Nadeo/TMNext/TrackMania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ReportSystem.Script.txt" as ReportSystem
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ReportStruct.Script.txt" as ReportStruct

#Const C_ImageUrls_PopUp_Quarterly_Header {{{dump(Const::C_ImageUrls_PopUp_Quarterly_Header)}}}
#Const C_ImageUrls_Campaign_Decal {{{dump(Const::C_ImageUrls_Campaign_Decal)}}}

#Const C_Tab_Medals {{{dump(Const::C_Tab_Medals)}}}
#Const C_Tab_ZoneRankings {{{dump(Const::C_Tab_ZoneRankings)}}}
#Const C_Tab_ClubRankings {{{dump(Const::C_Tab_ClubRankings)}}}
#Const C_TabNames {{{dump(Const::C_TabNames_Campaigns)}}}

#Const C_Retry_Timer 2000 //< 2 seconds
#Const C_CacheLifetime 60000

#Struct K_Controls {
	CMlFrame Button_Club;
	CMlFrame Button_CopyPassword;
	CMlFrame Button_Join;
	CMlFrame Button_RegeneratePassword;
	CMlFrame Button_ShowPassword;
	CMlFrame Button_Spectate;
	CMlFrame Frame_AdminPassword;
	CMlFrame Frame_Background;
	CMlFrame Frame_Categories;
	CMlFrame Frame_LoadingSpinner;
	CMlFrame Frame_MapRankings;
	CMlFrame Frame_NavigationTabs;
	CMlFrame Frame_PinnedClub;
	CMlFrame Frame_Profile;
	CMlFrame Frame_RegionRankings;
	CMlFrame Frame_Maps;
	CMlFrame Frame_ZoneSelection;
	CMlFrame PopUpMultiChoice_Password;
	CMlFrame TextField_Password;
	CMlLabel Label_AdminPassword;
	CMlLabel Label_AdminPasswordHidden;
	CMlLabel Label_ClubName;
	CMlLabel Label_Info;
	CMlLabel Label_RoomId;
	CMlLabel Label_ScriptName;
	CMlLabel Label_Title;
	CMlLabel Label_TitlePassword;
	CMlQuad Quad_LockedRoom;
}

#Struct K_PlayPrivilegeCheck {
	Text JoinLink;
	Text ServerLogin;
	Boolean IsSpectator;
	Privileges::K_PrivilegeCheck PrivilegeCheck;
}

#Struct K_State {
	Boolean IsClubActivity;
	Boolean IsJoiningAsSpectator;
	CMlControl FocusedMap;
	Integer	FetchMapRankingsWithDelay;
	Integer CurrentTab;
	Integer ZoneLevel;
	Text RoomPassword;
	K_Controls Controls;
	{{{ClubStruct::P}}}K_Room Room;
	Http::K_Request JoinRoomRequest;
	Http::K_Request LiveMapRequest;
	Http::K_Request ClubRoomDetailRequest;
	Http::K_Request ClubRoomPasswordRequest;
	Http::K_Request ClubMemberRequest;
	Http::K_Request ClubRoomGeneratePasswordRequest;
	K_PlayPrivilegeCheck PlayPrivilegeCheck;
	ReportStruct::LibStructuresReport_K_ReportData[Integer] CurrentReportData;
}
""",
"""
declare Ident G_TTSContextIdent_Tabs;
declare Ident G_TTSContextIdent_Section;

// Display or hide the admin password
Void DisplayAdminPassword(K_State _State, {{{ClubStruct::P}}}K_Member _ClubMember) {
	declare Boolean IsVisible = (_State.Room.HasPassword && _State.Room.RoomId != {{{ClubStruct::P}}}C_RoomNullId && RBAC::HasClubPermission(_ClubMember, RBAC::C_ClubPermission_Administration));

	_State.Controls.Frame_AdminPassword.Visible = IsVisible;
	{{{Navigation::P}}}Lock(_State.Controls.Button_CopyPassword, !IsVisible);
	{{{Navigation::P}}}Lock(_State.Controls.Button_RegeneratePassword, !IsVisible);
	{{{Navigation::P}}}Lock(_State.Controls.Button_ShowPassword, !IsVisible);
}

// Read the TTS context with updated value
Void ReadTTSContext(K_State _State) {
	ParentApp.TTS_Context_Change(G_TTSContextIdent_Tabs, {{{NavigationTabs::P}}}GetCurrentTabLabel(_State.Controls.Frame_NavigationTabs));
	if (_State.Controls.Frame_ZoneSelection.Visible || _State.Controls.Frame_PinnedClub.Visible) {
		if (G_TTSContextIdent_Section == NullId) G_TTSContextIdent_Section = ParentApp.TTS_Context_Enter({{{Const::C_TTSContextLevel_Section}}});
		if (_State.Controls.Frame_ZoneSelection.Visible) ParentApp.TTS_Context_Change(G_TTSContextIdent_Section, {{{ZoneSelection::P}}}GetCurrentZoneName(This), True);
		if (_State.Controls.Frame_PinnedClub.Visible) ParentApp.TTS_Context_Change(G_TTSContextIdent_Section, _State.Controls.Label_ClubName);
	} else {
		G_TTSContextIdent_Section = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Section);
	}
	ParentApp.TTS_Context_Read({{{Const::C_TTSContextLevel_Page}}});
}

// Update controller hints at the bottom of the screen
Void UpdateControllerInfo(K_State _State) {
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
	declare Text[Text] ControllerInfos;
	if (FocusedControl != Null && !FocusedControl.HasClass("{{{C_Class_MapButton}}}")) ControllerInfos = ["A" => "{{{Text_Select}}}"];

	if (FocusedControl != Null) {
		if (_State.CurrentTab != C_Tab_Medals) {
			switch (FocusedControl.ControlId) {
				case _State.Controls.Frame_MapRankings.ControlId: {
					ControllerInfos["B"] = ""; //< Empty on purpose
					ControllerInfos["Action1"] = "{{{Text_ExitRankings}}}";
					if (!{{{Navigation::P}}}IsLocked(_State.Controls.Frame_RegionRankings)) ControllerInfos["Action2"] = "{{{Text_AccessCampaignRankings}}}";
				}
				case _State.Controls.Frame_RegionRankings.ControlId: {
					if (!{{{Navigation::P}}}IsLocked(_State.Controls.Frame_MapRankings)) ControllerInfos["Action1"] = "{{{Text_AccessMapRankings}}}";
					ControllerInfos["B"] = ""; //< Empty on purpose
					ControllerInfos["Action2"] = "{{{Text_ExitRankings}}}";
				}
				default: {
					ControllerInfos["B"] = "{{{Text_Back}}}";
					if (!{{{Navigation::P}}}IsLocked(_State.Controls.Frame_MapRankings) && !_State.Controls.PopUpMultiChoice_Password.Visible) ControllerInfos["Action1"] = "{{{Text_AccessMapRankings}}}";
					if (!{{{Navigation::P}}}IsLocked(_State.Controls.Frame_RegionRankings) && !_State.Controls.PopUpMultiChoice_Password.Visible) ControllerInfos["Action2"] = "{{{Text_AccessCampaignRankings}}}";
				}
			}
		} else if ({{{MapRankings::P}}}IsMapAuthorNameDisplayed(_State.Controls.Frame_MapRankings)) {
			ControllerInfos["Action1"] = "{{{Text_ShowAuthorProfile}}}";
		}
		if (!_State.Controls.PopUpMultiChoice_Password.Visible) {
			ControllerInfos["{{{Const::C_NavInput_ReportSystem}}}"] = "{{{Const::C_Text_Report}}}";
		}
	} else {
		ControllerInfos["B"] = "{{{Text_Back}}}";
	}
	
	ControllerInfo::SetButtons(ControllerInfos);
}

// Update the focus state of the given map button
Void UpdateMapButtonFocus(K_State _State, CMlFrame _Button_Map, Boolean _IsFocused) {
	if (!_Button_Map.HasClass("{{{C_Class_MapButton}}}")) return;
	
	declare CMlLabel Label_Top = _Button_Map.Parent.GetFirstChild("label-top") as CMlLabel;
	declare CMlLabel Label_Rank = _Button_Map.Parent.GetFirstChild("label-rank") as CMlLabel;
	declare Text MapUid for _Button_Map;

	AnimMgr.Flush(Label_Top);
	AnimMgr.Flush(Label_Rank);

	if (_IsFocused) {
		AnimMgr.Add(Label_Top, "<anim textcolor=\"FFFFFF\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Label_Rank, "<anim textcolor=\"FFFFFF\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else if (_State.Room.ServerInfo.CurrentMapUid != "" && MapUid == _State.Room.ServerInfo.CurrentMapUid) {
		{{{ExpendableButton::P}}}AddStyle(This, _Button_Map, {{{ExpendableButton::P}}}Style_MapLive());
		AnimMgr.Add(Label_Top, "<anim textcolor=\"{{{ColorPalette::C_Color_GreenFour}}}\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Label_Rank, "<anim textcolor=\"{{{ColorPalette::C_Color_GreenFour}}}\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}	else {
		{{{ExpendableButton::P}}}RemoveStyle(This, _Button_Map, {{{ExpendableButton::P}}}Style_MapLive());
		AnimMgr.Add(Label_Top, "<anim textcolor=\"{{{ColorPalette::C_Color_GreenThree}}}\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Label_Rank, "<anim textcolor=\"{{{ColorPalette::C_Color_GreenThree}}}\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	/* Update report context */
	if (_IsFocused) {
		declare Text MapUid for _Button_Map;
		declare {{{CampaignStruct::P}}}K_Map MapData = {{{CampaignStore::P}}}GetMap(_State.Room.CampaignId, MapUid);

		if (MapData.Uid != "") {
			ReportSystem::AddData(
				ReportStruct::C_ReportTarget_Track,
				ReportStruct::LibStructuresReport_K_ReportData {
					Details = [MapData.Name],
					Ids = [MapData.Uid],
					Contexts = [["From" => "Menu RoomCampaignDisplay"]]
				}
			);
		} else {
			ReportSystem::RemoveData(ReportStruct::C_ReportTarget_Track);
		}

		ReportContext::SetDisplayedCampaignFocusedMap(
			System,
			MapData.Uid,
			MapData.Name,
			MapData.AuthorLogin,
			MapData.AuthorDisplayName,
			MapData.SubmitterAccountId,
			MapData.LocalFileName,
			MapData.DownloadUrl,
			MapData.ThumbnailUrl,
			MapData.UploadTimestamp,
			MapData.IsPlayable,
			MapData.CollectionName,
			MapData.CreatedWithSimpleEditor,
			MapData.CreatedWithGamepadEditor
		);
	}
}

// Update the room maps display based on the current tab
K_State UpdateCampaignMapsGrid(K_State _State, Integer _CurrentTab) {
	declare K_State State = _State;
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
	declare {{{CampaignStruct::P}}}K_Campaign Campaign = {{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId);

	/* Update current tab */
	State.CurrentTab = _CurrentTab;
	State.Controls.Frame_ZoneSelection.Visible = _CurrentTab == C_Tab_ZoneRankings;
	State.Controls.Frame_PinnedClub.Visible = _CurrentTab == C_Tab_ClubRankings;

	/* Update maps grid */
	foreach (Index => Control in State.Controls.Frame_Maps.Controls) {
		declare CMlFrame Button_Map = (Control as CMlFrame).Controls[0] as CMlFrame;
		declare CMlFrame Frame_MedalStack = (Control as CMlFrame).Controls[1] as CMlFrame;
		declare CMlFrame Frame_Top = (Control as CMlFrame).Controls[2] as CMlFrame;
		declare CMlLabel Label_Top = (Frame_Top.GetFirstChild("label-top") as CMlLabel);
		declare CMlLabel Label_Rank = (Frame_Top.GetFirstChild("label-rank") as CMlLabel);
		declare Text MapUid for Button_Map;
		declare {{{CampaignStruct::P}}}K_Map MapData = {{{CampaignStore::P}}}GetMap(State.Room.CampaignId, MapUid);

		// Display medal stack or top depending on the current tab
		Frame_MedalStack.Visible = State.CurrentTab == C_Tab_Medals && MapData.Medal > 0;
		Frame_Top.Visible = State.CurrentTab != C_Tab_Medals && MapData.Score > 0;
		if (Frame_MedalStack.Visible) {
			{{{MedalStack::P}}}SetMedalsNumber(Frame_MedalStack, MapData.Medal);
		} else if (Frame_Top.Visible) {
			switch (State.CurrentTab) {
				case C_Tab_ZoneRankings: {
					if (MapData.Rankings.count > 0 && MapData.Rankings.existskey(State.ZoneLevel)) {
						Label_Rank.SetText(Tools::FormatTop(MapData.Rankings[State.ZoneLevel].Position, False));
					} else {
						Label_Rank.SetText("");
					}
				}
				case C_Tab_ClubRankings: {
					declare Integer UserPinnedClubId = {{{ClubStore::P}}}GetUserPinnedClub().Id;
					if (MapData.ClubRankings.existskey(UserPinnedClubId)) {
						Label_Rank.SetText(Tools::FormatTop(MapData.ClubRankings[UserPinnedClubId], False));
					} else {
						Label_Rank.SetText("");
					}
				}
			}
			
			Frame_Top.Visible = Label_Rank.Value != "";
			Tools::FitLabelValue(Label_Top, 1.5, 1., 0.1);
			Tools::FitLabelValue(Label_Rank, 3.5, 2.5, 0.1);
		}

		// Update map button styles
		if (MapData.Score > 0 && !{{{ExpendableButton::P}}}HasStyle(Button_Map, {{{ExpendableButton::P}}}Style_MapRaced())) {
			{{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_MapRaced());
		} else if (MapData.Score <= 0 && {{{ExpendableButton::P}}}HasStyle(Button_Map, {{{ExpendableButton::P}}}Style_MapRaced())) {
			{{{ExpendableButton::P}}}RemoveStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_MapRaced());
		}

		// Update live map button
		if (State.Room.ServerInfo.CurrentMapUid == "") State.Room.ServerInfo.CurrentMapUid = MapData.Uid;
		if (State.Room.ServerInfo.CurrentMapUid == MapData.Uid)	{
			UpdateMapButtonFocus(State, Button_Map, FocusedControl != Null && Button_Map.Id == FocusedControl.Id);
		}
	}

	/* Display info if the room has no maps */
	if (!{{{LoadingSpinner::P}}}IsLoading(State.Controls.Frame_LoadingSpinner) && Campaign.MapCount <= 0) {
		State.Controls.Label_Info.SetText("{{{Text_NoMaps}}}");
	} else {
		State.Controls.Label_Info.SetText("");
	}

	return State;
}

// Update the room scores and medals
K_State UpdateCampaignScoresAndMedals(K_State _State, {{{CampaignStruct::P}}}K_Campaign _Campaign) {
	declare K_State State = _State;
	declare Integer BronzeMedalNb;
	declare Integer SilverMedalNb;
	declare Integer GoldMedalNb;
	declare Integer AuthorMedalNb;
	declare Integer Index = 0;

	/* Update maps grid */
	foreach (ColumnIndex => Category in _Campaign.Categories) {
		foreach (RowIndex => Map in Category.Playlist) {
			if (State.Controls.Frame_Maps.Controls.existskey(Index)) {
				declare CMlFrame Frame_Map = State.Controls.Frame_Maps.Controls[Index] as CMlFrame;
				declare CMlFrame Frame_Top = Frame_Map.Controls[2] as CMlFrame;
				declare CMlFrame Frame_MedalStack = Frame_Map.Controls[1] as CMlFrame;
				declare CMlFrame Button_Map = Frame_Map.Controls[0] as CMlFrame;
				declare {{{CampaignStruct::P}}}K_Map MapData = Map;
				declare Text MapUid for Button_Map;
				MapUid = Map.Uid;
				Index += 1;

				// Update map scores and medals
				MapData.Medal = ScoreMgr.Map_GetMedal(MainUser::GetMainUserId(), Map.Uid,	"{{{Const::C_ScopeType_PersonalBest}}}", "", "{{{Const::C_GameMode_TimeAttack}}}", "");
				MapData.Score = ScoreMgr.Map_GetRecord_v2(MainUser::GetMainUserId(), Map.Uid, "{{{Const::C_ScopeType_PersonalBest}}}", "", "{{{Const::C_GameMode_TimeAttack}}}", "");

				{{{CampaignStore::P}}}SetMapMedalAndScore(_Campaign.Id, MapData);
				if (MapData.Medal >= Medals::C_ScoreMgrMedal_Bronze) BronzeMedalNb += 1;
				if (MapData.Medal >= Medals::C_ScoreMgrMedal_Silver) SilverMedalNb += 1;
				if (MapData.Medal >= Medals::C_ScoreMgrMedal_Gold) GoldMedalNb += 1;
				if (MapData.Medal >= Medals::C_ScoreMgrMedal_Author) AuthorMedalNb += 1;

				// Text to speech
				if (_Campaign.Type == {{{CampaignStruct::P}}}C_CampaignType_Quarterly) {
					{{{ExpendableButton::P}}}SetTextToSpeech(Button_Map, TL::Compose("%1 %2", _("Track"), TL::FormatInteger(Index, 2)));
				} else if (Map.AuthorDisplayName == "") {
					{{{ExpendableButton::P}}}SetTextToSpeech(Button_Map, TL::Compose("%1 %2 - %3", _("Track"), TL::FormatInteger(Index, 2), Map.Name));
				} else {
					{{{ExpendableButton::P}}}SetTextToSpeech(Button_Map, TL::Compose("%2 %3 - %4 "^TL::GetTranslatedText("{{{Text_AuthorName}}}"), Map.AuthorDisplayName, _("Track"), TL::FormatInteger(Index, 2), Map.Name));
				}
			}
		}
	}

	/* Ubisoft challenges */
	if (BronzeMedalNb > 0) SendCustomEvent("{{{UbisoftChallenges::C_Challenge_FirstMedal}}}", []);
	if (_Campaign.IsSeasonLive) {
		if (BronzeMedalNb >= 25) SendCustomEvent("{{{UbisoftChallenges::C_Challenge_AllBronzeQuarterly}}}", []);
		if (SilverMedalNb >= 25) SendCustomEvent("{{{UbisoftChallenges::C_Challenge_AllSilverQuarterly}}}", []);
		if (GoldMedalNb >= 25) SendCustomEvent("{{{UbisoftChallenges::C_Challenge_AllGoldQuarterly}}}", []);
		if (AuthorMedalNb >= 25) SendCustomEvent("{{{UbisoftChallenges::C_Challenge_AllAuthorQuarterly}}}", []);
	}

	/* Refresh maps grid */
	return UpdateCampaignMapsGrid(State, State.CurrentTab);
}

// Fetch all player ranking information for this campaign that will be displayed in the map button, e.g. "Top 1"
Void FetchAllMapPlayerRankings(K_State _State) {
	if (_State.CurrentTab == C_Tab_Medals) return;
	declare {{{CampaignStruct::P}}}K_Campaign Campaign = {{{CampaignStore::P}}}GetCampaignFromId(_State.Room.CampaignId);
	declare Integer[Text] CurrentScores;
	foreach (Category in Campaign.Categories) {
		foreach (Map in Category.Playlist) {
			CurrentScores[Map.Uid] = Map.Score;
		}
	}

	if (Campaign.IsLoaded) {
		switch (_State.CurrentTab) {
			case C_Tab_ZoneRankings: {
				{{{CampaignStore::P}}}Action_LoadMapPlayerGlobalRankings(This, Campaign.LeaderboardGroupUid, CurrentScores);
			}
			case C_Tab_ClubRankings: {
				{{{CampaignStore::P}}}Action_LoadMapPlayerClubRankings(This, Campaign.LeaderboardGroupUid, {{{ClubStore::P}}}GetUserPinnedClub().Id, CurrentScores);
			}
		}
	}
}

// Update the RegionRankings component
Void UpdateRegionRankingsComponent(K_State _State, {{{CampaignStruct::P}}}K_Campaign _Campaign) {
	declare Integer UserPinnedClubId = {{{ClubStore::P}}}GetUserPinnedClub().Id;
	declare {{{CampaignStruct::P}}}K_TopRanking[] TopRankingList;

	foreach (ZoneLevel => TopRanking in _Campaign.TopRankings) {
		declare {{{CampaignStruct::P}}}K_Top[] TopsWithMainUser;
		declare IsInTop5 = False;
		foreach (Index => Top in TopRanking.Tops) {
			if (Index >= {{{RegionRankings::C_NumberOf_RanksInList}}}) break;
			if (Top.AccountId == LocalUser.WebServicesUserId) IsInTop5 = True;
			TopsWithMainUser.add(Top);
		}

		if (!IsInTop5) {
			declare Position = 0;
			if (_Campaign.CampaignRanking.Rankings.existskey(ZoneLevel)) {
				Position = _Campaign.CampaignRanking.Rankings[ZoneLevel].Position;
			}

			TopsWithMainUser.add({{{CampaignStruct::P}}}K_Top {
				AccountId = LocalUser.WebServicesUserId,
				DisplayName = {{{UserStore::P}}}GetPlayerName(LocalUser),
				Position = Position,
				SP = _Campaign.CampaignRanking.SP
			});
		}

		TopRankingList.add({{{CampaignStruct::P}}}K_TopRanking {
			Tops = TopsWithMainUser,
			ZoneName = TopRanking.ZoneName
		});
	}

	{{{RegionRankings::P}}}UpdateRankingDisplayed(_State.Controls.Frame_RegionRankings, _State.CurrentTab);
	{{{RegionRankings::P}}}SetRankingUIZone(_State.Controls.Frame_RegionRankings, _State.ZoneLevel);
	{{{RegionRankings::P}}}SetTopInRankingsControl(_State.Controls.Frame_RegionRankings, _Campaign.CampaignRanking.Rankings);
	{{{RegionRankings::P}}}SetRankingsInRankingControl(
		_State.Controls.Frame_RegionRankings, 
		TopRankingList, 
		_Campaign.ClubTopRankings.get(UserPinnedClubId, []), 
		_Campaign.ClubPlayerRanking.get(UserPinnedClubId, {{{CampaignStruct::P}}}K_Top {}),
		_State.ZoneLevel
	);
}

// Fetch all necessary information about the room that will be displayed in the RegionRankings component
Void FetchRegionRankings(K_State _State) {
	declare {{{CampaignStruct::P}}}K_Campaign Campaign = {{{CampaignStore::P}}}GetCampaignFromId(_State.Room.CampaignId);

	if (Campaign.IsLoaded) {
		switch (_State.CurrentTab) {
			case C_Tab_Medals, C_Tab_ZoneRankings: {
				{{{CampaignStore::P}}}Action_LoadCampaignTopGlobalRankings(This, _State.Room.CampaignId, Campaign.LeaderboardGroupUid);
				{{{CampaignStore::P}}}Action_LoadCampaignPlayerGlobalRankings(This, _State.Room.CampaignId, Campaign.LeaderboardGroupUid);
			}
			case C_Tab_ClubRankings: {
				{{{CampaignStore::P}}}Action_LoadCampaignTopClubRankings(This, _State.Room.CampaignId, {{{ClubStore::P}}}GetUserPinnedClub().Id, Campaign.LeaderboardGroupUid, 0, 5);
			}
		}
		UpdateRegionRankingsComponent(_State, Campaign);
	}
}

// Update the MapRankings component
Void UpdateMapRankingsComponent(K_State _State, {{{CampaignStruct::P}}}K_Campaign _Campaign) {
	declare Text MapUid for _State.FocusedMap;
	declare {{{CampaignStruct::P}}}K_Map MapData = {{{CampaignStore::P}}}GetMap(_State.Room.CampaignId, MapUid);
	declare Boolean IsLoading = (
		(_State.CurrentTab == C_Tab_ZoneRankings && MapData.TopRankings.count <= 0) ||
		(_State.CurrentTab == C_Tab_ClubRankings && MapData.ClubTopRankings.count <= 0)
	);

	{{{MapRankings::P}}}UpdateMapRanking(
		This, 
		_State.Controls.Frame_MapRankings,
		{{{ClubStore::P}}}GetUserPinnedClub().Id,
		_State.Room.CampaignId,
		_Campaign.LeaderboardGroupUid,
		MapData,
		_State.ZoneLevel,
		_State.CurrentTab,
		False,
		True,
		IsLoading
	);

	{{{MapRankings::P}}}ShowRanking(_State.Controls.Frame_MapRankings, _State.CurrentTab != C_Tab_Medals);
	{{{MapRankings::P}}}ShowMedal(_State.Controls.Frame_MapRankings, _State.CurrentTab == C_Tab_Medals);
	UpdateControllerInfo(_State);
}

// Fetch all necessary information about the focused map that will be displayed in the MapRankings component
Void FetchFocusedMapRankings(K_State _State) {
	declare Text MapUid for _State.FocusedMap;
	declare {{{CampaignStruct::P}}}K_Map MapData = {{{CampaignStore::P}}}GetMap(_State.Room.CampaignId, MapUid);
	declare {{{CampaignStruct::P}}}K_Campaign Campaign = {{{CampaignStore::P}}}GetCampaignFromId(_State.Room.CampaignId);

	if (MapData.Uid != "") {
		switch (_State.CurrentTab) {
			case C_Tab_ZoneRankings: {
				if ({{{CampaignStore::P}}}HasCacheExpired_MapTopGlobalRankings(MapData, C_CacheLifetime)) {
					{{{CampaignStore::P}}}Action_LoadMapTopGlobalRankings(This, Campaign.LeaderboardGroupUid, MapData.Uid, MapData.Score);
				}
				if ({{{CampaignStore::P}}}HasCacheExpired_MapPlayerGlobalRankings(MapData, C_CacheLifetime)) {
					{{{CampaignStore::P}}}Action_LoadMapPlayerGlobalRankings(This, Campaign.LeaderboardGroupUid, MapData.Uid, MapData.Score);
				}
			}
			case C_Tab_ClubRankings: {
				declare Integer UserPinnedClubId = {{{ClubStore::P}}}GetUserPinnedClub().Id;
				if ({{{CampaignStore::P}}}HasCacheExpired_MapTopClubRankings(MapData, UserPinnedClubId, C_CacheLifetime)) {
					{{{CampaignStore::P}}}Action_LoadMapTopClubRankings(This, Campaign.LeaderboardGroupUid, MapData.Uid, UserPinnedClubId, MapData.Score);
				}
				if ({{{CampaignStore::P}}}HasCacheExpired_MapPlayerClubRankings(MapData, UserPinnedClubId, C_CacheLifetime)) {
					{{{CampaignStore::P}}}Action_LoadMapPlayerClubRankings(This, Campaign.LeaderboardGroupUid, UserPinnedClubId, MapData.Uid, MapData.Score);
				}
			}
		}
		UpdateMapRankingsComponent(_State, Campaign);
	}
}

Void SetJoiningState(K_State _State, Text _Message, Boolean _IsJoining) {
	_State.Controls.Label_Info.SetText(_Message);
	if (_IsJoining) {
		{{{LoadingSpinner::P}}}StartAnimation(This, _State.Controls.Frame_LoadingSpinner, "{{{Text_Joining}}}");
		{{{ExpendableButton::P}}}SetIconImageUrl(This, _State.Controls.Button_Join, "", False);
		{{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Join, "{{{Text_Joining}}}");
	} else {
		{{{LoadingSpinner::P}}}StopAnimation(This, _State.Controls.Frame_LoadingSpinner);
		{{{ExpendableButton::P}}}SetIconImageUrl(This, _State.Controls.Button_Join, "{{{Const::C_ImageUrl_Icon_Animated_Triple_Arrow_Right}}}", False);
		{{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Join, "{{{Text_JoinRoom}}}");
	}

	// Update footer
	declare Vec2 Pos_ButtonSpectate;
	if (_State.Controls.Button_Spectate.Visible) {
		Pos_ButtonSpectate = <_State.Controls.Button_Join.RelativePosition_V3.X + {{{ExpendableButton::P}}}GetWidth(_State.Controls.Button_Join), _State.Controls.Button_Spectate.RelativePosition_V3.Y>;
		AnimMgr.Flush(_State.Controls.Button_Spectate);
		AnimMgr.Add(_State.Controls.Button_Spectate, "<anim pos=\""^Pos_ButtonSpectate.X^" "^Pos_ButtonSpectate.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
	if (_State.Controls.Quad_LockedRoom.Visible) {
		declare Vec2 Pos_QuadLockedRoom = <Pos_ButtonSpectate.X + {{{ExpendableButton::P}}}GetWidth(_State.Controls.Button_Spectate), _State.Controls.Quad_LockedRoom.RelativePosition_V3.Y>;
		AnimMgr.Flush(_State.Controls.Quad_LockedRoom);
		AnimMgr.Add(_State.Controls.Quad_LockedRoom, "<anim pos=\""^Pos_QuadLockedRoom.X^" "^Pos_QuadLockedRoom.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

K_State RequestCurrentMap(K_State _State) {
	declare K_State State = _State;

	if (State.Room.ClubId != {{{ClubStruct::P}}}C_ClubNullId && State.Room.Id != {{{ClubStruct::P}}}C_RoomNullId) {
		State.ClubRoomDetailRequest = Http::DestroyAndCreate(State.ClubRoomDetailRequest, ClubAPI::GetClubRoomDetail(State.Room.ClubId, State.Room.Id));
	} else {
		State.LiveMapRequest = Http::DestroyAndCreate(State.LiveMapRequest, ChannelAPI::GetChannelInfo("{{{Const::C_ChannelUid_Quarterly}}}"));
	}

	return State;
}

// Join the room
K_State JoinRoom(K_State _State, Text _JoinLink, Text _ServerLogin, Boolean _IsSpectator, Boolean _CheckPrivilege) {
	declare K_State State = _State;

	if (TitleControl.IsReady) {
		declare Boolean IsLiveCampaign = State.Room.CampaignId == {{{CampaignStore::P}}}GetLiveQuarterlyCampaign().Id;
		declare Boolean CanPlayLiveCampaign = IsLiveCampaign && {{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayCurrentOfficialQuarterlyCampaign);
		declare Boolean CanPlayPublicClubRoom = !IsLiveCampaign && {{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayPublicClubRoom);
		
		State.IsJoiningAsSpectator = _IsSpectator;
		if (CanPlayLiveCampaign || CanPlayPublicClubRoom) {
			if (_CheckPrivilege) {
				declare CPrivilegeMgr::EPrivilege PrivilegeToCheck = CPrivilegeMgr::EPrivilege::PlayMultiplayerSessionWithUGC;
				if (IsLiveCampaign) {
					PrivilegeToCheck = CPrivilegeMgr::EPrivilege::PlayMultiplayerSession;
				}
				State.PlayPrivilegeCheck = K_PlayPrivilegeCheck {
					JoinLink = _JoinLink,
					ServerLogin = _ServerLogin,
					IsSpectator = _IsSpectator,
					PrivilegeCheck = Privileges::Check_DestroyAndCreate(
						State.PlayPrivilegeCheck.PrivilegeCheck,
						PrivilegeMgr,
						MainUser::GetMainUserId(),
						PrivilegeToCheck
					)
				};
			} else if (State.Room.HasPassword && !State.Controls.PopUpMultiChoice_Password.Visible && !{{{LoadingSpinner::P}}}IsLoading(State.Controls.Frame_LoadingSpinner)) {
				{{{PopUpMultiChoice::P}}}Open(This, State.Controls.PopUpMultiChoice_Password);
			} else if (!(State.Room.RoomId != {{{ClubStruct::P}}}C_RoomNullId && State.Room.MapUids.count <= 0)) {
				if (_JoinLink == "" && _ServerLogin == "" && (!State.Room.HasPassword || (State.Room.HasPassword && {{{TextField::P}}}GetValue(State.Controls.TextField_Password) != ""))) {
					State.RoomPassword = {{{TextField::P}}}GetValue(State.Controls.TextField_Password);
					SetJoiningState(State, "", True);
		
					if (IsLiveCampaign) {
						State.JoinRoomRequest = Http::DestroyAndCreate(State.JoinRoomRequest, ChannelAPI::GetJoinLink("{{{Const::C_ChannelUid_Quarterly}}}"));
					} else {
						State.JoinRoomRequest = Http::DestroyAndCreate(State.JoinRoomRequest, ClubAPI::GetJoinLink(State.Room.ClubId, State.Room.Id));
					}
				} else if (_JoinLink != "" || _ServerLogin != "") {
					SetJoiningState(State, "", False);
		
					if (!State.Controls.Frame_Profile.Visible) {
						declare Tools::K_JoinLink DetailedJoinLink;
				
						if (_JoinLink != "") {
							DetailedJoinLink = Tools::ParseJoinLink(_JoinLink);
						} else {
							DetailedJoinLink.ServerLoginOrIp = _ServerLogin;
						}
						if (State.IsJoiningAsSpectator) {
							DetailedJoinLink.Type = "qspectate";
						} else {
							DetailedJoinLink.Type = "qjoin";
						}
				
						DetailedJoinLink.Password = State.RoomPassword;
						TitleControl::OpenLinkAndWait(This, TitleControl, Tools::GenerateJoinLink(DetailedJoinLink), CMlScript::LinkType::ManialinkBrowser);
						SendCustomEvent("{{{UbisoftChallenges::C_Challenge_OnlineMultiplayer}}}", []);
					}
				} else if (State.Room.HasPassword && {{{TextField::P}}}GetValue(State.Controls.TextField_Password) == "") {
					State.Controls.Label_Info.SetText("{{{Text_EmptyPassword}}}");
				} else {
					SetJoiningState(State, "{{{Text_OfflineServer}}}", False);
				}
				
				// Close password pop-up when joining
				{{{PopUpMultiChoice::P}}}Close(This, State.Controls.PopUpMultiChoice_Password, True);
			}
		} else {
			// Cannot use GetCurrentRoutePath function because we lose the background behind the pop-up
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentParentPath(This));
			if (IsLiveCampaign) {
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", ["{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayCurrentOfficialQuarterlyCampaign)]);
			} else {
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", ["{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayPublicClubRoom)]);
			}
		}
	}

	return State;
}

// Handle the focus on the given control
K_State Focus(K_State _State, CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
			UpdateMapButtonFocus(State, _From as CMlFrame, False);
		} else if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}  else if ({{{Checkbox::P}}}IsCheckbox(_From)) {
			{{{Checkbox::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{RegionRankings::P}}}IsRegionRankings(_From)) {
			{{{RegionRankings::P}}}Unfocus((_From as CMlFrame));
		} else if ({{{MapRankings::P}}}IsMapRankings(_From)) {
			{{{MapRankings::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
			switch (_To.ControlId) {
				case "button-club": {{{Navigation::P}}}ChangeControlTarget(This, _To, "down", State.FocusedMap.ControlId);
				case "button-join": {{{Navigation::P}}}ChangeControlTarget(This, _To, "up", State.FocusedMap.ControlId);
				case "button-spectate": {{{Navigation::P}}}ChangeControlTarget(This, _To, "up", State.FocusedMap.ControlId);
				default: {
					if (_To.HasClass("{{{C_Class_MapButton}}}")) {
						State.FocusedMap = _To;
						State.FetchMapRankingsWithDelay = Now + {{{C_EventsDelay}}};
						UpdateMapRankingsComponent(State, {{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId));
						UpdateMapButtonFocus(State, _To as CMlFrame, True);
					}
				}
			}
		} else if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Checkbox::P}}}IsCheckbox(_To)) {
			{{{Checkbox::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{RegionRankings::P}}}IsRegionRankings(_To)) {
			{{{RegionRankings::P}}}Focus((_To as CMlFrame));
			{{{Navigation::P}}}ChangeControlTargets(This, _To, ["cancel", "action2"], [State.FocusedMap.ControlId, State.FocusedMap.ControlId]);
		} else if ({{{MapRankings::P}}}IsMapRankings(_To)) {
			{{{MapRankings::P}}}Focus(This, (_To as CMlFrame));
			{{{Navigation::P}}}ChangeControlTargets(This, _To, ["cancel", "action1"], [State.FocusedMap.ControlId, State.FocusedMap.ControlId]);
		}
	}

	UpdateControllerInfo(State);

	return State;
}

Void LockPage(K_State _State, Boolean _Lock) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !_Lock);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", !_Lock);
	{{{MapRankings::P}}}LockNavigation(This, _State.Controls.Frame_MapRankings, _Lock);
	{{{RegionRankings::P}}}LockNavigation(_State.Controls.Frame_RegionRankings, _Lock);
	{{{NavigationTabs::P}}}LockTabs(This, _State.Controls.Frame_NavigationTabs, _Lock);
}

// Display the player's profile associated to the given account id
K_State DisplayProfile(K_State _State, Text _AccountId, Boolean _Display) {
	if (_Display && _AccountId == "") return _State;
	declare K_State State = _State;

	State.Controls.Frame_Profile.Visible = _Display;
	LockPage(State, _Display);
	if (_Display) {
		State.CurrentReportData = ReportSystem::GetDataList();
		{{{ProfilePlayerInfo::P}}}SetUserAccountId(_AccountId);
		{{{ProfilePlayerInfo::P}}}Enable(True);
		{{{ProfilePlayerInfo::P}}}EnableGarageButton(False);
	} else {
		{{{ProfilePlayerInfo::P}}}Enable(False);
		if (PageIsVisible) {
			ReportSystem::AddUsingId("{{{C_Name}}}");
			ReportSystem::SetDataList(State.CurrentReportData);
		}
		UpdateControllerInfo(State);
	}

	return State;
}

// Handle the selection on the given control
K_State Select(K_State _State, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-spectate": State = JoinRoom(State, "", "", True, True);
		case "button-join": State = JoinRoom(State, "", "", False, True);
		case "button-club": {
			if (State.IsClubActivity) {
				{{{Router::P}}}PushParent(This);
			} else {
				// Cannot use GetCurrentRoutePath function because we lose the background behind the pop-up
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubDetails}}}", {{{Router::P}}}GetCurrentParentPath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubDetails}}}", ["{{{RoutePaths::C_Query_Club}}}" => {{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId).Club.tojson()]);
			}
		}
		case "button-show-password": {
			{{{Checkbox::P}}}Toggle(This, _Control as CMlFrame);
			State.Controls.Label_AdminPassword.Visible = {{{Checkbox::P}}}IsChecked(_Control as CMlFrame);
			State.Controls.Label_AdminPasswordHidden.Visible = !State.Controls.Label_AdminPassword.Visible;
		}
		case "button-regenerate-password": {
			State.ClubRoomGeneratePasswordRequest = Http::DestroyAndCreate(
				State.ClubRoomGeneratePasswordRequest,
				ClubAPI::PostClubRoomPasswordGenerate(State.Room.ClubId, State.Room.Id)
			);
		} 
		case "button-copy-password": {
			if (State.Controls.Label_AdminPassword.Value != "") {
				State.Controls.Label_Info.SetText("{{{Text_PasswordCopied}}}");
				System.ClipboardSet(State.Controls.Label_AdminPassword.Value);
			}
		}
	}

	return State;
}

// Set the given room in the pop-up
K_State SetCampaign(K_State _State, {{{CampaignStruct::P}}}K_Campaign _Campaign, Boolean _IsAnimated) {
	declare K_State State = _State;

	/* Set official room header */
	declare {{{CampaignStruct::P}}}K_CampaignName CampaignName = {{{CampaignStruct::P}}}ParseCampaignName(_Campaign.Name);
	declare Text RoomName = State.Room.Name;
	if (_Campaign.Type == {{{CampaignStruct::P}}}C_CampaignType_Quarterly && CampaignName.IsValid) {
		{{{PopUpBackground::P}}}SetHeaderImageUrl(This, State.Controls.Frame_Background, C_ImageUrls_PopUp_Quarterly_Header.get(CampaignName.Season, ""));
		RoomName = CampaignName.TranslatedName;
	} else {
		{{{PopUpBackground::P}}}SetHeaderImageUrl(This, State.Controls.Frame_Background, "");
	}

	/* Set room infos */
	State.Controls.Label_Title.SetText(RoomName);
	State.Controls.Label_Info.SetText("");
	State.Controls.Label_RoomId.SetText("");
	if (State.Room.RoomId != {{{ClubStruct::P}}}C_RoomNullId) {
		State.Controls.Label_RoomId.SetText("#"^State.Room.RoomId);
	}
	State.Controls.Quad_LockedRoom.Visible = State.Room.HasPassword;
	State.Controls.Label_ClubName.SetText({{{ClubStore::P}}}GetUserPinnedClub().Name);
	State.Controls.Label_ScriptName.SetText(Tools::GetScriptName(State.Room.ScriptName, "{{{Const::C_BaseScriptName}}}", "{{{Const::C_BaseScriptName_ToReplace}}}", {{{dump(Const::C_ModeNames_ScriptNames)}}}));
	State.Controls.Button_Spectate.RelativePosition_V3.X = State.Controls.Button_Join.RelativePosition_V3.X + {{{ExpendableButton::P}}}GetWidth(State.Controls.Button_Join);
	State.Controls.Quad_LockedRoom.RelativePosition_V3.X = State.Controls.Button_Spectate.RelativePosition_V3.X + {{{ExpendableButton::P}}}GetWidth(State.Controls.Button_Spectate);
	State.Controls.Button_RegeneratePassword.RelativePosition_V3.X = - State.Controls.Label_TitlePassword.ComputeWidth(State.Controls.Label_TitlePassword.Value, True) - 4.5;
	State.Controls.Button_CopyPassword.RelativePosition_V3.X = State.Controls.Button_RegeneratePassword.RelativePosition_V3.X - 6.5;
	State.Controls.Button_ShowPassword.RelativePosition_V3.X = State.Controls.Button_CopyPassword.RelativePosition_V3.X - 7.;
	{{{MapRankings::P}}}ShowAuthorDisplayName(State.Controls.Frame_MapRankings, State.Room.RoomId != {{{ClubStruct::P}}}C_RoomNullId);
	{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Club, TL::Compose("{{{Text_Club}}}", State.Room.ClubName));
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_Spectate, State.Room.RoomId != {{{ClubStruct::P}}}C_RoomNullId);
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_Club, State.Room.ClubName != "");
	{{{TextField::P}}}SetValue(This, State.Controls.TextField_Password, "");
	Tools::FitLabelValue(State.Controls.Label_Title, 13., 8., 0.5);
	SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", [RoomName]);
	State = DisplayProfile(State, "", False);
	
	/* Update room maps layout */
	State.Controls.Frame_Categories.Visible = _Campaign.Type == {{{CampaignStruct::P}}}C_CampaignType_Quarterly;
	foreach (Index => Control in State.Controls.Frame_Categories.Controls) {
		Control.Visible = _Campaign.Categories.existskey(Index) && _Campaign.Categories[Index].Playlist.count > 0 && _Campaign.Categories[Index].Playlist[0].Uid != "";
	}
	State.Controls.Frame_Maps.RelativePosition_V3 = <0., 0.>;
	if (!State.Controls.Frame_Categories.Visible) {
		State.Controls.Frame_Maps.RelativePosition_V3 = MLHelpers::SkewX(<0., 2.5>, 10.);
	}
	foreach (Index => Control in State.Controls.Frame_Maps.Controls) {
		declare CMlFrame Frame_Map = Control as CMlFrame;
		declare CMlFrame Button_Map = Frame_Map.Controls[0] as CMlFrame;
		((Control as CMlFrame).Controls[1] as CMlFrame).Hide(); //< Frame_MedalStack
		((Control as CMlFrame).Controls[2] as CMlFrame).Hide(); //< Frame_Top
		if (Index < _Campaign.MapCount) {
			{{{ExpendableButton::P}}}SetStyles(This, Button_Map, [{{{ExpendableButton::P}}}Style_Stack()], False);
			if (Index == 0) {{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_StackTop(), False);
			if (Index == _Campaign.MapCount-1) {{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_StackBottom(), False);
			{{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_Map(), False);
			{{{ExpendableButton::P}}}RedrawButton(This, Button_Map, _IsAnimated);
			{{{ExpendableButton::P}}}ShowAndUnlock(Button_Map);
			Frame_Map.Show();
		} else {
			declare Text MapUid for Button_Map;
			{{{ExpendableButton::P}}}HideAndLock(Button_Map);
			Frame_Map.Hide();
			MapUid = "";
		}
	}

	/* Update the room if properly loaded */
	if (_Campaign.IsLoaded && !_Campaign.FailedToGetMapUrl) {
		State = UpdateCampaignScoresAndMedals(State, _Campaign);
		FetchAllMapPlayerRankings(State);
		FetchFocusedMapRankings(State);
		FetchRegionRankings(State);
	}

	/* Update report context */
	ReportContext::SetDisplayedCampaign(
		System,
		{{{CampaignStruct::P}}}C_CampaignType_ContextNames.get(_Campaign.Type),
		_Campaign.Id,
		_Campaign.Name,
		_Campaign.Club.Id,
		_Campaign.Media.ButtonBackgroundUrl
	);

	if (State.Room.ActivityId != {{{ClubStruct::P}}}C_ActivityNullId) {
		ReportSystem::AddData(
			ReportStruct::C_ReportTarget_Activity,
			ReportStruct::LibStructuresReport_K_ReportData {
				Details = [State.Room.Name],
				Ids = [TL::ToText(State.Room.ActivityId)],
				Contexts = [["From" => "Menu RoomCampaignDisplay"]]
			}
		);
	}

	if (State.Room.ClubId != {{{ClubStruct::P}}}C_ClubNullId) {
		ReportSystem::AddData(
			ReportStruct::C_ReportTarget_Club,
			ReportStruct::LibStructuresReport_K_ReportData {
				Details = [State.Room.ClubName],
				Ids = [TL::ToText(State.Room.ClubId)],
				Contexts = [["From" => "Menu RoomCampaignDisplay"]]
			}
		);
	}

	return State;
}

// Select the tab to display
K_State UpdateCampaignTabPage(K_State _State, Integer _TabIndex) {
	declare K_State State = UpdateCampaignMapsGrid(_State, _TabIndex);

	FetchAllMapPlayerRankings(State);
	FetchFocusedMapRankings(State);
	FetchRegionRankings(State);
	UpdateControllerInfo(State);
	ReadTTSContext(State);

	// Update navigation
	if ({{{Navigation::P}}}IsLocked({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"))) {
		State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.FocusedMap);
	}

	return State;
}

// Update the navigation tabs with the current region name and the pinned club
Void UpdateNavigationTabs(K_State _State) {
	declare Text[Integer] TabNames = C_TabNames;

	if ({{{ZoneSelection::P}}}GetCurrentZoneLevel(This) != "") {
		TabNames[C_Tab_ZoneRankings] = {{{ZoneSelection::P}}}GetCurrentZoneLevel(This);
	} else {
		TabNames.removekey(C_Tab_ZoneRankings);
	}

	if ({{{ClubStore::P}}}GetUserPinnedClub().Id == {{{ClubStruct::P}}}C_ClubNullId) {
		TabNames.removekey(C_Tab_ClubRankings);
	}

	{{{NavigationTabs::P}}}SetTabs(This, _State.Controls.Frame_NavigationTabs, TabNames, False);
	{{{NavigationTabs::P}}}RedrawNavigationTabs(This, _State.Controls.Frame_NavigationTabs, False);
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_State State;
declare Boolean IsTitleControlReady;

declare Integer CampaignDisplay_NavigationTab for LocalUser = C_Tab_Medals;
declare Integer CampaignDisplay_SelectedRegion for LocalUser = {{{ZoneSelection::P}}}C_ZoneLevel_Null;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	IsClubActivity = False,
	CurrentTab = CampaignDisplay_NavigationTab,
	FocusedMap = (Frame_Global.GetFirstChild("button-map-0-0") as CMlFrame),
	Controls = K_Controls {
		Button_Club = (Frame_Global.GetFirstChild("button-club") as CMlFrame),
		Button_CopyPassword = (Frame_Global.GetFirstChild("button-copy-password") as CMlFrame),
		Button_Join = (Frame_Global.GetFirstChild("button-join") as CMlFrame),
		Button_RegeneratePassword = (Frame_Global.GetFirstChild("button-regenerate-password") as CMlFrame),
		Button_ShowPassword = (Frame_Global.GetFirstChild("button-show-password") as CMlFrame),
		Button_Spectate = (Frame_Global.GetFirstChild("button-spectate") as CMlFrame),
		Frame_AdminPassword = (Frame_Global.GetFirstChild("frame-password-admin") as CMlFrame),
		Frame_Background = (Frame_Global.GetFirstChild("frame-background") as CMlFrame),
		Frame_Categories = (Frame_Global.GetFirstChild("frame-categories") as CMlFrame),
		Frame_LoadingSpinner = (Frame_Global.GetFirstChild("frame-loading-spinner") as CMlFrame),
		Frame_MapRankings = (Frame_Global.GetFirstChild("frame-map-rankings") as CMlFrame),
		Frame_NavigationTabs = (Frame_Global.GetFirstChild("frame-navigation-tabs") as CMlFrame),
		Frame_PinnedClub = (Frame_Global.GetFirstChild("frame-pinned-club") as CMlFrame),
		Frame_Profile = (Frame_Global.GetFirstChild("frame-profile") as CMlFrame),
		Frame_RegionRankings = (Frame_Global.GetFirstChild("frame-region-rankings") as CMlFrame),
		Frame_Maps = (Frame_Global.GetFirstChild("frame-maps") as CMlFrame),
		Frame_ZoneSelection = (Frame_Global.GetFirstChild("frame-zone-selection") as CMlFrame),
		Label_AdminPassword = (Frame_Global.GetFirstChild("label-admin-password") as CMlLabel),
		Label_AdminPasswordHidden = (Frame_Global.GetFirstChild("label-admin-password-hidden") as CMlLabel),
		Label_ClubName = (Frame_Global.GetFirstChild("label-club-name") as CMlLabel),
		Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
		Label_RoomId = (Frame_Global.GetFirstChild("label-room-id") as CMlLabel),
		Label_ScriptName = (Frame_Global.GetFirstChild("label-script-name") as CMlLabel),
		Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
		Label_TitlePassword = (Frame_Global.GetFirstChild("label-password-title") as CMlLabel),
		PopUpMultiChoice_Password = (Frame_Global.GetFirstChild("popupmultichoice-password") as CMlFrame),
		Quad_LockedRoom = (Frame_Global.GetFirstChild("quad-locked-room") as CMlQuad),
		TextField_Password = (Frame_Global.GetFirstChild("textfield-password") as CMlFrame)
	}
};

IsTitleControlReady = True;
***

***MainLoop***
***
if (PageIsVisible) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				ReportSystem::AddUsingId("{{{C_Name}}}");
				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);
				State.IsClubActivity = Query.existskey("{{{RoutePaths::C_Query_IsClubActivity}}}");

				// Text to speech context
				G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Enter({{{Const::C_TTSContextLevel_Page}}});

				// Set the current room
				if (Query.existskey("{{{RoutePaths::C_Query_Room}}}")) {
					State.Room.fromjson(Query["{{{RoutePaths::C_Query_Room}}}"]);
					State.ClubRoomDetailRequest = Http::DestroyAndCreate(State.ClubRoomDetailRequest, ClubAPI::GetClubRoomDetail(State.Room.ClubId, State.Room.Id));
				} else {
					declare {{{CampaignStruct::P}}}K_Campaign LiveCampaign = {{{CampaignStore::P}}}GetLiveQuarterlyCampaign();
					State.LiveMapRequest = Http::DestroyAndCreate(State.LiveMapRequest, ChannelAPI::GetChannelInfo("{{{Const::C_ChannelUid_Quarterly}}}"));
					State.Room = {{{ClubStruct::P}}}K_Room {
						ClubId = {{{ClubStruct::P}}}C_ClubNullId,
						CampaignId = LiveCampaign.Id,
						Name = LiveCampaign.Name
					};
				}

				// Check if the room was edited since the time we loaded it
				declare {{{CampaignStruct::P}}}K_Campaign Campaign = {{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId);
				if (Query.existskey("{{{RoutePaths::C_Query_CampaignEditionTimestamp}}}")) {
					if (TL::ToInteger(Query["{{{RoutePaths::C_Query_CampaignEditionTimestamp}}}"]) > Campaign.EditionTimestamp) {
						// The room have been edited, unload the old data from the cache
						{{{CampaignStore::P}}}UnloadCampaign(Campaign.Id, True);
						Campaign = {{{CampaignStore::P}}}GetCampaignFromId(Campaign.Id);
					}
				}

				// Load the campaign of the room if it is not loaded
				if (!Campaign.IsLoaded || Campaign.FailedToGetMapUrl) {
					{{{LoadingSpinner::P}}}StartAnimation(This, State.Controls.Frame_LoadingSpinner);
					{{{CampaignStore::P}}}Action_LoadCampaign(This, State.Room.CampaignId, State.Room.ClubId);
				}
				
				// Update zone selection with shared variables (must be done before updating tabs)
				{{{ZoneSelection::P}}}SetCurrentZone(This, CampaignDisplay_SelectedRegion);

				// Update navigation tabs with shared variables
				UpdateNavigationTabs(State);
				if ({{{NavigationTabs::P}}}IsAvailableTab(State.Controls.Frame_NavigationTabs, CampaignDisplay_NavigationTab)) {
					{{{NavigationTabs::P}}}UpdateCurrentTab(This, State.Controls.Frame_NavigationTabs, CampaignDisplay_NavigationTab, False);
					State.CurrentTab = CampaignDisplay_NavigationTab;
				} else {
					State.CurrentTab = {{{NavigationTabs::P}}}GetCurrentTab(State.Controls.Frame_NavigationTabs);
					CampaignDisplay_NavigationTab = State.CurrentTab;
				}
				ReadTTSContext(State);
				
				// Update room pop-up
				State = SetCampaign(State, Campaign, False);
				State.FocusedMap = State.Controls.Frame_Maps.GetFirstChild("button-map-0-0");
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Join);
			}
		}
	}

	/* Report system events */
	foreach (Event in ReportSystem::GetPendingEvents()) {
		if (Event.LastUsingId == "{{{C_Name}}}") {
			switch (Event.Type) {
				case ReportSystem::C_EventType_Open: {
					LockPage(State, True);
				}
				case ReportSystem::C_EventType_Close: {
					LockPage(State, False);
					UpdateControllerInfo(State);
				}
			}
		}
	}

	/* Check leaderboard privilege */
	if (!Privileges::Check_IsComplete(State.PlayPrivilegeCheck.PrivilegeCheck)) {
		State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_Update(State.PlayPrivilegeCheck.PrivilegeCheck);
		if (Privileges::Check_IsComplete(State.PlayPrivilegeCheck.PrivilegeCheck)) {
			SetJoiningState(State, "", False); //< Must be done before calling JoinRoom() otherwise password checking won't work
			if (Privileges::Check_HasPrivilege(State.PlayPrivilegeCheck.PrivilegeCheck)) {
				State = JoinRoom(State, State.PlayPrivilegeCheck.JoinLink, State.PlayPrivilegeCheck.ServerLogin, State.PlayPrivilegeCheck.IsSpectator, False);
			}
			State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlayPrivilegeCheck.PrivilegeCheck);
		}
	}
		
	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Action1: {
							if ({{{Navigation::P}}}IsLocked(State.Controls.Frame_MapRankings) && {{{MapRankings::P}}}IsMapAuthorNameDisplayed(State.Controls.Frame_MapRankings)) {
								declare Text MapUid for State.FocusedMap;
								State = DisplayProfile(State, {{{CampaignStore::P}}}GetMap(State.Room.CampaignId, MapUid).AuthorLogin, True);
							}
						}
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: if (!Event.IsActionAutoRepeat) State = Select(State, Event.To);
						case CMlScriptEvent::EMenuNavAction::Cancel: {
							if (Event.To == Event.From) {{{Router::P}}}PushParent(This);
							else State = Focus(State, Event.From, Event.To);
						}
						default: State = Focus(State, Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Event.To);
						case CMlScriptEvent::Type::MouseOver: State = Focus(State, Event.From, Event.To);
					}
				}
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background") {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: {{{Router::P}}}PushParent(This);
			}
		}
	}


	/* Map rankings info events */
	foreach (Event in {{{MapRankings::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{MapRankings::P}}}C_EventType_Select: {
				State = DisplayProfile(State, Event.AccountId, True);
			}
		}
	}

	/* Region rankings events */
	foreach (Event in {{{RegionRankings::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{RegionRankings::P}}}C_EventType_Select: {
				State = DisplayProfile(State, Event.AccountId, True);
			}
		}
	}

	/* Profile player info events */
	foreach (Event in {{{ProfilePlayerInfo::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{ProfilePlayerInfo::P}}}C_EventType_Close: {
				State = DisplayProfile(State, "", False);
			}
		}
	}

	/* Zone selection events */
	foreach (Event in {{{ZoneSelection::P}}}GetPendingEvents(This)) {
		if (Event.Type == {{{ZoneSelection::P}}}C_Event_ZoneUpdate) {
			State.ZoneLevel = Event.Zone;
			CampaignDisplay_SelectedRegion = Event.Zone;
			State = UpdateCampaignMapsGrid(State, State.CurrentTab);
			UpdateNavigationTabs(State);
			UpdateMapRankingsComponent(State, {{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId));
			UpdateRegionRankingsComponent(State, {{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId));
			ReadTTSContext(State);
		}
	}

	/* NavigationTabs events */
	foreach (Event in {{{NavigationTabs::P}}}GetPendingEvents(This)) {
		if (Event.Frame_NavigationTabs.ControlId == State.Controls.Frame_NavigationTabs.ControlId) {
			switch (Event.Type) {
				case {{{NavigationTabs::P}}}C_EventType_Update: {
					if (!{{{NavigationTabs::P}}}IsAvailableTab(State.Controls.Frame_NavigationTabs, State.CurrentTab)) {
						State = UpdateCampaignTabPage(State, {{{NavigationTabs::P}}}GetCurrentTab(State.Controls.Frame_NavigationTabs));
						CampaignDisplay_NavigationTab = State.CurrentTab;
					}
				}
				case {{{NavigationTabs::P}}}C_EventType_Select: {
					State = UpdateCampaignTabPage(State, Event.CurrentTab);
					CampaignDisplay_NavigationTab = State.CurrentTab;
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_Password.Id) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					switch (Event.SelectedIndex) {
						case {{{C_Choice_Cancel}}}: {{{PopUpMultiChoice::P}}}Close(This, State.Controls.PopUpMultiChoice_Password, True);
						case {{{C_Choice_Join}}}: State = JoinRoom(State, "", "", State.IsJoiningAsSpectator, False);
						default: {
							if ({{{Checkbox::P}}}IsCheckbox(Event.SelectedControl)) {
								if ({{{Checkbox::P}}}Toggle(This, Event.SelectedControl as CMlFrame)) {
									{{{TextField::P}}}SetTextFormatEntry(This, State.Controls.TextField_Password, CMlEntry::ETextFormat::Basic);
								} else {
									{{{TextField::P}}}SetTextFormatEntry(This, State.Controls.TextField_Password, CMlEntry::ETextFormat::Password);
								}
							}
						}
					}
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					// Disable ReportSystem when the PopUpMultiChoice is visible
					if (State.Controls.PopUpMultiChoice_Password.Visible) {
						State.CurrentReportData = ReportSystem::GetDataList();
						ReportSystem::RemoveUsingId("{{{C_Name}}}");
					} else {
						ReportSystem::AddUsingId("{{{C_Name}}}");
						ReportSystem::SetDataList(State.CurrentReportData);
					}
					UpdateControllerInfo(State);
					LockPage(State, State.Controls.PopUpMultiChoice_Password.Visible);
				}
			}
		}
	}

	/* Campaign store events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				if (Event.CustomEventData.count > 0) {
					declare Text MapUid for State.FocusedMap;
					declare {{{CampaignStruct::P}}}K_Campaign Campaign = {{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId);
					declare Text[] LeaderboardGroupUidList = [Campaign.LeaderboardGroupUid];
					switch (Event.CustomEventData[0]) {
						case MapUid, LeaderboardGroupUidList.tojson(), ""^State.Room.CampaignId: {
							switch (Event.CustomEventType) {
								case {{{CampaignStore::P}}}C_Event_CampaignPlayerGlobalRankingsUpdated: UpdateRegionRankingsComponent(State, Campaign);
								case {{{CampaignStore::P}}}C_Event_CampaignTopClubRankingsUpdated: UpdateRegionRankingsComponent(State, Campaign);
								case {{{CampaignStore::P}}}C_Event_CampaignTopGlobalRankingsUpdated: UpdateRegionRankingsComponent(State, Campaign);
								case {{{CampaignStore::P}}}C_Event_CacheBusted_MapTopClubRankings: FetchFocusedMapRankings(State);
								case {{{CampaignStore::P}}}C_Event_CacheBusted_MapTopGlobalRankings: FetchFocusedMapRankings(State);
								case {{{CampaignStore::P}}}C_Event_CacheBusted_MapPlayerClubRankings: FetchFocusedMapRankings(State);
								case {{{CampaignStore::P}}}C_Event_CacheBusted_MapPlayerGlobalRankings: FetchFocusedMapRankings(State);
								case {{{CampaignStore::P}}}C_Event_MapTopClubRankingsUpdate: UpdateMapRankingsComponent(State, Campaign);
								case {{{CampaignStore::P}}}C_Event_MapTopGlobalRankingsUpdate: UpdateMapRankingsComponent(State, Campaign);
								case {{{CampaignStore::P}}}C_Event_MapPlayerClubRankingsUpdated, {{{CampaignStore::P}}}C_Event_MapPlayerGlobalRankingsUpdated: {
									State = UpdateCampaignMapsGrid(State, State.CurrentTab);
									UpdateMapRankingsComponent(State, Campaign);
								}
								case {{{CampaignStore::P}}}C_Event_CampaignLoadComplete, {{{CampaignStore::P}}}C_Event_CampaignListUpdateError, {{{CampaignStore::P}}}C_Event_CampaignUpdateFailed: {
									{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.Frame_LoadingSpinner);
									if (Event.CustomEventData.count > 1) {
										State.Controls.Label_Info.SetText(TL::Compose("{{{Text_FetchError}}}", ""^Event.CustomEventData[1]));
									} else if (Campaign.IsLoaded && !Campaign.FailedToGetMapUrl) {
										State = SetCampaign(State, Campaign, True);
										if (!State.IsClubActivity) {
											State.ClubMemberRequest = Http::DestroyAndCreate(State.ClubMemberRequest, ClubAPI::GetClubMemberWithId(State.Room.ClubId, LocalUser.WebServicesUserId));
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	/* Fetch room details */
	if (Http::IsInitialized(State.ClubRoomDetailRequest)) {
		State.ClubRoomDetailRequest = Http::Update(State.ClubRoomDetailRequest);
		if (!Http::IsRunning(State.ClubRoomDetailRequest)) {
			if (Http::IsSuccess(State.ClubRoomDetailRequest)) {
				State.Room = ClubAPI::GetResponseFromGetClubRoomDetail(State.ClubRoomDetailRequest);
				declare {{{CampaignStruct::P}}}K_Campaign Campaign = {{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId);
				if (Campaign.IsLoaded && !Campaign.FailedToGetMapUrl) {
					State = SetCampaign(State, Campaign, True);
				}
				if (State.Room.HasPassword) {
					State.ClubRoomPasswordRequest = Http::DestroyAndCreate(State.ClubRoomPasswordRequest, ClubAPI::GetClubRoomPassword(State.Room.ClubId, State.Room.Id));
				}

				ReportContext::SetDisplayedRoom(
					System,
					State.Room.Id,
					State.Room.ClubId,
					State.Room.ActivityId,
					State.Room.CampaignId,
					State.Room.IsHostedByNadeo,
					State.Room.PlayerServerLogin,
					State.Room.ServerAccountId,
					State.Room.Name,
					State.Room.ScriptName,
					State.Room.MapUids,
					State.Room.MediaUrl
				);
			}
			State.ClubRoomDetailRequest = Http::Destroy(State.ClubRoomDetailRequest);
		}
	}

	/* Fetch room password */
	if (Http::IsInitialized(State.ClubRoomPasswordRequest)) {
		State.ClubRoomPasswordRequest = Http::Update(State.ClubRoomPasswordRequest);
		if (!Http::IsRunning(State.ClubRoomPasswordRequest)) {
			if (Http::IsSuccess(State.ClubRoomPasswordRequest)) {
				State.Controls.Label_AdminPassword.SetText(ClubAPI::GetResponseFromGetClubRoomPassword(State.ClubRoomPasswordRequest));
				if (!State.IsClubActivity) {
					State.ClubMemberRequest = Http::DestroyAndCreate(State.ClubMemberRequest, ClubAPI::GetClubMemberWithId(State.Room.ClubId, LocalUser.WebServicesUserId));
				} else {
					DisplayAdminPassword(State, {{{ClubStore::P}}}GetUserCurrentClubMembership());
				}
			}
			State.ClubRoomPasswordRequest = Http::Destroy(State.ClubRoomPasswordRequest);
		}
	}

	/* Password generation */
	if (Http::IsInitialized(State.ClubRoomGeneratePasswordRequest)) {
		State.ClubRoomGeneratePasswordRequest = Http::Update(State.ClubRoomGeneratePasswordRequest);
		if (!Http::IsRunning(State.ClubRoomGeneratePasswordRequest)) {
			if (Http::IsSuccess(State.ClubRoomGeneratePasswordRequest)) {
				State.Controls.Label_AdminPassword.SetText(ClubAPI::GetResponseFromGetClubRoomPassword(State.ClubRoomGeneratePasswordRequest));
				State.Controls.Label_Info.SetText("{{{Text_PasswordGenerated}}}");
			} else {
				State.Controls.Label_Info.SetText(TL::Compose("{{{Text_PasswordGenerationError}}}", ""^Http::GetStatusCode(State.ClubRoomGeneratePasswordRequest)));
			}
			State.ClubRoomGeneratePasswordRequest = Http::Destroy(State.ClubRoomGeneratePasswordRequest);
		}
	}

	/* Get player club membership */
	if (Http::IsInitialized(State.ClubMemberRequest)) {
		State.ClubMemberRequest = Http::Update(State.ClubMemberRequest);
		if (!Http::IsRunning(State.ClubMemberRequest)) {
			if (Http::IsSuccess(State.ClubMemberRequest)) {
				DisplayAdminPassword(State, ClubAPI::GetResponseFromGetClubMemberWithId(State.ClubMemberRequest));
			}
			State.ClubMemberRequest = Http::Destroy(State.ClubMemberRequest);
		}
	}

	/* Join server request */
	if (Http::IsInitialized(State.JoinRoomRequest)) {
		State.JoinRoomRequest = Http::Update(State.JoinRoomRequest);
		if (!Http::IsRunning(State.JoinRoomRequest)) {
			if (Http::IsSuccess(State.JoinRoomRequest)) {
				if (State.Room.CampaignId == {{{CampaignStore::P}}}GetLiveQuarterlyCampaign().Id) {
					State = JoinRoom(State, ChannelAPI::GetResponseFromGetJoinLink(State.JoinRoomRequest), "", False, False);
				} else {
					declare ClubAPI::K_JoinLink JoinLinkStruct = ClubAPI::GetResponseFromGetJoinLink(State.JoinRoomRequest);
					if (!JoinLinkStruct.IsStarting) {
						State = JoinRoom(State, JoinLinkStruct.JoinLink, "", State.IsJoiningAsSpectator, False);
					} else {
						if (JoinLinkStruct.JoinLink != "") {
							{{{ServerStatus::P}}}GetServerStatus(Tools::ParseJoinLink(JoinLinkStruct.JoinLink).ServerLoginOrIp);
						} else {
							State.JoinRoomRequest = Http::RetryWithDelay(State.JoinRoomRequest, Now + C_Retry_Timer);
						}
					}
				}
			} else {
				SetJoiningState(State, TL::Compose("{{{Text_JoinError}}}", ""^Http::GetStatusCode(State.JoinRoomRequest)), False);
			}
			if (!Http::IsWaitingRetry(State.JoinRoomRequest)) {
				State.JoinRoomRequest = Http::Destroy(State.JoinRoomRequest);
			}
		}
	}

	/* Currently played map request */
	if (Http::IsInitialized(State.LiveMapRequest)) {
		State.LiveMapRequest = Http::Update(State.LiveMapRequest);
		if (!Http::IsRunning(State.LiveMapRequest)) {
			if (Http::IsSuccess(State.LiveMapRequest)) {
				State.Room.ServerInfo.CurrentMapUid = ChannelAPI::GetResponseFromGetChannelInfo(State.LiveMapRequest).CurrentTimeSlot.CurrentMap;
				declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
				foreach (Index => Control in State.Controls.Frame_Maps.Controls) {
					declare CMlFrame Button_Map = (Control as CMlFrame).Controls[0] as CMlFrame;
					UpdateMapButtonFocus(State, Button_Map, FocusedControl != Null && Button_Map.Id == FocusedControl.Id);
				}
			}
			State.LiveMapRequest = Http::RetryWithDelay(State.LiveMapRequest, Now + C_CacheLifetime); //< Update current map display every minute
		}
	}

	/* Handle server exit */
	if (IsTitleControlReady != TitleControl.IsReady) {
		IsTitleControlReady = TitleControl.IsReady;
		if (IsTitleControlReady && !{{{LoadingSpinner::P}}}IsLoading(State.Controls.Frame_LoadingSpinner)) {
			{{{CampaignStore::P}}}Action_BustCache_MapPlayerClubRankings(This, State.Room.CampaignId, "", {{{ClubStore::P}}}GetUserPinnedClub().Id);
			{{{CampaignStore::P}}}Action_BustCache_MapPlayerGlobalRankings(This, State.Room.CampaignId, "");
			{{{CampaignStore::P}}}Action_BustCache_MapTopClubRankings(This, State.Room.CampaignId, "", {{{ClubStore::P}}}GetUserPinnedClub().Id);
			{{{CampaignStore::P}}}Action_BustCache_MapTopGlobalRankings(This, State.Room.CampaignId, "");
			State = UpdateCampaignScoresAndMedals(State, {{{CampaignStore::P}}}GetCampaignFromId(State.Room.CampaignId));
			State = RequestCurrentMap(State);
			FetchRegionRankings(State);
		}
	}

	/* ServerStatus events */
	foreach (Event in {{{ServerStatus::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{ServerStatus::P}}}C_EventType_ServerReady: {
				if (Event.IsSuccess) {
					State = JoinRoom(State, "", Event.ServerLogin, State.IsJoiningAsSpectator, False);
				} else {
					SetJoiningState(State, "{{{Text_OfflineServer}}}", False);
				}
			}
		}
	}

	/* Fetch map rankings with delay to avoid spam */
	if (State.FetchMapRankingsWithDelay > 0 && State.FetchMapRankingsWithDelay <= Now) {
		State.FetchMapRankingsWithDelay = -1;
		FetchFocusedMapRankings(State);
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_LeavingRoute}}}": {
				State = K_State {
					ZoneLevel = State.ZoneLevel,
					CurrentTab = State.CurrentTab,
					FocusedMap = State.FocusedMap,
					Controls = State.Controls
				};
				UpdateRegionRankingsComponent(State, {{{CampaignStruct::P}}}K_Campaign {});
				UpdateMapRankingsComponent(State, {{{CampaignStruct::P}}}K_Campaign {});
				State = SetCampaign(State, {{{CampaignStruct::P}}}K_Campaign {}, False);
				DisplayAdminPassword(State, {{{ClubStruct::P}}}K_Member {});
				{{{ServerStatus::P}}}CancelRequest();
				SetJoiningState(State, "", False);
				State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlayPrivilegeCheck.PrivilegeCheck);
				G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Tabs);
				G_TTSContextIdent_Section = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Section);
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Null);
				ReportSystem::RemoveUsingId("{{{C_Name}}}");
			}
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	CampaignStore::ComponentV2(),
	CampaignStruct::Component(),
	Checkbox::ComponentV2(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MapRankings::ComponentV2(),
	MedalStack::Component(),
	Navigation::ComponentV2(),
	NavigationTabs::ComponentV2(),
	PopUpBackground::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	ProfilePlayerInfo::Component(),
	RegionRankings::Component(),
	Router::ComponentV2(),
	ServerStatus::Component(),
	TextField::ComponentV2(),
	Transition::ComponentV2(),
	UserStore::ComponentV2(),
	ExpendableAsset::ComponentV2(),
	ZoneSelection::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}