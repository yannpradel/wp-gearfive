/** 
 *	Page: ServerReview
 */
#Const Version		"2023-05-22"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/ServerReview.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CommonLibs/Common/Error.Script.txt" as Error
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/TrackBrowser.Script.txt" as TrackBrowser
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_ServerReview"
#Const C_NavGroupName "navgroup-page-server-review"

#Const C_Index_ROM 0
#Const C_Index_MyTracks 1
#Const C_Index_SYM 2
#Const C_Index_ClubTrackReviews 3

#Const C_ButtonNames [
	//L16N [Page ServerReview] Play tracks made by other people.
	0 => _("Review other tracks"),
	//L16N [Page ServerReview] Access the list of the player submitted tracks.
	1 => _("My submitted tracks"),
	//L16N [Page ServerReview] Upload your tracks to be reviewed.
	2 => _("Submit your tracks"),
	//L16N [Page ServerReview] Access the list of public track reviews created by the clubs.
	3 => _("Club track reviews")
]

#Const C_ButtonImagesPathList [
	0 => "file://Media/Manialinks/Nadeo/TMNext/Menus/PageMapReview/Menu_Create_TrackReview_ReviewOtherTracks.dds",
	1 => "file://Media/Manialinks/Nadeo/TMNext/Menus/PageMapReview/Menu_Create_TrackReview_MySubmittedTracks.dds",
	2 => "file://Media/Manialinks/Nadeo/TMNext/Menus/PageMapReview/Menu_Create_TrackReview_SubmitYourTracks.dds",
	3 => "file://Media/Manialinks/Nadeo/TMNext/Menus/PageMapReview/Menu_Create_TrackReview_ClubTrackReviews.dds"
]

#Const C_ServerInfo_WaitingTime 0
#Const C_ServerInfo_GameMode 1

#Const C_ServerInfo_Names [
	//L16N [ServerReview] Time needed for the track to enter the track review servers
	0 => _("Maximal waiting time"),
	//L16N [ServerReview] Game mode of the track for the track review (example : Royal or Track of the Day)
	1 => _("Game mode")
]

#Const C_Class_PageMapConfirmation "page-map-confirmation"
#Const C_Class_PageReviewType "page-review-type"
#Const C_Class_PageMainMenu "page-main-menu"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [ServerReview] Title of the track review feature.
	declare Text Text_Title = _("Track review");
	//L16N [ServerReview] Play tracks made by other people for track of the day
	declare Text Text_TOTD = _("Track of the day");
	//L16N [ServerReview] Play tracks made by other people for royal mode
	declare Text Text_Royal = _("Royal");
	//L16N [ServerReview] Time in minute (singular), %1 will be replaced by the time number, e.g "1 minute"
	declare Text Text_MinuteSingular = _("|singular|%1 minute");
	//L16N [ServerReview] Time in minutes (plural), %1 will be replaced by the time number, e.g "5 minutes"
	declare Text Text_MinutePlural = _("|plural|%1 minutes");
	//L16N [ServerReview] Time in minute in a shortened version (singular)
	declare Text Text_MinuteSingular_Short = _("|singular 3 letters max|min");
	//L16N [ServerReview] Time in minutes in a shortened version (plural)
	declare Text Text_MinutePlural_Short = _("|plural 4 letters max|mins");
	//L16N [ServerReview] Message displayed when the selected track cannot be uploaded on the Track Review system. %1 goes for the type of error.
	declare Text Text_UploadError = _("Error while uploading your track, please try again. (Error code: %1)");
	//L16N [ServerReview] Error message displayed when the user try to send an unplayable track (not validated, lightmap not computed, ...) to the server review system
	declare Text Text_NotPlayable = _("This track is not playable");
	//L16N [ServerReview] Confirm to test this track on track server review
	declare Text Text_Confirm = _("Send for review");
	//L16N [ServerReview] Text of the loading spinner diplayed when the selected track is added to the track review queue.
	declare Text Text_AddMapToQueue = _("Adding track to queue...");

	declare Vec2 Size_HorizontalButton = MLHelpers::KeepRatioFromY(1232., 556., 46.3);
	declare Vec2 Size_Thumbnail = MLHelpers::KeepRatioFromY(544., 412., 69.);

	declare Vec2 Pos_ButtonROM = MLHelpers::SkewX(<-48., 17.1>, 10.);
	declare Vec2 Pos_ButtonMyTracks = MLHelpers::SkewX(<-48., -32.5>, 10.);
	declare Vec2 Pos_ButtonSYM = MLHelpers::SkewX(<50., 17.1>, 10.);
	declare Vec2 Pos_ButtonClubTrackReviews = MLHelpers::SkewX(<50., -32.5>, 10.);

	/* Server Infos list */
	declare Text ML_ServerInfos = "";
	declare Real Margin = 1.5;
	declare Vec2 Size_Background = <120., 7.5>;

	foreach (InfoId => InfoName in C_ServerInfo_Names) {
		declare Vec2 Pos_InfoName = MLHelpers::SkewX(<3., -0.5>, 10.);

		ML_ServerInfos ^= """
			<frame id="frame-server-info-{{{InfoId}}}"
				pos="{{{MLHelpers::Skew(-Size_Background.X/2., -InfoId*(Size_Background.Y + Margin), 10.)}}}"
			>
				<label id="label-server-info-name" size="{{{Size_Background.X*0.5}}} {{{Size_Background.Y}}}" pos="{{{Pos_InfoName.X}}} {{{Pos_InfoName.Y}}}" halign="left" class="text-semi-bold" text="{{{InfoName}}}" textsize="2." z-index="3"/>
				<frameinstance
					id="asset-left" z-index="1"
					modelid="{{{ExpendableAsset::C_Name}}}"
					data-width="{{{Size_Background.X*0.55}}}"
					data-height="{{{Size_Background.Y}}}"
					data-halign="left" data-valign="center"
					data-color="{{{ColorPalette::C_Color_DarkBlue}}}"
					data-colormode-left="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
					data-image-left="{{{Const::C_ImageUrl_Common_ButtonRounded_Start}}}"
					data-size-left="128 256"
				/>
				<frameinstance
					id="asset-right" z-index="2"
					modelid="{{{ExpendableAsset::C_Name}}}"
					pos="{{{Size_Background.X*0.55 - MLHelpers::SkewX(Size_Background.Y, 10.)}}} 0"
					data-width="{{{Size_Background.X*0.45}}}"
					data-height="{{{Size_Background.Y}}}"
					data-halign="left" data-valign="center"
					data-color="{{{ColorPalette::C_Color_GreenTwo}}}"
					data-colormode-right="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
					data-image-right="{{{Const::C_ImageUrl_Common_ButtonRounded_End}}}"
					data-size-right="128 256"
				/>
				<label id="label-server-info-value" size="{{{Size_Background.X*0.4}}} {{{Size_Background.Y}}}" pos="{{{Size_Background.X*0.76}}} -0.5" class="text-semi-bold" textsize="2." textcolor="{{{ColorPalette::C_Color_White}}}" z-index="3"/>
			</frame>
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="quad-default" halign="center" valign="center"/>
	<style class="text-extra-bold" halign="left" valign="center2" textprefix="$t$i" textfont="{{{FontManager::C_GameFontExtraBold}}}" textsize="5" textcolor="FFF"/>
	<style class="text-semi-bold" halign="center" valign="center2" textcolor="FFF" textsize="4" textprefix="$t$i" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
	<style class="text-regular" halign="left" valign="center2" textcolor="FFF" textsize="4" textprefix="$t$i" textfont="{{{FontManager::C_GameFontRegular}}}"/>
</stylesheet>

<!-- Track Browser pop up (outside the global frame to be above Club & Profile widgets) -->
<frameinstance modelid="{{{TrackBrowser::C_Name}}}" 
	id="frame-track-browser"
	z-index="{{{Const::C_ZIndex_BrowserAPI}}}"
	data-show-only-playable="1"
/>

<!-- Frame global -->
<frame id="frame-global">
	<!-- Frame main menu (buttons Review Other Tracks, My Submitted Tracks, Submit Your Tracks and Club Track Reviews) -->
	<frame id="frame-main-menu">
		<frameinstance 
			id="button-rom" pos="{{{Pos_ButtonROM.X}}} {{{Pos_ButtonROM.Y}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_PageMainMenu}}}"
			data-text="{{{C_ButtonNames[C_Index_ROM]}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{C_ButtonImagesPathList[C_Index_ROM]}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus=".0"
			data-textsize="5"
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-autonewline="1" data-maxline="2"
			data-valign="center" data-halign="center"
			data-tilthitbox="10"
			data-nav-inputs="select;cancel;right;down"
			data-nav-targets="_;_;button-sym;button-my-maps"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>

		<frameinstance
			id="button-my-maps" pos="{{{Pos_ButtonMyTracks.X}}} {{{Pos_ButtonMyTracks.Y}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_PageMainMenu}}}"
			data-text="{{{C_ButtonNames[C_Index_MyTracks]}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{C_ButtonImagesPathList[C_Index_MyTracks]}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus=".0"
			data-textsize="5"
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-autonewline="1" data-maxline="2"
			data-valign="center" data-halign="center"
			data-tilthitbox="10"
			data-nav-inputs="select;cancel;right;up;down;left"
			data-nav-targets="_;_;button-club-track-reviews;button-rom;button-back;button-back"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>

		<frameinstance 
			id="button-sym" pos="{{{Pos_ButtonSYM.X}}} {{{Pos_ButtonSYM.Y}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_PageMainMenu}}}"
			data-text="{{{C_ButtonNames[C_Index_SYM]}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{C_ButtonImagesPathList[C_Index_SYM]}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus=".0"
			data-textsize="5"
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-autonewline="1" data-maxline="2"
			data-valign="center" data-halign="center"
			data-tilthitbox="10"
			data-nav-inputs="select;cancel;left;down"
			data-nav-targets="_;_;button-rom;button-club-track-reviews"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>

		<frameinstance
			id="button-club-track-reviews" pos="{{{Pos_ButtonClubTrackReviews.X}}} {{{Pos_ButtonClubTrackReviews.Y}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_PageMainMenu}}}"
			data-text="{{{C_ButtonNames[C_Index_ClubTrackReviews]}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{C_ButtonImagesPathList[C_Index_ClubTrackReviews]}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus=".0"
			data-textsize="5"
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-autonewline="1" data-maxline="2"
			data-valign="center" data-halign="center"
			data-tilthitbox="10"
			data-nav-inputs="select;cancel;left;up;down"
			data-nav-targets="_;_;button-my-maps;button-sym;button-back"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>

	<!-- Frame server review selection (TOTD or Royal) -->
	<frame id="frame-review-selection" hidden="1">
		<frameinstance 
			id="button-review-totd" pos="-48 0"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_PageReviewType}}}"
			data-text="{{{Text_TOTD}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{Const::C_ImageUrl_MapReview_TOTD}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus=".0"
			data-textsize="5"
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-valign="center" data-halign="center"
			data-tilthitbox="10"
			data-nav-inputs="select;cancel;left;right;down"
			data-nav-targets="_;_;button-back;button-review-royal;button-back"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>

		<frameinstance 
			id="button-review-royal" pos="50 0"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_PageReviewType}}}"
			data-text="{{{Text_Royal}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{Const::C_ImageUrl_MapReview_Royal}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus=".0"
			data-textsize="5"
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-valign="center" data-halign="center"
			data-tilthitbox="10"
			data-nav-inputs="select;cancel;left;down"
			data-nav-targets="_;_;button-review-totd;button-back"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>

	<!-- Frame track confirmation (to submit your own track) -->
	<frame id="frame-map-confirmation" hidden="1">
		<frameinstance
			id="frame-title" 
			pos="-123 54.5"
			z-index="1"
			modelid="{{{ExpendableButton::C_Name}}}"
			data-text="{{{Text_Title}}}"
			data-halign="left"
			data-styles="{{{ExpendableButton::C_Style_Tabs}}}"
			data-locked="1"
		/>

		<frame id="frame-map" pos="-91.5 6" >
			<frame pos="-30 27" z-index="4">
				<frameinstance id="control-block-list-track-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{Size_Thumbnail.X * 0.75}}} 10" data-valign="center2" data-textprefix="$t$i" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" data-textsize="5" data-textsize-fitlabel-min="3" data-textsize-fitlabel-step="0.25" data-filter-profanities="Always" />
				<label id="label-map-time" size="{{{Size_Thumbnail.X * 0.6}}} 10" pos="-1.5 -6" class="text-regular"/>
			</frame>
			<frameinstance id="control-block-list-track-thumbnail" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" z-index="1" data-size="{{{Size_Thumbnail.X}}} {{{Size_Thumbnail.Y}}}" data-alphamask="{{{Const::C_ImageUrl_Common_Track_Mask}}}" data-halign="center" data-valign="center" />
			<quad id="quad-overlay" z-index="2" size="{{{Size_Thumbnail.X}}} {{{Size_Thumbnail.Y}}}" image="{{{Const::C_ImageUrl_Common_Track_Gradient_Top}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" class="quad-default"/>
			<quad id="quad-contour" z-index="3" size="{{{Size_Thumbnail.X}}} {{{Size_Thumbnail.Y}}}" image="{{{Const::C_ImageUrl_Common_Track_Contour}}}" colorize="FFF" class="quad-default"/>
		</frame>

		<frame id="frame-server-infos" pos="15.5 31.5" halign="left" valign="center">
			{{{ML_ServerInfos}}}
		</frame>

		<frameinstance
			id="button-confirm" pos="-49.1 8.5" z-index="2"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_PageMapConfirmation}}}"
			data-text="{{{Text_Confirm}}}"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_PageNextAnimated}}}"
			data-halign="left"
			data-valign="center"
			data-nav-inputs="left;down;select;cancel"
			data-nav-targets="button-back;button-back;_;_"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			data-locked="1"
		/>
		<frameinstance id="frame-loading-spinner" pos="-44.5 -10.5" halign="left" modelid="{{{LoadingSpinner::C_Name}}}" data-label="{{{Text_AddMapToQueue}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" scale="0.7" z-index="2" />
		
		<label id="label-error" pos="5 -74" size="180 10" textcolor="{{{ColorPalette::C_Color_ErrorRed}}}" class="text-semi-bold" textprefix="$i" autonewline="1" maxline="2"/>
	</frame>

	<!-- Footer -->
	<frameinstance
		id="button-back" pos="-151.5 -73" z-index="1"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;up"
		data-nav-targets="_;_;button-my-maps"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "Libs/Nadeo/CommonLibs/Common/Privileges.Script.txt" as Privileges
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/Task.Script.txt" as Task
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/API/MapReviewAPI.Script.txt" as MapReviewAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo

#Const C_Page_Hidden -1
#Const C_Page_MainMenu 0
#Const C_Page_ReviewType 1
#Const C_Page_BrowseMap 2
#Const C_Page_MapConfirmation 3

#Const C_Class_PageMapConfirmation {{{dump(C_Class_PageMapConfirmation)}}}
#Const C_Class_PageReviewType {{{dump(C_Class_PageReviewType)}}}
#Const C_Class_PageMainMenu {{{dump(C_Class_PageMainMenu)}}}

#Const C_ImageUrls_PopularityLevel {{{dump(Const::C_ImageUrls_PopularityLevel)}}}

#Const C_Buttons_Default_Online ["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "{{{Const::C_NavInput_ClubWidget}}}" => "{{{Const::C_Text_ClubWidget}}}", "B" => _("Back")]
#Const C_Buttons_Default_Offline ["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "B" => _("Back")]

#Const C_ServerInfo_WaitingTime {{{dump(C_ServerInfo_WaitingTime)}}}
#Const C_ServerInfo_GameMode {{{dump(C_ServerInfo_GameMode)}}}

#Struct K_Controls {
	CMlFrame Frame_MainMenu;
	CMlFrame Frame_ReviewSelection;
	CMlFrame Frame_MapSelection;
	CMlFrame Frame_MapConfirmation;
	CMlFrame Button_Back;
	CMlFrame Button_Confirm;
	CMlFrame Button_ReviewTOTD;
	CMlFrame Button_MyMaps;
	CMlFrame Frame_LoadingSpinner;
	CMlLabel Label_Error;
	CMlLabel Label_WaitTime;
	CMlLabel Label_GameMode;
	CMlFrame Button_ROM;
}

#Struct K_PlayModePrivilegeCheck {
	Privileges::K_PrivilegeCheck PrivilegeCheck;
	Integer Page;
}

#Struct K_PlaySessionPrivilegeCheck {
	Privileges::K_PrivilegeCheck PrivilegeCheck;
	Text JoinLink;
}

#Struct K_State {
	Text MapReviewUid;
	Integer WaitTime;
	Integer CurrentPage;
	Task::K_Task Task_GetMap;
	Task::K_Task Task_RegisterMap;
	{{{CampaignStruct::P}}}K_Map CurrentMap;
	Http::K_Request GetConnectJoinLink;
	Http::K_Request GetWaitingTimeRequest;
	Http::K_Request PostAddMapQueueRequest;
	CMlFrame Last_MainButtonFocused;
	K_PlayModePrivilegeCheck PlayModePrivilegeCheck;
	K_PlaySessionPrivilegeCheck PlaySessionPrivilegeCheck;
}

""",
"""
Text GetMapReviewUid(Text _MapType) {
	switch (_MapType) {
		case "{{{Const::C_MapType_Race}}}": return MapReviewAPI::C_MapReviewUid_TOTD;
		case "{{{Const::C_MapType_Royal}}}": return MapReviewAPI::C_MapReviewUid_Royal;
	}
	return MapReviewAPI::C_MapReviewUid_TOTD;
}


K_State Focus(K_State _State, CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
			if (_To.HasClass(C_Class_PageMainMenu)) {
				State.Last_MainButtonFocused <=> (_To as CMlFrame);
			}
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}

	return State;
}

Void FocusAvailableControl(K_State _State, K_Controls _Controls) {
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");

	switch (_State.CurrentPage) {
		case C_Page_MapConfirmation: {
			if (
				FocusedControl == Null ||
				!FocusedControl.HasClass(C_Class_PageMapConfirmation) ||
				{{{Navigation::P}}}IsLocked(FocusedControl)
			) {
				Focus(_State, FocusedControl, _Controls.Button_Back);
			}
		}
		case C_Page_ReviewType: {
			if (
				FocusedControl == Null ||
				!FocusedControl.HasClass(C_Class_PageReviewType) ||
				{{{Navigation::P}}}IsLocked(FocusedControl)
			) {
				Focus(_State, FocusedControl, _Controls.Button_Back);
			}
		}
		case C_Page_MainMenu: {
			if (
				FocusedControl == Null ||
				!FocusedControl.HasClass(C_Class_PageMainMenu) ||
				{{{Navigation::P}}}IsLocked(FocusedControl)
			) {
				if (_State.Last_MainButtonFocused != Null) {
					Focus(_State, FocusedControl, _State.Last_MainButtonFocused);
				} else {
					Focus(_State, FocusedControl, _Controls.Button_ROM);
				}
			}
		}
	}
}

Void SetMapConfirmationPage(K_State _State, K_Controls _Controls) {
	if (_Controls.Frame_MapConfirmation == Null) return;

	declare CMlFrame ControlBlockList_TrackName <=> (_Controls.Frame_MapConfirmation.GetFirstChild("control-block-list-track-name") as CMlFrame);
	declare Label_MapTime <=> (_Controls.Frame_MapConfirmation.GetFirstChild("label-map-time") as CMlLabel);
	declare Label_MapType <=> (_Controls.Frame_MapConfirmation.GetFirstChild("label-map-type") as CMlLabel);
	declare CMlFrame ControlBlockList_TrackThumbnail <=> (_Controls.Frame_MapConfirmation.GetFirstChild("control-block-list-track-thumbnail") as CMlFrame);
	
	/* Update map preview */
	{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlBlockList_TrackName, _State.CurrentMap.AuthorLogin, _State.CurrentMap.Name);
	{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, ControlBlockList_TrackThumbnail, _State.CurrentMap.AuthorLogin, _State.CurrentMap.ThumbnailUrl);
	if (_State.CurrentMap.AuthorTime >= 0) {
		Label_MapTime.Value = TL::TimeToText(_State.CurrentMap.AuthorTime, True);
	} else {
		Label_MapTime.Value = "--:--.---";
	}
	switch (_State.CurrentMap.Type) {
		case "{{{Const::C_MapType_Race}}}": _Controls.Label_GameMode.SetText("{{{Text_TOTD}}}");
		case "{{{Const::C_MapType_Royal}}}": _Controls.Label_GameMode.SetText("{{{Text_Royal}}}");
		default: _Controls.Label_GameMode.SetText("");
	}
	
	/* Update Navigation controls and error label */
	{{{Navigation::P}}}Lock(_Controls.Button_Confirm, !_State.CurrentMap.IsPlayable);
	{{{Navigation::P}}}ChangeControlTargets(This, _Controls.Button_Back, ["up", "right"], [_Controls.Button_Confirm.ControlId, _Controls.Button_Confirm.ControlId]);
	if (_State.CurrentMap.IsPlayable) {
		Focus(_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_Confirm);
	} else {
		_Controls.Label_Error.SetText("{{{Text_NotPlayable}}}");
		Focus(_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_Back);
	}

}

Void DisplayBrowser(Boolean _IsVisible) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !_IsVisible);
	if (_IsVisible) {
		{{{TrackBrowser::P}}}ShowOnlyUserTracks(This, !Config::HasFeature(Config::C_Feature_DebugBrowserAllData));
		{{{TrackBrowser::P}}}SetMapTypeFilters(This, ["{{{Const::C_MapType_Race}}}", "{{{Const::C_MapType_Royal}}}"]);
	}
	{{{TrackBrowser::P}}}Display(This, _IsVisible, False);
	{{{Router::P}}}LockOverlay(This, "{{{RoutePaths::C_Path_OverlayName_ProfileWidget}}}", _IsVisible);
	{{{Router::P}}}LockOverlay(This, "{{{RoutePaths::C_Path_OverlayName_ClubWidget}}}", _IsVisible);
	if (!_IsVisible) {
		if ({{{UserStore::P}}}IsOfflineMode()) ControllerInfo::SetButtons(C_Buttons_Default_Offline);
		else ControllerInfo::SetButtons(C_Buttons_Default_Online);
	}
}

K_State DisplayPage(K_State _State, K_Controls _Controls, Integer _Page) {
	declare K_State State = _State;

	/* Release existing tasks */
	State.Task_RegisterMap = Task::Destroy(State.Task_RegisterMap);
	State.Task_GetMap = Task::Destroy(State.Task_GetMap);

	/* Update requests */
	if (Http::IsInitialized(State.GetWaitingTimeRequest)) {
		State.GetWaitingTimeRequest = Http::Destroy(State.GetWaitingTimeRequest);
	}
	if (Http::IsInitialized(State.GetConnectJoinLink)) {
		State.GetConnectJoinLink = Http::Destroy(State.GetConnectJoinLink);
	}
	if (Http::IsInitialized(State.PostAddMapQueueRequest)) {
		State.PostAddMapQueueRequest = Http::Destroy(State.PostAddMapQueueRequest);
	}

	if (_Page != State.CurrentPage) {

		/* Update the current page variable */
		State.CurrentPage = _Page;

		/* Display the current page and reset controls */
		_Controls.Label_Error.SetText("");
		_Controls.Frame_MainMenu.Visible = State.CurrentPage == C_Page_MainMenu;
		_Controls.Frame_ReviewSelection.Visible = State.CurrentPage == C_Page_ReviewType;
		_Controls.Frame_MapConfirmation.Visible = State.CurrentPage == C_Page_MapConfirmation;
		{{{LoadingSpinner::P}}}StopAnimWithFade(This, _Controls.Frame_LoadingSpinner);
		DisplayBrowser(State.CurrentPage == C_Page_BrowseMap);

		/* Set the current page */
		switch (State.CurrentPage) {
			case C_Page_MapConfirmation: SetMapConfirmationPage(State, _Controls);
			case C_Page_ReviewType: {
				Focus(_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_ReviewTOTD);
				{{{Navigation::P}}}ChangeControlTargets(This, _Controls.Button_Back, ["up", "right"], [_Controls.Button_ReviewTOTD.ControlId, _Controls.Button_ReviewTOTD.ControlId]);
			}
			case C_Page_MainMenu: {
				State.CurrentMap = {{{CampaignStruct::P}}}K_Map {};
				{{{Navigation::P}}}ChangeControlTargets(This, _Controls.Button_Back, ["up", "right"], [_Controls.Button_MyMaps.ControlId, _Controls.Button_MyMaps.ControlId]);
				FocusAvailableControl(State, _Controls);
			}
		}
	}

	return State;
}

K_State UpdateMaxWaitTimeLabels(K_State _State, Integer _WaitTime, CMlLabel _Label_WaitTime) {
	declare K_State State = _State;

	State.WaitTime = _WaitTime;
	if (State.WaitTime >= 0) {
		if (State.WaitTime <= 60) {
			_Label_WaitTime.SetText(TL::Compose("{{{Text_MinuteSingular}}}", ""^ML::Max(1, ML::CeilingInteger((State.WaitTime-1)/60.))));
		} else {
			_Label_WaitTime.SetText(TL::Compose("{{{Text_MinutePlural}}}", ""^ML::CeilingInteger((State.WaitTime-1)/60.)));
		}
	} else {
		_Label_WaitTime.SetText("-");
	}

	return State;
}

K_State Cancel(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;

	switch (State.CurrentPage) {
		case C_Page_ReviewType: State = DisplayPage(State, _Controls, C_Page_MainMenu);
		case C_Page_MapConfirmation: State = DisplayPage(State, _Controls, C_Page_BrowseMap);
		default: {{{Router::P}}}PushParent(This);
	}

	return State;
}

K_State Select(K_State _State, K_Controls _Controls, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;

	declare K_State State = _State;

	if (Task::IsInitialized(State.Task_RegisterMap)) {
		{{{LoadingSpinner::P}}}StopAnimWithFade(This, _Controls.Frame_LoadingSpinner);
		State.Task_RegisterMap = Task::Destroy(State.Task_RegisterMap);
	}
	if (Http::IsInitialized(State.PostAddMapQueueRequest)) {
		{{{LoadingSpinner::P}}}StopAnimWithFade(This, _Controls.Frame_LoadingSpinner);
		State.PostAddMapQueueRequest = Http::Destroy(State.PostAddMapQueueRequest);
	}
	if (Http::IsInitialized(State.GetConnectJoinLink)) {
		State.GetConnectJoinLink = Http::Destroy(State.GetConnectJoinLink);
	}

	_Controls.Label_Error.SetText("");
	switch (_Control.ControlId) {
		case "button-back": State = Cancel(State, _Controls);
		case "button-sym": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CreateAndUploadMap)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", ["{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_CreateAndUploadMap)]);
			} else {
				State.PlayModePrivilegeCheck = K_PlayModePrivilegeCheck {
					PrivilegeCheck = Privileges::Check_DestroyAndCreate(
						State.PlayModePrivilegeCheck.PrivilegeCheck,
						PrivilegeMgr,
						MainUser::GetMainUserId(),
						CPrivilegeMgr::EPrivilege::PlayMultiplayerModeWithUGC
					),
					Page = C_Page_BrowseMap
				};
			}
		}
		case "button-rom": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_AccessServerReview)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", ["{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_AccessServerReview)]);
			} else {
				State.PlayModePrivilegeCheck = K_PlayModePrivilegeCheck {
					PrivilegeCheck = Privileges::Check_DestroyAndCreate(
						State.PlayModePrivilegeCheck.PrivilegeCheck,
						PrivilegeMgr,
						MainUser::GetMainUserId(),
						CPrivilegeMgr::EPrivilege::PlayMultiplayerModeWithUGC
					),
					Page = C_Page_ReviewType
				};
			}
		}
		case "button-review-totd": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_AccessServerReview)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", ["{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_AccessServerReview)]);
			} else {
				State.GetConnectJoinLink = MapReviewAPI::GetConnect(MapReviewAPI::C_MapReviewUid_TOTD);
			}
		}
		case "button-review-royal": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_AccessServerReview)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", ["{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_AccessServerReview)]);
			} else {
				State.GetConnectJoinLink = MapReviewAPI::GetConnect(MapReviewAPI::C_MapReviewUid_Royal);
			}
		}
		case "button-confirm": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CreateAndUploadMap)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", ["{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_CreateAndUploadMap)]);
			} else {
				if (State.CurrentMap.IsPlayable) {
					if (State.CurrentMap.DownloadUrl == "") { //< Do not register map already registered
						State.Task_RegisterMap = Task::DestroyAndCreate(State.Task_RegisterMap, DataFileMgr, DataFileMgr.Map_NadeoServices_Register(MainUser::GetMainUserId(), State.CurrentMap.Uid));	
						{{{LoadingSpinner::P}}}StartAnimWithFade(This, _Controls.Frame_LoadingSpinner);
						{{{Navigation::P}}}Lock(_Controls.Button_Confirm, True);
						Focus(_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_Back);
					} else if (State.CurrentMap.SubmitterAccountId == LocalUser.WebServicesUserId) {
						State.PostAddMapQueueRequest = Http::DestroyAndCreate(State.PostAddMapQueueRequest, MapReviewAPI::PostAddMapQueue(GetMapReviewUid(State.CurrentMap.Type), State.CurrentMap.Uid));
						{{{LoadingSpinner::P}}}StartAnimWithFade(This, _Controls.Frame_LoadingSpinner);
						{{{Navigation::P}}}Lock(_Controls.Button_Confirm, True);
						Focus(_State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _Controls.Button_Back);
					} else {
						_Controls.Label_Error.SetText("{{{Text_NotPlayable}}}");
					}
				}
			}
		}
		case "button-my-maps": {
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_SubmittedMaps}}}");
		}
		case "button-club-track-reviews": {
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_LibraryClubTrackReviews}}}");
		}
	}
	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_WaitTime;
declare CMlFrame Frame_GameMode;
declare CMlFrame Frame_Title;

declare K_State State;
declare K_Controls Controls;
declare Boolean EntryWasFocused;
declare Text MapIdToCheck;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_WaitTime <=> (Frame_Global.GetFirstChild("frame-server-info-"^C_ServerInfo_WaitingTime) as CMlFrame);
Frame_GameMode <=> (Frame_Global.GetFirstChild("frame-server-info-"^C_ServerInfo_GameMode) as CMlFrame);
Frame_Title <=> (Frame_Global.GetFirstChild("frame-title") as CMlFrame);

Controls = K_Controls {
	Frame_MainMenu = (Frame_Global.GetFirstChild("frame-main-menu") as CMlFrame),
	Frame_ReviewSelection = (Frame_Global.GetFirstChild("frame-review-selection") as CMlFrame),
	Frame_MapConfirmation = (Frame_Global.GetFirstChild("frame-map-confirmation") as CMlFrame),
	Frame_LoadingSpinner = (Frame_Global.GetFirstChild("frame-loading-spinner") as CMlFrame),
	Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
	Button_Confirm = (Frame_Global.GetFirstChild("button-confirm") as CMlFrame),
	Button_ReviewTOTD = (Frame_Global.GetFirstChild("button-review-totd") as CMlFrame),
	Button_MyMaps = (Frame_Global.GetFirstChild("button-my-maps") as CMlFrame),
	Label_Error = (Frame_Global.GetFirstChild("label-error") as CMlLabel),
	Label_WaitTime = (Frame_WaitTime.GetFirstChild("label-server-info-value") as CMlLabel),
	Label_GameMode = (Frame_GameMode.GetFirstChild("label-server-info-value") as CMlLabel),
	Button_ROM = (Frame_Global.GetFirstChild("button-rom") as CMlFrame)
};

State = K_State {
	WaitTime = -1,
	CurrentPage = C_Page_MainMenu,
	CurrentMap = {{{CampaignStruct::P}}}K_Map {},
	GetConnectJoinLink = Http::GetEmptyRequest(),
	GetWaitingTimeRequest = Http::GetEmptyRequest(),
	PostAddMapQueueRequest = Http::GetEmptyRequest()
};

// Init navigation
FocusAvailableControl(State, Controls);

{{{ExpendableButton::P}}}Focus(This, Frame_Title, True);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_ServerReview}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_EnteringRoute: {
				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);
				
				if (Query.existskey("{{{RoutePaths::C_Query_Map}}}")) {
					State.CurrentMap.fromjson(Query["{{{RoutePaths::C_Query_Map}}}"]);
					State.PlayModePrivilegeCheck = K_PlayModePrivilegeCheck {
						PrivilegeCheck = Privileges::Check_DestroyAndCreate(
							State.PlayModePrivilegeCheck.PrivilegeCheck,
							PrivilegeMgr,
							MainUser::GetMainUserId(),
							CPrivilegeMgr::EPrivilege::PlayMultiplayerModeWithUGC
						),
						Page = C_Page_MapConfirmation
					};
				} else {
					State = DisplayPage(State, Controls, C_Page_MainMenu);
				}
				
				if ({{{UserStore::P}}}IsOfflineMode()) ControllerInfo::SetButtons(C_Buttons_Default_Offline);
				else ControllerInfo::SetButtons(C_Buttons_Default_Online);
			}
		}
	}

	/* Waiting time request */
	if (Http::IsInitialized(State.GetWaitingTimeRequest)) {
		State.GetWaitingTimeRequest = Http::Update(State.GetWaitingTimeRequest);
		if (!Http::IsRunning(State.GetWaitingTimeRequest)) {
			if (Http::IsSuccess(State.GetWaitingTimeRequest)) {
				declare Integer WaitTimeSeconds = MapReviewAPI::GetResponseFromGetWaitingTime(State.GetWaitingTimeRequest);
				State = UpdateMaxWaitTimeLabels(State, WaitTimeSeconds, Controls.Label_WaitTime);
			}
			State.GetWaitingTimeRequest = Http::Destroy(State.GetWaitingTimeRequest);
			State.MapReviewUid = "";
		}
	}

	/* Get joinlink request */
	if (Http::IsInitialized(State.GetConnectJoinLink)) {
		State.GetConnectJoinLink = Http::Update(State.GetConnectJoinLink);
		if (!Http::IsRunning(State.GetConnectJoinLink)) {
			if (Http::IsSuccess(State.GetConnectJoinLink)) {
				SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", ["{{{Text_Title}}}"]);
				declare Text JoinLink = MapReviewAPI::GetResponseFromGetConnect(State.GetConnectJoinLink).JoinLink;
				if (JoinLink != "") {
					State.PlaySessionPrivilegeCheck = K_PlaySessionPrivilegeCheck {
						PrivilegeCheck = Privileges::Check_DestroyAndCreate(
							State.PlaySessionPrivilegeCheck.PrivilegeCheck,
							PrivilegeMgr,
							MainUser::GetMainUserId(),
							CPrivilegeMgr::EPrivilege::PlayMultiplayerSessionWithUGC
						),
						JoinLink = JoinLink
					};
				} else {
					//L16N [Online] Message displayed when there is no joinlink to join a server.
					Controls.Label_Error.SetText(_("Servers are offline or in maintenance, please try again later."));
				}
			} else {
				//L16N Error displayed when there is an error while getting the server join link with a HTTP request. %1 will be replace with a code e.g. "Error code: 500"
				Controls.Label_Error.SetText(TL::Compose(_("Error while fetching the server join link, please try again. (Error code: %1)"), ""^Http::GetStatusCode(State.GetConnectJoinLink)));
			}
			State.GetConnectJoinLink = Http::Destroy(State.GetConnectJoinLink);
		}
	}

	/* Register map task */
	if (Task::IsInitialized(State.Task_RegisterMap)) {
		State.Task_RegisterMap = Task::Update(State.Task_RegisterMap);
		if (!Task::IsRunning(State.Task_RegisterMap)) {
			declare CTaskResult_NSMap SourceTask = Task::GetSourceTask_NSMap(State.Task_RegisterMap);
			if (Task::IsSuccess(State.Task_RegisterMap) && SourceTask != Null) {
				MapIdToCheck = SourceTask.Map.Id;
				State.Task_GetMap = Task::DestroyAndCreate(State.Task_GetMap, DataFileMgr, DataFileMgr.Map_NadeoServices_Get(MainUser::GetMainUserId(), MapIdToCheck));
			} else {
				Controls.Label_Error.SetText(TL::Compose("{{{Text_UploadError}}}", Task::GetSourceTaskError(State.Task_RegisterMap).Code));
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.Frame_LoadingSpinner);
				{{{Navigation::P}}}Lock(Controls.Button_Confirm, False);
			}
			State.Task_RegisterMap = Task::Destroy(State.Task_RegisterMap);
		}
	}

	/* Get map task */
	if (Task::IsInitialized(State.Task_GetMap)) {
		State.Task_GetMap = Task::Update(State.Task_GetMap);
		if (!Task::IsRunning(State.Task_GetMap)) {
			declare CTaskResult_NSMap SourceTask = Task::GetSourceTask_NSMap(State.Task_GetMap);
			if (Task::IsSuccess(State.Task_GetMap) && SourceTask != Null && MapIdToCheck == SourceTask.Map.Id) {
				State.PostAddMapQueueRequest = Http::DestroyAndCreate(State.PostAddMapQueueRequest, MapReviewAPI::PostAddMapQueue(GetMapReviewUid(State.CurrentMap.Type), SourceTask.Map.Uid));
			} else {
				Controls.Label_Error.SetText(TL::Compose("{{{Text_UploadError}}}", Task::GetSourceTaskError(State.Task_GetMap).Code));
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.Frame_LoadingSpinner);
				{{{Navigation::P}}}Lock(Controls.Button_Confirm, False);
			}
			State.Task_GetMap = Task::Destroy(State.Task_GetMap);
		}
	}

	/* Add map to the review queue */
	if (Http::IsInitialized(State.PostAddMapQueueRequest)) {
		State.PostAddMapQueueRequest = Http::Update(State.PostAddMapQueueRequest);
		if (!Http::IsRunning(State.PostAddMapQueueRequest)) {
			if (Http::IsSuccess(State.PostAddMapQueueRequest)) {
				SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", ["{{{Text_Title}}}"]);
				declare MapReviewAPI::K_JoinLink JoinLinkStruct = MapReviewAPI::GetResponseFromPostAddMapQueue(State.PostAddMapQueueRequest);
				if (JoinLinkStruct.SubmissionWaitTimer > 0) {
					declare Integer WaitTime = ML::Max(1, ML::CeilingInteger((JoinLinkStruct.SubmissionWaitTimer-1)/60.));
					declare Text Text_Minute = "{{{Text_MinutePlural_Short}}}";
					if (WaitTime <= 1) Text_Minute = "{{{Text_MinuteSingular_Short}}}";
					//L16N [ServerReview] Message displayed when the player cannot upload a track due to submission limitation. %1 will be replaced by a number and %2 by a time unit. eg: "The track submission limitation is enabled. Next upload available in 5 minutes."
					Controls.Label_Error.SetText(TL::Compose(_("The track submission limitation is enabled. Next upload available in %1 %2."), TL::ToText(WaitTime), Text_Minute));
				} else if (JoinLinkStruct.JoinLink != "") {
					State.PlaySessionPrivilegeCheck = K_PlaySessionPrivilegeCheck {
						PrivilegeCheck = Privileges::Check_DestroyAndCreate(
							State.PlaySessionPrivilegeCheck.PrivilegeCheck,
							PrivilegeMgr,
							MainUser::GetMainUserId(),
							CPrivilegeMgr::EPrivilege::PlayMultiplayerSessionWithUGC
						),
						JoinLink = JoinLinkStruct.JoinLink
					};
				} else {
					//L16N [Online] Message displayed when there is no joinlink to join a server.
					Controls.Label_Error.SetText(_("Servers are offline or in maintenance, please try again later."));
				}
			} else {
				//L16N [MapReview] Message displayed when the player's track can't be added to the track review queue. e.g. "Error while adding your track to the queue, please try again. (Error code: 37569)"
				Controls.Label_Error.SetText(TL::Compose(_("Error while adding your track to the queue, please try again. (Error code: %1)"), ""^Http::GetStatusCode(State.PostAddMapQueueRequest)));
			}
			{{{Navigation::P}}}Lock(Controls.Button_Confirm, False);
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, Controls.Frame_LoadingSpinner);
			State.PostAddMapQueueRequest = Http::Destroy(State.PostAddMapQueueRequest);
			State.MapReviewUid = "";
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}") && State.CurrentPage != C_Page_BrowseMap) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Controls, Event.To);
						case CMlScriptEvent::EMenuNavAction::Cancel: State = Cancel(State, Controls);
						default: {
							if (Event.To != Null) {
								State = Focus(State, Event.From, Event.To);
							} else {
								FocusAvailableControl(State, Controls);
							}
						}
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(State, Controls, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						State = Focus(State, Event.From, Event.To);
					}
				}
			}
		}
	}
	
	/* Browser events */
	foreach (Event in {{{TrackBrowser::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TrackBrowser::P}}}C_Event_Select: {
				State.CurrentMap = Event.Track;
				State = DisplayPage(State, Controls, C_Page_MapConfirmation);
				State.GetWaitingTimeRequest = MapReviewAPI::GetWaitingTime(GetMapReviewUid(State.CurrentMap.Type));
			}
			case {{{TrackBrowser::P}}}C_Event_Exit: {
				State = DisplayPage(State, Controls, C_Page_MainMenu);
			}
		}
	}

	// Check play mode privilege
	if (!Privileges::Check_IsComplete(State.PlayModePrivilegeCheck.PrivilegeCheck)) {
		State.PlayModePrivilegeCheck.PrivilegeCheck = Privileges::Check_Update(State.PlayModePrivilegeCheck.PrivilegeCheck);
		if (Privileges::Check_IsComplete(State.PlayModePrivilegeCheck.PrivilegeCheck)) {
			State.PlayModePrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlayModePrivilegeCheck.PrivilegeCheck);
			if (Privileges::Check_HasPrivilege(State.PlayModePrivilegeCheck.PrivilegeCheck)) {
				State = DisplayPage(State, Controls, State.PlayModePrivilegeCheck.Page);
				if (State.PlayModePrivilegeCheck.Page == C_Page_MapConfirmation) {
					State.GetWaitingTimeRequest = MapReviewAPI::GetWaitingTime(GetMapReviewUid(State.CurrentMap.Type));
				}
			}
		}
	}

	// Check play session privilege
	if (!Privileges::Check_IsComplete(State.PlaySessionPrivilegeCheck.PrivilegeCheck)) {
		State.PlaySessionPrivilegeCheck.PrivilegeCheck = Privileges::Check_Update(State.PlaySessionPrivilegeCheck.PrivilegeCheck);
		if (Privileges::Check_IsComplete(State.PlaySessionPrivilegeCheck.PrivilegeCheck)) {
			State.PlaySessionPrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlaySessionPrivilegeCheck.PrivilegeCheck);
			if (Privileges::Check_HasPrivilege(State.PlaySessionPrivilegeCheck.PrivilegeCheck)) {
				TitleControl::OpenLinkAndWait(This, TitleControl, State.PlaySessionPrivilegeCheck.JoinLink, CMlScript::LinkType::ManialinkBrowser);
			}
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_LeavingRoute: {
				State.CurrentPage = C_Page_Hidden;
				State.PlayModePrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlayModePrivilegeCheck.PrivilegeCheck);
				State.PlaySessionPrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlaySessionPrivilegeCheck.PrivilegeCheck);
			}
		}
	}
}
***
""",
[
	TrackBrowser::ComponentV2(),
	Button::ComponentV2(),
	ExpendableButton::ComponentV2(),
	CampaignStruct::Component(),
	LoadingSpinner::ComponentV2(),
	Navigation::ComponentV2(),
	Router::ComponentV2(),
	Transition::ComponentV2(),
	UserStore::ComponentV2(),
	ControlBlockList::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}