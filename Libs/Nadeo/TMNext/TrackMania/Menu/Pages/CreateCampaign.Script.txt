/** 
 *	Page: Create Campaign
 */
#Const Version		"2023-06-09"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/CreateCampaign.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CommonLibs/Common/EnvironmentInfo.Script.txt" as EnvironmentInfo
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/MenuLibs/Common/Components/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/API/BrowserAPI.Script.txt" as BrowserAPI
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Checkbox.Script.txt" as Checkbox
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/MapRankings.Script.txt" as MapRankings
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpClubThemes.Script.txt" as PopUpClubThemes
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/TrackBrowser.Script.txt" as TrackBrowser
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "TextLib" as TL
#Include "MathLib" as ML

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_CreateCampaign"
#Const C_NavGroup_Default "navgroup-create-campaign-default"
#Const C_Class_MapButton "class-button-map-page-create-campaign"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

#Const C_ColumnNumber 5
#Const C_RowNumber 5

#Const C_Choice_Edit 0
#Const C_Choice_Move 1
#Const C_Choice_Replace 2
#Const C_Choice_Delete 3
#Const C_Choices_SelectedMap [
	//L16N [Create Campaign] Edit an existing track
	0 => _("|Map|Edit"),
	//L16N [Create Campaign] Change the track position in the campaign
	1 => _("|Map|Move"),
	//L16N [Create Campaign] Open the track browser to replace the selected track 
	2 => _("|Map|Replace"),
	//L16N [Create Campaign] Delete the track from the campaign
	3 => _("|Map|Delete")
]

#Const C_Choice_Exit 0
#Const C_Choice_Save 1
#Const C_Choices_SaveCampaign [
	//L16N [Create Campaign] Exit the campaign creation
	0 => _("|Activity|Exit"),
	//L16N [Create Campaign] Save the current campaign
	1 => _("|Activity|Save")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_Back = _("Back");
	//L16N [Create Campaign] Indicates to the player that they can swap the focused track with the previously selected track.
	declare Text Text_SwapMap = _("Swap track");
	//L16N [Create Campaign] Indicates to the player that they can select an other track to swap with the previously selected track. %1 will be replaced by the name of the previously selected track. e.g. "Select a track to swap with 'Awesome track'"
	declare Text Text_SelectToSwapMap = _("Select a track to swap with '$<%1$>'");
	//L16N [Create Campaign] Indicates to the player that they can cancel the track swapping.
	declare Text Text_AbortSwapMap = _("Abort swap");
	//L16N [Create Campaign] Loading the campaign to edit.
	declare Text Text_RetrievingCampaign = _("Retrieving campaign's data");
	//L16N [Create Campaign] Text displayed when creating a club campaign.
	declare Text Text_CreatingCampaign = _("Creating campaign...");
	//L16N [Create Campaign] Title of the pop-up asking for saving the campaign.
	declare Text Text_SaveCampaign = _("Save campaign");
	//L16N [Create Campaign] Text displayed when saving the current club campaign.
	declare Text Text_SavingCampaign = _("Saving campaign...");
	//L16N [Create Campaign] Text for the Public/Private campaign switch.
	declare Text Text_Public = _("|Privacy|Public");
	//L16N [Create Campaign] Text for the Public/Private campaign switch.
	declare Text Text_Private = _("|Privacy|Private");
	//L16N [Create Campaign] Title of the room privacy toggle.
	declare Text Text_PrivacyTitle = _("|Privacy|Privacy");
	//L16N [Create Campaign] Description of the room privacy toggle.
	declare Text Text_PrivacyDescription = _("|Privacy|Only club members can access a private activity");	
	//L16N [Create Campaign] Default placeholder for the campaign name text field.
	declare Text Text_Name = _("Campaign name");
	//L16N [Create Campaign] Title of the page to create a campaign
	declare Text Text_CreateCampaign = _("Create campaign");
	//L16N [Create Campaign] Title of the page to edit a campaign
	declare Text Text_EditCampaign = _("Edit campaign");
	//L16N [Create Campaign] Button to confirm the creation of the campaign
	declare Text Text_Create = _("Create");
	//L16N [Create Campaign] Button to confirm the edition of the campaign
	declare Text Text_Save = _("Save");
	//L16N [Create Campaign] Text displayed to indicate to the player that they can add tracks to the campaign.
	declare Text Text_AddTracks = _("Add tracks to your campaign");
	//L16N [Create Campaign] Text displayed to indicate to the player that the selected track is already existing in the track list.
	declare Text Text_ExistingTrack = _("The track '$<%1$>' is already in the track list and has not been added");
	//L16N [Create Campaign] Text displayed to indicate to the player that the selected tracks are already existing in the track list.
	declare Text Text_ExistingTracks = _("%1 tracks are already in the track list and have not been added");
	//L16N [Create Campaign] Error message displayed when the player tries to create a campaign without the requirements.
	declare Text Text_NoTracks = _("You need at least one track and a name to create a campaign");
	//L16N [Create Campaign] Error message displayed when the number of character for the campaign name exceeds the maximum authorised. %1 will be replaced by a number, e.g. "The campaign name must not exceed 20 characters"
	declare Text Text_NameLimit = _("The campaign name must not exceed %1 characters");
	//L16N [Create Campaign] Error message displayed when the number of track for the campaign exceeds the maximum authorized.
	declare Text Text_MapLimit = _("A campaign cannot have more than 25 tracks");
	//L16N [Create Campaign] The player cannot edit a track created with the mouse/keyboard editor on console
	declare Text Text_MapEditionGamepad = _("Track edition impossible: you can only edit tracks created with the gamepad editor");
	if (Platform::IsSony(System)) {
		//L16N [Create Campaign] The player cannot edit a track created with the mouse/keyboard editor on console
		Text_MapEditionGamepad = _("Track edition impossible: you can only edit tracks created with the track editor using a controller");
	}
	//L16N [Create Campaign] Message displayed if an error occurs while the retrieving the campaign. %1 will be replaced by an error code. e.g. "Error while retrieving the campaign. Please try again. (Error code: 500)"
	declare Text Text_ErrorCampaignCreation = _("Error while retrieving the campaign. Please try again. (Error code: %1)");
	//L16N [Create Campaign] Error displayed when there is an error while getting data with a HTTP request. %1 will be replace with a code e.g. "Error while gathering tracks data. (Error code: %1)"
	declare Text Text_MapListError = _("Error while gathering tracks data. (Error code: %1)");
	//L16N [Create Campaign] %1 will be replaced by the name of the author of the track, e.g. "by Darrek"
	declare Text Text_AuthorName = _("By %1");
	//L16N [Create Campaign] Text pronounced when the player is focusing the button to choose a logo for the campaign.
	declare Text TTS_ChooseLogo = _("Choose a logo for your campaign");
	// Description of the save campaign pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_SaveCampaign = [
		//L16N [Create Campaign] Text displayed in the password pop-up to indicate that this room is portected with a password.
		PopUpMultiChoice::CreateDescriptionPart(_("Are you sure you want to exit the campaign creation?"), <140., 20.>, 3., FontManager::C_GameFontSemiBold, "$t$i", <1., 1., 1.>, False),
		//L16N [Create Campaign] Text displayed in the password pop-up to indicate that this room is portected with a password.
		PopUpMultiChoice::CreateDescriptionPart(_("You can save it as an archived activity"), <140., 5.>, 3., FontManager::C_GameFontSemiBold, "$t$i", ColorPalette::C_Color_Vec3_GreenOne, False)
	];

	/* Variables */
	declare Vec2 Size_Logo = MLHelpers::KeepRatioFromY(608., 272., 21.);
	declare Vec2 Size_TextField = <60., 9.>;

	/* Map grid */
	declare Vec2 Size_Spacing = <0.5, 2.>;
	declare Vec2 Size_MapButton = <35.5, 9.5>;
	declare Vec2 Size_Category = MLHelpers::KeepRatioFromY(320., 20., 2.13);
	declare GridConfig_Column = Grid::Create(Size_MapButton.X*C_ColumnNumber + Size_Spacing.X*(C_ColumnNumber-1), 0., Size_Spacing.X, Grid::C_Direction_Right);
	declare GridConfig_Row = Grid::Create(Size_MapButton.Y*C_RowNumber + Size_Spacing.Y*(C_RowNumber-1), 0., Size_Spacing.Y, Grid::C_Direction_Bottom);
	for (ColumnIndex, 0, C_ColumnNumber-1) GridConfig_Column = Grid::AddColumn(GridConfig_Column, ColumnIndex, 100., Grid::C_Align_Center);
	for (RowIndex, 0, C_RowNumber-1) GridConfig_Row = Grid::AddRow(GridConfig_Row, RowIndex, 100., Grid::C_Align_Center);
	declare Grid_Column = Grid::Compile(GridConfig_Column);
	declare Grid_Row = Grid::Compile(GridConfig_Row);

	declare Text ML_Maps = "";
	for (ColumnIndex, 0, C_ColumnNumber-1) {
		for (RowIndex, 0, C_RowNumber-1) {
			declare Text UpTarget = "button-map-"^ML::Clamp(ColumnIndex, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex-1, 0, C_RowNumber-1);
			declare Text DownTarget = "button-map-"^ML::Clamp(ColumnIndex, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex+1, 0, C_RowNumber-1);
			declare Text LeftTarget = "button-map-"^ML::Clamp(ColumnIndex-1, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex, 0, C_RowNumber-1);
			declare Text RightTarget = "button-map-"^ML::Clamp(ColumnIndex+1, 0, C_ColumnNumber-1)^"-"^ML::Clamp(RowIndex, 0, C_RowNumber-1);
			if (RowIndex == 0) UpTarget = "button-logo";
			if (RowIndex == C_ColumnNumber-1) DownTarget = "button-back";
			
			ML_Maps ^= """
				<frameinstance
					id="button-map-{{{ColumnIndex}}}-{{{RowIndex}}}" z-index="1"
					pos="{{{MLHelpers::Skew(Grid_Column.Pos[ColumnIndex], Grid_Row.Pos[RowIndex], 10.)}}}"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}} {{{C_Class_MapButton}}}"
					data-text="{{{TL::FormatInteger(C_RowNumber*ColumnIndex + (RowIndex+1), 2)}}}"
					data-height="{{{Grid_Row.Size[RowIndex]}}}" data-width="{{{Grid_Column.Size[ColumnIndex]}}}" 
					data-nav-inputs="select;cancel;up;down;left;right;appmenu"
					data-nav-targets="_;_;{{{UpTarget}}};{{{DownTarget}}};{{{LeftTarget}}};{{{RightTarget}}};_"
					data-nav-group="{{{C_NavGroup_Default}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
				/>
			""";
		}
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Page -->
<frameinstance id="frame-browser" modelid="{{{BrowserAPI::C_Name}}}" z-index="{{{Const::C_ZIndex_BrowserAPI}}}" hidden="1" />
<frameinstance id="frame-track-browser" modelid="{{{TrackBrowser::C_Name}}}" z-index="{{{Const::C_ZIndex_BrowserAPI}}}" data-opening-tab="{{{TrackBrowser::C_TabIndex_MyTracks}}}" data-show-only-playable="1"/>
<frameinstance id="loadingspinner-create-or-edit-campaign" modelid="{{{LoadingSpinner::C_Name}}}" data-dimmer="true" data-opacity="0." z-index="{{{Const::C_ZIndex_Loading}}}"/>

<!-- Frame global -->
<frame id="frame-global" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" z-index="-1"/>
	<frameinstance id="loadingspinner-retrieve-info" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-120., 20., 10.)}}}" data-label="{{{Text_RetrievingCampaign}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" data-opacity="0." data-size="10 10" scale="0.7" z-index="2"/>	
	<frameinstance id="popupmultichoice-save" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_SaveCampaign}}}" data-choices="{{{TL::MLEncode(C_Choices_SaveCampaign.tojson())}}}" data-description="{{{TL::MLEncode(Description_SaveCampaign.tojson())}}}" data-close-after-selection="false" z-index="4" hidden="1"/>
	<frameinstance id="popupmultichoice-track" modelid="{{{PopUpMultiChoice::C_Name}}}" data-choices="{{{TL::MLEncode(C_Choices_SelectedMap.tojson())}}}" z-index="4" hidden="1"/>
	<frameinstance id="popupclubthemes-icon" modelid="{{{PopUpClubThemes::C_Name}}}" z-index="4"/>
	<frameinstance id="button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
	<frameinstance id="button-icon-create" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" data-halign="left" data-size="8 8" data-bind="appmenu" data-hideformouse="1" />

	<!-- Pop-up header -->
	<label id="label-title" pos="{{{MLHelpers::Skew(-126.5, 61.5, 10.)}}}" size="150 20" class="text-extrabold" text="{{{Text_CreateCampaign}}}" textsize="13" halign="left" z-index="1"/>
	<frameinstance 
		id="button-logo" pos="{{{MLHelpers::Skew(-103., 41.2, 10.)}}}"
		modelid="{{{Button::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-size="{{{Size_Logo.X}}} {{{Size_Logo.Y}}}"
		data-opacityunfocus=".6"
		data-tts-text="{{{TTS_ChooseLogo}}}"
		data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}"
		data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}"
		data-focuscolor="{{{ColorPalette::C_Color_GreenFour}}}"
		data-iconcolor="{{{ColorPalette::C_Color_GreenOne}}}"
		data-iconfocuscolor="{{{ColorPalette::C_Color_White}}}"
		data-iconsize="13 13"
		data-bgkeepratio="clip"
		data-contouropacityunfocus=".0"
		data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
		data-contourimage="{{{Const::C_ImageUrl_ClubActivity_Contour}}}"
		data-halign="center" data-valign="center"
		data-nav-inputs="select;cancel;down;right;appmenu"
		data-nav-targets="_;_;button-map-0-0;textfield-name;_"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
	/>
	<frameinstance 
		id="textfield-name" pos="{{{MLHelpers::Skew(-80., 47., 10.)}}}"
		modelid="{{{TextField::C_Name}}}" 
		class="{{{Navigation::C_Class}}}"
		data-size="{{{Size_TextField.X}}} {{{Size_TextField.Y}}}"
		data-placeholder="{{{Text_Name}}}"
		data-bgopacityunfocus="0.4"
		data-bgcolorfocus="{{{ColorPalette::C_Color_GreenFour}}}"
		data-bgcolorunfocus="{{{ColorPalette::C_Color_GreenFour}}}"
		data-contourcolorfocus="{{{ColorPalette::C_Color_GreenOne}}}"
		data-contouropacityunfocus=".0"
		data-contouropacityfocus="1."
		data-textsize="3."
		data-textcolorunfocus="{{{ColorPalette::C_Color_GreenOne}}}"
		data-halign="left" data-valign="center"
		data-nav-inputs="select;cancel;left;down;appmenu"
		data-nav-targets="_;_;button-logo;checkbox-private;_"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{TextField::C_NavZone}}}"
	/>
	<frameinstance
		id="checkbox-private" pos="{{{MLHelpers::Skew(-77., 37.6, 10.)}}}"
		modelid="{{{Checkbox::C_Name}}}" 
		class="{{{Navigation::C_Class}}}"
		data-labelsize="{{{Size_TextField.X/2. - 8.}}} 8"
		data-text="{{{Text_Private}}}"
		data-textmirror="{{{Text_Public}}}"
		data-textxpos="0.73"
		data-texthalign="left"
		data-textitalicslope=".2"
		data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
		data-textcolor="{{{ColorPalette::C_Color_White}}}"
		data-textfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
		data-textsize="2."
		data-fitlabel="1"
		data-opacityunfocus="0.6"
		data-iconsize="8 8"
		data-iconxpos="0.5"	data-iconypos="0.55"
		data-iconcolor="{{{ColorPalette::C_Color_White}}}"
		data-iconfocuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
		data-iconchecked="{{{Const::C_ImageUrl_Icon_SwitchOn}}}"
		data-iconunchecked="{{{Const::C_ImageUrl_Icon_SwitchOff}}}"
		data-halign="left" data-valign="center"
		data-nav-inputs="select;cancel;left;up;down;appmenu"
		data-nav-targets="_;_;button-logo;textfield-name;button-map-0-0;_"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{Checkbox::C_NavZone}}}"
	/>

	<!-- Body -->
	<frameinstance id="frame-map-rankings" modelid="{{{MapRankings::C_Name}}}" pos="105 -25" z-index="3"/>
	<label id="label-info" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-semibold" textsize="2.5" halign="left"/>
	<label id="label-choose" pos="{{{MLHelpers::Skew(-125., 11., 10.)}}}" size="180 10" class="text-extrabold" text="{{{Text_AddTracks}}}" textsize="4" halign="left"/>
	<label id="label-info-title" pos="{{{MLHelpers::Skew(-9., -65.5, 10.)}}}" size="110 10" class="text-extrabold" text="{{{Text_PrivacyTitle}}}" textsize="3." textcolor="{{{ColorPalette::C_Color_GreenOne}}}" opacity="0." valign="bottom"/>
	<label id="label-info-description" pos="{{{MLHelpers::Skew(-9., -65.5, 10.)}}}" size="110 30" class="text-semibold" text="{{{Text_PrivacyDescription}}}" textsize="2." opacity="0." valign="top" autonewline="1" maxline="2"/>
	<frame id="frame-maps" pos="{{{MLHelpers::Skew(-144., 7.5, 10.)}}}">
		{{{ML_Maps}}}
	</frame>

	<!-- Bottom buttons -->
	<frameinstance
		id="button-back" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-max-width="60."
		data-text="{{{Text_Back}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-halign="left" data-valign="center"
		data-nav-inputs="select;cancel;up;right;appmenu"
		data-nav-targets="_;_;button-map-0-0;button-create;_"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance
		id="button-create" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_Create}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-halign="right" data-valign="center"
		data-nav-inputs="select;cancel;up;left;appmenu"
		data-nav-targets="_;_;button-map-0-0;button-back;_"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/Task.Script.txt" as Task
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/TMNext/TrackMania/Share.Script.txt" as Share
#Include "Libs/Nadeo/TMNext/TrackMania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo

#Const C_Name_MaxChar 20
#Const C_Choice_Edit {{{dump(C_Choice_Edit)}}}
#Const C_Choice_Move {{{dump(C_Choice_Move)}}}
#Const C_Choice_Replace {{{dump(C_Choice_Replace)}}}
#Const C_Choice_Delete {{{dump(C_Choice_Delete)}}}
#Const C_Choice_Exit {{{dump(C_Choice_Exit)}}}
#Const C_Choice_Save {{{dump(C_Choice_Save)}}}

#Const C_Difficulty_Simple 0
#Const C_Difficulty_Advanced 1
#Const C_Difficulty_Expert 2

#Struct K_Controls {
	CMlFrame Button_Back;
	CMlFrame Button_Create;
	CMlFrame Button_DefaultMap;
	CMlFrame Button_Logo;
	CMlFrame Button_MapToMove;
	CMlFrame Button_SelectedMap;
	CMlFrame Checkbox_Private;
	CMlFrame Frame_Browser;
	CMlFrame Frame_Global;
	CMlFrame Frame_MapRankings;
	CMlFrame Frame_Maps;
	CMlFrame Frame_PopUpBackground;
	CMlFrame LoadingSpinner_CreateOrEditCampaign;
	CMlFrame LoadingSpinner_RetrieveInfo;
	CMlFrame PopUpClubThemes_Icon;
	CMlFrame PopUpMultiChoice_SaveCampaign;
	CMlFrame PopUpMultiChoice_Tracks;
	CMlFrame TextField_Name;
	CMlLabel Label_Choose;
	CMlLabel Label_Info;
	CMlLabel Label_InfoDescription;
	CMlLabel Label_InfoTitle;
	CMlLabel Label_Title;
}

#Struct K_State {
	Boolean IsActivityActivationNeeded;
	Boolean IsEditingCampaign;
	CMlControl FocusedMap;
	K_Controls Controls;
	{{{CampaignStruct::P}}}K_Map[Text] MapList;
	{{{CampaignStruct::P}}}K_Campaign Campaign;
}
""",
"""
// Display the track browser 
Void ShowTrackBrowser(K_State _State, Boolean _IsMultiSelectEnabled) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", False);
	{{{TrackBrowser::P}}}SetMultiSelect(This, _IsMultiSelectEnabled);
	{{{TrackBrowser::P}}}Display(This, True);
}

// Update controller hints at the bottom of the screen
Void UpdateControllerInfo(K_State _State) {
	declare Text[Text] ControllerInfos = [];
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
	declare {{{CampaignStruct::P}}}K_Map MapData for FocusedControl;

	if (_State.Controls.Button_MapToMove == Null || !FocusedControl.HasClass("{{{C_Class_MapButton}}}")) {
		ControllerInfos["A"] = _("Select");
	} else if (MapData.Uid != "") {
		ControllerInfos["A"] = "{{{Text_SwapMap}}}";
	}

	if (_State.Controls.Button_MapToMove != Null) {
		ControllerInfos["B"] = "{{{Text_AbortSwapMap}}}";
	} else {
		ControllerInfos["B"] = "{{{Text_Back}}}";
	}

	ControllerInfo::SetButtons(ControllerInfos);
}

Void DisplayInfo(CMlLabel _Label_Info, Text _Text, Boolean _IsError) {
	declare Vec2 Pos_Hidden = MLHelpers::SkewX(<-126., 20.>, 10.);
	declare Vec2 Pos_Visible = MLHelpers::SkewX(<-125., 20.>, 10.);
	AnimMgr.Flush(_Label_Info);

	if (_Text != "") {
		_Label_Info.SetText(_Text);
		_Label_Info.Opacity = 0.;
		_Label_Info.RelativePosition_V3 = Pos_Hidden;
		if (_IsError) {
			_Label_Info.TextColor = {{{ColorPalette::C_Color_Vec3_ErrorRed}}};
		} else {
			_Label_Info.TextColor = <1., 1., 1.>;
		}
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Visible.X^" "^Pos_Visible.Y^"\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

// Handle the focus on the given control
K_State Focus(K_State _State, CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From as CMlFrame)) {
			{{{Button::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{Checkbox::P}}}IsCheckbox(_From as CMlFrame)) {
			{{{Checkbox::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{TextField::P}}}IsTextField(_From as CMlFrame)) {
			{{{TextField::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{ExpendableButton::P}}}IsButton(_From as CMlFrame)) {
			{{{ExpendableButton::P}}}Unfocus(This, _From as CMlFrame);
		}
	}
	
	if (_To != Null) {
		declare Real OpacityPrivacy = 0.;
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To as CMlFrame)) {
			{{{Button::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{Checkbox::P}}}IsCheckbox(_To as CMlFrame)) {
			{{{Checkbox::P}}}Focus(This, _To as CMlFrame);
			if (_To.Id == State.Controls.Checkbox_Private.Id) OpacityPrivacy = 1.;
		} else if ({{{TextField::P}}}IsTextField(_To as CMlFrame)) {
			{{{TextField::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{ExpendableButton::P}}}IsButton(_To as CMlFrame)) {
			{{{ExpendableButton::P}}}Focus(This, _To as CMlFrame);
			if (_To.HasClass("{{{C_Class_MapButton}}}")) {
				declare {{{CampaignStruct::P}}}K_Map MapData for _To;
				{{{MapRankings::P}}}UpdateMapInfoDisplayed(This, _State.Controls.Frame_MapRankings, MapData);
				State.FocusedMap = _To;
			}
		}

		// Update navigation of the first and last row of the map grid
		AnimMgr.Flush(State.Controls.Label_InfoTitle);
		AnimMgr.Flush(State.Controls.Label_InfoDescription);
		AnimMgr.Add(State.Controls.Label_InfoTitle, "<anim opacity=\""^OpacityPrivacy^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(State.Controls.Label_InfoDescription, "<anim opacity=\""^OpacityPrivacy^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);

		// Update navigation of the first and last row of the map grid
		if (!_To.HasClass("{{{C_Class_MapButton}}}")) {
			for (ColumnIndex, 0, {{{C_ColumnNumber-1}}}) {
				if (_To.ControlId == _State.Controls.Button_Logo.ControlId || _To.ControlId == _State.Controls.Checkbox_Private.ControlId) {
					declare CMlFrame Button_FirstRowMap <=> (_State.Controls.Frame_Maps.GetFirstChild("button-map-"^ColumnIndex^"-0") as CMlFrame);
					{{{Navigation::P}}}ChangeControlTarget(This, Button_FirstRowMap, "up", _To.ControlId);
				} else if (_To.ControlId == _State.Controls.Button_Back.ControlId || _To.ControlId == _State.Controls.Button_Create.ControlId) {
					declare CMlFrame Button_LastRowMap <=> (_State.Controls.Frame_Maps.GetFirstChild("button-map-"^ColumnIndex^"-"^{{{C_RowNumber-1}}}) as CMlFrame);
					{{{Navigation::P}}}ChangeControlTarget(This, Button_LastRowMap, "down", _To.ControlId);
				}
			}
		}
	}

	// Update controller info
	UpdateControllerInfo(State);

	return State;
}

// Update the campaign map list
K_State UpdateCampaignMapsGrid(K_State _State) {
	declare K_State State = _State;
	declare {{{CampaignStruct::P}}}K_Map[] Playlist;

	/* Sort map list depending on maps position */
	for (Index, 0, {{{C_RowNumber*C_ColumnNumber-1}}}) {
		foreach (Map in State.MapList) {
			if (Map.Position == Index) {
				Playlist.add(Map);
			}
		}
	}
	
	/* Update maps layout */
	foreach (Index => Control in State.Controls.Frame_Maps.Controls) {
		declare CMlFrame Button_Map = Control as CMlFrame;
		declare {{{CampaignStruct::P}}}K_Map MapData for Button_Map;
		MapData = {{{CampaignStruct::P}}}K_Map {};
		
		if (Playlist.existskey(Index)) {
			Playlist[Index].Position = Index;
			MapData = Playlist[Index];
			State.MapList[MapData.Uid] = MapData;

			{{{ExpendableButton::P}}}SetIconImageUrl(This, Button_Map, "", False);
			{{{ExpendableButton::P}}}SetText(This, Button_Map, TL::FormatInteger(Index+1, 2), False);
			if (MapData.AuthorDisplayName == "") {{{ExpendableButton::P}}}SetTextToSpeech(Button_Map, TL::Compose("%1 %2 - %3", _("Track"), TL::FormatInteger(Index+1, 2), MapData.Name));
			else {{{ExpendableButton::P}}}SetTextToSpeech(Button_Map, TL::Compose("%2 %3 - %4 "^TL::GetTranslatedText("{{{Text_AuthorName}}}"), MapData.AuthorDisplayName, _("Track"), TL::FormatInteger(Index+1, 2), MapData.Name));
			{{{ExpendableButton::P}}}SetStyles(This, Button_Map, [{{{ExpendableButton::P}}}Style_Stack()], False);
			if (Index == 0) {{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_StackTop(), False);
			if (Index == {{{C_RowNumber*C_ColumnNumber-1}}}) {{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_StackBottom(), False);
			{{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_Map());
			{{{ExpendableButton::P}}}ShowAndUnlock(Button_Map);
		} else if (Index == State.MapList.count) {
			{{{ExpendableButton::P}}}SetText(This, Button_Map, "", False);
			{{{ExpendableButton::P}}}SetTextToSpeech(Button_Map, "{{{Text_AddTracks}}}");
			{{{ExpendableButton::P}}}SetIconImageUrl(This, Button_Map, "{{{Const::C_ImageUrl_Icon_Plus_Oblique}}}", False);
			{{{ExpendableButton::P}}}SetStyles(This, Button_Map, [{{{ExpendableButton::P}}}Style_Stack(), {{{ExpendableButton::P}}}Style_StackBottom()], False);
			if (Index == 0) {{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_StackTop(), False);
			{{{ExpendableButton::P}}}AddStyle(This, Button_Map, {{{ExpendableButton::P}}}Style_Map());
			{{{ExpendableButton::P}}}ShowAndUnlock(Button_Map);
		} else {
			{{{ExpendableButton::P}}}HideAndLock(Button_Map);
		}

		// Update map rankings component
		if (Control.Id == State.FocusedMap.Id) {
			{{{MapRankings::P}}}UpdateMapInfoDisplayed(This, State.Controls.Frame_MapRankings, MapData);
		}
	}

	return State;
}

// Update information about the current campaign
K_State UpdateCampaignDisplay(K_State _State, Boolean _IsEditingCampaign) {
	declare K_State State = _State;
	State.IsEditingCampaign = _IsEditingCampaign;

	if (_IsEditingCampaign) {
		State.Controls.Label_Title.SetText("{{{Text_EditCampaign}}}");
		{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Create, "{{{Text_Save}}}");
	} else {
		State.Controls.Label_Title.SetText("{{{Text_CreateCampaign}}}");
		{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Create, "{{{Text_Create}}}");
	}

	DisplayInfo(State.Controls.Label_Info, "", False);
	{{{TextField::P}}}SetValue(This, State.Controls.TextField_Name, State.Campaign.Name);
	{{{Checkbox::P}}}Check(This, State.Controls.Checkbox_Private, State.Campaign.IsPrivate);
	if (State.Campaign.Media.ButtonBackgroundUrl != "") {
		if ({{{ClubStruct::P}}}IsClubThemeName(State.Campaign.Media.ButtonBackgroundUrl)) {
			{{{Button::P}}}SetImage(This, State.Controls.Button_Logo, {{{ClubStruct::P}}}GetClubThemeUrl(State.Campaign.Media.ButtonBackgroundUrl, "{{{ClubStruct::C_MediaType_Icon}}}"));
			{{{Button::P}}}SetImageFocus(This, State.Controls.Button_Logo, {{{ClubStruct::P}}}GetClubThemeUrl(State.Campaign.Media.ButtonBackgroundUrl, "{{{ClubStruct::C_MediaType_Icon}}}"));
		} else if (Http.IsValidUrl(State.Campaign.Media.ButtonBackgroundUrl) || {{{ClubStruct::P}}}IsClubThemeUrl(State.Campaign.Media.ButtonBackgroundUrl)) {
			{{{Button::P}}}SetImage(This, State.Controls.Button_Logo, State.Campaign.Media.ButtonBackgroundUrl);
			{{{Button::P}}}SetImageFocus(This, State.Controls.Button_Logo, State.Campaign.Media.ButtonBackgroundUrl);
		} else {
			{{{Button::P}}}SetImage(This, State.Controls.Button_Logo, {{{BrowserAPI::P}}}C_BasePath^State.Campaign.Media.ButtonBackgroundUrl);
			{{{Button::P}}}SetImageFocus(This, State.Controls.Button_Logo, {{{BrowserAPI::P}}}C_BasePath^State.Campaign.Media.ButtonBackgroundUrl);
		}
		{{{Button::P}}}SetIcon(This, State.Controls.Button_Logo, "");
		{{{Button::P}}}SetIconFocus(This, State.Controls.Button_Logo, "");
		{{{Button::P}}}SetBgColorType(This, State.Controls.Button_Logo, {{{Button::C_ColorType_None}}});

	} else {
		{{{Button::P}}}SetImage(This, State.Controls.Button_Logo, "{{{Const::C_ImageUrl_ClubActivity}}}");
		{{{Button::P}}}SetImageFocus(This, State.Controls.Button_Logo, "{{{Const::C_ImageUrl_ClubActivity}}}");
		{{{Button::P}}}SetIcon(This, State.Controls.Button_Logo, "{{{Const::C_ImageUrl_Icon_Plus_Oblique}}}");
		{{{Button::P}}}SetIconFocus(This, State.Controls.Button_Logo, "{{{Const::C_ImageUrl_Icon_Plus_Oblique}}}");
		{{{Button::P}}}SetBgColorType(This, State.Controls.Button_Logo, {{{Button::C_ColorType_Colorize}}});
	}

	return UpdateCampaignMapsGrid(State);
}

// Swap the position between two maps
K_State SwapMapPositions(K_State _State, CMlFrame _Button_MapTarget) {
	if (_Button_MapTarget == Null || _State.Controls.Button_MapToMove == Null) return _State;
	declare {{{CampaignStruct::P}}}K_Map MapData as MapDataTarget for _Button_MapTarget;
	declare K_State State = _State;

	if (MapDataTarget.Uid != "") {
		if (_Button_MapTarget.Id != State.Controls.Button_MapToMove.Id) {
			declare {{{CampaignStruct::P}}}K_Map MapData as MapDataToMove for State.Controls.Button_MapToMove;
			declare Text MapToMoveUid = MapDataToMove.Uid;
			declare Text MapTargetUid = MapDataTarget.Uid;
		
			// Swap maps position
			State.MapList[MapToMoveUid].Position = MapDataTarget.Position;
			State.MapList[MapTargetUid].Position = MapDataToMove.Position;

			// Update map data
			MapDataToMove = State.MapList[MapTargetUid];
			MapDataTarget = State.MapList[MapToMoveUid];
		
			{{{MapRankings::P}}}UpdateMapInfoDisplayed(This, State.Controls.Frame_MapRankings, MapDataTarget);
		}
	
		{{{ExpendableButton::P}}}RemoveStyle(This, State.Controls.Button_MapToMove, {{{ExpendableButton::P}}}Style_MapLive());
		State.Controls.Label_Choose.SetText("{{{Text_AddTracks}}}");
		State.Controls.Button_MapToMove = Null;
		UpdateControllerInfo(State);
	}

	return State;
}

// Create or save the current campaign
K_State CreateOrSaveCampaign(K_State _State, Boolean _IsLeaving) {
	declare K_State State = _State;
	declare Boolean IsValidCampaign = {{{TextField::P}}}GetValue(State.Controls.TextField_Name) != "" && State.MapList.count > 0;
	State.IsActivityActivationNeeded = !_IsLeaving && !State.IsEditingCampaign;
	State.Campaign.MapCount = State.MapList.count;
	State.Campaign.Categories[0].Playlist = [];
	foreach (MapUid => Map in State.MapList) {
		State.Campaign.Categories[0].Playlist.add(Map);
	}

	if (!IsValidCampaign && !_IsLeaving) {
		DisplayInfo(State.Controls.Label_Info, "{{{Text_NoTracks}}}", False);
	} else if (_IsLeaving && (!IsValidCampaign || State.IsEditingCampaign)) {
		{{{Router::P}}}PushParent(This, ["{{{RoutePaths::C_Query_SkipPageInit}}}" => ""]);
	} else if (IsValidCampaign) {
		if (_IsLeaving && !State.Controls.PopUpMultiChoice_SaveCampaign.Visible) {
			{{{PopUpMultiChoice::P}}}Open(This, State.Controls.PopUpMultiChoice_SaveCampaign);
		} else if (State.IsEditingCampaign) {
			{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", False);
			{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditCampaign, "{{{Text_SavingCampaign}}}");
			{{{ClubStore::P}}}Action_EditCampaign(This, State.Campaign);
		} else {
			{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", False);
			{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditCampaign, "{{{Text_CreatingCampaign}}}");
			{{{ClubStore::P}}}Action_CreateCampaign(This, State.Campaign);
		}
	}

	return State;
}

// Handle the selection on the given control
K_State Select(K_State _State, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	DisplayInfo(State.Controls.Label_Info, "", False);
	switch (_Control.ControlId) {
		case "button-create": State = CreateOrSaveCampaign(State, False);
		case "button-back": State = CreateOrSaveCampaign(State, True);
		case "checkbox-private": State.Campaign.IsPrivate = {{{Checkbox::P}}}Toggle(This, _Control as CMlFrame);
		case "button-logo": {
			if (Platform::IsFromFirstParty(System)) {
				{{{PopUpClubThemes::P}}}Open(This);
			} else {
				State.Controls.Frame_Browser.Show();
				{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", False);

				declare BrowserSettings = {{{BrowserAPI::P}}}GetDefaultSettings();
				BrowserSettings.DisplayFileNameTooltip = True;
				{{{BrowserAPI::P}}}SetCurrentBrowser(This, 
					{{{BrowserAPI::C_BrowserType_PathNavigation}}}, 
					"{{{BrowserAPI::C_BrowserName_Image}}}", 
					[{{{BrowserAPI::C_DataType_Image}}}], 
					"", 
					BrowserSettings
				);
			}
		}
		default: {
			if (_Control.HasClass("{{{C_Class_MapButton}}}")) {
				State.Controls.Button_SelectedMap = (_Control as CMlFrame);
				if (State.Controls.Button_MapToMove != Null) {
					State = SwapMapPositions(State, _Control as CMlFrame);
				} else {
					declare {{{CampaignStruct::P}}}K_Map MapData for _Control;
					if (MapData.Uid != "") {
						{{{PopUpMultiChoice::P}}}SetTitle(This, State.Controls.PopUpMultiChoice_Tracks, MapData.Name);
						{{{PopUpMultiChoice::P}}}Open(This, State.Controls.PopUpMultiChoice_Tracks);
					} else {
						ShowTrackBrowser(State, True);
					}
				}
			}
		}
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_State State;

declare Task::K_Task Task_GetMapList;
declare Http::K_Request GetCampaignRequest;
***

***MainStart***
***
Frame_Global = (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	Controls = K_Controls {
		Frame_Global = Frame_Global,
		Frame_Browser = (Page.GetFirstChild("frame-browser") as CMlFrame),
		Frame_MapRankings = (Frame_Global.GetFirstChild("frame-map-rankings") as CMlFrame),
		Frame_Maps = (Frame_Global.GetFirstChild("frame-maps") as CMlFrame),
		Frame_PopUpBackground = (Frame_Global.GetFirstChild("frame-background") as CMlFrame),
		Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
		Button_Create = (Frame_Global.GetFirstChild("button-create") as CMlFrame),
		Button_DefaultMap = (Frame_Global.GetFirstChild("button-map-0-0") as CMlFrame),
		Button_Logo = (Frame_Global.GetFirstChild("button-logo") as CMlFrame),
		Checkbox_Private = (Frame_Global.GetFirstChild("checkbox-private") as CMlFrame),
		Label_Choose = (Frame_Global.GetFirstChild("label-choose") as CMlLabel),
		Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
		Label_InfoDescription = (Frame_Global.GetFirstChild("label-info-description") as CMlLabel),
		Label_InfoTitle = (Frame_Global.GetFirstChild("label-info-title") as CMlLabel),
		Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
		LoadingSpinner_CreateOrEditCampaign = (Page.GetFirstChild("loadingspinner-create-or-edit-campaign") as CMlFrame),
		LoadingSpinner_RetrieveInfo = (Frame_Global.GetFirstChild("loadingspinner-retrieve-info") as CMlFrame),
		PopUpClubThemes_Icon = (Frame_Global.GetFirstChild("popupclubthemes-icon") as CMlFrame),
		PopUpMultiChoice_SaveCampaign = (Frame_Global.GetFirstChild("popupmultichoice-save") as CMlFrame),
		PopUpMultiChoice_Tracks = (Frame_Global.GetFirstChild("popupmultichoice-track") as CMlFrame),
		TextField_Name = (Frame_Global.GetFirstChild("textfield-name") as CMlFrame)
	}
};

{{{TrackBrowser::P}}}SetMapTypeFilters(This, ["{{{Const::C_MapType_Race}}}"]);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_CreateCampaign}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_EnteringRoute: {
				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);
				State.Campaign = {{{CampaignStruct::P}}}K_Campaign {
					Categories = [{{{CampaignStruct::P}}}K_Category {}],
					Club = {{{ClubStore::P}}}GetUserCurrentClub()
				};

				// Edit an existing activity
				if (Query.existskey("{{{RoutePaths::C_Query_Activity}}}")) {
					declare {{{ClubStruct::P}}}K_Activity Activity;
					Activity.fromjson(Query["{{{RoutePaths::C_Query_Activity}}}"]);
	
					State.Campaign.Id = Activity.ExternalId;
					State.Campaign.Name = Activity.Name;
					State.Campaign.IsPrivate = !Activity.Public;
					State.Campaign.Media.ButtonBackgroundUrl = Activity.MediaUrl;

					GetCampaignRequest = Http::DestroyAndCreate(GetCampaignRequest, ClubAPI::GetClubCampaign(State.Campaign.Club.Id, State.Campaign.Id));
					{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
				} 

				{{{PopUpClubThemes::P}}}SelectClubTheme(This, {{{PopUpClubThemes::P}}}C_Choice_None);
				{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", True);
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Button_DefaultMap);
				State = UpdateCampaignDisplay(State, Query.existskey("{{{RoutePaths::C_Query_Activity}}}"));
				UpdateControllerInfo(State);
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
			switch (Event.Type) {
				case {{{Navigation::P}}}C_EventType_NavigateInput: {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Event.To);
						case CMlScriptEvent::EMenuNavAction::AppMenu: State = CreateOrSaveCampaign(State, False);
						case CMlScriptEvent::EMenuNavAction::Cancel: {
							if (State.Controls.Button_MapToMove != Null) {
								State = SwapMapPositions(State, State.Controls.Button_MapToMove);
							} else {
								State = CreateOrSaveCampaign(State, True);
							}
						}
						default: {
							if (!Event.From.HasClass("{{{C_Class_MapButton}}}") && Event.To.HasClass("{{{C_Class_MapButton}}}")) {
								State = Focus(State, Event.From, State.FocusedMap);
							} else {
								State = Focus(State, Event.From, Event.To);
							}
						}
					}
				}
				case {{{Navigation::P}}}C_EventType_NavigateMouse: {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						State = Focus(State, Event.From, Event.To);
					}
				}
			}
		}
	}
	
	/* Stores events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{UserStore::P}}}C_Event_UserPermissionsUpdated: State = UpdateCampaignDisplay(State, State.IsEditingCampaign);
					case {{{ClubStore::P}}}C_Event_ClubCampaignCreationOrEditionFailed, {{{ClubStore::P}}}C_Event_ActivityValidationFailed: {
						if (Event.CustomEventData.count > 0) {
							DisplayInfo(State.Controls.Label_Info, Event.CustomEventData[0], True);
							{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditCampaign);
							{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", True);
						}
					}
					case {{{ClubStore::P}}}C_Event_ClubCampaignCreatedOrEdited: {
						if (Event.CustomEventData.count > 1) {
							State.Campaign.fromjson(Event.CustomEventData[0]);
							{{{CampaignStore::P}}}UnloadCampaign(State.Campaign.Id);
							if (State.IsActivityActivationNeeded) {
								{{{ClubStore::P}}}Action_ActivateActivity(This, State.Campaign.Club.Id, TL::ToInteger(Event.CustomEventData[1]), True);
							} else {
								{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditCampaign);
								{{{Router::P}}}PushParent(This, ["{{{RoutePaths::C_Query_SkipPageInit}}}" => ""]);
							}
						}
					}
					case {{{ClubStore::P}}}C_Event_ActivityActivatedOrDeactivated: {
						{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditCampaign);
						{{{Router::P}}}PushParent(This, ["{{{RoutePaths::C_Query_SkipPageInit}}}" => ""]);
					}
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (
			Event.PopUpMultiChoice != Null && 
			(
				Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_SaveCampaign.Id ||
				Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_Tracks.Id
			)
		) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", !Event.PopUpMultiChoice.Visible);
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					switch (Event.PopUpMultiChoice.ControlId) {
						case State.Controls.PopUpMultiChoice_SaveCampaign.ControlId: {
							switch (Event.SelectedIndex) {
								case C_Choice_Exit: {{{Router::P}}}PushParent(This, ["{{{RoutePaths::C_Query_SkipPageInit}}}" => ""]);
								case C_Choice_Save: State = CreateOrSaveCampaign(State, True);
							}
							{{{PopUpMultiChoice::P}}}Close(This, State.Controls.PopUpMultiChoice_SaveCampaign);
						}
						case State.Controls.PopUpMultiChoice_Tracks.ControlId: {
							switch (Event.SelectedIndex) {
								case C_Choice_Replace: ShowTrackBrowser(State, False);
								case C_Choice_Edit: {
									declare {{{CampaignStruct::P}}}K_Map MapData for State.Controls.Button_SelectedMap;
									declare Text MapUrl = MapData.LocalFileName;
									if (MapUrl == "") MapUrl = MapData.DownloadUrl;
									if (MapUrl != "") {
										if (Platform::IsFromFirstParty(System) && !MapData.CreatedWithGamepadEditor) {
											DisplayInfo(State.Controls.Label_Info, "{{{Text_MapEditionGamepad}}}", False);
										} else {
											declare Text[] EditorPluginScripts = ["TrackMania/ShareMapInfo.Script.txt"];
											declare Text[] EditorPluginSettings = [""];
											declare Boolean	OnlyUseForcedPlugins = False;											
											Share::ResetLastMapCreated();
											SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", [MapData.Name]);

											declare Integer Difficulty = C_Difficulty_Expert;
											if (MapData.CreatedWithSimpleEditor) {
												Difficulty = C_Difficulty_Simple;
											}

											if (MapData.CreatedWithGamepadEditor) {
												EditorPluginScripts.add("TrackMania/GamepadEditor.Script.txt");
												declare Text GamepadEditorSettings = "<root>";
												GamepadEditorSettings ^= "<setting name=\"S_EditorLevel\" value=\""^Difficulty^"\" type=\"integer\"/>";
												GamepadEditorSettings ^= "</root>";
												
												EditorPluginSettings.add(GamepadEditorSettings);

												// When opening the gamepad editor, we don't want to allow plugins that were saved in the profile 
												// opened in previous Map Editor session to be opened alongside GamepadEditor.Script.txt
												OnlyUseForcedPlugins = True;
											}
											
											TitleControl::EditMap(
												TitleControl, 
												MapUrl, 
												"", 
												"", 
												"", 
												EditorPluginScripts, 
												EditorPluginSettings,
												Difficulty != C_Difficulty_Simple,
												OnlyUseForcedPlugins
											);

											// Back from the map editor
											declare MapInfo = Share::ConvertToMap(Share::GetLastMapCreated());
											if (MapInfo.Uid != "" && MapInfo.CollectionName == "{{{EnvironmentInfo::C_Collection_Stadium}}}") {
												declare {{{CampaignStruct::P}}}K_Map MapData for State.Controls.Button_SelectedMap;
												MapInfo.Position = MapData.Position;
												State.MapList[MapInfo.Uid] = MapInfo;
												State.MapList.removekey(MapData.Uid);
												State = UpdateCampaignMapsGrid(State);
												UpdateControllerInfo(State);
											}
										}
									}
								}
								case C_Choice_Move: {
									declare {{{CampaignStruct::P}}}K_Map MapData for State.Controls.Button_SelectedMap;
									{{{ExpendableButton::P}}}AddStyle(This, State.Controls.Button_SelectedMap, {{{ExpendableButton::P}}}Style_MapLive());
									State.Controls.Label_Choose.SetText(TL::Compose("{{{Text_SelectToSwapMap}}}", MapData.Name));
									State.Controls.Button_MapToMove = State.Controls.Button_SelectedMap;
									UpdateControllerInfo(State);
								}
								case C_Choice_Delete: {
									declare {{{CampaignStruct::P}}}K_Map MapData for State.Controls.Button_SelectedMap;
									State.MapList.removekey(MapData.Uid);
									State = UpdateCampaignMapsGrid(State);
								}
							}
						}
					}
				}
			}
		}
	}

	/* TextField events */
	foreach (Event in {{{TextField::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TextField::P}}}C_EventType_Update: {
				if (Event.Control != Null && Event.Control.ControlId == State.Controls.TextField_Name.ControlId) {
					if (Event.Value != State.Campaign.Name) {
						declare Text NewName = Tools::FormatValue({{{TextField::P}}}GetValue(State.Controls.TextField_Name));
						if (TL::Length(TL::StripFormatting(NewName)) > C_Name_MaxChar) {
							DisplayInfo(State.Controls.Label_Info, TL::Compose("{{{Text_NameLimit}}}", ""^C_Name_MaxChar), False);
							NewName = TL::SubString(NewName, 0, C_Name_MaxChar);
						} else {
							DisplayInfo(State.Controls.Label_Info, "", False);
						}
						{{{TextField::P}}}SetValue(This, State.Controls.TextField_Name, NewName);
						State.Campaign.Name = NewName;
					}
				}
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background" && {{{Navigation::P}}}GroupIsEnabled(This, "{{{C_NavGroup_Default}}}")) {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: State = CreateOrSaveCampaign(State, True);
			}
		}
	}

	/* TrackBrowser events */
	foreach (Event in {{{TrackBrowser::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TrackBrowser::P}}}C_Event_Select: {
				declare {{{CampaignStruct::P}}}K_Map MapData as MapToReplaceData for State.Controls.Button_SelectedMap;
				declare {{{CampaignStruct::P}}}K_Map SelectedMap = Event.Track;
				
				{{{TrackBrowser::P}}}Display(This, False);
				if (MapToReplaceData.Uid != SelectedMap.Uid) {
					SelectedMap.Position = MapToReplaceData.Position;
					State.MapList[SelectedMap.Uid] = SelectedMap;
					State.MapList.removekey(MapToReplaceData.Uid);
				}
			}
			case {{{TrackBrowser::P}}}C_Event_MultiSelect: {
				declare Text[] ExistingTracksUid;

				{{{TrackBrowser::P}}}Display(This, False);
				foreach (MapInfo in Event.MultiTracks) {
					if (State.MapList.existskey(MapInfo.Uid)) {
						ExistingTracksUid.add(MapInfo.Uid);
					} else if (State.MapList.count < {{{C_RowNumber * C_ColumnNumber}}}) {
						declare {{{CampaignStruct::P}}}K_Map UpdateMapInfo = MapInfo;
						UpdateMapInfo.Position = State.MapList.count;
						State.MapList[MapInfo.Uid] = UpdateMapInfo;
					} else {
						DisplayInfo(State.Controls.Label_Info, "{{{Text_MapLimit}}}", False);
					}
				}

				if (ExistingTracksUid.count == 1) {
					DisplayInfo(State.Controls.Label_Info, TL::Compose("{{{Text_ExistingTrack}}}", Event.MultiTracks[ExistingTracksUid[0]].Name), False);
				} else if (ExistingTracksUid.count > 1) {
					DisplayInfo(State.Controls.Label_Info, TL::Compose("{{{Text_ExistingTracks}}}", ""^ExistingTracksUid.count), False);
				}
			}
			case {{{TrackBrowser::P}}}C_Event_Exit: {
				{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", True);
				State = UpdateCampaignMapsGrid(State);
				UpdateControllerInfo(State);
			}
		}
	}

	/* Browser events */
	foreach (Event in {{{BrowserAPI::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{BrowserAPI::P}}}C_EventType_Select: {
				switch (Event.DataType) {
					case {{{BrowserAPI::P}}}C_DataType_Image: {
						State.Campaign.Media.ButtonBackgroundUrl = {{{BrowserAPI::P}}}C_BasePath_Media^Event.Data;
						State = SwapMapPositions(State, State.Controls.Button_MapToMove); //< Abort map swapping
						State = UpdateCampaignDisplay(State, State.IsEditingCampaign);
						{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", True);
						{{{BrowserAPI::P}}}FocusBrowser(This, False);
						State.Controls.Frame_Browser.Hide();
					}
				}
			}
			case {{{BrowserAPI::P}}}C_EventType_Cancel: {
				{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", True);
				{{{BrowserAPI::P}}}FocusBrowser(This, False);
				State.Controls.Frame_Browser.Hide();
			}
		}
	}

	/* Activity image events */
	foreach (Event in {{{PopUpClubThemes::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{PopUpClubThemes::P}}}C_EventType_Display: {{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", !Event.PopUpClubThemes.Visible);
			case {{{PopUpClubThemes::P}}}C_EventType_Confirm: {
				if (Event.PopUpClubThemes != Null && Event.PopUpClubThemes.Id == State.Controls.PopUpClubThemes_Icon.Id) {
					if (Event.MediaUrl != "") State.Campaign.Media.ButtonBackgroundUrl = Event.ThemeName;
					else State.Campaign.Media.ButtonBackgroundUrl = Event.MediaUrl;
					State = UpdateCampaignDisplay(State, State.IsEditingCampaign);
				}
			}
		}
	}

	/* Fetch campaign details */
	if (Http::IsInitialized(GetCampaignRequest)) {
		GetCampaignRequest = Http::Update(GetCampaignRequest);
		if (!Http::IsRunning(GetCampaignRequest)) {
			if (Http::IsSuccess(GetCampaignRequest)) {
				declare Boolean IsPrivate = State.Campaign.IsPrivate; //< Save and transfer the activity privacy to the updated campaign struct
				declare Text MediaUrl = State.Campaign.Media.ButtonBackgroundUrl; //< Save media url in case it is a club theme url

				State.MapList = [];
				State.Campaign = ClubAPI::GetResponseFromGetClubCampaign(GetCampaignRequest);
				State.Campaign.IsPrivate = IsPrivate;
				if ({{{ClubStruct::P}}}IsClubThemeUrl(MediaUrl)) {
					{{{PopUpClubThemes::P}}}SelectClubTheme(This, MediaUrl);
					State.Campaign.Media.ButtonBackgroundUrl = MediaUrl;
				}

				// Create a list of map Uids
				declare Text[] MapUidList;
				foreach (Map in State.Campaign.Categories[0].Playlist) {
					if (Map.Uid != "") {
						State.MapList[Map.Uid] = Map;
						MapUidList.add(Map.Uid);
					}
				}

				// Get maps information
				Task_GetMapList = Task::DestroyAndCreate(Task_GetMapList, DataFileMgr, 
					DataFileMgr.Map_NadeoServices_GetListFromUid(MainUser::GetMainUserId(), MapUidList)
				);
			} else {
				DisplayInfo(State.Controls.Label_Info, TL::Compose("{{{Text_ErrorCampaignCreation}}}", ""^Http::GetStatusCode(GetCampaignRequest)), True);
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
			}
			GetCampaignRequest = Http::Destroy(GetCampaignRequest);
		}
	}

	/* Get the map list of the campaign */
	if (Task::IsInitialized(Task_GetMapList)) {
		Task_GetMapList = Task::Update(Task_GetMapList);
		if (!Task::IsRunning(Task_GetMapList)) {
			declare CTaskResult_NSMapList SourceTask = Task::GetSourceTask_NSMapList(Task_GetMapList);
			if (Task::IsSuccess(Task_GetMapList) && SourceTask != Null) {
				foreach (NSMap in SourceTask.MapList) {
					if (NSMap.Uid != "") {
						declare {{{CampaignStruct::P}}}K_Map Map = {{{CampaignStruct::P}}}GetMapFromNSMap({{{CampaignStruct::P}}}K_Map {}, NSMap);
						Map.Position = State.MapList[NSMap.Uid].Position;
						State.MapList[NSMap.Uid] = Map;
					}
				}
				State = UpdateCampaignMapsGrid(State);
			} else {
				DisplayInfo(State.Controls.Label_Info, TL::Compose("{{{Text_MapListError}}}", Task::GetSourceTaskError(Task_GetMapList).Code), True);
			}
			Task_GetMapList = Task::Destroy(Task_GetMapList);
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_LeavingRoute}}}": {
				{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", True);
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditCampaign);
				State = K_State {	
					Controls = State.Controls,
					FocusedMap = State.Controls.Button_DefaultMap,
					Campaign = {{{CampaignStruct::P}}}K_Campaign {
						Categories = [{{{CampaignStruct::P}}}K_Category {}]
					}
				};
				State = SwapMapPositions(State, State.Controls.Button_MapToMove); //< Abort map swapping
				State = UpdateCampaignDisplay(State, False);
			}
		}
	}
}
***
""",
[
	BrowserAPI::ComponentV2(),
	Button::ComponentV2(),
	ButtonIcon::ComponentV2(),
	CampaignStore::ComponentV2(),
	CampaignStruct::Component(),
	Checkbox::ComponentV2(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MapRankings::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpBackground::ComponentV2(),
	PopUpClubThemes::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	Router::ComponentV2(),
	TextField::ComponentV2(),
	TrackBrowser::ComponentV2(),
	Transition::ComponentV2(),
	UserStore::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}