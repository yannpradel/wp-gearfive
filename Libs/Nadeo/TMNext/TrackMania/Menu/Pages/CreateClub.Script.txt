/** 
 *	Page: CreateClub
 */
#Const Version		"2023-06-09"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/CreateClub.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Selector.Script.txt" as Selector
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/API/BrowserAPI.Script.txt" as BrowserAPI
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/NavigationTabs.Script.txt" as NavigationTabs
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/TextField.Script.txt" as TextField
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "MathLib" as ML
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_CreateClub"
#Const C_NavGroup_Global "navgroup-create-club-global"
#Const C_NavGroup_Default "navgroup-create-club-default"
#Const C_NavGroup_MouseOnly "navgroup-create-club-mouse-only"
#Const C_Class_SelectorFrame "class-create-club-selector-frame"
#Const C_Class_RemoveAsset "class-create-club-button-remove-asset"
#Const C_Class_DownloadAsset "class-create-club-button-download-asset"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

// Pop-up to define the same theme for all club assets
#Const C_Choice_No 0
#Const C_Choice_Yes 1
#Const C_Choices_Theme [
	//L16N [Club Edition] Do not define the selected set of images for all club assets
	0 => _("No"),
	//L16N [Club Edition] Define the selected set of images for all club assets
	1 => _("Yes")
]

// Pop-up to create the club
#Const C_Choice_RandomTheme 0
#Const C_Choice_NoImages 1
#Const C_Choice_Back 2
#Const C_Choices_CreateClub [
	//L16N [Club Edition] Create a club with a random set of selected images
	0 => _("Create with random theme"),
	//L16N [Club Edition] Create a club with no images
	1 => _("Create without images"),
	//L16N [Club Edition] Leave the pop-up to create a club
	2 => _("Back")
]

// Pop-up to delete the club
#Const C_Choice_Cancel 0
#Const C_Choice_Delete 1
#Const C_Choices_DeleteClub [
	//L16N [Club Edition] Abort club deletion
	0 => _("Cancel"),
	//L16N [Club Edition] Confirm club deletion
	1 => _("|Club|Delete")
]

// Pop-up to configure privacy settings
#Const C_Choices_PrivacySettings [
	//L16N [Club Edition] Choice for the club privacy. Here everyone can join the club.
	"public" => _("|ClubPrivacy|Public - Open to everyone"), //< ClubStruct::C_ClubState_Public
	//L16N [Club Edition] Choice for the club privacy. Here players can send a request to join the club.
	"private-open" => _("|ClubPrivacy|Private - Accept requests"), //< ClubStruct::C_ClubState_PrivateOpen
	//L16N [Club Edition] Choice for the club privacy. Here nobody can join or ask to join the club.
	"private-closed" => _("|ClubPrivacy|Private") //< ClubStruct::C_ClubState_PrivateClosed
]

// Navigation tabs
#Const C_Tab_General 0
#Const C_Tab_Branding 1
#Const C_Tab_Stadium 2
#Const C_TabNames [
	//L16N [Club Edition] Title of the tab to update general information about the club (name, tag, etc.)
	0 => _("|Club creation tab|General"),
	//L16N [Club Edition] Title of the tab to update the branding of the club (icons, background, etc.)
	1 => _("|Club creation tab|Branding"),
	//L16N [Club Edition] Title of the tab to update all the assets that will be displayed in the stadium (screens assets, stickers, etc.)
	2 => _("|Club creation tab|Stadium")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [Club Edition] Button to finalize the creation of a club
	declare Text Text_Create = _("Create");
	//L16N [Club Edition] Button to finalize the edition of a club
	declare Text Text_Save = _("Save");
	//L16N [Club Edition] Text displayed when no asset is selected.
	declare Text Text_None = _("|Club Assets|None");
	//L16N [Club Edition] Title of the pop-up to delete a club.
	declare Text Text_DeleteClubTitle = _("Delete club");
	//L16N [Club Edition] Title of the pop-up to define the selected set of images for all club assets.
	declare Text Text_ThemeTitle = _("'%1' club theme");
	//L16N [Club Edition] Title of the pop-up to create a club.
	declare Text Text_CreateClubTitle = _("Create club");
	//L16N [Club Edition] Choose the privacy setting for the club (public, private with requests, private)
	declare Text Text_PrivacySettings = _("|Club|Privacy");
	//L16N [Club Edition] Waiting message to create a club
	declare Text Text_CreatingClub = _("Creating club...");
	//L16N [Club Edition] Waiting message to update a club
	declare Text Text_UpdatingClub = _("Updating club...");
	//L16N [Club Edition] Waiting message to delete a club
	declare Text Text_DeletingClub = _("Deleting club...");
	//L16N [Club Edition] Select a value in a list.
	declare Text Text_SelectValue = _("Select value");
	//L16N [Club Edition] Text displayed to inform the player that they are looking at a preview of the selected asset as if they were navigating in the game.
	declare Text Text_Preview = _("Preview");
	//L16N [Club Edition] Text displayed to inform the player they can upload an image for their club.
	declare Text Text_UploadImage = _("Upload image");
	//L16N [Club Edition] Text displayed to inform the player they can update the current image.
	declare Text Text_UpdateImage = _("Update image");
	//L16N [Club Edition] Text displayed to inform the player they can select a custom image for their club.
	declare Text Text_CustomImage = _("|Club Assets|Custom");
	//L16N [Club Edition] Sub title of the page where we create the club
	declare Text Text_ClubCreation = _("Club creation");
	//L16N [Club Edition] Sub title of the page where we edit the club
	declare Text Text_ClubEdition = _("Club edition");
	//L16N [Club Edition] Text field to set the name of the club.
	declare Text Text_ClubName = _("|Club|Club name");	
	//L16N [Club Edition] Text field to set the tag of the club.
	declare Text Text_ClubTag = _("|Club|Club tag");	
	//L16N [Club Edition] Text to describe the club to the players
	declare Text Text_ClubDescription = _("|Club|Club description");
	//L16N [Club Edition] Button to remove the selected image
	declare Text Text_Remove = _("Remove image");
	//L16N [Club Edition] Button to download the selected image
	declare Text Text_Download = _("Download image");
	//L16N [Club Edition] Informations on the format. Keep it in English as much as possible
	declare Text Text_Format_All = _("PNG, JPEG or DDS (BC1/DXT1 with mipmaps)");
	//L16N [Club Edition] Informations on the format. Keep it in English as much as possible
	declare Text Text_Format_DDS = _("DDS (BC1/DXT1 with mipmaps)");
	//L16N [Club Edition] Description for the pop-up displayed when the player wants to define the selected set of images for all club assets.
	declare Text Text_ThemeDescription = _("Would you like to use the '%1' club theme for the other images as well?");
	//L16N [Club Edition] Message displayed to warn the player that they can define the selected set of images for all club assets later.
	declare Text Text_ChangeItLater = _("You will be able to change it later");
	//L16N [Club Edition] Message displayed when there is no image uploaded for the selected asset. %1 wil be replaced with the type of asset. e.g. "Upload an image to set a custom 1x1 sticker"
	declare Text Text_NoImage = _("Upload an image to set a custom %1");
	if (Platform::IsFromFirstParty(System)) {
		//L16N [Club Edition] Message displayed when there is no club theme selected. %1 wil be replaced with the type of asset. e.g. "Select a club theme for the 16x9 screen"
		Text_NoImage = _("Select a club theme for the %1");
	}
	// Description of the create club pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_CreateClub = [
		//L16N [Club Edition] Description for the pop-up displayed when the player wants to create a club.
		PopUpMultiChoice::CreateDescriptionPart(_("Would you like to create your club without images or with a random club theme?"), <130., 10.>, 3., FontManager::C_GameFontRegular, "$t$i", <1., 1., 1.>, False)
	];
	// Description of the delete club pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_DeleteClub = [
		//L16N [Club Edition] Description for the pop-up displayed when the player wants to delete their club.
		PopUpMultiChoice::CreateDescriptionPart(_("Are you sure you want to delete your club?"), <130., 30.>, 3., FontManager::C_GameFontSemiBold, "$t$i", <1., 1., 1.>, False)
	];

	/* Variables */
	declare Vec2 Size_ClubBackground = MLHelpers::KeepRatioFromY(1920., 1080., 95.);
	declare Vec2 Size_ClubSticker1x1 = <Size_ClubBackground.Y*0.64, Size_ClubBackground.Y*0.64>;
	declare Vec2 Size_ClubSticker4x1 = MLHelpers::KeepRatioFromY(4., 1., 15.5);

	declare Vec2 Size_Selector = <47., 22.>;
	declare Vec2 Size_SelectorHeader = <Size_Selector.X - MLHelpers::SkewX(Size_Selector.Y*0.58, 10.), Size_Selector.Y*0.42>;
	declare Vec2 Size_SelectorContent = <Size_Selector.X - MLHelpers::SkewX(Size_Selector.Y*0.42, 10.), Size_Selector.Y*0.58>;
	declare Vec2 Size_AdjustedSelector = <Size_Selector.X - MLHelpers::SkewX(Size_Selector.Y, 10.), Size_Selector.Y>;
	
	declare Vec2 Size_FramePrivacy = <107.5, 7.6>;
	declare Vec2 Size_PrivacyLeft = <Size_FramePrivacy.X*0.45 + MLHelpers::SkewX(Size_FramePrivacy.Y, 10.), Size_FramePrivacy.Y>;
	declare Vec2 Size_PrivacyRight = <Size_FramePrivacy.X*0.55 + MLHelpers::SkewX(Size_FramePrivacy.Y, 10.), Size_FramePrivacy.Y>;
	declare Vec2 Size_AdjustedPrivacy = <Size_FramePrivacy.X - MLHelpers::SkewX(Size_FramePrivacy.Y, 10.), Size_FramePrivacy.Y>;

	declare Vec2 Size_FrameTextField = <Size_FramePrivacy.X, 16.5>;
	declare Vec2 Size_TextFieldHeader = <Size_FrameTextField.X + MLHelpers::SkewX(Size_FrameTextField.Y*0.45, 10.), Size_FrameTextField.Y*0.45>;
	declare Vec2 Size_TextFieldContent = <Size_FrameTextField.X + MLHelpers::SkewX(Size_FrameTextField.Y*0.55, 10.), Size_FrameTextField.Y*0.55>;

	declare Vec2 Size_FrameDescription = <Size_FrameTextField.X, 34.6>;
	declare Vec2 Size_DescriptionHeader = <Size_FrameDescription.X + MLHelpers::SkewX(Size_FrameDescription.Y*0.22, 10.), Size_FrameDescription.Y*0.22>;
	declare Vec2 Size_DescriptionContent = <Size_FrameDescription.X + MLHelpers::SkewX(Size_FrameDescription.Y*0.78, 10.), Size_FrameDescription.Y*0.78>;

	declare Vec2 Size_SideButtons = <Size_SelectorContent.Y*0.45 + MLHelpers::SkewX(Size_SelectorContent.Y*0.45, 10.), Size_SelectorContent.Y*0.45>;
	declare Vec2 Pos_SideButtons = MLHelpers::SkewX(<-Size_Selector.X*0.475, -Size_Selector.Y*0.5>, 10.);

	/* Scroll view selectors */
	declare ScrollConfig = Scroll::K_Config {
		AnimEnabled = True,
		PreScrollEnabled = True,
		PreScrollBefore = 1,
		PreScrollAfter = 1,
		ScrollBarVisibility = Scroll::C_ScrollBarVisibility_Never,
		ScrollGrid = <8., 8.>,
		ScrollIndicator = True,
		ScrollIndicatorColorize = <1., 1., 1.>,
		ScrollIndicatorImage = Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique,
		ScrollIndicatorSize = 11.,
		ScrollIndicatorXOffset = -18.,
		ScrollIndicatorYOffset = -10.5,
		ScrollPadding = 27.5,
		Skew = -10.,
		SkewVAlign = Scroll::C_SkewVAlign_Top,
		WindowSize = <50., 83.>
	};
	declare Integer ColumnsNb = 1;
	declare Integer RowsNb = 4;
	declare Integer ElementsPerPage = ColumnsNb * RowsNb;
	declare Vec2 Size_ScrollElementMargin = <0., 3.5>;
	declare Vec2 Size_ScrollOverflow = <(ColumnsNb-1)*Size_ScrollElementMargin.X, (RowsNb-1)*Size_ScrollElementMargin.Y + ML::Max(0., RowsNb*Size_Selector.Y-ScrollConfig.WindowSize.Y)>;
	declare Vec2 Size_ScrollElement = Scroll::GetElementSize(ScrollConfig.WindowSize, Size_ScrollElementMargin, ColumnsNb, RowsNb, Size_ScrollOverflow);
	declare Integer ElementsNb = Scroll::GetRequiredElementsNb(ScrollConfig.WindowSize, Size_ScrollElement, Size_ScrollElementMargin, ColumnsNb);

	declare Text ML_Selectors = "";
	for (Index, 1, ElementsNb) {
		ML_Selectors ^= """
			<frame id="frame-selector-{{{Index}}}" class="{{{Scroll::C_Class_Element}}} {{{C_Class_SelectorFrame}}}" z-index="5" hidden="1">
				<frame id="frame-selector-align" pos="{{{MLHelpers::Skew(Size_Selector.X*0.5, -Size_SelectorHeader.Y*0.5, 10.)}}}">
					<frame id="frame-header">
						<frameinstance id="asset-header-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_SelectorHeader.X}}}" data-height="{{{Size_SelectorHeader.Y}}}" data-styles="{{{ExpendableAsset::C_Style_LeftEdgeRounded}}}" data-color="{{{ColorPalette::C_Color_DarkBlue}}}" data-opacity="0.6" data-halign="center" data-valign="center" z-index="0"/>
						<label id="label-selector-name" size="{{{Size_SelectorHeader.X*0.9}}} {{{Size_SelectorHeader.Y*0.8}}}" pos="0 -0.3" class="text-extrabold" textsize="2.7" halign="center" opacity="0.6" z-index="3"/>
					</frame>
					<frame id="frame-content" pos="{{{MLHelpers::Skew(0., -Size_Selector.Y*0.5, 10.)}}}">
						<frameinstance id="asset-content-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_SelectorContent.X}}}" data-height="{{{Size_SelectorContent.Y}}}" data-styles="{{{ExpendableAsset::C_Style_RightEdgeRounded}}}" data-color="{{{ColorPalette::C_Color_GreenTwo}}}" data-opacity="0.6" data-halign="center" data-valign="center" z-index="0"/>
						<frameinstance id="selector" modelid="{{{Selector::C_Name}}}" data-width="{{{Size_SelectorContent.X}}}" data-height="{{{Size_SelectorContent.Y*0.7}}}" data-buttons-opacity-unfocused="0." data-choices-loop="true" data-halign="center" data-valign="center" z-index="10"/>
					</frame>
					<frame id="frame-side-buttons" pos="{{{Pos_SideButtons.X}}} {{{Pos_SideButtons.Y}}}" scale="0." hidden="1">
						<frameinstance id="button-icon-download-asset" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-Size_SideButtons.X, 0.5*(Size_SelectorContent.Y - Size_SideButtons.Y), 10.)}}}" data-halign="right" data-size="{{{Size_SideButtons.Y*0.8}}} {{{Size_SideButtons.Y*0.8}}}" data-bind="action1" data-hideformouse="1" />
						<frameinstance
							id="button-download-asset-{{{Index}}}"
							pos="{{{MLHelpers::Skew(0., 0.5*(Size_SelectorContent.Y - Size_SideButtons.Y), 10.)}}}"
							modelid="{{{ExpendableButton::C_Name}}}"
							class="{{{Navigation::C_Class}}} {{{C_Class_DownloadAsset}}}"
							data-focus-opacity-focused="0."
							data-icon-size="{{{Size_SideButtons.Y*0.8}}} {{{Size_SideButtons.Y*0.8}}}"
							data-icon-image="{{{Const::C_ImageUrl_Icon_Download_Inc}}}"
							data-background-color-focused="{{{ColorPalette::C_Color_GreenTwo}}}"
							data-background-color-unfocused="{{{ColorPalette::C_Color_GreenTwo}}}"
							data-styles="{{{ExpendableButton::C_Style_ScoresTableIcons}}} {{{ExpendableButton::C_Style_Stack}}}"
							data-width="{{{Size_SideButtons.X}}}" data-height="{{{Size_SideButtons.Y}}}"
							data-halign="right" data-valign="center"
							data-nav-inputs="select"
							data-nav-targets="_"
							data-nav-group="{{{C_NavGroup_MouseOnly}}}"
							data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
						/>
						<frameinstance id="button-icon-remove-asset" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-Size_SideButtons.X, 0.5*(-Size_SelectorContent.Y + Size_SideButtons.Y), 10.)}}}" data-halign="right" data-size="{{{Size_SideButtons.Y*0.8}}} {{{Size_SideButtons.Y*0.8}}}" data-bind="action2" data-hideformouse="1" />
						<frameinstance
							id="button-remove-asset-{{{Index}}}"
							pos="{{{MLHelpers::Skew(0., 0.5*(-Size_SelectorContent.Y + Size_SideButtons.Y), 10.)}}}"
							modelid="{{{ExpendableButton::C_Name}}}"
							class="{{{Navigation::C_Class}}} {{{C_Class_RemoveAsset}}}"
							data-focus-opacity-focused="0."
							data-icon-size="{{{Size_SideButtons.Y*0.8}}} {{{Size_SideButtons.Y*0.8}}}"
							data-icon-image="{{{Const::C_ImageUrl_Icon_Bin_Inc}}}"
							data-background-color-focused="{{{ColorPalette::C_Color_GreenTwo}}}"
							data-background-color-unfocused="{{{ColorPalette::C_Color_GreenTwo}}}"
							data-styles="{{{ExpendableButton::C_Style_ScoresTableIcons}}} {{{ExpendableButton::C_Style_Stack}}}"
							data-width="{{{Size_SideButtons.X}}}" data-height="{{{Size_SideButtons.Y}}}"
							data-halign="right" data-valign="center"
							data-nav-inputs="select"
							data-nav-targets="_"
							data-nav-group="{{{C_NavGroup_MouseOnly}}}"
							data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
						/>
					</frame>
					<frame size="{{{Size_Selector.X}}} {{{Size_Selector.Y}}}" pos="{{{MLHelpers::Skew(0., -Size_SelectorContent.Y*0.5, 10.)}}}" halign="center" valign="center" z-index="10">
						<quad id="quad-hitbox" size="{{{Size_AdjustedSelector.X}}} {{{Size_AdjustedSelector.Y*1.5}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}" halign="center" valign="center" rot="10"/>
					</frame>
				</frame>
			</frame>
		""";
	}

	/* Club icon preview */
	declare Text ML_ClubIcons = "";
	declare Vec2 Size_Spacing = <3.9, 3.9>;
	declare Vec2 Size_ClubIcon = MLHelpers::KeepRatioFromY(608., 272., 19.);
	declare Vec2 Size_AdjustedClubIcon = <Size_ClubIcon.X - MLHelpers::SkewX(Size_ClubIcon.Y, 10.), Size_ClubIcon.Y>;
	declare Vec2 Pos_ClubName = MLHelpers::SkewX(<5., -Size_ClubIcon.Y + 3.>, 10.);
	for (ColumnIndex, 0, 4) {
		for (RowIndex, 0, 3) {
			ML_ClubIcons ^= """
				<quad id="quad-tile" size="{{{Size_ClubIcon.X}}} {{{Size_ClubIcon.Y}}}" pos="{{{MLHelpers::Skew(ColumnIndex * (Size_AdjustedClubIcon.X + Size_Spacing.X), -RowIndex * (Size_AdjustedClubIcon.Y + Size_Spacing.Y), 10.)}}}" image="{{{Const::C_ImageUrl_ClubActivity}}}" colorize="{{{ColorPalette::C_Color_GreenFour}}}" opacity="0.6" z-index="0"/>
			""";
			if (ColumnIndex == 1 && RowIndex == 1) {
				ML_ClubIcons ^= """
					<frame id="frame-tile-icon" pos="{{{MLHelpers::Skew(ColumnIndex * (Size_AdjustedClubIcon.X + Size_Spacing.X), -RowIndex * (Size_AdjustedClubIcon.Y + Size_Spacing.Y), 10.)}}}" z-index="1">
						<quad id="quad-background" size="{{{Size_ClubIcon.X}}} {{{Size_ClubIcon.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" keepratio="clip" z-index="0"/>
						<quad id="quad-club-icon" size="{{{Size_ClubIcon.X}}} {{{Size_ClubIcon.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip" z-index="1"/>
						<quad id="quad-gradient" size="{{{Size_ClubIcon.X}}} {{{Size_ClubIcon.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity=".4" z-index="2"/>
						<label id="label-name" size="{{{Size_ClubIcon.X*0.9}}} 10." pos="{{{Pos_ClubName.X}}} {{{Pos_ClubName.Y}}}" class="text-semibold" halign="left" textsize="1.5" z-index="3"/>
						<quad id="quad-contour" size="{{{Size_ClubIcon.X}}} {{{Size_ClubIcon.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" colorize="FFF" z-index="4"/>
					</frame>
				""";
			}
		}
	}

	/* Club vertical asset preview */
	declare Text ML_ClubVerticals = "";
	declare Real SizeX_Spacing = 3.5;
	declare Vec2 Size_ClubVertical = MLHelpers::KeepRatioFromY(612., 800., 67.);
	declare Vec2 Pos_VerticalClubName = MLHelpers::SkewX(<-Size_ClubVertical.X/2 + 2., -Size_ClubVertical.Y/2 + 6.>, 10.);
	for (Index, 0, 4) {
		ML_ClubVerticals ^= """
			<quad id="quad-tile" size="{{{Size_ClubVertical.X}}} {{{Size_ClubVertical.Y}}}" pos="{{{Index*(Size_ClubVertical.X - MLHelpers::SkewX(Size_ClubVertical.Y, 10.) + SizeX_Spacing)}}} 0" image="{{{Const::C_ImageUrl_Clubs_Vertical}}}" colorize="{{{ColorPalette::C_Color_GreenFour}}}" opacity="0.6" z-index="0"/>
		""";
		if (Index == 1) {
			ML_ClubVerticals ^= """
				<frame id="frame-tile-vertical" pos="{{{Index*(Size_ClubVertical.X - MLHelpers::SkewX(Size_ClubVertical.Y, 10.) + SizeX_Spacing)}}} 0">
					<quad id="quad-background" size="{{{Size_ClubVertical.X}}} {{{Size_ClubVertical.Y}}}" image="{{{Const::C_ImageUrl_Clubs_Vertical_BG}}}" keepratio="clip" z-index="0"/>
					<quad id="quad-club-vertical" size="{{{Size_ClubVertical.X}}} {{{Size_ClubVertical.Y}}}" image="{{{Const::C_ImageUrl_Clubs_Vertical_Default}}}" alphamask="{{{Const::C_ImageUrl_Clubs_Vertical_Mask}}}" keepratio="clip" z-index="1"/>
					<quad id="quad-gradient" size="{{{Size_ClubVertical.X}}} {{{Size_ClubVertical.Y}}}" image="{{{Const::C_ImageUrl_Clubs_Vertical_Gradient}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity=".4" z-index="2"/>
					<label id="label-name" size="{{{Size_ClubVertical.X*0.9}}} 10." pos="{{{Pos_VerticalClubName.X}}} {{{Pos_VerticalClubName.Y}}}" class="text-semibold" halign="left" textsize="1.5" z-index="3"/>
					<quad id="quad-contour" size="{{{Size_ClubVertical.X}}} {{{Size_ClubVertical.Y}}}" image="{{{Const::C_ImageUrl_Clubs_Vertical_Contour}}}" colorize="FFF" z-index="4"/>
				</frame>
			""";
		}
	}
	
	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Page -->
<frameinstance modelid="{{{BrowserAPI::C_Name}}}" id="frame-browser" z-index="{{{Const::C_ZIndex_BrowserAPI}}}" hidden="1"/>
<frameinstance id="loadingspinner-club-create-edit" modelid="{{{LoadingSpinner::C_Name}}}" data-dimmer="true" data-opacity="0." z-index="{{{Const::C_ZIndex_Loading}}}"/>

<!-- Frame global -->
<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="cancel;appmenu" data-nav-targets="_;_" data-nav-group="{{{C_NavGroup_Global}}}">
	<frameinstance id="popupmultichoice-theme" modelid="{{{PopUpMultiChoice::C_Name}}}" data-choices="{{{TL::MLEncode(C_Choices_Theme.tojson())}}}" z-index="30" hidden="1"/>
	<frameinstance id="popupmultichoice-create-club" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_CreateClubTitle}}}" data-choices="{{{TL::MLEncode(C_Choices_CreateClub.tojson())}}}" data-description="{{{TL::MLEncode(Description_CreateClub.tojson())}}}" z-index="10" hidden="1"/>
	<frameinstance id="popupmultichoice-delete-club" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_DeleteClubTitle}}}" data-choices="{{{TL::MLEncode(C_Choices_DeleteClub.tojson())}}}" data-description="{{{TL::MLEncode(Description_DeleteClub.tojson())}}}" data-styles-secondchoice="{{{PopUpMultiChoice::C_ChoiceStyle_Default}}} {{{ExpendableButton::C_Style_ButtonWarning}}}" z-index="10" hidden="1"/>
	<frameinstance id="navigationtabs-club-create-edit" modelid="{{{NavigationTabs::C_Name}}}" pos="{{{MLHelpers::Skew(-131., 38.5, 10.)}}}" data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}" data-halign="left" z-index="5"/>
	<quad id="quad-dimmer" size="320 180" halign="center" valign="center" bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.4" fullscreen="1" z-index="-1"/>
	<label id="label-title" pos="{{{MLHelpers::Skew(-132., 59.5, 10.)}}}" size="200 10" class="text-extrabold" text="{{{Text_ClubCreation}}}" textsize="13.3" halign="left"/>

	<!-- Tab general -->
	<frame id="frame-tab-general">
		<frame 
			id="frame-privacy" pos="{{{MLHelpers::Skew(-76.5, 26.5, 10.)}}}"
			class="{{{Navigation::C_Class}}} {{{C_Class_SelectorFrame}}}"
			data-nav-inputs="down"
			data-nav-targets="textfield-name"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="quad-hitbox"
		>
			<frame id="frame-left" pos="{{{-0.5*(Size_FramePrivacy.X - Size_PrivacyLeft.X + MLHelpers::SkewX(Size_FramePrivacy.Y, 10.))}}} 0">
				<frameinstance id="asset-header-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_PrivacyLeft.X}}}" data-height="{{{Size_PrivacyLeft.Y}}}" data-styles="{{{ExpendableAsset::C_Style_LeftEdgeRounded}}}" data-color="{{{ColorPalette::C_Color_DarkBlue}}}" data-opacity="0.6" data-halign="center" data-valign="center" z-index="0"/>
				<label id="label-selector-name" size="{{{Size_PrivacyLeft.X*0.9}}} {{{Size_PrivacyLeft.Y}}}" pos="{{{-Size_PrivacyLeft.X*0.43}}} -0.3" class="text-semibold" text="{{{Text_PrivacySettings}}}" textsize="2." opacity="0.6" halign="left" z-index="3"/>
			</frame>
			<frame id="frame-right" pos="{{{0.5*(Size_FramePrivacy.X - Size_PrivacyRight.X + MLHelpers::SkewX(Size_FramePrivacy.Y, 10.))}}} 0">
				<frameinstance id="asset-content-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_PrivacyRight.X}}}" data-height="{{{Size_PrivacyRight.Y}}}" data-styles="{{{ExpendableAsset::C_Style_RightEdgeRounded}}}" data-color="{{{ColorPalette::C_Color_GreenTwo}}}" data-opacity="0.6" data-halign="center" data-valign="center" z-index="0"/>
				<frameinstance id="selector" modelid="{{{Selector::C_Name}}}" data-width="{{{Size_PrivacyRight.X*0.95}}}" data-height="{{{Size_PrivacyRight.Y*0.8}}}" data-choices="{{{TL::MLEncode(C_Choices_PrivacySettings.tojson())}}}" data-choices-loop="true" data-halign="center" data-valign="center" z-index="10"/>
			</frame>
			<frame size="{{{Size_FramePrivacy.X + 2*MLHelpers::SkewX(Size_FramePrivacy.Y, 10.)}}} {{{Size_FramePrivacy.Y}}}" halign="center" valign="center" z-index="10">
				<quad id="quad-hitbox" size="{{{Size_AdjustedPrivacy.X}}} {{{Size_AdjustedPrivacy.X}}}" scriptevents="1" class="{{{Navigation::C_Class_ActivationZone}}}" halign="center" valign="center" rot="10"/>
			</frame>
		</frame>
		<frame id="frame-textfield-name" pos="{{{MLHelpers::Skew(-76.5, 16., 10.)}}}">
			<frameinstance id="asset-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_TextFieldHeader.X}}}" data-height="{{{Size_TextFieldHeader.Y}}}" data-styles="{{{ExpendableAsset::C_Style_LeftEdgeRounded}}}" data-color="{{{ColorPalette::C_Color_DarkBlue}}}" data-halign="center" data-valign="center" z-index="0"/>
			<label id="label-header" size="{{{Size_TextFieldHeader.X}}} {{{Size_TextFieldHeader.Y*0.8}}}" pos="{{{-Size_TextFieldHeader.X*0.47}}} -0.3" class="text-extrabold" text="{{{Text_ClubName}}}" textsize="2.5" opacity="0.6" halign="left"/>
			<frameinstance 
				id="textfield-name" pos="{{{MLHelpers::Skew(0., -Size_FrameTextField.Y*0.5, 10.)}}}"
				modelid="{{{TextField::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-size="{{{Size_TextFieldContent.X}}} {{{Size_TextFieldContent.Y}}}"
				data-contouropacityfocus="0."
				data-contouropacityedit="0."
				data-textsize="2.5"
				data-bgopacityunfocus="0.6"
				data-bgcolorfocus="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-bgcolorunfocus="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;up;down;left;right"
				data-nav-targets="_;frame-privacy;textfield-tag;button-back;button-create-edit"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="{{{TextField::C_NavZone}}}"
			/>
		</frame>
		<frame id="frame-textfield-tag" pos="{{{MLHelpers::Skew(-76.5, -3.5, 10.)}}}">
			<frameinstance id="asset-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_TextFieldHeader.X}}}" data-height="{{{Size_TextFieldHeader.Y}}}" data-styles="{{{ExpendableAsset::C_Style_LeftEdgeRounded}}}" data-color="{{{ColorPalette::C_Color_DarkBlue}}}" data-halign="center" data-valign="center" z-index="0"/>
			<label id="label-header" size="{{{Size_TextFieldHeader.X}}} {{{Size_TextFieldHeader.Y*0.8}}}" pos="{{{-Size_TextFieldHeader.X*0.47}}} -0.3" class="text-extrabold" text="{{{Text_ClubTag}}}" textsize="2.5" opacity="0.6" halign="left"/>
			<frameinstance 
				id="textfield-tag" pos="{{{MLHelpers::Skew(0., -Size_FrameTextField.Y*0.5, 10.)}}}"
				modelid="{{{TextField::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-size="{{{Size_TextFieldContent.X}}} {{{Size_TextFieldContent.Y}}}"
				data-contouropacityfocus="0."
				data-contouropacityedit="0."
				data-textsize="2.5"
				data-bgopacityunfocus="0.6"
				data-bgcolorfocus="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-bgcolorunfocus="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;up;down;left;right"
				data-nav-targets="_;textfield-name;textfield-description;button-back;button-create-edit"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="{{{TextField::C_NavZone}}}"
			/>
		</frame>
		<frame id="frame-textfield-description" pos="{{{MLHelpers::Skew(-76.5, -23., 10.)}}}">
			<frameinstance id="asset-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_DescriptionHeader.X}}}" data-height="{{{Size_DescriptionHeader.Y}}}" data-styles="{{{ExpendableAsset::C_Style_LeftEdgeRounded}}}" data-color="{{{ColorPalette::C_Color_DarkBlue}}}" data-halign="center" data-valign="center" z-index="0"/>
			<label id="label-header" size="{{{Size_DescriptionHeader.X}}} {{{Size_DescriptionHeader.Y*0.8}}}" pos="{{{-Size_DescriptionHeader.X*0.47}}} -0.3" class="text-extrabold" text="{{{Text_ClubDescription}}}" textsize="2.5" opacity="0.6" halign="left"/>
			<frameinstance 
				id="textfield-description" pos="{{{MLHelpers::Skew(0., -Size_FrameDescription.Y*0.5, 10.)}}}"
				modelid="{{{TextField::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-size="{{{Size_DescriptionContent.X}}} {{{Size_DescriptionContent.Y}}}"
				data-contouropacityfocus="0."
				data-contouropacityedit="0."
				data-textsize="2.5"
				data-bgopacityunfocus="0.6"
				data-bgcolorfocus="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-bgcolorunfocus="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-textfieldtype="{{{TextField::C_TextFieldType_TextEdit}}}"
				data-autonewline="1" data-maxline="4"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;up;down;left;right"
				data-nav-targets="_;textfield-tag;button-back;button-back;button-create-edit"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="{{{TextField::C_NavZone}}}"
			/>
		</frame>
	</frame>

	<!-- Tab branding and stadium-->
	<frame id="frame-tab-branding-stadium" hidden="1">
		<frame id="frame-scroll-view" z-index="3">
			<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-selectors" z-index="1" />
			<frame
				id="scroll-selectors"
				pos="{{{-ScrollConfig.WindowSize.X/2 - 101.7}}} 30.5"
				class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
				data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
				data-pager-page-size="{{{ElementsPerPage}}}"
				data-elements-per-line="{{{ColumnsNb}}}"
				data-element-size="{{{Size_ScrollElement.X}}} {{{Size_ScrollElement.Y}}}"
				data-margin-size="{{{Size_ScrollElementMargin.X}}} {{{Size_ScrollElementMargin.Y}}}"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-scroll-locked="1"
				hidden="1"
			>
				<quad class="{{{Scroll::C_Class_ScrollEvent}}}" scriptevents="1" z-index="-1" />
				{{{ML_Selectors}}}
			</frame>
		</frame>

		<label id="label-preview" pos="133.5 33" size="80 10" class="text-semibold" text="{{{Text_Preview}}}" textsize="3." halign="right" valign="bottom" opacity="0.8"/>
		<frame id="frame-preview-icon" pos="-81 30.5" hidden="1">
			{{{ML_ClubIcons}}}
		</frame>
		<frame id="frame-preview-vertical" pos="-89.5 30.5" hidden="1">
			{{{ML_ClubVerticals}}}
		</frame>
		<frame id="frame-preview-asset" pos="7.4 -17" hidden="1">
			<label id="label-no-image" size="{{{Size_ClubBackground.X}}} 10" class="text-semibold" textsize="3." autonewline="1" z-index="0"/>
			<quad id="quad-club-asset" size="{{{Size_ClubBackground.X}}} {{{Size_ClubBackground.Y}}}" halign="center" valign="center" z-index="1"/>
			<quad id="quad-background-overlay" size="{{{Size_ClubBackground.X}}} {{{Size_ClubBackground.Y}}}" image="{{{Const::C_ImageUrl_ClubCreate_Background_Overlay}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" halign="center" valign="center" opacity="0.6" z-index="2" hidden="1"/>
			<frame id="frame-club-sticker-1x1" z-index="1" hidden="1">
				<quad id="quad-stickers-1x1-background" size="{{{Size_ClubBackground.X}}} {{{Size_ClubBackground.Y}}}" image="{{{Const::C_ImageUrl_ClubCreate_1x1}}}" halign="center" valign="center" z-index="1"/>
				<quad id="quad-club-sticker-1x1" size="{{{Size_ClubSticker1x1.X}}} {{{Size_ClubSticker1x1.Y}}}" pos="0 5" halign="center" valign="center" keepratio="fit" z-index="2"/>
			</frame>
			<frame id="frame-club-sticker-4x1" z-index="1" hidden="1">
				<quad id="quad-stickers-4x1-background" size="{{{Size_ClubBackground.X}}} {{{Size_ClubBackground.Y}}}" image="{{{Const::C_ImageUrl_ClubCreate_4x1}}}" halign="center" valign="center" z-index="1"/>
				<quad id="quad-club-sticker-4x1" size="{{{Size_ClubSticker4x1.X}}} {{{Size_ClubSticker4x1.Y}}}" pos="0.3 0" halign="center" valign="center" z-index="2"/>
			</frame>
		</frame>
	</frame>

	<!-- Footer -->
	<frame id="frame-footer" pos="0 -73" z-index="2">
		<frameinstance id="button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="-150 0" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
		<frameinstance
			id="button-back" pos="-150 0"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-max-width="70."
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_PageBack}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;up;right"
			data-nav-targets="_;textfield-description;button-delete-club"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
		<frameinstance
			id="button-delete-club" pos="100 0"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_DeleteClubTitle}}}"
			data-icon-image="{{{Const::C_ImageUrl_Icon_Bin_Oblique}}}"
			data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonWarning}}}"
			data-halign="right" data-valign="center"
			data-nav-inputs="select;up;left;right"
			data-nav-targets="_;textfield-description;button-back;button-create-edit"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
		<frameinstance id="button-icon-create" modelid="{{{ButtonIcon::C_Name}}}" pos="145 0" data-halign="left" data-size="8 8" data-bind="appmenu" data-hideformouse="1" />
		<frameinstance
			id="button-create-edit" pos="145 0"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-max-width="70."
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}}"
			data-halign="right" data-valign="center"
			data-nav-inputs="select;up;left"
			data-nav-targets="_;textfield-description;button-delete-club"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
		<label id="label-info-general" pos="{{{MLHelpers::Skew(-2., 13., 10.)}}}" size="250 10" class="text-semibold"/>
		<label id="label-info-branding-stadium" pos="{{{MLHelpers::Skew(-2., 0., 10.)}}}" size="150 10" autonewline="1" maxline="3" class="text-semibold"/>
	</frame>
</frame>
""",
"""
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "MathLib" as ML
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_Selector {
	Text Name;
	Text MediaInfo;
	Vec2 MediaSize;
	Text MediaType;
	Text[] MediaFormat;
	Text[Text] Choices; //< APIName => name
}
#Struct K_Controls {
	CMlFrame Button_Back;
	CMlFrame Button_CreateOrEdit;
	CMlFrame Button_DeleteClub;
	CMlFrame Frame_ClubSticker1x1;
	CMlFrame Frame_ClubSticker4x1;
	CMlFrame Frame_PreviewAsset;
	CMlFrame Frame_PreviewIcon;
	CMlFrame Frame_PreviewVertical;
	CMlFrame Frame_Privacy;
	CMlFrame Frame_TabBrandingStadium;
	CMlFrame Frame_TabGeneral;
	CMlFrame LoadingSpinner_CreateOrEditClub;
	CMlFrame NavigationTabs_CreateOrEditClub;
	CMlFrame PopUpMultiChoice_Theme;
	CMlFrame PopUpMultiChoice_CreateClub;
	CMlFrame PopUpMultiChoice_DeleteClub;
	CMlFrame Scroll_Selectors;
	CMlFrame Selector_Privacy;
	CMlFrame TextField_Description;
	CMlFrame TextField_Name;
	CMlFrame TextField_Tag;
	CMlLabel Label_Info;
	CMlLabel Label_NoImage;
	CMlLabel Label_Preview;
	CMlLabel Label_Title;
	CMlQuad Quad_BackgroundOverlay;
	CMlQuad Quad_ClubAsset;
	CMlQuad Quad_ClubIcon;
	CMlQuad Quad_ClubSticker1x1;
	CMlQuad Quad_ClubSticker4x1;
	CMlQuad Quad_ClubVertical;
}
#Struct K_State {
	Boolean IsEditingClub;
	Text CommonTheme;
	Text[Text] SelectedChoiceIds; //< MediaType => ChoiceId
	K_Controls Controls;
	K_Selector[Integer] SelectorList;
	{{{ClubStruct::P}}}K_Club ClubInfo;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Choices_PrivacySettings {{{dump(C_Choices_PrivacySettings)}}}

#Const C_ClubThemes_Path {{{dump(ClubStruct::C_ClubThemes_Path)}}}
#Const C_ClubThemes_DisplayNames {{{dump(ClubStruct::C_ClubThemes_DisplayNames)}}}
#Const C_ClubThemes_Folders {{{dump(ClubStruct::C_ClubThemes_Folders)}}}
#Const C_ClubThemes_Files {{{dump(ClubStruct::C_ClubThemes_Files)}}}

#Const C_Choice_None "none"
#Const C_Choice_Custom "custom"

#Const C_ClubDescription_MaxChar 200
#Const C_ClubName_Limits <3, 20>
#Const C_ClubTag_Limits <0, 5>

// Branding selectors
#Const C_Selectors_Branding [
	K_Selector {
		//L16N [Club Edition] Select an icon asset for the club
		Name = _("|Image|Icon"),
		//L16N [Club Edition] Informations on icon , %1 will be the dimensions (e.g. "1920x1080") and %2 the format (e.g. "PNG, JPEG or DDS (DXT5)")
		MediaInfo = _("Icon: The first visible image of your club.\nDimensions: %1 - Format: %2"),
		MediaSize = <616., 276.>,
		MediaType = "{{{ClubStruct::C_MediaType_Icon}}}",
		MediaFormat = ["png", "jpg", "jpeg", "dds"]
	},
	K_Selector {
		//L16N [Club Edition] Select a vertical asset for the club
		Name = _("|Image|Vertical"),
		//L16N [Club Edition] Informations on vertical , %1 will be the dimensions (e.g. "1920x1080") and %2 the format (e.g. "PNG, JPEG or DDS (DXT5)")
		MediaInfo = _("Vertical: image used in My Clubs list.\nDimensions: %1 - Format: %2"),
		MediaSize = <712., 928.>,
		MediaType = "{{{ClubStruct::C_MediaType_Vertical}}}",
		MediaFormat = ["png", "jpg", "jpeg", "dds"]
	},
	K_Selector {
		//L16N [Club Edition] Select a background asset for the club
		Name = _("|Image|Background"),
		//L16N [Club Edition] Informations on background , %1 will be the dimensions (e.g. "1920x1080") and %2 the format (e.g. "PNG, JPEG or DDS (DXT5)")
		MediaInfo = _("Background: back image of your club details page.\nDimensions: %1 - Format: %2"),
		MediaSize = <1920., 1080.>,
		MediaType = "{{{ClubStruct::C_MediaType_Bg}}}",
		MediaFormat = ["png", "jpg", "jpeg", "dds"]
	}
]
	
// Stadium selectors
#Const C_Selectors_Stadium [
	K_Selector {
		//L16N [Club Edition] Select a 1x1 asset for the club that will be displayed on the road surface (at start, checkpoint and finish)
		Name = _("|Image|1x1 sticker"),
		//L16N [Club Edition] Informations on decal 1x1, %1 will be the dimensions (e.g. "1920x1080") and %2 the format (e.g. "PNG, JPEG or DDS (DXT5)")
		MediaInfo = _("Decal 1x1: image visible on the road surface (at start, checkpoint and finish).\nDimensions: %1 - Format: %2"),
		MediaSize = <1024., 1024.>,
		MediaType = "{{{ClubStruct::C_MediaType_Decal}}}",
		MediaFormat = ["png", "jpg", "jpeg", "dds"]
	},
	K_Selector {
		//L16N [Club Edition] Select a 4x4 asset for the club that will be displayed on the sponsor banner surrounding the road.
		Name = _("|Image|4x1 sticker"),
		//L16N [Club Edition] Informations on decal sponsor, %1 will be the dimensions (e.g. "1920x1080") and %2 the format (e.g. "PNG, JPEG or DDS (DXT5)")
		MediaInfo = _("Decal sponsor: image visible on the sponsor banner surrounding the road.\nDimensions: %1 - Format: %2\nAttention: your image content must be white with a black background."),
		MediaSize = <1024., 256.>,
		MediaType = "{{{ClubStruct::C_MediaType_DecalSponsor}}}",
		MediaFormat = ["png", "jpg", "jpeg", "dds"]
	},
	K_Selector {
		//L16N [Club Edition] Select a 16x9 asset for the club that will be displayed  on stadium's big screen.
		Name = _("|Image|16x9 screen"),
		//L16N [Club Edition] Informations on screen 16x9, %1 will be the dimensions (e.g. "1920x1080") and %2 the format (e.g. "PNG, JPEG or DDS (DXT5)")
		MediaInfo = _("Screen 16x9: image displayed on stadium's big screen.\nDimensions: %1 - Format: %2"),
		MediaSize = <1920., 1080.>,
		MediaType = "{{{ClubStruct::C_MediaType_Screen16x9}}}",
		MediaFormat = ["dds"]
	},
	K_Selector {
		//L16N [Club Edition] Select a 16x1 asset for the club that will be displayed on stadium's banners (under big screen).
		Name = _("|Image|16x1 screen"),
		//L16N [Club Edition] Informations on screen 16x1, %1 will be the dimensions (e.g. "1920x1080") and %2 the format (e.g. "PNG, JPEG or DDS (DXT5)")
		MediaInfo = _("Screen 16x1: image displayed on stadium's banners (under big screen).\nDimensions: %1 - Format: %2"),
		MediaSize = <4096., 256.>,
		MediaType = "{{{ClubStruct::C_MediaType_Screen16x1}}}",
		MediaFormat = ["dds"]
	},
	K_Selector {
		//L16N [Club Edition] Select a 8x1 asset for the club that will be displayed on stadium's bleachers.
		Name = _("|Image|8x1 screen"),
		//L16N [Club Edition] Informations on screen 8x1, %1 will be the dimensions (e.g. "1920x1080") and %2 the format (e.g. "PNG, JPEG or DDS (DXT5)")
		MediaInfo = _("Screen 8x1: image displayed on stadium's bleachers.\nDimensions: %1 - Format: %2"),
		MediaSize = <2048., 256.>,
		MediaType = "{{{ClubStruct::C_MediaType_Screen8x1}}}",
		MediaFormat = ["dds"]
	}
]
""",
"""
declare Ident G_TTSContextIdent_Tabs;
declare Ident G_TTSContextIdent_Selector;

/// Get the default name of the club
Text GetDefaultName() {
	return TL::SubText(LocalUser.Name^"'s club", 0, C_ClubName_Limits.Y); //< No translation here, it doesn't translate in the CMlFrame
}

/// Get the default tag of the club
Text GetDefaultTag(K_State _State) {
	return TL::ToUpperCase(TL::SubText(_State.ClubInfo.Name, 0, C_ClubTag_Limits.Y));
}

/// Lock all the navigation in the page
Void LockPage(K_State _State, Boolean _IsLocked) {
	{{{NavigationTabs::P}}}LockTabs(This, _State.Controls.NavigationTabs_CreateOrEditClub, _IsLocked);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", !_IsLocked);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", !_IsLocked);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_MouseOnly}}}", !_IsLocked);
	{{{Scroll::P}}}LockNavigation(_State.Controls.Scroll_Selectors, _IsLocked);
	{{{Selector::P}}}LockNavigation(_State.Controls.Selector_Privacy, _IsLocked);
	if ({{{Scroll::P}}}IsFocused(_State.Controls.Scroll_Selectors)) {
		{{{Selector::P}}}LockNavigation({{{Scroll::P}}}GetFocusedElement(_State.Controls.Scroll_Selectors).GetFirstChild("selector") as CMlFrame, _IsLocked);
	}
}

/// Update controller hints at the bottom of the screen
Void UpdateControllerInfo(Boolean _IsPopUpDisplayed) {
	declare Text[Text] ControllerInfos = ["A" => _("Select")];
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");

	if (_IsPopUpDisplayed) {
		ControllerInfos["B"] = _("Back");
	} else if ({{{Scroll::P}}}IsScroll(FocusedControl) && Platform::IsPC(System)) {
		ControllerInfos["action1"] = "{{{Text_Download}}}";
		ControllerInfos["action2"] = "{{{Text_Remove}}}";
	} else if (FocusedControl != Null && FocusedControl.HasClass("{{{C_Class_SelectorFrame}}}") || {{{Scroll::P}}}IsScroll(FocusedControl)) {
		ControllerInfos = ["left" => "", "right" => "{{{Text_SelectValue}}}"];
	} 

	ControllerInfo::SetButtons(ControllerInfos);
}

/// Display the pop-up asking the player if they want to use the same club theme for all club assets
K_State DisplayThemePopUp(K_State _State, CMlFrame _Control) {
	if (Platform::IsPC(System) || _Control == Null) return _State;
	declare K_State State = _State;

	if (!{{{ClubStruct::P}}}IsAnyThemeSelected(State.ClubInfo) && State.CommonTheme != "") State.CommonTheme = "";
	if ({{{ClubStruct::P}}}IsAnyThemeSelected(State.ClubInfo) && State.CommonTheme == "") {
		declare Text ThemeName = {{{Selector::P}}}GetSelectedChoice(_Control.GetFirstChild("selector") as CMlFrame).Id;
		if (C_ClubThemes_Folders.existskey(ThemeName)) {
			{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, State.Controls.PopUpMultiChoice_Theme, False);
			{{{PopUpMultiChoice::P}}}Open(This, State.Controls.PopUpMultiChoice_Theme);
			State.CommonTheme = ThemeName;
		}
	}

	return State;
}

/// Display an information message at the bottom of the screen
Void DisplayInfo(CMlLabel _Label_Info, Text _Text, Boolean _IsGeneralTabDisplayed, Boolean _IsError) {
	declare Vec2 Pos_Hidden = MLHelpers::SkewX(<-2., -1.>, 10.);
	if (_IsGeneralTabDisplayed) Pos_Hidden = MLHelpers::SkewX(<-2., 12.>, 10.);
	
	if ((_Text != "" && _Label_Info.Value != _Text) || (_Label_Info.Value == _Text && !_Label_Info.Visible)) {
		_Label_Info.SetText(_Text);
		_Label_Info.Opacity = 0.;
		_Label_Info.RelativePosition_V3 = Pos_Hidden;
		Tools::FitLabelValue(_Label_Info, 3., 1., 0.5);
		if (_IsError) _Label_Info.TextColor = ColorPalette::C_Color_Vec3_ErrorRed;
		else _Label_Info.TextColor = <1., 1., 1.>;
		AnimMgr.Flush(_Label_Info);
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Hidden.X + MLHelpers::SkewX(1., 10.)^" "^Pos_Hidden.Y+1.^"\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else if (_Text == "") {
		AnimMgr.Flush(_Label_Info);
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

/// Display image browser
Void DisplayBrowser(K_State _State, CMlFrame _Frame_Browser, Boolean _IsVisible) {
	_Frame_Browser.Visible = _IsVisible;
	{{{BrowserAPI::P}}}FocusBrowser(This, _IsVisible);
	if (!_IsVisible) UpdateControllerInfo(False);
	LockPage(_State, _IsVisible);
}

/// Update the preview depending on the focused selector
Void UpdatePreview(K_State _State, K_Selector _SelectorInfo) {
	declare Text SelectedChoiceId = _State.SelectedChoiceIds.get(_SelectorInfo.MediaType, C_Choice_None);
	declare Text MediaUrl;

	/* Update controls visibility */
	_State.Controls.Frame_PreviewIcon.Visible = _SelectorInfo.Name != "" && _SelectorInfo.MediaType == "{{{ClubStruct::C_MediaType_Icon}}}";
	_State.Controls.Frame_PreviewVertical.Visible = _SelectorInfo.Name != "" && _SelectorInfo.MediaType == "{{{ClubStruct::C_MediaType_Vertical}}}";
	_State.Controls.Frame_PreviewAsset.Visible = !_State.Controls.Frame_PreviewIcon.Visible && !_State.Controls.Frame_PreviewVertical.Visible;
	_State.Controls.Frame_ClubSticker1x1.Visible = _SelectorInfo.MediaType == "{{{ClubStruct::C_MediaType_Decal}}}";
	_State.Controls.Frame_ClubSticker4x1.Visible = _SelectorInfo.MediaType == "{{{ClubStruct::C_MediaType_DecalSponsor}}}";
	_State.Controls.Quad_BackgroundOverlay.Visible = _SelectorInfo.MediaType == "{{{ClubStruct::C_MediaType_Bg}}}";
	_State.Controls.Quad_ClubAsset.Visible = !_State.Controls.Frame_ClubSticker1x1.Visible && !_State.Controls.Frame_ClubSticker4x1.Visible;

	/* Get media url */
	switch (SelectedChoiceId) {
		case C_Choice_Custom: {
			if (_State.IsEditingClub && Platform::IsFromFirstParty(System)) {
				MediaUrl = {{{ClubStruct::P}}}GetMediaFromType({{{ClubStore::P}}}GetUserCurrentClub(), _SelectorInfo.MediaType);
			} else {
				MediaUrl = {{{ClubStruct::P}}}GetMediaFromType(_State.ClubInfo, _SelectorInfo.MediaType);
				if (!TL::StartsWith("file", MediaUrl) && !TL::StartsWith("http", MediaUrl)) {
					MediaUrl = {{{BrowserAPI::P}}}C_BasePath^MediaUrl;
				}
			}
		}
		case C_Choice_None: {
			switch (_SelectorInfo.MediaType) {
				case "{{{ClubStruct::C_MediaType_Icon}}}": MediaUrl = "{{{Const::C_ImageUrl_ClubActivity_Default}}}";
				case "{{{ClubStruct::C_MediaType_Vertical}}}": MediaUrl = "{{{Const::C_ImageUrl_Clubs_Vertical_Default}}}";
				case "{{{ClubStruct::C_MediaType_Bg}}}": MediaUrl = "{{{Const::C_ImageUrl_Club_Background_Default}}}";
			}
		}
		default: {
			if (C_ClubThemes_Folders.existskey(SelectedChoiceId)) {
				MediaUrl = {{{ClubStruct::P}}}GetClubThemeUrl(SelectedChoiceId, _SelectorInfo.MediaType);
			}
		}
	}

	/* Update the asset corresponding to the media type */
	switch (_SelectorInfo.MediaType) {
		case "{{{ClubStruct::C_MediaType_Icon}}}": _State.Controls.Quad_ClubIcon.ChangeImageUrl(MediaUrl);
		case "{{{ClubStruct::C_MediaType_Decal}}}": _State.Controls.Quad_ClubSticker1x1.ChangeImageUrl(MediaUrl);
		case "{{{ClubStruct::C_MediaType_Vertical}}}": _State.Controls.Quad_ClubVertical.ChangeImageUrl(MediaUrl);
		case "{{{ClubStruct::C_MediaType_DecalSponsor}}}": {
			_State.Controls.Quad_ClubSticker4x1.AlphaMaskUrl = MediaUrl;
			if (_State.Controls.Quad_ClubSticker4x1.AlphaMaskUrl == "") _State.Controls.Quad_ClubSticker4x1.ChangeImageUrl("");
			else _State.Controls.Quad_ClubSticker4x1.ChangeImageUrl("{{{Const::C_ImageUrl_ClubCreate_WhitePixel}}}");
		}
		default: _State.Controls.Quad_ClubAsset.ChangeImageUrl(MediaUrl);
	}

	/* Update image size */
	switch (_SelectorInfo.MediaType) {
		case "{{{ClubStruct::C_MediaType_Screen8x1}}}": _State.Controls.Quad_ClubAsset.Size = MLHelpers::KeepRatioFromX(_SelectorInfo.MediaSize, {{{Size_ClubBackground.X}}}*0.75);
		case "{{{ClubStruct::C_MediaType_Bg}}}", "{{{ClubStruct::C_MediaType_Screen16x9}}}" ,"{{{ClubStruct::C_MediaType_Screen16x1}}}": {
			_State.Controls.Quad_ClubAsset.Size = MLHelpers::KeepRatioFromX(_SelectorInfo.MediaSize, {{{Size_ClubBackground.X}}});
		}
	}
	
	/* Update labels */
	_State.Controls.Label_NoImage.Visible = MediaUrl == "" && _SelectorInfo.Name != "" && !_State.Controls.Quad_BackgroundOverlay.Visible;
	_State.Controls.Label_Preview.Visible = !_State.Controls.Label_NoImage.Visible || _State.Controls.Frame_ClubSticker1x1.Visible || _State.Controls.Frame_ClubSticker4x1.Visible;
	if (_State.Controls.Label_NoImage.Visible) _State.Controls.Label_NoImage.SetText(TL::Compose("{{{Text_NoImage}}}", _SelectorInfo.Name));
	if (_State.Controls.Label_Preview.Visible) {
		switch (_SelectorInfo.MediaType) {
			case "{{{ClubStruct::C_MediaType_Icon}}}", "{{{ClubStruct::C_MediaType_Vertical}}}": _State.Controls.Label_Preview.RelativePosition_V3 = <133.5, 33.>;
			case "{{{ClubStruct::C_MediaType_Screen8x1}}}": _State.Controls.Label_Preview.RelativePosition_V3 = <70.5, -6.5>;
			case "{{{ClubStruct::C_MediaType_Screen16x1}}}": _State.Controls.Label_Preview.RelativePosition_V3 = <92., -9.>;
			default: _State.Controls.Label_Preview.RelativePosition_V3 = <92., 33.>;
		}
	}

	/* Update displayed info */
	if (_SelectorInfo.MediaFormat.count > 1) {
		DisplayInfo(_State.Controls.Label_Info, TL::Compose(_SelectorInfo.MediaInfo, ML::NearestInteger(_SelectorInfo.MediaSize.X)^"x"^ML::NearestInteger(_SelectorInfo.MediaSize.Y), "{{{Text_Format_All}}}"), _State.Controls.Frame_TabGeneral.Visible, False);
	} else {
		DisplayInfo(_State.Controls.Label_Info, TL::Compose(_SelectorInfo.MediaInfo, ML::NearestInteger(_SelectorInfo.MediaSize.X)^"x"^ML::NearestInteger(_SelectorInfo.MediaSize.Y), "{{{Text_Format_DDS}}}"), _State.Controls.Frame_TabGeneral.Visible, False);
	}
}

/// Update text to speech context
Void Private_TTSContextUpdate(CMlFrame _Frame_Selector, Boolean _IsFilterUpdated) {
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
	if (FocusedControl != Null && FocusedControl.HasClass("{{{C_Class_SelectorFrame}}}") || {{{Scroll::P}}}IsScroll(FocusedControl)) {
		if (G_TTSContextIdent_Selector == NullId) G_TTSContextIdent_Selector = ParentApp.TTS_Context_Enter({{{Const::C_TTSContextLevel_Setting}}});
		ParentApp.TTS_Context_Change(G_TTSContextIdent_Selector, _Frame_Selector.GetFirstChild("label-selector-name") as CMlLabel);
		if (!_IsFilterUpdated) ParentApp.TTS_Context_Read({{{Const::C_TTSContextLevel_Setting}}});
		{{{Selector::P}}}GetLabel(_Frame_Selector.GetFirstChild("selector") as CMlFrame).TTS_Focus();
	} else {
		G_TTSContextIdent_Selector = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Selector);
	}
}

K_State ChangeAsset(K_State _State, Text _MediaType, Text _MediaUrl, Text _ChoiceId) {
	declare K_State State = _State;
	declare Text MediaUrl = _MediaUrl;

	if (_ChoiceId == C_Choice_Custom && State.IsEditingClub && Platform::IsFromFirstParty(System)) {
		MediaUrl = {{{ClubStruct::P}}}GetMediaFromType({{{ClubStore::P}}}GetUserCurrentClub(), _MediaType);
	} else if (C_ClubThemes_Folders.existskey(_ChoiceId)) {
		MediaUrl = _ChoiceId;
	} else if (_ChoiceId == C_Choice_None) {
		MediaUrl = "";
	}

	switch (_MediaType) {
		case "{{{ClubStruct::C_MediaType_Icon}}}": State.ClubInfo.IconUrl = MediaUrl;
		case "{{{ClubStruct::C_MediaType_Vertical}}}": State.ClubInfo.VerticalUrl = MediaUrl;
		case "{{{ClubStruct::C_MediaType_Bg}}}": State.ClubInfo.BgUrl = MediaUrl;
		case "{{{ClubStruct::C_MediaType_Decal}}}": State.ClubInfo.DecalUrl = MediaUrl;
		case "{{{ClubStruct::C_MediaType_DecalSponsor}}}": State.ClubInfo.DecoImageUrl_DecalSponsor4x1 = MediaUrl;
		case "{{{ClubStruct::C_MediaType_Screen16x9}}}": State.ClubInfo.DecoImageUrl_Screen16x9 = MediaUrl;
		case "{{{ClubStruct::C_MediaType_Screen16x1}}}": State.ClubInfo.DecoImageUrl_Screen16x1 = MediaUrl;
		case "{{{ClubStruct::C_MediaType_Screen8x1}}}": State.ClubInfo.DecoImageUrl_Screen8x1 = MediaUrl;
	}

	return State;
}

/// Download the image associated to the given selector
Void DownloadAsset(K_State _State, K_Selector _SelectorInfo) {
	if (_State.SelectedChoiceIds.get(_SelectorInfo.MediaType, C_Choice_None) == C_Choice_Custom) {
		declare Text ImageUrl = {{{ClubStruct::P}}}GetMediaFromType(_State.ClubInfo, _SelectorInfo.MediaType);
		if (!TL::StartsWith("file", ImageUrl) && Http.IsValidUrl(ImageUrl)) {
			OpenLink(ImageUrl, CMlScript::LinkType::ExternalBrowser);
		}
	}
}

/// Remove the image of the given selector
K_State RemoveAsset(K_State _State, K_Selector _SelectorInfo) {
	declare K_State State = _State;

	/* Remove asset url of club info */
	State = ChangeAsset(State, _SelectorInfo.MediaType, "", C_Choice_Custom);
	State.SelectedChoiceIds[_SelectorInfo.MediaType] = C_Choice_None;
	
	/* Update scroll and preview */
	{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Selectors, State.SelectorList.count);
	UpdatePreview(State, _SelectorInfo);

	return State;
}

/// Show and update a theme selector frame
Void ShowThemeSelector(K_State _State, CMlFrame _Frame_Selector, K_Selector _SelectorInfo) {
	declare CMlLabel Label_SelectorName <=> (_Frame_Selector.GetFirstChild("label-selector-name") as CMlLabel);
	declare CMlFrame Selector <=> (_Frame_Selector.GetFirstChild("selector") as CMlFrame);
	declare Text SelectedChoiceId = _State.SelectedChoiceIds.get(_SelectorInfo.MediaType, C_Choice_None);
	declare Text MediaUrl = {{{ClubStruct::P}}}GetMediaFromType(_State.ClubInfo, _SelectorInfo.MediaType);
	declare Text[Text] Choices = _SelectorInfo.Choices;

	/* Update available choices */
	if (Platform::IsFromFirstParty(System)) {
		Choices[C_Choice_None] = "{{{Text_None}}}";
		if (TL::StartsWith("http", MediaUrl)) {
			Choices[C_Choice_Custom] = "{{{Text_CustomImage}}}";
		}
	} else if (TL::StartsWith("http", MediaUrl)) {
		Choices[C_Choice_Custom] = "{{{Text_UpdateImage}}}";
	} else if (!TL::StartsWith("file", MediaUrl) && TL::Split("/", TL::Replace(MediaUrl, "\\", "/")).count > 0) {
		Choices[C_Choice_Custom] = TL::Split("/", TL::Replace(MediaUrl, "\\", "/"))[-1];
	} else if ({{{ClubStruct::P}}}IsClubThemeUrl(MediaUrl)) {
		Choices[C_Choice_Custom] = {{{ClubStruct::P}}}GetClubThemeName(MediaUrl);
	} else {
		Choices[C_Choice_None] = "{{{Text_UploadImage}}}";
	}

	/* Update the selector */
	_Frame_Selector.Show();
	Label_SelectorName.SetText(_SelectorInfo.Name);
	{{{Selector::P}}}SetChoices(This, Selector, Choices);
	if (Choices.count <= 1) {{{Selector::P}}}SetWidth(This, Selector, {{{Size_SelectorContent.X*1.2}}});
	else {{{Selector::P}}}SetWidth(This, Selector, {{{Size_SelectorContent.X}}});
	{{{Selector::P}}}SelectChoice(This, Selector, SelectedChoiceId, False);
}
Void HideThemeSelector(CMlFrame _Frame_Selector) {
	_Frame_Selector.Hide();
}

/// Focus and unfocus frames with a selector component inside
Void FocusSelector(CMlFrame _Frame_Selector, Boolean _Focused, Boolean _IsAnimated) {
	if (_Frame_Selector == Null || !_Frame_Selector.HasClass("{{{C_Class_SelectorFrame}}}")) return;
	declare CMlFrame Asset_HeaderBackground <=> (_Frame_Selector.GetFirstChild("asset-header-background") as CMlFrame);
	declare CMlFrame Asset_ContentBackground <=> (_Frame_Selector.GetFirstChild("asset-content-background") as CMlFrame);
	declare CMlFrame Selector <=> (_Frame_Selector.GetFirstChild("selector") as CMlFrame);
	declare CMlLabel Label_SelectorName <=> (_Frame_Selector.GetFirstChild("label-selector-name") as CMlLabel);
	declare Integer AnimDuration = 250;
	if (!_IsAnimated) AnimDuration = 0;

	AnimMgr.Flush(Label_SelectorName);
	if (_Focused) {
		{{{Selector::P}}}Focus(This, Selector, _IsAnimated);
		{{{ExpendableAsset::P}}}SetOpacity(This, Asset_HeaderBackground, 1., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, Asset_ContentBackground, 1., False);
		if (_Frame_Selector.HasClass("{{{Scroll::C_Class_Element}}}")) {{{Selector::P}}}SetButtonsOpacityUnfocused(This, Selector, 0.6);
		AnimMgr.Add(Label_SelectorName, "<anim opacity=\"1.\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		_Frame_Selector.GetFirstChild("quad-hitbox").Parent.Visible = Platform::IsPC(System) && _Frame_Selector.HasClass("{{{Scroll::C_Class_Element}}}");
	} else {
		{{{Selector::P}}}Unfocus(This, Selector, _IsAnimated);
		{{{ExpendableAsset::P}}}SetOpacity(This, Asset_HeaderBackground, 0.6, False);
		{{{ExpendableAsset::P}}}SetOpacity(This, Asset_ContentBackground, 0.6, False);
		if (_Frame_Selector.HasClass("{{{Scroll::C_Class_Element}}}")) {{{Selector::P}}}SetButtonsOpacityUnfocused(This, Selector, 0.);
		AnimMgr.Add(Label_SelectorName, "<anim opacity=\"0.6\" />", AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		_Frame_Selector.GetFirstChild("quad-hitbox").Parent.Show();
	}
	{{{ExpendableAsset::P}}}RedrawAsset(This, Asset_HeaderBackground, _IsAnimated);
	{{{ExpendableAsset::P}}}RedrawAsset(This, Asset_ContentBackground, _IsAnimated);

	/* Display remove and download buttons on PC */
	if (Platform::IsPC(System)) {
		declare CMlFrame Frame_SideButtons <=> (_Frame_Selector.GetFirstChild("frame-side-buttons") as CMlFrame);
		if (Frame_SideButtons != Null) {
			AnimMgr.Flush(Frame_SideButtons);
			if (_Focused) {
				AnimMgr.Add(Frame_SideButtons, "<anim scale=\"1\" pos=\""^{{{Pos_SideButtons.X}}}^" "^{{{Pos_SideButtons.Y}}}^"\" hidden=\"0\" />", ML::Clamp(AnimDuration, 0, 200), CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				AnimMgr.Add(Frame_SideButtons, "<anim scale=\"0\" pos=\""^{{{Pos_SideButtons.X*0.97}}}^" "^{{{Pos_SideButtons.Y}}}^"\" hidden=\"1\"/>", ML::Clamp(AnimDuration, 0, 200), CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	}

	/* Text to speech context */
	Private_TTSContextUpdate(_Frame_Selector, False);
}

/// Handle navigation focus
Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From as CMlFrame)) {
			{{{Button::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{ExpendableButton::P}}}IsButton(_From as CMlFrame)) {
			{{{ExpendableButton::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{TextField::P}}}IsTextField(_From as CMlFrame)) {
			{{{TextField::P}}}Unfocus(This, _From as CMlFrame);
			(_From.Parent.GetFirstChild("label-header") as CMlLabel).Opacity = 0.6;
		} else if ({{{Scroll::P}}}IsScroll(_From as CMlFrame)) {
			{{{Scroll::P}}}Unfocus(This, _From as CMlFrame);
		} else if (_From.HasClass("{{{C_Class_SelectorFrame}}}")) {
			FocusSelector(_From as CMlFrame, False, True);
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To as CMlFrame)) {
			{{{Button::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{ExpendableButton::P}}}IsButton(_To as CMlFrame)) {
			{{{ExpendableButton::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{TextField::P}}}IsTextField(_To as CMlFrame)) {
			{{{TextField::P}}}Focus(This, _To as CMlFrame);
			(_To.Parent.GetFirstChild("label-header") as CMlLabel).Opacity = 1.;
		} else if ({{{Scroll::P}}}IsScroll(_To as CMlFrame)) {
			{{{Scroll::P}}}Focus(This, _To as CMlFrame);
		} else if (_To.HasClass("{{{C_Class_SelectorFrame}}}")) {
			FocusSelector(_To as CMlFrame, True, True);
		}
	}

	UpdateControllerInfo(False);
}

/// Focus the first available control in the page
Void FocusAvailableControl(K_State _State) {
	if (_State.Controls.Frame_TabGeneral.Visible) {
		if (!{{{Navigation::P}}}IsLocked(_State.Controls.Frame_Privacy)) {
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _State.Controls.TextField_Name);
		} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_Back)) {
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _State.Controls.Button_Back);
		}
	}
	if (_State.Controls.Frame_TabBrandingStadium.Visible) {
		if (!{{{Navigation::P}}}IsLocked(_State.Controls.Scroll_Selectors)) {
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _State.Controls.Scroll_Selectors);
		} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_Back)) {
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _State.Controls.Button_Back);
		}
	}
}

/// Handle navigation selection
K_State Select(K_State _State, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-back": {{{Router::P}}}PushParent(This);
		case "button-delete-club": {{{PopUpMultiChoice::P}}}Open(This, _State.Controls.PopUpMultiChoice_DeleteClub);
		case "button-create-edit": {
			if (State.ClubInfo.Name == "") {
				DisplayInfo(State.Controls.Label_Info, _("You must enter a name for your club"), State.Controls.Frame_TabGeneral.Visible, True);
			} else {
				LockPage(State, True);
				DisplayInfo(State.Controls.Label_Info, "", State.Controls.Frame_TabGeneral.Visible, False);
				if (State.IsEditingClub) {
					{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditClub, "{{{Text_UpdatingClub}}}");
					{{{ClubStore::P}}}Action_EditClub(This, State.ClubInfo);
				} else if (!{{{ClubStruct::P}}}IsAnyAssetSelected(State.ClubInfo)) {
					{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.PopUpMultiChoice_CreateClub);
				} else {
					{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditClub, "{{{Text_CreatingClub}}}");
					{{{ClubStore::P}}}Action_CreateClub(This, State.ClubInfo);
				}
			}
		}
		default: {
			if (_Control.HasClass("{{{C_Class_DownloadAsset}}}")) {
				DownloadAsset(State, State.SelectorList.get({{{Scroll::P}}}GetFocusedElementKey(State.Controls.Scroll_Selectors), K_Selector {}));
			} else if (_Control.HasClass("{{{C_Class_RemoveAsset}}}")) {
				State = RemoveAsset(State, State.SelectorList.get({{{Scroll::P}}}GetFocusedElementKey(State.Controls.Scroll_Selectors), K_Selector {}));
			}
		}
		
	}

	return State;
}

/// Set the given theme for all club assets
K_State SetThemeForAllAssets(K_State _State, Text _ThemeName) {
	declare K_State State = _State;

	foreach (SelectorList in [C_Selectors_Branding, C_Selectors_Stadium]) {
		foreach (Selector in SelectorList) {
			State.SelectedChoiceIds[Selector.MediaType] = _ThemeName;
			State = ChangeAsset(State, Selector.MediaType, _ThemeName, _ThemeName);
		}
	}
	{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Selectors, State.SelectorList.count);

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Browser;
declare CMlLabel Label_GeneralInfo;
declare CMlLabel Label_BrandingStadiumInfo;

declare K_State State;
declare K_Selector[Integer] BrandingSelectorList;
declare K_Selector[Integer] StadiumSelectorList;
declare Boolean CanDeleteClub;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Browser <=> (Page.GetFirstChild("frame-browser") as CMlFrame);
Label_GeneralInfo <=> (Page.GetFirstChild("label-info-general") as CMlLabel);
Label_BrandingStadiumInfo <=> (Page.GetFirstChild("label-info-branding-stadium") as CMlLabel);

State = K_State {
	Controls = K_Controls {
		Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
		Button_CreateOrEdit = (Frame_Global.GetFirstChild("button-create-edit") as CMlFrame),
		Button_DeleteClub = (Frame_Global.GetFirstChild("button-delete-club") as CMlFrame),
		Frame_ClubSticker1x1 = (Frame_Global.GetFirstChild("frame-club-sticker-1x1") as CMlFrame),
		Frame_ClubSticker4x1 = (Frame_Global.GetFirstChild("frame-club-sticker-4x1") as CMlFrame),
		Frame_PreviewAsset = (Frame_Global.GetFirstChild("frame-preview-asset") as CMlFrame),
		Frame_PreviewIcon = (Frame_Global.GetFirstChild("frame-preview-icon") as CMlFrame),
		Frame_PreviewVertical = (Frame_Global.GetFirstChild("frame-preview-vertical") as CMlFrame),
		Frame_Privacy = (Frame_Global.GetFirstChild("frame-privacy") as CMlFrame),
		Frame_TabBrandingStadium = (Frame_Global.GetFirstChild("frame-tab-branding-stadium") as CMlFrame),
		Frame_TabGeneral = (Frame_Global.GetFirstChild("frame-tab-general") as CMlFrame),
		Label_Info = Label_GeneralInfo,
		Label_NoImage = (Frame_Global.GetFirstChild("label-no-image") as CMlLabel),
		Label_Preview = (Frame_Global.GetFirstChild("label-preview") as CMlLabel),
		Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
		LoadingSpinner_CreateOrEditClub = (Page.GetFirstChild("loadingspinner-club-create-edit") as CMlFrame),
		NavigationTabs_CreateOrEditClub = (Frame_Global.GetFirstChild("navigationtabs-club-create-edit") as CMlFrame),
		PopUpMultiChoice_Theme = (Frame_Global.GetFirstChild("popupmultichoice-theme") as CMlFrame),
		PopUpMultiChoice_CreateClub = (Frame_Global.GetFirstChild("popupmultichoice-create-club") as CMlFrame),
		PopUpMultiChoice_DeleteClub = (Frame_Global.GetFirstChild("popupmultichoice-delete-club") as CMlFrame),
		Quad_BackgroundOverlay = (Frame_Global.GetFirstChild("quad-background-overlay") as CMlQuad),
		Quad_ClubAsset = (Frame_Global.GetFirstChild("quad-club-asset") as CMlQuad),
		Quad_ClubIcon = (Frame_Global.GetFirstChild("quad-club-icon") as CMlQuad),
		Quad_ClubSticker1x1 = (Frame_Global.GetFirstChild("quad-club-sticker-1x1") as CMlQuad),
		Quad_ClubSticker4x1 = (Frame_Global.GetFirstChild("quad-club-sticker-4x1") as CMlQuad),
		Quad_ClubVertical = (Frame_Global.GetFirstChild("quad-club-vertical") as CMlQuad),
		Scroll_Selectors = (Frame_Global.GetFirstChild("scroll-selectors") as CMlFrame),
		Selector_Privacy = (Frame_Global.GetFirstChild("selector") as CMlFrame),
		TextField_Description = (Frame_Global.GetFirstChild("textfield-description") as CMlFrame),
		TextField_Name = (Frame_Global.GetFirstChild("textfield-name") as CMlFrame),
		TextField_Tag = (Frame_Global.GetFirstChild("textfield-tag") as CMlFrame)
	}
};

/* Initialize selector lists */
foreach (Selector in C_Selectors_Branding) {
	BrandingSelectorList[BrandingSelectorList.count] = Selector;
	if (Platform::IsFromFirstParty(System) && C_ClubThemes_Files.existskey(Selector.MediaType)) {
		foreach (ThemeName => ThemeDisplayName in C_ClubThemes_DisplayNames) {
			BrandingSelectorList[BrandingSelectorList.count-1].Choices[ThemeName] = ThemeDisplayName;
		}
	}
}
foreach (Selector in C_Selectors_Stadium) {
	if (Platform::IsPC(System) || Selector.MediaType != "{{{ClubStruct::C_MediaType_DecalSponsor}}}") StadiumSelectorList[StadiumSelectorList.count] = Selector;
	if (Platform::IsFromFirstParty(System) && C_ClubThemes_Files.existskey(Selector.MediaType)) {
		foreach (ThemeName => ThemeDisplayName in C_ClubThemes_DisplayNames) {
			StadiumSelectorList[StadiumSelectorList.count-1].Choices[ThemeName] = ThemeDisplayName;
		}
	}
}
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_CreateClub}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_EnteringRoute: {
				G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Enter({{{Const::C_TTSContextLevel_Page}}});
				State.IsEditingClub = ({{{Router::P}}}GetCurrentRouteQuery(This).get("{{{RoutePaths::C_Query_EditMode}}}", "") == "1");
				CanDeleteClub = State.IsEditingClub && RBAC::HasClubPermission({{{ClubStore::P}}}GetUserCurrentClubMembership(), RBAC::C_ClubPermission_DeleteClub);
				DisplayBrowser(State, Frame_Browser, False);

				if (State.IsEditingClub) {
					State.ClubInfo = {{{ClubStore::P}}}GetUserCurrentClub();
					State.Controls.Label_Title.SetText("{{{Text_ClubEdition}}}");
					{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_CreateOrEdit, "{{{Text_Save}}}");
					foreach (MediaType => MediaTranslation in {{{dump(ClubStruct::C_MediaType_Translations)}}}) {
						declare Text MediaUrl = {{{ClubStruct::P}}}GetMediaFromType(State.ClubInfo, MediaType);
						if ({{{ClubStruct::P}}}IsClubThemeUrl(MediaUrl)) {
							State.SelectedChoiceIds[MediaType] = {{{ClubStruct::P}}}GetClubThemeName(MediaUrl);
						} else if (TL::StartsWith("http", MediaUrl)) {
							State.SelectedChoiceIds[MediaType] = C_Choice_Custom;
						}
					}
				} else {
					State.ClubInfo = {{{ClubStruct::P}}}GetEmptyClub();
					State.ClubInfo.Name = GetDefaultName();
					State.ClubInfo.Tag = GetDefaultTag(State);
					State.Controls.Label_Title.SetText("{{{Text_ClubCreation}}}");
					{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_CreateOrEdit, "{{{Text_Create}}}");
					{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubDetails}}}", "{{{RoutePaths::C_Path_Clubs}}}");
				}
				
				if (State.SelectedChoiceIds.count > 0) State.CommonTheme = C_Choice_Custom;
				{{{TextField::P}}}SetValue(This, State.Controls.TextField_Name, State.ClubInfo.Name);
				{{{TextField::P}}}SetValue(This, State.Controls.TextField_Tag, State.ClubInfo.Tag);
				{{{TextField::P}}}SetValue(This, State.Controls.TextField_Description, State.ClubInfo.Description);
				{{{Selector::P}}}SelectChoice(This, State.Controls.Selector_Privacy, State.ClubInfo.PrivacyState, False);
				{{{NavigationTabs::P}}}UpdateCurrentTab(This, State.Controls.NavigationTabs_CreateOrEditClub, {{{C_Tab_General}}});
				State.Controls.Button_DeleteClub.RelativePosition_V3.X = (
					State.Controls.Button_CreateOrEdit.RelativePosition_V3.X - {{{ExpendableButton::P}}}GetWidth(State.Controls.Button_CreateOrEdit) - 2.
				);
			}
		}
	}

	/* Store events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{ClubStore::P}}}C_Event_ClubDeleted: {
						{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditClub);
						{{{ClubStore::P}}}Action_SetUserCurrentClub(This, {{{ClubStruct::P}}}GetEmptyClub());
						{{{ClubStore::P}}}Action_RemoveClubTag(This);
						{{{ClubStore::P}}}Action_UnpinClub(This);
						{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Clubs}}}");
					}
					case {{{ClubStore::P}}}C_Event_ClubCreated, {{{ClubStore::P}}}C_Event_ClubUpdated: {
						{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditClub);
						if (Event.CustomEventData.count > 0) {
							declare {{{ClubStruct::P}}}K_Club ClubInfo;
							ClubInfo.fromjson(Event.CustomEventData[0]);
							{{{ClubStore::P}}}Action_SetUserCurrentClub(This, ClubInfo);
							{{{ClubStore::P}}}Action_UpdateClubVIP(This, ClubInfo.Id, LocalUser.WebServicesUserId, True);
							{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubDetails}}}", ["{{{RoutePaths::C_Query_CreatedClubId}}}" => ""^ClubInfo.Id]);
						}
					}
					case {{{ClubStore::P}}}C_Event_ClubCreationFailed, {{{ClubStore::P}}}C_Event_ClubUpdateFailed, {{{ClubStore::P}}}C_Event_ClubDeleteFailed: {
						{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditClub);
						if (Event.CustomEventData.count > 0) {
							DisplayInfo(State.Controls.Label_Info, Event.CustomEventData[0], State.Controls.Frame_TabGeneral.Visible, True);
						}
						LockPage(State, False);
					}
				}
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Cancel: {{{Router::P}}}PushParent(This);
						case CMlScriptEvent::EMenuNavAction::AppMenu: {
							if ({{{ClubStruct::P}}}IsAnyThemeSelected(State.ClubInfo) && State.CommonTheme == "") {
								Focus(State.Controls.Scroll_Selectors, State.Controls.Button_CreateOrEdit);
							} else {
								State = Select(State, State.Controls.Button_CreateOrEdit);
							}
						}
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Event.To);
						default: Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Event.To);
						case CMlScriptEvent::Type::MouseOver: Focus(Event.From, Event.To);
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_MouseOnly}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Event.To);
						case CMlScriptEvent::Type::MouseOver: Focus(Event.From, Event.To);
						case CMlScriptEvent::Type::MouseOut: Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (
			Event.PopUpMultiChoice != Null && 
			(
				Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_Theme.Id ||
				Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_CreateClub.Id ||
				Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_DeleteClub.Id
			)
		) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					UpdateControllerInfo(Event.PopUpMultiChoice.Visible);
					LockPage(State, Event.PopUpMultiChoice.Visible);
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					switch (Event.PopUpMultiChoice.Id) {
						case State.Controls.PopUpMultiChoice_Theme.Id: {
							switch (Event.SelectedIndex) {
								case {{{C_Choice_Yes}}}: State = SetThemeForAllAssets(State, State.CommonTheme);
							}
						}
						case State.Controls.PopUpMultiChoice_CreateClub.Id: {
							switch (Event.SelectedIndex) {
								case {{{C_Choice_RandomTheme}}}: {
									State = SetThemeForAllAssets(State, Tools::GetListOfKeys(C_ClubThemes_Folders)[ML::Rand(0, C_ClubThemes_Folders.count-1)]);
									{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditClub, "{{{Text_CreatingClub}}}");
									{{{ClubStore::P}}}Action_CreateClub(This, State.ClubInfo);
									LockPage(State, True);
								}
								case {{{C_Choice_NoImages}}}: {
									{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditClub, "{{{Text_CreatingClub}}}");
									{{{ClubStore::P}}}Action_CreateClub(This, State.ClubInfo);
									LockPage(State, True);
								}
							}
						}
						case State.Controls.PopUpMultiChoice_DeleteClub.Id: {
							switch (Event.SelectedIndex) {
								case {{{C_Choice_Delete}}}: {
									{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_CreateOrEditClub, "{{{Text_DeletingClub}}}");
									{{{ClubStore::P}}}Action_DeleteClub(This, {{{ClubStore::P}}}GetUserCurrentClub().Id);
									LockPage(State, True);
								}
							}
						}
					}
				}
			}
		}
	}

	/* Events NavigationTabs */
	foreach (Event in {{{NavigationTabs::P}}}GetPendingEvents(This)) {
		if (Event.Frame_NavigationTabs.ControlId == State.Controls.NavigationTabs_CreateOrEditClub.ControlId) {
			switch (Event.Type) {
				case {{{NavigationTabs::P}}}C_EventType_Select: {
					State.Controls.Frame_TabGeneral.Visible = Event.CurrentTab == {{{C_Tab_General}}};
					State.Controls.Frame_TabBrandingStadium.Visible = Event.CurrentTab == {{{C_Tab_Branding}}} || Event.CurrentTab == {{{C_Tab_Stadium}}};
					State.Controls.Scroll_Selectors.Visible = State.Controls.Frame_TabBrandingStadium.Visible;

					switch (Event.CurrentTab) {
						case {{{C_Tab_General}}}: State.SelectorList = [];
						case {{{C_Tab_Branding}}}: State.SelectorList = BrandingSelectorList;
						case {{{C_Tab_Stadium}}}: State.SelectorList = StadiumSelectorList;
					}

					{{{Scroll::P}}}Unfocus(This, State.Controls.Scroll_Selectors);
					{{{Scroll::P}}}LockNavigation(State.Controls.Scroll_Selectors, !State.Controls.Scroll_Selectors.Visible);
					{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Selectors, State.SelectorList.count);
					{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_DeleteClub, CanDeleteClub && State.Controls.Frame_TabGeneral.Visible);
					if (State.Controls.Frame_TabGeneral.Visible) {
						{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_CreateOrEdit, "up", State.Controls.TextField_Description.ControlId);
						{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Back, "up", State.Controls.TextField_Description.ControlId);
						State.Controls.Label_Info = Label_GeneralInfo;
					} else {
						{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_CreateOrEdit, "up", State.Controls.Scroll_Selectors.ControlId);
						{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Back, "up", State.Controls.Scroll_Selectors.ControlId);
						State.Controls.Label_Info = Label_BrandingStadiumInfo;
					}
					
					DisplayInfo(Label_BrandingStadiumInfo, "", False, False);
					DisplayInfo(Label_GeneralInfo, "", True, False);
					FocusAvailableControl(State);
				}
				case {{{NavigationTabs::P}}}C_EventType_Update: {
					ParentApp.TTS_Context_Change(G_TTSContextIdent_Tabs, {{{NavigationTabs::P}}}GetCurrentTabLabel(Event.Frame_NavigationTabs));
					ParentApp.TTS_Context_Read({{{Const::C_TTSContextLevel_Page}}});
				}
			}
		}
	}

	/* TextField events */
	foreach (Event in {{{TextField::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TextField::P}}}C_EventType_Update: {
				if (Event.Control != Null) {
					switch (Event.Control.ControlId) {
						case State.Controls.TextField_Name.ControlId: {
							if (Event.Value != State.ClubInfo.Name) {
								declare Text NewName = Tools::FormatValue(Event.Value);
								declare Integer Length = TL::Length(TL::StripFormatting(NewName));
								if (Length < C_ClubName_Limits.X || Length > C_ClubName_Limits.Y) {
									//L16N %1 and %2 will be replaced by a number, e.g. "The club tag has a minimum of 3 and a maximum of 20 characters"
									DisplayInfo(State.Controls.Label_Info, TL::Compose(_("The club name has a minimum of %1 and a maximum of %2 characters"), ""^C_ClubName_Limits.X, ""^C_ClubName_Limits.Y), State.Controls.Frame_TabGeneral.Visible, True);
									if (Length < C_ClubName_Limits.X) {
										// Set the default name
										NewName = GetDefaultName();
									} else {
										NewName = TL::SubText(NewName, 0, C_ClubName_Limits.Y);
									}
								} else {
									DisplayInfo(State.Controls.Label_Info, "", State.Controls.Frame_TabGeneral.Visible, False);
								}
								{{{TextField::P}}}SetValue(This, State.Controls.TextField_Name, NewName);
								State.ClubInfo.Name = NewName;
							}
						}
						case State.Controls.TextField_Tag.ControlId: {
							if (Event.Value != State.ClubInfo.Tag) {
								declare Text NewTag = TL::ToUpperCase(Tools::RemoveForbiddenTags(TL::SubText(Event.Value, 0, Tools::C_TagMaxLength), Tools::C_TagForbiddenTags));
								declare Text StrippedNewTag = TL::StripFormatting(NewTag);
						
								if (TL::Length(TL::Trim(StrippedNewTag)) == 0 && TL::Length(Event.Value) != 0) {
									NewTag = "";
									//L16N Message displayed when the player tries to define a club tag with only spaces.
									DisplayInfo(State.Controls.Label_Info, _("The club tag cannot contain only spaces"), State.Controls.Frame_TabGeneral.Visible, True);
								} else if (TL::Length(StrippedNewTag) > C_ClubTag_Limits.Y) {
									//L16N %1 will be replaced by a number, e.g. "The club tag has a maximum of 5 characters"
									DisplayInfo(State.Controls.Label_Info, TL::Compose(_("The club tag has a maximum of %1 characters"), ""^C_ClubTag_Limits.Y), State.Controls.Frame_TabGeneral.Visible, True);
									NewTag = TL::SubText(NewTag, 0, C_ClubTag_Limits.Y);
								} else if (State.Controls.Label_Info.Value != "") {
									DisplayInfo(State.Controls.Label_Info, "", State.Controls.Frame_TabGeneral.Visible, False);
								}
						
								{{{TextField::P}}}SetValue(This, State.Controls.TextField_Tag, NewTag);
								State.ClubInfo.Tag = NewTag;
							}
						}
						case State.Controls.TextField_Description.ControlId: {
							if (Event.Value != State.ClubInfo.Description) {
								declare Text NewDescription = TL::Trim(Event.Value);
								declare Integer Length = TL::Length(TL::StripFormatting(NewDescription));
								if (TL::Length(NewDescription) > C_ClubDescription_MaxChar) {
									//L16N %1 and %2 will be replaced by a number, e.g. "The club description must be shorter than 200 characters"
									DisplayInfo(State.Controls.Label_Info, TL::Compose(_("The club description must be shorter than %1 characters"), ""^C_ClubDescription_MaxChar), State.Controls.Frame_TabGeneral.Visible, True);
									NewDescription = TL::SubText(NewDescription, 0, C_ClubDescription_MaxChar);
								} else {
									DisplayInfo(State.Controls.Label_Info, "", State.Controls.Frame_TabGeneral.Visible, False);
								}
								{{{TextField::P}}}SetValue(This, State.Controls.TextField_Description, NewDescription);
								State.ClubInfo.Description = NewDescription;
							}
						}
					}
				}
			}
		}
	}

	/* Scroll events */
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null && Event.Scroll.Id == State.Controls.Scroll_Selectors.Id) {
			switch (Event.Type) {
				case {{{Scroll::P}}}C_EventType_Cancel: {{{Router::P}}}PushParent(This);
				case {{{Scroll::P}}}C_EventType_Update: {
					foreach (Key => Frame_Element in Event.ElementsVisible) {
						if (State.SelectorList.existskey(Key)) {
							ShowThemeSelector(State, Frame_Element, State.SelectorList[Key]);
						}
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						HideThemeSelector(Frame_Element);
					}
				}
				case {{{Scroll::P}}}C_EventType_Select: {
					if (Platform::IsPC(System)) {
						declare K_Selector Selector = State.SelectorList.get(Event.ToKey, K_Selector {});

						if (Selector.Name != "") {
							declare {{{BrowserAPI::P}}}K_Settings BrowserSettings = {{{BrowserAPI::P}}}GetDefaultSettings();
							BrowserSettings.FilterByExtension = Selector.MediaFormat;
							BrowserSettings.DisplayFileNameTooltip = True;
							{{{BrowserAPI::P}}}SetCurrentBrowser(This, {{{BrowserAPI::C_BrowserType_PathNavigation}}}, "{{{BrowserAPI::C_BrowserName_Image}}}", Selector.Name, [{{{BrowserAPI::C_DataType_Image}}}], "", BrowserSettings);
							DisplayBrowser(State, Frame_Browser, True);
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_Focus: {
					if (Event.From != Event.To) State = DisplayThemePopUp(State, Event.From);
					if (Event.From != Null) FocusSelector(Event.From, False, Event.PlayFocusAnimation);
					if (Event.To != Null) {
						if (Event.IsMouse && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Event.Scroll);
						}
						if ({{{Scroll::P}}}IsFocused(State.Controls.Scroll_Selectors)) {
							UpdatePreview(State, State.SelectorList.get(Event.ToKey, K_Selector {}));
							FocusSelector(Event.To, True, Event.PlayFocusAnimation);
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_NavAction: {
					if (Platform::IsPC(System)) {
						switch (Event.NavAction) {
							case CMlScriptEvent::EMenuNavAction::Action1: DownloadAsset(State, State.SelectorList.get(Event.ToKey, K_Selector {}));
							case CMlScriptEvent::EMenuNavAction::Action2: State = RemoveAsset(State, State.SelectorList.get(Event.ToKey, K_Selector {}));
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_ReachLimit: {
					declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
					if (FocusedControl != Null && FocusedControl.Id == State.Controls.Scroll_Selectors.Id) {
						switch (Event.NavAction) {
							case CMlScriptEvent::EMenuNavAction::Down: {
								Focus(FocusedControl, State.Controls.Button_Back);
								{{{MenuSounds::P}}}PlayFocusSound(This, State.Controls.Button_Back);
							}
							case CMlScriptEvent::EMenuNavAction::Left: {
								if (State.SelectorList.get(Event.ToKey, K_Selector {}).Choices.count <= 1) {
									Focus(FocusedControl, State.Controls.Button_Back);
									{{{MenuSounds::P}}}PlayFocusSound(This, State.Controls.Button_Back);
								}
							}
							case CMlScriptEvent::EMenuNavAction::Right: {
								if (State.SelectorList.get(Event.ToKey, K_Selector {}).Choices.count <= 1) {
									Focus(FocusedControl, State.Controls.Button_CreateOrEdit);
									{{{MenuSounds::P}}}PlayFocusSound(This, State.Controls.Button_CreateOrEdit);
								}
							}
						}
					}
				}
			}
		}
	}

	/* Selector events */
	foreach (Event in {{{Selector::P}}}GetPendingEvents(This)) {
		if (Event.Selector != Null) {
			switch (Event.Type) {
				case {{{Selector::P}}}C_EventType_Update: {
					Private_TTSContextUpdate(Event.Selector.Parent.Parent, True);
					if (Event.Selector.Id == State.Controls.Selector_Privacy.Id) {
						State.ClubInfo.PrivacyState = Event.SelectedChoice.Id;
					} else if (Event.Selector.Parent.Parent.Parent.HasClass("{{{Scroll::C_Class_Element}}}")) {
						declare K_Selector Selector = State.SelectorList.get({{{Scroll::P}}}GetElementsVisible(State.Controls.Scroll_Selectors).keyof(Event.Selector.Parent.Parent.Parent), K_Selector {});
						State.SelectedChoiceIds[Selector.MediaType] = Event.SelectedChoice.Id;
						State = ChangeAsset(State, Selector.MediaType, {{{ClubStruct::P}}}GetMediaFromType(State.ClubInfo, Selector.MediaType), Event.SelectedChoice.Id);
						if (Event.Selector.Parent.Parent.Parent == {{{Scroll::P}}}GetFocusedElement(State.Controls.Scroll_Selectors)) {
							{{{PopUpMultiChoice::P}}}SetTitle(This, State.Controls.PopUpMultiChoice_Theme, TL::Compose("{{{Text_ThemeTitle}}}", Event.SelectedChoice.Name), False);
							{{{PopUpMultiChoice::P}}}SetDescription(This, State.Controls.PopUpMultiChoice_Theme, [
								{{{PopUpMultiChoice::P}}}CreateDescriptionPart(TL::Compose("{{{Text_ThemeDescription}}}", Event.SelectedChoice.Name), <130., 20.>, 3., {{{dump(FontManager::C_GameFontRegular)}}}, "$t$i", <1., 1., 1.>, False),
								{{{PopUpMultiChoice::P}}}CreateDescriptionPart("{{{Text_ChangeItLater}}}", <130., 10.>, 3., {{{dump(FontManager::C_GameFontSemiBold)}}}, "$t$i", {{{ColorPalette::C_Color_Vec3_GreenOne}}}, False)
							], False);
							UpdatePreview(State, Selector);
						}
					}
				}
			}
		}
	}

	/* Browser events */
	foreach (Event in {{{BrowserAPI::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{BrowserAPI::P}}}C_EventType_Cancel: DisplayBrowser(State, Frame_Browser, False);
			case {{{BrowserAPI::P}}}C_EventType_Select: {
				DisplayBrowser(State, Frame_Browser, False);
				switch (Event.DataType) {
					case {{{BrowserAPI::P}}}C_DataType_Image: {
						declare K_Selector Selector = State.SelectorList.get({{{Scroll::P}}}GetFocusedElementKey(State.Controls.Scroll_Selectors), K_Selector {});
						declare Text MediaUrl = {{{BrowserAPI::P}}}C_BasePath_Media^Event.Data;
						declare Text FullMediaUrl = {{{BrowserAPI::P}}}C_BasePath^MediaUrl;

						if (Http.IsValidUrl(FullMediaUrl)) {
							if ({{{ClubStruct::P}}}IsClubThemeUrl(FullMediaUrl)) {
								declare Text ThemeName = {{{ClubStruct::P}}}GetClubThemeName(FullMediaUrl);
								State.SelectedChoiceIds[Selector.MediaType] = ThemeName;
								State = ChangeAsset(State, Selector.MediaType, ThemeName, ThemeName);
							} else {
								State.SelectedChoiceIds[Selector.MediaType] = C_Choice_Custom;
								State = ChangeAsset(State, Selector.MediaType, MediaUrl, C_Choice_Custom);
							}
						}

						{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Selectors, State.SelectorList.count);
						UpdatePreview(State, Selector);
					}
				}
			}
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_LeavingRoute: {
				State = K_State { Controls = State.Controls	};
				{{{PopUpMultiChoice::P}}}Close(This, State.Controls.PopUpMultiChoice_CreateClub);
				{{{PopUpMultiChoice::P}}}Close(This, State.Controls.PopUpMultiChoice_DeleteClub);
				{{{PopUpMultiChoice::P}}}Close(This, State.Controls.PopUpMultiChoice_Theme);
				G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Tabs);
				UpdatePreview(State, K_Selector {});
				LockPage(State, False);
			}
		}
	}
}

***
""",
[
	BrowserAPI::ComponentV2(),
	Button::ComponentV2(),
	ButtonIcon::ComponentV2(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	ExpendableAsset::ComponentV2(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	NavigationTabs::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	Router::ComponentV2(),
	Scroll::ComponentV2(),
	Selector::ComponentV2(), 
	TextField::ComponentV2(),
	Transition::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}