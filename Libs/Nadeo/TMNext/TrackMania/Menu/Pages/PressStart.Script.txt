/** 
 *	Page: PressStart
 */
#Const Version		"2023-04-27"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/PressStart.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "ColorLib" as CL
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/ShareMenuNavigation_ML.Script.txt" as ShareMenuNavigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/CommonLibs/Common/BuildInfo.Script.txt" as BuildInfo
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/PluginEvents.Script.txt" as PluginEvents
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Pages/ConnectionError.Script.txt" as ConnectionError
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/NewsStore_ML.Script.txt" as NewsStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/TMNext/TrackMania/API/CampaignAPI.Script.txt" as CampaignAPI
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Trophy.Script.txt" as Trophy
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/OnlineServicesStatusStore_ML.Script.txt" as OnlineServicesStatusStore
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/OnlineServicesStatusCard.Script.txt" as OnlineServicesStatusCard

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_PressStart"
#Const C_NavGroup_PlayOffline "navgroup-pagepressstart-playoffline"
#Const C_NavGroup_UbiConnect "navgroup-pagepressstart-ubiconnect"
#Const C_NavGroup_WelcomeBack "navgroup-pagepressstart-welcomeback"
#Const C_MenuBackground_DimmerOpacity 0.4
#Const C_EnterPageAnimationDuration 250
#Const C_ConnectionAnimationDuration 250
#Const C_LeavePageAnimationDuration 250
#Const C_Event_LoadTrophyRewards "Page_PressStart_LoadTrophyRewards"
#Const C_Event_InitializeIsNetworkAvailable "Page_PressStart_InitializeIsNetworkAvailable"
#Const C_PreloadLiveCampaigns True
// Enabling a timeout during these tasks can prevent the user from connecting successfully
// A pop-up can be displayed asking the player to enter
// their login and password which can take an undetermined amount of time
#Const C_TimeOutTaskConnectUser False
#Const C_ExpendableButtonStyle_StackPressStart "expendable-button-style-stack-press-start"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Boolean G_IsLoadingTrophies;
declare Ident[Text] G_TrophyLoadRequest;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [PressStartPage] Text pronounced to indicate to the player that they must press any button to start the game.
	declare Text TTS_Start = _("|TTS|Press any button to start");
	//L16N [PressStartPage] The player must press a button to start the game.
	declare Text Text_Start = _("|PressStart|Start");
	//L16N [PressStartPage] Display the name of the connected profile. %1 will be replaced by the profile's name. eg: "Connected as User1"
	declare Text Text_ConnectedAs = _("|Profile|Connected as %1");
	//L16N [PressStartPage] The user did not select a profile
	declare Text Text_NotConnected = _("|Profile|Not connected");
	//L16N [PressStartPage] The player is currently logging in to the plaform.
	declare Text Text_Connecting = _("|Profile|Connecting");
	//L16N [PressStartPage] The game is checking the status of the online services
	declare Text Text_CheckingOnlineStatus = _("Checking online services");
	//L16N [PressStartPage] The game is retrieving some data (campaigns, tracks, records, ...)
	declare Text Text_RetrievingData = _("Retrieving data");
	//L16N [PressStartPage] Starting the engine of the car
	declare Text Text_StartingEngine = _("Starting the engine");
	//L16N [PressStartPage] Enabling the game offline mode
	declare Text Text_StartingOfflineMode = _("Enabling offline mode");
	//L16N [PressStartPage] Try to connect again.
	declare Text Text_Retry = _("Retry");
	//L16N [PressStartPage] Launch the game in offline mode.
	declare Text Text_PlayOffline = _("Play offline");
	//L16N [PressStartPage] Close the game.
	declare Text Text_QuitGame = _("Quit game");
	//L16N [PressStartPage] Go back to the previous menu
	declare Text Text_Back = _("Back");
	//L16N [PressStartPage] Connect the user with their the Ubisoft Connect account
	declare Text Text_ConnectMeNow = _("Connect me now!");
	//L16N [PressStartPage] Ubisoft Connect welcome message. %1 will be replaced by the name of the player.
	declare Text Text_UbiConnectWelcome = _("Welcome to Trackmania, %1!");
	//L16N [PressStartPage] Ubisoft Connect welcome message.
	declare Text Text_UbiConnectWelcomeNoName = _("Welcome to Trackmania!");
	//L16N [PressStartPage] Ubisoft Connect ask the player to connect.
	declare Text Text_UbiConnectConnect = _("Connect before playing");
	// The text MUST NOT start with a new line. Otherwise the label styles won't be applied to the text.
	//L16N [PressStartPage] Describe Ubisoft Connect benefits. Please keep the same number of '\n' at the same position in the text to have proper line break once it is displayed on screen.
	declare Text Text_UbiConnectBenefits = _("Playing Trackmania while connected to the Internet requires you to be logged into a Ubisoft Account.\n\nThis will let you enjoy Ubisoft Connect benefits:\n- Keep your saves and progression across all platforms\n- Access the network of Ubisoft players across all platforms\n\nPlease create your account or log-in to your existing one.");
	//L16N [PressStartPage] Ubisoft Connect welcome back message. %1 will be replaced by the name of the player.
	declare Text Text_WelcomeBackWelcome = _("Welcome back, %1!");
	//L16N [PressStartPage] Ubisoft Connect welcome back message.
	declare Text Text_WelcomeBackWelcomeNoName = _("Welcome back!");
	// The text MUST NOT start with a new line. Otherwise the label styles won't be applied to the text.
	//L16N [PressStartPage] Describe Ubisoft Connect benefits. Please keep the same number of '\n' at the same position in the text to have proper line break once it is displayed on screen.
	declare Text Text_WelcomeBackBenefits = _("Discover Ubisoft Connect benefits for Trackmania:\n\n- Keep your saves and progression across all platforms\n- Access the network of Ubisoft players across all platforms\n\nJoin the community of passionate players of Ubisoft Connect!");
	//L16N [PressStartPage] Check Ubisoft Connect benefits now and open the Ubisoft Connect app
	declare Text Text_CheckBenefits = _("Check my benefits!");
	//L16N [PressStartPage] Check Ubisoft Connect benefits later
	declare Text Text_MaybeLater = _("Maybe later");

	//L16N [PressStartPage] Warning displayed at the start of the game for crossplay
	declare Text Text_CrossPlayWarning = _("You are currently able to play with players from other networks.");
	//L16N [PressStartPage] Warning displayed at the start of the upload of UGC contents in crossplay
	declare Text Text_UGCWarning = _("Any content created and uploaded will be shared across all platforms.");

	declare Vec2 Size_TMLogo = MLHelpers::KeepRatioFromX(2480., 1332., 240.);
	declare Vec2 Size_ButtonIcon = <10., 10.>;
	declare Real PosY_Logo = 15.;
	declare Real PosY_FrameConnection = -48.;
	declare Real PosY_LabelError = -30.;
	declare Real PosY_SpinnerConnection = -45.;
	declare Real PosY_FramePlayOffline = -52.;
	declare Real TextSize_ErrorMessage = 4.;
	declare Text Img_UbiConnectHeader = "file://Media/Manialinks/Nadeo/TMNext/Menus/PopUp/Menu_Home_UbisoftConnect_Header.dds";

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-extrabold" textsize="4" textprefix="$t$i" textfont="{{{FontManager::C_GameFontExtraBold}}}" textcolor="ffffff" />
	<style class="text-semibold" textsize="3" textprefix="$t$i" textfont="{{{FontManager::C_GameFontSemiBold}}}" textcolor="ffffff" />
	<style class="text-error" textsize="{{{TextSize_ErrorMessage}}}" textprefix="$i" textfont="{{{FontManager::C_ErrorMessage}}}" textcolor="{{{ColorPalette::C_Color_ErrorRed}}}" />
</stylesheet>

<!-- Frame global -->
<frame id="frame-global" z-index="{{{Const::C_ZIndex_PressStart}}}">
	<quad id="button-start-click" z-index="3" size="320 180" fullscreen="1" halign="center" valign="center" opacity="0" scriptevents="1" />

	<!-- Main page: press start and offline -->
	<frame z-index="3">
		<quad id="quad-logo" z-index="0" pos="0 {{{PosY_Logo}}}" {{{MLHelpers::Size(Size_TMLogo)}}} halign="center" valign="center" image="{{{Const::C_ImageUrl_Logo}}}" />
		<!-- Press Start -->
		<frame id="frame-connection" pos="0 {{{PosY_FrameConnection}}}" z-index="1">
			<frame id="frame-start">
				<frameinstance id="button-icon-start" modelid="{{{ButtonIcon::C_Name}}}" pos="0 0.3" data-halign="center" data-valign="center" data-size="{{{Size_ButtonIcon.X}}} {{{Size_ButtonIcon.Y}}}" data-bind="select" />
				<label id="label-start" size="300 6" halign="center" valign="center2" text="{{{Text_Start}}}" tts_alttext="{{{TTS_Start}}}" textsize="8" class="text-extrabold" />
			</frame>
			<frame id="frame-profile" pos="0 -15">
				<label id="label-name" size="310 6" halign="center" valign="center2" class="text-semibold" />
			</frame>
		</frame>
		<!-- Offline mode -->
		<frame id="frame-play-offline" pos="0 {{{PosY_FramePlayOffline}}}" z-index="2">
			<frameinstance
				id="button-play-offline"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				{{{MLHelpers::Pos(MLHelpers::SkewX(<0., 0.>, 10.))}}}
				data-text="{{{Text_PlayOffline}}}"
				data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{ExpendableButton::C_Style_StackTop}}} {{{C_ExpendableButtonStyle_StackPressStart}}}"
				data-nav-inputs="select;down"
				data-nav-targets="_;button-back"
				data-nav-group="{{{C_NavGroup_PlayOffline}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			/>
			<frameinstance
				id="button-back"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				{{{MLHelpers::Pos(MLHelpers::SkewX(<0., -11.>, 10.))}}}
				data-text="{{{Text_Back}}}"
				data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{C_ExpendableButtonStyle_StackPressStart}}}"
				data-nav-inputs="select;up;down"
				data-nav-targets="_;button-play-offline;button-quit-game"
				data-nav-group="{{{C_NavGroup_PlayOffline}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			/>
			<frameinstance
				id="button-quit-game"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				{{{MLHelpers::Pos(MLHelpers::SkewX(<0., -22.>, 10.))}}}
				data-text="{{{Text_QuitGame}}}"
				data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{ExpendableButton::C_Style_StackBottom}}} {{{C_ExpendableButtonStyle_StackPressStart}}}"
				data-nav-inputs="select;up"
				data-nav-targets="_;button-back"
				data-nav-group="{{{C_NavGroup_PlayOffline}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			/>
		</frame>
		<!-- Online services status card -->
		<frameinstance id="online-services-status-card" modelid="{{{OnlineServicesStatusCard::C_Name}}}" pos="115 73" />
		<!-- CrossPlay and UGC warnings -->
		<frame id="frame-warnings" pos="0 -73">
			<label id="label-crossplay-warning" text="{{{Text_CrossPlayWarning}}}" textsize="1" opacity="0." size="300 6" halign="center" valign="center2" class="text-semibold" />
			<label id="label-ugc-warning" text="{{{Text_UGCWarning}}}" textsize="1" opacity="0." pos="0 -3" size="300 6" halign="center" valign="center2" class="text-semibold" />
		</frame>

		<frameinstance id="loading-spinner-connection" modelid="{{{LoadingSpinner::C_Name}}}" pos="0 {{{PosY_SpinnerConnection}}}" z-index="3" data-label="{{{Text_Connecting}}}" />
		<label id="label-error" pos="0 {{{PosY_LabelError}}}" z-index="4" size="280 6" halign="center" valign="center2" class="text-error" hidden="1" />
	</frame>

	<!-- Ubisoft Connect pop-up -->
	<frame id="frame-ubi-connect" z-index="4" hidden="1">
		<frameinstance
			id="pop-up-background-ubi-connect"
			modelid="{{{PopUpBackground::C_Name}}}"
			z-index="0"
			data-header-image="{{{Img_UbiConnectHeader}}}"
			data-dimmer-send-close-event="false"
			data-button-leave-enabled="false"
		/>
		<frame id="frame-ubi-connect-content" z-index="1">
			<label id="label-ubi-connect-welcome-message" halign="center" valign="center2" textsize="6" text="{{{Text_UbiConnectWelcomeNoName}}}" class="text-extrabold" />
			<label id="label-ubi-connect-connect" halign="center" valign="center2" textsize="4" text="{{{Text_UbiConnectConnect}}}" class="text-semibold" />
			<label id="label-ubi-connect-benefits" maxline="9" class="text-semibold" />
			<frame id="frame-ubi-connect-buttons">
				<frameinstance
					id="button-ubi-connect-link"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					{{{MLHelpers::Pos(MLHelpers::SkewX(<0., 11.>, PopUpBackground::C_SkewAngle))}}}
					data-text="{{{Text_ConnectMeNow}}}"
					data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{ExpendableButton::C_Style_StackTop}}} {{{C_ExpendableButtonStyle_StackPressStart}}} {{{ExpendableButton::C_Style_ColorDark}}}"
					data-nav-inputs="select;down"
					data-nav-targets="_;button-ubi-connect-offline"
					data-nav-group="{{{C_NavGroup_UbiConnect}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
				/>
				<frameinstance
					id="button-ubi-connect-offline"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					{{{MLHelpers::Pos(MLHelpers::SkewX(<0., 0.>, PopUpBackground::C_SkewAngle))}}}
					data-text="{{{Text_PlayOffline}}}"
					data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{C_ExpendableButtonStyle_StackPressStart}}} {{{ExpendableButton::C_Style_ColorDark}}}"
					data-nav-inputs="select;up;down"
					data-nav-targets="_;button-ubi-connect-link;button-ubi-connect-back"
					data-nav-group="{{{C_NavGroup_UbiConnect}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
				/>
				<frameinstance
					id="button-ubi-connect-back"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					{{{MLHelpers::Pos(MLHelpers::SkewX(<0., -11.>, PopUpBackground::C_SkewAngle))}}}
					data-text="{{{Text_Back}}}"
					data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{ExpendableButton::C_Style_StackBottom}}} {{{C_ExpendableButtonStyle_StackPressStart}}} {{{ExpendableButton::C_Style_ColorDark}}}"
					data-nav-inputs="select;up"
					data-nav-targets="_;button-ubi-connect-offline"
					data-nav-group="{{{C_NavGroup_UbiConnect}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
				/>
			</frame>
		</frame>
	</frame>

	<!-- Welcome back pop-up -->
	<frame id="frame-welcome-back" z-index="5" hidden="1">
		<frameinstance
			id="pop-up-background-welcome-back"
			modelid="{{{PopUpBackground::C_Name}}}"
			z-index="0"
			data-header-image="{{{Img_UbiConnectHeader}}}"
			data-dimmer-send-close-event="false"
			data-button-leave-enabled="false"
		/>
		<frame id="frame-welcome-back-content" z-index="1">
			<label id="label-welcome-back-message" halign="center" valign="center2" textsize="6" text="{{{Text_WelcomeBackWelcomeNoName}}}" class="text-extrabold" />
			<label id="label-welcome-back-benefits" maxline="11" class="text-semibold" />
			<frame id="frame-welcome-back-buttons">
				<frameinstance
					id="button-welcome-back-open"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					{{{MLHelpers::Pos(MLHelpers::SkewX(<0., 5.5>, PopUpBackground::C_SkewAngle))}}}
					data-text="{{{Text_CheckBenefits}}}"
					data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{ExpendableButton::C_Style_StackTop}}} {{{C_ExpendableButtonStyle_StackPressStart}}} {{{ExpendableButton::C_Style_ColorDark}}}"
					data-nav-inputs="select;down"
					data-nav-targets="_;button-welcome-back-later"
					data-nav-group="{{{C_NavGroup_WelcomeBack}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
				/>
				<frameinstance
					id="button-welcome-back-later"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					{{{MLHelpers::Pos(MLHelpers::SkewX(<0., -5.5>, PopUpBackground::C_SkewAngle))}}}
					data-text="{{{Text_MaybeLater}}}"
					data-styles="{{{ExpendableButton::C_Style_Stack}}} {{{ExpendableButton::C_Style_StackBottom}}} {{{C_ExpendableButtonStyle_StackPressStart}}} {{{ExpendableButton::C_Style_ColorDark}}}"
					data-nav-inputs="select;up"
					data-nav-targets="_;button-welcome-back-open"
					data-nav-group="{{{C_NavGroup_WelcomeBack}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
				/>
			</frame>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CommonLibs/Common/Error.Script.txt" as Error
#Include "Libs/Nadeo/CommonLibs/Common/Task.Script.txt" as Task
#Include "Libs/Nadeo/CommonLibs/Common/HttpAuthorizationHeader.Script.txt" as HttpLiveAuthorizationHeader
#Include "Libs/Nadeo/CommonLibs/Common/HttpClubAuthorizationHeader.Script.txt" as HttpClubAuthorizationHeader
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CommonLibs/Common/AudioManager_ML.Script.txt" as AudioManager
#Include "Libs/Nadeo/CommonLibs/Common/Tracking.Script.txt" as Tracking
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo

#Struct K_Controls {
	CMlQuad Quad_Logo;
	CMlFrame Frame_Connection;
	CMlFrame LoadingSpinnner_Connection;
	CMlLabel Label_Error;
	CMlFrame Frame_Start;
	CMlLabel Label_Start;
	CMlFrame ButtonIcon_Start;
	CMlFrame Frame_Profile;
	CMlLabel Label_ProfileName;
	CMlFrame Frame_PlayOffline;
	CMlFrame Button_PlayOffline;
	CMlFrame Button_Back;
	CMlFrame Button_QuitGame;
	CMlQuad Button_StartClick;
	CMlFrame Frame_UbiConnect;
	CMlFrame PopUpBackground_UbiConnect;
	CMlFrame Frame_UbiConnectContent;
	CMlFrame Frame_UbiConnectButtons;
	CMlFrame Button_UbiConnectLink;
	CMlFrame Button_UbiConnectOffline;
	CMlFrame Button_UbiConnectBack;
	CMlLabel Label_UbiConnectWelcomeMessage;
	CMlLabel Label_UbiConnectConnect;
	CMlLabel Label_UbiConnectBenefits;
	CMlFrame Frame_WelcomeBack;
	CMlFrame PopUpBackground_WelcomeBack;
	CMlFrame Frame_WelcomeBackContent;
	CMlFrame Frame_WelcomeBackButtons;
	CMlFrame Button_WelcomeBackOpen;
	CMlLabel Label_WelcomeBackWelcomeMessage;
	CMlLabel Label_WelcomeBackBenefits;
	CMlFrame Frame_OnlineServicesStatusCard;
	CMlFrame Frame_Warnings;
}

#Struct K_State {
	K_Controls Controls;
	Integer ConnectionProgress;
	Integer ConnectionTimeOut;
	Task::K_Task Task_ConnectUser;
	Task::K_Task Task_ShowUbisoftConnectReward;
	Integer LeavePageAnimationEndTime;
	Text ErrorMessage;
	Integer[] PreloadingOnlineData;
	Integer[] PreloadingOfflineData;
	Text RedirectPath;
	Boolean GoToZoneSelection;
	Boolean CanSwitchProfile;
	Ident MainUserId;
	Text MainUserDisplayName;
	Boolean DisplayUbiConnectOverlay;
	Boolean AlreadyTriedToLinkUbiConnectAccount;
	Boolean AreWarningsDisplayed;
}

#Const C_Size_ButtonIcon {{{dump(Size_ButtonIcon)}}}
#Const C_PosY_Logo {{{dump(PosY_Logo)}}}
#Const C_PosY_FrameConnection {{{dump(PosY_FrameConnection)}}}
#Const C_PosY_SpinnerConnection {{{dump(PosY_SpinnerConnection)}}}
#Const C_EnterPageAnimationDuration {{{dump(C_EnterPageAnimationDuration)}}}
#Const C_ConnectionAnimationDuration {{{dump(C_ConnectionAnimationDuration)}}}
#Const C_LeavePageAnimationDuration {{{dump(C_LeavePageAnimationDuration)}}}
#Const C_ConnectionTimeOut 10000
#Const C_ConnectionTimeOut_PreloadOnline 30000 // Wait longer during the online data preload
#Const C_PreloadLiveCampaigns {{{dump(C_PreloadLiveCampaigns)}}}
#Const C_Text_UbiConnectBenefits {{{"\"\"\""^Text_UbiConnectBenefits^"\"\"\""}}}
#Const C_Text_WelcomeBackBenefits {{{"\"\"\""^Text_WelcomeBackBenefits^"\"\"\""}}}
#Const C_TimeOutTaskConnectUser {{{dump(C_TimeOutTaskConnectUser)}}}

#Const C_ConnectionProgress_Check_OnlineServicesStatus 0
#Const C_ConnectionProgress_MenuStart 1
#Const C_ConnectionProgress_MenuOffline 2
#Const C_ConnectionProgress_MenuUbiConnect 3
#Const C_ConnectionProgress_MenuWelcomeBack 4
#Const C_ConnectionProgress_Check_TaskConnectUser 5
#Const C_ConnectionProgress_WaitUbiConnectOverlay 6
#Const C_ConnectionProgress_Check_ConnectionStatus 7
#Const C_ConnectionProgress_Check_HttpHeaders 8
#Const C_ConnectionProgress_PreloadOnline 9
#Const C_ConnectionProgress_Result 10
#Const C_ConnectionProgress_PreloadOffline 11
#Const C_ConnectionProgress_Redirect 12
#Const C_ConnectionProgress_Check_TaskConnectUserOffline 13
#Const C_ConnectionProgress_Check_MainUserLogged 14

#Const C_PreloadData_LoadUserTrophyRankings 0
#Const C_PreloadData_LoadMatchmakingInfos 1
#Const C_PreloadData_LoadTrophyRewards 2
#Const C_PreloadData_LoadAllClubsPage 3
#Const C_PreloadData_LoadOfflineCampaign 4
#Const C_PreloadData_LoadLiveQuarterlyCampaign 5
#Const C_PreloadData_LoadLiveMonthlyCampaign 6
#Const C_PreloadData_LoadPinAndTagClub 7
#Const C_PreloadData_LoadNews 8
#Const C_PreloadData_EnableOfflineMode 9
""",
"""
Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void DisplayError(K_State _State) {
	_State.Controls.Label_Error.Value = _State.ErrorMessage;
	Tools::FitLabelValue(_State.Controls.Label_Error, {{{TextSize_ErrorMessage}}}, 2., 0.5);
	_State.Controls.Label_Error.Visible = True;
}

Void HideError(K_State _State) {
	_State.Controls.Label_Error.Visible = False;
}

K_State DisplayWarnings(K_State _State, Boolean _Display) {
	if (_State.AreWarningsDisplayed == _Display) return _State;

	declare K_State State = _State;
	State.AreWarningsDisplayed = _Display;

	declare CMlLabel Label_CrossPlayWarning = (State.Controls.Frame_Warnings.GetFirstChild("label-crossplay-warning") as CMlLabel);
	declare CMlLabel Label_UGCWarning = (State.Controls.Frame_Warnings.GetFirstChild("label-ugc-warning") as CMlLabel);
	AnimMgr.Flush(Label_CrossPlayWarning);
	AnimMgr.Flush(Label_UGCWarning);
	if (State.AreWarningsDisplayed) {
		AnimMgr.Add(Label_CrossPlayWarning, "<anim opacity=\"1.\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Label_UGCWarning, "<anim opacity=\"1.\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(Label_CrossPlayWarning, "<anim opacity=\"0.\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Label_UGCWarning, "<anim opacity=\"0.\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	return State;
}

K_State SetError(K_State _State, Text _Message) {
	declare K_State State = _State;

	State.ErrorMessage = _Message;

	return State;
}
K_State ResetError(K_State _State) {
	return SetError(_State, "");
}

Boolean IsDisplayingPressStartMessage(Integer _ConnectionProgress) {
	return (
		_ConnectionProgress == C_ConnectionProgress_MenuStart ||
		_ConnectionProgress == C_ConnectionProgress_Check_MainUserLogged
	);
}

K_State SetConnectionProgress(K_State _State, Integer _ConnectionProgress) {
	declare K_State State = _State;

	State.ConnectionProgress = _ConnectionProgress;
	declare Boolean IsLoading = (
		!IsDisplayingPressStartMessage(State.ConnectionProgress) &&
		State.ConnectionProgress != C_ConnectionProgress_MenuOffline &&
		State.ConnectionProgress != C_ConnectionProgress_MenuUbiConnect &&
		State.ConnectionProgress != C_ConnectionProgress_MenuWelcomeBack
	);
	declare Boolean WasLoading = {{{LoadingSpinner::P}}}IsLoading(State.Controls.LoadingSpinnner_Connection);

	if (WasLoading != IsLoading) {
		{{{LoadingSpinner::P}}}SetIsLoading(This, State.Controls.LoadingSpinnner_Connection, IsLoading);
		if (WasLoading) {
			State.Controls.LoadingSpinnner_Connection.RelativeScale = 1.;
			State.Controls.LoadingSpinnner_Connection.RelativePosition_V3.Y = C_PosY_SpinnerConnection;
			AnimMgr.Flush(State.Controls.LoadingSpinnner_Connection);
			AnimMgr.Add(State.Controls.LoadingSpinnner_Connection, "<anim pos=\"0 "^(C_PosY_SpinnerConnection + 5.)^"\" scale=\"0.8\" />", C_ConnectionAnimationDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			{{{LoadingSpinner::P}}}Fade(This, State.Controls.LoadingSpinnner_Connection, 0., C_LeavePageAnimationDuration);
		} else {
			State.Controls.LoadingSpinnner_Connection.RelativeScale = 1.2;
			State.Controls.LoadingSpinnner_Connection.RelativePosition_V3.Y = C_PosY_SpinnerConnection - 5.;
			AnimMgr.Flush(State.Controls.LoadingSpinnner_Connection);
			AnimMgr.Add(State.Controls.LoadingSpinnner_Connection, "<anim pos=\"0 "^C_PosY_SpinnerConnection^"\" scale=\"1\" />", C_ConnectionAnimationDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			{{{LoadingSpinner::P}}}Fade(This, State.Controls.LoadingSpinnner_Connection, 1., C_LeavePageAnimationDuration);
		}
	}

	if (IsLoading) {
		if (State.ConnectionProgress == C_ConnectionProgress_Check_OnlineServicesStatus) {
			{{{LoadingSpinner::P}}}SetLabel(State.Controls.LoadingSpinnner_Connection, "{{{Text_CheckingOnlineStatus}}}");
		} else if (
			State.ConnectionProgress == C_ConnectionProgress_PreloadOnline ||
			State.ConnectionProgress == C_ConnectionProgress_PreloadOffline
		) {
			{{{LoadingSpinner::P}}}SetLabel(State.Controls.LoadingSpinnner_Connection, "{{{Text_RetrievingData}}}");
		} else if (
			State.ConnectionProgress == C_ConnectionProgress_Result ||
			State.ConnectionProgress == C_ConnectionProgress_Redirect
		) {
			{{{LoadingSpinner::P}}}SetLabel(State.Controls.LoadingSpinnner_Connection, "{{{Text_StartingEngine}}}");
		} else if (
			State.ConnectionProgress == C_ConnectionProgress_Check_TaskConnectUserOffline
		) {
			{{{LoadingSpinner::P}}}SetLabel(State.Controls.LoadingSpinnner_Connection, "{{{Text_StartingOfflineMode}}}");
		} else {
			{{{LoadingSpinner::P}}}SetLabel(State.Controls.LoadingSpinnner_Connection, "{{{Text_Connecting}}}");
		}
	}

	State = DisplayWarnings(State, 
		IsLoading &&
		State.ConnectionProgress != C_ConnectionProgress_Check_OnlineServicesStatus &&
		State.ConnectionProgress != C_ConnectionProgress_Redirect &&
		{{{UserStore::P}}}IsCrossPlayActive()
	);
	State.Controls.Frame_Connection.Visible = IsDisplayingPressStartMessage(State.ConnectionProgress);
	State.Controls.Button_StartClick.Visible = IsDisplayingPressStartMessage(State.ConnectionProgress);
	if (IsDisplayingPressStartMessage(State.ConnectionProgress) && Platform::IsFromFirstParty(System)) {
		State.Controls.Label_Start.TTS_Focus();
	}

	State.Controls.Frame_PlayOffline.Visible = (State.ConnectionProgress == C_ConnectionProgress_MenuOffline);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_PlayOffline}}}", State.ConnectionProgress == C_ConnectionProgress_MenuOffline);

	State.Controls.Frame_UbiConnect.Visible = (State.ConnectionProgress == C_ConnectionProgress_MenuUbiConnect);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_UbiConnect}}}", State.ConnectionProgress == C_ConnectionProgress_MenuUbiConnect);
	if (State.ConnectionProgress == C_ConnectionProgress_MenuUbiConnect) {
		// Enable/disable "Play offline" button
		State.Controls.Button_UbiConnectOffline.Visible = State.AlreadyTriedToLinkUbiConnectAccount;
		{{{Navigation::P}}}Lock(State.Controls.Button_UbiConnectOffline, !State.Controls.Button_UbiConnectOffline.Visible);
		declare CMlControl CurrentFocus = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_UbiConnect}}}");
		if (CurrentFocus != Null && {{{Navigation::P}}}IsLocked(CurrentFocus)) {
			Focus(CurrentFocus, State.Controls.Button_UbiConnectLink);
		}

		if (State.Controls.Button_UbiConnectOffline.Visible) {
			State.Controls.Button_UbiConnectLink.RelativePosition_V3 = MLHelpers::SkewX(<0., 11.>, {{{PopUpBackground::P}}}C_SkewAngle);
			State.Controls.Button_UbiConnectOffline.RelativePosition_V3 = MLHelpers::SkewX(<0., 0.>, {{{PopUpBackground::P}}}C_SkewAngle);
			State.Controls.Button_UbiConnectBack.RelativePosition_V3 = MLHelpers::SkewX(<0., -11.>, {{{PopUpBackground::P}}}C_SkewAngle);
		} else {
			State.Controls.Button_UbiConnectLink.RelativePosition_V3 = MLHelpers::SkewX(<0., 5.5>, {{{PopUpBackground::P}}}C_SkewAngle);
			State.Controls.Button_UbiConnectBack.RelativePosition_V3 = MLHelpers::SkewX(<0., -5.5>, {{{PopUpBackground::P}}}C_SkewAngle);
		}
	}

	State.Controls.Frame_WelcomeBack.Visible = (State.ConnectionProgress == C_ConnectionProgress_MenuWelcomeBack);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_WelcomeBack}}}", State.ConnectionProgress == C_ConnectionProgress_MenuWelcomeBack);

	if (
		State.ConnectionProgress == C_ConnectionProgress_MenuOffline ||
		State.ConnectionProgress == C_ConnectionProgress_MenuUbiConnect ||
		State.ConnectionProgress == C_ConnectionProgress_MenuWelcomeBack
	) {
		ControllerInfo::SetButtons(["A" => _("Select")]);
	} else {
		ControllerInfo::SetButtons([]);
	}

	return State;
}

K_State InitializePage(K_State _State) {
	declare K_State State = _State;

	State = SetConnectionProgress(State, C_ConnectionProgress_Check_OnlineServicesStatus);
	State = ResetError(State);
	State.Task_ConnectUser = Task::Destroy(State.Task_ConnectUser);
	State.LeavePageAnimationEndTime = 0;
	State.RedirectPath = "";
	State.GoToZoneSelection = False;
	State.CanSwitchProfile = Platform::IsConsole(System);
	State.DisplayUbiConnectOverlay = False;
	State.AlreadyTriedToLinkUbiConnectAccount = False;
	State = DisplayWarnings(State, False);

	declare Boolean PressStart_IsLoadingTrophyRewards for LocalUser;
	PressStart_IsLoadingTrophyRewards = False;

	HideError(State);
	if ({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_PlayOffline}}}") != State.Controls.Button_PlayOffline) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_PlayOffline}}}"), State.Controls.Button_PlayOffline);
	}
	if ({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_UbiConnect}}}") != State.Controls.Button_UbiConnectLink) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_UbiConnect}}}"), State.Controls.Button_UbiConnectLink);
	}
	if ({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_WelcomeBack}}}") != State.Controls.Button_WelcomeBackOpen) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_WelcomeBack}}}"), State.Controls.Button_WelcomeBackOpen);
	}
	{{{UserStore::P}}}Action_SetOfflineMode(This, False);

	// Enable or disable the profile selection
	State.Controls.Frame_Profile.Visible = State.CanSwitchProfile;
	if (State.Controls.Frame_Profile.Visible) {
		State.Controls.Frame_Start.RelativePosition_V3.Y = 0.;
	} else {
		State.Controls.Frame_Start.RelativePosition_V3.Y = State.Controls.Frame_Profile.RelativePosition_V3.Y;
	}

	// Enable or disable the "Quit game" button
	if (Platform::IsFromFirstParty(System)) {
		State.Controls.Button_QuitGame.Visible = False;
		{{{ExpendableButton::P}}}AddStyle(This, State.Controls.Button_Back, {{{ExpendableButton::P}}}Style_StackBottom());
		{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Back, "{{{Text_Back}}}");
	} else {
		State.Controls.Button_QuitGame.Visible = True;
		{{{ExpendableButton::P}}}RemoveStyle(This, State.Controls.Button_Back, {{{ExpendableButton::P}}}Style_StackBottom());
		{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Back, "{{{Text_Retry}}}");
	}
	{{{Navigation::P}}}Lock(State.Controls.Button_QuitGame, !State.Controls.Button_QuitGame.Visible);
	declare CMlControl CurrentFocus = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_PlayOffline}}}");
	if (CurrentFocus != Null && {{{Navigation::P}}}IsLocked(CurrentFocus)) {
		Focus(CurrentFocus, State.Controls.Button_PlayOffline);
	}

	// Align icons and labels
	State.Controls.Label_Start.RelativePosition_V3.X = (C_Size_ButtonIcon.X * 0.5) + 0.25;
	State.Controls.ButtonIcon_Start.RelativePosition_V3.X = (ML::Min(State.Controls.Label_Start.Size.X, State.Controls.Label_Start.ComputeWidth(State.Controls.Label_Start.Value)) * -0.5) - 0.25;

	// Reset voice chat channel by precaution
	ParentApp.VoiceChat.SyncMode = CVoiceChatConfig::ESyncMode::Manual;
	ParentApp.VoiceChat.Manual_Channel = "";
	ParentApp.VoiceChat.Manual_ClearUsers();
	ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting = CGameUserVoiceChat::EMuteSetting::NotMuted;

	return State;
}

K_State StartConnection(K_State _State, CMasterServerUser::EMasterServerConnectionStatus _ConnectionStatus, Boolean _DisplayUbiConnectOverlay) {
	declare K_State State = _State;

	{{{UserStore::P}}}Action_SetOfflineMode(This, False);
	State.ConnectionTimeOut = Now + C_ConnectionTimeOut;
	State.DisplayUbiConnectOverlay = _DisplayUbiConnectOverlay;
	HideError(State);

	if (_ConnectionStatus == CMasterServerUser::EMasterServerConnectionStatus::Connected) {
		State = SetConnectionProgress(State, C_ConnectionProgress_Check_HttpHeaders);
	} else {
		State.Task_ConnectUser = Task::DestroyAndCreate(
			State.Task_ConnectUser,
			UserMgr,
			UserMgr.ConnectUser(State.MainUserId, State.DisplayUbiConnectOverlay)
		);
		if (!State.AlreadyTriedToLinkUbiConnectAccount && State.DisplayUbiConnectOverlay) {
			State.AlreadyTriedToLinkUbiConnectAccount = True;
		}
		State = SetConnectionProgress(State, C_ConnectionProgress_Check_TaskConnectUser);
	}
	
	return State;
}

K_State StartUbisoftConnect(K_State _State) {
	declare K_State State = _State;
	
	State.ConnectionTimeOut = Now + C_ConnectionTimeOut;
	State.Task_ShowUbisoftConnectReward = Task::DestroyAndCreate(
		State.Task_ShowUbisoftConnectReward,
		UserMgr,
		UserMgr.UbisoftConnect_ShowReward(State.MainUserId, "")
	);
	State = SetConnectionProgress(State, C_ConnectionProgress_WaitUbiConnectOverlay);

	return State;
}

K_State StartPreloadOnline(K_State _State) {
	declare K_State State = _State;

	State.ConnectionTimeOut = Now + C_ConnectionTimeOut_PreloadOnline;
	State = SetConnectionProgress(State, C_ConnectionProgress_PreloadOnline);
	State.PreloadingOnlineData = [];

	// Merge the online infrastructure specific config into the title config
	if (ParentApp.ManiaPlanet != Null) {
		Config::MergeJson(ParentApp.ManiaPlanet.Config_GameScriptConfigJson, Config::C_Source_ClientOnline);
	}

	// Load user's pinned club and club tag
	{{{ClubStore::P}}}Action_LoadPinAndTagClub(This);
	State.PreloadingOnlineData.add(C_PreloadData_LoadPinAndTagClub);

	// Preload clubs for the club widget
	{{{ClubStore::P}}}Action_LoadAllClubsPage(This, "", 0, {{{Const::C_ClubWidget_MaxClubsDisplayed}}});
	State.PreloadingOnlineData.add(C_PreloadData_LoadAllClubsPage);

	// Preload user's trophies and matchmaking info
	{{{UserStore::P}}}Action_LoadUserTrophyRankings(This, LocalUser.WebServicesUserId);
	{{{UserStore::P}}}Action_LoadMatchmakingInfos(This, LocalUser.WebServicesUserId);
	State.PreloadingOnlineData.add(C_PreloadData_LoadUserTrophyRankings);
	State.PreloadingOnlineData.add(C_PreloadData_LoadMatchmakingInfos);

	// Preload current quarterly and monthly campaign
	if (C_PreloadLiveCampaigns) {
		{{{CampaignStore::P}}}Action_LoadLiveQuarterlyCampaign(This, {{{CampaignAPI::C_CachePreload_CampaignOfficial}}});
		{{{CampaignStore::P}}}Action_LoadLiveMonthlyCampaign(This, {{{CampaignAPI::C_CachePreload_CampaignMonthly}}});
		State.PreloadingOnlineData.add(C_PreloadData_LoadLiveQuarterlyCampaign);
		State.PreloadingOnlineData.add(C_PreloadData_LoadLiveMonthlyCampaign);
	}

	// Preload trophy rewards for achievements (eg: campaign medals, campaign completion, ...)
	declare Boolean PressStart_IsLoadingTrophyRewards for LocalUser;
	SendCustomEvent("{{{C_Event_LoadTrophyRewards}}}", []);
	PressStart_IsLoadingTrophyRewards = True;
	State.PreloadingOnlineData.add(C_PreloadData_LoadTrophyRewards);

	// Load news
	{{{NewsStore::P}}}Action_LoadNews(This);
	State.PreloadingOnlineData.add(C_PreloadData_LoadNews);

	return State;
}

K_State ConnectUserOffline(K_State _State) {
	declare K_State State = _State;

	State.ConnectionTimeOut = Now + C_ConnectionTimeOut;
	State = SetConnectionProgress(State, C_ConnectionProgress_Check_TaskConnectUserOffline);

	State.Task_ConnectUser = Task::DestroyAndCreate(
		State.Task_ConnectUser,
		UserMgr,
		UserMgr.ConnectUser(State.MainUserId, False, True)
	);

	return State;
}

K_State StartPreloadOffline(K_State _State) {
	declare K_State State = _State;

	State.ConnectionTimeOut = Now + C_ConnectionTimeOut;
	State = SetConnectionProgress(State, C_ConnectionProgress_PreloadOffline);

	{{{UserStore::P}}}Action_SetOfflineMode(This, True);
	{{{CampaignStore::P}}}Action_LoadOfflineCampaign(This);

	State.PreloadingOfflineData = [
		C_PreloadData_LoadOfflineCampaign,
		C_PreloadData_EnableOfflineMode
	];

	return State;
}

K_State UpdateMainUser(K_State _State, CUserV2 _MainUser) {
	declare K_State State = _State;

	if (_MainUser != Null) {
		State.MainUserId = _MainUser.Id;
		State.MainUserDisplayName = _MainUser.DisplayName;
		State.Controls.Label_ProfileName.Value = TL::Compose("{{{Text_ConnectedAs}}}", "$<"^State.MainUserDisplayName^"$>");
		State.Controls.Label_UbiConnectWelcomeMessage.Value = TL::Compose("{{{Text_UbiConnectWelcome}}}", "$<${{{CL::RgbToHex3(ColorPalette::C_Color_Vec3_GreenOne)}}}"^State.MainUserDisplayName^"$>");
		State.Controls.Label_WelcomeBackWelcomeMessage.Value = TL::Compose("{{{Text_WelcomeBackWelcome}}}", "$<${{{CL::RgbToHex3(ColorPalette::C_Color_Vec3_GreenOne)}}}"^State.MainUserDisplayName^"$>");
	} else {
		State.MainUserId = NullId;
		State.MainUserDisplayName = "";
		State.Controls.Label_ProfileName.Value = "{{{Text_NotConnected}}}";
		State.Controls.Label_UbiConnectWelcomeMessage.Value = "{{{Text_UbiConnectWelcomeNoName}}}";
		State.Controls.Label_WelcomeBackWelcomeMessage.Value = "{{{Text_WelcomeBackWelcomeNoName}}}";
	}

	return State;
}

Void PlayEnterPageAnimation(K_Controls _Controls) {
	_Controls.Quad_Logo.RelativeScale = 1.2;
	_Controls.Quad_Logo.RelativePosition_V3.Y = C_PosY_Logo + 10.;
	_Controls.Quad_Logo.Opacity = 0.;
	AnimMgr.Flush(_Controls.Quad_Logo);
	AnimMgr.Add(_Controls.Quad_Logo, "<anim pos=\"0 "^C_PosY_Logo^"\" scale=\"1\" opacity=\"1\" />", C_EnterPageAnimationDuration, CAnimManager::EAnimManagerEasing::QuadOut);

	_Controls.Frame_Connection.RelativeScale = 1.15;
	_Controls.Frame_Connection.RelativePosition_V3.Y = C_PosY_FrameConnection - 5.;
	AnimMgr.Flush(_Controls.Frame_Connection);
	AnimMgr.Add(_Controls.Frame_Connection, "<anim pos=\"0 "^C_PosY_FrameConnection^"\" scale=\"1\" />", C_EnterPageAnimationDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	{{{LoadingSpinner::P}}}Fade(This, _Controls.LoadingSpinnner_Connection, 1., C_EnterPageAnimationDuration);
}

K_State PlayLeavePageAnimation(K_State _State) {
	declare K_State State = _State;
	
	{{{OnlineServicesStatusCard::P}}}HideOnlineServicesStatus(State.Controls.Frame_OnlineServicesStatusCard);
	State.Controls.Quad_Logo.RelativeScale = 1.;
	State.Controls.Quad_Logo.RelativePosition_V3.Y = C_PosY_Logo;
	State.Controls.Quad_Logo.Opacity = 1.;
	AnimMgr.Flush(State.Controls.Quad_Logo);
	AnimMgr.Add(State.Controls.Quad_Logo, "<anim pos=\"0 "^(C_PosY_Logo + 10)^"\" scale=\"1.2\" opacity=\"0\" />", C_LeavePageAnimationDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	
	State.Controls.LoadingSpinnner_Connection.RelativeScale = 1.;
	State.Controls.LoadingSpinnner_Connection.RelativePosition_V3.Y = C_PosY_SpinnerConnection;
	AnimMgr.Flush(State.Controls.LoadingSpinnner_Connection);
	AnimMgr.Add(State.Controls.LoadingSpinnner_Connection, "<anim pos=\"0 "^(C_PosY_SpinnerConnection - 5.)^"\" scale=\"1.1\" />", C_ConnectionAnimationDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	{{{LoadingSpinner::P}}}Fade(This, State.Controls.LoadingSpinnner_Connection, 0., C_LeavePageAnimationDuration);
	State = DisplayWarnings(State, False);

	State.LeavePageAnimationEndTime = Now + C_LeavePageAnimationDuration;

	return State;
}

K_State Select(K_State _State, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-play-offline", "button-ubi-connect-offline": {
			State = ConnectUserOffline(State);
			HideError(State);
		}
		case "button-back": {
			State = SetConnectionProgress(State, C_ConnectionProgress_MenuStart);
			HideError(State);
		}
		case "button-quit-game": {
			if (!Platform::IsFromFirstParty(System)) {
				ParentApp.Menu_Quit();
			}
		}
		case "button-ubi-connect-link": {
			State = StartConnection(State, UserMgr.MainUserWebServicesInfo.ConnectionStatus, True);
		}
		case "button-ubi-connect-back": {
			State = SetConnectionProgress(State, C_ConnectionProgress_MenuStart);
			HideError(State);
		}
		case "button-welcome-back-open": {
			State = StartUbisoftConnect(State);
		}
		case "button-welcome-back-later": {
			State.ConnectionTimeOut = Now + C_ConnectionTimeOut;
			State = SetConnectionProgress(State, C_ConnectionProgress_Check_ConnectionStatus);
		}
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_State State;

{{{ExpendableButton::P}}}CreateStyle(This, "{{{C_ExpendableButtonStyle_StackPressStart}}}", {{{ExpendableButton::P}}}K_Properties {
	Enabled = [
		{{{ExpendableButton::P}}}C_Property_Width,
		{{{ExpendableButton::P}}}C_Property_Height,
		{{{ExpendableButton::P}}}C_Property_HAlign,
		{{{ExpendableButton::P}}}C_Property_VAlign,
		{{{ExpendableButton::P}}}C_Property_TextFontSize
	],
	Width = 120.,
	Height = 10.,
	HAlign = CMlControl::AlignHorizontal::HCenter,
	VAlign = CMlControl::AlignVertical::VCenter,
	TextFontSize = 4.
});
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Quad_Logo <=> (Frame_Global.GetFirstChild("quad-logo") as CMlQuad);
State.Controls.Label_Error <=> (Frame_Global.GetFirstChild("label-error") as CMlLabel);
State.Controls.LoadingSpinnner_Connection <=> (Frame_Global.GetFirstChild("loading-spinner-connection") as CMlFrame);
State.Controls.Frame_Connection <=> (Frame_Global.GetFirstChild("frame-connection") as CMlFrame);
State.Controls.Frame_Start <=> (State.Controls.Frame_Connection.GetFirstChild("frame-start") as CMlFrame);
State.Controls.Label_Start <=> (State.Controls.Frame_Start.GetFirstChild("label-start") as CMlLabel);
State.Controls.ButtonIcon_Start <=> (State.Controls.Frame_Start.GetFirstChild("button-icon-start") as CMlFrame);
State.Controls.Frame_Profile <=> (State.Controls.Frame_Connection.GetFirstChild("frame-profile") as CMlFrame);
State.Controls.Label_ProfileName <=> (State.Controls.Frame_Profile.GetFirstChild("label-name") as CMlLabel);
State.Controls.Frame_PlayOffline <=> (Frame_Global.GetFirstChild("frame-play-offline") as CMlFrame);
State.Controls.Button_PlayOffline <=> (State.Controls.Frame_PlayOffline.GetFirstChild("button-play-offline") as CMlFrame);
State.Controls.Button_Back <=> (State.Controls.Frame_PlayOffline.GetFirstChild("button-back") as CMlFrame);
State.Controls.Button_QuitGame <=> (State.Controls.Frame_PlayOffline.GetFirstChild("button-quit-game") as CMlFrame);
State.Controls.Button_StartClick <=> (Frame_Global.GetFirstChild("button-start-click") as CMlQuad);
State.Controls.Frame_UbiConnect <=> (Frame_Global.GetFirstChild("frame-ubi-connect") as CMlFrame);
State.Controls.PopUpBackground_UbiConnect <=> (State.Controls.Frame_UbiConnect.GetFirstChild("pop-up-background-ubi-connect") as CMlFrame);
State.Controls.Frame_UbiConnectContent <=> (State.Controls.Frame_UbiConnect.GetFirstChild("frame-ubi-connect-content") as CMlFrame);
State.Controls.Frame_UbiConnectButtons <=> (State.Controls.Frame_UbiConnect.GetFirstChild("frame-ubi-connect-buttons") as CMlFrame);
State.Controls.Button_UbiConnectLink <=> (State.Controls.Frame_UbiConnect.GetFirstChild("button-ubi-connect-link") as CMlFrame);
State.Controls.Button_UbiConnectOffline <=> (State.Controls.Frame_UbiConnect.GetFirstChild("button-ubi-connect-offline") as CMlFrame);
State.Controls.Button_UbiConnectBack <=> (State.Controls.Frame_UbiConnect.GetFirstChild("button-ubi-connect-back") as CMlFrame);
State.Controls.Label_UbiConnectWelcomeMessage <=> (State.Controls.Frame_UbiConnect.GetFirstChild("label-ubi-connect-welcome-message") as CMlLabel);
State.Controls.Label_UbiConnectConnect <=> (State.Controls.Frame_UbiConnect.GetFirstChild("label-ubi-connect-connect") as CMlLabel);
State.Controls.Label_UbiConnectBenefits <=> (State.Controls.Frame_UbiConnect.GetFirstChild("label-ubi-connect-benefits") as CMlLabel);
State.Controls.Frame_WelcomeBack <=> (Frame_Global.GetFirstChild("frame-welcome-back") as CMlFrame);
State.Controls.PopUpBackground_WelcomeBack <=> (State.Controls.Frame_WelcomeBack.GetFirstChild("pop-up-background-welcome-back") as CMlFrame);
State.Controls.Frame_WelcomeBackContent <=> (State.Controls.Frame_WelcomeBack.GetFirstChild("frame-welcome-back-content") as CMlFrame);
State.Controls.Frame_WelcomeBackButtons <=> (State.Controls.Frame_WelcomeBack.GetFirstChild("frame-welcome-back-buttons") as CMlFrame);
State.Controls.Button_WelcomeBackOpen <=> (State.Controls.Frame_WelcomeBack.GetFirstChild("button-welcome-back-open") as CMlFrame);
State.Controls.Label_WelcomeBackWelcomeMessage <=> (State.Controls.Frame_WelcomeBack.GetFirstChild("label-welcome-back-message") as CMlLabel);
State.Controls.Label_WelcomeBackBenefits <=> (State.Controls.Frame_WelcomeBack.GetFirstChild("label-welcome-back-benefits") as CMlLabel);
State.Controls.Frame_OnlineServicesStatusCard <=> (Frame_Global.GetFirstChild("online-services-status-card") as CMlFrame);
State.Controls.Frame_Warnings <=> (Frame_Global.GetFirstChild("frame-warnings") as CMlFrame);

// Align Ubisoft Connect pop-up content
declare Vec2 ContentAreaPosition = {{{PopUpBackground::P}}}GetContentAreaPosition(State.Controls.PopUpBackground_UbiConnect);
declare Vec2 ContentAreaSize = {{{PopUpBackground::P}}}GetContentAreaSize(State.Controls.PopUpBackground_UbiConnect);
declare Real BackgroundWidth = {{{PopUpBackground::P}}}GetBackgroundWidth(State.Controls.PopUpBackground_UbiConnect);
State.Controls.Frame_UbiConnectContent.RelativePosition_V3 = ContentAreaPosition + <BackgroundWidth * 0.5, 0.>;
State.Controls.Label_UbiConnectWelcomeMessage.RelativePosition_V3 = MLHelpers::SkewX(<0., -9.5>, {{{PopUpBackground::P}}}C_SkewAngle);
State.Controls.Label_UbiConnectWelcomeMessage.Size.X = BackgroundWidth - 4;
State.Controls.Label_UbiConnectConnect.RelativePosition_V3 = MLHelpers::SkewX(<0., -16.>, {{{PopUpBackground::P}}}C_SkewAngle);
State.Controls.Label_UbiConnectConnect.Size.X = BackgroundWidth - 4;
State.Controls.Label_UbiConnectBenefits.RelativePosition_V3 = MLHelpers::SkewX(<BackgroundWidth * -0.45, -24.>, {{{PopUpBackground::P}}}C_SkewAngle);
State.Controls.Label_UbiConnectBenefits.Size.X = ContentAreaSize.X * 0.9;
State.Controls.Frame_UbiConnectButtons.RelativePosition_V3 = MLHelpers::SkewX(<0., -86.>, {{{PopUpBackground::P}}}C_SkewAngle);

// Align welcome back pop-up content
State.Controls.Frame_WelcomeBackContent.RelativePosition_V3 = State.Controls.Frame_UbiConnectContent.RelativePosition_V3;
State.Controls.Label_WelcomeBackWelcomeMessage.RelativePosition_V3 = State.Controls.Label_UbiConnectWelcomeMessage.RelativePosition_V3;
State.Controls.Label_WelcomeBackWelcomeMessage.Size.X = State.Controls.Label_UbiConnectWelcomeMessage.Size.X;
State.Controls.Label_WelcomeBackBenefits.RelativePosition_V3 = MLHelpers::SkewX(<BackgroundWidth * -0.45, -24.>, {{{PopUpBackground::P}}}C_SkewAngle);
State.Controls.Label_WelcomeBackBenefits.Size.X = ContentAreaSize.X * 0.9;
State.Controls.Frame_WelcomeBackButtons.RelativePosition_V3 = State.Controls.Frame_UbiConnectButtons.RelativePosition_V3;

State = InitializePage(State);
State = UpdateMainUser(State, UserMgr.MainUser);
State.Controls.Label_UbiConnectBenefits.Value = C_Text_UbiConnectBenefits;
State.Controls.Label_WelcomeBackBenefits.Value = C_Text_WelcomeBackBenefits;
***

***MainLoop***
***
foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
	switch (Event.Type) {
		case "{{{Router::C_Event_EnteringRoute}}}": {
			// Allow the user to login with a gamepad
			// see: /trackmania-next/tmnext/-/issues/5026
			UserMgr.MainUserAcceptPressStart = True;

			State = InitializePage(State);
			PlayEnterPageAnimation(State.Controls);
			AudioManager::SetNewSoundBalance(This, AudioManager::C_Default_State, 1000);
			
			// Get online services status
			{{{OnlineServicesStatusStore::P}}}Action_GetStatus(This);
		}
	}
}

if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_PressStart}}}")) {
	if (
		(UserMgr.MainUser != Null && State.MainUserId != UserMgr.MainUser.Id) ||
		(UserMgr.MainUser != Null && State.MainUserDisplayName != UserMgr.MainUser.DisplayName) ||
		(UserMgr.MainUser == Null && State.MainUserId != NullId)
	) {
		State = UpdateMainUser(State, UserMgr.MainUser);
	}

	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{OnlineServicesStatusStore::P}}}C_Event_OnlineServicesStatusUpdated: {
						{{{OnlineServicesStatusCard::P}}}DisplayOnlineServicesStatus({{{OnlineServicesStatusStore::P}}}GetCurrentStatus(), State.Controls.Frame_OnlineServicesStatusCard);
						if (State.ConnectionProgress == C_ConnectionProgress_Check_OnlineServicesStatus) {
							State = SetConnectionProgress(State, C_ConnectionProgress_MenuStart);
						}
					}
				}
			}
		}
	}

	// Use a series of `if` so every step can be executed in the same frame
	if (State.ConnectionProgress == C_ConnectionProgress_Check_MainUserLogged) {
		// Only pressing "A" or "Cross" on the controller will pair it to a user
		// Wait until it is the case (`MainUserLogged == True`) while continuing
		// to display the "Press A/Cross" message
		// see: /trackmania-next/tmnext/-/issues/5051
		if (UserMgr.MainUserLogged) {
			State = StartConnection(State, UserMgr.MainUserWebServicesInfo.ConnectionStatus, False);
		}
	}
	if (State.ConnectionProgress == C_ConnectionProgress_Check_TaskConnectUser) {
		if (C_TimeOutTaskConnectUser && Now >= State.ConnectionTimeOut) {
			State.Task_ConnectUser = Task::Destroy(State.Task_ConnectUser);
			State = SetError(State, Error::GetErrorMessage(Error::C_Type_ManiaScript, Error::C_Code_PressStart_TaskConnectUserTimeOut));
			State = SetConnectionProgress(State, C_ConnectionProgress_Result);
		} else if (Task::IsInitialized(State.Task_ConnectUser)) {
			State.Task_ConnectUser = Task::Update(State.Task_ConnectUser);
			if (!Task::IsRunning(State.Task_ConnectUser)) {
				if (Task::IsSuccess(State.Task_ConnectUser)) {
					State.ConnectionTimeOut = Now + C_ConnectionTimeOut;
					// There are a few restrictions on when the welcome back pop-up can be displayed
					// Check : /trackmania-next/tmnext/-/issues/3942
					if (
						!State.DisplayUbiConnectOverlay &&
						!{{{UserStore::P}}}GetUserHasLinkedUbiConnectInsideTrackmania() &&
						!{{{UserStore::P}}}GetUserHasSeenUbiConnectWelcomeBack() &&
						!{{{UserStore::P}}}GetUserIsFirstBoot()
					) {
						State = SetConnectionProgress(State, C_ConnectionProgress_MenuWelcomeBack);
						{{{UserStore::P}}}SetUserHasSeenUbiConnectWelcomeBack(True);
					} else {
						// If the user successfuly connected while `DisplayUbiConnectOverlay` is `True`
						// it means that they just linked their Ubisoft Connect account to their first party account
						if (State.DisplayUbiConnectOverlay) {
							{{{UserStore::P}}}SetUserHasLinkedUbiConnectInsideTrackmania(True);
						}
						State = SetConnectionProgress(State, C_ConnectionProgress_Check_ConnectionStatus);
					}
				} else {
					declare Task::K_SourceTaskError SourceTaskError = Task::GetSourceTaskError(State.Task_ConnectUser);
					if (SourceTaskError.Type == Error::C_Type_UbiServices && SourceTaskError.Code == Error::C_Code_UbiServices_NeedUbiConnectAccount) {
						State = SetConnectionProgress(State, C_ConnectionProgress_MenuUbiConnect);
					} else {
						State = SetError(State, Error::GetAlternativeErrorMessage(Error::C_Description_ConnectionFailed, Task::GetCustomError(State.Task_ConnectUser)));
						State = SetConnectionProgress(State, C_ConnectionProgress_Result);
					}
				}
				State.Task_ConnectUser = Task::Destroy(State.Task_ConnectUser);
			}
		} else {
			State = SetError(State, Error::GetErrorMessage(Error::C_Type_ManiaScript, Error::C_Code_PressStart_TaskConnectUserDestroyed));
			State = SetConnectionProgress(State, C_ConnectionProgress_Result);
		}
	}
	if (State.ConnectionProgress == C_ConnectionProgress_WaitUbiConnectOverlay) {
		if (Task::IsInitialized(State.Task_ShowUbisoftConnectReward)) {
			State.Task_ShowUbisoftConnectReward = Task::Update(State.Task_ShowUbisoftConnectReward);
			if (!Task::IsRunning(State.Task_ShowUbisoftConnectReward)) {
				if (!Task::IsSuccess(State.Task_ShowUbisoftConnectReward)) {
					// This message won't be visible because we go directly to the next step
					// `C_ConnectionProgress_Check_ConnectionStatus` without waiting
					State = SetError(State, Error::GetAlternativeErrorMessage(Error::C_Description_UbiConnect_OverlayOpeningFailed, Task::GetCustomError(State.Task_ShowUbisoftConnectReward)));
					DisplayError(State);
				}
				State.ConnectionTimeOut = Now + C_ConnectionTimeOut;
				State = SetConnectionProgress(State, C_ConnectionProgress_Check_ConnectionStatus);
				State.Task_ShowUbisoftConnectReward = Task::Destroy(State.Task_ShowUbisoftConnectReward);
			}
		} else {
			State.ConnectionTimeOut = Now + C_ConnectionTimeOut;
			State = SetConnectionProgress(State, C_ConnectionProgress_Check_ConnectionStatus);
		}
	}
	if (State.ConnectionProgress == C_ConnectionProgress_Check_ConnectionStatus) {
		if (Now >= State.ConnectionTimeOut) {
			State = SetError(State, Error::GetErrorMessage(Error::C_Type_ManiaScript, Error::C_Code_PressStart_ConnectionStatusTimeout));
			State = SetConnectionProgress(State, C_ConnectionProgress_Result);
		} else if (UserMgr.MainUserWebServicesInfo.ConnectionStatus == CMasterServerUser::EMasterServerConnectionStatus::NotConnected) {
			State = SetError(State, Error::GetErrorMessage(Error::C_Type_ManiaScript, Error::C_Code_PressStart_ConnectionStatusNotConnected));
			State = SetConnectionProgress(State, C_ConnectionProgress_Result);
		} else if (UserMgr.MainUserWebServicesInfo.ConnectionStatus == CMasterServerUser::EMasterServerConnectionStatus::Connected) {
			State.ConnectionTimeOut = Now + C_ConnectionTimeOut;
			State = SetConnectionProgress(State, C_ConnectionProgress_Check_HttpHeaders);
		}
	}
	if (State.ConnectionProgress == C_ConnectionProgress_Check_HttpHeaders) {
		if (Now >= State.ConnectionTimeOut) {
			State = SetError(State, Error::GetErrorMessage(Error::C_Type_ManiaScript, Error::C_Code_PressStart_HttpHeadersTimeout));
			State = SetConnectionProgress(State, C_ConnectionProgress_Result);
		} else if (HttpLiveAuthorizationHeader::IsSet() && HttpClubAuthorizationHeader::IsSet()) {
			State = StartPreloadOnline(State);
		}
	}
	if (State.ConnectionProgress == C_ConnectionProgress_PreloadOnline) {
		if (Now >= State.ConnectionTimeOut) {
			State = SetConnectionProgress(State, C_ConnectionProgress_Result);
		} else if (State.PreloadingOnlineData.count <= 0) {
			State = SetConnectionProgress(State, C_ConnectionProgress_Result);
		} else {
			foreach (Event in PendingEvents) {
				if (Event.Type == CMlScriptEvent::Type::PluginCustomEvent) {
					switch (Event.CustomEventType) {
						case {{{ClubStore::P}}}C_Event_LoadPinAndTagClubUpdate: {
							if (Event.CustomEventData.count >= 1 && !Tools::TextToBoolean(Event.CustomEventData[0])) {
								State.PreloadingOnlineData.remove(C_PreloadData_LoadPinAndTagClub);
							}
						}
						case {{{ClubStore::P}}}C_Event_LoadAllClubsPageComplete: {
							State.PreloadingOnlineData.remove(C_PreloadData_LoadAllClubsPage);
						}
						case {{{UserStore::P}}}C_Event_LoadUserTrophyRankingsComplete: {
							State.PreloadingOnlineData.remove(C_PreloadData_LoadUserTrophyRankings);
						}
						case {{{UserStore::P}}}C_Event_LoadMatchmakingInfosComplete: {
							State.PreloadingOnlineData.remove(C_PreloadData_LoadMatchmakingInfos);
						}
						case {{{CampaignStore::P}}}C_Event_LiveQuarterlyCampaignUpdated: {
							if (State.PreloadingOnlineData.exists(C_PreloadData_LoadLiveQuarterlyCampaign)) {
								declare Status = {{{CampaignStore::P}}}GetLiveQuarterlyCampaignStatus();
								if (
									Status == {{{CampaignStore::P}}}C_LiveCampaignStatus_NoCampaigns ||
									Status == {{{CampaignStore::P}}}C_LiveCampaignStatus_Error
								) {
									// No quarterly campaign to preload or error while preloading, stop here.
									State.PreloadingOnlineData.remove(C_PreloadData_LoadLiveQuarterlyCampaign);
								} else if (Status == {{{CampaignStore::P}}}C_LiveCampaignStatus_Loaded) {
									declare Integer QuarterlyLiveCampaignId = {{{CampaignStore::P}}}GetLiveQuarterlyCampaign().Id;
									if (QuarterlyLiveCampaignId != {{{CampaignStruct::P}}}C_Campaign_NullId) {
										{{{CampaignStore::P}}}Action_LoadCampaign(This, QuarterlyLiveCampaignId);
									} else {
										State.PreloadingOnlineData.remove(C_PreloadData_LoadLiveQuarterlyCampaign);
									}
								}
							}
						}
						case {{{CampaignStore::P}}}C_Event_CampaignLoadComplete: {
							if (
								State.PreloadingOnlineData.exists(C_PreloadData_LoadLiveQuarterlyCampaign) &&
								Event.CustomEventData.count >= 1 &&
								TL::ToInteger(Event.CustomEventData[0]) == {{{CampaignStore::P}}}GetLiveQuarterlyCampaign().Id
							) {
								// Load player live quaterly campaign ranking to display it in the Solo page 
								{{{CampaignStore::P}}}Action_LoadCampaignPlayerGlobalRankings(This, {{{CampaignStore::P}}}GetLiveQuarterlyCampaign().Id, {{{CampaignStore::P}}}GetLiveQuarterlyCampaign().LeaderboardGroupUid);
								State.PreloadingOnlineData.remove(C_PreloadData_LoadLiveQuarterlyCampaign);
							}
						}
						case {{{CampaignStore::P}}}C_Event_LiveMonthlyCampaignUpdated: {
							if (State.PreloadingOnlineData.exists(C_PreloadData_LoadLiveMonthlyCampaign)) {
								declare Status = {{{CampaignStore::P}}}GetLiveMonthlyCampaignStatus();
								if (
									Status == {{{CampaignStore::P}}}C_LiveCampaignStatus_NoCampaigns ||
									Status == {{{CampaignStore::P}}}C_LiveCampaignStatus_Error
								) {
									// No monthly campaign to preload or error while preloading, stop here.
									State.PreloadingOnlineData.remove(C_PreloadData_LoadLiveMonthlyCampaign);
								}
								// Other values could be `C_LiveCampaignStatus_Loading` and we should continue to wait until the end of the loading.
								// Or `C_LiveCampaignStatus_Loaded` and then we must wait for the `C_Event_MonthlyCampaignLoadComplete` event.
							}
						}
						case {{{CampaignStore::P}}}C_Event_MonthlyCampaignLoadComplete: {
							if (
								State.PreloadingOnlineData.exists(C_PreloadData_LoadLiveMonthlyCampaign) &&
								Event.CustomEventData.count >= 1 && 
								TL::ToInteger(Event.CustomEventData[0]) == {{{CampaignStore::P}}}GetLiveMonthlyCampaign().Id
							) {
								State.PreloadingOnlineData.remove(C_PreloadData_LoadLiveMonthlyCampaign);
							}
						}
						case {{{NewsStore::P}}}C_Event_NewsLoadingUpdate: {
							if (
								State.PreloadingOnlineData.exists(C_PreloadData_LoadNews) &&
								Event.CustomEventData.count >= 1
							) {
								declare Integer NewsLoadingState = TL::ToInteger(Event.CustomEventData[0]);
								if (
									NewsLoadingState == {{{NewsStore::P}}}C_NewsLoadingState_Loaded ||
									NewsLoadingState == {{{NewsStore::P}}}C_NewsLoadingState_Error
								) {
									if (NewsLoadingState == {{{NewsStore::P}}}C_NewsLoadingState_Loaded) {
										{{{NewsStore::P}}}PreloadNewsMedia(This);
									}
									State.PreloadingOnlineData.remove(C_PreloadData_LoadNews);
								}
							}
						}
					}
				}
			}
			if (State.PreloadingOnlineData.exists(C_PreloadData_LoadTrophyRewards)) {
				declare Boolean PressStart_IsLoadingTrophyRewards for LocalUser;
				if (!PressStart_IsLoadingTrophyRewards) {
					State.PreloadingOnlineData.remove(C_PreloadData_LoadTrophyRewards);
				}
			}
		}
	}
	if (State.ConnectionProgress == C_ConnectionProgress_Result) {
		if (
			UserMgr.MainUserWebServicesInfo.ConnectionStatus == CMasterServerUser::EMasterServerConnectionStatus::Connected &&
			HttpLiveAuthorizationHeader::IsSet() &&
			HttpClubAuthorizationHeader::IsSet()
		) {
			State = SetConnectionProgress(State, C_ConnectionProgress_Redirect);
			// Once the user is connected, update the build info with the user's login and account id.
			SendCustomEvent("{{{BuildInfo::C_Event_UpdateBuildInfo}}}", []);
			// The first boot is validated only after a successful connection
			if ({{{UserStore::P}}}GetUserIsFirstBoot()) {
				{{{UserStore::P}}}SetUserIsFirstBoot(False);
			}
		} else {
			State = SetConnectionProgress(State, C_ConnectionProgress_MenuOffline);
			DisplayError(State);
		}
	}
	if (State.ConnectionProgress == C_ConnectionProgress_Check_TaskConnectUserOffline) {
		if (C_TimeOutTaskConnectUser && Now >= State.ConnectionTimeOut) {
			State.Task_ConnectUser = Task::Destroy(State.Task_ConnectUser);
			State = SetError(State, Error::GetErrorMessage(Error::C_Type_ManiaScript, Error::C_Code_PressStart_TaskConnectUserOfflineTimeOut));
			State = SetConnectionProgress(State, C_ConnectionProgress_Result);
		} else if (Task::IsInitialized(State.Task_ConnectUser)) {
			State.Task_ConnectUser = Task::Update(State.Task_ConnectUser);
			if (!Task::IsRunning(State.Task_ConnectUser)) {
				if (Task::IsSuccess(State.Task_ConnectUser)) {
					State = StartPreloadOffline(State);
				} else {
					State = SetError(State, Error::GetAlternativeErrorMessage(Error::C_Description_ManiaScript_OfflineModeInitFailed, Task::GetCustomError(State.Task_ConnectUser)));
					State = SetConnectionProgress(State, C_ConnectionProgress_Result);
				}
				State.Task_ConnectUser = Task::Destroy(State.Task_ConnectUser);
			}
		} else {
			State = SetError(State, Error::GetErrorMessage(Error::C_Type_ManiaScript, Error::C_Code_PressStart_TaskConnectUserOfflineDestroyed));
			State = SetConnectionProgress(State, C_ConnectionProgress_Result);
		}
	}
	if (State.ConnectionProgress == C_ConnectionProgress_PreloadOffline) {
		if (Now >= State.ConnectionTimeOut) {
			State = SetConnectionProgress(State, C_ConnectionProgress_Redirect);
		} else if (State.PreloadingOfflineData.count <= 0) {
			State = SetConnectionProgress(State, C_ConnectionProgress_Redirect);
		} else {
			foreach (Event in PendingEvents) {
				if (Event.Type == CMlScriptEvent::Type::PluginCustomEvent) {
					switch (Event.CustomEventType) {
						case {{{CampaignStore::P}}}C_Event_OfflineCampaignLoaded: {
							State.PreloadingOfflineData.remove(C_PreloadData_LoadOfflineCampaign);
						}
						case {{{UserStore::P}}}C_Event_OfflineModeUpdated: {
							if ({{{UserStore::P}}}IsOfflineMode()) {
								State.PreloadingOfflineData.remove(C_PreloadData_EnableOfflineMode);
							}
						}
					}
				}
			}
		}
	}
	if (State.ConnectionProgress == C_ConnectionProgress_Redirect) {
		if (State.RedirectPath == "" && !State.GoToZoneSelection) {
			// Select which page will follow
			State.RedirectPath = "{{{RoutePaths::C_Path_Home}}}";
			if (!{{{UserStore::P}}}GetUserHasSeenOnboardingOptions()) {
				State.RedirectPath = "{{{RoutePaths::C_Path_Onboarding}}}";
			} else if ({{{UserStore::P}}}IsOfflineMode()) {
				State.RedirectPath = "{{{RoutePaths::C_Path_Home}}}";
				{{{UserStore::P}}}SetCurrentPlayTabIndex({{{Const::C_TabIndex_Solo}}});
			} else if (Platform::IsPC(System) && !{{{UserStore::P}}}GetUserHasSetAdvertsPreferences()) {
				State.RedirectPath = "{{{RoutePaths::C_Path_AdsPreferences}}}";
			} else if (LocalUser.ZonePath == "" || LocalUser.ZonePath == Config::Get().DefaultMasterZone) {
				State.GoToZoneSelection = True;
			}

			Tracking::ResetAllActivities(ParentApp.TrackingMgr, System);
			SendCustomEvent("{{{C_Event_InitializeIsNetworkAvailable}}}", []);
			State = PlayLeavePageAnimation(State);
			HideError(State);
			SendCustomEvent("{{{PluginEvents::C_Event_MenuLoadFinished}}}", []);
		}
	}

	// Crossplay setting is known at some point after the user is connected on console, so update the warnings constantly
	if (
		!State.AreWarningsDisplayed && // Crossplay won't deactivate itself when loading the game
		{{{LoadingSpinner::P}}}IsLoading(State.Controls.LoadingSpinnner_Connection) &&
		State.ConnectionProgress != C_ConnectionProgress_Check_OnlineServicesStatus &&
		State.ConnectionProgress != C_ConnectionProgress_Redirect &&
		State.AreWarningsDisplayed != {{{UserStore::P}}}IsCrossPlayActive()
	) {
		State = DisplayWarnings(State, {{{UserStore::P}}}IsCrossPlayActive());
	}

	if (State.LeavePageAnimationEndTime > 0 && Now >= State.LeavePageAnimationEndTime) {
		State.LeavePageAnimationEndTime = 0;
		if (State.GoToZoneSelection) {
			{{{Router::P}}}Push(
				This,
				"{{{RoutePaths::C_Path_WelcomeChangeZone}}}",
				[],
				False,
				True,
				False,
				["{{{RoutePaths::C_Path_OverlayName_DirectLink}}}"]
			);
		} else if (State.RedirectPath != "") {
			{{{Router::P}}}Push(This, State.RedirectPath);
		} else {
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_Home}}}");
		}
	}

	// Disable menu interaction during a connection attempt
	if (State.ConnectionProgress == C_ConnectionProgress_MenuStart) {
		// Auto connect on PC
		if (
			Platform::IsPC(System) &&
			(
				{{{OnlineServicesStatusStore::P}}}GetCurrentStatusType() == {{{OnlineServicesStatusStore::P}}}C_OnlineServicesStatus_None || 
				{{{OnlineServicesStatusStore::P}}}GetCurrentStatusType() == {{{OnlineServicesStatusStore::P}}}C_OnlineServicesStatus_FailedRequest
			)
		) {
			State = SetConnectionProgress(State, C_ConnectionProgress_Check_MainUserLogged);
		}

		// Auto connect on PlayStation if there is a pending invitation
		if (
			ParentApp.ManiaPlanet != Null &&
			ParentApp.ManiaPlanet.DirectLink != Null &&
			Platform::IsSony(System) && (
				{{{OnlineServicesStatusStore::P}}}GetCurrentStatusType() == {{{OnlineServicesStatusStore::P}}}C_OnlineServicesStatus_None || 
				{{{OnlineServicesStatusStore::P}}}GetCurrentStatusType() == {{{OnlineServicesStatusStore::P}}}C_OnlineServicesStatus_FailedRequest
			)
		) {
			State = SetConnectionProgress(State, C_ConnectionProgress_Check_MainUserLogged);
		}

		// Wait button press on other platforms
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::KeyPress: {
					State = SetConnectionProgress(State, C_ConnectionProgress_Check_MainUserLogged);
				}
				case CMlScriptEvent::Type::MouseClick, CMlScriptEvent::Type::MouseRightClick: {
					if (Event.ControlId == "button-start-click") {
						State = SetConnectionProgress(State, C_ConnectionProgress_Check_MainUserLogged);
					}
				}
				case CMlScriptEvent::Type::PluginCustomEvent: {
					if (Event.CustomEventType == "{{{ShareMenuNavigation::C_Event_MenuNavigation}}}") {
						State = SetConnectionProgress(State, C_ConnectionProgress_Check_MainUserLogged);
					}
				}
			}
		}
	}
	if (
		State.ConnectionProgress == C_ConnectionProgress_MenuOffline ||
		State.ConnectionProgress == C_ConnectionProgress_MenuUbiConnect ||
		State.ConnectionProgress == C_ConnectionProgress_MenuWelcomeBack
	) {
		declare Text NavGroup = "";
		switch (State.ConnectionProgress) {
			case C_ConnectionProgress_MenuOffline: NavGroup = "{{{C_NavGroup_PlayOffline}}}";
			case C_ConnectionProgress_MenuUbiConnect: NavGroup = "{{{C_NavGroup_UbiConnect}}}";
			case C_ConnectionProgress_MenuWelcomeBack: NavGroup = "{{{C_NavGroup_WelcomeBack}}}";
		}
		foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
			switch (Event.Type) {
				case {{{Navigation::P}}}C_EventType_NavigateInput: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, NavGroup)) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							State = Select(State, Event.To);
						} else {
							Focus(Event.From, Event.To);
						}
					}
				}
				case {{{Navigation::P}}}C_EventType_NavigateMouse: {
					if ({{{Navigation::P}}}IsEventFromGroup(This, Event, NavGroup)) {
						if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
							State = Select(State, Event.To);
						} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
							Focus(Event.From, Event.To);
						}
					}
				}
			}
		}
	}
}
***
""",
[
	Transition::ComponentV2(),
	Navigation::ComponentV2(),
	MenuSounds::ComponentV2(),
	ButtonIcon::ComponentV2(),
	ShareMenuNavigation::ComponentV2(),
	Router::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	ExpendableButton::ComponentV2(),
	PopUpBackground::ComponentV2(),
	CampaignStore::ComponentV2(),
	UserStore::ComponentV2(),
	ClubStore::ComponentV2(),
	NewsStore::ComponentV2(),
	CampaignStruct::Component(),
	OnlineServicesStatusStore::ComponentV2(),
	OnlineServicesStatusCard::Component(),
	ClubStruct::Component()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	foreach (Event in PendingEvents) {
		if (Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
			if (Event.CustomEventType == C_Event_LoadTrophyRewards) {
				G_TrophyLoadRequest = Trophy::StartLoadTrophyRewards(ScoreMgr, MainUser::GetMainUserId());
				G_IsLoadingTrophies = True;
			} else if (Event.CustomEventType == C_Event_InitializeIsNetworkAvailable) {
				if (UserMgr != Null) {
					ConnectionError::InitializeIsNetworkAvailable(UserMgr.IsNetworkAvailable);
				}
			}
		}
	}

	if (G_IsLoadingTrophies && !Trophy::IsLoadingTrophyRewards(ScoreMgr, G_TrophyLoadRequest)) {
		Trophy::StopLoadTrophyRewards(ScoreMgr, G_TrophyLoadRequest);
		G_IsLoadingTrophies = False;
		declare Boolean PressStart_IsLoadingTrophyRewards for LocalUser = False;
		PressStart_IsLoadingTrophyRewards = False;
	}
}