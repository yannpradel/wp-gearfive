/** 
 *	Page: RankingsActivity
 */
#Const Version		"2023-04-03"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/RankingsActivity.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_RankingsActivity"
#Const C_NavGroupName "navgroup-page-rankings-activity"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N Text displayed while retrieving the ranking
	declare Text Text_RetrievingActivity = _("Retrieving ranking");

	declare Integer RankingColumnsNb = 1;
	declare Integer RankingRowsNb = 9;
	declare Integer RankingsPerPage = RankingColumnsNb * RankingRowsNb;
	declare Vec2 Size_RankingsScrollWindow = <230., 8.65 * RankingRowsNb>;
	declare Vec2 Size_RankingsMargin = <0., 0.>;	
	declare Vec2 Size_Ranking = Scroll::GetElementSize(Size_RankingsScrollWindow, Size_RankingsMargin, RankingColumnsNb, RankingRowsNb);
	declare Integer RankingsElementsNb = Scroll::GetRequiredElementsNb(Size_RankingsScrollWindow, Size_Ranking, Size_RankingsMargin, RankingColumnsNb);

	declare Vec2 Size_RankingNumber = <Size_Ranking.X * 0.1, Size_Ranking.Y>;
	declare Vec2 Size_RankingName = <Size_Ranking.X * 0.4, Size_Ranking.Y>;
	declare Vec2 Size_RankingNameBackground = <Size_Ranking.X * 0.43, Size_Ranking.Y*0.9>;
	declare Vec2 Size_RankingScore = <Size_Ranking.X * 0.11, Size_Ranking.Y>;
	declare Vec2 Size_RankingScoreBackground = <Size_Ranking.X * 0.15, Size_Ranking.Y*0.9>;
	declare Vec2 Size_Flag = <Size_Ranking.X * 0.045, Size_Ranking.Y * 0.89>;
	declare Vec2 Pos_RankingNumber = <Size_Ranking.X * 0.25, Size_Ranking.Y * -0.55>;
	declare Vec2 Pos_RankingName = <Size_Ranking.X * 0.335, Size_Ranking.Y * -0.55>;
	declare Vec2 Pos_RankingNameBackground = <Size_Ranking.X * 0.315, Size_Ranking.Y * -0.5>;
	declare Vec2 Pos_RankingScore = <Size_Ranking.X * 0.89, Size_Ranking.Y * -0.55>;
	declare Vec2 Pos_RankingScoreBackground = <Size_Ranking.X * 0.75, Size_Ranking.Y * -0.5>;
	declare Vec2 Pos_Flag = <Size_Ranking.X * 0.285, Size_Ranking.Y * -0.5>;
	
	declare Vec2 Size_RankingHeader = <0., 0.>;
	declare Vec2 Size_RankingFooter = <0., 0.>;

	declare ML_Rankings = "";
	for (I, 1, RankingsElementsNb) {
		ML_Rankings ^= """
			<frameinstance modelid="framemodel-ranking" class="{{{Scroll::C_Class_Element}}}" hidden="1" />
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="quad-default" halign="center" valign="center"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-ranking">
	<frameinstance id="quad-bg-name" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_RankingNameBackground.X}}}" data-height="{{{Size_RankingNameBackground.Y}}}" pos="{{{Pos_RankingNameBackground.X}}} {{{Pos_RankingNameBackground.Y}}}" data-color="{{{ColorPalette::C_Color_GreenFive}}}" data-opacity="0.4" data-halign="left" z-index="0"/>
	<frameinstance id="quad-bg-score" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{Size_RankingScoreBackground.X}}}" data-height="{{{Size_RankingScoreBackground.Y}}}" pos="{{{Pos_RankingScoreBackground.X}}} {{{Pos_RankingScoreBackground.Y}}}" data-color="{{{ColorPalette::C_Color_GreenFive}}}" data-opacity="0.4" data-halign="left" z-index="0"/>
	<quad id="quad-zone-flag" pincorners="<-0.75,1.>:<1.,1.>:<0.75,-1.>:<-1.,-1.>" class="quad-default" size="{{{Size_Flag.X}}} {{{Size_Flag.Y}}}" pos="{{{Pos_Flag.X}}} {{{Pos_Flag.Y}}}" z-index="0"/>
	<label id="label-rank" halign="right" size="{{{Size_RankingNumber.X}}} {{{Size_RankingNumber.Y}}}" class="text-semibold" pos="{{{Pos_RankingNumber.X}}} {{{Pos_RankingNumber.Y}}}" textfont="{{{FontManager::C_GameFontExtraBold}}}" textsize="4" textprefix="$i$t" z-index="1"/>
	<label id="label-name" halign="left" size="{{{Size_RankingName.X}}} {{{Size_RankingName.Y}}}" class="text-semibold" pos="{{{Pos_RankingName.X}}} {{{Pos_RankingName.Y}}}" textfont="{{{FontManager::C_GameFontExtraBold}}}" textsize="3." textprefix="$i$t" z-index="1"/>
	<label id="label-score" halign="right" size="{{{Size_RankingScore.X}}} {{{Size_RankingScore.Y}}}" class="text-semibold" pos="{{{Pos_RankingScore.X}}} {{{Pos_RankingScore.Y}}}" textprefix="$i$t" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" z-index="1"/>
</framemodel>

<!-- Frame global -->
<frame id="frame-global" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" z-index="-1"/>
	<frameinstance id="frame-loading-spinner" modelid="{{{LoadingSpinner::C_Name}}}" data-label="{{{Text_RetrievingActivity}}}" scale="1." />
	<label id="label-title" pos="{{{MLHelpers::Skew(-126.5, 61.5, 10.)}}}" size="150 20" class="text-extrabold" textsize="13" halign="left" filter-profanities="OnlyIfNotTranslated" z-index="1"/>
	<label id="label-subtitle" pos="{{{MLHelpers::Skew(-125.5, 51., 10.)}}}" size="150 20" class="text-semibold" textsize="4.5" halign="left" filter-profanities="OnlyIfNotTranslated" z-index="1"/>
	<label id="label-player-count" pos="130 51" size="60 10" class="text-semibold" textfont="{{{FontManager::C_GameFontExtraBold}}}" textsize="7" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" halign="right"/>
	<label id="label-error" pos="{{{MLHelpers::Skew(-125., 33.5, 10.)}}}" size="250 20" class="text-semibold" textsize="4.5" textcolor="{{{ColorPalette::C_Color_ErrorRed}}}" halign="left" z-index="1"/>

	<!-- Rankings -->
	<frame id="frame-content" z-index="1">
		<frame pos="{{{-Size_RankingsScrollWindow.X/2.-7.}}} 21">
			<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-rankings" z-index="1" />
			<frame
				data-elements-per-line="{{{RankingColumnsNb}}}"
				data-elements-per-page="{{{RankingsPerPage}}}"
				data-element-size="{{{Size_Ranking.X}}} {{{Size_Ranking.Y}}}"
				data-margin-size="{{{Size_RankingsMargin.X}}} {{{Size_RankingsMargin.Y}}}"
				data-window-size="{{{Size_RankingsScrollWindow.X}}} {{{Size_RankingsScrollWindow.Y}}}"
				data-header-height="{{{Size_RankingHeader.Y}}}"
				data-footer-height="{{{Size_RankingFooter.Y}}}"
				data-scroll-indicator="0"
				data-scrollbar-xoffset="-20."
				data-skew="-10."
				data-scrollpadding="15"
				class="{{{Scroll::C_Class_Window}}}"
				id="frame-scroll-rankings"
			>
				<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
				{{{ML_Rankings}}}
			</frame>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-down-scroll"
				pos="{{{Size_RankingsScrollWindow.X/2.+4.}}} -87."
				class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}}"
				data-size="10 10"
				data-opacityunfocus=".5"
				data-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
				data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
				data-bgcolor="FFF"
				data-focuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-halign="center"
				data-valign="bottom"
				data-nav-inputs="select;cancel;up;down;right"
				data-nav-targets="_;_;_;_;button-up-scroll"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="ArrowSelect"
			/>
			<frameinstance
				modelid="{{{Button::C_Name}}}" id="button-up-scroll"
				pos="{{{Size_RankingsScrollWindow.X/2.+16.}}} -87."
				class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}}"
				data-size="10 10"
				data-opacityunfocus=".5"
				data-image="{{{Const::C_ImageUrl_Icon_Arrow_Top_Oblique}}}"
				data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Top_Oblique}}}"
				data-bgcolor="FFF"
				data-focuscolor="{{{ColorPalette::C_Color_GreenOne}}}"
				data-halign="center"
				data-valign="bottom"
				data-nav-inputs="select;cancel;up;down;left"
				data-nav-targets="_;_;_;_;button-down-scroll"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-menusounds-selectsound="ArrowSelect"
			/>
			<frameinstance modelid="framemodel-ranking" id="frameinstance-player-ranking" pos="{{{MLHelpers::Skew(0., -Size_RankingsScrollWindow.Y/2.-46.5, 10.)}}}"/>
		</frame>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CommonLibs/Common/ReportContext.Script.txt" as ReportContext
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/API/LeaderboardAPI.Script.txt" as LeaderboardAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ReportStruct.Script.txt" as ReportStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ReportSystem.Script.txt" as ReportSystem

#Const C_RankingsPerPage {{{dump(RankingsPerPage)}}}
#Const C_DelayBetweenRequest 500

#Struct K_Controls {
	CMlFrame Frame_Content;
	CMlFrame Frame_LoadingSpinner;
	CMlFrame Frame_ScrollRankings;
	CMlLabel Label_Title;
	CMlLabel Label_Subtitle;
	CMlLabel Label_Error;
}

#Struct K_Pager {
	{{{CampaignStruct::P}}}K_Top[Integer] Tops; //< Key is the position in the list
	{{{CampaignStruct::P}}}K_TopScore[Integer] TopScores; //< Key is the position in the list
	Integer Total;
	Integer Offset;
	Integer CurrentPage;
	Boolean NeedUpdate;
	Integer NextPageLoadTime;
}

#Struct K_State {
	K_Controls Controls;
	{{{ClubStruct::P}}}K_Activity Activity;
	{{{CampaignStruct::P}}}K_Campaign RankingCampaign;
	{{{CampaignStruct::P}}}K_DailyMap LiveDailyMap;
	K_Pager RankingsPager;
	Http::K_Request Request_GetTopRankingsInClub;
	Http::K_Request Request_GetPlayerRankingInClub;
	Ident TaskId_GetDisplayName;
}
""",
"""
// Update controller hints at the bottom of the screen
Void UpdateControllerInfo() {
	declare Text[Text] ControllerInfos = ["A" => _("Select"), "B" => _("Back"), "Down" => _("Scroll down"), "Up" => _("Scroll up"), "{{{Const::C_NavInput_ReportSystem}}}" => "{{{Const::C_Text_Report}}}"];
	ControllerInfo::SetButtons(ControllerInfos);
}

Void ShowTop(CMlFrame _Frame_Element, {{{CampaignStruct::P}}}K_Top _Top) {
	_Frame_Element.Show();
	(_Frame_Element.GetFirstChild("label-rank") as CMlLabel).Value = ""^_Top.Position;
	declare CMlLabel Label_Name <=> (_Frame_Element.GetFirstChild("label-name") as CMlLabel);
	Label_Name.Value = _Top.DisplayName;
	Tools::FitLabelValue(Label_Name, 3., 1., 0.25);
	Tools::FirstPartyLogoMatchLuminance(Label_Name);
	(_Frame_Element.GetFirstChild("label-score") as CMlLabel).Value = ""^_Top.SP;
	(_Frame_Element.GetFirstChild("quad-zone-flag") as CMlQuad).ChangeImageUrl("file://ZoneFlags/ZoneId/"^_Top.ZoneId);
}

Void ShowTopScore(CMlFrame _Frame_Element, {{{CampaignStruct::P}}}K_TopScore _TopScore) {
	_Frame_Element.Show();
	(_Frame_Element.GetFirstChild("label-rank") as CMlLabel).Value = ""^_TopScore.Position;
	declare CMlLabel Label_Name <=> (_Frame_Element.GetFirstChild("label-name") as CMlLabel);
	Label_Name.Value = _TopScore.DisplayName;
	Tools::FitLabelValue(Label_Name, 3., 1., 0.25);
	Tools::FirstPartyLogoMatchLuminance(Label_Name);
	(_Frame_Element.GetFirstChild("label-score") as CMlLabel).Value = TL::TimeToText(_TopScore.Score, True, True);
	(_Frame_Element.GetFirstChild("quad-zone-flag") as CMlQuad).ChangeImageUrl("file://ZoneFlags/ZoneId/"^_TopScore.ZoneId);
}

Void ShowTopLoading(CMlFrame _Frame_Element, Integer _Rank) {
	_Frame_Element.Show();
	(_Frame_Element.GetFirstChild("label-rank") as CMlLabel).Value = ""^_Rank;
	declare CMlLabel Label_Name <=> (_Frame_Element.GetFirstChild("label-name") as CMlLabel);
	Label_Name.Value = Const::C_Text_RetrievingDataPlaceholder;
	Tools::FitLabelValue(Label_Name, 3., 1., 0.25);
	(_Frame_Element.GetFirstChild("label-score") as CMlLabel).Value = "";
	(_Frame_Element.GetFirstChild("quad-zone-flag") as CMlQuad).ChangeImageUrl("");
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, _From as CMlFrame);
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, _To as CMlFrame);
		}
	}
}

Void DisplayContent(K_State _State, Boolean _IsDisplayed) {
	_State.Controls.Frame_Content.Visible = _IsDisplayed;
	{{{LoadingSpinner::P}}}SetIsLoading(This, _State.Controls.Frame_LoadingSpinner, !_IsDisplayed);
}

Void Select(K_State _State, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return;

	switch (_Control.ControlId) {
		case "button-down-scroll": {{{Scroll::P}}}Scroll(This, _State.Controls.Frame_ScrollRankings, 2.);
		case "button-up-scroll": {{{Scroll::P}}}Scroll(This, _State.Controls.Frame_ScrollRankings, -2.);
	}
}

Void UpdateActivityInfo(K_State _State) {
	_State.Controls.Label_Title.SetText(_State.Activity.Name);
	Tools::FitLabelValue(_State.Controls.Label_Title, 13., 8., 1.);
	declare Text Subtitle = {{{ClubStruct::P}}}C_ClubActivity_DisplayNames.get(_State.Activity.Type, "");
	switch (_State.Activity.Type) {
		case {{{ClubStruct::P}}}C_ClubActivity_RankingOfficial: Subtitle = _State.RankingCampaign.Name;
		case {{{ClubStruct::P}}}C_ClubActivity_RankingDaily: {
			declare {{{CampaignStruct::P}}}K_Campaign CampaignDailyMap = {{{CampaignStore::P}}}GetCampaignFromId(_State.LiveDailyMap.CampaignId);
			if (CampaignDailyMap.Id != {{{CampaignStruct::P}}}C_Campaign_NullId) {
				Subtitle = CampaignDailyMap.Name^" - "^_State.LiveDailyMap.Map.Name;
			}
		}
		case {{{ClubStruct::P}}}C_ClubActivity_RankingClub: {
			if (_State.RankingCampaign.Name != "") {
				Subtitle = _State.RankingCampaign.Name;
			}
		}
	}
	_State.Controls.Label_Subtitle.SetText(Subtitle);
	Tools::FitLabelValue(_State.Controls.Label_Subtitle, 8., 5., 1.);
	ReportContext::SetActivityDisplayedRanking(System, _State.Activity.Name, Subtitle);
}

Void UpdatePlayerRanking(CMlFrame _Frame_PlayerRanking, Integer _Position, Integer _Score, Text _SP) {
	declare CMlLabel Label_Rank = (_Frame_PlayerRanking.GetFirstChild("label-rank") as CMlLabel);
	if (_Position <= 0) {
		Label_Rank.Value = "-";
	} else {
		Label_Rank.Value = Tools::FormatTop(_Position, False);
	}
	declare CMlLabel Label_Name <=> (_Frame_PlayerRanking.GetFirstChild("label-name") as CMlLabel);
	Label_Name.Value = {{{UserStore::P}}}GetPlayerName(LocalUser);
	Tools::FitLabelValue(Label_Name, 3., 1., 0.25);
	Tools::FirstPartyLogoMatchLuminance(Label_Name);
	(_Frame_PlayerRanking.GetFirstChild("quad-zone-flag") as CMlQuad).ChangeImageUrl(LocalUser.ZoneFlagUrl);
	declare CMlLabel Label_Score = (_Frame_PlayerRanking.GetFirstChild("label-score") as CMlLabel);
	if (_Score > 0) {
		Label_Score.Value = TL::TimeToText(_Score, True, True);
	} else {
		Label_Score.Value = _SP;
	}
}

K_State FetchRankingsPage(K_State _State) {
	declare K_State State = _State;

	State.RankingsPager.Offset = ML::Max(0, (State.RankingsPager.CurrentPage - 2)) * C_RankingsPerPage;
	declare Integer Length = C_RankingsPerPage * 3;
	if (Http::IsInitialized(State.Request_GetTopRankingsInClub)) {
		Http::Destroy(State.Request_GetTopRankingsInClub);
	}

	declare Text SeasonId;
	switch (State.Activity.Type) {
		case {{{ClubStruct::P}}}C_ClubActivity_RankingOfficial: SeasonId = State.RankingCampaign.LeaderboardGroupUid;
		case {{{ClubStruct::P}}}C_ClubActivity_RankingDaily: SeasonId = State.LiveDailyMap.SeasonId;
		case {{{ClubStruct::P}}}C_ClubActivity_RankingClub: SeasonId = State.RankingCampaign.LeaderboardGroupUid;
	}

	if (SeasonId != "") {
		if (State.Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingDaily) {
			State.Request_GetTopRankingsInClub = LeaderboardAPI::GetMapTopRankingsInClub(
				SeasonId,
				State.LiveDailyMap.Map.Uid,
				State.Activity.ClubId,
				State.RankingsPager.Offset,
				Length
			);
		} else {
			State.Request_GetTopRankingsInClub = LeaderboardAPI::GetTopRankingsInClub(
				SeasonId,
				State.Activity.ClubId,
				State.RankingsPager.Offset,
				Length
			);
		}
	}

	return State;
}

K_State InitState(K_State _State) {
	declare K_State State = _State;

	State.RankingCampaign = {{{CampaignStruct::P}}}K_Campaign {};
	State.LiveDailyMap = {{{CampaignStruct::P}}}K_DailyMap {};

	State.RankingsPager = K_Pager {
		Tops = [],
		Total = 0,
		Offset = 0,
		CurrentPage = 1
	};

	return State;
}
***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Button_DownScroll;
declare CMlFrame Frame_PlayerRanking;
declare CMlLabel Label_PlayerCount;

declare K_State State;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Button_DownScroll <=> (Frame_Global.GetFirstChild("button-down-scroll") as CMlFrame);
Frame_PlayerRanking <=> (Frame_Global.GetFirstChild("frameinstance-player-ranking") as CMlFrame);
Label_PlayerCount <=> (Frame_Global.GetFirstChild("label-player-count") as CMlLabel);

State.Controls = K_Controls {
	Frame_Content = (Frame_Global.GetFirstChild("frame-content") as CMlFrame),
	Frame_LoadingSpinner = (Frame_Global.GetFirstChild("frame-loading-spinner") as CMlFrame),
	Frame_ScrollRankings = (Frame_Global.GetFirstChild("frame-scroll-rankings") as CMlFrame),
	Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
	Label_Subtitle = (Frame_Global.GetFirstChild("label-subtitle") as CMlLabel),
	Label_Error = (Frame_Global.GetFirstChild("label-error") as CMlLabel)
};
State = InitState(State);

{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Frame_ScrollRankings, 0);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_RankingsActivity}}}")) {
	if (Http::IsInitialized(State.Request_GetPlayerRankingInClub)) {
		State.Request_GetPlayerRankingInClub = Http::Update(State.Request_GetPlayerRankingInClub);
		if (!Http::IsRunning(State.Request_GetPlayerRankingInClub)) {
			if (Http::IsSuccess(State.Request_GetPlayerRankingInClub)) {
				if (State.Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingDaily) {
					declare LeaderboardAPI::K_ResponseFromGetPlayerMapRankingsInClub PlayerTop = LeaderboardAPI::GetResponseFromGetPlayerMapRankingInClub(State.Request_GetPlayerRankingInClub);
					UpdatePlayerRanking(Frame_PlayerRanking, PlayerTop.Position, PlayerTop.Score, "");
				} else {
					declare {{{CampaignStruct::P}}}K_Top PlayerTop = LeaderboardAPI::GetResponseFromGetPlayerRankingInClub(State.Request_GetPlayerRankingInClub);
					UpdatePlayerRanking(Frame_PlayerRanking, PlayerTop.Position, 0, PlayerTop.SP);
				}
			} else {
				UpdatePlayerRanking(Frame_PlayerRanking, 0, 0, "");
			}
			State.Request_GetPlayerRankingInClub = Http::Destroy(State.Request_GetPlayerRankingInClub);
		}
	}

	if (Http::IsInitialized(State.Request_GetTopRankingsInClub)) {
		State.Request_GetTopRankingsInClub = Http::Update(State.Request_GetTopRankingsInClub);
		if (!Http::IsRunning(State.Request_GetTopRankingsInClub)) {
			if (Http::IsSuccess(State.Request_GetTopRankingsInClub)) {
				declare Text[] WebServicesUserIdList;
				if (State.Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingDaily) {
					declare Response = LeaderboardAPI::GetResponseFromGetMapTopRankingsInClub(State.Request_GetTopRankingsInClub);
					State.RankingsPager.TopScores = [];
					State.RankingsPager.Total = Response.Length;

					foreach (Key => TopScore in Response.Tops) {
						State.RankingsPager.TopScores[State.RankingsPager.Offset + Key] = TopScore;
						declare Text DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(TopScore.AccountId);
						if (DisplayName == "") {
							WebServicesUserIdList.add(TopScore.AccountId);
						} else {
							State.RankingsPager.TopScores[State.RankingsPager.Offset + Key].DisplayName = DisplayName;
						}
					}
				} else {
					declare Response = LeaderboardAPI::GetResponseFromGetTopRankingsInClub(State.Request_GetTopRankingsInClub);
					State.RankingsPager.Tops = [];
					State.RankingsPager.Total = Response.Length;

					foreach (Key => Top in Response.TopRankings) {
						State.RankingsPager.Tops[State.RankingsPager.Offset + Key] = Top;
						declare Text DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(Top.AccountId);
						if (DisplayName == "") {
							WebServicesUserIdList.add(Top.AccountId);
						} else {
							State.RankingsPager.Tops[State.RankingsPager.Offset + Key].DisplayName = DisplayName;
						}
					}
				}

				if (State.TaskId_GetDisplayName != NullId) {
					UserMgr.TaskResult_Release(State.TaskId_GetDisplayName);
				}
				declare CTaskResult_GetDisplayNameResult TaskDisplayName = UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), WebServicesUserIdList);
				if (TaskDisplayName != Null) {
					State.TaskId_GetDisplayName = TaskDisplayName.Id;
				} else {
					DisplayContent(State, True);
					{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Frame_ScrollRankings, State.RankingsPager.Total);
				}
			} else {
				DisplayContent(State, True);
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Frame_ScrollRankings, State.RankingsPager.Total);
				//L16N Error displayed when there is an http error to fetch the rankings, %1 will be an error code e.g. "(Error code: 500)"
				State.Controls.Label_Error.Value = TL::Compose(
					_("There was an error while gathering the rankings, please try again later. (Error code: %1)"),
					""^Http::GetStatusCode(State.Request_GetTopRankingsInClub)
				);
			}
			State.Request_GetTopRankingsInClub = Http::Destroy(State.Request_GetTopRankingsInClub);
		}
	}

	if (State.TaskId_GetDisplayName != NullId) {
		if (UserMgr.TaskResults.existskey(State.TaskId_GetDisplayName) && (UserMgr.TaskResults[State.TaskId_GetDisplayName] is CTaskResult_GetDisplayNameResult)) {
			declare CTaskResult_GetDisplayNameResult TaskDisplayName = (UserMgr.TaskResults[State.TaskId_GetDisplayName] as CTaskResult_GetDisplayNameResult);
			if (!TaskDisplayName.IsProcessing) {
				if (TaskDisplayName.HasSucceeded) {
					if (State.Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingDaily) {
						foreach (Key => TopScore in State.RankingsPager.TopScores) {
							State.RankingsPager.TopScores[Key].DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(TopScore.AccountId);
						}
					} else {
						foreach (Key => Top in State.RankingsPager.Tops) {
							State.RankingsPager.Tops[Key].DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(Top.AccountId);
						}
					}
				} else {
					State.Controls.Label_Error.Value = TL::Compose(
						//L16N Error displayed when there is an http error to fetch the rankings, %1 will be an error code e.g. "(Error code: 500)"
						_("There was an error while gathering the rankings, please try again later. (Error code: %1)"),
						TaskDisplayName.ErrorCode
					);
				}
				DisplayContent(State, True);
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Frame_ScrollRankings, State.RankingsPager.Total);
				if (State.RankingsPager.Total <= 1) {
					//L16N 0 or 1 player
					Label_PlayerCount.Value = TL::Compose(_("%1 player"), ""^State.RankingsPager.Total);
				} else {
					declare Text PlayerCount = Tools::FormatTop(State.RankingsPager.Total, False, 10000);
					//L16N Number of players, %1 is strictly greater than 1
					Label_PlayerCount.Value = TL::Compose(_("%1 players"), PlayerCount);
				}
				Tools::FitLabelValue(Label_PlayerCount, 7., 3., 0.5);
				UserMgr.TaskResult_Release(State.TaskId_GetDisplayName);
				State.TaskId_GetDisplayName = NullId;
			}
		} else {
			//L16N Error displayed when there is an http error to fetch the rankings
			State.Controls.Label_Error.Value = _("There was an error while gathering the rankings, please try again later. (Error: Task not longer available)");
			DisplayContent(State, True);
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Frame_ScrollRankings, State.RankingsPager.Total);
			State.TaskId_GetDisplayName = NullId;
		}
	}

	/* Report system events */
	foreach (Event in ReportSystem::GetPendingEvents()) {
		if (Event.LastUsingId == "{{{C_Name}}}") {
			switch (Event.Type) {
				case ReportSystem::C_EventType_Open: {
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", False);
				}
				case ReportSystem::C_EventType_Close: {
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", True);
					UpdateControllerInfo();
				}
			}
		}
	}

	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Scroll::P}}}C_EventType_Update: {
				if (State.RankingsPager.CurrentPage != Event.Page) {
					State.RankingsPager.CurrentPage = Event.Page;
					State.RankingsPager.NeedUpdate = True;
					if (State.RankingsPager.NextPageLoadTime < 0 || Now >= State.RankingsPager.NextPageLoadTime + C_DelayBetweenRequest) {
						State.RankingsPager.NextPageLoadTime = Now;
					} else {
						State.RankingsPager.NextPageLoadTime = Now + C_DelayBetweenRequest;
					}
				}

				ReportContext::SetActivityDisplayedRankingTopsReset(System);
				foreach (Key => Frame_Element in Event.ElementsVisible) {
					if (State.RankingsPager.Tops.existskey(Key)) {
						declare Top = State.RankingsPager.Tops[Key];
						ShowTop(Frame_Element, Top);
						ReportContext::SetActivityDisplayedRankingTopsAdd(
							System,
							Top.AccountId,
							Top.DisplayName,
							Top.Position,
							Top.SP
						);
					} else if (State.RankingsPager.TopScores.existskey(Key)) {
						declare TopScore = State.RankingsPager.TopScores[Key];
						ShowTopScore(Frame_Element, TopScore);
						ReportContext::SetActivityDisplayedRankingTopsAdd(
							System,
							TopScore.AccountId,
							TopScore.DisplayName,
							TopScore.Position,
							""^TopScore.Score
						);
					} else {
						ShowTopLoading(Frame_Element, Key+1);
					}
				}
				foreach (Key => Frame_Element in Event.ElementsHidden) {
					Frame_Element.Hide();
				}
				State.Controls.Frame_ScrollRankings.Parent.Visible = Event.ElementsVisible.count > 0;
			}
			case {{{Scroll::P}}}C_EventType_Cancel: {
				{{{Router::P}}}PushParent(This);
			}
		}
	}

	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						Select(State, Event.To);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Up) {
						{{{Scroll::P}}}Scroll(This, State.Controls.Frame_ScrollRankings, -2.);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Down) {
						{{{Scroll::P}}}Scroll(This, State.Controls.Frame_ScrollRankings, 2.);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						{{{Router::P}}}PushParent(This);
					} else {
						Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						Select(State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background") {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: {{{Router::P}}}PushParent(This);
			}
		}
	}

	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{CampaignStore::P}}}C_Event_CampaignUpdated: {
						if (Event.CustomEventData.count > 0 && Event.CustomEventData[0] == ""^State.Activity.ExternalId) {
							State.RankingCampaign = {{{CampaignStore::P}}}GetCampaignFromId(State.Activity.ExternalId);
							UpdateActivityInfo(State);

							State.RankingsPager.NeedUpdate = True;
							{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Frame_ScrollRankings, State.RankingsPager.Total);

							if (Http::IsInitialized(State.Request_GetPlayerRankingInClub)) {
								Http::Destroy(State.Request_GetPlayerRankingInClub);
							}
							State.Request_GetPlayerRankingInClub = LeaderboardAPI::GetPlayerRankingInClub(
								State.RankingCampaign.LeaderboardGroupUid,
								State.Activity.ClubId
							);
						}
					}
					case {{{CampaignStore::P}}}C_Event_CampaignUpdateFailed: {
						if (Event.CustomEventData.count > 1 && Event.CustomEventData[0] == ""^State.Activity.ExternalId) {
							DisplayContent(State, True);
							State.Controls.Label_Error.Value = Event.CustomEventData[1];
						}
					}
					case {{{CampaignStore::P}}}C_Event_MonthlyCampaignLoadComplete: {
						declare LiveMonthlyCampaign = {{{CampaignStore::P}}}GetLiveMonthlyCampaign();
						if (Event.CustomEventData.count > 0 && Event.CustomEventData[0] == ""^LiveMonthlyCampaign.Id) {
							declare LiveLoadedMonthlyCampaign = {{{CampaignStore::P}}}GetMonthlyCampaignFromId(LiveMonthlyCampaign.Id);
							foreach (DailyMap in LiveLoadedMonthlyCampaign.DailyMaps) {
								if (DailyMap.Map.Uid != "" && DailyMap.RelativeStart <= 0 && DailyMap.RelativeEnd > 0) {
									State.LiveDailyMap = DailyMap;
									break;
								} else if (DailyMap.Map.Uid != "") {
									// We take the last daily map if there is no live daily
									State.LiveDailyMap = DailyMap;
								}
							}
							if (State.LiveDailyMap.Map.Uid == "") {
								//L16N Error displayed when there is currently no daily track
								State.Controls.Label_Error.Value = _("No daily track found to display the rankings");
								DisplayContent(State, True);
								{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Frame_ScrollRankings, State.RankingsPager.Total);
							} else {
								UpdateActivityInfo(State);

								State.RankingsPager.NeedUpdate = True;
								{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Frame_ScrollRankings, State.RankingsPager.Total);

								if (Http::IsInitialized(State.Request_GetPlayerRankingInClub)) {
									Http::Destroy(State.Request_GetPlayerRankingInClub);
								}
								State.Request_GetPlayerRankingInClub = LeaderboardAPI::GetPlayerMapRankingInClub(
									State.LiveDailyMap.SeasonId,
									State.LiveDailyMap.Map.Uid,
									State.Activity.ClubId
								);
							}
						}
					}
					case {{{CampaignStore::P}}}C_Event_CampaignListUpdateError: {
						if (Event.CustomEventData.count > 1 && Event.CustomEventData[0] == ""^{{{CampaignStruct::P}}}C_CampaignType_Monthly) {
							DisplayContent(State, True);
							State.Controls.Label_Error.Value = Event.CustomEventData[1];
						}
					}
				}
			}
		}
	}

	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				ReportSystem::AddUsingId("{{{C_Name}}}");
				UpdateControllerInfo();
				State.Controls.Label_Error.Value = "";

				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);
				if (Query.existskey("{{{RoutePaths::C_Query_Activity}}}")) {
					State.Activity.fromjson(Query["{{{RoutePaths::C_Query_Activity}}}"]);
					State = InitState(State);
					UpdatePlayerRanking(Frame_PlayerRanking, 0, 0, "");
					DisplayContent(State, False);

					Label_PlayerCount.Value = "";
					{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Frame_ScrollRankings, State.RankingsPager.Total);
					if (State.Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingOfficial) {
						State.RankingCampaign = {{{CampaignStore::P}}}GetLiveQuarterlyCampaign();

						State.RankingsPager.NeedUpdate = True;

						if (Http::IsInitialized(State.Request_GetPlayerRankingInClub)) {
							Http::Destroy(State.Request_GetPlayerRankingInClub);
						}
						State.Request_GetPlayerRankingInClub = LeaderboardAPI::GetPlayerRankingInClub(
							State.RankingCampaign.LeaderboardGroupUid,
							State.Activity.ClubId
						);
					} else if (State.Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingDaily) {
						{{{CampaignStore::P}}}Action_LoadLiveMonthlyCampaign(This);
					} else if (State.Activity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingClub) {
						if (State.Activity.ExternalId != {{{CampaignStruct::P}}}C_Campaign_NullId) {
							{{{CampaignStore::P}}}Action_LoadCampaign(This, State.Activity.ExternalId, State.Activity.ClubId);
						} else {
							DisplayContent(State, True);
							//L16N Error displayed when there is no campaign in the rankings activity
							State.Controls.Label_Error.Value = _("The rankings activity is not linked to any campaign");
						}
					}

					if (State.Activity.Id != {{{ClubStruct::P}}}C_ActivityNullId) {
						ReportSystem::AddData(
							ReportStruct::C_ReportTarget_Activity,
							ReportStruct::LibStructuresReport_K_ReportData {
								Details = [State.Activity.Name],
								Ids = [TL::ToText(State.Activity.Id)],
								Contexts = [["From" => "Menu RankingsActivity"]]
							}
						);
					}

					if (State.Activity.ClubId !=  {{{ClubStruct::P}}}C_ClubNullId) {
						declare Text ClubName = {{{ClubStore::P}}}GetUserCurrentClub().Name;
						ReportSystem::AddData(
							ReportStruct::C_ReportTarget_Club,
							ReportStruct::LibStructuresReport_K_ReportData {
								Details = [ClubName],
								Ids = [TL::ToText(State.Activity.ClubId)],
								Contexts = [["From" => "Menu RankingsActivity"]]
							}
						);
					}
					UpdateActivityInfo(State);
					Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Button_DownScroll);
				} else {
					{{{Router::P}}}PushParent(This);
				}
			}
		}
	}

	if (State.RankingsPager.NeedUpdate && Now >= State.RankingsPager.NextPageLoadTime) {
		State.RankingsPager.NeedUpdate = False;
		State = FetchRankingsPage(State);
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_LeavingRoute}}}": {
				ReportSystem::RemoveUsingId("{{{C_Name}}}");
			}
		}
	}
}
***
""",
[
	Transition::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpBackground::ComponentV2(),
	Router::ComponentV2(),
	CampaignStore::ComponentV2(),
	CampaignStruct::Component(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	Button::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	Scroll::ComponentV2(),
	UserStore::ComponentV2(),
	MenuSounds::ComponentV2(),
	ExpendableAsset::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}