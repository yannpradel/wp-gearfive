/** 
 *	Page: NewsActivity
 */
#Const Version		"2023-04-07"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/NewsActivity.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_NewsActivity"
#Const C_NavGroup_Default "navgroup-page-news-activity-default"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [NewsActivity] Text displayed while retrieving the news.
	declare Text Text_RetrievingActivity = _("Retrieving news");

	declare Vec2 Size_BodySmall = <135., 65.>;
	declare Vec2 Size_BodyBig = <200., 65.>;
	declare Vec2 Size_ScrollLine = <10., 5.>;
	declare Vec2 Size_TextPadding = <3., 2.>;
	declare Integer BodySmallLinesNb = Scroll::GetRequiredElementsNb(Size_BodySmall, Size_ScrollLine, <0., 0.>, 1);
	declare Integer BodyBigLinesNb = Scroll::GetRequiredElementsNb(Size_BodyBig, Size_ScrollLine, <0., 0.>, 1);

	declare Text ML_BodySmall = "";
	for (I, 1, BodySmallLinesNb) {
		ML_BodySmall ^= """<frame class="{{{Scroll::C_Class_Element}}}"></frame>""";
	}
	declare Text ML_BodyBig = "";
	for (I, 1, BodyBigLinesNb) {
		ML_BodyBig ^= """<frame class="{{{Scroll::C_Class_Element}}}"></frame>""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame global -->
<frame id="frame-global" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" z-index="-1"/>
	<frameinstance id="loadingspinner-retrieve-info" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-120., 20., 10.)}}}" data-label="{{{Text_RetrievingActivity}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" data-opacity="0." data-size="10 10" scale="0.7" z-index="2"/>	
	<label id="label-title" pos="{{{MLHelpers::Skew(-126.5, 61.5, 10.)}}}" size="200 10" class="text-extrabold" textsize="13" halign="left" translate="1" filter-profanities="Always" z-index="1"/>
	<label id="label-headline" pos="{{{MLHelpers::Skew(-125., 51., 10.)}}}" size="200 10" class="text-extrabold" textsize="4." textcolor="{{{ColorPalette::C_Color_GreenOne}}}" halign="left" translate="1" filter-profanities="Always" z-index="1"/>
	<label id="label-info" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-semibold" textsize="2.5" textcolor="{{{ColorPalette::C_Color_ErrorRed}}}" halign="left"/>

	<!-- News content -->
	<frame id="frame-content" z-index="1">
		<quad id="quad-media" pos="{{{MLHelpers::Skew(-96.5, -21., 10.)}}}" size="{{{MLHelpers::MLKeepRatioFromY(1176., 1136., 70.)}}}" keepratio="Clip" alphamask="{{{Const::C_ImageUrl_PopUp_Activity_Img_Mask}}}" halign="center" valign="center" z-index="2"/>

		<frame id="frame-scrolls" pos="0 -21">
			<frame id="frame-body-small" pos="-60 {{{Size_BodySmall.Y * 0.5}}}" z-index="2">
				<quad id="quad-body-bg" z-index="-1" size="{{{Size_BodySmall.X}}} {{{Size_BodySmall.Y}}}" bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" />
				<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-body-small" z-index="1" />
				<frame
					id="scroll-body-small"
					class="{{{Scroll::C_Class_Window}}}"
					data-elements-per-line="1"
					data-elements-per-page="{{{BodySmallLinesNb}}}"
					data-element-size="{{{Size_ScrollLine.X}}} {{{Size_ScrollLine.Y}}}"
					data-window-size="{{{Size_BodySmall.X}}} {{{Size_BodySmall.Y}}}"
					data-header-height="{{{Size_TextPadding.Y}}}"
					data-footer-height="{{{Size_TextPadding.Y}}}"
					data-scroll-indicator-y-offset="-12."
					data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom}}}"
					data-scroll-indicator-colorize="FFFFFF"
					data-scroll-indicator-size="12"
				>
					<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
					<label id="label-body" class="text-body" pos="{{{Size_TextPadding.X}}} {{{-Size_TextPadding.Y}}}" z-index="1" size="{{{Size_BodySmall.X - (2 * Size_TextPadding.X)}}} 80" autonewline="1" filter-profanities="OnlyIfNotTranslated" />
					{{{ML_BodySmall}}}
				</frame>
			</frame>

			<frame id="frame-body-big" pos="{{{Size_BodyBig.X * -0.5}}} {{{Size_BodyBig.Y * 0.5}}}" z-index="2" hidden="1">
				<quad id="quad-body-bg" z-index="-1" size="{{{Size_BodyBig.X}}} {{{Size_BodyBig.Y}}}" bgcolor="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" />
				<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-body-big" z-index="1" />
				<frame
					id="scroll-body-big"
					class="{{{Scroll::C_Class_Window}}}"
					data-elements-per-line="1"
					data-elements-per-page="{{{BodyBigLinesNb}}}"
					data-element-size="{{{Size_ScrollLine.X}}} {{{Size_ScrollLine.Y}}}"
					data-window-size="{{{Size_BodyBig.X}}} {{{Size_BodyBig.Y}}}"
					data-header-height="{{{Size_TextPadding.Y}}}"
					data-footer-height="{{{Size_TextPadding.Y}}}"
					data-scroll-indicator-y-offset="-12."
					data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom}}}"
					data-scroll-indicator-colorize="FFFFFF"
					data-scroll-indicator-size="12"
				>
					<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
					<label id="label-body" class="text-body" pos="{{{Size_TextPadding.X}}} {{{-Size_TextPadding.Y}}}" z-index="1" size="{{{Size_BodyBig.X - (2 * Size_TextPadding.X)}}} 80" autonewline="1" filter-profanities="OnlyIfNotTranslated" />
					{{{ML_BodyBig}}}
				</frame>
			</frame>
		</frame>
	</frame>

	<!-- Bottom buttons -->
	<frameinstance id="button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
	<frameinstance
		id="button-back" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;up;down"
		data-nav-targets="_;_;_;_"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/ReportContext.Script.txt" as ReportContext
#Include "Libs/Nadeo/TMNext/TrackMania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ReportSystem.Script.txt" as ReportSystem
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ReportStruct.Script.txt" as ReportStruct
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers

#Struct K_Controls {
	CMlFrame Frame_BodyBig;
	CMlFrame Frame_BodySmall;
	CMlFrame Frame_Content;
	CMlFrame LoadingSpinner_RetrieveInfo;
	CMlFrame Scroll_BodyBig;
	CMlFrame Scroll_BodySmall;
	CMlLabel Label_Headline;
	CMlLabel Label_Info;
	CMlLabel Label_Title;
	CMlQuad Quad_Media;
}

#Struct K_State {
	Boolean CanScroll;
	K_Controls Controls;
	{{{ClubStruct::P}}}K_News News;
	Http::K_Request GetNewsActivityRequest;
}
""",
"""
Void DisplayInfo(CMlLabel _Label_Info, Text _Text) {
	declare Vec2 Pos_Hidden = MLHelpers::SkewX(<-126., 20.>, 10.);
	declare Vec2 Pos_Visible = MLHelpers::SkewX(<-125., 20.>, 10.);
	AnimMgr.Flush(_Label_Info);

	if (_Text != "") {
		_Label_Info.SetText(_Text);
		_Label_Info.Opacity = 0.;
		_Label_Info.RelativePosition_V3 = Pos_Hidden;
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Visible.X^" "^Pos_Visible.Y^"\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, _From as CMlFrame);
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, _To as CMlFrame);
		}
	}
}

Void Scroll(K_Controls _Controls, Boolean _Up) {
	declare CMlFrame Scroll_Text = _Controls.Scroll_BodySmall;
	if (_Controls.Frame_BodyBig.Visible) {
		Scroll_Text = _Controls.Scroll_BodyBig;
	}
	
	declare Real Delta = 10.;
	if (_Up) {
		Delta *= -1;
	}

	{{{Scroll::P}}}ScrollDelta(This, Scroll_Text, Delta, 250);
}
Void ScrollUp(K_Controls _Controls) {
	Scroll(_Controls, True);
}
Void ScrollDown(K_Controls _Controls) {
	Scroll(_Controls, False);
}

Void Select(CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return;

	switch (_Control.ControlId) {
		case "button-back": {{{Router::P}}}PushParent(This);
	}

	return;
}

// Update controller hints at the bottom of the screen
Void UpdateControllerInfo(Boolean _NewsHasBody) {
	declare Text[Text] ControllerInfos = ["A" => _("Select"), "B" => _("Back")];

	if (_NewsHasBody) {
		ControllerInfos["up"] = ""; //< empty on purpose
		ControllerInfos["down"] = _("Scroll");
	}

	ControllerInfos["{{{Const::C_NavInput_ReportSystem}}}"] = "{{{Const::C_Text_Report}}}";

	ControllerInfo::SetButtons(ControllerInfos);
}

K_State UpdateActivityInfo(K_State _State) {
	declare K_State State = _State;
	declare CMlFrame Scroll_Text;
	declare CMlFrame Frame_Body;

	State.Controls.Label_Title.SetText(State.News.Name);
	State.Controls.Label_Headline.SetText(State.News.Headline);

	// We need two scrolls because ComputeHeight is buggy when changing size
	if (State.News.MediaUrl == "") {
		Scroll_Text = State.Controls.Scroll_BodyBig;
		Frame_Body = State.Controls.Frame_BodyBig;
		State.Controls.Frame_BodyBig.Show();
		State.Controls.Frame_BodySmall.Hide();
	} else {
		Scroll_Text = State.Controls.Scroll_BodySmall;
		Frame_Body = State.Controls.Frame_BodySmall;
		State.Controls.Frame_BodySmall.Show();
		State.Controls.Frame_BodyBig.Hide();
	}

	declare Boolean NewsHasBody = State.News.Body != "";
	(Frame_Body.GetFirstChild("quad-body-bg") as CMlQuad).Visible = NewsHasBody;
	State.Controls.Quad_Media.ChangeImageUrl(State.News.MediaUrl);
	UpdateControllerInfo(NewsHasBody);

	declare CMlLabel Label_Body = (Frame_Body.GetFirstChild("label-body") as CMlLabel);
	Label_Body.SetText(State.News.Body);
	{{{Scroll::P}}}SetElementsTotal(This, Scroll_Text, ML::FloorInteger((Label_Body.ComputeHeight(Label_Body.Value) / {{{Size_ScrollLine.Y}}})) + 1);
	{{{Scroll::P}}}ScrollToPosition(This, Scroll_Text, 0., False);
	if (State.CanScroll != {{{Scroll::P}}}CanScroll(Scroll_Text)) {
		State.CanScroll = {{{Scroll::P}}}CanScroll(Scroll_Text);
	}

	ReportContext::SetActivityDisplayedNews(
		System,
		State.News.Id,
		State.News.Name,
		State.News.Headline,
		State.News.Body,
		State.News.MediaUrl,
		State.News.ClubId,
		State.News.CreationTimestamp
	);

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Button_Back;

declare K_State State;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Button_Back <=> (Frame_Global.GetFirstChild("button-back") as CMlFrame);

State = K_State {
	GetNewsActivityRequest = Http::GetEmptyRequest(),
	Controls = K_Controls {
		Frame_BodyBig = (Frame_Global.GetFirstChild("frame-body-big") as CMlFrame),
		Frame_BodySmall = (Frame_Global.GetFirstChild("frame-body-small") as CMlFrame),
		Frame_Content = (Frame_Global.GetFirstChild("frame-content") as CMlFrame),
		Label_Headline = (Frame_Global.GetFirstChild("label-headline") as CMlLabel),
		Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
		Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
		LoadingSpinner_RetrieveInfo = (Frame_Global.GetFirstChild("loadingspinner-retrieve-info") as CMlFrame),
		Quad_Media = (Frame_Global.GetFirstChild("quad-media") as CMlQuad),
		Scroll_BodyBig = (Frame_Global.GetFirstChild("scroll-body-big") as CMlFrame),
		Scroll_BodySmall = (Frame_Global.GetFirstChild("scroll-body-small") as CMlFrame)
	}
};
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_NewsActivity}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				ReportSystem::AddUsingId("{{{C_Name}}}");

				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);
				if (Query.existskey("{{{RoutePaths::C_Query_Activity}}}")) {
					declare {{{ClubStruct::P}}}K_Activity Activity;
					Activity.fromjson(Query["{{{RoutePaths::C_Query_Activity}}}"]);
					State.News = {{{ClubStruct::P}}}K_News {
						Id = Activity.Id,
						Name = Activity.Name,
						ClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id
					};

					State = UpdateActivityInfo(State);
					State.Controls.Frame_Content.Hide();
					State.GetNewsActivityRequest = Http::DestroyAndCreate(State.GetNewsActivityRequest, ClubAPI::GetNewsActivity(State.News.ClubId, State.News.Id));
					{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
					Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Button_Back);
					DisplayInfo(State.Controls.Label_Info, "");

					if (State.News.Id != {{{ClubStruct::P}}}C_ActivityNullId) {
						ReportSystem::AddData(
							ReportStruct::C_ReportTarget_Activity,
							ReportStruct::LibStructuresReport_K_ReportData {
								Details = [State.News.Name],
								Ids = [TL::ToText(State.News.Id)],
								Contexts = [["From" => "Menu NewsActivity"]]
							}
						);
					}

					if (State.News.ClubId != {{{ClubStruct::P}}}C_ClubNullId) {
						ReportSystem::AddData(
							ReportStruct::C_ReportTarget_Club,
							ReportStruct::LibStructuresReport_K_ReportData {
								Details = [{{{ClubStore::P}}}GetUserCurrentClub().Name],
								Ids = [TL::ToText(State.News.ClubId)],
								Contexts = [["From" => "Menu NewsActivity"]]
							}
						);
					}
				} else {
					{{{Router::P}}}PushParent(This);
				}
			}
		}
	}

	/* Get news activity request */
	if (Http::IsInitialized(State.GetNewsActivityRequest)) {
		State.GetNewsActivityRequest = Http::Update(State.GetNewsActivityRequest);
		if (!Http::IsRunning(State.GetNewsActivityRequest)) {
			if (Http::IsSuccess(State.GetNewsActivityRequest)) {
				State.News = ClubAPI::GetResponseFromGetNewsActivity(State.GetNewsActivityRequest);
				State = UpdateActivityInfo(State);
			} else {
				DisplayInfo(State.Controls.Label_Info, TL::Compose(
					//L16N [NewsActivity] Error displayed when fetching news activity failed. %1 will be replaced by an error, e.g. "(Error code: 500)"
					_("Error while fetching the activity info, please try again. (Error code: %1)"),
					""^Http::GetStatusCode(State.GetNewsActivityRequest)
				));
			}
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.LoadingSpinner_RetrieveInfo);
			State.GetNewsActivityRequest = Http::Destroy(State.GetNewsActivityRequest);
			State.Controls.Frame_Content.Show();
		}
	}

	/* Report system events */
	foreach (Event in ReportSystem::GetPendingEvents()) {
		if (Event.LastUsingId == "{{{C_Name}}}") {
			switch (Event.Type) {
				case ReportSystem::C_EventType_Open: {
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", False);
				}
				case ReportSystem::C_EventType_Close: {
					{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", True);
					UpdateControllerInfo(State.News.Body != "");
				}
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						Select(Event.To);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Up) {
						ScrollUp(State.Controls);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Down) {
						ScrollDown(State.Controls);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						{{{Router::P}}}PushParent(This);
					} else {
						Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						Select(Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background") {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: {{{Router::P}}}PushParent(This);
			}
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_LeavingRoute}}}": {
				ReportSystem::RemoveUsingId("{{{C_Name}}}");
			}
		}
	}
}
***
""",
[
	ButtonIcon::ComponentV2(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpBackground::ComponentV2(),
	Router::ComponentV2(),
	Scroll::ComponentV2(),
	Transition::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}