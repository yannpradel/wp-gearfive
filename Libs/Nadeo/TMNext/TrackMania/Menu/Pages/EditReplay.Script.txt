/** 
 *	Page: EditReplay
 */
#Const Version		"2022-07-28"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/EditReplay.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/API/BrowserAPI.Script.txt" as BrowserAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/TMNext/TrackMania/UbisoftChallenges.Script.txt" as UbisoftChallenges
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Struct K_Button {
	Text Id;
	Text Value;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_EditReplay"
#Const C_NavGroup_Page "navgroup-page-editreplay"

#Const C_ButtonMenu_Size <60., 12.>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [EditReplay] Title of a page where the player can select a replay to edit
	declare Text Text_EditReplay = _("Edit replay");
	//L16N [EditReplay] Edit the selected replay(s)
	declare Text Text_Edit = _("|ReplayVerb|Edit");
	//L16N [EditReplay] Shoot a video of the selected replay(s)
	declare Text Text_Shoot = _("|ReplayVerb|Shoot");
	//L16N [EditReplay] View the selected replay(s)
	declare Text Text_View = _("|ReplayVerb|View");
	//L16N [EditReplay] Display the number of replays selected by the players. %1 will be replaced by the number of replays, always 2 or more. eg: "13 replays selected".
	declare Text Text_ReplaysSelected = _("%1 replays selected");


	// Replay List Scroll
	declare Integer ReplayColumnsNb = 1;
	declare Integer ReplayRowsNb = 10;
	declare Integer ReplaysPerPage = ReplayColumnsNb * ReplayRowsNb;
	declare Vec2 Size_ReplaysScrollWindow = <140., 9.35 * ReplayRowsNb>;
	declare Vec2 Size_ReplaysMargin = <0., 0.>;	
	declare Vec2 Size_Replay = Scroll::GetElementSize(Size_ReplaysScrollWindow, Size_ReplaysMargin, ReplayColumnsNb, ReplayRowsNb);
	declare Vec2 Size_ReplayName = <Size_Replay.X * 0.8, Size_Replay.Y * 0.15>;
	declare Vec2 Pos_ReplayName = <Size_Replay.X * 0.5, Size_Replay.Y * -0.6>;	
	declare Integer ReplaysElementsNb = Scroll::GetRequiredElementsNb(Size_ReplaysScrollWindow, Size_Replay, Size_ReplaysMargin, ReplayColumnsNb);
	
	declare Vec2 Size_ReplayHeader = <0., 0.>;
	declare Vec2 Size_ReplayFooter = <0., 0.>;

	declare ML_Replays = "";
	for (I, 1, ReplaysElementsNb) {
		ML_Replays ^= """	
		<frameinstance
			hidden="1" 
			modelid="framemodel-replay-name"
			class="{{{Scroll::C_Class_Element}}}"
		/>""";
	}

	
	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="quad-base" halign="center" valign="center"/>
	<style class="text-base" halign="center" valign="center2" textcolor="FFF" textfont="{{{FontManager::C_GameFontExtraBold}}}" />
</stylesheet>

<framemodel id="framemodel-replay-name"> 
	<quad id="quad-replay" size="{{{Size_Replay.X + 8.}}} {{{Size_Replay.Y + 1.}}}" image="{{{Const::C_ImageUrl_EditReplay_Button_Scroll}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}" />
	<quad id="quad-replay-focus" size="{{{Size_Replay.X + 8.}}} {{{Size_Replay.Y + 1.}}}" image="{{{Const::C_ImageUrl_EditReplay_Button_Scroll_Film}}}" colorize="{{{ColorPalette::C_Color_GreenFour}}}" z-index="1"/>
	<label id="label-replay-name" size="{{{Size_ReplayName.X}}} {{{Size_ReplayName.Y}}}" pos="7 {{{Pos_ReplayName.Y}}}" halign="left" textprefix="$i" textsize="2" textcolor="{{{ColorPalette::C_Color_GreenFour}}}" class="text-base" z-index="2"/>
</framemodel>


<frameinstance modelid="{{{BrowserAPI::C_Name}}}" id="frame-browser" z-index="{{{Const::C_ZIndex_BrowserAPI}}}"
	class="{{{Navigation::C_Class}}}" data-nav-group="{{{C_NavGroup_Page}}}"
/>
<frame id="frame-global">
	<label pos="5 61" size="120 10" textsize="10" textprefix="$t$i" text="{{{Text_EditReplay}}}" class="text-base" textcolor="FFF"/>
	<label id="label-subtitle" pos="3 53" size="120 10" textsize="5" textprefix="$t$i" class="text-base" textfont="{{{FontManager::C_GameFontRegular}}}" textcolor="FFF"/>

	<frame id="frame-menu">

		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-replays" z-index="1" />
		<frame
				pos="-69 34"
				data-elements-per-line="{{{ReplayColumnsNb}}}"
				data-elements-per-page="{{{ReplaysPerPage}}}"
				data-element-size="{{{Size_Replay.X}}} {{{Size_Replay.Y}}}"
				data-margin-size="{{{Size_ReplaysMargin.X}}} {{{Size_ReplaysMargin.Y}}}"
				data-window-size="{{{Size_ReplaysScrollWindow.X}}} {{{Size_ReplaysScrollWindow.Y}}}"
				data-header-height="{{{Size_ReplayHeader.Y}}}"
				data-footer-height="{{{Size_ReplayFooter.Y}}}"
				data-scroll-indicator="1"
				data-scroll-indicator-y-offset="-20"
				data-scroll-indicator-x-offset="-15"
				data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
				data-scroll-indicator-colorize="FFFFFF"
				data-scroll-indicator-size="18"
				data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_DuringScroll}}}"
				data-scrollbar-xoffset="75."
				data-skew="-10"
				data-scrollpadding="15"
				data-skew-valign="{{{Scroll::C_SkewVAlign_Top}}}"
				data-nav-group="{{{C_NavGroup_Page}}}"
				data-nav-inputs="select;cancel;left;right" 
				data-nav-targets="_;_;button-back;button-advanced-editor" 
				class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
				id="frame-scroll-replays"
			>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_Replays}}}
		</frame>

		<frame id="frame-replay-buttons" pos="115 15">
			<frameinstance
				id="button-shoot-video"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				pos="0 -2"
				z-index="1"
				data-text="{{{Text_Shoot}}}"
				data-styles="{{{ExpendableButton::C_Style_SizeMedium}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_Stack}}} {{{ExpendableButton::C_Style_StackTop}}}"
				data-nav-inputs="select;cancel;up;down;left"
				data-nav-targets="_;_;button-advanced-editor;button-view;frame-scroll-replays"
				data-nav-group="{{{C_NavGroup_Page}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			/>

			<frameinstance
				id="button-view"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				pos="-2.5 -19"
				z-index="1"
				data-text="{{{Text_View}}}"
				data-styles="{{{ExpendableButton::C_Style_SizeMedium}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_Stack}}}"
				data-nav-inputs="select;cancel;up;down;left"
				data-nav-targets="_;_;button-shoot-video;button-advanced-editor;frame-scroll-replays"
				data-nav-group="{{{C_NavGroup_Page}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			/>

			<frameinstance
				id="button-advanced-editor"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				pos="-5 -36"
				z-index="1"
				data-text="{{{Text_Edit}}}"
				data-styles="{{{ExpendableButton::C_Style_SizeMedium}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_Stack}}} {{{ExpendableButton::C_Style_StackBottom}}}"
				data-nav-inputs="select;cancel;up;down;left"
				data-nav-targets="_;_;button-view;button-shoot-video;frame-scroll-replays"
				data-nav-group="{{{C_NavGroup_Page}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			/>
		</frame>

		<frameinstance
			id="button-back"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			pos="-151.5 -73"
			z-index="1"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
			data-nav-inputs="select;cancel;right"
			data-nav-targets="_;_;frame-scroll-replays"
			data-nav-group="{{{C_NavGroup_Page}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "ColorLib" as CL
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo

#Struct K_Data {
	Integer CurrentPage;
	{{{BrowserAPI::P}}}K_ReplayInfo[] ReplayInfoList;
	CMlFrame[Integer] Frames_Page;
}

#Const C_Page_Browser 0
#Const C_Page_Menu 1
""",
"""
Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if (_From.ControlId == "frame-browser") {
			{{{BrowserAPI::P}}}FocusBrowser(This, False);
		} else if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		}	else if ({{{Scroll::P}}}IsScroll(_From)) {
			{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if (_To.ControlId == "frame-browser") {
			{{{BrowserAPI::P}}}FocusBrowser(This, True);
		} else if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Scroll::P}}}IsScroll(_To)) {
			{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void FocusReplay(CMlFrame _Frame_Replay, Boolean _IsFocused) {
	declare Vec3 QuadColor;
	declare Vec3 QuadFilmColor;
	declare Vec3 LabelColor;
	if (_IsFocused) {
		LabelColor = <1.,1.,1.>;
		QuadColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenFour}}}");
		QuadFilmColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenOne}}}");
	} else {
		LabelColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenFour}}}");
		QuadColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenOne}}}");
		QuadFilmColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenFour}}}");
	}
	(_Frame_Replay.GetFirstChild("label-replay-name") as CMlLabel).TextColor = LabelColor;
	(_Frame_Replay.GetFirstChild("quad-replay") as CMlQuad).Colorize = QuadColor;
	(_Frame_Replay.GetFirstChild("quad-replay-focus") as CMlQuad).Colorize = QuadFilmColor;
}

Void ShowReplay(CMlFrame _Frame_Replay, Text _ReplayName) {
	_Frame_Replay.Show();
	(_Frame_Replay.GetFirstChild("label-replay-name") as CMlLabel).Value = TL::StripFormatting(_ReplayName);
}

Void HideReplay(CMlFrame _Frame_Replay) {
	_Frame_Replay.Hide();
}

K_Data SelectPage(K_Data _Data, Integer _NewPage, CMlFrame _Frame_ScrollReplays) {
	declare K_Data Data = _Data;
	
	if (_Data.Frames_Page.existskey(_NewPage)) {
		// Leave previous page
		declare CMlFrame Frame_PreviousPage = _Data.Frames_Page[Data.CurrentPage];
		Frame_PreviousPage.Visible = False;
		
		// Enter new page
		Data.CurrentPage = _NewPage;
		declare CMlFrame Frame_NewPage = _Data.Frames_Page[Data.CurrentPage];
		Frame_NewPage.Visible = True;
		switch (Data.CurrentPage) {
			case C_Page_Browser: {
				if (Data.ReplayInfoList.count > 0 && Data.ReplayInfoList[0].Path != "") {
					{{{BrowserAPI::P}}}SetCurrentPath(This, {{{BrowserAPI::C_BrowserType_List}}}, Data.ReplayInfoList[0].Path);
				}
			}
			case C_Page_Menu: {
				declare Integer ReplaysSelected = _Data.ReplayInfoList.count;
				{{{Scroll::P}}}SetElementsTotal(This, _Frame_ScrollReplays, ReplaysSelected);

				declare CMlLabel Label_Subtitle <=> Page.GetFirstChild("label-subtitle") as CMlLabel;
				if (ReplaysSelected > 1) Label_Subtitle.Value = TL::Compose("{{{Text_ReplaysSelected}}}", ""^_Data.ReplayInfoList.count);
				else Label_Subtitle.Value = "";

				Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Page}}}"), Frame_NewPage.GetFirstChild("button-advanced-editor"));
			}
		}
	}
	
	return Data;
}

Void Launch(K_Data _Data, CTitleControl::EReplayEditType _EditType) {
	if (_Data.ReplayInfoList.count > 0) {
		declare Text[] FileNames;
		foreach (ReplayInfo in _Data.ReplayInfoList) {
			if (ReplayInfo.FileName != "") {
				FileNames.add(ReplayInfo.FileName);
			}
		}
		SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", ["{{{Text_EditReplay}}}"]);
		TitleControl::EditReplay(TitleControl, FileNames, _EditType);
		SendCustomEvent("{{{UbisoftChallenges::C_Challenge_CreateReplay}}}", []);
	}
}

K_Data Select(K_Data _Data, CMlControl _Control, CMlFrame _Frame_ScrollReplays) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _Data;
	
	declare K_Data Data = _Data;
	
	switch (_Control.ControlId) {
		case "button-advanced-editor": Launch(_Data, CTitleControl::EReplayEditType::Edit);
		case "button-shoot-video": Launch(_Data, CTitleControl::EReplayEditType::Shoot);
		case "button-view": Launch(_Data, CTitleControl::EReplayEditType::View);
		case "button-back": Data = SelectPage(Data, C_Page_Browser, _Frame_ScrollReplays);
	}
	
	return Data;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Browser;
declare CMlFrame Frame_Menu;
declare CMlFrame Button_Back;
declare CMlFrame Frame_ScrollReplays;

declare K_Data Data;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Browser <=> (Page.GetFirstChild("frame-browser") as CMlFrame);
Frame_Menu <=> (Frame_Global.GetFirstChild("frame-menu") as CMlFrame);
Button_Back <=> (Frame_Menu.GetFirstChild("button-back") as CMlFrame);
Frame_ScrollReplays <=> (Frame_Menu.GetFirstChild("frame-scroll-replays") as CMlFrame);

Data.Frames_Page = [
	C_Page_Browser => Frame_Browser,
	C_Page_Menu => Frame_Menu
];
Data = SelectPage(Data, C_Page_Browser, Frame_ScrollReplays);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_EditReplay}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_EnteringRoute: {
				declare BrowserSettings = {{{BrowserAPI::P}}}GetDefaultSettings();
				BrowserSettings.ListMultiSelect = True;
				{{{BrowserAPI::P}}}SetCurrentBrowser(This, 
					{{{BrowserAPI::C_BrowserType_List}}},
					"{{{Text_EditReplay}}}",
					[{{{BrowserAPI::C_DataType_Replay}}}],
					"My Replays\\",
					BrowserSettings
				);
				{{{BrowserAPI::P}}}FocusBrowser(This, True);
				Data.ReplayInfoList = [];
				Data = SelectPage(Data, C_Page_Browser, Frame_ScrollReplays);
			}
		}
	}
	
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Page}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						Data = Select(Data, Event.To, Frame_ScrollReplays);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						Data = Select(Data, Button_Back, Frame_ScrollReplays);
					} else {
						Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Page}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						Data = Select(Data, Event.To, Frame_ScrollReplays);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}
	
	foreach (Event in {{{BrowserAPI::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{BrowserAPI::P}}}C_EventType_MultiSelect: {
				if (Event.DataType == {{{BrowserAPI::P}}}C_DataType_Replay) {
					declare {{{BrowserAPI::P}}}K_ReplayInfo[] ReplayInfoList;
					ReplayInfoList.fromjson(Event.Data);
					if (ReplayInfoList.count > 0) {
						Data.ReplayInfoList = ReplayInfoList;
						Data = SelectPage(Data, C_Page_Menu, Frame_ScrollReplays);
					}
					{{{BrowserAPI::P}}}FocusBrowser(This, False, False);
					if ({{{UserStore::P}}}IsOfflineMode()) ControllerInfo::SetButtons(["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "B" => _("Back")]);
					else ControllerInfo::SetButtons(["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "{{{Const::C_NavInput_ClubWidget}}}" => "{{{Const::C_Text_ClubWidget}}}", "B" => _("Back")]);
				}
			}
			case {{{BrowserAPI::P}}}C_EventType_Cancel: {
				{{{BrowserAPI::P}}}FocusBrowser(This, False);
				{{{Router::P}}}PushParent(This);
			}
		}
	}
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null) {
			if (Event.Scroll.Id == Frame_ScrollReplays.Id) {
				switch (Event.Type) {
					case {{{Scroll::P}}}C_EventType_Focus: {
						if (Event.From != Null) FocusReplay(Event.From, False);
						if (Event.To != Null) {
							if (Event.IsMouse && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
								Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Page}}}"), Event.Scroll);
							}
							FocusReplay(Event.To, True);
						}
					}
					case {{{Scroll::P}}}C_EventType_Update: {
						foreach (Key => Frame_Element in Event.ElementsVisible) {
							if (Data.ReplayInfoList.existskey(Key)) {
								ShowReplay(Frame_Element, Data.ReplayInfoList[Key].Name);
							} else {
								HideReplay(Frame_Element);
							}
						}
						foreach (Key => Frame_Element in Event.ElementsHidden) {
							HideReplay(Frame_Element);
						}
					}
				}
			}
		}
	}

}
***
""",
[
	Transition::ComponentV2(),
	Navigation::ComponentV2(),
	Router::ComponentV2(),
	MenuSounds::ComponentV2(),
	BrowserAPI::ComponentV2(),
	Scroll::ComponentV2(), 
	Button::ComponentV2(),
	ExpendableButton::ComponentV2(),
	UserStore::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}