/** 
 *	Page: ClubDetails
 */
#Const Version		"2023-06-09"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/ClubDetails.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/Components/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/TitleBar2.Script.txt" as TitleBar
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_ClubDetails"
#Const C_NavGroupName "navgroup-page-clubdetails"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::UseUserCreatedContentRequired
]

#Const C_ScrollView_Grid "grid"
#Const C_ScrollView_List "list"

#Const C_Column_Status 0
#Const C_Column_Pin 1
#Const C_Column_Tag 2
#Const C_Column_Administration 3
#Const C_Column_Feature 4

#Const C_TabNames [
	//L16N [Page Club Details] Title of the section displaying all the club activites
	0 => _("Club activites")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [Page Club Details] Text displayed while loading club informations.
	declare Text Text_Welcome = _("Welcome to the club!");
	//L16N [Page Club Details] Button to feature a club in the main page, available to moderators only.
	declare Text Text_Feature = _("|Club|Feature");
	//L16N [Page Club Details] Button to cancel the featuring of a club in the main page, available to moderators only.
	declare Text Text_Unfeature = _("|Club|Unfeature");
	//L16N [Page Club Details] Tooltip of the button to pin the club in the navigation bar.
	declare Text Text_PinClubToolTip = _("|Club|Pin club");
	//L16N [Page Club Details] Tooltip of the button to unpin the club in the navigation bar.
	declare Text Text_UnpinClubToolTip = _("|Club|Unpin club");
	//L16N [Page Club Details] Tooltip of the button to set the club tag for the player.
	declare Text Text_SetClubTagToolTip = _("|Club|Use club tag");
	//L16N [Page Club Details] Tooltip of the button to remove the club tag of the player.
	declare Text Text_UnsetClubTagToolTip = _("|Club|Remove club tag");
	//L16N [Page Club Details] Tooltip of the button to access to the club administration in the navigation bar.
	declare Text Text_AdminToolTip = _("|Club|Administration");
	//L16N [Page Club Details] Default text for the button of the club members list.
	declare Text Text_MembersList = _("|Club|Members list");
	//L16N [Page Club Details] Number of members in a club. %1 is the number of players. (e.g. "1 Member")
	declare Text Text_MemberNumber_Singular = _("|Club|%1 Member");
	//L16N [Page Club Details] Number of members in a club. %1 is the number of players. (e.g. "5 Members")
	declare Text Text_MemberNumber_Plural = _("|Club|%1 Members");
	//L16N [Page Club Details] Number of members in a club. %1 is the number of players. (e.g. "1 Member")
	declare Text Text_MemberRequestNumber_Singular = _("|Club|%1 Member - %2 Request");
	//L16N [Page Club Details] Number of members in a club. %1 is the number of players. (e.g. "5 Members")
	declare Text Text_MemberRequestNumber_PluralAndSingular = _("|Club|%1 Members - %2 Request");
	//L16N [Page Club Details] Number of members in a club. %1 is the number of players. (e.g. "1 Member")
	declare Text Text_MemberRequestNumber_SingularAndPlural = _("|Club|%1 Member - %2 Requests");
	//L16N [Page Club Details] Number of members in a club. %1 is the number of players. (e.g. "5 Members")
	declare Text Text_MemberRequestNumber_Plural = _("|Club|%1 Members - %2 Requests");
	//L16N [Page Club Details] Join a club as member.
	declare Text Text_JoinClub = _("|Club|Join");
	//L16N [Page Club Details] Club is closed to other players. Player needs to be invited to join club.
	declare Text Text_ClosedClub = _("|Club|Closed");
	//L16N [Page Club Details] Cancel a join club request.
	declare Text Text_CancelRequest = _("Cancel request");
	//L16N [Page Club Details] Text displayed when there are no club activities.
	declare Text Text_NoClubActivities	= _("No club activities.");
	//L16N [Page Club Details] Text displayed when there is an issue retrieving the created club infos
	declare Text Text_CreatedClubUpdateError = _("Error while retrieving your new club, please go back to the Clubs page and try again.");

	/* Choices Add Activity list */
	declare Text[Text] ChoiceList_AddActivity = ClubStruct::GetChoiceListAddActivity();

	/* Grid config */
	declare GridConfig = Grid::Create(55., 0., 0., Grid::C_Direction_Right);
	GridConfig = Grid::AddColumn(GridConfig, C_Column_Status, 0.25, Grid::C_Align_Center);
	GridConfig = Grid::AddColumn(GridConfig, C_Column_Pin, 0.25, Grid::C_Align_Center);
	GridConfig = Grid::AddColumn(GridConfig, C_Column_Tag, 0.25, Grid::C_Align_Center);
	GridConfig = Grid::AddColumn(GridConfig, C_Column_Administration, 0.25, Grid::C_Align_Center);
	GridConfig = Grid::AddColumn(GridConfig, C_Column_Feature, 0.25, Grid::C_Align_Center);
	declare Grid = Grid::Compile(GridConfig);
	declare Text GridConfigJson = GridConfig.tojson();

	/* Scroll view commons */
	declare ScrollConfig = Scroll::K_Config {
		AnimEnabled = True,
		PreScrollEnabled = True,
		PreScrollBefore = 1,
		PreScrollAfter = 1,
		ScrollBarVisibility = Scroll::C_ScrollBarVisibility_DuringScroll,
		ScrollGrid = <8., 8.>,
		ScrollIndicator = True,
		ScrollIndicatorColorize = <1., 1., 1.>,
		ScrollIndicatorImage = Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique,
		ScrollIndicatorSize = 12.,
		ScrollIndicatorYOffset = -15.,
		ScrollPadding = 27.5,
		Skew = -10.,
		SkewVAlign = Scroll::C_SkewVAlign_Top,
		WindowSize = <265., 88.>
	};

	/* Activity grid scroll view */
	declare Integer Grid_ColumnsNb = 5;
	declare Integer Grid_RowsNb = 4;
	declare Integer Grid_ActivitiesPerPage = Grid_ColumnsNb * Grid_RowsNb;
	declare Vec2 Grid_Size_ActivityMargin = <1., 4.>;
	declare Vec2 FakeWindowSize = <265., 98.>;
	declare Vec2 Grid_Size_Activity = Scroll::GetElementSize(FakeWindowSize, Grid_Size_ActivityMargin * 0.5, Grid_ColumnsNb, Grid_RowsNb);
	declare Integer Grid_ElementsNb = Scroll::GetRequiredElementsNb(FakeWindowSize, Grid_Size_Activity, Grid_Size_ActivityMargin * 0.5, Grid_ColumnsNb);	
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] Grid_Actions = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Const::C_ImageUrl_Icon_List_View, <8., 8.>, 0.5, 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Const::C_ImageUrl_Icon_Plus_Oblique,  <8., 8.>, -0.5, 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	declare Vec2 Grid_Size_ActivityImage = MLHelpers::KeepRatioFromY(608., 272., Grid_Size_Activity.Y);
	declare Vec2 Grid_Size_AdjustedActivityImage = <Grid_Size_ActivityImage.X - MLHelpers::SkewX(Grid_Size_ActivityImage.Y, 10.),	Grid_Size_ActivityImage.Y>;
	declare Vec2 Grid_Size_ActivityName = <Grid_Size_AdjustedActivityImage.X * 0.9, 10.>;
	declare Vec2 Grid_Pos_ActivityName =  <Grid_Size_AdjustedActivityImage.X * 0.06, -Grid_Size_AdjustedActivityImage.Y * 0.73>;
	declare Vec2 Grid_Size_ActivityType = <Grid_Size_AdjustedActivityImage.X * 0.9, 10.>;
	declare Vec2 Grid_Pos_ActivityType = <Grid_Size_AdjustedActivityImage.X * 0.05, -Grid_Size_AdjustedActivityImage.Y * 0.9>;
	declare Vec2 Grid_Pos_ActivityPrivate = <Grid_Size_AdjustedActivityImage.X * 0.88, Grid_Size_AdjustedActivityImage.Y * -0.15>;
	declare Vec2 Grid_Pos_ActivityFeatured = <Grid_Size_AdjustedActivityImage.X * 0.99, Grid_Size_AdjustedActivityImage.Y * -0.15>;
	
	declare Text ML_Grid_Activities = "";
	for (I, 1, Grid_ElementsNb) {
		ML_Grid_Activities ^= """
		<frameinstance
			modelid="framemodel-grid-activity"
			class="{{{Scroll::C_Class_Element}}}"
			hidden="1"
		/>
		""";
	}

	/* Activity list scroll view */
	declare Integer List_ColumnsNb = 1;
	declare Integer List_RowsNb = 8;
	declare Integer List_ActivitiesPerPage = List_ColumnsNb * List_RowsNb;
	declare Vec2 List_Size_ActivityMargin = <0., 2.>;
	FakeWindowSize = <264., 93.>;
	declare Vec2 List_Size_Activity = Scroll::GetElementSize(FakeWindowSize, List_Size_ActivityMargin, List_ColumnsNb, List_RowsNb);
	declare Integer List_ElementsNb = Scroll::GetRequiredElementsNb(FakeWindowSize, List_Size_Activity, List_Size_ActivityMargin, List_ColumnsNb);
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] List_Actions = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Const::C_ImageUrl_Icon_Grid_View, <8., 8.>, 0.5, 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Const::C_ImageUrl_Icon_Plus_Oblique,  <8., 8.>, -0.5, 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	declare Vec2 List_Size_ActivityImage = MLHelpers::KeepRatioFromY(608., 272., List_Size_Activity.Y);
	declare Vec2 List_Pos_ActivityImage = <0., List_Size_Activity.Y * -0.5>;
	declare Vec2 List_Pos_ActivityName = <List_Size_Activity.X * 0.09, List_Size_Activity.Y * -0.55>;
	declare Vec2 List_Pos_ActivityType = <List_Size_Activity.X * 0.97, List_Size_Activity.Y * -0.55>;
	declare Real Offset_OneIcon = 2.;
	declare Real Offset_TwoIcons = 8.;

	declare Text ML_List_Activities = "";
	for (I, 1, List_ElementsNb) {
		ML_List_Activities ^= """
		<frameinstance
			modelid="framemodel-list-activity"
			class="{{{Scroll::C_Class_Element}}}"
			hidden="1"
		/>
		""";
	}

	declare Vec2 Pos_ClubInfos_Default = <-149., 79.>;
	declare Vec2 Pos_ClubInfos_WithoutIcon = <-170., 79.>;

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="quad-default" halign="center" valign="center"/>
	<style class="text-regular" halign="center" valign="center2" textsize="5" textcolor="FFFFFF" textprefix="$t$i" textfont="{{{FontManager::C_GameFontRegular}}}"/>
	<style class="text-semibold" textsize="3" halign="center" valign="center2" textcolor="FFFFFF" textprefix="$t$i" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
	<style class="text-bold" textsize="3" halign="center" valign="center2" textcolor="FFFFFF" textprefix="$t$i" textfont="{{{FontManager::C_GameFontExtraBold}}}"/>
	<style class="text-search" textsize="2" halign="center" valign="center2" textcolor="FFFFFF" textprefix="$i" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-grid-activity">
	<quad id="quad-bg" size="{{{Grid_Size_ActivityImage.X}}} {{{Grid_Size_ActivityImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip" z-index="-1"/>
	<frameinstance id="control-block-list-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Grid_Size_ActivityImage.X}}} {{{Grid_Size_ActivityImage.Y}}}" data-image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-keepratio="clip" z-index="0" />
	<quad id="quad-gradient" size="{{{Grid_Size_ActivityImage.X}}} {{{Grid_Size_ActivityImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity=".7" z-index="1"/>
	<frameinstance id="control-block-list-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-translate="1" data-filter-profanities="Always" data-size="{{{Grid_Size_ActivityName.X}}} {{{Grid_Size_ActivityName.Y}}}" pos="{{{Grid_Pos_ActivityName.X}}} {{{Grid_Pos_ActivityName.Y}}}" data-halign="left" data-opacity="0.6" z-index="2" data-textsize="3" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-valign="center2" data-textprefix="$t$i" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" />
	<label id="label-type" size="{{{Grid_Size_ActivityType.X}}} {{{Grid_Size_ActivityType.Y}}}" pos="{{{Grid_Pos_ActivityType.X}}} {{{Grid_Pos_ActivityType.Y}}}" class="text-semibold" halign="left" textsize="2." opacity=".6" z-index="2"/>
	<quad id="quad-private" pos="{{{Grid_Pos_ActivityPrivate.X}}} {{{Grid_Pos_ActivityPrivate.Y}}}" image="{{{Const::C_ImageUrl_Icon_Lock_Oblique}}}" colorize="FFF" size="5 5" opacity="0.6" class="quad-default" hidden="1" z-index="3"/>
	<quad id="quad-featured" class="quad-default" pos="{{{Grid_Pos_ActivityFeatured.X}}} {{{Grid_Pos_ActivityFeatured.Y}}}" image="{{{Const::C_ImageUrl_Icon_Settings_Star_Inc}}}" size="6 6" opacity="0.6" colorize="FFF" hidden="1" z-index="3"/>
	<quad id="quad-contour" size="{{{Grid_Size_ActivityImage.X}}} {{{Grid_Size_ActivityImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" opacity="0." colorize="FFF" z-index="4"/>
	<frame size="{{{Grid_Size_ActivityImage.X}}} {{{Grid_Size_ActivityImage.Y}}}" pos="{{{Grid_Size_ActivityImage.X/2}}} {{{-Grid_Size_ActivityImage.Y/2}}}" halign="center" valign="center" z-index="5">
		<quad id="quad-hitbox" size="{{{Grid_Size_AdjustedActivityImage.X}}} {{{Grid_Size_AdjustedActivityImage.Y*1.5}}}" scriptevents="1" class="quad-default {{{Scroll::C_Class_ActivationZone}}}" rot="10"/>
	</frame>
</framemodel>

<framemodel id="framemodel-list-activity">
	<frameinstance id="frame-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{List_Size_Activity.X}}}" data-height="{{{List_Size_Activity.Y}}}" data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}" data-color="{{{ColorPalette::C_Color_DarkBlue}}}" data-opacity="0.6" data-halign="left" data-valign="top" z-index="0"/>
	<quad id="quad-background" size="{{{List_Size_ActivityImage.X}}} {{{List_Size_ActivityImage.Y}}}" pos="{{{List_Pos_ActivityImage.X}}} {{{List_Pos_ActivityImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" halign="left" valign="center" keepratio="clip" z-index="1"/>
	<frameinstance id="control-block-list-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{List_Size_ActivityImage.X}}} {{{List_Size_ActivityImage.Y}}}" pos="{{{List_Pos_ActivityImage.X}}} {{{List_Pos_ActivityImage.Y}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-halign="left" data-valign="center" data-keepratio="clip" z-index="2" />
	<frameinstance id="control-block-list-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-translate="1" data-filter-profanities="Always" data-size="{{{List_Size_Activity.X * 0.4}}} {{{List_Size_Activity.Y}}}" pos="{{{List_Pos_ActivityName.X}}} {{{List_Pos_ActivityName.Y}}}" data-halign="left" data-opacity="0.6" z-index="2" data-textsize="3" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-valign="center2" data-textprefix="$t$i" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" />
	<label id="label-type" size="{{{List_Size_Activity.X * 0.4}}} {{{List_Size_Activity.Y}}}" pos="{{{List_Pos_ActivityType.X}}} {{{List_Pos_ActivityType.Y}}}" class="text-semibold" halign="right" opacity="0.6" z-index="2"/>
	<quad id="quad-private" size="5 5" halign="left" pos="{{{List_Pos_ActivityName.X + List_Size_Activity.X * 0.4 + Offset_TwoIcons}}} {{{-List_Size_Activity.Y*0.5}}}" image="{{{Const::C_ImageUrl_Icon_Lock_Oblique}}}" colorize="FFF" class="quad-default" opacity="0.6" hidden="1" z-index="2"/>
	<quad id="quad-featured" size="6 6" halign="left" pos="{{{List_Pos_ActivityName.X + List_Size_Activity.X * 0.4 + Offset_OneIcon}}} {{{-List_Size_Activity.Y*0.5}}}" image="{{{Const::C_ImageUrl_Icon_Settings_Star_Inc}}}" colorize="FFF" class="quad-default" opacity="0.6" hidden="1" z-index="2"/>
	<quad id="quad-hitbox-club" size="{{{List_Size_Activity.X}}} {{{List_Size_Activity.Y}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}"/>
</framemodel>

<!-- Frame global -->
<frame id="frame-global" z-index="{{{Const::C_ZIndex_ClubDetails}}}">
	<frameinstance id="frame-loading-spinner" modelid="{{{LoadingSpinner::C_Name}}}" z-index="5" />
	<frameinstance 
		modelid="{{{PopUpMultiChoice::C_Name}}}" 
		id="frame-multichoice" 
		z-index="2"
		data-styles-secondchoice="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_ButtonWarning}}}"
		hidden="1" 
	/>
	<quad id="quad-page-background" image="{{{Const::C_ImageUrl_Club_Background_Default}}}" z-index="-1" size="320 180" fullscreen="1" opacity=".0" class="quad-default" scriptevents="1"/>
	<label id="label-error" z-index="1" size="150 10" textsize="4" textprefix="$i" class="text-semibold" textcolor="{{{ColorPalette::C_Color_ErrorRed}}}" autonewline="1" hidden="1"/>
	
	<!-- Frame Content -->
	<frame id="frame-content" z-index="1" hidden="1">
		<label id="label-scrollviews-infos" text="{{{Text_NoClubActivities}}}" size="150 10" textsize="4" textprefix="$i" class="text-semibold" autonewline="1" hidden="1"/>

		<!-- Frame Club Infos Left Corner -->
		<frame id="frame-club-infos-left-corner" pos="{{{Pos_ClubInfos_Default.X}}} {{{Pos_ClubInfos_Default.Y}}}" z-index="2">
			<quad id="quad-club-icon" pos="-2 0" size="{{{Grid_Size_ActivityImage.X}}} {{{Grid_Size_ActivityImage.Y}}}" alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" keepratio="clip"/>
			<label id="label-club-name" pos="51.5 1.5" size="150 10" halign="left" valign="top" class="text-bold" textsize="10" italicslope=".2" filter-profanities="OnlyIfNotTranslated" />

			<frameinstance 
				id="button-members" z-index="2"
				pos="51.5 -12"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-styles="{{{ExpendableButton::C_Style_NoBackground}}}"
				data-halign="left"
				data-valign="center"
				data-text="{{{Text_MembersList}}}"
				data-text-textfont="{{{FontManager::C_GameFontSemiBold}}}"
				data-text-textcolor-unfocused="{{{ColorPalette::C_Color_White}}}"
				data-text-textcolor-focused="{{{ColorPalette::C_Color_White}}}"
				data-text-opacity-unfocused="0.6"
				data-nav-inputs="select;cancel;down"
				data-nav-targets="_;_;button-join"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			/>

			<frameinstance
				id="button-join"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				pos="50 -19.5"
				data-styles="{{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_SizeExpendable}}}"
				data-halign="left"
				data-height="7"
				data-text-textsize="3"
				data-icon-colormode="{{{ExpendableButton::P}}}C_ColorMode_Colorize"
				data-icon-align="{{{ExpendableButton::C_IconAlign_TextRight}}}"
				data-nav-inputs="select;cancel;up;down"
				data-nav-targets="_;_;button-members;button-status"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
				data-nav-locked="1"
				hidden="1"
			/>

			<frame id="frame-button-grid" pos="48 -19.5" class="{{{Grid::C_Class_Container}}}" halign="right" z-index="2" >
				<frameinstance 
					modelid="{{{Button::C_Name}}}" id="button-status" z-index="1"
					class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
					data-grid-column="{{{C_Column_Status}}}"
					data-labelsize="50 10"
					data-size="11 11"
					data-opacityunfocus=".6"
					data-bgempty="1"
					data-iconcolor="{{{ColorPalette::C_Color_White}}}"
					data-iconfocuscolor="{{{ColorPalette::C_Color_White}}}"
					data-iconfocus="{{{Const::C_ImageUrl_Icon_LeaveClub}}}"
					data-iconsize="9 9"
					data-textsize="2"
					data-textitalicslope=".2"
					data-textopacityunfocus=".0"
					data-textxpos="0.45" data-textypos="-1.26"
					data-halign="center" data-valign="center"
					data-nav-inputs="select;cancel;up;right"
					data-nav-targets="_;_;button-join;button-pin-club"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
			
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-pin-club" z-index="5"
					class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
					data-text="{{{Text_PinClubToolTip}}}"
					data-grid-column="{{{C_Column_Pin}}}"
					data-labelsize="50 10"
					data-size="10 10"
					data-opacityunfocus=".6"
					data-bgempty="1"
					data-iconcolor="{{{ColorPalette::C_Color_White}}}"
					data-iconfocuscolor="{{{ColorPalette::C_Color_White}}}"
					data-icon="{{{Const::C_ImageUrl_Icon_Pin_Empty}}}"
					data-iconfocus="{{{Const::C_ImageUrl_Icon_Pin_Empty}}}"
					data-iconsize="8 8"
					data-loadingscale="0.6"
					data-textsize="2"
					data-textitalicslope=".2"
					data-textopacityunfocus=".0"
					data-textxpos="0.45" data-textypos="-1.35"
					data-halign="center" data-valign="center"
					data-nav-inputs="select;cancel;up;left;right"
					data-nav-targets="_;_;button-join;button-status;button-club-tag"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
					data-nav-locked="1"
					hidden="1"
				/>
			
				<frameinstance
					modelid="{{{Button::C_Name}}}" id="button-club-tag" z-index="1"
					class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
					data-text="{{{Text_SetClubTagToolTip}}}"
					data-grid-column="{{{C_Column_Tag}}}"
					data-labelsize="50 10"
					data-size="10 10"
					data-opacityunfocus=".6"
					data-bgempty="1"
					data-iconcolor="{{{ColorPalette::C_Color_White}}}"
					data-iconfocuscolor="{{{ColorPalette::C_Color_White}}}"
					data-icon="{{{Const::C_ImageUrl_Icon_Tag_Empty}}}"
					data-iconfocus="{{{Const::C_ImageUrl_Icon_Tag_Empty}}}"
					data-iconsize="8 8"
					data-loadingscale="0.6"
					data-textsize="2"
					data-textitalicslope=".2"
					data-textopacityunfocus=".0"
					data-autonewline="1" data-maxline="2"
					data-textxpos="0.45" data-textypos="-1.35"
					data-halign="center" data-valign="center"
					data-nav-inputs="select;cancel;up;left;right"
					data-nav-targets="_;_;button-join;button-pin-club;button-administration"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
					data-nav-locked="1"
					hidden="1"
				/>

				<frameinstance 
					modelid="{{{Button::C_Name}}}" id="button-administration" z-index="1"
					class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
					data-grid-column="{{{C_Column_Administration}}}"
					data-labelsize="50 10"
					data-size="10 10"
					data-opacityunfocus=".6"
					data-bgempty="1"
					data-iconcolor="{{{ColorPalette::C_Color_White}}}"
					data-iconfocuscolor="{{{ColorPalette::C_Color_White}}}"
					data-icon="{{{Const::C_ImageUrl_Icon_ClubAdministration}}}"
					data-iconfocus="{{{Const::C_ImageUrl_Icon_ClubAdministration}}}"
					data-iconsize="10 10"
					data-text="{{{Text_AdminToolTip}}}"
					data-textsize="2"
					data-textitalicslope=".2"
					data-textopacityunfocus=".0"
					data-textxpos="0.45" data-textypos="-1.36"
					data-halign="center" data-valign="center"
					data-nav-inputs="select;cancel;up;left;right"
					data-nav-targets="_;_;button-join;button-club-tag;button-feature"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
					data-nav-locked="1"
					hidden="1"
				/>

				<frameinstance
					id="button-feature"
					modelid="{{{ExpendableButton::C_Name}}}"
					class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
					data-grid-column="{{{C_Column_Feature}}}"
					data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}}"
					data-text="{{{Text_Feature}}}"
					data-height="7"
					data-text-textsize="2"
					data-halign="left" data-valign="center"
					data-nav-inputs="select;cancel;up;left"
					data-nav-targets="_;_;button-join;button-administration"
					data-nav-group="{{{C_NavGroupName}}}"
					data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
					data-nav-locked="1"
					hidden="1"
				/>
			</frame>
		</frame>

		<!-- Frame Club Infos Right Corner -->
		<frame id="frame-club-infos-right-corner" pos="141 79.5" z-index="2">
			<label id="label-club-tag" pos="2 0" size="50 2" valign="top" halign="right" class="text-semibold" textsize="5" italicslope=".2" />
			<label id="label-club-description" pos="0 -9" size="150 40" class="text-semibold" textprefix="$i" autonewline="1" maxline="4" valign="top" halign="right" filter-profanities="OnlyIfNotTranslated"/>
		</frame>

		<!-- Title Bar -->
		<frameinstance
			id="frame-titlebar" z-index="5"
			pos="8.75 38.5"
			modelid="{{{TitleBar::C_Name}}}" 
			data-size="{{{ScrollConfig.WindowSize.X}}} 10" 
			data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}"
			data-actions="{{{TL::MLEncode(List_Actions.tojson())}}}"
			data-tabs-max-width="210"
		/>

		<!-- Frame Activities -->
		<frame id="frame-activities" pos="0 31">
			<!-- Scroll view grid -->
			<frame id="frame-scroll-view-grid" z-index="1">
				<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-activities-grid" z-index="1" />
				<frame
					id="frame-scroll-activities-grid"
					pos="{{{- 0.485 * ScrollConfig.WindowSize.X}}} 0"
					class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
					data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
					data-pager-page-size="{{{Grid_ActivitiesPerPage*2}}}"
					data-elements-per-line="{{{Grid_ColumnsNb}}}"
					data-element-size="{{{Grid_Size_Activity.X}}} {{{Grid_Size_Activity.Y}}}"
					data-margin-size="{{{Grid_Size_ActivityMargin.X}}} {{{Grid_Size_ActivityMargin.Y}}}"
					data-scroll-indicator-x-offset="-12.6"
					data-scrollbar-xoffset="5.3"
					data-scroll-locked="1"
					data-nav-inputs="up;down"
					data-nav-targets="button-status;button-back"
					data-nav-group="{{{C_NavGroupName}}}"
				>
					<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}"/>
					{{{ML_Grid_Activities}}}
				</frame>
			</frame>

			<!-- Scroll view list -->
			<frame id="frame-scroll-view-list" z-index="1" hidden="1">
				<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="frame-scroll-activities-list" z-index="1" />
				<frame
					id="frame-scroll-activities-list"
					pos="{{{- 0.476 * ScrollConfig.WindowSize.X}}} 0"
					class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
					data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
					data-pager-page-size="{{{List_ActivitiesPerPage*2}}}"
					data-elements-per-line="{{{List_ColumnsNb}}}"
					data-element-size="{{{List_Size_Activity.X}}} {{{List_Size_Activity.Y}}}"
					data-margin-size="{{{List_Size_ActivityMargin.X}}} {{{List_Size_ActivityMargin.Y}}}"
					data-scroll-indicator-x-offset="-15"
					data-scrollbar-xoffset="3"
					data-scroll-locked="1"
					data-nav-inputs="up;down"
					data-nav-targets="button-status;button-back"
					data-nav-group="{{{C_NavGroupName}}}"
				>
					<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
					{{{ML_List_Activities}}}
				</frame>
			</frame>
		</frame>

		<!-- Footer -->
		<frameinstance
			id="button-back"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			pos="-151.5 -73"
			z-index="2"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
			data-nav-inputs="select;cancel;up;right"
			data-nav-targets="_;_;frame-scroll-activities-grid;frame-scroll-activities-grid"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>
</frame>
""",
"""
#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/ReportContext.Script.txt" as ReportContext
#Include "Libs/Nadeo/MenuLibs/Common/Components/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/MenuBackground_ML.Script.txt" as MenuBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ReportSystem.Script.txt" as ReportSystem
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ReportStruct.Script.txt" as ReportStruct
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform

#Const C_ChoiceList_AddActivity {{{dump(ChoiceList_AddActivity)}}}

#Const C_ScrollView_List {{{dump(C_ScrollView_List)}}}
#Const C_ScrollView_Grid {{{dump(C_ScrollView_Grid)}}}

//L16N Title of the pop-up asking a confirmation to leave a club.
#Const C_LeaveClubPopUp_Title _("Leave club")
//L16N The player need to confirm they want leave the club, %1 will be replaced by the club name. e.g "Are you sure you want to leave the club 'Unicorn'?"
#Const C_LeaveClubPopUp_Description1 _("Are you sure you want to leave the club '%1'?")
//L16N We inform the players that they may not be able to rejoin the club after leaving it
#Const C_LeaveClubPopUp_Description2 _("You might not be able to rejoin it")
//L16N The club creator cannot leave his own club, %1 will be replaced by the club name. e.g "You are the club creator of 'Unicorn'"
#Const C_LeaveClubPopUp_Description3 _("You are the club creator of '%1'")
//L16N We inform the club creators that they can delete their clubs in the club edition page
#Const C_LeaveClubPopUp_Description4 _("You cannot leave your own club, but you can delete it")
#Const C_LeaveClubPopUp_Choices [0 => _("Back"), 1 => _("Leave")]
#Const C_LeaveClubPopUp_ChoiceIndex_Back 0
#Const C_LeaveClubPopUp_ChoiceIndex_Leave 1

//L16N This club activity is reserved for club members
#Const C_PrivateActiPopUp_Description _("This activity is private, you need to be a member of the club to access it.")
#Const C_PrivateActiPopUp_Choices [0 => _("Ok")]
#Const C_PrivateActiPopUp_ChoiceIndex_Ok 0

//L16N Title of the pop-up to create a club activity
#Const C_CreateActiPopUp_Title _("Create activity")

#Const C_PopUpLeaveClubIndex 0
#Const C_PopUpPrivateActiIndex 1
#Const C_PopUpCreateActiIndex 2

// Do not modify this delay without testing if medias (icons, vertical, bg...) are correctly updated after a club creation
#Const C_DelayCreatedClubUpdate 2000

#Struct K_ScrollView {
	CMlFrame Frame_ScrollActivities;
	CMlFrame Frame_ScrollView_Grid;
	CMlFrame Frame_ScrollView_List;
	CMlFrame Frame_TitleBar;
	Text CurrentLayout;
}

#Struct K_Controls {
	CMlFrame Button_Back;
	CMlFrame Button_ClubTag;
	CMlFrame Button_Feature;
	CMlFrame Button_Join;
	CMlFrame Button_Members;
	CMlFrame Button_PinClub;
	CMlFrame Button_Status;
	CMlFrame Button_Administration;
	CMlFrame Frame_Activities;
	CMlFrame Frame_ButtonGrid;
	CMlFrame Frame_Content;
	CMlFrame Frame_Global;
	CMlFrame Frame_LoadingSpinner;
	CMlFrame Frame_MultiChoice;
	CMlLabel Label_ClubDescription;
	CMlLabel Label_ClubName;
	CMlLabel Label_ClubTag;
	CMlLabel Label_ScrollViewInfos;
	CMlQuad Quad_ClubBackground;
	CMlFrame Frame_ClubInfos_Left;
	CMlQuad Quad_ClubIcon;
	CMlLabel Label_Error;
}

#Struct K_State {
	Boolean LeavingClub;
	Boolean BgDownloadInProgress;
	K_Controls Controls;
	K_ScrollView ScrollView;
	Text[] ActivityCreationOptions;
	Grid::K_GridConfig GridConfig;
	Http::K_Request JoinClubRequest;
	ReportStruct::LibStructuresReport_K_ReportData[Integer] CurrentReportData;
}
""",
"""
Void UpdateControllerInfos(K_State _State, Boolean _IsLocked, Boolean _CanCreateActivity) {
	declare Text[Text] ControllerInfos = ["A" => _("Select"), "B" => _("Back")];

	if (!_IsLocked) {
		if (_CanCreateActivity) {
			ControllerInfos["Action2"] = C_CreateActiPopUp_Title;
		}
		if (!_State.Controls.Frame_MultiChoice.Visible) {
			ControllerInfos["{{{Const::C_NavInput_ReportSystem}}}"] = "{{{Const::C_Text_Report}}}";
		}
	}
		
	ControllerInfo::SetButtons(ControllerInfos); 
}

Void LockNavigation(K_State _State, Boolean _IsLocked) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !_IsLocked);
	{{{Scroll::P}}}LockNavigation(_State.ScrollView.Frame_ScrollActivities, _IsLocked);
	{{{TitleBar::P}}}LockNavigation(_State.ScrollView.Frame_TitleBar, _IsLocked);
	UpdateControllerInfos(_State, _IsLocked, RBAC::HasClubPermission({{{ClubStore::P}}}GetUserCurrentClubMembership(), RBAC::C_ClubPermission_CreateActivity));
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Scroll::P}}}IsScroll(_From)) {
			{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}

		if (
			_To != Null && {{{Scroll::P}}}IsScroll(_To) && TL::StartsWith("frame-scroll-activities-", _To.ControlId) &&
			_From.ControlId != "button-back" && !TL::StartsWith("frame-scroll-activities-", _From.ControlId)
		) {
			declare CMlControl ControlToFocus for _To;
			ControlToFocus = _From;
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Scroll::P}}}IsScroll(_To)) {
			{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void FocusAvailableControl(K_State _State, Boolean _IsScrollReachLimit) {
	if (!_IsScrollReachLimit && {{{Scroll::P}}}GetElementsTotal(_State.ScrollView.Frame_ScrollActivities) > 0) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _State.ScrollView.Frame_ScrollActivities);
	} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_Join)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _State.Controls.Button_Join);
	} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_Status)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _State.Controls.Button_Status);
	} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_Members)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _State.Controls.Button_Members);
	}
}

Void FocusActivity(CMlFrame _Frame_Activity, Text _ScrollViewLayout, Boolean _Focused) {
	if (_Frame_Activity == Null) return;
	declare CMlFrame ControlBlockList_Name <=> (_Frame_Activity.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlLabel Label_Type <=> (_Frame_Activity.GetFirstChild("label-type") as CMlLabel);
	declare CMlQuad Quad_Private <=> (_Frame_Activity.GetFirstChild("quad-private") as CMlQuad);
	declare CMlQuad Quad_Featured  <=> (_Frame_Activity.GetFirstChild("quad-featured") as CMlQuad);

	declare Integer FocusedActivityId for _Frame_Activity = {{{ClubStruct::P}}}C_ActivityNullId;
	if (_Focused && FocusedActivityId != {{{ClubStruct::P}}}C_ActivityNullId) {
		ReportSystem::AddData(
			ReportStruct::C_ReportTarget_Activity,
			ReportStruct::LibStructuresReport_K_ReportData {
				Details = [{{{ControlBlockList::P}}}GetTextValue(ControlBlockList_Name)],
				Ids = [TL::ToText(FocusedActivityId)],
				Contexts = [["From" => "Menu ClubDetails"]]
			}
		);
	} else {
		ReportSystem::RemoveData(ReportStruct::C_ReportTarget_Activity);
	}

	AnimMgr.Flush(Label_Type);
	AnimMgr.Flush(Quad_Private);
	AnimMgr.Flush(Quad_Featured);

	switch (_ScrollViewLayout) {
		case C_ScrollView_Grid: {
			declare CMlQuad Quad_Contour <=> (_Frame_Activity.GetFirstChild("quad-contour") as CMlQuad);
			declare CMlQuad Quad_Gradient <=> (_Frame_Activity.GetFirstChild("quad-gradient") as CMlQuad);

			AnimMgr.Flush(Quad_Contour);
			AnimMgr.Flush(Quad_Gradient);
			if (_Focused) {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 1., 250);
				AnimMgr.Add(Label_Type, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Private, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Featured, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 0.7, 250);
				AnimMgr.Add(Label_Type, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Private, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Featured, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
		case C_ScrollView_List: {
			declare CMlFrame Frame_Background <=> (_Frame_Activity.GetFirstChild("frame-background") as CMlFrame);

			if (_Focused) {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 1., 250);
				AnimMgr.Add(Label_Type, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Private, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Featured, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, 1.);
			} else {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 0.6, 250);
				AnimMgr.Add(Label_Type, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Private, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Featured, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, .6);
			}
		}
	}

	// Text to speech
	if (_Focused) {
		{{{ControlBlockList::P}}}TTS_Focus(ControlBlockList_Name);
	} else {
		{{{ControlBlockList::P}}}TTS_Unfocus(ControlBlockList_Name);
	}
}

Void UnfocusActivity(CMlFrame _Frame_Activity, Text _ScrollViewLayout) {
	FocusActivity(_Frame_Activity, _ScrollViewLayout, False);
}

Void ShowActivity(CMlFrame _Frame_Activity, {{{ClubStruct::P}}}K_Activity _Activity, Text _ScrollViewLayout) {
	declare CMlFrame ControlBlockList_Name <=> (_Frame_Activity.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlLabel Label_Type <=> (_Frame_Activity.GetFirstChild("label-type") as CMlLabel);
	declare CMlFrame ControlBlockList_Image <=> (_Frame_Activity.GetFirstChild("control-block-list-image") as CMlFrame);
	declare CMlQuad Quad_Featured <=> (_Frame_Activity.GetFirstChild("quad-featured") as CMlQuad);
	declare CMlQuad Quad_Private <=> (_Frame_Activity.GetFirstChild("quad-private") as CMlQuad);

	declare Integer FocusedActivityId for _Frame_Activity = {{{ClubStruct::P}}}C_ActivityNullId;
	FocusedActivityId = _Activity.Id;
	
	/* Common */
	_Frame_Activity.Visible = True;
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_Name, [_Activity.CreatorAccountId, _Activity.LatestEditorAccountId], _Activity.Name, False);
	{{{ControlBlockList::P}}}SetTTSAltText(
		This,
		ControlBlockList_Name,
		TL::Compose("%1 - %2", {{{ControlBlockList::P}}}GetTextValue(ControlBlockList_Name), Label_Type.Value),
		{{{ControlBlockList::P}}}C_DefaultTextValueBlocked,
		False
	);
	{{{ControlBlockList::P}}}Redraw(This, ControlBlockList_Name);
	Label_Type.SetText({{{ClubStruct::P}}}GetActivityDisplayName(_Activity.Type));
	Quad_Featured.Visible = _Activity.Featured;
	Quad_Private.Visible = !_Activity.Public;
	if (_Activity.MediaUrl != "" && Http.IsValidUrl(_Activity.MediaUrl)) {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_Image, [_Activity.CreatorAccountId, _Activity.LatestEditorAccountId], _Activity.MediaUrl);
		ControlBlockList_Image.Visible = True;
	} else {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_Image, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");
		ControlBlockList_Image.Visible = True;
	}
	if ({{{ControlBlockList::P}}}IsBlocked(This, [_Activity.CreatorAccountId, _Activity.LatestEditorAccountId])) {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_Activity, {{{MenuSounds::P}}}C_Sound_SelectError);
	} else {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_Activity, {{{MenuSounds::P}}}C_Sound_Select);
	}
	
	switch (_ScrollViewLayout) {
		case C_ScrollView_List: {
			if (Quad_Featured.Visible && Quad_Private.Visible) {
				Quad_Featured.RelativePosition_V3.X = {{{ControlBlockList::P}}}GetLabelWidth(This, ControlBlockList_Name, True) + {{{List_Pos_ActivityName.X}}} + {{{Offset_OneIcon}}};
				Quad_Private.RelativePosition_V3.X = {{{ControlBlockList::P}}}GetLabelWidth(This, ControlBlockList_Name, True) + {{{List_Pos_ActivityName.X}}} + {{{Offset_TwoIcons}}};
			} else if (Quad_Private.Visible) {
				Quad_Private.RelativePosition_V3.X = {{{ControlBlockList::P}}}GetLabelWidth(This, ControlBlockList_Name, True) + {{{List_Pos_ActivityName.X}}} + {{{Offset_OneIcon}}};
			} else if (Quad_Featured.Visible) {
				Quad_Featured.RelativePosition_V3.X = {{{ControlBlockList::P}}}GetLabelWidth(This, ControlBlockList_Name, True) + {{{List_Pos_ActivityName.X}}} + {{{Offset_OneIcon}}};
			}
		} case C_ScrollView_Grid: {
			if (Quad_Featured.Visible && Quad_Private.Visible) {
				Quad_Featured.RelativePosition_V3.X = {{{Grid_Pos_ActivityFeatured.X}}};
				Quad_Private.RelativePosition_V3.X = {{{Grid_Pos_ActivityPrivate.X}}};
			} else if (Quad_Private.Visible) {
				Quad_Private.RelativePosition_V3.X = {{{Grid_Pos_ActivityFeatured.X}}};
			} else if (Quad_Featured.Visible) {
				Quad_Featured.RelativePosition_V3.X = {{{Grid_Pos_ActivityFeatured.X}}};
			}
		}
	}
}

Void ShowActivityLoading(CMlFrame _Frame_Activity, Text _ScrollViewLayout) {
	declare CMlFrame ControlBlockList_Name <=> (_Frame_Activity.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlLabel Label_Type <=> (_Frame_Activity.GetFirstChild("label-type") as CMlLabel);
	declare CMlFrame ControlBlockList_Image <=> (_Frame_Activity.GetFirstChild("control-block-list-image") as CMlFrame);
	declare CMlQuad Quad_Private <=> (_Frame_Activity.GetFirstChild("quad-private") as CMlQuad);
	declare CMlQuad Quad_Featured <=> (_Frame_Activity.GetFirstChild("quad-featured") as CMlQuad);

	declare Integer FocusedActivityId for _Frame_Activity = {{{ClubStruct::P}}}C_ActivityNullId;
	FocusedActivityId = {{{ClubStruct::P}}}C_ActivityNullId;

	/* Common */
	_Frame_Activity.Visible = True;
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_Name, [], "{{{Text_Retrieving}}}", False);
	{{{ControlBlockList::P}}}SetTTSAltText(This, ControlBlockList_Name, "", "", False);
	{{{ControlBlockList::P}}}Redraw(This, ControlBlockList_Name);
	Label_Type.SetText("");
	Quad_Private.Hide();
	Quad_Featured.Hide();
	{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_Image, [], "");
	ControlBlockList_Image.Visible = False;
}

Void HideActivity(CMlFrame _Frame_Activity) {
	declare Integer FocusedActivityId for _Frame_Activity = {{{ClubStruct::P}}}C_ActivityNullId;
	FocusedActivityId = {{{ClubStruct::P}}}C_ActivityNullId;

	_Frame_Activity.Visible = False;
}

K_State UpdateTitleBarAndScrollView(K_State _State) {
	declare K_State State = _State;
	
	/* Update title bar */
	declare {{{TitleBar::P}}}K_Actions[Integer] Actions;
	declare Boolean CanCreateActivity = RBAC::HasClubPermission({{{ClubStore::P}}}GetUserCurrentClubMembership(), RBAC::C_ClubPermission_CreateActivity);
	switch (State.ScrollView.CurrentLayout) {
		case C_ScrollView_List: {
			Actions.fromjson({{{"\"\"\""^List_Actions.tojson()^"\"\"\""}}});
		}
		case C_ScrollView_Grid: {
			Actions.fromjson({{{"\"\"\""^Grid_Actions.tojson()^"\"\"\""}}});
		}
	}
	if (!CanCreateActivity) Actions.removekey({{{TitleBar::P}}}C_Action_Second);
	{{{TitleBar::P}}}SetActions(State.ScrollView.Frame_TitleBar, Actions);

	/* Update scrolls visibility */
	State.ScrollView.Frame_ScrollActivities <=> (State.Controls.Frame_Global.GetFirstChild("frame-scroll-activities-"^State.ScrollView.CurrentLayout) as CMlFrame);
	State.ScrollView.Frame_ScrollView_Grid.Visible = State.ScrollView.CurrentLayout == C_ScrollView_Grid;
	State.ScrollView.Frame_ScrollView_List.Visible = State.ScrollView.CurrentLayout == C_ScrollView_List;

	/* Update control targets */
	{{{Navigation::P}}}ChangeControlTargets(This, State.Controls.Button_Back, ["right", "up"], [State.ScrollView.Frame_ScrollActivities.ControlId, State.ScrollView.Frame_ScrollActivities.ControlId]);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Status, "down", State.ScrollView.Frame_ScrollActivities.ControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_ClubTag, "down", State.ScrollView.Frame_ScrollActivities.ControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_PinClub, "down", State.ScrollView.Frame_ScrollActivities.ControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Administration, "down", State.ScrollView.Frame_ScrollActivities.ControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Feature, "down", State.ScrollView.Frame_ScrollActivities.ControlId);

	/* Update controller infos */
	UpdateControllerInfos(State, !{{{Navigation::P}}}GroupIsEnabled(This, "{{{C_NavGroupName}}}"), CanCreateActivity);

	return State;
}

K_State SwitchScrollViewLayout(K_State _State) {
	declare K_State State = _State;
	declare CMlControl TrueTarget;
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
	declare CMlControl ControlToFocus for State.ScrollView.Frame_ScrollActivities;
	declare Integer ScrollViewElementKey = {{{Scroll::P}}}GetFocusedElementKey(State.ScrollView.Frame_ScrollActivities);
	declare Vec2 ScrollOffset = State.ScrollView.Frame_ScrollActivities.ScrollOffset;

	/* Lock previous scroll view */
	LockNavigation(State, True);

	/* Switch between ScrollView layouts */
	switch (State.ScrollView.CurrentLayout) {
		case C_ScrollView_List: State.ScrollView.CurrentLayout = C_ScrollView_Grid;
		case C_ScrollView_Grid: State.ScrollView.CurrentLayout = C_ScrollView_List;
	}
	State = UpdateTitleBarAndScrollView(State);

	/* Unlock current scroll view */
	LockNavigation(State, False);

	/* Transfer FocusedControl from previous scroll to the current scroll */
	{{{Scroll::P}}}Unfocus(This, State.ScrollView.Frame_ScrollActivities);
	{{{Scroll::P}}}ScrollToPosition(This, State.ScrollView.Frame_ScrollActivities, ScrollOffset.Y, False);
	if (FocusedControl != Null) { 
		if (TL::StartsWith("frame-scroll-activities-", FocusedControl.ControlId)) {
			FocusedControl = State.ScrollView.Frame_ScrollActivities;
			{{{Scroll::P}}}ScrollToElement(This, State.ScrollView.Frame_ScrollActivities, ScrollViewElementKey, True);
			Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), FocusedControl);
		}
	}

	/* Transfert ControlToFocus from previous scroll to the current scroll */
	if (ControlToFocus != Null) {
		declare CMlControl ControlToFocus as ControlToFocusOnNewScroll for State.ScrollView.Frame_ScrollActivities;
		ControlToFocusOnNewScroll = ControlToFocus;
	}

	/* Update scroll */
	{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);

	return State;
}

K_State UpdateClubInfos(K_State _State) {
	declare K_State State = _State;
	declare CurrentClub = {{{ClubStore::P}}}GetUserCurrentClub();

	State.Controls.Label_ClubName.Value = CurrentClub.Name;
	State.Controls.Label_ClubDescription.Value = CurrentClub.Description;
	State.Controls.Label_ClubTag.Value = Tools::FormatClubTag(CurrentClub.Tag);
	if (Http.IsValidUrl(CurrentClub.IconUrl)) {
		State.Controls.Quad_ClubIcon.ChangeImageUrl(CurrentClub.IconUrl);
		State.Controls.Frame_ClubInfos_Left.RelativePosition_V3.X = {{{Pos_ClubInfos_Default.X}}};
	} else {
		State.Controls.Quad_ClubIcon.ChangeImageUrl("");
		State.Controls.Frame_ClubInfos_Left.RelativePosition_V3.X = {{{Pos_ClubInfos_WithoutIcon.X}}};
	}
	if (CurrentClub.BgUrl != "" && Http.IsValidUrl(CurrentClub.BgUrl)) {
		if (State.Controls.Quad_ClubBackground.ImageUrl != CurrentClub.BgUrl) {
			State.Controls.Quad_ClubBackground.ChangeImageUrl(CurrentClub.BgUrl);
			State.Controls.Quad_ClubBackground.Opacity = 0.;
		}
	} else if (State.Controls.Quad_ClubBackground.ImageUrl != "{{{Const::C_ImageUrl_Club_Background_Default}}}") {
		State.Controls.Quad_ClubBackground.ChangeImageUrl("{{{Const::C_ImageUrl_Club_Background_Default}}}");
		State.Controls.Quad_ClubBackground.Opacity = 0.;
	}

	if (State.Controls.Quad_ClubBackground.DownloadInProgress) {
		State.BgDownloadInProgress = True;
	} else if (State.Controls.Quad_ClubBackground.Opacity <= 0.) {
		AnimMgr.Flush(State.Controls.Quad_ClubBackground);
		AnimMgr.Add(State.Controls.Quad_ClubBackground, "<quad opacity=\"1.\" />", 1500, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	ReportContext::SetClubDetails(
		System,
		CurrentClub.Id,
		CurrentClub.Name,
		CurrentClub.Tag,
		CurrentClub.Description,
		CurrentClub.PrivacyState,
		{{{ClubStore::P}}}GetUserCurrentClubMembership().Role,
		CurrentClub.IconUrl,
		CurrentClub.DecalUrl,
		CurrentClub.BgUrl,
		CurrentClub.VerticalUrl,
		CurrentClub.DecoImageUrl_DecalSponsor4x1,
		CurrentClub.DecoImageUrl_Screen16x9,
		CurrentClub.DecoImageUrl_Screen8x1,
		CurrentClub.DecoImageUrl_Screen16x1
	);

	ReportSystem::AddData(
		ReportStruct::C_ReportTarget_Club,
		ReportStruct::LibStructuresReport_K_ReportData {
			Details = [CurrentClub.Name],
			Ids = [TL::ToText(CurrentClub.Id)],
			Contexts = [["From" => "Menu ClubDetails"]]
		}
	);
	
	return State;
}

Void UpdateMembers(K_State _State) {
	declare TotalMembers = {{{ClubStore::P}}}GetUserCurrentClubMembersPager().Total;
	declare TotalRequests = {{{ClubStore::P}}}GetUserCurrentClubMemberRequestsPager().Total;

	if (TotalMembers < 2) {
		if (RBAC::HasClubPermission({{{ClubStore::P}}}GetUserCurrentClubMembership(), RBAC::C_ClubPermission_Administration)) {
			switch (TotalRequests) {
				case 0: {{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Members, TL::Compose("{{{Text_MemberNumber_Singular}}}", ""^TotalMembers));
				case 1: {{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Members, TL::Compose("{{{Text_MemberRequestNumber_Singular}}}", ""^TotalMembers, ""^TotalRequests));
				default: {{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Members, TL::Compose("{{{Text_MemberRequestNumber_SingularAndPlural}}}", ""^TotalMembers, ""^TotalRequests));
			}
		} else {
			{{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Members, TL::Compose("{{{Text_MemberNumber_Singular}}}", ""^TotalMembers));
		}
	} else {
		if (RBAC::HasClubPermission({{{ClubStore::P}}}GetUserCurrentClubMembership(), RBAC::C_ClubPermission_Administration)) {
			switch (TotalRequests) {
				case 0: {{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Members, TL::Compose("{{{Text_MemberNumber_Plural}}}", ""^TotalMembers));
				case 1: {{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Members, TL::Compose("{{{Text_MemberRequestNumber_PluralAndSingular}}}", ""^TotalMembers, ""^TotalRequests));
				default: {{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Members, TL::Compose("{{{Text_MemberRequestNumber_Plural}}}", ""^TotalMembers, ""^TotalRequests));
			}
		} else {
			{{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Members, TL::Compose("{{{Text_MemberNumber_Plural}}}", ""^TotalMembers));
		}
	}
}

K_State UpdateMembershipButtons(K_State _State) {
	declare K_State State = _State;
	declare {{{ClubStruct::P}}}K_Club UserCurrentClub = {{{ClubStore::P}}}GetUserCurrentClub();
	declare {{{ClubStruct::P}}}K_Member ClubMembership = {{{ClubStore::P}}}GetUserCurrentClubMembership();
	declare Boolean IsAdmin = RBAC::HasClubPermission(ClubMembership, RBAC::C_ClubPermission_Administration);
	declare Boolean IsMember = RBAC::HasClubPermission(ClubMembership, RBAC::C_ClubPermission_IsClubMember);
	declare Boolean IsApplicant = RBAC::HasClubPermission(ClubMembership, RBAC::C_ClubPermission_EditSubscription);

	/* Update status button */
	declare Text Text_Status = "";
	Text_Status = _("|Club|Leave");
	if (IsMember) {
		{{{Button::P}}}SetIcon(This, State.Controls.Button_Status, "{{{Const::C_ImageUrl_Icon_Role_Member}}}");
	} else if (IsApplicant) {
		{{{Button::P}}}SetIcon(This, State.Controls.Button_Status, "{{{Const::C_ImageUrl_Icon_Role_Applicant}}}");
		Text_Status = "{{{Text_CancelRequest}}}";
	}
	{{{Button::P}}}SetValue(This, State.Controls.Button_Status, Text_Status);

	/* Update button visibility */
	{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_ClubTag, IsMember);
	{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_PinClub, IsMember);
	{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_Administration, IsAdmin);
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_Join, !IsApplicant && !IsAdmin);
	{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_Status, IsApplicant || IsMember);
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_Feature, ClubMembership.Moderator && RBAC::HasClubPermission(ClubMembership, RBAC::C_ClubPermission_FeatureClub));
	{{{Navigation::P}}}Lock(State.Controls.Button_Join, !State.Controls.Button_Join.Visible || UserCurrentClub.PrivacyState == {{{ClubStruct::P}}}C_ClubState_PrivateClosed);

	/* Update feature button */
	if (State.Controls.Button_Feature.Visible) {
		if (ClubMembership.HasFeatured) {
			{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Feature, "{{{Text_Unfeature}}}");
		} else {
			{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Feature, "{{{Text_Feature}}}");
		}
	}

	/* Update pin club button */
	if (State.Controls.Button_PinClub.Visible) {
		declare Text ButtonIcon = "{{{Const::C_ImageUrl_Icon_Pin_Empty}}}";
		declare Text Text_PinClub = "{{{Text_PinClubToolTip}}}";
		if (UserCurrentClub.Id == {{{ClubStore::P}}}GetUserPinnedClub().Id) {
			ButtonIcon = "{{{Const::C_ImageUrl_Icon_Pin_Full}}}";
			Text_PinClub = "{{{Text_UnpinClubToolTip}}}";
		}
		{{{Button::P}}}SetIcon(This, State.Controls.Button_PinClub, ButtonIcon);
		{{{Button::P}}}SetIconFocus(This, State.Controls.Button_PinClub, ButtonIcon);
		{{{Button::P}}}SetValue(This, State.Controls.Button_PinClub, Text_PinClub);
		if ({{{ClubStore::P}}}GetUserPinnedClubStatus() == {{{ClubStore::P}}}C_PinnedClubStatus_Updating) {
			{{{Button::P}}}SetState(This, State.Controls.Button_PinClub, {{{Button::P}}}C_State_Loading, 150);
		} else {
			{{{Button::P}}}SetState(This, State.Controls.Button_PinClub, {{{Button::P}}}C_State_Normal);
		}
	}

	/* Update club tag button */
	if (State.Controls.Button_ClubTag.Visible) {
		declare Text ButtonIcon = "{{{Const::C_ImageUrl_Icon_Tag_Empty}}}";
		declare Text Text_ClubTag = "{{{Text_SetClubTagToolTip}}}";
		declare Boolean IsClubTagSet = UserCurrentClub.Id == {{{ClubStore::P}}}GetUserTaggedClubId();
		if (IsClubTagSet) {
			ButtonIcon = "{{{Const::C_ImageUrl_Icon_Tag_Full}}}";
			Text_ClubTag = "{{{Text_UnsetClubTagToolTip}}}";
		} else if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_JoinClub)) {
			Text_ClubTag = "";
		}
		{{{Button::P}}}SetIcon(This, State.Controls.Button_ClubTag, ButtonIcon);
		{{{Button::P}}}SetIconFocus(This, State.Controls.Button_ClubTag, ButtonIcon);
		{{{Button::P}}}SetValue(This, State.Controls.Button_ClubTag, Text_ClubTag);
		{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_ClubTag, {{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_JoinClub) || IsClubTagSet);
		if ({{{ClubStore::P}}}GetUserClubTagStatus() == {{{ClubStore::P}}}C_ClubTagStatus_Updating) {
			{{{Button::P}}}SetState(This, State.Controls.Button_ClubTag, {{{Button::P}}}C_State_Loading, 150);
		} else {
			{{{Button::P}}}SetState(This, State.Controls.Button_ClubTag, {{{Button::P}}}C_State_Normal);
		}
	}

	/* Update join button */
	if (State.Controls.Button_Join.Visible) {
		if (UserCurrentClub.PrivacyState != {{{ClubStruct::P}}}C_ClubState_PrivateClosed) {
			{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Join, "{{{Text_JoinClub}}}", False);
			{{{ExpendableButton::P}}}ResetIconImageUrl(This, State.Controls.Button_Join);
		} else {
			{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_Join, "{{{Text_ClosedClub}}}", False);
			{{{ExpendableButton::P}}}SetIconImageUrl(This, State.Controls.Button_Join, "{{{Const::C_ImageUrl_Icon_Lock_Oblique}}}", False);
			{{{ExpendableButton::P}}}SetIconColorMode(This, State.Controls.Button_Join, {{{ExpendableButton::P}}}C_ColorMode_Colorize);
		}
	}

	/* Update the grid */
	Grid::Update(State.GridConfig, AnimMgr, State.Controls.Frame_ButtonGrid, False, True);

	/* Update focused control if permissions have been updated */
	if ({{{Navigation::P}}}IsLocked({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"))) {
		FocusAvailableControl(State, False);
	}

	return State;
}

K_State UpdateClubMembership({{{ClubStruct::P}}}K_Member _Membership, K_State _State) {
	declare K_State State = _State;

	State = UpdateClubInfos(State);
	if (_Membership.AccountId != {{{ClubStruct::P}}}C_AccountNullId) {
		State = UpdateMembershipButtons(State);
	}

	ReportContext::SetClubDetailsUserRole(System, _Membership.Role);

	return State;
}

Void ResetControls(K_State _State, Boolean _IsVisible) {
	declare {{{ClubStruct::P}}}K_Member ClubMembership = {{{ClubStore::P}}}GetUserCurrentClubMembership();

	_State.Controls.Label_ScrollViewInfos.Visible = False;
	_State.Controls.Label_ClubTag.Visible = !_IsVisible;
	_State.Controls.Label_ClubDescription.Visible = !_IsVisible;
	_State.Controls.Frame_Activities.Visible = !_IsVisible;
	_State.ScrollView.Frame_TitleBar.Visible = !_IsVisible;
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(_State.Controls.Button_Join, !_IsVisible);
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(_State.Controls.Button_Members, !_IsVisible);
	{{{Button::P}}}SetVisibilityAndNavigation(_State.Controls.Button_Status, !_IsVisible);
	{{{Button::P}}}SetVisibilityAndNavigation(_State.Controls.Button_PinClub, !_IsVisible);
	{{{Button::P}}}SetVisibilityAndNavigation(_State.Controls.Button_ClubTag, !_IsVisible);
	{{{Button::P}}}SetVisibilityAndNavigation(_State.Controls.Button_Administration, !_IsVisible);
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(_State.Controls.Button_Feature, !_IsVisible && ClubMembership.Moderator && RBAC::HasClubPermission(ClubMembership, RBAC::C_ClubPermission_FeatureClub));
}

K_State DisplayPage(K_State _State) {
	declare K_State State = _State;
	declare {{{ClubStruct::P}}}K_Club CurrentClub = {{{ClubStore::P}}}GetUserCurrentClub();

	ResetControls(State, False);
	State = UpdateClubMembership({{{ClubStore::P}}}GetUserCurrentClubMembership(), State);
	{{{Scroll::P}}}SetElementsTotal(This, State.ScrollView.Frame_ScrollActivities, {{{ClubStore::P}}}GetClubActivitiesTotal({{{ClubStore::P}}}GetUserCurrentClub().Id));
	{{{Navigation::P}}}ChangeControlTargets(This, State.Controls.Button_Back, ["right", "up"], [State.ScrollView.Frame_ScrollActivities.ControlId, State.ScrollView.Frame_ScrollActivities.ControlId]);

	return State;
}

Void Cancel(K_State _State) {
	AnimMgr.Flush(_State.Controls.Quad_ClubBackground);
	_State.Controls.Quad_ClubBackground.Opacity = 0.;
	{{{Router::P}}}PushParent(This);
}

Void ShowError(K_State _State, Text _Message) {
	{{{LoadingSpinner::P}}}StopAnimation(This, _State.Controls.Frame_LoadingSpinner);
	_State.Controls.Label_Error.Visible = True;
	_State.Controls.Label_Error.Value = _Message;
}

Void OpenLeaveClubPopUp(K_State _State, Boolean _IsClubCreator) {
	declare Text ClubName = "$<"^FilterProfanities({{{ClubStore::P}}}GetUserCurrentClub().Name)^"$>";
	{{{PopUpMultiChoice::P}}}SetTitle(This, _State.Controls.Frame_MultiChoice, TL::Compose(C_LeaveClubPopUp_Title, ClubName), False);
	declare Text[Integer] Choices = C_LeaveClubPopUp_Choices;
	declare Text Description1 = C_LeaveClubPopUp_Description1;
	declare Text Description2 = C_LeaveClubPopUp_Description2;
	if (_IsClubCreator) {
		Description1 = C_LeaveClubPopUp_Description3;
		Description2 = C_LeaveClubPopUp_Description4;
		Choices.removekey(C_LeaveClubPopUp_ChoiceIndex_Leave);
	} 
	{{{PopUpMultiChoice::P}}}SetDescription(This, 
		_State.Controls.Frame_MultiChoice,
		[
			{{{PopUpMultiChoice::P}}}CreateDescriptionPart(TL::Compose(Description1, ClubName), <130., 15.>, 3., "{{{FontManager::C_GameFontRegular}}}", "$t$i", <1., 1., 1.>, False),
			{{{PopUpMultiChoice::P}}}CreateDescriptionPart(Description2, <130., 10.>, 3., "{{{FontManager::C_GameFontSemiBold}}}", "$t$i",  {{{ColorPalette::C_Color_Vec3_GreenOne}}}, False)
		],
		False
	);
	{{{PopUpMultiChoice::P}}}SetChoices(This, _State.Controls.Frame_MultiChoice, Choices, False);
	{{{PopUpMultiChoice::P}}}SetForceScrollView(This, _State.Controls.Frame_MultiChoice, False, False);
	{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _State.Controls.Frame_MultiChoice, False);
	declare Integer PopUpType for _State.Controls.Frame_MultiChoice;
	PopUpType = C_PopUpLeaveClubIndex;
	{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.Frame_MultiChoice);
}

Void OpenPrivateActivityPopUp(K_State _State, Text _ActivityName) {
	{{{PopUpMultiChoice::P}}}SetTitle(This, _State.Controls.Frame_MultiChoice, FilterProfanities(_ActivityName), False);
	{{{PopUpMultiChoice::P}}}SetDescription(This, 
		_State.Controls.Frame_MultiChoice,
		[
			{{{PopUpMultiChoice::P}}}CreateDescriptionPart(C_PrivateActiPopUp_Description, <130., 30.>, 3., "{{{FontManager::C_GameFontSemiBold}}}", "$t$i",  <1., 1., 1.>, False)
		],
		False
	);
	{{{PopUpMultiChoice::P}}}SetChoices(This, _State.Controls.Frame_MultiChoice, C_PrivateActiPopUp_Choices, False);
	{{{PopUpMultiChoice::P}}}SetForceScrollView(This, _State.Controls.Frame_MultiChoice, False, False);
	{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _State.Controls.Frame_MultiChoice, False);
	declare Integer PopUpType for _State.Controls.Frame_MultiChoice;
	PopUpType = C_PopUpPrivateActiIndex;
	{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.Frame_MultiChoice);
}

K_State OpenAddActivityPopUp(K_State _State) {
	declare K_State State = _State;

	declare ChoicesListAddActivity = C_ChoiceList_AddActivity;
	if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CreateClubCompetition)) {
		ChoicesListAddActivity.removekey({{{ClubStruct::P}}}C_ClubActivity_Competition);
	}
	if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_UseCustomCollection)) {
		ChoicesListAddActivity.removekey({{{ClubStruct::P}}}C_ClubActivity_ItemUpload);
	}

	declare Text[Integer] TranslatedActivityOptions;
	State.ActivityCreationOptions.clear();
	declare Integer Index = 0;
	foreach (ActivityId => TranslatedActivity in ChoicesListAddActivity) {
		TranslatedActivityOptions[Index] = TranslatedActivity;
		State.ActivityCreationOptions.add(ActivityId);
		Index += 1;
	}

	{{{PopUpMultiChoice::P}}}SetTitle(This, _State.Controls.Frame_MultiChoice, C_CreateActiPopUp_Title, False);
	{{{PopUpMultiChoice::P}}}SetChoices(This, _State.Controls.Frame_MultiChoice, TranslatedActivityOptions, False);
	{{{PopUpMultiChoice::P}}}SetForceScrollView(This, _State.Controls.Frame_MultiChoice, True, False);
	{{{PopUpMultiChoice::P}}}RedrawPopUpMultiChoice(This, _State.Controls.Frame_MultiChoice, False);
	declare Integer PopUpType for _State.Controls.Frame_MultiChoice;
	PopUpType = C_PopUpCreateActiIndex;
	{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.Frame_MultiChoice);

	return State;
}

K_State Select(CMlControl _Control, K_State _State) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;

	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-back": Cancel(State);
		case "button-status": {
			declare {{{ClubStruct::P}}}K_Member ClubMembership = {{{ClubStore::P}}}GetUserCurrentClubMembership();
			if (RBAC::HasClubPermission(ClubMembership, RBAC::C_ClubPermission_IsClubMember)) { // Leave club
				declare Boolean IsClubCreator = RBAC::HasClubPermission(ClubMembership, RBAC::C_ClubPermission_DeleteClub);
				OpenLeaveClubPopUp(State, IsClubCreator);
			} else if (RBAC::HasClubPermission(ClubMembership, RBAC::C_ClubPermission_EditSubscription)) { // Cancel join request
				if (Http::IsInitialized(State.JoinClubRequest)) {
					State.JoinClubRequest = Http::Destroy(State.JoinClubRequest);
				}
				State.JoinClubRequest = ClubAPI::PostDeclineMemberRequest({{{ClubStore::P}}}GetUserCurrentClub().Id, LocalUser.WebServicesUserId);
			}
		}
		case "button-join": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_JoinClub)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_JoinClub)
				]);
			} else {
				{{{ClubStore::P}}}Action_CreateClubMember(This, {{{ClubStore::P}}}GetUserCurrentClub().Id);
			}
		}
		case "button-members": {{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubMembers}}}", True);
		case "button-feature": {{{ClubStore::P}}}Action_SetUnsetFeaturedClub(This, {{{ClubStore::P}}}GetUserCurrentClub().Id, !{{{ClubStore::P}}}GetUserCurrentClubMembership().HasFeatured);
		case "button-pin-club": {
			if ({{{ClubStore::P}}}GetUserPinnedClubStatus() != {{{ClubStore::P}}}C_PinnedClubStatus_Updating) {
				if ({{{ClubStore::P}}}GetUserCurrentClub().Id == {{{ClubStore::P}}}GetUserPinnedClub().Id) {
					{{{ClubStore::P}}}Action_UnpinClub(This);
				} else {
					{{{ClubStore::P}}}Action_PinCurrentClub(This);
				}
			}
		}
		case "button-club-tag": {
			if ({{{ClubStore::P}}}GetUserClubTagStatus() != {{{ClubStore::P}}}C_ClubTagStatus_Updating) {
				declare {{{ClubStruct::P}}}K_Club UserCurrentClub = {{{ClubStore::P}}}GetUserCurrentClub();
				if ({{{ClubStore::P}}}GetUserTaggedClubId() == UserCurrentClub.Id) {
					{{{ClubStore::P}}}Action_RemoveClubTag(This);
				} else if ({{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_JoinClub)) {
					{{{ClubStore::P}}}Action_ApplyClubTag(This, UserCurrentClub);
				}
			}
		}
		case "button-administration": {
			if (RBAC::HasClubPermission({{{ClubStore::P}}}GetUserCurrentClubMembership(), RBAC::C_ClubPermission_Administration)) {
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubAdministration}}}", True);
			}
		}
	}

	return State;
}

Void SelectChoiceCreate(Text _Choice) {
	switch (_Choice) {
		case {{{ClubStruct::P}}}C_ClubActivity_Campaign: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateCampaign}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateCampaign}}}", True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_Room: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateRoom}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateRoom}}}", True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_SkinUpload: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateBucketActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateBucketActivity}}}", ["{{{RoutePaths::C_Query_BucketActivityType}}}" => {{{ClubStruct::P}}}C_ClubActivity_SkinUpload], True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_MapUpload: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateBucketActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateBucketActivity}}}", ["{{{RoutePaths::C_Query_BucketActivityType}}}" => {{{ClubStruct::P}}}C_ClubActivity_MapUpload], True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_ItemUpload: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateClubItemsActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateClubItemsActivity}}}", ["{{{RoutePaths::C_Query_BucketActivityType}}}" => {{{ClubStruct::P}}}C_ClubActivity_ItemUpload], True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_News: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateNews}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateNews}}}", True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_MapReview: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateMapReviewActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateMapReviewActivity}}}", True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_Competition: {
			OpenLink(Config::Get().WebsiteAdminClubUrl^{{{ClubStruct::P}}}C_CreateCompetition_Link, CMlScript::LinkType::ExternalBrowser);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_RankingClub: {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CreateRankingsActivity}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_CreateRankingsActivity}}}", True);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_Ad: {
			declare Text Link = TL::Replace(Config::Get().WebsitePlayersPageUrl^{{{ClubStruct::P}}}C_CreateAdvertisement_Link, {{{ClubStruct::P}}}C_ActivityLink_ToReplace_ClubId, ""^{{{ClubStore::P}}}GetUserCurrentClub().Id);
			OpenLink(Link, CMlScript::LinkType::ExternalBrowser);
		}
		case {{{ClubStruct::P}}}C_ClubActivity_Team: {
			declare Text Link = TL::Replace(Config::Get().WebsitePlayersPageUrl^{{{ClubStruct::P}}}C_CreateTeam_Link, {{{ClubStruct::P}}}C_ActivityLink_ToReplace_ClubId, ""^{{{ClubStore::P}}}GetUserCurrentClub().Id);
			OpenLink(Link, CMlScript::LinkType::ExternalBrowser);
		}
	}
}

Void LoadMembersAndRequestNb() {
	{{{ClubStore::P}}}Action_LoadUserCurrentClubMembersPage(This, {{{ClubStore::P}}}GetUserCurrentClub().Id, 0, 1, "");
	if (RBAC::HasClubPermission({{{ClubStore::P}}}GetUserCurrentClubMembership(), RBAC::C_ClubPermission_Administration)) {
		{{{ClubStore::P}}}Action_LoadUserCurrentClubMemberRequestsPage(This, {{{ClubStore::P}}}GetUserCurrentClub().Id, 0, 1);
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_State State;

declare persistent Text Persistent_ScrollViewLayout_ClubActivities for UserMgr.MainUser = "grid";

declare Boolean FirstEntranceOnPage;
declare Boolean WaitUserCurrentClubUpdate;
declare Boolean WaitClubMembershipUpdate;
declare Boolean WaitActivitiesUpdate;
declare Boolean WaitMembersUpdate;
declare Boolean WaitCreatedClubUpdate;

declare Integer UpdateCreatedClubTime;
declare Integer CreatedClubId;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	LeavingClub = False,
	BgDownloadInProgress = False,
	JoinClubRequest = Http::GetEmptyRequest(),
	ActivityCreationOptions = [],
	ScrollView = K_ScrollView {
		Frame_ScrollView_Grid = (Frame_Global.GetFirstChild("frame-scroll-view-grid") as CMlFrame),
		Frame_ScrollView_List = (Frame_Global.GetFirstChild("frame-scroll-view-list") as CMlFrame),
		Frame_ScrollActivities = (Frame_Global.GetFirstChild("frame-scroll-activities-"^Persistent_ScrollViewLayout_ClubActivities) as CMlFrame),
		Frame_TitleBar = (Frame_Global.GetFirstChild("frame-titlebar") as CMlFrame),
		CurrentLayout = Persistent_ScrollViewLayout_ClubActivities
	},
	Controls = K_Controls {
		Frame_Activities = (Frame_Global.GetFirstChild("frame-activities") as CMlFrame),
		Frame_ButtonGrid = (Frame_Global.GetFirstChild("frame-button-grid") as CMlFrame),
		Frame_Content = (Frame_Global.GetFirstChild("frame-content") as CMlFrame),
		Frame_Global = Frame_Global,
		Frame_LoadingSpinner = (Frame_Global.GetFirstChild("frame-loading-spinner") as CMlFrame),
		Frame_MultiChoice = (Frame_Global.GetFirstChild("frame-multichoice") as CMlFrame),
		Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
		Button_ClubTag = (Frame_Global.GetFirstChild("button-club-tag") as CMlFrame),
		Button_Feature = (Frame_Global.GetFirstChild("button-feature") as CMlFrame),
		Button_Join = (Frame_Global.GetFirstChild("button-join") as CMlFrame),
		Button_Members = (Frame_Global.GetFirstChild("button-members") as CMlFrame),
		Button_PinClub = (Frame_Global.GetFirstChild("button-pin-club") as CMlFrame),
		Button_Status = (Frame_Global.GetFirstChild("button-status") as CMlFrame),
		Button_Administration = (Frame_Global.GetFirstChild("button-administration") as CMlFrame),
		Label_ClubDescription = (Frame_Global.GetFirstChild("label-club-description") as CMlLabel),
		Label_ClubName = (Frame_Global.GetFirstChild("label-club-name") as CMlLabel),
		Label_ClubTag = (Frame_Global.GetFirstChild("label-club-tag") as CMlLabel),
		Label_ScrollViewInfos = (Frame_Global.GetFirstChild("label-scrollviews-infos") as CMlLabel),
		Quad_ClubBackground = (Frame_Global.GetFirstChild("quad-page-background") as CMlQuad),
		Frame_ClubInfos_Left = (Frame_Global.GetFirstChild("frame-club-infos-left-corner") as CMlFrame),
		Quad_ClubIcon = (Frame_Global.GetFirstChild("quad-club-icon") as CMlQuad),
		Label_Error = (Frame_Global.GetFirstChild("label-error") as CMlLabel)
	}
};
State.GridConfig.fromjson({{{"\"\"\""^GridConfigJson^"\"\"\""}}});

{{{Scroll::P}}}SetElementsTotal(This, State.ScrollView.Frame_ScrollActivities, {{{ClubStore::P}}}GetClubActivitiesTotal({{{ClubStore::P}}}GetUserCurrentClub().Id));
FirstEntranceOnPage = True;
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_ClubDetails}}}")) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_EnteringRoute: {
				ReportSystem::AddUsingId("{{{C_Name}}}");
				State.Controls.Label_Error.Value = "";
				State.Controls.Label_Error.Visible = False;

				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);
				// Retrieve last persitent scroll view
				State.ScrollView.CurrentLayout = Persistent_ScrollViewLayout_ClubActivities;
				State = UpdateTitleBarAndScrollView(State);

				if (Query.existskey("{{{RoutePaths::C_Query_CreatedClubId}}}")) {
					{{{LoadingSpinner::P}}}StartAnimation(This, State.Controls.Frame_LoadingSpinner, "{{{Text_Welcome}}}");
					State.Controls.Frame_Content.Hide();
					WaitCreatedClubUpdate = True;
					UpdateCreatedClubTime = Now + C_DelayCreatedClubUpdate;
					CreatedClubId = TL::ToInteger(Query.get("{{{RoutePaths::C_Query_CreatedClubId}}}", ""^{{{ClubStruct::P}}}C_ClubNullId));
					if (CreatedClubId == {{{ClubStruct::P}}}C_ClubNullId) {
						ShowError(State, "{{{Text_CreatedClubUpdateError}}}");
					}
				} else if (Query.existskey("{{{RoutePaths::C_Query_Club}}}") || FirstEntranceOnPage) {
					declare {{{ClubStruct::P}}}K_Club Club;
					if (Query.existskey("{{{RoutePaths::C_Query_Club}}}")) {
						Club.fromjson(Query["{{{RoutePaths::C_Query_Club}}}"]);
					} else {
						Club = {{{ClubStore::P}}}GetUserCurrentClub();
					}
					if (Club.Id == {{{ClubStore::P}}}GetUserTaggedClubId()) {
						{{{ClubStore::P}}}Action_ApplyClubTag(This, Club);
					}
					{{{ClubStore::P}}}Action_SetUserCurrentClub(This, Club);
					{{{LoadingSpinner::P}}}StartAnimation(This, State.Controls.Frame_LoadingSpinner, "{{{Text_Welcome}}}");
					State.Controls.Frame_Content.Hide();
					WaitUserCurrentClubUpdate = True;
					WaitClubMembershipUpdate = True;
					FirstEntranceOnPage = False;
				} else {
					if (Query.existskey("{{{RoutePaths::C_Query_ClubMembers}}}")) LoadMembersAndRequestNb();
					State = DisplayPage(State);
				}

				WaitMembersUpdate = True;
				WaitActivitiesUpdate = True;
				LockNavigation(State, False);
				{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
			}
		}
	}

	/* Handle request delay when coming back from club creation */
	if (CreatedClubId != {{{ClubStruct::P}}}C_ClubNullId && UpdateCreatedClubTime != -1 && UpdateCreatedClubTime <= Now) {
		{{{ClubStore::P}}}Action_LoadCreatedClub(This, CreatedClubId);
		UpdateCreatedClubTime = -1;
		CreatedClubId = {{{ClubStruct::P}}}C_ClubNullId;
	}

	/* Handle join club request */
	if (Http::IsInitialized(State.JoinClubRequest)) {
		State.JoinClubRequest = Http::Update(State.JoinClubRequest);
		if (!Http::IsRunning(State.JoinClubRequest)) {
			LoadMembersAndRequestNb();
			if (RBAC::HasClubPermission({{{ClubStore::P}}}GetUserCurrentClubMembership(), RBAC::C_ClubPermission_EditSubscription)) {
				{{{ClubStore::P}}}Action_UpdateUserCurrentClubMembership(This, {{{ClubStore::P}}}GetUserCurrentClub().Id);
			}
			State.JoinClubRequest = Http::Destroy(State.JoinClubRequest);
		}
	}

	/* Club background download */
	if (State.BgDownloadInProgress && !State.Controls.Quad_ClubBackground.DownloadInProgress) {
		State.BgDownloadInProgress = False;
		AnimMgr.Flush(State.Controls.Quad_ClubBackground);
		AnimMgr.Add(State.Controls.Quad_ClubBackground, "<quad opacity=\"1.\" />", 1500, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	/* TitleBar events */
	foreach (Event in {{{TitleBar::P}}}PendingEvents) {
		if (Event.TitleBar.Id == State.ScrollView.Frame_TitleBar.Id) {
			switch (Event.Type) {
				case {{{TitleBar::P}}}C_EventType_Action: {
					switch (Event.Action) {
						case {{{TitleBar::P}}}C_Action_First: {
							State = SwitchScrollViewLayout(State);
							Persistent_ScrollViewLayout_ClubActivities = State.ScrollView.CurrentLayout;
							UserMgr.MainUser.PersistentSave();
						}
						case {{{TitleBar::P}}}C_Action_Second: {
							State = OpenAddActivityPopUp(State);
						}
					}
				}
			}
		}
	}

	/* Report system events */
	foreach (Event in ReportSystem::GetPendingEvents()) {
		if (Event.LastUsingId == "{{{C_Name}}}") {
			switch (Event.Type) {
				case ReportSystem::C_EventType_Open: {
					LockNavigation(State, True);
				}
				case ReportSystem::C_EventType_Close: {
					LockNavigation(State, False);
				}
			}
		}
	}
	
	/* Navigation events */
	if (!State.Controls.Frame_MultiChoice.Visible) {
		foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
			if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
				switch (Event.Type) {
					case {{{Navigation::P}}}C_EventType_NavigateInput: {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
							State = Select(Event.To, State);
						} else if (
							Event.Input == CMlScriptEvent::EMenuNavAction::Cancel && 
							Event.From != State.ScrollView.Frame_ScrollActivities
						) {
							Cancel(State);
						} else {
							Focus(Event.From, Event.To);
						}
					}
					case {{{Navigation::P}}}C_EventType_NavigateMouse: {
						if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
							if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
								State = Select(Event.To, State);
							} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
								Focus(Event.From, Event.To);
							}
						}
					}
				}
			}
		}
	}

	/* Pop up multi choice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == State.Controls.Frame_MultiChoice.Id) {
			declare Integer PopUpType for State.Controls.Frame_MultiChoice;
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					if (PopUpType == C_PopUpLeaveClubIndex && Event.SelectedIndex == C_LeaveClubPopUp_ChoiceIndex_Leave) {
						State.LeavingClub = True;
						{{{ClubStore::P}}}Action_DeleteClubMember(This, {{{ClubStore::P}}}GetUserCurrentClub().Id, LocalUser.WebServicesUserId);
					} else if (PopUpType == C_PopUpCreateActiIndex && State.ActivityCreationOptions.existskey(Event.SelectedIndex)) {
						SelectChoiceCreate(State.ActivityCreationOptions[Event.SelectedIndex]);
						// We lock the navigation only if we are opening a new page, it is NOT the case with the ad, competition or team activity (only opening a link)
						declare Text ActivityType = State.ActivityCreationOptions[Event.SelectedIndex];
						LockNavigation(
							State,
							(
								ActivityType != {{{ClubStruct::P}}}C_ClubActivity_Ad &&
								ActivityType != {{{ClubStruct::P}}}C_ClubActivity_Competition &&
								ActivityType != {{{ClubStruct::P}}}C_ClubActivity_Team
							)
						);
					}
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					// Disable ReportSystem when the PopUpMultiChoice is visible
					if (State.Controls.Frame_MultiChoice.Visible) {
						State.CurrentReportData = ReportSystem::GetDataList();
						ReportSystem::RemoveUsingId("{{{C_Name}}}");
					} else {
						ReportSystem::AddUsingId("{{{C_Name}}}");
						ReportSystem::SetDataList(State.CurrentReportData);
					}
					LockNavigation(State, State.Controls.Frame_MultiChoice.Visible);
				}
			} 
		}
	}

	/* Scroll events */
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null && Event.Scroll.Id == State.ScrollView.Frame_ScrollActivities.Id) {
			if (Event.Type == {{{Scroll::P}}}C_EventType_PagerUpdate) {
				declare UserCurrentClub = {{{ClubStore::P}}}GetUserCurrentClub();

				if (UserCurrentClub.Id != {{{ClubStruct::P}}}C_ClubNullId) {
					{{{ClubStore::P}}}Action_LoadClubActivitiesPage(This, UserCurrentClub.Id, Event.PagerOffset, Event.PagerCount);
				}
			} else if (!State.Controls.Frame_MultiChoice.Visible) {
				switch (Event.Type) {
					case {{{Scroll::P}}}C_EventType_Update: {
						declare ClubActivities = {{{ClubStore::P}}}GetClubActivities({{{ClubStore::P}}}GetUserCurrentClub().Id);
						declare Integer[] ActivityIds;

						foreach (Key => Frame_Element in Event.ElementsVisible) {
							if (ClubActivities.existskey(Key)) {
								declare ClubActity = ClubActivities[Key];
								ShowActivity(Frame_Element, ClubActity, State.ScrollView.CurrentLayout);
								ActivityIds.add(ClubActity.Id);
							} else {
								ShowActivityLoading(Frame_Element, State.ScrollView.CurrentLayout);
							}
						}
						foreach (Key => Frame_Element in Event.ElementsHidden) {
							HideActivity(Frame_Element);
						}

						ReportContext::SetClubDetailsActivityIds(System, ActivityIds);
						{{{Navigation::P}}}Lock(Event.Scroll, Event.ElementsVisible.count <= 0);
						{{{Navigation::P}}}EnableInputs(Event.Scroll, Event.ElementsVisible.count <= 0);
						if (State.Controls.Frame_Activities.Visible) {
							State.Controls.Label_ScrollViewInfos.Visible = Event.ElementsVisible.count <= 0;
							State.Controls.Label_ScrollViewInfos.SetText("{{{Text_NoClubActivities}}}");
							FocusAvailableControl(State, False);
						}
					}
					case {{{Scroll::P}}}C_EventType_Cancel: Cancel(State);
					case {{{Scroll::P}}}C_EventType_Select: {
						declare ClubActivities = {{{ClubStore::P}}}GetClubActivities({{{ClubStore::P}}}GetUserCurrentClub().Id);

						if (ClubActivities.existskey(Event.ToKey)) {
							declare ClubActivity = ClubActivities[Event.ToKey];

							if ({{{ControlBlockList::P}}}IsBlocked(This, [ClubActivity.CreatorAccountId, ClubActivity.LatestEditorAccountId])) {
								// Do nothing if the activity is blocked
							} else if (ClubActivity.Public || RBAC::HasClubPermission({{{ClubStore::P}}}GetUserCurrentClubMembership(), RBAC::C_ClubPermission_IsClubMember)) {
								switch (ClubActivity.Type) {
									case {{{ClubStruct::P}}}C_ClubActivity_Room: {
										declare {{{ClubStruct::P}}}K_Room Room = {{{ClubStruct::P}}}K_Room {
											Id = ClubActivity.Id,
											ClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id,
											Name = ClubActivity.Name,
											CampaignId = ClubActivity.ExternalId,
											HasPassword = ClubActivity.Password
										};
										LockNavigation(State, True);
										if (Room.CampaignId != {{{CampaignStruct::C_Campaign_NullId}}}) {
											{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_RoomCampaignDisplay}}}", "{{{RoutePaths::C_Path_ClubDetails}}}");
											{{{Router::P}}}Push(
												This,
												"{{{RoutePaths::C_Path_RoomCampaignDisplay}}}",
												[
													"{{{RoutePaths::C_Query_Room}}}" => ""^Room.tojson(),
													"{{{RoutePaths::C_Query_IsClubActivity}}}" => "",
													{{{Router::P}}}C_Query_MenuSection => "{{{RoutePaths::C_MenuSection_Clubs}}}"
												],
												True
											);
										} else {
											// The room has a list of maps or a dedicated server
											{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_RoomMapListDisplay}}}", "{{{RoutePaths::C_Path_ClubDetails}}}");
											{{{Router::P}}}Push(
												This,
												"{{{RoutePaths::C_Path_RoomMapListDisplay}}}",
												[
													"{{{RoutePaths::C_Query_Room}}}" => ""^Room.tojson(),
													"{{{RoutePaths::C_Query_IsClubActivity}}}" => "",
													{{{Router::P}}}C_Query_MenuSection => "{{{RoutePaths::C_MenuSection_Clubs}}}"
												],
												True
											);
										}
									}
									case {{{ClubStruct::P}}}C_ClubActivity_Campaign: {
										declare {{{CampaignStruct::P}}}K_Campaign Campaign = {{{CampaignStore::P}}}GetCampaignFromId(ClubActivity.ExternalId);
										Campaign.Club = {{{ClubStore::P}}}GetUserCurrentClub();
										Campaign.Id = ClubActivity.ExternalId;
										Campaign.Name = ClubActivity.Name;
										
										LockNavigation(State, True);
										{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_CampaignDisplay}}}", "{{{RoutePaths::C_Path_ClubDetails}}}");
										{{{Router::P}}}Push(
											This,
											"{{{RoutePaths::C_Path_CampaignDisplay}}}",
											[
												"{{{RoutePaths::C_Query_Campaign}}}" => ""^Campaign.tojson(),
												"{{{RoutePaths::C_Query_IsClubActivity}}}" => "",
												{{{Router::P}}}C_Query_MenuSection => "{{{RoutePaths::C_MenuSection_Clubs}}}"
											],
											True
										);
									}
									case {{{ClubStruct::P}}}C_ClubActivity_SkinUpload: {
										LockNavigation(State, True);
										MenuBackground::SetRouteDisplayMode("{{{RoutePaths::C_Path_BucketItemUploads}}}", MenuBackground::C_DisplayMode_Null);
										{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_BucketItemUploads}}}", "{{{RoutePaths::C_Path_ClubDetails}}}");
										{{{Router::P}}}Push(This, 
											"{{{RoutePaths::C_Path_BucketItemUploads}}}",
											["{{{RoutePaths::C_Query_Activity}}}" => ClubActivity.tojson()],
											True
										);
									}
									case {{{ClubStruct::P}}}C_ClubActivity_MapUpload: {
										LockNavigation(State, True);
										MenuBackground::SetRouteDisplayMode("{{{RoutePaths::C_Path_BucketItemUploads}}}", MenuBackground::C_DisplayMode_Null);
										{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_BucketItemUploads}}}", "{{{RoutePaths::C_Path_ClubDetails}}}");
										{{{Router::P}}}Push(This, 
											"{{{RoutePaths::C_Path_BucketItemUploads}}}",
											["{{{RoutePaths::C_Query_Activity}}}" => ClubActivity.tojson()],
											True
										);
									}
									case {{{ClubStruct::P}}}C_ClubActivity_ItemUpload: {
										LockNavigation(State, True);
										{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubItemsActivity}}}", "{{{RoutePaths::C_Path_ClubDetails}}}");
										{{{Router::P}}}Push(This, 
											"{{{RoutePaths::C_Path_ClubItemsActivity}}}",
											["{{{RoutePaths::C_Query_Activity}}}" => ClubActivity.tojson()],
											True
										);
									}										
									case {{{ClubStruct::P}}}C_ClubActivity_News: {
										LockNavigation(State, True);
										{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_NewsActivity}}}", "{{{RoutePaths::C_Path_ClubDetails}}}");
										{{{Router::P}}}Push(This, 
											"{{{RoutePaths::C_Path_NewsActivity}}}",
											["{{{RoutePaths::C_Query_Activity}}}" => ClubActivity.tojson()],
											True
										);
									}
									case {{{ClubStruct::P}}}C_ClubActivity_Competition: {
										LockNavigation(State, True);
										{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_EventDetails}}}", "{{{RoutePaths::C_Path_ClubDetails}}}");
										{{{Router::P}}}Push(
											This, 
											"{{{RoutePaths::C_Path_EventDetails}}}",
											[
												"{{{RoutePaths::C_Query_Activity}}}" => ClubActivity.tojson(),
												"{{{RoutePaths::C_Query_Club}}}" => {{{ClubStore::P}}}GetUserCurrentClub().tojson(),
												{{{Router::P}}}C_Query_MenuSection => "{{{RoutePaths::C_MenuSection_Clubs}}}"
											],
											True
										);
									}
									case {{{ClubStruct::P}}}C_ClubActivity_MapReview: {
										if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_AccessServerReview)) {
											{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
											{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
												"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayMapReviewActivity)
											]);
										} else {
											LockNavigation(State, True);
											{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_MapReviewActivity}}}", "{{{RoutePaths::C_Path_ClubDetails}}}");
											{{{Router::P}}}Push(This, 
												"{{{RoutePaths::C_Path_MapReviewActivity}}}",
												["{{{RoutePaths::C_Query_Activity}}}" => ClubActivity.tojson()],
												True
											);
										}
									}
									case {{{ClubStruct::P}}}C_ClubActivity_Team: {
										// Open link only on PC
										if (Platform::IsPC(System)) {
											declare Text Link = TL::Replace(
												Config::Get().WebsitePlayersPageUrl^{{{ClubStruct::P}}}C_DisplayTeam_Link,
												{{{ClubStruct::P}}}C_ActivityLink_ToReplace_ClubId,
												""^{{{ClubStore::P}}}GetUserCurrentClub().Id
											);
											Link = TL::Replace(Link, {{{ClubStruct::P}}}C_ActivityLink_ToReplace_ActivityId, ""^ClubActivity.Id);
											OpenLink(Link, CMlScript::LinkType::ExternalBrowser);
										}
									}
									default: {
										if (
											ClubActivity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingClub || 
											ClubActivity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingOfficial ||
											ClubActivity.Type == {{{ClubStruct::P}}}C_ClubActivity_RankingDaily
										) {
											LockNavigation(State, True);
											{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_RankingsActivity}}}", "{{{RoutePaths::C_Path_ClubDetails}}}");
											{{{Router::P}}}Push(This, 
												"{{{RoutePaths::C_Path_RankingsActivity}}}",
												["{{{RoutePaths::C_Query_Activity}}}" => ClubActivity.tojson()],
												True
											);
										}
									}
								}
							} else {
								if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_JoinClub)) {
									{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
									{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
										"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayPrivateActivity)
									]);
								} else {
									OpenPrivateActivityPopUp(State, ClubActivity.Name);
								}
							}
						}
					}
					case {{{Scroll::P}}}C_EventType_Focus: {
						if (Event.Scroll != Null) {
							if (Event.From != Null) UnfocusActivity(Event.From, State.ScrollView.CurrentLayout);
							if (Event.To != Null) {
								if (Event.IsMouse && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
									Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Event.Scroll);
								}
								if ({{{Scroll::P}}}IsFocused(State.ScrollView.Frame_ScrollActivities)) {
									FocusActivity(Event.To, State.ScrollView.CurrentLayout, True);
								}
							}
						}
					}
					case {{{Scroll::P}}}C_EventType_ReachLimit: {
						if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Up) {
							declare CMlControl CurrentFocus = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}");
							if (CurrentFocus == State.ScrollView.Frame_ScrollActivities) {
								declare CMlControl ControlToFocus for State.ScrollView.Frame_ScrollActivities;
								if (ControlToFocus != Null && !{{{Navigation::P}}}IsLocked(ControlToFocus)) {
									Focus(Event.Scroll, ControlToFocus);
									{{{MenuSounds::P}}}PlayFocusSound(This, ControlToFocus);
								} else {
									FocusAvailableControl(State, True);
								}
							}
						} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Down || Event.NavAction == CMlScriptEvent::EMenuNavAction::Left) {
							if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
								if (Event.From != Null) UnfocusActivity(Event.From, State.ScrollView.CurrentLayout);
								Focus(Event.Scroll, State.Controls.Button_Back);
								{{{MenuSounds::P}}}PlayFocusSound(This, State.Controls.Button_Back);
							}
						}
					}
				}
			}
		}
	}

	/* ClubStore events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{ClubStore::P}}}C_Event_UserCurrentClubMembershipUpdated: {
						declare Membership = {{{ClubStore::P}}}GetUserCurrentClubMembership();

						State = UpdateClubMembership(Membership, State);
						State = UpdateTitleBarAndScrollView(State);
						if (Membership.AccountId != {{{ClubStruct::P}}}C_AccountNullId) {
							LoadMembersAndRequestNb();
							WaitClubMembershipUpdate = False;
						}
					}
					case {{{ClubStore::P}}}C_Event_UserCurrentClubMembershipUpdateFailed: {
						LoadMembersAndRequestNb();
						State = UpdateClubMembership({{{ClubStore::P}}}GetUserCurrentClubMembership(), State);
						WaitClubMembershipUpdate = False;
						WaitUserCurrentClubUpdate = False;
						WaitActivitiesUpdate = False;
						WaitMembersUpdate = False;
					}
					case
						{{{ClubStore::P}}}C_Event_ClubTagUpdated,
						{{{ClubStore::P}}}C_Event_ClubTagStatusUpdated,
						{{{ClubStore::P}}}C_Event_PinnedClubStatusUpdated
					: {
						State = UpdateMembershipButtons(State);
					}
					case {{{ClubStore::P}}}C_Event_UserCurrentClubUpdated: {
						State = UpdateMembershipButtons(State);
						WaitUserCurrentClubUpdate = False;
						if (WaitCreatedClubUpdate) {
							WaitCreatedClubUpdate = False;
							{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
						}
					}
					case {{{ClubStore::P}}}C_Event_UserCurrentClubMembersUpdated, {{{ClubStore::P}}}C_Event_UserCurrentClubMembersUpdateFailed: {
						UpdateMembers(State);
						WaitMembersUpdate = False;
					}
					case {{{ClubStore::P}}}C_Event_UserCurrentClubMemberRequestsUpdated, {{{ClubStore::P}}}C_Event_UserCurrentClubMemberRequestsUpdateFailed: {
						UpdateMembers(State);
					}
					case {{{ClubStore::P}}}C_Event_CreatedClubUpdateError: {
						ShowError(State, "{{{Text_CreatedClubUpdateError}}}");				
					}
					case {{{ClubStore::P}}}C_Event_ClubMemberUpdated: {
						LoadMembersAndRequestNb();
						if (State.LeavingClub) {
							// Only update when it's an unfollow
							State.LeavingClub = False;
							{{{ClubStore::P}}}Action_UpdateUserCurrentClubMembership(This, {{{ClubStore::P}}}GetUserCurrentClub().Id);
						}
					}
					case {{{ClubStore::P}}}C_Event_ClubMemberUpdateFailed: {
						LoadMembersAndRequestNb();
						if (State.LeavingClub) {
							// Only update when it's an unfollow
							State.LeavingClub = False;
							{{{ClubStore::P}}}Action_UpdateUserCurrentClubMembership(This, {{{ClubStore::P}}}GetUserCurrentClub().Id);
						}
					}
					case {{{ClubStore::P}}}C_Event_ClubActivitiesUpdated: {
						declare Integer CurrentClubId = {{{ClubStore::P}}}GetUserCurrentClub().Id;
						if (Event.CustomEventData.count > 0 && CurrentClubId == TL::ToInteger(Event.CustomEventData[0])) {
							{{{Scroll::P}}}SetElementsTotal(This, State.ScrollView.Frame_ScrollActivities, {{{ClubStore::P}}}GetClubActivitiesTotal(CurrentClubId));
							WaitActivitiesUpdate = False;
						}
					}
					case {{{ClubStore::P}}}C_Event_ClubActivitiesUpdateError: {
						{{{Scroll::P}}}SetElementsTotal(This, State.ScrollView.Frame_ScrollActivities, 0);
						WaitClubMembershipUpdate = False;
						WaitUserCurrentClubUpdate = False;
						WaitActivitiesUpdate = False;
						WaitMembersUpdate = False;
					}
					case {{{ClubStore::P}}}C_Event_ClubActivityMoved: {
						{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					}
					case {{{ClubStore::P}}}C_Event_ClubActivityDeleted: {
						{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					}
					case {{{ClubStore::P}}}C_Event_ActivityActivatedOrDeactivated: {
						{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					}
					case {{{ClubStore::P}}}C_Event_ClubRoomDeleted: {
						{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					}
					case {{{ClubStore::P}}}C_Event_ClubCampaignCreatedOrEdited: {
						{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					}
					case {{{ClubStore::P}}}C_Event_ClubActivityPrivacyUpdated: {
						{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					}
					case {{{ClubStore::P}}}C_Event_ClubRoomCreatedOrEdited: {
						{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					}
					case {{{ClubStore::P}}}C_Event_BucketActivityCreatedOrEdited: {
						{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					}
					case {{{ClubStore::P}}}C_Event_NewsActivityCreatedOrEdited: {
						{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					}
					case {{{ClubStore::P}}}C_Event_MapReviewActivityCreatedOrEdited: {
						{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Frame_ScrollActivities);
					}
					case {{{UserStore::P}}}C_Event_UserPermissionsUpdated: {
						State = UpdateMembershipButtons(State);
					}
					case {{{ClubStore::P}}}C_Event_SetUnsetFeaturedClubSucceeded: {
						{{{ClubStore::P}}}Action_UpdateUserCurrentClubMembership(This, {{{ClubStore::P}}}GetUserCurrentClub().Id);
					}
				}
			}
		}
	}

	/* Display club page when all data have been loaded */
	if (
		!State.Controls.Frame_Content.Visible &&
		!WaitUserCurrentClubUpdate &&
		!WaitClubMembershipUpdate &&
		!WaitActivitiesUpdate &&
		!WaitMembersUpdate &&
		!WaitCreatedClubUpdate
	) {
		State = DisplayPage(State);
		{{{Scroll::P}}}ScrollToHeader(This, State.ScrollView.Frame_ScrollActivities);
		{{{Scroll::P}}}SetFocusedElementKey(This, State.ScrollView.Frame_ScrollActivities, 0, False, True);
		{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.Frame_LoadingSpinner);
		State.Controls.Frame_Content.Show();
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_LeavingRoute}}}": {
				ReportSystem::RemoveUsingId("{{{C_Name}}}");
			}
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	CampaignStore::ComponentV2(),
	ExpendableButton::ComponentV2(),
	CampaignStruct::Component(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	Router::ComponentV2(),
	Scroll::ComponentV2(),
	TitleBar::Component(),
	Transition::ComponentV2(),
	UserStore::ComponentV2(),
	ExpendableAsset::ComponentV2(),
	ControlBlockList::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}