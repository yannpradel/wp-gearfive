/** 
 *	Page: EventDetails
 */
#Const Version		"2023-04-26"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/EventDetails.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Checkbox.Script.txt" as Checkbox
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/NavigationTabs.Script.txt" as NavigationTabs
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ProfilePlayerInfo.Script.txt" as ProfilePlayerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CompetitionStruct.Script.txt" as CompetitionStruct
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_EventDetails"
#Const C_NavGroupName "navgroup-event-details"
#Const C_NavGroup_MouseOnly "navgroup-page-event-details-mouse-only"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::PlayMultiplayerModeWithUGC
]

#Const C_AppErrorCode_NotAllowedZone "NOT_ALLOWED_ZONE"

#Const C_TabIndex_PreviousSteps 0
#Const C_TabIndex_RemainingSteps 1
#Const C_TabNames [
	//L16N [EventDetails] Button to display the previous steps of the competition, %1 will be replaced by the number of previous steps, e.g "3 Previous steps"
	0 => _("%1 previous steps"),
	//L16N [EventDetails] Button to display the remaining steps of the competition, %1 will be replaced by the number of remaining steps, e.g "3 Remaining steps"
	1 => _("%1 remaining steps")
]
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N [EventDetails] Text displayed while loading event.
	declare Text Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [EventDetails] Text of the club button. %1 will be replaced by the name of the club. e.g. "Club Nadeo"
	declare Text Text_Club = _("Club $<%1$>");
	//L16N [EventDetails] Register to the event
	declare Text Text_Register = _("Register");
	//L16N [EventDetails] Name of the phase when the players can register to the competition, will be followed by the registration dates
	declare Text Text_Registration = _("Registration:");
	//L16N [EventDetails] Status of the registrations when they are over
	declare Text Text_RegistrationClosed = _("Closed");
	//L16N [EventDetails] Status of the registrations when they have not started yet. %1 will be replaced by a date. eg: Open on November 12th at 12:00
	declare Text Text_RegistrationOpenOn = _("Open on %1");
	//L16N [EventDetails] Status of the registrations when they are ongoing. %1 will be replaced by a date. eg: Open until November 12th 2020
	declare Text Text_RegistrationOpenUntil = _("Open until %1");
	//L16N [EventDetails] Indicate the start and end date of a round. %1 and %2 will be replaced by a date. eg: November 12th to December 12th
	declare Text Text_FromDateToDate =	_("|FromDateToDate|%1 to %2");
	//L16N [EventDetails] Indicate the start and end time of a round. %1 and %2 will be replaced by an hour. eg: 15:30 to 19:45
	declare Text Text_FromHourToHour =	_("|FromHourToHour|%1 to %2");
	//L16N [EventDetails] Name of the semi finals step
	declare Text Text_SemiFinals = _("Semifinals");
	//L16N [EventDetails] Name of the final step
	declare Text Text_Final = _("Final");
	//L16N [EventDetails] Name of a step, %1 will be replaced by the step number, e.g "Step 2"
	declare Text Text_Step = _("Step %1");
	//L16N [EventDetails] Name of a round, %1 will be replaced by the step number, e.g "Round 2"
	declare Text Text_Round = _("Round %1");
	//L16N [Event Details] Display player's current matches
	declare Text Text_MyMatchs = _("Play");
	//L16N [Event Details] Title Display player's current matches
	declare Text Text_Matches = _("|Competition|Matches");
	//L16N [Event Details] Join the current Match
	declare Text Text_JoinMatch = _("Join");
	//L16N [EventDetails] Qualify to the event
	declare Text Text_Qualify = _("|Events|Qualify");
	//L16N [EventDetails] Qualifications Ranking
	declare Text Text_Ranking = _("Ranking");
	//L16N [EventDetails] Total players in ranking, e.g "56 players"
	declare Text Text_Players_Nb = _("%1 players");
	//L16N [EventDetails] Past round results
	declare Text Text_RoundResults = _("Results");
	//L16N [Event Details] See the full ranking of the match
	declare Text Text_SeeRanking = _("See full ranking");
	//L16N [Event Details] See the results of past round
	declare Text Text_SeeResults = _("See results");
	//L16N [Event Details] See the list of match participants
	declare Text Text_SeeCompetitors = _("See competitors list");
	//L16N [EventDetails] Competition Ranking global
	declare Text Text_LeaderBoard = _("Ranking");
	//L16N [EventDetails] Status of a match
	declare Text Text_InProgress = _("|Match|In Progress");
	//L16N [EventDetails] Status of a match
	declare Text Text_Completed = _("|Match|Completed");
	//L16N [Event Details] Quit the popup
	declare Text Text_Back = _("Back");
	//L16N [Event Details] Server number, e.g "Qualification server 14"
	declare Text Text_ServerName = _("Qualification server %1");
	//L16N [EventDetails] Message displayed when the player is successfuly registered to the event.
	declare Text Text_Registered = _("You have been successfuly registered!");
	//L16N [EventDetails] Competition is ended meaning we are past the competition end date.
	declare Text Text_CompetOver = _("This competition has ended");
	//L16N [EventDetails] Text displayed if the event has no description.
	declare Text Text_NoDescription = _("There is no description for this event.");

	//Steps Scroll List
	declare Integer StepsColumnsNb = 1;
	declare Integer StepsRowsNb = 4;
	declare Integer StepsPerPage = StepsColumnsNb * StepsRowsNb;
	declare Vec2 Size_StepsScrollWindow = <253., 9. * StepsRowsNb>;
	declare Vec2 Size_StepsMargin = <0., 0.>;	
	declare Vec2 Size_Steps = Scroll::GetElementSize(Size_StepsScrollWindow, Size_StepsMargin, StepsColumnsNb, StepsRowsNb);
	declare Vec2 Size_StepsName = <Size_Steps.X * 0.4, Size_Steps.Y * 0.15>;
	declare Vec2 Pos_StepsName = <Size_Steps.X * 0.02, Size_Steps.Y * -0.6>;
	declare Vec2 Size_ArrowSeeResults = <Size_Steps.X * 0.03, Size_Steps.Y * 0.8>;
	declare Vec2 Pos_ArrowSeeResults = <Size_Steps.X * 0.955, Size_Steps.Y * -0.135>;
	declare Vec2 Size_SeeResults = <Size_Steps.X * 0.3, Size_Steps.Y * 0.15>;
	declare Vec2 Pos_SeeResults = <Size_Steps.X * 0.95, Size_Steps.Y * -0.6>;	
	declare Vec2 Size_StepsDates = <Size_Steps.X * 0.5, Size_Steps.Y * 0.15>;
	declare Vec2 Pos_StepsDates = <Size_Steps.X * 0.98, Size_Steps.Y * -0.6>;
	declare Integer StepsElementsNb = Scroll::GetRequiredElementsNb(Size_StepsScrollWindow, Size_Steps, Size_StepsMargin, StepsColumnsNb);

	declare Vec2 Size_StepsHeader = <0., 0.>;
	declare Vec2 Size_StepsFooter = <0., 0.>;

	declare Text ML_StepsList = "";
	for (I, 1, StepsElementsNb) {
		ML_StepsList ^= """
		<frameinstance
			modelid="framemodel-step"
			class="{{{Scroll::C_Class_Element}}}"
			hidden="1"
		/>
		""";
	}

	// Qualifications servers list Scroll
	declare Integer ServerColumnsNb = 1;
	declare Integer ServerRowsNb = 8;
	declare Integer ServersPerPage = ServerColumnsNb * ServerRowsNb;
	declare Vec2 Size_ServersScrollWindow = <253., 9. * ServerRowsNb>;
	declare Vec2 Size_ServersMargin = <0., 0.>;	
	declare Vec2 Size_Server = Scroll::GetElementSize(Size_ServersScrollWindow, Size_ServersMargin, ServerColumnsNb, ServerRowsNb);
	declare Vec2 Size_ServerName = <Size_Server.X * 0.8, Size_Server.Y * 0.15>;
	declare Vec2 Pos_ServerName = <Size_Server.X * 0.5, Size_Server.Y * -0.6>;	
	declare Integer ServersElementsNb = Scroll::GetRequiredElementsNb(Size_ServersScrollWindow, Size_Server, Size_ServersMargin, ServerColumnsNb);

	declare Vec2 Size_Header = <0., 0.>;
	declare Vec2 Size_Footer = <0., 0.>;

	declare Text ML_ServerList = "";
	for (I, 1, ServersElementsNb) {
		ML_ServerList ^= """
		<frameinstance
			modelid="framemodel-server-element"
			class="{{{Scroll::C_Class_Element}}}"
			hidden="1"
		/>
		""";
	}

	// Ranking list Scroll
	declare Integer RankingColumnsNb = 1;
	declare Integer RankingRowsNb = 9;
	declare Integer RankingsPerPage = RankingColumnsNb * RankingRowsNb;
	declare Vec2 Size_RankingsScrollWindow = <248., 8. * RankingRowsNb>;
	declare Vec2 Size_RankingsMargin = <0., 0.>;	
	declare Vec2 Size_Ranking = Scroll::GetElementSize(Size_RankingsScrollWindow, Size_RankingsMargin, RankingColumnsNb, RankingRowsNb);
	declare Integer RankingsElementsNb = Scroll::GetRequiredElementsNb(Size_RankingsScrollWindow, Size_Ranking, Size_RankingsMargin, RankingColumnsNb);

	declare Vec2 Size_RankingNumber = <Size_Ranking.X * 0.05, Size_Ranking.Y>;
	declare Vec2 Size_Flag = <11., 6.8>;
	declare Vec2 Size_RankingName = <Size_Ranking.X * 0.66, Size_Ranking.Y * 0.9>;
	declare Vec2 Size_RankingScore = <Size_Ranking.X * 0.2, Size_Ranking.Y>;
	declare Vec2 Pos_RankingNumber = <4. + (Size_RankingNumber.X * 0.5), Size_Ranking.Y * -0.6>;
	declare Vec2 Pos_RankingFlag = <Pos_RankingNumber.X + (Size_RankingNumber.X * 0.5) + 1. + (Size_Flag.X * 0.5), Size_Ranking.Y * -0.55>;
	declare Vec2 Pos_RankingName = <Pos_RankingFlag.X + (Size_Flag.X * 0.5) + 1., Size_Ranking.Y * -0.6>;
	declare Vec2 Pos_RankingScore = <Pos_RankingName.X + Size_RankingName.X + 2. + Size_RankingScore.X, Size_Ranking.Y * -0.6>;
	
	declare Vec2 Size_RankingHeader = <0., 0.>;
	declare Vec2 Size_RankingFooter = <0., 0.>;

	declare Text ML_RankingList = "";
	for (I, 1, RankingsElementsNb) {
		ML_RankingList ^= """
		<frameinstance
			modelid="framemodel-ranking"
			class="{{{Scroll::C_Class_Element}}}"
			hidden="1"
		/>
		""";
	}

	//Round past matches Scroll List
	declare Integer RoundMatchesColumnsNb = 1;
	declare Integer RoundMatchesRowsNb = 9;
	declare Integer RoundMatchesPerPage = RoundMatchesColumnsNb * RoundMatchesRowsNb;
	declare Vec2 Size_RoundMatchesScrollWindow = <248., 9. * RoundMatchesRowsNb>;
	declare Vec2 Size_RoundMatchesMargin = <0., 0.>;	
	declare Vec2 Size_RoundMatches = Scroll::GetElementSize(Size_RoundMatchesScrollWindow, Size_RoundMatchesMargin, RoundMatchesColumnsNb, RoundMatchesRowsNb);
	declare Vec2 Size_RoundMatchesName = <Size_RoundMatches.X * 0.4, Size_RoundMatches.Y * 0.15>;
	declare Vec2 Pos_RoundMatchesName = <Size_RoundMatches.X * 0.05, Size_RoundMatches.Y * -0.6>;
	declare Vec2 Size_RoundMatchesStatus = <Size_RoundMatches.X * 0.3, Size_RoundMatches.Y * 0.15>;
	declare Vec2 Pos_RoundMatchesStatus = <Size_RoundMatches.X * 0.55, Size_RoundMatches.Y * -0.6>;
	declare Vec2 Size_ArrowFullRanking = <Size_RoundMatches.X * 0.03, Size_RoundMatches.Y * 0.8>;
	declare Vec2 Pos_ArrowFullRanking = <Size_RoundMatches.X * 0.95, Size_RoundMatches.Y * -0.135>;
	declare Vec2 Size_FullRankingName = <Size_RoundMatches.X * 0.2, Size_RoundMatches.Y * 0.15>;
	declare Vec2 Pos_FullRankingName = <Size_RoundMatches.X * 0.85, Size_RoundMatches.Y * -0.6>;
	declare Vec2 Size_IconProfile = <Size_RoundMatches.X * 0.02, Size_RoundMatches.Y * 0.5>;
	declare Vec2 Pos_IconProfile = <Size_RoundMatches.X * 0.015, Size_RoundMatches.Y * -0.25>;
	declare Integer RoundMatchesElementsNb = Scroll::GetRequiredElementsNb(Size_RoundMatchesScrollWindow, Size_RoundMatches, Size_RoundMatchesMargin, RoundMatchesColumnsNb);

	declare Vec2 Size_RoundMatchesHeader = <0., 0.>;
	declare Vec2 Size_RoundMatchesFooter = <0., 0.>;

	declare Text ML_RoundMatchesList = "";
	for (I, 1, RoundMatchesElementsNb) {
		ML_RoundMatchesList ^= """
		<frameinstance
			modelid="framemodel-round-match"
			class="{{{Scroll::C_Class_Element}}}"
			hidden="1"
		/>
		""";
	}

	//Matches Scroll List
	declare Integer MatchesColumnsNb = 1;
	declare Integer MatchesRowsNb = 9;
	declare Integer MatchesPerPage = MatchesColumnsNb * MatchesRowsNb;
	declare Vec2 Size_MatchesScrollWindow = <248., 9. * MatchesRowsNb>;
	declare Vec2 Size_MatchesMargin = <0., 0.>;	
	declare Vec2 Size_Matches = Scroll::GetElementSize(Size_MatchesScrollWindow, Size_MatchesMargin, MatchesColumnsNb, MatchesRowsNb);
	declare Vec2 Size_MatchesName = <Size_Matches.X * 0.3, Size_Matches.Y * 0.15>;
	declare Vec2 Pos_MatchesName = <Size_Matches.X * 0.2, Size_Matches.Y * -0.6>;
	declare Vec2 Size_MatchesDate = <Size_Matches.X * 0.2, Size_Matches.Y * 0.15>;
	declare Vec2 Pos_MatchesDate = <Size_Matches.X * 0.5, Size_Matches.Y * -0.6>;
	declare Vec2 Size_ArrowJoin = <Size_Matches.X * 0.03, Size_Matches.Y * 0.8>;
	declare Vec2 Pos_ArrowJoin = <Size_Matches.X * 0.95, Size_Matches.Y * -0.135>;
	declare Vec2 Size_IconSpectatorJoin = <Size_Matches.X * 0.03, Size_Matches.Y * 0.8>;
	declare Vec2 Pos_IconSpectatorJoin = <Size_Matches.X * 0.8, Size_Matches.Y * -0.3>;
	declare Vec2 Pos_JoinName = <Size_Matches.X * 0.9, Size_Matches.Y * -0.6>;
	declare Integer MatchesElementsNb = Scroll::GetRequiredElementsNb(Size_MatchesScrollWindow, Size_Matches, Size_MatchesMargin, MatchesColumnsNb);

	declare Vec2 Size_MatchesHeader = <0., 0.>;
	declare Vec2 Size_MatchesFooter = <0., 0.>;

	declare Text ML_MatchesList = "";
	for (I, 1, MatchesElementsNb) {
		ML_MatchesList ^= """
		<frameinstance
			modelid="framemodel-match"
			class="{{{Scroll::C_Class_Element}}}"
			hidden="1"
		/>
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-regular" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontRegular}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-step">
	<quad id="quad-step" size="{{{Size_Steps.X}}} {{{Size_Steps.Y + 0.75}}}" scriptevents="1" image="{{{Const::C_ImageUrl_LocalNetwork_LineServer}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity=".3" class="{{{Scroll::C_Class_ActivationZone}}}" />
	<label id="label-step-name" size="{{{Size_StepsName.X}}} {{{Size_StepsName.Y}}}" pos="{{{Pos_StepsName.X}}} {{{Pos_StepsName.Y}}}" halign="left" textcolor="FFF" opacity="0.6" class="text-extrabold" textsize="3" filter-profanities="OnlyIfNotTranslated" z-index="2"/>
	<label id="label-step-dates" size="{{{Size_StepsDates.X}}} {{{Size_StepsDates.Y}}}" pos="{{{Pos_StepsDates.X}}} {{{Pos_StepsDates.Y}}}" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" opacity="0.6" halign="right" class="text-semibold" textsize="3" z-index="2"/>
	<label id="label-step-results" text="{{{Text_SeeResults}}}" size="{{{Size_SeeResults.X}}} {{{Size_SeeResults.Y}}}" pos="{{{Pos_SeeResults.X}}} {{{Pos_SeeResults.Y}}}" textcolor="FFF" opacity="0.6" halign="right" class="text-extrabold" textsize="3" z-index="2"/>
	<quad id="quad-arrow" size="{{{Size_ArrowSeeResults.X}}} {{{Size_ArrowSeeResults.Y}}}" colorize="FFF" image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}" pos="{{{Pos_ArrowSeeResults.X}}} {{{Pos_ArrowSeeResults.Y}}}" opacity="0.6" z-index="2"/>
</framemodel>
<framemodel id="framemodel-server-element">
	<quad id="quad-server" size="{{{Size_Server.X}}} {{{Size_Server.Y + 0.75}}}" scriptevents="1" image="{{{Const::C_ImageUrl_LocalNetwork_LineServer}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity=".3" class="{{{Scroll::C_Class_ActivationZone}}}" />
	<label id="label-server-name" size="{{{Size_ServerName.X}}} {{{Size_ServerName.Y}}}" pos="{{{Pos_ServerName.X}}} {{{Pos_ServerName.Y}}}" textcolor="FFF" opacity="0.6" class="text-extrabold" textsize="3" filter-profanities="OnlyIfNotTranslated" z-index="2"/>
</framemodel>
<framemodel id="framemodel-match">
	<quad id="quad-matches" size="{{{Size_Matches.X}}} {{{Size_Matches.Y + 0.75}}}" scriptevents="1" image="{{{Const::C_ImageUrl_LocalNetwork_LineServer}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity=".3" class="{{{Scroll::C_Class_ActivationZone}}}" />
	<label id="label-matches-name" size="{{{Size_MatchesName.X}}} {{{Size_MatchesName.Y}}}" pos="{{{Pos_MatchesName.X}}} {{{Pos_MatchesName.Y}}}" textcolor="FFF" opacity="0.6" class="text-extrabold" textsize="3" filter-profanities="OnlyIfNotTranslated" z-index="2"/>
	<label id="label-matches-date" size="{{{Size_MatchesDate.X}}} {{{Size_MatchesDate.Y}}}" pos="{{{Pos_MatchesDate.X}}} {{{Pos_MatchesDate.Y}}}" textcolor="FFF" opacity="0.6" class="text-extrabold" textsize="3" z-index="2"/>
	<label id="label-matches-join" text="{{{Text_JoinMatch}}}" size="{{{Size_MatchesDate.X}}} {{{Size_MatchesDate.Y}}}" pos="{{{Pos_JoinName.X}}} {{{Pos_JoinName.Y}}}" textcolor="FFF" opacity="0.6" class="text-extrabold" textsize="3" z-index="2"/>
	<quad id="quad-arrow-join" size="{{{Size_ArrowJoin.X}}} {{{Size_ArrowJoin.Y}}}" colorize="FFF" image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}" pos="{{{Pos_ArrowJoin.X}}} {{{Pos_ArrowJoin.Y}}}" opacity="0.6" z-index="2"/>
	<label id="label-icon-spectator" hidden="1" size="{{{Size_IconSpectatorJoin.X}}} {{{Size_IconSpectatorJoin.Y}}}" colorize="FFF" text="" pos="{{{Pos_IconSpectatorJoin.X}}} {{{Pos_IconSpectatorJoin.Y}}}" opacity="0.6" z-index="2"/>
</framemodel>
<framemodel id="framemodel-round-match">
	<quad id="quad-match" size="{{{Size_RoundMatches.X}}} {{{Size_RoundMatches.Y + 0.75}}}" scriptevents="1" image="{{{Const::C_ImageUrl_LocalNetwork_LineServer}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity=".3" class="{{{Scroll::C_Class_ActivationZone}}}" />
	<quad id="quad-icon-profile" hidden="1" size="{{{Size_IconProfile.X}}} {{{Size_IconProfile.Y + 0.75}}}" image="{{{Const::C_ImageUrl_Icon_Profil_Oblique}}}" pos="{{{Pos_IconProfile.X}}} {{{Pos_IconProfile.Y}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" opacity="0.6" z-index="2"/>
	<label id="label-match-name" size="{{{Size_RoundMatchesName.X}}} {{{Size_RoundMatchesName.Y}}}" pos="{{{Pos_RoundMatchesName.X}}} {{{Pos_RoundMatchesName.Y}}}" halign="left" textcolor="FFF" opacity="0.6" class="text-extrabold" textsize="3" filter-profanities="OnlyIfNotTranslated" z-index="2"/>
	<label id="label-match-status" size="{{{Size_RoundMatchesStatus.X}}} {{{Size_RoundMatchesStatus.Y}}}" pos="{{{Pos_RoundMatchesStatus.X}}} {{{Pos_RoundMatchesStatus.Y}}}" textcolor="FFF" opacity="0.6" class="text-regular" textsize="3" z-index="2"/>
	<label id="label-match-ranking" text="{{{Text_SeeRanking}}}" size="{{{Size_FullRankingName.X}}} {{{Size_FullRankingName.Y}}}" pos="{{{Pos_FullRankingName.X}}} {{{Pos_FullRankingName.Y}}}" textcolor="FFF" opacity="0.6" class="text-extrabold" textsize="3" z-index="2"/>
	<quad id="quad-arrow" size="{{{Size_ArrowFullRanking.X}}} {{{Size_ArrowFullRanking.Y}}}" colorize="FFF" image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}" pos="{{{Pos_ArrowFullRanking.X}}} {{{Pos_ArrowFullRanking.Y}}}" opacity="0.6" z-index="2"/>
</framemodel>
<framemodel id="framemodel-ranking">
	<quad id="quad-ranking" size="{{{Size_Ranking.X}}} {{{Size_Ranking.Y + 0.75}}}" scriptevents="1" image="{{{Const::C_ImageUrl_LocalNetwork_LineServer}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity=".3" class="{{{Scroll::C_Class_ActivationZone}}}" />
	<quad id="quad-flag" pincorners="<-0.75,1.>:<1.,1.>:<0.75,-1.>:<-1.,-1.>" halign="center" valign="center" size="{{{Size_Flag.X}}} {{{Size_Flag.Y}}}" pos="{{{Pos_RankingFlag.X}}} {{{Pos_RankingFlag.Y}}}" opacity="0.6" z-index="2" />
	<label id="label-rank" halign="center" size="{{{Size_RankingNumber.X}}} {{{Size_RankingNumber.Y}}}" class="text-extrabold" pos="{{{Pos_RankingNumber.X}}} {{{Pos_RankingNumber.Y}}}" textsize="3" textcolor="FFF" opacity="0.6" z-index="2"/>
	<label id="label-name" halign="left" size="{{{Size_RankingName.X}}} {{{Size_RankingName.Y}}}" class="text-extrabold" pos="{{{Pos_RankingName.X}}} {{{Pos_RankingName.Y}}}" textcolor="FFF" opacity="0.6" textsize="3." z-index="2"/>
	<label id="label-score" halign="right" size="{{{Size_RankingScore.X}}} {{{Size_RankingScore.Y}}}" class="text-regular" pos="{{{Pos_RankingScore.X}}} {{{Pos_RankingScore.Y}}}" opacity="0.6" textsize="3." textcolor="{{{ColorPalette::C_Color_GreenOne}}}" z-index="2"/>
</framemodel>
<framemodel id="framemodel-ranking-player">
	<quad id="quad-ranking" size="{{{Size_Ranking.X}}} {{{Size_Ranking.Y + 0.75}}}" image="{{{Const::C_ImageUrl_LocalNetwork_LineServer}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6"/>
	<quad id="quad-flag" pincorners="<-0.75,1.>:<1.,1.>:<0.75,-1.>:<-1.,-1.>" halign="center" valign="center" size="{{{Size_Flag.X}}} {{{Size_Flag.Y}}}" pos="{{{Pos_RankingFlag.X}}} {{{Pos_RankingFlag.Y}}}" opacity="1." z-index="2" />
	<label id="label-rank" halign="center" size="{{{Size_RankingNumber.X}}} {{{Size_RankingNumber.Y}}}" class="text-extrabold" pos="{{{Pos_RankingNumber.X}}} {{{Pos_RankingNumber.Y}}}" textsize="3" textcolor="FFF" opacity="1." z-index="2"/>
	<label id="label-name" halign="left" size="{{{Size_RankingName.X}}} {{{Size_RankingName.Y}}}" class="text-extrabold" pos="{{{Pos_RankingName.X}}} {{{Pos_RankingName.Y}}}" textcolor="FFF" opacity="1." textsize="3." z-index="2"/>
	<label id="label-score" halign="right" size="{{{Size_RankingScore.X}}} {{{Size_RankingScore.Y}}}" class="text-regular" pos="{{{Pos_RankingScore.X}}} {{{Pos_RankingScore.Y}}}" opacity="1." textsize="3." textcolor="{{{ColorPalette::C_Color_GreenOne}}}" z-index="2"/>
</framemodel>

<!-- Frame gloabal -->
<frame id="frame-global" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" data-header-gradient-visible="1" z-index="0"/>
	<frameinstance id="frame-loading-spinner" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-120., 20., 10.)}}}" data-label="{{{Text_Retrieving}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" scale="0.6" z-index="2"/>	
	<frame id="frame-profile" hidden="1" z-index="10">
		<frameinstance modelid="{{{ProfilePlayerInfo::C_Name}}}" data-enable-players-pager="0" data-enable-zone-selection="0" data-enable-my-access-info="0"/>
	</frame>

	<!-- Pop-up header -->
	<frame id="frame-header">
		<quad id="quad-event-logo" size="{{{MLHelpers::MLKeepRatioFromY(608., 272., 35.)}}}" pos="110 52" valign="center" halign="center" keepratio="fit" />
		<frame id="frame-registration-infos" pos="{{{MLHelpers::Skew(-125., 31.5, 10.)}}}">
			<label id="label-registration-title" size="60 25" class="text-extrabold" text="{{{Text_Registration}}}" textsize="4" halign="left" />
			<label id="label-registration" size="130 25" class="text-extrabold" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" textsize="4" halign="left" />
		</frame>
		<frameinstance 
			id="button-event-name" pos="{{{MLHelpers::Skew(-125.5, 61.5, 10.)}}}" z-index="2"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-styles="{{{ExpendableButton::C_Style_NoBackground}}}"
			data-icon-size="13 13"
			data-icon-align="{{{ExpendableButton::C_IconAlign_TextRight}}}"
			data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
			data-icon-color-unfocused="{{{ColorPalette::C_Color_White}}}"
			data-icon-color-focused="{{{ColorPalette::C_Color_GreenOne}}}"
			data-text-textcolor-unfocused="{{{ColorPalette::C_Color_White}}}"
			data-text-textcolor-focused="{{{ColorPalette::C_Color_GreenOne}}}"
			data-text-textsize="13"
			data-valign="center" data-halign="left"
			data-nav-inputs="select;cancel;action2;down"
			data-nav-targets="_;_;button-refresh;button-club"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			data-nav-locked="{{{Platform::IsFromFirstParty(System)}}}"
			data-filter-profanities="{{{Tools::C_FilterProfanities_Always}}}"
		/>
		<frameinstance 
			id="button-club" pos="{{{MLHelpers::Skew(-125.5, 53., 10.)}}}" z-index="2"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-styles="{{{ExpendableButton::C_Style_NoBackground}}}"
			data-icon-image="{{{Const::C_ImageUrl_Icon_Link}}}"
			data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
			data-icon-color-unfocused="{{{ColorPalette::C_Color_White}}}"
			data-icon-color-focused="{{{ColorPalette::C_Color_GreenOne}}}"
			data-text-textcolor-unfocused="{{{ColorPalette::C_Color_White}}}"
			data-text-textcolor-focused="{{{ColorPalette::C_Color_GreenOne}}}"
			data-valign="center" data-halign="left"
			data-nav-inputs="select;cancel;action2;up;down"
			data-nav-targets="_;_;button-refresh;button-event-name;checkbox-rules"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			data-nav-locked="1"
			data-filter-profanities="{{{Tools::C_FilterProfanities_Always}}}"
			hidden="1"
		/>
	</frame>

	<!-- Pop-up body -->
	<label id="label-info-ranking" pos="{{{MLHelpers::Skew(-124.5, 19., 10.)}}}" size="200 1" class="text-semibold" textsize="2.5" halign="left" z-index="3" hidden="1"/>
	<label id="label-info-competition" pos="{{{MLHelpers::Skew(-124.5, -1., 10.)}}}" size="200 1" class="text-semibold" textsize="2.5" halign="left" z-index="3" hidden="1"/>
	<label id="label-error" pos="{{{MLHelpers::Skew(0., -58., 10.)}}}" textcolor="{{{ColorPalette::C_Color_Red}}}" class="text-semibold" size="240 10" textsize="2.5"/>
	<label id="label-registered" pos="{{{MLHelpers::Skew(0., -5., 10.)}}}" text="{{{Text_Registered}}}" textfont="{{{FontManager::C_GameFontExtraBold}}}" size="200 10" halign="center" class="text-semibold" textprefix="$t$i" italicslope="0.2" textsize="8" textcolor="fff"/>
	<frameinstance id="button-icon-refresh" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(127.5, -0.5, 10.)}}}" data-halign="left" data-size="8 8" data-bind="Action2" data-hideformouse="1" />
	<frameinstance
		id="button-refresh" pos="{{{MLHelpers::Skew(127.5, -0.5, 10.)}}}"
		modelid="{{{Button::C_Name}}}"
		class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}}"
		data-size="10.5 10.5"
		data-opacityunfocus=".5"
		data-bgcolor="FFF"
		data-focuscolor="FFF"
		data-labelsize="30"
		data-text=""
		data-textsize="3."
		data-texthalign="right"
		data-textxpos="-0.05" data-textypos="-0.52"
		data-image="{{{Const::C_ImageUrl_Icon_Refresh}}}"
		data-imagefocus="{{{Const::C_ImageUrl_Icon_Refresh}}}"
		data-halign="right" data-valign="center"
		data-nav-group="{{{C_NavGroup_MouseOnly}}}"
		data-nav-inputs="select;cancel;action2"
		data-nav-targets="_;_;_"
		data-nav-zone="{{{Button::C_NavZone}}}"
		data-menusounds-selectsound="ArrowSelect"
		data-nav-locked="1"
		hidden="1"
	/>

	<!-- Frame event information -->
	<frame id="frame-event-info">
		<label id="label-information" pos="{{{MLHelpers::Skew(-124.5, -1., 10.)}}}" size="200 1" class="text-semibold" textsize="2.5" halign="left" z-index="3" hidden="1"/>
		<label id="label-event-desc" pos="{{{MLHelpers::Skew(-123.5, 22., 10.)}}}" size="246 15" class="text-semibold" textsize="1.5" halign="left" valign="top" autonewline="1" maxline="5" filter-profanities="OnlyIfNotTranslated" z-index="3"/>
		<frameinstance id="frame-desc-bg" modelid="{{{ExpendableAsset::C_Name}}}" pos="{{{MLHelpers::Skew(-127.6, 23.5, 10.)}}}" data-width="253.6" data-height="18.5" data-color="{{{ColorPalette::C_Color_DarkBlue}}}" data-opacity="0.3" data-halign="left" data-valign="top" z-index="0"/>
		<frameinstance id="frame-navigation-tabs" modelid="{{{NavigationTabs::C_Name}}}" pos="{{{MLHelpers::Skew(-125.3, -10., 10.)}}}" data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}" data-halign="left" z-index="1"/>
		<frameinstance
			id="checkbox-rules" pos="{{{MLHelpers::Skew(-126., -1., 10.)}}}"
			modelid="{{{Checkbox::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-labelsize="200 10"
			data-iconsize="8 8"
			data-iconxpos="0."
			data-textxpos="0.025"
			data-texthalign="left"
			data-textsize="2.5"
			data-textitalicslope=".2"
			data-textfont="{{{FontManager::C_GameFontSemiBold}}}"
			data-iconcolor="{{{ColorPalette::C_Color_White}}}"
			data-opacityunfocus="0.5"
			data-iconchecked="{{{Const::C_ImageUrl_Icon_Checkbox_Active_Square}}}"
			data-iconunchecked="{{{Const::C_ImageUrl_Icon_Checkbox_Inactive_Square}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;cancel;action2;down;up"
			data-nav-targets="_;_;button-refresh;scroll-steps-list;button-club"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Checkbox::C_NavZone}}}"
		/>
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-steps-list" z-index="1" />
		<frame 
			id="scroll-steps-list" pos="-129.3 -15.5"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			data-elements-per-line="{{{StepsColumnsNb}}}"
			data-elements-per-page="{{{StepsPerPage}}}"
			data-element-size="{{{Size_Steps.X}}} {{{Size_Steps.Y}}}"
			data-margin-size="{{{Size_StepsMargin.X}}} {{{Size_StepsMargin.Y}}}"
			data-window-size="{{{Size_StepsScrollWindow.X}}} {{{Size_StepsScrollWindow.Y}}}"
			data-header-height="{{{Size_StepsHeader.Y}}}"
			data-footer-height="{{{Size_StepsFooter.Y}}}"
			data-scroll-indicator="1"
			data-scroll-indicator-y-offset="-10"
			data-scroll-indicator-x-offset="-10"
			data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-size="11"
			data-scroll-indicator-colorize="FFFFFF"
			data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_Never}}}"
			data-skew="-10"
			data-skew-valign="{{{Scroll::C_SkewVAlign_Top}}}"
			data-scrollpadding="15"
			data-nav-inputs="select;cancel;action2;up;down"
			data-nav-targets="_;_;button-refresh;checkbox-rules;button-back"
			data-nav-group="{{{C_NavGroupName}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_StepsList}}}
		</frame>
	</frame>

	<!-- Frame qualification information -->
	<frame id="frame-qualifications-info" hidden="1">
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-server-list" z-index="1" />
		<frame
			id="scroll-server-list" pos="-124. 15"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			data-elements-per-line="{{{ServerColumnsNb}}}"
			data-elements-per-page="{{{ServersPerPage}}}"
			data-element-size="{{{Size_Server.X}}} {{{Size_Server.Y}}}"
			data-margin-size="{{{Size_ServersMargin.X}}} {{{Size_ServersMargin.Y}}}"
			data-window-size="{{{Size_ServersScrollWindow.X}}} {{{Size_ServersScrollWindow.Y}}}"
			data-header-height="{{{Size_Header.Y}}}"
			data-footer-height="{{{Size_Footer.Y}}}"
			data-scroll-indicator="1"
			data-scroll-indicator-y-offset="-10"
			data-scroll-indicator-x-offset="-10"
			data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-size="11"
			data-scroll-indicator-colorize="FFFFFF"
			data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_Never}}}"
			data-skew="-10"
			data-skew-valign="{{{Scroll::C_SkewVAlign_Top}}}"
			data-scrollpadding="15"
			data-nav-inputs="select;cancel;down;up"
			data-nav-targets="_;_;button-back;button-club"
			data-nav-group="{{{C_NavGroupName}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_ServerList}}}
		</frame>

		<frameinstance
			id="button-ranking" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_Ranking}}}"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageNext}}}"
			data-halign="right" data-valign="center"
			data-nav-inputs="left;up;select;cancel;"
			data-nav-targets="button-back;scroll-server-list;_;_;"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>

	<!-- Frame rankings -->
	<frame id="frame-ranking" hidden="1">
		<frame id="frame-ranking-infos" pos="{{{MLHelpers::Skew(-125., 31.5, 10.)}}}">
			<label id="label-ranking-players" class="text-extrabold" size="50 10" text="{{{Text_Ranking}}}" halign="left" textsize="4"/>
			<label id="label-ranking-players-nb" class="text-extrabold" size="40 10" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" halign="left" textsize="4"/>
		</frame>
		<frameinstance modelid="framemodel-ranking-player" id="frameinstance-player-ranking" pos="-135.2 {{{-Size_RankingsScrollWindow.Y/2.-13}}}" hidden="1"/>
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-ranking" z-index="1" />
		<frame
			id="scroll-ranking" pos="-122.1 25"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			data-elements-per-line="{{{RankingColumnsNb}}}"
			data-elements-per-page="{{{RankingsPerPage}}}"
			data-element-size="{{{Size_Ranking.X}}} {{{Size_Ranking.Y}}}"
			data-margin-size="{{{Size_RankingsMargin.X}}} {{{Size_RankingsMargin.Y}}}"
			data-window-size="{{{Size_RankingsScrollWindow.X}}} {{{Size_RankingsScrollWindow.Y}}}"
			data-header-height="{{{Size_Header.Y}}}"
			data-footer-height="{{{Size_Footer.Y}}}"
			data-scroll-indicator="1"
			data-scroll-indicator-y-offset="-20"
			data-scroll-indicator-x-offset="-10"
			data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-size="11"
			data-scroll-indicator-colorize="FFFFFF"
			data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_DuringScroll}}}"
			data-scrollbar-xoffset="0.5"
			data-skew="-10"
			data-skew-valign="{{{Scroll::C_SkewVAlign_Top}}}"
			data-scrollpadding="15"
			data-nav-inputs="select;cancel;down;up"
			data-nav-targets="_;_;button-back;button-club"
			data-nav-group="{{{C_NavGroupName}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_RankingList}}}
		</frame>
	</frame>

	<!-- Frame current match -->
	<frame id="frame-current-match" hidden="1">
		<label id="label-title-my-matchs" text="{{{Text_Matches}}}" pos="{{{MLHelpers::Skew(-125., 31.5, 10.)}}}" class="text-extrabold" size="160 10" halign="left" textsize="4" textprefix="$t$i"/>
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-matches-list" z-index="1" />
		<frame
			id="scroll-matches-list" pos="-122.1 25"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			data-elements-per-line="{{{MatchesColumnsNb}}}"
			data-elements-per-page="{{{MatchesPerPage}}}"
			data-element-size="{{{Size_Matches.X}}} {{{Size_Matches.Y}}}"
			data-margin-size="{{{Size_MatchesMargin.X}}} {{{Size_MatchesMargin.Y}}}"
			data-window-size="{{{Size_MatchesScrollWindow.X}}} {{{Size_MatchesScrollWindow.Y}}}"
			data-header-height="{{{Size_MatchesHeader.Y}}}"
			data-footer-height="{{{Size_MatchesFooter.Y}}}"
			data-scroll-indicator="1"
			data-scroll-indicator-y-offset="-20"
			data-scroll-indicator-x-offset="-10"
			data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-size="11"
			data-scroll-indicator-colorize="FFFFFF"
			data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_DuringScroll}}}"
			data-scrollbar-xoffset="0.5"
			data-skew="-10"
			data-skew-valign="{{{Scroll::C_SkewVAlign_Top}}}"
			data-scrollpadding="15"
			data-nav-inputs="select;cancel;down;up"
			data-nav-targets="_;_;button-back;button-club"
			data-nav-group="{{{C_NavGroupName}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_MatchesList}}}
		</frame>
	</frame>

	<!-- Frame round matches -->
	<frame id="frame-round-matches" hidden="1">
		<frame id="frame-round-infos" pos="{{{MLHelpers::Skew(-125., 31.5, 10.)}}}">
			<label id="label-round-result" class="text-extrabold" size="50 10" text="{{{Text_RoundResults}}}" halign="left" textsize="4"/>
			<label id="label-round-name" class="text-extrabold" size="50 10" textcolor="{{{ColorPalette::C_Color_GreenOne}}}" halign="left" textsize="4"/>
		</frame>
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-round-matches-list" z-index="1" />
		<frame
			id="scroll-round-matches-list" pos="-122.1 25"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			data-elements-per-line="{{{RoundMatchesColumnsNb}}}"
			data-elements-per-page="{{{RoundMatchesPerPage}}}"
			data-element-size="{{{Size_RoundMatches.X}}} {{{Size_RoundMatches.Y}}}"
			data-margin-size="{{{Size_RoundMatchesMargin.X}}} {{{Size_RoundMatchesMargin.Y}}}"
			data-window-size="{{{Size_RoundMatchesScrollWindow.X}}} {{{Size_RoundMatchesScrollWindow.Y}}}"
			data-header-height="{{{Size_RoundMatchesHeader.Y}}}"
			data-footer-height="{{{Size_RoundMatchesFooter.Y}}}"
			data-scroll-indicator="1"
			data-scroll-indicator-y-offset="-20"
			data-scroll-indicator-x-offset="-10"
			data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-size="11"
			data-scroll-indicator-colorize="FFFFFF"
			data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_DuringScroll}}}"
			data-scrollbar-xoffset="0.5"
			data-skew="-10"
			data-skew-valign="{{{Scroll::C_SkewVAlign_Top}}}"
			data-scrollpadding="15"
			data-nav-inputs="select;cancel;down;up"
			data-nav-targets="_;_;button-back;button-club"
			data-nav-group="{{{C_NavGroupName}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_RoundMatchesList}}}
		</frame>
	</frame>

	<!-- Pop-up footer -->
	<frameinstance id="button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
	<frameinstance
		id="button-back" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-max-width="60."
		data-text="{{{Text_Back}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-halign="left" data-valign="center"
		data-nav-inputs="right;select;cancel;action2;up"
		data-nav-targets="button-ranking-competition;_;_;button-refresh;scroll-steps-list"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance
		id="button-my-matches" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_MyMatchs}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageNextAnimated}}}"
		data-halign="right" data-valign="center"
		data-nav-inputs="left;select;cancel;action2;up"
		data-nav-targets="button-ranking-competition;_;_;button-refresh;scroll-steps-list"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance
		id="button-qualify" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_Qualify}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageNextAnimated}}}"
		data-halign="right" data-valign="center"
		data-nav-inputs="left;select;cancel;action2;up"
		data-nav-targets="button-ranking-competition;_;_;button-refresh;scroll-steps-list"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance
		id="button-register" pos="{{{MLHelpers::Skew(127., -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_Register}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageNext}}}"
		data-halign="right" data-valign="center"
		data-nav-inputs="left;right;select;cancel;action2;up"
		data-nav-targets="button-ranking-competition;button-my-matches;_;_;button-refresh;scroll-steps-list"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
	<frameinstance
		id="button-ranking-competition" pos="{{{MLHelpers::Skew(0., -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_LeaderBoard}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
		data-halign="center" data-valign="center"
		data-nav-inputs="left;up;right;select;cancel;action2"
		data-nav-targets="button-back;scroll-steps-list;button-qualify;_;_;button-refresh"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		data-nav-locked="1"
	/>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "TimeLib" as TimeLib
#Include "MathLib" as ML
#Include "ColorLib" as CL
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CommonLibs/Common/Privileges.Script.txt" as Privileges
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/TMNext/TrackMania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/TMNext/TrackMania/API/CompetitionAPI.Script.txt" as CompetitionAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ReportSystem.Script.txt" as ReportSystem
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ReportStruct.Script.txt" as ReportStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config

#Const C_RankingsPerPage {{{dump(RankingsPerPage)}}}
#Const C_DelayBetweenRequest 500
#Const C_DelaytoJoinServer 900
#Const C_DelayToRefresh 60
#Const C_AppErrorCode_NotAllowedZone {{{dump(C_AppErrorCode_NotAllowedZone)}}}
#Const C_AppErrorCode_ClubAccess "CLUB_ACCESS_REQUIRED"

#Const C_TabIndex_PreviousSteps {{{dump(C_TabIndex_PreviousSteps)}}}
#Const C_TabIndex_RemainingSteps {{{dump(C_TabIndex_RemainingSteps)}}}
#Const C_TabNames {{{dump(C_TabNames)}}}

//Index of step
#Const C_IndexStep_Error -1
#Const C_IndexStep_Info 0
#Const C_IndexStep_Qualify 1
#Const C_IndexStep_QualifyRanking 2
#Const C_IndexStep_Matches 3
#Const C_IndexStep_CompetitionRanking 4
#Const C_IndexStep_Register 5
#Const C_IndexStep_PastRound 6
#Const C_IndexStep_MatchResults 7

#Const C_Status_RoundCompleted "COMPLETED"
#Const C_Type_CompetitionManual "MANUAL"
#Const C_Type_CompetitionDefault "DEFAULT"
#Const C_Type_CompetitionExternal "EXTERNAL"

#Const C_List_Round_Default [
	_("Final"),
	_("Semi-final"),
	_("Quarter-final"),
	_("8th final"),
	_("16th final")
]

#Struct K_Controls {
	CMlFrame ButtonIcon_Refresh;
	CMlFrame Button_Back;
	CMlFrame Button_Club;
	CMlFrame Button_EventName;
	CMlFrame Button_Leaderboard;
	CMlFrame Button_MyMatches;
	CMlFrame Button_Qualify;
	CMlFrame Button_Ranking;
	CMlFrame Button_Refresh;
	CMlFrame Button_Register;
	CMlFrame Checkbox_Rules;
	CMlFrame Frame_EventInfo;
	CMlFrame Frame_Global;
	CMlFrame Frame_LoadingSpinner;
	CMlFrame Frame_Matches;
	CMlFrame Frame_NavigationTabs;
	CMlFrame Frame_PlayerRank;
	CMlFrame Frame_Profile;
	CMlFrame Frame_QualificationInfo;
	CMlFrame Frame_Ranking;
	CMlFrame Frame_RegistrationInfos;
	CMlFrame Frame_Round;
	CMlFrame Scroll_Ranking;
	CMlFrame Scroll_RoundMatches;
	CMlFrame Scroll_ServerList;
	CMlFrame Scroll_Steps;
	CMlLabel Label_Error;
	CMlLabel Label_EventDesc;
	CMlLabel Label_InfoRanking;
	CMlLabel Label_InfoStateCompetition;
	CMlLabel Label_Information;
	CMlLabel Label_Ranking;
	CMlLabel Label_RankingNb;
	CMlLabel Label_Refresh;
	CMlLabel Label_Registered;
	CMlQuad	Quad_EventLogo;
	CMlQuad Quad_Refresh;
}

#Struct K_PagerResults {
	{{{CompetitionStruct::P}}}K_ParticipantResult[Integer] Results; //< Key is the position in the list
	Integer Total;
	Integer Offset;
	Integer CurrentPage;
	Boolean NeedUpdate;
	Integer NextPageLoadTime;
	Ident TaskId_GetDisplayName;
}

#Struct K_Controls_MyMatchs {
	CMlFrame Scroll_ListMatchs;
	Boolean Display;
	Http::K_Request RequestGetCurrentMatch;
	{{{CompetitionStruct::P}}}K_PlayerNextMatch[] EventMatches; //< Array of all player's matches
}

#Struct K_Round {
	Text Name;
	Text Start;
	Text End;
	Integer RoundId;
	Integer QualifierId;
	Boolean IsQualifierCompleted;
	Text Status;
	Integer NbMatches;
}

#Struct K_PagerRoundMatches {
	{{{CompetitionStruct::P}}}K_Match[Integer] Matches; //< Key is the position in the list
	Integer Total;
	Integer Offset;
	Integer CurrentPage;
	Boolean NeedUpdate;
	Integer NextPageLoadTime;
}

#Struct K_PlayPrivilegeCheck {
	Privileges::K_PrivilegeCheck PrivilegeCheck;
	Text JoinLink;
}

#Struct K_State {
	Http::K_Request GetEventDetailsRequest;
	Http::K_Request GetChallengeDetailsRequest;
	Http::K_Request GetParticipantChallengeDetailsRequest;
	Http::K_Request GetParticipantLeaderboardRequest;
	Http::K_Request GetClubDetailsRequest;
	Http::K_Request RegisterRequest;
	Http::K_Request GetLeaderBoardRequest;
	Http::K_Request GetRoundMatchesRequest;
	Http::K_Request GetMatchResultsRequest;
	Http::K_Request GetParticipantMatchResultsRequest;
	Http::K_Request GetClubMemberRequest;

	{{{ClubStruct::P}}}K_Club Club;
	{{{ClubStruct::P}}}K_Member Member;
	{{{CompetitionStruct::P}}}K_ClubCompetition EventDetails;
	{{{CompetitionStruct::P}}}K_ChallengeResults ChallengeDetails;
	{{{CompetitionStruct::P}}}K_ChallengeResults ParticipantChallengeDetails;
	{{{CompetitionStruct::P}}}K_ParticipantLeaderboardResults ParticipantLeaderBoard;
	{{{CompetitionStruct::P}}}K_ParticipantResult[] LeaderBoard;
	{{{CompetitionStruct::P}}}K_ParticipantResult[] MatchResults;
	{{{CompetitionStruct::P}}}K_MatchResults[] ParticipantMatchesResults;

	Integer ActivityId;
	Text ActivityName;
	Text MatchResultsScoreUnit;
	Boolean HasRules;
	Boolean RulesAccepted;
	K_Round[] PreviousSteps;
	K_Round[] NextSteps;
	Integer CurrentTypeScrollSteps;

	Integer IndexCurrentStep;
	Integer PastQualifierId;
	Boolean IsPastQualifier;
	Text PastRoundName;
	Integer PastRoundId;
	Integer PastRoundNbMatches;
	Integer PastMatchId;
	Boolean NeedToRefresh;
	Integer RefreshTime;
	Text QualifTime;
	Text RoundTime;
	Integer NbRankedPlayers;

	K_PagerResults RankingsPager;
	K_PagerResults LeaderBoardPager;
	K_PagerResults MatchResultsPager;
	K_PagerRoundMatches RoundMatchesPager;
	K_Controls Controls;
	K_Controls_MyMatchs MyMatchs;
	K_PlayPrivilegeCheck PlayPrivilegeCheck;
	ReportStruct::LibStructuresReport_K_ReportData[Integer] CurrentReportData;
}

""",
"""
Text GetErrorMessage(Text _AppCode, K_State _State) {
	switch (_AppCode) {
		case C_AppErrorCode_NotAllowedZone : {
			//L16N [Event details] The registration for the event failed. Player's Current Zone is not allowed.
			return _("The registration failed, your current zone is not allowed");
		}
		case C_AppErrorCode_ClubAccess : {
			//L16N Registration Failed. Player must have a club access to register at this competiition.
			return _("Club access required to register for this competition");
		}
	}
	//L16N [Event details] Message to inform player of an unknow error. %1 is a http error code. %2 is the App_Code, can be empty.
	return TL::Compose(_("The registration failed, please try again (Error code: %1 %2)"), ""^Http::GetStatusCode(_State.RegisterRequest), _AppCode);
}

Void LockScroll(CMlFrame _Scroll, Boolean _IsLocked) {
	declare Boolean IsElementsVisible = {{{Scroll::P}}}GetElementsTotal(_Scroll) > 0;
	{{{Scroll::P}}}LockNavigation(_Scroll, _IsLocked || !IsElementsVisible);
	{{{Navigation::P}}}Lock(_Scroll, _IsLocked || !IsElementsVisible);
	{{{Navigation::P}}}EnableInputs(_Scroll, _IsLocked || !IsElementsVisible);
}

Text GetRoundNameDefault(Integer _RoundPosition, Integer _RoundsCount) {
	switch (_RoundPosition) {
		case _RoundsCount - 1: {
			return C_List_Round_Default[0];
		}
		case _RoundsCount - 2: {
			return C_List_Round_Default[1];
		}
		case _RoundsCount - 3: {
			return C_List_Round_Default[2];
		}
		case _RoundsCount - 4: {
			return C_List_Round_Default[3];
		}
		case _RoundsCount - 5: {
			return C_List_Round_Default[4];
		}
	}
	return "";
}

CMlFrame GetCurrentScroll(K_State _State) {
	switch (_State.IndexCurrentStep) {
		case C_IndexStep_Info: return _State.Controls.Scroll_Steps;
		case C_IndexStep_Matches: return _State.MyMatchs.Scroll_ListMatchs;
		case C_IndexStep_QualifyRanking: return _State.Controls.Scroll_Ranking;
		case C_IndexStep_MatchResults: return _State.Controls.Scroll_Ranking;
		case C_IndexStep_CompetitionRanking: return _State.Controls.Scroll_Ranking;
		case C_IndexStep_PastRound: return _State.Controls.Scroll_RoundMatches;
		case C_IndexStep_Qualify: return _State.Controls.Scroll_ServerList;
	}

	return Null;
}

// Update controller hints at the bottom of the screen
Void UpdateControllerInfo() {
	declare Text[Text] ControllerInfos = ["A" => _("Select"), "B" => _("Back"), "{{{Const::C_NavInput_ReportSystem}}}" => "{{{Const::C_Text_Report}}}"];
	ControllerInfo::SetButtons(ControllerInfos);
}

Void LockPage(K_State _State, Boolean _Lock) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroupName}}}", !_Lock);
	{{{NavigationTabs::P}}}LockTabs(This, _State.Controls.Frame_NavigationTabs, _Lock);
	LockScroll(_State.Controls.Scroll_Steps, _Lock && _State.IndexCurrentStep == C_IndexStep_Info);
	LockScroll(_State.MyMatchs.Scroll_ListMatchs, _Lock && _State.IndexCurrentStep == C_IndexStep_Matches);
	LockScroll(_State.Controls.Scroll_RoundMatches, _Lock && _State.IndexCurrentStep == C_IndexStep_PastRound);
	LockScroll(_State.Controls.Scroll_ServerList, _Lock && _State.IndexCurrentStep == C_IndexStep_Qualify);
	LockScroll(_State.Controls.Scroll_Ranking, _Lock && (_State.IndexCurrentStep == C_IndexStep_QualifyRanking || _State.IndexCurrentStep == C_IndexStep_MatchResults || _State.IndexCurrentStep == C_IndexStep_CompetitionRanking));
}

// Display the player's profile associated to the given account id
K_State DisplayProfile(K_State _State, Text _AccountId, Boolean _Display) {
	if (_Display && _AccountId == "") return _State;
	declare K_State State = _State;

	State.Controls.Frame_Profile.Visible = _Display;
	LockPage(State, _Display);
	if (_Display) {
		State.CurrentReportData = ReportSystem::GetDataList();
		{{{ProfilePlayerInfo::P}}}SetUserAccountId(_AccountId);
		{{{ProfilePlayerInfo::P}}}Enable(True);
		{{{ProfilePlayerInfo::P}}}EnableGarageButton(False);
	} else {
		{{{ProfilePlayerInfo::P}}}Enable(False);
		if (PageIsVisible) {
			ReportSystem::AddUsingId("{{{C_Name}}}");
			ReportSystem::SetDataList(State.CurrentReportData);
		}
		UpdateControllerInfo();
	}
	return State;
}

Void FocusStep(CMlFrame _FrameStep, Boolean _IsFocused) {
	declare Real BackGroundOpacity = 0.3;
	declare Real ContentOpacity = 0.6;
	if (_IsFocused) {
		BackGroundOpacity = 0.8;
		ContentOpacity = 1.;
	}
	(_FrameStep.GetFirstChild("label-step-name") as CMlLabel).Opacity = ContentOpacity;
	(_FrameStep.GetFirstChild("label-step-dates") as CMlLabel).Opacity = ContentOpacity;
	(_FrameStep.GetFirstChild("label-step-results") as CMlLabel).Opacity = ContentOpacity;
	(_FrameStep.GetFirstChild("quad-step") as CMlQuad).Opacity = BackGroundOpacity;
	(_FrameStep.GetFirstChild("quad-arrow") as CMlQuad).Opacity = ContentOpacity;
}

Void ShowStep(CMlFrame _FrameStep, Text _Name, Text _Dates, Boolean _ResultsAccessibles) {
	_FrameStep.Show();

	(_FrameStep.GetFirstChild("label-step-name") as CMlLabel).Value = _Name;
	(_FrameStep.GetFirstChild("label-step-dates") as CMlLabel).Value = _Dates;
	(_FrameStep.GetFirstChild("label-step-dates") as CMlLabel).Visible = !_ResultsAccessibles;
	(_FrameStep.GetFirstChild("label-step-results") as CMlLabel).Visible = _ResultsAccessibles;
	(_FrameStep.GetFirstChild("quad-arrow") as CMlQuad).Visible = _ResultsAccessibles;
}

Void HideStep(CMlFrame _FrameStep) {
	_FrameStep.Hide();
}

Void FocusServer(CMlFrame _Frame_Server, Boolean _IsFocused) {
	declare Real QuadOpacity = 0.3;
	declare Real LabelOpacity = 0.6;
	if (_IsFocused) {
		QuadOpacity = 0.8;
		LabelOpacity = 1.;
	}
	(_Frame_Server.GetFirstChild("label-server-name") as CMlLabel).Opacity = LabelOpacity;
	(_Frame_Server.GetFirstChild("quad-server") as CMlQuad).Opacity = QuadOpacity;
}

Void ShowServer(CMlFrame _Frame_Server, Integer _ServerNumber) {
	_Frame_Server.Show();
	(_Frame_Server.GetFirstChild("label-server-name") as CMlLabel).Value = TL::Compose("{{{Text_ServerName}}}", TL::ToText(_ServerNumber));
}

Void HideServer(CMlFrame _Frame_Server) {
	_Frame_Server.Hide();
}

Void FocusRanking(CMlFrame _Frame_Ranking, Boolean _IsFocused) {
	declare Real QuadOpacity = 0.3;
	declare Real LabelOpacity = 0.6;
	if (_IsFocused) {
		QuadOpacity = 0.8;
		LabelOpacity = 1.;
	}
	(_Frame_Ranking.GetFirstChild("label-name") as CMlLabel).Opacity = LabelOpacity;
	(_Frame_Ranking.GetFirstChild("label-rank") as CMlLabel).Opacity = LabelOpacity;
	(_Frame_Ranking.GetFirstChild("label-score") as CMlLabel).Opacity = LabelOpacity;
	(_Frame_Ranking.GetFirstChild("quad-flag") as CMlQuad).Opacity = LabelOpacity;
	(_Frame_Ranking.GetFirstChild("quad-ranking") as CMlQuad).Opacity = QuadOpacity;
}

Void ShowRanking(CMlFrame _Frame_Ranking, Text _Rank, Text _PlayerName, Text _Score, Text _Zone) {
	_Frame_Ranking.Show();
	(_Frame_Ranking.GetFirstChild("label-rank") as CMlLabel).Value = _Rank;
	declare CMlLabel Label_Name <=> (_Frame_Ranking.GetFirstChild("label-name") as CMlLabel);
	Label_Name.Value = _PlayerName;
	Tools::FitLabelValue(Label_Name, 3., 1., 0.25);
	Tools::FirstPartyLogoMatchLuminance(Label_Name);
	(_Frame_Ranking.GetFirstChild("label-score") as CMlLabel).Value = _Score;
	(_Frame_Ranking.GetFirstChild("quad-flag") as CMlQuad).ChangeImageUrl("file://ZoneFlags/Path/"^_Zone);
}

Void ShowRankingLoading(CMlFrame _Frame_Ranking, Integer _Rank) {
	_Frame_Ranking.Show();
	(_Frame_Ranking.GetFirstChild("label-rank") as CMlLabel).Value = ""^_Rank;
	declare CMlLabel Label_Name <=> (_Frame_Ranking.GetFirstChild("label-name") as CMlLabel);
	Label_Name.Value = Const::C_Text_RetrievingDataPlaceholder;
	Tools::FitLabelValue(Label_Name, 3., 1., 0.25);
	(_Frame_Ranking.GetFirstChild("label-score") as CMlLabel).Value = "-";
	(_Frame_Ranking.GetFirstChild("quad-flag") as CMlQuad).ChangeImageUrl("");
}

Void HideRanking(CMlFrame _Frame_Ranking) {
	_Frame_Ranking.Hide();
}

Void FocusMatch(CMlFrame _FrameMatch, Boolean _IsFocused) {
	declare Real BackGroundOpacity = 0.3;
	declare Real ContentOpacity = 0.6;
	if (_IsFocused) {
		BackGroundOpacity = 0.8;
		ContentOpacity = 1.;
	}
	(_FrameMatch.GetFirstChild("label-matches-name") as CMlLabel).Opacity = ContentOpacity;
	(_FrameMatch.GetFirstChild("label-matches-date") as CMlLabel).Opacity = ContentOpacity;
	(_FrameMatch.GetFirstChild("label-matches-join") as CMlLabel).Opacity = ContentOpacity;
	(_FrameMatch.GetFirstChild("quad-matches") as CMlQuad).Opacity = BackGroundOpacity;
	(_FrameMatch.GetFirstChild("quad-arrow-join") as CMlQuad).Opacity = ContentOpacity;

	declare CMlLabel Label_IconSpectator = (_FrameMatch.GetFirstChild("label-icon-spectator") as CMlLabel);
	if (Label_IconSpectator.Visible) {
		Label_IconSpectator.Opacity = ContentOpacity;
	}
}

Void ShowMatch(CMlFrame _FrameMatch, {{{CompetitionStruct::P}}}K_PlayerNextMatch _Match) {
	_FrameMatch.Show();
	(_FrameMatch.GetFirstChild("label-matches-name") as CMlLabel).Value = _Match.Name;
	(_FrameMatch.GetFirstChild("label-matches-date") as CMlLabel).Value = TimeLib::FormatDate(_Match.StartDate, TimeLib::EDateFormats::DateShort)^" "^TimeLib::FormatDate(_Match.StartDate, TimeLib::EDateFormats::TimeShort);
	declare CMlLabel LabelIconSpectator = (_FrameMatch.GetFirstChild("label-icon-spectator") as CMlLabel);
	if (_Match.IsSpectator) {
		LabelIconSpectator.Show();
	} else {
		LabelIconSpectator.Hide();
	}

	declare CMlLabel LabelMatchesJoin = _FrameMatch.GetFirstChild("label-matches-join") as CMlLabel;
	declare CMlQuad QuadArrowJoin = _FrameMatch.GetFirstChild("quad-arrow-join") as CMlQuad;
	//L16N [Event Details] Join the current Match
	LabelMatchesJoin.Value = _("Join");
	QuadArrowJoin.Show();
	if (!_Match.IsServerStarted) {
		//L16N [Event Details] Waiting until the server is started
		LabelMatchesJoin.Value = _("Pending");
		QuadArrowJoin.Hide();
	}
}

Void HideMatch(CMlFrame _FrameMatch) {
	_FrameMatch.Hide();
}

Void FocusRoundMatch(CMlFrame _FrameMatch, Boolean _IsFocused) {
	declare Real BackGroundOpacity = 0.3;
	declare Real ContentOpacity = 0.6;
	if (_IsFocused) {
		BackGroundOpacity = 0.8;
		ContentOpacity = 1.;
	}
	(_FrameMatch.GetFirstChild("label-match-name") as CMlLabel).Opacity = ContentOpacity;
	(_FrameMatch.GetFirstChild("label-match-status") as CMlLabel).Opacity = ContentOpacity;
	(_FrameMatch.GetFirstChild("label-match-ranking") as CMlLabel).Opacity = ContentOpacity;
	(_FrameMatch.GetFirstChild("quad-icon-profile") as CMlQuad).Opacity = ContentOpacity;
	(_FrameMatch.GetFirstChild("quad-match") as CMlQuad).Opacity = BackGroundOpacity;
	(_FrameMatch.GetFirstChild("quad-arrow") as CMlQuad).Opacity = ContentOpacity;
}

Void ShowRoundMatch(CMlFrame _FrameMatch, Text _Name, Boolean _IsLocalUserParticipant, Boolean _IsCompleted) {
	_FrameMatch.Show();
	declare Vec3 TextColor = <1.,1.,1.>;
	declare Text Status = "{{{Text_InProgress}}}";
	declare Text Ranking = "{{{Text_SeeCompetitors}}}";
	if (_IsCompleted) {
		Status = "{{{Text_Completed}}}";
		Ranking = "{{{Text_SeeRanking}}}";
	}
	if (_IsLocalUserParticipant) TextColor = CL::Hex6ToRgb("{{{ColorPalette::C_Color_GreenOne}}}");
	(_FrameMatch.GetFirstChild("label-match-name") as CMlLabel).TextColor = TextColor;
	(_FrameMatch.GetFirstChild("quad-arrow") as CMlQuad).Colorize = TextColor;
	(_FrameMatch.GetFirstChild("label-match-name") as CMlLabel).Value = _Name;
	(_FrameMatch.GetFirstChild("quad-icon-profile") as CMlQuad).Visible = _IsLocalUserParticipant;
	declare CMlLabel Label_MatchRanking <=> (_FrameMatch.GetFirstChild("label-match-ranking") as CMlLabel);
	Label_MatchRanking.TextColor = TextColor;
	Label_MatchRanking.Value = Ranking;
	declare CMlLabel Label_MatchStatus <=> (_FrameMatch.GetFirstChild("label-match-status") as CMlLabel);
	Label_MatchStatus.TextColor = TextColor;
	Label_MatchStatus.Value = Status;
}

Void ShowMatchLoading(CMlFrame _FrameMatch) {
	_FrameMatch.Show();
	declare Vec3 TextColor = <1.,1.,1.>;
	(_FrameMatch.GetFirstChild("label-match-name") as CMlLabel).TextColor = TextColor;
	(_FrameMatch.GetFirstChild("quad-arrow") as CMlQuad).Colorize = TextColor;
	(_FrameMatch.GetFirstChild("label-match-name") as CMlLabel).Value = Const::C_Text_RetrievingDataPlaceholder;
	(_FrameMatch.GetFirstChild("quad-icon-profile") as CMlQuad).Visible = False;
	declare CMlLabel Label_MatchRanking <=> (_FrameMatch.GetFirstChild("label-match-ranking") as CMlLabel);
	Label_MatchRanking.Value = "";
	declare CMlLabel Label_MatchStatus <=> (_FrameMatch.GetFirstChild("label-match-status") as CMlLabel);
	Label_MatchStatus.Value = "";
}

Void HideRoundMatch(CMlFrame _FrameMatch) {
	_FrameMatch.Hide();
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Checkbox::P}}}IsCheckbox(_From)) {
			{{{Checkbox::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Scroll::P}}}IsScroll(_From)) {
			{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Checkbox::P}}}IsCheckbox(_To)) {
			{{{Checkbox::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Scroll::P}}}IsScroll(_To)) {
			{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void FocusAvailableControl(K_State _State) {
	declare CMlFrame CurrentScroll = GetCurrentScroll(_State);

	if (CurrentScroll != Null && {{{Scroll::P}}}GetElementsTotal(CurrentScroll) > 0 && !{{{Navigation::P}}}IsLocked(CurrentScroll)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), CurrentScroll);
	} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_Back)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _State.Controls.Button_Back);
	} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_EventName)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _State.Controls.Button_EventName);
	} else if (!{{{Navigation::P}}}IsLocked(_State.Controls.Button_Club)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), _State.Controls.Button_Club);
	}
}

Boolean SetRulesButton(CMlQuad _Button, Boolean _IsAccepted) {
	declare Boolean IsAccepted for _Button = False;
	IsAccepted = _IsAccepted;

	if (IsAccepted) {
		_Button.ChangeImageUrl("{{{Const::C_ImageUrl_Icon_Checkbox_Active_Square}}}");
	} else {
		_Button.ChangeImageUrl("{{{Const::C_ImageUrl_Icon_Checkbox_Inactive_Square}}}");
	}
	return IsAccepted;
}

Boolean SwitchRulesButton(CMlQuad _Button) {
	declare Boolean IsAccepted for _Button = False;
	return SetRulesButton (_Button, !IsAccepted);
}

Void UpdateEventNameButton(K_State _State) {
	declare Text ImageUrl_EditIcon = "";

	if (
		Platform::IsPC(System) && 
		RBAC::HasClubPermission(_State.Member, RBAC::C_ClubPermission_Administration) && 
		_State.Member.AccountId != {{{ClubStruct::P}}}C_AccountNullId && 
		Config::Get().WebsiteAdminClubUrl != ""
	) {
		ImageUrl_EditIcon = "{{{Const::C_ImageUrl_Icon_Edit}}}";
	}

	{{{ExpendableButton::P}}}SetIconImageUrl(This, _State.Controls.Button_EventName, ImageUrl_EditIcon);
	{{{Navigation::P}}}Lock(_State.Controls.Button_EventName, ImageUrl_EditIcon == "");
}

K_State SetCurrentStep(K_State _State, Integer _CurrentStep) {
	declare K_State State = _State;
	declare Text RightTarget_ButtonBack;
	declare Text DownTarget_ButtonClub;
	declare Text Leaderboard_RightTargetId;

	// Reset timers
	State.QualifTime = "";
	State.RoundTime = "";

	// Reset controls
	State.Controls.Frame_EventInfo.Hide();
	State.Controls.Frame_Matches.Hide();
	State.Controls.Frame_QualificationInfo.Hide();
	State.Controls.Frame_Ranking.Hide();
	State.Controls.Frame_RegistrationInfos.Hide();
	State.Controls.Frame_Round.Hide();
	State.Controls.Label_Error.Value = "";
	State.Controls.Label_InfoRanking.Hide();
	State.Controls.Label_InfoRanking.Value = "";
	State.Controls.Label_InfoStateCompetition.Hide();
	State.Controls.Label_InfoStateCompetition.Value = "";
	State.Controls.Label_Registered.Hide();
	State.Controls.Checkbox_Rules.Hide();
	State.Controls.Frame_NavigationTabs.Hide();
	State.Controls.ButtonIcon_Refresh.Hide();
	{{{Button::P}}}HideAndLock(State.Controls.Button_Refresh);
	{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_Qualify);
	{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_Ranking);
	{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_MyMatches);
	{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_Leaderboard);
	{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_Register);
	{{{Checkbox::P}}}SetValue(This, State.Controls.Checkbox_Rules, "");
	{{{Navigation::P}}}Lock(State.Controls.Checkbox_Rules, True);
	{{{NavigationTabs::P}}}LockTabs(This, State.Controls.Frame_NavigationTabs, True);
	LockScroll(State.Controls.Scroll_Steps, _CurrentStep != C_IndexStep_Info);
	LockScroll(State.MyMatchs.Scroll_ListMatchs, _CurrentStep != C_IndexStep_Matches);
	LockScroll(State.Controls.Scroll_RoundMatches, _CurrentStep != C_IndexStep_PastRound);
	LockScroll(State.Controls.Scroll_ServerList, _CurrentStep != C_IndexStep_Qualify);
	LockScroll(State.Controls.Scroll_Ranking, (
		_CurrentStep != C_IndexStep_QualifyRanking && 
		_CurrentStep != C_IndexStep_MatchResults && 
		_CurrentStep != C_IndexStep_CompetitionRanking
	));

	// Update current step
	State.IndexCurrentStep = _CurrentStep;
	switch (_CurrentStep) {
		case C_IndexStep_Info : {
			HideRanking(State.Controls.Frame_PlayerRank);
			if (State.Controls.Button_Leaderboard.RelativePosition_V3.X == MLHelpers::SkewX(-43., -67., 10.)) {
				State.Controls.Button_Leaderboard.RelativePosition_V3.X = MLHelpers::SkewX(0., -67., 10.);
				State.Controls.Button_Register.RelativePosition_V3.X = MLHelpers::SkewX(127., -67., 10.);
				{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_MyMatches, "left", State.Controls.Button_Leaderboard.ControlId);
			}
			if (State.EventDetails.RegistrationStart != "" && State.EventDetails.RegistrationEnd != "") State.Controls.Frame_RegistrationInfos.Show();
			declare Integer LastRoundIndex = State.EventDetails.Rounds.count - 1;
			if (State.EventDetails.Description != "") {
				State.Controls.Label_EventDesc.Value = State.EventDetails.Description;
			} else {
				State.Controls.Label_EventDesc.Value = "{{{Text_NoDescription}}}";
			}
			Tools::FitLabelValue(State.Controls.Label_EventDesc, 2., 1., 0.2);
			State.Controls.Quad_EventLogo.ImageUrl = State.EventDetails.LogoUrl;
			declare Text CurrentQualifierChallenge_StartDate = TL::ToText(TL::ToInteger(State.EventDetails.CurrentQualifierChallenge.StartDate) - C_DelaytoJoinServer);
			State.Controls.Frame_EventInfo.Show();

			{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_MyMatches, (State.MyMatchs.EventMatches.count > 0));
			if (State.Controls.Button_MyMatches.Visible) Leaderboard_RightTargetId = State.Controls.Button_MyMatches.ControlId;

			if (State.EventDetails.Player.AccountId == {{{CompetitionStruct::P}}}C_NullPlayerId) {
				declare Timestamp = TimeLib::GetCurrent();
				if (State.EventDetails.IsRegistrationOngoing) {
					{{{Button::P}}}ShowAndUnlock(State.Controls.Button_Register);
					Leaderboard_RightTargetId = State.Controls.Button_Register.ControlId;
					//This condition means that this is an admin (not registered) so the buttons MyMatches and Register can appear at the same time
					if (State.MyMatchs.EventMatches.count > 0) {
						State.Controls.Button_Leaderboard.RelativePosition_V3.X = -50.;
						State.Controls.Button_Register.RelativePosition_V3.X = 30.;
						State.Controls.Button_Leaderboard.RelativePosition_V3.X = MLHelpers::SkewX(-43., -67., 10.);
						State.Controls.Button_Register.RelativePosition_V3.X = MLHelpers::SkewX(67., -67., 10.);
						{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_MyMatches, "left", State.Controls.Button_Register.ControlId);
					}
				}

				if (TimeLib::Compare(State.EventDetails.RegistrationEnd, Timestamp) < 0) {
					if (TimeLib::Compare(State.EventDetails.EndDate, Timestamp) < 0 || State.EventDetails.Rounds[LastRoundIndex].Status == C_Status_RoundCompleted) {
						State.Controls.Label_Information.Value = "{{{Text_CompetOver}}}";
					} else {
						State.Controls.ButtonIcon_Refresh.Show();
						{{{Button::P}}}ShowAndUnlock(State.Controls.Button_Refresh);
						//L16N [Event details] Registration is finished, we are past the registration end date. Then qualifications or matches can begin.
						if (State.EventDetails.Type != C_Type_CompetitionExternal) State.Controls.Label_Information.Value = _("Registrations are closed");
					}
				} else if (TimeLib::Compare(State.EventDetails.RegistrationStart, Timestamp) > 0) {
					State.Controls.ButtonIcon_Refresh.Show();
					{{{Button::P}}}ShowAndUnlock(State.Controls.Button_Refresh);
					//L16N [Event details] Message to inform User, that registrations have not yet started.
					State.Controls.Label_Information.Value = _("Registrations have not yet started");
				} else {
					State.Controls.ButtonIcon_Refresh.Show();
					{{{Button::P}}}ShowAndUnlock(State.Controls.Button_Refresh);
					State.HasRules = State.EventDetails.RulesUrl != "";
					if (State.HasRules && !State.RulesAccepted) {
						//L16N [Event details] The player must tick the corresponding box, therefore stating they have read and they agree with the rules of the event. %1 and %2 will be text formatting to include a link, it won't be visible.
						{{{Checkbox::P}}}SetValue(This, State.Controls.Checkbox_Rules, TL::Compose(_("I have read and I agree to the %1rules%2 of this event."), "$u$l["^State.EventDetails.RulesUrl^"]", "$l"));
					}
					State.Controls.Checkbox_Rules.Visible = State.HasRules && !State.RulesAccepted;
					{{{Navigation::P}}}Lock(State.Controls.Checkbox_Rules, !State.Controls.Checkbox_Rules.Visible);
				}
			} else {
				if (State.EventDetails.CurrentQualifierChallenge.Id != {{{CompetitionStruct::P}}}C_QualifierChallenge_NullId && !State.EventDetails.CurrentQualifierChallenge.IsCompleted) {
					if (!State.Controls.Button_MyMatches.Visible) {
						Leaderboard_RightTargetId = State.Controls.Button_Qualify.ControlId;
						State.Controls.Button_Qualify.RelativePosition_V3.X = MLHelpers::SkewX(127., -67., 10.);
						State.Controls.Button_Leaderboard.RelativePosition_V3.X = MLHelpers::SkewX(0., -67., 10.);
					} else {
						State.Controls.Button_Qualify.RelativePosition_V3.X = MLHelpers::SkewX(67., -67., 10.);
						State.Controls.Button_Leaderboard.RelativePosition_V3.X = MLHelpers::SkewX(-43., -67., 10.);
					}
				}

				if (TimeLib::Compare(State.EventDetails.EndDate, TimeLib::GetCurrent()) < 0 || State.EventDetails.Rounds[LastRoundIndex].Status == C_Status_RoundCompleted) {
					State.Controls.Label_Information.Value = "{{{Text_CompetOver}}}";
				} else {
					State.Controls.ButtonIcon_Refresh.Show();
					{{{Button::P}}}ShowAndUnlock(State.Controls.Button_Refresh);
					if (State.EventDetails.CurrentQualifierChallenge.Id == {{{CompetitionStruct::P}}}C_QualifierChallenge_NullId || State.EventDetails.CurrentQualifierChallenge.IsCompleted) {
						for (I, 0, State.EventDetails.Rounds.count-1) {
							if (
								(State.EventDetails.Rounds.existskey(I) && TimeLib::Compare(State.EventDetails.Rounds[I].Start, TimeLib::GetCurrent()) >= 0 && State.EventDetails.Rounds[I].Position == 0) ||
								(State.EventDetails.Rounds.existskey(I) && I != 0 && State.EventDetails.Rounds[I-1].Status == {{{CompetitionStruct::P}}}C_Status_Completed)
							) {
								if (TimeLib::Compare(State.EventDetails.Rounds[I].Start, TimeLib::GetCurrent()) > 0) State.RoundTime = State.EventDetails.Rounds[I].Start;
							} else if (State.EventDetails.Rounds.existskey(I) && State.EventDetails.Rounds[I].Status == {{{CompetitionStruct::P}}}C_Status_HasMatches) {
								//L16N All matches of current round must be over to pass at the next round.
								State.Controls.Label_InfoStateCompetition.Value = TL::Compose( _("Waiting on all matches currently in progress"));
							}
						}
						State.Controls.Label_InfoStateCompetition.Show();
					} else if (State.EventDetails.CurrentQualifierChallenge.Id != {{{CompetitionStruct::P}}}C_QualifierChallenge_NullId && !State.EventDetails.CurrentQualifierChallenge.IsCompleted) {
						if (TimeLib::Compare(CurrentQualifierChallenge_StartDate, TimeLib::GetCurrent()) < 0) {
							if (TimeLib::Compare(State.EventDetails.CurrentQualifierChallenge.EndDate, TimeLib::GetCurrent()) >= 0) {
								State.QualifTime = State.EventDetails.CurrentQualifierChallenge.EndDate;
								{{{ExpendableButton::P}}}ShowAndUnlock(State.Controls.Button_Qualify);
							}
						} else {
							State.QualifTime = CurrentQualifierChallenge_StartDate;
						}
						State.Controls.Label_InfoStateCompetition.Show();
					}
				}
			}
			UpdateEventNameButton(State);
			State.Controls.Frame_NavigationTabs.Visible = {{{NavigationTabs::P}}}GetAvailableTabs(State.Controls.Frame_NavigationTabs).count > 0;
			{{{NavigationTabs::P}}}LockTabs(This, State.Controls.Frame_NavigationTabs, !State.Controls.Frame_NavigationTabs.Visible);
			{{{ExpendableButton::P}}}SetVisibilityAndNavigation(State.Controls.Button_Leaderboard, (State.EventDetails.NbPlayers > 0));
			RightTarget_ButtonBack = State.Controls.Button_Leaderboard.ControlId;
			DownTarget_ButtonClub = State.Controls.Checkbox_Rules.ControlId;
			{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Leaderboard, "right", Leaderboard_RightTargetId);
			if (!State.Controls.Button_Leaderboard.Visible && State.Controls.Button_MyMatches.Visible) {
				RightTarget_ButtonBack = State.Controls.Button_MyMatches.ControlId;
			}
		}
		case C_IndexStep_Register : {
			State.Controls.Label_Registered.Show();
			if (State.EventDetails.ExternalRegistrationUrl != "") {
				TitleControl::OpenLinkAndWait(This, TitleControl, State.EventDetails.ExternalRegistrationUrl, CMlScript::LinkType::ExternalBrowser);
			}
		}
		case C_IndexStep_Qualify : {
			State.Controls.Frame_QualificationInfo.Show();
			{{{ExpendableButton::P}}}ShowAndUnlock(State.Controls.Button_Ranking);
			RightTarget_ButtonBack = State.Controls.Button_Ranking.ControlId;
			State.IsPastQualifier = False;
			if (State.EventDetails.CurrentQualifierChallenge.Servers.count > 0) {
				//L16N Message to inform players that they can select one of these servers, to join qualification
				State.Controls.Label_InfoRanking.Value = _("Select one of these servers to join the qualification");
				State.Controls.Label_InfoRanking.Show();
			}
		}
		case C_IndexStep_QualifyRanking : {
			if (State.ChallengeDetails.Cardinal > 0) {
				State.Controls.Frame_Ranking.Show();
				if (Http::IsInitialized(State.GetParticipantChallengeDetailsRequest)) {
					Http::Destroy(State.GetParticipantChallengeDetailsRequest);
				}
				State.GetParticipantChallengeDetailsRequest = CompetitionAPI::GetChallengePlayersResults(State.ChallengeDetails.ChallengeId, [LocalUser.WebServicesUserId]);
			} else {
				//L16N Message to indicate that the qualification ranking is empty for now, but the player can come back later to see it
				State.Controls.Label_InfoRanking.Value = _("Qualification ranking is empty");
				State.Controls.Label_InfoRanking.Show();
			}
		}
		case C_IndexStep_Matches : {
			if (State.MyMatchs.EventMatches.count > 0) {
				State.Controls.Frame_Matches.Show();
			} else {
				//L16N Message to indicate there are no matches currently, but the player can come back later to see them
				State.Controls.Label_InfoRanking.Value = _("No matches currently available, come back later!");
				State.Controls.Label_InfoRanking.Show();
			}
		}
		case C_IndexStep_CompetitionRanking : {
			if (State.LeaderBoard.count > 0) {
				State.Controls.Frame_Ranking.Show();
				if (Http::IsInitialized(State.GetParticipantLeaderboardRequest)) {
					Http::Destroy(State.GetParticipantLeaderboardRequest);
				}
				State.GetParticipantLeaderboardRequest = CompetitionAPI::GetCompetitionParticipantsLeaderboard(State.EventDetails.CompetitionId, [LocalUser.WebServicesUserId]);
				State.Controls.Label_RankingNb.Value = TL::Compose("{{{Text_Players_Nb}}}", TL::ToText(State.NbRankedPlayers));
				State.Controls.Label_RankingNb.RelativePosition_V3.X = State.Controls.Label_Ranking.ComputeWidth(State.Controls.Label_Ranking.Value) + 1.;
			} else {
				//L16N Message to indicate that the leaderboard is empty for now, but the player can come back later to see it
				State.Controls.Label_InfoRanking.Value = _("Leaderboard is empty");
				State.Controls.Label_InfoRanking.Show();
			}
		}
		case C_IndexStep_PastRound : {
			if (State.RoundMatchesPager.Matches.count > 0) {
				State.Controls.Frame_Round.Show();
			} else {
				//L16N Message to indicate that this past round has no matches, but the player can come back later to see them
				State.Controls.Label_InfoStateCompetition.Value = _("Round matches are currently unavailable, check back later!");
				State.Controls.Label_InfoStateCompetition.Show();
				State.RoundTime = "";
			}
		}
		case C_IndexStep_MatchResults : {
			if (State.MatchResults.count > 0) {
				State.Controls.Frame_Ranking.Show();
			} else {
				//L16N Message to indicate that the match results are empty for now, but the player can come back later to see it
				State.Controls.Label_InfoRanking.Value = _("Match results currently not available, check back later!");
				State.Controls.Label_InfoRanking.Show();
			}
		}
	}

	// Update navigation
	declare CMlFrame CurrentScroll = GetCurrentScroll(State);
	{{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Back, "right", RightTarget_ButtonBack);
	if (CurrentScroll != Null) {{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Back, "up", CurrentScroll.ControlId);
	else {{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Back, "up", State.Controls.Button_Club.ControlId);
	if (DownTarget_ButtonClub != "") {{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Club, "down", DownTarget_ButtonClub);
	else if (CurrentScroll != Null ) {{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Club, "down", CurrentScroll.ControlId);
	else {{{Navigation::P}}}ChangeControlTarget(This, State.Controls.Button_Club, "down", State.Controls.Button_Back.ControlId);
	FocusAvailableControl(State);

	return State;
}

K_State SelectStepsScroll(K_State _State, Integer _ScrollType) {
	declare K_State State = _State;

	State.CurrentTypeScrollSteps = _ScrollType;
	switch (_ScrollType) {
		case C_TabIndex_PreviousSteps: {
			if (State.PreviousSteps.count > 0) {
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Steps, State.PreviousSteps.count);
			}
		}
		case C_TabIndex_RemainingSteps: {
			if (State.NextSteps.count > 0) {
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Steps, State.NextSteps.count);
			}
		}
	}

	return State;
}

K_State Cancel(K_State _State) {
	declare K_State State = _State;
	HideRanking(State.Controls.Frame_PlayerRank);
	switch (State.IndexCurrentStep) {
		case C_IndexStep_Info, C_IndexStep_Error: {
			{{{Router::P}}}PushParent(This);
		}
		case C_IndexStep_Qualify: {
			State.NeedToRefresh = True;
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_ServerList, 0);
			State = SetCurrentStep(State, C_IndexStep_Info);
		}
		case C_IndexStep_QualifyRanking: {
			State.RankingsPager.NeedUpdate = False;
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, 0);
			if (State.IsPastQualifier) {
				State.PastQualifierId = {{{CompetitionStruct::P}}}C_QualifierChallenge_NullId;
				State = SetCurrentStep(State, C_IndexStep_Info);
			} else {
				if (!State.EventDetails.CurrentQualifierChallenge.IsCompleted) {
					State = SetCurrentStep(State, C_IndexStep_Qualify);
				} else {
					State.PastQualifierId = {{{CompetitionStruct::P}}}C_QualifierChallenge_NullId;
					State = SetCurrentStep(State, C_IndexStep_Info);
				}
			}
			HideRanking(State.Controls.Frame_PlayerRank);
		}
		case C_IndexStep_Matches: {
			State.NeedToRefresh = True;
			{{{Scroll::P}}}SetElementsTotal(This, State.MyMatchs.Scroll_ListMatchs, 0);
		}
		case C_IndexStep_CompetitionRanking: {
			State.LeaderBoardPager.NeedUpdate = False;
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, 0);
			State = SetCurrentStep(State, C_IndexStep_Info);
			HideRanking(State.Controls.Frame_PlayerRank);
		}
		case C_IndexStep_Register : {
			if (Http::IsInitialized(State.GetEventDetailsRequest)) {
				State.GetEventDetailsRequest = Http::Destroy(State.GetEventDetailsRequest);
			}
			State.GetEventDetailsRequest = CompetitionAPI::GetCompetitionFromId(State.ActivityId);
		}
		case C_IndexStep_PastRound: {
			State.RoundMatchesPager.NeedUpdate = False;
			State.PastRoundId = {{{CompetitionStruct::P}}}C_Round_NullId;
			State.PastRoundNbMatches = 0;
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_RoundMatches, 0);
			State = SetCurrentStep(State, C_IndexStep_Info);
		}
		case C_IndexStep_MatchResults: {
			State.MatchResultsPager.NeedUpdate = False;
			State.PastMatchId = {{{CompetitionStruct::P}}}C_Match_NullId;
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, 0);
			State = SetCurrentStep(State, C_IndexStep_PastRound);
		}
	}

	return State;
}

K_State Select(CMlControl _Control, K_State _State) {
	declare K_State State = _State;

	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return State;
	switch (_Control.ControlId) {
		case "button-back": State = Cancel(State);
		case "checkbox-rules": State.RulesAccepted = {{{Checkbox::P}}}Toggle(This, _Control as CMlFrame);
		case "button-register": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayOnlineCompetition)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayOnlineCompetition)
				]);
			} else {		
				if (State.HasRules && !State.RulesAccepted) {
					Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Checkbox_Rules);
				} else {
					State.Controls.Label_Error.Value = "";
					State.RegisterRequest = CompetitionAPI::PostAddPlayerToCompetition(State.EventDetails.CompetitionId, LocalUser.ZonePath);
					_Control.Hide();
					{{{Navigation::P}}}Lock(_Control, True);
					{{{Navigation::P}}}Lock(State.Controls.Checkbox_Rules, True);
					Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Back);
				}
			}
		}
		case "button-qualify": {
			if (State.EventDetails.CurrentQualifierChallenge.Servers.count > 0) {
				State = SetCurrentStep(_State, C_IndexStep_Qualify);
			} else {
				//L16N Message inform user there are no qualifiers
				State.Controls.Label_InfoStateCompetition.Value = _("Qualifiers are not available now, please try again later");
				State.Controls.Label_InfoStateCompetition.Show();
				State.QualifTime = "";
			}
		}
		case "button-ranking": {
			{{{Scroll::P}}}ScrollToElement(This, State.Controls.Scroll_Ranking, 0, True);
			State.Controls.Frame_QualificationInfo.Hide();
			{{{LoadingSpinner::P}}}StartAnimation(This, State.Controls.Frame_LoadingSpinner);
			State.RankingsPager.NeedUpdate = True;
		}
		case "button-club": {
			if (State.Club.Id != {{{ClubStruct::P}}}C_ClubNullId) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubDetails}}}", {{{Router::P}}}GetCurrentParentPath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubDetails}}}", ["{{{RoutePaths::C_Query_Club}}}" => State.Club.tojson()]);
			}
		}
		case "button-my-matches": {
			if (State.MyMatchs.EventMatches.count > 0) {
				{{{Scroll::P}}}ScrollToElement(This, State.MyMatchs.Scroll_ListMatchs, 0, True);
				State = SetCurrentStep(_State, C_IndexStep_Matches);
			} 
		}
		case "button-ranking-competition": {
			{{{Scroll::P}}}ScrollToElement(This, State.Controls.Scroll_Ranking, 0, True);
			State.Controls.Frame_EventInfo.Hide();
			{{{LoadingSpinner::P}}}StartAnimation(This, State.Controls.Frame_LoadingSpinner);
			State.LeaderBoardPager.NeedUpdate = True;
			State = SetCurrentStep(State, C_IndexStep_CompetitionRanking);
		}
		case "button-refresh": {
			State.NeedToRefresh = True;
		}
		case "button-event-name": {
			if (State.Member.AccountId != {{{ClubStruct::P}}}C_AccountNullId && RBAC::HasClubPermission(State.Member, RBAC::C_ClubPermission_Administration)) {
				OpenLink(Config::Get().WebsiteAdminClubUrl^"/competition/"^State.EventDetails.CompetitionId, CMlScript::LinkType::ExternalBrowser);
			}
		}
	}
	return State;
}

Void OnClubReceived(K_State _State) {
	if ({{{Router::P}}}GetCurrentParentPath(This) != "{{{RoutePaths::C_Path_ClubDetails}}}") {
		{{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Club, TL::Compose("{{{Text_Club}}}", _State.Club.Name));
		{{{ExpendableButton::P}}}SetVisibilityAndNavigation(_State.Controls.Button_Club, _State.Club.Name != "");
		if (_State.Club.Id != {{{ClubStruct::P}}}C_ClubNullId) {
			ReportSystem::AddData(
				ReportStruct::C_ReportTarget_Club,
				ReportStruct::LibStructuresReport_K_ReportData {
					Details = [_State.Club.Name],
					Ids = [TL::ToText(_State.Club.Id)],
					Contexts = [["From" => "Menu EventDetails"]]
				}
			);
		}
	} else {
		{{{ExpendableButton::P}}}SetText(This, _State.Controls.Button_Club, "");
		{{{ExpendableButton::P}}}HideAndLock(_State.Controls.Button_Club);
	}
}

K_State FetchRankingsPage(K_State _State, Integer _QualifierId) {
	declare K_State State = _State;
	
	State.RankingsPager.Offset = ML::Max(0, (State.RankingsPager.CurrentPage - 2)) * C_RankingsPerPage;
	declare Integer Length = C_RankingsPerPage * 3;

	if (Http::IsInitialized(State.GetChallengeDetailsRequest)) {
		Http::Destroy(State.GetChallengeDetailsRequest);
	}
	State.GetChallengeDetailsRequest = CompetitionAPI::GetLeaderboardFromId(_QualifierId, State.RankingsPager.Offset, Length);
	return State;
}

K_State FetchLeaderBoardPage(K_State _State) {
	declare K_State State = _State;
	
	State.LeaderBoardPager.Offset = ML::Max(0, (State.LeaderBoardPager.CurrentPage - 2)) * C_RankingsPerPage;
	declare Integer Length = C_RankingsPerPage * 3;

	if (Http::IsInitialized(State.GetLeaderBoardRequest)) {
		Http::Destroy(State.GetLeaderBoardRequest);
	}
	State.GetLeaderBoardRequest = CompetitionAPI::GetCompetitionLeaderboardFromId(State.EventDetails.CompetitionId, State.LeaderBoardPager.Offset, Length);
	return State;
}

K_State FetchMatchResultsPage(K_State _State, Integer _MatchId) {
	declare K_State State = _State;
	
	State.MatchResultsPager.Offset = ML::Max(0, (State.MatchResultsPager.CurrentPage - 2)) * C_RankingsPerPage;
	declare Integer Length = C_RankingsPerPage * 3;

	if (Http::IsInitialized(State.GetMatchResultsRequest)) {
		Http::Destroy(State.GetMatchResultsRequest);
	}
	State.GetMatchResultsRequest = CompetitionAPI::GetMatchesResultsFromMatchId(_MatchId, State.MatchResultsPager.Offset, Length);
	return State;
}

K_State FetchRoundMatchesPage(K_State _State, Integer _RoundId) {
	declare K_State State = _State;
	
	State.RoundMatchesPager.Offset = ML::Max(0, (State.RoundMatchesPager.CurrentPage - 2)) * C_RankingsPerPage;
	declare Integer Length = C_RankingsPerPage * 3;

	if (Http::IsInitialized(State.GetRoundMatchesRequest)) {
		Http::Destroy(State.GetRoundMatchesRequest);
	}
	State.GetRoundMatchesRequest = CompetitionAPI::GetMatchesFromRoundId(_RoundId, State.RoundMatchesPager.Offset, Length);
	return State;
}

Boolean MatchUserParticipation(K_State _State, Text _MatchLiveId) {
	foreach (ParticipantMatch in _State.ParticipantMatchesResults) {
		if (_MatchLiveId == ParticipantMatch.MatchLiveId) {
			return True;
		}
	}
	return False;	
}

K_State InitPager(K_State _State) {
	declare K_State State = _State;
	State.RankingsPager = K_PagerResults {
		Results = [],
		Total = 0,
		Offset = 0,
		CurrentPage = 1
	};

	State.LeaderBoardPager = K_PagerResults {
		Results = [],
		Total = 0,
		Offset = 0,
		CurrentPage = 1
	};

	State.MatchResultsPager = K_PagerResults {
		Results = [],
		Total = 0,
		Offset = 0,
		CurrentPage = 1
	};

	State.RoundMatchesPager = K_PagerRoundMatches {
		Matches = [],
		Total = 0,
		Offset = 0,
		CurrentPage = 1
	};
	
	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlLabel Label_Registration;
declare CMlLabel Label_RegistrationTitle;
declare CMlLabel Label_PastRoundName;
declare CMlLabel Label_PastRoundResult;

declare K_State State;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Label_Registration <=> (Frame_Global.GetFirstChild("label-registration") as CMlLabel);
Label_RegistrationTitle <=> (Frame_Global.GetFirstChild("label-registration-title") as CMlLabel);
Label_PastRoundName <=> (Frame_Global.GetFirstChild("label-round-name") as CMlLabel);
Label_PastRoundResult <=> (Frame_Global.GetFirstChild("label-round-result") as CMlLabel);

State = K_State {
	GetEventDetailsRequest = Http::GetEmptyRequest(),
	GetChallengeDetailsRequest = Http::GetEmptyRequest(),
	GetParticipantChallengeDetailsRequest = Http::GetEmptyRequest(),
	GetParticipantLeaderboardRequest = Http::GetEmptyRequest(),
	GetClubDetailsRequest = Http::GetEmptyRequest(),
	GetRoundMatchesRequest = Http::GetEmptyRequest(),
	RegisterRequest = Http::GetEmptyRequest(),
	GetLeaderBoardRequest = Http::GetEmptyRequest(),
	GetMatchResultsRequest = Http::GetEmptyRequest(),
	GetParticipantMatchResultsRequest = Http::GetEmptyRequest(),
	MyMatchs = K_Controls_MyMatchs {
		RequestGetCurrentMatch = Http::GetEmptyRequest(),
		Scroll_ListMatchs = (Frame_Global.GetFirstChild("scroll-matches-list") as CMlFrame)
	},
	Controls = K_Controls {
		Frame_Global = Frame_Global,
		Frame_EventInfo = (Frame_Global.GetFirstChild("frame-event-info") as CMlFrame),
		Frame_LoadingSpinner = (Frame_Global.GetFirstChild("frame-loading-spinner") as CMlFrame),
		Frame_Matches = (Frame_Global.GetFirstChild("frame-current-match") as CMlFrame),
		Frame_NavigationTabs = (Frame_Global.GetFirstChild("frame-navigation-tabs") as CMlFrame),
		Frame_PlayerRank = (Frame_Global.GetFirstChild("frameinstance-player-ranking") as CMlFrame),
		Frame_Profile = (Frame_Global.GetFirstChild("frame-profile") as CMlFrame),
		Frame_QualificationInfo = (Frame_Global.GetFirstChild("frame-qualifications-info") as CMlFrame),
		Frame_Ranking = (Frame_Global.GetFirstChild("frame-ranking") as CMlFrame),
		Frame_RegistrationInfos = (Frame_Global.GetFirstChild("frame-registration-infos") as CMlFrame),
		Frame_Round = (Frame_Global.GetFirstChild("frame-round-matches") as CMlFrame),
		ButtonIcon_Refresh = (Frame_Global.GetFirstChild("button-icon-refresh") as CMlFrame),
		Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
		Button_Club = (Frame_Global.GetFirstChild("button-club") as CMlFrame),
		Button_EventName = (Frame_Global.GetFirstChild("button-event-name") as CMlFrame),
		Button_Leaderboard = (Frame_Global.GetFirstChild("button-ranking-competition") as CMlFrame),
		Button_MyMatches = (Frame_Global.GetFirstChild("button-my-matches") as CMlFrame),
		Button_Qualify = (Frame_Global.GetFirstChild("button-qualify") as CMlFrame),
		Button_Ranking = (Frame_Global.GetFirstChild("button-ranking") as CMlFrame),
		Button_Refresh = (Frame_Global.GetFirstChild("button-refresh") as CMlFrame),
		Button_Register = (Frame_Global.GetFirstChild("button-register") as CMlFrame),
		Checkbox_Rules = (Frame_Global.GetFirstChild("checkbox-rules") as CMlFrame),
		Label_Error = (Frame_Global.GetFirstChild("label-error") as CMlLabel),
		Label_EventDesc = (Frame_Global.GetFirstChild("label-event-desc") as CMlLabel),
		Label_InfoRanking = (Frame_Global.GetFirstChild("label-info-ranking") as CMlLabel), 
		Label_InfoStateCompetition = (Frame_Global.GetFirstChild("label-info-competition") as CMlLabel),
		Label_Information = (Frame_Global.GetFirstChild("label-information") as CMlLabel),
		Label_Ranking = (Frame_Global.GetFirstChild("label-ranking-players") as CMlLabel),
		Label_RankingNb = (Frame_Global.GetFirstChild("label-ranking-players-nb") as CMlLabel),
		Label_Registered = (Frame_Global.GetFirstChild("label-registered") as CMlLabel),
		Quad_EventLogo = (Frame_Global.GetFirstChild("quad-event-logo") as CMlQuad),
		Scroll_Ranking = (Frame_Global.GetFirstChild("scroll-ranking") as CMlFrame),
		Scroll_RoundMatches = (Frame_Global.GetFirstChild("scroll-round-matches-list") as CMlFrame),
		Scroll_ServerList = (Frame_Global.GetFirstChild("scroll-server-list") as CMlFrame),
		Scroll_Steps = (Frame_Global.GetFirstChild("scroll-steps-list") as CMlFrame)
	}
};

State = InitPager(State);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_EventDetails}}}")) {
	if (State.Controls.Button_Refresh.Visible) {
		if (State.IndexCurrentStep == C_IndexStep_Info && TimeLib::Compare(""^State.RefreshTime, TimeLib::GetCurrent()) <= 0) {
			State.NeedToRefresh = True;
		} else {
			{{{Button::P}}}SetValue(This, State.Controls.Button_Refresh, TimeLib::FormatDelta(TimeLib::GetCurrent(), ""^State.RefreshTime, TimeLib::EDurationFormats::Abbreviated));
		}
	}

	if (State.Controls.Label_InfoStateCompetition.Visible && State.IndexCurrentStep == C_IndexStep_Info) {
		if (State.QualifTime != "") {
			if (TimeLib::Compare(State.QualifTime, TimeLib::GetCurrent()) <= 0) {
				State.NeedToRefresh = True;
				State.QualifTime = "";
			} else {
				declare Text CurrentQualifierChallenge_StartDate = TL::ToText(TL::ToInteger(State.EventDetails.CurrentQualifierChallenge.StartDate) - C_DelaytoJoinServer);
				declare Text TimeLeft = TimeLib::FormatDelta(TimeLib::GetCurrent(), State.QualifTime, TimeLib::EDurationFormats::Abbreviated);
				if (TimeLib::Compare(CurrentQualifierChallenge_StartDate, TimeLib::GetCurrent()) < 0) {
					//L16N Message to inform players of the end of step qualification, %1 will be replaced by a time, e.g. Qualification ends in 25mn 53s
					State.Controls.Label_InfoStateCompetition.Value = TL::Compose( _("Qualification ends in %1"), TimeLeft);
				} else {
					//L16N Message to inform players that qualifiers begin in %1 , %1 will be replaced by a time, e.g. Qualification server will be available in 25mn 53s
					State.Controls.Label_InfoStateCompetition.Value = TL::Compose( _("Qualification server will be available in %1"), TimeLeft);
				}
			}
		} else if (State.RoundTime != "") {
			if (TimeLib::Compare(State.RoundTime, TimeLib::GetCurrent()) <= 0) {
				State.NeedToRefresh = True;
				State.RoundTime = "";
			} else {
				declare Text TimeLeft = TimeLib::FormatDelta(TimeLib::GetCurrent(), State.RoundTime, TimeLib::EDurationFormats::Abbreviated);
				//L16N Message used to inform players of the next round's start date. %1 replace by a date time, e.g. Current round starts in 25mn 53s
				State.Controls.Label_InfoStateCompetition.Value = TL::Compose( _("Current round starts in %1"), TimeLeft);
			}
		}
	}

	if (Http::IsInitialized(State.GetEventDetailsRequest)) {
		State.GetEventDetailsRequest = Http::Update(State.GetEventDetailsRequest);
		if (!Http::IsRunning(State.GetEventDetailsRequest)) {
			{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.Frame_LoadingSpinner);
			if (Http::IsSuccess(State.GetEventDetailsRequest)) {
				State.EventDetails = CompetitionAPI::GetResponseFromGetCompetitionFromId(State.GetEventDetailsRequest);
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_ServerList, State.EventDetails.CurrentQualifierChallenge.Servers.count);
				State = InitPager(State);

				declare Timestamp = TimeLib::GetCurrent();
				if (State.EventDetails.RegistrationStart != "" && TimeLib::Compare(State.EventDetails.RegistrationStart, Timestamp) > 0) {
					declare Text RegistrationStartText = TimeLib::FormatDate(State.EventDetails.RegistrationStart, TimeLib::EDateFormats::Date)^" | "^TimeLib::FormatDate(State.EventDetails.RegistrationStart, TimeLib::EDateFormats::TimeShort);
					Label_Registration.Value = TL::Compose("{{{Text_RegistrationOpenOn}}}", RegistrationStartText);
				} else if (State.EventDetails.RegistrationEnd != "") {
					if (TimeLib::Compare(State.EventDetails.RegistrationEnd, Timestamp) > 0) {
						declare Text RegistrationEndText = TimeLib::FormatDate(State.EventDetails.RegistrationEnd, TimeLib::EDateFormats::Date)^" | "^TimeLib::FormatDate(State.EventDetails.RegistrationEnd, TimeLib::EDateFormats::TimeShort);
						Label_Registration.Value = TL::Compose("{{{Text_RegistrationOpenUntil}}}", RegistrationEndText);
					} else {
						Label_Registration.Value = "{{{Text_RegistrationClosed}}}";
					}
				}
				Label_Registration.RelativePosition_V3.X = Label_RegistrationTitle.ComputeWidth(Label_RegistrationTitle.Value) + 1.;

				State.PreviousSteps = [];
				State.NextSteps = [];
				foreach (Round in State.EventDetails.Rounds) {
					if (Round.QualifierChallenge.Id != {{{CompetitionStruct::P}}}C_QualifierChallenge_NullId) {
						declare K_Round RoundTmp = K_Round {
							Name = Round.QualifierChallenge.Name,
							Start = Round.QualifierChallenge.StartDate,
							End = Round.QualifierChallenge.EndDate,
							RoundId = {{{CompetitionStruct::P}}}C_Round_NullId,
							QualifierId = Round.QualifierChallenge.Id,
							IsQualifierCompleted = Round.QualifierChallenge.IsCompleted,
							Status = Round.Status,
							NbMatches = 0
						};
						if (
							((State.EventDetails.Type == C_Type_CompetitionManual || State.EventDetails.Type == C_Type_CompetitionDefault) && RoundTmp.IsQualifierCompleted) ||
							(State.EventDetails.Type == C_Type_CompetitionExternal && TimeLib::Compare(RoundTmp.End, TimeLib::GetCurrent()) < 0)
						) {
							State.PreviousSteps.add(RoundTmp);
						} else {
							State.NextSteps.add(RoundTmp);
						}
					}
					if (Round.Id != {{{CompetitionStruct::P}}}C_Round_NullId) {
						declare Text RoundName = "";
						if (State.EventDetails.Type == C_Type_CompetitionDefault) RoundName = TL::Compose("%1 - %2", Round.Name, GetRoundNameDefault(Round.Position, State.EventDetails.Rounds.count));
						else RoundName = Round.Name;
						declare K_Round RoundTmp = K_Round {
							Name = RoundName,
							Start = Round.Start,
							End = Round.End,
							RoundId = Round.Id,
							QualifierId = {{{CompetitionStruct::P}}}C_QualifierChallenge_NullId,
							IsQualifierCompleted = False, 
							Status = Round.Status,
							NbMatches = Round.NbMatches
						};
						if (
							((State.EventDetails.Type == C_Type_CompetitionManual || State.EventDetails.Type == C_Type_CompetitionDefault) && RoundTmp.Status == C_Status_RoundCompleted) ||
							(State.EventDetails.Type == C_Type_CompetitionExternal && TimeLib::Compare(RoundTmp.End, TimeLib::GetCurrent()) < 0)
						) {
							State.PreviousSteps.add(RoundTmp);
						} else {
							State.NextSteps.add(RoundTmp);
						}
					}
				}

				declare Text[Integer] TabNames = C_TabNames;
				if (State.NextSteps.count > 0 && State.PreviousSteps.count > 0) {
					TabNames[C_TabIndex_RemainingSteps] = TL::Compose(TabNames[C_TabIndex_RemainingSteps], TL::ToText(State.NextSteps.count));
					TabNames[C_TabIndex_PreviousSteps] = TL::Compose(TabNames[C_TabIndex_PreviousSteps], TL::ToText(State.PreviousSteps.count));
					State.CurrentTypeScrollSteps = C_TabIndex_RemainingSteps;
				} else if (State.NextSteps.count > 0 && State.PreviousSteps.count == 0) {
					TabNames.removekey(C_TabIndex_PreviousSteps);
					TabNames[C_TabIndex_RemainingSteps] = TL::Compose(TabNames[C_TabIndex_RemainingSteps], TL::ToText(State.NextSteps.count));
					State.CurrentTypeScrollSteps = C_TabIndex_RemainingSteps;
				} else if (State.PreviousSteps.count > 0 && State.NextSteps.count == 0) {
					TabNames.removekey(C_TabIndex_RemainingSteps);
					TabNames[C_TabIndex_PreviousSteps] = TL::Compose(TabNames[C_TabIndex_PreviousSteps], TL::ToText(State.PreviousSteps.count));
					State.CurrentTypeScrollSteps = C_TabIndex_PreviousSteps;
				} else {
					TabNames.removekey(C_TabIndex_PreviousSteps);
					TabNames.removekey(C_TabIndex_RemainingSteps);
				}
				{{{NavigationTabs::P}}}SetTabs(This, State.Controls.Frame_NavigationTabs, TabNames, False);
				{{{NavigationTabs::P}}}RedrawNavigationTabs(This, State.Controls.Frame_NavigationTabs, False);
				{{{NavigationTabs::P}}}UpdateCurrentTab(This, State.Controls.Frame_NavigationTabs, State.CurrentTypeScrollSteps);
			
				State.LeaderBoardPager.NeedUpdate = True;
				State.NbRankedPlayers = State.EventDetails.NbPlayers;
				if (Http::IsInitialized(State.MyMatchs.RequestGetCurrentMatch)) {
					State.MyMatchs.RequestGetCurrentMatch = Http::Destroy(State.MyMatchs.RequestGetCurrentMatch);
				}
				State.MyMatchs.RequestGetCurrentMatch = CompetitionAPI::GetAllMyMatches(State.EventDetails.LiveId);
				State.GetParticipantMatchResultsRequest = CompetitionAPI::GetCompetitionMatchesResultsFromParticipantId(State.EventDetails.CompetitionId, LocalUser.WebServicesUserId);
			} else {
				State = SetCurrentStep(State, C_IndexStep_Error);
				//L16N [Event details] Could not load the event. %1 goes for the type of error.
				State.Controls.Label_Error.Value = TL::Compose(_("Error while retrieving the event. Please try again. (Error code: %1)"), ""^Http::GetStatusCode(State.GetEventDetailsRequest));
			}
			State.GetEventDetailsRequest = Http::Destroy(State.GetEventDetailsRequest);
		}
	}

	if (Http::IsInitialized(State.MyMatchs.RequestGetCurrentMatch)) {
		State.MyMatchs.RequestGetCurrentMatch = Http::Update(State.MyMatchs.RequestGetCurrentMatch);
		if (!Http::IsRunning(State.MyMatchs.RequestGetCurrentMatch)) {
			{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.Frame_LoadingSpinner);
			if (Http::IsSuccess(State.MyMatchs.RequestGetCurrentMatch)) {
				State.MyMatchs.EventMatches = CompetitionAPI::GetResponseFromGetAllMyMatches(State.MyMatchs.RequestGetCurrentMatch);
				{{{Scroll::P}}}SetElementsTotal(This, State.MyMatchs.Scroll_ListMatchs, State.MyMatchs.EventMatches.count);
				State = SetCurrentStep(State, C_IndexStep_Info);
			} else {
				{{{Scroll::P}}}SetElementsTotal(This, State.MyMatchs.Scroll_ListMatchs, State.MyMatchs.EventMatches.count);
				State.Controls.Label_InfoStateCompetition.Hide();
				State = SetCurrentStep(State, C_IndexStep_Info);
				//L16N Error Message to inform user, an error emerge while loading matches. %1 will be replaced by an error code.
				State.Controls.Label_Error.Value = TL::Compose(_("Error while retrieving matches. (Error code: %1)"), ""^Http::GetStatusCode(State.MyMatchs.RequestGetCurrentMatch));
			}
			State.MyMatchs.RequestGetCurrentMatch = Http::Destroy(State.MyMatchs.RequestGetCurrentMatch);
		}
	}

	if (Http::IsInitialized(State.GetClubDetailsRequest)) {
		State.GetClubDetailsRequest = Http::Update(State.GetClubDetailsRequest);
		if (!Http::IsRunning(State.GetClubDetailsRequest)) {
			if (Http::IsSuccess(State.GetClubDetailsRequest)) {
				State.Club = ClubAPI::GetResponseFromGetClub(State.GetClubDetailsRequest);
				OnClubReceived(State);
			}
			State.GetClubDetailsRequest = Http::Destroy(State.GetClubDetailsRequest);
		}
	}

	if (Http::IsInitialized(State.GetRoundMatchesRequest)) {
		State.GetRoundMatchesRequest = Http::Update(State.GetRoundMatchesRequest);
		if (!Http::IsRunning(State.GetRoundMatchesRequest)) {
			if (Http::IsSuccess(State.GetRoundMatchesRequest)) {
				declare {{{CompetitionStruct::P}}}K_MatchList Response = CompetitionAPI::GetResponseFromGetMatchesFromRoundId(State.GetRoundMatchesRequest);
				State.RoundMatchesPager.Matches = [];
				foreach (Key => Match in Response.Matches) {
					State.RoundMatchesPager.Matches[State.RoundMatchesPager.Offset + Key] = Match;
					State.RoundMatchesPager.Matches[State.RoundMatchesPager.Offset + Key].LocalUserParticipation = MatchUserParticipation(State, Match.LiveId);
				}
				State.RoundMatchesPager.Total = Response.Matches.count;
				Label_PastRoundName.Value = State.PastRoundName;
				Label_PastRoundName.RelativePosition_V3.X = Label_PastRoundResult.ComputeWidth(Label_PastRoundResult.Value) + 1.;
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_RoundMatches, State.PastRoundNbMatches);
				State = SetCurrentStep(State, C_IndexStep_PastRound);
			} else {
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_RoundMatches, State.RoundMatchesPager.Matches.count);
				State.Controls.Label_InfoStateCompetition.Hide();
				//L16N Error Message to inform user, an error emerge while loading past matches. %1 will be replaced by an error code.
				State.Controls.Label_Error.Value = TL::Compose(_("Error while retrieving past matches. (Error code: %1)"), ""^Http::GetStatusCode(State.GetRoundMatchesRequest));
			}
			State.GetRoundMatchesRequest = Http::Destroy(State.GetRoundMatchesRequest);
		}
	}	

	if (Http::IsInitialized(State.RegisterRequest)) {
		State.RegisterRequest = Http::Update(State.RegisterRequest);
		if (!Http::IsRunning(State.RegisterRequest)) {
			if (Http::IsSuccess(State.RegisterRequest)) {
				State = SetCurrentStep(State, C_IndexStep_Register);
			} else {
				State.Controls.Label_InfoStateCompetition.Hide();
				State.Controls.Label_Error.Value = GetErrorMessage(CompetitionAPI::GetError(State.RegisterRequest).app_code, State);
				State.Controls.Button_Register.Show();
				{{{Navigation::P}}}Lock(State.Controls.Button_Register, False);
				State.Controls.Button_MyMatches.Visible = False;
				{{{Navigation::P}}}Lock(State.Controls.Button_MyMatches, True);
				{{{Navigation::P}}}Lock(State.Controls.Checkbox_Rules, !State.Controls.Checkbox_Rules.Visible);
			}
			State.RegisterRequest = Http::Destroy(State.RegisterRequest);
		}
	}

	if (Http::IsInitialized(State.GetChallengeDetailsRequest)) {
		State.GetChallengeDetailsRequest = Http::Update(State.GetChallengeDetailsRequest);
		if (!Http::IsRunning(State.GetChallengeDetailsRequest)) {
			{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.Frame_LoadingSpinner);
			if (Http::IsSuccess(State.GetChallengeDetailsRequest)) {
				State.ChallengeDetails = CompetitionAPI::GetResponseFromGetLeaderboardChallenge(State.GetChallengeDetailsRequest);

				declare Text[] WebServicesUserIdList;
				State.RankingsPager.Results = [];
				foreach (Key => Top in State.ChallengeDetails.Results) {
					declare NewTop = Top;
					NewTop.DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(NewTop.AccountId);
					if (NewTop.DisplayName == "") {
						WebServicesUserIdList.add(NewTop.AccountId);
					}
					State.RankingsPager.Results[State.RankingsPager.Offset + Key] = NewTop;
				}
				State.RankingsPager.Total = State.ChallengeDetails.Cardinal;
				State.Controls.Label_RankingNb.Value = TL::Compose("{{{Text_Players_Nb}}}", TL::ToText(State.ChallengeDetails.Cardinal));
				State.Controls.Label_RankingNb.RelativePosition_V3.X = State.Controls.Label_Ranking.ComputeWidth(State.Controls.Label_Ranking.Value) + 1.;
				if (State.RankingsPager.TaskId_GetDisplayName != NullId) {
					UserMgr.TaskResult_Release(State.RankingsPager.TaskId_GetDisplayName);
				}
				declare CTaskResult_GetDisplayNameResult TaskDisplayName = UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), WebServicesUserIdList);
				if (TaskDisplayName != Null) {
					State.RankingsPager.TaskId_GetDisplayName = TaskDisplayName.Id;
				} else {
					{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, State.RankingsPager.Total);
				}
				State = SetCurrentStep(State, C_IndexStep_QualifyRanking);
			} else {
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, State.RankingsPager.Total);
				{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_Leaderboard);
				State.Controls.Label_InfoStateCompetition.Hide();
				//L16N [Event details] Message to indicate an error emerged while loading the leaderboard. %1 is a http error code.
				State.Controls.Label_Error.Value = TL::Compose(_("Error while retrieving the leaderboard, please try again later. (Error code: %1)"), ""^Http::GetStatusCode(State.GetChallengeDetailsRequest));
			}
			State.GetChallengeDetailsRequest = Http::Destroy(State.GetChallengeDetailsRequest);
		}
	}

	if (Http::IsInitialized(State.GetParticipantChallengeDetailsRequest)) {
		State.GetParticipantChallengeDetailsRequest = Http::Update(State.GetParticipantChallengeDetailsRequest);
		if (!Http::IsRunning(State.GetParticipantChallengeDetailsRequest)) {
			if (Http::IsSuccess(State.GetParticipantChallengeDetailsRequest)) {
				State.ParticipantChallengeDetails = CompetitionAPI::GetResponseFromGetLeaderboardChallenge(State.GetParticipantChallengeDetailsRequest);

				if (State.ParticipantChallengeDetails.Results.count > 0) {
					declare {{{CompetitionStruct::P}}}K_ParticipantResult Top = State.ParticipantChallengeDetails.Results[0];
					declare Text Score = "-";
					if (Top.Score != 0) {
						Score = TL::ToText(Top.Score);
						if (State.ChallengeDetails.ScoreUnit == {{{CompetitionStruct::P}}}C_ScoreUnit_Time) Score = TL::TimeToText(Top.Score, True, True);
						else if (State.ChallengeDetails.ScoreUnit == {{{CompetitionStruct::P}}}C_ScoreUnit_Rank_Only) Score = "";
					}
					declare Text Rank = "-";
					if (Top.Rank != 0) Rank = TL::ToText(Top.Rank);
					ShowRanking(State.Controls.Frame_PlayerRank, Rank, {{{UserStore::P}}}GetPlayerName(LocalUser), Score, Tools::GetCountryPath(Top.Zone, Config::Get().DefaultMasterZone));
				}
			} else {
				//L16N [Event details] Message to indicate an error emerged while loading the local user ranking. %1 is a http error code.
				State.Controls.Label_Error.Value = TL::Compose(_("Error while retrieving the user ranking, please try again later. (Error code: %1)"), ""^Http::GetStatusCode(State.GetParticipantChallengeDetailsRequest));
			}
			State.GetParticipantChallengeDetailsRequest = Http::Destroy(State.GetParticipantChallengeDetailsRequest);
		}
	}

	if (Http::IsInitialized(State.GetLeaderBoardRequest)) {
		State.GetLeaderBoardRequest = Http::Update(State.GetLeaderBoardRequest);
		if (!Http::IsRunning(State.GetLeaderBoardRequest)) {
			if (Http::IsSuccess(State.GetLeaderBoardRequest)) {
				State.LeaderBoard = CompetitionAPI::GetResponseFromCompetitionLeaderboardFromId(State.GetLeaderBoardRequest);
				declare Text[] WebServicesUserIdList;
				State.LeaderBoardPager.Results = [];
				foreach (Key => Top in State.LeaderBoard) {
					declare NewTop = Top;
					NewTop.DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(NewTop.AccountId);
					if (NewTop.DisplayName == "") {
						WebServicesUserIdList.add(NewTop.AccountId);
					}
					State.LeaderBoardPager.Results[State.LeaderBoardPager.Offset + Key] = NewTop;
				}
				State.LeaderBoardPager.Total = State.LeaderBoard.count;
				if (State.LeaderBoardPager.TaskId_GetDisplayName != NullId) {
					UserMgr.TaskResult_Release(State.LeaderBoardPager.TaskId_GetDisplayName);
				}
				declare CTaskResult_GetDisplayNameResult TaskDisplayName = UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), WebServicesUserIdList);
				if (TaskDisplayName != Null) {
					State.LeaderBoardPager.TaskId_GetDisplayName = TaskDisplayName.Id;
				} else {
					{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, State.NbRankedPlayers);
					{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.Frame_LoadingSpinner);
				}
			} else {
				{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.Frame_LoadingSpinner);
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, State.LeaderBoardPager.Total);
				{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_Leaderboard);
				State.Controls.Label_InfoStateCompetition.Hide();
				//L16N [EventDetails] An error occurred while loading of leaderboard. %1 replace by an error code
				State.Controls.Label_Error.Value = TL::Compose(_("Error while retrieving the leaderboard, please try again later. (Error code: %1)"), ""^Http::GetStatusCode(State.GetLeaderBoardRequest));
			}
			State.GetLeaderBoardRequest = Http::Destroy(State.GetLeaderBoardRequest);
		}
	}

	if (Http::IsInitialized(State.GetParticipantLeaderboardRequest)) {
		State.GetParticipantLeaderboardRequest = Http::Update(State.GetParticipantLeaderboardRequest);
		if (!Http::IsRunning(State.GetParticipantLeaderboardRequest)) {
			if (Http::IsSuccess(State.GetParticipantLeaderboardRequest)) {
				State.ParticipantLeaderBoard = CompetitionAPI::GetResponseFromGetCompetitionParticipantsLeaderboard(State.GetParticipantLeaderboardRequest);

				if (State.ParticipantLeaderBoard.Results.count > 0) {
					declare {{{CompetitionStruct::P}}}K_ParticipantResult Top = State.ParticipantLeaderBoard.Results[0];
					declare Text Score = "-";
					if (Top.Score != 0) Score = TL::ToText(Top.Score);
					declare Text Rank = "-";
					if (Top.Rank != 0) Rank = TL::ToText(Top.Rank);
					ShowRanking(State.Controls.Frame_PlayerRank, Rank, {{{UserStore::P}}}GetPlayerName(LocalUser), Score, Tools::GetCountryPath(Top.Zone, Config::Get().DefaultMasterZone));
				}
			} else {
				//L16N [Event details] Message to indicate an error emerged while loading the local user ranking. %1 is a http error code.
				State.Controls.Label_Error.Value = TL::Compose(_("Error while retrieving the user ranking, please try again later. (Error code: %1)"), ""^Http::GetStatusCode(State.GetParticipantLeaderboardRequest));
			}
			State.GetParticipantLeaderboardRequest = Http::Destroy(State.GetParticipantLeaderboardRequest);
		}
	}

	if (Http::IsInitialized(State.GetMatchResultsRequest)) {
		State.GetMatchResultsRequest = Http::Update(State.GetMatchResultsRequest);
		if (!Http::IsRunning(State.GetMatchResultsRequest)) {
			{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.Frame_LoadingSpinner);
			if (Http::IsSuccess(State.GetMatchResultsRequest)) {
				declare Response = CompetitionAPI::GetResponseFromGetMatchesResultsFromMatchId(State.GetMatchResultsRequest);
				State.MatchResults = Response.Results;
				State.MatchResultsScoreUnit = Response.ScoreUnit;
				declare Text[] WebServicesUserIdList;
				State.MatchResultsPager.Results = [];
				foreach (Key => Top in State.MatchResults) {
					declare NewTop = Top;
					NewTop.DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(NewTop.AccountId);
					if (NewTop.DisplayName == "") {
						WebServicesUserIdList.add(NewTop.AccountId);
					}
					State.MatchResultsPager.Results[State.MatchResultsPager.Offset + Key] = NewTop;
				}
				State.MatchResultsPager.Total = State.MatchResults.count;
				State.Controls.Label_RankingNb.Value = TL::Compose("{{{Text_Players_Nb}}}", TL::ToText(State.MatchResults.count));
				State.Controls.Label_RankingNb.RelativePosition_V3.X = State.Controls.Label_Ranking.ComputeWidth(State.Controls.Label_Ranking.Value) + 1.;
				if (State.MatchResultsPager.TaskId_GetDisplayName != NullId) {
					UserMgr.TaskResult_Release(State.MatchResultsPager.TaskId_GetDisplayName);
				}
				declare CTaskResult_GetDisplayNameResult TaskDisplayName = UserMgr.RetrieveDisplayName(MainUser::GetMainUserId(), WebServicesUserIdList);
				if (TaskDisplayName != Null) {
					State.MatchResultsPager.TaskId_GetDisplayName = TaskDisplayName.Id;
				} else {
					{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, State.MatchResultsPager.Total);
				}
				State = SetCurrentStep(State, C_IndexStep_MatchResults);
			} else {
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, State.MatchResultsPager.Total);
				State.Controls.Label_InfoStateCompetition.Hide();
				//L16N [EventDetails] An error occurred while loading of match results. %1 replace by an error code
				State.Controls.Label_Error.Value = TL::Compose(_("Error while retrieving the match results, please try again later. (Error code: %1)"), ""^Http::GetStatusCode(State.GetMatchResultsRequest));
			}
			State.GetMatchResultsRequest = Http::Destroy(State.GetMatchResultsRequest);
		}
	}

	if (Http::IsInitialized(State.GetParticipantMatchResultsRequest)) {
		State.GetParticipantMatchResultsRequest = Http::Update(State.GetParticipantMatchResultsRequest);
		if (!Http::IsRunning(State.GetParticipantMatchResultsRequest)) {
			{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.Frame_LoadingSpinner);
			if (Http::IsSuccess(State.GetParticipantMatchResultsRequest)) {
				State.ParticipantMatchesResults = CompetitionAPI::GetResponseFromGetCompetitionMatchesResultsFromParticipantId(State.GetParticipantMatchResultsRequest);
			} else {
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_RoundMatches, State.RoundMatchesPager.Matches.count);
				State.Controls.Label_InfoStateCompetition.Hide();
				//L16N [EventDetails] An error occurred while loading of match results. %1 replace by an error code
				State.Controls.Label_Error.Value = TL::Compose(_("Error while retrieving the match results, please try again later. (Error code: %1)"), ""^Http::GetStatusCode(State.GetParticipantMatchResultsRequest));
			}
			State.GetParticipantMatchResultsRequest = Http::Destroy(State.GetParticipantMatchResultsRequest);
		}
	}

	if (Http::IsInitialized(State.GetClubMemberRequest)) {
		State.GetClubMemberRequest = Http::Update(State.GetClubMemberRequest);
		if (!Http::IsRunning(State.GetClubMemberRequest)) {
			if (Http::IsSuccess(State.GetClubMemberRequest)) {
				State.Member = ClubAPI::GetResponseFromGetClubMemberWithId(State.GetClubMemberRequest);
			} else {
				State.Member = {{{ClubStruct::P}}}K_Member {
					AccountId = {{{ClubStruct::P}}}C_AccountNullId,
					Role = "",
					JoinDate = 0
				};
			}
			UpdateEventNameButton(State);
			State.GetClubMemberRequest = Http::Destroy(State.GetClubMemberRequest);
		}
	}

	if (State.RankingsPager.TaskId_GetDisplayName != NullId) {
		if (UserMgr.TaskResults.existskey(State.RankingsPager.TaskId_GetDisplayName) && (UserMgr.TaskResults[State.RankingsPager.TaskId_GetDisplayName] is CTaskResult_GetDisplayNameResult)) {
			declare CTaskResult_GetDisplayNameResult TaskDisplayName = (UserMgr.TaskResults[State.RankingsPager.TaskId_GetDisplayName] as CTaskResult_GetDisplayNameResult);
			if (!TaskDisplayName.IsProcessing) {
				if (TaskDisplayName.HasSucceeded) {
					foreach (Key => Top in State.RankingsPager.Results) {
						State.RankingsPager.Results[Key].DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(Top.AccountId);
					}
				} else {
					State.Controls.Label_InfoStateCompetition.Hide();
					//L16N Error displayed when there is an http error to fetch the rankings, %1 will be an error code e.g. "(Error code: 500)"
					State.Controls.Label_Error.Value = TL::Compose(_("There was an error while gathering the rankings, please try again later. (Error code: %1)"), TaskDisplayName.ErrorCode);
				}
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, State.RankingsPager.Total);
				UserMgr.TaskResult_Release(State.RankingsPager.TaskId_GetDisplayName);
				State.RankingsPager.TaskId_GetDisplayName = NullId;
			}
		} else {
			State.Controls.Label_InfoStateCompetition.Hide();
			//L16N Error displayed when there is an http error to fetch the rankings
			State.Controls.Label_Error.Value = _("There was an error while gathering the rankings, please try again later. (Error: Task not longer available)");
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, State.RankingsPager.Total);
			State.RankingsPager.TaskId_GetDisplayName = NullId;
		}
	}

	//@TODO optimise this 3 if on TaskId_GetDisplayName in one function
	if (State.LeaderBoardPager.TaskId_GetDisplayName != NullId) {
		if (UserMgr.TaskResults.existskey(State.LeaderBoardPager.TaskId_GetDisplayName) && (UserMgr.TaskResults[State.LeaderBoardPager.TaskId_GetDisplayName] is CTaskResult_GetDisplayNameResult)) {
			declare CTaskResult_GetDisplayNameResult TaskDisplayName = (UserMgr.TaskResults[State.LeaderBoardPager.TaskId_GetDisplayName] as CTaskResult_GetDisplayNameResult);
			if (!TaskDisplayName.IsProcessing) {
				if (TaskDisplayName.HasSucceeded) {
					foreach (Key => Top in State.LeaderBoardPager.Results) {
						State.LeaderBoardPager.Results[Key].DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(Top.AccountId);
					}
				} else {
					State.Controls.Label_InfoStateCompetition.Hide();
					//L16N Error displayed when there is an http error to fetch the leaderboard, %1 will be an error code e.g. "(Error code: 500)"
					State.Controls.Label_Error.Value = TL::Compose(_("There was an error while gathering the leaderboard, please try again later. (Error code: %1)"), TaskDisplayName.ErrorCode);
				}

				// Prevent infinite loading in Scroll if the number of ranked players is different than the number of registered players 
				declare Integer Length = C_RankingsPerPage * 3;
				if (State.LeaderBoard.count < Length) {
					if (State.EventDetails.NbPlayers != (State.LeaderBoardPager.Offset + State.LeaderBoard.count)) {
						State.NbRankedPlayers = State.LeaderBoardPager.Offset + State.LeaderBoard.count;
					}
				}
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, State.NbRankedPlayers);
				{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.Frame_LoadingSpinner);
				UserMgr.TaskResult_Release(State.LeaderBoardPager.TaskId_GetDisplayName);
				State.LeaderBoardPager.TaskId_GetDisplayName = NullId;
			}
		} else {
			{{{LoadingSpinner::P}}}StopAnimation(This, State.Controls.Frame_LoadingSpinner);
			State.Controls.Label_InfoStateCompetition.Hide();
			//L16N Error displayed when there is an http error to fetch the leaderboard
			State.Controls.Label_Error.Value = _("There was an error while gathering the leaderboard, please try again later. (Error: Task no longer available)");
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, State.LeaderBoardPager.Total);
			State.LeaderBoardPager.TaskId_GetDisplayName = NullId;
		}
	}

	if (State.MatchResultsPager.TaskId_GetDisplayName != NullId) {
		if (UserMgr.TaskResults.existskey(State.MatchResultsPager.TaskId_GetDisplayName) && (UserMgr.TaskResults[State.MatchResultsPager.TaskId_GetDisplayName] is CTaskResult_GetDisplayNameResult)) {
			declare CTaskResult_GetDisplayNameResult TaskDisplayName = (UserMgr.TaskResults[State.MatchResultsPager.TaskId_GetDisplayName] as CTaskResult_GetDisplayNameResult);
			if (!TaskDisplayName.IsProcessing) {
				if (TaskDisplayName.HasSucceeded) {
					foreach (Key => Top in State.MatchResultsPager.Results) {
						State.MatchResultsPager.Results[Key].DisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(Top.AccountId);
					}
				} else {
					State.Controls.Label_InfoStateCompetition.Hide();
					//L16N Error displayed when there is an http error to fetch the match results, %1 will be an error code e.g. "(Error code: 500)"
					State.Controls.Label_Error.Value = TL::Compose(_("There was an error while gathering the macth results, please try again later. (Error code: %1)"), TaskDisplayName.ErrorCode);
				}
				{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, State.MatchResultsPager.Total);
				UserMgr.TaskResult_Release(State.MatchResultsPager.TaskId_GetDisplayName);
				State.MatchResultsPager.TaskId_GetDisplayName = NullId;
			}
		} else {
			State.Controls.Label_InfoStateCompetition.Hide();
			//L16N Error displayed when there is an http error to fetch the match results
			State.Controls.Label_Error.Value = _("There was an error while gathering the match results, please try again later. (Error: Task no longer available)");
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, State.MatchResultsPager.Total);
			State.MatchResultsPager.TaskId_GetDisplayName = NullId;
		}
	}

	/* Report system events */
	foreach (Event in ReportSystem::GetPendingEvents()) {
		if (Event.LastUsingId == "{{{C_Name}}}") {
			switch (Event.Type) {
				case ReportSystem::C_EventType_Open: {
					LockPage(State, True);
				}
				case ReportSystem::C_EventType_Close: {
					LockPage(State, False);
					UpdateControllerInfo();
				}
			}
		}
	}

	/* Navigation events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: State = Select(Event.To, State);
						case CMlScriptEvent::EMenuNavAction::Action2: State = Select(Event.To, State);
						case CMlScriptEvent::EMenuNavAction::Cancel: State = Cancel(State);
						default: Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}") || {{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_MouseOnly}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(Event.To, State);
						case CMlScriptEvent::Type::MouseOver: Focus(Event.From, Event.To);
						case CMlScriptEvent::Type::MouseOut: {
							if (Event.From != Null && Event.From.Id == State.Controls.Button_Refresh.Id) {
								Focus(Event.From, Event.To);
							}
						}
					}
				}
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background") {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: {{{Router::P}}}PushParent(This);
			}
		}
	}

	/* Events NavigationTabs */
	foreach (Event in {{{NavigationTabs::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{NavigationTabs::P}}}C_EventType_Update: {
				if (!{{{NavigationTabs::P}}}IsAvailableTab(State.Controls.Frame_NavigationTabs, State.CurrentTypeScrollSteps)) {
					State = SelectStepsScroll(State, {{{NavigationTabs::P}}}GetCurrentTab(State.Controls.Frame_NavigationTabs));
				}
			}
			case {{{NavigationTabs::P}}}C_EventType_Select: {
				if (Event.Frame_NavigationTabs.ControlId == State.Controls.Frame_NavigationTabs.ControlId) {
					State = SelectStepsScroll(State, Event.CurrentTab);
				}
			}
		}
	}

	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null) {
			if (Event.Scroll.Id == State.Controls.Scroll_Steps.Id) {
				switch (Event.Type) {
					case {{{Scroll::P}}}C_EventType_Cancel: State = Cancel(State);
					case {{{Scroll::P}}}C_EventType_Select: {
						if (State.CurrentTypeScrollSteps == C_TabIndex_PreviousSteps && State.EventDetails.Type != C_Type_CompetitionExternal && State.PreviousSteps.existskey(Event.ToKey)) {
							if (State.PreviousSteps[Event.ToKey].QualifierId != {{{CompetitionStruct::P}}}C_QualifierChallenge_NullId) {
								State.PastQualifierId = State.PreviousSteps[Event.ToKey].QualifierId;
								{{{Scroll::P}}}ScrollToElement(This, State.Controls.Scroll_Ranking, 0, True);
								State.Controls.Frame_EventInfo.Hide();
								{{{LoadingSpinner::P}}}StartAnimation(This, State.Controls.Frame_LoadingSpinner);
								State.RankingsPager.NeedUpdate = True;
								State.IsPastQualifier = True;
							} else if (State.PreviousSteps[Event.ToKey].RoundId != {{{CompetitionStruct::P}}}C_Round_NullId) {
								{{{Scroll::P}}}ScrollToElement(This, State.Controls.Scroll_RoundMatches, 0, True);
								State.PastRoundName = State.PreviousSteps[Event.ToKey].Name;
								State.PastRoundId = State.PreviousSteps[Event.ToKey].RoundId;
								State.PastRoundNbMatches = State.PreviousSteps[Event.ToKey].NbMatches;
								State.RoundMatchesPager.NeedUpdate = True;
							}
						}
					}
					case {{{Scroll::P}}}C_EventType_Focus: {
						if (Event.From != Null) FocusStep(Event.From, False);
						if (Event.To != Null) {
							FocusStep(Event.To, True);
						}
						if (Event.IsMouse && Event.To != Null && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Event.Scroll);
						}
					}
					case {{{Scroll::P}}}C_EventType_Update: {
						foreach (Key => Frame_Element in Event.ElementsVisible) {
							declare K_Round[] Steps = [];
							if (State.CurrentTypeScrollSteps == C_TabIndex_RemainingSteps) {
								Steps = State.NextSteps;
							} else {
								Steps = State.PreviousSteps;
							}
							if (Steps.existskey(Key)) {
								declare Text Dates = "";
								if (State.CurrentTypeScrollSteps == C_TabIndex_RemainingSteps) {
									if (State.EventDetails.Type == C_Type_CompetitionDefault && Key > 0) {
										//L16N Indicate that the next round begins at the end of the previous round
										Dates = _("When the previous round is over");
									} else if (State.EventDetails.Type == C_Type_CompetitionManual || State.EventDetails.Type == C_Type_CompetitionExternal || (State.EventDetails.Type == C_Type_CompetitionDefault && Key == 0)) {
										if (TimeLib::FormatDate(Steps[Key].Start, TimeLib::EDateFormats::Date) == TimeLib::FormatDate(Steps[Key].End, TimeLib::EDateFormats::Date)) {
											declare Text Day = TimeLib::FormatDate(Steps[Key].Start, TimeLib::EDateFormats::Date);
											declare Text StartHour = TimeLib::FormatDate(Steps[Key].Start, TimeLib::EDateFormats::TimeShort);
											declare Text EndHour = TimeLib::FormatDate(Steps[Key].End, TimeLib::EDateFormats::TimeShort);
											Dates = Day ^ " | " ^ TL::GetTranslatedText(TL::Compose("{{{Text_FromHourToHour}}}", StartHour, EndHour));
										} else {
											declare Text StartDate = TimeLib::FormatDate(Steps[Key].Start, TimeLib::EDateFormats::Date)^" | "^TimeLib::FormatDate(Steps[Key].Start, TimeLib::EDateFormats::TimeShort);
											declare Text EndDate = TimeLib::FormatDate(Steps[Key].End, TimeLib::EDateFormats::Date)^" | "^TimeLib::FormatDate(Steps[Key].End, TimeLib::EDateFormats::TimeShort);
											Dates = TL::GetTranslatedText(TL::Compose("{{{Text_FromDateToDate}}}", StartDate, EndDate));
										}
									}
								}
								ShowStep(Frame_Element, Steps[Key].Name, Dates, (State.EventDetails.Type != C_Type_CompetitionExternal && State.CurrentTypeScrollSteps == C_TabIndex_PreviousSteps));
								if (State.EventDetails.Type == C_Type_CompetitionExternal && TimeLib::Compare(State.EventDetails.EndDate, TimeLib::GetCurrent()) < 0 || State.EventDetails.Rounds[State.EventDetails.Rounds.count - 1].Status == C_Status_RoundCompleted) FocusStep(Frame_Element, False);
							} else {
								HideStep(Frame_Element);
							}
						}
						foreach (Key => Frame_Element in Event.ElementsHidden) {
							HideStep(Frame_Element);
						}
						LockScroll(State.Controls.Scroll_Steps, State.IndexCurrentStep != C_IndexStep_Info);
					}
					case {{{Scroll::P}}}C_EventType_ReachLimit: {
						if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Up && !{{{Navigation::P}}}IsLocked(State.Controls.Checkbox_Rules)) {
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Checkbox_Rules);
						} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Up && !{{{Navigation::P}}}IsLocked(State.Controls.Button_Club)) {
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Club);
						} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Up && !{{{Navigation::P}}}IsLocked(State.Controls.Button_EventName)) {
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_EventName);
						} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Down && !{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Back);
						} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Left && !{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Back);
						}
					}
					case {{{Scroll::P}}}C_EventType_NavAction: {
						if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Action2) {
							State = Select(State.Controls.Button_Refresh, State);
						}
					}
				}
			}
			if (Event.Scroll.Id == State.Controls.Scroll_ServerList.Id) {
				switch (Event.Type) {
					case {{{Scroll::P}}}C_EventType_Cancel: State = Cancel(State);
					case {{{Scroll::P}}}C_EventType_Select: {
						declare Text JoinLink = TL::Replace(State.EventDetails.CurrentQualifierChallenge.Servers[Event.ToKey].JoinLink, "#join", "#qjoin");
						if (JoinLink != "") {
							State.PlayPrivilegeCheck = K_PlayPrivilegeCheck {
								PrivilegeCheck = Privileges::Check_DestroyAndCreate(
									State.PlayPrivilegeCheck.PrivilegeCheck,
									PrivilegeMgr,
									MainUser::GetMainUserId(),
									CPrivilegeMgr::EPrivilege::PlayMultiplayerSessionWithUGC
								),
								JoinLink = JoinLink
							};
						} else {
							State.Controls.Label_InfoStateCompetition.Hide();
							//L16N [Online] Message displayed when there is no joinlink to join a server.
							State.Controls.Label_Error.Value = _("Servers are offline or in maintenance, please try again later.");
						}
					}
					case {{{Scroll::P}}}C_EventType_Focus: {
						if (Event.From != Null) FocusServer(Event.From, False);
						if (Event.To != Null) {
							FocusServer(Event.To, True);
						}
						if (Event.IsMouse && Event.To != Null && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Event.Scroll);
						}
					}
					case {{{Scroll::P}}}C_EventType_Update: {
						foreach (Key => Frame_Element in Event.ElementsVisible) {
							if (State.EventDetails.CurrentQualifierChallenge.Servers.existskey(Key)) {
								ShowServer(Frame_Element, State.EventDetails.CurrentQualifierChallenge.Servers[Key].Position);
							} else {
								HideServer(Frame_Element);
							}
						}
						foreach (Key => Frame_Element in Event.ElementsHidden) {
							HideServer(Frame_Element);
						}
						LockScroll(State.Controls.Scroll_ServerList, State.IndexCurrentStep != C_IndexStep_Qualify);
					}
					case {{{Scroll::P}}}C_EventType_ReachLimit: {
						switch (Event.NavAction) {
							case CMlScriptEvent::EMenuNavAction::Up: {
								if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Club)) {
									Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Club);
								}
							}
							case CMlScriptEvent::EMenuNavAction::Down, CMlScriptEvent::EMenuNavAction::Left: {
								if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
									Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Back);
								}
							}
						}
					}
				}
			}
			if (Event.Scroll.Id == State.Controls.Scroll_Ranking.Id) {
				switch (Event.Type) {
					case {{{Scroll::P}}}C_EventType_Cancel: State = Cancel(State);
					case {{{Scroll::P}}}C_EventType_Select: {
						switch (State.IndexCurrentStep) {
							case C_IndexStep_QualifyRanking: {
								if (State.RankingsPager.Results.existskey(Event.ToKey)) {
									State = DisplayProfile(State, State.RankingsPager.Results[Event.ToKey].AccountId, True);
								}
							}
							case C_IndexStep_CompetitionRanking: {
								if (State.LeaderBoardPager.Results.existskey(Event.ToKey)) {
									State = DisplayProfile(State, State.LeaderBoardPager.Results[Event.ToKey].AccountId, True);
								}
							}
							case C_IndexStep_MatchResults: {
								if (State.MatchResultsPager.Results.existskey(Event.ToKey)) {
									State = DisplayProfile(State, State.MatchResultsPager.Results[Event.ToKey].AccountId, True);
								}
							}
						}
					}
					case {{{Scroll::P}}}C_EventType_Focus: {
						if (Event.From != Null) FocusRanking(Event.From, False);
						if (Event.To != Null) {
							FocusRanking(Event.To, True);
						}
						if (Event.IsMouse && Event.To != Null && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Event.Scroll);
						}
					}
					case {{{Scroll::P}}}C_EventType_Update: {
						switch (State.IndexCurrentStep) {
							case C_IndexStep_QualifyRanking: {
								if (State.RankingsPager.CurrentPage != Event.Page) {
									State.RankingsPager.CurrentPage = Event.Page;
									State.RankingsPager.NeedUpdate = True;
									if (State.RankingsPager.NextPageLoadTime < 0 || Now >= State.RankingsPager.NextPageLoadTime + C_DelayBetweenRequest) {
										State.RankingsPager.NextPageLoadTime = Now;
									} else {
										State.RankingsPager.NextPageLoadTime = Now + C_DelayBetweenRequest;
									}
								}
								foreach (Key => Frame_Element in Event.ElementsVisible) {
									if (State.RankingsPager.Results.existskey(Key) && State.RankingsPager.Results[Key].DisplayName != "") {
										declare Top = State.RankingsPager.Results[Key];
										declare Text Score = "-";
										if (Top.Score != 0) {
											if (State.ChallengeDetails.ScoreUnit == {{{CompetitionStruct::P}}}C_ScoreUnit_Time) {
												Score = TL::TimeToText(Top.Score, True, True);
											} else if (State.ChallengeDetails.ScoreUnit == {{{CompetitionStruct::P}}}C_ScoreUnit_Rank_Only) {
												Score = "";												
											} else {
												Score = TL::ToText(Top.Score);
											}
										}
										declare Text Rank = "-";
										if (Top.Rank != 0) Rank = TL::ToText(Top.Rank);
										ShowRanking(Frame_Element, Rank, Top.DisplayName, Score, Tools::GetCountryPath(Top.Zone, Config::Get().DefaultMasterZone));
									} else {
										ShowRankingLoading(Frame_Element, Key+1);
									}
									foreach (Key => Frame_Element in Event.ElementsHidden) {
										HideRanking(Frame_Element);
									}
								}
							}
							case C_IndexStep_CompetitionRanking: {
								if (State.LeaderBoardPager.CurrentPage != Event.Page) {
									State.LeaderBoardPager.CurrentPage = Event.Page;
									State.LeaderBoardPager.NeedUpdate = True;
									if (State.LeaderBoardPager.NextPageLoadTime < 0 || Now >= State.LeaderBoardPager.NextPageLoadTime + C_DelayBetweenRequest) {
										State.LeaderBoardPager.NextPageLoadTime = Now;
									} else {
										State.LeaderBoardPager.NextPageLoadTime = Now + C_DelayBetweenRequest;
									}
								}
								foreach (Key => Frame_Element in Event.ElementsVisible) {
									if (State.LeaderBoardPager.Results.existskey(Key) && State.LeaderBoardPager.Results[Key].DisplayName != "") {
										declare Top = State.LeaderBoardPager.Results[Key];
										declare Text Score = "-";
										if (Top.Score != 0) Score = TL::ToText(Top.Score);
										declare Text Rank = "-";
										if (Top.Rank != 0) Rank = TL::ToText(Top.Rank);
										ShowRanking(Frame_Element, Rank, Top.DisplayName, Score, Tools::GetCountryPath(Top.Zone, Config::Get().DefaultMasterZone));
									} else {
										ShowRankingLoading(Frame_Element, Key+1);
									}
									foreach (Key => Frame_Element in Event.ElementsHidden) {
										HideRanking(Frame_Element);
									}
								}
							}
							case C_IndexStep_MatchResults: {
								if (State.MatchResultsPager.CurrentPage != Event.Page) {
									State.MatchResultsPager.CurrentPage = Event.Page;
									State.MatchResultsPager.NeedUpdate = True;
									if (State.MatchResultsPager.NextPageLoadTime < 0 || Now >= State.MatchResultsPager.NextPageLoadTime + C_DelayBetweenRequest) {
										State.MatchResultsPager.NextPageLoadTime = Now;
									} else {
										State.MatchResultsPager.NextPageLoadTime = Now + C_DelayBetweenRequest;
									}
								}
								foreach (Key => Frame_Element in Event.ElementsVisible) {
									if (State.MatchResultsPager.Results.existskey(Key) && State.MatchResultsPager.Results[Key].DisplayName != "") {
										declare Top = State.MatchResultsPager.Results[Key];
										declare Text Score = "-";
										if (Top.Score != 0) {
											if (State.MatchResultsScoreUnit == {{{CompetitionStruct::P}}}C_ScoreUnit_Time) {
												Score = TL::TimeToText(Top.Score, True, True);
											} else {
												Score = TL::ToText(Top.Score);
											}
										}
										declare Text Rank = "-";
										if (Top.Rank != 0) Rank = TL::ToText(Top.Rank);
										ShowRanking(Frame_Element, Rank, Top.DisplayName, Score, Tools::GetCountryPath(Top.Zone, Config::Get().DefaultMasterZone));
									} else {
										ShowRankingLoading(Frame_Element, Key+1);
									}
									foreach (Key => Frame_Element in Event.ElementsHidden) {
										HideRanking(Frame_Element);
									}
								}
							}
						}
						foreach (Key => Frame_Element in Event.ElementsHidden) {
							Frame_Element.Hide();
						}
						LockScroll(State.Controls.Scroll_Ranking, (
							State.IndexCurrentStep != C_IndexStep_QualifyRanking && 
							State.IndexCurrentStep != C_IndexStep_MatchResults && 
							State.IndexCurrentStep != C_IndexStep_CompetitionRanking
						));
					}
					case {{{Scroll::P}}}C_EventType_ReachLimit: {
						switch (Event.NavAction) {
							case CMlScriptEvent::EMenuNavAction::Up: {
								if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Club)) {
									Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Club);
								}
							}
							case CMlScriptEvent::EMenuNavAction::Down, CMlScriptEvent::EMenuNavAction::Left: {
								if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
									Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Back);
								}
							}
						}
					}
				}
			}	else if (Event.Scroll.Id == State.MyMatchs.Scroll_ListMatchs.Id) {
				switch (Event.Type) {
					case {{{Scroll::P}}}C_EventType_Cancel: State = Cancel(State);
					case {{{Scroll::P}}}C_EventType_Select: {
						if (State.MyMatchs.EventMatches.existskey(Event.ToKey)) {
							declare {{{CompetitionStruct::P}}}K_PlayerNextMatch Match = State.MyMatchs.EventMatches[Event.ToKey];
							if (!Match.IsServerStarted) {
								continue;
							}
							declare Text JoinLink;
							if (Match.IsSpectator) JoinLink = TL::Replace(Match.JoinLink, "#join", "#qspectate");
							else JoinLink = TL::Replace(Match.JoinLink, "#join", "#qjoin");
							if (JoinLink != "") {
								State.PlayPrivilegeCheck = K_PlayPrivilegeCheck {
									PrivilegeCheck = Privileges::Check_DestroyAndCreate(
										State.PlayPrivilegeCheck.PrivilegeCheck,
										PrivilegeMgr,
										MainUser::GetMainUserId(),
										CPrivilegeMgr::EPrivilege::PlayMultiplayerSessionWithUGC
									),
									JoinLink = JoinLink
								};
							} else {
								State.Controls.Label_InfoStateCompetition.Hide();
								//L16N [Online] Message displayed when there is no joinlink to join a server.
								State.Controls.Label_Error.Value = (_("Servers are offline or in maintenance, please try again later."));
							}
						}
					}
					case {{{Scroll::P}}}C_EventType_Focus: {
						if (Event.From != Null) FocusMatch(Event.From, False);
						if (Event.To != Null) {
							FocusMatch(Event.To, True);
						}
						if (Event.IsMouse && Event.To != Null && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Event.Scroll);
						}
					}
					case {{{Scroll::P}}}C_EventType_Update: {
						foreach (Key => Frame_Element in Event.ElementsVisible) {
							if (State.MyMatchs.EventMatches.existskey(Key)) {
								ShowMatch(Frame_Element, State.MyMatchs.EventMatches[Key]);
							} else {
								HideMatch(Frame_Element);
							}
						}
						foreach (Frame_Element in Event.ElementsHidden) {
							HideMatch(Frame_Element);
						}
						LockScroll(State.MyMatchs.Scroll_ListMatchs, State.IndexCurrentStep != C_IndexStep_Matches);
					}
					case {{{Scroll::P}}}C_EventType_ReachLimit: {
						switch (Event.NavAction) {
							case CMlScriptEvent::EMenuNavAction::Up: {
								if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Club)) {
									Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Club);
								}
							}
							case CMlScriptEvent::EMenuNavAction::Down, CMlScriptEvent::EMenuNavAction::Left: {
								if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
									Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Back);
								}
							}
						}
					}
				}
			}	else if (Event.Scroll.Id == State.Controls.Scroll_RoundMatches.Id) {
				switch (Event.Type) {
					case {{{Scroll::P}}}C_EventType_Cancel: State = Cancel(State);
					case {{{Scroll::P}}}C_EventType_Select: {
						if (State.RoundMatchesPager.Matches.existskey(Event.ToKey)) {
							{{{Scroll::P}}}ScrollToElement(This, State.Controls.Scroll_Ranking, 0, True);
							State.Controls.Frame_Round.Hide();
							{{{LoadingSpinner::P}}}StartAnimation(This, State.Controls.Frame_LoadingSpinner);
							State.MatchResultsPager.NeedUpdate = True;
							State.PastMatchId = State.RoundMatchesPager.Matches[Event.ToKey].Id;
						}
					}
					case {{{Scroll::P}}}C_EventType_Focus: {
						if (Event.From != Null) FocusRoundMatch(Event.From, False);
						if (Event.To != Null) {
							FocusRoundMatch(Event.To, True);
						}
						if (Event.IsMouse && Event.To != Null && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Event.Scroll);
						}
					}
					case {{{Scroll::P}}}C_EventType_Update: {
						if (State.RoundMatchesPager.CurrentPage != Event.Page) {
							State.RoundMatchesPager.CurrentPage = Event.Page;
							State.RoundMatchesPager.NeedUpdate = True;
							if (State.RoundMatchesPager.NextPageLoadTime < 0 || Now >= State.RoundMatchesPager.NextPageLoadTime + C_DelayBetweenRequest) {
								State.RoundMatchesPager.NextPageLoadTime = Now;
							} else {
								State.RoundMatchesPager.NextPageLoadTime = Now + C_DelayBetweenRequest;
							}
						}
						foreach (Key => Frame_Element in Event.ElementsVisible) {
							if (State.RoundMatchesPager.Matches.existskey(Key)) {
								ShowRoundMatch(Frame_Element, State.RoundMatchesPager.Matches[Key].Name, State.RoundMatchesPager.Matches[Key].LocalUserParticipation, State.RoundMatchesPager.Matches[Key].IsCompleted);
							} else {
								ShowMatchLoading(Frame_Element); 
							}
							foreach (Key => Frame_Element in Event.ElementsHidden) {
								HideRoundMatch(Frame_Element);
							}
						}
						LockScroll(State.Controls.Scroll_RoundMatches, State.IndexCurrentStep != C_IndexStep_PastRound);
					}
					case {{{Scroll::P}}}C_EventType_ReachLimit: {
						switch (Event.NavAction) {
							case CMlScriptEvent::EMenuNavAction::Up: {
								if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Club)) {
									Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Club);
								}
							}
							case CMlScriptEvent::EMenuNavAction::Down, CMlScriptEvent::EMenuNavAction::Left: {
								if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
									Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), State.Controls.Button_Back);
								}
							}
						}
					}
				}
			}
		}
	}
	if (State.RankingsPager.NeedUpdate && Now >= State.RankingsPager.NextPageLoadTime) {
		State.RankingsPager.NeedUpdate = False;
		switch (State.IndexCurrentStep) {
			case C_IndexStep_Info: {
				if (State.PastQualifierId != {{{CompetitionStruct::P}}}C_QualifierChallenge_NullId) {
					State = FetchRankingsPage(State, State.PastQualifierId);
				}
			}
			case C_IndexStep_Qualify: {
				if (State.EventDetails.CurrentQualifierChallenge.Id != {{{CompetitionStruct::P}}}C_QualifierChallenge_NullId) {
					State = FetchRankingsPage(State, State.EventDetails.CurrentQualifierChallenge.Id);
				}
			}
			case C_IndexStep_QualifyRanking: {
				if (State.PastQualifierId != {{{CompetitionStruct::P}}}C_QualifierChallenge_NullId) {
					State = FetchRankingsPage(State, State.PastQualifierId);
				}	else if (State.EventDetails.CurrentQualifierChallenge.Id != {{{CompetitionStruct::P}}}C_QualifierChallenge_NullId) {
					State = FetchRankingsPage(State, State.EventDetails.CurrentQualifierChallenge.Id);
				}
			}
		}		
	}
	if (State.LeaderBoardPager.NeedUpdate && Now >= State.LeaderBoardPager.NextPageLoadTime) {
		State.LeaderBoardPager.NeedUpdate = False;
		State = FetchLeaderBoardPage(State);
	}
	if (State.RoundMatchesPager.NeedUpdate && Now >= State.RoundMatchesPager.NextPageLoadTime) {
		State.RoundMatchesPager.NeedUpdate = False;
		if (State.PastRoundId != {{{CompetitionStruct::P}}}C_Round_NullId) State = FetchRoundMatchesPage(State, State.PastRoundId);
	}
	if (State.MatchResultsPager.NeedUpdate && Now >= State.MatchResultsPager.NextPageLoadTime) {
		State.MatchResultsPager.NeedUpdate = False;
		if (State.PastMatchId != {{{CompetitionStruct::P}}}C_Match_NullId) State = FetchMatchResultsPage(State, State.PastMatchId);
	}

	/* Profile player info events */
	foreach (Event in {{{ProfilePlayerInfo::P}}}PendingEvents) {
		switch (Event.Type) {
			case {{{ProfilePlayerInfo::P}}}C_EventType_Close: {
				State = DisplayProfile(State, "", False);
			}
		}
	}

	// Check play privilege
	if (!Privileges::Check_IsComplete(State.PlayPrivilegeCheck.PrivilegeCheck)) {
		State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_Update(State.PlayPrivilegeCheck.PrivilegeCheck);
		if (Privileges::Check_IsComplete(State.PlayPrivilegeCheck.PrivilegeCheck)) {
			State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlayPrivilegeCheck.PrivilegeCheck);
			if (Privileges::Check_HasPrivilege(State.PlayPrivilegeCheck.PrivilegeCheck)) {
				TitleControl::OpenLinkAndWait(This, TitleControl, State.PlayPrivilegeCheck.JoinLink, CMlScript::LinkType::ManialinkBrowser);
				State.NeedToRefresh = True;
			}
		}
	}
}

foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
	switch (Event.Type) {
		case "{{{Router::C_Event_EnteringRoute}}}": {
			ReportSystem::AddUsingId("{{{C_Name}}}");
			State = InitPager(State);
			State.Controls.Frame_EventInfo.Hide();
			State.Controls.Frame_QualificationInfo.Hide();
			State.Controls.Frame_Ranking.Hide();
			State.Controls.Frame_Matches.Hide();
			State.Controls.Label_Registered.Hide();
			State.Controls.Label_InfoStateCompetition.Hide();
			{{{Button::P}}}HideAndLock(State.Controls.Button_Refresh);
			State.Controls.ButtonIcon_Refresh.Hide();
			State.Controls.Label_InfoRanking.Hide();
			State.Controls.Frame_PlayerRank.Hide();
			State.Controls.Frame_RegistrationInfos.Hide();
			Label_Registration.Value = "";
			State.Controls.Label_EventDesc.Value = "";
			State.Controls.Label_Information.Value = "";
			State.Controls.Label_Error.Value = "";
			State.Controls.Label_InfoStateCompetition.Value = "";
			State.Controls.Label_InfoRanking.Value = "";
			State.PreviousSteps = [];
			State.NextSteps = [];
			State.CurrentTypeScrollSteps = C_TabIndex_RemainingSteps;
			State.NeedToRefresh = False;
			State.RulesAccepted = False;
			State.IndexCurrentStep = C_IndexStep_Info;
			{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_Club);
			{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_Register);
			{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_Qualify);
			{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_Ranking);
			{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_MyMatches);
			{{{ExpendableButton::P}}}HideAndLock(State.Controls.Button_Leaderboard);
			State.RefreshTime = TL::ToInteger(TimeLib::GetCurrent()) + C_DelayToRefresh;
			{{{Button::P}}}SetValue(This, State.Controls.Button_Refresh, TimeLib::FormatDelta(TimeLib::GetCurrent(), ""^State.RefreshTime, TimeLib::EDurationFormats::Abbreviated));
			State.QualifTime = "";
			State.RoundTime = "";
			{{{Checkbox::P}}}SetValue(This, State.Controls.Checkbox_Rules, "");
			{{{Checkbox::P}}}Check(This, State.Controls.Checkbox_Rules, False);
			{{{Navigation::P}}}Lock(State.Controls.Checkbox_Rules, True);
			UpdateControllerInfo();
			if (Http::IsInitialized(State.GetEventDetailsRequest)) {
				State.GetEventDetailsRequest = Http::Destroy(State.GetEventDetailsRequest);
			}
			if (Http::IsInitialized(State.GetChallengeDetailsRequest)) {
				State.GetChallengeDetailsRequest = Http::Destroy(State.GetChallengeDetailsRequest);
			}
			if (Http::IsInitialized(State.GetParticipantChallengeDetailsRequest)) {
				State.GetParticipantChallengeDetailsRequest = Http::Destroy(State.GetParticipantChallengeDetailsRequest);
			}
			if (Http::IsInitialized(State.GetClubDetailsRequest)) {
				State.GetClubDetailsRequest = Http::Destroy(State.GetClubDetailsRequest);
			}
			if (Http::IsInitialized(State.RegisterRequest)) {
				State.RegisterRequest = Http::Destroy(State.RegisterRequest);
			}
			if (Http::IsInitialized(State.MyMatchs.RequestGetCurrentMatch)) {
				State.MyMatchs.RequestGetCurrentMatch = Http::Destroy(State.MyMatchs.RequestGetCurrentMatch);
			}
			if (Http::IsInitialized(State.GetLeaderBoardRequest)) {
				State.GetLeaderBoardRequest = Http::Destroy(State.GetLeaderBoardRequest);
			}
			if (Http::IsInitialized(State.GetParticipantLeaderboardRequest)) {
				State.GetParticipantLeaderboardRequest = Http::Destroy(State.GetParticipantLeaderboardRequest);
			}			
			if (Http::IsInitialized(State.GetRoundMatchesRequest)) {
				State.GetRoundMatchesRequest = Http::Destroy(State.GetRoundMatchesRequest);
			}
			if (Http::IsInitialized(State.GetMatchResultsRequest)) {
				State.GetMatchResultsRequest = Http::Destroy(State.GetMatchResultsRequest);
			}	
			if (Http::IsInitialized(State.GetParticipantMatchResultsRequest)) {
				State.GetParticipantMatchResultsRequest = Http::Destroy(State.GetParticipantMatchResultsRequest);
			}
			if (Http::IsInitialized(State.GetClubMemberRequest)) {
				State.GetClubMemberRequest = Http::Destroy(State.GetClubMemberRequest);
			}
			State.MyMatchs.EventMatches = [];
			State.EventDetails = {{{CompetitionStruct::P}}}GetEmptyClubCompetition();
			declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);
			declare Integer ClubId = {{{ClubStruct::P}}}C_ClubNullId;
			if (Query.existskey("{{{RoutePaths::C_Query_ClubCompetitionShort}}}")) {
				declare {{{CompetitionStruct::P}}}K_ClubCompetitionShort ClubCompetitionShort;
				ClubCompetitionShort.fromjson(Query["{{{RoutePaths::C_Query_ClubCompetitionShort}}}"]);
				
				State.ActivityId = ClubCompetitionShort.ActivityId;
				State.ActivityName = ClubCompetitionShort.Name;
				{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_EventName, State.ActivityName);
				State.Controls.Quad_EventLogo.ImageUrl = ClubCompetitionShort.LogoUrl;
				ClubId = ClubCompetitionShort.ClubId;
				State.GetEventDetailsRequest = CompetitionAPI::GetCompetitionFromId(ClubCompetitionShort.ActivityId);
				State.GetClubMemberRequest = ClubAPI::GetClubMemberWithId(ClubId, LocalUser.WebServicesUserId);
				{{{LoadingSpinner::P}}}StartAnimation(This, State.Controls.Frame_LoadingSpinner);
			} else if (Query.existskey("{{{RoutePaths::C_Query_Activity}}}")) {
				declare {{{ClubStruct::P}}}K_Activity Activity; 
				Activity.fromjson(Query["{{{RoutePaths::C_Query_Activity}}}"]);

				State.ActivityId = Activity.Id;
				State.ActivityName = Activity.Name;
				{{{ExpendableButton::P}}}SetText(This, State.Controls.Button_EventName, State.ActivityName);
				State.Controls.Quad_EventLogo.ImageUrl = Activity.MediaUrl;
				ClubId = Activity.ClubId;
				State.GetEventDetailsRequest = CompetitionAPI::GetCompetitionFromId(State.ActivityId);
				State.Member = {{{ClubStore::P}}}GetUserCurrentClubMembership();
				{{{LoadingSpinner::P}}}StartAnimation(This, State.Controls.Frame_LoadingSpinner);
			} else {
				{{{Router::P}}}PushParent(This);
			}
			if (Query.existskey("{{{RoutePaths::C_Query_Club}}}")) {
				State.Club.fromjson(Query["{{{RoutePaths::C_Query_Club}}}"]);
				OnClubReceived(State);
			} else if (ClubId != {{{ClubStruct::P}}}C_ClubNullId) {
				State.GetClubDetailsRequest = ClubAPI::GetClub(ClubId);
			}

			if (State.ActivityId != {{{ClubStruct::P}}}C_ActivityNullId) {
				SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", [State.ActivityName]);

				ReportSystem::AddData(
					ReportStruct::C_ReportTarget_Activity,
					ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.ActivityName],
						Ids = [TL::ToText(State.ActivityId)],
						Contexts = [["From" => "Menu EventDetails"]]
					}
				);
			}	
		}
		case "{{{Router::C_Event_LeavingRoute}}}": {
			State.PlayPrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlayPrivilegeCheck.PrivilegeCheck);
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Steps, 0);
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_ServerList, 0);
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_Ranking, 0);
			{{{Scroll::P}}}SetElementsTotal(This, State.MyMatchs.Scroll_ListMatchs, 0);
			{{{Scroll::P}}}SetElementsTotal(This, State.Controls.Scroll_RoundMatches, 0);
			State = DisplayProfile(State, "", False);
			ReportSystem::RemoveUsingId("{{{C_Name}}}");
		}
	}
}

if (State.NeedToRefresh) {
	State.NeedToRefresh = False;
	TitleControl::WaitIsReady(TitleControl);
	State.RefreshTime = TL::ToInteger(TimeLib::GetCurrent()) + C_DelayToRefresh;
	if (Http::IsInitialized(State.GetEventDetailsRequest)) {
		State.GetEventDetailsRequest = Http::Destroy(State.GetEventDetailsRequest);
	}
	State.GetEventDetailsRequest = CompetitionAPI::GetCompetitionFromId(State.ActivityId);
}
***
""",
[
	Button::ComponentV2(),
	ButtonIcon::ComponentV2(),
	Checkbox::ComponentV2(),
	ClubStore::ComponentV2(),
	CompetitionStruct::Component(),
	ExpendableAsset::ComponentV2(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	NavigationTabs::ComponentV2(),
	PopUpBackground::ComponentV2(),
	ProfilePlayerInfo::Component(),
	Router::ComponentV2(),
	Scroll::ComponentV2(),
	Transition::ComponentV2(),
	UserStore::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}