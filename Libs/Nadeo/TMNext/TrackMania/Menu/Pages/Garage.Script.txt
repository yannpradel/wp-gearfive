/** 
 *	Page: Garage
 */
#Const Version		"2023-06-16"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/Garage.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/MenuLibs/Common/Components/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Slider.Script.txt" as Slider
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/API/BrowserAPI.Script.txt" as BrowserAPI
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Checkbox.Script.txt" as Checkbox
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpPrestigeCompletion.Script.txt" as PopUpPrestigeCompletion
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/TitleBar2.Script.txt" as TitleBar
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/TMNext/TrackMania/UbisoftChallenges.Script.txt" as UbisoftChallenges
#Include "MathLib" as ML
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_Garage"
#Const C_NavGroup_Default "navgroup-page-garage-default"
#Const C_NavGroup_MouseOnly "navgroup-page-garage-mouse-only"
#Const C_NavGroup_Global "navgroup-page-garage-global"

#Const C_Class_DeleteSkinButton "class-page-garage-delete-skin-button"
#Const C_Class_MySkinsButton "class-page-garage-my-skins-button"
#Const C_Class_MySkinsPager "class-page-garage-my-skins-pager"
#Const C_Class_PrestigeInfo "class-page-garage-prestige-info"
#Const C_Class_Filter "class-page-garage-filter"
#Const C_Class_Option "class-page-garage-option"

#Const Const::C_ImageUrl_Profile_Background as C_BackgroundImageUrl

#Const C_Delay_Events 150	//< Delay before triggering the TitleBar::C_EventType_TabUpdate event after a tab update
#Const C_Delay_FilterPrestige 1000 //< Delay before refreshing the prestige list after a filter update
#Const C_Delay_SceneRefresh 150	//< Delay before refreshing the displayed skin after a focus
#Const C_Delay_PilotColorRefresh 50	//< Delay before refreshing the pilot light color after changing it

#Const C_FilterShift_Previous -1
#Const C_FilterShift_Null 0
#Const C_FilterShift_Next 1

#Const C_Filter_Year 0
#Const C_Filter_Mode 1
#Const C_Filter_CategoryType 2
#Const C_Filter_Names [
	//L16N [Garage] Filter prestige skins by year
	0 => _("|PrestigeFilter|Year"),
	//L16N [Garage] Filter prestige skins by game mode (Ranked, Official season, Royal etc.)
	1 => _("|PrestigeFilter|Mode"),
	//L16N [Garage] Filter prestige skins by type (e.g. "Crocodile" for Royal mode)
	2 => _("|PrestigeFilter|Type")
]

#Const C_Option_Morphology 0
#Const C_Option_FavoriteColor 1
#Const C_Option_DefaultSkin 2
#Const C_Option_Names [
	//L16N [Garage] Choose the morphology of your pilot
	0 => _("|Pilot Option|Morphology"),
	//L16N [Garage] Color used in multiple ingame situations such as the trails left by the car, the pilot lights or the podium sparkles
	1 => _("Favorite color"),
	//L16N [Garage] Use the default pilot black skin instead of the country and regional skin
	2 => _("|Pilot Option|Default pilot skin")
]

#Const C_OptionShift_Previous -1
#Const C_OptionShift_Null 0
#Const C_OptionShift_Next 1
#Const C_OptionShift_Checkbox 2

#Const C_ScrollView_Grid "grid"
#Const C_ScrollView_List "list"

#Const C_Carousel_Previous -1
#Const C_Carousel_Refresh 0
#Const C_Carousel_Next 1

#Const C_Row_Create 0
#Const C_Row_Edit 1
#Const C_Row_Upload 2
#Const C_Row_Reset 3

#Const C_Choice_Cancel 0
#Const C_Choice_Remove 1
#Const C_Choices_RemoveSkin [
	//L16N [Garage] Do not remove the skin
	0 => _("Cancel"),
	//L16N [Garage] Confirm the favorite skin removal
	1 => _("Remove")
]

#Const C_Choice_Confirm 1
#Const C_Choices_ResetSkin [
	//L16N [Garage] Do not reset the skin
	0 => _("Cancel"),
	//L16N [Garage] Confirm the skin reset
	1 => _("Confirm")
]

#Const C_Tab_Prestige 0
#Const C_Tab_MySkins 1
#Const C_Tab_ClubSkins 2
#Const C_Tab_Pilot 3
#Const C_TabNames [
	//L16N [Garage] Title of the tab displaying the prestige skins earned by the player.
	0 => _("Prestige"),
	//L16N [Garage] Title of the tab displaying the player skins.
	1 => _("My skins"),
	//L16N [Garage] Title of the tab displaying the club skins.
	2 => _("Club skins"),
	//L16N [Garage] Title of the tab displaying the pilot options
	3 => _("Pilot")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Text Text_Apply = _("Apply");
	declare Text Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [Garage] Title of the garage page.
	declare Text Text_Garage = _("Garage");
	//L16N [Garage] Select a value in a list of filters.
	declare Text Text_SelectValue = _("Select value");
	//L16N [Garage] Text displayed to indicate to the player that they can show locked prestige skins.
	declare Text Text_ShowLockedPrestige = _("Show locked");
	//L16N [Garage] Text displayed to indicate to the player that they can hide locked prestige skins.
	declare Text Text_HideLockedPrestige = _("Hide locked");
	//L16N [Garage] Text displayed when there is no uploaded skins.
	declare Text Text_NoFavorites = _("No skins added to your collection yet.");
	//L16N [Garage] Text displayed when there is no prestige skins.
	declare Text Text_NoPrestiges = _("You haven't unlocked any prestige skin yet");
	//L16N [Garage] Text of the button to upload a skin.
	declare Text Text_Upload = _("Upload skin");
	//L16N [Garage] Text of the button to create a skin.
	declare Text Text_Create = _("Create skin");
	//L16N [Garage] Text of the button to edit a skin.
	declare Text Text_Edit = _("Edit skin");
	//L16N [Garage] Text of the button to reset to region skin.
	declare Text Text_Reset = _("Reset skin");
	//L16N [Garage] Title of the pop-up displayed the first time a player is able to combine prestiges and skins.
	declare Text Text_CombinePrestigeAndSkins = _("Combine prestige and skins");
	//L16N [Garage] Text displayed when the browser is opened for a skin selection.
	declare Text Text_SkinSelection = _("Select a skin");
	//L16N [Garage] Text displayed while retrieving prestige skins earned by the player.
	declare Text Text_RetrievingPrestige = _("Retrieving prestige skins...");
	//L16N [Garage] Text displayed while retrieving favorite skins.
	declare Text Text_RetrievingFavoriteSkins = _("Retrieving favorite skins...");
	//L16N [Garage] Text displayed while uploading the selected skin.
	declare Text Text_UploadingSkin = _("Uploading your skin...");
	//L16N [Garage] Text displayed while applying the selected prestige skin.
	declare Text Text_ApplyingPrestige = _("Pimping your car...");
	//L16N [Garage] Text displayed while applying selected skin.
	declare Text Text_ApplyingSkin = _("Painting your car...");
	//L16N [Garage] Text displayed while removing selected skin from favorites.
	declare Text Text_RemovingSkin = _("Removing skin from favorites...");
	//L16N [Garage] Title of the pop-up displayed when the player wants to remove a skin from their favorites.
	declare Text Text_RemoveTitle = _("Remove skin");
	//L16N [Garage] Retrieving text for club skins.
	declare Text Text_RetrievingClubSkins = _("Retrieving club skins...");
	//L16N [Garage] Text displayed when no club skins exists.
	declare Text Text_NoClubSkins = _("No club skins");
	//L16N [Garage] Text displayed when a search returns no results.
	declare Text Text_NoSearchResult = _("Your search did not return any results");
	//L16N [Garage] Display the number of skin in a club skin.
	declare Text Text_Skin = _("1 skin");
	//L16N [Garage] Display the number of skins in a club skin.
	declare Text Text_Skins = _("%1 skins");
	//L16N [Garage] Display the nickname of the user who created the skin. %1 will be replaced by the user nickname. eg: "By Alex".
	declare Text Text_AuthorName = _("By %1");
	//L16N [Garage] Indicates to the player how they obtained an official season prestige skin. %1 will be replaced by the number of medals. e.g. "15 medals in official tracks"
	declare Text Text_OfficialPrestigeStat = _("%1 medals in official tracks");
	//L16N [Garage] Indicates to the player how they can obtain an official season prestige skin. %1 will be replaced by the number of medals. e.g. "15 more medals to unlock"
	declare Text Text_OfficialPrestigeStatLocked = _("%1 more medals to unlock");
	//L16N [Garage] Indicates to the player how they obtained a ranked prestige skin.
	declare Text Text_RankedPrestigeStat = _("Rank reached during the season");
	//L16N [Garage] Indicates to the player how they can obtain a ranked prestige skin
	declare Text Text_RankedPrestigeStatLocked = _("Higher rank required to unlock");
	//L16N [Garage] Indicates to the player how they obtained an author royal prestige skin.
	declare Text Text_RoyalPrestigeStat_First = _("First place in royal");
	//L16N [Garage] Indicates to the player how they obtained a gold royal prestige skin.
	declare Text Text_RoyalPrestigeStat_Second = _("Second place in royal");
	//L16N [Garage] Indicates to the player how they obtained a silver royal prestige skin.
	declare Text Text_RoyalPrestigeStat_Third = _("Third place in royal");
	//L16N [Garage] Indicates to the player how they obtained a bronze royal prestige skin.
	declare Text Text_RoyalPrestigeStat_Fourth = _("Fourth place in royal");
	//L16N [Garage] Indicates to the player how they can obtain an author royal prestige skin.
	declare Text Text_RoyalPrestigeStatLocked_First = _("Finish in first place to unlock");
	//L16N [Garage] Indicates to the player how they can obtain a gold royal prestige skin.
	declare Text Text_RoyalPrestigeStatLocked_Second = _("Finish in second place to unlock");
	//L16N [Garage] Indicates to the player how they can obtain a silver royal prestige skin.
	declare Text Text_RoyalPrestigeStatLocked_Third = _("Finish in third place to unlock");
	//L16N [Garage] Indicates to the player how they can obtain a bronze royal prestige skin.
	declare Text Text_RoyalPrestigeStatLocked_Fourth = _("Finish in fourth place to unlock");
	//L16N [Garage] Indicates to the player that the prestige skin is not unlockable anymore.
	declare Text Text_PastPrestige = _("This prestige is not unlockable anymore");
	//L16N [Garage] Indicates to the player the prestige level. %1 will be replaced by the prestige level. e.g. "Prestige level 12"
	declare Text Text_PrestigeLevel = _("Prestige level %1");
	//L16N [Garage] Indicates to the player that only one medal is required to gain a prestige level.
	declare Text Text_NextPrestigeLevelOneMedal = _("Next level in 1 medal");
	//L16N [Garage] Indicates to the player the number of medals required to gain a prestige level. %1 will be replaced by the number of medals. e.g. "Next level in 5 medals"
	declare Text Text_NextPrestigeLevelMedals = _("Next level in %1 medals");
	//L16N [Garage] The type of morphology available for the pilot with a number, e.g. "Type 1"
	declare Text Text_MorphologyType = _("|MorphologyType|Type %1");
	// Description of the remove skin pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_Remove = [
		//L16N [Garage] Description for the pop-up displayed when the player wants to remove a skin from favorites.
		PopUpMultiChoice::CreateDescriptionPart(_("Are you sure you want to remove this skin from your favorites?"), <120., 30.>, 3., FontManager::C_GameFontSemiBold, "$t$i", <1., 1., 1.>, False)
	];
	// Description of the reset skin pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_Reset = [
		//L16N [Garage] Description for the pop-up displayed when the player wants to reset their skin to the default region skin.
		PopUpMultiChoice::CreateDescriptionPart(_("Are you sure you want to reset your skin to the default region skin?"), <120., 30.>, 3., FontManager::C_GameFontSemiBold, "$t$i", <1., 1., 1.>, False)
	];
	// Description of the prestige reset skin pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_PrestigeReset = [
		//L16N [Garage] Description for the pop-up displayed when the player wants to reset they prestige skin.
		PopUpMultiChoice::CreateDescriptionPart(_("Are you sure you want to reset your prestige skin?"), <120., 30.>, 3., FontManager::C_GameFontSemiBold, "$t$i", <1., 1., 1.>, False)
	];
	// Description of the prestige reset skin pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_CombinePrestigeAndSkins = [
		//L16N [Garage] First part of the description of the pop-up that is displayed the first time the player enables the feature to combine prestige skins and custom skins.
		PopUpMultiChoice::CreateDescriptionPart(_("You have enabled the combine feature!"), <130., 8.>, 3., FontManager::C_GameFontSemiBold, "$t$i", <1., 1., 1.>, True),
		//L16N [Garage] Second part of the description of the pop-up that is displayed the first time the player enables the feature to combine prestige skins and custom skins.
		PopUpMultiChoice::CreateDescriptionPart(_("You are now able to apply club, custom and country skins on prestige skins to show off with amazing looking cars!"), <130., 24.>, 2.5, FontManager::C_GameFontRegular, "$t$i", <1., 1., 1.>, False)
	];

	/* Titlebar */
	declare Vec2 Size_SearchBar = <60., 9.5>;
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] Actions_ResetSkinOnly = [
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Const::C_ImageUrl_Icon_Refresh, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] Actions_LockedPrestige = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Const::C_ImageUrl_Icon_Lock_Oblique, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Const::C_ImageUrl_Icon_Refresh, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Third => TitleBar::AddAction("action3", Const::C_ImageUrl_Icon_Round_Crown_256, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] Actions_UnlockedPrestige = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Const::C_ImageUrl_Icon_Lock_Open, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Const::C_ImageUrl_Icon_Refresh, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Third => TitleBar::AddAction("action3", Const::C_ImageUrl_Icon_Round_Crown_256, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	/* Camera variables */
	declare Vec2 Pos_CameraPrestige = <0., -10.5>;
	declare Vec2 Pos_CameraMySkins = <30., 12.>;
	declare Vec2 Pos_CameraPilot = <70., -20.>;

	/* Prestige info */
	declare Text ML_PrestigesInfo = "";
	for (Index, -1, 1) { //< Left skin = -1, focused skin = 0, right skin = 1
		ML_PrestigesInfo ^= """
			<frame id="frame-prestige-info-{{{Index}}}" pos="{{{Index*100}}} {{{ML::Abs(Index)*27}}}">
				<quad id="quad-prestige-locked" size="{{{15 - ML::Abs(Index)*5}}} {{{15 - ML::Abs(Index)*5}}}" pos="0 20" image="{{{Const::C_ImageUrl_Icon_Lock_Oblique}}}" colorize="FFFFFF" halign="center" valign="center" opacity="0.6" hidden="1"/>
				<quad id="quad-prestige-current" size="{{{10 - ML::Abs(Index)*5}}} {{{10 - ML::Abs(Index)*5}}}" pos="0 -1" image="{{{Const::C_ImageUrl_Icon_Validation_Oblique_256}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" halign="right" valign="bottom" opacity="0.6" hidden="1"/>
				<label id="label-prestige-name" size="{{{100 - ML::Abs(Index)*60}}} 4" class="text-extrabold" textsize="{{{5.5 - 4*ML::Abs(Index)}}}" valign="bottom" opacity="0.6"/>
				<label id="label-prestige-stat" size="{{{100 - ML::Abs(Index)*60}}} 4" class="text-regular" textsize="{{{2.5 - 2*ML::Abs(Index)}}}" valign="top" opacity="0.6"/>
				<label id="label-prestige-level" size="{{{100 - ML::Abs(Index)*60}}} 4" pos="0 {{{-6.5 + ML::Abs(Index)*3.}}}" class="text-regular" textsize="{{{1.5 - 1.25*ML::Abs(Index)}}}" opacity="0.6"/>
			</frame>
		""";
	}

	/* Prestige filter list */
	declare Text ML_Filters = "";
	declare Real FilterMargin = 1.;
	declare Integer FiltersNb = 3;
	declare Vec2 Pos_NoPrestigeLabel = <-131., 40.>;
	declare Vec2 Size_FilterBackground = <107., 7.5>;

	foreach (FilterId => FilterName in C_Filter_Names) {
		declare Vec2 Pos_FilterName = MLHelpers::SkewX(<3., -0.5>, 10.);
		declare Text UpTarget = "frame-filter-"^ML::Clamp(FilterId-1, 0, FiltersNb-1);
		declare Text DownTarget = "frame-filter-"^ML::Clamp(FilterId+1, 0, FiltersNb-1);
		if (FilterId == C_Filter_Names.count-1) DownTarget = "frame-prestiges-focus";

		ML_Filters ^= """
			<frame id="frame-filter-{{{FilterId}}}"
				pos="{{{MLHelpers::Skew(-Size_FilterBackground.X/2., -FilterId*(Size_FilterBackground.Y + FilterMargin), 10.)}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_Filter}}}"
				data-filter="{{{FilterId}}}"
				data-nav-inputs="cancel;left;right;up;down"
				data-nav-targets="_;_;_;{{{UpTarget}}};{{{DownTarget}}}"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="quad-activation-filter"
				data-nav-locked="1"
				hidden="1"
			>
				<quad id="quad-activation-filter" size="{{{Size_FilterBackground.X}}} {{{Size_FilterBackground.Y}}}" class="{{{Navigation::C_Class_ActivationZone}}}" opacity="0." valign="center" scriptevents="1" z-index="10"/>
				<label id="label-filter-name" size="{{{Size_FilterBackground.X*0.43}}} {{{Size_FilterBackground.Y}}}" pos="{{{Pos_FilterName.X}}} {{{Pos_FilterName.Y}}}" class="text-semibold" text="{{{FilterName}}}" textsize="2." opacity="0.6" halign="left" z-index="3"/>
				<frameinstance
					id="asset-left" z-index="1"
					modelid="{{{ExpendableAsset::C_Name}}}"
					data-width="{{{Size_FilterBackground.X*0.45}}}"
					data-height="{{{Size_FilterBackground.Y}}}"
					data-opacity="0.6"
					data-halign="left" data-valign="center"
					data-color="{{{ColorPalette::C_Color_DarkBlue}}}"
					data-colormode-left="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
					data-image-left="{{{Const::C_ImageUrl_Common_ButtonRounded_Start}}}"
					data-size-left="128 256"
				/>
				<frameinstance
					id="asset-right" z-index="2"
					modelid="{{{ExpendableAsset::C_Name}}}"
					pos="{{{Size_FilterBackground.X*0.45 - MLHelpers::SkewX(Size_FilterBackground.Y, 10.)}}} 0"
					data-width="{{{Size_FilterBackground.X*0.55}}}"
					data-height="{{{Size_FilterBackground.Y}}}"
					data-opacity="0.6"
					data-halign="left" data-valign="center"
					data-color="{{{ColorPalette::C_Color_GreenTwo}}}"
					data-colormode-right="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
					data-image-right="{{{Const::C_ImageUrl_Common_ButtonRounded_End}}}"
					data-size-right="128 256"
				/>
				<frameinstance
					id="button-previous-{{{FilterId}}}" pos="{{{Size_FilterBackground.X*0.46}}} 0" z-index="4"
					modelid="{{{Button::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-setting-shift="{{{C_FilterShift_Previous}}}"
					data-size="{{{Size_FilterBackground.Y*0.7}}} {{{Size_FilterBackground.Y*0.7}}}"
					data-image="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
					data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
					data-bgcolor="{{{ColorPalette::C_Color_White}}}"
					data-focuscolor="{{{ColorPalette::C_Color_White}}}"
					data-opacity="1."
					data-opacityunfocus="0.6"
					data-halign="left" data-valign="center"
					data-nav-inputs="select"
					data-nav-targets="_"
					data-nav-group="{{{C_NavGroup_MouseOnly}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
				<label id="label-filter-value" size="{{{Size_FilterBackground.X*0.35}}} {{{Size_FilterBackground.Y}}}" pos="{{{Size_FilterBackground.X*0.72}}} -0.5" class="text-semibold" textsize="2." textcolor="{{{ColorPalette::C_Color_White}}}" opacity="0.6" translate="1" z-index="3"/>
				<frameinstance
					id="button-next-{{{FilterId}}}" pos="{{{Size_FilterBackground.X*0.97}}} 0" z-index="4"
					modelid="{{{Button::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-setting-shift="{{{C_FilterShift_Next}}}"
					data-size="{{{Size_FilterBackground.Y*0.7}}} {{{Size_FilterBackground.Y*0.7}}}"
					data-image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
					data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
					data-bgcolor="{{{ColorPalette::C_Color_White}}}"
					data-focuscolor="{{{ColorPalette::C_Color_White}}}"
					data-opacity="1."
					data-opacityunfocus="0.6"
					data-halign="right" data-valign="center"
					data-nav-inputs="select"
					data-nav-targets="_"
					data-nav-group="{{{C_NavGroup_MouseOnly}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
			</frame>
		""";
	}

	/* My skins buttons */
	declare Real Spacing = 1.5;
	declare Vec2 Size_ButtonGarage = MLHelpers::KeepRatioFromY(1520., 320., 12.5);
	declare Grid::K_GridConfig GridConfig = Grid::Create(0., 0., 0., Grid::C_Direction_Top);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Reset, Size_ButtonGarage.Y, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Upload, Size_ButtonGarage.Y, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Edit, Size_ButtonGarage.Y, Grid::C_Align_Center);
	GridConfig = Grid::AddRow(GridConfig, C_Row_Create, Size_ButtonGarage.Y, Grid::C_Align_Center);
	GridConfig = Grid::SetSize(GridConfig, (Size_ButtonGarage.Y+Spacing) * GridConfig.Columns.count);
	declare Text GridConfigJson = GridConfig.tojson();

	/* Initialize my skins carousel */
	declare Integer SkinPerPage = 7;
	declare Real SizeX_ButtonMargin = 1.9;
	declare Vec2 Size_Skin = MLHelpers::KeepRatioFromY(412., 252., 26.);
	declare Vec2 Size_AdjustedSkin = <Size_Skin.X - MLHelpers::SkewX(Size_Skin.Y, 10.),	Size_Skin.Y>;
	declare Vec2 Size_MySkinsCarousel = <MLHelpers::SkewX(Size_AdjustedSkin.Y, 10.) + SkinPerPage * (Size_AdjustedSkin.X + SizeX_ButtonMargin), Size_AdjustedSkin.Y>;
	declare Vec2 Size_SkinImage = <Size_Skin.X * 0.55, Size_Skin.Y * 0.55>;
	declare Vec2 Pos_SkinImage = MLHelpers::SkewX(<0., Size_Skin.Y * 0.12>, 10.);
	declare Vec2 Pos_SkinName = MLHelpers::SkewX(<-Size_Skin.X * 0.4, -Size_Skin.Y * 0.3>, 10.);
	declare Vec2 Pos_SkinAuthor = MLHelpers::SkewX(<-Size_Skin.X * 0.4, -Size_Skin.Y * 0.415>, 10.);
	declare Vec2 Pos_DeleteButton = MLHelpers::SkewX(<Size_Skin.X * 0.35, Size_Skin.Y * 0.35>, 10.);

	declare Text MySkins_ML = """
		<frame z-index="1" size="{{{Size_MySkinsCarousel.X}}} {{{Size_MySkinsCarousel.Y}}}" halign="center" valign="center">
			<frame id="frame-carousel" pos="{{{-Size_MySkinsCarousel.X*0.5 + Size_Skin.X*0.5}}} 0">
	""";

	for (Key, 0, SkinPerPage) { //< Add an extra button in the carousel to enable animations (SkinPerPage+1 buttons in total)
		declare Text LeftTarget = "button-my-skin-"^ML::Clamp(Key-1, 0, SkinPerPage);
		declare Text RightTarget = "button-my-skin-"^ML::Clamp(Key+1, 0, SkinPerPage);
		if (Key == 0) LeftTarget = "button-my-skin-"^SkinPerPage;
		if (Key == SkinPerPage) RightTarget = "button-my-skin-0";
		MySkins_ML ^= """
			<frame
				id="button-my-skin-{{{Key}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_MySkinsButton}}}"
				data-pager-key="{{{Key}}}"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-inputs="select;cancel;action1;up;down;left;right"
				data-nav-targets="_;_;_;button-reset;button-back;{{{LeftTarget}}};{{{RightTarget}}}"
				data-nav-zone="quad-hitbox-skin"
				data-nav-locked="1"
				hidden="1"
			>
				<frameinstance modelid="framemodel-skin"/>
			</frame>
		""";
	}

	MySkins_ML ^= """
			</frame>
		</frame>
		
	""";

	/* Scroll view commons */
	declare Scroll::K_Config ScrollConfig = Scroll::K_Config {
		AnimEnabled = True,
		PreScrollEnabled = True,
		PreScrollBefore = 1,
		PreScrollAfter = 1,
		ScrollBarVisibility = Scroll::C_ScrollBarVisibility_DuringScroll,
		ScrollBarXOffset = 7.,
		ScrollGrid = <8., 8.>,
		ScrollIndicator = True,
		ScrollIndicatorColorize = <1., 1., 1.>,
		ScrollIndicatorImage = Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique,
		ScrollIndicatorSize = 11.,
		ScrollIndicatorXOffset = -18.,
		ScrollIndicatorYOffset = -12.,
		ScrollPadding = 27.5,
		Skew = -10.,
		SkewVAlign = Scroll::C_SkewVAlign_Top,
		WindowSize = <266., 96.>
	};

	/* Grid scroll view */
	declare Integer Grid_ColumnsNb = 6;
	declare Integer Grid_RowsNb = 5;
	declare Integer Grid_ClubSkinsPerPage = Grid_ColumnsNb * Grid_RowsNb;
	declare Vec2 Grid_Size_ClubSkinMargin = <0., 3.5>;
	declare Vec2 Grid_Size_ScrollOverflow = <(Grid_ColumnsNb-1)*Grid_Size_ClubSkinMargin.X, (Grid_RowsNb-1)*(Grid_Size_ClubSkinMargin.Y+0.75)>;
	declare Vec2 Grid_Size_ClubSkin = Scroll::GetElementSize(ScrollConfig.WindowSize, Grid_Size_ClubSkinMargin, Grid_ColumnsNb, Grid_RowsNb, Grid_Size_ScrollOverflow);
	declare Integer Grid_ElementsNb = Scroll::GetRequiredElementsNb(ScrollConfig.WindowSize, Grid_Size_ClubSkin, Grid_Size_ClubSkinMargin, Grid_ColumnsNb);

	declare Vec2 Grid_Size_ClubSkinBg = MLHelpers::KeepRatioFromY(608., 272., Grid_Size_ClubSkin.Y);
	declare Vec2 Grid_Size_AdjustedClubSkinBg = <Grid_Size_ClubSkinBg.X - MLHelpers::SkewX(Grid_Size_ClubSkinBg.Y, 10.),	Grid_Size_ClubSkinBg.Y>;
	declare Vec2 Grid_Size_ClubSkinName = <Grid_Size_AdjustedClubSkinBg.X * 0.9, 10.>;
	declare Vec2 Grid_Pos_ClubSkinName = MLHelpers::SkewX(<5., -Grid_Size_AdjustedClubSkinBg.Y + 5.>, 10.);
	declare Vec2 Grid_Pos_ClubSkinCount = MLHelpers::SkewX(<5., -Grid_Size_AdjustedClubSkinBg.Y + 2.>, 10.);
	declare Vec2 Grid_Pos_ClubSkinPopularity = <Grid_Size_AdjustedClubSkinBg.X * 0.97, Grid_Size_AdjustedClubSkinBg.Y * -0.15>;
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] Grid_Actions = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Const::C_ImageUrl_Icon_List_View, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Const::C_ImageUrl_Icon_Glass, <8., 8.>, -1., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	declare Text ML_Grid_ClubSkins = "";
	for (I, 1, Grid_ElementsNb) {
		ML_Grid_ClubSkins ^= """
			<frameinstance
				modelid="framemodel-grid-club-skin"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	/* List scroll view */
	declare Integer List_ColumnsNb = 1;
	declare Integer List_RowsNb = 10;
	declare Integer List_ClubSkinsPerPage = List_ColumnsNb * List_RowsNb;
	declare Vec2 List_Size_ClubSkinMargin = <0., 1.5>;
	declare Vec2 List_Size_ScrollOverflow = <(List_ColumnsNb-1)*List_Size_ClubSkinMargin.X, (List_RowsNb-1)*List_Size_ClubSkinMargin.Y>;
	declare Vec2 List_Size_ClubSkin = Scroll::GetElementSize(ScrollConfig.WindowSize, List_Size_ClubSkinMargin, List_ColumnsNb, List_RowsNb, List_Size_ScrollOverflow);
	declare Integer List_ElementsNb = Scroll::GetRequiredElementsNb(ScrollConfig.WindowSize, List_Size_ClubSkin, List_Size_ClubSkinMargin, List_ColumnsNb);

	declare Vec2 List_Size_ClubSkinBg = <List_Size_ClubSkin.X - MLHelpers::SkewX(Grid_Size_ClubSkinBg.Y/2, 10.), Grid_Size_ClubSkinBg.Y/2>;
	declare Vec2 List_Size_ClubSkinImage = MLHelpers::KeepRatioFromY(608., 272., List_Size_ClubSkinBg.Y);
	declare Vec2 List_Pos_ClubSkinImage = <0., List_Size_ClubSkinBg.Y * -0.5>;
	declare Vec2 List_Pos_ClubSkinName = <List_Size_ClubSkinBg.X * 0.1, List_Size_ClubSkinBg.Y * -0.55>;
	declare Vec2 List_Pos_ClubName = <List_Size_ClubSkinBg.X * 0.64, List_Size_ClubSkinBg.Y * -0.55>;
	declare Vec2 List_Pos_ClubSkinCount = <List_Size_ClubSkinBg.X * 0.935, List_Size_ClubSkinBg.Y * -0.55>;
	declare Vec2 List_Pos_ClubSkinPopularity = <List_Size_ClubSkinBg.X * 0.965, List_Size_ClubSkinBg.Y * -0.5>;
	declare TitleBar::ComponentTitleBar2_K_Actions[Integer] List_Actions = [
		TitleBar::C_Action_First => TitleBar::AddAction("action1", Const::C_ImageUrl_Icon_Grid_View, <8., 8.>, 0., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>),
		TitleBar::C_Action_Second => TitleBar::AddAction("action2", Const::C_ImageUrl_Icon_Glass, <8., 8.>, -1., 0., 1., 0.6, <1., 1., 1.>, <1., 1., 1.>)
	];

	declare Text ML_List_ClubSkins = "";
	for (I, 1, List_ElementsNb) {
		ML_List_ClubSkins ^= """
			<frameinstance
				modelid="framemodel-list-club-skin"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}

	/* Pilot options list */
	declare Text ML_PilotOptions = "";
	declare Real OptionMargin = 1.;
	declare Integer OptionsNb = 3;
	declare Vec2 Size_OptionBackground = <107., 7.5>;

	foreach (OptionId => OptionName in C_Option_Names) {
		declare Vec2 Pos_OptionName = MLHelpers::SkewX(<3., -0.5>, 10.);
		declare Text UpTarget = "frame-option-"^ML::Clamp(OptionId-1, 0, OptionsNb-1);
		declare Text DownTarget = "frame-option-"^ML::Clamp(OptionId+1, 0, OptionsNb-1);
		if (OptionId == C_Option_Names.count-1) DownTarget = "button-back";

		ML_PilotOptions ^= """
			<frame id="frame-option-{{{OptionId}}}"
				pos="{{{MLHelpers::Skew(-Size_OptionBackground.X/2., -OptionId*(Size_OptionBackground.Y + OptionMargin), 10.)}}}"
				class="{{{Navigation::C_Class}}} {{{C_Class_Option}}}"
				data-option="{{{OptionId}}}"
				data-nav-inputs="cancel;select;left;right;up;down"
				data-nav-targets="_;_;_;_;{{{UpTarget}}};{{{DownTarget}}}"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="quad-activation-option"
				data-nav-locked="1"
				hidden="1"
			>
				<quad id="quad-activation-option" size="{{{Size_OptionBackground.X}}} {{{Size_OptionBackground.Y}}}" class="{{{Navigation::C_Class_ActivationZone}}}" opacity="0." valign="center" scriptevents="1" z-index="10"/>
				<label id="label-option-name" size="{{{Size_OptionBackground.X*0.4}}} {{{Size_OptionBackground.Y}}}" pos="{{{Pos_OptionName.X}}} {{{Pos_OptionName.Y}}}" class="text-semibold" text="{{{OptionName}}}" textsize="2." opacity="0.6" halign="left" z-index="3"/>
				<frameinstance
					id="asset-left" z-index="1"
					modelid="{{{ExpendableAsset::C_Name}}}"
					data-width="{{{Size_OptionBackground.X*0.45}}}"
					data-height="{{{Size_OptionBackground.Y}}}"
					data-opacity="0.6"
					data-halign="left" data-valign="center"
					data-color="{{{ColorPalette::C_Color_DarkBlue}}}"
					data-colormode-left="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
					data-image-left="{{{Const::C_ImageUrl_Common_ButtonRounded_Start}}}"
					data-size-left="128 256"
				/>
				<frameinstance
					id="asset-right" z-index="2"
					modelid="{{{ExpendableAsset::C_Name}}}"
					pos="{{{Size_OptionBackground.X*0.45 - MLHelpers::SkewX(Size_OptionBackground.Y, 10.)}}} 0"
					data-width="{{{Size_OptionBackground.X*0.55}}}"
					data-height="{{{Size_OptionBackground.Y}}}"
					data-opacity="0.6"
					data-halign="left" data-valign="center"
					data-color="{{{ColorPalette::C_Color_GreenTwo}}}"
					data-colormode-right="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
					data-image-right="{{{Const::C_ImageUrl_Common_ButtonRounded_End}}}"
					data-size-right="128 256"
				/>

				<!-- List -->
				<frameinstance
					id="button-previous-option-{{{OptionId}}}" pos="{{{Size_OptionBackground.X*0.46}}} 0" z-index="3"
					modelid="{{{Button::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-setting-shift="{{{C_OptionShift_Previous}}}"
					data-size="{{{Size_OptionBackground.Y*0.7}}} {{{Size_OptionBackground.Y*0.7}}}"
					data-image="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
					data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
					data-bgcolor="{{{ColorPalette::C_Color_White}}}"
					data-focuscolor="{{{ColorPalette::C_Color_White}}}"
					data-opacity="1."
					data-opacityunfocus="0.6"
					data-halign="left" data-valign="center"
					data-nav-inputs="select"
					data-nav-targets="_"
					data-nav-group="{{{C_NavGroup_MouseOnly}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>
				<label id="label-option-value" size="{{{Size_OptionBackground.X*0.35}}} {{{Size_OptionBackground.Y}}}" pos="{{{Size_OptionBackground.X*0.72}}} -0.5" class="text-semibold" textsize="2." textcolor="{{{ColorPalette::C_Color_White}}}" opacity="0.6" translate="1" z-index="4"/>
				<frameinstance
					id="button-next-option-{{{OptionId}}}" pos="{{{Size_OptionBackground.X*0.97}}} 0" z-index="3"
					modelid="{{{Button::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-setting-shift="{{{C_OptionShift_Next}}}"
					data-size="{{{Size_OptionBackground.Y*0.7}}} {{{Size_OptionBackground.Y*0.7}}}"
					data-image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
					data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
					data-bgcolor="{{{ColorPalette::C_Color_White}}}"
					data-focuscolor="{{{ColorPalette::C_Color_White}}}"
					data-opacity="1."
					data-opacityunfocus="0.6"
					data-halign="right" data-valign="center"
					data-nav-inputs="select"
					data-nav-targets="_"
					data-nav-group="{{{C_NavGroup_MouseOnly}}}"
					data-nav-zone="{{{Button::C_NavZone}}}"
				/>

				<!-- Checkbox -->
				<frameinstance
					id="checkbox-{{{OptionId}}}" pos="{{{Size_OptionBackground.X*0.7}}} 0." z-index="3"
					modelid="{{{Checkbox::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-setting-shift="{{{C_OptionShift_Checkbox}}}"				
					data-opacity="1."
					data-opacityunfocus="0.6"
					data-iconchecked="{{{Const::C_ImageUrl_Icon_Checkbox_Active_Square}}}"
					data-iconunchecked="{{{Const::C_ImageUrl_Icon_Checkbox_Inactive_Square}}}"
					data-iconcolor="{{{ColorPalette::C_Color_White}}}"
					data-iconsize="8 8"
					data-texthalign="left"
					data-textfont="{{{FontManager::C_GameFontSemiBold}}}"
					data-textcolor="{{{ColorPalette::C_Color_White}}}"
					data-textsize="2.5"
					data-textxpos="0.7"
					data-fitlabel="1"
					data-halign="center"
					data-valign="center"
					data-nav-group="{{{C_NavGroup_MouseOnly}}}"
					data-nav-inputs="select"
					data-nav-targets="_"
					data-nav-zone="{{{Checkbox::C_NavZone}}}"
				/>

				<!-- Color slider -->			
				<frameinstance
					id="color-slider-{{{OptionId}}}" pos="{{{Size_OptionBackground.X*0.72}}} 0." z-index="3"
					modelid="{{{Slider::C_Name}}}"
					class="{{{Navigation::C_Class}}}"
					data-halign="center"
					data-valign="center"
					data-opacity="0.6"
					data-bar-size="{{{Size_OptionBackground.X*0.45}}} {{{Size_OptionBackground.Y*0.25}}}"
					data-cursor-size="2.5 5."
					data-bar-image="{{{Const::C_ImageUrl_SliderBarBgColor}}}"
					data-apply-color-on-cursor="1"
					data-nav-group="{{{C_NavGroup_MouseOnly}}}"
					data-nav-zone="{{{Slider::C_NavZone}}}"
				/>
			</frame>
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-regular" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontRegular}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-search" textsize="2" halign="center" valign="center2" textprefix="$i" textcolor="FFFFFF" textfont="{{{FontManager::C_GameFontSemiBold}}}"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-skin">
	<quad id="quad-bg" size="{{{Size_Skin.X}}} {{{Size_Skin.Y}}}" image="{{{Const::C_ImageUrl_Common_Flag}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" halign="center" valign="center" opacity="0.6" z-index="-1"/>
	<quad id="quad-contour" size="{{{Size_Skin.X}}} {{{Size_Skin.Y}}}" image="{{{Const::C_ImageUrl_Common_Flag_Contour}}}" colorize="FFF" halign="center" valign="center" opacity="0." z-index="1"/>
	<frameinstance id="control-block-list-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Size_SkinImage.X}}} {{{Size_SkinImage.Y}}}" pos="{{{Pos_SkinImage.X}}} {{{Pos_SkinImage.Y}}}" data-halign="center" data-valign="center" data-opacity="0.6" data-keepratio="clip" z-index="2" />
	<quad id="quad-button-delete" size="5 5" pos="{{{Pos_DeleteButton.X}}} {{{Pos_DeleteButton.Y}}}" image="{{{Const::C_ImageUrl_Icon_Bin_Oblique}}}" class="{{{C_Class_DeleteSkinButton}}}" scriptevents="1" colorize="FFF" halign="center" valign="center" opacity="0.6" z-index="5" hidden="1"/>
	<quad id="quad-current-skin" size="6 6" pos="{{{Pos_DeleteButton.X}}} {{{Pos_DeleteButton.Y}}}" image="{{{Const::C_ImageUrl_Icon_Validation_Oblique_256}}}" colorize="{{{ColorPalette::C_Color_GreenOne}}}" halign="center" valign="center" opacity="0.6" z-index="5" hidden="1"/>
	<frameinstance id="control-block-list-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{Size_Skin.X*0.8}}} {{{Size_Skin.Y/3}}}" pos="{{{Pos_SkinName.X}}} {{{Pos_SkinName.Y}}}" data-textsize="2" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-halign="left" data-valign="center2" data-opacity="0.6" data-filter-profanities="OnlyIfNotTranslated" z-index="3" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" data-textprefix="$i$t" />
	<label id="label-author" size="{{{Size_Skin.X*0.8}}} {{{Size_Skin.Y/3}}}" pos="{{{Pos_SkinAuthor.X}}} {{{Pos_SkinAuthor.Y}}}" class="text-semibold" textsize="0.5" halign="left" opacity="0.6" z-index="3"/>
	<frame size="{{{Size_Skin.X}}} {{{Size_Skin.Y}}}" halign="center" valign="center" z-index="4">
		<quad id="quad-hitbox-skin" size="{{{Size_AdjustedSkin.X}}} {{{Size_AdjustedSkin.Y*1.5}}}" scriptevents="1" class="{{{Navigation::C_Class_ActivationZone}}}" halign="center" valign="center" rot="10"/>
	</frame>
</framemodel>
<framemodel id="framemodel-grid-club-skin">
	<quad id="quad-background" size="{{{Grid_Size_ClubSkinBg.X}}} {{{Grid_Size_ClubSkinBg.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" keepratio="clip" z-index="0"/>
	<frameinstance id="control-block-list-club-skin-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{Grid_Size_ClubSkinBg.X}}} {{{Grid_Size_ClubSkinBg.Y}}}" data-image="{{{Const::C_ImageUrl_ClubActivity_Default}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-keepratio="clip" z-index="1" />
	<quad id="quad-gradient" size="{{{Grid_Size_ClubSkinBg.X}}} {{{Grid_Size_ClubSkinBg.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Gradient}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity=".7" z-index="2"/>
	<frameinstance id="control-block-list-club-skin-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{Grid_Size_ClubSkinName.X}}} {{{Grid_Size_ClubSkinName.Y}}}" pos="{{{Grid_Pos_ClubSkinName.X}}} {{{Grid_Pos_ClubSkinName.Y}}}" data-halign="left" data-valign="center2" data-textsize="2" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-opacity="0.7" data-filter-profanities="OnlyIfNotTranslated" z-index="3" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" data-textprefix="$i$t" />
	<label id="label-skins-count" size="{{{Grid_Size_ClubSkinName.X}}} {{{Grid_Size_ClubSkinName.Y}}}" pos="{{{Grid_Pos_ClubSkinCount.X}}} {{{Grid_Pos_ClubSkinCount.Y}}}" class="text-semibold" halign="left" textsize="1." opacity="0.7" filter-profanities="OnlyIfNotTranslated" z-index="3"/>
	<quad id="quad-club-skin-popularity" size="6 6" pos="{{{Grid_Pos_ClubSkinPopularity.X}}} {{{Grid_Pos_ClubSkinPopularity.Y}}}" halign="center" valign="center" colorize="FFF" opacity="0.7" z-index="3"/>
	<quad id="quad-contour" size="{{{Grid_Size_ClubSkinBg.X}}} {{{Grid_Size_ClubSkinBg.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Contour}}}" opacity="0." colorize="FFF" z-index="4"/>
	<frame size="{{{Grid_Size_ClubSkinBg.X}}} {{{Grid_Size_ClubSkinBg.Y}}}" pos="{{{Grid_Size_ClubSkinBg.X/2}}} {{{-Grid_Size_ClubSkinBg.Y/2}}}" halign="center" valign="center" z-index="5">
		<quad id="quad-hitbox-activity" size="{{{Grid_Size_AdjustedClubSkinBg.X}}} {{{Grid_Size_AdjustedClubSkinBg.Y*1.5}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}" halign="center" valign="center" rot="10"/>
	</frame>
</framemodel>
<framemodel id="framemodel-list-club-skin">
	<frameinstance id="frame-background" modelid="{{{ExpendableAsset::C_Name}}}" data-width="{{{List_Size_ClubSkinBg.X}}}" data-height="{{{List_Size_ClubSkinBg.Y}}}" data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}" data-color="{{{ColorPalette::C_Color_DarkBlue}}}" data-opacity="0.6" data-halign="left" data-valign="top" z-index="0"/>
	<quad id="quad-background" size="{{{List_Size_ClubSkinImage.X}}} {{{List_Size_ClubSkinImage.Y}}}" pos="{{{List_Pos_ClubSkinImage.X}}} {{{List_Pos_ClubSkinImage.Y}}}" image="{{{Const::C_ImageUrl_ClubActivity_Bg}}}" halign="left" valign="center" keepratio="clip" z-index="1"/>
	<frameinstance id="control-block-list-club-skin-image" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" data-size="{{{List_Size_ClubSkinImage.X}}} {{{List_Size_ClubSkinImage.Y}}}" pos="{{{List_Pos_ClubSkinImage.X}}} {{{List_Pos_ClubSkinImage.Y}}}" data-alphamask="{{{Const::C_ImageUrl_ClubActivity_Mask}}}" data-halign="left" data-valign="center" data-keepratio="clip" z-index="2" />
	<frameinstance id="control-block-list-club-skin-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{List_Size_ClubSkinBg.X * 0.35}}} {{{List_Size_ClubSkinBg.Y}}}" pos="{{{List_Pos_ClubSkinName.X}}} {{{List_Pos_ClubSkinName.Y}}}" data-halign="left" data-valign="center2" data-textsize="3" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-opacity="0.6" data-filter-profanities="OnlyIfNotTranslated" z-index="2" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" data-textprefix="$i$t" />
	<frameinstance id="control-block-list-club-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{List_Size_ClubSkinBg.X * 0.3}}} {{{List_Size_ClubSkinBg.Y}}}" pos="{{{List_Pos_ClubName.X}}} {{{List_Pos_ClubName.Y}}}" data-textsize="3" data-textsize-fitlabel-min="1.5" data-textsize-fitlabel-step="0.25" data-opacity="0.6" data-filter-profanities="OnlyIfNotTranslated" z-index="2" data-halign="center" data-valign="center2" data-textfont="{{{FontManager::C_GameFontSemiBold}}}" data-textprefix="$i$t" data-text-blocked=" " />
	<label id="label-skins-count" size="{{{List_Size_ClubSkinBg.X * 0.12}}} {{{List_Size_ClubSkinBg.Y}}}" pos="{{{List_Pos_ClubSkinCount.X}}} {{{List_Pos_ClubSkinCount.Y}}}" class="text-semibold" halign="right" textsize="3" opacity="0.6" z-index="2"/>
	<quad id="quad-club-skin-popularity" size="{{{List_Size_ClubSkinBg.Y-1.5}}} {{{List_Size_ClubSkinBg.Y-1.5}}}" pos="{{{List_Pos_ClubSkinPopularity.X}}} {{{List_Pos_ClubSkinPopularity.Y}}}" halign="center" valign="center" colorize="FFF" opacity="0.6" z-index="2"/>
	<quad id="quad-hitbox-activity" size="{{{List_Size_ClubSkinBg.X}}} {{{List_Size_ClubSkinBg.Y}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}"/>
</framemodel>
<framemodel id="framemodel-search-bar">
	<frameinstance id="asset-entry-search" modelid="{{{ExpendableAsset::C_Name}}}" data-width="0." data-height="{{{Size_SearchBar.Y}}}" data-styles="{{{ExpendableAsset::C_Style_EdgesRounded}}}" data-color="{{{ColorPalette::C_Color_DarkBlue}}}" data-halign="left" data-opacity="0." z-index="0"/>
	<frameinstance id="asset-entry-search-contour" modelid="{{{ExpendableAsset::C_Name}}}" data-width="0." data-height="{{{Size_SearchBar.Y}}}" data-styles="{{{ExpendableAsset::C_Style_ContourRounded}}}" data-color="{{{ColorPalette::C_Color_GreenOne}}}" data-halign="left" data-opacity="0." z-index="1"/>
	<entry id="entry-search" class="text-search" size="{{{Size_SearchBar.X - 15.}}} {{{Size_SearchBar.Y}}}" pos="10 0" halign="left" focusareacolor1="00000000" focusareacolor2="00000000" hidden="1" z-index="2"/>
</framemodel>

<!-- Browsers -->
<frameinstance modelid="{{{BrowserAPI::C_Name}}}" id="frame-browser" z-index="{{{Const::C_ZIndex_BrowserAPI}}}" hidden="1"/>

<!-- Frame global -->
<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="action4" data-nav-targets="_" data-nav-group="{{{C_NavGroup_Global}}}">
	<frameinstance id="popupprestigecompletion-prestiges" modelid="{{{PopUpPrestigeCompletion::C_Name}}}" z-index="5" hidden="1"/>
	<frameinstance id="popupmultichoice-remove" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_RemoveTitle}}}" data-choices="{{{TL::MLEncode(C_Choices_RemoveSkin.tojson())}}}" data-description="{{{TL::MLEncode(Description_Remove.tojson())}}}" data-styles-secondchoice="{{{PopUpMultiChoice::C_ChoiceStyle_Default}}} {{{ExpendableButton::C_Style_ButtonWarning}}}" z-index="5" hidden="1"/>
	<frameinstance id="popupmultichoice-skin-reset" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_Reset}}}" data-choices="{{{TL::MLEncode(C_Choices_ResetSkin.tojson())}}}" data-description="{{{TL::MLEncode(Description_Reset.tojson())}}}" z-index="5" hidden="1"/>
	<frameinstance id="popupmultichoice-prestige-reset" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_Reset}}}" data-choices="{{{TL::MLEncode(C_Choices_ResetSkin.tojson())}}}" data-description="{{{TL::MLEncode(Description_PrestigeReset.tojson())}}}" z-index="5" hidden="1"/>
	<frameinstance id="popupmultichoice-combine-prestiges-and-skins" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_CombinePrestigeAndSkins}}}" data-description="{{{TL::MLEncode(Description_CombinePrestigeAndSkins.tojson())}}}" data-selection-required="true" z-index="5" hidden="1"/>
	<label id="label-title" pos="{{{MLHelpers::Skew(-132., 68.6, 10.)}}}" size="120 10" class="text-extrabold" text="{{{Text_Garage}}}" textsize="13.3" halign="left"/>

	<!-- Titlebar -->
	<frame id="frame-titlebar" pos="{{{MLHelpers::Skew(1.6, 49.7, 10.)}}}" z-index="3">
		<frameinstance id="frame-search-bar" modelid="framemodel-search-bar"/>
		<frameinstance 
			id="titlebar-common" z-index="5"
			modelid="{{{TitleBar::C_Name}}}" 
			data-size="{{{ScrollConfig.WindowSize.X}}} 10" 
			data-tabs="{{{TL::MLEncode(C_TabNames.tojson())}}}"
			data-events-delay="{{{C_Delay_Events}}}"
			data-tabs-max-width="160"
		/>
	</frame>

	<!-- Combine prestige and skins -->
	<frame id="frame-combine" pos="151.5 49.7" hidden="1">
		<frameinstance id="button-icon-combine" modelid="{{{ButtonIcon::C_Name}}}" data-halign="left" data-size="8 8" data-bind="action4" data-hideformouse="1" />
		<frameinstance
			id="button-combine" z-index="2"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-height="8." data-width="40"
			data-styles="{{{ExpendableButton::C_Style_ButtonTertiary}}}"
			data-text="{{{Text_CombinePrestigeAndSkins}}}"
			data-text-size="25 7" data-text-textsize="2.5" data-text-offset="-1. 0"
			data-text-autonewline-enabled="1" data-text-maxlines="2"
			data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
			data-icon-align="{{{ExpendableButton::C_IconAlign_Left}}}"
			data-icon-color-unfocused="FFFFFF"
			data-icon-opacity-unfocused="0.6"
			data-icon-offset="-2. 0"
			data-halign="right" data-valign="center"
			data-nav-inputs="select;cancel"
			data-nav-targets="_;_"
			data-nav-group="{{{C_NavGroup_MouseOnly}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>

	<!-- Camera -->
	<frame id="frame-camera" pos="{{{Pos_CameraPrestige.X}}} {{{Pos_CameraPrestige.Y}}}" z-index="1">
		<camera id="camera-skin" halign="center" valign="center" size="320 180" fullscreen="1" z-index="0"/>
		<quad id="quad-lights" pos="0 40" size="{{{MLHelpers::MLKeepRatioFromY(1200., 1080., 180.)}}}" image="{{{Const::C_ImageUrl_Common_Spotlight}}}" colorize="FFF" halign="center" valign="center" z-index="1"/>
	</frame>

	<!-- Tab prestige -->
	<frame id="frame-tab-prestige" z-index="2">
		<label id="label-no-prestiges" size="{{{Size_FilterBackground.X}}} 10" class="text-semibold" text="{{{Text_NoPrestiges}}}" textsize="3" halign="left" valign="top" hidden="1"/>
		<frame id="frame-filters" pos="{{{MLHelpers::Skew(-77.8, 36.3, 10.)}}}">
			{{{ML_Filters}}}
		</frame>
		<frameinstance
			id="button-previous-prestige" pos="-131.5 -23" z-index="2"
			modelid="{{{Button::C_Name}}}" 
			class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{C_Class_MySkinsPager}}}"
			data-size="13 13"
			data-opacityunfocus="0.6"
			data-image="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
			data-bgcolor="{{{ColorPalette::C_Color_White}}}"
			data-focuscolor="{{{ColorPalette::C_Color_White}}}"
			data-halign="center" data-valign="center"
			data-menusounds-selectsound="ArrowSelect"
			data-nav-group="{{{C_NavGroup_MouseOnly}}}"
			data-nav-inputs="select;cancel"
			data-nav-targets="_;_"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
			hidden="1"
		/>
		<frame 
			id="frame-prestiges-focus" pos="0 -59.5"
			class="{{{Navigation::C_Class}}} {{{C_Class_PrestigeInfo}}}"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-inputs="select;cancel;left;right;up;down"
			data-nav-targets="_;_;_;_;frame-filter-{{{C_Filter_Names.count-1}}};button-back"
		>
			{{{ML_PrestigesInfo}}}
		</frame>
		<frameinstance
			id="button-next-prestige" pos="131.5 -23" z-index="2"
			modelid="{{{Button::C_Name}}}" 
			class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{C_Class_MySkinsPager}}}"
			data-size="13 13"
			data-opacityunfocus="0.6"
			data-image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
			data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
			data-bgcolor="{{{ColorPalette::C_Color_White}}}"
			data-focuscolor="{{{ColorPalette::C_Color_White}}}"
			data-halign="center" data-valign="center"
			data-menusounds-selectsound="ArrowSelect"
			data-nav-group="{{{C_NavGroup_MouseOnly}}}"
			data-nav-inputs="select;cancel"
			data-nav-targets="_;_"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
			hidden="1"
		/>
		<frameinstance
			id="button-apply-prestige" pos="151.5 -73"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_Apply}}}"
			data-valign="center" data-halign="right"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
			data-nav-inputs="select;cancel;up;left"
			data-nav-targets="_;_;frame-filter-{{{C_Filter_Names.count-1}}};button-back"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			hidden="{{{Platform::IsFromFirstParty(System)}}}"
		/>
	</frame>

	<!-- Tab my skins -->
	<frame id="frame-tab-my-skins" z-index="2" hidden="1">
		<!-- My clubs buttons -->
		<frame id="frame-buttons-container" class="{{{Grid::C_Class_Container}}}" pos="{{{MLHelpers::Skew(-95.5, -30., 10.)}}}">
			<frameinstance
				id="button-create"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Create}}}"
				data-width="70"
				data-text="{{{Text_Create}}}"
				data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}}"
				data-halign="center" data-valign="bottom"
				data-nav-inputs="select;cancel;down"
				data-nav-targets="_;_;button-edit"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			/>
			<frameinstance
				id="button-edit"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Edit}}}"
				data-width="70"
				data-text="{{{Text_Edit}}}"
				data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}}"
				data-halign="center" data-valign="bottom"
				data-nav-inputs="select;cancel;up;down"
				data-nav-targets="_;_;button-create;button-upload"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			/>
			<frameinstance
				id="button-upload"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Upload}}}"
				data-width="70"
				data-text="{{{Text_Upload}}}"
				data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}}"
				data-halign="center" data-valign="bottom"
				data-nav-inputs="select;cancel;up;down"
				data-nav-targets="_;_;button-edit;button-reset"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			/>
			<frameinstance
				id="button-reset"
				modelid="{{{ExpendableButton::C_Name}}}"
				class="{{{Navigation::C_Class}}} {{{Grid::C_Class_Element}}}"
				data-grid-row="{{{C_Row_Reset}}}"
				data-width="70"
				data-text="{{{Text_Reset}}}"
				data-styles="{{{ExpendableButton::C_Style_ButtonSecondary}}}"
				data-halign="center" data-valign="bottom"
				data-nav-inputs="select;cancel;up;down"
				data-nav-targets="_;_;button-upload;button-my-skin-0"
				data-nav-group="{{{C_NavGroup_Default}}}"
				data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
			/>
		</frame>
	
		<!-- My skins carousel -->
		<frame id="frame-skins-carousel" pos="0 -49.9" z-index="5">
			<label id="label-no-favorites" pos="{{{MLHelpers::Skew(0., -7., 10.)}}}" size="200 10" class="text-semibold" text="{{{Text_NoFavorites}}}" textsize="3" textprefix="$i" hidden="1"/>
			<frameinstance
				id="button-previous-skin" pos="-145 0" z-index="2"
				modelid="{{{Button::C_Name}}}" 
				class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{C_Class_MySkinsPager}}}"
				data-size="13 13"
				data-opacityunfocus="0.6"
				data-image="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
				data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Left_Oblique}}}"
				data-bgcolor="{{{ColorPalette::C_Color_White}}}"
				data-focuscolor="{{{ColorPalette::C_Color_White}}}"
				data-halign="center" data-valign="center"
				data-menusounds-selectsound="ArrowSelect"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-inputs="select;cancel"
				data-nav-targets="_;_"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-nav-locked="1"
				hidden="1"
			/>
			{{{MySkins_ML}}}
			<frameinstance
				id="button-next-skin" pos="145 0" z-index="2"
				modelid="{{{Button::C_Name}}}" 
				class="{{{Navigation::C_Class}}} {{{MenuSounds::C_Class}}} {{{C_Class_MySkinsPager}}}"
				data-size="13 13"
				data-opacityunfocus="0.6"
				data-image="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
				data-imagefocus="{{{Const::C_ImageUrl_Icon_Arrow_Right_Oblique}}}"
				data-bgcolor="{{{ColorPalette::C_Color_White}}}"
				data-focuscolor="{{{ColorPalette::C_Color_White}}}"
				data-halign="center" data-valign="center"
				data-menusounds-selectsound="ArrowSelect"
				data-nav-group="{{{C_NavGroup_MouseOnly}}}"
				data-nav-inputs="select;cancel"
				data-nav-targets="_;_"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-nav-locked="1"
				hidden="1"
			/>
		</frame>
	</frame>

	<!-- Tab club skins -->
	<frame id="frame-tab-club-skins" z-index="2" hidden="1">
		<label id="label-search-result" size="{{{ScrollConfig.WindowSize.X}}} 10" class="text-semibold" text="{{{Text_NoClubSkins}}}" textsize="5" textprefix="$i" hidden="1"/>
		<frame id="frame-scrolls" pos="7.9 -7.6">
			<!-- Grid view -->
			<frame id="frame-scroll-view-grid">
				<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-club-skins-grid" z-index="1" />
				<frame
					id="scroll-club-skins-grid"
					pos="{{{-ScrollConfig.WindowSize.X/2 - MLHelpers::SkewX(List_Size_ClubSkinBg.Y, 10.)}}} {{{ScrollConfig.WindowSize.Y/2}}}"
					class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
					data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
					data-pager-page-size="{{{Grid_ClubSkinsPerPage}}}"
					data-elements-per-line="{{{Grid_ColumnsNb}}}"
					data-element-size="{{{Grid_Size_ClubSkin.X}}} {{{Grid_Size_ClubSkin.Y}}}"
					data-margin-size="{{{Grid_Size_ClubSkinMargin.X}}} {{{Grid_Size_ClubSkinMargin.Y}}}"
					data-scroll-indicator-x-offset="{{{ScrollConfig.ScrollIndicatorXOffset + MLHelpers::SkewX(List_Size_ClubSkinBg.Y, 10.)}}}"
					data-scrollbar-xoffset="{{{ScrollConfig.ScrollBarXOffset + MLHelpers::SkewX(List_Size_ClubSkinBg.Y, 10.)}}}"
					data-nav-group="{{{C_NavGroup_Default}}}"
					data-scroll-locked="1"
				>
					<quad class="{{{Scroll::C_Class_ScrollEvent}}}" scriptevents="1" z-index="-1" />
					{{{ML_Grid_ClubSkins}}}
				</frame>
			</frame>
		
			<!-- List view -->
			<frame id="frame-scroll-view-list" hidden="1">
				<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-club-skins-list" z-index="1" />
				<frame
					id="scroll-club-skins-list"
					pos="{{{-ScrollConfig.WindowSize.X/2}}} {{{ScrollConfig.WindowSize.Y/2}}}"
					class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
					data-config="{{{TL::MLEncode(ScrollConfig.tojson())}}}"
					data-pager-page-size="{{{List_ClubSkinsPerPage}}}"
					data-elements-per-line="{{{List_ColumnsNb}}}"
					data-element-size="{{{List_Size_ClubSkin.X}}} {{{List_Size_ClubSkin.Y}}}"
					data-margin-size="{{{List_Size_ClubSkinMargin.X}}} {{{List_Size_ClubSkinMargin.Y}}}"
					data-nav-group="{{{C_NavGroup_Default}}}"
					data-scroll-locked="1"
				>
					<quad class="{{{Scroll::C_Class_ScrollEvent}}}" scriptevents="1" z-index="-1" />
					{{{ML_List_ClubSkins}}}
				</frame>
			</frame>
		</frame>
	</frame>

	<!-- Tab pilot -->
	<frame id="frame-tab-pilot" z-index="2" hidden="1">
		<frame id="frame-options" pos="{{{MLHelpers::Skew(-77.8, 36.3, 10.)}}}">
			{{{ML_PilotOptions}}}
		</frame>
	</frame>


	<!-- Footer -->
	<frame id="frame-footer" pos="0 -73" z-index="2">
		<frameinstance
			id="button-back" pos="-151.5 0"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}} {{{ExpendableButton::C_Style_ButtonSecondary}}}"
			data-nav-inputs="select;cancel;up"
			data-nav-targets="_;_;button-my-skin-0"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
		<frameinstance id="frame-loading-spinner" modelid="{{{LoadingSpinner::C_Name}}}" pos="145 0" data-label="{{{Text_Retrieving}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Left}}}" scale="0.7" z-index="2"/>	
		<label id="label-info" size="150 20" autonewline="1" maxline="3" class="text-semibold"/>
	</frame>
</frame>
""",
"""
#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "TimeLib" as TiL
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CommonLibs/Common/Privileges.Script.txt" as Privileges
#Include "Libs/Nadeo/CommonLibs/Common/ReportContext.Script.txt" as ReportContext
#Include "Libs/Nadeo/CommonLibs/Common/Task.Script.txt" as Task
#Include "Libs/Nadeo/MenuLibs/Common/Components/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/MenuSceneManager.Script.txt" as MenuSceneManager
#Include "Libs/Nadeo/MenuLibs/Common/Modes/Medals.Script.txt" as Medals
#Include "Libs/Nadeo/TMNext/TrackMania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/MenuBackground_ML.Script.txt" as MenuBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/CampaignStore_ML.Script.txt" as CampaignStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/PrestigeStruct.Script.txt" as PrestigeStruct

#Const C_BrowserMode_EditSkin 0
#Const C_BrowserMode_UploadSkin 1

#Const PrestigeStruct::C_PrestigeModes as C_PrestigeModes
#Const PrestigeStruct::C_RankedCategoryTypes as C_RankedCategoryTypes
#Const PrestigeStruct::C_RoyalCategoyTypes as C_RoyalCategoyTypes
#Const PrestigeStruct::C_PrestigeColors as C_PrestigeColors
#Const C_ImageUrls_PopularityLevel {{{dump(Const::C_ImageUrls_PopularityLevel)}}}
#Const C_Season_Name_To_Index {{{dump(Const::C_Season_Name_To_Index)}}}
#Const C_Season_Names {{{dump(Const::C_Season_Names)}}}
#Const C_Rank_Names {{{dump(Const::C_Rank_Names)}}}

#Const C_Delay_FilterPrestige {{{dump(C_Delay_FilterPrestige)}}}
#Const C_Delay_SceneRefresh {{{dump(C_Delay_SceneRefresh)}}}
#Const C_Delay_PilotColorRefresh {{{dump(C_Delay_PilotColorRefresh)}}}

#Const C_Filter_Names {{{dump(C_Filter_Names)}}}
#Const C_Filter_Year {{{dump(C_Filter_Year)}}}
#Const C_Filter_Mode {{{dump(C_Filter_Mode)}}}
#Const C_Filter_CategoryType {{{dump(C_Filter_CategoryType)}}}
#Const C_FilterShift_Previous {{{dump(C_FilterShift_Previous)}}}
#Const C_FilterShift_Null {{{dump(C_FilterShift_Null)}}}
#Const C_FilterShift_Next {{{dump(C_FilterShift_Next)}}}
#Const C_Filter_CategoryTypeNames [
	//L16N [Garage] The category type of the prestige skin for the season mode
	CUserV2Manager::EPrestigeMode::Season => _("|PrestigeType|Season"),
	//L16N [Garage] The category type of the prestige skin for the ranked mode
	CUserV2Manager::EPrestigeMode::Ranked => _("|PrestigeType|Rank division"),
	//L16N [Garage] The category type of the prestige skin for the royal mode
	CUserV2Manager::EPrestigeMode::Royal => _("|PrestigeType|Team")
]

#Const C_Option_Names {{{dump(C_Option_Names)}}}
#Const C_Option_Morphology {{{dump(C_Option_Morphology)}}}
#Const C_Option_FavoriteColor {{{dump(C_Option_FavoriteColor)}}}
#Const C_Option_DefaultSkin {{{dump(C_Option_DefaultSkin)}}}
#Const C_OptionShift_Previous {{{dump(C_OptionShift_Previous)}}}
#Const C_OptionShift_Null {{{dump(C_OptionShift_Null)}}}
#Const C_OptionShift_Next {{{dump(C_OptionShift_Next)}}}
#Const C_OptionShift_Checkbox {{{dump(C_OptionShift_Checkbox)}}}

// /!\ DO NOT MODIFY THESE VALUES they are used in C++
#Const C_Option_MorphologyTypes [
	0 => "Gender=Male",
	1 => "Gender=Female"
]

#Const C_ScrollView_Grid {{{dump(C_ScrollView_Grid)}}}
#Const C_ScrollView_List {{{dump(C_ScrollView_List)}}}

#Const C_Carousel_Previous {{{dump(C_Carousel_Previous)}}}
#Const C_Carousel_Refresh {{{dump(C_Carousel_Refresh)}}}
#Const C_Carousel_Next {{{dump(C_Carousel_Next)}}}

#Const C_SceneLayout "Empty" //< Check ManiaScript documentation to see all layouts
#Const C_CarModel {{{dump(Const::C_CameraSkinModel)}}}
#Const C_PilotModel {{{dump(Const::C_CameraPilotModel)}}}
#Const C_CameraPosition <0., 2.3, -10.>
#Const C_CameraRotation 9.
#Const C_CameraFOVCar 30.
#Const C_CameraFOVPilot 20.
#Const C_PlaneReflectOpacity 0.63
#Const C_PlaneReflectAngle 10.
#Const C_PilotPosition <0., 0., 0.>
#Const C_PilotRotation 0.

#Struct K_Scene {
	Ident SceneId;
	Ident[] CurrentItemIds;
}

#Struct K_Filters {
	Boolean AreLockedPrestigesDisplayed;
	Integer CategoryTypeCurrentIndex;
	Integer ModeCurrentIndex;
	Integer YearCurrentIndex;
	Integer[] YearList;
	CUserV2Manager::EPrestigeMode[] ModeList;
	Text[] CategoryTypeList;
}

#Struct K_Options {
	Integer MorphologyCurrentIndex;
	Text[Integer] MorphologyList;
}

#Struct K_Prestiges {
	Integer FocusedPrestige_FilteredListKey;
	Text FocusedPrestige_PrestigeId;
	PrestigeStruct::K_Prestige UserPrestige;
	PrestigeStruct::K_Prestige[Text] UserPrestigeList;
	PrestigeStruct::K_Prestige[] FilteredPrestigeList;
}

#Struct K_PlayerSkins {
	{{{ClubStruct::P}}}K_Skin CurrentSkin;
	{{{ClubStruct::P}}}K_Skin[] SkinList;
	Integer CurrentSkinKey;
}

#Struct K_Carousel {
	Integer Offset;
	Integer FocusedSkin_CarouselIndex; //< The index of the focused skin in the carousel
	Integer FocusedSkin_SkinListKey; //< The key to get the focused skin in the skin list
	CMlFrame AppearingSkin;
	CMlFrame[] SkinButtonsVisible;
}

#Struct K_ScrollView {
	CMlEntry Entry_Search;
	CMlFrame Asset_EntrySearch;
	CMlFrame Asset_EntrySearchContour;
	CMlFrame Frame_ScrollView_Grid;
	CMlFrame Frame_ScrollView_List;
	CMlFrame Scroll_ClubSkins;
	Text CurrentLayout;
}

#Struct K_Controls {
	CMlFrame Button_ApplyPrestige;
	CMlFrame Button_Back;
	CMlFrame Button_Combine;
	CMlFrame Button_Create;
	CMlFrame Button_Edit;
	CMlFrame Button_NextPrestige;
	CMlFrame Button_NextSkin;
	CMlFrame Button_PreviousPrestige;
	CMlFrame Button_PreviousSkin;
	CMlFrame Button_Reset;
	CMlFrame Button_Upload;
	CMlFrame Frame_Browser;
	CMlFrame Frame_ButtonsContainer;
	CMlFrame Frame_Camera;
	CMlFrame Frame_Carousel;
	CMlFrame Frame_ClubSkins;
	CMlFrame Frame_Filters;
	CMlFrame Frame_Global;
	CMlFrame Frame_LoadingSpinner;
	CMlFrame Frame_MiddlePrestige;
	CMlFrame Frame_MySkins;
	CMlFrame Frame_Prestige;
	CMlFrame Frame_PrestigesFocus;
	CMlFrame Frame_Pilot;
	CMlFrame Frame_Options;
	CMlFrame PopUpMultiChoice_PrestigeReset;
	CMlFrame PopUpMultiChoice_Remove;
	CMlFrame PopUpMultiChoice_SkinReset;
	CMlFrame PopUpMultiChoice_CombinePrestigeAndSkins;
	CMlFrame PopUpPrestigeCompletion_Prestiges;
	CMlFrame TitleBar_Common;
	CMlLabel Label_Info;
	CMlLabel Label_NoFavorites;
	CMlLabel Label_NoPrestiges;
	CMlLabel Label_SearchResult;
	CMlQuad Quad_Lights;
	CMlFrame Slider_Color;
}

#Struct K_State {
	Integer BrowserMode;
	Boolean IsBrowserInitialized;
	Boolean IsCombineFeatureEnabled;
	Integer CurrentTab;
	Integer RefreshDisplayedScene;
	Integer RefreshPilotColor;
	Integer SkinKeyToDelete;
	Integer RefreshPrestigeList;
	K_Carousel Carousel;
	K_Controls Controls;
	K_Filters Filters;
	K_PlayerSkins PlayerSkins;
	K_Prestiges Prestiges;
	K_Scene Scene;
	K_ScrollView ScrollView;
	K_Options Options;
	Task::K_Task Task_GetFavoriteSkinList;
	Task::K_Task Task_RegisterSkin;
	Task::K_Task Task_SetUnsetSkin;
	Task::K_Task Task_UnsetFavoriteSkin;
	Task::K_Task Task_GetAccountPrestigeList;
	Task::K_Task Task_GetCurrentAccountPrestige;
	Task::K_Task Task_GetPrestigeList;
	Task::K_Task Task_SetUnsetCurrentAccountPrestige;
	{{{TitleBar::P}}}K_Actions[Integer] Actions;
}
""",
"""
declare Ident G_TTSContextIdent_Tabs;
declare Ident G_TTSContextIdent_Filter;

Boolean IsSkinInFavorites(K_State _State, Text _SkinId) {
	foreach (SkinKey => PlayerSkin in _State.PlayerSkins.SkinList) {
		if (PlayerSkin.Id == _SkinId) return True;
	}
	return False;
}

Boolean IsPrestigeUnlockable(PrestigeStruct::K_Prestige _Prestige) {
	switch (_Prestige.Mode) {
		case CUserV2Manager::EPrestigeMode::Ranked: return _Prestige.Year >= Tools::GetYear();
		case CUserV2Manager::EPrestigeMode::Royal: return _Prestige.Year >= Tools::GetYear();
		case CUserV2Manager::EPrestigeMode::Season: return (
			CampaignStruct::GetSeasonNameInCampaignName(_Prestige.CategoryType) >= CampaignStore::GetLiveQuarterlyCampaign().SeasonName &&
			_Prestige.Year >= Tools::GetYear()
		);
	}
	return False;
}

Text GetFileNameFromPath(Text _FolderPath) {
	declare Text Path = TL::Replace(_FolderPath, "\\", "/");
	declare Text[] TmpSplit = TL::Split(".", Path);

	if (TmpSplit.count != 0) {
		TmpSplit = TL::Split("/", TmpSplit[0]);
		if (TmpSplit.count == 0) return _FolderPath;
	}

	return TmpSplit[TmpSplit.count-1];
}

Void LockNavigation(K_State _State, Boolean _IsLocked) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", !_IsLocked);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", !_IsLocked);
	{{{Scroll::P}}}LockNavigation(_State.ScrollView.Scroll_ClubSkins, _IsLocked);
	{{{TitleBar::P}}}LockNavigation(_State.Controls.TitleBar_Common, _IsLocked);
}

// Update text to speech context
Void Private_TTSContextUpdate(CMlFrame _Frame_FilterOrOption, Boolean _IsFilterUpdated) {
	if ({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}") == _Frame_FilterOrOption) {
		declare Boolean IsFilter = _Frame_FilterOrOption.HasClass("{{{C_Class_Filter}}}");
		declare Text LabelValueId = "label-option-value";
		declare Text LabelNameId = "label-option-name";
		if (IsFilter)	{
			LabelValueId = "label-filter-value";
			LabelNameId = "label-filter-name";
		}

		if (G_TTSContextIdent_Filter == NullId) G_TTSContextIdent_Filter = ParentApp.TTS_Context_Enter({{{Const::C_TTSContextLevel_Setting}}});
		ParentApp.TTS_Context_Change(G_TTSContextIdent_Filter, _Frame_FilterOrOption.GetFirstChild(LabelNameId) as CMlLabel);
		if (!_IsFilterUpdated) ParentApp.TTS_Context_Read({{{Const::C_TTSContextLevel_Setting}}});
		(_Frame_FilterOrOption.GetFirstChild(LabelValueId) as CMlLabel).TTS_Focus();
	} else {
		G_TTSContextIdent_Filter = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Filter);
	}
}

// Update the loading spinner position depending on the current tab and buttons visibility
Void UpdateLoadingSpinnerPosition(K_State _State) {
	if (_State.CurrentTab == {{{C_Tab_Prestige}}} && _State.Controls.Button_ApplyPrestige.Visible) {
		_State.Controls.Frame_LoadingSpinner.RelativePosition_V3.Y = 15.;
	} else {
		_State.Controls.Frame_LoadingSpinner.RelativePosition_V3.Y = 0.;
	}
}

// Update controller hints at the bottom of the screen
Void UpdateControllerInfo(K_State _State) {
	declare Text[Text] ControllerInfos = ["A" => _("Select")];

	if (!_State.Controls.PopUpMultiChoice_Remove.Visible && !_State.Controls.PopUpMultiChoice_SkinReset.Visible) {
		declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
		
		/* 'Y' (or 'action2') button */
		switch (_State.CurrentTab) {
			case {{{C_Tab_Prestige}}}: ControllerInfos["Y"] = "{{{Text_Reset}}}";
			case {{{C_Tab_MySkins}}}: {
				if (Platform::IsFromFirstParty(System)) {
					ControllerInfos["Y"] = "{{{Text_Reset}}}";
				}
			}
		}

		/* 'X' (or 'action1') button */
		switch (_State.CurrentTab) {
			case {{{C_Tab_Prestige}}}: {
				if (_State.Filters.AreLockedPrestigesDisplayed) {
					ControllerInfos["X"] = "{{{Text_HideLockedPrestige}}}";
				} else {
					ControllerInfos["X"] = "{{{Text_ShowLockedPrestige}}}";
				}
			}
			case {{{C_Tab_MySkins}}}: {
				if (FocusedControl != Null && FocusedControl.HasClass("{{{C_Class_MySkinsButton}}}")) {
					ControllerInfos["X"] = "{{{Text_RemoveTitle}}}";
				}
			}
		}

		/* Directionnal buttons */
		if (FocusedControl != Null && FocusedControl.HasClass("{{{C_Class_Filter}}}")) {
			switch (TL::ToInteger(FocusedControl.DataAttributeGet("filter"))) {
				case C_Filter_Year, C_Filter_Mode, C_Filter_CategoryType: {
					ControllerInfos["Left"] = ""; //< Empty on purpose
					ControllerInfos["Right"] = "{{{Text_SelectValue}}}";
				}
			}
		}
		if (FocusedControl != Null && FocusedControl.HasClass("{{{C_Class_Option}}}")) {
			switch (TL::ToInteger(FocusedControl.DataAttributeGet("option"))) {
				case C_Option_Morphology, C_Option_FavoriteColor: {
					ControllerInfos["Left"] = ""; //< Empty on purpose
					ControllerInfos["Right"] = "{{{Text_SelectValue}}}";
				}
			}
		}
	}
	ControllerInfos["B"] = _("Back");
	
	ControllerInfo::SetButtons(ControllerInfos);
}

Void UpdateNoPrestigeLabelPos(K_State _State) {
	_State.Controls.Label_NoPrestiges.RelativePosition_V3 = MLHelpers::SkewX({{{Pos_NoPrestigeLabel}}}, 10.);
	foreach (Index => Control in _State.Controls.Frame_Filters.Controls) {
		if (Control.Visible) {
			_State.Controls.Label_NoPrestiges.RelativePosition_V3 = MLHelpers::SkewX(<{{{Pos_NoPrestigeLabel.X}}}, _State.Controls.Label_NoPrestiges.RelativePosition_V3.Y - {{{1.5*FilterMargin+Size_FilterBackground.Y}}}>, 10.);
		}
	}
}

Void DisplayInfo(CMlLabel _Label_Info, Text _Text, Boolean _IsError) {
	declare Vec2 Pos_Hidden = MLHelpers::SkewX(<0., -1.>, 10.);
	AnimMgr.Flush(_Label_Info);

	if (_Text != "") {
		_Label_Info.SetText(_Text);
		_Label_Info.Opacity = 0.;
		_Label_Info.RelativePosition_V3 = Pos_Hidden;
		Tools::FitLabelValue(_Label_Info, 3., 1., 0.5);
		if (_IsError) {
			_Label_Info.TextColor = ColorPalette::C_Color_Vec3_ErrorRed;
			AnimMgr.Add(_Label_Info, "<anim pos=\"0 0\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			_Label_Info.TextColor = ColorPalette::C_Color_Vec3_GreenOne;
			AnimMgr.Add(_Label_Info, "<anim pos=\"0 0\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", Now+5000, 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	} else {
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

K_State DisplayScene(K_State _State, Boolean _IsVisible) {
	declare K_State State = _State;
	declare CMlCamera Camera_Skin = (State.Controls.Frame_Camera.GetFirstChild("camera-skin") as CMlCamera);
	
	Camera_Skin.Visible = _IsVisible;
	State.Controls.Frame_Camera.Visible = _IsVisible;
	if (_IsVisible && !State.Controls.Frame_Browser.Visible) {
		if (State.Scene.SceneId == NullId) State.Scene.SceneId = MenuSceneMgr.SceneCreate(C_SceneLayout);
		MenuSceneManager::PageSynchronizeScene(Page, LocalUser);
		if (State.Scene.SceneId != NullId) {
			MenuSceneMgr.PlaneReflectEnable(State.Scene.SceneId, C_PlaneReflectOpacity, Null, Null, Null, Null, C_PlaneReflectAngle);

			/* Destroy the previous items */
			foreach (CurrentItemId in State.Scene.CurrentItemIds) {
				if (CurrentItemId != NullId) MenuSceneMgr.ItemDestroy(State.Scene.SceneId, CurrentItemId);
			}
			State.Scene.CurrentItemIds = [];

			/* Add new items to the scene */
			for (Index, -1, 1) { //< Left skin = -1, focused skin = 0, right skin = 1
				declare {{{ClubStruct::P}}}K_Skin CarSkin;
				declare {{{ClubStruct::P}}}K_Skin PilotSkin;

				switch (State.CurrentTab) {
					case {{{C_Tab_Prestige}}}: {
						if (State.Prestiges.FilteredPrestigeList.existskey(State.Prestiges.FocusedPrestige_FilteredListKey+Index)) {
							declare PrestigeStruct::K_Prestige Prestige = State.Prestiges.FilteredPrestigeList[State.Prestiges.FocusedPrestige_FilteredListKey+Index];
							if (Prestige.IsUnlocked) {
								if (State.IsCombineFeatureEnabled) {
									CarSkin = State.PlayerSkins.CurrentSkin;
								} else {
									CarSkin.Name = Prestige.RewardDisplayName;
									CarSkin.FileUrl = Prestige.RewardFileUrl;
								}
								CarSkin.PrestigeOptions = Prestige.SkinOptions;
							} else {
								CarSkin.Name = Const::C_CarBlockedContentSkinName;
								CarSkin.FileUrl = "";
							}
						} else if (Index == 0) {
							if (State.IsCombineFeatureEnabled || State.Prestiges.UserPrestige.SkinOptions == "") {
								CarSkin = State.PlayerSkins.CurrentSkin;
							}
							CarSkin.PrestigeOptions = State.Prestiges.UserPrestige.SkinOptions;
						}
					}
					case {{{C_Tab_MySkins}}}: {
						if (Index == 0 || (Platform::IsFromFirstParty(System) && State.Carousel.FocusedSkin_SkinListKey != -1)) {
							if (State.PlayerSkins.SkinList.existskey(State.Carousel.FocusedSkin_SkinListKey+Index)) {
								CarSkin = State.PlayerSkins.SkinList[State.Carousel.FocusedSkin_SkinListKey+Index];
								if (State.IsCombineFeatureEnabled) {
									CarSkin.PrestigeOptions = LocalUser.Prestige_SkinOptions;
								}
								if ({{{ControlBlockList::P}}}IsBlocked(This, CarSkin.CreatorAccountId)) {
									CarSkin.Name = Const::C_CarBlockedContentSkinName;
									CarSkin.FileUrl = "";
								}
							} else if (Index == 0) {
								if (State.IsCombineFeatureEnabled || State.Prestiges.UserPrestige.SkinOptions == "") {
									CarSkin = State.PlayerSkins.CurrentSkin;
								}
								if (State.IsCombineFeatureEnabled || CarSkin.FileUrl == "") {
									CarSkin.PrestigeOptions = State.Prestiges.UserPrestige.SkinOptions;
								}
							}
						}
					} 
					case {{{C_Tab_Pilot}}}: {
						if (Index == 0) {
							PilotSkin.Name = LocalUser.Model_CharacterPilot_SkinName;
							PilotSkin.FileUrl = LocalUser.Model_CharacterPilot_SkinUrl;
							PilotSkin.CharacterOptions = LocalUser.Character_SkinOptions;
						}
					}
				}

				if (CarSkin.Name != "" || CarSkin.PrestigeOptions != "") {
					MenuSceneMgr.CameraSetLocation(State.Scene.SceneId, C_CameraPosition, C_CameraRotation, C_CameraFOVCar);
					declare Ident CurrentItemId = MenuSceneMgr.ItemCreate(State.Scene.SceneId, C_CarModel, CarSkin.Name, CarSkin.FileUrl, CarSkin.PrestigeOptions);
					MenuSceneMgr.ItemSetPlayerState(State.Scene.SceneId, CurrentItemId, LocalUser);
					MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, CurrentItemId, <-3.*Index, 0., ML::Abs(3.*Index)>, -Index*150., Index == 0);
					MenuSceneMgr.ItemSetVehicleState(State.Scene.SceneId, CurrentItemId, 0.7*Index,	False, False, 0, 0, False);
					MenuSceneMgr.ItemSetPivot(State.Scene.SceneId, CurrentItemId, {{{dump(Const::C_CarDefaultPivotInScene)}}});
					State.Scene.CurrentItemIds.add(CurrentItemId);
				}

				if (PilotSkin.Name != "" || PilotSkin.CharacterOptions != "") {
					MenuSceneMgr.CameraSetLocation(State.Scene.SceneId, C_CameraPosition, C_CameraRotation, C_CameraFOVPilot);
					declare Ident PilotItemId = MenuSceneMgr.ItemCreate(State.Scene.SceneId, C_PilotModel, PilotSkin.Name, PilotSkin.FileUrl, PilotSkin.CharacterOptions);
					MenuSceneMgr.ItemSetPlayerState(State.Scene.SceneId, PilotItemId, LocalUser);
					MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, PilotItemId, C_PilotPosition, C_PilotRotation, True);
					MenuSceneMgr.ItemSetPivot(State.Scene.SceneId, PilotItemId, <0., 0., 0.>);
					MenuSceneMgr.ItemTriggerPlayerGesture(State.Scene.SceneId, PilotItemId);
					State.Scene.CurrentItemIds.add(PilotItemId);
				}
			}
		}

		/* Update Controls */
		ReportContext::SetProfileSkin(System, State.PlayerSkins.CurrentSkin.Name, State.PlayerSkins.CurrentSkin.FileUrl);
		switch (State.CurrentTab) {
			case {{{C_Tab_Prestige}}}: {
				State.Controls.Frame_Camera.RelativePosition_V3 = {{{Pos_CameraPrestige}}};
				if (State.Prestiges.FilteredPrestigeList.existskey(State.Prestiges.FocusedPrestige_FilteredListKey) && State.Prestiges.FilteredPrestigeList[State.Prestiges.FocusedPrestige_FilteredListKey].IsUnlocked) {
					AnimMgr.Add(State.Controls.Quad_Lights, "<anim colorize=\""^C_PrestigeColors.get(State.Prestiges.FilteredPrestigeList[State.Prestiges.FocusedPrestige_FilteredListKey].CategoryLevel, "FFFFFF")^"\" />", 500, CAnimManager::EAnimManagerEasing::QuadOut);
				} else {
					AnimMgr.Add(State.Controls.Quad_Lights, "<anim colorize=\"FFFFFF\" />", 500, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			}
			case {{{C_Tab_MySkins}}}, {{{C_Tab_ClubSkins}}}: {
				AnimMgr.Add(State.Controls.Quad_Lights, "<anim colorize=\"FFFFFF\" />", 500, CAnimManager::EAnimManagerEasing::QuadOut);
				State.Controls.Frame_Camera.RelativePosition_V3 = {{{Pos_CameraMySkins}}};
				if (Platform::IsFromFirstParty(System)) {
					State.Controls.Frame_Camera.RelativePosition_V3.X -= 30.;
				}
			}
			case {{{C_Tab_Pilot}}}: {
				State.Controls.Frame_Camera.RelativePosition_V3 = {{{Pos_CameraPilot}}};
				AnimMgr.Add(State.Controls.Quad_Lights, "<anim colorize=\"FFFFFF\" />", 500, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	}
	
	return State;
}

K_State DestroyScene(K_State _State) {
	declare K_State State = _State;

	State = DisplayScene(State, False);
	if (State.Scene.SceneId != NullId) {
		foreach (CurrentItemId in State.Scene.CurrentItemIds) {
			if (CurrentItemId != NullId) MenuSceneMgr.ItemDestroy(State.Scene.SceneId, CurrentItemId);
		}
		MenuSceneMgr.SceneDestroy(State.Scene.SceneId);
		State.Scene.SceneId = NullId;
	}
	State.Scene.CurrentItemIds = [];

	return State;
}

// Focus or unfocus a filter or option line
Void FocusFilterOrOption(CMlFrame _Frame_FilterOrOption, Boolean _IsFocused, Boolean _IsMouse) {
	declare Boolean IsFilter = _Frame_FilterOrOption.HasClass("{{{C_Class_Filter}}}");
	declare Text QuadActivationId = "quad-activation-option";
	declare Text LabelValueId = "label-option-value";
	declare Text LabelNameId = "label-option-name";
	if (IsFilter)	{
		QuadActivationId = "quad-activation-filter";
		LabelValueId = "label-filter-value";
		LabelNameId = "label-filter-name";
	}

	/* Update setting's line focus */
	if (_IsFocused) {
		foreach (Control in _Frame_FilterOrOption.Controls) {
			AnimMgr.Flush(Control);
			if ({{{ExpendableAsset::P}}}IsAsset(Control)) {{{ExpendableAsset::P}}}SetOpacity(This, Control as CMlFrame, 1.);
			if ({{{Button::P}}}IsButton(Control)) {
				if (!_IsMouse) {{{Button::P}}}Focus(This, Control as CMlFrame);
				_Frame_FilterOrOption.GetFirstChild(QuadActivationId).ZIndex = -1.;
			}
			if ({{{Checkbox::P}}}IsCheckbox(Control)) {{{Checkbox::P}}}Focus(This, Control as CMlFrame);
			if ({{{Slider::P}}}IsSlider(Control)) {{{Slider::P}}}SetOpacity((Control as CMlFrame), 1.);
			switch (Control.ControlId) {
				case LabelValueId: AnimMgr.Add(Control, "<anim opacity=\"1.\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				case LabelNameId: AnimMgr.Add(Control, "<anim opacity=\"1.\" textcolor=\"{{{ColorPalette::C_Color_GreenOne}}}\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	} else {
		foreach (Control in _Frame_FilterOrOption.Controls) {
			AnimMgr.Flush(Control);
			if ({{{ExpendableAsset::P}}}IsAsset(Control)) {{{ExpendableAsset::P}}}SetOpacity(This, Control as CMlFrame, 0.6);
			if ({{{Button::P}}}IsButton(Control)) {{{Button::P}}}Unfocus(This, Control as CMlFrame);
			if ({{{Checkbox::P}}}IsCheckbox(Control)) {{{Checkbox::P}}}Unfocus(This, Control as CMlFrame);
			if ({{{Slider::P}}}IsSlider(Control)) {{{Slider::P}}}SetOpacity((Control as CMlFrame), 0.6);
			if (Control is CMlLabel) AnimMgr.Add(Control, "<anim opacity=\"0.6\" textcolor=\"{{{ColorPalette::C_Color_White}}}\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			if (Control.ControlId == QuadActivationId) Control.ZIndex = 10.;
		}
	}

	/* Text to speech context */
	Private_TTSContextUpdate(_Frame_FilterOrOption, False);

	if (_Frame_FilterOrOption.HasClass("{{{C_Class_Option}}}")) {
		declare CMlLabel Label_Info = (Page.GetFirstChild("label-info") as CMlLabel);
		if (_IsFocused) {
			declare Integer OptionId = TL::ToInteger(_Frame_FilterOrOption.DataAttributeGet("option"));
			switch (OptionId) {
				case C_Option_Morphology: {
					//L16N [Garage] Pilot morphology type option
					DisplayInfo(Label_Info, _("Select the morphology of your pilot"), False);
				}
				case C_Option_FavoriteColor: {
					//L16N [Garage] Favorite color option
					DisplayInfo(Label_Info, _("Color used in multiple ingame situations such as the trails left by the car, the pilot lights or the podium sparkles"), False);
				}
				case C_Option_DefaultSkin: {
					//L16N [Garage] Default pilot black skin option. Players need the club edition to use this setting.
					DisplayInfo(Label_Info, _("Use the default pilot skin instead of the country and regional skin. You need club access to use this setting."), False);
				}
			}			
		} else {
			DisplayInfo(Label_Info, "", False);
		}
	}
}

// Update the given filter
K_State UpdateFilter(K_State _State, Integer _FilterId, Integer _ShiftNb) {
	declare K_State State = _State;
	declare CMlFrame Frame_Filter = (State.Controls.Frame_Filters.GetFirstChild("frame-filter-"^_FilterId) as CMlFrame);
	declare CMlLabel Label_Value = (Frame_Filter.GetFirstChild("label-filter-value") as CMlLabel);

	/* Update the given filter */
	switch (_FilterId) {
		case C_Filter_Year: {
			// Update the year list
			if (_ShiftNb == C_FilterShift_Null) {
				if (State.Filters.AreLockedPrestigesDisplayed) {
					State.Filters.YearList = [ML::Max(2023, Tools::GetYear())]; //< Prestige skins starts from January 2023
				} else {
					State.Filters.YearList.clear();
					foreach (Prestige in State.Prestiges.UserPrestigeList) {
						if (!State.Filters.YearList.exists(Prestige.Year)) State.Filters.YearList.add(Prestige.Year);
					}
				}
				State.Filters.YearList = State.Filters.YearList.sort();
			}

			// Update the filter display
			Frame_Filter.Visible = State.Filters.YearList.count > 0;
			if (Frame_Filter.Visible) {
				State.Filters.YearCurrentIndex = ML::Clamp(State.Filters.YearCurrentIndex + _ShiftNb, 0, State.Filters.YearList.count-1);
				Label_Value.SetText(""^State.Filters.YearList[State.Filters.YearCurrentIndex]);
				{{{Button::P}}}SetVisibilityAndNavigation(Frame_Filter.GetFirstChild("button-previous-"^_FilterId) as CMlFrame, State.Filters.YearCurrentIndex > 0);
				{{{Button::P}}}SetVisibilityAndNavigation(Frame_Filter.GetFirstChild("button-next-"^_FilterId) as CMlFrame, State.Filters.YearCurrentIndex < State.Filters.YearList.count-1);
				{{{Navigation::P}}}EnableInputs(Frame_Filter, ["left", "right"], State.Filters.YearList.count > 1);
				if (_ShiftNb != C_FilterShift_Null) {
					State = UpdateFilter(State, C_Filter_Mode, C_FilterShift_Null);
					State = UpdateFilter(State, C_Filter_CategoryType, C_FilterShift_Null);
				}
			}
		}
		case C_Filter_Mode: {
			// Update the mode list
			if (_ShiftNb == C_FilterShift_Null) {
				State.Filters.ModeList.clear();
				if (State.Filters.AreLockedPrestigesDisplayed) {
					foreach (Mode => ModeName in C_PrestigeModes) {
						State.Filters.ModeList.add(Mode);
					}
				} else if (State.Filters.YearList.existskey(State.Filters.YearCurrentIndex)) {
					declare Integer FilterYear = State.Filters.YearList[State.Filters.YearCurrentIndex];
					foreach (Prestige in State.Prestiges.UserPrestigeList) {
						if (FilterYear == Prestige.Year && !State.Filters.ModeList.exists(Prestige.Mode)) {
							State.Filters.ModeList.add(Prestige.Mode);
						}
					}
				}
			}

			// Update the filter display
			Frame_Filter.Visible = State.Filters.ModeList.count > 0;
			if (Frame_Filter.Visible) {
				State.Filters.ModeCurrentIndex += _ShiftNb;
				if (State.Filters.ModeCurrentIndex >= State.Filters.ModeList.count) State.Filters.ModeCurrentIndex = 0;
				else if (State.Filters.ModeCurrentIndex < 0) State.Filters.ModeCurrentIndex = State.Filters.ModeList.count-1;
				Label_Value.SetText(C_PrestigeModes.get(State.Filters.ModeList[State.Filters.ModeCurrentIndex], ""));
				{{{Button::P}}}SetVisibilityAndNavigation(Frame_Filter.GetFirstChild("button-previous-"^_FilterId) as CMlFrame, State.Filters.ModeList.count > 1);
				{{{Button::P}}}SetVisibilityAndNavigation(Frame_Filter.GetFirstChild("button-next-"^_FilterId) as CMlFrame, State.Filters.ModeList.count > 1);
				{{{Navigation::P}}}EnableInputs(Frame_Filter, ["left", "right"], State.Filters.ModeList.count > 1);
				if (_ShiftNb != C_FilterShift_Null) State = UpdateFilter(State, C_Filter_CategoryType, C_FilterShift_Null);
			}
		}
		case C_Filter_CategoryType: {
			// Update the category type name depending on the selected mode
			declare CMlLabel Label_FilterName = (Frame_Filter.GetFirstChild("label-filter-name") as CMlLabel);
			if (State.Filters.ModeList.existskey(State.Filters.ModeCurrentIndex)) {
				Label_FilterName.SetText(C_Filter_CategoryTypeNames.get(State.Filters.ModeList[State.Filters.ModeCurrentIndex], C_Filter_Names[C_Filter_CategoryType]));
			}

			// Update the category type list
			if (_ShiftNb == C_FilterShift_Null) {
				State.Filters.CategoryTypeList.clear();
				if (State.Filters.AreLockedPrestigesDisplayed) {
					if (State.Filters.ModeList.existskey(State.Filters.ModeCurrentIndex)) {
						switch (State.Filters.ModeList[State.Filters.ModeCurrentIndex]) {
							case CUserV2Manager::EPrestigeMode::Season: State.Filters.CategoryTypeList = Tools::GetListOfKeys(C_Season_Names);
							case CUserV2Manager::EPrestigeMode::Ranked: State.Filters.CategoryTypeList = Tools::GetListOfKeys(C_RankedCategoryTypes);
							case CUserV2Manager::EPrestigeMode::Royal: State.Filters.CategoryTypeList = Tools::GetListOfKeys(C_RoyalCategoyTypes);
						}
					}
				} else {
					foreach (Prestige in State.Prestiges.UserPrestigeList) {
						if (State.Filters.YearList.existskey(State.Filters.YearCurrentIndex) && State.Filters.YearList[State.Filters.YearCurrentIndex] == Prestige.Year) { //< Year verification
							if (State.Filters.ModeList.existskey(State.Filters.ModeCurrentIndex) && State.Filters.ModeList[State.Filters.ModeCurrentIndex] == Prestige.Mode) { //< Mode verification
								if (!State.Filters.CategoryTypeList.exists(Prestige.CategoryType)) State.Filters.CategoryTypeList.add(Prestige.CategoryType);
							}
						}
					}
				}
			}

			// Update the filter display
			Frame_Filter.Visible = State.Filters.CategoryTypeList.count > 0;
			if (Frame_Filter.Visible) {
				State.Filters.CategoryTypeCurrentIndex += _ShiftNb;
				if (State.Filters.CategoryTypeCurrentIndex >= State.Filters.CategoryTypeList.count) State.Filters.CategoryTypeCurrentIndex = 0;
				else if (State.Filters.CategoryTypeCurrentIndex < 0) State.Filters.CategoryTypeCurrentIndex = State.Filters.CategoryTypeList.count-1;
				switch (State.Filters.ModeList[State.Filters.ModeCurrentIndex]) {
					case CUserV2Manager::EPrestigeMode::Season: Label_Value.SetText(C_Season_Names.get(State.Filters.CategoryTypeList[State.Filters.CategoryTypeCurrentIndex], ""));
					case CUserV2Manager::EPrestigeMode::Ranked: Label_Value.SetText(C_RankedCategoryTypes.get(State.Filters.CategoryTypeList[State.Filters.CategoryTypeCurrentIndex], ""));
					case CUserV2Manager::EPrestigeMode::Royal: Label_Value.SetText(C_RoyalCategoyTypes.get(State.Filters.CategoryTypeList[State.Filters.CategoryTypeCurrentIndex], ""));
				}
				{{{Button::P}}}SetVisibilityAndNavigation(Frame_Filter.GetFirstChild("button-previous-"^_FilterId) as CMlFrame, State.Filters.CategoryTypeList.count > 1);
				{{{Button::P}}}SetVisibilityAndNavigation(Frame_Filter.GetFirstChild("button-next-"^_FilterId) as CMlFrame, State.Filters.CategoryTypeList.count > 1);
				{{{Navigation::P}}}EnableInputs(Frame_Filter, ["left", "right"], State.Filters.CategoryTypeList.count > 1);
			}
		}
	}
	{{{Navigation::P}}}Lock(Frame_Filter, !Frame_Filter.Visible);

	/* Update TTS context */
	Private_TTSContextUpdate(Frame_Filter, True);

	/* Trigger a prestige list update */
	if (_ShiftNb != C_FilterShift_Null) {
		{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.Frame_LoadingSpinner, "{{{Text_RetrievingPrestige}}}");
		State.RefreshPrestigeList = Now + C_Delay_FilterPrestige;
	}

	return State;
}
K_State UpdateFilters(K_State _State) {
	declare K_State State = _State;

	// Update all filters
	foreach (FilterId => FilterName in C_Filter_Names) {
		State = UpdateFilter(State, FilterId, C_FilterShift_Null);
	}

	// Update no prestige info position
	UpdateNoPrestigeLabelPos(State);

	return State;
}

Void FocusPrestigeInfo(CMlFrame _Frame_PrestigeInfo, Boolean _IsFocused) {
	AnimMgr.Flush(_Frame_PrestigeInfo);
	if (_IsFocused) AnimMgr.Add(_Frame_PrestigeInfo, "<anim scale=\"1.05\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	else AnimMgr.Add(_Frame_PrestigeInfo, "<anim scale=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);

	foreach (Control in _Frame_PrestigeInfo.Controls) {
		AnimMgr.Flush(Control);
		if (_IsFocused) AnimMgr.Add(Control, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		else AnimMgr.Add(Control, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void ShowClubSkin(CMlFrame _Frame_ClubSkin, {{{ClubStruct::P}}}K_BucketActivity _ClubSkin, Text _ScrollViewLayout) {
	declare CMlFrame ControlBlockList_ClubSkinName <=> (_Frame_ClubSkin.GetFirstChild("control-block-list-club-skin-name") as CMlFrame);
	declare CMlLabel Label_SkinsCount <=> (_Frame_ClubSkin.GetFirstChild("label-skins-count") as CMlLabel);
	declare CMlFrame ControlBlockList_ClubSkinImage <=> (_Frame_ClubSkin.GetFirstChild("control-block-list-club-skin-image") as CMlFrame);
	declare CMlQuad Quad_ClubSkinPopularity <=> (_Frame_ClubSkin.GetFirstChild("quad-club-skin-popularity") as CMlQuad);

	/* Common */
	_Frame_ClubSkin.Visible = True;
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_ClubSkinName, [_ClubSkin.CreatorAccountId, _ClubSkin.LatestEditorAccountId], _ClubSkin.Name);
	Quad_ClubSkinPopularity.Visible = True;
	Quad_ClubSkinPopularity.ChangeImageUrl(C_ImageUrls_PopularityLevel.get(_ClubSkin.PopularityLevel, ""));
	if (_ClubSkin.BucketItemCount > 1) {
		Label_SkinsCount.SetText(TL::Compose("{{{Text_Skins}}}", ""^_ClubSkin.BucketItemCount));
	} else if (_ClubSkin.BucketItemCount == 1) {
		Label_SkinsCount.SetText("{{{Text_Skin}}}");
	} else {
		Label_SkinsCount.SetText("");
	}
	if (_ClubSkin.MediaUrl != "") {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_ClubSkinImage, [_ClubSkin.CreatorAccountId, _ClubSkin.LatestEditorAccountId], _ClubSkin.MediaUrl);
	} else {
		{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_ClubSkinImage, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");
	}
	if ({{{ControlBlockList::P}}}IsBlocked(This, [_ClubSkin.CreatorAccountId, _ClubSkin.LatestEditorAccountId])) {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_ClubSkin, {{{MenuSounds::P}}}C_Sound_SelectError);
	} else {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_ClubSkin, {{{MenuSounds::P}}}C_Sound_Select);
	}

	switch (_ScrollViewLayout) {
		case C_ScrollView_Grid: {
			Tools::FitLabelValue(Label_SkinsCount, 1., 0.5, 0.25);
		}
		case C_ScrollView_List: {
			declare CMlFrame ControlBlockList_ClubName <=> (_Frame_ClubSkin.GetFirstChild("control-block-list-club-name") as CMlFrame);
			{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_ClubName, [_ClubSkin.CreatorAccountId, _ClubSkin.LatestEditorAccountId], _ClubSkin.ClubName);
		}
	}
}

Void ShowClubSkinLoading(CMlFrame _Frame_ClubSkin, Text _ScrollViewLayout) {
	declare CMlFrame ControlBlockList_ClubSkinName <=> (_Frame_ClubSkin.GetFirstChild("control-block-list-club-skin-name") as CMlFrame);
	declare CMlLabel Label_SkinsCount <=> (_Frame_ClubSkin.GetFirstChild("label-skins-count") as CMlLabel);
	declare CMlFrame ControlBlockList_ClubSkinImage <=> (_Frame_ClubSkin.GetFirstChild("control-block-list-club-skin-image") as CMlFrame);
	declare CMlQuad Quad_ClubSkinPopularity <=> (_Frame_ClubSkin.GetFirstChild("quad-club-skin-popularity") as CMlQuad);

	/* Common */
	_Frame_ClubSkin.Visible = True;
	Label_SkinsCount.SetText("");
	{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_ClubSkinName, [], "{{{Text_Retrieving}}}");
	{{{ControlBlockList::P}}}SetOwnersAndImageUrl(This, ControlBlockList_ClubSkinImage, [], "{{{Const::C_ImageUrl_ClubActivity_Default}}}");
	Quad_ClubSkinPopularity.Visible = False;
	{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_ClubSkin, {{{MenuSounds::P}}}C_Sound_SelectError);

	switch (_ScrollViewLayout) {
		case C_ScrollView_List: {
			declare CMlFrame ControlBlockList_ClubName <=> (_Frame_ClubSkin.GetFirstChild("control-block-list-club-name") as CMlFrame);
			{{{ControlBlockList::P}}}SetOwnersAndTextValue(This, ControlBlockList_ClubName, [], "");
		}
	}
}

Void HideClubSkin(CMlFrame _Frame_ClubSkin) {
	_Frame_ClubSkin.Visible = False;
}

Void FocusClubSkin(CMlFrame _Frame_ClubSkin, Text _ScrollViewLayout, Boolean _IsFocused) {
	if (_Frame_ClubSkin == Null) return;
	declare CMlFrame ControlBlockList_ClubSkinName <=> (_Frame_ClubSkin.GetFirstChild("control-block-list-club-skin-name") as CMlFrame);
	declare CMlLabel Label_SkinsCount <=> (_Frame_ClubSkin.GetFirstChild("label-skins-count") as CMlLabel);
	declare CMlQuad Quad_ClubSkinPopularity <=> (_Frame_ClubSkin.GetFirstChild("quad-club-skin-popularity") as CMlQuad);

	switch (_ScrollViewLayout) {
		case C_ScrollView_Grid: {
			declare CMlQuad Quad_Contour <=> (_Frame_ClubSkin.GetFirstChild("quad-contour") as CMlQuad);
			declare CMlQuad Quad_Gradient <=> (_Frame_ClubSkin.GetFirstChild("quad-gradient") as CMlQuad);
			
			AnimMgr.Flush(Label_SkinsCount);
			AnimMgr.Flush(Quad_ClubSkinPopularity);
			AnimMgr.Flush(Quad_Contour);
			AnimMgr.Flush(Quad_Gradient);
			if (_IsFocused) {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubSkinName, 1., 250);
				AnimMgr.Add(Label_SkinsCount, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_ClubSkinPopularity, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubSkinName, 0.7, 250);
				AnimMgr.Add(Label_SkinsCount, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_ClubSkinPopularity, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Contour, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.7\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
		case C_ScrollView_List: {
			declare CMlFrame Frame_Background <=> (_Frame_ClubSkin.GetFirstChild("frame-background") as CMlFrame);
			declare CMlFrame ControlBlockList_ClubName <=> (_Frame_ClubSkin.GetFirstChild("control-block-list-club-name") as CMlFrame);
			
			AnimMgr.Flush(Label_SkinsCount);
			AnimMgr.Flush(Quad_ClubSkinPopularity);
			if (_IsFocused) {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubSkinName, 1., 250);
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubName, 1., 250);
				AnimMgr.Add(Label_SkinsCount, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_ClubSkinPopularity, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, 1.);
			} else {
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubSkinName, 0.6, 250);
				{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_ClubName, 0.6, 250);
				AnimMgr.Add(Label_SkinsCount, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Quad_ClubSkinPopularity, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				{{{ExpendableAsset::P}}}SetOpacity(This, Frame_Background, .6);
			}
		}
	}

	// Text to speech
	if (_IsFocused) {
		{{{ControlBlockList::P}}}TTS_Focus(ControlBlockList_ClubSkinName);
	} else {
		{{{ControlBlockList::P}}}TTS_Unfocus(ControlBlockList_ClubSkinName);
	}
}

Void UnfocusClubSkin(CMlFrame _Frame_ClubSkin, Text _ScrollViewLayout) {
	FocusClubSkin(_Frame_ClubSkin, _ScrollViewLayout, False);
}

K_State DeleteSkin(K_State _State, Integer _SkinKey) {
	declare K_State State = _State;

	State.SkinKeyToDelete = _SkinKey;
	DisplayInfo(State.Controls.Label_Info, "", False);
	{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.PopUpMultiChoice_Remove);

	return State;
}

Void ShowSkin(K_State _State, CMlFrame _Frame_Skin, {{{ClubStruct::P}}}K_Skin _Skin) {
	declare CMlFrame ControlBlockList_Name <=> (_Frame_Skin.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlLabel Label_Author <=> (_Frame_Skin.GetFirstChild("label-author") as CMlLabel);
	declare CMlFrame ControlBlockList_Image <=> (_Frame_Skin.GetFirstChild("control-block-list-image") as CMlFrame);
	declare CMlQuad Quad_ButtonDelete <=> (_Frame_Skin.GetFirstChild("quad-button-delete") as CMlQuad);
	declare CMlQuad Quad_CurrentSkin <=> (_Frame_Skin.GetFirstChild("quad-current-skin") as CMlQuad);
	declare Boolean IsUsed = _Skin.IsUsed && (_State.IsCombineFeatureEnabled || _State.Prestiges.UserPrestige.SkinOptions == "");

	{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlBlockList_Name, _Skin.CreatorAccountId, _Skin.DisplayName, False);
	{{{ControlBlockList::P}}}SetTTSAltText(
		This,
		ControlBlockList_Name,
		TL::Compose("%2 "^TL::GetTranslatedText("{{{Text_AuthorName}}}"), _Skin.CreatorDisplayName, _Skin.DisplayName),
		{{{ControlBlockList::P}}}C_DefaultTextValueBlocked,
		False
	);
	Label_Author.SetText(TL::Compose("{{{Text_AuthorName}}}", {{{UserStore::P}}}GetPlayerName(_Skin.CreatorDisplayName, _Skin.CreatorIsFirstPartyDisplayName)));
	{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, ControlBlockList_Image, _Skin.CreatorAccountId, _Skin.ThumbnailUrl);
	Quad_CurrentSkin.Visible = IsUsed && !Quad_ButtonDelete.Visible;
	if ({{{ControlBlockList::P}}}IsBlocked(This, _Skin.CreatorAccountId)) {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_Skin, {{{MenuSounds::P}}}C_Sound_SelectError);
	} else {
		{{{MenuSounds::P}}}SetCustomSelectSound(_Frame_Skin, {{{MenuSounds::P}}}C_Sound_Select);
	}

	if (IsUsed) {
		{{{ControlBlockList::P}}}SetTextColor(This, ControlBlockList_Name, ColorPalette::C_Color_Vec3_GreenOne, False);
		Label_Author.TextColor = ColorPalette::C_Color_Vec3_GreenOne;
	} else {
		{{{ControlBlockList::P}}}SetTextColor(This, ControlBlockList_Name, ColorPalette::C_Color_Vec3_White, False);
		Label_Author.TextColor = <1., 1., 1.>;
	}
	Tools::FirstPartyLogoMatchLuminance(Label_Author);

	{{{ControlBlockList::P}}}Redraw(This, ControlBlockList_Name);
	{{{Button::P}}}ShowAndUnlock(_Frame_Skin);
}

Void FocusSkin(CMlFrame _Frame_Skin, Boolean _IsFocused) {
	declare CMlFrame ControlBlockList_Name <=> (_Frame_Skin.GetFirstChild("control-block-list-name") as CMlFrame);
	declare CMlLabel Label_Author <=> (_Frame_Skin.GetFirstChild("label-author") as CMlLabel);
	declare CMlQuad Quad_Bg <=> (_Frame_Skin.GetFirstChild("quad-bg") as CMlQuad);
	declare CMlQuad Quad_Contour <=> (_Frame_Skin.GetFirstChild("quad-contour") as CMlQuad);
	declare CMlFrame ControlBlockList_Image <=> (_Frame_Skin.GetFirstChild("control-block-list-image") as CMlFrame);
	declare CMlQuad Quad_ButtonDelete <=> (_Frame_Skin.GetFirstChild("quad-button-delete") as CMlQuad);
	declare CMlQuad Quad_CurrentSkin <=> (_Frame_Skin.GetFirstChild("quad-current-skin") as CMlQuad);

	AnimMgr.Flush(Label_Author);
	AnimMgr.Flush(Quad_Contour);
	AnimMgr.Flush(Quad_Bg);
	if (_IsFocused) {
		Quad_CurrentSkin.Hide();
		Quad_ButtonDelete.Show();
		AnimMgr.Add(Quad_Bg, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 1., 250);
		AnimMgr.Add(Label_Author, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Contour, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Image, 1., 250);
	} else {
		Quad_ButtonDelete.Hide();
		Quad_CurrentSkin.Visible = Label_Author.TextColor == ColorPalette::C_Color_Vec3_GreenOne;
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Name, 0.6, 250);
		AnimMgr.Add(Label_Author, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Contour, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_Image, 0.6, 250);
		AnimMgr.Add(Quad_Bg, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	// Text to speech
	if (_IsFocused) {
		{{{ControlBlockList::P}}}TTS_Focus(ControlBlockList_Name);
	} else {
		{{{ControlBlockList::P}}}TTS_Unfocus(ControlBlockList_Name);
	}
}

K_State Focus(K_State _State, CMlControl _From, CMlControl _To, Boolean _IsMouse) {
	if ({{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;
	declare Integer PreviouslyFocusedSkinKey = State.Carousel.FocusedSkin_SkinListKey;

	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton((_From as CMlFrame))) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{Scroll::P}}}IsScroll(_From)) {
			{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		} else if (_From.HasClass("{{{C_Class_MySkinsButton}}}")) {
			FocusSkin(_From as CMlFrame, False);
			State.Carousel.FocusedSkin_SkinListKey = -1;
		} else if (_From.HasClass("{{{C_Class_Filter}}}") || _From.HasClass("{{{C_Class_Option}}}")) {
			FocusFilterOrOption(_From as CMlFrame, False, _IsMouse);
		} else if (_From.HasClass("{{{C_Class_PrestigeInfo}}}")) {
			FocusPrestigeInfo(State.Controls.Frame_MiddlePrestige, _IsMouse);
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton((_To as CMlFrame))) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{Scroll::P}}}IsScroll(_To)) {
			{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		} else if (_To.HasClass("{{{C_Class_MySkinsButton}}}")) {
			declare Integer SkinKey for _To;
			FocusSkin(_To as CMlFrame, True);
			State.Carousel.FocusedSkin_SkinListKey = SkinKey;
			State.Carousel.FocusedSkin_CarouselIndex = State.Carousel.SkinButtonsVisible.keyof(_To as CMlFrame);
		} else if (_To.HasClass("{{{C_Class_Filter}}}") || _To.HasClass("{{{C_Class_Option}}}")) {
			FocusFilterOrOption(_To as CMlFrame, True, _IsMouse);
		} else if (_To.HasClass("{{{C_Class_PrestigeInfo}}}")) {
			FocusPrestigeInfo(State.Controls.Frame_MiddlePrestige, True);
		}
	}

	UpdateControllerInfo(State);
	if (State.Carousel.FocusedSkin_SkinListKey != PreviouslyFocusedSkinKey) {
		State.RefreshDisplayedScene = Now + C_Delay_SceneRefresh;
	}

	return State;
}

K_State FocusAvailableControl(K_State _State) {
	declare K_State State = _State;

	switch (State.CurrentTab) {
		case {{{C_Tab_Prestige}}}: {
			if (!{{{Navigation::P}}}IsLocked(State.Controls.Frame_PrestigesFocus)) {
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Frame_PrestigesFocus, False);
			} else if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_ApplyPrestige)) {
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Button_ApplyPrestige, False);
			} else if (!{{{Navigation::P}}}IsLocked(State.Controls.Frame_Filters.Controls[0])) {
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Frame_Filters.Controls[0], False);
			} else if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Button_Back, False);
			}
		}
		case {{{C_Tab_MySkins}}}: {
			if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Create)) {
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Button_Create, False);
			} else if (State.Carousel.SkinButtonsVisible.existskey(State.Carousel.FocusedSkin_CarouselIndex) && !{{{Navigation::P}}}IsLocked(State.Carousel.SkinButtonsVisible[State.Carousel.FocusedSkin_CarouselIndex])) {
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Carousel.SkinButtonsVisible[State.Carousel.FocusedSkin_CarouselIndex], False);
			} else if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Button_Back, False);
			}
		}
		case {{{C_Tab_ClubSkins}}}: {
			if ({{{Scroll::P}}}GetElementsTotal(State.ScrollView.Scroll_ClubSkins) > 0) {
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.ScrollView.Scroll_ClubSkins, False);
			} else if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Button_Back, False);
			}
		}
		case {{{C_Tab_Pilot}}}: {
			if (!{{{Navigation::P}}}IsLocked(State.Controls.Frame_Options.Controls[0])) {
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Frame_Options.Controls[0], False);
			} else if (!{{{Navigation::P}}}IsLocked(State.Controls.Button_Back)) {
				State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Button_Back, False);
			}
		}
	}

	return State;
}

Void FocusSearch(K_State _State, Boolean _IsFocused) {
	LockNavigation(_State, _IsFocused);
	if (_IsFocused) {
		{{{ExpendableAsset::P}}}SetColor(This, _State.ScrollView.Asset_EntrySearchContour, <1., 1., 1.>);
	} else {
		{{{ExpendableAsset::P}}}SetColor(This, _State.ScrollView.Asset_EntrySearchContour, ColorPalette::C_Color_Vec3_GreenOne);
	}
}

Void DisplaySearch(K_State _State, Text _EntryText, Boolean _IsSearchButton, Boolean _Visible, Boolean _IsAnimated) {
	declare {{{TitleBar::P}}}K_Actions[Integer] Actions = _State.Actions;

	// Update search background
	if (_Visible) {
		{{{ExpendableAsset::P}}}SetWidth(This, _State.ScrollView.Asset_EntrySearch, {{{Size_SearchBar.X}}}, False);
		{{{ExpendableAsset::P}}}SetWidth(This, _State.ScrollView.Asset_EntrySearchContour, {{{Size_SearchBar.X}}}, False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _State.ScrollView.Asset_EntrySearch, 1., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _State.ScrollView.Asset_EntrySearchContour, 1., False);
		Actions[{{{TitleBar::P}}}C_Action_Second].ActionMargin = {{{Size_SearchBar.X}}} - 10.;
		Actions[{{{TitleBar::P}}}C_Action_First].IconMargin = 2.;
	} else {
		{{{ExpendableAsset::P}}}SetWidth(This, _State.ScrollView.Asset_EntrySearch, 0., False);
		{{{ExpendableAsset::P}}}SetWidth(This, _State.ScrollView.Asset_EntrySearchContour, 0., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _State.ScrollView.Asset_EntrySearch, 0., False);
		{{{ExpendableAsset::P}}}SetOpacity(This, _State.ScrollView.Asset_EntrySearchContour, 0., False);
	}
	{{{ExpendableAsset::P}}}RedrawAsset(This, _State.ScrollView.Asset_EntrySearch, _IsAnimated);
	{{{ExpendableAsset::P}}}RedrawAsset(This, _State.ScrollView.Asset_EntrySearchContour, _IsAnimated);
	{{{TitleBar::P}}}SetActions(_State.Controls.TitleBar_Common, Actions, False);
	{{{TitleBar::P}}}RedrawTitleBar(_State.Controls.TitleBar_Common, _IsAnimated);

	// Update entry
	_State.ScrollView.Entry_Search.Visible = _Visible;
	_State.ScrollView.Entry_Search.Value = _EntryText;
	if (_IsSearchButton && _State.ScrollView.Entry_Search.Visible) {
		_State.ScrollView.Entry_Search.StartEdition();
		FocusSearch(_State, _Visible);
	}
}

K_State SwitchScrollViewLayout(K_State _State, {{{TitleBar::P}}}K_Actions[Integer] _Actions_ClubSkinsList, {{{TitleBar::P}}}K_Actions[Integer] _Actions_ClubSkinsGrid){
	declare K_State State = _State;
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
	declare Integer ScrollViewElementKey = {{{Scroll::P}}}GetFocusedElementKey(State.ScrollView.Scroll_ClubSkins);
	declare Boolean IsSearchBarVisible = {{{ExpendableAsset::P}}}GetOpacity(State.ScrollView.Asset_EntrySearch) >= 1.;
	declare Vec2 ScrollOffset = State.ScrollView.Scroll_ClubSkins.ScrollOffset;
	declare Text EntryText = State.ScrollView.Entry_Search.Value;

	/* Lock previous scroll view */
	{{{Scroll::P}}}LockNavigation(State.ScrollView.Scroll_ClubSkins, True);

	/* Switch between ScrollView layouts */
	switch (State.ScrollView.CurrentLayout) {
		case C_ScrollView_List: {
			State.ScrollView.CurrentLayout = C_ScrollView_Grid;
			State.Actions = _Actions_ClubSkinsList;
		}
		case C_ScrollView_Grid: {
			State.ScrollView.CurrentLayout = C_ScrollView_List;
			State.Actions = _Actions_ClubSkinsGrid;
		}
	}
	State.ScrollView.Frame_ScrollView_Grid.Visible = State.ScrollView.CurrentLayout == C_ScrollView_Grid;
	State.ScrollView.Frame_ScrollView_List.Visible = State.ScrollView.CurrentLayout == C_ScrollView_List;
	State.ScrollView.Scroll_ClubSkins <=> (State.Controls.Frame_Global.GetFirstChild("scroll-club-skins-"^State.ScrollView.CurrentLayout) as CMlFrame);
	
	/* Unlock current scroll view */
	{{{Scroll::P}}}LockNavigation(State.ScrollView.Scroll_ClubSkins, False);
	
	/* Transfer FocusedControl from previous scroll to the current scroll */
	{{{Scroll::P}}}Unfocus(This, State.ScrollView.Scroll_ClubSkins);
	{{{Scroll::P}}}ScrollToPosition(This, State.ScrollView.Scroll_ClubSkins, ScrollOffset.Y, False);
	if (FocusedControl != Null && TL::StartsWith("scroll-club-skins-", FocusedControl.ControlId)) {
		FocusedControl = State.ScrollView.Scroll_ClubSkins;
		{{{Scroll::P}}}ScrollToElement(This, State.ScrollView.Scroll_ClubSkins, ScrollViewElementKey, True);
	}
	State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), FocusedControl, False);

	/* Update scroll */
	DisplaySearch(State, EntryText, False, IsSearchBarVisible, False);
	{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Scroll_ClubSkins);

	/* Update Back button navigation */
	{{{Navigation::P}}}ChangeControlTargets(This, State.Controls.Button_Back, ["right", "up"], [State.ScrollView.Scroll_ClubSkins.ControlId, State.ScrollView.Scroll_ClubSkins.ControlId]);

	return State;
}

K_State DisplayBrowser(K_State _State, Boolean _IsVisible) {
	declare K_State State = _State;

	if (_IsVisible) {
		State = DestroyScene(State);
		// Initialize the browser only once we need it for the first time
		// instead of doing it in `MainStart` where it would cause a visible
		// lag during the compilation of the menu at the start of the game.
		if (State.IsBrowserInitialized) {
			{{{BrowserAPI::P}}}RefreshBrowserData(This);
		} else {
			declare BrowserSettings = {{{BrowserAPI::P}}}GetDefaultSettings();
			BrowserSettings.FilterByExtension.add("zip");
			{{{BrowserAPI::P}}}SetCurrentBrowser(This, 
				{{{BrowserAPI::C_BrowserType_PathNavigationSmall}}},
				"{{{BrowserAPI::C_BrowserName_Skin}}}",
				"{{{Text_SkinSelection}}}",
				[{{{BrowserAPI::C_DataType_Skin}}}],
				"Models/CarSport/",
				BrowserSettings,
				False
			);
			State.IsBrowserInitialized = True;
		}
	}

	LockNavigation(State, _IsVisible);
	State.Controls.Frame_Browser.Visible = _IsVisible;
	{{{BrowserAPI::P}}}FocusBrowser(This, _IsVisible);

	return State;
}

K_State LaunchEditor(K_State _State, Text _FileName) {
	declare K_State State = _State;

	if (Platform::IsPC(System)) {
		State = DestroyScene(State);

		//L16N [Garage] Text displayed during the loading screen of the skin editor.
		SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", [_("Skin painter")]);
		SendCustomEvent("{{{UbisoftChallenges::C_Challenge_CreateSkin}}}", []);
		if (_FileName != "") TitleControl::EditSkinsFromFileName(TitleControl, _FileName);
		else TitleControl::EditSkins(TitleControl);

		// Display the camera when the player is coming back from the editor
		State = DisplayScene(State, True);
	}

	return State;
}

K_State GetAccountPrestigeList(K_State _State) {
	declare K_State State = _State;

	{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.Frame_LoadingSpinner, "{{{Text_RetrievingPrestige}}}");
	State.Task_GetAccountPrestigeList = Task::DestroyAndCreate(
		State.Task_GetAccountPrestigeList, 
		UserMgr, 
		UserMgr.Prestige_GetAccountPrestigeList(MainUser::GetMainUserId())
	);

	return State;
}

K_State GetCurrentAccountPrestige(K_State _State) {
	declare K_State State = _State;

	{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.Frame_LoadingSpinner, "{{{Text_RetrievingPrestige}}}");
	State.Task_GetCurrentAccountPrestige = Task::DestroyAndCreate(
		State.Task_GetCurrentAccountPrestige, 
		UserMgr, 
		UserMgr.Prestige_GetCurrentAccountPrestige(MainUser::GetMainUserId())
	);

	return State;
}

K_State GetPrestigeList(K_State _State) {
	declare K_State State = _State;
	declare Integer Year;
	declare CUserV2Manager::EPrestigeMode Mode;
	declare Text CategoryType;

	if (State.Filters.YearList.existskey(State.Filters.YearCurrentIndex)) {
		Year = State.Filters.YearList[State.Filters.YearCurrentIndex];
	}
	if (State.Filters.ModeList.existskey(State.Filters.ModeCurrentIndex)) {
		Mode = State.Filters.ModeList[State.Filters.ModeCurrentIndex];
	}
	if (State.Filters.CategoryTypeList.existskey(State.Filters.CategoryTypeCurrentIndex)) {
		CategoryType = State.Filters.CategoryTypeList[State.Filters.CategoryTypeCurrentIndex];
	}

	{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.Frame_LoadingSpinner, "{{{Text_RetrievingPrestige}}}");
	State.Task_GetPrestigeList = Task::DestroyAndCreate(State.Task_GetPrestigeList, UserMgr, UserMgr.Prestige_GetPrestigeList(MainUser::GetMainUserId(), Mode, Year, CategoryType));

	return State;
}

K_State SetUnsetCurrentAccountPrestige(K_State _State, Text _PrestigeId) {
	declare K_State State = _State;

	State.Task_SetUnsetCurrentAccountPrestige = Task::Destroy(State.Task_SetUnsetCurrentAccountPrestige);
	if ({{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_UsePrestigeSkin) || _PrestigeId == "") {
		{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.Frame_LoadingSpinner, "{{{Text_ApplyingPrestige}}}");
		if (_PrestigeId != "") {
			if (!State.IsCombineFeatureEnabled) UserMgr.MainUserProfile.User_CombinePrestigeAndSkins = True; //< Temporarily update this boolean to True only during tasks execution
			State.Task_SetUnsetCurrentAccountPrestige = Task::Create(UserMgr, UserMgr.Prestige_SetCurrentAccountPrestige(MainUser::GetMainUserId(), _PrestigeId));
		} else {
			State.Task_SetUnsetCurrentAccountPrestige = Task::Create(UserMgr, UserMgr.Prestige_ResetCurrentAccountPrestige(MainUser::GetMainUserId()));
		}
	} else {
		{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
		{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
			"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_UsePrestigeSkin)
		]);
	}

	return State;
}

Void ConfirmPrestigeReset(K_State _State) {
	if (_State.Prestiges.UserPrestige.PrestigeId != "") {
		{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.PopUpMultiChoice_PrestigeReset);
	}
}

K_State UpdatePrestigeCarousel(K_State _State, Integer _Offset) {
	declare K_State State = _State;

	// Update pager
	State.Prestiges.FocusedPrestige_FilteredListKey = ML::Clamp(State.Prestiges.FocusedPrestige_FilteredListKey + _Offset, 0, ML::Abs(State.Prestiges.FilteredPrestigeList.count-1));
	{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_PreviousPrestige, State.Prestiges.FilteredPrestigeList.count > 0 && State.Prestiges.FocusedPrestige_FilteredListKey > 0);
	{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_NextPrestige, State.Prestiges.FilteredPrestigeList.count > 0 && State.Prestiges.FocusedPrestige_FilteredListKey < State.Prestiges.FilteredPrestigeList.count-1);
	{{{Navigation::P}}}Lock(State.Controls.Frame_PrestigesFocus, State.Prestiges.FilteredPrestigeList.count <= 0);
	if ({{{Navigation::P}}}IsFocusedControlLocked(This, "{{{C_NavGroup_Default}}}")) {
		FocusAvailableControl(State);
	}
	
	// Update current prestige info
	for (Index, -1, 1) {
		declare PrestigeStruct::K_Prestige Prestige;
		declare CMlFrame Frame_PrestigeInfo = (State.Controls.Frame_PrestigesFocus.GetFirstChild("frame-prestige-info-"^Index) as CMlFrame);
		declare CMlLabel Label_PrestigeName = (Frame_PrestigeInfo.GetFirstChild("label-prestige-name") as CMlLabel);
		declare CMlLabel Label_PrestigeStat = (Frame_PrestigeInfo.GetFirstChild("label-prestige-stat") as CMlLabel);
		declare CMlLabel Label_PrestigeLevel = (Frame_PrestigeInfo.GetFirstChild("label-prestige-level") as CMlLabel);
		declare CMlQuad Quad_PrestigeCurrent = (Frame_PrestigeInfo.GetFirstChild("quad-prestige-current") as CMlQuad);
		declare CMlQuad Quad_PrestigeLocked = (Frame_PrestigeInfo.GetFirstChild("quad-prestige-locked") as CMlQuad);

		if (State.Prestiges.FilteredPrestigeList.existskey(State.Prestiges.FocusedPrestige_FilteredListKey+Index)) {
			Prestige = State.Prestiges.FilteredPrestigeList[State.Prestiges.FocusedPrestige_FilteredListKey+Index];
		} else if (Index == 0 && State.Prestiges.FilteredPrestigeList.count <= 0) {
			Prestige = State.Prestiges.UserPrestige;
		}

		if (Prestige.PrestigeId != "") {
			if (Index == 0) State.Prestiges.FocusedPrestige_PrestigeId = Prestige.PrestigeId;

			// Display a lock on locked prestige
			Quad_PrestigeLocked.Visible = !Prestige.IsUnlocked;
			
			// Update prestige labels text
			switch (Prestige.Mode) {
				case CUserV2Manager::EPrestigeMode::Ranked: Label_PrestigeName.SetText(TL::Compose("%1 %2 %3", C_Rank_Names.get(PrestigeStruct::ConvertToRankedRank(Prestige)), C_PrestigeModes.get(Prestige.Mode, ""), ""^Prestige.Year));
				case CUserV2Manager::EPrestigeMode::Season: Label_PrestigeName.SetText(TL::Compose("%1 %2 %3", Medals::GetScoreMgrMedalName(Prestige.CategoryLevel), C_Season_Names.get(Prestige.CategoryType, ""), ""^Prestige.Year));
				case CUserV2Manager::EPrestigeMode::Royal: Label_PrestigeName.SetText(TL::Compose("%1 %2 %3", Medals::GetScoreMgrMedalName(Prestige.CategoryLevel), C_RoyalCategoyTypes.get(Prestige.CategoryType, ""), ""^Prestige.Year));
			}
			Label_PrestigeStat.SetText("");
			if (Prestige.IsUnlocked) {
				switch (Prestige.Mode) {
					case CUserV2Manager::EPrestigeMode::Ranked: Label_PrestigeStat.SetText("{{{Text_RankedPrestigeStat}}}");
					case CUserV2Manager::EPrestigeMode::Season: {
						if (Prestige.StatValueForNextLevel < 0) {
							Label_PrestigeStat.SetText(TL::Compose("{{{Text_OfficialPrestigeStat}}}", ""^Prestige.StatCurrentValue));
						} else if (Prestige.StatValueForNextLevel - Prestige.StatCurrentValue > 1) {
							Label_PrestigeStat.SetText(TL::Compose("{{{Text_NextPrestigeLevelMedals}}}", ""^Prestige.StatValueForNextLevel - Prestige.StatCurrentValue));
						} else {
							Label_PrestigeStat.SetText("{{{Text_NextPrestigeLevelOneMedal}}}");
						}
					}
					case CUserV2Manager::EPrestigeMode::Royal: {
						switch (Prestige.CategoryLevel) {
							case Medals::C_ScoreMgrMedal_Bronze: Label_PrestigeStat.SetText("{{{Text_RoyalPrestigeStat_Fourth}}}");
							case Medals::C_ScoreMgrMedal_Silver: Label_PrestigeStat.SetText("{{{Text_RoyalPrestigeStat_Third}}}");
							case Medals::C_ScoreMgrMedal_Gold: Label_PrestigeStat.SetText("{{{Text_RoyalPrestigeStat_Second}}}");
							case Medals::C_ScoreMgrMedal_Author: Label_PrestigeStat.SetText("{{{Text_RoyalPrestigeStat_First}}}");
						}
					}
				}
			} else if (IsPrestigeUnlockable(Prestige)) {
				switch (Prestige.Mode) {
					case CUserV2Manager::EPrestigeMode::Ranked: Label_PrestigeStat.SetText("{{{Text_RankedPrestigeStatLocked}}}");
					case CUserV2Manager::EPrestigeMode::Season: Label_PrestigeStat.SetText(TL::Compose("{{{Text_OfficialPrestigeStatLocked}}}", ""^Prestige.StatValueForNextLevel - Prestige.StatCurrentValue));
					case CUserV2Manager::EPrestigeMode::Royal: {
						switch (Prestige.CategoryLevel) {
							case Medals::C_ScoreMgrMedal_Bronze: Label_PrestigeStat.SetText("{{{Text_RoyalPrestigeStatLocked_Fourth}}}");
							case Medals::C_ScoreMgrMedal_Silver: Label_PrestigeStat.SetText("{{{Text_RoyalPrestigeStatLocked_Third}}}");
							case Medals::C_ScoreMgrMedal_Gold: Label_PrestigeStat.SetText("{{{Text_RoyalPrestigeStatLocked_Second}}}");
							case Medals::C_ScoreMgrMedal_Author: Label_PrestigeStat.SetText("{{{Text_RoyalPrestigeStatLocked_First}}}");
						}
					}
				}
			} else {
				Label_PrestigeStat.SetText("{{{Text_PastPrestige}}}");
			}
			if (Prestige.PrestigeLevel > 0) {
				Label_PrestigeLevel.SetText(TL::Compose("{{{Text_PrestigeLevel}}}", ""^Prestige.PrestigeLevel));
			} else {
				Label_PrestigeLevel.SetText("");
			}

			// Update prestige labels color
			if (Prestige.PrestigeId == State.Prestiges.UserPrestige.PrestigeId) {
				Label_PrestigeName.TextColor = ColorPalette::C_Color_Vec3_GreenOne;
				Label_PrestigeStat.TextColor = ColorPalette::C_Color_Vec3_GreenOne;
				Label_PrestigeLevel.TextColor = ColorPalette::C_Color_Vec3_GreenOne;
			} else {
				Label_PrestigeName.TextColor = <1., 1., 1.>;
				Label_PrestigeStat.TextColor = <1., 1., 1.>;
				Label_PrestigeLevel.TextColor = <1., 1., 1.>;
			}

			// Display a tick icon for the current prestige
			Quad_PrestigeCurrent.Visible = Prestige.PrestigeId == State.Prestiges.UserPrestige.PrestigeId;
			Quad_PrestigeCurrent.RelativePosition_V3.X = -Label_PrestigeName.ComputeWidth(TL::GetTranslatedText(Label_PrestigeName.Value), False)*0.5;
		} else {
			Label_PrestigeName.SetText("");
			Label_PrestigeStat.SetText("");
			Label_PrestigeLevel.SetText("");
			Quad_PrestigeCurrent.Hide();
			Quad_PrestigeLocked.Hide();
		}
	}

	// Resfresh the displayed prestige
	State.RefreshDisplayedScene = Now + C_Delay_SceneRefresh;

	return State;
}

K_State DisplayLockedPrestiges(K_State _State, {{{TitleBar::P}}}K_Actions[Integer] _Actions_LockedPrestige, {{{TitleBar::P}}}K_Actions[Integer] _Actions_UnlockedPrestige, Boolean _AreLockedPrestigesDisplayed) {
	declare K_State State = _State;

	/* Update display state */
	State.Filters.AreLockedPrestigesDisplayed = _AreLockedPrestigesDisplayed;

	/* Update titlebar */
	if (State.Filters.AreLockedPrestigesDisplayed) State.Actions = _Actions_LockedPrestige;
	else State.Actions = _Actions_UnlockedPrestige;
	{{{TitleBar::P}}}SetActions(State.Controls.TitleBar_Common, State.Actions, False);
	{{{TitleBar::P}}}RedrawTitleBar(State.Controls.TitleBar_Common, False);
	UpdateControllerInfo(State);

	/* Update filters */
	State = UpdateFilter(State, C_Filter_Year, C_FilterShift_Null);
	if (State.Filters.AreLockedPrestigesDisplayed) {
		State.Filters.YearCurrentIndex = State.Filters.YearList.keyof(ML::Max(2023, Tools::GetYear()));
	} else if (State.Prestiges.UserPrestigeList.count > 0 && State.Prestiges.UserPrestige.PrestigeId != "") { //< Show the current prestige by default
		State.Filters.YearCurrentIndex = State.Filters.YearList.keyof(State.Prestiges.UserPrestige.Year);
		State = UpdateFilter(State, C_Filter_Mode, C_FilterShift_Null);
		State.Filters.ModeCurrentIndex = State.Filters.ModeList.keyof(State.Prestiges.UserPrestige.Mode);
		State = UpdateFilter(State, C_Filter_CategoryType, C_FilterShift_Null);
		State.Filters.CategoryTypeCurrentIndex = State.Filters.CategoryTypeList.keyof(State.Prestiges.UserPrestige.CategoryType);
		State.Prestiges.FocusedPrestige_FilteredListKey = State.Prestiges.UserPrestige.CategoryLevel-1;
	}
	State = UpdateFilters(State);

	/* Trigger a prestige list update */
	if (!State.Filters.AreLockedPrestigesDisplayed && State.Prestiges.UserPrestigeList.count <= 0) {
		State.Prestiges.FilteredPrestigeList.clear();
		State = UpdatePrestigeCarousel(State, C_Carousel_Refresh);
	} else {
		{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.Frame_LoadingSpinner, "{{{Text_RetrievingPrestige}}}");
		State.RefreshPrestigeList = Now + C_Delay_FilterPrestige;
	}

	return State;
}

Void DisplayApplyPrestigeButton(K_State _State, Boolean _IsDisplayed) {
	FocusPrestigeInfo(_State.Controls.Frame_MiddlePrestige, _IsDisplayed || {{{Navigation::P}}}IsFocused(This, _State.Controls.Frame_PrestigesFocus, "{{{C_NavGroup_Default}}}"));
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(_State.Controls.Button_ApplyPrestige, _IsDisplayed);
	if (!_IsDisplayed && {{{Navigation::P}}}IsFocused(This, _State.Controls.Button_ApplyPrestige, "{{{C_NavGroup_Default}}}")) {
		FocusAvailableControl(_State);
	}
	UpdateLoadingSpinnerPosition(_State);
}

K_State GetFavoriteList(K_State _State) {
	declare K_State State = _State;

	{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.Frame_LoadingSpinner, "{{{Text_RetrievingFavoriteSkins}}}");
	State.Task_GetFavoriteSkinList = Task::DestroyAndCreate(
		State.Task_GetFavoriteSkinList, 
		DataFileMgr, 
		DataFileMgr.AccountSkin_NadeoServices_GetFavoriteList(MainUser::GetMainUserId())
	);

	return State;
}

K_State SetUnsetSkin(K_State _State, {{{ClubStruct::P}}}K_Skin _Skin) {
	declare K_State State = _State;

	State.Task_SetUnsetSkin = Task::Destroy(State.Task_SetUnsetSkin);
	if (_Skin.Id != "" && _Skin.FileUrl != "") {
		if ({{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_UseCustomSkin)) {
			{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.Frame_LoadingSpinner, "{{{Text_ApplyingSkin}}}");
			State.Task_SetUnsetSkin = Task::Create(DataFileMgr, DataFileMgr.AccountSkin_NadeoServices_Set(MainUser::GetMainUserId(), _Skin.Id));
		} else {
			{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
				"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_UseCustomSkin)
			]);
		}
	} else if (State.PlayerSkins.CurrentSkin.FileUrl != "") { //< This means it is not a default country skin
		{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.Frame_LoadingSpinner, "{{{Text_ApplyingSkin}}}");
		State.Task_SetUnsetSkin = Task::Create(DataFileMgr, DataFileMgr.AccountSkin_NadeoServices_Unset(MainUser::GetMainUserId(), "{{{Const::C_SkinType_CarSport}}}"));
		State.SkinKeyToDelete = -1;
	}
	
	return State;
}

Void ConfirmSkinReset(K_State _State) {
	if (_State.PlayerSkins.CurrentSkin.FileUrl != "") { //< Open the reset skin pop-up only if it is not a default country skin
		{{{PopUpMultiChoice::P}}}Open(This, _State.Controls.PopUpMultiChoice_SkinReset);
	}
}

K_State UnsetSkinAsFavorite(K_State _State) {
	declare K_State State = _State;

	{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.Frame_LoadingSpinner, "{{{Text_RemovingSkin}}}");
	State.Task_UnsetFavoriteSkin = Task::DestroyAndCreate(
		State.Task_UnsetFavoriteSkin, 
		DataFileMgr, 
		DataFileMgr.AccountSkin_NadeoServices_RemoveFavorite(MainUser::GetMainUserId(), State.PlayerSkins.SkinList[State.SkinKeyToDelete].Id)
	);

	return State;
}

K_State RegisterSkin(K_State _State, {{{ClubStruct::P}}}K_Skin _Skin) {
	declare K_State State = _State;

	{{{LoadingSpinner::P}}}StartAnimWithFade(This, State.Controls.Frame_LoadingSpinner, "{{{Text_UploadingSkin}}}");
	State.Task_RegisterSkin = Task::DestroyAndCreate(
		State.Task_RegisterSkin, 
		DataFileMgr, 
		DataFileMgr.Skin_NadeoServices_Register(MainUser::GetMainUserId(), _Skin.DisplayName, _Skin.FileName)
	);

	return State;
}

Real GetSkinPosXInCarousel(Integer _Key) {
	declare Real PosX = _Key * ({{{Size_AdjustedSkin.X}}} + {{{SizeX_ButtonMargin}}});

	if (_Key < 0) {
		PosX -= MLHelpers::SkewX({{{Size_Skin.Y}}}, 10.);
	} else if (_Key >= {{{SkinPerPage}}}) {
		PosX += MLHelpers::SkewX({{{Size_Skin.Y}}}, 10.);
	}

	return PosX;
}

K_State UpdateSkinCarousel(K_State _State, Integer _Offset) {
	declare K_State State = _State;
	declare Integer Offset = _Offset;
	declare Boolean IsEmpty = State.Carousel.SkinButtonsVisible.count <= 0; //< No buttons in the carousel
	declare CMlControl FocusedControl = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
	declare CMlFrame[] SkinButtons;

	// Update pager
	State.Carousel.Offset = ML::Clamp(State.Carousel.Offset + _Offset, 0, ML::Abs(State.PlayerSkins.SkinList.count - {{{SkinPerPage}}}));
	{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_PreviousSkin, State.Carousel.Offset > 0);
	{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_NextSkin, State.PlayerSkins.SkinList.count > {{{SkinPerPage}}} && State.Carousel.Offset < State.PlayerSkins.SkinList.count - {{{SkinPerPage}}});
	State.Controls.Label_NoFavorites.Visible = State.PlayerSkins.SkinList.count <= 0;
	Offset = State.Carousel.Offset - _State.Carousel.Offset;

	// Fill the carousel with buttons if empty
	if (IsEmpty) {
		foreach (Index => SkinButton in State.Controls.Frame_Carousel.Controls) {
			if (Index != State.Controls.Frame_Carousel.Controls.count-1) {
				State.Carousel.SkinButtonsVisible.add(SkinButton as CMlFrame);
			} else {
				State.Carousel.AppearingSkin = (SkinButton as CMlFrame);
			}
		}
	}

	// Prepare carousel for upcoming animation
	SkinButtons = State.Carousel.SkinButtonsVisible;
	switch (_Offset) {
		case C_Carousel_Previous: { //< Move the appering skin at the beginning of the carousel
			SkinButtons.addfirst(State.Carousel.AppearingSkin);
			State.Carousel.SkinButtonsVisible.addfirst(State.Carousel.AppearingSkin);
			State.Carousel.AppearingSkin = State.Carousel.SkinButtonsVisible[State.Carousel.SkinButtonsVisible.count-1];
			State.Carousel.SkinButtonsVisible.remove(State.Carousel.AppearingSkin);
		}
		case C_Carousel_Next: { //< Move the appering skin at the end of the carousel
			SkinButtons.add(State.Carousel.AppearingSkin);
			State.Carousel.SkinButtonsVisible.add(State.Carousel.AppearingSkin);
			State.Carousel.AppearingSkin = State.Carousel.SkinButtonsVisible[0];
			State.Carousel.SkinButtonsVisible.remove(State.Carousel.AppearingSkin);
		}
	}

	// Set button
	foreach (Index => SkinButton in SkinButtons) {
		declare Integer SkinKey for SkinButton;
		declare Integer AdjustedIndex = Index + ML::Clamp(Offset, -ML::Abs(Offset), ML::Abs(Offset-1));
		SkinKey = AdjustedIndex + _State.Carousel.Offset; //< Use old offset value
		
		// If the carousel is empty, do no set buttons position to enable filling animation
		if (!IsEmpty) SkinButton.RelativePosition_V3 = <GetSkinPosXInCarousel(AdjustedIndex), 0.>;
		if (State.PlayerSkins.SkinList.existskey(SkinKey)) {
			ShowSkin(State, SkinButton, State.PlayerSkins.SkinList[SkinKey]);
		} else {
			{{{Button::P}}}HideAndLock(SkinButton);
		}
	}

	// Animation
	foreach (Index => SkinButton in SkinButtons) {
		declare Vec2 Pos_ButtonSkin = <GetSkinPosXInCarousel(Index + ML::Clamp(Offset, -ML::Abs(Offset), ML::Abs(Offset-1)) - Offset), 0.>;
		AnimMgr.Flush(SkinButton);
		if (Offset < 0) {
			AnimMgr.Add(SkinButton, "<anim pos=\""^Pos_ButtonSkin.X^" "^Pos_ButtonSkin.Y^"\" />", Now + (SkinButtons.count-Index)*20, 250, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(SkinButton, "<anim pos=\""^Pos_ButtonSkin.X^" "^Pos_ButtonSkin.Y^"\" />", Now + Index*20, 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}

	// Update navigation
	if (State.PlayerSkins.SkinList.count <= 0 || FocusedControl == Null) {
		State = FocusAvailableControl(State);
	} else if (FocusedControl.HasClass("{{{C_Class_MySkinsButton}}}") && State.Carousel.SkinButtonsVisible.existskey(State.Carousel.FocusedSkin_CarouselIndex)) {
		declare CMlFrame To = State.Carousel.SkinButtonsVisible[State.Carousel.FocusedSkin_CarouselIndex];
		if ({{{Navigation::P}}}IsLocked(To)) {
			foreach (Index => SkinButton in State.Carousel.SkinButtonsVisible) {
				declare Integer ReverseIndex = State.Carousel.SkinButtonsVisible.count-1 - Index;
				if (State.Carousel.SkinButtonsVisible.existskey(ReverseIndex) && !{{{Navigation::P}}}IsLocked(State.Carousel.SkinButtonsVisible[ReverseIndex])) {
					To = State.Carousel.SkinButtonsVisible[ReverseIndex];
					break;
				}
			}
		}
		State = Focus(State, FocusedControl, To, False);
	}

	return State;
}

K_State UpdateCombineFeature(K_State _State, Boolean _IsCombineFeatureEnabled) {
	declare K_State State = _State;

	State.Controls.Button_Combine.Parent.Visible = State.Prestiges.UserPrestigeList.count > 0 && (State.Controls.Frame_Prestige.Visible || State.Controls.Frame_MySkins.Visible);
	if (State.Controls.Button_Combine.Parent.Visible) {
		if (State.IsCombineFeatureEnabled != _IsCombineFeatureEnabled) {
			if ({{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_UseCustomSkin) || !_IsCombineFeatureEnabled) {
				declare persistent Boolean Persistent_Garage_HasSeenCombinePopUp for UserMgr.MainUser = False;
				{{{PopUpMultiChoice::P}}}Display(This, State.Controls.PopUpMultiChoice_CombinePrestigeAndSkins, !Persistent_Garage_HasSeenCombinePopUp && _IsCombineFeatureEnabled, True);
				UserMgr.MainUserProfile.User_CombinePrestigeAndSkins = _IsCombineFeatureEnabled;
				State.IsCombineFeatureEnabled = _IsCombineFeatureEnabled;
				State = DisplayScene(State, True);
			} else {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermission_UseCustomSkin)
				]);
			}
		}

		if (State.IsCombineFeatureEnabled) {
			{{{ExpendableButton::P}}}SetIconImageUrl(This, State.Controls.Button_Combine, "{{{Const::C_ImageUrl_Icon_Checkbox_Active_Square}}}");
		} else {
			{{{ExpendableButton::P}}}SetIconImageUrl(This, State.Controls.Button_Combine, "{{{Const::C_ImageUrl_Icon_Checkbox_Inactive_Square}}}");
		}

		if (State.CurrentTab == {{{C_Tab_MySkins}}}) {
			State = UpdateSkinCarousel(State, C_Carousel_Refresh);
		}
	}

	return State;
}

K_State Select(K_State _State, CMlControl _SelectedControl) {
	if (_SelectedControl == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	DisplayInfo(State.Controls.Label_Info, "", False);
	switch (_SelectedControl.ControlId) {
		case "button-reset": ConfirmSkinReset(State);
		case "button-previous-skin": State = UpdateSkinCarousel(State, C_Carousel_Previous);
		case "button-next-skin": State = UpdateSkinCarousel(State, C_Carousel_Next);
		case "button-previous-prestige": State = UpdatePrestigeCarousel(State, C_Carousel_Previous);
		case "button-next-prestige": State = UpdatePrestigeCarousel(State, C_Carousel_Next);
		case "button-combine": State = UpdateCombineFeature(State, !State.IsCombineFeatureEnabled);
		case "frame-prestiges-focus", "button-apply-prestige": {
			if (State.Prestiges.FocusedPrestige_PrestigeId != "" && State.Prestiges.FilteredPrestigeList.existskey(State.Prestiges.FocusedPrestige_FilteredListKey)) {
				if (State.Prestiges.FilteredPrestigeList[State.Prestiges.FocusedPrestige_FilteredListKey].IsUnlocked) {
					State = SetUnsetCurrentAccountPrestige(State, State.Prestiges.FocusedPrestige_PrestigeId);
				}
			}
		}
		case "button-back": {
			State = DestroyScene(State);
			{{{Router::P}}}PushParent(This);
		}
		case "button-upload": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_UseCustomSkin)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_UseCustomSkin)
				]);
			} else {
				State.BrowserMode = C_BrowserMode_UploadSkin;
				State = DisplayBrowser(State, True);
			}
		}
		case "button-create": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_OpenSkinEditor)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_OpenSkinEditor)
				]);
			} else {
				State = LaunchEditor(State, "");
			}
		}
		case "button-edit": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_OpenSkinEditor)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_OpenSkinEditor)
				]);
			} else {
				State.BrowserMode = C_BrowserMode_EditSkin;
				State = DisplayBrowser(State, True);
			}
		}
		default: {
			if (_SelectedControl.HasClass("{{{C_Class_MySkinsButton}}}")) {
				declare Integer SkinKey for _SelectedControl;
				if (State.PlayerSkins.SkinList.existskey(SkinKey)) {
					declare {{{ClubStruct::P}}}K_Skin SelectedSkin = State.PlayerSkins.SkinList[SkinKey];
					if (!{{{ControlBlockList::P}}}IsBlocked(This, SelectedSkin.CreatorAccountId)) {
						if (SelectedSkin.FileUrl == "") {
							//L16N [Garage] Message displayed when the selected skin is not correctly uploaded to Nadeo servers.
							DisplayInfo(State.Controls.Label_Info, _("Invalid skin. Please remove it and try to upload it again."), True);
						} else if (SelectedSkin.Id != State.PlayerSkins.CurrentSkin.Id) {
							State = SetUnsetSkin(State, SelectedSkin);
						} else { //< Update the camera if the current skin is not displayed correctly
							State = DisplayScene(State, True);
						}
					}
				}
			}
		}
	}

	return State;
}

// Update the given option
K_State UpdateOption(K_State _State, Integer _OptionId, Integer _ShiftNb) {
	declare K_State State = _State;
	declare CMlFrame Frame_Option = (State.Controls.Frame_Options.GetFirstChild("frame-option-"^_OptionId) as CMlFrame);
	declare CMlLabel Label_ListValue = (Frame_Option.GetFirstChild("label-option-value") as CMlLabel);
	declare CMlFrame Button_Previous = (Frame_Option.GetFirstChild("button-previous-option-"^_OptionId) as CMlFrame);
	declare CMlFrame Button_Next = (Frame_Option.GetFirstChild("button-next-option-"^_OptionId) as CMlFrame);
	declare CMlFrame Frame_Checkbox = (Frame_Option.GetFirstChild("checkbox-"^_OptionId) as CMlFrame);
	declare CMlFrame Frame_ColorSlider = (Frame_Option.GetFirstChild("color-slider-"^_OptionId) as CMlFrame);

	/* Update the given option */
	switch (_OptionId) {
		case C_Option_Morphology: {			
			// Update the option display
			Frame_Checkbox.Visible = False;
			Frame_ColorSlider.Visible = False;
			Label_ListValue.Visible = True;
			Button_Previous.Visible = True;
			Button_Next.Visible = True;
			Frame_Option.Visible = State.Options.MorphologyList.count > 0;

			// Update the option value
			if (Frame_Option.Visible && _ShiftNb != C_OptionShift_Checkbox) {
				State.Options.MorphologyCurrentIndex += _ShiftNb;
				if (_ShiftNb != C_OptionShift_Null) State.RefreshDisplayedScene = Now + C_Delay_SceneRefresh;
				if (State.Options.MorphologyCurrentIndex >= State.Options.MorphologyList.count) {
					State.Options.MorphologyCurrentIndex = 0;
				}	else if (State.Options.MorphologyCurrentIndex < 0) {
					State.Options.MorphologyCurrentIndex = State.Options.MorphologyList.count-1;
				}
				Label_ListValue.SetText(TL::Compose("{{{Text_MorphologyType}}}", ""^State.Options.MorphologyCurrentIndex+1));
				UserMgr.MainUserProfile.User_CharacterSkinOptions = State.Options.MorphologyList.get(State.Options.MorphologyCurrentIndex, C_Option_MorphologyTypes[0]);
			}
		}
		case C_Option_FavoriteColor: {
			// Update the option display
			Frame_Checkbox.Visible = False;
			Frame_ColorSlider.Visible = True;
			Label_ListValue.Visible = False;
			Button_Previous.Visible = False;
			Button_Next.Visible = False;
			Frame_Option.Visible = True;

			// Update the option value
			if (Frame_Option.Visible && _ShiftNb != C_OptionShift_Null) {
				if (_ShiftNb > 0) {
					{{{Slider::P}}}IncrementRatio(Frame_ColorSlider, 0.01);
				} else if (_ShiftNb < 0) {
					{{{Slider::P}}}IncrementRatio(Frame_ColorSlider, -0.01);
				}
				UserMgr.MainUserProfile.User_LightTrailHue = {{{Slider::P}}}GetValueReal(Frame_ColorSlider);
				State.RefreshPilotColor = Now + C_Delay_PilotColorRefresh; 
			}
		}
		case C_Option_DefaultSkin: {
			// Update the option display
			Frame_Checkbox.Visible = True;
			Frame_ColorSlider.Visible = False;
			Label_ListValue.Visible = False;
			Button_Previous.Visible = False;
			Button_Next.Visible = False;
			Frame_Option.Visible = True;

			// Update the option value
			if (Frame_Option.Visible) {
				if (_ShiftNb != C_OptionShift_Null && !{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_UseCustomSkin)) {
					{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
					{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
						"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_UseCustomSkin)
					]);
				} else {
					if (_ShiftNb == C_OptionShift_Checkbox)	{			
						UserMgr.MainUserProfile.User_ForceEmptyPilotSkin = !UserMgr.MainUserProfile.User_ForceEmptyPilotSkin;
						State.RefreshDisplayedScene = Now + C_Delay_SceneRefresh;
					}
					{{{Checkbox::P}}}Check(This, Frame_Checkbox, UserMgr.MainUserProfile.User_ForceEmptyPilotSkin);
				}
			}
		}
	}

	{{{Navigation::P}}}Lock(Frame_Option, !Frame_Option.Visible);

	/* Update TTS context */
	Private_TTSContextUpdate(Frame_Option, True);

	return State;
}

K_State UpdateOptions(K_State _State) {
	declare K_State State = _State;

	// Update all options
	foreach (OptionId => OptionName in C_Option_Names) {
		State = UpdateOption(State, OptionId, C_OptionShift_Null);
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_State State;
declare Text SearchValue;
declare Boolean IsMouse;
declare Boolean IsEntryFocused;
declare Boolean IsUnsetSkinTaskInfoIgnored;
declare Boolean IsUnsetPrestigeTaskInfoIgnored;
declare Boolean IsCurrentPrestigeDisplayRequired;
declare Grid::K_GridConfig GridConfig;
declare Privileges::K_PrivilegeCheck ClubSkinsPrivilegeCheck;
declare {{{TitleBar::P}}}K_Actions[Integer] Actions_UnlockedPrestige;
declare {{{TitleBar::P}}}K_Actions[Integer] Actions_LockedPrestige;
declare {{{TitleBar::P}}}K_Actions[Integer] Actions_ResetSkinOnly;
declare {{{TitleBar::P}}}K_Actions[Integer] Actions_ClubSkinsList;
declare {{{TitleBar::P}}}K_Actions[Integer] Actions_ClubSkinsGrid;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

declare persistent Text Persistent_ScrollViewLayout_ClubSkins for UserMgr.MainUser = C_ScrollView_Grid;
declare persistent Boolean Persistent_Garage_HasSeenCombinePopUp for UserMgr.MainUser = False;

State = K_State {
	CurrentTab = {{{C_Tab_Prestige}}},
	IsBrowserInitialized = False,
	IsCombineFeatureEnabled = UserMgr.MainUserProfile.User_CombinePrestigeAndSkins,
	Controls = K_Controls {
		Frame_Global = Frame_Global,
		Frame_Browser = (Page.GetFirstChild("frame-browser") as CMlFrame),
		Frame_ButtonsContainer = (Frame_Global.GetFirstChild("frame-buttons-container") as CMlFrame),
		Frame_Camera = (Frame_Global.GetFirstChild("frame-camera") as CMlFrame),
		Frame_Carousel = (Frame_Global.GetFirstChild("frame-carousel") as CMlFrame),
		Frame_ClubSkins = (Frame_Global.GetFirstChild("frame-tab-club-skins") as CMlFrame),
		Frame_Filters = (Frame_Global.GetFirstChild("frame-filters") as CMlFrame),
		Frame_LoadingSpinner = (Frame_Global.GetFirstChild("frame-loading-spinner") as CMlFrame),
		Frame_MiddlePrestige = (Frame_Global.GetFirstChild("frame-prestige-info-0") as CMlFrame),
		Frame_MySkins = (Frame_Global.GetFirstChild("frame-tab-my-skins") as CMlFrame),
		Frame_Prestige = (Frame_Global.GetFirstChild("frame-tab-prestige") as CMlFrame),
		Frame_PrestigesFocus = (Frame_Global.GetFirstChild("frame-prestiges-focus") as CMlFrame),
		Frame_Pilot = (Frame_Global.GetFirstChild("frame-tab-pilot") as CMlFrame),
		Frame_Options = (Frame_Global.GetFirstChild("frame-options") as CMlFrame),
		Button_ApplyPrestige = (Frame_Global.GetFirstChild("button-apply-prestige") as CMlFrame),
		Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
		Button_Combine = (Frame_Global.GetFirstChild("button-combine") as CMlFrame),
		Button_Create = (Frame_Global.GetFirstChild("button-create") as CMlFrame),
		Button_Edit = (Frame_Global.GetFirstChild("button-edit") as CMlFrame),
		Button_NextPrestige = (Frame_Global.GetFirstChild("button-next-prestige") as CMlFrame),
		Button_NextSkin = (Frame_Global.GetFirstChild("button-next-skin") as CMlFrame),
		Button_PreviousPrestige = (Frame_Global.GetFirstChild("button-previous-prestige") as CMlFrame),
		Button_PreviousSkin = (Frame_Global.GetFirstChild("button-previous-skin") as CMlFrame),
		Button_Reset = (Frame_Global.GetFirstChild("button-reset") as CMlFrame),
		Button_Upload = (Frame_Global.GetFirstChild("button-upload") as CMlFrame),
		Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
		Label_NoFavorites = (Frame_Global.GetFirstChild("label-no-favorites") as CMlLabel),
		Label_NoPrestiges = (Frame_Global.GetFirstChild("label-no-prestiges") as CMlLabel),
		Label_SearchResult = (Frame_Global.GetFirstChild("label-search-result") as CMlLabel),
		PopUpMultiChoice_CombinePrestigeAndSkins = (Frame_Global.GetFirstChild("popupmultichoice-combine-prestiges-and-skins") as CMlFrame),
		PopUpMultiChoice_PrestigeReset = (Frame_Global.GetFirstChild("popupmultichoice-prestige-reset") as CMlFrame),
		PopUpMultiChoice_Remove = (Frame_Global.GetFirstChild("popupmultichoice-remove") as CMlFrame),
		PopUpMultiChoice_SkinReset = (Frame_Global.GetFirstChild("popupmultichoice-skin-reset") as CMlFrame),
		PopUpPrestigeCompletion_Prestiges = (Frame_Global.GetFirstChild("popupprestigecompletion-prestiges") as CMlFrame),
		Quad_Lights = (Frame_Global.GetFirstChild("quad-lights") as CMlQuad),
		Slider_Color = (Frame_Global.GetFirstChild("color-slider-1") as CMlFrame),
		TitleBar_Common = (Frame_Global.GetFirstChild("titlebar-common") as CMlFrame)
	},
	ScrollView = K_ScrollView {
		CurrentLayout = Persistent_ScrollViewLayout_ClubSkins,
		Asset_EntrySearch = (Frame_Global.GetFirstChild("asset-entry-search") as CMlFrame),
		Asset_EntrySearchContour = (Frame_Global.GetFirstChild("asset-entry-search-contour") as CMlFrame),
		Entry_Search = (Frame_Global.GetFirstChild("entry-search") as CMlEntry),
		Frame_ScrollView_Grid = (Frame_Global.GetFirstChild("frame-scroll-view-grid") as CMlFrame),
		Frame_ScrollView_List = (Frame_Global.GetFirstChild("frame-scroll-view-list") as CMlFrame),
		Scroll_ClubSkins = (Frame_Global.GetFirstChild("scroll-club-skins-"^Persistent_ScrollViewLayout_ClubSkins) as CMlFrame)
	},
	Prestiges = K_Prestiges {
		UserPrestige = PrestigeStruct::K_Prestige {
			SkinOptions = LocalUser.Prestige_SkinOptions
		}
	},
	PlayerSkins = K_PlayerSkins {
		CurrentSkinKey = 0
	},
	Carousel = K_Carousel {
		FocusedSkin_SkinListKey = -1
	},
	Options = K_Options {
		MorphologyCurrentIndex = 0,
		MorphologyList = C_Option_MorphologyTypes
	}
};

/* Init the view depending on the saved scrollview layout */
State.ScrollView.Frame_ScrollView_Grid.Visible = Persistent_ScrollViewLayout_ClubSkins == C_ScrollView_Grid;
State.ScrollView.Frame_ScrollView_List.Visible = Persistent_ScrollViewLayout_ClubSkins == C_ScrollView_List;

/* Get titlebar actions */
Actions_UnlockedPrestige.fromjson({{{"\"\"\""^Actions_UnlockedPrestige.tojson()^"\"\"\""}}});
Actions_LockedPrestige.fromjson({{{"\"\"\""^Actions_LockedPrestige.tojson()^"\"\"\""}}});
Actions_ResetSkinOnly.fromjson({{{"\"\"\""^Actions_ResetSkinOnly.tojson()^"\"\"\""}}});
Actions_ClubSkinsList.fromjson({{{"\"\"\""^List_Actions.tojson()^"\"\"\""}}});
Actions_ClubSkinsGrid.fromjson({{{"\"\"\""^Grid_Actions.tojson()^"\"\"\""}}});

Tools::FitLabelValue(State.Controls.Label_NoPrestiges, 3., 1.5, 0.25);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_Garage}}}")) {
	if (State.Scene.SceneId != NullId && MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)) {
		State = DestroyScene(State);
		State = DisplayScene(State, True);
	}

	/* Initialize the current skin */
	if (State.PlayerSkins.CurrentSkin.Name == "") {
		if (!State.IsCombineFeatureEnabled && !UserMgr.MainUserProfile.User_CombinePrestigeAndSkins) {
			// When this boolean is set to False and a prestige skin is equipped, the name and the URL of the current skin are hidden
			// When this boolean is updated, the name and the URL of the current skin are visible from the next frame
			// So we temporarily set this boolean to True this frame to be able to retrieve the current skin at the next frame
			UserMgr.MainUserProfile.User_CombinePrestigeAndSkins = True;
		} else {
			// The name and URL of the current skin are now available, so we can retrieve them and revert the boolean to its previous state
			UserMgr.MainUserProfile.User_CombinePrestigeAndSkins = State.IsCombineFeatureEnabled;
			State.PlayerSkins.CurrentSkin = {{{ClubStruct::P}}}K_Skin {
				Name = LocalUser.Model_CarSport_SkinName,
				FileUrl = LocalUser.Model_CarSport_SkinUrl
			};
		}
	}

	/* Entering route event */
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_EnteringRoute: {
				G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Enter({{{Const::C_TTSContextLevel_Page}}});
				DisplayApplyPrestigeButton(State, Tools::IsUsingMouse(Input));
				DisplayInfo(State.Controls.Label_Info, "", False);
				IsCurrentPrestigeDisplayRequired = True;
				State = DisplayBrowser(State, False);

				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);
				if (Query.existskey("{{{RoutePaths::C_Query_LeaveClubEditioninfo}}}")) {
					State = DisplayScene(State, State.CurrentTab != {{{C_Tab_ClubSkins}}});
				} else {
					{{{TitleBar::P}}}UpdateCurrentTab(State.Controls.TitleBar_Common, State.CurrentTab);
					State.PlayerSkins.CurrentSkin = {{{ClubStruct::P}}}K_Skin {};
					if (State.Prestiges.UserPrestige.SkinOptions != LocalUser.Prestige_SkinOptions) {
						State = GetCurrentAccountPrestige(State);
					}

					// Check that the user can access the club skins tab
					ClubSkinsPrivilegeCheck = Privileges::Check_DestroyAndCreate(
						ClubSkinsPrivilegeCheck,
						PrivilegeMgr,
						MainUser::GetMainUserId(),
						CPrivilegeMgr::EPrivilege::UseUserCreatedContent
					);

					// Update the garage button list
					GridConfig.fromjson({{{"\"\"\""^GridConfigJson^"\"\"\""}}});
					{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_Create, Platform::IsPC(System));
					{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_Edit, Platform::IsPC(System));
					{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_Upload, Platform::IsPC(System) && !{{{UserStore::P}}}IsOfflineMode());
					{{{Button::P}}}SetVisibilityAndNavigation(State.Controls.Button_Reset, Platform::IsPC(System) && !{{{UserStore::P}}}IsOfflineMode());
					Grid::Update(GridConfig, AnimMgr, State.Controls.Frame_ButtonsContainer, 10., False, False);

					// Init the pilot options from main profile settings values
					if (C_Option_MorphologyTypes.exists(UserMgr.MainUserProfile.User_CharacterSkinOptions)) {
						State.Options.MorphologyCurrentIndex = C_Option_MorphologyTypes.keyof(UserMgr.MainUserProfile.User_CharacterSkinOptions);
					}
					{{{Slider::P}}}SetRatio(State.Controls.Slider_Color, UserMgr.MainUserProfile.User_LightTrailHue);
				}
			}
		}
	}

	/* Check club skins privilege */
	if (!Privileges::Check_IsComplete(ClubSkinsPrivilegeCheck)) {
		ClubSkinsPrivilegeCheck = Privileges::Check_Update(ClubSkinsPrivilegeCheck);
		if (Privileges::Check_IsComplete(ClubSkinsPrivilegeCheck)) {
			ClubSkinsPrivilegeCheck = Privileges::Check_Destroy(ClubSkinsPrivilegeCheck);
			declare Text[Integer] TabNames = {{{dump(C_TabNames)}}};
			if (!Privileges::Check_HasPrivilege(ClubSkinsPrivilegeCheck)) TabNames.removekey({{{C_Tab_ClubSkins}}});
			{{{TitleBar::P}}}SetTabs(State.Controls.TitleBar_Common, TabNames, False);
			{{{TitleBar::P}}}RedrawTitleBar(State.Controls.TitleBar_Common, False);
		}
	}

	/* Navigation Events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Action4: {
							if (!Event.IsActionAutoRepeat) {
								State = UpdateCombineFeature(State, !State.IsCombineFeatureEnabled);
							}
						}
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					declare CMlControl TrueFocus = Event.To;
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Select: {
							if (Event.To.HasClass("{{{C_Class_Option}}}")) {
								State = UpdateOption(State, TL::ToInteger((Event.To as CMlFrame).DataAttributeGet("option")), C_OptionShift_Checkbox);
							} else {
								State = Select(State, Event.To);
							}
						}
						case CMlScriptEvent::EMenuNavAction::Cancel: {{{Router::P}}}PushParent(This);
						case CMlScriptEvent::EMenuNavAction::Left: {
							if (Event.To != Null) {
								if (Event.To.HasClass("{{{C_Class_Filter}}}")) {
									State = UpdateFilter(State, TL::ToInteger((Event.To as CMlFrame).DataAttributeGet("filter")), C_FilterShift_Previous);
								} else if (Event.To.HasClass("{{{C_Class_Option}}}")) {
									State = UpdateOption(State, TL::ToInteger((Event.To as CMlFrame).DataAttributeGet("option")), C_FilterShift_Previous);
									TrueFocus = Null;
								} else if (Event.To.HasClass("{{{C_Class_PrestigeInfo}}}")) {
									State = UpdatePrestigeCarousel(State, C_Carousel_Previous);
								} else if (Event.To.HasClass("{{{C_Class_MySkinsButton}}}")) {
									if (State.Controls.Button_PreviousSkin.Visible && State.Carousel.FocusedSkin_CarouselIndex < {{{SkinPerPage*0.5}}}) {
										State = UpdateSkinCarousel(State, C_Carousel_Previous);
									} else if (State.Carousel.FocusedSkin_SkinListKey == 0) {
										TrueFocus = Event.From;
									}
								}
							}
							if (TrueFocus != Null) State = Focus(State, Event.From, TrueFocus, False);
						}
						case CMlScriptEvent::EMenuNavAction::Right: {
							if (Event.To != Null) {
								if (Event.To.HasClass("{{{C_Class_Filter}}}")) {
									State = UpdateFilter(State, TL::ToInteger((Event.To as CMlFrame).DataAttributeGet("filter")), C_FilterShift_Next);
								} else if (Event.To.HasClass("{{{C_Class_Option}}}")) {
									State = UpdateOption(State, TL::ToInteger((Event.To as CMlFrame).DataAttributeGet("option")), C_FilterShift_Next);
									TrueFocus = Null;
								} else if (Event.To.HasClass("{{{C_Class_PrestigeInfo}}}")) {
									State = UpdatePrestigeCarousel(State, C_Carousel_Next);
								} else if (Event.To.HasClass("{{{C_Class_MySkinsButton}}}")) {
									if (State.Controls.Button_NextSkin.Visible && State.Carousel.FocusedSkin_CarouselIndex > {{{SkinPerPage*0.5}}}) {
										State = UpdateSkinCarousel(State, C_Carousel_Next);
									} else if (State.Carousel.FocusedSkin_SkinListKey >= State.PlayerSkins.SkinList.count-1) {
										TrueFocus = Event.From;
									}
								}
							}
							if (TrueFocus != Null) State = Focus(State, Event.From, TrueFocus, False);
						}
						default: {
							if (Event.To != Null) {
								if (Event.To.HasClass("{{{C_Class_MySkinsButton}}}")) {
									if (Event.Input == CMlScriptEvent::EMenuNavAction::Action1 && State.PlayerSkins.SkinList.existskey(State.Carousel.FocusedSkin_SkinListKey)) {
										State = DeleteSkin(State, State.Carousel.FocusedSkin_SkinListKey);
									} else if (Event.From != Null && !Event.From.HasClass("{{{C_Class_MySkinsButton}}}")) {
										if (State.Carousel.SkinButtonsVisible.existskey(State.Carousel.FocusedSkin_CarouselIndex)) {
											TrueFocus = State.Carousel.SkinButtonsVisible[State.Carousel.FocusedSkin_CarouselIndex];
										}
									}
								} else if (Event.From != Null && Event.From.Id == State.Controls.Button_Back.Id && Event.Input == CMlScriptEvent::EMenuNavAction::Up) {
									{{{Scroll::P}}}ScrollToHeader(This, State.ScrollView.Scroll_ClubSkins);
									{{{Scroll::P}}}SetFocusedElementKey(This, State.ScrollView.Scroll_ClubSkins, 0, False, True);
								}
								State = Focus(State, Event.From, TrueFocus, False);
							} else {
								State = FocusAvailableControl(State);
							}
						}
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseOver: State = Focus(State, Event.From, Event.To, True);
						case CMlScriptEvent::Type::MouseClick: {
							if (Event.To != Null && Event.To.HasClass("{{{C_Class_Filter}}}") && {{{Navigation::P}}}GetControlTarget(Event.To, CMlScriptEvent::EMenuNavAction::Select) != Null) {
								State = UpdateFilter(State, TL::ToInteger(Event.To.DataAttributeGet("filter")), C_FilterShift_Next);
							} else if (Event.To != Null && Event.To.HasClass("{{{C_Class_Option}}}") && {{{Navigation::P}}}GetControlTarget(Event.To, CMlScriptEvent::EMenuNavAction::Select) != Null) {
								State = UpdateOption(State, TL::ToInteger(Event.To.DataAttributeGet("option")), C_OptionShift_Checkbox);
							} else {
								State = Select(State, Event.To);
							}
						}
					}
				} else if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_MouseOnly}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseOut: State = Focus(State, Event.From, Event.To, True);
						case CMlScriptEvent::Type::MouseOver: State = Focus(State, Event.From, Event.To, True);
						case CMlScriptEvent::Type::MouseClick: {
							if (Event.To != Null && Event.To.Parent.HasClass("{{{C_Class_Filter}}}")) {
								State = UpdateFilter(State, TL::ToInteger(Event.To.Parent.DataAttributeGet("filter")), TL::ToInteger(Event.To.DataAttributeGet("setting-shift")));
							} else if (Event.To != Null && Event.To.Parent.HasClass("{{{C_Class_Option}}}")) {
								State = UpdateOption(State, TL::ToInteger(Event.To.Parent.DataAttributeGet("option")), TL::ToInteger(Event.To.DataAttributeGet("setting-shift")));
							} else {
								State = Select(State, Event.To);
							}
						}
					}
				}
			}
		}
	}

	/* TitleBar events */
	foreach (Event in {{{TitleBar::P}}}PendingEvents) {
		if (Event.TitleBar.Id == State.Controls.TitleBar_Common.Id) {
			switch (Event.Type) {
				case {{{TitleBar::P}}}C_EventType_Update: {
					if (!{{{TitleBar::P}}}IsAvailableTab(State.Controls.TitleBar_Common, State.CurrentTab)) {
						{{{TitleBar::P}}}UpdateCurrentTab(State.Controls.TitleBar_Common, {{{TitleBar::P}}}GetCurrentTab(State.Controls.TitleBar_Common));
					}
					if (Event.ActionsPos.existskey({{{TitleBar::P}}}C_Action_Second)) {
						declare Vec2 Pos_SearchBar = Event.ActionsPos[{{{TitleBar::P}}}C_Action_Second] - <5.5, 0.>;
						AnimMgr.Flush(State.ScrollView.Entry_Search.Parent);
						AnimMgr.Add(State.ScrollView.Entry_Search.Parent, "<anim pos=\""^Pos_SearchBar.X^" "^Pos_SearchBar.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
					}
				}
				case {{{TitleBar::P}}}C_EventType_TabUpdate: {
					DisplayInfo(State.Controls.Label_Info, "", False);
					State.Controls.Frame_Prestige.Visible = Event.CurrentTab == {{{C_Tab_Prestige}}};
					State.Controls.Frame_MySkins.Visible = Event.CurrentTab == {{{C_Tab_MySkins}}};
					State.Controls.Frame_ClubSkins.Visible = Event.CurrentTab == {{{C_Tab_ClubSkins}}};
					State.Controls.Frame_Pilot.Visible = Event.CurrentTab == {{{C_Tab_Pilot}}};
					{{{Scroll::P}}}LockNavigation(State.ScrollView.Scroll_ClubSkins, !State.Controls.Frame_ClubSkins.Visible);

					State.CurrentTab = Event.CurrentTab;
					switch (Event.CurrentTab) {
						case {{{C_Tab_Prestige}}}: {
							State = DisplayScene(State, True);
							State = UpdateFilters(State);
							State = GetCurrentAccountPrestige(State);
							{{{Navigation::P}}}ChangeControlTargets(This, State.Controls.Button_Back, ["right", "up"], [State.Controls.Button_ApplyPrestige.ControlId, State.Controls.Frame_PrestigesFocus.ControlId]);
							if (State.Filters.AreLockedPrestigesDisplayed) State.Actions = Actions_LockedPrestige;
							else State.Actions = Actions_UnlockedPrestige;
						}
						case {{{C_Tab_MySkins}}}: {
							State = DisplayScene(State, True);
							State = GetFavoriteList(State);
							{{{Navigation::P}}}ChangeControlTargets(This, State.Controls.Button_Back, ["right", "up"], ["", "button-my-skin-0"]);
							if (Platform::IsFromFirstParty(System)) State.Actions = Actions_ResetSkinOnly;
							else State.Actions = [];
						}
						case {{{C_Tab_ClubSkins}}}: {
							State = DisplayScene(State, False);
							{{{Navigation::P}}}ChangeControlTargets(This, State.Controls.Button_Back, ["right", "up"], [State.ScrollView.Scroll_ClubSkins.ControlId, State.ScrollView.Scroll_ClubSkins.ControlId]);
							{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Scroll_ClubSkins);
							switch (State.ScrollView.CurrentLayout) {
								case C_ScrollView_List: State.Actions = Actions_ClubSkinsList;
								case C_ScrollView_Grid: State.Actions = Actions_ClubSkinsGrid;
							}
						}
						case {{{C_Tab_Pilot}}}: {
							State = DisplayScene(State, True);
							State = UpdateOptions(State);
							{{{Navigation::P}}}ChangeControlTargets(This, State.Controls.Button_Back, ["right", "up"], ["", "frame-option-2"]);
							State.Actions = [];
						}
					}
					
					// Redraw titlebar, update loading spinner position and update focus
					UpdateLoadingSpinnerPosition(State);
					DisplaySearch(State, State.ScrollView.Entry_Search.Value, False, State.CurrentTab == {{{C_Tab_ClubSkins}}} && State.ScrollView.Entry_Search.Value != "", False);
					State = UpdateCombineFeature(State, State.IsCombineFeatureEnabled);
					State = FocusAvailableControl(State);

					// Text to speech context
					ParentApp.TTS_Context_Change(G_TTSContextIdent_Tabs, {{{TitleBar::P}}}GetCurrentTabLabel(Event.TitleBar));
					ParentApp.TTS_Context_Read({{{Const::C_TTSContextLevel_Page}}});
				}
				case {{{TitleBar::P}}}C_EventType_Action: {
					switch (Event.Action) {
						case {{{TitleBar::P}}}C_Action_First: {
							switch (Event.CurrentTab) {
								case {{{C_Tab_Prestige}}}: State = DisplayLockedPrestiges(State, Actions_LockedPrestige, Actions_UnlockedPrestige, !State.Filters.AreLockedPrestigesDisplayed);
								case {{{C_Tab_ClubSkins}}}: {
									State = SwitchScrollViewLayout(State, Actions_ClubSkinsGrid, Actions_ClubSkinsList);
									Persistent_ScrollViewLayout_ClubSkins = State.ScrollView.CurrentLayout;
									UserMgr.MainUser.PersistentSave();
								}
							}
						}
						case {{{TitleBar::P}}}C_Action_Second: {
							switch (Event.CurrentTab) {
								case {{{C_Tab_MySkins}}}: ConfirmSkinReset(State);
								case {{{C_Tab_Prestige}}}: ConfirmPrestigeReset(State);
								case {{{C_Tab_ClubSkins}}}: {
									if (State.ScrollView.Entry_Search.IsFocused && State.ScrollView.Entry_Search.Visible) {
										DisplaySearch(State, "", False, False, True);
									} else {
										DisplaySearch(State, State.ScrollView.Entry_Search.Value, True, True, True);
									}
								}
							}
						}
						case {{{TitleBar::P}}}C_Action_Third: {
							switch (Event.CurrentTab) {
								case {{{C_Tab_Prestige}}}: {
									if (State.Prestiges.UserPrestigeList.count > 0 && State.Filters.YearList.existskey(State.Filters.YearCurrentIndex) && State.Filters.ModeList.existskey(State.Filters.ModeCurrentIndex)) {
										{{{PopUpPrestigeCompletion::P}}}Open(This, State.Controls.PopUpPrestigeCompletion_Prestiges, State.Prestiges.UserPrestigeList, State.Filters.YearList[State.Filters.YearCurrentIndex], State.Filters.ModeList[State.Filters.ModeCurrentIndex]);
									} else {
										{{{PopUpPrestigeCompletion::P}}}Open(This, State.Controls.PopUpPrestigeCompletion_Prestiges, State.Prestiges.UserPrestigeList, Tools::GetYear(), CUserV2Manager::EPrestigeMode::Season);
									}
								}
							}
						}
					}
				}
			}
		}
	}

	/* Search behaviors */
	if (IsEntryFocused != State.ScrollView.Entry_Search.IsFocused) {
		IsEntryFocused = State.ScrollView.Entry_Search.IsFocused;
		FocusSearch(State, State.ScrollView.Entry_Search.IsFocused);
		if (!State.ScrollView.Entry_Search.IsFocused) {
			{{{Scroll::P}}}TriggerPagerUpdate(State.ScrollView.Scroll_ClubSkins);
			if (State.ScrollView.Entry_Search.Value == "") {
				DisplaySearch(State, "", False, False, True);
			}
		}
	}

	/* Browser Events */
	foreach (Event in {{{BrowserAPI::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{BrowserAPI::P}}}C_EventType_Select: {
				if (Event.DataType == {{{BrowserAPI::P}}}C_DataType_Skin) {
					State = DisplayBrowser(State, False);
					State = DisplayScene(State, True);
					switch (State.BrowserMode) {
						case C_BrowserMode_EditSkin: State = LaunchEditor(State, Event.Data);
						case C_BrowserMode_UploadSkin: {
							State = RegisterSkin(
								State, 
								{{{ClubStruct::P}}}K_Skin {
									Id = "",
									DisplayName = GetFileNameFromPath(Event.Data),
									FileName = Event.Data
								}
							);
						}
					}
				}
			}
			case {{{BrowserAPI::P}}}C_EventType_Cancel: {
				State = DisplayBrowser(State, False);
				State = DisplayScene(State, True);
			}
		}
	}

	/* Store events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case {{{ClubStore::P}}}C_Event_SkinUploadsUpdated: {
						declare Integer SkinUploadsTotal = {{{ClubStore::P}}}GetSkinUploadsTotal();
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-club-skins-grid") as CMlFrame, SkinUploadsTotal);
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-club-skins-list") as CMlFrame, SkinUploadsTotal);
						{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.Frame_LoadingSpinner);
					}
					case {{{ClubStore::P}}}C_Event_SkinUploadsPagingFailed: {
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-club-skins-list") as CMlFrame, 0);
						{{{Scroll::P}}}SetElementsTotal(This, Frame_Global.GetFirstChild("scroll-club-skins-grid") as CMlFrame, 0);
						{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.Frame_LoadingSpinner);
					}
				}
			}
		}
	}

	/* Scroll events */
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null && Event.Scroll.Id == State.ScrollView.Scroll_ClubSkins.Id) {
			switch (Event.Type) {
				case {{{Scroll::P}}}C_EventType_Cancel: {{{Router::P}}}PushParent(This);
				case {{{Scroll::P}}}C_EventType_Select: {
					declare ClubSkins = {{{ClubStore::P}}}GetSkinUploads();
					if (ClubSkins.existskey(Event.ToKey)) {
						declare ClubSkin = ClubSkins[Event.ToKey];
						if (!{{{ControlBlockList::P}}}IsBlocked(This, [ClubSkin.CreatorAccountId, ClubSkin.LatestEditorAccountId])) {
							declare Activity = {{{ClubStruct::P}}}K_Activity {
								Id = ClubSkin.Id,
								ClubId = ClubSkin.ClubId,
								Name = ClubSkin.Name,
								Type = ClubSkin.Type,
								Public = True,
								Active = True,
								MediaUrl = ClubSkin.MediaUrl
							};
							LockNavigation(State, True);
							MenuBackground::SetRouteDisplayMode("{{{RoutePaths::C_Path_BucketItemUploads}}}", MenuBackground::C_DisplayMode_GarageBackground);
							{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_BucketItemUploads}}}", {{{Router::P}}}GetCurrentRoutePath(This));
							{{{Router::P}}}Push(This, 
								"{{{RoutePaths::C_Path_BucketItemUploads}}}",
								[
									"{{{RoutePaths::C_Query_Activity}}}" => Activity.tojson(),
									{{{Router::P}}}C_Query_MenuSection => "{{{RoutePaths::C_MenuSection_Create}}}"
								],
								{{{Router::P}}}K_URL_Config {
									KeepPreviousPagesDisplayed = True,
									ExcludeOverlays = [
										"{{{RoutePaths::C_Path_OverlayName_ClubWidget}}}",
										"{{{RoutePaths::C_Path_OverlayName_ProfileWidget}}}"
									]
								}
							);
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_PagerUpdate: {
					if (State.CurrentTab == {{{C_Tab_ClubSkins}}}) {
						if ({{{Scroll::P}}}GetElementsTotal(Event.Scroll) <= 0 || SearchValue != State.ScrollView.Entry_Search.Value) {
							{{{Scroll::P}}}DisplayLoadingSpinner(This, State.ScrollView.Scroll_ClubSkins, "{{{Text_RetrievingClubSkins}}}", True);
							State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), State.Controls.Button_Back, False);
							SearchValue = State.ScrollView.Entry_Search.Value;
							State.Controls.Label_SearchResult.Hide();
						}
						{{{ClubStore::P}}}Action_LoadAllSkinUploadsPage(
							This,
							ClubAPI::C_QueryValue_Sort_Popularity,
							ClubAPI::C_QueryValue_Order_DESC,
							State.ScrollView.Entry_Search.Value,
							Event.PagerOffset, 
							Event.PagerCount
						);
					}
				}
				case {{{Scroll::P}}}C_EventType_Update: {
					declare ClubSkins = {{{ClubStore::P}}}GetSkinUploads();
					declare Integer[] ClubSkinIds;

					foreach (Key => Frame_Element in Event.ElementsVisible) {
						if (ClubSkins.existskey(Key)) {
							declare ClubSkin = ClubSkins[Key];
							ShowClubSkin(Frame_Element, ClubSkin, State.ScrollView.CurrentLayout);
							ClubSkinIds.add(ClubSkin.Id);
						} else {
							ShowClubSkinLoading(Frame_Element, State.ScrollView.CurrentLayout);
						}
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						HideClubSkin(Frame_Element);
					}

					ReportContext::SetCreateScrollSkinActivityIds(System, ClubSkinIds);

					// Update scroll navigation
					{{{Navigation::P}}}Lock(State.ScrollView.Scroll_ClubSkins, Event.ElementsVisible.count <= 0);
					{{{Navigation::P}}}EnableInputs(State.ScrollView.Scroll_ClubSkins, Event.ElementsVisible.count <= 0);
					if ({{{Scroll::P}}}IsLoadingSpinnerDisplayed(State.ScrollView.Scroll_ClubSkins)) {
						{{{Scroll::P}}}ScrollToElement(This, State.ScrollView.Scroll_ClubSkins, 0, True);
						{{{Scroll::P}}}DisplayLoadingSpinner(This, State.ScrollView.Scroll_ClubSkins, False);
						State = FocusAvailableControl(State);
					}

					// Display a message if the scroll has no data
					State.Controls.Label_SearchResult.Visible = Event.ElementsVisible.count <= 0;
					if (State.Controls.Label_SearchResult.Visible) {
						if (State.ScrollView.Entry_Search.Value == "") {
							State.Controls.Label_SearchResult.Value = "{{{Text_NoClubSkins}}}";
						} else {
							State.Controls.Label_SearchResult.Value = "{{{Text_NoSearchResult}}}";
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_Focus: {
					if (Event.From != Null) UnfocusClubSkin(Event.From, State.ScrollView.CurrentLayout);
					if (Event.To != Null) {
						if (Event.IsMouse && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
							State = Focus(State, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Event.Scroll, False);
						}
						if ({{{Scroll::P}}}IsFocused(State.ScrollView.Scroll_ClubSkins)) {
							FocusClubSkin(Event.To, State.ScrollView.CurrentLayout, True);
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_ReachLimit: {
					if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Left || Event.NavAction == CMlScriptEvent::EMenuNavAction::Down) {
						declare CMlControl CurrentFocus = {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}");
						if (CurrentFocus == State.ScrollView.Scroll_ClubSkins) {
							State = Focus(State, CurrentFocus, State.Controls.Button_Back, False);
							{{{MenuSounds::P}}}PlayFocusSound(This, State.Controls.Button_Back);
						}
					}
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (
			Event.PopUpMultiChoice != Null && 
			(
				Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_CombinePrestigeAndSkins.Id ||
				Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_PrestigeReset.Id ||
				Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_Remove.Id ||
				Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_SkinReset.Id
			)
		) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					LockNavigation(State, Event.PopUpMultiChoice.Visible);
					UpdateControllerInfo(State);
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Abort: {
					if (Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_Remove.Id) {
						State.SkinKeyToDelete = -1;
					}
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					switch (Event.PopUpMultiChoice.Id) {
						case State.Controls.PopUpMultiChoice_CombinePrestigeAndSkins.Id: {
							switch (Event.SelectedIndex) {
								case {{{PopUpMultiChoice::C_Choice_Default}}}: {
									Persistent_Garage_HasSeenCombinePopUp = True;
									UserMgr.MainUser.PersistentSave();
								}
							}
						}
						case State.Controls.PopUpMultiChoice_PrestigeReset.Id: {
							switch (Event.SelectedIndex) {
								case {{{C_Choice_Confirm}}}: State = SetUnsetCurrentAccountPrestige(State, "");
							}
						}
						case State.Controls.PopUpMultiChoice_SkinReset.Id: {
							switch (Event.SelectedIndex) {
								case {{{C_Choice_Confirm}}}: State = SetUnsetSkin(State, {{{ClubStruct::P}}}K_Skin {});
							}
						}
						case State.Controls.PopUpMultiChoice_Remove.Id: {
							switch (Event.SelectedIndex) {
								case {{{C_Choice_Cancel}}}: State.SkinKeyToDelete = -1;
								case {{{C_Choice_Remove}}}: State = UnsetSkinAsFavorite(State);
							}
						}
					}
				}
			}
		}
	}

	/* PopUpPrestigeCompletion events */
	foreach (Event in {{{PopUpPrestigeCompletion::P}}}GetPendingEvents(This)) {
		if (Event.PopUpPrestigeCompletion != Null && Event.PopUpPrestigeCompletion.Id == State.Controls.PopUpPrestigeCompletion_Prestiges.Id) {
			switch (Event.Type) {
				case {{{PopUpPrestigeCompletion::P}}}C_EventType_Open: LockNavigation(State, Event.PopUpPrestigeCompletion.Visible);
				case {{{PopUpPrestigeCompletion::P}}}C_EventType_Close: {
					LockNavigation(State, Event.PopUpPrestigeCompletion.Visible);
					UpdateControllerInfo(State);
				}
			}
		}
	}

	/* Slider events */
	foreach (Event in {{{Slider::P}}}PendingEvents) {
		if (Event.Slider != Null && Event.Slider.ControlId == State.Controls.Slider_Color.ControlId) {
			switch (Event.Type) {
				case {{{Slider::P}}}C_EventType_CursorDragStop: {
					UserMgr.MainUserProfile.User_LightTrailHue = {{{Slider::P}}}GetValueReal(State.Controls.Slider_Color);
					State.RefreshPilotColor = Now + C_Delay_PilotColorRefresh;
				}
			}
		}
	}

	/* Handle delete skin button */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::MouseOver: {
				if (!State.Controls.PopUpMultiChoice_Remove.Visible && Event.Control.HasClass("{{{C_Class_DeleteSkinButton}}}")) {
					AnimMgr.Add(Event.Control, "<anim opacity=\"1.\" scale=\"1.2\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			}
			case CMlScriptEvent::Type::MouseOut: {
				if (Event.Control.HasClass("{{{C_Class_DeleteSkinButton}}}")) {
					AnimMgr.Add(Event.Control, "<anim opacity=\"0.6\" scale=\"1.\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			}
			case CMlScriptEvent::Type::MouseClick: {
				if (!State.Controls.PopUpMultiChoice_Remove.Visible && Event.Control.HasClass("{{{C_Class_DeleteSkinButton}}}")) {
					assert(Event.Control.Parent.Parent.HasClass("{{{C_Class_MySkinsButton}}}"), "[Garage] The button to remove the skin is no longer in the right frame.");
					declare Integer SkinKey for Event.Control.Parent.Parent = -1;
					if (State.PlayerSkins.SkinList.existskey(SkinKey)) {
						switch (Event.ControlId) {
							case "quad-button-delete": {
								State = DeleteSkin(State, SkinKey);
							}
						}
					}
				}
			}
		}
	}

	/* Refresh dislayed skin */
	if (State.RefreshDisplayedScene > 0 && State.RefreshDisplayedScene < Now) {
		State.RefreshDisplayedScene = -1;
		State = DisplayScene(State, True);
	}

	/* Refresh dislayed pilot light color */
	if (State.RefreshPilotColor > 0 && State.RefreshPilotColor < Now) {
		State.RefreshPilotColor = -1;
		if (State.Scene.SceneId != NullId && !MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)) {
			foreach (ItemId in State.Scene.CurrentItemIds) {
				if (ItemId != NullId) MenuSceneMgr.ItemSetPlayerState(State.Scene.SceneId, ItemId, LocalUser);
			}
		}
	}

		
	/* Refresh prestige list from filters */
	if (State.RefreshPrestigeList > 0 && State.RefreshPrestigeList < Now) {
		State.RefreshPrestigeList = -1;
		State = GetPrestigeList(State);
		DisplayInfo(State.Controls.Label_Info, "", False);
	}

	/* Change actions icons opacity depending on the current controller */
	if (IsMouse != Tools::IsUsingMouse(Input)) {
		IsMouse = Tools::IsUsingMouse(Input);
		DisplayApplyPrestigeButton(State, IsMouse);
		if (IsMouse) {
			{{{ExpendableButton::P}}}Unfocus(This, State.Controls.Button_Combine);
		} else {
			{{{ExpendableButton::P}}}Focus(This, State.Controls.Button_Combine);
		}
	}

	/* Prestige list task */
	if (Task::IsInitialized(State.Task_GetPrestigeList)) {
		State.Task_GetPrestigeList = Task::Update(State.Task_GetPrestigeList);
		if (!Task::IsRunning(State.Task_GetPrestigeList)) {
			declare CTaskResult_PrestigeList SourceTask = Task::GetSourceTask_PrestigeList(State.Task_GetPrestigeList);
			if (Task::IsSuccess(State.Task_GetPrestigeList) && SourceTask != Null) {
				State.Prestiges.FilteredPrestigeList.clear();
				if (SourceTask.PrestigeList.count > 0) {
					foreach (Prestige in SourceTask.PrestigeList) {
						declare PrestigeStruct::K_Prestige PrestigeSkin = PrestigeStruct::ConvertPrestige(Prestige);
						if (State.Filters.AreLockedPrestigesDisplayed || PrestigeSkin.IsUnlocked) {
							State.Prestiges.FilteredPrestigeList.add(PrestigeSkin);
						}
					}
				} else {
					//L16N [Garage] Message displayed when there is no prestiges available with the given filters.
					DisplayInfo(State.Controls.Label_Info, _("No prestige skins are available for these filters."), True);
				}
			} else {
				//L16N [Garage] Message displayed when prestige skins cannot be fetched from Ubisoft servers. %1 will be replaced by an internal error code. e.g. "Error while retrieving prestige skins. (Error code: 32354)".
				DisplayInfo(State.Controls.Label_Info, TL::Compose(_("Error while retrieving prestige skins. (Error code: %1)"), Task::GetSourceTaskError(State.Task_GetPrestigeList).Code), True);
			}
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.Frame_LoadingSpinner);
			State.Task_GetPrestigeList = Task::Destroy(State.Task_GetPrestigeList);
			State = UpdatePrestigeCarousel(State, C_Carousel_Refresh);
		}
	}

	/* Account prestige list task */
	if (Task::IsInitialized(State.Task_GetAccountPrestigeList)) {
		State.Task_GetAccountPrestigeList = Task::Update(State.Task_GetAccountPrestigeList);
		if (!Task::IsRunning(State.Task_GetAccountPrestigeList)) {
			declare CTaskResult_UserPrestigeList SourceTask = Task::GetSourceTask_UserPrestigeList(State.Task_GetAccountPrestigeList);
			if (Task::IsSuccess(State.Task_GetAccountPrestigeList) && SourceTask != Null) {
				State.Controls.Label_NoPrestiges.Visible = SourceTask.UserPrestigeList.count <= 0;
				foreach (UserPrestige in SourceTask.UserPrestigeList) {
					State.Prestiges.UserPrestigeList[UserPrestige.PrestigeId] = PrestigeStruct::ConvertPrestige(UserPrestige);
				}
			} else {
				//L16N [Garage] Message displayed when player's prestige skins cannot be fetched from Ubisoft servers. %1 will be replaced by an internal error code. e.g. "Error while retrieving your prestige skins. (Error code: 32354)".
				DisplayInfo(State.Controls.Label_Info, TL::Compose(_("Error while retrieving your prestige skins. (Error code: %1)"), Task::GetSourceTaskError(State.Task_GetAccountPrestigeList).Code), True);
			}
			State.Task_GetAccountPrestigeList = Task::Destroy(State.Task_GetAccountPrestigeList);
			State = UpdateCombineFeature(State, State.IsCombineFeatureEnabled);
			if (State.Prestiges.UserPrestigeList.count > 0) {
				if (IsCurrentPrestigeDisplayRequired && State.Prestiges.UserPrestige.PrestigeId != "") {
					State = DisplayLockedPrestiges(State, Actions_LockedPrestige, Actions_UnlockedPrestige, False);
					IsCurrentPrestigeDisplayRequired = False;
				} else {
					State = UpdateFilters(State);
					State = GetPrestigeList(State);
				}
			} else if (!State.Filters.AreLockedPrestigesDisplayed) {
				State = DisplayLockedPrestiges(State, Actions_LockedPrestige, Actions_UnlockedPrestige, True);
			}
		}
	}

	/* Current account prestige task */
	if (Task::IsInitialized(State.Task_GetCurrentAccountPrestige)) {
		State.Task_GetCurrentAccountPrestige = Task::Update(State.Task_GetCurrentAccountPrestige);
		if (!Task::IsRunning(State.Task_GetCurrentAccountPrestige)) {
			declare CTaskResult_UserPrestige SourceTask = Task::GetSourceTask_UserPrestige(State.Task_GetCurrentAccountPrestige);
			if (Task::IsSuccess(State.Task_GetCurrentAccountPrestige) && SourceTask != Null) {
				State.Prestiges.UserPrestige = PrestigeStruct::ConvertPrestige(SourceTask.UserPrestige);
			} else {
				//L16N [Garage] Message displayed when player's prestige skin cannot be fetched from Ubisoft servers. %1 will be replaced by an internal error code. e.g. "Error while retrieving your prestige skin. (Error code: 32354)".
				DisplayInfo(State.Controls.Label_Info, TL::Compose(_("Error while retrieving your prestige skin. (Error code: %1)"), Task::GetSourceTaskError(State.Task_GetCurrentAccountPrestige).Code), True);
			}
			State.Task_GetCurrentAccountPrestige = Task::Destroy(State.Task_GetCurrentAccountPrestige);
			State = GetAccountPrestigeList(State);
		}
	}

	/* Set prestige task */
	if (Task::IsInitialized(State.Task_SetUnsetCurrentAccountPrestige)) {
		State.Task_SetUnsetCurrentAccountPrestige = Task::Update(State.Task_SetUnsetCurrentAccountPrestige);
		if (!Task::IsRunning(State.Task_SetUnsetCurrentAccountPrestige)) {
			declare CTaskResult_UserPrestige SourceTask = Task::GetSourceTask_UserPrestige(State.Task_SetUnsetCurrentAccountPrestige);
			if (Task::IsSuccess(State.Task_SetUnsetCurrentAccountPrestige) && SourceTask != Null) {
				State.Prestiges.UserPrestige = PrestigeStruct::ConvertPrestige(SourceTask.UserPrestige);
				State = UpdatePrestigeCarousel(State, C_Carousel_Refresh);
				if (State.Prestiges.UserPrestige.PrestigeId != "") {
					//L16N [Garage] Message displayed when the selected prestige skin has successfully been applied to the player's car.
					DisplayInfo(State.Controls.Label_Info, _("Prestige skin successfully applied!"), False);

					// Remove custom skin if the combine feature is not enabled
					if (!State.IsCombineFeatureEnabled) {
						State = SetUnsetSkin(State, {{{ClubStruct::P}}}K_Skin {});
						IsUnsetSkinTaskInfoIgnored = Task::IsInitialized(State.Task_SetUnsetSkin);
						if (!IsUnsetSkinTaskInfoIgnored) {
							UserMgr.MainUserProfile.User_CombinePrestigeAndSkins = State.IsCombineFeatureEnabled; //< Revert temporary boolean update
						}
					}
				} else if (!IsUnsetPrestigeTaskInfoIgnored) {
					//L16N [Garage] Message displayed when the prestige skin has been removed from the player's car.
					DisplayInfo(State.Controls.Label_Info, _("Prestige skin has been removed from your car!"), False);
				}
			} else if (!IsUnsetPrestigeTaskInfoIgnored) {
				//L16N [Garage] Message displayed when the selected prestige skin cannot be applied on the car. %1 will be replaced by an internal error code. e.g. "Error while applying the prestige skin. (Error code: 32354)".
				DisplayInfo(State.Controls.Label_Info, TL::Compose(_("Error while applying the prestige skin. (Error code: %1)"), Task::GetSourceTaskError(State.Task_SetUnsetCurrentAccountPrestige).Code), True);
			}
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.Frame_LoadingSpinner);
			State.Task_SetUnsetCurrentAccountPrestige = Task::Destroy(State.Task_SetUnsetCurrentAccountPrestige);
			State.RefreshDisplayedScene = Now + C_Delay_SceneRefresh;
			IsUnsetPrestigeTaskInfoIgnored = False;
			if (State.CurrentTab == {{{C_Tab_MySkins}}}) {
				State = UpdateSkinCarousel(State, C_Carousel_Refresh);
			}
		}
	}

	/* Register skin task */
	if (Task::IsInitialized(State.Task_RegisterSkin)) {
		State.Task_RegisterSkin = Task::Update(State.Task_RegisterSkin);
		if (!Task::IsRunning(State.Task_RegisterSkin)) {
			declare CTaskResult_NSSkin SourceTask = Task::GetSourceTask_NSSkin(State.Task_RegisterSkin);
			if (Task::IsSuccess(State.Task_RegisterSkin) && SourceTask != Null) {
				if (SourceTask.Skin.FileUrl != "" && SourceTask.Skin.Type == "{{{Const::C_SkinType_CarSport}}}") { //< Only allow CarSport skin type
					declare {{{ClubStruct::P}}}K_Skin Skin = {{{ClubStruct::P}}}GetSkinFromNSSkin(SourceTask.Skin, True, False);
					if (!IsSkinInFavorites(State, Skin.Id)) State.PlayerSkins.SkinList.add(Skin);
					State = SetUnsetSkin(State, Skin);
				} else {
					//L16N [Garage] Message displayed when the selected skin is not valid (incorrect skin type).
					DisplayInfo(State.Controls.Label_Info, _("Skin not valid."), True);
					{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.Frame_LoadingSpinner);
				}
			} else {
				//L16N [Garage] Message displayed when the selected skin cannot be uploaded to the Ubisoft servers. %1 will be replaced by an internal error code. e.g. "Error during the skin registration, please try again. (Error code: 32354).
				DisplayInfo(State.Controls.Label_Info, TL::Compose(_("Error during the skin registration, please try again. \n(Error code: %1)"), Task::GetSourceTaskError(State.Task_RegisterSkin).Code), True);
				{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.Frame_LoadingSpinner);
			}
			State.Task_RegisterSkin = Task::Destroy(State.Task_RegisterSkin);
		}
	}

	/* Set & Unset skin tasks */
	if (Task::IsInitialized(State.Task_SetUnsetSkin)) {
		State.Task_SetUnsetSkin = Task::Update(State.Task_SetUnsetSkin);
		if (!Task::IsRunning(State.Task_SetUnsetSkin)) {
			declare CTaskResult SourceTask = Task::GetSourceTask(State.Task_SetUnsetSkin);
			if (Task::IsSuccess(State.Task_SetUnsetSkin) && SourceTask != Null) {
				if (State.PlayerSkins.SkinList.existskey(State.PlayerSkins.CurrentSkinKey)) {
					State.PlayerSkins.SkinList[State.PlayerSkins.CurrentSkinKey].IsUsed = False;
				}
				if (SourceTask is CTaskResult_NSSkin) {
					//L16N [Garage] Message displayed when the selected skin has successfully been applied to the player's car.
					DisplayInfo(State.Controls.Label_Info, _("Skin successfully applied!"), False);

					// Update current skin and skin list
					State.PlayerSkins.CurrentSkin = {{{ClubStruct::P}}}GetSkinFromNSSkin((SourceTask as CTaskResult_NSSkin).Skin, True, True);
					foreach (SkinKey => PlayerSkin in State.PlayerSkins.SkinList) {
						if (PlayerSkin.Id == State.PlayerSkins.CurrentSkin.Id) {
							State.PlayerSkins.SkinList[SkinKey].IsUsed = True;
							State.PlayerSkins.CurrentSkinKey = SkinKey;
							break;
						}
					}

					// Remove prestige if the combine feature is not enabled
					if (!State.IsCombineFeatureEnabled) { 
						State = SetUnsetCurrentAccountPrestige(State, "");
						IsUnsetPrestigeTaskInfoIgnored = Task::IsInitialized(State.Task_SetUnsetCurrentAccountPrestige);
					}
				} else if (State.SkinKeyToDelete == -1) { //< Prevents another favorite list retrieval when reseting the skin
					//L16N [Garage] Message displayed when the default region skin has successfully been applied to the player's car.
					if (!IsUnsetSkinTaskInfoIgnored) DisplayInfo(State.Controls.Label_Info, _("Skin reset to the default region skin!"), False);
					else UserMgr.MainUserProfile.User_CombinePrestigeAndSkins = State.IsCombineFeatureEnabled; //< Revert temporary boolean update
					State.PlayerSkins.CurrentSkinKey = -1;
					State.PlayerSkins.CurrentSkin = {{{ClubStruct::P}}}K_Skin {
						Name = LocalUser.Model_CarSport_SkinName,
						FileUrl = LocalUser.Model_CarSport_SkinUrl
					};
				}
				State = UpdateSkinCarousel(State, C_Carousel_Refresh);
			} else if (!IsUnsetSkinTaskInfoIgnored) {
				//L16N [Garage] Message displayed when the selected skin cannot be applied on the car. %1 will be replaced by an internal error code. e.g. "Error while applying the skin, please try again. (Error code: 32354)".
				DisplayInfo(State.Controls.Label_Info, TL::Compose(_("Error while applying the skin, please try again. \n(Error code: %1)"), Task::GetSourceTaskError(State.Task_SetUnsetSkin).Code), True);
			}
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.Frame_LoadingSpinner);
			State.Task_SetUnsetSkin = Task::Destroy(State.Task_SetUnsetSkin);
			State.RefreshDisplayedScene = Now + C_Delay_SceneRefresh;
			State.Carousel.FocusedSkin_SkinListKey = -1; //< Show the skin that has just been set
			IsUnsetSkinTaskInfoIgnored = False;
		}
	}

	/* Favorite skin list task */
	if (Task::IsInitialized(State.Task_GetFavoriteSkinList)) {
		State.Task_GetFavoriteSkinList = Task::Update(State.Task_GetFavoriteSkinList);
		if (!Task::IsRunning(State.Task_GetFavoriteSkinList)) {
			declare CTaskResult_NSSkinList SourceTask = Task::GetSourceTask_NSSkinList(State.Task_GetFavoriteSkinList);
			if (Task::IsSuccess(State.Task_GetFavoriteSkinList) && SourceTask != Null) {
				State.PlayerSkins.SkinList = [];
				foreach (NSSkin in SourceTask.SkinList) {
					declare {{{ClubStruct::P}}}K_Skin Skin = {{{ClubStruct::P}}}GetSkinFromNSSkin(NSSkin, True, State.PlayerSkins.CurrentSkin.FileUrl != "" && NSSkin.FileUrl == State.PlayerSkins.CurrentSkin.FileUrl);
					State.PlayerSkins.SkinList.add(Skin);
					if (Skin.IsUsed) {
						State.PlayerSkins.CurrentSkin = Skin;
						State.PlayerSkins.CurrentSkinKey = State.PlayerSkins.SkinList.count-1;
					}
				}
				State = UpdateSkinCarousel(State, C_Carousel_Refresh);
			} else {
				//L16N [Garage] Message displayed when player favorite skins cannot be fetch from Ubisoft servers. %1 will be replaced by an internal error code. e.g. "Error while retrieving your favorite skins, please try again. \n(Error code: 32354)".
				DisplayInfo(State.Controls.Label_Info, TL::Compose(_("Error while retrieving your favorite skins, please try again. \n(Error code: %1)"), Task::GetSourceTaskError(State.Task_GetFavoriteSkinList).Code), True);
			}
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.Frame_LoadingSpinner);
			State.Task_GetFavoriteSkinList = Task::Destroy(State.Task_GetFavoriteSkinList);
			State.RefreshDisplayedScene = Now + C_Delay_SceneRefresh;
		}
	}

	/* Unset favorite skin task */
	if (Task::IsInitialized(State.Task_UnsetFavoriteSkin)) {
		State.Task_UnsetFavoriteSkin = Task::Update(State.Task_UnsetFavoriteSkin);
		if (!Task::IsRunning(State.Task_UnsetFavoriteSkin)) {
			declare CTaskResult SourceTask = Task::GetSourceTask(State.Task_UnsetFavoriteSkin);
			if (Task::IsSuccess(State.Task_UnsetFavoriteSkin) && SourceTask != Null) {
				State.PlayerSkins.SkinList.removekey(State.SkinKeyToDelete);
				if (State.SkinKeyToDelete == State.PlayerSkins.CurrentSkinKey) { //< Unset the skin if the deleted skin is the current player skin
					State = SetUnsetSkin(State, {{{ClubStruct::P}}}K_Skin {});
				} else {
					//L16N [Garage] Message displayed when the selected skin has been removed from player favorite skins.
					DisplayInfo(State.Controls.Label_Info, _("The skin has been removed from your favorites"), False);
					State.PlayerSkins.CurrentSkinKey = State.PlayerSkins.CurrentSkinKey - 1;
					State = UpdateSkinCarousel(State, C_Carousel_Refresh);
				}
			} else {
				//L16N [Garage] Message displayed when the selected skin cannot be uploaded to the Ubisoft servers. %1 will be replaced by an internal error code. e.g. "Error during the skin registration, please try again. (Error code: 32354).
				DisplayInfo(State.Controls.Label_Info, TL::Compose(_("Error while removing the skin, please try again. \n(Error code: %1)"), Task::GetSourceTaskError(State.Task_UnsetFavoriteSkin).Code), True);
			}
			State.Task_UnsetFavoriteSkin = Task::Destroy(State.Task_UnsetFavoriteSkin);
			{{{LoadingSpinner::P}}}StopAnimWithFade(This, State.Controls.Frame_LoadingSpinner);
			State.RefreshDisplayedScene = Now + C_Delay_SceneRefresh;
			State.SkinKeyToDelete = -1;
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_LeavingRoute: {
				State = DestroyScene(State);
				G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Leave(G_TTSContextIdent_Tabs);
			}
		}
	}
}
***
""",
[
	BrowserAPI::ComponentV2(),
	Button::ComponentV2(),
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	ControlBlockList::ComponentV2(),
	ExpendableAsset::ComponentV2(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(), 
	Navigation::ComponentV2(), 
	PopUpMultiChoice::ComponentV2(),
	PopUpPrestigeCompletion::ComponentV2(),
	Router::ComponentV2(), 
	Scroll::ComponentV2(),
	Slider::Component(),
	TitleBar::Component(),
	Transition::ComponentV2(), 
	UserStore::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}