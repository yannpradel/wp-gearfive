/** 
*	Page: MapReviewActivity
*/
#Const Version		"2023-06-09"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/MapReviewActivity.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ButtonIcon2.Script.txt" as ButtonIcon
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/ControlBlockList.Script.txt" as ControlBlockList
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/PlayerName.Script.txt" as PlayerName
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Scroll.Script.txt" as Scroll
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableAsset.Script.txt" as ExpendableAsset
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpBackground2.Script.txt" as PopUpBackground
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/PopUpMultiChoice.Script.txt" as PopUpMultiChoice
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/TrackBrowser.Script.txt" as TrackBrowser
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore_ML.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/CampaignStruct.Script.txt" as CampaignStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "TextLib" as TL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_MapReviewActivity"
#Const C_NavGroup_Default "navgroup-page-map-review-activity-default"
#Const C_NavGroup_Global "navgroup-page-map-review-activity-global"
#Const C_Class_MapButton "class-map-button"

#Const C_Privileges [
	CPrivilegeMgr::EPrivilege::PlayMultiplayerModeWithUGC
]

#Const Const::C_ModeNames as C_ModeNames

#Const C_Choice_Cancel 0
#Const C_Choice_Remove 1
#Const C_Choices_Remove [
	//L16N [MapReviewActivity] Do not remove the track
	0 => _("Cancel"),
	//L16N [MapReviewActivity] Confirm the track suppression
	1 => _("Remove")
]

#Const C_ServerInfo_WaitingTime 0
#Const C_ServerInfo_GameMode 1
#Const C_ServerInfo_Names [
	//L16N [MapReviewActivity] Time needed for the track to enter the track review servers
	0 => _("Maximal waiting time"),
	//L16N [MapReviewActivity] Game mode of the track for the track review (example : Royal or Track of the Day)
	1 => _("Game mode")
]

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
*
*	@return														The page manialink
*/
Text GetManialink() {
	//L16N [MapReviewActivity] Title of the page to access the track review activity
	declare Text Text_MapReview = _("Track review");
	//L16N [MapReviewActivity] Text of the club button. %1 will be replaced by the name of the club. e.g. "Club Nadeo"
	declare Text Text_Club = _("Club $<%1$>");
	//L16N [MapReviewActivity] Play tracks made by other people from the club
	declare Text Text_ROM = _("Review other tracks");
	//L16N [MapReviewActivity] Upload your tracks to be reviewed by club members
	declare Text Text_SYM = _("Submit your tracks");
	//L16N [MapReviewActivity] Button to access player uploaded tracks
	declare Text Text_MyMaps = _("My submitted tracks");
	//L16N [MapReviewActivity] Message displayed in the submitted track list when there is no track.
	declare Text Text_NoMaps = _("You haven't submitted a track yet.");
	//L16N [MapReviewActivity] Title of the pop-up displayed when the user wants to remove the track from the track review server
	declare Text Text_RemoveTitle = _("Remove track");
	//L16N [MapReviewActivity] Button for admin to access all submitted tracks in the track review activity
	declare Text Text_AdminPage = _("Admin page");
	//L16N [MapReviewActivity] %1 MUST STAY AT THE END OF THE STRING !!! %1 will be replaced by the name of the author of the track, e.g. "by PlayerA". If your language does not permit to keep the %1 at the end of the string, do not translate "By" and just keep the text "%1" 
	declare Text Text_AuthorName = _("|NameOnTheRight|By %1");
	//L16N [MapReviewActivity] Link to the track review admin page. %1here%2 will be the link to the page.
	declare Text Text_AdminLink = _("Click %1here%2 to access admin page");
	//L16N [MapReviewActivity] Time in minute in a shortened version (singular)
	declare Text Text_MinuteSingular_Short = _("|singular 3 letters max|min");
	//L16N [MapReviewActivity] Time in minutes in a shortened version (plural)
	declare Text Text_MinutePlural_Short = _("|plural 4 letters max|mins");
	//L16N [MapReviewActivity] Time in minute (singular), %1 will be replaced by the time number, e.g "1 minute"
	declare Text Text_MinuteSingular = _("|singular|%1 minute");
	//L16N [MapReviewActivity] Time in minutes (plural), %1 will be replaced by the time number, e.g "5 minutes"
	declare Text Text_MinutePlural = _("|plural|%1 minutes");
	//L16N [MapReviewActivity] Text displayed on retrieving elements in a scrollview
	declare Text Text_Retrieving = Const::C_Text_RetrievingDataPlaceholder;
	//L16N [MapReviewActivity] Text for loading spinner during track uploading to servers
	declare Text Text_Uploading = _("Uploading your track...");
	//L16N [MapReviewActivity] Text for loading spinner during track uploading to servers
	declare Text Text_Joining = _("Joining track review activity...");
	//L16N [MapReviewActivity] Text for loading spinner during track review server start
	declare Text Text_Starting = _("Starting track review server...");
	//L16N [MapReviewActivity] Text for loading spinner during track review fecthing
	declare Text Text_FetchActivity = _("Fetching activity...");
	//L16N [MapReviewActivity] Text for loading spinner during track review fecthing
	declare Text Text_FetchSubmittedMaps = _("Fetching submitted tracks...");
	//L16N [MapReviewActivity] Confirm to test this track on track server review
	declare Text Text_Confirm = _("Send for review");
	//L16N [MapReviewActivity] Error message displayed when the user try to send an unplayable track (not validated, lightmap not computed, ...) to the server review system
	declare Text Text_NotPlayable = _("This track is not playable.");
	//L16N [MapReviewActivity] Message displayed when the selected track cannot be uploaded on the Track Review system. %1 goes for the type of error.
	declare Text Text_UploadError = _("Error while uploading your track, please try again. (Error code: %1)");
	//L16N [MapReviewActivity] Text pronounced when focusing a submitted map.
	declare Text TTS_Stars = _("%1 stars");
	// Description of the remove track pop-up
	declare PopUpMultiChoice::K_DescriptionPart[] Description_Remove = [
		//L16N [MapReviewActivity] Popup message displayed when the user wants to remove the track from the track review server
		PopUpMultiChoice::CreateDescriptionPart(_("Are you sure to remove this track?"), <120., 30.>, 3., FontManager::C_GameFontSemiBold, "$t$i", <1., 1., 1.>, False)
	];

	/* Variables */
	declare Vec2 Size_HorizontalButton = MLHelpers::KeepRatioFromY(1232., 556., 35.);
	declare Vec2 Size_Thumbnail = MLHelpers::KeepRatioFromY(544., 412., 69.);

	/* Scroll view */
	declare Vec2 Size_TracksScrollWindow = <255., 73.>;
	declare Integer ColumnsNb = 6;
	declare Integer RowsNb = 2;
	declare Integer TracksPerPage = ColumnsNb * RowsNb;
	declare Vec2 Size_TrackMargin = <3., 3.>;
	declare Vec2 Size_Track = Scroll::GetElementSize(Size_TracksScrollWindow, Size_TrackMargin, ColumnsNb, RowsNb);
	declare Integer ElementsNb = Scroll::GetRequiredElementsNb(Size_TracksScrollWindow, Size_Track, Size_TrackMargin, ColumnsNb);

	declare Vec2 Size_TrackImage = MLHelpers::KeepRatioFromY(544., 412., Size_Track.Y);
	declare Vec2 Size_Track_Adjusted = <Size_TrackImage.X - MLHelpers::SkewX(Size_TrackImage.Y, 10.), Size_TrackImage.Y>;
	declare Vec2 Pos_TrackNameOneLine = MLHelpers::SkewX(<Size_TrackImage.X * 0.17, Size_TrackImage.Y * -0.64>, 10.);
	declare Vec2 Pos_TrackNameTwoLines = MLHelpers::SkewX(<Size_TrackImage.X * 0.17, Size_TrackImage.Y * -0.59>, 10.);
	declare Vec2 Pos_TrackAuthor = MLHelpers::SkewX(<Size_TrackImage.X * 0.17, Size_TrackImage.Y * -0.77>, 10.);
	declare Vec2 Pos_TrackRetrieving = MLHelpers::SkewX(<Size_TrackImage.X * 0.17, Size_TrackImage.Y * -0.9>, 10.);
	declare Vec2 Pos_TrackStars = <Size_TrackImage.X * 0.26, Size_TrackImage.Y * -0.9>;
	declare Vec2 Pos_TrackFocusOptions = <Size_TrackImage.X * 0.9, Size_TrackImage.Y * -0.12>;

	declare Text ML_Tracks = "";
	for (I, 1, ElementsNb) {
		ML_Tracks ^= """
			<frameinstance
				modelid="framemodel-track"
				class="{{{Scroll::C_Class_Element}}}"
				hidden="1"
			/>
		""";
	}	

	/* Server Infos list */
	declare Real Margin = 1.5;
	declare Text ML_ServerInfos = "";
	declare Vec2 Size_Background = <120., 7.5>;
	foreach (InfoId => InfoName in C_ServerInfo_Names) {
		declare Text Text_DefaultValue = "-";
		if (InfoId == C_ServerInfo_GameMode) {
			Text_DefaultValue = C_ModeNames[Const::C_ModeIndex_TimeAttack];
		}

		ML_ServerInfos ^= """
			<frame id="frame-server-info-{{{InfoId}}}"
				pos="{{{MLHelpers::Skew(-Size_Background.X/2., -InfoId*(Size_Background.Y + Margin), 10.)}}}"
			>
				<label id="label-server-info-name" size="{{{Size_Background.X*0.5}}} {{{Size_Background.Y}}}" pos="{{{MLHelpers::Skew(3., -0.5, 10.)}}}" halign="left" class="text-semibold" text="{{{InfoName}}}" textsize="2." z-index="3"/>
				<frameinstance
					id="asset-left" z-index="1"
					modelid="{{{ExpendableAsset::C_Name}}}"
					data-width="{{{Size_Background.X*0.55}}}"
					data-height="{{{Size_Background.Y}}}"
					data-halign="left" data-valign="center"
					data-color="{{{ColorPalette::C_Color_DarkBlue}}}"
					data-colormode-left="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
					data-image-left="{{{Const::C_ImageUrl_Common_ButtonRounded_Start}}}"
					data-size-left="128 256"
				/>
				<frameinstance
					id="asset-right" z-index="2"
					modelid="{{{ExpendableAsset::C_Name}}}"
					pos="{{{Size_Background.X*0.55 - MLHelpers::SkewX(Size_Background.Y, 10.)}}} 0"
					data-width="{{{Size_Background.X*0.45}}}"
					data-height="{{{Size_Background.Y}}}"
					data-halign="left" data-valign="center"
					data-color="{{{ColorPalette::C_Color_GreenTwo}}}"
					data-colormode-right="{{{ExpendableAsset::C_ColorMode_Colorize}}}"
					data-image-right="{{{Const::C_ImageUrl_Common_ButtonRounded_End}}}"
					data-size-right="128 256"
				/>
				<label id="label-server-info-value-{{{InfoId}}}" size="{{{Size_Background.X*0.4}}} {{{Size_Background.Y}}}" pos="{{{Size_Background.X*0.76}}} -0.5" class="text-semibold" text="{{{Text_DefaultValue}}}" textsize="2." textcolor="{{{ColorPalette::C_Color_White}}}" z-index="3"/>
			</frame>
		""";
	}

	return MV::Create(
C_Name, 3,
"""
<stylesheet>
	<style class="text-extrabold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-semibold" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-regular" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontRegular}}}" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-star" size="5 5" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontSemiBold}}}" textsize="3" textcolor="{{{ColorPalette::C_Color_Gold}}}" textprefix="$i"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-track">
	<frameinstance id="control-block-list-track-thumbnail" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" z-index="0" data-size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" data-alphamask="{{{Const::C_ImageUrl_Common_Track_Mask}}}" />
	<quad id="quad-gradient" z-index="1" size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" image="{{{Const::C_ImageUrl_Common_Track_Gradient_Full}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}"/>
	<frameinstance id="control-block-list-track-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" z-index="2" data-textsize="2" data-textsize-fitlabel-min="0.6" data-textsize-fitlabel-step="0.2" data-maxline="2" data-size="{{{Size_TrackImage.X * 0.8}}} 7" data-opacity="0.7" pos="{{{Pos_TrackNameOneLine.X}}} {{{Pos_TrackNameOneLine.Y}}}" data-filter-profanities="OnlyIfNotTranslated" data-valign="center2" data-textprefix="$t$i" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" />
	<frameinstance id="playername-author" modelid="{{{PlayerName::C_Name}}}" pos="{{{Pos_TrackAuthor.X}}} {{{Pos_TrackAuthor.Y}}}" data-size="{{{Size_TrackImage.X * 0.8}}} 5" data-opacity="0.7" data-halign="left" data-valign="center" data-textprefix="$t$i" data-textfont="{{{FontManager::C_GameFontRegular}}}" data-textsize="2" data-textcompose="{{{Text_AuthorName}}}" z-index="2" />
	<frame id="frame-stars" pos="{{{Pos_TrackStars.X}}} {{{Pos_TrackStars.Y}}}" halign="left" z-index="2">
		<label id="label-star-1" pos="-10 0" text="" class="text-regular" textsize="2." halign="left"/>
		<label id="label-star-2" pos="-5 0" text="" class="text-regular" textsize="2." halign="left"/>
		<label id="label-star-3" pos="0 0" text="" class="text-regular" textsize="2." halign="left"/>
		<label id="label-star-4" pos="5 0" text="" class="text-regular" textsize="2." halign="left"/>
		<label id="label-star-5" pos="10 0" text="" class="text-regular" textsize="2." halign="left"/>
	</frame>
	<quad id="quad-focus" z-index="3" size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" image="{{{Const::C_ImageUrl_Common_Track_Contour}}}" opacity="0." colorize="FFF"/>
	<frame id="frame-track-focus-options" z-index="3" pos="{{{Pos_TrackFocusOptions.X}}} {{{Pos_TrackFocusOptions.Y}}}" halign="right" hidden="1" >
		<quad id="button-delete" image="{{{Const::C_ImageUrl_Icon_Bin_Inc}}}" size="7 7" pos="0 0" class="{{{C_Class_MapButton}}}" halign="center" valign="center2" colorize="FFF" opacity="0.7" scriptevents="1" hidden="1"/>
		<quad id="button-download" image="{{{Const::C_ImageUrl_Icon_Download_Inc}}}" size="7 7" pos="-8 0" class="{{{C_Class_MapButton}}}" halign="center" valign="center2" colorize="FFF" opacity="0.7" scriptevents="1" hidden="1"/>
	</frame>
	<frame size="{{{Size_TrackImage.X}}} {{{Size_TrackImage.Y}}}" pos="{{{Size_TrackImage.X/2}}} {{{-Size_TrackImage.Y/2}}}" halign="center" valign="center" z-index="1">
		<quad id="quad-hitbox" size="{{{Size_Track_Adjusted.X}}} {{{Size_Track_Adjusted.Y*1.5}}}" scriptevents="1" class="{{{Scroll::C_Class_ActivationZone}}}" halign="center" valign="center" rot="10"/>
	</frame>
</framemodel>

<!-- Page -->
<frameinstance modelid="{{{TrackBrowser::C_Name}}}" 
	id="frame-track-browser" 
	z-index="{{{Const::C_ZIndex_BrowserAPI}}}"
	data-show-only-playable="1"
/>

<!-- Frame global -->
<frame id="frame-global" class="{{{Navigation::C_Class}}}" data-nav-inputs="cancel" data-nav-targets="_" data-nav-group="{{{C_NavGroup_Global}}}" z-index="{{{Const::C_ZIndex_PopUpDisplay}}}">
	<frameinstance id="frame-background" modelid="{{{PopUpBackground::C_Name}}}" z-index="-1"/>
	<frameinstance id="popupmultichoice-remove" modelid="{{{PopUpMultiChoice::C_Name}}}" data-title="{{{Text_RemoveTitle}}}" data-choices="{{{TL::MLEncode(C_Choices_Remove.tojson())}}}" data-description="{{{TL::MLEncode(Description_Remove.tojson())}}}" data-styles-secondchoice="{{{PopUpMultiChoice::C_ChoiceStyle_Default}}} {{{ExpendableButton::C_Style_ButtonWarning}}}" data-close-after-selection="false" z-index="3" hidden="1" />
	<frameinstance id="loadingspinner-retrieve-info" modelid="{{{LoadingSpinner::C_Name}}}" pos="{{{MLHelpers::Skew(-120., 20., 10.)}}}" data-label="{{{Text_FetchActivity}}}" data-label-side="{{{LoadingSpinner::C_LabelSide_Right}}}" data-opacity="0." data-size="10 10" scale="0.7" z-index="2"/>	
	<label id="label-info" pos="{{{MLHelpers::Skew(-125., 19., 10.)}}}" size="250 10" class="text-semibold" textsize="2.5" halign="left"/>
		
	<frame id="frame-header">
		<label id="label-title" pos="{{{MLHelpers::Skew(-126.5, 61.5, 10.)}}}" size="200 10" class="text-extrabold" text="{{{Text_MapReview}}}" textsize="13" halign="left" translate="1" filter-profanities="Always" z-index="1"/>
		<label id="label-subtitle" pos="{{{MLHelpers::Skew(-125., 45.5, 10.)}}}" size="200 10" class="text-extrabold" textsize="4." textcolor="{{{ColorPalette::C_Color_GreenOne}}}" halign="left" translate="1" filter-profanities="Always" z-index="1"/>
		<frameinstance 
			id="button-club" pos="{{{MLHelpers::Skew(-126., 53., 10.)}}}" z-index="2"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-styles="{{{ExpendableButton::C_Style_NoBackground}}}"
			data-filter-profanities="{{{Tools::C_FilterProfanities_Always}}}"
			data-icon-image="{{{Const::C_ImageUrl_Icon_Link}}}"
			data-icon-colormode="{{{ExpendableButton::C_ColorMode_Colorize}}}"
			data-icon-color-unfocused="{{{ColorPalette::C_Color_White}}}"
			data-icon-color-focused="{{{ColorPalette::C_Color_GreenOne}}}"
			data-text-textcolor-unfocused="{{{ColorPalette::C_Color_White}}}"
			data-text-textcolor-focused="{{{ColorPalette::C_Color_GreenOne}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;up;down;right"
			data-nav-targets="_;button-admin;button-rom;button-admin"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>

	<frame id="frame-main-menu">
		<frameinstance
			id="button-admin" pos="{{{MLHelpers::Skew(132., 38.5, 10.)}}}" z-index="2"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-size="{{{28.*416/336}}} 28"
			data-labelsize="25 25"
			data-opacityunfocus=".5"
			data-bgcolor="{{{ColorPalette::C_Color_GreenFour}}}"
			data-image="{{{Const::C_ImageUrl_ClubCreate_Button_Square}}}"
			data-contourimage="{{{Const::C_ImageUrl_ClubCreate_Button_Square_Focus}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus="0."
			data-icon="{{{Const::C_ImageUrl_Icon_Role_Admin}}}"
			data-iconfocus="{{{Const::C_ImageUrl_Icon_Role_Admin}}}"
			data-iconsize="15 15"
			data-halign="right" data-valign="bottom"
			data-nav-inputs="select;down;left"
			data-nav-targets="_;button-my-maps;button-club"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
			data-nav-locked="1"
			hidden="1"
		/>

		<frameinstance 
			id="button-rom" pos="{{{MLHelpers::Skew(-127.5, -2.8, 10.)}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_ROM}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{Const::C_ImageUrl_MapReview_OtherMap}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus="0."
			data-tilthitbox="10"
			data-textsize="3."
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{FontManager::C_GameFontSemiBold}}}"
			data-autonewline="1" data-maxline="2"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;left;right;up;down"
			data-nav-targets="_;button-back;button-sym;button-club;button-back"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		<frameinstance 
			id="button-sym" pos="{{{MLHelpers::Skew(-53.5, -2.8, 10.)}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_SYM}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{Const::C_ImageUrl_MapReview_YourMap}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus="0."
			data-tilthitbox="10"
			data-textsize="3."
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{FontManager::C_GameFontSemiBold}}}"
			data-autonewline="1" data-maxline="2"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;left;right;up;down"
			data-nav-targets="_;button-rom;button-my-maps;button-club;button-back"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
		
		<frameinstance 
			id="button-my-maps" pos="{{{MLHelpers::Skew(20.5, -2.8, 10.)}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_MyMaps}}}"
			data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
			data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{Const::C_ImageUrl_MapReview_SubmittedMaps}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus="0."
			data-tilthitbox="10"
			data-textsize="3."
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-textxpos="0.13" data-textypos="-0.13"
			data-texthalign="left" data-textvalign="top"
			data-textfont="{{{FontManager::C_GameFontSemiBold}}}"
			data-autonewline="1" data-maxline="2"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;left;up;down"
			data-nav-targets="_;button-sym;button-club;button-back"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>
	</frame>

	<frame id="frame-my-maps" hidden="1">
		<label id="label-admin-link" class="text-semibold" z-index="5" pos="137 32" size="150 2" textprefix="$i" textsize="2" halign="right"/>
		<frameinstance modelid="{{{Scroll::C_Name}}}" data-scroll-parent="scroll-tracks" z-index="1" />
		<frame
			id="scroll-tracks" pos="{{{Size_TracksScrollWindow.X * -0.514}}} {{{Size_TracksScrollWindow.Y * 0.22}}}"
			class="{{{Scroll::C_Class_Window}}} {{{Navigation::C_Class}}}"
			data-pager-page-size="{{{TracksPerPage}}}"
			data-elements-per-line="{{{ColumnsNb}}}"
			data-element-size="{{{Size_Track.X}}} {{{Size_Track.Y}}}"
			data-margin-size="{{{Size_TrackMargin.X}}} {{{Size_TrackMargin.Y}}}"
			data-window-size="{{{Size_TracksScrollWindow.X}}} {{{Size_TracksScrollWindow.Y}}}"
			data-scroll-indicator-x-offset="-5."
			data-scroll-indicator-y-offset="-12."
			data-scroll-indicator-image="{{{Const::C_ImageUrl_Icon_Arrow_Bottom_Oblique}}}"
			data-scroll-indicator-colorize="FFFFFF"
			data-scroll-indicator-size="12"
			data-scrollbar-visibility="{{{Scroll::C_ScrollBarVisibility_Never}}}"
			data-scrollpadding="17.5"
			data-skew="-10."
			data-skew-valign="{{{Scroll::C_SkewVAlign_Center}}}"
			data-nav-group="{{{C_NavGroup_Default}}}"
		>
			<quad z-index="-1" scriptevents="1" class="{{{Scroll::C_Class_ScrollEvent}}}" />
			{{{ML_Tracks}}}
		</frame>
	</frame>

	<frame id="frame-map-confirmation" hidden="1">
		<frame id="frame-map" pos="{{{MLHelpers::Skew(-85.3, -20., 10.)}}}">
			<frame pos="-30 27" z-index="4">
				<frameinstance id="control-block-list-track-name" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Label}}}" data-size="{{{Size_Thumbnail.X * 0.75}}} 10" data-valign="center2" data-textprefix="$t$i" data-textfont="{{{FontManager::C_GameFontExtraBold}}}" data-textsize="5" data-textsize-fitlabel-min="3" data-textsize-fitlabel-step="0.25" data-filter-profanities="Always" />
				<label id="label-map-time" size="{{{Size_Thumbnail.X * 0.6}}} 10" pos="-1. -6" class="text-regular" halign="left"/>
			</frame>
			<frameinstance id="control-block-list-track-thumbnail" modelid="{{{ControlBlockList::C_Name}}}" data-type="{{{ControlBlockList::C_Type_Quad}}}" z-index="1" data-size="{{{Size_Thumbnail.X}}} {{{Size_Thumbnail.Y}}}" data-alphamask="{{{Const::C_ImageUrl_Common_Track_Mask}}}" data-halign="center" data-valign="center" />
			<quad id="quad-overlay" z-index="2" size="{{{Size_Thumbnail.X}}} {{{Size_Thumbnail.Y}}}" image="{{{Const::C_ImageUrl_Common_Track_Gradient_Top}}}" colorize="{{{ColorPalette::C_Color_DarkBlue}}}" opacity="0.6" halign="center" valign="center"/>
			<quad id="quad-contour" z-index="3" size="{{{Size_Thumbnail.X}}} {{{Size_Thumbnail.Y}}}" image="{{{Const::C_ImageUrl_Common_Track_Contour}}}" colorize="FFF" halign="center" valign="center"/>
		</frame>

		<frame id="frame-server-infos" pos="{{{MLHelpers::Skew(18., 5.5, 10.)}}}" halign="left" valign="center">
			{{{ML_ServerInfos}}}
		</frame>

		<frameinstance
			id="button-confirm" pos="{{{MLHelpers::Skew(-42.5, -17.5, 10.)}}}" z-index="2"
			modelid="{{{ExpendableButton::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{Text_Confirm}}}"
			data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageNextAnimated}}}"
			data-halign="left" data-valign="center"
			data-nav-inputs="select;left;down"
			data-nav-targets="_;button-back;button-back"
			data-nav-group="{{{C_NavGroup_Default}}}"
			data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
		/>
	</frame>

	<!-- Bottom buttons -->
	<frameinstance id="button-icon-back" modelid="{{{ButtonIcon::C_Name}}}" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
	<frameinstance
		id="button-back" pos="{{{MLHelpers::Skew(-125.5, -67., 10.)}}}" z-index="2"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-max-width="60."
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_ButtonSecondary}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;right;up"
		data-nav-targets="_;button-my-maps;button-rom"
		data-nav-group="{{{C_NavGroup_Default}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/CommonLibs/Common/Task.Script.txt" as Task
#Include "Libs/Nadeo/CommonLibs/Common/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/CommonLibs/Common/Privileges.Script.txt" as Privileges
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/TMNext/TrackMania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/TMNext/TrackMania/API/MapReviewAPI.Script.txt" as MapReviewAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ReportSystem.Script.txt" as ReportSystem
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ReportStruct.Script.txt" as ReportStruct
#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_DelayBetweenRequests 5000 //< milliseconds

#Const C_Metadata_PagerOffset "PagerOffset"

#Const C_Page_Hidden -1
#Const C_Page_MainMenu 0
#Const C_Page_BrowseMap 1
#Const C_Page_MapConfirmation 2
#Const C_Page_MyMaps 3
#Const C_Page_Admin 4

#Const C_Star_Empty ""
#Const C_Star_Half ""
#Const C_Star_Full ""

#Const C_InfoType_Standard "standard"
#Const C_InfoType_Success "success"
#Const C_InfoType_Error "error"

#Struct K_Controls {
	CMlFrame Button_Admin;
	CMlFrame Button_Back;
	CMlFrame Button_Club;
	CMlFrame Button_Confirm;
	CMlFrame Button_MyMaps;
	CMlFrame Button_ROM;
	CMlFrame Button_SYM;
	CMlFrame Frame_Global;
	CMlFrame Frame_MainMenu;
	CMlFrame Frame_MapConfirmation;
	CMlFrame Frame_Maps;
	CMlFrame LoadingSpinner_RetrieveInfo;
	CMlFrame PopUpMultiChoice_Remove;
	CMlFrame Scroll_Tracks;
	CMlLabel Label_Info;
	CMlLabel Label_SYMGameMode;
	CMlLabel Label_SYMWaitTime;
	CMlLabel Label_SubTitle;
	CMlLabel Label_Title;
}

#Struct K_PlaySessionPrivilegeCheck {
	Privileges::K_PrivilegeCheck PrivilegeCheck;
	Text JoinLink;
	Integer Page;
}

#Struct K_State {
	Integer WaitTime;
	Integer CurrentPage;
	Integer NextPage;
	Integer AllowJoinLinkUpdate;
	Integer SubmittedMapsTotal;
	Text MapUidToDelete;
	Task::K_Task Task_GetMap;
	Task::K_Task Task_RegisterMap;
	{{{ClubStruct::P}}}K_Club Club;
	{{{ClubStruct::P}}}K_Member Membership;
	{{{CampaignStruct::P}}}K_Map CurrentMap;
	MapReviewAPI::K_SubmittedMap[Integer] Maps;
	{{{ClubStruct::P}}}K_MapReview MapReview;
	Http::K_Request GetClubDetailRequest;
	Http::K_Request GetClubMembershipRequest;
	Http::K_Request GetMapReviewActivityRequest;
	Http::K_Request GetSubmittedMapsRequest;
	Http::K_Request GetWaitingTimeRequest;
	Http::K_Request PostJoinRequest;
	Http::K_Request PostRemoveSubmittedMapRequest;
	K_PlaySessionPrivilegeCheck PlaySessionPrivilegeCheck;
	ReportStruct::LibStructuresReport_K_ReportData[Integer] CurrentReportData;
}

""",
"""
Void LockNavigation(K_Controls _Controls, Boolean _IsLocked) {
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Default}}}", !_IsLocked);
	{{{Navigation::P}}}EnableGroup(This, "{{{C_NavGroup_Global}}}", !_IsLocked);
	{{{Scroll::P}}}LockNavigation(_Controls.Scroll_Tracks, _IsLocked);
}

Void DisplayInfo(CMlLabel _Label_Info, Text _Text, Text _InfoType) {
	declare Vec2 Pos_Hidden = MLHelpers::SkewX(<-126., 20.>, 10.);
	declare Vec2 Pos_Visible = MLHelpers::SkewX(<-125., 20.>, 10.);
	AnimMgr.Flush(_Label_Info);

	if (_Text != "") {
		_Label_Info.SetText(_Text);
		_Label_Info.Opacity = 0.;
		_Label_Info.RelativePosition_V3 = Pos_Hidden;
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Visible.X^" "^Pos_Visible.Y^"\" opacity=\"1.\" hidden=\"0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		switch (_InfoType) {
			case C_InfoType_Error: _Label_Info.TextColor = {{{ColorPalette::C_Color_Vec3_ErrorRed}}};
			case C_InfoType_Success: {
				_Label_Info.TextColor = {{{ColorPalette::C_Color_Vec3_GreenOne}}};
				AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", Now+5000, 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
			default: _Label_Info.TextColor = <1., 1., 1.>;
		}
	} else {
		AnimMgr.Add(_Label_Info, "<anim pos=\""^Pos_Hidden.X^" "^Pos_Hidden.Y^"\" opacity=\"0.\" hidden=\"1\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

// Update controller hints at the bottom of the screen
Void UpdateControllerInfo(Boolean _ScrollFocused, Boolean _IsFromFirstParty) {
	declare Text[Text] ControllerInfos = ["A" => _("Select"), "B" => _("Back")];

	if (_ScrollFocused) {
		if (_IsFromFirstParty) {
			ControllerInfos = ["A" => _("Play"), "Action1" => _("Remove"), "B" => _("Back")];
		} else {
			ControllerInfos = ["A" => _("Play"), "Y" => _("Download"), "Action1" => _("Remove"), "B" => _("Back")];
		}
	}

	ControllerInfos["{{{Const::C_NavInput_ReportSystem}}}"] = "{{{Const::C_Text_Report}}}";

	ControllerInfo::SetButtons(ControllerInfos);
}

Void PlayMap(K_State _State, MapReviewAPI::K_SubmittedMap _SubmittedMap) {
	SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", [_SubmittedMap.Name]);
	TitleControl::PlayMap(TitleControl, _SubmittedMap.DownloadUrl, "{{{Const::C_ModeScript_PlayMap}}}", TL::Join("", [
		"<root>",
			"<setting name=\"S_TimeLimit\" value=\"-1\" type=\"integer\"/>",
			"<setting name=\"S_ForceLapsNb\" value=\"-1\" type=\"integer\"/>",
			"<setting name=\"S_DecoImageUrl_Checkpoint\" value=\""^TL::MLEncode(_State.Club.DecalUrl)^"\" type=\"text\"/>",
			"<setting name=\"S_DecoImageUrl_DecalSponsor4x1\" value=\""^TL::MLEncode(_State.Club.DecoImageUrl_DecalSponsor4x1)^"\" type=\"text\"/>",
			"<setting name=\"S_DecoImageUrl_Screen16x9\" value=\""^TL::MLEncode(_State.Club.DecoImageUrl_Screen16x9)^"\" type=\"text\"/>",
			"<setting name=\"S_DecoImageUrl_Screen8x1\" value=\""^TL::MLEncode(_State.Club.DecoImageUrl_Screen8x1)^"\" type=\"text\"/>",
			"<setting name=\"S_DecoImageUrl_Screen16x1\" value=\""^TL::MLEncode(_State.Club.DecoImageUrl_Screen16x1)^"\" type=\"text\"/>",
			"<setting name=\"S_ClubId\" value=\""^_State.Club.Id^"\" type=\"integer\"/>",
			"<setting name=\"S_ClubName\" value=\""^TL::MLEncode(_State.Club.Name)^"\" type=\"text\"/>",
		"</root>"
	]));
	UpdateControllerInfo(True, Platform::IsFromFirstParty(System));
}

K_State DeleteMap(K_State _State, K_Controls _Controls, Text _MapUid) {
	declare K_State State = _State;

	State.MapUidToDelete = _MapUid;
	{{{PopUpMultiChoice::P}}}Open(This, _Controls.PopUpMultiChoice_Remove);

	return State;
}

Void ShowTrack(CMlFrame _Frame_Track, MapReviewAPI::K_SubmittedMap _SubmittedMap, Integer _Page) {
	declare CMlFrame ControlBlockList_TrackName <=> (_Frame_Track.GetFirstChild("control-block-list-track-name") as CMlFrame);
	declare CMlFrame ControlBlockList_TrackThumbnail <=> (_Frame_Track.GetFirstChild("control-block-list-track-thumbnail") as CMlFrame);
	declare CMlFrame Frame_Stars <=> (_Frame_Track.GetFirstChild("frame-stars") as CMlFrame);
	declare CMlFrame Frame_FocusOptions <=> (_Frame_Track.GetFirstChild("frame-track-focus-options") as CMlFrame);
	declare CMlFrame PlayerName_Author <=> (_Frame_Track.GetFirstChild("playername-author") as CMlFrame);

	_Frame_Track.Show();
	Frame_FocusOptions.Show();

	/* Update track author */
	PlayerName_Author.Visible = (_Page == C_Page_Admin);
	{{{PlayerName::P}}}SetAccountId(This, PlayerName_Author, _SubmittedMap.AuthorAccountId, False);

	/* Update track name */
	{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlBlockList_TrackName, _SubmittedMap.AuthorAccountId, Tools::FormatValue(_SubmittedMap.Name), False);
	{{{ControlBlockList::P}}}SetTTSAltText(
		This,
		ControlBlockList_TrackName,
		TL::Compose("%2 "^TL::GetTranslatedText("{{{TTS_Stars}}}"), TL::FormatReal(_SubmittedMap.NoteInfo.Average, 1, True, True), {{{ControlBlockList::P}}}GetTextValue(ControlBlockList_TrackName)),
		TL::Compose("%2 "^TL::GetTranslatedText("{{{TTS_Stars}}}"), TL::FormatReal(_SubmittedMap.NoteInfo.Average, 1, True, True), {{{ControlBlockList::P}}}C_DefaultTextValueBlocked),
		False
	);
	if ({{{ControlBlockList::P}}}GetValueLineCount(This, ControlBlockList_TrackName) >= 2) {
		ControlBlockList_TrackName.RelativePosition_V3 = {{{Pos_TrackNameTwoLines}}};
	} else {
		ControlBlockList_TrackName.RelativePosition_V3 = {{{Pos_TrackNameOneLine}}};
	}
	if (!PlayerName_Author.Visible) {
		ControlBlockList_TrackName.RelativePosition_V3 -= MLHelpers::SkewX(<0., ControlBlockList_TrackName.RelativePosition_V3.Y - {{{Pos_TrackAuthor.Y}}}>, 10.);
	}
	{{{ControlBlockList::P}}}Redraw(This, ControlBlockList_TrackName);
	
	/* Update thumbnail */
	{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, ControlBlockList_TrackThumbnail, _SubmittedMap.AuthorAccountId, _SubmittedMap.ThumbnailUrl);
	ControlBlockList_TrackThumbnail.Show();

	/* Update stars */
	Frame_Stars.Show();
	declare Real Average = _SubmittedMap.NoteInfo.Average;
	foreach (Index => Control in Frame_Stars.Controls) {
		declare Integer CurrentStar = Index + 1;
		if (CurrentStar - 0.25 <= Average) {
			(Control as CMlLabel).Value = C_Star_Full;
		} else if (CurrentStar - 0.75 <= Average) {
			(Control as CMlLabel).Value = C_Star_Half;
		} else {
			(Control as CMlLabel).Value = C_Star_Empty;
		}
	}
}

Void ShowTrackLoading(CMlFrame _Frame_Track) {
	declare CMlFrame ControlBlockList_TrackName <=> (_Frame_Track.GetFirstChild("control-block-list-track-name") as CMlFrame);
	declare CMlFrame ControlBlockList_TrackThumbnail <=> (_Frame_Track.GetFirstChild("control-block-list-track-thumbnail") as CMlFrame);
	declare CMlFrame Frame_FocusOptions <=> (_Frame_Track.GetFirstChild("frame-track-focus-options") as CMlFrame);
	declare CMlFrame Frame_Stars <=> (_Frame_Track.GetFirstChild("frame-stars") as CMlFrame);
	declare CMlFrame PlayerName_Author <=> (_Frame_Track.GetFirstChild("playername-author") as CMlFrame);

	_Frame_Track.Show();
	Frame_Stars.Hide();
	PlayerName_Author.Hide();
	Frame_FocusOptions.Hide();
	ControlBlockList_TrackName.RelativePosition_V3 = {{{Pos_TrackRetrieving}}};
	{{{ControlBlockList::P}}}SetTTSAltText(This,ControlBlockList_TrackName, "", "", False);
	{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlBlockList_TrackName, "", "{{{Text_Retrieving}}}", False);
	{{{ControlBlockList::P}}}Redraw(This, ControlBlockList_TrackName);
	{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, ControlBlockList_TrackThumbnail, "", "");
	ControlBlockList_TrackThumbnail.Visible = False;
}

Void FocusTrack(CMlFrame _Frame_Track, Boolean _IsFocused) {
	declare CMlFrame ControlBlockList_TrackName <=> (_Frame_Track.GetFirstChild("control-block-list-track-name") as CMlFrame);
	declare CMlFrame PlayerName_Author <=> (_Frame_Track.GetFirstChild("playername-author") as CMlFrame);
	declare CMlQuad Button_Delete <=> (_Frame_Track.GetFirstChild("button-delete") as CMlQuad);
	declare CMlQuad Button_Download <=> (_Frame_Track.GetFirstChild("button-download") as CMlQuad);
	declare CMlQuad Quad_Focus <=> (_Frame_Track.GetFirstChild("quad-focus") as CMlQuad);
	declare CMlQuad Quad_Gradient <=> (_Frame_Track.GetFirstChild("quad-gradient") as CMlQuad);

	AnimMgr.Flush(Quad_Gradient);
	AnimMgr.Flush(Quad_Focus);

	Button_Delete.Visible = _IsFocused;
	Button_Download.Visible = _IsFocused && !Platform::IsFromFirstParty(System);
	if (_IsFocused) {
		AnimMgr.Add(Quad_Gradient, "<anim opacity=\"0.6\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Focus, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackName, 1., 250);
		{{{PlayerName::P}}}SetOpacity(This, PlayerName_Author, 1., 250);
	} else {
		AnimMgr.Add(Quad_Gradient, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_Focus, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		{{{ControlBlockList::P}}}SetOpacity(This, ControlBlockList_TrackName, 0.7, 250);
		{{{PlayerName::P}}}SetOpacity(This, PlayerName_Author, 0.7, 250);
	}

	// Text to speech
	if (_IsFocused) {
		{{{ControlBlockList::P}}}TTS_Focus(ControlBlockList_TrackName);
	} else {
		{{{ControlBlockList::P}}}TTS_Unfocus(ControlBlockList_TrackName);
	}
}

Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, _From as CMlFrame);
		} else if ({{{Scroll::P}}}IsScroll(_From)) {
			{{{Scroll::P}}}Unfocus(This, (_From as CMlFrame));
			UpdateControllerInfo(False, Platform::IsFromFirstParty(System));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, _To as CMlFrame);
		} else if ({{{Scroll::P}}}IsScroll(_To)) {
			{{{Scroll::P}}}Focus(This, (_To as CMlFrame));
			UpdateControllerInfo(True, Platform::IsFromFirstParty(System));
		}
	}
}

Void SetMainMenuPage(K_State _State, K_Controls _Controls, Boolean _IsButtonEnabled) {
	_Controls.Frame_MainMenu.Show();
	{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_ROM, _IsButtonEnabled);
	{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_SYM, _IsButtonEnabled);
	{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_MyMaps, _IsButtonEnabled);
	{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_Admin, RBAC::HasClubPermission(_State.Membership, RBAC::C_ClubPermission_Administration));
	{{{Navigation::P}}}ChangeControlTarget(This, _Controls.Button_Back, "up", _Controls.Button_ROM.ControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, _Controls.Button_Back, "right", _Controls.Button_ROM.ControlId);
	if (!{{{Navigation::P}}}IsLocked(_Controls.Button_ROM)) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _Controls.Button_ROM);
	} else {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _Controls.Button_Back);
	}
}

K_State SetMapConfirmationPage(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;
	declare CMlFrame ControlBlockList_TrackName <=> (_Controls.Frame_MapConfirmation.GetFirstChild("control-block-list-track-name") as CMlFrame);
	declare CMlLabel Label_MapTime <=> (_Controls.Frame_MapConfirmation.GetFirstChild("label-map-time") as CMlLabel);
	declare CMlFrame ControlBlockList_TrackThumbnail <=> (_Controls.Frame_MapConfirmation.GetFirstChild("control-block-list-track-thumbnail") as CMlFrame);
	
	/* Update wait timer */
	if (State.MapReview.Activity.ClubId != {{{ClubStruct::P}}}C_ClubNullId && State.MapReview.Activity.Id != {{{ClubStruct::P}}}C_ActivityNullId) {
		State.GetWaitingTimeRequest = Http::DestroyAndCreate(State.GetWaitingTimeRequest, ClubAPI::GetMapReviewActivityWaitingTime(State.MapReview.Activity.ClubId, State.MapReview.Activity.Id));
	}

	/* Update map preview */
	_Controls.Frame_MapConfirmation.Show();
	_Controls.Label_SubTitle.Visible = True;
	_Controls.Label_SubTitle.SetText("{{{Text_SYM}}}");
	{{{ControlBlockList::P}}}SetOwnerAndTextValue(This, ControlBlockList_TrackName, State.CurrentMap.AuthorLogin, State.CurrentMap.Name);
	{{{ControlBlockList::P}}}SetOwnerAndImageUrl(This, ControlBlockList_TrackThumbnail, State.CurrentMap.AuthorLogin, State.CurrentMap.ThumbnailUrl);
	if (State.CurrentMap.AuthorTime >= 0) {
		Label_MapTime.Value = TL::TimeToText(State.CurrentMap.AuthorTime, True);
	} else {
		Label_MapTime.Value = "--:--.---";
	}
	
	/* Update Navigation controls and error label */
	{{{Navigation::P}}}ChangeControlTarget(This, _Controls.Button_Back, "up", _Controls.Button_Confirm.ControlId);
	{{{Navigation::P}}}ChangeControlTarget(This, _Controls.Button_Back, "right", _Controls.Button_Confirm.ControlId);
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(_Controls.Button_Confirm, State.CurrentMap.IsPlayable);
	if (State.CurrentMap.IsPlayable) {
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _Controls.Button_Confirm);
	} else {
		DisplayInfo(_Controls.Label_Info, "{{{Text_NotPlayable}}}", C_InfoType_Error);
		Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _Controls.Button_Back);
	}

	return State;
}

Void SetScrollPage(K_State _State, K_Controls _Controls) {
	declare CMlLabel Label_AdminLink = (_Controls.Frame_Maps.GetFirstChild("label-admin-link") as CMlLabel); 

	/* Show scroll page */
	_Controls.Frame_Maps.Show();

	/* Update labels */
	_Controls.Label_SubTitle.Visible = True;
	Label_AdminLink.Visible = _State.CurrentPage == C_Page_Admin && _State.MapReview.Game2WebUrl != "" && Platform::IsPC(System);
	Label_AdminLink.SetText(TL::Compose("{{{Text_AdminLink}}}", "$l["^_State.MapReview.Game2WebUrl^"]", "$l"));
	if (_State.Maps.count <= 0) DisplayInfo(_Controls.Label_Info, "{{{Text_NoMaps}}}", C_InfoType_Standard);
	switch (_State.CurrentPage) {
		case C_Page_MyMaps: _Controls.Label_SubTitle.SetText("{{{Text_MyMaps}}}");
		case C_Page_Admin: _Controls.Label_SubTitle.SetText("{{{Text_AdminPage}}}");
	}

	/* Update navigation */
	{{{Scroll::P}}}LockNavigation(_Controls.Scroll_Tracks, False);
	{{{Navigation::P}}}ChangeControlTarget(This, _Controls.Button_Back, "up", _Controls.Scroll_Tracks.ControlId);
	Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), _Controls.Button_Back);
}

Void UpdateMaxWaitTimeLabels(K_State _State, K_Controls _Controls) {
	declare CMlLabel Label_WaitTime <=> (_Controls.Frame_MapConfirmation.GetFirstChild("label-server-info-value-"^{{{C_ServerInfo_WaitingTime}}}) as CMlLabel);

	if (_State.WaitTime >= 0) {
		if (_State.WaitTime <= 60) {
			Label_WaitTime.SetText(TL::Compose("{{{Text_MinuteSingular}}}", ""^ML::Max(1, ML::CeilingInteger((_State.WaitTime-1)/60.))));
		} else {
			Label_WaitTime.SetText(TL::Compose("{{{Text_MinutePlural}}}", ""^ML::CeilingInteger((_State.WaitTime-1)/60.)));
		}
	} else {
		Label_WaitTime.SetText("-");
	}
}

Void DisplayClubName(K_State _State, K_Controls _Controls, Boolean _IsVisible) {
	{{{ExpendableButton::P}}}SetText(This, _Controls.Button_Club, TL::Compose("{{{Text_Club}}}", _State.MapReview.ClubName));
	{{{ExpendableButton::P}}}SetVisibilityAndNavigation(_Controls.Button_Club, _IsVisible && _State.MapReview.ClubName != "");
	if (_Controls.Button_Club.Visible) {
		_Controls.Label_SubTitle.RelativePosition_V3 = MLHelpers::SkewX(<-125., 45.5>, 10.);
	} else {
		_Controls.Label_SubTitle.RelativePosition_V3 = MLHelpers::SkewX(<-125., 53.>, 10.);
	}
}

Void DisplayLoading(K_Controls _Controls, CMlFrame _Frame_LoadingSpinner, Text _Message) {
	if (_Message != "" && _Frame_LoadingSpinner != Null) {
		DisplayInfo(_Controls.Label_Info, "", C_InfoType_Standard);
		{{{LoadingSpinner::P}}}StartAnimWithFade(This, _Frame_LoadingSpinner, _Message);
	} else {
		{{{LoadingSpinner::P}}}StopAnimWithFade(This, _Controls.LoadingSpinner_RetrieveInfo);
	}
}

K_State DisplayBrowser(K_State _State, K_Controls _Controls, Boolean _IsVisible) {
	declare K_State State = _State;

	// Disable ReportSystem when the Track Browser is visible
	if (_IsVisible) {
		State.CurrentReportData = ReportSystem::GetDataList();
		ReportSystem::RemoveUsingId("{{{C_Name}}}");
	} else if (State.CurrentPage != C_Page_Hidden) {
		ReportSystem::AddUsingId("{{{C_Name}}}");
		ReportSystem::SetDataList(State.CurrentReportData);
	}

	/* Browser settings */
	if (_IsVisible) {
		{{{TrackBrowser::P}}}ShowOnlyUserTracks(This, !Config::HasFeature(Config::C_Feature_DebugBrowserAllData));
		{{{TrackBrowser::P}}}SetMapTypeFilters(This, ["{{{Const::C_MapType_Race}}}"]);
	}

	{{{TrackBrowser::P}}}Display(This, _IsVisible, False);
	LockNavigation(_Controls, _IsVisible);

	return State;
}

K_State DisplayPage(K_State _State, K_Controls _Controls, Integer _Page) {
	declare K_State State = _State;

	/* Release existing tasks */
	State.Task_RegisterMap = Task::Destroy(State.Task_RegisterMap);
	State.Task_GetMap = Task::Destroy(State.Task_GetMap);

	/* Update requests */
	State.AllowJoinLinkUpdate = -1;
	if (Http::IsInitialized(State.GetWaitingTimeRequest)) {
		State.GetWaitingTimeRequest = Http::Destroy(State.GetWaitingTimeRequest);
	}
	if (Http::IsInitialized(State.PostJoinRequest)) {
		State.PostJoinRequest = Http::Destroy(State.PostJoinRequest);
	}
	if (Http::IsInitialized(State.PostRemoveSubmittedMapRequest)) {
		State.PostRemoveSubmittedMapRequest = Http::Destroy(State.PostRemoveSubmittedMapRequest);
	}

	if (_Page != State.CurrentPage) {

		/* Set the current page */
		State.CurrentPage = _Page;

		/* Reset all controls */
		_Controls.Label_SubTitle.Hide();
		_Controls.Frame_MainMenu.Hide();
		_Controls.Frame_MapConfirmation.Hide();
		_Controls.Frame_Maps.Hide();
		State = DisplayBrowser(State, _Controls, False);
		{{{Scroll::P}}}LockNavigation(_Controls.Scroll_Tracks, True);
		{{{Navigation::P}}}Lock(_Controls.Scroll_Tracks, True);
		{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_Confirm, False);
		{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_ROM, False);
		{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_SYM, False);
		{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_Admin, False);
		{{{Button::P}}}SetVisibilityAndNavigation(_Controls.Button_MyMaps, False);
		UpdateControllerInfo(False, Platform::IsFromFirstParty(System));
		DisplayInfo(_Controls.Label_Info, "", C_InfoType_Standard);
		DisplayLoading(_Controls, Null, "");

		/* Display the current page */
		switch (State.CurrentPage) {
			case C_Page_Hidden: SetMainMenuPage(State, _Controls, False);
			case C_Page_BrowseMap: State = DisplayBrowser(State, _Controls, True);
			case C_Page_MapConfirmation: State = SetMapConfirmationPage(State, _Controls);
			case C_Page_MyMaps: SetScrollPage(State, _Controls);
			case C_Page_Admin: SetScrollPage(State, _Controls);
			case C_Page_MainMenu: {
				State.Maps = [];
				State.CurrentMap = {{{CampaignStruct::P}}}K_Map {};
				{{{Scroll::P}}}SetElementsTotal(This, _Controls.Scroll_Tracks, 0);
				SetMainMenuPage(State, _Controls, True);
			}
		}
	}

	return State;
}

K_State Cancel(K_State _State, K_Controls _Controls) {
	declare K_State State = _State;

	switch (State.CurrentPage) {
		case C_Page_MyMaps: State = DisplayPage(State, _Controls, C_Page_MainMenu);
		case C_Page_Admin: State = DisplayPage(State, _Controls, C_Page_MainMenu);
		case C_Page_MapConfirmation: State = DisplayPage(State, _Controls, C_Page_MainMenu);
		default: {{{Router::P}}}PushParent(This);
	}

	return State;
}

K_State Select(K_State _State, K_Controls _Controls, CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-back": State = Cancel(State, _Controls);
		case "button-admin": {
			DisplayLoading(_Controls, _Controls.LoadingSpinner_RetrieveInfo, "{{{Text_FetchSubmittedMaps}}}");
			{{{Scroll::P}}}TriggerPagerUpdate(_Controls.Scroll_Tracks);
			State.NextPage = C_Page_Admin;
		}
		case "button-my-maps": {
			DisplayLoading(_Controls, _Controls.LoadingSpinner_RetrieveInfo, "{{{Text_FetchSubmittedMaps}}}");
			{{{Scroll::P}}}TriggerPagerUpdate(_Controls.Scroll_Tracks);
			State.NextPage = C_Page_MyMaps;
		}
		case "button-sym": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CreateAndUploadMap)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", ["{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_CreateAndUploadMap)]);
			} else {
				State = DisplayPage(State, _Controls, C_Page_BrowseMap);
			}
		}
		case "button-rom": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_AccessServerReview)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", ["{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_AccessServerReview)]);
			} else if (TitleControl.IsReady && !{{{LoadingSpinner::P}}}IsLoading(_Controls.LoadingSpinner_RetrieveInfo)) {
				DisplayLoading(_Controls, _Controls.LoadingSpinner_RetrieveInfo, "{{{Text_Joining}}}");
				State.PostJoinRequest = ClubAPI::PostJoinMapReviewActivity(State.MapReview.Activity.ClubId, State.MapReview.Activity.Id);
			}
		}
		case "button-confirm": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_CreateAndUploadMap)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", ["{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_CreateAndUploadMap)]);
			} else if (TitleControl.IsReady && !{{{LoadingSpinner::P}}}IsLoading(_Controls.LoadingSpinner_RetrieveInfo)) {
				if (State.CurrentMap.IsPlayable) {
					if (State.CurrentMap.DownloadUrl == "") { //< Do not register map already registered
						State.Task_RegisterMap = Task::DestroyAndCreate(State.Task_RegisterMap, DataFileMgr, DataFileMgr.Map_NadeoServices_Register(MainUser::GetMainUserId(), State.CurrentMap.Uid));	
						DisplayLoading(_Controls, _Controls.LoadingSpinner_RetrieveInfo, "{{{Text_Uploading}}}");
					} else if (State.CurrentMap.SubmitterAccountId == LocalUser.WebServicesUserId) {
						State.PostJoinRequest = Http::DestroyAndCreate(State.PostJoinRequest, ClubAPI::PostAddMapQueueMapReviewActivity(State.MapReview.Activity.ClubId, State.MapReview.Activity.Id, State.CurrentMap.Uid));
						DisplayLoading(_Controls, _Controls.LoadingSpinner_RetrieveInfo, "{{{Text_Joining}}}");
					} else {
						DisplayInfo(_Controls.Label_Info, "{{{Text_NotPlayable}}}", C_InfoType_Error);
					}
				}
			}
		}
		case "button-club": {
			if (State.MapReview.Activity.ClubId != {{{ClubStruct::P}}}C_ClubNullId) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubDetails}}}", {{{Router::P}}}GetCurrentParentPath(This));
				declare Club = {{{ClubStruct::P}}}K_Club {
					Id = State.MapReview.Activity.ClubId,
					Name = State.MapReview.ClubName
				};
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubDetails}}}", ["{{{RoutePaths::C_Query_Club}}}" => Club.tojson()]);
			}
		}
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare K_Controls Controls;
declare K_State State;

declare Text MapIdToCheck;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

Controls = K_Controls {
	Frame_Global = Frame_Global,
	Frame_MainMenu = (Frame_Global.GetFirstChild("frame-main-menu") as CMlFrame),
	Frame_MapConfirmation = (Frame_Global.GetFirstChild("frame-map-confirmation") as CMlFrame),
	Frame_Maps = (Frame_Global.GetFirstChild("frame-my-maps") as CMlFrame),
	Button_Admin = (Frame_Global.GetFirstChild("button-admin") as CMlFrame),
	Button_Back = (Frame_Global.GetFirstChild("button-back") as CMlFrame),
	Button_Club = (Frame_Global.GetFirstChild("button-club") as CMlFrame),
	Button_Confirm = (Frame_Global.GetFirstChild("button-confirm") as CMlFrame),
	Button_MyMaps = (Frame_Global.GetFirstChild("button-my-maps") as CMlFrame),
	Button_ROM = (Frame_Global.GetFirstChild("button-rom") as CMlFrame),
	Button_SYM = (Frame_Global.GetFirstChild("button-sym") as CMlFrame),
	Label_Info = (Frame_Global.GetFirstChild("label-info") as CMlLabel),
	Label_SYMGameMode = (Frame_Global.GetFirstChild("label-server-info-value-"^{{{C_ServerInfo_GameMode}}}) as CMlLabel),
	Label_SubTitle = (Frame_Global.GetFirstChild("label-subtitle") as CMlLabel),
	Label_Title = (Frame_Global.GetFirstChild("label-title") as CMlLabel),
	LoadingSpinner_RetrieveInfo = (Frame_Global.GetFirstChild("loadingspinner-retrieve-info") as CMlFrame),
	PopUpMultiChoice_Remove = (Frame_Global.GetFirstChild("popupmultichoice-remove") as CMlFrame),
	Scroll_Tracks = (Frame_Global.GetFirstChild("scroll-tracks") as CMlFrame)
};

State = K_State {
	AllowJoinLinkUpdate = -1,
	GetMapReviewActivityRequest = Http::GetEmptyRequest(),
	GetSubmittedMapsRequest = Http::GetEmptyRequest(),
	GetWaitingTimeRequest = Http::GetEmptyRequest(),
	PostJoinRequest = Http::GetEmptyRequest(),
	PostRemoveSubmittedMapRequest = Http::GetEmptyRequest()
};

/* Initialization */
State = DisplayPage(State, Controls, C_Page_Hidden);
***

***MainLoop***
***
if (PageIsVisible) {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case "{{{Router::C_Event_EnteringRoute}}}": {
				ReportSystem::AddUsingId("{{{C_Name}}}");
				declare Text[Text] Query = {{{Router::P}}}GetCurrentRouteQuery(This);

				State.Membership = {{{ClubStruct::P}}}K_Member {};
				State.Club = {{{ClubStruct::P}}}K_Club {};
				if (Query.existskey("{{{RoutePaths::C_Query_Activity}}}")) {
					declare {{{ClubStruct::P}}}K_Activity Activity;
					Activity.fromjson(Query["{{{RoutePaths::C_Query_Activity}}}"]);
					Controls.Label_Title.SetText(Activity.Name);
					State.Club = {{{ClubStore::P}}}GetUserCurrentClub();
					State.Membership = {{{ClubStore::P}}}GetUserCurrentClubMembership();
					State.GetMapReviewActivityRequest = Http::DestroyAndCreate(State.GetMapReviewActivityRequest, ClubAPI::GetMapReviewActivity(Activity.ClubId, Activity.Id));
					DisplayLoading(Controls, Controls.LoadingSpinner_RetrieveInfo, "{{{Text_FetchActivity}}}");
					DisplayClubName(State, Controls, False);
					if (Activity.Id != {{{ClubStruct::P}}}C_ActivityNullId) {
						ReportSystem::AddData(
							ReportStruct::C_ReportTarget_Activity,
							ReportStruct::LibStructuresReport_K_ReportData {
								Details = [Activity.Name],
								Ids = [TL::ToText(Activity.Id)],
								Contexts = [["From" => "Menu MapReviewActivity"]]
							}
						);
					}
					if (Activity.ClubId != {{{ClubStruct::P}}}C_ClubNullId) {
						ReportSystem::AddData(
							ReportStruct::C_ReportTarget_Club,
							ReportStruct::LibStructuresReport_K_ReportData {
								Details = [State.MapReview.ClubName],
								Ids = [TL::ToText(Activity.ClubId)],
								Contexts = [["From" => "Menu MapReviewActivity"]]
							}
						);
					}
				} else if (Query.existskey("{{{RoutePaths::C_Query_MapReviewActivity}}}")) {
					State.MapReview.fromjson(Query["{{{RoutePaths::C_Query_MapReviewActivity}}}"]);
					State.GetClubDetailRequest = Http::DestroyAndCreate(State.GetClubDetailRequest, ClubAPI::GetClub(State.MapReview.Activity.ClubId));
					Controls.Label_Title.SetText(State.MapReview.Activity.Name);
					DisplayLoading(Controls, Controls.LoadingSpinner_RetrieveInfo, "{{{Text_FetchActivity}}}");
					DisplayClubName(State, Controls, True);
					if (State.MapReview.Activity.Id != {{{ClubStruct::P}}}C_ActivityNullId) {
						ReportSystem::AddData(
							ReportStruct::C_ReportTarget_Activity,
							ReportStruct::LibStructuresReport_K_ReportData {
								Details = [State.MapReview.Activity.Name],
								Ids = [TL::ToText(State.MapReview.Activity.Id)],
								Contexts = [["From" => "Menu MapReviewActivity"]]
							}
						);
					}
					if (State.MapReview.Activity.ClubId != {{{ClubStruct::P}}}C_ClubNullId) {
						ReportSystem::AddData(
							ReportStruct::C_ReportTarget_Club,
							ReportStruct::LibStructuresReport_K_ReportData {
								Details = [State.MapReview.ClubName],
								Ids = [TL::ToText(State.MapReview.Activity.ClubId)],
								Contexts = [["From" => "Menu MapReviewActivity"]]
							}
						);
					}
				} else {
					{{{Router::P}}}PushParent(This);
				}
			}
		}
	}

	/* Report system events */
	foreach (Event in ReportSystem::GetPendingEvents()) {
		if (Event.LastUsingId == "{{{C_Name}}}") {
			switch (Event.Type) {
				case ReportSystem::C_EventType_Open: LockNavigation(Controls, True);
				case ReportSystem::C_EventType_Close: {
					LockNavigation(Controls, False);
					UpdateControllerInfo({{{Scroll::P}}}IsFocused(Controls.Scroll_Tracks), Platform::IsFromFirstParty(System));
				}
			}
		}
	}

	/* Navigation Events */
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Global}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel && State.CurrentPage != C_Page_BrowseMap) {
						State = Cancel(State, Controls);
					}
				}
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						if (!Event.IsActionAutoRepeat) State = Select(State, Controls, Event.To);
					} else {
						Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroup_Default}}}")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: State = Select(State, Controls, Event.To);
						case CMlScriptEvent::Type::MouseOver: Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* Browser Events */
	foreach (Event in {{{TrackBrowser::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{TrackBrowser::P}}}C_Event_Select: {
				State.CurrentMap = Event.Track;
				State = DisplayPage(State, Controls, C_Page_MapConfirmation);
			}
			case {{{TrackBrowser::P}}}C_Event_Exit: {
				State = DisplayPage(State, Controls, C_Page_MainMenu);
			}
		}
	}

	/* PopUpBackground events */
	foreach (Event in {{{PopUpBackground::P}}}GetPendingEvents(This)) {
		if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "frame-background" && {{{Navigation::P}}}GroupIsEnabled(This, "{{{C_NavGroup_Default}}}")) {
			switch (Event.Type) {
				case {{{PopUpBackground::P}}}C_EventType_Close: {{{Router::P}}}PushParent(This);
			}
		}
	}

	/* Scroll Events */
	foreach (Event in {{{Scroll::P}}}GetPendingEvents(This)) {
		if (Event.Scroll != Null && Event.Scroll.Id == Controls.Scroll_Tracks.Id) {
			switch (Event.Type) {
				case {{{Scroll::P}}}C_EventType_Select: {
					if (State.Maps.existskey(Event.ToKey)) {
						declare SubmittedMap = State.Maps[Event.ToKey];
						if (SubmittedMap.DownloadUrl != "") {
							PlayMap(State, SubmittedMap);
						} else {
							//L16N [MapReviewActivity] Message displayed when a track is no playable. %1 will be replaced by the name of the track.
							DisplayInfo(Controls.Label_Info, TL::Compose(_("Track '%1' is not playable."), FilterProfanities(SubmittedMap.Name)), C_InfoType_Error);
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_PagerUpdate: {
					switch (State.NextPage) {
						case C_Page_MyMaps: {
							State.GetSubmittedMapsRequest = ClubAPI::GetMapReviewActivityPlayerSubmittedMaps(
								State.MapReview.Activity.ClubId, 
								State.MapReview.Activity.Id, 
								Event.PagerOffset, 
								Event.PagerCount
							);
							State.GetSubmittedMapsRequest = Http::SetMetadata(State.GetSubmittedMapsRequest, C_Metadata_PagerOffset, ""^Event.PagerOffset);
						}
						case C_Page_Admin: {
							State.GetSubmittedMapsRequest = ClubAPI::GetMapReviewActivityAllSubmittedMaps(
								State.MapReview.Activity.ClubId, 
								State.MapReview.Activity.Id, 
								Event.PagerOffset, 
								Event.PagerCount
							);
							State.GetSubmittedMapsRequest = Http::SetMetadata(State.GetSubmittedMapsRequest, C_Metadata_PagerOffset, ""^Event.PagerOffset);
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_Update: {
					foreach (Key => Frame_Element in Event.ElementsVisible) {
						declare Integer MapKey for Frame_Element;
						MapKey = Key;
						if (State.Maps.existskey(Key)) {
							declare SubmittedMap = State.Maps[Key];
							ShowTrack(Frame_Element, SubmittedMap, State.CurrentPage);
						} else {
							ShowTrackLoading(Frame_Element);
						}
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						declare Integer MapKey for Frame_Element;
						MapKey = -1;
						Frame_Element.Hide();
					}

					if (State.CurrentPage == C_Page_Admin || State.CurrentPage == C_Page_MyMaps) {
						{{{Scroll::P}}}LockNavigation(Controls.Scroll_Tracks, Event.ElementsVisible.count <= 0);
						{{{Navigation::P}}}Lock(Controls.Scroll_Tracks, Event.ElementsVisible.count <= 0);
						DisplayLoading(Controls, Null, "");
						if (Event.ElementsVisible.count <= 0) {
							Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Controls.Button_Back);
							DisplayInfo(Controls.Label_Info, "{{{Text_NoMaps}}}", C_InfoType_Standard);
						}
					}
				}
				case {{{Scroll::P}}}C_EventType_Focus: {
					if (Event.From != Null) FocusTrack(Event.From, False);
					if (Event.To != Null && {{{Scroll::P}}}IsFocused(Event.Scroll)) FocusTrack(Event.To, True);
					if (Event.IsMouse && Event.To != Null && !{{{Scroll::P}}}IsFocused(Event.Scroll)) {
						Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Event.Scroll);
					}
					if (Event.ToKey >= 0 && State.Maps.existskey(Event.ToKey)) {
						declare Map = State.Maps[Event.ToKey];
						ReportSystem::AddData(
							ReportStruct::C_ReportTarget_Track,
							ReportStruct::LibStructuresReport_K_ReportData {
								Details = [Map.Name],
								Ids = [Map.Uid],
								Contexts = [["From" => "Menu MapReviewActivity"]]
							}
						);
					}
				}
				case {{{Scroll::P}}}C_EventType_ReachLimit: {
					if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Down || Event.NavAction == CMlScriptEvent::EMenuNavAction::Left) {
						Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroup_Default}}}"), Controls.Button_Back);
					}
				}
				case {{{Scroll::P}}}C_EventType_NavAction: {
					if (State.Maps.existskey(Event.ToKey)) {
						declare SubmittedMap = State.Maps[Event.ToKey];
						switch (Event.NavAction) {
							case CMlScriptEvent::EMenuNavAction::Action1: {
								State = DeleteMap(State, Controls, SubmittedMap.Uid);
							}
							case CMlScriptEvent::EMenuNavAction::Action2: {
								if (!Platform::IsFromFirstParty(System)) {
									declare Text Url = SubmittedMap.DownloadUrl;
									if (Http.IsValidUrl(Url)) {
										OpenLink(Url, CMlScript::LinkType::ExternalBrowser);
									}
								}
							}
						}
					}
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in {{{PopUpMultiChoice::P}}}GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == Controls.PopUpMultiChoice_Remove.Id) {
			switch (Event.Type) {
				case {{{PopUpMultiChoice::P}}}C_EventType_Display: {
					LockNavigation(Controls, Event.PopUpMultiChoice.Visible);
					if (!Event.PopUpMultiChoice.Visible) {
						State.MapUidToDelete = "";
					}

					// Disable ReportSystem when PopUpMultichoice visible
					if (Event.PopUpMultiChoice.Visible) {
						State.CurrentReportData = ReportSystem::GetDataList();
						ReportSystem::RemoveUsingId("{{{C_Name}}}");
					} else {
						ReportSystem::AddUsingId("{{{C_Name}}}");
						ReportSystem::SetDataList(State.CurrentReportData);
						UpdateControllerInfo({{{Scroll::P}}}IsFocused(Controls.Scroll_Tracks), Platform::IsFromFirstParty(System));
					}
				}
				case {{{PopUpMultiChoice::P}}}C_EventType_Select: {
					switch (Event.SelectedIndex) {
						case {{{C_Choice_Remove}}}: {
							if (State.MapUidToDelete != "") {
								DisplayLoading(Controls, Controls.LoadingSpinner_RetrieveInfo, "{{{Text_FetchSubmittedMaps}}}");
								State.PostRemoveSubmittedMapRequest = Http::DestroyAndCreate(
									State.PostRemoveSubmittedMapRequest, 
									ClubAPI::PostRemoveSubmittedMapRequest(State.MapReview.Activity.ClubId, State.MapReview.Activity.Id, State.MapUidToDelete)
								);
							}
						}
					}
					{{{PopUpMultiChoice::P}}}Close(This, Controls.PopUpMultiChoice_Remove);
				}
			}
		}
	}

	/* Other Events */
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::MouseOver: {
				if (!Controls.PopUpMultiChoice_Remove.Visible && Event.Control.HasClass("{{{C_Class_MapButton}}}")) {
					AnimMgr.Add(Event.Control, "<anim scale=\"1.2\" opacity=\"1.\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			}
			case CMlScriptEvent::Type::MouseOut: {
				if (Event.Control.HasClass("{{{C_Class_MapButton}}}")) {
					AnimMgr.Add(Event.Control, "<anim scale=\"1.\" opacity=\"0.7\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			}
			case CMlScriptEvent::Type::MouseClick: {
				if (!Controls.PopUpMultiChoice_Remove.Visible && Event.Control.HasClass("{{{C_Class_MapButton}}}")) {
					declare Integer MapKey for Event.Control.Parent;
					if (State.Maps.existskey(MapKey)) {
						declare SubmittedMap = State.Maps[MapKey];
						switch (Event.ControlId) {
							case "button-delete": State = DeleteMap(State, Controls, SubmittedMap.Uid);
							case "button-download": {
								declare Text Url = SubmittedMap.DownloadUrl;
								if (Http.IsValidUrl(Url)) {
									OpenLink(Url, CMlScript::LinkType::ExternalBrowser);
								}
							}
						}
					}
				}
			}
		}
	}

	/* Get club details */
	if (Http::IsInitialized(State.GetClubDetailRequest)) {
		State.GetClubDetailRequest = Http::Update(State.GetClubDetailRequest);
		if (!Http::IsRunning(State.GetClubDetailRequest)) {
			if (Http::IsSuccess(State.GetClubDetailRequest)) {
				State.Club = ClubAPI::GetResponseFromGetClub(State.GetClubDetailRequest);
				State.GetClubMembershipRequest = Http::DestroyAndCreate(State.GetClubMembershipRequest, ClubAPI::GetClubMemberWithId(State.Club.Id, LocalUser.WebServicesUserId));
			} else {
				//L16N %1 will be replaced by an error, e.g. "(Error code: 500)"
				DisplayInfo(Controls.Label_Info, TL::Compose(_("Error while fetching the club info, please try again. (Error code: %1)"), ""^Http::GetStatusCode(State.GetMapReviewActivityRequest)), C_InfoType_Error);
				DisplayLoading(Controls, Null, "");
			}
			State.GetClubDetailRequest = Http::Destroy(State.GetClubDetailRequest);
		}
	}

	/* Get club membership */
	if (Http::IsInitialized(State.GetClubMembershipRequest)) {
		State.GetClubMembershipRequest = Http::Update(State.GetClubMembershipRequest);
		if (!Http::IsRunning(State.GetClubMembershipRequest)) {
			if (Http::IsSuccess(State.GetClubMembershipRequest)) {
				State.Membership = ClubAPI::GetResponseFromGetClubMemberWithId(State.GetClubMembershipRequest);
			}
			State.GetClubMembershipRequest = Http::Destroy(State.GetClubMembershipRequest);
			State = DisplayPage(State, Controls, C_Page_MainMenu);
		}
	}

	/* Retrieve the map review activity */
	if (Http::IsInitialized(State.GetMapReviewActivityRequest)) {
		State.GetMapReviewActivityRequest = Http::Update(State.GetMapReviewActivityRequest);
		if (!Http::IsRunning(State.GetMapReviewActivityRequest)) {
			if (Http::IsSuccess(State.GetMapReviewActivityRequest)) {
				State.MapReview = ClubAPI::GetResponseFromGetMapReviewActivity(State.GetMapReviewActivityRequest);
				SetMainMenuPage(State, Controls, True);
				DisplayLoading(Controls, Null, "");
			} else {
				//L16N %1 will be replaced by an error, e.g. "(Error code: 500)"
				DisplayInfo(Controls.Label_Info, TL::Compose(_("Error while fetching the activity info, please try again. (Error code: %1)"), ""^Http::GetStatusCode(State.GetMapReviewActivityRequest)), C_InfoType_Error);
				DisplayLoading(Controls, Null, "");
			}
			State.GetMapReviewActivityRequest = Http::Destroy(State.GetMapReviewActivityRequest);
		}
	}

	/* Retrieve submitted maps for the map review activity */
	if (Http::IsInitialized(State.GetSubmittedMapsRequest)) {
		State.GetSubmittedMapsRequest = Http::Update(State.GetSubmittedMapsRequest);
		if (!Http::IsRunning(State.GetSubmittedMapsRequest)) {
			if (Http::IsSuccess(State.GetSubmittedMapsRequest)) {
				declare SubmittedMaps = ClubAPI::GetResponseFromGetMapReviewActivitySubmittedMaps(State.GetSubmittedMapsRequest);
				declare Integer Offset = TL::ToInteger(Http::GetMetadata(State.GetSubmittedMapsRequest, C_Metadata_PagerOffset));

				State.Maps = [];
				State.SubmittedMapsTotal = SubmittedMaps.ItemCount;
				foreach (Key => Map in SubmittedMaps.MapList) {
					declare MapReviewAPI::K_SubmittedMap SubmittedMap = Map;
					SubmittedMap.AuthorDisplayName = {{{UserStore::P}}}GetUserMgrPlayerName(SubmittedMap.AuthorAccountId);
					State.Maps[Offset + Key] = SubmittedMap;
				}

				State = DisplayPage(State, Controls, State.NextPage);
				{{{Scroll::P}}}SetElementsTotal(This, Controls.Scroll_Tracks, State.SubmittedMapsTotal);
			} else {
				//L16N %1 will be replaced by an error, e.g. "(Error code: 500)"
				DisplayInfo(Controls.Label_Info, TL::Compose(_("Error while fetching submitted tracks for the activity, please try again. (Error code: %1)"), ""^Http::GetStatusCode(State.GetSubmittedMapsRequest)), C_InfoType_Error);
				DisplayLoading(Controls, Null, "");
			}
			State.GetSubmittedMapsRequest = Http::Destroy(State.GetSubmittedMapsRequest);
		}
	}

	/* Remove submitted map */
	if (Http::IsInitialized(State.PostRemoveSubmittedMapRequest)) {
		State.PostRemoveSubmittedMapRequest = Http::Update(State.PostRemoveSubmittedMapRequest);
		if (!Http::IsRunning(State.PostRemoveSubmittedMapRequest)) {
			if (Http::IsSuccess(State.PostRemoveSubmittedMapRequest)) {
				{{{Scroll::P}}}TriggerPagerUpdate(Controls.Scroll_Tracks);
			} else {
				//L16N %1 will be replaced by an error, e.g. "(Error code: 500)"
				DisplayInfo(Controls.Label_Info, TL::Compose(_("Error while removing the submitted track, please try again. (Error code: %1)"), ""^Http::GetStatusCode(State.PostRemoveSubmittedMapRequest)), C_InfoType_Error);
				DisplayLoading(Controls, Null, "");
			}
			State.PostRemoveSubmittedMapRequest = Http::Destroy(State.PostRemoveSubmittedMapRequest);
		}
	}

	/* Retrieve the map review activity waiting time */
	if (Http::IsInitialized(State.GetWaitingTimeRequest)) {
		State.GetWaitingTimeRequest = Http::Update(State.GetWaitingTimeRequest);
		if (!Http::IsRunning(State.GetWaitingTimeRequest)) {
			if (Http::IsSuccess(State.GetWaitingTimeRequest)) {
				State.WaitTime = ClubAPI::GetResponseFromGetMapReviewActivityWaitingTime(State.GetWaitingTimeRequest);
			} else {
				State.WaitTime = -1;
			}
			State.GetWaitingTimeRequest = Http::Destroy(State.GetWaitingTimeRequest);
			UpdateMaxWaitTimeLabels(State, Controls);
		}
	}

	/* Register map task */
	if (Task::IsInitialized(State.Task_RegisterMap)) {
		State.Task_RegisterMap = Task::Update(State.Task_RegisterMap);
		if (!Task::IsRunning(State.Task_RegisterMap)) {
			declare CTaskResult_NSMap SourceTask = Task::GetSourceTask_NSMap(State.Task_RegisterMap);
			if (Task::IsSuccess(State.Task_RegisterMap) && SourceTask != Null) {
				MapIdToCheck = SourceTask.Map.Id;
				State.Task_GetMap = Task::DestroyAndCreate(State.Task_GetMap, DataFileMgr, DataFileMgr.Map_NadeoServices_Get(MainUser::GetMainUserId(), MapIdToCheck));
			} else {
				DisplayInfo(Controls.Label_Info, TL::Compose("{{{Text_UploadError}}}", Task::GetSourceTaskError(State.Task_RegisterMap).Code), C_InfoType_Error);
				DisplayLoading(Controls, Null, "");
			}
			State.Task_RegisterMap = Task::Destroy(State.Task_RegisterMap);
		}
	}

	/* Get map task */
	if (Task::IsInitialized(State.Task_GetMap)) {
		State.Task_GetMap = Task::Update(State.Task_GetMap);
		if (!Task::IsRunning(State.Task_GetMap)) {
			declare CTaskResult_NSMap SourceTask = Task::GetSourceTask_NSMap(State.Task_GetMap);
			if (Task::IsSuccess(State.Task_GetMap) && SourceTask != Null && MapIdToCheck == SourceTask.Map.Id) {
				State.PostJoinRequest = Http::DestroyAndCreate(State.PostJoinRequest, ClubAPI::PostAddMapQueueMapReviewActivity(State.MapReview.Activity.ClubId, State.MapReview.Activity.Id, SourceTask.Map.Uid));
				DisplayLoading(Controls, Controls.LoadingSpinner_RetrieveInfo, "{{{Text_Joining}}}");
			} else {
				DisplayInfo(Controls.Label_Info, TL::Compose("{{{Text_UploadError}}}", Task::GetSourceTaskError(State.Task_GetMap).Code), C_InfoType_Error);
				DisplayLoading(Controls, Null, "");
			}
			State.Task_GetMap = Task::Destroy(State.Task_GetMap);
		}
	}
	
	/* Get JoinLink Request */
	if (Http::IsInitialized(State.PostJoinRequest)) {
		State.PostJoinRequest = Http::Update(State.PostJoinRequest);
		if (!Http::IsRunning(State.PostJoinRequest)) {
			if (Http::IsSuccess(State.PostJoinRequest)) {
				declare Response = ClubAPI::GetResponseFromPostJoinMapReviewActivity(State.PostJoinRequest);
				if (Response.SubmissionWaitTimer != 0) {
					declare Integer WaitTime = ML::Max(1, ML::CeilingInteger((Response.SubmissionWaitTimer-1)/60.));
					declare Text Text_Minute = "{{{Text_MinutePlural_Short}}}";
					if (WaitTime <= 1) Text_Minute = "{{{Text_MinuteSingular_Short}}}";
					//L16N [MapReviewActivity] Message displayed when the player cannot upload a track due to submission limitation.
					DisplayInfo(Controls.Label_Info, TL::Compose(_("The track submission limitation is enabled on this activity. Next upload available in %1 %2."), TL::ToText(WaitTime), Text_Minute), C_InfoType_Standard);
					DisplayLoading(Controls, Null, "");
				} else if (Response.JoinLink != "") {
					State.PlaySessionPrivilegeCheck = K_PlaySessionPrivilegeCheck {
						PrivilegeCheck = Privileges::Check_DestroyAndCreate(
							State.PlaySessionPrivilegeCheck.PrivilegeCheck,
							PrivilegeMgr,
							MainUser::GetMainUserId(),
							CPrivilegeMgr::EPrivilege::PlayMultiplayerSessionWithUGC
						),
						JoinLink = Response.JoinLink,
						Page = C_Page_MainMenu
					};
				} else if (Response.IsStarting || (!Response.IsStarting && Response.NoMap && State.CurrentMap.Uid != "")) {
					State.AllowJoinLinkUpdate = Now + C_DelayBetweenRequests;
					DisplayLoading(Controls, Controls.LoadingSpinner_RetrieveInfo, "{{{Text_Starting}}}");
				} else if (!Response.IsStarting && Response.NoMap) {
					//L16N [MapReviewActivity] Message displayed when there is no track on a track review server.
					DisplayInfo(Controls.Label_Info, _("There is no track uploaded for this activity, please add a track beforehand."), C_InfoType_Standard);
					DisplayLoading(Controls, Null, "");
				} else {
					//L16N [MapReviewActivity] Message displayed when there is no joinlink to join a server.
					DisplayInfo(Controls.Label_Info, _("Servers are offline or in maintenance, please try again later."), C_InfoType_Standard);
					DisplayLoading(Controls, Null, "");
				}
			} else {
				//L16N [MapReview] Message displayed when the join request fails
				DisplayInfo(Controls.Label_Info, TL::Compose(_("Failed to join the track review server, please try again. (Error code: %1)"), ""^Http::GetStatusCode(State.PostJoinRequest)), C_InfoType_Error);
				DisplayLoading(Controls, Null, "");
			}
			if (State.AllowJoinLinkUpdate == -1) State.PostJoinRequest = Http::Destroy(State.PostJoinRequest);
		}
	}

	/* Update JoinLink Request */
	if (State.AllowJoinLinkUpdate >= 0 && Now > State.AllowJoinLinkUpdate) {
		State.AllowJoinLinkUpdate = -1;
		State.PostJoinRequest = Http::Retry(State.PostJoinRequest);
	}

	// Check play session privilege
	if (!Privileges::Check_IsComplete(State.PlaySessionPrivilegeCheck.PrivilegeCheck)) {
		State.PlaySessionPrivilegeCheck.PrivilegeCheck = Privileges::Check_Update(State.PlaySessionPrivilegeCheck.PrivilegeCheck);
		if (Privileges::Check_IsComplete(State.PlaySessionPrivilegeCheck.PrivilegeCheck)) {
			State.PlaySessionPrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlaySessionPrivilegeCheck.PrivilegeCheck);
			if (Privileges::Check_HasPrivilege(State.PlaySessionPrivilegeCheck.PrivilegeCheck)) {
				DisplayLoading(Controls, Null, "");
				SendCustomEvent("{{{Const::C_Event_UpdateLoadingScreen}}}", [State.MapReview.Activity.Name]);
				TitleControl::OpenLinkAndWait(This, TitleControl, State.PlaySessionPrivilegeCheck.JoinLink, CMlScript::LinkType::ManialinkBrowser);
			}
			State = DisplayPage(State, Controls, State.PlaySessionPrivilegeCheck.Page);
		}
	}
} else {
	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_LeavingRoute: {
				ReportSystem::RemoveUsingId("{{{C_Name}}}");
				ReportSystem::ResetDataList();
				State = DisplayPage(State, Controls, C_Page_Hidden);
				State.PlaySessionPrivilegeCheck.PrivilegeCheck = Privileges::Check_Destroy(State.PlaySessionPrivilegeCheck.PrivilegeCheck);
			}
		}
	}
}
***
""",
[
	Button::ComponentV2(),
	CampaignStruct::Component(), 
	ClubStore::ComponentV2(),
	ClubStruct::Component(),
	ControlBlockList::ComponentV2(),
	ExpendableButton::ComponentV2(),
	LoadingSpinner::ComponentV2(),
	MenuSounds::ComponentV2(),
	Navigation::ComponentV2(),
	PlayerName::ComponentV2(),
	PopUpBackground::ComponentV2(),
	PopUpMultiChoice::ComponentV2(),
	Router::ComponentV2(),
	Scroll::ComponentV2(),
	TrackBrowser::ComponentV2(),
	Transition::ComponentV2(),
	UserStore::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}