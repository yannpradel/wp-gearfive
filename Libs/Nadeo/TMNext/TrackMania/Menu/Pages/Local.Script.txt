/** 
 *	Page: Local
 */
#Const Version		"2023-05-22"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/Pages/Local.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Transition.Script.txt" as Transition
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Router_ML.Script.txt" as Router
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/RoutePaths.Script.txt" as RoutePaths
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore_ML.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MenuSounds.Script.txt" as MenuSounds
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/CommonLibs/Common/Platform.Script.txt" as Platform
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "Page_Local"
#Const C_NavGroupName "navgroup-page-local"

#Const C_Index_LocalMulti 0
#Const C_Index_PlayAMap 1
#Const C_Index_AgainstReplay 2
#Const C_Index_LocalNetwork 3
#Const C_Index_SplitScreen 4
#Const C_Index_HotSeat 5

#Const C_ImagePath "file://Media/Manialinks/Nadeo/TMNext/Menus/Local/"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	declare Boolean PlaformIsFromFirstParty = Platform::IsFromFirstParty(System);

	declare Text Text_Back = _("Back");

	declare ButtonTexts = [
		//L16N [Local menu] Multiplayers mode on the same PC. This text will be displayed on 3 narrow lines maximum. Try to avoid words longer than 12 characters. You can use a dash (-) to split longer words.
		C_Index_LocalMulti => _("Local multiplayer"),
		//L16N [Local menu] Select and play one track. This text will be displayed on 3 narrow lines maximum. Try to avoid words longer than 12 characters. You can use a dash (-) to split longer words.
		C_Index_PlayAMap => _("Play a track"),
		//L16N [Local menu] Select a replay (ghost) and play against it. This text will be displayed on 3 narrow lines maximum. Try to avoid words longer than 12 characters. You can use a dash (-) to split longer words.
		C_Index_AgainstReplay => _("Against replay"),
		//L16N [Local menu] Join or create a server on the local network. This text will be displayed on 3 narrow lines maximum. Try to avoid words longer than 12 characters. You can use a dash (-) to split longer words.
		C_Index_LocalNetwork => _("Local network"),
		//L16N [Local menu] Local multiplayer game where the screen is divided in sub screens (one for each player). This text will be displayed on 3 narrow lines maximum. Try to avoid words longer than 12 characters. You can use a dash (-) to split longer words.
		C_Index_SplitScreen => _("Splitscreen"),
		//L16N [Local menu] Local multiplayer game where players race one after another. This text will be displayed on 3 narrow lines maximum. Try to avoid words longer than 12 characters. You can use a dash (-) to split longer words.
		C_Index_HotSeat => _("Hotseat")
	];

	declare ButtonImages = [
		C_Index_LocalMulti => C_ImagePath^"Menu_Play_Local_LocalMultiplayer.dds",
		C_Index_PlayAMap => C_ImagePath^"Menu_Play_Local_PlayAMap.dds",
		C_Index_AgainstReplay => C_ImagePath^"Menu_Play_Local_AgainstReplay.dds",
		C_Index_LocalNetwork => C_ImagePath^"Menu_Play_Local_LocalNetwork.dds",
		C_Index_SplitScreen => C_ImagePath^"Menu_Play_Local_Splitscreen.dds",
		C_Index_HotSeat => C_ImagePath^"Menu_Play_Local_Hotseat.dds"
	];

	declare Vec2 Size_VerticalButton = MLHelpers::KeepRatioFromY(1004., 1152., 95.8);

	declare Vec2 Pos_FirstButton = <-99., -7.65>;
	declare Vec2 Pos_SecondButton = <-29., -7.65>;
	declare Vec2 Pos_ThirdButton = <41., -7.65>;
	declare Vec2 Pos_FourthButton = <111., -7.65>;

	return MV::Create(
C_Name, 3,
"""
<frame id="frame-global">
	<frame id="frame-buttons">
		<frameinstance 
			id="button-play-a-map" pos="{{{Pos_FirstButton.X}}} {{{Pos_FirstButton.Y}}}"
			modelid="{{{Button::C_Name}}}"
			class="{{{Navigation::C_Class}}}"
			data-text="{{{ButtonTexts[C_Index_PlayAMap]}}}"
			data-size="{{{Size_VerticalButton.X}}} {{{Size_VerticalButton.Y}}}"
			data-labelsize="{{{Size_VerticalButton.X*0.6}}} 10"
			data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
			data-image="{{{ButtonImages[C_Index_PlayAMap]}}}"
			data-gradientimage="{{{Const::C_ImageUrl_Common_VerticalButton_Gradient}}}"
			data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
			data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
			data-contourimage="{{{Const::C_ImageUrl_Common_VerticalButton_Contour}}}"
			data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
			data-contouropacityunfocus=".0"
			data-isblink="1"
			data-textsize="5"
			data-textitalicslope="0.2"
			data-textopacityunfocus="0.8"
			data-maxline="3" data-autonewline="1"
			data-texthalign="left" data-textvalign="top"
			data-textxpos="0.26" data-textypos="-0.063"
			data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
			data-valign="center" data-halign="center"
			data-tilthitbox="10"
			data-nav-inputs="select;cancel;right;down"
			data-nav-targets="_;_;button-local-multi;button-back"
			data-nav-group="{{{C_NavGroupName}}}"
			data-nav-zone="{{{Button::C_NavZone}}}"
		/>

		<frame id="frame-pc-only" hidden="{{{PlaformIsFromFirstParty}}}">
			<frameinstance 
				id="button-local-multi" pos="{{{Pos_SecondButton.X}}} {{{Pos_SecondButton.Y}}}"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{ButtonTexts[C_Index_LocalMulti]}}}"
				data-size="{{{Size_VerticalButton.X}}} {{{Size_VerticalButton.Y}}}"
				data-labelsize="{{{Size_VerticalButton.X*0.6}}} 10"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-image="{{{ButtonImages[C_Index_LocalMulti]}}}"
				data-gradientimage="{{{Const::C_ImageUrl_Common_VerticalButton_Gradient}}}"
				data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
				data-contourimage="{{{Const::C_ImageUrl_Common_VerticalButton_Contour}}}"
				data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
				data-contouropacityunfocus=".0"
				data-isblink="1"
				data-textsize="5"
				data-textitalicslope="0.2"
				data-textopacityunfocus="0.8"
				data-maxline="3" data-autonewline="1"
				data-texthalign="left" data-textvalign="top"
				data-textxpos="0.26" data-textypos="-0.063"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-valign="center" data-halign="center"
				data-tilthitbox="10"
				data-nav-inputs="select;cancel;left;right;down"
				data-nav-targets="_;_;button-play-a-map;button-against-replay;button-back"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-nav-locked="{{{PlaformIsFromFirstParty}}}"
				hidden="{{{PlaformIsFromFirstParty}}}"
			/>

			<frameinstance 
				id="button-against-replay" pos="{{{Pos_ThirdButton.X}}} {{{Pos_ThirdButton.Y}}}"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{ButtonTexts[C_Index_AgainstReplay]}}}"
				data-size="{{{Size_VerticalButton.X}}} {{{Size_VerticalButton.Y}}}"
				data-labelsize="{{{Size_VerticalButton.X*0.6}}} 10"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-image="{{{ButtonImages[C_Index_AgainstReplay]}}}"
				data-gradientimage="{{{Const::C_ImageUrl_Common_VerticalButton_Gradient}}}"
				data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
				data-contourimage="{{{Const::C_ImageUrl_Common_VerticalButton_Contour}}}"
				data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
				data-contouropacityunfocus=".0"
				data-isblink="1"
				data-textsize="5"
				data-textitalicslope="0.2"
				data-textopacityunfocus="0.8"
				data-maxline="3" data-autonewline="1"
				data-texthalign="left" data-textvalign="top"
				data-textxpos="0.26" data-textypos="-0.063"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-valign="center" data-halign="center"
				data-tilthitbox="10"
				data-nav-inputs="select;cancel;left;right;down"
				data-nav-targets="_;_;button-local-multi;button-local-network;button-back"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-nav-locked="{{{PlaformIsFromFirstParty}}}"
				hidden="{{{PlaformIsFromFirstParty}}}"
			/>

			<frameinstance 
				id="button-local-network" pos="{{{Pos_FourthButton.X}}} {{{Pos_FourthButton.Y}}}"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{ButtonTexts[C_Index_LocalNetwork]}}}"
				data-size="{{{Size_VerticalButton.X}}} {{{Size_VerticalButton.Y}}}"
				data-labelsize="{{{Size_VerticalButton.X*0.6}}} 10"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-image="{{{ButtonImages[C_Index_LocalNetwork]}}}"
				data-gradientimage="{{{Const::C_ImageUrl_Common_VerticalButton_Gradient}}}"
				data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
				data-contourimage="{{{Const::C_ImageUrl_Common_VerticalButton_Contour}}}"
				data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
				data-contouropacityunfocus=".0"
				data-isblink="1"
				data-textsize="5"
				data-textitalicslope="0.2"
				data-textopacityunfocus="0.8"
				data-maxline="3" data-autonewline="1"
				data-texthalign="left" data-textvalign="top"
				data-textxpos="0.26" data-textypos="-0.063"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-valign="center" data-halign="center"
				data-tilthitbox="10"
				data-nav-inputs="select;cancel;left;down"
				data-nav-targets="_;_;button-against-replay;button-back"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-nav-locked="{{{PlaformIsFromFirstParty}}}"
				hidden="{{{PlaformIsFromFirstParty}}}"
			/>
		</frame>

		<frame id="frame-console-only" hidden="{{{!PlaformIsFromFirstParty}}}">
			<frameinstance 
				id="button-splitscreen" pos="{{{Pos_SecondButton.X}}} {{{Pos_SecondButton.Y}}}"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{ButtonTexts[C_Index_SplitScreen]}}}"
				data-size="{{{Size_VerticalButton.X}}} {{{Size_VerticalButton.Y}}}"
				data-labelsize="{{{Size_VerticalButton.X*0.6}}} 10"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-image="{{{ButtonImages[C_Index_SplitScreen]}}}"
				data-gradientimage="{{{Const::C_ImageUrl_Common_VerticalButton_Gradient}}}"
				data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
				data-contourimage="{{{Const::C_ImageUrl_Common_VerticalButton_Contour}}}"
				data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
				data-contouropacityunfocus=".0"
				data-isblink="1"
				data-textsize="5"
				data-textitalicslope="0.2"
				data-textopacityunfocus="0.8"
				data-maxline="3" data-autonewline="1"
				data-texthalign="left" data-textvalign="top"
				data-textxpos="0.26" data-textypos="-0.063"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-valign="center" data-halign="center"
				data-tilthitbox="10"
				data-nav-inputs="select;cancel;left;right;down"
				data-nav-targets="_;_;button-play-a-map;button-hotseat;button-back"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-nav-locked="{{{!PlaformIsFromFirstParty}}}"
				hidden="{{{!PlaformIsFromFirstParty}}}"
			/>

			<frameinstance 
				id="button-hotseat" pos="{{{Pos_ThirdButton.X}}} {{{Pos_ThirdButton.Y}}}"
				modelid="{{{Button::C_Name}}}"
				class="{{{Navigation::C_Class}}}"
				data-text="{{{ButtonTexts[C_Index_HotSeat]}}}"
				data-size="{{{Size_VerticalButton.X}}} {{{Size_VerticalButton.Y}}}"
				data-labelsize="{{{Size_VerticalButton.X*0.6}}} 10"
				data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
				data-image="{{{ButtonImages[C_Index_HotSeat]}}}"
				data-gradientimage="{{{Const::C_ImageUrl_Common_VerticalButton_Gradient}}}"
				data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
				data-gradientopacityunfocus="0.6" data-gradientopacityfocus="0."
				data-contourimage="{{{Const::C_ImageUrl_Common_VerticalButton_Contour}}}"
				data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
				data-contouropacityunfocus=".0"
				data-isblink="1"
				data-textsize="5"
				data-textitalicslope="0.2"
				data-textopacityunfocus="0.8"
				data-maxline="3" data-autonewline="1"
				data-texthalign="left" data-textvalign="top"
				data-textxpos="0.26" data-textypos="-0.063"
				data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
				data-valign="center" data-halign="center"
				data-tilthitbox="10"
				data-nav-inputs="select;cancel;left;down"
				data-nav-targets="_;_;button-splitscreen;button-back"
				data-nav-group="{{{C_NavGroupName}}}"
				data-nav-zone="{{{Button::C_NavZone}}}"
				data-nav-locked="{{{!PlaformIsFromFirstParty}}}"
				hidden="{{{!PlaformIsFromFirstParty}}}"
			/>
		</frame>
	</frame>

	<frameinstance
		id="button-back" pos="-151.5 -73" z-index="1"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;up"
		data-nav-targets="_;_;button-play-a-map"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>
</frame>
""",
"""
#Include "TextLib" as TL
#Include "Libs/Nadeo/CommonLibs/Common/ReportContext.Script.txt" as ReportContext
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Overlays/ControllerInfo_ML.Script.txt" as ControllerInfo

#Const C_Index_PlayAMap {{{dump(C_Index_PlayAMap)}}}
#Const C_Index_AgainstReplay {{{dump(C_Index_AgainstReplay)}}}
#Const C_Index_LocalMulti {{{dump(C_Index_LocalMulti)}}}
#Const C_Index_LocalNetwork {{{dump(C_Index_LocalNetwork)}}}

#Const C_PlaformIsFromFirstParty {{{dump(PlaformIsFromFirstParty)}}}
""",
"""
Void Focus(CMlControl _From, CMlControl _To) {
	if ({{{Transition::P}}}IsInTransition(This)) return;
	
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}
	
	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void Select(CMlControl _Control) {
	if (_Control == Null || {{{Transition::P}}}IsInTransition(This)) return;

	switch (_Control.ControlId) {
		case "button-local-multi": {
			{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_LocalMulti}}}");
		}
		case "button-play-a-map": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayLocalMap)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayLocalMap)
				]);
			} else {
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_PlayMap}}}");
			}
		}
		case "button-against-replay": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayAgainstReplay)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayAgainstReplay)
				]);
			} else {
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_AgainstReplay}}}");
			}
		}
		case "button-local-network": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_FindLocalServer)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_FindLocalServer)
				]);
			} else {
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_LocalServer}}}");
			}
		}
		case "button-splitscreen": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlaySplitscreen)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlaySplitscreen)
				]);
			} else {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_LocalMultiSettings}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_LocalMultiSettings}}}", ["{{{RoutePaths::C_Query_LocalMultiType}}}" => "{{{Const::C_LocalMultiType_SplitScreen}}}"]);
			}
		}
		case "button-hotseat": {
			if (!{{{UserStore::P}}}HasGamePermission(PrivilegeMgr, RBAC::C_GamePermission_PlayHotSeat)) {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_ClubEditionInfo}}}", [
					"{{{RoutePaths::C_Query_Message}}}" => RBAC::GetGamePermissionMessage(RBAC::C_GamePermissionMessage_PlayHotSeat)
				]);
			} else {
				{{{Router::P}}}SetParentPath(This, "{{{RoutePaths::C_Path_LocalMultiSettings}}}", {{{Router::P}}}GetCurrentRoutePath(This));
				{{{Router::P}}}Push(This, "{{{RoutePaths::C_Path_LocalMultiSettings}}}", ["{{{RoutePaths::C_Query_LocalMultiType}}}" => "{{{Const::C_LocalMultiType_HotSeat}}}"]);
			}
		}
		case "button-back": {{{Router::P}}}PushParent(This);
	}
}

Void InitButtons(CMlFrame _Button_PlayMap, CMlFrame _Button_SplitScreen) {
	if (C_PlaformIsFromFirstParty) {		
		{{{Navigation::P}}}ChangeControlTarget(This, _Button_PlayMap, "right", _Button_SplitScreen.ControlId);
	}
}

***MainInit***
***
declare CMlFrame Frame_Global;
declare CMlFrame Frame_Buttons;
declare CMlFrame Button_Back;
declare CMlFrame Button_PlayMap;
declare CMlFrame Button_SplitScreen;
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Buttons <=> (Frame_Global.GetFirstChild("frame-buttons") as CMlFrame);
Button_PlayMap <=> (Frame_Buttons.GetFirstChild("button-play-a-map") as CMlFrame);
Button_SplitScreen <=> (Frame_Buttons.GetFirstChild("button-splitscreen") as CMlFrame);
Button_Back <=> (Frame_Global.GetFirstChild("button-back") as CMlFrame);

InitButtons(Button_PlayMap, Button_SplitScreen);
Focus({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"), Button_PlayMap);
***

***MainLoop***
***
if ({{{Router::P}}}PageIsRunning(This, "{{{RoutePaths::C_Path_Local}}}")) {
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						Select(Event.To);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						{{{Router::P}}}PushParent(This);
					} else {
						Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						Select(Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Router::P}}}C_Event_EnteringRoute: {
				if ({{{UserStore::P}}}IsOfflineMode()) {
					ControllerInfo::SetButtons(["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "B" => "{{{Text_Back}}}"]);
				} else {
					ControllerInfo::SetButtons(["A" => _("Select"), "{{{Const::C_NavInput_ProfileWidget}}}" => "{{{Const::C_Text_ProfileWidget}}}", "{{{Const::C_NavInput_ClubWidget}}}" => "{{{Const::C_Text_ClubWidget}}}", "B" => "{{{Text_Back}}}"]);
				}
				ReportContext::SetMenuSection(System, ReportContext::C_MenuSection_Local);

				// Refresh current focus for TTS
				Focus(Null, {{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}"));
			}
		}
	}
}
foreach (Event in {{{Router::P}}}GetPendingEvents(This)) {
	switch (Event.Type) {
		case "{{{Router::C_Event_LeavingRoute}}}": {
			// Updates the focus when the player is leaving the page to avoid a visible focus update when entering the page
			if ({{{Navigation::P}}}GetFocusedControl(This, "{{{C_NavGroupName}}}") == Button_Back) {
				Focus(Button_Back, Button_PlayMap);
			}
		}
	}
}
***
""",
[
	Transition::ComponentV2(), 
	Navigation::ComponentV2(),
	Button::ComponentV2(),
	ExpendableButton::ComponentV2(),
	Router::ComponentV2(), 
	UserStore::ComponentV2(),
	MenuSounds::ComponentV2()
],
[]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update from the ManiaApp
Void Yield() {
	
}