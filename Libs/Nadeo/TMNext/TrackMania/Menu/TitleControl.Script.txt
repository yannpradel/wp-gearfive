/** 
 *	TitleControl wrapper
 */
#Const Version		"2023-05-24"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/Menu/TitleControl.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Includes
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/CommonLibs/Common/ReportContext.Script.txt" as ReportContext
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const Const::C_ModeNames_ScriptNames as C_ModeNames_ScriptNames

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Open a link
Void OpenLinkReportContext(CManiaApp _Context, Text _Url, CManiaApp::ELinkType _LinkType, Text _LoadingTarget) {
	ReportContext::SetContext(System, ReportContext::C_Context_OpeningLink);
	ReportContext::SetLoadingTarget(System, _LoadingTarget);
	_Context.OpenLink(_Url, _LinkType);
}
Void OpenLinkReportContext(CManiaApp _Context, Text _Url, CManiaApp::ELinkType _LinkType) {
	OpenLinkReportContext(_Context, _Url, _LinkType, ReportContext::C_LoadingTarget_Mode);
}

Boolean IsRoyalScript(Text _Script) {
	return (
		TL::Find(Const::C_ScriptModeName_RoyalOnline, _Script, True, True) ||
		TL::Find(Const::C_ScriptModeName_RoyalTimeAttack, _Script, True, True) ||
		TL::Find(Const::C_ScriptModeName_RoyalValidation, _Script, True, True)
	);
}

Boolean IsRaceScript(Text _Script) {
	return C_ModeNames_ScriptNames.exists(_Script) && !IsRoyalScript(_Script);
}

Text GetMapTypeForScript(Text _Script) {
	if (IsRoyalScript(_Script)) {
		return Const::C_MapType_Royal_NoConcat;
	}
	return Const::C_MapType_Race_NoConcat;
}

Boolean IsRoyalMapType(Text _MapType) {
	return TL::Find(Const::C_ScriptModeName_Royal, _MapType, True, True);
}

Void WaitIsReady(CTitleControl _TitleControl) {
	while (!_TitleControl.IsReady) yield;
}

Void PlayAgainstReplay(CTitleControl _TitleControl, Text _ReplayPath, Text _ModePath, Text _SettingsXml) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_Mode);
	WaitIsReady(_TitleControl);
	_TitleControl.PlayAgainstReplay(_ReplayPath, _ModePath, _SettingsXml);
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void PlayMap(CTitleControl _TitleControl, Text _MapPath, Text _ModePath, Text _SettingsXml) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_Mode);
	WaitIsReady(_TitleControl);
	_TitleControl.PlayMap(_MapPath, _ModePath, _SettingsXml);
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void PlayMapList(CTitleControl _TitleControl, Text[] _MapPathList, Text _ModePath, Text _SettingsXml) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_Mode);
	WaitIsReady(_TitleControl);
	_TitleControl.PlayMapList(_MapPathList, _ModePath, _SettingsXml);
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void PlaySplitScreen(CTitleControl _TitleControl, CTitleControl::ESplitScreenLayout _SplitScreenLayout, Text[] _MapPathList, Text _ModePath, Text _SettingsXml) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_Mode);
	WaitIsReady(_TitleControl);
	_TitleControl.PlaySplitScreen(_SplitScreenLayout, _MapPathList, _ModePath, _SettingsXml);
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void CreateServer(
	CTitleControl _TitleControl,
	Text _Name,
	Text _Comment,
	Integer _MaxPlayerCount,
	Text _PasswordPlayers,
	Text _PasswordSpectators,
	CMatchSettings _MatchSettings,
	Boolean _LocalOnly
) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_Mode);
	WaitIsReady(_TitleControl);
	_TitleControl.CreateServer(_Name, _Comment, _MaxPlayerCount, _PasswordPlayers, _PasswordSpectators, _MatchSettings, _LocalOnly);
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void Join_GetServerInfo_Result(CTitleControl _TitleControl, Boolean _AsSpectator, Text _Password) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_Mode);
	WaitIsReady(_TitleControl);
	_TitleControl.Join_GetServerInfo_Result(_AsSpectator, _Password);
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void EditMap(CTitleControl _TitleControl, Text _MapPath, Text _EditorPluginPath, Text _EditorPluginSettingsXml) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_MapEditor);
	WaitIsReady(_TitleControl);
	_TitleControl.EditMap(_MapPath, _EditorPluginPath, _EditorPluginSettingsXml);
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void EditMap(
	CTitleControl _TitleControl,
	Text _MapPath,
	Text _Mood,
	Text _TextureModPath,
	Text _PlayerModel,
	Text[] _EditorPluginPathList,
	Text[] _EditorPluginSettingsXmlList,
	Boolean _UpgradeToAdvancedEditor,
	Boolean _OnlyUseForcedPlugins
) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_MapEditor);
	WaitIsReady(_TitleControl);
	_TitleControl.EditMap(_MapPath, _Mood, _TextureModPath, _PlayerModel, _EditorPluginPathList, _EditorPluginSettingsXmlList, _UpgradeToAdvancedEditor, _OnlyUseForcedPlugins);
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void EditNewMapFromBaseMap(
	CTitleControl _TitleControl,
	Text _MapPath,
	Text _Mood,
	Text _TextureModPath,
	Text _PlayerModel,
	Text _MapTypePath,
	Text[] _EditorPluginPathList,
	Text[] _EditorPluginSettingsXmlList,
	Boolean _OnlyUseForcedPlugins
) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_MapEditor);
	WaitIsReady(_TitleControl);
	_TitleControl.EditNewMapFromBaseMap(_MapPath, _Mood, _TextureModPath, _PlayerModel, _MapTypePath, _EditorPluginPathList, _EditorPluginSettingsXmlList, _OnlyUseForcedPlugins);
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void EditNewMap(
	CTitleControl _TitleControl,
	Text _Environment,
	Text _Mood,
	Text _TextureModPath,
	Text _PlayerModel,
	Text _MapTypePath,
	Boolean _UseSimpleEditor,
	Text[] _EditorPluginPathList,
	Text[] _EditorPluginSettingsXmlList,
	Boolean _OnlyUseForcedPlugins
) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_MapEditor);
	WaitIsReady(_TitleControl);
	_TitleControl.EditNewMap(_Environment, _Mood, _TextureModPath, _PlayerModel, _MapTypePath, _UseSimpleEditor, _EditorPluginPathList, _EditorPluginSettingsXmlList, _OnlyUseForcedPlugins);
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void EditReplay(CTitleControl _TitleControl, Text[] _ReplayPathList, CTitleControl::EReplayEditType _EditType) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_ReplayEditor);
	WaitIsReady(_TitleControl);
	_TitleControl.EditReplay(_ReplayPathList, _EditType);
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void EditSkins(CTitleControl _TitleControl) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_SkinEditor);
	WaitIsReady(_TitleControl);
	_TitleControl.EditSkins();
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void EditSkinsFromFileName(CTitleControl _TitleControl, Text _SkinPath) {
	ReportContext::SetContext(System, ReportContext::C_Context_Loading);
	ReportContext::SetLoadingTarget(System, ReportContext::C_LoadingTarget_SkinEditor);
	WaitIsReady(_TitleControl);
	_TitleControl.EditSkinsFromFileName(_SkinPath);
	WaitIsReady(_TitleControl);
	ReportContext::SetContext(System, ReportContext::C_Context_Menu);
}

Void OpenLinkAndWait(CMlScript _Context, CTitleControl _TitleControl, Text _Url, CMlScript::LinkType _LinkType, Text  _LoadingTarget) {
	ReportContext::SetContext(System, ReportContext::C_Context_OpeningLink);
	ReportContext::SetLoadingTarget(System, _LoadingTarget);
	WaitIsReady(_TitleControl); //< For backward compatibility
	_Context.OpenLink(_Url, _LinkType);
	WaitIsReady(_TitleControl); //< For backward compatibility
}
Void OpenLinkAndWait(CMlScript _Context, CTitleControl _TitleControl, Text _Url, CMlScript::LinkType _LinkType) {
	OpenLinkAndWait(_Context, _TitleControl, _Url, _LinkType, ReportContext::C_LoadingTarget_Mode);
}