/** 
 * Menu to be showned after the save
 */
#Const Version		"2022-08-22"
#Const ScriptName	"Libs/Nadeo/TMNext/MapEditor/MenuAfterSave.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "ManiaApps/Nadeo/CommonLibs/Common/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/MenuLibs/Common/FontManager.Script.txt" as FontManager
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/Navigation.Script.txt" as Navigation
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/Button.Script.txt" as Button
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Components/ExpendableButton.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/Helpers.Script.txt" as MLHelpers

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_LayerName "MenuAfterSave"
#Const C_NavGroupName "navgroup-plugin-menuaftersave"
#Const C_Class_Shadow "class-shadow"

#Const C_Event_PlayLocal "MenuAfterSave_Event_PlayLocal"
#Const C_Event_StayInEditor "MenuAfterSave_Event_StayInEditor"
#Const C_Event_LiveTest "MenuAfterSave_Event_LiveTest"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the page manialink
 *
 *	@return														The page manialink
 */
Text GetManialink() {
	//L16N Do not translate HotSeat
	declare Text LabelHotseat = _("Play HotSeat");
	//L16N [AfterMapValidation] Put the map in the Server Review so players can live test and rate it
	declare Text Text_LiveTest = _("Live test");

	declare Vec2 Size_HorizontalButton =  MLHelpers::KeepRatioFromY(1232., 556., 46.3);

	return MV::Create(
C_LayerName, 3,
"""
<stylesheet>
	<style class="quad-base" halign="center" valign="center"/>
	<style class="label-base" halign="center" valign="center2" textfont="{{{FontManager::C_GameFontExtraBold}}}" textsize="5" textprefix="$t$i" italicslope=".2" textcolor="FFF" />
</stylesheet>

<frame id="frame-global" z-index="10">
	<quad size="320 180" class="quad-base" bgcolor="{{{ColorPalette::C_Color_GreenFive}}}" opacity="0.5" fullscreen="1" z-index="-1" />

	<frameinstance 
		modelid="{{{Button::C_Name}}}" id="button-hotseat" pos="-49 0"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{LabelHotseat}}}"
		data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
		data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
		data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
		data-image="{{{Const::C_ImageUrl_HotSeat_Horizontal}}}"
		data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
		data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
		data-contouropacityunfocus=".0"
		data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
		data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
		data-gradientopacityunfocus="0.5"
		data-gradientopacityfocus="0."
		data-textsize="5"
		data-texthalign="left"
		data-textitalicslope=".2"
		data-textxpos="0.1" data-textypos="-0.17"
		data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
		data-valign="center" data-halign="center"
		data-tilthitbox="10"
		data-nav-inputs="select;cancel;right;left;down"
		data-nav-targets="_;_;button-track-review;button-back;button-back"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
	/>

	<frameinstance 
		modelid="{{{Button::C_Name}}}" id="button-track-review" pos="50 0"
		class="{{{Navigation::C_Class}}}"
		data-text="{{{Text_LiveTest}}}"
		data-size="{{{Size_HorizontalButton.X}}} {{{Size_HorizontalButton.Y}}}"
		data-labelsize="{{{Size_HorizontalButton.X*0.8}}} 10"
		data-backgroundcolortype="{{{Button::C_ColorType_None}}}"
		data-image="{{{Const::C_ImageUrl_MapReview_YourMap}}}"
		data-contourimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Contour}}}"
		data-contourimagecolor="{{{ColorPalette::C_Color_White}}}"
		data-contouropacityunfocus=".0"
		data-gradientimage="{{{Const::C_ImageUrl_Common_HorizontalButton_Gradient}}}"
		data-gradientimagecolor="{{{ColorPalette::C_Color_DarkBlue}}}"
		data-gradientopacityunfocus="0.5"
		data-gradientopacityfocus="0."
		data-textsize="5"
		data-texthalign="left"
		data-textitalicslope=".2"
		data-textxpos="0.1" data-textypos="-0.17"
		data-textfont="{{{FontManager::C_GameFontExtraBold}}}"
		data-valign="center" data-halign="center"
		data-tilthitbox="10"
		data-nav-inputs="select;cancel;left;down"
		data-nav-targets="_;_;button-hotseat;button-back"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{Button::C_NavZone}}}"
	/>

	<frameinstance
		id="button-back"
		modelid="{{{ExpendableButton::C_Name}}}"
		class="{{{Navigation::C_Class}}}"
		pos="-151.5 -73"
		data-styles="{{{ExpendableButton::C_Style_SizeExpendable}}} {{{ExpendableButton::C_Style_AlignCenter}}} {{{ExpendableButton::C_Style_PageBack}}}"
		data-nav-inputs="select;cancel;up;right"
		data-nav-targets="_;_;button-hotseat;button-hotseat"
		data-nav-group="{{{C_NavGroupName}}}"
		data-nav-zone="{{{ExpendableButton::C_NavZone}}}"
	/>

</frame>
""",
"""
""",
"""
Void Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		{{{Navigation::P}}}Unfocus(This, _From);
		if ({{{Button::P}}}IsButton(_From)) {
			{{{Button::P}}}Unfocus(This, (_From as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_From)) {
			{{{ExpendableButton::P}}}Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		{{{Navigation::P}}}Focus(This, _To);
		if ({{{Button::P}}}IsButton(_To)) {
			{{{Button::P}}}Focus(This, (_To as CMlFrame));
		} else if ({{{ExpendableButton::P}}}IsButton(_To)) {
			{{{ExpendableButton::P}}}Focus(This, (_To as CMlFrame));
		}
	}
}

Void Select(CMlControl _Control) {
	if (_Control == Null) return;

	switch (_Control.ControlId) {
		case "button-hotseat": SendCustomEvent("{{{C_Event_PlayLocal}}}", []);
		case "button-track-review": SendCustomEvent("{{{C_Event_LiveTest}}}", []);
		case "button-back": SendCustomEvent("{{{C_Event_StayInEditor}}}", []);
	}
}

***MainInit***
***
declare CMlFrame Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
declare CMlFrame Button_Back <=> (Frame_Global.GetFirstChild("button-back") as CMlFrame);
declare CMlFrame Button_PlayLocal <=> (Frame_Global.GetFirstChild("button-hotseat") as CMlFrame);

declare Integer EndTimeAnimation;
declare Boolean PageWasVisible;
***

***MainStart***
***
EndTimeAnimation = -1;
***

***MainLoop***
***
if (PageWasVisible != PageIsVisible) {
	PageWasVisible = PageIsVisible;
	if (PageIsVisible) Focus({{{Navigation::P}}}GetFocusedControl(This), Button_PlayLocal);
	else Focus(Button_Back, Null);
}

if (PageIsVisible) {
	foreach (Event in {{{Navigation::P}}}GetPendingEvents(This)) {
		switch (Event.Type) {
			case {{{Navigation::P}}}C_EventType_NavigateInput: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						Select(Event.To);
					} else {
						Focus(Event.From, Event.To);
					}
				}
			}
			case {{{Navigation::P}}}C_EventType_NavigateMouse: {
				if ({{{Navigation::P}}}IsEventFromGroup(This, Event, "{{{C_NavGroupName}}}")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						Select(Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}
}
***
""",
[Navigation::ComponentV2(), ExpendableButton::ComponentV2(), Button::ComponentV2()],
[]
	);
}

Void Unload() {
	Layers::Destroy(C_LayerName);
}

Void Load() {
	Unload();
	
	Layers::Create(C_LayerName, GetManialink());
	declare CUILayer LayerMenu <=> Layers::Get(C_LayerName);
	Layers::Hide(C_LayerName);
}